{
    "tLewisII": "So you have user generated endpoints?\n. You could do two sort of things, if I am understanding correctly. Have an enum that defines every endpoint, or pieces of an endpoint, which may be super huge, something like:\nswift\nenum EndpointPiece:String {\n    case Base = \"http://rdjpg.com/\"\n    case TwoHundred = \"200/\"\n    case ThreeHundred = \"300/\"\n    ....\n}\nAnd then have methods to concatenate them to form an actual endpoint. This may give you the closest thing to type safety.\nOr you could have a protocol like so:\n``` swift\nprotocol EndPoint {\n    typealias E\n    func endPoint(point:String) -> E\n}\n```\nAnd then only take objects conforming to the EndPoint protocol, so endpoints would at least have to be constructed out of structs or objects, and not just defined as strings all over the place.\n. A more correct protocol:\n``` swift\nprotocol EndPoint {\n    func endPoint() -> String\n}\n```\n. ",
    "ashfurrow": "I have endpoints generated by the user of the library, another developer. The user of an app can't define any. \n. I really, realy dig these. We could even go further and abstract away the need for a URL string, which would decouple its 1-1 relationship with an endpoint. That way, you could provide a different URL depending on parameters, etc. I'll put together a pull request. \n. Cool. Take a look at #6 and let me know what you think. \n. In order to keep track of inflight requests, we need some way of comparing endpoints. Which is kind of hard since endpoints have that tricky [String: AnyObject] property named parameters. So how do we compare Things that wrap AnyObject?\nWell, I feel like we have a few different options. First, we could restrict the values in the parameters dictionary to objects that conform to the Hashable protocol, which I've tried before and it gets super, super messy. Another option is to generate an NSURLRequest from the endpoint, which can be compared easily (comparing URL, HTTPBody and HTTPMethod, and possibly allHTTPHeaderFields should do it, though that last one is another [String: AnyObject] dictionary :confused:). This approach has the disadvantage of repeating work that's done in Alamofire anyway. Not sure where to go on this one. Will think about it more. \n. In order to keep track of inflight requests, we need some way of comparing endpoints. Which is kind of hard since endpoints have that tricky [String: AnyObject] property named parameters. So how do we compare Things that wrap AnyObject?\nWell, I feel like we have a few different options. First, we could restrict the values in the parameters dictionary to objects that conform to the Hashable protocol, which I've tried before and it gets super, super messy. Another option is to generate an NSURLRequest from the endpoint, which can be compared easily (comparing URL, HTTPBody and HTTPMethod, and possibly allHTTPHeaderFields should do it, though that last one is another [String: AnyObject] dictionary :confused:). This approach has the disadvantage of repeating work that's done in Alamofire anyway. Not sure where to go on this one. Will think about it more. \n. Duh \u2013 NSURLRequest can just be compared using isEqual:. Well, this was going to be my implementation: \n``` swift\npublic func ==(lhs: NSURLRequest, rhs: NSURLRequest) -> Bool {\n    func objectsAreEqual(leftValue: AnyObject, rightValue: AnyObject) -> Bool {\n        if leftValue is NSObject && rightValue is NSObject {\n            // This is most of the time \u2013 it'll be rare that we see Swift-only objects in an HTTP header field\n            return (leftValue as NSObject).isEqual(rightValue as NSObject)\n        } else if (leftValue is NSObject || rightValue is NSObject) {\n            // Necessarily false, since one is an NSObject subclass and the other is not\n            return false\n        } else {\n            // There's no way to check for conformance to non-ObjC protocols, so we need to resort to this\n            // Fine, since Alamofire does this when encoding, anyway\n            return \"(leftValue)\" == \"(rightValue)\"\n        }\n    }\nfunc dictionariesAreEqual(leftDictionary: [NSObject: AnyObject], rightDictionary: [NSObject: AnyObject]) -> Bool {\n    for (key, leftValue: AnyObject) in leftDictionary {\n        if let rightValue: AnyObject = rightDictionary[key] {\n            if !objectsAreEqual(leftValue, rightValue) {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nlet equalURLs = (lhs.URL.absoluteString ?? \"\") == (rhs.URL.absoluteString ?? \"\")\nlet equalBodies = (lhs.HTTPBody ?? NSData()).isEqualToData(rhs.HTTPBody ?? NSData())\nvar equalFields = { () -> (Bool) in\n    switch (lhs.allHTTPHeaderFields, rhs.allHTTPHeaderFields) {\n    case (nil, nil):\n        return true\n    case (let leftFields, nil) where leftFields != nil:\n        return false\n    case (nil, let rightFields) where rightFields != nil:\n        return false\n    case let (leftFields, rightFields):\n        return dictionariesAreEqual(leftFields!, rightFields!)\n    }\n    }()\n\nreturn equalURLs && equalBodies && equalFields\n\n}\nextension NSURLRequest: Equatable {\n}\n```\nMaybe someone else can make use of that code someday. \n. Duh \u2013 NSURLRequest can just be compared using isEqual:. Well, this was going to be my implementation: \n``` swift\npublic func ==(lhs: NSURLRequest, rhs: NSURLRequest) -> Bool {\n    func objectsAreEqual(leftValue: AnyObject, rightValue: AnyObject) -> Bool {\n        if leftValue is NSObject && rightValue is NSObject {\n            // This is most of the time \u2013 it'll be rare that we see Swift-only objects in an HTTP header field\n            return (leftValue as NSObject).isEqual(rightValue as NSObject)\n        } else if (leftValue is NSObject || rightValue is NSObject) {\n            // Necessarily false, since one is an NSObject subclass and the other is not\n            return false\n        } else {\n            // There's no way to check for conformance to non-ObjC protocols, so we need to resort to this\n            // Fine, since Alamofire does this when encoding, anyway\n            return \"(leftValue)\" == \"(rightValue)\"\n        }\n    }\nfunc dictionariesAreEqual(leftDictionary: [NSObject: AnyObject], rightDictionary: [NSObject: AnyObject]) -> Bool {\n    for (key, leftValue: AnyObject) in leftDictionary {\n        if let rightValue: AnyObject = rightDictionary[key] {\n            if !objectsAreEqual(leftValue, rightValue) {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nlet equalURLs = (lhs.URL.absoluteString ?? \"\") == (rhs.URL.absoluteString ?? \"\")\nlet equalBodies = (lhs.HTTPBody ?? NSData()).isEqualToData(rhs.HTTPBody ?? NSData())\nvar equalFields = { () -> (Bool) in\n    switch (lhs.allHTTPHeaderFields, rhs.allHTTPHeaderFields) {\n    case (nil, nil):\n        return true\n    case (let leftFields, nil) where leftFields != nil:\n        return false\n    case (nil, let rightFields) where rightFields != nil:\n        return false\n    case let (leftFields, rightFields):\n        return dictionariesAreEqual(leftFields!, rightFields!)\n    }\n    }()\n\nreturn equalURLs && equalBodies && equalFields\n\n}\nextension NSURLRequest: Equatable {\n}\n```\nMaybe someone else can make use of that code someday. \n. I mean, I'm just going to assume that Alamofire is following best practices. No need for this. \n. Yeah, I really like this. Merging. \n. Alamofire doesn't seem to expose the NSURLRequests, which is probably a good thing. I can't think of non-HTTP-auth schemes that would require it, anyway. For OAuth, you could provide just a single closure when setting up the provider that could be responsible for modifying (or returning a new) Endpoint with the parameters to authenticate with the API. \nThat would get tricky with #3, since comparing parameters for signed requests would almost certainly always fail. So we'd want to use the Endpoint returned by the block for the actual request, but associate the request with the original one. \nWe should also provide optional hooks into Alamofire for things like redirect requests or auth challenges. \n. Hmm. Maybe something like a RACSignal operator? Like this:\nswift\nprovider.request(.Whatever).processJSON().subscribeNext({ ... })\nWe could define some built-in operators for passing along images, JSON, basically whatever Alamofire does. Users of the library could write their own. \nIt's a bit of duplicated work, since Alamofire does a lot of this already, but it doesn't look like too much code. \n. Since the use of ReactiveCocoa is now optional, maybe specify a value transforming-closure as part of the Endpoint instance?\n. Going to abandon this in favour of #35. It's trivial to write JSON-, String-, or UIImage-parsing. If someone has any ideas on this, I'd be happy to hear them or review a PR :)\n. Going to abandon this in favour of #35. It's trivial to write JSON-, String-, or UIImage-parsing. If someone has any ideas on this, I'd be happy to hear them or review a PR :)\n. We need to make the Endpoint class conform to Hashable protocol (and, by extension, Equatable). The idea is that if you pass back an equivalent Endpoint instance to one that has a request inflight, then we can just return the existing signal that you can subscribe to or whatever. \nThe problem becomes apparent when you try and figure out what \"equatable\" means for an Endpoint instance. URLs should match, obviously, and methods, too, but what about the parameters? \nAn easy way out would be to just make the sample responses' return values conform to Hashable and compare those, but I don't like making sample responses part of the main functionality of the library; they're meant to just be for testing. \n. Since we've moved from a Swift class extension to a subclass (due to a linker bug), we don't have to rely on this approach. That's probably a good thing, since having @objc before my class declarations kinda sucked. \n. Since we've moved from a Swift class extension to a subclass (due to a linker bug), we don't have to rely on this approach. That's probably a good thing, since having @objc before my class declarations kinda sucked. \n. Also: http://chris.eidhof.nl/posts/typesafe-url-routes-in-swift.html\n. Fixes with #18.\n. Since that bug isn't gonna be fixed before at least the next beta, let's put a pin in the ReactiveCocoa extensions for now. I've added instructions for a workaround. \n. Hold up, that's stupid. Let's just extend the MoyaProvider class instead of using a class extension. \n. Ha, oops. Sorry about that! That image is sadly being removed anyway in #21, but it's good to merge. \n. So the question is, do we need a closure to return the endpoint. I personally like it because it allows you to intercept stuff and modify things, but people have said it's weird. Thoughts anyone?\n. Good to go. Let me know what you think. \n. Hmm. Just occurred to me that this still doesn't provide access to the HTTP header fields, which Alamofire currently doesn't do, either. I've got a solution for this that'll make #3 easier, too. Will submit another PR soon. \n. As promised: #32 \n. :+1:\n. Oops - thanks! \n. For the reactive providers, this'll require some consideration and possibly breaking API changes. \n. @powerje good idea; opened an issue here: https://github.com/AshFurrow/Moya/issues/46\n. Hmm. Making tracking inflight request signals tricky ...\n. @powerje Awesome, looks great! I see you updated the sample app, too. My bad for letting it get out of date \u2013 thanks! \nCould you add a line to the changelog specifying what was done and your GitHub username for credit? \nSo maybe modify failureEndpointsClosure to return a 401 error code (or whatever), then add something like this to the MoyaProviderSpec:\n``` swift\ndescribe(\"a failing reactive provider\") {\n    var provider: ReactiveMoyaProvider!\n    beforeEach {\n        provider = ReactiveMoyaProvider(endpointsClosure: failureEndpointsClosure, stubResponses: true)\n    }\nit(\"returns the HTTP status code as the error code\") {\n    var code: Int?\n\n    provider.request(.Zen).subscribeError({ (error) -> Void in\n        code = error.code\n    })\n\n    expect(code).toNot(beNil())\n    expect(code).to(equal(401))\n}\n\n}\n```\nThanks again!\n. @plasmaphonic hey there \u2013 I've opened https://github.com/AshFurrow/Moya/issues/51 in order to help answer your question. \n. Bedankt!\n. Rolling into #123. \n. Will do. \n. Hmm this is a good question. I'll double-check. \n. Yeah good catch. Updated now. \n. Ah, interesting. So to decouple the creation of the target from the stubbed responses. It kind of violates a bit of the functional-ness of everything, and the purpose really is so the SUTs have access to stubbed responses without being any the wiser. \nI can see a potentially better option with something like the following maybe? \nswift\n// Inside an it closure\nProvider.sharedProvider = networkProvider.responseString(.Auctions) { \"{'foo': 'bar'}\" }\nThe responseString method could return a wrapped MoyaProvider so that the original instance remains unmodified. You could even chain subsequent calls to responseString to re-stub multiple methods. Would that solve the issue, and further more, would this be a supplement to or a replacement of the existing stubbing methods? \n. Well, for the 1.0 release, we moved sampleData to be a closure that returns data, so it could return different things on different invocations. I know it's not enough, but it might help, and might help figure out better ideas. \n. I'm thinking we'll have a new initializer that does two things: \n- accepts an argument of some kind of representation of new stubbing behaviour to be defined.\n- sets a private/internal property \u2013 something like a \"parent provider\" that, when performing requests, would call through to the parent if the request didn't meet the newly added stubbing behaviour. \nIn this way, you could chain things together, and every request would start at the bottom and work its way up:\nswift\nlet newProvider = provider.addStubbing(someRequest)\n    .addStubbing(someOtherRequest)\n    .addStubbing(someFinalRequest)\nOr something like that. Does anyone have idea thoughts on this approach?\n. I was thinking more like you would need to specify both a target and an EndpointSampleResponse to accompany it. \nswift\nlet request = Api.Status\nlet response = EndpointSampleResponse.Success(200, { /* Some sample data here */ })\nlet newProvider = provider.addStubbedResponse(response, forRequest: request)\nOr something to that effect. \n. I'm thinking that the stubbed responses would be used for any request matching that Api enum. This makes sense to me as a simple use case, which is what this would provide. \nIt's already possible to create this behaviour using custom endpoint resolvers that are passed into the MoyaProvider initializer. What this feature would do, in my mind, would let you have a sort of shorthand for this where only one or two requests need to be stubbed differently, for a specific test case. \nDoes that make sense? So something like you have would work-ish, but the behaviour would be more consistent with the default Moya stubbing behaviour. \n. Neat, I hadn't even considered marchers for Moya. I was only thinking of functional or view snapshot tests. The idea of testing that a request was made... hmm. Sounds useful, but is it something to encourage? \nLike, it's possible now for sure, but a bit of work. I can't think of many scenarios where testing that a request was made would be more ideal than testing the actions based on the network response. Does that make sense? Curious about the use case. \n. This is really caused by https://github.com/ashfurrow/Moya/issues/78 \u2013 the errors should only send when Alamofire indicates a true network error occurred. A 401 is, from Moya's perspective, a perfectly acceptable response, and it's up to the subscriber to filter out unsuccessful status codes. \n. Cool. Can you make a note in the changelog?\n. Also does this require an Alamofire update? \n. \n. :fire:\n. I think in this case, you'd have two separate entries in your targets enum. Would that solve the issue? \n. So talked this over with @orta and we've come to the conclusion that, in addition to specifying the path for a target, you should specify a HTTP method. Moving this to 1.0. \n. This should actually be solvable with the existing API. Make a method on the enum called defaultParameters that can create a dictionary with the required parameters, then call that when invoking the API endpoint. For parameters attached to the enum value, just ignore them in the MoyaPath extension path property. \n. Closing this as it's possible to do currently:\n```\nprivate static var endpointsClosure = { (target: ArtsyAPI, method: Moya.Method, parameters: [String: AnyObject]) -> Endpoint in      \n    var endpoint: Endpoint = Endpoint(URL: url(target), sampleResponse: .Success(200, target.sampleData), method: method, parameters: parameters)\n// target-specific parameters\nswitch target {\ncase .FindBidderRegistration(let auctionID, let phone):\n    endpoint = endpoint.endpointByAddingParameters([\"sale_id\": auctionID, \"phone\": phone])\ndefault:\n    // Need at least one statement to appese the compiler\n    _ = endpoint\n}\n\nreturn endpoint\n\n}\n```\n. Well, when we said that stubbed data would be a first-class citizen, we really meant it! \nIt is strange that the Endpoint requires the sample data for creation, which could impact the memory footprint of a production app if the sample data is large or there are many network requests at once (since an Endpoint instance with its own data is created for each network request). \nI think that this is important enough to warrant inclusion in a 1.0 release. My thoughts on solving it are to change the EndpointSampleResponse.Success type to not include an NSData field, but instead a closure that returns an NSData instance. That way it won't be evaluated for non-stubbed providers and won't take up memory. Does that sound good? \n. This is fixed with the new .Closure type of the sample response enum :+1:\n. Hmm. Is it possible that the version of Alamofire is newer than the submodule in this repo? \n. OK, cool, well then it's on me to update our version. I'm pretty busy for the next day or so, so if you submitted a pull request, that would be welcome. Otherwise, I'll update it tomorrow. \n. That would be awesome! If you do, make a note of it in the changelog, too!\n. It is strictly for callers or subclasses, to avoid having an optional parameter. You can see it used here in a subclass. \nIt's not documented anywhere, though it should be, but the \"Moya\" way to do this is to define a defaultParameters property on the enum (here is an example), and then you have a few options. At Artsy, we explicitly pass in our own properties or the default ones any time we make a request (see this example). Alternatively, in the endpointsClosure used when creating the MoyaProvider, your mapping can pass in the parameters:\n``` swift\nlet endpointsClosure = { (target: ArtsyAPI, method: Moya.Method, parameters: [String: AnyObject]) -> Endpoint in\n    let endpoint: Endpoint = Endpoint(URL: url(target), sampleResponse: .Success(200, target.sampleData), method: method, parameters: parameters)\nreturn endpoint.endpointByAddingParameters(target.defaultParameters)\n}\n\n}\nlet provider = MoyaProvider(endpointsClosure: endpointsClosure)\n```\nYou could even have an endpointsClosure that always used the default parameters unless the caller had included ones that overrode them, which is probably the best idea now that I think of it. Something to consider for the future. \nDoes that answer your question?\n. Agreed, I've opened https://github.com/AshFurrow/Moya/issues/68\n. Just an update, I've written some documentation here: https://github.com/AshFurrow/Moya/pull/75\nAlso I've been thinking about making defaultParameters part of the target requirements. Would love input: https://github.com/AshFurrow/Moya/issues/74\n. Thanks! :beers:\n. This was fixed here: https://github.com/ashfurrow/Moya/commit/abaf6cb0adaf\n. :+1:\n. Thanks! :beers:\n. Very cool \u2013 let me know if I can be of any assistance. My next big push on Moya is https://github.com/AshFurrow/Moya/issues/68 , so your experience with this might be helpful. \n. I don't even know what swagger is \u2013 so I'll check it out. \n. @lkuczborski I can take a look, want to point me to a PR or something? \n. Will try to take a look tomorrow and let you know :+1: \n. @lkuczborski Hey there! Apologies for the delay \u2013 I've taken a look and it all seems :100: to me. Note: I am not an Paw extension expert :grimacing: But from a Moya perspective it all looks :+1: \n. So have request return something that has a get function on it, and delay the execution of the request until it's invoked? \n. So the default parameters will be merged with the ones provided by the caller, I think. That way API calls needing parameters only have to manage them once instead of every API call. This calculation should be as part of the target enum, just like the path. \nI think Orta's suggestion would make sense if we weren't making HTTP methods part of the API.\n. :green_apple: \n. MoyaResponse just needs to subclass NSObject so that RAC's rac_description category method is available on it. \n. To be honest, I've been really busy. I'd gladly merge a pull request, though. \n. Definitely the oops \u2013 thanks! \n. Closing in favour of #123. \n. Currently waiting on some updates to Jazzy for our pods-based build configuration, which @jpsim is working on. \n. Oh, haha, I just needed to get JP a copy of the complete project so he wouldn't need the custom cocoapods install. I'll probably revert the commit. \n. :+1: \n. Thanks! :beers: \n. Awesome \u2013 figured that was the issue (I'm on vacation atm, otherwise I would've replied earlier). I'll change and let you know. \n. Thanks @ryancrosby !\n. You should be good now. \n. This might help. \n. Cool! \nSo Moya doesn't have Swift 1.2 support yet because I'm still stuck on Swift 1.1. A PR onto the swift-1.2 branch would be :+1: \nAs for Carthage, I'm amenable to Carthage support for Moya \u2013 it's just been that no one has asked for it yet. Someone tried once but apparently it was really hard? I dunno. If you want to send a separate PR for that (onto master), that would also be welcome!\n\n. Hey @te-chris! A new issue would be very much appreciated. Thanks! \n. Awesome! I'm wary about having two different demo projects. Would it be possible to have two projects that point to the same .swift files? \n. Maybe even the different targets in the same project? \n. Closing this in favour of the solution discussed here. \n. I'll take a look tomorrow. \n. Or whenever. Soon, though. \n. Hard to get a feel of this from the PR \u2013 can you high-level it for me? Does it still run all of the tests? \n. Hmmm. I obviously fall on one side of this, but I think it's important to look at this like a library author. If the author uses CocoaPods, then they'll probably support CocoaPods with their libraries. Likewise with Carthage or even (shudders) submodules. \nMe, I use CocoaPods for my apps, so when I need to use Moya, I need it available as a pod. \n@swizzlr Can you high-level this for me? What's the problem? CocoaPods just lists the files and the dependencies \u2013 it doesn't require a project file. So if Carthage does, fine, let's include one or whatever it needs, but I want to run my demo app and unit testing project using CocoaPods. I thought the point of Carthage was that I could define my dependencies in a text file or something? If I have to still include submodules, then what's the point? \n. @swizzlr Hey t-swizzle \u2013 any update on this? Dunno what to do with it. \n. Cooooool :palm_tree: \n. This is likely an issue that CocoaPods is having with signing frameworks (the PR is here). CocoaPods with Swift support is still prerelease, remember. \nYou've got essentially two options: try and update CocoaPods to see if the latest version will support deploying (I honestly don't know), or change to use Moya as a submodule for now (this is what I had to do about a week ago \u2013 and it broke my heart a little). \nIf you have questions regarding either option, let me know here and I'll do my best to answer them. \n. We created a branch from the commit just before we switched to CocoaPods and cherry-picked the commits we needed from after we switched. You can check out the branch here: https://github.com/artsy/eidolon/tree/si-deploy\n. Should be done now. Please reopen if not. \n. Hi there! Thanks for opening this. Can you clarify where this link is? I can't seem to find it. \n. Ah, gotcha. I will fix that. \nThe two readme's serve different purposes \u2013 the other one is only named a readme because GitHub will render it as markdown when looking at the \"docs\" folder. \n. Hi there! Got your email too. I'll take a look as soon as I can. Happy holidays!\n. Hmm. Eidolon uses the default parameter encoding, so it won't be much help. I'm trying out your sample code now and I'll let you know what I find. \n. OK, I think I've got things working. First, the URLRequestConvertible actually belongs to Alamofire, so you need to have import Alamofire at the top of your file. This is a leaky abstraction on my part \u2013 I'll open an issue.\nOK, so now for some Swift stuff. The syntax surrounding closures as variables is ... not intuitive :smile: I played around with things until I got the following to work: \n``` swift\nlet xmlParameterEncoding: (URLRequestConvertible, [String: AnyObject]?) -> (NSURLRequest, NSError?) = { convertible, parameters -> (NSURLRequest, NSError?) in\n    //this is just to get things working\n    return (convertible.URLRequest, nil)\n}\nlet closure = { (target: EyeQEndPoints, method: Moya.Method, parameters: [String: AnyObject]) -> Endpoint< EyeQEndPoints> in\n    return Endpoint< EyeQEndPoints>(URL: url(target), sampleResponse: .Success(200, target.sampleData), method: method, parameters: parameters, parameterEncoding: Moya.ParameterEncoding.Custom(xmlParameterEncoding))\n}\nlet abcd = MoyaProvider(endpointsClosure: closure )\n```\nA few important notes: the xmlParameterEncoding closure has the variables names, not types, after the {, and I had to fully qualify  the .Custom with Moya.ParameterEncoding, since Alamofire exposes an identical enum with the same name. \nBut that should do it! Let me know if I can clarify anything. \n. Awesome! I'll close this. Feel free to reopen or open a new issue if you have other questions. \n. Done. \n. Awesome! Thanks so much, @steam!\nThe CI failure is not your fault \u2013 I'll get it fixed up ASAP. Could you write a quick test or two on your end for the new NSData associated value? \n. Nah, not fixed yet, but this looks awesome! :beers:\n. Thanks @jspahrsummers !\n. Not sure. Any suggestion, @jspahrsummers? \n. I can see the value in making sure that the network code is run asynchronously, but tying your network callbacks to the assumption that they'll have a short, undetermined delay is probably not the best practice to be encouraging. \nSo maybe not a delay, but some kind of mechanism to defer to the next invocation of the runloop? \n. Very good point \u2013 I hadn't considered stubs much outside a testing context. This is a great idea. I'll look into it more. \n. Yeah, we stub responses based on a heuristic to check if you have access to the API or not. I can also see it being valuable in rapid application prototyping, where the API isn't ready or stable yet. Thinking of adding a(n optional?) property to the enum protocol that allows developers to specify a delay. Thoughts? \n. We can use an enum with associated values. Something like:\nswft\nenum StubBehavior {\n    case .Immediate\n    case .Delay(seconds: Int)\n}\n. Went with this implementation (using an optional) instead of a default value (like in the endpoints resolver closure) because the optional behaviour is so trivial, it's replaced with only a single coalescing operator. Thought a default value would be overkill. \n. Changed my mind about the \"overkill\" thing \u2013 this is more expressible. Adds tests, updates Quick+Nimble. \n. @orta Free to merge whenevs. \n. Cool, looks great! I'll add a test to verify the app no longer crashes later, unless you send another PR before then :)\n:beers: \n. That's strange, it shouldn't complain at all. If you look in the unit tests, you'll find code like the following that works fine: \nswift\nlet target: GitHub = .Zen\nprovider.request(target, completion: { (data, statusCode, response, error) in\n    if let data = data {\n        // ...\n    }\n})\nIt's very strange that you're seeing this error, and I'd really appreciate your help in tracking down what's going on. The first thing I'd like you to do is make sure that you're on the latest version of Moya (since we've added a few parameters to the completion handler \u2013 something also not added to the readme yet oops). Next, if you're still seeing the error, could I ask you to upload a sample project somewhere? One that demonstrates the error \u2013 that way we can troubleshoot what's going on and get a fix for everyone. \nThanks again for bringing this to my attention, and I'm sorry I couldn't answer earlier \u2013 I was at a conference all weekend. \nThanks! :beers:\n. Sorry this took so long \u2013 thanks again for your help! :bamboo: \n. Cool \u2013 please feel free to open up another issue if you have any questions or want clarification on anything. \n. @colinta Hey! Sorry I haven't reviewed this yet. I just moved from Amsterdam to New York and some things have fallen between the cracks. I'll get to it ASAP \u2013 thanks for contributing!\n. Looks great! Tests would be :+1: Let me know if I can help getting them running on your machine. \n. Hmm. To be honest, I'm totally cool with breaking changes, so don't worry about it. We're versioning the library so people can update if/when they want to. \nI don't know if @autoclosure is going to work going forward. Swift 1.2 changes the semantics surrounding this construct such that these types of closures cant be stored for later \u2013 they must be executed immediately (as far as I understand it). I think moving to a pure closure would be OK. \n. Oh, and bundle exec pod install or just pod install should fix the error with testing. \n. What folder are you running it from? \n. Try it in the Demo directory, where the Podfile is. \n. I think the first option, adding a new case to the enum, would be awesome. Avoiding @autoclosure seems to be a good idea for now. Let me know if I can help!\n. @alloy? Only on Slack :) I've left Amsterdam, sadly. \n. Looks awesome! \n. Cool! @kylef has a cool repo. Maybe we could use it, or even borrow ideas from it: https://github.com/kylef/WebLinking.swift\n. Could use the representor pattern too. Some closure that can return a(n optional?) new endpoint based on the previous response. This kind of thing would be really easy with the ReactiveCocoa extension: the signal for the initial request could emit another signal for a follow-up or something. \n. This should be fixed with this issue, which makes parameters like the ones you've discussed part of the target protocol. \n. Interesting! I think this comes down to a couple things:\n- Do redirected responses contain a response body?\n- Does Alamofire handle redirects transparently?\nI believe the answer to the first question depends on your server/API. I don't know the answer to the second question. @kylef ?\nDo you think having something like filterSuccessfulStatusAndRedirectCodes would be worth it? \n. Sounds good! \n. The ReactiveCocoa version requires a specific version of LlamaKit; you'll need to use the same version in your Podfile. \n. The ReactiveCocoa version requires a specific version of LlamaKit; you'll need to use the same version in your Podfile. \n. Ah, apologies. The README looks out of date. Only include the pod names and not their :git components. \n. Ah, apologies. The README looks out of date. Only include the pod names and not their :git components. \n. I'll update the README soon. \n. I'll update the README soon. \n. Wonderful \u2013 at it's tested :heart_eyes_cat: \n. Wonderful \u2013 at it's tested :heart_eyes_cat: \n. Hey! These have been merged in. I updated the dependency on ReactiveCocoa on CocoaPods trunk. I don't have access to do so with Alamofire, our other dependency, so you need to have a Podfile that declares you're using their pre-release version first.\n``` rb\npod 'Alamofire', :git => 'https://github.com/Alamofire/Alamofire.git', :branch => 'xcode-6.3'\npod 'Moya', :git => 'https://github.com/ashfurrow/Moya.git', :branch => 'swift-1.2'\nOr, if you're using ReactiveCocoa extensions...\npod 'Moya/Reactive', :git => 'https://github.com/ashfurrow/Moya.git', :branch => 'swift-1.2'\n```\nI just tried that on a test project and it seemed :+1: so feel free to re-open this issue if you're still experiencing problems and we'll work through it!\n. Hey! These have been merged in. I updated the dependency on ReactiveCocoa on CocoaPods trunk. I don't have access to do so with Alamofire, our other dependency, so you need to have a Podfile that declares you're using their pre-release version first.\n``` rb\npod 'Alamofire', :git => 'https://github.com/Alamofire/Alamofire.git', :branch => 'xcode-6.3'\npod 'Moya', :git => 'https://github.com/ashfurrow/Moya.git', :branch => 'swift-1.2'\nOr, if you're using ReactiveCocoa extensions...\npod 'Moya/Reactive', :git => 'https://github.com/ashfurrow/Moya.git', :branch => 'swift-1.2'\n```\nI just tried that on a test project and it seemed :+1: so feel free to re-open this issue if you're still experiencing problems and we'll work through it!\n. @te-chris Glad to hear that! As always, don't hesitate to open an issue if you have a question, if something doesn't work the way you expect it to based on the documentation, etc. \n. @te-chris Glad to hear that! As always, don't hesitate to open an issue if you have a question, if something doesn't work the way you expect it to based on the documentation, etc. \n. I'll create a new bump for ReactiveCocoa on CocoaPods trunk :)\n. I'll create a new bump for ReactiveCocoa on CocoaPods trunk :)\n. OK 3.0-alpha.3 is on Trunk. \n. OK 3.0-alpha.3 is on Trunk. \n. I'll update the pod spec, then push. \n. I'll update the pod spec, then push. \n. Swift limits autoclosure to parameters and not enum associated values. \n. Swift limits autoclosure to parameters and not enum associated values. \n. Hey, awesome! Thanks :) The CI is failing because Travis. Gonna merge!\n. Hey, awesome! Thanks :) The CI is failing because Travis. Gonna merge!\n. Done. \n. Done. \n. This is a great idea! I think I'd prefer to have a closure as a parameter to the MoyaProvider initializer, or a variable property, that is called to begin/end. That way developers using something like this can provider their own implementations. Thoughts? \n. This is a great idea! I think I'd prefer to have a closure as a parameter to the MoyaProvider initializer, or a variable property, that is called to begin/end. That way developers using something like this can provider their own implementations. Thoughts? \n. Hey @avgx! Is there anything I can do to help on this? \n. Hey @avgx! Is there anything I can do to help on this? \n. Cool, OK. The PR isn't quite accurate, but I like the idea. Basically, you could have two network calls: A and B. A is slow, but B is fast. First we start A, then start B. B finishes quickly, but A is still running. However, since B finished, we set our hasNetworkActivity to false. \nI'm really interested in this \u2013 I'll work on it today and let you know. \n. Cool, OK. The PR isn't quite accurate, but I like the idea. Basically, you could have two network calls: A and B. A is slow, but B is fast. First we start A, then start B. B finishes quickly, but A is still running. However, since B finished, we set our hasNetworkActivity to false. \nI'm really interested in this \u2013 I'll work on it today and let you know. \n. So I've got my idea up here: https://github.com/ashfurrow/Moya/pull/112 It still needs tests, but does that make sense? \n. So I've got my idea up here: https://github.com/ashfurrow/Moya/pull/112 It still needs tests, but does that make sense? \n. Cool, I'm going to close this @avgx \u2013 if I can help in any other way, or if the solution in #112 isn't sufficient for your needs, please let me know! \n. Cool, I'm going to close this @avgx \u2013 if I can help in any other way, or if the solution in #112 isn't sufficient for your needs, please let me know! \n. Hmm. The only reason I can think of is that Moya hasn't been updated for Swift 1.2 yet, but Alamofire has. Suggestions? \n. Hmm. The only reason I can think of is that Moya hasn't been updated for Swift 1.2 yet, but Alamofire has. Suggestions? \n. Haha yeah. I should get on that ... I'll rename the issue. \n. Haha yeah. I should get on that ... I'll rename the issue. \n. Pretty busy for the next five or so days. Feel free to take a stab at it in the mean time ;)\n. Pretty busy for the next five or so days. Feel free to take a stab at it in the mean time ;)\n. This is fixed as of https://github.com/ashfurrow/Moya/releases/tag/0.8.0 .\n. This is fixed as of https://github.com/ashfurrow/Moya/releases/tag/0.8.0 .\n. Great idea! I think Alamofire supports this already, so there is an opportunity to leverage their code while being clever about how we expose the functionality. \n. OK, cool. We can start there then :)\n. Help on this would be very much appreciated. I'm catching up on some work for the remainder of the week, and won't have time to look at it for a while. \n. This is a fundamentally new behaviour for Moya. I'm trying to figure out the best way to add it to our existing API without overly complicating things. \nIf we want to use the existing request() function, then we would need to have a way to distinguish targets between upload and regular HTTP requests. We could add .Upload to the Moya.Method enum, which would be easy, but would break parity with the HTTP verbs and the Alamofire.Method enum. \nOn the other hand, if we add a new optional property to MoyaTarget for uploading (say, we call it uploadData), we could ignore the method of the target and assume it's uploading based on the presence of a non-nil uploadData. \nIn either case, we would still need to figure out the progress callback. Maybe we could incorporate it into the cancellable token somehow maybe? \nNeither option really sits with me. We could, instead, have a new upload method on the MoyaProvider class. We would still need the optional uploadData property, the API would become slightly more complicated, and it would be some duplicated code in MoyaProvider and its subclasses. \nAnyone have any feels about this?\n. Cool, that would be great! Feel free to ask questions in issues.\nAs for an implementation of this, I figure there's two part \"entry points\" where you could specify multipart upload: the MoyaTarget protocol or the request function. I think I'd prefer adding another function, or expanding the existing request function to handle it. Not sure of specifics, but you get the idea. \n. Yeah, this is why I think adding another request function specific to multipart uploading would be the best approach. \n. Fixed in #483.\n. \ud83d\ude47 thanks! \n. Sounds good to me \u2013 CI is gonna break since Travis is sucky. Can you update the README status, too? \n. From what people working on this repo and others have experienced, adding Carthage is not as minimal as you might expect. My issue is the problem of misleading developers by saying \"we support Carthage\", when I don't use it and won't know if Moya supports it correctly.\n. Not at all! We're all after the same goal: making our own jobs easier. Take your time \u2013 whenever you have a chance. \n. I've not looked too extensively into this, and would appreciate guidance or assistance.\nMaybe we could add this new functionality to the existing ReactiveMoyaProvider class? Or would we want a 3.0-only class? Since the two APIs are interchangeable, it might make sense to have only one class. \n. @rpowell that would be lovely! \n. @justinmakaila has implemented a solution on another repository (pasted below). We can't incorporate this change into the library yet because it's a breaking change to existing users, and we need to update Moya to the next major version (3.0.0). I'd like to get a Swift 2, Carthage-compatible release out first (see #215) and then incorporate Justin's work, since it looks great :100: \n``` swift\n/// Subclass of MoyaProvider that returns SignalProducer instances when requests are made. Much better than using completion closures.\npublic class ReactiveCocoaMoyaProvider: MoyaProvider {\n    /// Current requests that have not completed or errored yet.\n    /// Note: Do not access this directly. It is public only for unit-testing purposes (sigh).\n    public var inflightRequests = Dictionary, Signal>()\n/// Initializes a reactive provider.\noverride public init(endpointClosure: MoyaEndpointsClosure = MoyaProvider.DefaultEndpointMapping, endpointResolver: MoyaEndpointResolution = MoyaProvider.DefaultEnpointResolution, stubBehavior: MoyaStubbedBehavior = MoyaProvider.NoStubbingBehavior, networkActivityClosure: Moya.NetworkActivityClosure? = nil) {\n    super.init(endpointClosure: endpointClosure, endpointResolver: endpointResolver, stubBehavior: stubBehavior, networkActivityClosure: networkActivityClosure)\n}\n\npublic func request(token: T) -> SignalProducer<MoyaResponse, NSError> {\n    let endpoint = self.endpoint(token)\n\n    if let existingSignal = inflightRequests[endpoint] {\n        /// returns a new producer which forwards all events of the already existing request signal\n        return SignalProducer { sink, disposable in\n            /// connect all events of the existing signal to the observer of this signal producer\n            existingSignal.observe(sink)\n        }\n    }\n    else {\n        /// returns a new producer which starts a new producer which invokes the requests. The created signal of the inner producer is saved for inflight request\n        return SignalProducer { [weak self] sink, _ in\n            let producer: SignalProducer<MoyaResponse, NSError> = SignalProducer { [weak self] sink, disposable in\n                let cancellableToken = self?.request(token) { data, statusCode, response, error in\n                    if let error = error {\n                        if let statusCode = statusCode {\n                            sendError(sink, NSError(domain: error.domain, code: statusCode, userInfo: error.userInfo))\n                        } else {\n                            sendError(sink, error)\n                        }\n                    } else {\n                        if let data = data {\n                            sendNext(sink, MoyaResponse(statusCode: statusCode!, data: data, response: response))\n                        }\n                    }\n                    sendCompleted(sink)\n                }\n\n                disposable.addDisposable {\n                    if let weakSelf = self {\n                        objc_sync_enter(weakSelf)\n                        // Clear the inflight request\n                        weakSelf.inflightRequests[endpoint] = nil\n                        objc_sync_exit(weakSelf)\n                        // Cancel the request\n                        cancellableToken?.cancel()\n                    }\n                }\n            }\n\n            /// starts the inner signal producer and store the created signal.\n            producer |> startWithSignal { [weak self] signal, _ in\n                objc_sync_enter(self)\n                self?.inflightRequests[endpoint] = signal\n                objc_sync_exit(self)\n                /// connect all events of the signal to the observer of this signal producer\n                signal.observe(sink)\n            }\n        }\n    }\n}\n\npublic func request(token: T) -> RACSignal {\n    return toRACSignal(self.request(token))\n}\n\n}\n/// Extension for mapping to a certain response type\npublic extension ReactiveCocoaMoyaProvider {\n    public func requestJSON(token: T) -> SignalProducer {\n        return request(token) |> mapJSON()\n    }\npublic func requestJSONArray(token: T) -> SignalProducer<NSArray, NSError> {\n    return requestJSON(token) |> mapJSONArray()\n}\n\npublic func requestJSONDictionary(token: T) -> SignalProducer<NSDictionary, NSError> {\n    return requestJSON(token) |> mapJSONDictionary()\n}\n\npublic func requestImage(token: T) -> SignalProducer<UIImage, NSError> {\n    return request(token) |> mapImage()\n}\n\npublic func requestString(token: T) -> SignalProducer<String, NSError> {\n    return request(token) |> mapString()\n}\n\n}\n/// MoyaResponse free functions\npublic func filterStatusCode(range: ClosedInterval) -> SignalProducer -> SignalProducer  {\n    return { producer in\n        return producer |> flatMap(.Latest, { response in\n            if range.contains(response.statusCode) {\n                return SignalProducer(value: response)\n            } else {\n                return SignalProducer(error: ReactiveMoyaError.StatusCode(response).toError())\n            }\n        })\n    }\n}\npublic func filterStatusCode(code: Int) -> SignalProducer -> SignalProducer {\n    return filterStatusCode(code...code)\n}\npublic func filterSuccessfulStatusCodes() -> SignalProducer -> SignalProducer {\n    return filterStatusCode(200...299)\n}\npublic func filterSuccessfulAndRedirectCodes() -> SignalProducer -> SignalProducer {\n    return filterStatusCode(200...399)\n}\n/// Maps the MoyaResponse to a UIImage\npublic func mapImage() -> SignalProducer -> SignalProducer {\n    return { producer in\n        return producer |> flatMap(.Latest, { response in\n            if let image = UIImage(data: response.data) {\n                return SignalProducer(value: image)\n            } else {\n                return SignalProducer(error: ReactiveMoyaError.ImageMapping(response).toError())\n            }\n        })\n    }\n}\n/// Maps the MoyaResponse to JSON\npublic func mapJSON() -> SignalProducer -> SignalProducer {\n    return { producer in\n        return producer |> flatMap(.Latest, { response in\n            var error: NSError?\n            if let json: AnyObject = NSJSONSerialization.JSONObjectWithData(response.data, options: .AllowFragments, error: &error) {\n                return SignalProducer(value: json)\n            } else {\n                return SignalProducer(error: ReactiveMoyaError.JSONMapping(response).toError())\n            }\n        })\n    }\n}\n/// Maps a JSON object to an NSArray\npublic func mapJSONArray() -> SignalProducer -> SignalProducer {\n    return { producer in\n        return producer |> flatMap(.Latest, { json in\n            if let json = json as? NSArray {\n                return SignalProducer(value: json)\n            } else {\n                return SignalProducer(error: ReactiveMoyaError.JSONMapping(json).toError())\n            }\n        })\n    }\n}\n/// Maps a JSON object to an NSDictionary\npublic func mapJSONDictionary() -> SignalProducer -> SignalProducer {\n    return { producer in\n        return producer |> flatMap(.Latest, { json in\n            if let json = json as? NSDictionary {\n                return SignalProducer(value: json)\n            } else {\n                return SignalProducer(error: ReactiveMoyaError.JSONMapping(json).toError())\n            }\n        })\n    }\n}\n/// Maps the MoyaResponse to a String\npublic func mapString() -> SignalProducer -> SignalProducer {\n    return { producer in\n        return producer |> flatMap(.Latest, { response in\n            if let string =  NSString(data: response.data, encoding: NSUTF8StringEncoding) as? String {\n                return SignalProducer(value: string)\n            } else {\n                return SignalProducer(error: ReactiveMoyaError.StringMapping(response).toError())\n            }\n        })\n    }\n}\n```\n. Fixed in https://github.com/Moya/Moya/pull/224 \u2013 merged into the 3.0.0-develop branch. \n. Hey there!\nSorry, missed the update. I'll take a look in a bit \u2013 gonna merge the swift-1.2 branch into master and get back to you. \n. Ha, yeah. Jet lag took me out of commission for the past two days, too. \nWhy don't I try to submit a PR to your branch that does the ReactiveProvider tests? Then we can do that separately, then merge this one into swift-1.2, then swift-1.2 into master then :tada:\n. Waiting on Circle CI to add iOS support for me. Will check back then. \n. Huh, so the ReactiveCocoa version we're using now requires Xcode 6.3.1, which CircleCI doesn't support yet. \nStory of my life. \n. Gonna fail on CircleCI, but it's passing for me locally. \n. This has been pushed to CocoaPods trunk as 0.8.0.\n. Cool! Send a work-progress pull request in whenever you have something. I'd love to hack it together\n. Neat! I'll take a look :rocket: \n. Hey! I've thought it over, and I don't know if this tool is right for this project. It seems to heavily rely on using labels and GitHub comments appropriately, but most of the time, I don't do that on Moya. I think the changelog generator is a really great idea, but it's not a good fit for this project. \nThanks again for the suggestion!\n. Thanks for the feedback! Yeah, my fingers were getting pretty tired >.<\n. Cool, thanks Boris! \n. OK cool. I've got a PR open for checking in the Pods directory. Once that is :green_apple: , I'll merge and you can rebase from master? Or should it be safe to merge directly in?\n/cc @MichaelMcGuire\n. Ha, meeerrrrge conflict. \n. @neonichu Wanna rebase so I can merge? \n. :red_circle: can you pod install or update or whatever needs to pass?\n. Cooooool thanks!\n. Thanks!\n. Cool! Open an issue if you have any questions! \n. Awesome, thank you! \n. Both are accurate (think \"provider\" as in MoyaProvider class), but I like your wording better. Thanks! \n. Cool, thanks!\n. @alcarvalho This is fantastic work, thank you. \nThe CI sometimes fails \u2013 I haven't figured out why yet. It's related to the delayed stubbing behaviour :\\\nAnyway, this is great. Could you follow @orta's suggestion and remove those comments from the new files? And could you add a CHANGELOG entry for 1.1? \nThanks again! :tada: \n. Super awesome!\n. Awesome. @neonichu since you mentioned it, I've added you as an owner to the pod in CocoaPods trunk. \n. Gonna call this done! Thanks for your help, everyone :cake:\n. @alloy I like it. As though adding more contributors should be a regularly part of open source. :bow:\n. I like this idea \u2013 will do. \nAs for a dedicated project/workspace, what would be the advantages of using one? The library is installed using CocoaPods; the Demo project is for illustrating the library's use and for its unit tests. That could be moved into a test-only project, sure. What advantages would there be of having another project/workspace? \n. Some pretty far-reaching changes here. Would appreciate a review. \n. This is really tricky. Basically our providers are containers for data (their configs) and a request method. That's, like, the definition of a class. \nI suppose we could move MoyaProvider to be a protocol and put request() in a protocol extension? Or maybe turn Moya into a struct instead of a class. The real hassle is just updating initializers that don't do anything but call super.init(... so structs would remove that pain most of the time. Or maybe we could use composition instead of inheritance? \n. Alternatively, it seems a bit odd that subclasses must override the initializer. \n``` swift\noverride public init(endpointClosure: EndpointClosure = MoyaProvider.DefaultEndpointMapping,\n    requestClosure: RequestClosure = MoyaProvider.DefaultRequestMapping,\n    stubClosure: StubClosure = MoyaProvider.NeverStub,\n    networkActivityClosure: Moya.NetworkActivityClosure? = nil,\n    credentialClosure: CredentialClosure? = nil,\n    manager: Manager = Alamofire.Manager.sharedInstance) {\n    super.init(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, networkActivityClosure: networkActivityClosure, credentialClosure: credentialClosure, manager: manager)\n\n}\n```\nAll the subclasses ever do is call super.init(). How can we abstract this?\n. Maybe instead of subclassing, we can add extensions to the existing MoyaProvider type? \n. I like the idea of using protocols to extend the primary type, but I'm concerned about the constraints that would introduce for existing users who are currently subclassing (say, RxSwiftProvider). I'm going to look through Eidolon for how we use Moya, and see if there are any foreseeable problems before starting an implementation.\n. Fixed in #238.\n. Well, it was addressed in the sense that subclassing the provider no longer requires so many initializer parameters and repeating their default values. What you're describing sounds like a new issue. I have subclassed RxMoyaProvider here without issues. \n. Subclassing in Swift usually requires calling a designated initializer in the superclass, I'm not sure of a great way to avoid this in Moya. Do you have suggestions?  \n\nAsh Furrow\nhttps://ashfurrow.com/  \nOn April 30, 2016 at 12:24:01 PM, nikita leonov (notifications@github.com(mailto:notifications@github.com)) wrote:\n\nI see. Yes, it is easier to define default parameters now, but it still require overriding designated initializer. Actually situation does not change in compare with what you writing in Oct, 1. Here is current experience of subclassing \u2014 https://www.evernote.com/l/AEaV5Z1HlZRGprguAUiszmTarcbrRgFzQA0\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly or view it on GitHub(https://github.com/Moya/Moya/issues/144#issuecomment-215976739)\n. Interesting. I suppose what I meant was, a reason to subclass would be to provide custom behaviour, which may need to be given as an initializer parameter Subsequently, you'd want to define all the usual default values and would also need to call the super-initializer. I would love to hear ideas to solve either of those problems \u2013 please keep us in the loop about your progress, maybe on a new issue? \n. :bow:\n. How so? \n. Hmm. So running pod update isn't really something that should be done frequently; I can't remember the last time I ran it. Running pod install instead looks at the Podfile.lock file to see what specific versions need to be used. Does that make sense? \n. For sure, but Quick 0.4.0 uses Swift 2, as I understand it, which Moya does not yet. \n. This is great, @lluisgerard \u2013 very good catch. Thanks!\n. tl;dr Moya doesn't currently support this.\n\nHmm. Interesting question. Alamofire seems to handle this with NSURLCredential. Is this how you've done HTTP auth in the past? \nMaya doesn't currently have support for this, but using the sharedSession NSURLSession, so you should be able to set things there and have all HTTP requests use those credentials. Obviously that's not a great fix, though. \nI guess what this would really need is some kind of (optional) way to specify which NSURLSession to use: the default, or one configured for your endpoints alone. \nOthers are likely more familiar with the network library underneath Alamofire. Anyone have suggestions on how to implement this? \n. That makes sense. But it also adds a lot of complexity around individual API calls. Developers now need to remember which endpoints need auth and which don't, and that need is spread across their entire codebase. \nI think we need one of two things:\n- an optional part of the MoyaTarget protocol that specifies per-target credentials\n- an optional closure in the MoyaProvider initializer that gets last-moment chance to specify credentials based on the target. If it returns credentials, they're added to the request in the provider. \nI like the second option better because most users don't need HTTP basic auth and it keeps our protocol leaner. What do you think? \n. That would be lovely! Please let me know if you'd like to bounce ideas around or anything :smile: \n. Cool, thanks for the update @davidbarsky. Please let us know if there's anything else you'd like to see added to Moya!\n. Yeah, to be honest I'm not entirely sure how dependency resolution with Carthage works. If it were CocoaPods, I'd fork the Moya repo and point to my fork in the Podfile. \n@neonichu: you added Carthage support \u2013 any ideas? \n. Cool, thanks @aschuch ! I wasn't sure how the ~> 3.0 signifier works in Carthage. \n. Yeah, it doesn't appear to \u2013 apologies for that. @neonichu or anyone else with Carthage know-how: what would be involved in adding support for the RxSwift subspec? \n. Oh, I see. So someone using Moya with Carthage now just has to also use ReactiveCocoa, even if they only want the original MoyaProvider, not the ReactiveCocoa subclass? \n. RxSwift was the original name of the RAC 3 proof of concept. It also happens to be the name of a Swift-based reactive extensions library. The library is young but growing. Whether there's enough demand for this from Carthage users, I don't know. \n. @MarvinNazari Wouldn't be a bad idea if this was a Carthage-only repository, but I'm a CocoaPods user and this is the right way to use CocoaPods. \nI feel like the Moya team have been very flexible on a number of issues in order to support Carthage. Frankly, I'm tired of jumping through hoops to support a nascent dependency manager that ignores community feedback. \n. @MarvinNazari Sorry, that was very rude of me. I don't mean to dump this on you \u2013 I've been growing frustrated at this process for some time now. Splitting the functionality into multiple repos would be a good idea, but I don't think it's the right solution for Moya.\n. @MarvinNazari I'm glad you like our library :) I wish there were a better way to support your use case. Hopefully the Carthage people will help.\nLike, how do they do they manage different frameworks for different platforms? Could that work somehow? \n. Yeah, exactly. Could we leverage that technique? \n. Hmm. The target would be an issue, since CocoaPods lumps the subspaces into the same framework. \nSo we'd basically need to create and maintain a separate Xcode project solely for Carthage support, right? \n. I'd appreciate that, Justin, thanks! \n. Cool, this looks great @justinmakaila \u2013 want to submit a PR to add those instructions to the README? \n. @justinmakaila sounds cool, thanks! Send the PR over and we can take a look there :tada:\n. Now that we have an organization, could we use submodules somehow to dump the necessary files for Moya, Moya/RAC, and Moya/RxSwift into separate repositories? I don't really know how Carthage works. \n. @gfontenot That sounds like a really intriguing solution \u2013 I had never considered having subspecs use a different source \u2013 @orta any reason why that'd be a bad idea? I personally like having all the source files in one repo, but if it solves our projects with Carthage support, then it seems like a reasonable compromise. \nI'll add you two to the org. Thanks so much for your help!\n. Super, thanks @justinmakaila! GitHub repo transfers are messy \u2013 I've created the other repos on the Moya organization for you, and you should have push rights. Just add a remote for them, pull, merge, and push.\nsh\ncd RxMoya\ngit remote add upstream https://github.com/Moya/RxMoya.git\ngit pull upstream master \n*** Merge any conflicts ***\ngit push upstream master\nAnd repeat. I've created an RxCore repo for the shared resources, in case you need it. \nLet me know if I can do anything more to help! I really appreciate your work, and the work of everyone here to come up with a solution that works for everyone :tada: Good job, team. \n\n. Ah, sorry \u2013 first time using GH organizations :) Try again?\n. So @justinmakaila what are the next steps? Are the other repos working with Carthage? Swift 1.x or Swift 2? Do we just need to update CocoaPods now?\nIf the other repos are still works-in-progress, we should consider adding a note to their READMEs. And maybe include instructions for their corresponding CocoaPods subspecs' installations. Does that make sense? \n. Super, cool! So if everything is working with Carthage, there's only a few things left to do:\n1. Ensure the new repos with RxMoya and ReactiveMoya are up-to-date with this one. \n2. Remove files from this repo.\n3. Update podspec to point to the two new repos.\n4. Test/lint podspec\n5. Ensure pod try continues to work.\n6. Release a new version of Moya.\nLet me know if I'm forgetting anything. \nAll sounds good? I can get started as early as this weekend, unless someone wants to do it sooner. \n. Hi there @XBeg9 \u2013 good question. The request function purposefully returns a CancellableToken to obscure the underlying Alamofire implementation. The idea is that you shouldn't need to know that Moya uses Alamofire \"under the hood\", so returning the request defeats that purpose. \nSo, how do we make it so you can use this mapping library, which looks pretty cool. That library is actually a thin wrapper around ObjectMapper, which you could use directly. That's not a satisfying answer, I know. \nAn alternative would be to extend the MoyaProvider in another subspec in a similar way that AlamofireObjectMapper does. It shouldn't be that much work, but I'm swamped until the weekend.\nWhat sounds like the best solution to you? Does anyone else have suggestions? \n. So I'm thinking that we'd have extension MoyaProvider that would call through to the original Request, but also take a callback block similar to AlamofireObjectMapper. So it would call through to the original request function, then do something in the callback to map the objects, then call its own callback. \nSo it would look something roughly like this:\nfunc someRequest(target, someCallback) {\n    request(target) { (thing) -> () in\n        let mappedObject = ObjectMapperCallOrWhatever\n        someCallback(mappedObject)\n    }\n}\nDoes that make sense? \n. Hey, totally! Great idea! I've pushed a swift-2.0 branch so we can follow that there. If you're able to, a PR into that branch would be very much appreciated :)\n. Hey, totally! Great idea! I've pushed a swift-2.0 branch so we can follow that there. If you're able to, a PR into that branch would be very much appreciated :)\n. I'm not attached at all \u2013 @neonichu asked to add the Pods/ directory and its friends for Carthage support. If we don't need that, that's cool with me. \n\n. I'm not attached at all \u2013 @neonichu asked to add the Pods/ directory and its friends for Carthage support. If we don't need that, that's cool with me. \n\n. Hmm, sorry, I'm re-reading this and I thought you meant to pods directory. I'd feel more comfortable keeping the demo project built with CocoaPods. \n. Hmm, sorry, I'm re-reading this and I thought you meant to pods directory. I'd feel more comfortable keeping the demo project built with CocoaPods. \n. Sounds good. \n. Yeah, the ~> signifier is a bit weird. It basically uses Semantic Versioning to see if a library can be updated. This doesn't work for Quick, etc, because they often have breaking changes before they hit 1.0. \nI think this PR makes sense \u2013 relaxing the requirement around RxSwift, which is already post-1.0, should be fine. Could you add an entry to the changelog? Thanks!\n. Yeah, the ~> signifier is a bit weird. It basically uses Semantic Versioning to see if a library can be updated. This doesn't work for Quick, etc, because they often have breaking changes before they hit 1.0. \nI think this PR makes sense \u2013 relaxing the requirement around RxSwift, which is already post-1.0, should be fine. Could you add an entry to the changelog? Thanks!\n. I don't mind either way, but if I had to pick, there'd be one commit with changes to the podfile/podspec/changelog, and one commit with changes to the Pods/ directory. \n. I don't mind either way, but if I had to pick, there'd be one commit with changes to the podfile/podspec/changelog, and one commit with changes to the Pods/ directory. \n. :+1: \n. :+1: \n. Thanks!\n. Thanks!\n. Hmm. I'm not quite sure what to make of this. Hoping @neonichu knows. \n. Hmm. I'm not quite sure what to make of this. Hoping @neonichu knows. \n. I'm going to move this to #154 \u2013 there's a discussion there surrounding Moya and Carthage. \n. Looks good to me, thanks!\n. Looks good to me, thanks!\n. That's a really great point, thanks!\nPR looks good \u2013 would you mind adding an entry to the changelog? \n. That's a really great point, thanks!\nPR looks good \u2013 would you mind adding an entry to the changelog? \n. Interesting! I'll take a look later. It could be just that ReactiveCocoa was not intended to be used standalone, or that I didn't anticipate this need when I made the podspec. \n. Interesting! I'll take a look later. It could be just that ReactiveCocoa was not intended to be used standalone, or that I didn't anticipate this need when I made the podspec. \n. Yeah, looks like ReactiveCocoa's Core subspec is not intended to be used standalone. CocoaPods bundles in whatever UI stuff you need depending on your platform. Could be that this is a use case the ReactiveCocoa developers did intend, but they don't contribute to the podspec. \nThanks again for the contribution!\n. Yeah, looks like ReactiveCocoa's Core subspec is not intended to be used standalone. CocoaPods bundles in whatever UI stuff you need depending on your platform. Could be that this is a use case the ReactiveCocoa developers did intend, but they don't contribute to the podspec. \nThanks again for the contribution!\n. Awesome, thanks!\n. Awesome, thanks!\n. no problem :) Probably a good idea. \n. no problem :) Probably a good idea. \n. Hey there @vCrespoP! I'm not sure the status \u2013 I've not been using Swift 2 yet, but that will change soon, so I'll have some work time to devote to it. \n. Hey there @vCrespoP! I'm not sure the status \u2013 I've not been using Swift 2 yet, but that will change soon, so I'll have some work time to devote to it. \n. Hey @esttorhe \u2013 could you close this, rebase from master, then submit a new PR into Moya's swift-2.0 branch? \n. Cool, thanks!\n. Take your time! The last thing we want is for you to get strained and burn out on open source :)\n. Take your time! The last thing we want is for you to get strained and burn out on open source :)\n. I've had that happen before. Silly GitHub. \n\nMaybe rename your branch, push, then PR into swift-2?\n. I've had that happen before. Silly GitHub. \n\nMaybe rename your branch, push, then PR into swift-2?\n. Thanks for bringing up the issue, @kzaher \u2013 good catch! Hand't considered the signals coming from other threads >.<\n@alcarvalho Thanks for the help! It's a tricky problem and a very difficult use case to test. Could I ask you to open a pull request, with your work and new tests? We can have a conversation about it there :fireworks: \n. Thanks for bringing up the issue, @kzaher \u2013 good catch! Hand't considered the signals coming from other threads >.<\n@alcarvalho Thanks for the help! It's a tricky problem and a very difficult use case to test. Could I ask you to open a pull request, with your work and new tests? We can have a conversation about it there :fireworks: \n. This was fixed when #166 was merged. \n. Yeah, that's a fair point. We use comparisons based on the URL, the HTTP method, all the parameters, and the body. I would think that sending the same request twice would be different, but I suppose this is an assumption. \nAny suggestions? We could extend behaviour in the MoyaProvider class \u2013 maybe a closure like this?\ntypealias ShouldCheckInflightRequests = (Endpoint) -> (Bool)\nThat way people can opt-out on a per-endpoint bases if they want? Open to suggestions on this. \n. Yeah, that's a fair point. We use comparisons based on the URL, the HTTP method, all the parameters, and the body. I would think that sending the same request twice would be different, but I suppose this is an assumption. \nAny suggestions? We could extend behaviour in the MoyaProvider class \u2013 maybe a closure like this?\ntypealias ShouldCheckInflightRequests = (Endpoint) -> (Bool)\nThat way people can opt-out on a per-endpoint bases if they want? Open to suggestions on this. \n. Hmm. Maybe a good default implementation would specify that GET and HEAD requests are coalesced, but POST PUT PATCH and DELETE ones are not. That seems like a sane default to me. Thoughts?\nAs for the inflight caching \u2013 using a token makes sense to me. \n. Hmm. Maybe a good default implementation would specify that GET and HEAD requests are coalesced, but POST PUT PATCH and DELETE ones are not. That seems like a sane default to me. Thoughts?\nAs for the inflight caching \u2013 using a token makes sense to me. \n. Yeah, I dunno. Seems like this might be more trouble than it's worth, but @aschuch and @kzaher are right \u2013 this should definitely be opt-in. \n. Yeah, I dunno. Seems like this might be more trouble than it's worth, but @aschuch and @kzaher are right \u2013 this should definitely be opt-in. \n. Fixed in https://github.com/Moya/Moya/pull/232 \u2013 currently in 3.0.0-develop branch. \n. Fixed in https://github.com/Moya/Moya/pull/232 \u2013 currently in 3.0.0-develop branch. \n. I did this originally to implement inflight request tracking; a multicast connection's autoconnect() generates a new signal every time (subscribed to the same underlying signal), so I couldn't store it in the requests dictionary. I got a little frustrated and settled with a solution that appeared to work. I should review the docs and implementation. Since Moya has good test coverage, we can be sure that any changes don't break behaviour :smile: \n. I did this originally to implement inflight request tracking; a multicast connection's autoconnect() generates a new signal every time (subscribed to the same underlying signal), so I couldn't store it in the requests dictionary. I got a little frustrated and settled with a solution that appeared to work. I should review the docs and implementation. Since Moya has good test coverage, we can be sure that any changes don't break behaviour :smile: \n. Fixed in https://github.com/Moya/Moya/pull/232 \u2013 currently in 3.0.0-develop branch. \n. Fixed in https://github.com/Moya/Moya/pull/232 \u2013 currently in 3.0.0-develop branch. \n. Build is stalling on simulator verification. We're seeing a similar problem on artsy/eidolon \u2013 I've restarted builds on master and this PR to try and isolate the problem to here or not. \n. Build is stalling on simulator verification. We're seeing a similar problem on artsy/eidolon \u2013 I've restarted builds on master and this PR to try and isolate the problem to here or not. \n. CircleCI is still stalling, but is succeeding on master. Not sure why. @alcarvalho: are the tests working on your local computer? Maybe the tests are hanging. \n. I'Il try to take a look at it this weekend \u2013 thanks again for all your hard work!\n. Hey, thanks so much! This is a great step forward. @esttorhe has done some work in #162 \u2013 maybe you two could work together?\nUntil RxSwift renames defer, if it does, you just need to surround it in backticks like defer.\n. Good points. \nDistinct repos would solve our Carthage problem; they refuse to implement subspec-style libraries because it \"encourages large libraries.\" Could be something CocoaPods could do \u2013 it crease a project now, maybe one with separate framework targets for different subspecs?\n. Leaning more in favour of this. We should probably add a CoC while we're at it. \n. Cool, yeah. \n@colinta Initially, it'd just be this repo and probably a demo or two showing how to use Moya. In the long run, I'd love to see the org grow to include new functional-ish ways to use Swift to solve problems on iOS and OS X. It would be awesome to have a sort of meta repo where we could keep a list of ideas for projects. That way if someone had an idea, or needs an idea, they have a space they can get more help than on their own.\n. @orta Thanks for asking :)\n. I've been in contact with GitHub support, and https://github.com/Moya is now an organization I control. I'll be adding contributors as team members there, then transferring and doing related chores hopefully today, maybe tomorrow. \n:tada:\n. OK, so I've submitted a PR to update the Moya podspecs: https://github.com/CocoaPods/Specs/pull/13370\nCircle CI needs to enabled the iOS beta on the Moya organization, so our CI will be broken until they flip that switch. \nI've also submitted this PR on Moya to update docs, CI, etc: https://github.com/Moya/Moya/pull/175 If one of @Moya/contributors could take a look, that'd be awesome!\n. Thanks a lot, Justin! It's a huge PR \u2013 I'll take a look at it this weekend. If any other contributors could lend a hand, that'd be :+1: \nJustin, could I please ask you to mark these improvements in the changelog? I see you've already updated the README \u2013 awesome :tada: \nThe tests are failing \u2013 looks like a Circle configuration problem around the Demo workspace. Any ideas?\n. Yeah, I think it's time to separate out the demo from the library repo. \nI only included the Pods directory because I was told it was necessary for Carthage support. If someone were interested in writing a how-to blog post about supporting Carthage and CocoaPods, that would probably be a great service to the open source community. As a library owner, I remain confused about how my own library is structured and why. It's not a comfortable feeling. \n. This could be rolled into #168 where we could have a Demo repo for both Carthage and CocoaPods, separate from the main repo. \n. How so? Never used pod try before. \n. Amazing! Let me know if I can lend a hand. Thanks again! :boom: \n. Hey @justinmakaila \u2013 would it be possible to have the Example app and tests still built using CocoaPods? \n. So Carthage relies on the Moya xcodeproject? I thought CocoaPods was generating one for us now. Sorry if I'm showing my ignorance here \u2013 I'm sure you can understand my hesitation to make Moya depend on an unfamiliar tool. \n. OK, so. Touchy subject for some \u2013 I want anyone reading this to know that I have a lot of respect for the developers who've built Carthage, for @justinmakaila and @neonichu who have done so much work to support Carthage in Moya, and for developers using Moya. If someone tries to turn this into a flamewar, I'll be very disappointed in them. \n:heart: \nOk! So Moya actually predates Carthage by a few months \u2013 Moya was build as a CocoaPod, which the capabilities and limitations of that tool in mind. \nCarthage was released, and people asked for Carthage support on Moya. I didn't know how to add it, but several contributors offered to help, which is fantastic :smile_cat: They asked for help from Carthage, but their developers said that subspec-like functionality conflicts with their philosophy. \nUndeterred, @justinmakaila and others laboured to come up with a solution that worked for both tools, requiring Moya to compromise on the original library structure (informed by CocoaPods). At last, we'd nearly accomplished this herculean task. \nMy remaining issue is that this PR fundamentally changes Moya from a CocoaPod that could support Carthage, to a Carthage library that can incidentally be used with CocoaPods. This might seem like a trivial matter, and it's at this point that I need to recognize that I no longer own Moya \u2013 the community does. My own feelings matter a lot less.\nBut the community has been using Moya as a CocoaPod for its entire lifetime, and a change of this foundational nature needs to be considered carefully. \nRespectfully, Justin, I think the Demo, unit tests, CI, and all that stuff should remain built atop CocoaPods. I realize this undoes some of the work you've put into this, so I'd like to do the work: I'll check out your fork, get Moya working atop CocoaPods again, ensure that Carthage support still works, then send a PR back into your branch so you can review my changes. Does that sound OK to you? We can hop on a google hangout to discuss this in person, too!\n. Hey! This is still on my radar, just got sidetracked. \nAs for the code structure, having the separate repos like https://github.com/Moya/ReactiveMoya is fine for code, but I think it's a good idea to keep all documentation and issue tracking in this main repo. This will keep the barrier to entry low (someone learning to use Moya shouldn't have to know how we structure our code to read our docs). Any objections? \n. Alrighty, I've disabled issues on the other repositories. We also need to update their READMEs to point to this repository. These other repos are basically just places to store files.\nIf we're centralizing docs here, I think it makes sense to centralize tests here as well. I can't see that being a problem with Carthage \u2013 @justinmakaila does that sound OK? \n. Shouldn't be a problem \u2013 we're restructuring the tests to run under CocoaPods, which won't have that problem. \n. Orta and I have implemented a solution that doesn't require us to split up the source code into three separate repositories, which I've PR'd in #215. @justinmakaila thank you so much for your work on this :smile_cat: \n. Yeah, that's a good point. Maybe desaturate them a little bit? \n\nMeh, that kind of sucks too. \n. \n. Hmm. \n. Nah, I think maybe a label saying \"BAD\" or something would be illustrative. \n. @orta it's a good start, but I think it needs more character. Suggestion: \n\n. Sounds good to me!\n. OK cool, I'll merge and we can fix CI later. \nI don't think master is in a stable state to release a build, so you'll have to use this in your Podfile:\nruby\npod 'Moya', :head\n. I don't believe so, :head fetches from the repo's HEAD iirc. \n. OK, so once #174 is done, I'll be release 2.0 in #149, so we should be :+1: soon. \n. Looks like something was missed in https://github.com/ashfurrow/Moya/pull/172 \n. Ha, yeah @colinta I hear you. From what I understand of Carthage, which is by choice not a lot, it's necessary. \n. Well, that's fixed. Merge away!\n. Well, that's fixed. Merge away!\n. @esttorhe you forgot to merge!\n. @esttorhe you forgot to merge!\n. :bow:\n. :bow:\n. We've moved off Circle CI altogether, closing. \n. We've moved off Circle CI altogether, closing. \n. Yeah, exactly! We'd need to unindent the code and add Swift code highlighting (see the existing README samples' markdown). :cake:\n. Yeah, exactly! We'd need to unindent the code and add Swift code highlighting (see the existing README samples' markdown). :cake:\n. Hey @argentounce \u2013 good question!\nThe RxMoyaProvider is created using the exact same method as a regular MoyaProvider. You just say:\nswift\nlet provider = RxMoyaProvider<MyAPI>()\nAnd that's it! All the examples in the docs that show how to configure the provider apply identically to the RxSwift and RAC providers. Demos for those projects are a great idea :100:\n. Hey! Thanks for letting us know. I've not used pod try Moya more \u2013 honestly I don't know how it works, but I'll take a look and let you know as soon as I figure it out. \n. That's weird \u2013 thought I'd done that. I'll give it a try. \n. Mmmhmmmmm. \n. Having trouble getting pod trunk push to work, hold tight. \n. Good idea, @esttorhe. Checked and it's 6, which sucks since I am getting a linker error. \nSet iTerm to \"unlimited scrollback\" to actually see the failure message. (Why is that not the default??)\n. Cooooool got it to work! @jk Could you try again? Or, rather, pod try again?\n\n. Oh yeah? I'm a pretty compulsive \u2318K'er, but I'll be on the lookout for slowdown. \n. No longer occurring, must be intermittent \u2013 see #176.\n. @regexident Thanks a lot!\n@esttorhe CI failures are intermittent (see #176). When this happens to me, I do this\n. Ha, yeah we need to get CI working again. \n. Fantastic! Let me know when this is ready for review :tada:\n. For now, why don't we PR against this one. I'd rather not make swift-2 support depend on getting Carthage builds working. Shouldn't be difficult to transition then. \n. Whoa! Esteban, how did you make the RAC 3 podspec? I could update the existing one on CocoaPods trunk if that would help. \n. I'll see what I can do. \n. @esttorhe It looks like RAC 3 beta 9, as well as a newer release candidate, are both on CocoaPods Trunk: https://github.com/CocoaPods/Specs/blob/master/Specs/ReactiveCocoa/3.0-beta.9/ReactiveCocoa.podspec.json\nSo you should be able to use them. \n. AHHH, right >.<\nI don't see anything official from ReactiveCocoa about Swift 2 \u2013 normally, I'd just point it at a branch of theirs in the Podfile. They have a swift2 branch, but I dunno if that'll work. \n. Another option is to be fancy :cake: You could use method currying in some way:\nswift\nfunc countCompletion (completion: (Int -> Void)) -> ((data: NSData?, statusCode: Int?, response: NSURLResponse?, error: NSError?) -> Void) {\n    return {  (data, status, response, error) -> () in\n        if let data = data {\n            let json: AnyObject? = NSJSONSerialization.JSONObjectWithData(data, options: nil, error: nil)\n            if let count = json[\"count\"] as? Int {\n                completion(count)\n            } else {\n                completion(-1)\n            }\n        }\n    }\n}\nThen call UserProvider.request(.Online, completion: countCompletion { count -> Void in /* your actual callback, accepting an Int */ }).\nThis avoids subclassing, which I personally like, and \"feels more Swift\", whatever that means. \n@callmewhy The overarching question is how do we deal with this, and I can only speak for myself, but I use the ReactiveMoya or RxMoya to turn these into signals/sequences. Here's one random example. \n. Cool, looks good! Could I get you to add an entry to the changelog, and maybe a line in the documentation? Then I think it'll be good to merge. Thanks again! \n. Sounds like a plan. I've just been using git tag, but I can deal with the release after if you want (it's a complicated process at the moment :\\ ).\n. Great, thanks!\n. Cool, that's up: https://raw.githubusercontent.com/CocoaPods/Specs/c049a65c2b0fbe853846cd144d359f4a43d8dae5/Specs/Moya/2.1.0/Moya.podspec.json\nAlso opened #184 to make releasing easier. \n. Wow, nice catch! Thanks for the PR :cake: \nYou mention the changelog \u2013 very good point. We  Typically, breaking changes require a major update to Moya (so, we'd need to release 3.0.0 after merging this). However, a major release for just a typo seems extreme, especially when it's on an optional parameter. @orta I'd appreciate your thoughts on this. \n. That makes sense to me \u2013 we could add a new issue to remove it for 3.0. \n. Maya itself should be usable without frameworks, but would require modification. \nMoya is built atop of Alamofire, so you'd need to have those .swift files in your project. Then you'd drop in the Moya .swift files, but that's not enough. Moya has import Alamofire statements that need to be removed first. Then in should work. \nA similar process should work for ReactiveCocoa, but @mikejd you're right \u2013 RAC 3 is iOS 8+ only. \n. @jk I'm glad you found the solution! Do you have any suggestions to improve the docs? \n. No problem :) It's possible to specify parameter encoding on a per-target basis through the endpoint resolver closure. You can use the endpointByAddingParameterEncoding function on Endpoint to help. Form there, if you really need a nil body instead of an empty one (though I'm not sure there's a semantic difference...) you can use the URL encoding, or otherwise. \nDoes that answer your question? \n. We've got a breaking-changes release coming up, so it's a good time to get these in. \nAlamofire has default nil parameters \u2013 I think we should change to reflect their behaviour. Alamofire already handles parameter encoding \u2013 it only uses URL parameter encoding if the request can encode parameters in the URL, so that's work we don't have to do. Since we already require users to specify the HTTP verb on the target, I think that's sufficient. \nDoes that make sense? \n. @Neirys I've opened #226 that you can subscribe to to be notified when it's finished. Or take a stab at it yourself! \n. Might make sense for a more in-depth demo in a separate repo on this organization. \n. This is fixed by https://github.com/Moya/Moya/pull/228 \u2013 will be merged in an upcoming release (see #236).\n. Tricky, since ReactiveCocoa has a minimum OS X deploy target of 10.10. I'm having trouble getting this to work with a subspec having a different OS X deploy target. \nSince no one has requested this, I'm fine with closing this as-is. We have OS X support, which was one of the big parts; I'm on with 10.10.\nIf anyone wants to re-open and investigate, :tada:\n. I maintain the podspec for ReactiveCocoa; is it out of date? \n. Hmm. You should be \n. What's the podfile look like? \n. My fork is way out of date. \nInteresting \u2013 I would've thought it would use the spec in trunk. You should be able to point to your work and copy&paste this podspec into it: https://github.com/CocoaPods/Specs/blob/master/Specs/ReactiveCocoa/3.0-RC.1/ReactiveCocoa.podspec.json\n. I'm spending time this week to update our app to Swift 2 \u2013 I'll try to get this working. \n. Initial work is complete. I haven't finished yet, so I can't test, but this should help anyone currently stuck. I'm using my fork of ReactiveCocoa, and added a podspec to my branch. \n. I'ved pushed a version of ReactiveCocoa 3 with Swift 2 (Xcode 7 GM) support. Its version number is \"3.0.0-swift2\" and can be used in Podfiles and in podspecs. \nSubsequently, I've updated the Moya podspec to use this new ReactiveCocoa version. There's a problem with the Carthage compatibility, but I'm hoping to have it wrapped up soon, and then I'll submit a PR. \n. OK, now all that's required for ReactiveCocoa extensions is the following in your podfile\nrb\npod 'Moya/ReactiveCocoa'\nAnd that's it! :tada:\n. Hmm tricky. Let me take a look. \n. Maybe, but I feel like that would break the clear chain from target -> endpoint -> request. \nCould you provide more details about the nature of the request signing? Is this something that could be accomplished with HTTP headers alone? There are some details here on how that could be accomplished. \n. Hmm, I tried to make the Endpoint an abstraction for URL requests with all of these properties. I didn't anticipate a need to access the request itself. \nIt could also be possible to switch based on the endpoint's URL in the resolver. \nswift\n{ (endpoint: Endpoint<ArtsyAPI>) -> (NSURLRequest) in\n    let request: NSMutableURLRequest = endpoint.urlRequest.mutableCopy() as NSMutableURLRequest\n    switch endpoint.url.absoluteString {\n    case let url where url.hasPrefix(\"http://theRequestThatNeedsAuthentication\"):\n        return /* signed request */\n    }\n    return request\n}\nIt's a bit janky, but would that work?\n. Definitely something to keep in mind! \n. Interesting idea!!\n. Yeah, I don't feel super-strongly either way about it. \n\nAsh Furrow\niOS Developer, Author\nhttp://ashfurrow.com\n\nOn Aug 24, 2015, at 12:49 PM, Justin Makaila notifications@github.com wrote:\nCould this potentially help with things like #164? If we provide an offline cache and specify a TTL at the request level, and whether or not a request should use the cache, I think we could ditch the idea of inflight requests.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome, @jarrodrobins if you're able to share an existing implementation, we could discuss ideas for implementing the same here. \n. Afraid not that I'm aware of.\n. I don't think this is Moya's job, either, but Orta's right \u2013 we may able to be clever about completion blocks that would allow users to easily do this, even without the chaining. It could be a neat demo, case study, or example in the docs. I'll give some more though to what it might look like. \n. If you're using CocoaPods, I've enjoyed using pod lib create \u2013 your just add Moya as a dependency and pod install. \n. @lkuczborski we use something like this, but that's built atop signals. You're looking for something with callbacks. \n\nWell! Let's imagine. \nBasically, you'd want a block that takes a type and returns a closure that can be passed into Moya's request function. This hasn't been run through a compiler, but you get the idea:\nswift\nfunc moyaCompletionMapsTo<T: JSONAble.Type>(classType: T, completion:(T?) -> ()) -> MoyaCompletion {\n    return { (data: NSData?, statusCode: Int?, response: NSURLResponse?, error: NSError?) -> () in\n        // process the response somehow and store result (might be nil) in model\n        completion(model)\n    }\n}\nThen you'd call:\nswift\nprovider.request(moyaCompletionMapsTo(Model.self, { model -> () in \n}))\nOr something to that effect. Does that make sense? \n. @SRandazzo very cool!\n\nI feel like pattern of subclassing MoyaProvider isn't the best decision\n\nAgreed. We've actually opened https://github.com/Moya/Moya/issues/144 concerning the subclassing pattern. With Swift 2's protocol extensions, it might make sense to ditch the MoyaProvider class altogether :tada: \n. Hmm, I can see this making sense but I agree it is a bit roundabout. I was thinking that this really belongs in the RAC/RxSwift provider extensions? Something like what we currently do at Artsy: https://github.com/artsy/eidolon/blob/f95c0a5bf1e90358320529529d6bf431ada04c3f/Kiosk/App/Networking/RAC%2BJSONAble.swift\nOr we could add another request method that accepted a class, too. Thoughts? \n. @ivanbruel This is fabulous :tada: Great work! \nI think we should be able to close this issue once the Readme has been updated to point to Ivan's library. @ivanbruel: if the maintenance on you ever need a hand maintaining your library, just let us know!\n. Sure, sounds like a kind of super-documentation around ObjectMapper and Carthage? Neato. \n. Cool, sounds like a bigger project. I think a mention in the Readme can help people looking for OM support now until we have the extensions documentation done. \n. Given https://github.com/Moya/Moya/pull/339 I'd like to close this issue. Is the larger project something we ought to open a new issue for? Maybe pointing back to this one for context? \n. The model is to return sampleData that reflects the info about the failure, just like on a success. We do this here on a per-target basis. \n. sampleData is actually a closure that returns an NSData instance. The demo I posted showed how you could customize the endpointsClosure to return customized Endpoints. \nI suppose what's probably confusing is the Success and Failure cases of the result. Failure is truly a network failure \u2013 the status code is optional, even. It's meant to simulate when the device cannot connect to the internet. The Success case is a \"success\" in that the API returns some data. it's agnostic to the idea that a 404 would be a failure \u2013 it succeeded because it returned data. \nI've opened https://github.com/Moya/Moya/issues/200 to make sure that we clarify this for other users. \nDoes that answer your question? \n. I'm glad! I'm going to close the issue, but if you want to reopen later, or open a new issue, please feel free!\n. True, but there are also error conditions in The iOS network stack that we want to simulate. Maybe we should rename these two cases then. \n. That's a good idea, @damianesteban. I don't believe we actually use OAuth; we only need to add an HTTP header. \nI feel generally that Moya is spreading in a few different directions, and we don't have a set of best practices that demonstrate or implement common practices, like OAuth. I don't think we need to implement MoyaOAuth or anything :grimacing: but some examples of using common libraries would be very useful, too. \n. So, thanks for the suggestion!\n. Awesome! Let us know how it goes!\n. @Dschee it's a good question, and it's one that we've faced before. I'm up for the change, but it would mean abandoning the Result dependency and the nice functions that accompany it like flatMap. It's too bad we can't typealias specific cases of an enum.\n. Yeah, we definitely can (I'm on the Result team) but I'm not sure it's a great idea, as you mention. Then again, I don't see any alternatives (I'm not a fan of documenting our way out of this \u2013 basically just blaming the user). Let's sleep on it and see if we think of any alternatives? \n. \"Response\" sounds appropriate. I don't want to impose semantics on top of Alamofire, so maybe have Response and Incomplete?\n. This is fixed by https://github.com/Moya/Moya/pull/228 \u2013 will be merged in an upcoming release (see #236).\n. This is great work, thanks @avf :cake: This is exactly how I would've implemented it, though it does make https://github.com/Moya/Moya/issues/144 even more important to deal with. \nJust a few things \u2013 you'll need to pull in changes from the master branch so we can merge your pull request \u2013 happy to help with that. \nSome tests would be nice, but it can be challenging to write them. If you like, we can write them together! Also, could you add an entry to the changelog? Make sure to give yourself credit!\nAgain, fantastic work :boom: \n. OK, sounds great! Feel free to reach out to ash@ashfurrow.com with questions. If I have some time this week, I'll send you some first steps that might help. \n. Hey! It's been a few weeks so I thought I'd check in. I never got around to writing some tests (busy weekend!) but this week I plan to get this merged. It'll take some work to resolve some conflicts \u2013 I'll take care of those \u2013 and I'll write a few tests. I'll post a new pull request and ask you to review it for us, if that's ok? Thanks again!\n. Hey! So the tests you added look lovely. I just realized, though, that the manager we recently added should provide, this, right? The Alamofire's Manager class seems to handle a lot of customization of NSURLSession and requests. \nDo you think HTTP auth is common enough that we should have a closure specifically for it? Or should we stick to the manager? I like the closure since it keeps things abstracted with the MoyaTarget protocol. But it also adds yet another init() parameter :sweat_smile: Any thoughts, @avf?\n. Thought about this more, and I really like you're implementation. It lets people auth on per-target instead of per-URL, which is the whole point of Moya. Great work, I'll get this merged ASAP. \n. OK, this is merged :tada: thanks again for your hard work, @avf. I've release 2.4.0 on CocoaPods trunk, and tagged a release on the repo for Carthage. \n. Meta-issue :)\nI've not used gitter, and I don't really feel like inviting people to another Slack just for Moya :sweat_smile: I personally like issues because they're public, searchable, and anyone can easily participate. Even for things like roadmaps, I feel it makes sense. But I know my feelings aren't universal, too. Happy to go in whatever direction we need to to make a great library. \n. Gonna close this \u2013 if we missed something in the discussion, or if it makes sense in the future, we'll revisit some sort of organizational chat :+1: :cake:\n. Cool \u2013 looks great, thanks! \n. Hey there! Great question \u2013 this is covered in the docs on endpoint mapping. It should be straightforward, but let us know if you run into any problems :smile_cat: \n. Don't worry about it! Glad that's what you're looking for. \n. So I'm thinking something like this:\nswift\npublic typealias RequestClosure = (Endpoint<Target>, NSURLRequest -> Void) -> Void\nThat the user passes in to the provider. It's a closure that's given the target, and another closure that accepts an NSURLRequest. The way you'd do this is something like:\nswift\nlet provider = MoyaProvider<MyTarget>(requestClosure: { endpoint, done in\n    let request = endpoint.urlRequest\n    // Modify the request, asynchronously.\n    done(request)\n})\nMy implementation of request() looks something like this:\n``` swift\npublic func request(token: Target, completion: Moya.Completion) -> Cancellable {\n    let endpoint = self.endpoint(token)\nvar innerCancellable: CancellableToken?\nvar cancelled = false\nlet outerCancellable = CancellableToken {\n    innerCancellable?.cancel()\n    cancelled = true\n}\n\nlet performNetworking = { (request: NSURLRequest) in\n    if cancelled { return }\n    let stubBehavior = self.stubClosure(token)\n\n    switch stubBehavior {\n    case .Never:\n        innerCancellable = self.sendRequest(request, completion: completion)\n    default:\n        innerCancellable = self.stubRequest(request, completion: completion, endpoint: endpoint, stubBehavior: stubBehavior)\n    }\n}\n\nrequestClosure(endpoint, performNetworking)\n\nreturn outerCancellable\n\n}\n```\nThe hard part is synchronously returning something from request() that can cancel an activity that hasn't yet been created. There's almost certainly something nicer than this, but I'm pretty tired :sleeping: \n@MarvinNazari what do you think? \n. Supper we could wrap the cancellation: \n``` swift\nstruct CancellableWrapper: Cancellable {\n    var innerCancellable: CancellableToken? = nil\nprivate var isCancelled = false\n\nfunc cancel() {\n    innerCancellable?.cancel()\n}\n\n}\n```\nWhich simplifies our implementation a bit: \n``` swift\npublic func request(token: Target, completion: Moya.Completion) -> Cancellable {\n    let endpoint = self.endpoint(token)\nvar cancellableToken = CancellableWrapper()\n\nlet performNetworking = { (request: NSURLRequest) in\n    if cancellableToken.isCancelled { return }\n\n    let stubBehavior = self.stubClosure(token)\n\n    switch stubBehavior {\n    case .Never:\n        cancellableToken.innerCancellable = self.sendRequest(request, completion: completion)\n    default:\n        cancellableToken.innerCancellable = self.stubRequest(request, completion: completion, endpoint: endpoint, stubBehavior: stubBehavior)\n    }\n}\n\nrequestClosure(endpoint, performNetworking)\n\nreturn cancellableToken\n\n}\n```\n. Thanks! What do you think of the implementation? https://github.com/Moya/Moya/pull/230\n. Fixed in https://github.com/Moya/Moya/pull/230 Will be released soon.\n. That's odd. How are you installing it? You'll need to manually point to Alamofire's Swift 2 branch in your podfile. It's working for me with this one: https://github.com/artsy/eidolon/blob/master/Podfile\n. Hmm. I'll have to look at that tomorrow. Might be a change with the GM. \n. I'm going to work on getting it all to work this afternoon with the Xcode 7 GM. \n. OK cool, so this is working for me (this PR).\n@zbeckman Your podfile looks good to me. But you'll need to update things:\nsh\npod update Box Result Alamofire Moya/ReactiveCocoa\nLet us know if that works :cake: \n. The code on this PR is working for me locally: https://github.com/artsy/eidolon/pull/504\n. Oh no! I had a similar issue yesterday but I can't recall exactly what fixed it. You've tried the routine fixes like deleting derived data and resetting the simulator? Are there any compiler warnings that seem related? \n. I agree the README needs updating \u2013 I'll roll that into https://github.com/Moya/Moya/pull/214 .\n. I've been able to use CocoaPods to install Moya/ReactiveMoya without any problems on a fresh Xcode project (download it here). I did so using Xcode 7 GM and the following Podfile:\n``` rb\nuse_frameworks!\ntarget 'Test' do\npod 'Result', :head\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => 'https://github.com/Moya/Moya.git'\nend\n```\n@zbeckman If that isn't working for you on your existing project, could you try cleaning your build directory? Command-Shift-K should do it in Xcode. It could be that Xcode's forgotten its derived data cache is stale. Let us know if any of that helps. \n. I've never used Carthage and CocoaPods together before \u2013 not sure of how that'd work. What version of CocoaPods are you using? There's a similar issue in #216. \n. We've rearranged this repository since you initially had this problem. Could I ask you to try creating a new Xcode project, and pod install using the following pods? Please leave Carthage out so that we can narrow the problem down. \nrb\npod 'Result', :head\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => \"https://github.com/Moya/Moya.git\"\nAfter pod installing, open the project in Xcode 7 GM and run the app. Hopefully it'll work (it's working for me). \nIf that doesn't work, please download this Xcode project which I've prepared. It works on my machine. If it doesn't on your machine, we'll have a better idea of where to look. \nIf that does work, we'll try the same approach on your library. If you could undo the changes made when you were troubleshooting using git, that would be helpful. If it still doesn't work, then it could be something specific about your project. \nI'll continue looking for the solution on my end. Thanks for helping us figure out the problem! :cake: \n. Great work! I'm having trouble with the Demo project in #216 too. After adding pods to the specific target in the Podfile, it's now working! This kind of stuff has always tripped me up \u2013 looping in @orta. \n. Great! I'm glad that's working. \nBox is no longer required at all. Result seems to have been updated on Trunk, so we can remove it too. Same with Alamofire \u2013 used to need it specified for Swift 2 support, don't anymore. \n. Seems like this is resolved, I'm going to close the issue. Don't hesitate to reopen, or open a new issue, if you run into any further problems. Thanks again for your help! :100: \n. Hmm, seems likely. I'll see what I can do to reconfigure it.\n. Thanks!\n. I've merged this for now; will fix the errors and send a new PR so it's cleaner. \n. Reviewed with @Orta in person. \n. Looks good to me. Can we switch the README banner, as well as remove the Circie CI config file? \n. :+1: :100: \n. Circle doesn't have Xcode 7 support yet. \n. Looks like a failing intermittent test. I'll investigate. \n. OK, I believe I've fixed the test. The test was checking to make sure that a cancelled request sent an error. The failure seems to be caused by OHHTTPStubs sometimes stubbing the response before it had a chance to be cancelled. I've added a half second delay to all stubbed responses. \n. Slight delay in the CocoaPods release \u2013 you can use the master branch in your Podfile for now. \n. OK, I'll play around with the module_name for the specs and verify it works :+1: \n. Hmm. Looks like it doesn't have the other Moya files. Makes sense since they're no longer subspecs. Thanks @gfontenot!\n. @justinmakaila Looks like CocoaPods can't handle having frameworks with the same module name. \n[!] The 'Pods' target has frameworks with conflicting names: Moya.\nThis means that users will need to import Moya, import RxMoya, or import ReactiveMoya respectively. Switching flavours would mean a find-and-replace. Kind of a pain, but people don't often switch flavours, and it's not too much effort. It also fits better with the Carthage folks' philosophy. \n@gfontenot Running the command carthage build --no-skip-current --platform iOS (we don't support Mac yet) now produces the following results:\n*** xcodebuild output can be found in /var/folders/c9/qfv9zg9n23v5yt50skqpmtg40000gn/T/carthage-xcodebuild.5IPQce.log\n*** Building scheme \"Moya\" in Demo.xcworkspace\n*** Building scheme \"ReactiveMoya\" in Demo.xcworkspace\n*** Building scheme \"RxMoya\" in Demo.xcworkspace\nThis seems good to me :tada: \nThere's a failure on CI \u2013 looks like Xcode is getting confused about something when building the unit tests. Investigating now. \n. :green_apple: \n. Instead of removing the no-longer-needed ReactiveMoya repo, we should transfer its ownership to someone so that GitHub redirects will work long enough for people to update their configs. @justinmakaila would you like it? \n. I've fixed #216 on this branch \u2013 just rearranging the podfile a bit. I've run carthage locally and it seems to be :+1: \n. Hmm. Failing on CI, succeeding locally with Xcode, and failing from xcodebuild but for a different reason. \n. OK, thanks @justinmakaila!\n. Hmm, @justinmakaila I can't transfer it to you because you have a fork already. GitHub made me transfer it to me first anyway, so the redirects will continue to work. Let me know if you still want it \u2013 you'd need to delete your fork first.\n. :tea: This is green again. I don't want to keep it open too much longer, or we're likely to get scope creep :sweat_smile: The Demo apps runs and the unit tests pass, and carthage builds fine \u2013 going to give some more time for review, then merge and release 2.2.0 :tada:\n. Great bug report! This looks similar to #210. Hmm... we haven't found a solution to it yet, either. We'll figure this out :)\n. Hmm. You ran pod install? What version of CocoaPods are you using? \n. Hmm. The CocoaPods version could be the problem. I remember skipping 0.38.2 but I can't remember why. Maybe updating would fix it?\nAlternatively, using our last release with Xcode 6 is a good idea. Check out this tag: https://github.com/Moya/Moya/tree/2.1.0 and let us know how it goes :+1:\n. Hmm. I'm seeing the same problem here. I'll investigate and get back to you and @zbeckman as soon as I have a solution. \n. Zacharias found that it was the podfile arrangement. I've pushed a commit that's yet to me merged: https://github.com/Moya/Moya/commit/a2be3c27bffc63427a980ebbcca6cb0c3f14fcec#diff-c2c2f4d15bfae1123d3167a807ac48d6R7\n. Hi there! No problem at all :) The Demo project on the current master requires Xcode 7 GM. For Xcode 6.4, you can check out the project in the last release. \nNote that the Demo project on master is currently not able to run an app, just unit tests. I'm working on fixing that in #215.\n. Coooooool, thanks. \n. Super! Don't forget to add a changelog entry with the update!\n. Coooool this is up on CocoaPods trunk: https://raw.githubusercontent.com/CocoaPods/Specs/73d48221ff011b8eb62174b9761bca23c5ba78ca/Specs/Moya/2.2.2/Moya.podspec.json \nThanks again!\n. Sounds like a good idea \u2013 doesn't sound too difficult, either. We could hook into the existing provider initialization, if that makes sense, or use NSNotifications. Thoughts? \n. Aye, so this is what I was thinking:\nA user could pass in an endpoint resolver or other callback we already have \u2013 the one they pass in would log stuff. So that's how it could work now. With a new library, we could call a function that curries back a function to pass in. \nswift\nProvider<TargetEnum>(endpointResolver: MoyaNetworkLogger.StandardLogger)\n... or ...\nProvider<TargetEnum>(endpointResolver: MoyaNetworkLogger.StandardLogger { target -> NSURLRequqest in\n    return /* our custom request, which the logger will then log before passing onto Moya */\n})\nMake sense? \n. Hmm, good question. There's no existing way to log these at all \u2013 we may have to add yet another callback to the provider :cry: \n. What if we added a property to the provider \u2013 could be constant or not \u2013 that conformed to a Logger protocol or something, and it gets callbacks about requests and responses. We could provide a basic logger, and people would be free to implement the protocol and provide their own. Thoughts? \n. Hey, this is almost correct. \nswift\nprotocol Logger {\n    // logging callbacks\n}\nThen provide a default:\nswift\nstruct PlainLogger: Logger {\n    // Do basic logging, basically print() all the requests/responses\n}\nThen have a new variable on the MoyaProvider.\nswift\nvar logger: Logger? = nil\nThen in our request method in the MoyaProvider itself, we can invoke the callbacks:\nswift\nlogger?.logRequest(request)\n...\nlogger?.logResponse(response)\nI'm thinking the logger doesn't touch the MoyaTarget at all \u2013 just the HTTP requests. Does that makes sense?\n. Hmm, yeah. I suppose it makes more sense to be let :smile_cat: \nI think it should be optional, though, and default to nil. Many (most?) users won't want HTTP logging. \n. Yeah! \n. Awesome, looking forward to your pull request! Don't worry about getting it in immediately \u2013 we've all got lives outside or GitHub \ud83d\ude38\n. What Xcode version are you using? \n. Looks like it was a problem with ReactiveCocoa's choice to release 3.0.0 as a Swift 1.2 library. We were using ~> 3.0.0-swift, and CocoaPods assumed that 3.0.0 would be compatible, so it tried to install that. I've pushed an updated Moya podspec that points to a proper 4.0 ReactiveCocoa version. Could you try pod update ReactiveCocoa and let us know? \n. Hmm. What are the contents of your Cartfile?\nActually, I'm pretty new at diagnosing Carthage issues. @justinmakaila does this look familiar? \n. @MarvinNazari could you clarify? I built the release of Moya with a version of CocoaPods newer than 0.38.2. \nAgain, not terribly familiar with Carthage (we just added support) \u2013 what happens if you remove the Alamofire and ReactiveCocoa lines from your Cartfile, out of curiosity? And just have Moya and let Carthage bring in the dependencies for you? \n. Hey! Don't worry about asking a question on the repo, that's exactly the right thing to do :smile_cat: \nThere's no first-class support for this kind of authentication-if-required behaviour. Moya abstracts network calls away, not your authentication. This is a limitation that's recently come up as a request by others, and we're planning on adding support to Moya: #209. \nI had a similar problem on an app I wrote using Moya. My solution uses the ReactiveCocoa extensions. Basically I filter all my API calls through one method. It returns a signal (kind of like a promise). The signal represents all the network stuff that has to happen to retrieve the target. So first it checks if it needs to re-authenticate, and includes that work in the signal it returns. \nIf using the ReactiveCocoa or RxSwift extensions is something you're open to, I'd be happy to provide more details on what that might look like. \n. Sure! So, we're still using the RAC 2 API :cry: but the principles are the same. \nHere's a simplified version of our approach:\n``` swift\nfunc XAppRequest(token: ArtsyAPI) -> RACSignal {\n    // This is just us looking for our auth tokens, which also expire.\n    var appToken = XAppToken(defaults: NSUserDefaults.standardUserDefaults)\n// This is a signal that represents a request to update our auth token, *if* we have to. Nothing will be done unless we include this signal in our return value.\nlet newTokenSignal = Provider.sharedProvider.request(ArtsyAPI.XApp).filterSuccessfulStatusCodes().mapJSON().doNext({ (response) -> Void in\n    if let dictionary = response as? NSDictionary {\n        let formatter = ISO8601DateFormatter()\n        appToken.token = dictionary[\"xapp_token\"] as? String\n        appToken.expiry = formatter.dateFromString(dictionary[\"expires_in\"] as? String)\n    }\n}).logError().ignoreValues()\n\n// Signal that returns whether our current auth token is valid\nlet validTokenSignal = RACSignal.`return`(appToken.isValid)\n\n// If the token is valid, just return an empty signal, otherwise return a signal that fetches new tokens.\n// After whichever of those completes, _then_ we attach our actual API-requesting signal.\nreturn RACSignal.`if`(validTokenSignal, then: RACSignal.empty(), `else`: newTokenSignal).then {\n    return provider.request(token)\n}\n\n}\n```\nI've written some comments inline \u2013 let me know if I can clarify anything!\n. Awesome, thanks! First glance looks great, I'll do an in-depth review tomorrow. Maybe a generic constraint could avoid the forced cast? \n. This looks amazing \u2013 really well done both of you. I didn't see a changelog entry \u2013 could you make one?\nIf this is a breaking change, I'd suggest we merge into the 3.0-develop branch instead of master. If it's not a breaking change, I'm comfortable merging this.\n. Sorry, didn't get to this today :( I will do it first thing tomorrow!\n. :grimacing: This'll need changes from master pulled in. Let me know if I can help!\n. Hmm, still showing as conflicted here: \n\nCan you double-check? \n. Definitely, thanks :) I'll get back to you about this within a few hours. \n. OK, I'm not aware of anyone who uses the RAC 2 extensions for thoroughly than our app, and in migrating I only saw one issue:\n``` swift\nlet request = Provider.sharedProvider.request(.FindExistingEmailRegistration(email: email))\nreturn request.map { (response) -> NSNumber in\n    let moyaResponse = response as! MoyaResponse\n    return moyaResponse.statusCode != 404\n}\n```\nIt said the type was ambiguous and was easily fixed. \nThis feels OK to me, but I know @orta is the semver police here. We'll merge into master if we get the :+1: or merge into 3.0.0-develop otherwise. \n. OK, since technically this is a a breaking change, and I don't want to give Moya users unexpected surprises when the pod update, I'm going to merge this into 3.0.0-develop instead. We'll be releasing 3.0 sometime this week, anyway, so you won't have to wait long to see this deployed :cake:\nThanks again for your awesome work!\n. OK, cool \u2013 this is merged in the develop branch, you can see your contributions to the history here: https://github.com/Moya/Moya/commits/3.0.0-develop\n. Pierre-Marc, this is fantastic work, thank you very much for your contribution! Well tested, well thought-out. Only thing I can find missing is an entry in the CHANGELOG.md file. \nGood to merge this once the changelog is in \u2013 then we'll release a new version for CocoaPods/Carthage so people can start using this immediately.\n. This is fixed by https://github.com/Moya/Moya/pull/228 \u2013 will be merged in an upcoming release (see #236).\n. These are some pretty big changes to the way we name things \u2013 probably best to get input from @Moya/contributors \n. Cooool, thanks! I'll give some time for others to review, too. \n. OK, will merge when I get a chance. \n. OK, so this has had master and 3.0.0-develop merged in. We should be good to go to merge this \u2013 once we do, I don't see too much stopping us from releasing 3.0.0 :tada: If anyone wants a final review, now's the time :smile: \n. Eek this shouldn't be a PR into master...\n. It may help to look in an older release to see how we used to do it. It might lend itself well to one solution or another. \n. It's tricky \u2013 I'm not sure this can be done with a plugin, not without significantly changing what a plugin is and does. The best bet would probably be to subclass MoyaProvider, but that doesn't benefit users already using the RxMoyaProvider or ReactiveMoyaProvider. Not sure there's an easy answer to this, but I'd love to hear ideas!\n. That makes sense and is a good solution, but we've had trouble before with \"just add an initializer parameter\" :smile: It eventually led to https://github.com/Moya/Moya/issues/144 and the idea of Moya plugins in the first place. I'm personally fine with it \u2013 it's going to be a breaking change either way, so reconsidering plugins might be worth it.\n. Looks cool! Want to add tests and submit a pull request? \n. Nope, it should be a matter of opening the workspace and hitting \u2318U. What errors are you getting? \n. Tricky. Not sure relying on the plugins is the best way to test. You could use a custom endpoint closure or something similar. 2.4.1 was the last version of Moya to support this on all providers (it was even turned on by default!) and it was tested like this but wasn't super-great either. \n. Cool, thanks!\n. OK, no feedback. Gonna merge this into the other feature branch, then resolve conflicts from there. \n. Huh, good catch! And a great test! Could you add an entry to the changelog?\n. Added it in, and merged to master. Thanks again!\n. Well, it gets passed in to the Initializer \u2013 the MoyaProvider is a generic type on MoyaTarget, so it needs to know what the type is. I'm not sure if MoyaProvider(GitHub.Zen) would work, but I haven't tried it. There's no initializer that it could call \u2013 or is this a Swift thing I'm not aware of? \n. @onmyway133 issues are for questions and clarifications, too! I want to make sure that we're on the same page. Let's start over:\nWhat is happening that you don't expect? What is not happening that you do expect? \n. Yup! And you can only pass enum values of the correct type to the request method, since they're compile-time checked \ud83c\udf89\n. This looks great! Really good work. I've got a few really small pieces of feedback that I'll provide inline. Additionally:\n- Can you add a note to the changelog?\n- Documentation can go in the /docs directory. Add it to the Providers.md file (which describes the provider initializer).\n- The CI is failing because we really need to address #144. Could you update the MoyaProvider subclasses for ReactiveCocoa and RxSwift?\nLet me know if I can help with anything \u2013 thanks again! :cake:\n. OK, that's all my feedback. Again, terrific work \u2013 thanks!\n. Aye, that's a good idea @aschuch \n. NSLog is a good question. Honestly I don't know. Anyone have any resources? Blog posts? Surely Mike Ash has something to say on the matter...\n. Yes, exactly \u2013 just the parameters :smile_cat: \n. Yeah, I think print is fine :smile: Don't sweat the small stuff, eh?\n@AlexanderKaraberov Do you want this in before we release 3.0? It's a matter of adding this feature to an existing release, or forcing users to adopt 3.0 (with breaking changes) to use it. \n. Closing in favour of new work to be done on #238.\n. I think the logger is well-covered, but we've got lots of open issues \u2013 feel free to dig in to any that look interesting to you!\n. Waiting (possibly) on #144.\n. Agreed. \n\nAsh Furrow\niOS Developer, Author\nhttp://ashfurrow.com\n\nOn Oct 3, 2015, at 1:39 AM, Alexander Schuch notifications@github.com wrote:\nI'd like to introduce #238 in 3.0.0 as well.  \n\u2014\nReply to this email directly or view it on GitHub.\n. Just gonna tidy up the docs around plugins, and we should be good to go on this. \n. Fixed in https://github.com/Moya/Moya/commit/d61003dd3c5e4bea18d69622a9038daa0aae7064 and pushed to CocoaPods trunk: https://raw.githubusercontent.com/CocoaPods/Specs/9186a2cd0f90f5cc20fa56d8a01f93bdeb1480a0/Specs/Moya/3.0.0/Moya.podspec.json\n. Generally looks great! I was a bit wary of the idea of \"plugins\", but I really like the implementation. \n\nI have a few pieces of general feedback:\n- I saw the note about avoiding protocols \u2013 let's see if we can think of something besides inheritance? Nothing comes to mind, though ...\n- Should a plugin be able to distinguish between stubbed requests and real ones? \n- Maybe the plugin functions should accept the manager as a parameter? I dunno, probably unnecessary but it feels like something that should happen. Thoughts?\n- Could we call them something other than \"plugins\"? :stuck_out_tongue: \nThanks again!\n\n. Ahhh, sorry I meant the provider parameter (through which, I guess, the manager would be accessible too).\nI guess what I'm really saying about the stubbed/not stubbed functions is that I don't think the plugin should even know if the request it's being called with is being stubbed or not. \nNomenclature is hard, let's give it a think :)\n. Also, I agree with using a logging plugin for this \u2013 it looks like we're on board to go forward with this solution, so let's I'm going to close #235. Happy to recreate the logger from there as a plugin, if I could help. \n. And don't forget about the changelog! :poodle: \n. Leaning towards protocols, personally. Will have time to review shortly. \n. Tricky problem \u2013 I think the root of the issue is that we want the plugins to both be able to be used with any type of MoyaTarget, but refer to the specific type that's conforming to that target. \nWhat I mean is, I'm not sure we need to use a typealias'd protocol or a generic class. What about the following?\n``` swift\npublic protocol Plugin {\nfunc willSendRequest<Target: MoyaTarget>(request: Alamofire.Request, provider: MoyaProvider<Target>, token: Target) -> Alamofire.Request\n\nfunc didReceiveResponse<Target: MoyaTarget>(data: NSData?, statusCode: Int?, response: NSURLResponse?, error: ErrorType?, provider: MoyaProvider<Target>, token: Target)\n\n}\n```\nEven if someone wanted a plugin to support a specific target type, they should be able to do that:\n``` swift\nclass ExamplePlugin: Plugin {\nfunc willSendRequest<Target: MoyaTarget>(request: Alamofire.Request, provider: MoyaProvider<Target>, token: Target) -> Alamofire.Request {\n    return request\n}\n\nfunc willSendRequest(request: Alamofire.Request, provider: MoyaProvider<HTTPBin>, token: HTTPBin) -> Alamofire.Request {\n    return request\n}\n\nfunc didReceiveResponse<Target: MoyaTarget>(data: NSData?, statusCode: Int?, response: NSURLResponse?, error: ErrorType?, provider: MoyaProvider<Target>, token: Target) {\n\n}\n\n}\n```\n@aschuch I'll send a PR over to your fork \u2013 looking forward to hearing what you think. \n. Hmm, wait that might not work. Anyway, I'll play with it. \n. Nah, this is silly. You have a working solution, let's merge this PR and keep the idea of moving to a non-inheritance approach for another release. \n. Ha, nevermind >.<\n. Hey @aschuch \u2013 you mentioned we can do in-place modification of the Request objects, right? I'm thinking that may be better than having the plugin functions return their own request \u2013 less overhead. Thoughts? \n. OK cool. @aschuch I've pushed a change for that and would like your go-ahead: https://github.com/Moya/Moya/commit/55d8ed9eef1be7011247174a54a3ce77cb37c0df\nThe logger was a lot easier after @AlexanderKaraberov did all the work already \ud83d\ude05\nOne more thing \u2013 I don't care for having to include Alamofire in the plugins. One of Moya's big selling points is that you don't have to care about Alamofire. We're leaking that up through our manager property and now the plugins. It's not a huge deal, but I'd love to nip this in the bud. \nWhat if we created a new protocol in Moya.swift that included things in Request that you might want to do \u2013 authentication, for example \u2013 and then made Request conform to the protocol in an empty extension. The nice thing is since no one else uses the protocol, we can add more functions to it later if Request adds them, or if we forgot to add them. So expanding the protocol wouldn't be a breaking change. Thoughts? \n. Yeah, I like that a lot actually. Work is done in https://github.com/Moya/Moya/commit/d68c03e276a13f58c4ce3e185ca97042bcb5429b if anyone wants to discuss that specifically. \n. @AlexanderKaraberov Yeah, just released 3.0! We'll be continuing to fix bugs that are reported, and implement features that are requested as they come up. If you have any ideas or suggestions, just open an issue :smile_cat: \n. Strange, our dependency on RxSwift is ~> 2.0.0-aplha-1. \nEsteban, it'd be great if you could do this \u2013 I'm travelling and don't have good access to internet. If you need push rights for CocoaPods trunk, let me know. \n. Sure \u2013 it surprises me a library as popular as Alamofire doesn't have tvOS support on trunk yet. Putting the podspec on a branch for now sounds like a good plan. \n. What an odd discrepancy. @Thomvis is there any reason the CocoaPods trunk version doesn't have TV support? \n. We should see an updated version tomorrow :)\n. Result has been updated on Trunk: https://github.com/CocoaPods/Specs/blob/master/Specs/Result/0.6.0-beta.6/Result.podspec.json @petester42 are there any other that need updating? \n. Thanks to @Thomvis for his quick turnaround on that!\n. OK, I've updated the ReactiveCocoa podspec on my fork (see: changes.)\nUnfortunately, I don't have 7.1 installed at the moment so I can't validate + push to trunk. Will do when I get to NYC. \n. Oh, wait. Need to replicate prepare_command stuff. \n. Cool, did that: https://github.com/ashfurrow/ReactiveCocoa/commit/7dc4d95df1dd3166fb4acef6498662f695e55721 Just need to lint + push. \n. Opened https://github.com/ashfurrow/ReactiveCocoa/issues/4 to remind me\n. Should be good to go \u2013 validated with Xcode 7.1 just in case, and it worked :+1: \nhttps://raw.githubusercontent.com/CocoaPods/Specs/a6b9eb7156e4809e43056cd54b6f754d98be6150/Specs/ReactiveCocoa/4.0.1-alpha-3/ReactiveCocoa.podspec.json\n. Make that 4.0.2-alpha-3 \u2013 had a mistake in the podspec :grimacing: \nhttps://raw.githubusercontent.com/CocoaPods/Specs/112a7c37ff9e86ccb41c4e56a94ef55d7367658a/Specs/ReactiveCocoa/4.0.2-alpha-3/ReactiveCocoa.podspec.json\n. Thanks a lot!\n. Fab!\n. I guess we haven't needed to set the request body directly. You can do that using the requestClosure if you associate a value with your enum case.\nswift\nlet requestClosure = { (endpoint: Endpoint<YourAPI>, done: NSURLRequest -> Void) in\n    let request = endpoint.urlRequest // This is the request Moya generates\n    switch endpoint {\n    case NeedsBodySetDirectly(let jsonArrays):\n        let newRequest = ... // modify request to set the request body to encoded jsonArrays\n        done(newRequest)\n    default:\n        done(request)\n    }\n}\nlet provider = MoyaProvider(requestClosure: requestClosure)\nOur goal is mainly to abstract that messy stuff away and only do the mapping to parameters or body once, instead of at every request. \nLet me know if I can clarify anything.\n. Is that a limitation of Swift's? As far as I know, you should be able to associate enums with custom types. \n. Ah yeah, thanks! We recently did a large rename and some of the documentation slipped throw :grimacing: \n. Looks great, thanks!\n. I'm sorry that you're having this problem :cry: I'm not sure how I can help \u2013 there's work being done to address the shortcoming in CocoaPods now. If you can, maybe ask there what can be done to help fix the issue? \n. Hey! Good question! The onlineSignal isn't a part of Moya, just our app. I actually just sent a PR changing the behaviour of the onlineSignal \u2013 maybe that would help answer your question? https://github.com/artsy/eidolon/pull/527\n. Cool, thanks for fixing this! \nAlamofire changed from ErrorType. In 3.0 it uses NSError but in 2.0 it uses ErrorType. As @orta pointed out in https://github.com/Moya/Moya/issues/254 , this will require a release of Moya 4.0, which is totally ok with me. \n@JRHeaton Releasing 4.0 would require a few additional changes:\n- Update from ~> 2.0 to ~. 3.0 for the Alamofire dependency in all podspecs.\n- pod install within the Demo directory.\n- Fix source code issues from update to Alamofire.\n- Update this PR description to say \"Fixes #254\" s GitHub closes that issue.\n- Update the changelog.\nWould you like to take this on? If you can't, don't worry \u2013 happy to finish up. Thanks again! :100:\n. Awesome, this looks great! :cake: \n. Super! This has been pushed to CocoaPods trunk: https://raw.githubusercontent.com/CocoaPods/Specs/372b7bdbf6c5a350b1de6bdb0843f3f6c90ecc30/Specs/Moya/4.0.0/Moya.podspec.json\nThanks again for being on the ball, @JRHeaton :8ball: \n. Fantastic, thanks a lot @bojan!\n. Hmm, neat idea! I don't see a downside to it, other that we'd be leaking out information that a developer could misuse... Doesn't seem like a big risk to me. We'll give it some time for anyone else to chime in and then whip this up!\n@nosrak113 If you'd like, I can give next steps for how you could submit a pull request to add this feature. No pressure \u2013 just let me know if I can help!\n. Clever! Couldn't have done it better myself. I don't think this needs any unit tests \u2013 could you add an entry in the changelog? We'll give people a day to look at #256 just in case, and we'll get this merged! Thanks for the PR :100: \n. Released in https://raw.githubusercontent.com/CocoaPods/Specs/23ec77d5074667f94cc3820123b8e18fad5061fe/Specs/Moya/4.0.2/Moya.podspec.json as 4.0.2.\n. How are you installing Moya? CocoaPods? What does your podfile look like? Xcode 7, right? Did a clean build produce a different error? \n\nAsh Furrow\niOS Developer, Author\nhttp://ashfurrow.com\n\nOn Oct 21, 2015, at 9:01 AM, istvanelekes notifications@github.com wrote:\n\u2014\nReply to this email directly or view it on GitHub.\n. Interesting! Could you send a pull request? \n. Since #261 is merged, I'm going to close this. If it's still a problem, please re-open!\n. Misery loves company :)\n. Hmm, we're actually not seeing this problem anymore. Going to close the issue. \n. Looks like I spoke too soon. \n. You just need a new tag for Carthage, right? Can do :)\n. Cool, I've created https://github.com/Moya/Moya/releases/tag/4.0.2-carthage \u2013 let me know if that works!\n. As long as the new release didn't re-re-introduce the problem :sweat_smile: What did the fix turn out to be, so we can integrate it into our deploy script?\n. OK, cool. This commit ( https://github.com/Moya/Moya/commit/d0d30b1ce98972ce30d4a5b7b2be0aa3d7b43fe3 ) got released as 4.0.3 tag. My guess is an older version of CocoaPods was used to deploy the problematic release. Let me know if it works. \n. Cool! I can handle updating the tests. What's the lint error?\n. Awesome! I'll take a look at tests when I get home. Thanks again! \n. Going to merge this as-is; I've opened https://github.com/Moya/Moya/issues/265 to address the CI. Thanks!\n. Cool, so we just need CI + merge from master + changelog update. \n. :clap: \n. :bow:\n. Hey there! Gotcha \u2013 a few things. You'll need to pull in changes from master (tests there are currently :green_apple:). If Carthage no longer relies on the Demo Xcode project at all, then we can stop checking in Demo/Pods altogether, and also stop duplicating changes in our pod specs for RxMoya and ReactiveMoya. \n\nAt first glance, this change looks good to me :+1: We've been keen to avoid splitting in two, because we had previously tried splitting up the Moya repo, which didn't work. Keeping it all here would be fine imo. Let's see if anyone has any comments. \n. Oh, hmm. Current ones are com.ashfurrow.Demo \u2013 not really appropriate anymore. Are the important in Carthage? If we just need one, com.example is fine.\nThe podspecs provide Carthage-compatible build targets in the Xcode project, but also complicate unit tests. I don't believe their needed after this PR \u2013 getting rid of them would be :100:\n. We should also document a checklist of what makes a great PR (with the understanding that some people won't read it, and that's OK because we're all doing our best). Things like:\n- A changelog entry (what is it, why does it matter, how do I make one?)\n- Updated tests (if you add something new, it should be tested)\n- Passing CI (what is CI?)\nWe should also consider automating some of this, maybe with SwiftLint. Anyone have any experience with it?\n. We should also formalize the fact that after a merged PR \u2013 even for documentation or whatever \u2013 contributors get push access to the repo. It's briefly mentioned in the readme, but we can do better. \n(We have turned on protection on the master branch so it can't be force-pushed to \u2013 there are no downsides to this policy imo.)\n/cc @orta \n. Great idea!\n. @orta as de facto Moya design dictator, I'll let you give the :+1: / :-1: on this. \n. Interesting \u2013 I think it's likely a relic of when we were keeping track of inflight requests, and deduplicating new ones. I think @justinmakaila would be able to give a concrete answer about it. \n. Coooool, @JRHeaton did you want to open a PR? \n. Going to reopen this, as @petester42 pointed out the issue is in the RxSwift provider, too. \n. Hmm. I understand the motivation for the change, but it does make me very uneasy. \nMy goal when originally making Moya was to abstract away everything I could into the enum. It's better, so my thinking went, that you must define everything in one spot once. This gives developers a quick-glance at what information each target needs to the your API. \nWe used to even have something like this, but moved parameters into the MoyaTarget protocol to be more declarative. Really, what would be ideal is enum cases with default associated values (something I've heard the Swift team at Apple is working on).\nYour approach of flatMap and indirect cases is really clever! Do you think adding documentation to demonstrate how to use this approach would be a good compromise? \n. No problem! The issue yore trying to solve is rally interesting. It never occurred to me I think because I haven't worked with APIs that have many optional parameters. \nWhat do you think about opening an issue to discuss solutions? \n. Looks good :+1: Can we get a quick note in the changelog? \n. Nah, I'll add it after. \n. Cool! I like the matching, but the empty return type is probably unnecessary. We don't specify -> () when creating the obervable, either. Wanna take those out? Otherwise looks :100:\n. Cool, great work! \n. Seems reasonable, thanks!\n. Super, this looks great! Did the podspec already get updated? \n. No problem, it passed CI :)\n. Fab :cake: Gonna merge manually ro run a pod install. \n. Looks :100: I have an idea about the lint failures \u2013 will let you know. \n. Hmm. No dice here. Looks like it's problems with RAC on the watch/tv platforms. I'll try to look into it shortly. \n. Getting the same errors. Makes me think it's a problem I made with the podspec. I'll take a look at it tomorrow with @orta and see if we can get this merged. \n. I've pushed up an updated podpsec to trunk that should deal with the problems: https://raw.githubusercontent.com/CocoaPods/Specs/92a7990f1f521367d3c4a1274d3ca37564973054/Specs/ReactiveCocoa/4.0.3-alpha-3/ReactiveCocoa.podspec.json\n. Validating now. \n. \n. Pushing up an update now. \n. Alrighty! Moya now supports iOS, OS X, watchOS, and tvOS: https://raw.githubusercontent.com/CocoaPods/Specs/2589039691ec831ba080994a5f4387306260da22/Specs/Moya/4.4.0/Moya.podspec.json\nThanks for all the hard work @petester42!\n. Neat! Might go well with https://github.com/Moya/Moya/issues/73 if anyone is interested. \nAgreed with your concerns \u2013 getting this to be an optional part of Moya will be tricky. Suggestions welcome!\n. Gonna merge this. I also discovered that @Moya/contributors was a private team, so @-ing them hasn't actually notified them until now :open_mouth: \n. Hmm, this is a question that has not come up before. Generally, there's no all-purpose solution to using a CocoaPods library without CocoaPods. If you must integrate normally, dragging in the Moya files in the Source directory should age good, but you'll need to remove RxSwift and ReactiveCocoa files if you aren't using them, also integrate Alamofire, and remove the import Alamofire statements from the Moya files. That should do it \u2013 let me know if you run into issues. \n. Instead of dragging in Xcode projects, try dragging in the individual swift files. \n. Agreed. \n. Cool, that approach sounds reasonable. @justinmakaila @petester42 do either of you have opinions about it? Whatever is more idiomatic for RAC 4. \nTo be honest, I'd be OK with deprecating request() and shifting the responsibility to call toRACSignal() to the user. Thoughts?\n. I think they'll just get an error like they do now, it's just it'll be an NSError cast from this new type instead of an NSError we construct presently. I like that change, but we'll need to bump Moya up a major version to adhere to semantic versioning :checkered_flag: \n. Travis is failing for Moya intermittently (see: https://github.com/Moya/Moya/issues/259 ). I've restarted the build to see what happens, and I'll take a look at the code now. \n. Yup, green now :smile: :green_apple: \nThis looks great, fantastic work :100:\nThe MoyaErrorCode enum exists, but I feel like (given the direction Swift 2 has taken with error-handling) it may be time to retire it altogether and use just your new MoyaError enum. This would only change using Moya with ReactiveCocoa (maybe we could make corresponding changes for RxSwift). Any opinions on that? /cc @Moya/contributors \nThere're a few tests I'd want to make sure we cover in SignalProducer+MoyaSpec.swift but we can sort those out later.\nUpdating the changeling is a good idea in the mean time \u2013 right at the top under \"Next\". Make sure to mark them with bold breaking changes and give yourself credit. Thanks again for the awesome pull request \u2013 we'll discuss it for a bit and get your changes into a release hopefully this week. Cheers! :coffee: \n. Agreed it's worth being thoughtful about their associated values. I'm not sure how I feel about the range specification. I think I like it \u2013 anyone else have feels?\n. I personally like ErrorType \u2013 it's convertible to NSError. \n. The ability to write exhaustive catch blocks is actually a really good point. \nLet's try to remember that we're all after the same thing (writing great code) even if we disagree on how to get there. If it would help, I can schedule a Google Hangout to discuss some of the pros and cons. \n. We should look into the history of their error handling first. The changelog might reveal why they have it this way. \n. Cool, not sure where we stand on this one \u2013 anything stopping it from being merged? \nIn the mean time, I'm going to merge https://github.com/Moya/Moya/pull/291 because it has no breaking changes, and it'd be cool to include its changes in a point release before this one (so people can have just those changes if they want). \n. Cooooool yeah sounds great! There've been changes on master since this PR was submitted, @tomburns could I ask you to merge from master?\n. Cool, seems good to me. If someone else could give this a final one-over and merge, that'd be :100: Good work everyone :balloon: \n. Hmm, this could be accomplished using the custom parameter encoding block, but I agree it's a bit awkward. Maybe we could look around ways to make it easier to use custom encoding (or including an implementation that works with GraphQL? Is Alamofire doing anything lime this?). Regardless, a good solution to this issue should include good documentation and maybe even an example project :cake: \n. Agreed about the black-box functionality. Would making the GraphQLQueryType an associated value on the enum help? Not too much. Hmm. \nIt could be a lot cleaner if the custom parameter encoding closure had access to the endpoint (or the target, I suppose). We only use that closure signature because we pass directly into Alamofire. If expanding it would help, that seems like a cool idea. \nI've not thought the issue through as much as you have \u2013 what sort of obstacles would that present?\n. Hmm, yeah. I mean, I know GraphQL is getting more popular so I think we should consider first-party support at some point. But for now I'm fine leaving it up to the user. \nThis is what I was thinking of, probably not a huge improvement.\nswift\nlet parameterEncodingEnpoint = { (target: GitHub, request: URLRequestConvertible, parameters: [String: AnyObject]?) -> (NSMutableURLRequest, NSError?) in\n    // Instead of accessing the parameters dictionary to construct body,\n    // You can access associated values of the target directly.\n}\n. @justinmakaila I've since used a GraphQL API, want to pick up the conversation on this? How did the framework go? \n. I'm afraid that I haven't used GraphQL with Moya yet, if you find things non-obvious, I'd love to see a PR adding GraphQL to our documentation \ud83c\udf89\n. Fantastic work, as usual! We could add Breaking Change to the changelog entry just to be super-clear. \nI've learned never to merge things before coffee; will do a final review later (unless someone beats me to it!).\n. Ah, clever! \n. That's odd \u2013 can you upload a project that demonstrates the error somewhere?\n. :+1: Glad it worked out. \n. Great idea! Thoughts @Moya/contributors ?\n. Hmm, super-interesting! I like it. Anyone else have feelpinions? \n. I'm not a fan of the double-optional parameters, just because there's this weird state where both are nil that no one is quite sure what to do about and mostly ignore it. A result type feels like a reasonable compromise. \n. Cool, looks great so far :cake:\n. I think you meant to say \"this is ready for final review\" \ud83d\ude09\nI'm on my phone right now \u2013 anyone is free to merge this if it looks \ud83d\udc4d to them \u2615\ufe0f\n. Yeah, I like even the idea of a non-optional closure with a default init value of an empty closure. \n. I mean, I prefer things to be non-optional whenever possible just to limit the surface area of the API. It's why the Cancellable tokens didn't keep track of their cancelled state until now :stuck_out_tongue: If you don't feel strongly against the idea, I don't feel that strongly about it. \nThough I would like to keep things consistent within Moya and adhere to Apple's general practice of using () -> Void instead of () -> () if that's okay.\n. > they're really just a glorified completion\nNow you're getting it :wink:\n. Looks great! Thanks!\n. Looks great! Thanks!\n. > changed it to be a matcher\nGreat idea! :100: \n. > changed it to be a matcher\nGreat idea! :100: \n. Sounds like a plan!\n. Sounds like a plan!\n. Can you merge in from master and push? \n. Can you merge in from master and push? \n. Yeah, I like the idea of a milestone but I'm not sure we need any specific date to plan on. We can evaluate issues for version 5 on a case-by-case basis, and if anyone feels we're waiting too long, we can talk about it. \nThis is also a great issue to discuss anything that's missing (changelog entries, for example). Thanks T-Swizzle. \n. Agreed with Orta \u2013 some clarification in the readme would be good, but that's not a blocker. I'll open an issue. \n. Okie doke, wow! You're right this is a huge PR :sweat_smile: That's ok, thanks for the work! I'd like to discuss a ew top-level issues before we discuss nitty-gritty details. \nI'm good with all the renames except MoyaProvider \u2013 I know it's not necessarily \"Swift\", but I really like having the library name somewhere in there. Maybe it's just me \u00af_(\u30c4)_/\u00af\nThe changes to EndpointSampleResponse look good, too. The final test classes, I've never seen that but fi that's what's suppose to be, that's fine. \nI think adding @petester42's suggestions about throwing closures becomes necessary with these new changes. We can wait until after this is merged before doing it though \u2013 already a big enough PR :)\nThis'll need a merge from master and all of these points need to be described in the changelog, but yeah I agree with the general thrust. Thanks for the work! Smaller PRs next time! :cake:\n. Yeah good point, even if the compiler lookup can succeed most of the time using type inference, my brain's type inferrer is less powerful. \n. Sounds good! Looking forward to the PRs! \n. Cool, looks good to me. Could you add a changelog entry? \nIf someone from @Moya/contributors could also take a look and merge if once it's :+1: to them, that'd be :100: \n. Gonna close this since #305 got merged. \n. Cool, looks good. This depends on #304? Want to update the PR description?\nAlso, a changelog entry would be :cake: \n. That would be a correct literal interpretation, yes. \n. @colinta those are some good points. It seems like Swift libraries are going one of two ways: either they're sticking with common Objective-C-style conventions like prefixes or they're going 100% prefix-less with no prefixes. Alamofire has gone the latter route. \nI agree with the downsides. In the case where there are two Response types, you can delineate between the two by using the Moya. prefix (we do this when using Alamofire here for example).\nSeems we're at a crossroads. I honestly don't have a strong opinion either way, but I recognize that this is a big shift and it deserves thoughtful consideration. Trying not to spam @Moya/contributors but I think this deservers further discussion. \nEdit: Not to sway the discussion, but it seems like the prefix-less approach is \"where the puck is going\" with Swift, though.\n. Cool, can someone hit the \"merge\" button?\n. Sure!\n. Note that I don't think this'll apply to any PRs sent without this commit in their history.\n. @swizzlr is it possible to turn off the code coverage check for the patch? It's consistently failing, and I don't think it's super-necessary. \n. Also for some reason it's still trying to merge in commits that were already merged. Can you merge in from master when you get a chance?\n. Yeah totally, I'm just worried someone sending their first PR will be intimidated by a failing CI :(\n. @swizzlr Anything I can do to help on this? \n. Cool. One thing, @swizzlr: there is absolutely no apologize necessary \u2013 we're grateful for your contributions and you should not feel like you've let anyone down. \n. Thanks for the great idea @SRandazzo! I turned on protection for master when we made Moya an organization, and even clarify(ish) this in the contributor guidelines. Great minds :)\nAs far as CI passing, that's a trickier one. Sometimes we'll merge in broken tests because getting a PR merged is more important than getting the submitter to fix the tests (they're a first-time contributor and it's easier for me or someone to fix it after it's been merged). Also, we have intermittently-failing CI (see #259).\nI think @swizzlr's \"discretion\"-based model is :+1:, and I want to give all the contributors a chance to use their own discretion. \nThat's just my \u00a22, if the community wants this then of course we'll enable it. Thanks again for the great suggestion! \n. > If it weren't for those intermittent failures, I would propose an experiment to try it out\nAgreed! Definitely worth a shot. Do you think it's worthwhile to keep this issue open for more discussion? Let me know if I can help answer questions about CI :boat: \n. We're still pretty consistently getting CI failures, which sucks. I heard a rumour Circle might have a feature soon to restart builds failed with the infamous \"Error 65\", we'll see. \nIn any case, we now have Danger on the repo's pull requests, and sometimes we do need to override. I really liked the discussion here, but I think we've settled into a groove with the somewhat protected branches. Thanks again for sparking a good discussion!\n. Pshaw, nah. Merge whenever :)\n. This looks :100: great work!\nFor the module name problem, since that exists currently, we should probably open a separate issue about it? \nThanks again, @petester42. We'll need to update our docs, but we can open an issue for that after we merge this. Can someone else from @Moya/contributors take a look and merge if they're happy? \n. Fab, good catch! :cake: \n. Hey, no problem! The third option sounds appealing; it's how CocoaPods works anyway. We can also use preprocessor directives cleverly somehow maybe. \n. Hey there! Great question. We cover a bit about parameter encoding in the docs, but the short-and-simple answer is that you need to pass a custom endpointClosure when you create the provider. It takes a target, which you switch on to customize individual endpoints. \nThe parameter encoding you're describing is pretty custom \u2013 query string in the URL and a JSON body \u2013 so you should use the .Custom parameter encoding type. It takes a closure that modifies the NSURLRequest and returns it. You can see the source here. \nLike I said, it's a pretty custom thing so I'm afraid to say we don't have many examples on it yet. We'll help you figure it out, though! And once we do, it would be :100: if you wanted to submit a pull request that adds some more examples to the docs based on what your experience :cake:\n. Looks good to me! I must admit I've not tried this before, but it looks like it should work :+1: \n. @petester42 I quite like your approach here. Seems pretty reasonable, given the constraints we're in. \n\nsupporting carthage currently which seems like a bigger headache than it should be or worth.\n\nYou took the words right out of my mouth... \n. Looks great, thanks! \n. Progress reporting was implemented in #543 and released in 7.0.0. We also have asynchronous request closures, I think that covers most scenarios. Is this okay to close? \n. Cool! Glad that's working. @ivanruizscm would you mind if we close this issue? \n. When I've seen problems like this, it's typically \"the nth test always fails\", irrespective of which test that is. \n. Likely a combination \u2013 I've seen it on other projects where Quick/Nimble only fail to work on slow hardware like Travis, and only sometimes. \nWant to restart that build to get the green check in our commit history? \n. Looks like the error we're seeing here is different from #265. Could this be a legitimate test failure? It's only happening on the pr tests \u2013 @petester42 when you have a chance, could you merge in changes from master and see if the test continues to pass locally? That way we can verify if it's a true failure or a Travis problem. \n. Nope, just intermittent \u00af_(\u30c4)_/\u00af\nI'm merging!\n. Hey, good question! Moya uses Swift's associated values on enums in order to pass in parameters. \n``` swift\nenum TestApi {\n     case Login(userString: String, passwordString: String)\n}\nlet endpoint = TestApi.Login(userString: \"Ash\", passwordString: \"password\")\ntarget.request(endpoint)\n```\nDoes that make sense? \n. Ah! I see. You can switch on the target and return a different endpoint. \n``` swift\nvar endpointClosure = { (target: TestApi) -> Endpoint in\n    let endpoint: Endpoint = Endpoint(URL: url(target), sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\nswitch target {\n    case Login(let userString, let passwordString):    \n     let credentialData = \"\\(userString):\\(passwordString)\".dataUsingEncoding(NSUTF8StringEncoding)!\n     let base64Credentials = credentialData.base64EncodedStringWithOptions([])\n     return endpoint.endpointByAddingHTTPHeaderFields([\"Authorization\": \"Basic \\(base64Credentials)\"])\n}\n\nreturn endpoint\n\n}\n``\n. Yup, that's right!\n. Sounds like something that the library should fix :smile: Could someone open an issue (or send a pull request :wink:)?\n. UsingrequestClosure`, is this issue is resolved?\n. Really cool PR, thanks! I don't mind it coming from master at all, personally. Could you add an entry to the changelog when you get a chance?\nThanks again! \ud83c\udf89\n. You can update the changelog, commit, and push to this branch and github will add it to this pr \u2b50\ufe0f\n. Fab, looks great! Want to add an entry to the changelog?\n. Sure, can do. Where did you get the original to modify? We're using https://github.com/mhuusko5/Podspecs as a source for Ruby-based pod specs. /cc @mhuusko5\nAlso, I'm afraid to say that the ReactiveCocoa developers are unlikely to do anything but close your issue. They've declined repeated offers from myself and others to help maintain the podspec in their repo, and choose to be poor sports instead. \n. Makes sense \u2013 the Ruby ones are a bit easier to reason about. \nI'm not sure why they insist on declining, but it's been that way for as long as I can remember \u2013 far before Carthage. \n. The next step is we need to push a podspec to trunk. Could you update the podspec on https://github.com/mhuusko5/Podspecs and send him a PR? Then we can push to trunk, then we can merge this :tada:\n. Looks good to me, if someone else wants to review + merge after the changelog is updated, that'd be :100: \nThanks again @mpurland \u2013 great work!\n. Thanks!\n. I've added you as a contributor to Moya, so you've got full push access :tada: You can read more about that here: https://github.com/Moya/contributors\nI've also released 5.1.0 of Moya so you can use your new commits from Trunk! Thanks again!\n. @mpurland of ReactiveCocoa? Not sure. \nI have no feelings towards Carthage support. If that's a thing we can do (easily) to help them, sure sounds good :+1: My only requirement is that it gets automated: https://github.com/Moya/Moya/blob/e069bc22e28b2d69cfcfbbae3cb15304d112fbd6/Rakefile#L27-L57\n. Oh I see, so specifying GitHub instead of Git in Carthage means very different things, one uses GitHub-specific thingies and the other just uses tags? I did not know that \u2013 seems silly. Anyway to create a \"release\" from the command line? \n. I'd like to point out that, unlike with Carthage, we may have the opportunity here to add support for subspecs to SPM. I honestly think they're a fantastic feature, and I know the SPM/CocoaPods people have been chatting. Maybe that's something we could do together.\n. Neato :ok_hand: \n. Aye. If anyone is interested in the specifics of what's involved, check out this PR for our first attempt at a multi-repo setup, and then this PR that finally did add Carthage support (it discusses the reasons for going with only one repo).\n. > I had to argue that it was worth building a non-RAC version at all at the start\nHa, I forgot about that!\n. Hey there! Great question, I've had this kind of error happen before too. I think it's a bug in Swift surrounding error-handling and inferring closure return types. The way I've fixed it is to explicitly tell swift what the closure return type is. .map { response -> [Model] in or whatever. Let me know if that works! \n. Great! Glad that worked, thanks for posting the solution! Should we close this issue?\n. Hello, sorry you're experiencing this error. Not sure what's going on, as I'm not as familiar with Carthage. Any ideas @justinmakaila ?\n. You should be able to try again now and have it work \u2013 see https://github.com/Moya/Moya/issues/335 for more details. \n. OK, so if the username and password apply to every endpoint, you have a few options. The easiest is to store the username and password in a globally-accessible place. Then your closure would look like:\n``` swift\nvar endpointClosure = { (target: TestApi) -> Endpoint in\n    let credentialData = \"(globalUserName):(globalPassword)\".dataUsingEncoding(NSUTF8StringEncoding)!\n    let base64Credentials = credentialData.base64EncodedStringWithOptions([])\n    let endpoint = Endpoint(URL: url(target), sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n        .endpointByAddingHTTPHeaderFields([\"Authorization\": \"Basic (base64Credentials)\"])\nswitch target {\n// TODO: Customize any parameters on an as-needs basis.\ndefault:\n  return endpoint\n}\n\n}\n```\nThere are other ways to do this, like using composition to encapsulate the username/password inside an object that also holds onto the Moya provider for you. We do something similar here, but for other purposes. You could also store the credentials in another type. There are lots of different options to do this well, but I'd first focus on getting it to work, and then make it awesome after :tada:\nDoes that help? \n. Hmm, that's odd \u2013 sorry this is being problematic. So Moya actually used to let you do this, and we took it out to sort of \"force\" developers to put these types of parameters inside enum associated values. \nYou're right that enums can't have stored properties, but an enum case can. In our login case, we attach username and password as associated values. Then later when we need to return our parameters, we use those associated values. This lets us store, and then retrieve the parameters. Your code to invoke the endpoint would change to look like the following:\nswift\nMyProvider.request(token: Target(offset: 0, limit: 15))\nDoes that make sense? \n. Ok cool, this looks like it got sorted out. Going to close, feel free to re-open \ud83d\udc4d \n. Oh, right. Carthage means different things between specifying \"git\" and \"github\" \u2013 we've seen this before, sorry it's not fixed yet. \nI've created a 5.1.0 \"Release\" in addition to our existing tag. Try again and let me know if that works. \n. Ah I see, right. Moya 5.1.0 has a different version of RxSwift as a dependency. I'll fix that tonight, or roll back to beta 2 for now. \nFor anyone interested in the problems with releases vs. tags in Carthage, check out the end of this thread: https://github.com/Moya/Moya/pull/329\n. @mpurland When you get a moment, could you review this PR? \n. Aye let's merge. Can the people above in the conversation please open issues they feel need to be addressed? \n. Doesn't type inference tell Swift which to use? It's also possible to use Moya.Result. I'm not opposed to adding a dependency if we need it. \n. Sounds like the easiest solution is just to add a dependency to Result. I'm totally OK with that \u2013 anyone have time to send a PR? \n. Fab idea. This would also be a great \"first time\" contribution, too!\n. This was fixed in #344, I believe. If it's still an issue, we can re-open.\n. Looks fab :tada:\n. Cooooool\n. Interesting, good catch :+1: It could probably stand to be tested \u2013 I'm ok merging as-is as long as we open an issue to add tests later. \n. Cool cool, forgot to ask for a changelog \u2013 feel free to merge once that's in. \n. Cool, thanks for looking into this. We could certainly just bump up out minimum deployment versions. Anyone else free to help on this? \n. Looks good to me!\n. Correct \u2013 we tried multiple repos but it got out of hand, quickly. Moya was created as a CocoaPod, and the Carthage support we have today was added after the fact by volunteer contributors (we're very grateful). The Carthage team has been asked for a subspec-like feature to accommodate this, but they have decline (it's antithetical to how they believe libraries should be built). \n. Totally \u2013 everyone has different needs :)\n. Cool! I'm pushing to trunk now \n. Sounds like this is resolved, feel free to re-open if not \ud83d\udc4d \n. I've heard of people doing this \u2013 @swizzlr I think \u2013 but this is the first code I've seen. Looks really cool! I think this approach is definitely worth adding to the docs. Thanks @mpurland!\n. This has been implemented with StructAPI, and I've opened issue #552 to document its use properly. I think this addresses everything, please re-open if there's more to do.\n. I've opened an issue on Alamofire to get this sorted out. We'll see how it goes.\nThe problem appears to be how we structure the authentication plugins. Maybe we need to rethink the plugin architecture. Actually calling the network while stubbing seems like a serious issue and we should prioritize. \n. @cnoon has provided valuable feedback: https://github.com/Alamofire/Alamofire/issues/986 I believe we should follow their advice and use a custom manager instead of the shared one (while still allowing devs to pass in their own manager if they want). \nThoughts? Feels? \n. Sounds good, thanks! In the AF issue, they had some guidelines about how to create a manager with good defaults. \nWe also need to update our documentation to make it clear that we don't use the shared manager anymore. Since this is a breaking change, the next Moya version will be 6.0.0.\n. Yup! I would add a comment pointing to the issue, too, in case someone is curious. \n. Looks like this is fixed in the current master: https://github.com/Moya/Moya/blob/d2897a91ee3b92214fd6e8d7636cec96a019f2dd/Source/Moya.swift#L306-L314 Going to close, thanks again for opening and the discussion!\n. This is an interesting PR (humblebrag) specifically from a unit testing perspective; I'm happy to answer questions or clarify changes made to our use of matchers, etc.\n@Moya/contributors this would also be a good \"first PR review\" if someone out there hasn't reviewed+merged one before.\n. Open an issue \u2013 they seem to be all about small libraries. \n. I think I've addressed all the feedback; GitHub isn't collapsing it since it's on the commits instead of the PR \u00af_(\u30c4)_/\u00af\n\n. Great, thanks!\n. The CI failure isn't your fault, btw :sweat_smile: \nI've invited you to the Moya contributors group \u2013 no pressure to accept! You would have the ability to review+merge others' PRs. There's more info here. \nThanks again for the PR!\n. This should be fixed, especially with CocoaPods 1.0 out. \n. Did you get this figured out? Is it a duplicate of https://github.com/Moya/Moya/issues/356 ?\n. Hmm, good question! I think the filtering idea you have could work, but it's not ideal. Like, Moya should handle this somehow. Let me think about it, maybe someone else has a better idea. In the meantime, filtering is your best bet. \n. Hmm, good question! I think the filtering idea you have could work, but it's not ideal. Like, Moya should handle this somehow. Let me think about it, maybe someone else has a better idea. In the meantime, filtering is your best bet. \n. Ah, that makes sense! We should add that as an example to our documentation. Would you like to send a pull request? :wink:\n. Cool, thanks! Take your time, no rush! :christmas_tree: \n. Interesting discussion! I hadn't considered making the provider non-optional, since the original Moya was heavily configuration-based (where now you can create a provider with sensible defaults by passing in no initializer parameters at all).\nI can see both sides to this. On the one hand, having a shared provider for all networking (multiple target types) would be convenient. OTOH, custom behaviour around specific cases of the enum (or whatever) is really hard without generics (see this example).\nI'd be comfortable moving away from generics if there is a compelling reason and if we can keep the existing philosophy and customizability intact. That second part is a big question mark right now, and it may be outside the scope of optional parameters \u2013 maybe it's time to make a new issue?\nIt's also worth noting that for a large number of endpoints, something like a generated-enum may work, which has been an open issue for some time.\n. Yeah, that compiles but as I tried to describe in my earlier comment, it betrays the philosophy of Moya. Conditionally casting a parameter to a specific enum (or one of several enums, to expand to many) is... icky. \nAt a higher level, we're discussing the separation of the one-to-one relationship between the provider and the target type. That's a big change, I think we can all agree, and it's one that would need to be taken with care and thoughtfulness. \n. Sounds good! \n. I think this is resolved, not 100% sure. @jasl sounded like you had an idea of what to do next here, is that right? \n. Thanks for the kind words! I'm not entirely sure what the identity is, but I've only used Moya for OAuth/XApp/Basic HTTP authentication methods. As you noted, the request closure is where I would think this would go, but it's clearly a no-go if you need only some endpoints to be authenticated.\nA Plugin could work. We have a basic auth one but it has some issues right now. I've done something here that might work, but that approach relies on RxSwift/RAC.\nA sort of hacky way to do this (for now, until we have a better answer) is to use the requestClosure and check against the Endpoint's URL or something. It's not great, but it would work. \nThis seems like a common-enough problem that we should a) fix #326 and add documentation on how to do general-purpose authentication plugins.\n. Ah, I see. Good point. I'm not sure if the best way to approach this \u2013 the existing examples focus on authentication outside of Moya or authentication at the Target level in the endpoints closure. \n@Moya/contributors any suggestions here? \n. Any further discussion on this? \n. Going to close this issue, but I'll note that there's a demo of a re-authentication plugin in this issue that's worth checking out: https://github.com/Moya/Moya/issues/744 Thanks again for opening @Skornos!\n. Looks awesome, thanks! \ud83c\udf89\n. I've invited you to the Moya contributors list \u2013 no pressure to accept! If you're curious about what being a contributor means, check out the docs.\n. Obviated by https://github.com/Moya/Moya/issues/378\n. Yeah, Moya 5.3.0 uses RxSwift 2, which changed just to be a static function on Observable. This means just(whatever) became Observable.just(whatever) (or .just(whatever)). Running pod update Moya should fix this :+1: \n. Yikes! I'll take a closer look later, but when I encountered problems upgrading eidolon to Moya 6, most problems were solved by being more explicit about closure parameter/return types. You can check out our existing inplementation, too. \n. Ah, sounds like trouble :) Is this issue good to be closed? \n. Hey, don't worry about it! Issues are the perfect spot for questions like this. I guarantee other Swift developers are getting similar errors, and if we debug problems like this in the open, then they won't have to fix it by themselves next time :wink: \n. Thanks @aamctustwo \u2013 much appreciated :bow:\n. I think subclassing makes sense for this task :+1: However, the error you're getting suggests that maybe there's another Response type that's confusing the compiler. Can you try being explicit? Like Moya.Response (or ResponseType or whatever it is now \u2013 gosh, I can't keep track of my own library :sweat_smile: ). Let us know if that works. \n. Cool, glad that worked! Do you think we could/should improve our documentation around this? \n. Please do, and @ mention the contributors, too. We discussed this some time ago, and I feel like we've tried to adhere to an ideal that may not be best in practice. \n. Definitely, thanks for opening the issue @tomburns. \nThis question is bigger than just Moya and something the entire Swift OSS community will need to answer. I don't have strong opinions, either. Maybe this is the new norm and we just need time to get used to it. Of course, lots of people said the same thing when The Phantom Menace was released and look how that turned out.\nDoes the compiler error present when only importing Moya's module, or when you link with Alamofire at all?\nIn any event, documentation and sample code should be updated to reflect the fact that using Moya's Response type requires namespacing it with Moya.Response.\n/cc @Moya/contributors \n. Hey there! Sorry you're having trouble. It looks like you're just customizing the endpoint mapping, right? If that's the case, you don't have to subclass the provider at all, you can just pass in the closure when you create the provider. Subclassing the provider is generally only needed when you have to change the behaviour of the request method. For example, waiting until there is internet before sending the request.\n. Definitely \u2013 we need more examples for sure, and are tracking ideas here: https://github.com/Moya/Moya/issues/189 Let me know if there's anything else I can clarify :smile_cat: \n. Hmm, good question. Based on the current architecture, the plugins are only notified about the response (they're more meant for dealing with requests, not responses). For ObjectMapper, have you taken a look at this library? https://github.com/ivanbruel/Moya-ObjectMapper\n. Yeah, I understand that perspective. But I'm not sure that level of extensibility is right for Moya's level of abstraction. \nWhat you're describing sounds like it might go well with the reactive approach, which I've used here. Happy to clarify anything. \n. Cool cool \u2013 let us know if you have any other questions or if we can clarify anything else :+1: \n. Hmm, hard to say what's happening without more code. The underlying error isn't too descriptive in this case. \nHave you made any recent changes? Upgraded the library? Can you double-check the base URL?\n. Oh, forgot to say: sorry about this! We try to have descriptive errors. Thanks for opening the issue, we'll do our best to figure out what's going on :+1: \\\n. Well! Glad to hear it's working :smile: It must've been a network issue, since an error like that indicates that there is no response (otherwise, you'd get a status code and stuff). \n. Hey there! Sorry you're having a problem \u2013 not sure which version of Moya you're using, but an error code of 5 suggests that you can access the underlying error. Check the source code out here: https://github.com/Moya/Moya/blob/master/Source/Error.swift\n. That's strange, RxSwift should already be using the new error-handling. You can use the Swift case syntax to unwrap the enum and the underlying data: https://github.com/artsy/eidolon/blob/24e36a69bbafb4ef6dbe4d98b575ceb4e1d8345f/Kiosk/Bid%20Fulfillment/PlaceBidNetworkModel.swift#L49\n. With @sunshinejr's comment, I think this is closed. Please re-open if not.\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Ahhh, yup \ud83d\ude05\n. Sorry for the late reply, where are you seeing these errors? Is it in the Demo app? The warnings seem to say that XCTest (the unit testing framework) is being linked against for an app target, which I suppose could be caused by our Demo app (I can't remember how Carthage is configured). I've looked through our app right now to see if we're linking against XCTest and I don't see it. Is this bug still happening?\n. Aye, @colinta I encouraged @jasl in https://github.com/Moya/Moya/issues/358 to open a PR to discuss some of the changes. I'll have time hopefully to look it over tomorrow!\n. @jasl Yeah, sometimes we want to stub immediately and sometimes we want a delay. Always in unit tests, of course. \n. Could be a use-case for an enum:\nswift\nstruct StubBehavior {\n    case .NoStubbing\n    case .ImmediateStubbing\n    case .CustomStubbing(closure: T -> Int)\n}\nOr something like that. I don't feel like the overhead of the current usage is bad at all, not sure how much extra utility we'd get changing the stub parameters (again lol) given everyone would have to update their code.\n. So yeah, lots of interesting ideas in here, some I like and some I don't. I'm not sure I'm the best arbiter of what should/shouldn't be considered though \u2013 Moya is too close to me and I don't think I can be impartial.\n@Moya/contributors If you have time, taking a look through this PR and grabbing ideas to consider would be :100: Thanks again @jasl \u2013 I think from this PR we can break out into smaller issues to consider the pros and cons of each idea individually. Does that make sense?\n. Actually, I take back my comment about always stubbing in unit tests :speak_no_evil: Eidolon uses stubbed responses for an offline mode available to OSS developers who don't have access to our API, as well as Artsy developers when they're offline. It's often useful for development, though I agree in production it does seem weird. \n. Hi again @jasl, we've created a first-party approach in #427 that I think might work. Does that satisfy your needs? \n. Ah, I see. So you're looking to use any struct that conforms to the TargetType, not just a specific one. That makes sense. I've opened https://github.com/Moya/Moya/pull/430 to try and fix that. Would love your feedback :cake: \nWe need to balance the needs of different users, and while I understand wrapping the struct in an enum like this may not be the best approach from everyone's perspective, we've had to make compromises. I've been working with other maintainers for weeks on this issue and I feel like this is the best approach. If you like, I'd be happy to have a Skype call and chat about it, and hear more about your ideas to make Moya even better. Thanks again for the PR :bow: \n. Don't worry about renaming at all, it's open source because we want people to experiment however they like! I'll add you on Skype and see when you're free.\n. After chatting with @jasl today, I've moved their feedback into #434 to discuss point-by-point. We'll borrow the ideas we can and bring them into Moya one-at-a-time, so I'm going to close this PR. However, that doesn't mean we should stop discussing the ideas. There are some really neat ones here, and I've asked in #434 that we list specific ideas to bring over, so please continue the conversation there :bow:\n. Makes sense to me. If CI passes we can merge, then make a small release. Thanks!\n. Looks like no one has released an RC 2 podspec yet. I think https://github.com/mhuusko5/Podspecs is the canonical location to update them, since the ReactiveCocoa folks decline to maintain the podspec themselves. \n. I've hit the \"Rebuild\" button on Travis now that the RC 2 podspec is on trunk. Thanks @aloco :100: \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. OK, should be good to go on 6.0.1 :+1: \n. Never got around to this, the Rakefile we have works okay. \n. Super, looks great!\n. Cool, version 6.1.0 has been released with this fix. Thanks again! :tada: \n. Fab! Gonna merge without waiting for CI. \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Great idea! Will wait for :green_apple: then merge and release. \n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Fabo \u2013 this has been released as 6.1.1, thanks! :tada: \n. I'm sure you will :bow: But no pressure to, we all have lives outside open source!\n. Hmm, yeah. nothing pops into my head immediately. I agree that automating this somehow would be :100: \n. If this is wrapped up, I'm going to close it. Feel free to re-open if we can help further. \n. Yikes! Yeah, our readme/documentation is out of date, sorry about that :disappointed: \nYou can see a working example in the Demo app. It's basically a Result type that's either success or failure. Let me know if I can clarify anything. \n. try/catch is much much more common in Swift \u2013 it replaces Objectice-C's NSError model, actually. In this case, it's due to JSON parsing. \n. Thanks @colinta !\n. Huh, good point. Would you mind submitting a pull request to fix it? \n. I think what @orta is saying is that by using ~> 2.0, it'll take 2.anything which is what we want, right? You can continue to explicitly define versions (I think that's what \"hard versioning\" is?) and it'll work for you, and for everyone. Does that make sense?\n. How so? I'd say that requiring 2.1.x is more aggressive than 2.x, isn't it? ~> 2.0 is the most flexible, right? Maybe I'm confused.\n. Fab, thanks!\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Ah yes! I forgot to release, let me do that now. \n. Cooooool, this has been released as 6.1.2. Let me know if that works!\n. Cool, thanks! I think we need to apply this same fix in https://github.com/Moya/Moya/blob/master/docs/Providers.md and https://github.com/Moya/Moya/blob/master/docs/Examples.md too. \n. :bow: \n. Looks amazing! \ud83d\ude3b\n. This is great, thanks!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. If you're using RxSwift or RAC, you can use flatMap. I don't know if this approach is common, but I do this. \n. Hmm, I see the problem: the \"terminator\" is really in the print sense, something the logger terminates its output with. The \\n you're seeing is due to the nature of the logging: we take a response, take its data, and turn it into a raw string. When we do this, and we that string is printed, the \\n characters get printed. \nI think that's what's going on. What you're looking for, I think, is a plugin to log the response data formatted as JSON, right? I think that's a reasonable request \u2013 we should consider creating a new plugin, or even just adding an option to our current one to accommodate this. \n. Good idea, I think that'd be a great idea for a feature. I'm not sure I have availability to work on it right now, though. We'll take a loot (I've opened #392 to develop it). \nAs for whitelist/blacklist, I've run into this issue before, too. Here's my solution: https://github.com/artsy/eidolon/blob/32442b5099f2cd9e937a2c79eb0c94079646bd39/Kiosk/App/Networking/NetworkLogger.swift It might make sense for you to write your own logger in the short term until we have these features built into Moya. Let me know if can clarify anything!\n. Yeah, Moya is not designed to give that level of granularity for plugins, the Target is as low-level as we want to go. \nFor the RAC issue, could you open a new issue? There are examples of using it in the Demo project's unit tests in the mean time. \n. A pull request would be awesome! I'm not sure I quite understand this:\n\neven formatted strings are printed without formatting when printing as part of the array\n\nBut I trust you'll come up with a good solution :+1: \n. Huh! I'd have thought it would deal with that :disappointed: Oh well, thanks again!\n. Fixed in https://github.com/Moya/Moya/pull/394 \n. I've not used the ReactiveCocoa extensions with Moya. @justinmakaila would you take a look when you get a chance? \n. This is a fantastic pull request :tada: Unit tests look solid, commented code, all :100: \nI'm going to merge, then add an entry to the changelog on master. Our plugins are getting more complex, what are your thoughts on adding some documentation? Could be worth opening an issue to discuss...\n. Nah, that's just Carthage. We need to update our podspec.\n. Cool. This is only failing because the RAC podspec wasn't pushed until like an hour ago. I'm going to re-run CI. \n. Cool, this has been released as 6.1.3 on CocoaPods and as a GitHub release.\n. Fantastic, thanks!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Hmm, tricky question \u2013 you've got a lot going on here, and I want to make sure I understand your question first. \nLooks like you have a Network struct on top of Moya so that you can handle retrying? That's pretty cool, I've done a similar approach here. Then it looks like you're using ObjectMapper to parse the response data, right? Have you looked at this library, which has bindings for Moya and ObjectMapper? It should make it so you don't have to do this every time. \n. Great answer @wattson12 \u2013 thanks for answering so quickly!\n. Thanks!\n. Hmm, same error:\n\u274c  /Users/travis/build/Moya/Moya/Demo/Tests/RACSignal+MoyaSpec.swift:1:8: module file's minimum deployment target is ios9.0 v9.0: /Users/travis/Library/Developer/Xcode/DerivedData/Demo-dmsuayjdbfmtyhczeiztficlsydi/Build/Intermediates/CodeCoverage/Demo/Products/Debug-iphonesimulator/Pods-MoyaTests-iOS/Quick.framework/Modules/Quick.swiftmodule/x86_64.swiftmodule\nimport Quick\nFurther:\nThe following build commands failed:\nCompileSwift normal x86_64 /Users/travis/build/Moya/Moya/Demo/Tests/RACSignal+MoyaSpec.swift\nCompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler\n. Opened #453 instead.\n. Typically HTTP bodies come from parameters, looks like you have one that's specified in JSON. So to set the HTTP body to the json, you just need to tell Moya which parameter encoding to use. \nswift\nvar endpointClosure = { (target: MyCustomApi) -> Endpoint<MyCustomApi> in\n    let endpoint: Endpoint<MyCustomApi> = Endpoint<MyCustomApi>(\n        URL: url(target),\n        sampleResponseClosure: {.NetworkResponse(200, target.sampleData)},\n        method: target.method,\n        parameters: target.parameters\n    )\n    switch target {\n    case .Person(let json):\n        return endpoint.endpointByAddingParameterEncoding(.JSON)\n    default:\n        return endpoint\n    }\n}\nAnd that should work. You can check out the different options for parameter encoding here.\nLet me know if that helps :+1: \n. Yeah, good point! The request-mapping is later-stage stuff in the pipeline, but it's there that I'll often play around with stuff I can't get working at higher levels. \n. That would URL encode it, which might be what you want, I'm not sure of your server setup. \nIn general, yes, this is exactly how you customize attributes of requests, through the endpoints closure.\n. Agreed, this is great, thank you :bow: Adding an entry to the changelog would be :100: and also a test (here's an example that you can build from). If you don't have time, don't worry! I can take care of it this weekend.\n. Coo, thanks! There was a merge conflict from #406 so I merged manually.\nThanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Agreed, making it the same as the Demo project would probably be best I think (that's how I use it in production \u00af_(\u30c4)_/\u00af). Thanks @Legoless!\n. Cool! I love this idea, and the implementation is :100: Good use of nil to represent a \"missing value\" :+1: \n. Hey, this is pretty cool! Thanks for the kind words, too. \nI'll have more time this weekend to look closer at it. I agree there are limitations in centralizing things, especially as APIs grow. I've broken things into multiple enums in a project, and we've been talking about structs for a little bit. The use of the reflection API is really clever.\nI'm not sure if we can \"turn the ship\" at this point (the structure of the enums is... pretty engrained into Moya), but I'd love to borrow some of the ideas from this. We should then consider linking to it from our docs, if you're interested in maintaining it as a separate project.\n. Hey! Sorry I didn't get to this over the weekend :grimacing: Work is very busy right now and I'm preparing for a few conferences. \n@Moya/contributors Would anyone be free to take a look, give feedback, and open issues to discuss ideas we should consider adopting?\n. I agree this is really interesting, I just want to provide a word of caution about radically changing Moya, and a work of assurance to our existing users who might be worried about large breaking changes. \nI'm still unsure of the best approach to take here, but whatever we decide it will be done with careful consideration :+1: \n. @colinta that is super cool. I think bringing that down deeper into Moya to have first-party support would be great, but at the very least that's a great solution for now and we should probably document this idea :100: :100: :100: \nThe first-party support could look something like a middleware between the Moya Provider type and Target type. Something that generates an Endpoint (which really doesn't need to be a generic at all). I'm just spit-balling, but having a middle layer that lets users use either sounds like an ideal world. \nAnd I think it's worth noting that enums are a great solution \u2013 that's why we used them in the first place. It just happens that they don't scale well. On the other hand, structs do scale well, but spread domain knowledge of how an API works across several files (that's good for experts but can overwhelm beginners). Each approach has its advantages, so while an ideal world where either works is hard to imagine (and implement!) I think it may be worth striving for. \n. I think a face-to-face chat (over the internet) would be helpful here, to pin down: \n1. What we want.\n2. How to implement it.\n3. Who will implement it.\n4. Migration requirements.\nI've scheduled a poll here for Thursday, March 10th: http://doodle.com/poll/ef4kbz3h8zi3crmz Sorry it can't be earlier, but I'm travelling until then. The times there are in EST, so go ahead and let me know when we can help this public hangout.\n. OK, going to have a hangout tomorrow at 2pm EST. I'll post a Google Hangout link here.\n. OK, I've set up a hangout here: https://hangouts.google.com/hangouts/_/artsymail.com/moyahangout\nThought about recording it, but decided not to so people can speak freely. I'll summarize our discussion afterward and post here.\n. Ok, here are the notes from the hangout:\nWe're going to continue using Moya's enum-first philosophy and @colinta's wrap-a-struct-in-an-enum solution. It has no breaking changes on the face value (more that shortly) and keeps with our existing philosophy (which I think would be unwise to change at this point).\n@sunshinejr is going to send a PR with they're solution and we can discuss any technical problems and possible breaking changes there. @colinta has agreed to review the PR.\nWe also need documentation for what/why/how to do this, references to that documentation added throughout our existing docs, and changes to Moya's documenting comments that reference the \"Target enum.\" I can take care of the documentation, as well as adding a struct demo to our existing demo app.\nHow well or poorly an enum scales to handle an API is subjective; it varies from person to person, and even from endpoint to endpoint. It might make sense for a project to use both, for example. I like this technical approach because it maintains our current philosophy but provides flexibility for anyone who needs it.\n@orta @colinta @sunshinejr Thanks again for taking the time to discuss this, and to @Matthijn and others who have brought up this idea. I must admit I was initially sceptical of this idea, but a working fork and this discussion have helped clarify the needs of Moya users. Thank you to everyone who participated :bow: \n. I think we've addressed this in #427, pending some documentation updates in #428 and #429. I'm going to close this issue, but if anyone has any further feedback, please feel free to comment where you think is appropriate; we can re-open this issue or open new ones, so don't be shy!\n. Interesting! I had not thought of just using a typealias! My only concern would be making sure that Moya users don't have to be aware of Alamofire, but the unit tests don't import Alamofire, so it should be fine. Cool!\nAnyone else see any issues? Otherwise, I'd just want to make sure we document the change in the changelog. \n. Awesome, thanks so much!!\n. Awesome, thanks! The CI failure on Travis was unrelated. \n. Awesome, thanks! The CI failure on Travis was unrelated. \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Awesome, thanks!!\n. Awesome, thanks!!\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. That's right! If you don't have it in a property, it gets deallocated as soon as it leaves the scope.\n\nAsh Furrow\nhttps://ashfurrow.com/  \nOn April 10, 2016 at 10:25:58 AM, philcai (notifications@github.com(mailto:notifications@github.com)) wrote:\n\n@remirobert(https://github.com/remirobert) What I don't understand is that Why should I keep a reference on it? If I don't, will the provider be released outside the scope(For example, I make the request in viewDidLoad, and don't keep a reference.)? I didn't inspect the implementation of Moya, it a little strange...\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub(https://github.com/Moya/Moya/issues/412#issuecomment-207993002)\n. That's right! If you don't have it in a property, it gets deallocated as soon as it leaves the scope.\n\n\nAsh Furrow\nhttps://ashfurrow.com/  \nOn April 10, 2016 at 10:25:58 AM, philcai (notifications@github.com(mailto:notifications@github.com)) wrote:\n\n@remirobert(https://github.com/remirobert) What I don't understand is that Why should I keep a reference on it? If I don't, will the provider be released outside the scope(For example, I make the request in viewDidLoad, and don't keep a reference.)? I didn't inspect the implementation of Moya, it a little strange...\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub(https://github.com/Moya/Moya/issues/412#issuecomment-207993002)\n. Agreed, hard to debug. Moya tries to make it hard to crash the app \ud83d\ude09\n\n\nAsh Furrow\nhttps://ashfurrow.com/  \nOn April 15, 2016 at 11:30:35 AM, nikos kanellopoulos (notifications@github.com(mailto:notifications@github.com)) wrote:\n\n@ashfurrow(https://github.com/ashfurrow) Shouldn't this crash however? It is very hard to trace these kind of bugs.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub(https://github.com/Moya/Moya/issues/412#issuecomment-210507282)\n. Agreed, hard to debug. Moya tries to make it hard to crash the app \ud83d\ude09\n\n\nAsh Furrow\nhttps://ashfurrow.com/  \nOn April 15, 2016 at 11:30:35 AM, nikos kanellopoulos (notifications@github.com(mailto:notifications@github.com)) wrote:\n\n@ashfurrow(https://github.com/ashfurrow) Shouldn't this crash however? It is very hard to trace these kind of bugs.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub(https://github.com/Moya/Moya/issues/412#issuecomment-210507282)\n. cool, thanks!\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Ahh, we probably need to publish a new release that includes the changes. Will do shortly. \n. Cool, this has been released under 6.2.0. Let me know if that works :+1: \n. Oops, yeah forgot the release task does that, thanks!\n. Looks great, thanks!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Yikes! Looking through the changes, I don't see anything that immediately jumps out that would cause a slowdown like this... \n\nCould you describe your setup in more detail? Are you using CocoaPods or Carthage? I looked through Alamofire's recent issues and didn't see anything that might cause this either. \n. Thanks for the details. I'm travelling right now but will try to reproduce locally. In the mean time, if anyone from @Moya/contributors could lend a hand, that'd be awesome. This is a pretty serious problem and we should make input top priority. \n. Hmm interesting, yikes. If this is still an issue, let's re-open so this stays on our radar. \n. @tbaranes I'm not sure I quite follow the remaining issues, could you clarify? Is this a case of not calling closure(request)? \n. OK, this sounds like a serious problem. I'll take a look this afternoon. From your description, it sounds like I should just be able to load the Demo app (hitting GitHub's API) and see reeeaaally slow responses, aye?\n. Done \ud83c\udf89 \n@tbaranes no pressure to accept the invitation \u2013 if you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Yikes! Hmm, I want to make sure I understand the issue: could you post a code snippet that demonstrates what you're doing with concat? We can take a look at it \u2013 likely an issue from immediately stubbing means that the signal sends synchronously? Not sure, definitely need to take a look. Thanks for opening the issue!\n. OK, that is a seriously cool idea :100: \nTo clarify, what's your test code look like? What are you expecting to happen, and what specifically is happening instead? \n. I think I understand your use case, not sure of the cause yet \u2013 I'll need more time to think about it. I'll try to get back to you as soon as possible.\nIn the meantime, you've got a workaround at lest :sweat_smile: Thanks again for filing the issue!\n. Still not sure what's going on here, will try to take a look. \n. Hi there! I want to clarify what you're asking for \u2013 are you suggesting a change to Moya's behaviour? What change are you looking for? \nAs far as I know, subscribeOn isn't typically used, because its the observation that matters and its the observation that has the side-effects (not the subscription). Does that make sense?\n. I guess I must be confused about the issue then \u2013 I was thinking Moya returns an Observable and the user can do whatever they like with it. Alamofire sends callbacks on the main thread, and we simply send them through.\nTo clarify, is the distinction one between Moya allowing users to specify a scheduler to observe/subscribe on versus requiring users to call observeOn/scheduleOn themselves?\nIn any case, I think keeping the observe/subscribe schedulers as the main thread scheduler by default is the safest move, since users will often update UI elements based on the callback. Actually, I'm kind of curious why you would want the callbacks on a separate thread for all requests \u2013 is it a performance issue? \nLet me know what you think \u2013 thanks for taking the time to clarify for me, I want to make sure I understand the problem fully before we make any breaking code changes :wink: \n. > I just want to Moya does not change the thread which I choose when using subscribeOn and ObserveOn.\nRight, that makes sense. I guess what I'm confused by is, as far as I know, Moya doesn't do that does it? If it does, can you specify where in the code it does?\n. But that's how Rx is supposed to work, no? The elements (network response) are made always on the main thread. If you want to observe them on a background thread, you should use observeOn, not subscribeOn (which I pointed out is rarely used).\n. I'm basing my assumptions of how subscribeOn: works off of the RxSwift-specific documentation, which says:\n\nWraps the source sequence in order to run its subscription and unsubscription logic on the specified  scheduler. \nThis operation is not commonly used.\nThis only performs the side-effects of subscription and unsubscription on the specified scheduler.     \nIn order to invoke observer callbacks on a scheduler, use observeOn.\n\nWhich sounds like it differs from the general Rx feel. I've contacted the RxSwift maintainers to ask for a clarification.\n. OK, let's back up a little here. This quote:\n\nIn case observeOn isn't explicitly specified, work will be performed on which ever thread/scheduler elements are generated\n\nHas nothing to do with which scheduler Moya is called from, it only has to do with Alamofire. Unless you specify which scheduler, the work (map, flatMap, subscribeNext, etc) will be performed on whichever scheduler the elements are generated on. Alamofire always generates these on the main thread, and Moya just passes them through, so they go on the main thread scheduler.\nI think you're asking for the following: if a network request is made on a background thread, then its response should be delivered on that same background thread, but that's not how RxSwift works. RxSwift observables generate elements from whatever scheduler/thread that they want, and it's up to you to observe them on a separate scheduler with observeOn:, otherwise RxSwift conventions specify it's up to Moya, and Alamofire, to decide whichever thread/scheduler they want since they are the ones generating the elements.\nI hope that makes sense. If it doesn't, I'm happy to schedule a call with you and talk this out.\n. >  I\u2019m a user of Moya, and I expect that its tasks would be performed in whatever scheduler I would set calling onSubscriber\nBut Moya does do this, like any Rx Observable. Just because it omits things on the main thread scheduler doesn't mean you can't shunt those to another scheduler. I'd encourage you to re-read the RxSwift observeOn function documentation \u2013 it's the method that you should be calling to put observables onto other schedulers.\n. This is typical behaviour in Rx; it sounds like you're looking for Moya to emit events on the scheduler you call request() from, but that's not how Rx works. You do have control over the observables scheduling but only from the outside, which is again very typical. If you want the events to be observed on another scheduler, you have to call observeOn.\n. OK, so I think we've discussed this thoroughly and have to come a conclusion that the behaviour Moya is exhibiting is idiomatic to RxSwift, though may be unexpected in a thread-based context (as Junior said, Rx is thread-agnostic). I'm going to close the issue, but if anyone has follow-up, feel free to comment, re-open, or open a new issue :cake: \n. Hmm, interesting. To answer your question:\n\nIs it as simple as calling ...\n\nYup, I've done this and it's awesome how simple it is. I'm up for including this as an optional parameter, should it go on the provider subclass initializer or on the request method? \n. Makes sense to put it in the subclass/initializer \ud83d\udc4d\n. Going to close this in lieu of #427.\n. This is a great question, thanks! It's not something I've personally had an issue with, but I can totally see the concerns. \nSo, the rationale behind this decision is to make sure that people have to define sample date to make testing easier / encourage testing. There's no way to define a requirement only in a test target, so this was our solution. \nBut it's not ideal for everyone. An empty NSData() would do the trick, but what if you wanted to use this for testing? Empty NSData() wouldn't work then. In that case, I'd take the JSON out of the Xcode target (so they're not shipped with the app) and instead of using NSBundle to load the JSON, use some other way to reference the Xcode. FBSnapshotTestCase does this using either environment variables:\nobjc\n[NSProcessInfo processInfo].environment[@\"ENV_VAR_NAME\"]\nor by using NSBundle's resourcePath:\nobjc\n[[NSBundle bundleForClass:self.class].resourcePath stringByAppendingPathComponent:@\"FolderWithJSON\"]\nThat way the code is loading the files directly for disk and not through NSBundle. This won't work if you're running tests on the simulator, though, so that's one potential downside.\nLet me know what you think \u2013 I'd like to know what you think an optimum solution would look like, and how we could improve our documentation around this. Thanks again for opening the issue!\n. This is a really interesting idea, I like it. It takes away from the goal of encouraging testing at all costs, but that may be discouraging some users from trying Moya. And I'm pretty sure they'll just return NSData() anyway :wink: \nThis is a pretty big breaking change that would pair well with #426 when that gets merged. I think we should be careful about it; I'd like to get feedback from @Moya/contributors on the following idea:\nMove sampleData out of the TargetType and into a closure passed to the provider that returns sample data based on its parameter, a target. This would complicate how we handle structs, though... We can also consider moving this behaviour into the stubClosure, like:\ndiff\n-typealias StubClosure = TargetType -> Moya.StubBehavior\n+typealias StubClosure = TargetType -> (Moya.StubBehavior, Response)\nAnd we could even make this parameter optional, and nil implies \"never stub\", which would simplify the provider a bit. Just an idea, trying not to get ahead of myself :wink: \n. Any more discussion/action items on this? Or can we safely close?\n. Makes sense! We should double-check if documentation needs updating. \nSo if I understand correctly, we'll hold off on merging this and take these changes out of #424? Then:\n1. Merge #424.\n2. Release a patch for structs in Moya.\n3. Merge this.\n4. (Possibly wait for other breaking changes.)\n5. Release a major version for this.\nDoes that sound right?\n. Right, I think what @colinta means is that we can rebase #424 to remove any reference to MoyaDefaults so that we have two, totally independent pull requests. Then we can have a release between #424 and this one, so that people can adopt structs without adopting this (possibly breaking) change. Does that make sense?\n. Those do happen >.< Could I ask you to take a look and see what problems they are? Maybe we can find a less-than-ideal, non-breaking change and move to this (which is a good idea) as soon as possible. Does that sound ok?\n. Interesting! I guess I was thinking of https://github.com/Moya/Moya/pull/424 as having only one struct-based enum type that Moya gives for developers to put their structs in (noted in this comment, sorry if I was unclear). Would that solution fix this problem, since we wouldn't need a ServiceType and could continue with the existing implementation? \nThanks again for all your work on this, it's really great and we all really appreciate it!\n. Yup, I've got documentation covered but we need to finalize the implementation first :smile: I don't know if a new demo project is necessary (beyond #189) if we can just add a side-by-side demo of using structs in the existing project, your call.\nIf we can use the single-case-enum I mentioned in #424, maybe it's worth trying out a PR with just that idea? I can whip something quick together this afternoon, I'd like to hear your thoughts on it. Let me know :cake: \n. Makes sense :+1: \n. \n. Cool! I'll create an issue to update docs and demo app.\n. Also the changelog >.<\n. Good thinking :+1: \n. Hey there! This is fairly straightforward, but our docs aren't great. We need to improve them. In your TargetType, use the parameters and method properties to return the JSON data and POST/PUT. Then, when setting up your provider, you can use a custom endpointsCosure to specify .JSON encoding for appropriate endpoints. \nLet me know if that helps, and if you have any suggestions for improving our docs. Thanks for the great question!\n. Sounds complicated but not impossible. I haven't heard of an API requiring both an HTTP body and query string parameters, usually it's one or the other.\nSounds like you need a custom parameter encoding. In my answer above I suggest using .JSON, but you'll need to use .Custom instead. We piggy-back on Alamofire's custom parameter encoding, so you should be able to follow their docs to create a custom param encoding to use in the endpointsClosure. \nTo be honest this is outside my experience \u2013 I'll try to help with an questions you have, just me know \ud83d\udc4d\n. @m00sey Thanks for sharing your solution! :bow: \n. I like this idea, but I don't want the docs to get overwhelming. Maybe we should expand from a single Examples.md and do something more like \"TargetExamples.md\" etc? That way each document stays bite-sized.\nSeems like a bit of a duplicate from https://github.com/Moya/Moya/issues/189 , what do you think? Might be worth having a milestone around documentation to gather all the ideas in one place. \nProbably related to #428 and #369 as well.\n. I think this might be a good structure:\ndocs/\n  Targets.md\n  ... etc ...\n  Examples/\n    Readme.md\n    TargetExamples.md\n    ... etc ...\nThen the readme in the new directory can be a guide to the other documents, like what we have now.\n. ## Sounds reasonable to me \u2013 it simply wasn't included because we didn't see a need for it. Clearly there is one :) Would you be able to submit a pull request? Adding a comment above the function and an entry into the changelog would be \ud83d\udcaf  \nAsh Furrow\nhttps://ashfurrow.com/ \n. Going to close this and move discussion to #556. \n. No problem! Thanks for looking into this, I'm sure it'll help when someone else has this issue. If you have any suggestions for documentation improvements, please let us know :bow: \n. Cool! Could you open a new issue with suggestions or \u2013 if you're comfortable \u2013 a pull request with the changes? \n. Thanks for the kind words! The fix for this would be to change the DelayedStub function to look like this:\nswift\npublic final class func DelayedStub(seconds: NSTimeInterval) -> (Target -> Moya.StubBehavior) {\n    return { _ in .Delayed(seconds: seconds) }\n}\nI'm strapped for time at the moment, if someone else has the time to make + test this change, that'd be :100: \n. :+1: thanks Colin!\n. Ah, gotcha. Weird. We can update CI to use Xcode 7.3 too. \n. This is a pretty serious issue, but I don't have sufficient Carthage experience to fix it. @Moya/contributors anyone have suggestions? \n. Super, thanks!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Interesting article! I hadn't seen that, I'll take a look :+1: \n. I confess I've not had a chance to give this consideration, will add to my todo list :+1:\n. This looks similar to #445, could you try the solution from there? (Something about carthage update --platform iOS --no-use-binaries and deleting a folder.)\n. Hmm, sounds like a different problem. Discussing here sounds fine. \nAfraid I'm not very knowledgeable about Carthage, looping in @Moya/contributors to get another set of eyes. I didn't see any related issues on RxSwift or ReactiveCocoa. What would help diagnose the problem would be the contents of your Cartfile. \n. Cool! Looks good. CI is failing on master, so that's not your fault, and since you tested Carthage locally I trust it works :smile: I've opened #451 to fix CI separately.\n. Just a note, I had previously sent an invitation to join the Moya organization \u2013 no pressure at all! \u2013 just wanted to make sure you had received it. \n. No worries, take care! And thanks again for the help on this :bow: \n. Looks like ReactiveCocoa 4.1 wasn't on CocoaPods trunk yet. Fixed the podspec in https://github.com/mhuusko5/Podspecs/commit/04f72fe2b73254b1dc0eb8fec00681c327064c3a , going to push + rebuild CI on master to see what new error happens. \n. (Expecting CI to fail on this, until #452 is done.)\n. Closing in favour of #456\n. Awesome, I've added you three :tada: Thanks so much. I'll submit a doc about deploying this weekend. \n. It's basically just rake release[\"X.Y.Z\"] and mostly everything else is automatic.\n. Cool! And we just throw in our .netrc file creds? Super neat! \n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. This was fixed in 6.5.0, feel free to re-open if we can be of further help.\n. Good catch!\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. The CI failure? Trying to fix that here: https://github.com/Moya/Moya/pull/452\n. No worries! April is really busy for me, and I wanted to make sure Moya would be OK if I wasn't available. \n. Looks fine to me! Thanks for the contribution. \nI'm concerned that, as-is, this is a breaking change (if someone was subclassing the provider and overriding this method, the changing method signature would break thei override). Do you think, for now, we could introduce a second request function, instead of using the default value for a parameter?\nA changelog entry and test would be awesome, but testing this might be tricky. We can merge without one and add it later. \n. I think using the same function is better, too, and I want to do that when we move to our next major release, but I don't want to break our semantic versioning by breaking anyone's code.\n. Looks cool, I'm fine with releasing this as a non-breaking change. Complicating things slightly is the fact that master currently has non-breaking changes already. I'll take care of releasing this this weekend. What I'll probably do is go back to the most recently released commit, merge this in, make a release, then merge that commit into master (closing this PR). That way everybody wins :tada:\n. This has been released as Moya 6.5.0 and should be accessible from CocoaPods and Carthage. I've also had to manually merge into master, a few mew conflicts but nothing too serious. The merge commit is  https://github.com/Moya/Moya/commit/350bff8edbdb35007bdb8fd909aceef7d9d83d6b\n@kokhong20 thank you for your contribution! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Hmm, this is a really good question \u2013 this isn't a scenario we thought about when making the request closure asynchronous. I think it would make sense for Moya to provide a way for the request closure to produce an error \u2013 this would be a new addition to Moya, and likely a breaking change. @Moya/contributors anyone have thoughts/feels about this?\n. I think that's a smart move. Maybe make the parameter for done() be a Result<NSURLRequest, ErrorType>? It would be a breaking change, but we already have several of those merged in master, so now is an idea time to make this kind of change. Is anyone interested in sending a PR? \n. This is fantastic, thanks Evgeny! I don't have time to thoroughly review right now, could anyone from @Moya/contributors lend a hand?\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. @esttorhe that sends a JSON dictionary of { \"parameterName\": ... }, but what if you wanted to send a JSON array instead? [ ... ] for example. I don't think that's currently possible in Moya without using a .Custom parameter encoding.\n. Yeah, good thinking. JSON-arrays-as-data is a personal pet peeve \u2013 I really wish API developers would stop doing it :disappointed: \n. Great solution @jimmy0251! Thanks a lot for sharing, I'm sure this will help others :bow: Do you consider the issue closed at this point, or do you think we should add your solution to our documentation, etc? Maybe something for #466.\n. @bitomule what method did you end up using? \n. Okay to close this issue? \n. Do we know how/if Alamofire handles this? Moya's goal is to abstract away the actual network layer, so handling these types of responses seems like it's something we should take responsibility for. \n. Glad you got it working! Is there anywhere in Moya's documentation where some info about empty responses would have been helpful to you? I'm sure you're not the only one to run into this. \n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Hmm, hard to say. I've not used Charles much, are you stubbing the requests? Could you post the Moya code that's not working? \n. @samirGuerdah Hey there! Did you get this working? \n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. I've written a whitelist/blacklist logger plugin. It's not elegant (which is why it's not in Moya \ud83d\ude1b ) but it works: https://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/NetworkLogger.swift\n. You can now get curl commands logged using the included network activity plugin. \n. @nikita-leonov what do you think, has this issue been addressed to your satisfaction? If not, what are the next steps? \n. I'd be happy to review a PR, I'm not sure what request/response correlation would look like so I can't say for sure if it'd be accepted. Could you explain your implementation idea? \n. Hmm, good question. Generally, parameter encoding doesn't work like that (as far as I know). You'd more typically see ids sent as an array, like ids[]=41MnTivkwTO3UUJ8DrqEJJ&ids[]=6JWc4iAiJ9FjyK0B59ABb4&ids[]=6UXCm6bOO4gFlDQZV5yL37, but I admit it's been a while. Let's see how we would do what you're looking for.\nThis is how I would accomplish this; add an associated value to the Album enum case that holds a String array of the ideas:\nswift\ncase Albums(ids: [String])\nThen, in the parameters implementation, do the following:\nswift\nvar parameters: [String: AnyObject]? {\n  switch self {\n    ...\n    case .Albums(let ids):\n      return [\"ids\": (ids as NSArray).componentsJoinedByString(\",\")]\n    ...\n  }\n}\nAnd that should do it. Let us know how it goes!\n. @Miasma87 has this issue been addressed to your satisfaction? \n. If you're able to use RxSwift or ReactiveCocoa, they have retry operators that make this easy. You can also see an example of how to write try-when-network-is-available logic. \n. Looks great! A few notes:\n- Needs a changelog entry.\n- Tests for the ReactiveCocoa provider are good, need corresponding tests for RxSwift, and ideally for just Moya itself. Maybe using the cancellation token?\nI'm really busy this week, hopefully others get the chance to review. Otherwise I'll try to look at it this weekend. Thanks!\n. We've just merged #479, another breaking change (it's nice to group them all together). Now I'm thinking about other things we should break...\n. Looks good! CI failure is intermittent and doesn't look related to the PR, merging!\n. 6.5.0 was released off a separate branch with a diverged history from master; it was necessary to rewind to before some breaking changes to get the queue specification included in a point release (instead of in our upcoming major release, which will include the changes in this PR). Does that make sense? \n. Glad you figured it out \ud83d\udc4d\n. The nsError property was created for use with ReactiveCocoa. If you want to get at an underlying response, you can switch on the error in your completion closure, like:\nswift\nswitch error {\n  ...\n  case .Underlying(let error as NSError):\n  // now can access error.domain or whatever\n}\nIt's a bit weird to have to case error as NSError, maybe the .Underlying case should use NSError instead of ErrorType. Any thoughts? \n. No problem! This seems like something we might want to document better, and maybe make the change to .Underlying I mentioned above. You wouldn't be interested in making a pull request, would you? \n. If we change .Underlying to have an NSError instead of ErrorType, then we won't need to cast, right? In any case, casting from ErrorType to NSError is guaranteed to always succeed, so it would be fine too.\n. Ah, you're right. I misunderstood. \n. Super cool, this looks awesome! Could you add an entry to the top of the changelog? \n. Looks good! Weird that CI is failing, I'll take a look when I get a chance. \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Awesome, thanks!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. This looks awesome! The ReactiveCocoa provider needs a similar extension to add this functionality, we can do that in another PR. I think we do need to write some tests for this feature, though, and ideally add some documentation and a changelog entry. I'm happy to do a screenhero to pair on that sometime next week, probably. \n@leonereveel this is fantastic work, well done. \n. For question 2, there's also a struct-based solution we added here, but haven't had time to document yet. \n. @holysin is this issue resolved to your satisfaction?\n. Cool! Want to email me at ash@ashfurrow.com to schedule a time that works? \n. Cool, this looks awesome. I think we have the following TODOs to get this wrapped up:\n- [ ] Add ReactiveCocoa extension for requesting.\n- [ ] Add documentation for multipart requests.\n- [ ] Add tests for new functionality.\n- [ ] Changelog entry.\nI'll try to take a look at this this weekend.\n. @orta weird, we only run bundle exec danger in the post-test step, outside the Rakefile. \n. This is fantastic work and a great example of open source collaboration. Thanks everyone!\nWondering about the new property in the TargetType protocol: var multipartBody: [MultipartFormData]? { get }. Could we have a protocol extension that has a default implantation that returns nil? Or would that override the user's implementation?\n. \ud83d\udcaf\n. Tests pass, not sure why Danger failed but I'm gonna merge \ud83d\udcaf\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Everything looks fine, hmm. Very strange. Can you try using the network logging plugin to see what request is getting sent? \n. Gotcha, looks like your baseURL has the query string and everything included with it. Moya uses NSURL to add additional paths, and that must be confused by the ?sign=.... I would recommend returning only http://124.172.184.216:8080/open_api/api from the baseURL and use the endpointClosure to add those additional parameters. Here are some examples.\n. Yeah, that should work. Here's a project that does ObjectMapper and Moya work: https://github.com/ivanbruel/Moya-ObjectMapper\n. This should be possible, Moya's completion handler provides a Response object when a network call is successfully sent/returned (failure is for things like not being connected to the internet). The response object has a NSURLResponse? property you can access to use a similar solution as in the StackOverflow answer. \n. Very strange, sorry to hear about this. Not sure what the issue could be. Usually, Xcode's error inspector will have a drop-down arrow beside the \"does not conform to protocol\" that says which function is missing, is it there? \n. Gotcha. Thanks for taking a look through \u2013 I'm not experienced with Carthage either, so if you find anything, please let us know!\n. Hmm, must be a consequence of our Carthage setup. Some background: Carthage doesn't support any sort of \"subspec\" style organization. Since we keep Moya and the RxSwift/ReactiveCocoa code in the same repo, Carthage downloads all three targets even if you don't use them. Because of the project organization, TargetType is re-defined in three different modules. The solution you have will work.\nI'm surprised we haven't run into this before, I think we should add documentation around this. @mlvhub when you first ran into this problem, where did you look for an answer? We should add documentation there so others can find the answer easily.\n. Yeah, last time we looked it involved splitting out into three repositories, which is a lot of work to keep in sync, etc. Let us know what you find, thanks!\n. @mlvhub is this still causing problems for you, or is it safe to close the issue? \n. Push CI failure is the intermittent one, merging.\nLooks great, thanks!\n. I'm \ud83d\udc4d for getting rid of RAC 2 support, and I'm keen to remove the nsError property, since it just serves to erase the MoyaError type, and was only necessary for Objective-C interop.\n. Mmm right, new GitHub design \ud83d\ude09 \n. Failures unrelated to this PR, merging \ud83d\udc4d \n. Very strange, thanks for reporting this. Could you provide some more details so we can reproduce this? Is it on a device or just the simulator? iOS 8, 9, or both? The networking code that demonstrates the problem would be helpful, if you can share it. Thanks again!\n. Received the email, taking a look ASAP, probably won't be until the weekend. Will update. \n. Okay, I've tried taking a look but I don't have a device at the moment to test on. I'll try to take a look this weekend. In the mean time, I'd recommend trying to following trying to call the Alamofire request manually (if you can). I'd like to narrow down if this is a problem with Moya, Alamofire, or NSURLConnection. Can you provide any more details, like what device you're using, wifi status, any server logs you have? Thanks!\n. @kevin5396 Interesting! Makes sense, since NSJSONSerialization would fail with empty data. I'm not sure what the best way to solve this is, maybe extend mapJSON to include a parameter for allowing empty data? \n. Makes sense! We should provide a default option, and this'll need to be added to both the RxSwift and ReactiveCocoa extensions too. Anyone available to submit a pull request? \n. So it looks like a PR to fix this issue would modify the mapJSON function.\nswift\nfunc mapJSON() throws -> AnyObject {\n    do {\n        return try NSJSONSerialization.JSONObjectWithData(data, options: .AllowFragments)\n    } catch {\n        throw Error.Underlying(error as NSError)\n    }\n}\nWe would need to add a new parameter like failsOnEmptyResponse: Bool = true. If it's false and data == nil, we need to return some other value. An empty NSArray or NSDictionary might work, or maybe NSNull(). Not sure, open for discussion. \nOh, and we should test it, too \ud83d\ude09 \n. Okay, re-opening for discussion. Does Alamofire have any similar issues? \n. The issues list is at https://github.com/Alamofire/Alamofire/issues I'm unavailable to help right now, try searching for the symptoms and see what others have experienced. \n. @iSame7 would it be possible to look at your code? I'm not sure if this is the right abstraction layer to institute this, but even if it doesn't belong in Moya, I'd love to add documentation around it. Please let us know :+1: \n. Gonna try to look at this today. \n. \ud83d\udc4d\n. Can't tell without more information, like what it looks like when you request the API call. Also, not sure of the func sendRequest and public func request, are those from Moya or a subclass you've created? Thanks!\n. Hmm, not easily, though you could use the StructTarget to use a struct instead of an enum for your MoyaTarget. I'm not aware of anyone doing this, if you find anything online that helps, please let us know \ud83d\ude47 \n. @wonc003 did you manage a solution for this issue? Would love to have it added to our documentation \ud83d\udc4d\n. Nice, thanks!\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Looks awesome!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Hey there! Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Awesome! CI failure is unrelated (really need to fix that...) gonna merge!\n. This is great work and a nice comprehensive write-up, thanks @aaroncrespo!\n. No problem, it happens!\n. That makes sense \u2013 should we make 2.3 version off of master or the most recent commit? (master has breaking changes.)\n. Awesome! Looks good to me, want to add links to the new files from the readmes in the docs/ and docs/Examples directories? Good to merge after that \ud83d\udc4d \n. Fab!\n. Yikes, I hadn't heard that. Can't remember why we used spin locks, we can probably move to NSLock without too much fuss. Anyone up for a pull request? \n. Glad you got it working \u2013 are we okay to close this @matteogazzato?\n. You should be able to just have \"somethingBool\": data4 as an element in the returned dictionary, right? \n. Thanks for the follow-up. How are you detecting the value, on the server side or client side? Could you try using the network activity plugin to log the request before it's sent? \n. @lucasp90 That's certainly puzzling! Especially since Moya gets Alamofire to do the parameter encoding, and I would have thought they would support Bool.\n. @jasl Good thinking linking to that. It seems to fallback to String interpretation of plain objects, so Bool should work, right? \n. I dunno, I think that if Alamofire is parsing Bool as \"true\" or \"false\" it must be a good approach. These Wordpress docs explicitly say that either is acceptable for them.\n. @lucasp90 has this been clarified to your satisfaction? \n. No problem! I think adding examples would be a great idea, where do you think they should go? https://github.com/Moya/Moya/blob/master/docs/Targets.md maybe? \n. Cool! Could I ask you to send a pull request? Don't worry if you can't, we'll get it :+1: \n. Super, thanks! Don't worry about the \ud83d\udd34 Travis result, it's being fixed in #520.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Yikes, all Travis OS X builds are currently delayed, might take a while to see this \ud83c\udf4f \n. [!] Unable to satisfy the following requirements:\n- `ReactiveCocoa (= 4.2.1)` required by `Podfile.lock`\n- `ReactiveCocoa (~> 4)` required by `Moya/ReactiveCocoa (6.5.0)`\nBeen seeing this only on Travis. bundle exec pod install doesn't change any files locally. Might be the misuse of ~>. Gonna poke around.\n. Hmm, getting this again:\n\nNot a Pull Request - skipping danger run\n\nI'll take a poke. \n. Looks like https://github.com/danger/danger/issues/226\n. Appears to be a problem with Circle where they don't specify a CI_PULL_REQUEST environment variable even though this is a PR build. As per their discussion on this, I've contacted support to get this figured out.\n. Weird, printing the four required variables after setting one explicitly works:\nrb\nputs ENV[\"CIRCLE_BUILD_NUM\"]\nputs ENV[\"CI_PULL_REQUEST\"]\nputs ENV[\"CIRCLE_PROJECT_USERNAME\"]\nputs ENV[\"CIRCLE_PROJECT_REPONAME\"]\n249\nhttps://api.github.com/repos/Moya/Moya/pulls/521\nMoya\nMoya\nNot really sure where to go next. It might require more digging around in Danger to figure out why this isn't working. \n. @at-daonv thanks for the tip! I\"ve added something similar to the Rakefile.\n. Ooohhhhh boy would you look at that?!\n. @orta good idea, I was actually going to play around with squad_goals, maybe make a Danger plugin. For now I think we can merge without it, and add it in if squad_goals takes too long. \n. It's possible; how are you building the project that's not working? Any details around Xcode version etc would be awesome too. \n. No problem, thanks! First, if this is blocking your project, you should be able to use our most recent release. But as far as fixing master, hmm. The Moya-iOS Xcode project was added by @JRHeaton for Carthage compatibility. I can't remember the mechanism for updating it \u2013 it doesn't look like it's from the release task, but I'm not sure if it's generated by CocoaPods either. I'll take a peak and see. @AndrewSB have you seen this before on other Carthage projects? Any tips for troubleshooting? \n. Looking at #505 it does look like NetworkCurlLoggerPlugin.swift was added to the project file, but not to the repo, probably by accident. Removing those lines added to the project should fix it. @AndrewSB are you able to test + send a pull request?\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. It worked! https://github.com/Moya/Aeryn\n. A request with duplicated parameter keys? I've never seen a server require those before, since query string parameters are usually referenced as a dictionary, and can't handle duplicate keys. I have seen arrays specified as ?filter[]=a&filter[]=b, is that what you're looking for?\nIt's possible to get around this by doing your own custom parameter encoding (since we rely on Alamofire's, which has this limitation of treating params as a dictionary). Here's an example of using custom parameter encoding that you should be able to modify for your server requirements. Let us know how it goes.\n. I'm glad \u2013 I think if you just pass the array as a a parameter, it should \"just work.\" Alamofire detects arrays and uses that query string format. \n. Yup, we have them there for Circle. Is the Demo project used by Carthage for building? (We really do need better documentation around it, every time someone has a question related to Carthage, I'm a bit at a loss). \nCan any Carthage-savvy devs on @Moya/contributors help take a look? \n. Glad it's working!\n. Looks \ud83d\udcaf Sorry for radio silence on the other PR, on vacation this week. This looks good to merge when you're ready, I'll review the comments on the other tomorrow. \n. Agreed, that's surprising behaviour. I'll open a separate issue to fix that, this looks great to merge. \n. Thanks for the PR! Don't mind the SwiftLint warnings. \nCI is failing due to a problem finding the isCancelled property \u2013 you said it's working for you locally? I can try and take a look here too. \n. I agree, sound good \ud83d\udc4d \n. Mergin'!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. This is good to close by #536? \n. I think this is a good idea, I don't see any other issues tagged \"breaking changes\", but we need to cleanup those issue tags anyway \ud83d\ude01 \nI'll give some time for other @Moya/contributors to chime in, and if no one objects, we'll release Moya 7.0.0 \ud83c\udf89\n. We might have a non-backwards-compatible feature request worth squeezing in: https://github.com/Moya/Moya/issues/542 I believe @colinta is taking a look, I can help too.\n. Cool, I think we're good?\n. Okay! That's tagged and pushed to CocoaPods, Carthage folk have their GitHub release, too: https://github.com/Moya/Moya/releases/tag/7.0.0\nThanks for the help all our contributors have put in to getting us to Moya's seventh major release in two years!\n. Looks like it was checked in here, in October 2015: https://github.com/Moya/Moya/commit/9ee73026ba8e2bf4394de7d795ba42b778b3fea7#diff-8903239df476d7401cf9e76af0252622 so the problem this PR solves has been around since about version 4.1.0 of Moya. @justinmakaila Do you think this is something worth including in the changelog? Like, would it be useful for Carthage users to have a note in there about it? \n. Okay cool. The only CI failure is a missing changelog, so I'm going to merge (and then submit a PR changing that \"no changelog\" error to a warning...)\n. Hmm, good idea. I added the error originally to help us be more diligent about our changelog entries. I still worry that if we keep the error, we might intimidate new contributors with a failed CI build instead of a warning. And longtime contributors are even getting called out. Going to move discussion over to https://github.com/Moya/Moya/pull/537\n. I've created the documentation label, milestones look good, thanks!\n. Okay, think I got this done. I also closed lots of old issues, asked about some I wasn't sure of. \n@Moya/contributors We've still got plenty of GitHub issues, especially lots of questions. No pressure at all \u2013 if you have some free time to help out, that'd be awesome! But don't worry about it. In any case, have a great weekend!\n. Do you see the documentation work you've been doing as an ongoing project, or something that will be completed one day? It might make sense as an issue label, up to you. The readme idea sounds great!\n. If we're going to switch to issue labels anyway, I'm in favour of switching now. \n. Yeah, I'm thinking we should just close both and not use milestones. We can always start using them in the future if circumstances change. \n. What's the carthage command you're running that's producing the error? \n. We've seen other issues with Carthage that were solved by running carthage update --platform iOS --no-use-binaries instead. Can you try that and see if it works? If that's the fix, we should add it to our readme. \n. I'm not sure then, I don't use Carthage so I'm not the best to help out with troubleshooting. \n. This is a great question I looked through my own code, because this is something I've had to test to. The code I found is a little old and doesn't apply directly to this question. \nSo the way I would approach this fresh is that you don't necessarily need the state to be internal to the testing provider. When you create a provider in your tests, you can pass in an endpointClosure that accesses an isFirstResponse variable defined outside the closure, within the test. Set it to true before the test begins and the first time the enpointClosure is called, set it to false. Not sure what testing framework you're using \u2013 if you provide the code that you've tried so far, I can give you an idea of how I would approach it.\nMoya's architecture places a large emphasis on testing, but most of our documentation discusses only how to use Moya in production code. I think it's worth adding documentation demonstrating best practices and common techniques when using Moya with testing. @fruitcoder if you have any ideas on what could be included, let us know \ud83d\udc4d \n. Sounds like you might be talking about this issue: https://github.com/Moya/Moya/issues/56 That's actually our oldest open issue, something we've wanted for a while \ud83d\ude04 \nSo I think testing examples/demos should include things like the following:\n- How to create a provider that always stubs (a \"Hello, World\" for testing with Moya).\n- How to verify that a specific request was actually performed.\n- How to verify that two different requests were actually made.\n- How to return a different status code than 200.\n- How to return different response data depending on parameters of the request.\n- How to handle errors returned from a requestClosure (like an OAuth error).\n- How to return different response data depending on how many times it's already been invoked (an example of polling for a specific response).\nIt could be really cool to include both a short code snippet showing the technique and also a link to an open source project that actually uses that technique. I can find Artsy examples once we have a list of everything we want to demonstrate. @fruitcoder any techniques you think we should add to this list?\n. Cool \ud83d\udc4d New issue sounds like a good idea, link back to this one, maybe copy over the list too. I think the new docs around testing should go in a new markdown file called Testing.md, if you're keen to to help out a pull request would be welcome!\n. I've opened https://github.com/Moya/Moya/issues/632 to address improves to the documentation, going to close this, feel free to re-open. \n. Moya only supports progress notifications while uploading a file, not for regular requests (thought Alamofire does support this, so it shouldn't be too difficult to add this to Moya. I'm a little surprised that Moya doesn't already support this, to be honest, it's something we should consider adding. Could you tell us more about how you'd expect this to work?\n. @colinta aye, could be worth factoring a bit out. If we can be backwards compatible, that's great, but we're about to have a major release with other breaking changes, so we could roll this feature into that release. \n. @alexdoloz yup, that makes sense! The trailing closure syntax is preserved that code.\n. @alexdoloz now that #543 is merged, this should work if you use the latest version of Moya, on the master branch. If you're using CocoaPods, you can change the Podfile to include pod 'Moya', git: 'https://github.com/Moya/Moya.git' and do a pod update and it should work. Let us know!\n. Ah, okay! No rush. \n. I think this was closed by #543, re-open if not. \n. Can you open another issue about the -1 bytes expected? Link back here for context \ud83d\udc4d \nI think the bytes expected comes from Alamofire, and ultimately the server. It may be that -1 is what ALamofire provides when there is no expected number of bytes available, which might could from the server. Not sure, though.\n. @alexdoloz I'm glad you got it figured out!\n. This looks great, going to merge. @colinta thanks for your really rapid response time and quality code!\nJust realized that now that #537 is merged, we'll continue to get code coverage reports on builds without changelog entires \ud83d\udc4d \n. Weird, I'll check if danger has had any issues like that reported. @orta seen this?\n. Looks like it's already been reported: https://github.com/danger/danger/issues/316 Issue involves how Danger determines which commit the PR is made from. Going to merge.\n. What you've got is actually how things are done, except broken into several lines. Here's an example of using it. \n. Cool! Please consider submitting a PR to the readme to add it :+1:\n. Hmm, looks like an oversight. Want to send a pull request with the added entry? \n. I think we would have noticed the danger message if it had run, but something went wrong on that build:\n\nWhich is on me, I should have re-run the build or fixed Danger. I think that pull request had just taken so long to get tot hat point, I was too impatient to merge. \n. Yeah, what I mean is that if Danger had had a chance to run and fail due to a missing changelog, the human merging (me) should have asked for one. But because I ignored the Danger failure (because it wasn't working), I also ignored the previous comment Danger had made about this missing changelog. I guess I assumed it had been added at some point. \nI agree we should probably re-think how we treat missing changelog entries. What sort of heuristic do you reckon should we use? \n- Any swift files changed?\n- A certain number of .swift lines added/removed/changed?\n. Sounds good. I'll send a PR, thanks for bringing this up again Orta. \n. Hmm, I see. This is when building with Carthage or CocoaPods. In CocoaPods, I can see Moya maybe having 10.9 as a minimum deployment target, with the RxSwift subspec having 10.10. Not sure if we can selectively allow 10.9 with Carthage.\n. Not sure what's best here, @justinmakaila I'll defer to you on this one.\n. Cool, #553 has breaking changes anyway, so we can merge this without worrying about semver. \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. An expanded message is a good idea \ud83d\udc4d \n. Empty Moya message is a known issue: https://github.com/ashfurrow/danger-swiftlint/issues/10\n@colinta does that message look good? \n. When you get this error, the next step is usually to specify the return type explicitly. Looking at the Moya source code, you can change your line to the following:\nswift\nlet requestClosure = { (endpoint: Moya.Endpoint<ICanHazProvider>, done: Result<NSURLRequest, Moya.Error> -> Void) -> Void in\nLet us know how it goes!\n. Yup, taking a look now. I've not seen this before, things are working for me with the latest master branch with Xcode 7.3.1. Have you run pod install in the Demo directory? What version of CocoaPods are you using?\n. @bryanbartow I think the second example might be getting confused with the nils used as parameters (they're non-optional, just remove them and they'll fallback to the defaults). But that doesn't explain the first error. \nI'm really at a loss on that one. Would it be possible to share a small Xcode project demonstrating the problem? It would help figure out what the problem is. \n. Awesome! So that works? Where do you think we should document this? \n. @bryanbartow Yeah, we've had issues before when using multiple Result identifiers. You can use modules names to namespace the specific Result type, like Result.Result or MyLibrary.Result, it can get tricky. Let us know how it goes :+1: \n. @kamil-tomaszewski It could be that in the original code, you had let endpointClosure: MoyaProvider.EndpointClosure without specifying the generic type of MoyaProvider and it confused the type system? Try let endpointClosure: MoyaProvider<GitHub>.EndpointClosure and see what happens. (It works if you don't specify anything because the compiler can infer from the closure signature what MoyaProvider's generic type is.)\n. Looks good! Much nicer. The SwiftLint warnings above are strange, since you didn't modify any of the files it's complaining about. I'll fix that separately, gonna merge!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Yeah, seems likely. We've run into problems in the past on our Demo app (importing more than one version of Moya). You're using Carthage, eh?\n. Well, CocoaPods will include all the specified subspecs in one module, named Moya. So if you have pod 'Moya/RxSwift, that will pull all the RxSwift Moya files and the regular Moya files into one module. Carthage doesn't have an equivalent of subspecs (they're stance is that you should use multiple frameworks instead \u2013 which we considered but decided against).\nMaybe you could do something like\nswift\ntypealias TargetType = RxMoya.TargetType\nAnd then you wouldn't see RxMoya.?\n. That's odd. Hmm. @Moya/contributors Anyone else seeing build errors with Carthage?\n. Oops, a dupe of #428.\n. Awesome thanks! Ignore the SwiftLint errors, we're having problems with it on CI. I can review the code shortly \ud83d\udc4d\n. Cool, I feel like this is good to merge. @leonereveel @colinta you two wrote the original multipart upload code, how does this look to you? Shame we'll have two major versions in quick succession, but I think it's worth it. \n. Yeah, same here \ud83d\ude04 Okay, gonna wait for others to have input, otherwise I think we're good to merge!\n. Fab, gonna merge!\n. The code is repeated because the app target is specific against iOS, but the three testing targets are specific to iOS, tvOS, and macOS. They all use the same files, but can't link against the app target because it's only iOS. Does that make sense? \n. It's a good question, thanks for opening an issue \ud83d\udc4d\n. Hmm, this is an interesting question. There's no reason we can't/shouldn't do this, it's just never been a priority before, so it's definitely worth considering. I'm thinking we abstract the functions we call from Alamofire into protocols, and extend Alamofire types to conform to those protocols. Then we just need a way to specify a different set of types that also conform.\nThere's a bit of hassle where we're currently using typealias to create Moya-specific types from Alamofire ones (for things like request methods, GET, POST, etc) that would need a little bit more code, but nothing too dramatic. \nI've got a flight tomorrow, might take a stab at this on the plane. In the meantime, you could explore subclassing Moya's Provider class to give you similar behaviour. Please let us know if you have ideas for implementation, too. \n. I forgot about that, thanks!\n. I took an initial stab at this, it's quite an overwhelming change. We actually lean on Alamofire a lot, include use of typealias to create Moya types that are really just Alamofire types. If we do this, I would want someone to be able to theoretically use Moya without having any reference to Alamofire code at all.\n@jasl how up-to-date is your fork? Moya has added multipart form uploading and a few other large structural changes recently, would it work with those changes? \n. Okay, thanks for the quick response!\nI tried to tackle this from top-down, like replacing our references to Alamofire.Manager with a new protocol defined in Moya, but everything broke immediately, and I was no where near finished an hour later. I think a better approach would be to remove the typealiass in Moya+Alamofire.swift first, then replace use of Manager with a new protocol. I'll see what I can do later. \n. I tried abstracting Alamofire and found Moya to be too tightly coupled to it to reasonably separate. This is probably because we've always built Moya on top of Alamofire, the de facto standard networking library on iOS. This is a reasonable hard dependency from my perspective, but as always, it's open for discussion. If anyone would like to send a pull request with this specific feature, I'd be happy to look it over :+1: In the mean time, we can keep this issue open in case others have ideas or suggestions.\n. What's your setup like, CocoaPods or Carthage? What Xcode and Moya version are you using?\n. Hmm, I haven't been installing Moya with CocoaPods 0.39 for a while. Can you post the relevant parts of your Podfile? I can take a look at it later tonight if someone hasn't chimed in by then. \n. @jcampbell05 I'm going to close the issue, if this is causing problems, feel free to reopen \ud83d\udc4d\n. Yeah, I'm leaning more and more towards the colours too \ud83d\ude04 \n. Agreed, I think either the clear ones or maybe the square ones could work. I think the square ones would go well if we used the GitHub avatar rather than the entire logo:\n\nI'm not sure which one, either that or the actual logo would be more recognizable:\n\n. It's like \"lorem ipsum\" but for visual design \ud83d\ude06 \nCool. Okay, maybe a straw poll? Vote by reacting to this comment on if you think a square logo or a full logo would be more recognizable in sticker format.\n| Square Logo | Full Logo |\n| --- | --- |\n| \ud83c\udf89 | \u2764\ufe0f |\n. Cool, calling it: square logo. Which means the design is finished :tada:\nI'll take care of ordering them, the tricky bit is figuring out how to collect addresses. @orta you have experience with this. Google Forms? \n. Stickers arrived: \n\n(Pen included for size comparison, they're 3.5cm squared.)\n. The US-bound stickers are already in the mail, the international post should be going out this week. Thanks for your patience! \n. @esttorhe Aye, I've addressed it to Berlin, but if you're not there anymore I can change it. \nIf anyone else has address updates, please send the updated address to ash@ashfurrow.com . Thanks!\n. Alright, I've sent these all out, let me know if you don't get them. Thanks again for everyone's work in making Moya such a successful community project, I'm incredibly proud of what we've built together.\n. @orta suggestions for the best way to display these colours? This is what I'm going for:\n\n. Okay, I think this is ready for review \ud83d\udc4d \n. Yup, working on it now. It's also running more than once. \n. okaaaaay\n. I've opened https://github.com/Moya/Moya/pull/561 to address the SwiftLint problems. \n. Going to rebuild so Danger runs. \n. Cool, pushed the update to the Dangerfile, and no warnings! So that's nice. \n. \ud83c\udf4f \n. Huh! When I get a chance, I'll take a look at Xcode's code coverage and see what it thinks. We might need to close this and open an \"increase code coverage\" issue \ud83d\ude09 \n. I have not, would anyone be able to take a look? \n. Thanks for looking into that! 80% is a far cry from the 66% CodeCov is reporting, looks like there may be a config issue. Anyone familiar with this? \n. Cool! This is for Carthage support? Could you summarize the changes+motivation behind them in the PR? (For those of us not in the Carthage know-how.)\n. Awesome! Sounds exciting, and like it's an involved process. Definitely worth a blog post, I'm sure we're not the only library to have this problem. \n. I don't see any CocoaPods breaking changes, I think we're good to merge. \n. Nah, CI fails like that intermittently. Can you trigger a rebuild on master? \n. I bet it's failing because we have different simulators to boot. We'll have to add it as part of the Rake task I guess. \n. Nah, we're currently only using one iOS simulator (tvOS still not supported) and OS X. I changed the UUID to point to the simulator we're actually using. We'll see. \n. Cool, looks good to merge! @spxrogers I think you'll need to merge from master first, feel free to merge after that \ud83d\udc4d \n. Tricky problem! It might be possible for us to handle this, but it would be a departure from URLSessionTask's behaviour. I'm not sure if Moya should be circumventing the behaviour of CocoaTouch libraries. \nA workaround could be to (manually?) dispose of the Observable before cancelling, which should prevent errors from being sent on the observable. Let us know how it's going :+1:\n. Interesting! \"Unable to find endpoint\" suggests that the request is failing on the server side of things, like maybe the URL you're trying to hit isn't correct? Can you try using the network activity plugin to print out what exact URLs Moya is using, and then double-check that they're correct? \n. Makes sense, thanks!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. This is wonderful, thanks! We've needed some tidying up for a while, thanks for taking the initiative. \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks for the PR! I like it, not too sure about recommending using a force cast, even though I just looked and it's exactly what my code does too \ud83d\ude48 What do you think about a \nswift\nguard let request = endpoint.urlRequest.mutableCopy() as? NSMutableURLRequest else { return }\nOr something similar? I think if we keep the force cast, we should add a short comment explaining it will always succeed. Thoughts? \n. Adding a comment sounds like the best approach, thanks for all the discussion everyone! \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Makes sense to me. You should be able to branch off from the tags of our releases. . Fantastic, looks great to me!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. This is great, thanks for the PR! Yeah, a changelog entry like the one you suggested would've been great, don't worry about it. \n. Awesome, glad you got it figured out! Thanks a lot for posting your solution, I'm sure it'll be of help to others. Going to close the issue, feel free to open another if anything else comes up!\n. Makes sense :+1: \n. Makes sense. One note: we don't use the GitHub wiki, but rather the /docs folder. Sounds awesome, thanks for opening the issue :+1:\n. @rlam3 has this question been solved to your satisfaction? Happy to provide further clarification. \n. @DenisLaboureyras is this issue still causing trouble? \n. It is intended, I wanted to avoid thousand-line PRs when a dependency gets updated. Does that make sense? \n. Makes sense to me! Good to merge when \ud83c\udf4f\n. Xcode 8 supports both Swift 2.3 and Swift 3.0, right? May we do need Xcode 8 then? \n. I can merge+release this for Swift 2.3 before releasing a separate version for 3.0, or we can just do it for 3.0. What does everyone think? \n. Okay, will reply from @gustavogervasio's branch and push a tag. Wish me luck!\n. Rather after #621, I think master is updated for 2.3. \n. I've cherry-picked the commits from #621 into the 7.0.1 tag and everything looks good. This means we can release just Swift 2.3 support and not also the breaking changes currently on master. I'm downloading the Xcode 8 GM to test locally before releasing. Thanks everyone!\n. Cool, will do :+1: What's the trick to get Xcode 8 to use Swift 2.3?\n. Wow, that was a lot of work. I've got 7.0.1 released on Carthage and CocoaPods, would someone be able to verify it's working for them as expected?\nI'm going to close this PR.\n. \ud83d\ude22 @marcelofabri can you check for other breaking changes? If that's the only one, we can replace the 7.0.1 tag and hopefully no one will be the wiser. \n. I've pushed the release up to a release-7.0.1 branch. \n. Okay, well let's stop the bleeding. Hold on.\n. I've pushed a 7.0.1 tag with an identical commit to 7.0.0 so no one's projects will break. I'll take another look tomorrow, thanks for pointing out the issue!\n. Cherry-picking commits turned out to be too complicated, so instead I branched off of the 7.0.0 tag and redid the changes for Swift 2.3: https://github.com/Moya/Moya/compare/7.0.1...release-7.0.1-take-two . I'm going to lint the podspec locally before releasing, I'll let you know. \n. 7.0.2 has been released, could someone take a look and verify it's all good? \n. Great, thanks!\n. Great question \u2013 we actually had developers with a similar problem a while ago, check out their issue: https://github.com/Moya/Moya/issues/431 I think you'll find the solution here. Let us know how it goes. \n. I think I may have misunderstood your initial question, but I think you should be able to use the default .URL parameter encoding.\nWhen returning parameters from the target, does the following work?\nswift\nreturn [\"param1\": \"[\\\"15\\\", \\\"19\\\"]\"]\nNormally when URL-encoding an array, the format is something like parameter[]=15&parameter[]=19, I think. If that's not what you want, then you'll need to create the final string you're looking for manually, which is a bit messy I admit. Just using the parameters property of Target should be enough.\n. @tomj How do you think we could improve our documentation around this? Any suggestions? \n. Looks great!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Fantastic work here, everyone! This kind of collaboration is what makes me proud to be a member of this open source community.\n. Awesome! I think the last thing we need to do before releasing Moya 8, with support for Swift 3, is to get CI working. Does that sound right? \nThanks again for all the work everyone!\n. Aye, we've bounced back and forth between Travis and Circle. I can't remember what made us leave Travis last time, but it's definitely a possibility worth revisiting. \n. Circle now supports Xcode 8 GM: https://discuss.circleci.com/t/what-is-timeline-for-xcode-8-gm-support/6153/5 I'm taking a look at things now, the last failure was due to an old cached version of Alamofire, which exhibited this bug: https://github.com/Alamofire/Alamofire/issues/1507 So it might be as easy as rebuilding without the cache. \n. Still being the beta 6 Xcode build number on Circle: 8S201h could be a slow rollout of the Xcode GM build.\n. @sunshinejr That's not possible, unfortunately. The workaround is to define the ReactiveCocoa branch in your Podfile. Documenting this requirement in the readme should be sufficient, I'll try to work on getting those ReactiveCocoa tests to pass.\n. Okay, I dug into this. It is possible to get ReactiveCocoa downloading with CocoaPods, but it's a bit roundabout since they don't yet have a podspec in their repo. I've modified a community-supported podspec to point to their master branch, which has Swift 3 support.\nswift\npod 'ReactiveCocoa', :podspec => 'https://raw.githubusercontent.com/ashfurrow/Podspecs/852d47f4d1ff836402fa2903c544a09ec665a72b/ReactiveCocoa.podspec'\nHowever, ReactiveCocoa depends on a new library called ReactiveSwift, which does not have a podspec yet. I've opened an issue seeking advice. The team seems amenable to it, so the next steps for me are to:\n1. Create a podspec for ReactiveSwift, send a PR to their repo.\n2. Uncomment the tests, modify them as required.\n3. Add instructions to the readme to specify both the ReactiveCocoa and ReactiveSwift pods manually in one's Podfile.\n. I've submitted a PR to ReactiveSwift: https://github.com/ReactiveCocoa/ReactiveSwift/pull/14 Once it's merged + pushed to CocoaPods trunk, we'll need to submit a PR to ReactiveCocoa to add a podspec there, too (updated to depend on ReactiveSwift). \n. BTW, CI is working with the Xcode 8 GM now. I'm building to see if it works, but macOS tests were failing on Circle earlier. \n. Very strange! Still, we're one step closer. Is anyone else able to take a look at the failing macOS builds? I've got my hands full with the ReactiveCocoa stuff already. \n. Okay, it's all green. Merging!\n. Released as 8.0.0-beta.1, see the Readme for installation instructions. It's a bit touchy since ReactiveSwift isn't yet on CocoaPods trunk, open an issue if you run into trouble. \n. Makes sense! \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Ace.\n. Looks good to me :+1: \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Great answer, @sunshinejr. @rlam3 let us know what else we can clarify, we're always looking for ways to improve our documentation!\n. Hi @rlam3, thanks for opening the issue. We actually have some auth-specific documentation here I wanted to make sure you were aware of; the request closure has been specifically designed with OAuth and other forms of asynchronous authentication in mind. If you have any suggestions on ways to improve our documentation, please send a pull request and we can take it from there. \n. You found the code that does the refreshing, further down that file you'll see the code that calls the fetching code: https://github.com/artsy/eidolon/blob/a7bb061c89cd4bed44d956b1376909ca0e72060b/Kiosk/App/Networking/Networking.swift#L87-L94\nBasically, the XAppTokenRequest function's Observable always returns a valid token (whether it was a cached valid token, or a newly fetched token). Then we use flatMap to turn that Observable into one that represents the actual network call we want to make. Does that make sense? \n. You found the code that does the refreshing, further down that file you'll see the code that calls the fetching code: https://github.com/artsy/eidolon/blob/a7bb061c89cd4bed44d956b1376909ca0e72060b/Kiosk/App/Networking/Networking.swift#L87-L94\nBasically, the XAppTokenRequest function's Observable always returns a valid token (whether it was a cached valid token, or a newly fetched token). Then we use flatMap to turn that Observable into one that represents the actual network call we want to make. Does that make sense? \n. Yup, don't need to worry about synchronizing NSUserDefaults manually, it does it for you. And worst case, it looses the token and just fetches a new one. We clear them out just for consistency's sake. NSUserDefaults is just a convenient place to put them. We inject the token here: https://github.com/artsy/eidolon/blob/a7bb061c89cd4bed44d956b1376909ca0e72060b/Kiosk/App/Networking/Networking.swift#L132\n. We don't use a JWT in that app, but the principle is the same. That's where you would add any tokens as HTTP headers, or sign the request using Heimdall or whatever for OAuth. \n. Good question; the response object contains the URLResponse which has the headers you can access. \n. Cool! Sounds like your issue was resolved, so I'm going to close this. Please feel free to re-open if that's not the case, thanks again!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Yup, it was caused by a mistake on my part, working to fix it and release Moya with Swift 2.3 compatibility today. \n. This should be fixed now, could you try updating to Moya 7.0.2 and letting us know if it works? \n. 7.0.2 is what you want for Swift 2.3. Try pod update Moya, without specifying a version in your Podfile. That should install the latest version, which is 7.0.2. Maybe try deleting the Pods directory, if you can, and re-run pod install. \n. This should work:\nrb\npod \"Moya/RxSwift\", :git => \"https://github.com/Moya/Moya\", :branch => \"swift-3.0\"\nLet us know how it goes :+1:\n. Sorry you're running into this error, it's possible I made a mistake when releasing 7.0.2 for Swift 2.3. Could someone from @Moya/contributors who is familiar with Carthage take a look and see if 7.0.2, the latest release, works with Xcode 8/Swift 2.3? \n. Ah, interesting! Would you be able to submit a PR against the release-7.0.1-take-two branch? Don't worry about it, though, I can take a crack tomorrow. \n. Wonderful, thanks! \n. Great idea! \n. I'm not surprised master isn't working, the 7.0.x stuff branched off from the 7.0.0 tag, and all the Swift 3 stuff is in its own branch, so master has been languishing for a bit. \nWe could consider only testing one platform with Carthage, instead of iOS, macOS, watchOS, and tvOS. It might be worth the time tradeoff, not sure. What do you think?\n. Great work! I think keeping Carthage support working is an acceptable tradeoff for a slower CI, thanks Orta.\n. 7.0.1 is the last version that is compatible with Xcode 7 / Swift 2.2. Moya 7.0.2 is compatible with Xcode 8 running Swift 2.3. Swift 3 support is still a work-in-progress: #608.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. :100:\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Ace, thanks! So after merging, we can release like a 7.0.3 that adds Carthage support for Swift 2.3, correct? \n. Yeah, CI wasn't working for me, either. I didn't update it to use Xcode 8, which is probably why. I'll merge + release.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. @tpesce Can you check that everything works for you with the 7.0.3 release? \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks for the kind words! I dug around the Alamofire repository and found this discussion which includes rationale for their decision: https://github.com/Alamofire/Alamofire/issues/1367 I personally find this regrettable, but there are comments in that issue of using forks of Alamofire that continue to support iOS 8. If you find one that works, I'd be happy to help you use Moya with them.\n. Tests are passing locally from the command line, too: \n\nGoing to try Carthage while I'm at it. CI is \ud83d\udd34 because of an issue with Circle, I'm waiting on a response in their community forum.\n. Great question @juliengdt. The solution is to specify the branch in your Podfile; if you're writing a library that depends on Moya, I'm afraid the best solution is to document that they will need to do that in their own Podfiles. \nI'm reluctant to tag a release because we're just not ready with Swift 3 support yet, especially around our ReactiveCocoa extensions. Does that answer your question?\n. Basically yeah, you're basically telling CocoaPods that you want to override that version of B. It's worked for me in the past, if it's a problem we can always tag maybe like an alpha?\n. Should be resolved by our new use of a 8.0.0 beta tag, can you verify? \n. Fab, thanks!\n. We haven't heard from other users that this is persisting, going to close for now but we can revisit if it comes up again. \n. I think this is a good idea, what are the most common miscommunications we need to address in issues? \n. Huh, with this new ReactiveCocoa split, we only really depend on ReactiveSwift, we can remove ReactiveCocoa as a dependency. Maybe we should rename the subspecs, too. \n. We can change the name in another PR, going to focus on getting this to \ud83d\udcd7\nOpened https://github.com/Moya/Moya/issues/648 to discuss the rename.\n. Makes sense to me. I was thinking we could include it as two subspecs, and deprecate the old one in favour of the new. To avoid repeating ourselves in the podspec, we can have the old deprecated subspec simply have a dependency on the new one. Does that make sense? . Yup. I think we should be about good to go. Anything else we need for 8.0?. Cool cool. I don't see any more 1.0 issues on their repo, and they just had a new pre-release of 1.0 ship two days ago, so hopefully it won't be too long. . Gotcha. Circle CI doesn't support parallelism on macOS builds, but we could try moving Carthage to Travis CI to have it run parallel with our unit tests, which should cut CI times in half.\n. Tried this, not really worth it. \n. Interesting, things seem to be working on CI, but that's with a specific version of ReactiveSwift (specifically, their d4de1ff81c12124d148f726b8b44dd6887b41ae0 commit). \n. Gotcha, thanks!\n. Looks great! The CI failure looks unrelated, I'll open another issue to fix. \n. Looks great! The CI failure looks unrelated, I'll open another issue to fix. \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Glad you got it figured out! Thanks for posting your answer, I'm sure it'll be of help to someone. \n. Trying to split up Carthage validation onto Travis, so they can run in parallel and save build time. We'll see!\n. Nah, never mind. Travis is having outages, might be worth reconsidering separately, but not now. \n. Danger failing again, gotta learn not to force-push to PRs...\n. Both actually, the graph above is just an outline, you can see individual files' coverage in the link. \n. Hmm. Sounds like it could be a configuration issue, do you have experience with CodeCov? Could be worth a look. \n. Looks like CodeCov can't access file names with + in them, like https://codecov.io/gh/Moya/Moya/src/master/Source/Moya%2BInternal.swift . I've contacted their support team to clear it up. \n. 8.0.0-beta.2 has been pushed, @Tynox can you verify it works? \n. This looks good, did you want to re-open it? \n. Sometimes the unit tests fail like that and someone has to restart the build. I've restarted it, if you want to re-open :+1: Thanks!\n. The readme, needs to use the same Podfile format as the Demo project. A PR would be awesome!\n. Cool, thanks!\n. Hmm, getting a legitimate failure this time, but I don't understand. Your PR is exactly what I would've done, not sure why it's failing. Keep it open and I'll investigate, thanks again!\n. That's a good question! @justinmakaila can you chime in on this? \n. @wongzigii That timeout happens sometimes, I've restarted the build \ud83d\udc4d\n. Just realized we forgot to merge this, I'll deal with conflicts and merge today, thanks again \ud83d\udc4d\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Interesting, watchOS isn't being tested on CI, maybe our watch support has been broken for a while and we've just not noticed until now?\nWe're not even using the StreamRequest anywhere, we should be able to delete this line of code without any problems. \n. Cool, thanks!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. CI failed due to Danger, gonna merge. Thanks!\n\n. Great idea! I like it. Let's do the first one: adding(thing:.... A PR would be :100:\n. Great question, thanks for linking to relevant code :bow: We definitely need to do something here, at least in docs. I'll take a look later today and see what we can do. \n. Cool, that sounds like a good fix @RamwiseMatt. I think we just need to update our docs then, right? Anyone available for a pull request? \n. Makes sense, does anyone have time to submit a PR? \n. This is a great idea and a swell PR. We (I?) added the IUO because it was easy, but this is definitely the better approach. Thanks!\nI've restarted CI, it failed due to a version mismatch in the Podfile.lock. Do the tests pass locally?\n. CI is running on https://circleci.com/gh/Moya/Moya/608 , I just had to rerun without the cache. \n. Agreed, a changelog entry should be sufficient though \u2013 this isn't any more intrusive than the other breaking changes we've got on master. The tests have been updated, too, so I think it's just the changelog entry that's missing. \n. This is great, I'll take care of the test and merge :+1:\n. In this case, I did the following to resolve the conflicts:\nsh\ngit remote add KelvinJin https://github.com/KelvinJin/Moya.git\ngit fetch KelvinJin\ngit checkout KelvinJin/master\ngit checkout -b merge-685\ngit pull origin/master\ngit resolved the changelog conflicts, I just had to resolve a conflict with a unit test from #688. I did need to run bundle exec pod update ReactiveSwift, since CocoaPods was giving an error. Then I git add . ; git commit and used the default merge message. \nLet me know if anyone has any questions about this workflow, it might be worth writing up in a blog post sometime. \n. No problem, two different objects can have the same hash value without any major consequences (as long as two equal objects don't have different hash values, it should be fine). \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Great question. The tests have been in the Demo directory just because of convenience, sometimes you need to run the code in a real app's lifecycle. I'm happy to move them into a /Tests directory, but would prefer that they stay integrated with CocoaPods. If we did move tests out of Carthage, we would need to do a pod lib lint on CI to make sure we don't break CocoaPods integration.\n. Great question. The tests have been in the Demo directory just because of convenience, sometimes you need to run the code in a real app's lifecycle. I'm happy to move them into a /Tests directory, but would prefer that they stay integrated with CocoaPods. If we did move tests out of Carthage, we would need to do a pod lib lint on CI to make sure we don't break CocoaPods integration.\n. Closed by #767, thanks @jeryRazakarison! \n. Hmm, what an interesting idea! I think if we were to include NSURLResponse, we would want to remove the Int status code. Another solution would be to add another case to the enum. I think that would make a lot of sense, actually. Want to send a pull request? \n. Hey there, can you double-check the installation instructions for CocoaPods in the readme? Then run pod update Alamofire Moya and that should do the trick \ud83d\udc4d\n. Hey there, great question! \nFirst, to return empty data you can return Data(), which makes things a little easier. \nThe data you return should be a response representative of what your API actually returns. For example, if you request a user object from a REST API, you should get back some JSON that represents a user (encoded in Data). In my apps, I'll store this JSON as files and read them from disk when asked to (note: sampleData is not called except when stubbing, so it's not accessed in production).\nThe reason it's not optional is to force developers to specify something so it's easier to unit test the code that uses Moya. Network call stubs are first-class citizens in Moya, and are as foundational to the library. I understand that not every developer agrees, so return Data() is always going to be an option for developers to opt out of this behaviour. But since all network responses do return some data (even if it's empty) then it doesn't make to make the property optional. \nI hope this clarifies things to your satisfaction. We're always looking for ways to improve our documentation, do you have any suggestions where we could add this explanation to help future developers? \n. Ah, you're looking to stub requests locally, to return previous requests? Interesting. I'll have to think about that. \nHaving a plugin to record network calls might be cool, too, especially for testing. \n. Great PR, thanks! The only feedback I have is in the comment above. If you like, we can address it now, or we can open an issue to address it later. \n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. What a great question! Usually for example URLs that aren't meant to ship, I use example.com \u2013 this sounds like a good alternative? \n. It would be a can of worms, unfortunately. The trouble is that somewhere \u2013 either inside Moya or outside \u2013 someone needs to deal with the fact that a call to NSURL(string: ) might return nil. We've decided it's better to give the user of the library the flexibility to fail as they like, instead of having Moya fail or work unexpectedly.\nIt's a balance, there are arguments for both approaches. Do you think adding documentation of this rationale might help explain it to other Moya users? Where should we put that documentation? \n. Agreed, Basic Usage is already a large document. \nWe could create a new Advanced.md file and discuss it there. Could you send a pull request adding it? \n. Hmm, not sure where that milestone came from actually. I agree it's time to consider releasing Moya 8.\nWe're still ironing out regular bugs and other breaking changes for Swift 3, personally I'm fine with keeping it in beta for now. Especially since if we go final with beta versions of RxSwift/RAC, and then there's another RxSwift/RAC beta with breaking changes, then we need to have a new major version to avoid breaking semantic versioning.\n. It's a fair point, thanks for bringing it up. I think a new beta makes at least makes sense, I'll try to get it done today.\n. Cool, beta 3 is up and pushed for Carthage and CocoaPods \ud83d\udc4d\n. RxSwift's updated to 3.0 final, so we're just waiting on Reactiveswift now. ~~I'll open an issue asking for a timeline~~Looks like they only have one issue left and there's already a PR so it shouldn't be too long.\n. Nah, I like neverStub since it's not a member of a Stub type, but rather a provider.\n. We could make a new Stub type within the provider, might be overkill. What do you think? \n. What an interesting question! I hadn't thought of having the observable error after a timeout, a really neat idea. But Alamofire+NSURLConnection will already error on timeout, looks like my code here is really just interfering with that. It sounds like what you need is an observable that:\n- Errors on network unavailability.\n- Retries when signalled by an \"I'm Online!\" signal.\nI actually found a really good example in the RxSwift repository of how to do this: https://github.com/ReactiveX/RxSwift/blob/4952adb27c684b47792923b00015516849061eab/RxExample/RxExample/Services/ReachabilityService.swift I think Eidolon should probably move to that approach too. \n. Mmm, interesting idea. What components of the network stack are you keen to isolate? You're thinking we could add it as a library, like a new pod? If you'd like, go ahead and create the repo under your own account and we can discuss it from there?. Cool cool. Let's give it some boring name and we can think of something more specific once we've got code to inspire the name?. Cool, thanks Andrew! I probably won't be able to take an in-depth look until Monday, but I wanted to thank you for exploring this! Even if it turns out to be overkill, we've still learned something we can use to make documentation better, etc. Thanks again!. I hadn't thought of adding OnlineProvider to Moya, I think we should probably open a separate issue to discuss that, separate from Rx/RAC. Can you marshal that? \nThe token issue is really interesting, I hadn't thought of that. It'd be nice if we could come up with a way to hold all requests until we're auth'd, maybe through replaying a single auth request. Our servers don't do this, which is probably why it hasn't happened to me yet. . Hmm, doesn't appear to be working:\n\n. Cool, will do @russbishop :+1: I've opened #725 to make sure I don't forget, will likely get to it this weekend. \n. This should be fixed by #734.\n. You should be able to use rc 1 of RxSwift, we just haven't had a chance to update the readme yet. Let me know if it works \ud83d\udc4d\n. Yikes! I'm not too familiar with how we work with Carthage. Updating our Cartfile might fix the issue, can you send a PR? \n. Should be fixed by #727. But now we need ti move to their final release (I'll do that now).\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Great question, we should improve our documentation about this because you're not the first to ask this. \nIt's deceptively simple, actually: you need to provide an array of the parameter values. Something like\nswift\nreturn [\n    \"status\": [ \"draft\", \"live\" ]\n]\nLet me know if that works \ud83d\udc4d\n. The [] is standard HTTP way to send an array of parameters, I'm surprised it's not working. I took a look through the documentation and couldn't find the endpoint you're using. Can you point to that documentation?\nIt's possible to do exactly as you ask, with duplicate status parameter fields, but you'll need a custom parameter encoder. You can see an example of how to use custom param encodings here: https://github.com/Moya/Moya/blob/master/docs/Examples/ArrayAsRootContainer.md\n. I see, very interesting! A custom parameter encoding looks like your only option. Using one will be very similar to Alamofire custom parameter encoding. I looked at their issues and found a very similar question here: https://github.com/Alamofire/Alamofire/issues/965 I hope that helps, I'm sure you can do it \ud83d\udc4d Once you've figured it out, I'd love to see more documentation in Moya around this, so please consider either posting your solution here or sending a pull request to add it to our docs.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Anyone from @Moya/contributors available to take a look at this PR?\n. Not sure, it looks like the \\ in the original string are getting escaped \u2013 sometimes this happens with print. I've never used Postman, how are you getting the value returned from mapString()? \n. And you're just using print(about)? I'm just wondering if it's actually working but print is doing something weird. \n. This should be fixed by #767. I'm going to close, feel free to re-open if the problem persists \ud83d\udc4d\n. The ~> syntax assumes that all versions adhere to semantic versioning, which our betas have not done. So until we release 8.0 I'd recommend to keep the existing readme instructions. \n. Plugins probably aren't the best way to approach this, I'd suggest subclassing either the RxMoyaProvider or ReactiveMoyaProvider and use RxSwift or ReactiveCocoa to retry on failures. There is no straightforward approach, I'm afraid. Even if you don't use RxSwift or ReactiveCocoa, I would still recommend subclassing and putting the necessary logic in the request function.\n. This is great, thanks @raphaelcruzeiro! Except for basic HTTP auth, Moya has remained largely agnostic about authentication. Do we think this should go in the library itself or in the documentation?\n. Cool do you think this could go into our existing Examples section? Or do you think it should be separate?\n. @pietrocaselani interesting approach \u2013 Moya now supports authentication plugins, including sync/async methods. The docs are here: https://github.com/Moya/Moya/blob/master/docs/Authentication.md Let us know if there's anything we can clarify!. Thanks for taking care of this!\n. Not a problem, thanks for the thoughtful question! \n. Sounds like a custom parameter encoding is what you're looking for. Here's an example of how you might approach that, please let us know if that approach works \ud83d\udc4d\n. @loryhuz Any luck with this? \n. Hmm, that's too bad. Good catch \ud83d\udc4d\n. Aye, I'll do a release asap. Thanks for looking into this! \n. Aye, I'll do a release asap. Thanks for looking into this! \n. All done \ud83d\udc4d Released as 8.0.0-beta.4, let us know if this works. I've opened https://github.com/Moya/Moya/issues/759 to decide if we want to release that as a 8.0.0 final.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Ah, sorry, you're right. Got it confused with ReactiveObjC. Let's hold off then. \n. Ah, sorry, you're right. Got it confused with ReactiveObjC. Let's hold off then. \n. Yeah, could you create a milestone? It would be awesome to keep this stuff documented \ud83c\udf89\n. Yeah, could you create a milestone? It would be awesome to keep this stuff documented \ud83c\udf89\n. Not that I'm aware of.. Not that I'm aware of.. @Pr-Chen Any update on this? Would love to figure out the issue.\n. Hey, great question. Thanks for taking the time to open an issue. The instructions in the readme are outdated, please try Moya 8.0.0-beta.4 and you should be fine. Please let us know \ud83d\udc4d\n. Hey, great question. Thanks for taking the time to open an issue. The instructions in the readme are outdated, please try Moya 8.0.0-beta.4 and you should be fine. Please let us know \ud83d\udc4d\n. Hey, great question. Thanks for taking the time to open an issue. The instructions in the readme are outdated, please try Moya 8.0.0-beta.4 and you should be fine. Please let us know \ud83d\udc4d\n. Wonderful, glad to hear it! Would you be able to open a pull request updating the CocoaPods readme instructions? No worries if not!\n. Wonderful, glad to hear it! Would you be able to open a pull request updating the CocoaPods readme instructions? No worries if not!\n. Well well, thank you!\n. Well well, thank you!\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. It's not straightforward, but definitely possible. Check out the Endpoint documentation's request mapping section, as well as the overview of how Moya works for more detail, and let us know how it goes \ud83d\udc4d\n. It's not straightforward, but definitely possible. Check out the Endpoint documentation's request mapping section, as well as the overview of how Moya works for more detail, and let us know how it goes \ud83d\udc4d\n. Fixed by #767.\n. Fixed by #767.\n. I'm not going to worry about our code coverage going down by 0.08%, this looks great, merging \ud83d\udc4d\n. I'm not going to worry about our code coverage going down by 0.08%, this looks great, merging \ud83d\udc4d\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. I think they're specific to this example, not related to RxSwift for sure. Thanks for updating this \ud83d\udc4d\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.\n. No worries, can we just merge them in that order?\n. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Weird, the webhook delivery failed. Re-delivering the webhook payload seemed to work, thanks for the bump \ud83d\udc4d. Looks like GitHub was having some trouble yesterday:\n\nLooking in my inbox, I got a notification of the error on Heroku, so if it happens again I'll know \ud83d\udc4d. It's never really come up. It'd be pretty tricky to do, since we have a lot of source code hacks to support either CocoaPods or Carthage. I'm not opposed to adding this, but I think linking to a blog post describing (in general) how to install CocoaPods or Carthage libraries without using those tools would probably be the best solution. Thoughts? . Let's do it, I never really liked removing iOS 8 support anyway but we had to because of Alamofire. If they're lowering it, let's do it \ud83d\udc4d\n. Sounds good \ud83d\udc4d That can sometimes happen when the script fails near the end. Can you take care of that? . Correct. . The solution is to use two different enum cases that return the same path. Maybe fetchZen and createZen. Does that make sense? . Yup, it takes a long time because it needs to run every permutation of every subspec. This is great, the only change I would add is the modify the Podfile used in the Demo project to reference the new subspec. Great work!. Yup, they're pretty great. I can't remember why we switched to Circle most recently, but in general I like them better for macOS builds right now: builds start in a few seconds where Travis often has a delay of 45 minutes or more just for a container to become available. I'm not knocking Travis, they're both great providers supplying a valuable service to the OSS community, but Circle suites us better right now.. Sounds good, we're still in a holding pattern until the ReactiveSwift release so this seems like a good idea to get into 8.. It's common in Ruby to call them Spec, probably from there. Either way is fine, most of my projects have both \ud83d\ude06. Mmmm, yeah that's probably just a typo \u00af\\(\u30c4)/\u00af. Yeah, I think if we were to rename it to filterStatusCodes(in:), I'd want to review the filter family of functions as a whole. For example, we also have filterStatusCode(code: Int), why not filter(statusCodes:), filter(statusCode:), etc? I don't have an opinion either way, I think either works within the guidelines.. Weird, I wouldn't think Danger would complain about that on trivial PRs. Might be worth a change. . Cool, I'd love to get another set of eyes on this, and we can release tomorrow. Thanks for taking this on!. Ok, I'll get this released as soon as possible, I'll let you know \ud83d\udc4d. Okay, this should be up. @mattfxyz can you confirm this works on your end? . Right! I had to release manually instead of using the rake task, if you could create the GitHub release that would be :100:. Thanks!. I usually include the page number as an associated value on the enum, and use that value in the parameters. Does that work for your code?. The properties are public because they're passed in as parameters to the initializer, and I still adhere to API design principles that specify all initializer parameters should be accessible after the fact. But that's just me \u2013 it's totally open for discussion!. Listing both makes the most sense to me too. Moya has been moving very quickly and making a lot of breaking changes, it makes sense that the community is struggling to keep up. Hopefully things settle down a bit after our 8.0 release.. No, I think that's a Danger bug. We should try updating to the latest to see if it's been fixed. . Hard to say, is defer to whatever is least surprising for users, but that's certainly up for debate in this case. It doesn't sound like there's a tonne of push for it, so it might make sense to hold off for now at least. . Agreed, it can get pretty wild. I store sample response data (JSON mostly) in files and return the contents of those files instead of hard-coding things. Here's an example: https://github.com/artsy/eidolon/blob/bbaa513cc50e6bdfe0aad317ffca1372ecbc8323/Kiosk/App/Networking/ArtsyAPI.swift#L182-L238 Let us know how it goes \ud83d\udc4d. Hi there, I took a look and the requestClosure looks like it is escaping (see here). What version of Moya are you using? . Yeah, I like Moya.Error from an idealogical perspective but pragmatically I think MoyaError makes more sense. Another solution could be to put the Moya.Error type inside the MoyaProvider class, since that class is what generates the errors. I'm fine with whatever we decide though, thanks for bringing up the discussion \ud83d\udc4d. Cool, let's rename it MoyaError then. Like I said, it's not ideologically as awesome but we've got to live/code in the real world \ud83d\ude04 . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. We can do a pod lib lint to lint it locally (make sure it compiles). . I don't have anything more to add to the conversation, but wanted to note a) this is a really great discussion, I'm sure other libraries are having similar ones and we should consider writing a blog post about this PR, and b) I'd really like to thank everyone for providing such thoughtful, respectful comments. This kind of conversation makes Moya a joy to work with, and sets a high bar for the rest of the iOS community. Thank you all.. Is there a blog post or resource about using unavailable? My gut says not to bother with it but I honestly don't know much about unavailable or how other libraries use it.\nAlso: do we need like a beta or RC for 8.0.0? I'm inclined just to release 8.0.0.. Ah interesting. Yeah, the helpful error messages are definitely nice. This is worth holding off releasing for I think. . No idea! We should consider adding --verbose to the failed CocoaPods shell command to get more output for next time.. Cool! Looks great. I'm fine with leaving those commented out for documentation's sake, up to you. Could we provide an empty ReactiveSwiftMoyaProvider implementation that's marked as unavailable maybe? . Good notes describing the change \u2013 my inclination is to move Moya towards being an SPM-first library, does this PR make sense in that context? . Good question; the properties of MoyaProvider are let because Swift encourages properties to be let by default. We've never had a reason to make them var. If you need to modify the behaviour of the endpointClosure, you can use an if statement in the closure that checks for a condition to behave one way or another, for example in a variable outside the closure. You can also attach that variable as an associated value on your Target enum class.\nHope that helps! Let us know if we can clarify anything. . This PR makes sense to me, we should probably have been doing this from the start \ud83d\udc4d @sadiq81 could you add a changelog entry for us? Thanks for the PR!. @sadiq81 Thanks a lot for the pull request! Would you mind adding a note to the changelog? . @sadiq81 In your master branch, add a line to Changelog.md at the top that describes the bug you fixed. Commit it and push it up to add it to this PR \ud83d\udc4d. Aye. I'm leaning towards merging this, the common case makes sense to optimize for. Let's give it one more day to discuss objections, but I think we've covered everything now. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. We've had that discussion before, and we can revisit it. The argument for keeping them all in one place is that it's far easier to maintain. But I'm not doing much maintenance nowadays, y'all are, so we can split them up if that's what the team thinks is right. . Aye, that's the tradeoff: it's easier for Carthage users but harder for us. Moya's benefited from a tonne of community contributions, and the easier we can make that the better. But I don't like shifting the burden to users either. This could be something to discuss in a Hangout or Skype call, let me know and I can organize it.\nEDIT: Though we should take into account the likely shift away from CocoaPods and Carthage towards SPM, which works with the current set up. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. > The key deliverable here is the documentation.\nYup, this PR is only docs, which can only really help. I'm going to merge and we can refine later if we add first-class support into the library. Thanks again!. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Good catch!. @scottrhoyt Neat! Looks like it could easily be adapted into a Rake task, do you think that makes sense? I can take a stab at that later today. . Actually, it might make more sense to merge this for now and open an issue to import that into the Rake task later, pretty busy this afternoon \ud83d\ude2c Could you open that issue for us @scottrhoyt ?. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. @pedrofjfmartins No problem! I've added you as an owner to the CocoaPod, want to try again? Happy to help!. The implementation in the PR makes sense to me.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Makes sense to do a patch release I think \ud83d\udc4d. Good point @BasThomas. Technically we shouldn't be specifying anything at all and just let the Podfile.lock file do it's thing. Someone want to update? . Cool project!. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. I'm okay with automating things, that's a bit distinct from releasing prebuilt libraries. I've avoided them until Swift has ABI stability but it's definitely up for discussion. @scottrhoyt I've added you as an owner of the Moya org so you should be set to handling setup yourself. Let me know if I can help \u2013 I've been stepping back gradually but I'm happy to help where I can!. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. @nikans Moya has been around almost as long as Swift has been public, our error handling as evolved as Swift's has :wink: . A revert generates a new commit, to be safe it'd be best to put that commit in a PR, if that works for you? I'm happy to do it but I'm away from a computer right now. . Yup, cool so on a branch you do git revert ca5c9fed3a6ad4bb8be9a5d882bb202782910ac1, save the default commit message, and then push your branch to do a PR as usual.\nWe allow pushes to master because the release script, which modifies the changelog and podspec, commits and pushes. With this being automated, maybe there's an opportunity to change that. \nLet me know if I can help or further clarify anything \ud83d\udc4d. Yikes, I've never successfully reverted a merge commit except through the GitHub UI. Hmm. Any advice here would be welcome.. GitHub's control over branch protection looks fairly granular \u2013 we we automate the release, get @ashfurrowbot or @moyabot or someone's bot to push, and whitelist them as having direct push access. We've been discussing automating our release process a bit in https://github.com/Moya/Moya/issues/983 but could someone open a new issue for just it?. There may be a complication using @moyabot actually. It's purposefully not a member of the org because it has its personal access token to access repos public (it has no repos to access, so it's fine). It needs this for Danger integration. Hmm. I can't really use @ashfurrowbot either for the same reason. Not sure about next steps.. Yeah, we'd have to modify our deploy script because it currently updates the changelog and podspec, commits those changes, and pushes. If we did something else like using PRs for those changes, and then tag post-merge, then CI can just push to CocoaPods and make a GitHub release. Sounds like a plan to me! Alternatively, we could use deploy keys instead of using personal access tokens; it's more involved but we can automate away the PR process. \n@scottrhoyt would you be interested in making those changes? Happy to help but I'm also keen to see the project grow on its own, without me :smile:. Cool cool, much appreciated. No pressure remember! . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks for all the help on this everyone :bow: . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. It's possible to run Danger on a separate CI, but Danger also posts a comment using the @MoyaBot with a description of what went wrong (it updates that comment on subsequent runs). Customizing the error message is totally doable, let me know if I can help. . I think giving Danger more actionable error messages would be a great idea, I'll look into improving the wording this weekend. \nI'm not opposed to running Danger on a separate CI (say, Travis) but it does limit our ability to add rules that deal with build artefacts. For example, we could have a Danger rule to look for long-running Swift compile times, but only if it's run as-usual. Also, two CI services means twice the configuration, so there's a cost. I'm fine with whatever the community wants to do.. Sure thing \ud83d\udc4d. Yikes, forgot to look at this over the weekend. Will get to it ASAP. . @BasThomas DM me your email and I'll add you as an owner to the pod \ud83d\udc4d. I've helped out with similar sites like this one: https://github.com/RxSwiftCommunity/rxswiftcommunity.github.io Jekyll is great, Middleman is also great. Whatever people are familiar with sounds good to me. . I have no objections \u2013 starting with Jazzy makes sense. As I mentioned above, Middleman is also nice, but the cool thing the hip kids are using these days is Gatsby. I've not used it yet but am planning on looking over the free Eggheads course tonight.. Cool cool \u2013 I've got some time this weekend, I'll see what I can do \ud83d\udc4d. This totally fell off my radar \u2013 going to prioritize it this weekend. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Yeah, same. Separate repos would help Carthage users but introduce a tonne of complexity for contributors. From my perspective, I would prefer to keep contributing to the library as easy as possible.\nIf we do decide to change the infrastructure of the project, I'm happy to help in any way I can. Just let me know;.. Yup, makes sense to me. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. I looked this over and it seems to make sense to me.\nI agree with @sunshinejr that it gets a lot more verbose at the call site... definitely not great. I'm wondering if instead of associating the new RequestDataType with the request enum case, we can extend the number of enum cases? like requestWithData, requestWithParameters etc? . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Interesting idea \u2013 I like it a lot. My only hesitation is that that some users (including myself) subclass the existing reactive subclasses (subclassing RxMoyaProvider) to introduce custom behaviour within the request methods. This implementation wouldn't allow for the same mechanism to be used, so we'd need to find some alternative. \nMy gut says composition would be a good idea (so, instead of subclassing a provider, we would recommended containing it within a sort of provider-provider). If that's acceptable, we would just want to make sure that we have a migration guide before releasing 9.0. Happy to assist with any of this.. Well, Eidolon has become a sort of go-to implementation for how to do Rx with Moya. Why don't I migrate that over this week, and we can refer to the actual PR from the migration docs. It'll likely be a few days before I get to this, but I'll follow up \ud83d\udc4d. Hmm not sure what's going on. Can you test locally to see if it passes from within Xcode? From the command line with rake test?. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Okay, cool. Good ideas everyone \u2013 I've made some changes and pushed. . Okay, I've un-WIP'd this PR. Going to give a few extra days for @Moya/contributors to chime in. . @pedrovereza makes sense, I'll amend for the first point. I added something for response handling already, let me know what you think @SD10. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Awesome, great work! Let's leave it a few days in case anyone else has input. \n@Moya/core-team I wonder if we should target a new moya-10 branch with the PR, to keep master for any non-breaking fixes we can release as 9.0.x patches. Anyone have thoughts on a branching strategy? . Oops \ud83d\ude48 . Cool, looks good to merge on \ud83c\udf4f . More is more \ud83d\ude04 . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. @lovesomeone this is amazing \u2013 thanks so much! \nI don't think it's too burdensome to keep the docs in this repo; our English docs drift behind our implementation and our contributors keep them up to date, I expect our Chinese-speaking contributors would be available to help too. Either way is fine \ud83d\ude04 . It looks like a few of the docs are incomplete \u2013 let's merge this, and then open an issue about how to indicate that they might be incomplete or behind, but we would appreciate any help.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. @0111b Awesome, I am looking forward to learning what you find out. Thanks again!. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Agree with @colinta. I personally favour the master/develop strategy, but regardless of the decision made here I would encourage us to document how we want to work, and the rationale for it. I'm happy to help/proofread any of this, just @ me :smiley: . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Hmm. Let's step back for a minute before discussing changing Moya's behaviour.\nThe reported issue is that the method name is misleading, so let's discuss that first.\nThe method is scoped to a file that begins with Moya+, so it's semantically scoped to the Moya project. Additionally, the rest of the file is all functions for defaults of Moya, so again it fits well. For historical context, the defaultAlamofireManager function itself predates Alamofire's concept of a \"default\" (previously called \"shared\") manager. We used a function here specifically because it does create a new Alamofire manager instance with each invocation (if it were accessing a shared instance, I'd agree that using a static var would be better).\nSo we have a function with a slightly misleading name, but otherwise the function fits well within Swift idioms. I think we should consider two possibilities:\n\nAdding documentation explaining that this function doesn't return the default Alamofire manager instance. \nRenaming the function to avoid ambiguity with Alamofire's default manager.\n\nI'm very concerned about code churn in stable projects like Moya; imo, any breaking change needs to be justified by tangible benefits to Moya users because so many developers depend on this library and I don't want them to feel frustrated. Which of the two options we pick (if either, or both) should depend on feedback from the community. @zhongwuzw and @SD10's friend's input would be valuable here.. Cool! Looking forward to hearing. Of course, everyone is welcome to chime in, too. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Nearly! You don't really have to fork and re-clone (though that will work too). \nYour fork was made at a specific time, and to continue making pull requests to Moya, you need to \"update\" your fork, so that it knows about all the commits to Moya since you made the fork. This is actually pretty easy to do, but uses confusing terminology, isn't well documented, and is a bit of \"assumed knowledge\" that no one usually teaches.\nSo. How do update your fork? We need to be in the terminal and we're going to clone your fork.\n(One note: I'm using HTTP urls for GitHub in these examples, but you can use SSH urls that begin with git@ instead and everything should work.)\n```sh\n\ngit clone https://github.com/richgabrielli/Moya.git\n```\n\nNext we'll change directories to go into the forked repo:\n```sh\n\ncd Moya\n```\n\nOkay, so this folder is \"pointing to\" your fork. The name for this is \"origin\" and you can see it by asking git for all the remotes it knows about:\n```sh\n\ngit remote -v\norigin  https://github.com/richgabrielli/Moya.git (fetch)\norigin  https://github.com/richgabrielli/Moya.git (push)\n```\n\nOkay so we want to point your git to Moya's original repo. This is process is called adding it as a remote. We'll need to give the remote a name, and the convention is to call it \"upstream\".\n```sh\n\ngit remote add upstream https://github.com/Moya/Moya.git\n```\n\nNow verify that both origin and upstream are printed when you run git remote -v.\nAlright so now all you have to do is pull upstream changes from Moya and then push those exact changes to your fork (remember, everything you've typed into the terminal operates on your local git, not the remote fork). So we can pull changes from Moya and push them to your remote with the following two commands:\n```sh\n\ngit pull upstream master\ngit push origin master\n```\n\nAnd that should do it! \nOne word of caution: it's really important that your fork's master branch only ever has commits in it that are also in Moya's upstream master branch. All you need to do to avoid problems is: always work on branches. Whenever you start new work, pull the latest from Moya's upstream and then check out a new branch:\n```sh\n\ngit checkout -b my-new-branch-name\n``` \n\nI hope that helps \u2013 let me know what I can clarify. Welcome to the project, by the way! . They're both good! They're good posts Steven.. Certainly. That command creates a new branch called my-new-branch-name and then checks out that branch. You can do the same with the following two commands, which you'll see sometimes in documentation or tutorials:\n```sh\n\ngit branch my-new-branch-name\ngit checkout my-new-branch-name\n``` \n\nOn a higher level, working on features or fixing bugs generally follows the following steps:\n\nCheckout the master branch.\nPull changes from the upstream's master branch.\n(Optionally, push those changes to your fork's master branch, but I always forget.)\nCheck out a new branch to do your work on.\nDo your work, commit it.\nPush your branch to your fork, then open a pull request.\n\nI do this on open source projects, as well as projects for work.\nSo what's the point of all this? Well, a master branch is a kind of \"source of truth\". You could say that it's good hygiene to keep your fork from having commits in it that aren't in the upstream master. You can read more about how to use branches to work on features in this really great blog post.. Hmm, yeah I'm undecided here. I think there was once a reason to have the Endpoint type be generic but it's beyond me now. I've looked through Eidolon and can't find any use of the generics, and there's not any member in the Endpoint type that even references the generic. \nSo on philosophical grounds, I think this PR is good. However, it's hard to say what the impact could be for the larger community. Additionally, there's code churn to be concerned with; this is a big change and I don't want to give the community a bunch of work to do without having a concrete benefit in mind. I mean, it's not a lot of work to migrate, but it is work, and it is a breaking change, so we'd need to roll this into Moya 11.0.\nSo I'm kind of split on this. I like the idea of removing the generic for code hygiene reasons, but I worry about unintended impact and code churn. Hopefully others who are more active users of Moya than I am can chime in about how they feel about it. Hope that context helps. . That's pretty funny \u2013 looks like #434 was closed and merged into #556, but that discussion itself didn't lead to changes and we never reconsidered #434. After a year and a half, I'm glad we're finally wrapping that up!. If we already have a major release in the works, I would recommend prioritizing this change and shipping it in the next beta.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Hmm, interesting. Is the unit test in #1550? . Okay, that makes sense! I wonder if we could add asserts to alert developers if they are hitting this edge case? Make it fail loudly when developing, but silently when in production?\nFor these types of discussions around nuanced behaviour, sometimes a PR demonstrating the unexpected behaviour in a unit test can help explain the background. For community members who either haven't worked in plugin code yet or (like me) have forgotten how plugins work altogether :wink: To be clear, this issue is very well laid-out and explained the problem very well (well done @SD10, and well-spotted). Just wanted to mention a useful tool to keep in your toolbox. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Looks good! Right now, those files are excluded since they're not in the docs directories. But they do also have CN versions. I think the new Danger rule works as-is, since we modify those files a lot less often than the docs, but the rule could be expanded for checking for updates to Readme.md but not Readme_CN.md, for example. Not a blocker on merging, imo. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Nice work!. Opened an issue to improve Circle's docs: https://github.com/circleci/circleci-docs/issues/2072 Could be a good task if someone wanted to send them a PR to fix it.\nStill fighting with CI, incompatible Swift versions.\nmodule compiled with Swift 4.0 cannot be imported in Swift 3.2.3: /Users/distiller/Moya/Moya/Carthage/Build/Mac/Alamofire.framework/Modules/Alamofire.swiftmodule/x86_64.swiftmodule\nGoing to get things running locally first. . Okay, so I'm getting a different failure. Going to chock this up to stale cache, and I've triggered a rebuild without cache.\nBut, unit tests are still failing for me locally on Xcode 9.2. I've been away for a bit, can someone from @Moya/core-team confirm if they have passing unit tests on 9.2? Thanks!\nEDIT: Looks like it's just the request logger test that's failing, I'll fix. Not sure why it would suddenly change the format of the logging, maybe an Alamofire change? \ud83e\udd37\u200d\u2642\ufe0f . Yeah looks like flaky tests, but there were some that were reproducibly failing (the difference between status code and Status Code). I fixed them here: https://github.com/Moya/Moya/pull/1602/commits/ac320693e1482e76baf7074327d9cc3d8ce1438d \nCircle CI 2.0 may expose different levels of intermittent failing-ness to builds. Let's aim to get some tests passing and deal with the intermittent failures later? . Okay, it's back to failing when using cached Carthage dependencies. Maybe caching is different between 1.0 and 2.0. Or maybe somehow xcodebuild is getting confused about which version of Swift the cached dependencies are using. Or maybe it is using Swift 3.2. I have no idea and I have run out of patience \ud83d\ude1e \nI was hoping that this PR could be the first in the iOS community to move over to CircleCI 2.0 before they end their 1.0 service in August. I was hoping it could give a clear path for others to follow and would help alleviate an anxieties the community has around the transition. What a shame.. Looks like it is the test I changed in https://github.com/Moya/Moya/commit/ac320693e1482e76baf7074327d9cc3d8ce1438d Not sure the best next step from here. Maybe just remove the test for now?. @freak4pc good job getting tests passing! Looks like a Danger failure now... probably a difference between 1.0 and 2.0 Ruby installs? I would try a bundle update faraday or maybe bundle update danger.. I think part of it is that CI solutions (RIP BuddyBuild) don't place an emphasis on iOS testing. Which makes it hard to use, so no one uses it, so CI providers don't cater to it, so it's hard to use... Maybe fastlane.ci will save us.. Sounds good \u2013 great work! I'll trust you to take it from here, but I'm happy to advise. Just let me know what I can do to help.\nI also like Circle CI 2.0 in general, even if the transition hasn't been smooth. On a recent new Rails app I used Circle CI 2.0 workflows to deploy to Kubernetes. I really liked it but it's a very different level of abstraction. I think it's that disparity between abstractions that will make the transition from 1.0 to 2.0 difficult, especially for iOS developers not used to working with Docker containers. Lots of opportunities for blog posts!. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Aww jeez, just noticed there were other reviewers \ud83d\ude2c Sorry about that y'all, please feel free to amend with more feedback. . Thanks a lot for contributing to Moya! I've invited you to join the Moya GitHub organization \u2013 no pressure to accept! If you'd like more information on what that means, check out our contributor guidelines and feel free to reach out with any questions.. Great work \ud83d\udc4f Please keep us informed about your progress. . @SD10 There is no need to apologize! We can work through these things together as they come up \u2013 and things like this do come up, for every project. . Could this be something that Parameter Encoding solves? We have docs here: https://github.com/Moya/Moya/blob/master/docs/Examples/ParameterEncoding.md Basically you can provide a custom bit of code that translates the parameters of the endpoint into the request. Again, a bit of a clutch, but as pointed out this is an uncommon scenario. \nMoya should make common things easy and uncommon things possible, and a \"clutch\" in this case might be worth it for the sake of a smaller API surface area.. Good idea: https://github.com/Moya/Moya/pull/1659. Yeah so we currently have two Danger's running, which is totally okay:\n\nPeril, the server, runs on webhook events.\nDanger, the Dangerfile, runs on CI.\n\nIt's the second one that's causing problems. I looked and the email associated with the account Danger uses, @moyabot, doesn't have a verified email address. I'm taking care of that now and will retrigger CI when I think it's ready to go. . Good idea! I'll do that. I have retriggered the build. . @sunshinejr That's been added. . Haha, careful what you wish for I guess \ud83d\ude04 . I'll take a look next week and let you know what I think \ud83d\udc4d I trust that you'll all come to the right decision, though!. @pedrovereza I took a look at the plan you laid out, and I think that makes sense \ud83d\udc4d. I don't see any reason this wouldn't work \u2013 I'd want to make sure we have a unit test but yeah, sounds like a great idea \ud83d\udc4d. Does that method throw? I agreed that would be ideal. . These are integration tests that actually hit the network (to ensure that Moya can, and does). I had one test failure because my home internet was being slow, so I figured bumping up to 10 seconds was prudent. \n. I definitely wanted to make it a struct, but I couldn't send it on RACSubject since it \"does not conform to AnyObject protocol\" :(\n. We don't need ReactiveCocoa if we don't have the Moya/Reactive subspec.\n. Think I might move to waitUntil for all necessarily asynchronous tests, instead of toEventually.\n. It has a version that does that, too. \n. I just went a bid overboard. Was originally planning a more complex test. Might be worth correcting. \n. Very strange! The Endpoint initializer has default values for those two parameters \u2013 was this not working for you? \n. Nice \u2013 didn't know you could use commas to delimit a list of case statements. I've been using fallthrough \u2013 this should clean up my code a bunch!\n. I like this, but the variable name didn't make it immediately obvious how this was working. What do you think about renaming lazy to closure or something similar? \n. Hmm. Maybe we can rethink this a bit. I'm really OK with dropping support for all non-lazy sample responses. Maybe instead of adding to the enum, we can replace the sampleResponse property on Endpoint with a closure that returns a sample response. Thoughts? \n. cancelled\n. cancellable\n. Awesome :+1:\n. *cancelled\n. Since we're immediately cancelling, is the timeout: 3 necessary? I think it uses one second as a default, which would be cool to stick with unless there's a reason not to. \n. Same\n. Same too :)\n. Perfect. \n. Cancellable I think? \n. I think Swift's implicit initializers mean you don't need this at all. \n. Do we care about cancelling things more than once? Probably not. I'd rather not expose state anyway :)\n. So, this is tricky to test. The disposable will invoke its block when the subscription is ended, which is :+1: However, when you cal disposable.dispose(), that means that the subscribeError subscription is now disposed and will never be invoked. \nThis is really really hard \u2013 the request is cancelled after its signal is not subscribed to anymore, which is behaviour on top of the regular MoyaProvider. In practical use, no one using the RAC extension wants to know if a request was cancelled; it has only been cancelled because they no longer care about it. \nI think what we should test is that after disposing of the subscription, the waitUntil times out and done() is never invoked. Thoughts? \n. This is very smart. \n. Actually, you know what? Just leave them. They're all in the other files, too, so I'd rather make them consistent in the same commit. \n. Opened an issue to remove them later: https://github.com/ashfurrow/Moya/issues/134\n. Excellent catch. Will update. \n. Hmm. Setup is really for internal development, which someone is totally able to do with or without Carthage. Dunno that it needs to be here though. \n. Ah, I see that. Makes sense. \n. Add your github username! Give yourself credit!\n. I'm still new to RxSwift \u2013 could you describe the difference here? \n. Cool.\n. @alcarvalho I think this seems more accurate to the intention of the test, but please do let me know. \n. Nah, no problem! I had to look it up, too. dispatch_release isn't even exposed in Swift. \n. Since we're going to make this a change to 3.0.0, we should keep this line the same so people still using 2.x can rely on the changelog. \n. Do you think it could be valuable to use the credentials when stubbing a request, too? I can't really see how, but wanted to see if it was something we might want to add. \n. Looks great! What do you think about changing the parameter to newParameterEncoding so we can avoid confusing it with the instance variable?\n. Oh, this is smart. So this is not a breaking change, then? Existing users won't need to change any code? \n. Smart. \n. Hmm. I'd want to be sure that we're not breaking semantic versioning. Just to be safe, I'll try using your branch on our app. It uses it thoroughly, so if we don't run into issues, I don't expect others will either. I'll get back to you tomorrow :boat: \n. Should use [weak self] here. \n.  That's a really great point! \n. These probably don't need the explicit -> Void, do they? They could use some descriptive comments though. \n. Let's not use the word \"print\", since a logger could do anything. A better comment could be:\nswift\n// Log network request.\n(Note the space after the // and punctuation \u2013 it's super not a big deal, but I'd like to keep it consistent. Goes for the other additions to the file, too.)\n. Don't need self. in this scope. \n. I really like your implementation here. One suggestion: where we are printing out multiple lines, does it make sense to include the same preamble on each line, when it's for the same request? What if we had something like:\nswift\nlet requestOutput = String(format: \"%@: [%@] Request:  %@\", loggerId, date, request.description)\nprint(requestOutput)\nAnd then later, had something like:\nswift\nlet requestHeadersOutput = String(format: \"        Request Headers:  %@\", loggerId, date, headers)\nprint(requestHeadersOutput)\nDoes that make sense? \n. We could make this struct have a verbose property that defaults to false in its initializer, which could silence things like the headers and body stream, body stream, and response data. I don't know \u2013 I've never written a network logger before :sweat_smile: Thoughts?\n. Yup! I don't think we need to go overboard \u2013 people are free to write their own \u2013 I'll leave it up to you. \n. Yeah, well if we aggregate the log output anyway, as discussed, repeating the preamble in the same string seems superfluous. Again, up to you! \n. Maybe something like...\nswift\nplugins.forEach{ request = $0.willSendRequest(token, request: request) }\nDoes that make sense?\n. You can drop the let here. \n. Why don't we overload this method with an identical one, except that it doesn't return a request? That way if the function doesn't need to modify the request, it can just omit return and let the type inference of Swift handle it? \n. I hadn't thought of that, actually. Good point. If the request can be modified in-place, may as well get rid of the return value. \n. I don't think the pod file needs to specify a specific version \u2013 using the ~> 4.0-alpha.1 syntax will let people pick whichever alpha they want. I think this specifier should be added to the Demo project's Podfile, though.\nrb\npod 'ReactiveCocoa', '~> 4.0-alpha.1'\n. Ah, I see. Well, I'd still like to avoid binding to a specific version. Can we still use \"~> 4.0.0-alpha.3\" here, to accommodate for a 4th alpha?\nThen again, if the 4th alpha itself has breaking changes... It might make sense to keep this as you have it. Suggestions, @orta? \n. Cool. \n. \n. This could be rolled into the existing request function with default parameter value. \n. But I suppose that would be a breaking change. \n. Yeah, breaking changes are fine with me as long as our next version is a major release. As long as we avoid braking semantic versioning, I'm ok with bumping our versions however makes sense for us. \n. Hmm, good question. I've not compared enum cases in Nimble matchers before. I looks like a question others have had. If you want, take a stab at one of the solutions @jeffh suggests there \u2013 I can lend a hand to get these working, too. \n. Where there were a better way to structure this function, but I don't think there is. Is it useful to developers using Moya, or just us when testing? Either way, I think it might look cleaner inside an extension. \n. Agreed, this function works great. Moving it to the test target sounds great too, we can always move it back later. \n. :+1: \n. Let's use one initializer with nil as a default value for the parameter? \n. I think the Cocoa convention would make this NSError \u2013 I know it looks weird, but I think it makes sense to adhere. \n. lololol\nWell then. \n. yeah, this will be in our next major release anyway\n. Something like https://github.com/Moya/Moya/blob/master/Source/ReactiveCore/MoyaError.swift ?\n. Swift 2 will infer the raw values for enums with underlying String types. So we can use this:\nswift\ncase GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH, TRACE, CONNECT\n. :grimacing: \nThe crash operator, eh? Well, I'd definitely want some kind of comment explaining that. Maybe we could coalesce to something instead of force-unwrapping? GET maybe? \n. ya rly \n. I just don't trust Alamofire not to change something :stuck_out_tongue: Maybe coalesce to GET? Dunno. Whatever.\n. Could we make our enum use an underlying type from another enum? Like AF's?\n. Oh hey, you're right! \n. These two methods make me feel a bit weird, since they don't do anything but should. I realize it's a bit of a chicken-and-the-egg problem :hatching_chick: Is this what @wangshengjia was talking about with calling resume manually?\n. Makes sense!\n. Hey! Sorry for the confusion, but this should go in the \"Next\" section, since 5.0.0 is already released. Does that make sense?\n. Hmm, I'm not in love with the idea of changing Alamofire's singleton's state, but I'm not sure I see another option.\n. This would go up in the Next section, eh? \n. But in a protocol extension, if we only have a reference to the type as TargetType, won't this always execute this instead of the function specified in the actual type?\n. I think we should probably just get Alamofire to create the NSURLRequest, then call mutableCopy on it. Does that make sense? \n. Makes sense, thanks for the clarification. \n. Same problem as above here, though I really don't like the idea of allowing developers to bypass this anyway. Moya has a strong opinion on unit testing: it's a good idea and everyone should do it. If someone wants to add something like this to their TargetType type, that's fine, but they should feel bad about it :stuck_out_tongue: \n. Is it a breaking change? No one could have been relying on the underlying value of our enum because it didn't have one, and we've kept the name the same, so existing extensions anyone had would be fine. Thoughts?\n. I suppose if someone was overriding the Endpoint class or otherwise relying on access to the underlying Alamofire functionality... I just don't want to release a major version unnecessarily. \n. Yeah, internal means no one could have been using it. I vote to remove the \"breaking change\" warning. \n. Could you expand on the use of .resource here, I'm not sure I understand it or ServiceType but I'd like to know more!\n. Are these two different to demonstrate flexibility? I like flexibility, and this looks cool, but I think using the syntax from ZenResource for all of these properties (except path) would help encourage users to follow that pattern where they can. I like opinionated code :wink: \n. OK, that makes sense, thanks. I guess I was thinking of something like this:\nswift\nenum StructTargetType: TargetType {\n  public var path: String {\n    switch self {\n      case .Struct(let t): return t.path\n    }\n  }\n  // and so on\n}\nSo that the struct-based approach totally piggy-backed on the existing enum structure, instead of having the existing enum structure conform to something new. \nThat was totally just my interpretation, it may not be possible. You've played with this more than I have :smile: \n. That's a great idea!\n. If you don't need an enum's associated values, you can also just use case .UpdateUser: and it should work :+1: \n. Patch eh? Nice, one of my favourite HTTP obscurities. For the sake of keeping the code familiar, do you think we should use a more typical put instead? \n. Could be worth linking to the auth docs for further reading on the CredentialsPlugin.\n. Ah, yes! Must've missed it. \n. ah, oops >.<\n. The new function looks great! What do you think about replacing the body of this one, the fold function, with:\nswift\nreturn request(target, queue: nil, completion: completion)\nAnd just piggy-back on the new function? \n. Sounds right.\n. I was thinking, if we make this internal, then we can use @testable import Moya in our unit tests and avoid making this public. Thoughts?\n. Might make sense to remove the trailing ### here, to be consistent with the other docs? \n. lol what\n. Turns out bundle update cocoapods didn't work because cocoapods-deintegrate still had a dependency on 0.39. \n. Cool, I'll remove it but I'm going to wait for \ud83c\udf4f to push the commit, so I don't have to wait for CI twice. \n. You mean Circle might not set the env variable until after it runs the tests? I put this here just for testing, so it would fail fast.\n. I've roiled back to before I started messing about with env variables, this branch could be good to test https://github.com/danger/danger/pull/292 when ready.\n. \ud83d\udcaf\n. This is smart, good thinking. \n. This makes sense to me, since \"failing on empty data\" was something Moya was doing differently from Alamofire, so this brings us more in line with their conventions. \n. Ah, good point. I added a note to the readme but didn't think of danger.systems. \n. Yeah, this PR really focuses on splitting existing code out. I think if we merge as-is, then we should open an issue to thoroughly document stuff for Jazzy. \n. The wording here confused me initially (using succeeded to indicate that an error was successfully caught). What do you think about changing this variable to be something like mapJSONFailed or similar?\n. Well done with including the call-site parameter name, I would've forgotten that.\n. Good idea! \n. Hmm, what if we replaced this with a check for a nil URL? Something like a guard that elsees to a fatalError, then we can avoid the force unwraps? \n. Cool, much better! What do you think about this:\n``` swift\nguard let url = target.baseURL.URLByAppendingPathComponent(target.path),\n      let stringURL = url.absoluteString else {\n    fatalError(...)\n}\nreturn Endpoint(URL: stringURL, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n```\nThis keeps the \"happy path\" unindented, what do you think? \n. Huh! It must not be an optional. Try this?\nswift\nguard let stringURL = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString  else {\n    fatalError(...)\n}\nURLByAppendingPathComponent should return a non-optional URL. Try it out and see if you can get it to work, let me know if I can help :+1: \n. In cases like this, where there's nothing in the parens, you can use case .Branches without the parens at all.\n. Oops, missed these when I re-added the ReactiveCocoa tests. \n. Do these changes make sense to you, @justinmakaila? I don't want to do something non-idiomatic to ReactiveSwift.\n. I personally prefer if let _ = as well, wasn't sure if it was just me \ud83d\ude05\n. Since this code is a demonstration of how not to do things, adding a comment like // This won't work! above this line might be a good idea. Thoughts? \n. I think #if !COCOAPODS is fine, personally. \n. Looks like this else if block looks very similar to the one above it, it's just the progressCompletion block that's called here and not above. Do you think there's a better abstraction we could use to avoid the repetition? \n. For example, we could create a protocol with the required methods from both DataRequest and Download Request, and then extend those types to conform to that protocol. Then our conditional if let could cast to the protocol. What do you think? \n. Makes sense, can you open an issue to review all our class funcs? \n. For context, this was originally written as a function, since it returns a new manager instance every time (rather than an identical closure). We can totally revisit that though.\n. This will need to go above the 8.0.0-beta.3 section.\n. I'm wondering if it makes sense to have a scheduler parameter instead of a queue one, to keep in line with the RxSwift semantics. This steps outside the Alamofire norms, but I think that's okay. What do you think?\n. Fantastic example.\n. This could be done with reduce, like:\nswift\nlet result = self.plugins.reduce(result, { resultSoFar, plugin in\n  return plugin.processResponse(resultSoFar, target: target)\n})\nOr something similar. Not sure which reads better. Thoughts?. Documentation is :100: Thanks!. Since we're adding to the PluginType protocol, won't this be a breaking change? . It is not, good catch. . I'm leaning towards having the provider stay weakly captured and producing an error if its been deallocated. I don't think it's the responsibility of the request() function to retain the provider, that falls on whoever is using it. And if the provider gets deallocated before the request completes, an error makes sense. As you said, users can work around this if they need to, so it provides the most flexibility. . I can't recall, could someone check in on that and get back to us? Really swamped right now \ud83d\ude2c. This is totally fine, though I will point out that if two different Endpoints both fail to produce a urlRequest, then they would be \"equal\". I'm sure that's fine, especially since it's consistent with hashValue. The only consequences would be using an Endpoint as key in a dictionary, or in a Set. I think it's worth a comment, but otherwise this is totally \ud83d\udc4d. This is good \u2013 can we also add a test that makes sure the error thrown is correct?. Nice.. Let's put this up under the enum struct and typealias, above the initializers, to be consistent with the rest of the codebase.. Can you clean up indentation here?. We should have an explanation in comments for why the force-unwrap always works.. \"major\" doesn't quite capture what I think you're trying to say here. I would say \"persistent\" or \"permanent\" maybe? We might want to add that they are protected as well.\n\nWe maintain two permanent, protected branches: master and develop.. It's such a shame that HTML dictionary lists never became widely used enough to be in the markdown spec.. Not to be the \"you should write a blog post about this\" guy, but you should think about writing a blog post about this!. This is a good start, but we should be more clever. For example, if someone does update both docs, this warning is still triggered. What do you think about this instead?\n\nrb\nen_docs_modified = git.modified_files.grep(/docs\\//).empty? # Necessary to exclude `docs_CN` from the grep.\ncn_docs_modified = git.modified_files.grep(/docs_CN/).empty?\nif en_docs_modified ^ cn_docs_modified\n  warn(...)\nend\nThis uses the exclusive-or (xor) operator, which is true if only one or the other is true (but not both). This way, if someone: \n\nupdates both, the xor will be false\nif they update neither, the xor will be false\nupdates either one but not the other, the xor will be true\n\nI think that makes sense. What do you think?\nEDIT: you could also use Ruby's special regex syntax, which I found out about last week and am now using everywhere. They help avoid escaping slashes inside regexes:\nrb\nen_docs_modified = git.modified_files.grep(%r{docs/}).empty? # Necessary to exclude `docs_CN` from the grep.\ncn_docs_modified = git.modified_files.grep(%r{docs_CN}).empty?\nif en_docs_modified ^ cn_docs_modified\n  warn(...)\nend. I like this idea a lot! But I'd suggest we should go with a more generic, non-food celebratory emoji. I took and CocoaPods really cornered the market with the rainbow, how about we use \u2728? \nI would also make sure to include both the emoji in the Contributing.md as well as the shortcode, which you'll need to enclose in backticks. So something like:\nmd\nIf you made it all the way to the end, bravo dear user, we love you. You can include the \u2728 emoji in the top of your ticket to signal to us that you did in fact read this file and are trying to conform to it as best as possible: `:sparkles:`. ",
    "michaelmcguire": "Can you make the MoyaProvider generic and have it take an enum as a parameter? Then you can verify the endpoint definition take one of those enums and the request method take one of the enums. The user of the library would still need to associate each enum value with an endpoint... Not sure best way to do that. \n. I didn't want to get into a battle over it :v:.  At this point, I agree that if you're using the CocoaPods template for creating a pod with example/demo project, it is a pain to get Carthage support working if you have dependent libraries.  I am planning on submitting a separate PR as requested, just have gotten a bit busy! :smile_cat: \n. @ashfurrow That was definitely not directed at you!  I thought language like \"really minimal work\" and \"extreme simplicity in comparison\" was getting into a CocoaPods vs Carthage battle :smile:, but perhaps I am just too sensitive.\n. Not a problem at all! From Twitter could tell you've been pretty busy. \n. Not exactly sure what you're referring to here?  Are you thinking of not having the struct at all and instead just returning a closure that could be executed? \n. ",
    "paulyoung": "``` swift\nstruct Endpoint {\n    let URL: T\n}\nstruct MoyaProvider {\n    let EndpointType: T.Type\n    let endpoints: [Endpoint]\n    func request(URL: T) {\n        println(URL.toRaw())\n    }\n}\nenum RdJpg:String {\n    case ThreeHundredByTwoHundred = \"http://rdjpg.com/300/200/\"\n}\nenum Foo:String {\n    case Bar = \"http://foo.com/bar\"\n    case Baz = \"http://foo.com/baz\"\n}\nlet rdJpgEndpoint = Endpoint(URL: RdJpg.ThreeHundredByTwoHundred)\nlet fooEndpoint = Endpoint(URL: Foo.Bar)\n// Valid providers\nlet rdJpgProvider = MoyaProvider(EndpointType: RdJpg.self, endpoints: [rdJpgEndpoint])\nlet fooProvider = MoyaProvider(EndpointType: Foo.self, endpoints: [fooEndpoint])\n// Invalid providers\n//let rdJpgProvider = MoyaProvider(EndpointType: RdJpg.self, endpoints: [fooEndpoint])\n//let fooProvider = MoyaProvider(EndpointType: Foo.self, endpoints: [rdJpgEndpoint])\n// Valid requests\nrdJpgProvider.request(RdJpg.ThreeHundredByTwoHundred)\nfooProvider.request(Foo.Bar)\nfooProvider.request(Foo.Baz)\n// Invalid requests\n//rdJpgProvider.request(Foo.Bar)\n//rdJpgProvider.request(Foo.Baz)\n//fooProvider.request(RdJpg.ThreeHundredByTwoHundred)\n``\n. You could get better type safety by making theenum`s conform to a protocol like this:\n``` swift\nprotocol EndpointURL: RawRepresentable {\n  class func fromRaw(raw: String) -> Self?\n}\nenum RdJpg:String, EndpointURL {\n    case ThreeHundredByTwoHundred = \"http://rdjpg.com/300/200/\"\n}\n```\n. Altogether now:\n``` swift\nprotocol EndpointURL: RawRepresentable {\n    class func fromRaw(raw: String) -> Self?\n}\nstruct Endpoint {\n    let URL: T\n}\nstruct MoyaProvider {\n    let EndpointType: T.Type\n    let endpoints: [Endpoint]\n    func request(URL: T) {\n        println(URL.toRaw())\n    }\n}\nenum RdJpg:String, EndpointURL {\n    case ThreeHundredByTwoHundred = \"http://rdjpg.com/300/200/\"\n}\nenum Foo:String, EndpointURL {\n    case Bar = \"http://foo.com/bar\"\n    case Baz = \"http://foo.com/baz\"\n}\nlet rdJpgEndpoint = Endpoint(URL: RdJpg.ThreeHundredByTwoHundred)\nlet fooEndpoint = Endpoint(URL: Foo.Bar)\n// Valid providers\nlet rdJpgProvider = MoyaProvider(EndpointType: RdJpg.self, endpoints: [rdJpgEndpoint])\nlet fooProvider = MoyaProvider(EndpointType: Foo.self, endpoints: [fooEndpoint])\n// Invalid providers\n//let rdJpgProvider = MoyaProvider(EndpointType: RdJpg.self, endpoints: [fooEndpoint])\n//let fooProvider = MoyaProvider(EndpointType: Foo.self, endpoints: [rdJpgEndpoint])\n// Valid requests\nrdJpgProvider.request(.ThreeHundredByTwoHundred)\nfooProvider.request(.Bar)\nfooProvider.request(.Baz)\n// Invalid requests\n//rdJpgProvider.request(Foo.Bar)\n//rdJpgProvider.request(Foo.Baz)\n//fooProvider.request(RdJpg.ThreeHundredByTwoHundred)\n```\n. Edited the above to reflect that type can be inferred for valid request parameters.\n. I recommend adding some specs to assert your expectations when this is used incorrectly.\nIn the past I would do this with Expecta's .to.raise(); I imagine that Quick/Nimble's RaiseException is similar.\n. ",
    "roop": "Here is one possible solution:\n``` Swift\n// Defined in Moya:\nprotocol StringConvertible {\n    func toString() -> String\n}\nclass Endpoint {\n    let baseURL: String\n    let slug: T\n    init(baseURL: String, slug: T) {\n        self.baseURL = baseURL\n        self.slug = slug\n    }\n    func fullURLString() -> String {\n        return self.baseURL + self.slug.toString()\n    }\n}\n// So a user of Moya can write:\nenum Slug: String, StringConvertible {\n    case DoTaskOne = \"/do/task1\"\n    case DoTaskTwo = \"/do/task2\"\n    // Unfortunately, the following method has to be\n    // defined by all Moya users\n    func toString() -> String {\n        return self.toRaw()\n    }\n}\nvar endpoint = Endpoint(baseURL: \"http://example.com\", slug: .DoTaskOne)\nprintln(endpoint.fullURLString())\n```\n. Hey, looks like it's also possible to get rid of the toString() requirement:\n// Defined in Moya\nprotocol StringBackedEnum {\n    func toRaw() -> String\n}\nand then:\n// Code using Moya\nenum Slug: String, StringBackedEnum {\n    case DoTaskOne = \"/do/task1\"\n    case DoTaskTwo = \"/do/task2\"\n}\nPersonally, I like the StringConvertible way better, because the API contract is clearer there, methinks.\n. ",
    "orta": "This looks good to me :+1: \n. Looks cool!\n. :+1: \n. this looks coolllll\n. Cool\n. looks good to me\n. Alright!\n. zing!\n. to merge!\n. :+1: \n. you sure it doesn't need https:// ?\n. rock.\n. :sunglasses: \n. yeah\n. Yes, I've updated AlamoFire the 6.1 branch and added a CHANGELOG entry \n. can you give and example?\n. rockin, looks good!\n. yes, the closure makes sense\n. ( our API supports swagger, we definitely would like this ;) )\n. might not be that useful, perhaps this should be built into Paw as a plugin. \nhttp://luckymarmot.com/paw\n. https://github.com/lkuczborski/SwiftMoyaCodeGenerator from @lkuczborski does some of this\n. and for people who care about Swagger: https://github.com/luckymarmot/Paw-SwaggerImporter\n. Delegating that responsibility to  @ashfurrow :u5408: \n. I had debated building a provider.request(Identifier).get() that does default parameters, successful status code and toJSON. Which is basically the same each time.\n. I meant more like a shortcut for the request + .filterSuccessfulStatusCodes().mapJSON()\n. looks great\n. This looks good to me. :+1: \n. Yes.\n. What was the motivation for adding the pods?\n. kk\n. This should be closed. There's a way to do it without all the vending.\n. Plus CocoaDocs support isn't far off now, and that's automatic.\n. @neonichu / @kylefuller / @segiddins do we have something that can generate Cartfile.resolved from a Podfile.lock. I wouldn't expect the carthage team to build something similar, but is it something we can try? Looks simple enough.\nI don't think having two complete projects is a smart idea, two repos is even worse. As reasonable project owners we will probably have to re-write our project to support Carthage. \n. Why not have carthage run pod install?\n. We found a solution from the CP side that allows us to generate a single xcodeproj that makes a framework, it would be a command that generates all the necessary files for people that prefer build artefacts. \nSee https://github.com/CocoaPods/CocoaPods/issues/2885\n. Could be related to https://github.com/CocoaPods/CocoaPods/pull/2873\nWe had to delay a deploy because of this, but that was before this PR, unsure how stable that is\n. Would strongly recommend taking a look at the Eidolon source code to see if it has something that you're looking for.\n. :+1: \n. IMO cool, as long as 0 doesn't jump out of being synchronous \n. :+1: \n. implementation looks good\n. we don't need to submit to the app store, as it's an internal tool, I believe that beta 2 should have fixed the issues around deployment to app store.\n. Looks good.\n. Looks good.\n. Mergable on green. And we should announce on @ArtsyOpenSource\n. Mergable on green. And we should announce on @ArtsyOpenSource\n. https://github.com/Quick/Quick/pull/289\n. :+1: \n. could do a submodule?\n. :+1:  thanks\n. To my knowledge, no-one has stepped up to keep the Carthage/RAC branch in sync, we'd welcome a PR making sure it supports the latest from you.\n. CP can do the submodule fine too :+1: \n. If you're thinking about it, then it should probably be done. Given that /moya isn't free, you might want to consider if you can think of other sibling projects that could go with it.\nThe distinct repos sounds like a bunch of faffing though to me FWIW.\n. Would probably be a pretty reasonable CP plugin for lib authors wanting to make binary releases.\n. >  Send a PR to CocoaPods/Specs to change the git URLs to the new endpoint. (Right?)\nYep, the default redirects will work, but not forever.\n\nAny suggestions on a name?\n\nMoyaAPI, MoyaNetworking, nothing strikes me as awesome. Will ask @moya if it can be transferred.\n. It's common to check in the Pods directory for libraries, so this is duplicating all of that too: https://github.com/ashfurrow/Moya/tree/master/Demo/Pods\nPersonally, I'd remove both of them, and in the README tell people if they want to demo it run pod try Moya.  It's a huge amount of additional files for a lib that's probably 6-8 swift files big in reality.\n. pod try https://github.com/justinmakaila/Moya/ will let you test. You need to add a working Podfile to the Example dir, this will probably do it.\n. Downside of that is pod try Moya doesn't work\n. It will go to the Moya podspec, find it's repo, download it and look for an xcodeproj + podfile. Separating the demo repo from the lib repo would make that tough. \n. Not right now, https://github.com/CocoaPods/cocoapods-try/issues/38\n. I don't think moving the example to a separate repo is a good idea, other libraries don't do this. \nI'd move the Pods and the Carthage-whatever directories into .gitignore then add a note in the README that if you want to run the example you have to go to the example folder and run pod install or carthage install. Or for the no-effort approach pod try Moya. Again, this isn't some mega-huge library with thousands of moving parts.\n. might be better to try have both in one image (roughly chucked together)\n\nhttp://cl.ly/0E0u3H422C3F/moya-front.sketch\n. this this is the direction we're after, I can spruce it up and give it some good arrows etc. I prefer the emoji.\n. :+1: \n. :+1: \n. Think someone needs to go into the folder and run a pod update since moya's update, there's a more modern issue around this, but it's basically this issue: https://github.com/CocoaPods/CocoaPods/issues/1623\n. I'm willing to bet that was done after tagging\n. <.<\n. ^ looks good, can do a make release task?\n. I mean, your method looks good, we can automate it update and then to run pod update in the Moya dir via a make task :+1: \n. Yeah, afraid this is a major version break.  Two options: \n- Make a backwards API compatible function?\n- Save the PR till you're ready for a v3\n. Yep :+1: \n. I'm not sure this is Moya's responsibility, object mapping in Swift is still painful and there's no obvious winner given there's a new one every day to back so we'd end up supporting a lot of different cases. I think @colinta's idea makes sense though, a separate pod that could act as a mapper.\nFWIW though we didn't find it difficult at all to build our own mapper that worked with function chaining.\n. It feels like things like this would make great separate pods, for example here's my simple Gloss + RxSwift extension for Moya - that could happily be it's own thing in a similar way.\n. Yeah, good spot @skywinder \n. Yep!\nGood thinking @skywinder \n. Gitter's tend to end up like Alcatraz's : https://gitter.im/supermarin/Alcatraz - people come in with  questions but no-one gives answers.\nNot to say that a slack doesn't have it's problem, or IRC; on CocoaPods we devs don't use the IRC so it's only usually for people who can help each other.\n. Here is our working build of Moya + ReactiveCocoa - which generates this lockfile\nruby\npod 'Alamofire'\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => 'https://github.com/Moya/Moya.git', :branch => 'swift-2.0'\nShould get you the right setup, if you have been using older references for these branches - you may need to pod update to get the latest commits on those branches.\n. BTW you can reduce test pod duplication by doing something like this.\n. Reviewed in Person - :+1: \n. It generates all three frameworks when you do github \"Moya/Moya\" - as a user, you can choose which ones to integrate this way:\n```\n~/d/i/l/moya_cart \u23db  cat Cartfile\ngit \"file:///Users/orta/dev/ios/libs/Moya\" \"internal_podspecs\"\n~/d/i/l/moya_cart \u23db  carthage update\n Fetching Moya\n Checking out Moya at \"e6a00bff2b51838e4449afac952b3937d1cfa6de\"\n xcodebuild output can be found in /var/folders/mk/gxhr550d5mbcv5s9_f61x84h0000gn/T/carthage-xcodebuild.uPEpwO.log\n Building scheme \"Moya\" in Pods.xcodeproj\n Building scheme \"ReactiveMoya\" in Pods.xcodeproj\n Building scheme \"RxMoya\" in Pods.xcodeproj\n~/d/i/l/moya_cart \u23db  ls Carthage/Build/iOS\nMoya.framework         ReactiveMoya.framework RxMoya.framework\n```\n. Right now that's not the case, but I don't see a reason to not make that behaviour default @ashfurrow ?\nPlus it keeps all documentation consistent, that's the behaviour you get from CP.\n. So you want the behaviour where you would always do @import Moya; and it would work fine regardless of which framework you've imported? This is totally doable using module_name in the rx/RAC Podspecs. Also makes it consistent with CP.\nI think it would generate three differently named frameworks for drag & drop but they would all all work with @import Moya;. Can't guarantee that Xcode allows the generation of the three frameworks with the same module name, but can be tested. \n. This is what I expected carthage behavior would be like based on this comment from justin :+1: \n. good to go on green.\n. We're waiting on https://github.com/Moya/Moya/issues/118 to merge for RAC 3 support\n. I definitely prefer the wording here.\n. will need a rebase, but good to merge from me\n. Closing, as I think this is sorted :+1: \n. Afraid not. It's heavy reliance on Swift's enum functions make it impossible to back port.\n. http://search.cocoapods.org/api/v1/pods.flat.ids.json?query=platform:tvos\ntvOS support requires someone with the latest CP rc pushing, so it's got a pretty slow adoption ( plus my plugin undermines it somewhat )\n. This is great work!\n. We've gone through all this before, and eventually found that this was the least-bad ways to support Carthage users without placing an unreasonable amount of extra work on people maintaining and improving Moya. We're not moving to separate repos and multiple xcodeprojects to keep up to date for a a file or two per sub-project.\nThe alamofire PR looks like a good idea\n. Most projects will \"just work\" with Carthage,which is why I made pod lib create work with it by default and it's likely that most libs that ship with support come from CP. Moya seems to have hit the point where it was too complex to do it that way. A lot of this is in https://github.com/Moya/Moya/pull/215- but I'm afraid I'm going to decline your request for more information, given my position on the CP team.\n. :+1:\n. Cool, this makes sense. :+1: - if it wasn't there you'd have got a fail before the map\n. This sounds right, it would have accepted Alamofire 3.0 as it came out today\n. :+1: This looks good\n. > We should also formalize the fact that after a merged PR \u2013 even for documentation or whatever \u2013 contributors get push access to the repo. It's briefly mentioned in the readme, but we can do better.\nI'd like to see a separate repo for that so that we can call it the \"Moya Community Onboarding\" or something similar\n. Yeah, this is better :+1: \n. Sure thing, hit me up when you get in to the office\n. Alright, so it looks like the watch isn't getting ReactiveCocoa/ReactiveCocoa.h - it's likely from this subspec not providing a watch/tvos reference to the source files.\nI did something like this for Artsy Authentication.\n. ahhhh\n. It might be worth doing what AFNetworking does and just not supporting manual installation, you need to have a lot of prerequisites set up for Moya, and the more useful interesting stuff can only really happen when you have a larger dependency graph, of which doing manually is just a waste of time.\n. Probably worth mentioning in the README too\n. Him, maybe clarifying that its 3 and above, rather than saying what isn't supported is a better approach \n. Creating whole repos, and all the required infrastructure for 1-2 files, then 1-2 test files is a bad method of organising code.\n. They've already got something like this on their todo as Package Flavours.\n. Like all things in programming, It's a trade off, there's additional complexity in maintaining a lot of redundant resources in order to keep things going as they are now.\nEnsuring that multiple projects are now green on deploys becomes harder, might need a meta-repo to allow for editing all of the files at once, changes to one might not propagate to the others via multiple PRs. This is a community project, so those tradeoffs don't have to be the ones that I think are valuable.  \nSwitching to separate repos for all of these strongly correlated projects comes with lots of downsides, but if one of the upsides is that it can work with the current build of SPM before the add flavours, then maybe it is worth the tradeoff for someone to build and ensure all of the infrastructure is in place to simplify the extra work for contributors.\n. > The core value of Moya lies in its endpoint modelling types, and if the extension subspecs went away tomorrow, we would be no worse off\nThat's idealistic, not realistic, I bet almost everyone who maintains and contributes to this project uses RAC/Rx with Moya. I had to argue that it was worth building a non-RAC version at all at the start. Again, I'm not the one who would be doing the work maintaining and keeping this all running, so it's not my neck on the line here.\n. RxSwift has done this without much faffing\n. #361 deprecates this\n. :+1: \n. It should probably be cool to use ~> 2.0 - assuming @kzaher keeps to SemVer\n. That might be the core part of the issue, perhaps it has to escape the array in order to be printed?\n. Can you make us a pull request?\n. :+1: - last year I mentioned that the current structure of Moya might not be able to handle our largest iOS project, with these ideas, it should be able to I think\n. @Moya/contributors does someone want to try continue work here? \nThe last ~10 PRs were merged with a red CI status\n. Awesome work @ealeksandrov \ud83d\udc4d \n. ^ Looks like Swift-lint is running once per target, might want to have an option there\n. You may want to consider generating the Moya source code from your API similar to this: https://github.com/lkuczborski/SwiftMoyaCodeGenerator - you can't really get the advantages of Moya without their being defined types in code \n. Feels good, will try and look at the README thing on the plane\n. OK, v2 is ready\n. Aye, think it's worth shipping a 2.3 dupe of current Moya, one the Rx deps have them, then moving to 3.0\n. Maybe the last stable release?\n. \n. You probably want this too,\n```\nMake a note about contributors not in the organization\nocto_client = env.request_source.client\nunless octo_client.organization_member?('moya', pr_author)\n  message \"@#{pr_author} is not a contributor yet, would you like to join the Moya org?\"\nif modified_files.include?(\"*.podspec\")\n    warn \"External contributor has edited the Podspec\"\n  end\nend\n```\n. To encourage better testing strategies \ud83d\udc4d \n. I wonder if the Xcodeproj needs updating?\n. > Okay cool. The only CI failure is a missing changelog, so I'm going to merge (and then submit a PR changing that \"no changelog\" error to a warning...)\nMight want to check for App-level changes before failing instead\n. Sure, seems fine with me \ud83d\udc4d \n. It might be worth adding Danger's CHANGELOG as a fail back, even in this case it was missed, but the fail was legit:\n\n. I took that image from the PR: https://github.com/Moya/Moya/pull/483#issuecomment-230908591 - it must have got fixed on a rebase or something\n. Ah, yeah, on Danger we check for any lib files:\nruby\nhas_app_changes = !git.modified_files.grep(/lib/).empty?\nhas_test_changes = !git.modified_files.grep(/spec/).empty?\nYou could do the same for Source and Demo/Tests:\nruby\nhas_app_changes = !git.modified_files.grep(/Source/).empty?\nhas_test_changes = !git.modified_files.grep(/Demo\\/Tests/).empty?\n* disclaimer, I'm not great with regexes\n. Yep\n. IMO, think the colours too - can work with https://www.stickermule.com/products/clear-stickers \nMoya logo has too thin lines to pull off the ones CP/Artsy use \n. Agree re:square\nRe: full logo might want type e.g.\n\nspecifically done bad on purpose to not think of design \n\nI'm voting square if clear\n. I used a shared google spreadsheet, but forms can work too \ud83d\udc4d ( sheets made it easier to me to ask for edits etc )\n. My only known hack here doesn't work http://www.tizag.com/htmlT/bgcolor.php - https://gist.github.com/orta/62febeb573df8e52965a5af7ddf5ba17\n. Images are the best way to go\n. though the purple is massive, and the rest are the right sized, would recommend throwng in image optim too \n. Better fix all them swiftlintsssssssssssssssssssss\n. but nah, everything looks good from me.\nOne option for improvement though. You could do all the images at 2x size, then set the width/height to be half that. Then you have retina images. This is how I do it in most of my web projects.\n\nwith \n\ninstead of this at full size:\n\nwhich is massive, but scaled inline here\n. It's a free TIL ;)\n. Yep - that should do it\n. \ud83d\udea2 \n. Yep\n. Looks like this ran through Danger fine \ud83d\udc4d \n. sounds like this is definitely a major version bump then \ud83d\udc4d \n. Maybe it'll be better on CI\n. Dang, an extra 35m to run on each CI run. Wonder if it's worth adding Jenkins just for doing this instead of putting it on the real CI.\nAnyway, we know master is broken, this just validates it. Happy to either rebase with master isn't broken.\n. I'd be OK with just doing iOS, if we can - once some of the other PRs are in, I'll look at the docs to see if I can do that\n. \n. \nran it from scratch on a fresh computer - all \ud83d\udc4d \ud83c\udf4f \n. Some examples:\n- https://github.com/CocoaPods/CocoaPods/blob/master/.github/ISSUE_TEMPLATE.md\n- https://github.com/danger/danger/tree/master/.github\n. Are you using a swift-version file? https://github.com/CocoaPods/CocoaPods/blob/master/CHANGELOG.md#110rc2-2016-09-13\n. Would recommend using --no-clean to take a look a the resulting folder with lint, double check all the versions of alamofire/moya are what you expect them to be - as a StreamRequest does exist inside head Alamofire\nYou can also clean your pod cache for this listing stuff with pod cache clean\n. Yep - great work @BasThomas - this is a good start, and if people want to build off it, send more PRs \ud83d\udc4d \n. \ud83d\udc4d \n. On eigen we did - https://github.com/artsy/eigen/blob/master/circle.yml#L36-L39 - which I think has basically negated the problem for us. \nHowever, I'm totally chill with this too - key to all of it is being extra aware of xcode faffing. \n. Turns out we do have a 15s wait:\ndef open_simulator_and_sleep(uuid)\n  return if uuid.nil? # Don't need a sleep on macOS because it runs first.\n  sh \"xcrun instruments -w '#{uuid}' || sleep 15\"\nend\nif it's still being flakey - this is a good call IMO.\n. considering the scope of your changes, I think it's fine to accept that the Danger rules may not be fine for this run. Maybe just outright remove them all, it's only going to cause confusion and  break backwards compatibility again and again. It's not a bad idea, but should only really happen post ABI compatibility. . A deploy isn't contingent on pushing to master - just the tag + commits, so\namending the script to put you in a place to send a private seems a good\nfirst step?\nOn Mar 4, 2017 12:49 PM, \"Scott Hoyt\" notifications@github.com wrote:\n\nWell, I suppose on the other hand, as long as we can't force push, then we\nwon't be able to do anything absolutely irreversible. It just might be a\nmajor pain to do so...\n\u2014\nYou are receiving this because you are on a team that was mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/994#issuecomment-284124706, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAC_jswdyUaejOlcBq5KHtllS9FD6AfVks5riN9AgaJpZM4MPIc3\n.\n. We just merged it in on CocoaPods - https://github.com/CocoaPods/CocoaPods/pull/6745 - I can't really compete with GitHub on resources for this kind of project, so I wouldn't wait on peril. Might be time to make a website?. If you're thinking of adding the full process - consider using http://keepachangelog.com/ or using the standard in the JS world: https://github.com/semantic-release/semantic-release#default-commit-message-format. This is \ud83e\udd47 . This is quite similar to what we're thinking of doing at  Artsy https://github.com/artsy/eigen/issues/2444 (master is always deployable, dev is allowed to be unstable ). The rule is in there: https://github.com/lucas34/Moya/blob/3d61adc670a9e200ea338a2e16e86bf099ff800c/Dangerfile#L46-L48. Microya!. Nice work! - I think we should link to Microya from the README in here?. I'd recommend only having it run on new or modified files instead of every text file when there's a single change - easier to get buy in from whoever is working on that file. 0.0\n. I think this is very fine, I also think this is why modularization of codebases is a big :+1: - because we can keep these tests solid and out of our daily codebase.\n. nice test\n. makes sense here, wouldn't want this in apps though :\ud83d\udc4d\n. best outright kill all these comments :+1: \n. :+1:\n. :+1: \n. :+1: \n. I don't think ~> 4.0.0-alpha.3 will do what you want, I think it will just equals. Yeah, probably have to do the exact version, given that they've broke API compat each time, seems logical to presume that in the future.\n. :+1: good stuff\n. :+1: \n. > The original source of this document can is at\n\nThe original source of this document can be found at\n. this is weird, are you sure you're using CP 1.x?\n. Ah, yeah, you're not\n. This moved into the Podfile: https://guides.cocoapods.org/syntax/podfile.html#install_bang\nSo this wasn't doing anything, install! 'cocoapods', :deterministic_uuids => false if you need it. You may not need it.\n. Cool, then other than this - it's good to ship\n. You might find life easier by moving this last given the \"finding the PR issues\"\n. Danger should look at runtime, via the Circle API to infer whether circle thinks its a PR\n. Pretty sure Danger on Circle expects that it might be not set yet, and does the API call, so if she's later in the process, there's a higher chance of that hooking up\n. Ah, yeah, this is a bug in Danger - https://github.com/danger/danger/blob/master/lib/danger/ci_source/circle.rb#L25\nNeeds to have that top check for the PR_ID removed\n. smart move, please add some comments above ( remember that this is shown on http://danger.systems - so assume no understanding of the problem domain )\n. debatable, but it'd be nice to have inline docs for a bunch of these classes - jazzy'll pick them up\n. chill to me\n. just naggin'\n. ",
    "powerje": "Doh, I worked on this on a flight and didn't realize I hadn't pulled in the latest updates in my repository. I'll work those issues out and resubmit.\n. @plasmaphonic I'm not sure this is the best issue to go over the potential advantages of Moya over using AlamoFire (which Moya uses) directly, but I would refer you to the README - specifically:\n- Treat test stubs as first-class citizens.\n- Only allow endpoints clearly defined through Moya can be access through Moya, enforced by the compiler.\n- Allow iterating through all potential API requests at runtime for API sanity checks.\n- Keep track of inflight requests and don't support duplicates.\nThis might be useful to you, or it might not. I'm most interested in using test stubs and ReactiveCocoa with with my network requests and Moya looks promising in that regard.\n. :+1: on the tests\nInterestingly this code:\nlet failureEndpointsClosure = { (target: GitHub, method: Moya.Method, parameters: [String: AnyObject]) -> Endpoint<GitHub> in\n    return Endpoint<GitHub>(URL: url(target), sampleResponse: .Error(401, NSError()), method: method, parameters: parameters)\n}\nSends through an NSError without a domain. This would be fine in Objective-C where I can check domain against nil, but:\nif error.domain != nil {...}\nfails to compile in Swift with the error: Cannot invoke '!=' with an argument list of type '(String, NilLiteralConvertible)'\nThe domain property is non-optional so accessing it at all causes a crash.\nI'm not sure if we should ever expect actual NSError objects to come through without a domain and am thinking of just giving the NSError in the TestResources a proper domain, but I wanted to make sure domain-less NSErrors aren't something we plan on supporting (I don't think I've ever come across one in practice).\n. I asked about this on another forum and John McCall (Apple Swift engineer) said this is an SDK issue - basically the empty initializer should be unavailable from Swift. So I'll go ahead and create a fully fleshed out NSError.\n. I think we're all set! I used your test case verbatim (Quick looks awesome). Let me know if there's anything else that should be cleaned up here\n. ",
    "ghost": "What's the advantages of Moya over AlamoFire? Just asking, intending politely.\n. @powerje Thanks, I didn't find any examples yet to review how other people are taking to it for implementation. Alamofire has several simple ones. Point-4 above is important.\n. Worked like a charm. Many thanks, gentlemen!. Ok, solved it. Found the solution after I dug a bit deeper into other issues here (issue #911 being most helpful), moved the MultipartFormData definition to Task. Then I got a fatalError(\"\\(target) is not a multipart upload target.\") - a look into Moya source made me double check the request type - and of course it turned out I was trying to POST with a GET request type set for all MyService. Bottom line, it works now.. Hey sunshinejr\ncocoapods-1.3.1\nPodfile:\n```ruby\nplatform :ios, '9.0'\ninhibit_all_warnings!\ntarget 'Zero' do\n  use_frameworks!\n# Architecture\n  pod 'ReactorKit'\n# Networking\n  pod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\n  pod 'MoyaSugar/RxSwift', :git => 'https://github.com/devxoul/MoyaSugar.git', :branch => 'master'\n# Rx\n  pod 'RxSwift', '4.0.0-beta.0'\n  pod 'RxCocoa', '4.0.0-beta.0'\n  pod 'RxDataSources', :git => 'https://github.com/RxSwiftCommunity/RxDataSources.git', :branch => 'swift4.0'\n  pod 'Differentiator', :git => 'https://github.com/RxSwiftCommunity/RxDataSources.git', :branch => 'swift4.0'\n  pod 'RxOptional'\n  pod 'RxKeyboard'\n  pod 'RxGesture', :git => 'https://github.com/sidmani/RxGesture.git', :branch => 'swift-4'\n# UI\n  pod 'SnapKit', '~> 4.0.0'\n  pod 'ManualLayout'\n# Logging\n  pod 'CocoaLumberjack/Swift'\n# Misc.\n  pod 'ReusableKit'\n  pod 'SwipeCellKit', :git => 'https://github.com/SwipeCellKit/SwipeCellKit.git', :branch => 'swift4'\n  pod 'UITextView+Placeholder'\n# Testing\n  target 'ZeroTests' do\n    pod 'RxTest', '4.0.0-beta.0'\n    pod 'RxExpect'\n    pod 'RxOptional'\n  end\nend\npost_install do |installer|\n  pods_dir = File.dirname(installer.pods_project.path)\nend\n```. @sunshinejr dzi\u0119ki ;P . ",
    "colinta": "I had a similar thought not long ago.  Being able to define the response in the test would have been convenient when I needed to stub out a sequence of responses... I don't recall the actual example, but a contrived example would be a combined signup screen that also tests to make sure the user isn't trying to create their existing account:\n1. Try to login (login_failure.json)\n2. API says username is available (availability_success.json)\n3. Submit a signup request (signup_success)\n4. Now try to login (login_success.json)\n5. Screen should transition to onboarding.\nI think orta's \"in line provider\" would be one way to solve this.  What would be another way for sampleData to be more dynamic?\n. I dig it, very readable way to set up a series of requests/responses.\nTo flesh this out a little more, these requests would be instances of the API enum?\n``` swift\nlet firstReq = Api.Status  // will return \"broken\"\nlet secondReq = Api.FixTheThings\nlet lastReq = Api.Status  // will return \"fixed\"\n// how do these get associated with\n// the appropriate JSON file?\nlet provider = ApiProvider.StubbingProvider().addStubbing(firstReq)\n  .addStubbing(...)\n```\n. Yeah I dig it.  So, continuing to flesh out:\n``` swift\nlet firstReq = Api.Status  // will return \"broken\"\nlet secondReq = Api.FixTheThings\nlet lastReq = Api.Status  // will return \"fixed\"\nlet provider = ApiProvider.StubbingProvider()\n// push? queue?  add?  something that indicates that this stubbed response will only be used once\n  .pushStubbedResponse(success(\"status__broken.json\"), forRequest: firstReq)\n  .pushStubbedResponse(success(\"fixed__success.json\"), forRequest: secondReq)\n  .pushStubbedResponse(success(\"status__ok.json\"), forRequest: lastReq)\n``\n. I took an initial stab at this using@autocompleteonsampleResponse:(and called in theif stubbedResponsescode), but that had an unfortunate side effect thatsampleResponse: .Success(..)was not autodetected to be of typeEndpointSampleResponse(e.g. it had to beEndpointSampleResponse.Success`).  I figured backwards compatibility was preferred, and this syntax is explicit, which is a win.\n. I like the \"always lazy\" idea.  For that to be backwards compatible we'd need to use an autoclosure, right?\nswift\npublic init(URL: String, sampleResponse: EndpointSampleResponse, method: ...\n  =>\npublic init(URL: String, sampleResponse: @autoclosure () -> EndpointSampleResponse, method: ...\nI attempted this and there were so many repercussions that I went with this more straightforward way instead.  I'll take another stab at it.\nI'm down with s/Lazy/Closure/ if we go that route.\n. Btw when I run make or make test I get this error:\n\u2326 The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\n```\nset -o pipefail && xcodebuild -workspace 'Demo/Demo.xcworkspace' -scheme 'Demo' -configuration Debug test -sdk iphonesimulator -destination 'name=iPhone 5' | xcpretty -c --test\n2015-02-16 08:01:23.564 xcodebuild[1654:46790] [MT] iPhoneSimulator: Unable to connect to \"com.apple.instruments.deviceservice.lockdown\" (Error Domain=com.apple.CoreSimulator.SimError Code=146 \"Unable to lookup in current state: Shutdown\" UserInfo=0x7fc9d2691c20 {NSLocalizedDescription=Unable to lookup in current state: Shutdown})\n\u2326 The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\nTesting failed:\n    Diff: /../Podfile.lock: No such file or directory\n    Diff: /Manifest.lock: No such file or directory\n    The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\n TEST FAILED \nThe following build commands failed:\n    PhaseScriptExecution Check\\ Pods\\ Manifest.lock Build/Intermediates/Demo.build/Debug-iphonesimulator/Demo.build/Script-703B20D06B76F0F02BE31CB7.sh\n(1 failure)\nmake: *** [test] Error 65\n```\n. Ahh, right, OK I just reimplemented the autoclosure style locally, and here's the error that turned me off to the idea:\nvar endpoint = Endpoint<MyAPI>(URL: url(target),\n  sampleResponse: .Success(200, target.sampleData),\n  method: method,\n  parameters: parameters)\n\ud83d\udeab '(@autoclosure () -> EndpointSampleResponse).Type' does not have a member named 'Success'\nRight, so since this method expects a closure, it wouldn't support .Success.  This would be a breaking change.\nIf (()->EndpointSampleResponse).Type could be extended to include .Success and .Failure then we'd have a way of having this feature with backwards compatibility.\n. (O_O)\nswift\npublic enum EndpointSampleResponse {\n    case Success(@autoclosure () -> (Int, NSData))\n    case Error(@autoclosure () -> (Int?, NSError?, NSData?))\n}\n. This is still not ideal.  With this autoclosure trick, the .Success / .Failure values now look like this - they have to be wrapped in a closure:\n.Success((200, target.sampleData))\n. Is there a Podfile I'm missing?\n```\n\nbundle install --path vendor\n...\nYour bundle is complete!\nIt was installed into ./vendor\nbundle exec pod install\n[!] No `Podfile' found in the project directory.\n.\n03:39 PM ~/Code/Swift/Moya \u2039 master \u203a\nls\nCHANGELOG.md             Gemfile                  Makefile                 Moya.swift               docs\nDemo                     Gemfile.lock             Moya+ReactiveCocoa.swift RACSignal+Moya.swift     vendor\nEndpoint.swift           LICENSE                  Moya.podspec             README.md                web\n```\n. (root project folder, same as Makefile)\n. Success!  I'll work on the specs.\n\nRegardless, I'm unsure what style you like the most at this point:\n1. new type, .Closure(), which returns an EndpointSampleResponse\n2. autoclosure in init, which requires changing .Success => EndpointSampleResponse.Success because the type can't be detected\n3. autoclosure in the enum initializer, which is backwards compatible but might not work in 1.2\nI still like option 1 (the original patch) because if @autoclosure is a moving target, I don't feel much better about using it in Endpoint.init than using it in the enums.\nSounds like you're leaning towards option 2 - it just requires the sample response type to have the explicit EndpointSampleResponse. prefix.  Not as pretty, but not cumbersome.  And :+1: on the simple use of @autoclosure there.\n. OK, can do - and yeah, I agree, I think it's the most straightforward.\nI'll push up that version soon with specs.\nAre you hanging out with Eloy these days?  Tell him Colin says hi! :-D\nOn Tue, Mar 3, 2015 at 5:38 PM, Ash Furrow notifications@github.com wrote:\n\nI think the first option, adding a new case to the enum, would be awesome.\nAvoiding @autoclosure seems to be a good idea for now. Let me know if I\ncan help!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ashfurrow/Moya/pull/100#issuecomment-77074131.\n. @ashfurrow OK, I was working on the specs, and I accidentally (i swear) did this:\n\n.Closure(.Success(200, ...\nBut then I was like, WAIT a second... case Closure(@autoclosure () -> EndpointSampleResponse) would make this a very easy opt-in feature!  It supports the syntax I accidentally typed, and as far as I can tell, this syntax will still be supported in 1.2.\nI thought it looked great, so I'm pushing it up for review here.  I can still revert to the non-@autoclosure code, e.g. Closure({ return .Success(200, ...\n. CC @rynbyjn and @steam - anything to add, fellas?\n. This makes total sense to me! \n\nOn Nov 18, 2015, at 4:49 AM, Guido Hendriks notifications@github.com wrote:\nMaybe we should not focus on multipart/form-data, but on uploads in general. In Alamofire there are 4 types of uploads:\nFile\nData\nStream\nMultipartFormData\nI would say we add some kind of request type, which can be either Request or Upload (we could add Download too). Based on the request type it would execute the right Alamofire methods with the needed data from the target. That would also mean adding some kind of UploadType enum for all the supported upload types.\nThis way you maintain the abstraction. If you were adding a request specifically for uploads, you'd be picking the request type when executing a request, but that's something that the target should know.\nPlease do correct me if I'm wrong, but this seems like a step in the right direction to me.\n\u2015\nReply to this email directly or view it on GitHub.\n. David, could you attach an example of the Ello.Target that would need to use Request and Upload types? I want to be sure I'm following you...\nOn Nov 18, 2015, at 2:26 PM, David Warner notifications@github.com wrote:\nI think, ideally, we'd like to be able to use the same endpoints for both Requests and Uploads, and therefore directly provide the DataProvider as a parameter to the request function. I ran with @JRHeaton's idea of a protocol extension to MoyaTarget, MultipartFormUploadable. I posted some of the implementation below and would love any feedback!\npublic protocol MultipartFormUploadable: MoyaTarget { }\nextension MoyaProvider where Target: MultipartFormUploadable {\n```\npublic func request(target: Target, parts: [MultipartBodyPart], completion:Moya.Completion) -> Cancellable {\n    precondition(target.method == .POST, \"Uploads require Moya.method to be .POST\")\nlet endpoint = self.endpoint(target)\nlet stubBehavior = self.stubClosure(target)\nvar cancellableToken = CancellableWrapper()\n\nlet performNetworking = { (request: NSURLRequest) in\n    if cancellableToken.isCancelled { return }\n\n    switch stubBehavior {\n    case .Never:\n        cancellableToken.innerCancellable = self.sendUpload(target, request: request, parts: parts, completion: completion)\n    default:\n        cancellableToken.innerCancellable = self.stubRequest(target, request: request, completion: completion, endpoint: endpoint, stubBehavior: stubBehavior)\n    }\n}\n\nrequestClosure(endpoint, performNetworking)\n\nreturn cancellableToken\n\n}\n```\n}\nThe sendUpload function would take an additional parameter representing a collection of each part of the multi-part upload, with those parts represented by the MultipartBodyPart struct. We could then have some helper function on the Manager that takes that collection and returns an Alamofire request.\npublic struct MultipartBodyPart {\n```\npublic enum DataProvider {\n    case Data(NSData)\n    case File(NSURL)\n    case Stream(NSInputStream)\n}\npublic let name: String\npublic let provider: DataProvider\n// Additional stream parameters\npublic let length: UInt64\npublic let fileName: String\npublic let mimeType: String\n```\n}\n```\nfunc sendUpload(target: Target, request: NSURLRequest, parts: [MultipartBodyPart], completion: Moya.Completion) -> CancellableToken {\n    guard let request = manager.uploadRequest(request, parts : parts) else {\n        var cancellableToken = CancellableWrapper()\n        cancellableToken.isCancelled = true\n        return cancellableToken.innerCancellable!\n    }\nreturn sendRequest(target, request: request, completion: completion)\n\n}\n```\npublic extension Manager {\n```\nprivate func uploadRequest(request: NSURLRequest, parts: [MultipartBodyPart]) -> Request? {\nlet formData = MultipartFormData()\n\nfor part in parts {\n    switch part.provider {\n    case .Data(let data):\n        formData.appendBodyPart(data: data, name: part.name)\n\n    case .File(let file):\n        formData.appendBodyPart(fileURL: file, name: part.name)\n\n    case .Stream(let stream):\n        formData.appendBodyPart(stream: stream, length: part.length, name: part.name, fileName: part.fileName, mimeType: part.mimeType)\n    }\n}\n\ndo {\n    let data = try formData.encode()\n    return self.upload(request, data: data)\n} catch {\n    return nil\n}\n\n}\n```\n}\n\u2015\nReply to this email directly or view it on GitHub.\n. Yup that's about what I was imagining, and I wouldn't want those two endpoints either.\nOn Nov 18, 2015, at 4:23 PM, David Warner notifications@github.com wrote:\n@colinta pretty much any endpoints that could take optional data. I may not be completely understanding @GuidoHendriks solution, but I'd like to not have to write multiple enum cases for, say a \"Create Account\" request that may or may not take image data. Essentially, I want one \"Create Account\" endpoint to which I can optionally pass one or multiple NSData, NSURL, NSInputStream parameters.\nEssentially, I'd like to avoid extraneous enum cases like this...\npublic enum API: MoyaTarget {\n```\ncase CreateAccount(name: String, type: String, description: String)\ncase CreateAccountWithImageData(name: String, type: String, description: String, imageData : NSData)\n```\n}\nextension API  {\n```\npublic var requestType: RequestType {\n    switch self {\n    case .CreateAccount:\n        return .Request\ncase .CreateAccountWithImageData:\n    return .Upload\n}\n\n```\n}\n\u2015\nReply to this email directly or view it on GitHub.\n. I'm in!  We have loved using Moya at @ello.  We're using, I think, all the features that Moya provides, and we'd like to not only keep abreast of changes, but help other people take advantage of it.\n\n(Haha I removed my \"@process255\" is better know as \"@steam\" comment when I saw Sean's comment ^)\n. My immediate, gut response is yes, because they seem related and it's easier (conceptually, to a new Moya user) to implement just the one protocol. \nIs there ever a time when these protocols would be implemented by separate objects?\n\nOn Jun 11, 2015, at 8:35 PM, Ash Furrow notifications@github.com wrote:\nDoes it make sense now that we're saying that parameters are on the target, and path is on the path, given that either property depends on the enum's associated values?\n/cc @chriseidhof\n\u2015\nReply to this email directly or view it on GitHub.\n. I bet @gfontenot could answer these questions.  Drop some Carthage knowledge on us, Gordon!\n. What other projects will be in this org?  We can ask github to make github.com/Moya available.\n. Dang it, I spelled \"Leviathan\" incorrectly.  github.com/Leviathan is taken.\n. Awww I JUST got the same email from github, and I was hoping to bring a present to the discussion today!\n\nWell, \u201cHUZZAH\u201d nonetheless.  These other names were\u2026 less good. ;-)\n\nOn Aug 5, 2015, at 9:05 AM, Ash Furrow notifications@github.com wrote:\nI've been in contact with GitHub support, and https://github.com/Moya https://github.com/Moya is now an organization I control. I'll be adding contributors as team members there, then transferring and doing related chores hopefully today, maybe tomorrow.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/ashfurrow/Moya/issues/168#issuecomment-128029428.\n. 1,054 files!?  That's... ahem a bit alarming.\n\nIt looks like all these files are mostly build artifacts.  Looking at other projects that support Carthage & CocoaPods, they don't include a Carthage/ folder that contains all the build headers.  I'm looking in particular at https://github.com/thoughtbot/argo\nI'm wondering: can that entire folder be removed?  From what I understand about Carthage, it's a minimalist system, it seems like a red flag that all these header files are included here.\n. Ah I see.  Well obv my vote is to keep the repo lighter.  Might make sense, then, to add something to the README about building, but I think people that use Carthage already can figure it out :-)\n. Are you saying the demos won't even run if the user doesn't use Carthage?\n. I'm glad the focus is remaining on CocoaPods.  I think Carthage is a great tool, but since most users aren't clamoring for supporting it, I think we'd be doing a disservice if CocoaPods was made a second class citizen.\n. ```\n\nmake ci\n..............................................\n\n Executed 46 tests, with 0 failures (0 unexpected) in 3.557 (3.574) seconds\n\n``\n. Whaddup with those specs failing on CircleCI?  I haven't seen that on previous PRs.\n. Oh, I see, looks like it's a known issue since #161.\n. Do we need a minor version bump in Moya to use:headthat way?\n. There's no way to remove Demo/Pods from the repo, is there?  Sure is a lotta noise.\n. Hahaha, well I'm with you on that.  Seems like a classic case of fixing what ain't broke, if you ask me. (Carthage I mean)\n. NIIIICE\n. Why just ObjectMapper?  Shouldn't the user decide what library to use?  This is a \"middleware\" decision, so I think that a separateMoyaObjectMapper` library would be appropriate - and it could live in the github.com/Moya organization!  But there are plenty of other JSON <-> Object libraries:\n- Argo\n- ObjectMapper\n- SwiftyJSON\nThe trouble I've run into is that it's impossible to have compile-time checking on these, because the endpoints map to many different return types.  We've solved this by having Service classes that define per-endpoint closures.  Tedious, but at the application-code level we know we'll get back the objects we asked for.\n- Api.recentPosts -> [Post] (PostService.recentPosts() { (posts, error) in })\n- Api.post(id: 12) -> Post (PostService.post(id: 12) { (post, error) in })\n- Api.currentUser -> User? (UserService.currentUser() { (user, error) in })\nHow are you using ObjectMapper + Moya right now?  Does it lend itself to becoming a generic library?\n. Your MoyaTarget implementation can have multiple sampleData properties, it is only a required MoyaTarget property so that it is easy to make use of MoyaProvider.DefaultEndpointMapping.\nTo use multiple sample data properties, you need to create your own endpoint-closure, which maps targets to Endpoint<T>:\n``` swift\npublic static var endpointTestingClosure = { (target: YourAPI) -> Endpoint in\n    let method = target.method\n    let parameters = target.parameters\n    let sampleResponse = EndpointSampleResponse.Success(200, { target.testingData })\n    // let sampleResponse = EndpointSampleResponse.Success(200, { target.sampleData })\nvar endpoint = Endpoint<YourAPI>(URL: url(target), sampleResponse: sampleResponse, method: method, parameters: parameters, parameterEncoding: target.encoding)\nreturn endpoint.endpointByAddingHTTPHeaderFields(target.headers)\n\n}\npublic static func TestingProvider() -> MoyaProvider {\n    return MoyaProvider(endpointClosure: testingClosure)\n}\n```\n. There might be a better name than \"Success\", but having it broken out based on the status code implies knowledge of the server. I've worked with an app (a terrible one), where all responses were \"200\", and other servers use 404 for empty \"array resources\". \nBut, instead of \"Success\", would \"Response\" be more appropriate?\n\nOn Mar 25, 2016, at 9:48 AM, Cihat G\u00fcnd\u00fcz notifications@github.com wrote:\nIt just happened two days ago that one of my colleagues took over a project I implemented a new API class for using Moya and he was completely confused by the fact that an API error (regardless of 4xx or 5xx) was returned within the .Success case. Although I understand and like the fact that Moya only forwards network errors to the .Failure case what about renaming the generic .Success and .Failure cases to something more clear? For example simply adding Network as a prefix resulting to .NetworkSuccess and .NetworkFailure should already improve the clarity a lot. What do you think?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. I agree, especially because of \"searchability\".\n\nI have bad luck with chat-room-as-support-channel.  In chat rooms, people seem to assume that the people there have tons of free time available, to answer their question right now, even though a quick search would yield the answer they need, or opening an issue would help people out in the future.\n. On the other hand, if there are maintainers who DO want to hang out in that chat room, it wouldn't hurt to have it!  But an empty gitter room, with a link from the README, might give people the wrong idea.\n. My thoughts on this: Ideally this would be something that could be wrapped up in a plugin - it seems out of scope with \"core Moya.\"\nBut in order to do this in a plugin, we would need to expand the plugin API to include an ability to delay/cancel requests. Not unreasonable, and a \"MoyaRequestThrottler\" could be really handy!\n\nOn May 1, 2016, at 4:16 AM, Antoine van der Lee notifications@github.com wrote:\nPassing by, as I was looking for this feature. I did miss it, as my app requests many of the same API endpoints at the same time. I was wondering why all these calls were fired.\nJust for my understanding, what would ideally be the way to handle these duplicate calls and prevent them to be all fired? Should I create my own inflights and duplicate detection?\n\u2015\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Is there anything preventing Alamofire from converting to using ErrorType over NSError?  If they do that, Moya would have to push out a new version.  Not at all a bad thing, and this is the kind of version bump that makes semantic versioning so relevant, but that might be an argument in favor of the more generic ErrorType.\n\nA way of justifying it philosophically might be: if we don't need / aren't consuming the features of NSError, then using the generic type indicates that we aren't promising what type of error is coming down the wire.  If this error is coming from a dependency, then this lack of promise is honest - we know we'll get an error, but we can't promise what it will be.\nI'm just catching up on this discussion, but these are my initial thoughts.  Gonna re-read now.\n. I would add that I have always appreciated the names MoyaTarget and MoyaResponse. Reminds where those objects originated. \nIn my apps I have often defined Target and Response types - those names seem too generic to \"claim\" by a library. \n. I thought we were going to keep the Moya- prefix on these types, what's the advantage of removing it? Advantages to keeping it:\nUnambiguous origination. A MoyaResponse came from Moya. Where does Response come from? I wish Alamofire used a prefix on these generic names, too. \nNo possibility of namespace collisions. import Moya will bring Response in as a top-level type, no need to prefix Moya. - so what does it mean when you create your own Response type in a file that imports Moya?\nI think, and this is just a \"dissenting opinion\" that this change is an unnecessary breaking change. \n. It does seem that way, and it just occurred to me that this change doesn't remove the Moya. prefix, it just makes it optional. With that in mind, I'm less opposed to it. \n. Wheeeeeee!\n. Do we \"Delete branch\" afterwards?\n. While I really like a lot of what I see here, I see that not only does this refactor the Provider code (and adding the Backend looks like a good idea), it also reverts the StubClosure back to the StubBehavior.\nIn short, I think there are too many breaking changes to have this considered as just a refactor - merging this would require a huge usage change on top of the mindshift.\nI would rather see this broken into 2 or 3 PRs: One to just introduce the MoyaBackend, another to discuss reverting StubClosure to StubBehavior, and a third to move Moya.swift code into Provider.swift.  Does any one else feel like this PR is just too huge to get merged in?\n. Yup, to be clear, I really like the parts related to making the provider non-generic.  My worry is that the other changes introduced here will make it hard to keep the discussion focused on just that one thing.  Thanks for being open, though, and I look forward to seeing where this goes!\n. Taking another stab at analyzing this, but again it's tricky because there are many ideas all getting thrown into one PR.  I would still love to see this broken out into 3 (or more!) PRs.  So far, I've identified these changes:\n1. Refactor Endpoint so that it doesn't neet <Target>.\n   - This was the original goal, wasn't it?  And it looks like this would be a straightforward change.\n2. Adding MoyaBackend - this looks like a nice way to separate the \"real vs stubbed\" response behavior.\n   - Adds Source/Backend.swift, and refactors Source/Moya.swift\n   - btw, looks like MoyaProviderStubBackend doesn't use or need the manager instance\n3. Revert StubClosure to StubBehavior.  The most important reason, I think, for the StubClosure is because the stubbedData needs to be called lazily.  If this can be accomplished with StubBehavior, I think I'd be fine with it.\n. ###### Some more questions\n- What does MoyaCommonProvider do? I don't see this class used anywhere, but it is defined in Provider.swift.\n- DefaultCommonEndpointMapping and DefaultEndpointMapping do the same thing, can this be simplified to just having DefaultEndpointMapping?\n- toNSMutableURLRequest is only used to calculate a hash value (public var hashValue: Int { return self.toNSMutableURLRequest().hash), why not use self.urlRequest there?\n- I see that CancellableToken has been made public, but I think it can remain private if you change the return type to Cancellable in MoyaProviderBackend\nMost importantly\nI labeled this enhancement, but then that begged the question: what is being enhanced here?  I see a lot of changes (too many in my opinion, to be very honest), but I can't point at any one thing that is greatly improved by these changes. @jasl what is the most important feature that is being added?  @ashfurrow what do you see as the best ideas here?\n. I, for one, consider this behavior to be correct, because Moya is only responsible for sending and receiving, not interpreting, the requests and responses.\nA \"Failure\" in this context is a total network failure: either couldn't send, or couldn't receive the request.\nIn the Ello app, we re-send failed requests.  When the response is a 4xx, we create an error object (based on JSON data that comes back) and pass that to a failure closure, which displays the error to the user.\n. The only response that we handle from inside our Provider is a 401 Unauthorized, which triggers a request for a new token (and while that is in flight we queue up requests, then send them once the new token is in hand).  500s are plain-jane errors that we show to the user, in this case with a generic error message (if no JSON / error message is provided from the server, we have a fallback error message)\n. @mrfarukturgut All requests are sent via a class we called ElloProvider, and in that request method we check to see if the request needs authentication, and if so we make sure we are in the appropriate state.  If the auth state is \"attempting to log in\" we add the request to a queue.  If the auth state is \"anonymous\" or \"none\" we send back an error.\nThe auth state transitions are handled outside this request cycle, so when we get back a success after sending credentials we can change the auth state from \"attempting\" to \"logged in\" and then we send out all the pending requests.\nOur code is open source, so you can check this out at https://github.com/ello/ello-ios. Attempting fix w/ PR #388.\n. Attempting fix w/ PR #388.\n. Ahh gotcha.  Will do.\n. @ashfurrow phew, went a little nuts on Examples.md: ab85328\n. https://github.com/Moya/Moya/blob/ab853283d8463e53fe306ed2b52b623f9db88856/docs/Examples.md\n. What does it look like in ember-data?\n. Instead of removing DefaultEndpointMapping, you could makeit  easier to port by having that method accept the baseURL, and then return a closure:\ndiff\n-public final class func DefaultEndpointMapping(target: Target) -> Endpoint<Target> {\n-    let url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString\n-    return Endpoint(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n-}\n+public final class func DefaultEndpointMapping(baseURL: NSURL) -> (target: Target) -> Endpoint<Target> {\n+    return { target in\n+        let url = baseURL.URLByAppendingPathComponent(target.path).absoluteString\n+        return Endpoint(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n+    }\n+}\nI like that your fork's changes are pretty small - but important question: does the current enum-based system still work?\nI know you're critical of it, but... well, you're an army of ~2 at the moment.  As long as we stay compatible with using enums to store the endpoints, I think this is great!  What I mean is: it's great to support both, but if we're just going to support one or the other, I vote that we stick with the enum.\n. Isn't it possible to just wrap your struct in an enum value, and forward the TargetType calls to your struct?\n``` swift\nstruct UserResource {\n  let method: Moya.Method = .GET\n  // ... and so on ...\n}\nenum API {\n  case User(UserResource)\nvar path: String {\n    switch self {\n      case let User(resource):  return res.path.resolve()\n    }\n  }\n}\n```\nYou could probably take this a step further:\n``` swift\nstruct UserResource: Moya.TargetType {\n // ...\n}\nenum API {\n  case Resource(Moya.TargetType)\n}\n```\nThis lets people who use enums (which is still everyone at the moment) to continue without major refactors, but also lets you use your struct in the way you've proposed.\n. I forgot to reply to the poll, but I'll be there! :-D\n. Thanks for continuing to encourage such a community-based project, @ashfurrow!  Looking forward to see where this goes.\n. Simple answer: you pretty much just need two providers per app. One to send actual requests, and one for stubbing (during tests). \nUsing a \"shared provider\" (a global) makes sense, so that you can set it to the \"actual\" or \"stubbing\" instance as needed. \nYou might create additional providers to provide more stub providers (delayed, immediate, errors), but I can't think of a reason to have more than one \"real\" provider. Anyone else?\n\nOn Feb 24, 2016, at 4:56 PM, r\u00e9mi \uf8ff notifications@github.com wrote:\nHi, I have few questions  about the Provider.\nIs it only 1 Provider per endpoint, and then per request ?\nIf I have several request to do in my controller, do I need several Provider ?\nI need for each request add or not a special header in the request, so I use the Provider block construction, but It will recreate my Provider each time.\n\ud83e\udd14\n\u2014\nReply to this email directly or view it on GitHub.\n. Simple answer: you pretty much just need two providers per app. One to send actual requests, and one for stubbing (during tests). \n\nUsing a \"shared provider\" (a global) makes sense, so that you can set it to the \"actual\" or \"stubbing\" instance as needed. \nYou might create additional providers to provide more stub providers (delayed, immediate, errors), but I can't think of a reason to have more than one \"real\" provider. Anyone else?\n\nOn Feb 24, 2016, at 4:56 PM, r\u00e9mi \uf8ff notifications@github.com wrote:\nHi, I have few questions  about the Provider.\nIs it only 1 Provider per endpoint, and then per request ?\nIf I have several request to do in my controller, do I need several Provider ?\nI need for each request add or not a special header in the request, so I use the Provider block construction, but It will recreate my Provider each time.\n\ud83e\udd14\n\u2014\nReply to this email directly or view it on GitHub.\n. Well no, we could remove the changes that reference MoyaDefaults from #424.  That's what I had intended by my comment.\n\nYou could either rebase #424, and remove the MoyaDefaults code, or create a new commit, and this PR should override that change.\n. This is more in line with what I had pictured - simple, more verbose, but doesn't introduce or rely on any new features.\nI must give props to @sunshinejr for the cool use of reflection, but I would actually steer clear of that in a library like Moya.  Keep it simple, keep it explicit, let individual developers choose to implement something more interesting & complex.\nBut that's just my opinion! :smiley:\n. Stubbed responses, for one (testing as a first-class consideration).\n\nOn Mar 18, 2016, at 5:23 PM, G Edward Gonzalez notifications@github.com wrote:\nLove the concept of Moya, just reading the docs and struggling to see the benefits of it compared to just using vanilla Alamofire with an enum that conforms to URLRequestConvertible: https://github.com/Alamofire/Alamofire#api-parameter-abstraction https://github.com/Alamofire/Alamofire#api-parameter-abstraction\nI like that Moya formalizes the pattern, as it does seem like a side thought in the Alamofire readme. But are there other intentions/benefits compared to it?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub https://github.com/Moya/Moya/issues/435\n. I also like this implementation!  Feels very \"Moya-esque\" :smile: \n\nThe \"Response-subclass w/ progress method is a good idea to me, too.\nThanks for tackling this one!\n. I can do this right now.\n. Moving conversation to #443 \n. I am unable to compile and run specs locally, so I want to make sure these pass first before we merge in.\n. CI is running on Xcode 7.1.1, and doesn't support #selector and such from AlamoFire (same errors I'm getting - I'm d/l-ing 7.3 now).\n. Aw dammit I just pushed to origin.  one sec, repairing.\n. Rookie mistake - git push instead of git push colinta master.  Was gonna force-push to undo that, but that's disabled (good idea!).  Should I revert, or just let this one slide?  Obv a tiny change, and I can test locally to be sure it's OK.\n\n(changes .git/config to default to own fork...)\n. Running Xcode 7.3, specs are green, but Nimble has a compile-time error on String vs StaticString (I just inserted a \"\" placeholder to get specs to run).\n\nswift\nXCTFail(\"\\(msg)\\n\", file: location.file, line: location.line)\n\nCannot convert value of type String to expected argument of type StaticString\n. CI had the same error, so no luck getting specs to run there:\n\n\u274c  /Users/travis/build/Moya/Moya/Demo/Pods/Nimble/Nimble/Adapters/NimbleXCTestHandler.swift:9:64: cannot convert value of type 'String' to expected argument type 'StaticString'\n            XCTFail(\"\\(message.stringValue)\\n\", file: location.file, line: location.line)\n                                                      ~~~~~~~~~^~~~\n\u274c  /Users/travis/build/Moya/Moya/Demo/Pods/Nimble/Nimble/Adapters/NimbleXCTestHandler.swift:25:48: cannot convert value of type 'String' to expected argument type 'StaticString'\n            XCTFail(\"\\(msg)\\n\", file: location.file, line: location.line)\n                                      ~~~~~~~~~^~~~\n. I'm not at all opposed to helping out with this, would love to have someone else involved to \"have my back\" (look over the release, sanity check that it's good to go, etc).\n. Nice!  Thanks for adding this to the README.  I took a quick glance at your adapter, and it looks very straightforward.  I think this is good to merge (and will, if no one else objects or beats me to it).\n. I've used Charles w/ Moya a ton - but when we added SSL pinning, that causes Charles to stop working.\n. I can think of a few ways to accomplish what you're after.\n1. Hard: Fork Moya and add NSURLRequest to the completion.  Then you'd have to maintain a fork, which is no fun.\n2. Reasonable: Fork Moya and add a plugin method to line 210 plugins.forEach { $0.didReceiveRequest(request, result: result, target: target) }.  Again a fork, but such a subtle difference that this would probably be easier to maintain.  And the debugging would be off on its own, in a plugin, which is nice.\n3. Easy: Just re-create the request in your response handler!  There's nothing special about the NSURLRequest instance, and it's easy to create a copy.\nswift\nprovider.request(.Zen) { result in\n  let request = Api.Zen.urlRequest\n  ...\nBetter yet would be to wrap this in a networking layer, and then you can send the request back in a custom completion block:\n``` swift\nclass Network {\n  static let provider = MoyaProvider()\nstatic func request(endpoint: MyService, completion: (NSURLRequest, Result) -> Void) {\n    provider.request(endpoint) { result in completion(endpoint.urlRequest, result) }\n  }\n}\n```\n. @Miasma87 This is an error with your swift code:\nswift\ncase .getSeveralAlbums(let ids):  // remove ': [String]' from your code\n. And it looks like you're in the wrong section - you should be modifying the var parameters, not the URL path.\n. Sure you can - the list of ids is assigned to the enum as an associated value.\nThe path is not supposed to include the ?- GET parameters.  They will be added to the URL for you, when you return them from the parameters property.  Don't try to construct the entire URL yourself (like you might in JavaScript).\n``` swift\nenum API {\n  case .Status\n  case .Albums([String])\n}\nvar parameters: [String: AnyObject]? {\n  switch self {\n  case .Status: return nil\n  case .Albums(let ids):\n    return [\"ids\": (ids as NSArray).componentsJoinedByString(\",\")]\n  }\n}\n```\n. Usually this error comes with more details, hidden behind a \"disclosure triangle\" - there's no other detail related to this error?\n\nOn Apr 28, 2016, at 6:39 AM, Vishal notifications@github.com wrote:\nAdded default to all the 'switch' . Same error.\n\u2015\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Cool! Glad to help!\n. Definitely good stuff in this PR - and I like @hirad's changes in his experimental branch, FWIW.\n. I'm def happy to review this, I'm excited to (finally!) get uploads into Moya.  Please ping me (@colinta) when it's ready (and @Moya/contributors).\n. Cool!  I will not be able to today, but definitely will do tomorrow.\n. Very cool, and I found it very easy to use.  I've got some refactors for you, I'll make a PR into this branch.  I've added some code to the Demo project that uploads a file to Giphy using their public API.\n\nSome comments:\n1. Spacing in your code is a little different from the rest of Moya: func(arg:Type) instead of func(arg: Type).  I've changed all the instances of this that I found; this follows Swift code conventions, and is internally consistent.\n2. I did find an interesting issue: if you don't specify queue: dispatch_queue_t?, the response is not called on the main thread - that part is OK, I suppose.  If you do specify the queue (e.g. queue: dispatch_get_main_queue()), the progress block is not called on this queue, which surprised me.  I'll include a fix for this in my PR.\n3. The design is great; really easy to create a multipart endpoint, easy to add progress.\n\ud83d\udc4d \n. For anyone interested, my recommended changes (and additions to the Demo app) are here: https://github.com/leonereveel/Moya/pull/3\n. Hmm, you've got a good point there! @ashfurrow did you read that \u261d\ufe0f?\nI see that the specs test the cancel-ability of this code, though... I'll look at this for a bit more.  Definitely fishy.\n. @ashfurrow Should isCancelled map to innerCancellable?.canceled ?? false?\n. @leonereveel There is a small difference in your code:\n// Moya existing code\n216:  cancellableToken.innerCancellable = self.sendRequest\n...\n// your code\n271:  cancellableToken = self.sendUpload\n. Right - actually I think that is why you need to assign the result of sendUpload (the \"innerCancellable\") to the original cancellableToken.  If you assign it again (as you are here), it will never be returned to the user - they will be calling cancel() on an object whose innerCancellable is nil.\nIn sendUpload you return another CancellableWrapper, and I think this is correct - the wrapper in request() will call cancel() on that wrapper, which will then call cancel() on the Alamofire Cancellable.\n. I'll try it in the Demo app - calling cancel() immediately should make its way into Alamofire, right?\n. No it's still not as simple as that, but I'm learning more about what's going on.\nSo because performNetworking is asynchronous (or it can be - in the case of using OAuth, for example), assigning to cancellableToken inside of performNetworking will have no effect on the code that calls request.\n``` swift\nfunc request() -> String {\n    var cancellable = \"foo\"\n    inOneSecond {\n        cancellable = \"bar\"\n    }\n    return cancellable\n}\nrequest() // always \"foo\"\n```\nBUT, I see that multipartFormData is not called synchronously, and so I think the issue here is that innerCancellable doesn't have a default value - something that can assign and store the isCancelled value.\nI propose this: for one, I agree that it seems like CancellableWrapper should be a class, not a struct, because we're treating it as a reference. Next, I think that innerCancellable should be a Cancellable, not a CancellableToken.  Then, we can assign a default value to innerCancellable that can be \"canceled\" while the request is being constructed.  Because until innerCancellable is assigned, the request isn't cancellable, which seems like a bug.\nSomething like this:\n``` swift\n// change to a class, for reference semantics\ninternal class CancellableWrapper: Cancellable {\n    // calling cancel() on this initial instance will just update the canceled value\n    internal var innerCancellable: Cancellable = SimpleCancellable()\n// renamed 'isCancelled' for consistency\nvar canceled: Bool { return innerCancellable.canceled ?? false }\n\ninternal func cancel() {\n    innerCancellable.cancel()\n}\n\n}\ninternal class SimpleCancellable: Cancellable {\n    var canceled = false\n    func cancel() {\n        canceled = true\n    }\n}\n```\n. I'm creating #530 to address this issue - and I've got a branch that combines #530 and #483 here: https://github.com/colinta/Moya/tree/multipart-after-refactor\n. Sweet! I agree about the collaboration. Great feature, and tons of people working on it - awesome!\n\nOn Jul 8, 2016, at 1:57 PM, Leone Parise notifications@github.com wrote:\nFixed multipart-parameters encoding. I didn't know that this must be encoded differently.\n\u2015\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Not to belabor the point, but there is a lot wrong with parsing the body of a GET request. Here's a great explanation: http://stackoverflow.com/a/983458\nOn Jun 13, 2016, at 7:53 PM, Sebastian Bean notifications@github.com wrote:\nGET is meant as simply a request to a URL. Thus URL encoding is the only real thing that makese sense.\nI'd try switching over to POST.\n\u2015\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Just one, for sure!  Here's how we do it in the Ello app:\n\nElloProvider.swift\n``` swift\n    public static func endpointClosure(target: ElloAPI) -> Endpoint {\n        let sampleResponseClosure = { return EndpointSampleResponse.NetworkResponse(200, target.sampleData) }\n    let method = target.method\n    let parameters = target.parameters\n    let endpoint = Endpoint<ElloAPI>(URL: url(target), sampleResponseClosure: sampleResponseClosure, method: method, parameters: parameters, parameterEncoding: target.encoding)\n    return endpoint.endpointByAddingHTTPHeaderFields(target.headers())\n}\n\n```\nElloAPI.swift\n``` swift\n    public func headers() -> [String: String] {\n        var assigned: [String: String] = [\"Accept\": \"application/json\", \"Accept-Language\": \"\", \"Content-Type\": \"application/json\"]\n    if self.requiresAnyToken {\n        assigned += [\n            \"Authorization\": AuthToken().tokenWithBearer ?? \"\",\n        ]\n    }\n\n```\n. ElloProvider L32\nElloApi L455\n. @dropski I would humbly encourage you to close the issue, because I've seen lots of open-source projects where there are tons of issues still open, only because the maintainers can't tell if the person who opened the issue is \"happy\" with the results.  It's a good way to keep things tidy!\n. @wattson12 I added some links and syntax to your markdown: https://github.com/wattson12/Moya/pull/1\n. The Ello iOS app makes very heavy use of sampleData https://github.com/ello/ello-ios\n. Well it's way more than just me!  The entire Ello team - from devs to marketing to leadership - were all very much a part of the decision to open source and the process that got us there.\nSo on behalf of everyone at Ello: happy to help!\n. OK to close?\n. OK to close?\n. These are internal changes, no changelog entry necessary, I think.\nIf the changes are good, I would like to add specs around cancellables.  Async specs - UG.\n. Some final notes as I let specs run on CI:\n- Renamed canceled to cancelled, because it's spelled with two LLs throughout the rest of the code.\n- Prior to this PR, the only place canceled was \"exposed\" was in CancellableToken as an internal property, so no breaking changes.  In CancellableWrapper it was isCancelled, and this was a private var.\n- Updated specs accordingly\n- Added specs to test cancel behavior, and here's the (strange? unintended?) logic that is tested:\n  - if the request is cancelled immediately, the completion handler is not called\n  - if the request is cancelled before the request is sent, the completion handler is not called\n  - if the request is cancelled after the request is sent, the completion handler is called with a .Failure\nIn most cases, the completion handler will be called, because most people use the default requestClosure, which starts the request before request returns the Cancellable\nIt's strange, to me, that the completion handler works this way.  Anyone else? CC @Moya/contributors \n. Executed 102 tests, with 0 failures (0 unexpected) in 3.764 (3.935) seconds\nIt's danger that is causing circleci to fail \ud83d\ude22 \n@ashfurrow good to go?\n. Since #532 is taking care of this, we can close this one.\n. Don't remove them - reverse the expectation!\n. e.g. \ndiff\n-it(\"never calls completion if cancelled immediately\") {\n+it(\"calls completion if cancelled immediately\") {\n. Awesome!\n. I was looking into refactoring sendUpload and sendRequest to use a shared sendAlamofireRequest method, and I noticed that this line wasn't updated to return an error response:\nhttps://github.com/jefflovejapan/Moya/blob/05c2a77cbd4bff9e2ac07fe18ac1006b4b4a3da3/Source/Moya.swift#L440\nI want to make sure it should be added, because I'm adding it to my changes.  But if it was deliberately skipped (maybe it's redundant? I didn't look too closely, but that doesn't seem to be the case) let me know!\n. Oh shoot, also the plugins aren't notified of cancellations.  I'm going to add an internal helper:\nswift\n    internal func cancelCompletion(completion: Moya.Completion) {\n        let error = Moya.Error.Underlying(NSError(domain: NSURLErrorDomain, code: NSURLErrorCancelled, userInfo: nil))\n        plugins.forEach { $0.didReceiveResponse(.Failure(error), target: target) }\n        completion(result: .Failure(error))\n    }\n. See #543 for my changes\n. \ud83d\ude01\ud83d\udc4d\n\nOn Jul 13, 2016, at 11:30 AM, Jeff Blagdon notifications@github.com wrote:\n@colinta No you're right, this was an oversight on my part. Thanks for fixing!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This sounds like a great use case for sampleResponseClosure!  I'm going to pull an example from the Ello app (https://github.com/ello/ello-ios - ElloProvider_Specs.swift)\n\nYou just need to configure a Provider instance to return errors - this is a little different from stubbing:\n``` swift\nstatic func errorEndpointsClosure(target: ElloAPI) -> Endpoint {\n    let sampleResponseClosure = { () -> EndpointSampleResponse in\n        return .NetworkResponse(500, NSData())  // you can & should have this configurable - globals, or properties on your Target\n    }\n// all the request properties should be the same as your default provider\nlet method = target.method\nlet parameters = target.parameters\nlet endpoint = Endpoint<ElloAPI>(URL: url(target),\n    sampleResponseClosure: sampleResponseClosure,  // <- here goes!\n    method: method, parameters: parameters)\nreturn endpoint.endpointByAddingHTTPHeaderFields(target.headers())\n\n}\n```\n. Ok so that's the first half - the second half is to configure a Provider to use this \"endpoint generator\"\nswift\npublic static func ErrorStubbingProvider() -> MoyaProvider<ElloAPI> {\n    return MoyaProvider<ElloAPI>(endpointClosure: errorEndpointsClosure, stubClosure: MoyaProvider.ImmediatelyStub)\n}\n. In the Ello specs, we use this by assigning globals in our setup code, and assigning this provider as the \"default provider\"\nswift\nElloProvider.sharedProvider = ElloProvider.ErrorStubbingProvider()\nElloProvider_Specs.errorStatusCode = .Status502  // this is an enum we define in ErrorStatusCode.swift\n. \ud83d\udc4d Close it up!\n. Working on it right now, looks straightforward.  Thanks for stalling!\n\nOn Jul 13, 2016, at 8:54 AM, Ash Furrow notifications@github.com wrote:\nWe might have a non-backwards-compatible feature request worth squeezing in: #542 https://github.com/Moya/Moya/issues/542 I believe @colinta https://github.com/colinta is taking a look, I can help too.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/Moya/Moya/issues/535#issuecomment-232381039, or mute the thread https://github.com/notifications/unsubscribe/AABrsveZ90i0sXvBGz7tor_Fy5iC4WaAks5qVPxCgaJpZM4JKtqk.\n. I'm done I swear! \ud83d\ude03 \n. \ud83d\udc4f\nOn Jul 13, 2016, at 5:20 PM, Ash Furrow notifications@github.com wrote:\nClosed #535.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hey, we know it works!\n. It shouldn't be a ton of work (and should even be backwards compatible) to add support for Moya.ProgressBlock to the internal requestNormal method. Actually, now that I'm looking at it, sendUpload and sendRequest have a lot of duplicated code...\n. I might have ONE more PR...\nOn Jul 13, 2016, at 11:19 AM, Ash Furrow notifications@github.com wrote:\n@alexdoloz https://github.com/alexdoloz now that #543 https://github.com/Moya/Moya/pull/543 is merged, this should work if you use the latest version of Moya, on the master branch. If you're using CocoaPods, you can change the Podfile to include pod 'Moya', git: 'https://github.com/Moya/Moya.git' and do a pod update and it should work. Let us know!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/Moya/Moya/issues/542#issuecomment-232424891, or mute the thread https://github.com/notifications/unsubscribe/AABrsnJZCNeLofJn60mOY489-OcM-nM6ks5qVR4hgaJpZM4JLOWe.\n. #544 whitespace changes only \ud83d\ude03 \n. Glad to hear that you got to the bottom of it! Good to know about the Content-Length header. \n\nWhen you feel good about it, please close this issue. \ud83d\udc4d\n\nOn Jul 26, 2016, at 6:22 AM, alexdoloz notifications@github.com wrote:\nOkay, I figure out what happened. Server doesn't return Content-Length header. I tested other resources and progress works fine (provided these servers return Content-Length). So it was my mistake, no need to create new issue :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. #542 You'll be able to pass in a progress block using the code from this PR!\n. Executed 104 tests, with 0 failures (0 unexpected) in 4.819 (4.971) seconds\n. To reviewers: use the commits, not the entire files diff, because the commits are organized in a way that makes it easy to see what was changed.\n. @ashfurrow Danger says fatal: Not a valid branch point: 'b15ee3ff510e56c8fd077e724bdaf7d6ecb95afa'\n. Good point - we'll probably need to be diligent about telling ourselves and others about that (e.g. if it's a refactor we should point out \"include an entry that summarizes the changes, even if they aren't breaking).\n. \ud83d\udc4d I haven't gotten around to looking at the documentation, to see where a description of uploading can go.  That's enough of a mention that people can see that it's supported.\n. I didn't want to like this, because I assumed it was bike shedding, but as soon as I started digging in, I realized that it was a really good way to design the \"how am I sending / receiving this request\" aspect. So yeah, I'm on board! \ud83d\udc4d \n. Mine arrived today!\nOn Oct 12, 2016, at 3:04 PM, Ash Furrow notifications@github.com wrote:\nThe US-bound stickers are already in the mail, the international post should be going out this week. Thanks for your patience!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/Moya/Moya/issues/559#issuecomment-253338744, or mute the thread https://github.com/notifications/unsubscribe-auth/AABrsnzlYVI99otwRW3t2kTRoPiWHp8tks5qzUtdgaJpZM4JTZGx.\n. \"name\": \"images\" caught my eye, I expected that to have an extension, e.g. \"name\": \"image.jpg\".  Also, you are returning the dictObj (aka objDict - you might want to check your naming on that one) from var parameters: [:]?, and so the imagesDataArr is going to be included there (maybe base64 encoded - I have no idea what Alamofire does with NSData in that case).\n. Oh shoot, you're totally right on the \"name\" thing!  My mistake.\n. I have the same feeling as @vzsg on this: using guard implies that we don't know what's going on, and so we're protecting ourselves from something; i.e. request.mutableCopy() might return another type of object.\n\nBut that's not how that method works \u2013 we all know that it is a reasonable guarantee that we will get back an NSMutableURLRequest.\nOTOH if this code was written with guard I would probably say nothing; it doesn't hurt to have a guard there.  But there is benefit to showing intention with force-unwrapping.  It says \"we know what we're going to get, we trust the system\".  I'm OK with that. </twocents>\n. Anecdotal support of this argument: Alamofire uses a force-unwrap to convert NSURLRequest to NSMutableURLRequest https://github.com/Alamofire/Alamofire/blob/master/Source/Alamofire.swift#L72\n. Sorry for the long delay, didn't notice I was mentioned till just now.  AFAIK the code in demo/ that uses the multiform upload is correct, unless something changed and it wasn't updated!  It should be easy to document the usage, I think the code is straightforward.. Sure!  If you want.  We've started using it with FutureKit, and it works great.\nShould Moya require or depend on one of these microframeworks?  Could, but I would not like that decision made for me.  So I hope we don't go in that direction.\n. https://github.com/ello/ello-ios/blob/cg/add/hire-me-button/Sources/Networking/HireService.swift\n. Nope, I didn't even look at PromiseKit at the time. Pick whichever seems right for you. \n\nOn Aug 25, 2016, at 9:44 PM, rlam3 notifications@github.com wrote:\n@colinta Is there a reason for you guys to choose FutureKit over PromiseKit?\n\u2015\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \ud83d\udc4d \n. Since we're collecting opinions, I'll share mine.  This is not to say I feel strongly one way or the other about this, so just take this as me throwing another idea into the hat.\n\nTL;DR: I think some defaults could be helpful (method, parameters in particular), but honestly I prefer the current more verbose style, because it leaves nothing up to the imagination.  i.e. for a new developer, that had no experience with Moya, looking at the TargetType implementation, having everything explicit is great.  We're really just talking about removing default: return .get from the bottom of a switch statement.\n\nIt looks like SingleURLTarget would make it easy to send a request to a server/endpoint that is not enumerated in a TargetType.  I do think you have a valid argument about Moya being a network abstraction layer, but I actually don't see it going so far as to replace the functionality of Alamofire - and Alamofire is still a dependency of Moya, so we're already using it no matter what.  The first example you gave above could be accomplished with Alamofire easily, and is exactly what Alamofire is built for.\nReal world example: In the Ello app we often get image URLs from the Ello API, and we use Alamofire to download those to prime the image cache.  Building a Moya TargetType for this purpose feels heavy handed - we're wrapping a wrapper at that point.  Then again \"reaching through\" Moya to use Alamofire is, I think, what people are trying to avoid.  To me, it's the right tool for the job.  I see Moya as an API Abstraction layer.  We hope, in the future, to pull out the ElloAPI Moya code, so that if developers want to access our API they can easily do so using Moya.  Or, if nothing else, it provides a concise programmatic reference to our API!\nIf anyone here is using Moya to abstract an API but also wants to use it for all network requests, then I think you have a different view of what Moya is designed for than I do, and so we'll certainly disagree on this feature/direction.\nThe thing that I'm most concerned on is the default sampleData.  I think that having a default value for this would make it way too easy to skip this feature (and it's already easy enough).  Since support for testing is so high on the list of Moya's original features, it pains me to push it any further down the priority list.. I think you make a good point with the SimpleApi example.  You're right, it's safe to assume that the requests would be sent with no parameters via a GET request.  I thought I said as much in my first comment - that having those defaults makes sense to me, even though I prefer the verbosity.  Maybe my wording was unclear, but that's what I was going for.\nI think it's glib to argue that any use of Alamofire, or some other network/request framework than Moya, is some egregious misuse of the Moya paradigm.  Abstractions are always leaky, and the use cases you are touting (I'm referring specifically to the SingleURLTarget idea) are exactly where Moya leaks.  You're proposing that we expand Moya's surface area to cover these requests, and I'm arguing against it.  But it wouldn't burn my house down if we added this feature.\nAs for the sampleData, it's a concern, but I'm not planting my flag here.  I don't care one way or the other if people use Moya or not, but you can't force good habits, I certainly agree with you there.. @justinmakaila What you said here really resonates with my own opinion (that Moya should not get in the response deserialization game), but I also don't exactly agree with what you said.  What @michaelsand is proposing here is not a parser library or system, just another take on how to integrate a parsing layer at the call site.\nThis is usually the type of feature that I don't like adding, but in this case the more I look at it the more I like it!\nIt might be unfortunate that the title includes \"method of deserialization is known\" because that makes it sound like Moya is getting involved, but actually it's just saying that you could plug any parser into this; the parsers (that you write as part of your network layer) take a Moya.Response (if the result is .success) and hand the result (or a new error) to your completion block.\nThe reason I like this proposal is that it adds the type information - and only the type information - to the call site, and the type is inferred by the compiler based on the mapping function, so there's no additional noise.  And mapping from Result<Moya.Response> to Result<T> feels very natural to me.  Put another way, it is a way to inform Moya how it can get out of the way of our application.  We begin the request cycle by handing it an enum value, we end by receiving our expected object or an error.\nAnd we get \"opt-in/opt-out\" for free here since this method signature would not collide with the existing request method.  In the Ello app we look at the HTTP result directly to get the status code out, so we could still use this method to map to a (statusCode, JSON) tuple, and I think our code would benefit from it!  Since our JSON is in a consistent format, we could actually parse it into a really useful object, which would move a lot of the heavy lifting out of ElloProvider and into a testable/pluggable ElloJSONParser type.\nI'm on board with this change.  It is backwards compatible, it feels very \"functional programming\"-esque, and I don't see it as opinionated as @justinmakaila seems to.  To me, this is a natural place to provide an HTTP response parser.\nI would love to see a dissenting opinion that shows how we can get this same benefit from our current setup. Thanks!. Great counter point!  Extending Moya.Response achieves similar code separation; it isn't as purely functional perhaps, but that's splitting hairs.  I would be hard pressed to call one more \"Swifty\".  map(a) -> b is  insteada.map() -> b.\nAnd, unless I'm mistaken, @michaelsand might also be agreeing with this strategy; I was re-reading the conversation here, and in his last comment he points out that extending Moya.Response accomplishes the same goal (I missed that the first time around).\nOn the other hand, I had a different use-case in mind.  In our app, we have only one place where we call Moya, and that's from ElloProvider.  We do authentication token checking and refreshing before we send the request out.  So in our case, the \"parser\" that I would provide is higher-level; it would only return a generic SwiftyJSON object (and it would introspect that JSON - we use a linked key and put all the related objects in there into local key-value storage - typical JSON API pattern).  In your example, this corresponds with let response = try mapAPIResponse(), and so the response body would look something like this:\nswift\npublic func authenticate(type: AuthType, username: String, password: String) {\n    let endpoint: API = .auth(type, username: username, password: password)\n    provider.request(endpoint, parser: mapAPIResponse, completion: { result in\n        do {\n            let apiResponse = try result.dematerialize()\n            let authResponse = try mapAuthenticationResponse(apiResponse)  # MyAPIResponse instance\n        }\n...\nI do still like this; it \"closes the loop\" between your domain's API endpoints, and how your data is returned from the server.  But is it necessary?  No, I think @justinmakaila demonstrated that we can accomplish this by having the parser as part of the body; and either way (whether it's in the function, or in the body) you'd have to repeat this parser code as many times as you have Moya call sites.\n. I have never used or written a Moya plugin, I'd like to hear what people are using them for (logging/debugging I suppose?).  But from a purely swift language point of view, wouldn't it be enough to have default implementations of the Plugin methods via an extension?  Having all these plugins is useful when you only want to write one method/feature, but more verbose and tedious if you wanted to implement more than that.\nIf we provided default/empty implementations of the Plugin methods then plugin authors could just write the methods they want/need, and the API would be simpler.. Shoot, I just looked up Plugin.swift and I see that it already implements empty/default methods.  So we've got that already.\nI'm re-reading everything now.. After looking at Plugins.swift, I agree that we could revisit what we are doing with plugins.  But I'm not yet convinced that what you're proposing here is a step forward, it feels like a side step.  The reason I think that is because most of these methods are already in PluginType; all except the request and endpoint methods.\nUsing a \"plugin\" to implement those closures introduces a point of confusion for me - is it just one plugin that should create those?  What if multiple plugins can create the endpoint?  The example you provided has an endpoint argument, where does that come from?  What would it be used for in that plugin?  I don't think this is a compelling use case to do away with the current closure-based API.\nI think we should attack this from a different point of view - instead of refactoring (into what is basically an equivalent system, but not backwards compatible), let's take a look at what people are trying to accomplish with plugins, and make sure we are allowing those use cases.\nIn short: I love the idea of refactoring plugins to make sure they are serving their purpose!  Do we have any more examples of that?. I was, for a long time, of the \"let's encourage testing\" mindset, but these days I'm leaning more towards having a good separation of concerns, and hoping people choose to take the time to have stubbed responses (but it's up to them).\nI think including it in the provider makes a ton of sense, I'm on board with this change.. I agree with the master is deployable and develop (or next or release, name is not very important) is where the next version is worked on.  On any project, this setup makes it easy for people who are new to the code base to offer a PR that is a \"quick fix\".  Then master is merged into develop (not rebased and I hope everyone already understands why) and work is continued.  So easy!\nThe alternative - creating a new \"bug fix release branch\" - is also easy for an existing contributor, but more unintuitive for a new person arriving to the code base.. (and to be extra clear - @SD10 nailed it with his description of master / develop.  Patches do go into master, but breaking changes go into a separate branch.). I'm happy to take a stab at it.  Seems like Contributing.md is the right place for this.  @SD10 and @ashfurrow I'll hit you up with a draft, and then open a PR for discussion.. @AndrewSB I'm not a Carthage user, so I'm not quite comfortable putting my name on changes to carthage commands... I'll leave that to another PR \ud83d\ude09 (hint hint!)\nRebasing before merge, I think it'll need another approval before I can merge, we'll see.. @AndrewSB I'm not a Carthage user, so I'm not quite comfortable putting my name on changes to carthage commands... I'll leave that to another PR \ud83d\ude09 (hint hint!)\nRebasing before merge, I think it'll need another approval before I can merge, we'll see.. endpointsClosure vs endpointResolver caught my eye (\"endpoints\" vs \"endpoint\"), are these \"similar-yet-different\"?  I'm not familiar w/ the resolver.\n. Parameters is optional, but headers are not, that caught my eye.  Should they be consistent?\n. result and moyaResult?  Confusing variable names?  This is what I called these in the Ello app, but I'm open to suggestions for better names!\n. Trying to be helpful here, in light of #379.\n. I'm really liking this PR!  However, I'm gonna ask for a few changes to go into a separate PR, like the change from MoyaProvider to MoyaDefaults.  This is a breaking change, and I'm hoping we can support structs without any breaking changes.\n. What Ash describes here is also what I was imagining - start with what we have, instead of adding anything new, just update the examples to show that struct based endpoints are already possible.\n. mailto:ash@ashfurrow.com?  me@ashfurrow.com? :smiley: \n. For consistency with the rest of the code, I think we should add a space after : (progress: ProgressResponse).  Doesn't have to be part of this PR, we could clean up afterwards. \ud83d\ude03 \n. (same thing - on all these types)\n. We're already past the point of alpha/beta, but I would think a pre-release would be synonymous with develop (it could be considered the \"next\" version).. @AndrewSB There's nothing wrong with that, per se, but the downside is that you would have two commits that do the same thing, but that have different SHAs.  In the history, after merging, you would have both commits, but one would become effectively empty.\nA merge commit would show \"on this day, these commits were merged in from master\", which is itself useful information.. ",
    "alcarvalho": "Maybe this complicated test case would fit better as a separate test component. Even more integrated with Nimble as a matcher or something like that.\nThat way, we could have an implementation of this matcher as something that expects to be called in that particular order and when called respond with that particular stub response.\nThis is would work very much like RSpec, if anyone is acquainted to Ruby code:\nruby\nit \"should call 'bar' with appropriate arguments\" do\n  expect(subject).to receive(:bar).with(\"an argument I want\")\n  subject.foo\nend\n. Yeah, I don't really have a use case for that. I just remembered of that when I saw @colinta's comment.\nBut something that generally annoys me when writing tests with stubbed requests is that we usually only test the response component of it. Not what we send to the request. With this mechanism we could have both.\n. Any news on this?\nThis would be super awesome! I have thought about doing it myself, but never took a look at it.\nThe problem I see, is with JSON (de)serialization, because Swift does not have a good reflection system (as of 1.2 at least) to support a reflection library, so all must be done manually. If the generator takes care of that too, would be great. :)\n. If only Swift had support for default parameters to Enums, we could have .POST and others with an optional parameter with a default to nil. \nBut even if we don't have that support, we could just add more verbs that accept that to Moya.Method.\n. I would be willing to contribute on this. It seems like a more sane approach to Rx, in my opinion.\n. It seems like an unrelated thing failed. It's likely something with a real connection. All tests are passing on my machine.\n. I would love to help, too! I am still in the early stages of adopting it, but our new app's communication layer will be all using Moya. :+1: \n. :+1:\nWould also put MoyaResponse file inside a newly created ReactiveCore\nfolder.\nOn Fri, Jun 12, 2015 at 04:59 Alexander Schuch notifications@github.com\nwrote:\n\nAt the moment, I find it hard to browse code on the Github repo.\nI think we should consider adding a folder structure to make browsing Moya\non Github a better experience.\nI would keep everything the same but introduce a new Moya folder that\ncontains all the relevant files.\n- \ud83d\udcc1Demo\n- \ud83d\udcc1docs\n- \ud83d\udcc1web\n- \ud83d\udcc1Moya\n  -- Endpoint.swift\n  -- Moya.swift\n  -- MoyaResponse.swift\n  -- \ud83d\udcc1ReactiveCocoa\n  --- Moya+ReactiveCocoa.swift\n  --- RACSignal+Moya.swift\n  -- \ud83d\udcc1RxSwift\n  --- Moya+RxSwift.swift\n- README.md\n- Moya.podspec\n- etc...\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ashfurrow/Moya/issues/138.\n. No, it's used by reactive in general, meaning ReactiveCocoa and RxSwift, right now. I have extracted it from the ReactiveCocoa integration when I implemented the RxSwift provider to be a common core.\n\nBut there's a ticket #134 to remove all comments from file's headers.\n. @SRandazzo the lack of an xcproj is strange to me too. The way I do it here is by opening the Demo to edit the code for the library. Not the most intuitive.\n. Everything looks fine to me. The new code is clearer, indeed. Nice job! ;)\n. One thing we could fix before the release are the versions to which we depend on CocoaPods to support sane updates on them like mentioned on #153. I have also checked that if we update all the pods of the Demo project we fetch the version 0.4.0 of Quick that won't compile with Swift 1.2.\n. I just found a problem with cocoapods versioning, though.\nIf we add the ~> to ReactiveCocoa, when we run a pod update on the Demo project it downgrades to alpha version:\nInstalling ReactiveCocoa 3.0.0-alpha.1 (was 3.0-beta.6)\n. Yeah, but the intent here was to update the pods, really. I don't know if that should be done on a library regularly. I did it also to test if everything still works with the latest versions of the libraries that we should support.\n. Yeah, that's why I have restricted it to 0.3.x here #157 \n. Also keeping the Pods folder in the project generates a lot of noise when we update something. :disappointed: \n. Do you think it's better to squash these commits? Or maybe separate the Pods folder mess from the rest of the updates?\n. I too prefer that. Done! Or not? Let me check it. :worried: \n. It's ok. But atom removed some white spaces that I haven't noticed before from the changelog.\n. If you have no further comments, I will merge this PR. :)\n. That's great! And there's someone working on the migration of RxSwift\nalready.\nMaybe we'll have soon. ;)\nOn Fri, Jul 3, 2015 at 18:54 Ash Furrow notifications@github.com wrote:\n\nno problem :) Probably a good idea.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ashfurrow/Moya/pull/162#issuecomment-118432120.\n. Great, thank you!\n\nNow the tests are failing because some files are pointing to the absolute path on someone's computer. Maybe yours?\n\u2326  unable to read module map contents from 'Target Support Files/Pods-Alamofire/Pods-Alamofire.modulemap': Error Domain=NSCocoaErrorDomain Code=260 \"The file \u201cPods-Alamofire.modulemap\u201d couldn\u2019t be opened because there is no such file.\" UserInfo=0x7feb2a75bdc0 {NSFilePath=/Users/distiller/Moya/Demo/Pods/Target Support Files/Pods-Alamofire/Pods-Alamofire.modulemap, NSUnderlyingError=0x7feb2a7768f0 \"The operation couldn\u2019t be completed. No such file or directory\"}\nThis /Users/distiller/Moya/Demo/Pods/Target Support Files/Pods-Alamofire/Pods-Alamofire.modulemap folder is inside someone's home folder. :wink: \n. Are the tests working on your machine? From the log I can see now is matter configuring the correct version of XCode on the circleci.yml file. But this could be just the beginning. :worried:\n. I see. After you get the tests running locally we'll need to see what is the correct XCode 7 version for Circle CI, if they support it already. Just to make sure the tests are passing there too. \n. Ok, so I have tried to fix this, but it broke my test when I added the >- variable. It won't complete whet this is present.\nThe sync is working well on RxSwift but it won't complete if added to the ReactiveCocoaMoyaProvider.\nHere is the test for the RxSwift to see if you can help me with that. I don't like the way it is but I couldn't think of another way:\nswift\nit(\"returns identical observables for inflight requests\") {\n    let target: GitHub = .Zen\n    var response: MoyaResponse!\n    let outerSignal = provider.request(target)\n    outerSignal >- subscribeNext { (response) -> Void in\n        expect(provider.inflightRequests.count).to(equal(1))\n        let innerSignal = provider.request(target)\n        innerSignal >- subscribeNext { (object) -> Void in\n            expect(provider.inflightRequests.count).to(equal(1))\n        }\n    }\n    expect(provider.inflightRequests.count).to(equal(0))\n}\n. Sure, @ashfurrow. Done! :wink: \n. @ashfurrow yeah, the tests are stalling. I think we need to come up with a different way of testing concurrent requests for inflight logic. But I don't know how, yet.\n. The tests are now passing on my machine. I am just not sure if this is a good solution.\n. Great! I hope this is working as intended.\n. Best gif ever for merging a PR! :grin: \n. @iOSUser110 what do you have set on your parameterEncoding? This situation described by @mpsnp only makes sense to me if you're using URLEncoding.. @iOSUser110 I don't think it's advised to use URLEncoding for complex data types like this one. If you're able to change it to a POST with JSON format it would be much better. I'm not sure how I would do a workaround to make it work with URLEnconding.. Hi, @Deniallugo!\nHave you tried using one of the authorization plugins? Maybe that would be easier. You can find the documentation here.. @Deniallugo I'm gonna close this. Feel free to reopen if you're still having problems with it.. Hi @longshihua,\nyou have a few options here. The way I usually do is to create a static function on property that returns a provider to me. I usually do this in a separate struct or class in way that I can have a separate implementation for tests if necessary.\nSomething like this:\nswift\nstruct HTTPServiceProvider {\n    static var shared:  RxMoyaProvider<HTTPService> = {\n        let endpointClosure = { (target: HTTPService) -> Endpoint<HTTPService> in\n            let defaultEndpoint = MoyaProvider.defaultEndpointMapping(for: target)\n                return defaultEndpoint.adding(newHTTPHeaderFields: [\"Accept\":\"application/json\"])\n            }\n        provider = RxMoyaProvider<HTTPService>(endpointClosure: endpointClosure)\n    }()\n}\nBut I suppose you can also use your setupProvider making it static in the struct above and call it from your view controller. \nA third option would be to have the setupProvider as a function in an extension of UIViewController, but I would not recommend this one as it's the least clear IMHO.. Sure thing. Even remove all copyright notices?\n. Thank you! :smiley: \n. Ok! I'll just correct it, then...\n. Ok! :laughing: \n. There's none. It's just the usual, recommended, way of creating an Observable. It's also shorter. :wink: \n. @ashfurrow yeah, it is... I just avoided creating a new queue due to my lack of knowledge on memory management of queues with Swift. I didn't know if I would need to release it and all that. But that's nice!\n. ",
    "scottrhoyt": "Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Sounds good to me.. Looked at this more and took a look at @kylef's URITemplate.\nI'm not sure I see the advantages to incorporating it here. This is what our current approach would look like:\nswift\nvar path: String {\n  switch self {\n  case .repo(let user, let repo):\n    return \"/\\(user)/\\(repo)\"\n  }\n}\nUsing the approach from URITemplate, we could get something like this:\nswift\nvar path: String {\n  switch self {\n  case .repo(let user, let repo):\n    return uri(template: \"/{user}/{repo}\", values: [\"user\": user, \"repo\": repo])\n  }\n}\nThis would introduce more expensive and fragile Regexes into constructing paths, has fewer compiler checks, and doesn't really look more readable to my eyes (granted Swift's string interpolation looks kinda ugly in paths).\nUsing reflection, I could get something like this:\nswift\nvar path: String {\n  switch self {\n  case .repo:\n    return uri(template: \"/{user}/{repo}\")\n  }\n}\nThat does look nicer than the previous example, but it adds the additional drawbacks of requiring that the tags of the URI template match the order and number of associated values in the enum case, so it would be harder to associate any values not in the URI with the enum case. Also, you wouldn't actually be matching the tags--you could use \"/{dog}/{cat}\" and get the same result.\nSo at least in my opinion, our approach is superior because no regex and compiler checks. Maybe I am missing something though? \ud83e\udd14. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Hey @ashfurrow. I like that approach! I was thinking of something similar myself. I had a few of questions for you:\nI assume you are using NSUserDefaults for persistence between app launches. That being said, I don't see a .synchronize() call anywhere, so are you just relying on the periodic automatic synchronization? It also looks like AppDelegate clears out the token values from user defaults at launch. If that is the case, then is using the defaults system as a on-disk cache useful at all? Is it just being used as an in-memory cache? If so, wouldn't you get the same effect by giving the XAppToken a static var to store an in-memory version of the current token? As much as I hate that sort of global state, it doesn't seem worse and is as testable as NSUserDefaults. Sorry if I am completely misunderstand the intention here. \ud83d\ude2c \nAlso, could you point me to where in the code you inject the tokens into the requests? I'm really interested in using a similar pattern, but this is my first go around with Moya and that's one of the last pieces of the puzzle for me. Thanks!\n. I'd love to get this working as well. However, short of some fragile hackery, I don't see it as a possibility while SPM doesn't support setting the deployment target and doesn't support non Mac/Linux platforms or depending on Apple Frameworks.\nThe best long term solution would be hassle the SPM folks to add this in time for the next Swift version.\nIf SPM support is high priority, the other option is to depend instead on an Alamofire fork with the offending functionality removed (if possible) until the underlying issue in SPM is resolved. This could even be the beginning of replacing Alamofire with a Moya-specific URLSession wrapper. That would obviously come with it's own list of pros and cons.. Thanks @AndrewSB. That is good to know. Like you said, you were using it very similarly to a submodule. I suspect you could get Moya to build just fine using a similar method. Even though swift build might fail, you can drag the resolved dependencies' source files into an Xcode project and build from there. To get swift build to work is another matter.\nThe core of the issue holding up Alamofire seems to be a dependency on a newer version of Foundation than the version SPM defaults to. The solution proposed by the Alamofire maintainers is to basically use Xcode configurations to override this behavior. A pure SPM solution would involve being able to depend upon specific Apple frameworks within Package.swift--this is what currently doesn't exist.\nIf the goal of getting SPM working for Moya is to add Linux support (as opposed to another macOS-based dependency manager), then the Foundation dependencies within Alamofire will likely only cause even more headaches. This is because of the how Foundation is deployed on Linux (bundled with Swift and not available via SPM) and how it is out of sync with Foundation on Apple platforms in terms of both API naming conventions and missing functionality. This makes smaller projects a hassle to port to Linux and maintain that support. I can imagine Alamofire would be a much larger undertaking.. Hey @AndrewSB, I took a look at this and realized it just needed one small change to build correctly via SPM. Might be a good idea to add an SPM build job to CI to catch these kind of things in the future (could be a separate PR), but this is looking good! \ud83d\udc4d . Try a swift build with that commit that I pushed. I think it builds fine now.. I think a way this can be accomplished now is to create a custom ParameterEncoding that searches for the \"key\" parameter makes sure to encode that first.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Well, at least my reading of the docs lead me to believe that I could extract the original response data by casting the Moya.Error to an NSError and then retrieving its userInfo[\"data\"] value. That didn't work for me. Retrieving the response is straightforward the way I mentioned above, it's just different than what the docs say.. @sunshinejr , the intention here is to replace the use of requestClosure for a large number of use cases. What I'm not a fan of about requestClosure is that if you make use of it, you are overriding default behavior and must offer a replacement for that behavior--even if it is trivial. It also isn't very composable with respect to chaining request modifications which discourages creating extensions for Moya to handle common use cases.\nMy hope is that this helps resolve a lot of the questions like \"should this be a requestClosure or an endpointClosure\" by saying that if the intention is to make a modification of a URLRequest, it should be a plugin--and maybe that plugin already exists! I think the question is whether or not those closures still would be necessary.. The trivial case is tested by default. Testing the non-trivial case should be pretty straightforward. Just add a header to the request/response and then check for it in willSendRequest and the completion closure respectively. You could go further and test that the order of plugins is preserved, but I don't know if that is necessary unless we are documenting that assurance. I would have written the test, but it doesn't look like the test suite is in this repo?. I wrote some simple tests. Because I'm not that familiar with Quick, I put them where was the easiest for me which was where MoyaProvider with delayed stubs is being tested. It should probably go somewhere else since you don't need delayed stubs to test this and it's only increasing the test time unnecessarily, but there was already a TestingPlugin being used here. I'll leave the rest as an exercise for the reader.. I think the biggest considerations here revolve around the API surface area that is being exposed. Once this is in place, it will be a source of future breaking changes that will need to be managed. Also, there is the question of whether or not requestClosure and endpointClosure should be deprecated or are still useful. I think there are more pros than cons with empowering plugins though.. I don't think it would be a breaking change.. This would be hard to put in the Moya framework because you'd have to come up with a way to inject a lot of application-domain-specific information into Moya without bloating the API. You'd also lock the consumer into a particular JSON deserialization library which they'd need to adopt in their models.\nThat being said here are two ways to accomplish this right now:\nSubclass/extend MoyaProvider\nI override RxMoyaProviders request method to handle my object deserialization as well. The signature looks something like this:\nswift\nrequest<T: ModelProtocol>(_ token: TargetType, object: T.Type) -> Obeservable<T>\nrequest<T: ModelProtocol>(_ token: TargetType, array: T.Type) -> Obeservable<[T]>\nIn this example ModelProtocol is a protocol that all my models conform to and extends the JSON deserialization protocol of your choice (e.g. Unboxable or Mappable). You could omit passing the type and instead overload just on the return type. RxSwift does plenty of this. Either way you'll have to supply the type info implicitly or explicitly at the call site, and I have a more pleasant experience with autocompletion the sooner and more explicitly I do that.\nCreate a Networking layer\nThis is similar to the above but instead of putting that logic in RxMoyaProvider or MoyaProvider, you put it in a layer that wraps the provider. The nice thing here is that you can supply type information in the function signatures (e.g. getUsers() -> Observable<[User]>). But you are adding another layer of abstraction and at this point the primary benefit that Moya would provide is just organization of API information.\nBoth of these options are also nice because it gives you a spot to put domain specific error mapping and other information. For example, I'm currently using Moya to interact with an app that returns responses with the signature:\njson\n{\n  \"code\": \"<success or error code>\",\n  \"message\": \"<message>\",\n  \"data\": \"<dictionary or array of data>\"\n}\nSo at this middle layer I can also map to domain specific errors and embed the information that I need to look at the data key to map my models.\nHope that all helps. Let me know if you have any other questions.. Using associatedTypes will allow you to inject model type information into the protocol. The problem is that then you can only return one model type for each conformance to Api. This forces you to organize your API client code by return type which might not be the ideal organization--particularly since ModelProtocol and [ModelProtocol] returns would need separate Apis.\nWhile Moya was designed with enums in mind for use as TargetTypes, you can use any data structure to conform to TargetType. The nice thing then is that if this makes sense in your situation, you can use structs to conform and add a protocol on top of TargetType with your associated types. Then you can subclass or extend MoyaProvider to add the deserialization behavior.\nI can't speak for all @Moya/contributors, but IMO I don't see model deserialization as being added in the near future. Mainly because doing so would force consumers into a particular convention for their model code and there is no single best practice that has emerged for JSON deserialization--all the libraries have their pros and cons. However, Moya Community Extensions offer a good way to get this functionality while still being flexible on how you want to do JSON deserialization.. There are a couple of things to unpack here. First of all, currently Moya's support for executing simple requests against a single URL is pretty light. There are some new features suggested in #861 that would make this easier, but we are still deciding whether or not they agree with Moya's philosophy. If you want to include this in your own code, I'd suggest looking at how SingleURLTarget is implemented and possibly include that in your code.\nWithout a SingleURLTarget, I would recommend using Alamofire instead for the dynamic URL requests.\nThe second part is writing a TargetType that can accept multiple baseURLs and cycle between them. For this I'm inclined to suggest that you create a new TargetType that isn't an enum (possibly an extended version of SingleURLTarget). You can even embed a separate enum into this structure to retain some of the switch semantics that Moya promotes. You will also want to subclass MoyaProvider to contain the state you need (e.g. the index of the baseURL to try). You may also want to change the behavior of it's request method to emit an error (from catchError) when the baseURLs have been exhausted.\nBeyond that, you should just be able to string the requests together with RxSwift similarly to your example. Let me know if that gets you going in the right direction or if you have any other questions!. There are a couple of things to unpack here. First of all, currently Moya's support for executing simple requests against a single URL is pretty light. There are some new features suggested in #861 that would make this easier, but we are still deciding whether or not they agree with Moya's philosophy. If you want to include this in your own code, I'd suggest looking at how SingleURLTarget is implemented and possibly include that in your code.\nWithout a SingleURLTarget, I would recommend using Alamofire instead for the dynamic URL requests.\nThe second part is writing a TargetType that can accept multiple baseURLs and cycle between them. For this I'm inclined to suggest that you create a new TargetType that isn't an enum (possibly an extended version of SingleURLTarget). You can even embed a separate enum into this structure to retain some of the switch semantics that Moya promotes. You will also want to subclass MoyaProvider to contain the state you need (e.g. the index of the baseURL to try). You may also want to change the behavior of it's request method to emit an error (from catchError) when the baseURLs have been exhausted.\nBeyond that, you should just be able to string the requests together with RxSwift similarly to your example. Let me know if that gets you going in the right direction or if you have any other questions!. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. After this was merged, when I run pod install in the Demo directory, I get this:\n\n\nI'm using the beta of the new cocoapods release because I was having issues with the current release. I think we just need a minor change to the Podfile to support this.. Yeah, I don't know what's going on here. After playing around a bit more, I think it is quite possible it was on my local machine. Running a pod update ReactiveSwift and not committing the changes seems to have solved it for me. This is likely some difference between cocoapods 1.1.1 and 1.2.0-beta3.. @jonlambert Any chance you could create a public repo that reproduces the problem? I'd jump in and do some debugging.. Also, one thing to note... while your Alamofire.request example specifies JSONEncoding, you are manually encoding the parameters in the URL. In the Moya instance, these will instead be encoded as JSON in the HTTP body. This might not make a difference depending on your API code.. @jonlambert, glad to hear that worked for you! With the introduction of #859, you can now set your parameterEncoding directly in your TargetType. This change is currently only available on master.. Sorry to hear the issue is back. My recommendation would be to enable curl output on the NetworkLoggerPlugin, add it to your provider, and use the curl output to test the requests from your CLI to diagnose the problem. If you aren't seeing any output from the logging plugin, then something is probably going wrong on the Moya side and might be able to be reproduced in a sample repo for us to debug.. Thanks for the investigation @justinmakaila! This is quite related to the issue brought up in #905.. @rlam3, @jonlambert 's suggestion looks like what you are looking for then. Does this resolve the issue for you?. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. In this case your best bet is to modify the httpBody of the underlying URLRequest. You have two choices on where to do this: either in the providers requestClosure or by creating a plugin and using the prepare function.. If you can represent all of your XML data in key/value format, another option would be to create a custom parameter encoder conforming to ParameterEncoding and utilize the TargetType.parameters property to pass the data. Then in the endpointClosure create the endpoint with your custom parameter encoder.. You can now use TargetType.parameterEncoding to change the parameter encoding, but you would still need to create a custom XML-based ParameterEncoding.. @k8mil No problem! If you wind up creating a custom XML ParameterEncoding, it would be awesome to submit that to Alamofire in a PR. That way we can offer it to all Moya consumers as well.. @shivayogic, in the code you posted, it doesn't look like there are any subscriptions to rx_getAuthToken, so the request won't be made. The do operator only specifies a side-effect to be performed. Try replacing the do operator with subscribe. Then uncomment the expect.fulfill() and see if this test passes.. Hey @liliah.\nI can't say that I know specifically what is going wrong here, but if I had to guess, I would say that there could be a problem with how the authorization header is being encoded and/or how it is interpreted by your API. If you have the ability to change how authorization headers are used by the API, I think you might have fewer issues if you use the standard approach for access-token-based authentication. This is the standard format:\nAuthorization: Bearer <access_token>\nIf you have to use the current approach, I would note that the capitalization of Authorization also changed. That may be the source of the different behavior as well.\nFor debugging purposes, you can also utilize the NetworkLoggerPlugin. Turn on the curl output and then you can try the generated requests via CLI for another perspective on what might be going on.. Were you able to get this sorted out @liliah?. Glad to hear it is working for you! \ud83d\udc4d . That is interesting @mihailstumkins. Would you mind opening up an issue to track that? AccessTokenPlugin and AccessTokenAuthorizable are new additions, so there is a possibility that they contain a bug that is not being tested for.. This is probably a result of the underlying Alamofire.URLEncoding. If your API can take parameters encoded as JSON in the HTTP body, I would suggest  switching to JSONEncoding. The easiest place to do this would be in the endpointClosure when initializing the Endpoint.. You can now use TargetType.parameterEncoding to accomplish this.. For RxSwift, the favored approach to updating your UI would be to use bind. You can find some good tutorials for how to do so via a search.. @rlam3 were you able to sort out using bind to accomplish what you want? If not I suggest working through these excellent tutorials from our very own @sunshinejr.. Since there hasn't been any activity on this thread for some time, I am going to go ahead and close it. Please re-open or create a new issue if you would like to discuss further. Thanks.. Yep!. Sure, I went ahead and updated the documentation.. Thanks!. Yeah, there is nothing functional here. It's purely stylistic. I prefer Void, but if others would like to stay with (), we can silence these warnings by disabling this rule in .swiftlint.yml.\n\nOn Dec 24, 2016, at 4:36 PM, Andrew Breckenridge notifications@github.com wrote:\nCould someone explain what this change does?\nFrom my understanding, Void is just a typealias for (), what is swiftlint's complaint?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. void_return. Yeah, there are pros and cons to both approaches.\n\nOn one hand, you can see even from the sample TargetTypes in TestHelpers.swift, defaulting for all TargetTypes helps clean up a decent amount of boilerplate. I like how this makes simple API implementations even more readable.\nOn the other hand, the lack of default implementation is a powerful means for discovering functionality and ensuring intended behavior.. I don't have any personal code to share, unfortunately. What got me thinking about this is when I was thinking through a good strategy for #836. In that case I thought writing all the typical TargetType boilerplate to utilize Moya in a simple request was a bit unnecessary, yet using Alamofire felt like going against the idea of Moya in the first place.\nThat made me realize you'd be likely to run into similar scenarios when utilizing 3rd party APIs in a light way along side your own API client written with Moya. Some examples of this might be adding weather information to an app, using an image API like Flickr, or accessing a Google location API. In these cases you are unlikely to need to fully specify TargetTypes properties. You may need nothing more than baseURL, path, and possibly parameters.\nAlso, I find myself breaking up my API client code into multiple TargetTypes to keep them from becoming monolithic (anything more than a handful of cases with several associated values each and a TargetType starts to get less readable IMO). In these cases, I often wind up with TargetTypes that don't need method, task, or even parameters to be configurable. So I do wind up repeating a decent amount of boilerplate.\nFinally, with the introduction of validate and now parameterEncoding with default values, the case for not providing defaults for the other properties felt a little more diluted to me.\nBut like said, I definitely see the other side here so I was hoping this proposal would bring out some other opinions.. If you do a search for how TargetType is used in public GitHub repos, you can see there is a high percentage of cases where the suggested defaults would reduce the amount of code needed. method, task, parameters, and sampleData are commonly get, request, nil, and Data() respectively. I would think there is some bias in this sample because more complicated API client code is probably more likely to be in a private repository, but it's still an interesting data point.. @Moya/contributors Any more thoughts on this?. Thanks for the suggestion @AndrewSB! Do you mean a new protocol conforming to TargetType and adding default implementations (a sub-protocol, if you will)? I see where you are coming from on that.\nIt's certainly an option, yet at first blush I'm not in favor. That is primarily because I think making the API surface area larger works counter to the goal of this PR--which is to make Moya easier to use for simple cases. An OpinionatedTargetType would require users to read more documentation to confidently use Moya, and that's really the same problem as is introduced by just doing the defaults on TargetType except you don't get all the benefits.\nAt it's heart, this is a philosophical decision for Moya about convention or configuration. I favor convention, and if you look at the defaults provided when you execute Alamofire.request or use URLSession to process a URLRequest, there are similar approaches. If the goal of Moya is to provide a unified networking layer, then I feel we should endeavor to make simple tasks as easy to accomplish with Moya as with the two technologies it replaces. By not doing so, we encourage just a new type of fragmentation of networking code. Even if this causes the self-documenting nature of TargetType to not be maximized, it will still be pretty clear to my eyes, and better and more organized than writing an ad-hoc networking layer on top of Alamofire or URLSession. Users will still have the option to fully specify the TargetType protocol for maximum clarity.\nBut I really think we need more than just the two of us to weigh in on this, since it is a decision central to Moya's philosophy.\n. If we are going to advocate that simple API requests still be handled with Alamofire/URLSession then I think we should change the image at the top of the README to this:\n\nAs for sampleData, even as an ardent unit tester, I think there is a difference between first-class support of unit testing and first-class forcing people to write testing code. We all know very few projects get started with full test suites in place. If tests do eventually get added, it is often done at a later date (i.e. not much TDD going on). The amount of Moya code that starts off with\nswift\nvar sampleData: Data {\n  return Data()\n}\nconsiderably outnumbers the amount of code that is using sampleData in it's intended fashion. This search backs that up at least for public repos. By adding even a little bit of friction to selecting Moya as your networking layer because of it's verbosity and forcing of unit testing code into your app, we just encourage people to go a different route that will be harder for them to add unit tests once they get to the point that they realize they need it. While it is admirable to say that we can change testing etiquette by forcing people to implement sampleData, the reality is that it's still just a--confusing for anyone that isn't familiar with Moya--Data() away from being ignored and that is what most people are doing. Changing testing behavior will require a bigger impetus than a single networking library, but every single networking library should still support it in some way. Frankly I think Moya should go further to support testing by providing an easy way for test data to be stored in fixtures because if you want to use real returns from even a moderate-complexity API, the TargetType code quickly gets bloated back to unreadable status.\nI started off thinking that the verbosity of TargetType was a positive because of it's self documenting nature. But I think I have come around to see it differently. When I look at this:\n```swift\nenum SimpleApi: TargetType {\n  case newsfeed, messages\nvar baseURL: URL { return URL(string: \"http://api.com\")! }\nvar path: String {\n    switch self {\n    case .newfeed:\n      return \"newsfeed\"\n    case .messages:\n      return \"inbox\"\n  }\n}\nMoyaProvider.request(.newsfeed) { //... }\n```\nIt is pretty clear to me that what is being executed is a simple GET request with no parameters. That's the same as if I were to see this:\nswift\nAlamofire.request(\"http://api.com/newsfeed\") { // ... }\nThat is because pretty much every way that I interact with HTTP (Alamofire, URLRequest, curl, wget, Postman, my web browser) defaults to a GET request with no parameters. And the reality is that once your API becomes complicated enough to really worry about whether API specifications are clear in the Moya code, you will have overridden most of the defaults and gotten right back to where we are today, except you'll be glad that you used Moya for even the simple things because now you don't have to go back and figure out how to write unit tests for all the times you fell back to Alamofire.. @BasThomas I think we definitely need that documentation if we are going to provide default values. If not, then the documentation is pretty trivial--but probably still a good idea to have the whole surface area of your public API documented. I'll open up a separate PR with some trivial documentation.. Do any @Moya/contributors know why Danger might be failing here:\n\n. I'd love to pick a direction on this one way or another soon. Does anyone else have any opinions on whether or not this is a good fit for Moya?\nIf we decide to not go this direction, it's not a big deal to me. Other users and I can still add these defaults without much hassle. We can even add a suggestion in the docs. However, I do think it aligns with Moya's stated goal:\n\nSo the basic idea of Moya is that we want some network abstraction layer that sufficiently encapsulates actually calling Alamofire directly. It should be simple enough that common things are easy, but comprehensive enough that complicated things are also easy.\n\nIf we decide against defaulting, we might want to revisit whether or not parameterEncoding (and possibly validate) should have a default before the 8.0.0 release.. Alright. I'm going to leave this PR open for the moment so that others that might be gone for the holidays can consider it when they get back. It can still be done post 8.0.0 since it won't be a breaking change. \nI think we can make the case for providing a default for validate since it's suppressing Alamofire behavior and we try to not leak Alamofire where possible. However, I'll open a PR to remove the default for parameterEncoding and include that default in this PR. That way we are consistent on the current approach and can decide on providing defaults for TargetType as a whole.. If no-one has any further thoughts on including this, I will go ahead and close this.. The quotes in the JSON aren\u2019t escaped so the compiler is not interpreting this the way that you want. For sampleData this complex, instead of going through and escaping all the necessary characters, I would recommend that you load this data from another file.\n\nOn Dec 25, 2016, at 10:34 AM, Danny M notifications@github.com wrote:\nI have a question. I want to make sure I understand the purpose of sampleData. So, is this where examples of the JSON data you'd receive from the API go? If this is the case, I'm having an issue. The documentation for the API I'm using provides examples. I'm trying to use these examples, so I copied and pasted them and put the quotes around the text, but something with the quotes somewhere is messing up making Swift think it's a comment, I need to be able to put this into a string. Here is what's happening:\nhttps://camo.githubusercontent.com/be0f50333832858332202c9880fe94f619d463c8/687474703a2f2f692e696d6775722e636f6d2f315038634939572e706e67\nSome of it is being picked up as a string, and some of it as a comment. All I did was put quotes around it.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/Moya/Moya/issues/863, or mute the thread https://github.com/notifications/unsubscribe-auth/AED9sk_YmhLnaITX_28vWkowci38gMM1ks5rLrczgaJpZM4LVc2W.\n\n\n. Thanks for the suggestion @EvilNOP. That is exactly what was done in #859 with URLEncoding being the default. A new release hasn't been cut yet so it is only available on master at the moment.. @BasThomas, I think that number 3 is also being done in #859. It looks to just be the change needed to encorporate TargetType's parameterEncoding instead of the hard-coded URLEncoding.default.. I agree it can get ungainly fast. I would recommend loading the data from files instead of including it directly in your TargetType. I'm going to work on including some helper functions in TargetType for this.. Another option you have right now is to put the sampleData into a separate file.\nFor instance, create a GitHub+SampleData.swift that contains just this:\nswift\nextension GitHub {\n  var sampleData: Data {\n    // put your sample data here\n  }\n}\nThat file would still be pretty ugly, but it would clean up the main API code.. Can you post the code for your TargetType?. It is an issue with your braces. You put most of the properties inside of the sampleData computed property.. @dannymout I noticed you deleted that code block. Did that settle the issue for you and can we close this or do you have another question about TargetType implementation?. I wonder if it has anything to do with this (from CircleCI logs):\n\nI wouldn't think so, but that also looks strange to me.. Removing Cartfile.resolved locally doesn't seem to have an effect.. Thanks @AndrewSB! I wonder if it would also be possible to add the Carthage/* directories to the build cache and avoid rebuilding all together, except maybe for a tagged release or master builds?. This would also be good to figure out before #643 because we will want to test SPM builds as well and those are likely to take as long (with no current option to download pre-built modules). On travis, I split builds up into 3 separate parallel jobs (macOS-Xcode, macOS-SPM, and Linux-SPM).. I think that's a really nice approach @AndrewSB. \ud83d\udc4d It might be nice to have this be the behavior on non-master branches and PRs, and then trigger a full bootstrap on master and tagged released as a sanity check. What do you think?\nAll in all, it would be great to get the PR build time down from the ~20 minutes right now to < 10. What do you think @Moya/contributors? Any other ideas on how we might accomplish that?. \nBuild time down over 50%. Yay!. Hmm... that's odd. Not quite sure why this would reduce test coverage by such a significant amount.. Haha. Yeah, I didn't think so either. But I was a bit unsure because of Danger calling the build failed. I know I could add a #trivial tag to the PR, but this didn't really feel trivial either. Think I should go that route?. No problem! Anyone have any ideas on the test coverage?. Ok, so I think I understand a little more about the drop in test coverage. For some reason, CodeCov is registering 285 missed lines for MultipartData.swift even though the file only has 32 lines with 5 lines of executable code. I wonder if it's possible that there is some confusion between Moya's MultipartFormData and Alamofire's MultipartFormData. These type name collisions are \ud83d\ude29.. I read the issue to mean that the OP didn't think RxMoyaProvider emitted a complete after a request. So I added a test to ensure it did. I guess I thought that closed the issue from the perspective that the test shows it isn't an issue. But we can leave it open if you think that's a good idea or that the new test doesn't go far enough.. I am also including a fix to the issue seen in #871 where coverage was reduced due to a file name collision with Alamofire.. Looks like the fix worked, so this somewhat mitigates the loss in coverage from not including testing code in the coverage metrics.. @GTMYang were you able to resolve you issue or do you need any additional assistance?. If we do this, we should probably also rename Moya+RxSwift and Moya+ReactiveSwift. I will do that in a further PR if this gets merged.. Going to close this unless it can be reproduced.. I went ahead an renamed the function to stubbedResponse(forFileNamed:). What do you guys think?. I went ahead an renamed the function to stubbedResponse(forFileNamed:). What do you guys think?. Oops. Messed up a rebase it looks like. Let me retry.. Looks good now.. I'm pretty sure it will behave the same way as a fatalError() but I will open up a test branch here and throw an assert in to see what happens.. I'm pretty sure it will behave the same way as a fatalError() but I will open up a test branch here and throw an assert in to see what happens.. According to this failed build it looks like it behaves the way we want it to.. According to this failed build it looks like it behaves the way we want it to.. @justinmakaila I agree that point should be discussed. We should consider whether or not Moya needs a rethink on how it handles testing. I think it might.\nHowever, if the current approach holds, then we advocate that test data should be provided by TargetTypes in production code. Since it's not ideal to provide most real world test data from code, we should provide the tools necessary to load it from files. Sure, it might be pretty trivial stuff, but at least we could update our documentation and/or demos to show how it's likely to look in the real world instead of counting on users to come to this same conclusion.. @BasThomas, I'm pretty indifferent to the two names. I still slightly prefer omitting the first argument label, but that's just my personal style.. I don't disagree with you. However, I just think our viewpoint might be in disagreement with the stated goal of Moya:\n\nTreats test stubs as first-class citizens so unit testing is super-easy.\n\nBy forcing TargetTypes to provide a sampleData, it seems we are already on the slippery slope of recommending testing patterns. This PR goes not much further really, as it's just providing an optional tool and there is nothing to say you can't still do it the old way. \nOn the flip side, judging by the issues that I referenced above, some users do run into the problem of our documented pattern not going far enough to support testing with real world responses from moderate complexity APIs. The goal of this PR was to prevent all those users from having to write this method themselves, not represent my personal feeling on how testing should be done.\nPersonally, I think tests data should be in the test target and supplied by the test objects, not bundled with the main app. But that approach has it's own drawbacks, so I respect that Moya is trying to do it differently.. That is fair. To me this is less divergent and more a natural extension of the tools we provide for testing, but I totally understand the pushback for going even a bit further in this direction as it's further promoting a specific testing pattern that doesn't sit well with everyone... including sometimes myself.\nThis is code that I personally use to reduce the pain of managing complex responses for sample data, but it's not a one-size-fits-all approach. Issues led me to believe others were having the same problems, so I offered my help. We don't have to include it though.\nIf you had some other ideas on how we could make testing more open and flexible to all approaches (including keeping test data in test bundles) while still keeping it first class, I would love to see that PR come through. \ud83d\udc4d . The consensus here looks like this isn't a good idea, so I will go ahead and close this.. Oops wait, need to edit the CHANGELOG to mark parameterEncoding as a breaking change.. Should be good to go now.. I can understand that line of reasoning @AndrewSB. I think it would be a reasonable way to go if Swift and SourceKit had stronger support for namespaces. Unfortunately that's not the case yet.\nThe only objective thing I can say about what is idiomatic or not is that I just scanned through the 10 most starred Swift libraries and I couldn't find any other examples of publicly overloading Swift.Error. So I think it would be fair to say that most users familiar with these libraries wouldn't expect it. That's not to say that doing something unexpected in a software library is bad, but there should be some good reasons for it.\nAlso important to crafting a well written library is consistent reasoning. I think we all can agree it wouldn't be a great idea for us to overload Swift.String or Swift.URL. I can share some tearful stories of days lost dealing with a library that overloaded Swift.String (the punchline is that I wrote some declarations as let a: String when they unexpectedly needed to be let a: Swift.String \ud83d\ude2d). So if overloading the standard library type names is bad in general, then we need to ask why should Swift.Error be the special case? Again, it's not to say having a special case is bad, but it should come with some good reasoning.\nParadigm can be good. But I think they are only good when they make users lives better or easier.\nI don't want to rock the boat too much here. I just think if we want to shift the paradigm to a special case that is unexpected, it should come with solid reasoning and make users' lives better. The reasoning for Moya.Error doesn't seem robust and I think it actually might makes users' lives a little more difficult--even in writing about this PR we have to explicitly namespace a swift standard library type .\nI like your idea of every module exposing a Module.Error. It has a lot of appeal to it. If we could get everyone on board with that, having such a standard convention might be all the reason we need. But realistically I don't think it would work because not every library can cleanly fold all of their errors into a single Module.Error. For example, a library might be clearer and cleaner with a JSONError, HTTPError, and CacheError. So I'm not convinced that this would work as a widely-accepted standard either.\nSorry for the wall of text. I just think that Moya is so well respected that it helps craft standards, so we need to really think through how we make use of that.. No problem! Thanks for entertaining the idea!\nI think embedding it into MoyaProvider is an interesting solution, yet I see a number of drawbacks:\n\nAt ~50 lines (without much documentation), folding Error.swift into MoyaProvider will be a significant expansion.\nThere are other types than MoyaProvider that need access to Moya.Error (e.g. PluginType and Response). So embedding it will cause those structures to need more namespacing and is probably a code smell that it shouldn't be embedded.\nIt might not be straightforward for people to find Error when browsing the source.. FYI, the test code can be found in the Demo dir. Do a pod install and open up the Demo workspace to access and run the test code.. Yeah, tests don't add a lot here, except maybe for underlyingError. And if you're gonna test that, then maybe just include the trivial tests for the others for an easy coverage win? \ud83e\udd14 What do you think?. Cool. I actually just started a branch to work on the tests portion today. It also included migrating CircleCI to test out of Moya.xcodeproj and speeding up builds by caching carthage and fixing the problem from #870. Take a look and maybe we can figure out how to combine them \ud83d\udc4d.. Haha. \ud83e\udd47 Priceless. \n\nPretty much done on my end. I had to implement the cache because the builds slow down majorly once we need to use carthage for testing. I was just figuring out how to fix the rake test:carthage task so that it also would be speedier. I don't think it is really even doing what is intended right now since it's checking out an old tag instead of building the current commit. Take a look at sh_move_tests branch.. I've also been testing it with cocoapods to make sure nothing breaks there and I added a new task to build the Demo project just to ensure it builds since nothing else is doing that now.. No, I haven't run in to that. Just opened up a PR to facilitate comparing and getting this all integrated. Build times are greatly sped up. \ud83d\ude01 #886 . No worries @AndrewSB. I actually have all 3 of those sorted in #886 already in addition to the cache improvements.. Well, I only handled all the concerns on the testing side, I haven't done anything with the rest of the SPM work. So it might be easiest to rebase the rest of your SPM work off of my branch. But another option would be to try and port the other fixes I made to this branch. You started a lot of the SPM work, so I'm good to go either way. I'm just looking forward to faster builds and being able to run tests easier while developing! \ud83d\udc4d . @AndrewSB I finished combining our work. There were really only two areas where we conflicted:\n\nI kept the Demo targets where they were instead of moving them into the main Moya library project. If we leave it where it is, I don't think anything in the docs needs to change.\nWe don't need to use a carthage copy-frameworks to copy the frameworks for test targets. A simple copy files build phase will do.\n\nLet me know if you have a strong opinion on either of those.\nAll the other commits are just cleaning up, getting CircleCI working, and getting CocoaPods working. I checked again and can't find anywhere in the docs where paths need to be updated--as long as the Demo projects stay where they were. Let me know what you think and thanks for the teamwork! \ud83e\udd1c\ud83d\udca5\ud83e\udd1b. Fixed all the CI errors except this one from Danger:\n\nNot quite sure what to do about that one.. Just rebased this to fix merge conflicts.\n@ashfurrow, do you have any idea on that Danger bug?. Thanks @pedrovereza! Let's see if that fixes it.. Haha. It is a commit overload \ud83d\ude48. Some of those can definitely get squashed. I will take a look at that shortly.\nYeah, @AndrewSB, keeping the Demo project separate was intentional. There are a number of reason's I think it's good to keep them separate:\n\nCarthage is driven off of the main Moya.xcodeproj, so I think it's a good idea to keep that as lean as possible.\nHaving an example/demo project in separate sub folder and project is in line with CocoaPods best practices and most libraries do it this way, so I think it is more in line with user expectations.\nMerge conflicts are not fun in *.xcodeproj's, so keeping separate projects will allow people to contribute to Demo code and core library code simultaneously with less risk that the Carthage-driving project will get corrupted.\n\nWhat do you think are the reasons for putting the Demo code in the main project?. Building the Demo project is also our current method of checking that CocoaPods didn't break. So if we combine the projects, we might need a different approach to that.. I could be misunderstanding how sharing of schemes works, but doesn't unsharing a scheme normally put it in .xcuserdata or somewhere else that we normally gitignore?\nI would disagree on merge conflicts. I think the majority of the merge conflicts I have solved have been in *.xcodeproj's. It's one of the reasons why bigger tech companies don't use them at all.\npod lib lint is an alternative to validating that the pod spec isn't broken. However, it doesn't test that it is complete and the advantage to what we are doing now is that it also validates that the Demo project continues to build correctly from CocoaPods. This means that we can have more confidence in the CocoaPods install being complete and pod try Moya is working. For example before #869 MultiTarget.swift was missing from Carthage installs because nothing was testing that it was being included via Carthage and the base project could still build fine without it.\nSo given that what we have is working correctly and has some advantages, I'm just trying to understand the advantages of changing it to be in one merged project. I definitely understand why we needed to get the tests as part of the main project, but the Demo targets don't seem obvious to me.. Thanks to everyone here! I'm honored to be able to talk with such skilled people at such a high level. Even with some butting of heads, I think we all win in the end. This is a model of how open source iOS can be done! \u2764\ufe0f\nI'm pretty sure sharing a scheme is more than that check box. I believe it actually moves the scheme from xcuserdata to xcshareddata (as seen here). Usually xcuserdata is completely gitignored. If it is working differently here, then I must be not understanding something. But either way, I think the shared scheme issue isn't a huge deal because right now I think carthage ignores everything except framework targets.\nIf we move the Demo code into the main Moya project, the Demo code will by default be working off of a carthage integration and not a cocoapods integration, so building it will not have the effect of validating that the Demo project builds via CocoaPods. I think the corresponding changes to configuration and documentation will have the effect of making Moya more of a carthage-first library instead of cocoapods-first. I'm not opposed to that at all, I actually prefer carthage over cocoapods usually (it's how I integrate Moya), but it's a good sized change nonetheless.\nI don't think we will be using SPM to generate or build our xcodeproj's any time soon because we need to specifically tailor the xcodeproj to a carthage integration. I don't think that's what you'd get if you let SPM manage it.\nUltimately, despite my defense of the 2 project solution, I'm not stuck in the mud on this one either. And I do love only having one Xcode window open for a project \ud83d\ude01. So, what I'm going to propose is since this currently doesn't change the Demo location from where it is in code and documentation, we merge this as is (after some commit squashing). Then we can create another PR around moving the Demo targets if that still seems like a good idea. In that PR we can debate the relative merits and change our testing scheme to better accommodate the decision. This PR is overweight as is and this might be a good way to contain it a bit. What do you guys say to that?. Great! Give me 20 or 30 minutes to squash commits where appropriate and then we can get this bad boy approved and merged. I think people will enjoy the quality of life improvements in here. Thanks for your help @AndrewSB!. That's a bit more manageable now. Let me know if you think it needs further compacting.. It's a little bit more than that. Let me take a stab at combining them. I know how to make the changes again. I'll push the commits right to your branch.. All good. Thanks. Uneeded now.. This is something I have in place for #883 already if we decide to go through with that. We could probably use it in PluginType, but that might be a bit counterproductive since we'd have to keep all the old names around in the protocol to tag them and I don't think it would generate the errors we want because of how they provide default implementations.\nMaybe we can open up an issue gather all the things that have been renamed and consider each?. Yeah 8.0.0! \ud83d\ude80\nDo you think our release notes for 8.0.0 should contain all the changes made since 7.x and not just the ones made since 8.0.0-beta.6? Not quite sure what the standard is here.. Yeah, I was referring to the GitHub release. I think the sections idea is excellent!. Oh wow. We have 25 breaking changes in there. Really glad you did that work in #890 @BasThomas. Do we need a migration guide?. Yeah, I don't really know about the guide (especially since I didn't use Moya pre-8). I just wanted to throw it out there as a possibility because a lot had changed. Probably not worth it then.. I do know everyone's 7.x TargetTypes will be broken.. I'll take a look, @BasThomas.. I think when you merged master after #885 (c22ef57f6364a1d0efb304916b2acd3929852319), you resolved the merge conflicts in the Xcode project by inserting the old references back into the project along with the new ones. I think this should branch should be rebased off of master resolving those conflicts with the new references. Do you want to give that a try or I can do it if you'd like?. Xcode project merge conflicts are \ud83d\ude2d.. Demo.xcworkspace will still work fine because it uses a cocoapods integration that doesn't rely on the main Xcode project.. Surely. I'll probably have that done in ~30 minutes. I will let you know.. @BasThomas, I rebased and pushed to swift3-availability-2 just so you can check to see if it still looks good to you. If it does, I will delete that branch and push here. Sound good?. I also fixed some problems with combining Availability info for Moya and ReactiveMoya.. I agree they will be a great addition for the migration and certainly useful for a while. But when the changes have sat for a while it might be nice to reduce the API surface area (primarily for code completion), reduce instances of fatalError() in the code base, and get a percentage point of test coverage back if no one needs them anymore. :). IMO Both directory/project structures are compatible with carthage and SPM. We can make carthage work with either structure and SPM doesn't really care about xcodeproj's. It is driven off of the sub directory structure under Sources and how that translates into modules. I don't think it uses projects at all-it can only generate a simple one if you ask it to.\nThis change will move us more out of line with CocoaPods standards as mentioned. And we should consider the consequences to testing the cocoapods integration and Demo project build. Changing documentation to instruct users to do a carthage bootstrap to try out the Demo project will also make Moya more carthage-first.. Yeah, I totally get that. I haven't been a CocoaPods user in a while. It's been a change for me to work on a library that has--until now--been cocoapods-first.\nFor me the advantage has less to do with directory structure and more to do with merge conflicts. The rule of thumb is to break up the XML-based files (e.g. xcodeproj's and storyboards) into smaller files to minimize the conflict resolution mess.. @AndrewSB, I can take a shot at those in the next couple of days. I have a couple of other things I am working on at the moment. I also need a bit of a break from making CI changes. Iterating on builds that take 10-20 minutes gets exhausting \ud83d\ude29. So if you'd like to take a stab first, then go for it and shoot me any questions you might have.\nOne of the things to decide is what the testing strategy looks like here. Previously we were testing that the Demo project built using CocoaPods (implicitly validating our pod). \nWith this scheme, if we want to replace that functionality and/or do a carthage integration test as well, then we will need to write some integration tests as you suggested. Such tests probably involve generating a new xcode project for the Demo code on the fly, but there might be something more clever that can be done.. I might also consider removing the \"PRO\" of \n\nSwift package manager expects there to be one xcodeproj in the root of the project.\n\n... because I don't think SPM cares about Xcode projects at all. You can have zero or many. It's just going to build what you tell it to in the directory structure and Package.swift. People less familiar with SPM might think this is getting us closer to SPM compatibility when we already are compatible and this is more of a stylistic/project philosophy choice. . Currently we test the integrity of our CocoaPods integration by compiling the Demo project. By moving the Demo project to the main project, it will no longer be testing any integrations because it will use the local project instead. So if we don't add another integration test to this PR, it will be a regression.\nMaybe a good way to break this up into PRs without regressing is to replace the integration test with another integration test and then open up a new PR that is concerned with the other two integration tests and parallelizing them. What do you think about that strategy?. If we want to go SPM-first, we might also consider resolving #894.. No worries, @AndrewSB. I figured we might have some issues with SPM + Quick, but that was no reason to not at least support SPM installs. We just might want to sort it out before we try to be SPM-first. The current workaround for Quick isn't pretty and doesn't work with spm test either. You basically have to build a separate regular target that runs your tests and evoke it through something like ./build/debug/tests.\nAnd similar to getting XCTest to work on Linux, it looks like there's no support for auto-discrovery of tests, so there's an extra maintenance headache of having to explicitly evoke each spec in a main.swift.. Thus far my approach is to use /// for single line documentation comments and /** for multiline documentation comments, but I agree we should make sure it is consistent. I was having trouble getting the markdown (e.g. - parameters: to correctly register on multiline with ///.. Ah, that might be it then. In that case, I think:\n```swift\n/**\n function\n\nparameters:\nx: Is an x\ny: Is a y\n*/\n```\n\n\n\nmight be a touch more human readable than\nswift\n/// function\n///\n/// - parameter x: Is an x\n/// - parameter y: Is a y\nEspecially for many parameters. But that's just personal preference. I could go either way.. There are some features in #861 that would make this easier to do with Moya, but we haven't decided on whether to include them or not yet. If you are interested in including it yourself, you can take a look at how SingleURLTarget is implemented and can potentially use that in your own code.\nOtherwise, I'd say Alamofire is the way to go.. There are some features in #861 that would make this easier to do with Moya, but we haven't decided on whether to include them or not yet. If you are interested in including it yourself, you can take a look at how SingleURLTarget is implemented and can potentially use that in your own code.\nOtherwise, I'd say Alamofire is the way to go.. @dannymout were you able to solve this? Or should we keep this issue open?. Hmm. That's interesting. I'm thinking about what should be the correct behavior here.\nMaybe the Observable should strongly capture the RxMoyaProvider? It seems like the ability to make the request should be tied to the lifecycle of the Observable, not of the provider. Any other thoughts @Moya/contributors?. Hmm. That's interesting. I'm thinking about what should be the correct behavior here.\nMaybe the Observable should strongly capture the RxMoyaProvider? It seems like the ability to make the request should be tied to the lifecycle of the Observable, not of the provider. Any other thoughts @Moya/contributors?. @BasThomas, in order to do that we would need to pull those out in to separate repos.. It's not an bad idea. At least from the perspective that RxSwift and ReactiveSwift are heavyweights and allowing our carthage users the choice of whether or not to include them in their dependency graph could be nice. It does create a whole set of maintenance headaches though. \ud83d\ude2c So it's no clear win.. I think I'm partial to leaving them as is for the time being. A lot has changed in the structure of this project and we just released 8.0.0. This would mean 9.0.0 right away, and more maintenance. Let's hope that Rx and Reactive continue to provide reliable framework downloads and that we get ABI stability sooner rather than later to ease the burden on the users.\nI'm open to changing that opinion though and would be available to do a call as well.. Hmm. With regards to the move towards SPM, I just want to make sure we don't put the cart before the horse. There are currently severe limitations to using SPM in building an App for Apple platforms. From what I've read, the story may be different come Swift 4.0 in late 2017. Am I missing something? Because it seems like we're the better part of a year and 100,000s of collective builds away from being able to consider being SPM-first. Is there some news I'm not aware of in terms of the SPM roadmap?\nBTW, I am guilty of hijacking this PR. Which looks good to me!  \ud83d\ude09. I was more concerned with this before RxSwift and ReactiveSwift were reliably offering framework downloads. I think it is less of an issue now. There are still some benefits to not expanding our users' dependency graphs, but I think those are outweighed by the additional maintenance and release coordination headaches that will come will the 3 repo approach. I'd love to see carthage offer an option similar to a subspec (especially since it is possible with SPM), but I recognize that is going against the grain of carthage's simplicity.. As @bjarkehs suggests, writing a custom ParameterEncoding could be a great idea. However, I might prefer searching for a token parameter to in parameters to url encode and then encode the rest as JSON--as opposed to taking the token as an initializer argument. However, that's a personal style and use case decision.\nAnother option would be to create a PluginType to do this. It would work similarly to AccessTokenPlugin so take a look here for docs and here for implementation.. @ashfurrow I picked up a nice script the other day from some fastlane discussion that launches the latest SDK on a device simulator by name instead of UUID. We've seen a decrease in failed builds since putting it in place. Let me know if you think something like this would be useful for us here:\n```bash\n!/bin/bash\nif [ \"$1\" = \"\" ]; then\n    echo \"Usage: launch-ios-simulator.sh \"\n    exit 1;\nfi\ndevice=\"$1\"\nprintf \"Closing any open instances of the iphone simulator...\\n\"\nkillall \"Simulator\" || true\nprintf \"Determining latest iOS simulator...\\n\"\nlatest_ios=$(xcodebuild -showsdks | grep -Eo \"iphonesimulator(.+)\" | tail -1)\nlatest_ios=${latest_ios##iphonesimulator}\nprintf \"Detected latest iOS simulator version: ${latest_ios}\\n\"\nprintf \"Pre-Launching iphone simulator for ${device} (${latest_ios})\\n\"\nsimulator_id=$(xcrun instruments -s | grep -Eo \"${device} (${latest_ios}) [.]\" | grep -Eo \"[.]\" | sed \"s/^[(.*)]$/\\1/\")\nopen -b com.apple.iphonesimulator --args -CurrentDeviceUDID $simulator_id\nRETVALUE=$?\nif [ \"$RETVALUE\" != \"0\" ]; then\n   printf \"Something went wrong when attempting to launch the simulator for ${device} (${latest_ios})\\n\"\n   exit 1;\nfi\nprintf \"Simulator launched for ${device} (${latest_ios})\\n\"\n``. Yep!. I don't think this is relevant anymore after #922 . I haven't tried this before, but looking [here](https://github.com/Moya/Moya/blob/master/Sources/RxMoya/RxMoyaProvider.swift#L61) it appears the request will be cancelled if theObservableis disposed. So can you try disposing theObservable?. Was that able to help you out @GorbAnthony? If so, can you close this issue please? Thanks.. Hey @Tolriq, this is not a stupid question at all. The behavior you are experiencing is not very well defined. The basic issue is that yourRxMoyaProvideris being deallocated before the request can be processed. This is because it is a local variable that goes out of scope and theObservable` it produces does not retain the provider strongly. This is related to #844 and the behavior that was changed in #905.\nSince the new behavior hasn't been released yet, try pointing your dependency manager at the master branch to see if it behaves how you are expecting it to.\nAlso, storing a provider locally may not be a bad idea regardless. But instead of dynamically creating a new one each time you call kodiHostHaveAddon, can you instead just create a single provider and use it in multiple requests?\n. Glad to hear it worked, @Tolriq! No release date set, but given that this issue has come up a couple of times, I think this could warrant 8.0.1, what do you think @Moya/contributors?. Yeah, I'd say go for it @pedrovereza.. Closing this @Tolriq. Let us know if you have any other issues.. Another idea for how to make this run a little smoother is to swap out the build test here for a build-for-testing test. I have noticed better results that way as it delays the call to open the simulator until the test target has already been built. Therefore you are less likely to have a timeout issue.. That's a good question, @gunterhager.\nBefore we investigate making this information available via the request closure, can you see if creating a custom PluginType would suit your needs? A PluginType has a prepare function that is called once the URLRequest has been created and is given an opportunity to return a modified request. prepare also accepts the target, so I believe you have the information needed there to meet this use case. What do you think?. Great @gunterhager! Happy to help.. I think so too!. I am all for any suggestions to make the progress handling more straight forward in the reactive providers. However, I am not sure this is the right direction to take. A goal of the observer pattern is to replace the callback pattern. So, to have our reactive providers use elements of both the observer pattern and the callback pattern seems muddled to me. This would encourage the propagation of both observables and callbacks in the users' code.\nPerhaps we could refine the current approach with ProgressResponse? Instead of it being a struct with a Response? and a Progress?, it could be:\nswift\nenum ProgressResponse {\n  case progress(Double)\n  case response(Response)\n}\nThat would simplify handling of progress/response emissions. In fact, we could go further and provide reactive operators like onlyProgress() and onlyResponse() that could flatmap the Observable<ProgressResponse> into a Observable<Double> and Observable<Response>, respectively. This would go further to support separating the flow of progress and response without needing to introduce inconsistent patterns.\nWhile the change to ProgressResponse would be a breaking change, we could still provide those operators right now as an easier way to deal with ProgressResponse until we migrate to the enum approach in 9.0.. Oops @leoneparise. I totally missed that we had the filterCompleted() and filterProgress() operators already. Thanks for pointing that out! I'm not sure the naming is unambiguous though (e.g. RxOptional's filterNil() takes optionals out of the observable, we follow the opposite semantics).. Glad to hear. Thanks!. This is an interesting proposal. I'm curious what other @Moya/contributors think.\nMy initial reaction is that this decomposition of TargetType would only be truly valuable if the separate protocols were useful for something other than being inherited by TargetType. If we are saying that all these things are necessary to have a TargetType and they aren't useful for anything else, then I maintain that they should be part of the TargetType itself.\nThe primary benefit of this decomposition is to provide a framework for structuring your implementation of TargetType, but it is a very loose framework at that since I could also do this:\n```swift\nextension GitHubUserContent: TargetType, TargetURLType, TargetHTTPMethodType, TargetParametersType, TargetSampleDataType, TargetValidationType {}\nextension GitHubUserContent {\npublic var baseURL: URL { return URL(string: \"https://raw.githubusercontent.com\")! }\n  public var path: String {\n    switch self {\n    case .downloadMoyaWebContent(let contentPath):\n      return \"/Moya/Moya/master/web/(contentPath)\"\n    }\n  }\n}\nextension GitHubUserContent {\npublic var method: Moya.Method {\n    switch self {\n    case .downloadMoyaWebContent:\n      return .get\n    }\n  }\n  public var parameters: [String: Any]? {\n    switch self {\n    case .downloadMoyaWebContent:\n      return nil\n    }\n  }\n  public var parameterEncoding: ParameterEncoding {\n    return URLEncoding.default\n  }\n}\nextension GitHubUserContent {\npublic var sampleData: Data {\n    switch self {\n    case .downloadMoyaWebContent:\n      return animatedBirdData() as Data\n    }\n  }\n}\nextension GitHubUserContent {\npublic var task: Task {\n    switch self {\n    case .downloadMoyaWebContent:\n      return .download(.request(DefaultDownloadDestination))\n    }\n  }\n}\n```\nAnd neither of these strike me as having much more benefit than what is possible now:\n```swift\nextension GitHubUserContent: TargetType {}\n// MARK: - URL construction\nextension GitHubUserContent {\npublic var baseURL: URL { return URL(string: \"https://raw.githubusercontent.com\")! }\n  public var path: String {\n    switch self {\n    case .downloadMoyaWebContent(let contentPath):\n      return \"/Moya/Moya/master/web/(contentPath)\"\n    }\n  }\n}\n// MARK: - Method and Parameters\nextension GitHubUserContent {\npublic var method: Moya.Method {\n    switch self {\n    case .downloadMoyaWebContent:\n      return .get\n    }\n  }\n  public var parameters: [String: Any]? {\n    switch self {\n    case .downloadMoyaWebContent:\n      return nil\n    }\n  }\n  public var parameterEncoding: ParameterEncoding {\n    return URLEncoding.default\n  }\n}\n// MARK: - Sample Data\nextension GitHubUserContent {\npublic var sampleData: Data {\n    switch self {\n    case .downloadMoyaWebContent:\n      return animatedBirdData() as Data\n    }\n  }\n}\n// MARK: - Tasks\nextension GitHubUserContent {\npublic var task: Task {\n    switch self {\n    case .downloadMoyaWebContent:\n      return .download(.request(DefaultDownloadDestination))\n    }\n  }\n}\n``. If the goal is to decrease the verbosity in aTargetTypefile, my recommendations would be to consider:\n* Break up the API into multipleTargetTypes, separated by file\n* Potentially separate largeTargetTypes into multiple files.parametersandsampleDatamight be profitable opportunities to introduce another file.\n* Use an approach similar to suggested in #861 for defaulting the trivial properties for a specificTargetType.. Great! Thanks for following up @manas-chaudhari. That's actually an approach I wind up using as well!. Since your friend's website builds page URLs using query parameters, you will probably want to use theparameters` property to supply this information as well:\n```swift\nvar path: String {\n  return \"\"\n}\nvar parameters: [String: Any]? {\n  switch self {\n    case .index(let page):\n      return [\"action\": \"index\", \"page\": page]\n  }\n```\nand make sure you use a URLEncoding for parameterEncoding.. I would go with @sunshinejr's suggestion for the time being.. I share your desire to find a way to inject return type information into the TargetTypes themselves, @michaelsand. This is definitely a creative approach to doing so within the constraints that Swift gives us. On the other hand, it adds considerably complexity. What I would ask is do you think this system of callbacks is better than injecting the type information in a wrapping layer? Something like this:\n```swift\nclass GitHubClient {\n  let provider = MoyaProvider()\nfunc getZen(completion: (Result) -> Void) {\n    provider.request(.zen) { completion(parseString($0)) } // using your parseString function\n  }\n}\n```\nI understand this approach is removing the return type information from the TargetType by a degree, but I think the advantage is a simpler TargetType set up and simplicity at the call site while not expanding the API surface area.. The other advantage to the wrapper approach is that the pattern is compatible with RxMoyaProvider and ReactiveMoyaProvider. It is hard for me to see the direct analog for the callback solution you proposed.. That is an interesting idea. However, if the parseAndComplete completion isn't strongly typed, then you still need to supply the type information for the response deserialization at the call site with no compile-time guarantees. In general, that is a similar situation as we are in right now when using the Moya extensions for object deserialization. \nAlso, while it is a natural extension to have a TargetType provide information on what return type is expected, I think it might be going too far to have TargetType also provide the information on how to deserialize a Response. Right now TargetType knows nothing about how requests are processed, and this proposal would suggest that it become aware of at least Response and the mechanisms used to deserialize it (likely a 3rd party library). This responsibility seems better placed at the MoyaProvider layer or above.\nThe proposal then comes down to:\n1. Establish a way to document what return type is expected in TargetType\n2. Provide better completion handler usability for MoyaProvider when both the return type and method of deserialization are known\nI think 1 can be accomplished in any number of ways. I would say 2 is up to the creators of Moya extensions since I don't see any reason why they can't create a similar extension on MoyaProvider.\nBecause of the impedance mismatch between a weakly typed internet and a strongly typed Swift, it will always be incumbent on the developer to introduce the specific knowledge necessary to resolve that discrepancy. I sadly don't see a way of ever providing a generic construct for that if the tool is an enum.. Interested to hear what other @Moya/contributors think about this.\nI would still lean towards saying that unless Moya gets in the game of deserializing objects, this is the purview of Moya Extentsions. This could be added via an extension on MoyaProvider. However, an approach like this does have the advantage of creating a common interface for extension providers, and, thus, allows them to standardize their own interfaces.\nI think one reason this hasn't been a bigger issue is that I think a large percentage of the user base is using the reactive providers, which already provide a cleaner interface for response handling and object deserialization through Moya extensions. There's also probably some legacy reasons since the current callback pattern aligns closely with Alamofire's.. @pedrovereza \nI think the quantity of JSON parsing extensions is just representative of how many popular JSON deserialization libraries there are. That is indicative of how for a while no single best practice had emerged in crossing the weakly typed/strongly typed gap. It seems now that a single pattern has emerged in multiple libraries.\nActually, what I would like to see is a Swiftier implementation of NSCoding that all these libraries could leverage or perhaps interface directly with JSONSerialization. It would be great to have better basic language support for object serialization that cares at least as much about JSON as PLIST.\nAs for better support of object serialization in Moya, that would mean either:\n1. Writing our own JSON deserialization\n2. Including one of more of the current JSON libraries as dependencies\nIt's hard for me to argue for 1 when we haven't written our own Alamofire. And doing 2 would come with the responsibility of recommending a best choice of library(s). I don't know if there is one right now. The last time I made this choice, I just picked the one that was already in my dependency graph.. As an aside, it is interesting that the highest level of abstraction in this stack is really the Moya extension you choose for JSON deserialization. Drop that in your Cartfile/Podspec and you get everything else you need.. I was just happy that I wasn't the only one laughing about the state of JSON deserialization in Swift! :) Your ideas are truly welcome @michaelsand. This is what pushes the project forward.. We've bumped up against the limit of what is possible with generics in Swift. The compiler needs type information sooner or later. IMO the safest and DRYest way to do that is to wrap the provider in an object that provides type information and deserialization. I know it doesn't feel as nice as we'd like it to, but neither does the unconstrained polymorphism of the other options or creating one TargetType per return type. The above options can help you write that wrapper, but I would say a better separation of concerns is to put the extension on the response deserializer itself by allowing it to ingest Data and then pass it Response.data. Alternatively you could just use the output from mapJSON, a dictionary that nearly all the libraries support.\nAs an aside, I assumed that the reason we don't see dematerialize used more often was that we were using Alamofire.Result and not Result.Result. I see I am wrong. We should probably add that to our Cartfile explicitly instead of relying on it being there (from ReactiveSwift, I think). I'll open up a PR for that.. Thank you @michaelsand for the thoughtful idea and discussion. I personally would love to have you contribute to Moya wherever/whenever you'd like!. That's the approach I use as well. In order to keep the boiler plate down in the many TargetTypes that I create, I also introduce some defaults for TargetType as seen in #861. . Yep. Just drop something like this in.. Thanks for bringing that up though! We should put that on our radar for Swift 3.1 release @Moya/contributors.. @ened as long as we can verify that doing so still offers the fix-its when trying to use the renamed methods, I think that is reasonable.. Thanks everyone. PR inbound.. Did you add an EndpointClosure or ResponseClosure to the provider that might be adding these?. Is the original logging output you show from your server? Is it possible that your server is mapping those extra fields? It could be happening in middleware somewhere.. Your curl is url encoding the parameters instead of submitting them as JSON in the body though. Could that make a difference?. Well, I'm still not sure that it is on the client side. For one, I don't know where that authentication key would even be coming from. My guess is that the server is using some middleware to create an authentication object based on what is in the body of the request.\nYou can try this theory out by using Alamofire against your own server to see if you see the same behavior.. Hey @moonorblue. It would be unlikely that your data was base64 encoded unless you explicitly put it that way. I think what you most likely want is:\nswift\nlet string = String(data: data, encoding: .utf8)\nAlternatively you can put a helper function in TargetType for that. You can check out how that was done in this PR: #881.. Oh, yeah @moonorblue. Sorry, disregard what I said about the String transform. My head was stuck in my own project. You just need to return the Data so just use Data(contentsOf:). Copy and pasting that code from the PR should work fine for you.. @fjcaetano, I am having a bit of a hard time wrapping my head around the use case and implications of introducing this since I don't normally use download tasks in Moya. If the solution is pretty straightforward, what do you think about opening up a PR with the feature to further discussion?. Just to clarify @ftp27, what version of Moya are you using? The behavior for plugins to modify requests was introduced in 8.0.0.. Also, a couple of other things to check. Are you using an endpoint closure or request closure to modify the request at all? Is there any chance that middleware on your server might be stripping the authorization headers?. Thanks for the information @ftp27. If you aren't using anything but this code, then you don't have to worry about the closures I mentioned.\nI can confirm that plugins do work with GET requests. However, if you can share a project that reproduces this problem, I would be happy to help you debug.. I can attest to plugins being able to insert authorization headers for GET requests because I'm using it for that in production.\nPerhaps Wireshark is filtering Authorization headers for some reason? Can you try inspecting the request via another method (like Charles)?. Sorry \ud83e\udd26\u200d\u2642\ufe0f . Should have read better!\n@pedrovereza I agree. I'm running out of other ideas. Can we look at the server logs themselves to check? Or change the url to https://httpbin.org/get and see what it sends back?. @aaroncrespo @petester42 , code coverage is being tracked. The shortcut for testing is nice to have. Anyway to bring that back?. First error is just that you need to put an entry in the CHANGELOG.\nSecond error is probably getting confused with the new project structure, thinking dependencies have changed the libraries are no longer in the \"Linked Libraries\" section but instead are found via a platform specific framework search path.\nFirst warning won't go away because of the # of lines changed in the PR, that's fine.\nSecond warning is a reminder to add some documentation for big new features, but this doesn't warrant that.\nSo basically just worry about the CHANGELOG.. Now, in general, I love this idea and want to see it happen. But I have to confess I'm a novice with this sort of conversion.\nSome of my questions:\n * Will this work with both Carthage and Cocoapods? And have both been tested?\n * Does this method work with Carthage prebuilt binaries incase we want to introduce that for Moya?\n * Are there any other downsides to this?\n * This won't be breaking for anyone will it?\n. Thanks for your thoughts @AndrewSB! I definitely like the maintenance reducing-nature of this. I'd like to see us get a prebuilt binary out (opened #983 to address), but if that is incompatible with this, I think I would rather have this. Especially since build caching and \"only rebuild on change\" behavior is in the near term Carthage pipeline, so prebuilt frameworks will lose a certain amount of their benefit.. Thanks for the PR @fjcaetano! I'm going to pull the discussion into this PR.\nBefore I address some of the questions you have in #959, can you walk me through the use case you are trying to solve that doesn't lend itself to using DownloadDestination to declare where you want your file downloaded to?. What do you think about having your TargetType case take a parameter on where to store the resulting download? Then you can construct the DownloadDestination in the task computed property. That way you would declaratively tell the request where to store the downloaded file and capture that location in your response closure (which is likely near the call site that you supplied the destination URL).. Yeah, I don't think what you are proposing is unreasonable at all @fjcaetano. I just want to explore what is possible currently before considering expanding the API surface area. Thanks for walking me through your use case.\nI don't think constructing the destination URL for the downloaded file outside of TargetType is necessarily a problem. In some cases it might be the right way to do it. You could certainly still construct the URL inside of TargetType as well, but having the capability to pass the destination URL to TargetType is a more general solution.\nSo in your use case, how do you plan on specifying that the files should be downloaded to the Documents directory? And how do you specify what the file should be named in the documents directory? In other words, how do you figure out the URL that would eventually be in the proposed destinationURL?. Ah, I see. Thanks for sharing.\nSo, I do think that the question of whether or not to include a destinationUrl needs further consideration, and I would love to get the opinions of other @Moya/contributors.\nOn the other hand, for your particular use case, I might recommend a different architecture. Because the location of these files needs to be deterministic, I think that recommends specifying the destination URL declaratively even more. Having access to this URL would serve useful for other things like checking whether or not the file has already been downloaded before downloading it again. You could extract this from the asset URL as you say, or you could just construct the remote URLs differently. I imagine something like this:\n```swift\nfileprivate static let assetDir: URL = {\n  let directoryURLs = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)\n  return directoryURLs.first ?? NSTemporaryDirectory()\n}()\nenum Assets: TargetType {\n  case star\n  case checkmark\nvar baseURL: URL { / ... / }\nvar assetName: String {\n    switch self {\n    case .star: return \"star.png\"\n    case .checkmark: return \"checkmark.png\"\n    }\n  }\nvar path: String {\n    return \"/assets/\" + assetName\n  }\nvar localLocation: URL {\n    return assetDir.appendingPathComponent(assetName)\n  }\nvar downloadDestination: DownloadDestination {\n    return { _, _ in return (self.localLocation, .removePreviousFile) }\n  }\nvar task: Task {\n    return .download(downloadDestination)\n  }\n/\n    Rest of TargetType\n  /\n}\nclass AssetLoader {\n  let provider = MoyaProvider()\ninit() { }\nfunc load(asset: Asset, completion: ((Result) -> Void)? = nil) {\n    if FileManager.default.fileExists(atPath: asset.localLocation.path) {\n      completion?(.success(asset.localLocation))\n      return\n    }\nprovider.request(asset) { result in \n  switch result {\n  case .success:\n    completion?(.success(asset.localLocation))\n  case let .failure(error):\n    return completion?(.failure(error))\n  }\n}\n\n}\n}\n```. @fjcaetano \ud83d\udc4d. I think that refactor sounds like a good idea because then you can centralize the responsibilities of managing assets into a single object--and I like that separation of concerns. I could see it also being beneficial to you if decide to do asset preloading, batch downloading, etc. It could really be a nice replacement for ODR.\nLet's keep this PR open though and see if we can get more feedback on this for other use cases, and thanks again for your contribution!. @mrtj unfortunately I don't have any easy answers for you on this one. Using Alamofire's validation takes a lot of control out of Moya's hands. The way I see it, you have a couple of options, but they aren't simple.\n\nModify Alamofire's validation error to also expose the response. This could be via filling an issue/PR with them or creating your own fork.\nModify Moya's TargetType.validate property to return an optional integer range to validate with. A nil value indicates no validation while a range is forwarded to Alamofire's validate(statusCode:) that would go around this section. This would require you to fork Moya.\nBuild request retrying functionality into Moya.\n\nOption 1 would probably be valuable to the wider Alamorefire community, but I think it might be hard to get a breaking change like that through in any reasonable timeline for you. You would also have to maintain separate forks of both Alamofire and Moya.\nOption 2 is the quickest and easiest for you, and you could submit a PR back to us for consideration. However, I don't personally love the solution for Moya in general because it's going to help propagate this pattern of spreading out error handling between Alamofire, Moya, and the dependent application. It feels like a bad separation of concerns to me, but other's may feel differently about that.\nOption 3 would be the hardest but of possibly the most value to the Moya community. We go through some lengths to hide Alamofire from end users. If we can eliminate one more use case--and a big one at that--for users to dig into Alamofire and deal with the attendant consequences, I think that would be a big win.. I'm sorry @mrtj, I mistakenly assumed that at that point Alamofire was just returning a AFError. responseValidationFailed(reason: . unacceptableStatusCode(Int)). If it is also returning a response with data then indeed you could modify MoyaError.underlyingError to have an optional Response parameter that can be forwarded to custom error handling.\nWhy don't you give that a try and report back your findings? We can open up a PR as well, but since this would be a breaking change, it might be a bit before we can include it upstream.. I don't see there being a ton @BasThomas. If this were a bigger breaking change I would say the downside would be forcing user's to deal with breaking changes to receive future fixes, but in this case the fix would be pretty minor and maybe not even affect a large portion of users. If we go that route I would propose we start a pre-release cycle for 9.0 so that @mrtj and others with this use case can get support quickly while we work out what other things--if any--should go in 9.0. How about we open another issue to discuss?. @mrtj @BasThomas, I just created the 9.0.0-dev branch so we can accept PRs there. @mrtj, if you have gotten the solution above to work, would you mind submitting a PR to that branch so we can get your work included in the next major release of Moya? \ud83d\udc4d . @shuijinliuxi, you have 2 options for getting to the URLRequest:\n\nUtilize a custom RequestClosure in your provider to construct the request with any modifications needed.\nCreate a PluginType that uses the prepare method to make any modifications to the URLRequest and add that to your provider.\n\nAlso if you need to modify the caching policy, you can construct an Alamofire SessionManager with a custom URLSession using a URLSessionConfiguration that modifies the caching policy to your liking. This can then be given to a MoyaProvider to use instead of the default. But you might be fine with the defaults as well.. @gregpardo you can treat the baseUrl like the other parameters and use a switch statement to load it. It would look something like this:\n```swift\nenum MyApi: TargetType {\n  case login(baseUrl: URL)\nvar baseUrl: URL {\n    switch self {\n    case let .login(baseUrl):\n      return baseUrl\n    }\n  }\n/ TargetType implementation /\n}\n```\nBut if you know the other base URL's at compile time, I would recommend using a separate enum to drive those:\n```swift\nenum Server {\n  case northAmerica\n  case europe\nvar baseUrl: URL {\n    switch self {\n    case .northAmerica:\n      return \n   case .europe:\n      return \n    }\n  }\n}\nenum MyApi: TargetType {\n  case login(server: Server)\nvar baseUrl: URL {\n    switch self {\n    case let .login(server):\n      return server.baseUrl\n    }\n  }\n/ TargetType implementation /\n}\n```\nDoes that answer your question?. @gperdomor maybe I can help you further if I understand a bit more about your use case. If you don't know the URLs at compile time, how do you retrieve them?. Ah, I see, so then I think the singleton idea make a lot of sense.\nAnother idea that would be slightly more complicated but eliminate the need for a singleton:\n```swift\nstruct DynamicTarget: TargetType {\n  let baseURL: URL\n  let target: TargetType\nvar path: String { return target.path }\n  var method: Moya.Method { return target.method }\n  / ... /\n}\nclass DynamicProvider: MoyaProvider {\n  let baseURL: URL\n// add initializer to take baseUrl and call super with the rest of the arguments\nfunc request(_ subTarget: TargetType, completion: ((Result) -> Void)? = nil) {\n    let dynamicTarget = DynamicTarget(baseUrl: baseUrl, target: subTarget)\n    super.request(dynamicTarget, completion: completion)\n  }\n}\n```\nDoes that make sense? That way you initialize the provider once with the URL and from there you can just pass regular TargetTypes to it. Another option is to create a protocol that has all the properties of TargetType except a baseUrl, you could then use that in this structure and avoid needing to put garbage URLs in for all the regular TargetTypes.\n```swift\nprotocol SubTarget {\n  var path: String { get }\n  var method: Moya.Method { get }\n  / ... /\n}\nstruct DynamicTarget: TargetType {\n  let baseURL: URL\n  let subTarget: SubTarget\nvar path: String { return subTarget.path }\n  var method: Moya.Method { return subTarget.method }\n  / ... /\n}\nclass DynamicProvider: MoyaProvider {\n  let baseURL: URL\n// add initializer to take baseUrl and call super with the rest of the arguments\nfunc request(_ subTarget: Target, completion: ((Result) -> Void)? = nil) {\n    let dynamicTarget = DynamicTarget(baseURL: baseURL, subTarget: subTarget)\n    super.request(dynamicTarget, completion: completion)\n  }\n}\n```\nThere are a number of variations around this idea, but struct TargetTypes would be the key.. let baseURL: URL should satisfy a protocol requirement of var baseURL: { get }. I used it in such a way here.\n(there are some small mistakes in my example like baseUrl instead of baseURL that you will need to fix, but the concept works). There is some similar functionality in MultiTarget and I proposed another idea that has some overlap, but that wasn't accepted. In neither case would it have solved this issue. In general I would say most users of Moya are interacting with a single baseURL per target, so I don't think there is a ton of need for this to be native. But if we continue to get requests like this, we can consider adding it.. @gperdomor yes, I have used something similar to the singleton method in some of my projects. It has worked quite well.\nThe SubTarget protocol definitely adds some maintenance overhead, but I believe it to be pretty small. If those maintenance concerns are bigger to you than having a garbage URL in the code, then you could easily do something like this:\n```swift\nprotocol SubTarget: TargetType { }\nextension SubtTarget {\n  var baseURL: URL { return URL(string: \"http://YouShouldNeverUseThisURL.com/\")! }\n}\n``. No, not directly I believe, but maybe you can provide afileprivateprotocol extension in the test file that overrides allTargetTypesampleData` (haven't tried that). What I do is provide an override for the endpoint closure that provides data only in testing. The advantage to this approach to is that you can simulate different responses per test and even simulate things like different HTTP status codes or network errors.\nI generally simplify this by creating a testing subclass of MoyaProvider that takes a responseClosure which maps the Target to a EndpointSampleResponse, then I construct the EndpointClosure with this. It looks something like this:\n```swift\nclass TestProvider: MoyaProvider {\n  init(responseClosure: ((Target) -> EndpointSampleResponse)? = nil) {\n    var endpointClosure: EndpointClosure\nif let responseClosure = responseClosure {\n  endpointClosure = {\n    target in\n\n    let sampleResponseClosure: Endpoint<Target>.SampleResponseClosure = {\n      return responseClosure(target)\n    }\n\n    return Endpoint(\n      url: target.baseURL.absoluteString,\n      sampleResponseClosure: sampleResponseClosure,\n      method: target.method,\n      parameters: target.parameters,\n      parameterEncoding: target.parameterEncoding,\n      httpHeaderFields: nil\n    )\n  }\n} else {\n  endpointClosure = MoyaProvider<Target>.defaultEndpointMapping\n}\n\nsuper.init(endpointClosure: endpointClosure, stubClosure: MoyaProvider.immediatelyStub, plugins: [])\n\n}\n}\n```\nNote this also stubs immediately and makes no attempts to put anything into the HTTP header fields, so change that behavior as necessary.\nThe usage then looks like this:\n```swift\n  enum TestTarget: TargetType {\n    case success, failure\n// Implement TargetType\n\n}\nlet responseClosure: (TestTarget) -> EndpointSampleResponse = {\n    target in\nswitch target {\ncase .success:\n  return .networkResponse(200, fixture(\"ApiSuccess\"))\ncase .failure:\n  return .networkResponse(400, fixture(\"ApiFailure\"))\n}\n\n}\nlet provider = TestProvider(responseClosure: responseClosure)\n```\nNote I am using a helper function here fixture(_:) that loads sample data from fixture files.\nLet me know if that helps.. Unfortunately, I have only used this method in closed source projects, so I am unable to provide a link.\nFor the approach I outlined above, you wouldn't need a new TargetType for each endpoint, you would just need a new responseClosure anytime you want to change the behavior of sample data. In essence you achieve very similar results to OHHTTPStubs but you can utilize the enum semantics of the TargetType itself to write more declaratively. That being said, I know many people that use OHHTTPStubs and have good success with that route.. There are a number of ways to do it. You could create a responseClosure for successes and one for failures. Or you could create a function that returns a responseClosure based on a successful flag if you need more control over the failure case. Here is what 2 separate closures looks like:\n```swift\n  let successfulResponseClosure: (Session) -> EndpointSampleResponse = { target in\n    switch target {\n    case .login:\n      return .networkResponse(200, fixture(\"LoginSuccess\"))\n    case .tokenRefresh:\n      return .networkResponse(200, fixture(\"TokenRefresh\"))\n    case .logout:\n      return .networkResponse(200, fixture(\"Logout\"))\n    }\n  }\nlet successfulProvider = TestProvider(requestClosure: successfulResponseClosure)\n/ ... Run Your Success Tests ... /\nlet failedResponseClosure: (Session) -> EndpointSampleResponse = { _ in\n    return .networkResponse(404, fixture(\"BadRequest\"))\n  }\nlet failedProvider = TestProvider(requestClosure: failedResponseClosure)\n/ ... Run Your Failing Tests ... /\n``. @jessearmand you can tag your PRs with#trivialto not trigger this Danger warning. However, I think a nice fix like this should be in the Changelog. If you look at the document, the top heading is \"Next\". This is the space for changes the currently only exist onmaster. Currently, there are none, but you can go ahead and make the first entry!. Thanks! And thanks for the contribution!. The main issue for you is to solve having aTargetTypewith a dynamicbaseURL. Some ideas on how to do this are covered in #978. For the purposes of this example I am going to assume you have astruct MooApi: TargetTypethat takes aURL?to use as it'sbaseURL. If givennilit  has access to a defaultURL`. Then it would look something like this:\n```swift\nstruct MooApi: TargetType {\n  let defaultURL = < defaultURL >\n  let url: URL?\nvar baseURL: URL { return url ?? defaultURL }\n/ TargetType /\n}\nlet provider = MooProvider(token: accessToken)\nfunc followTheURLs(url: URL? = nil) -> Observable> {\n  return provider.request(MooApi(url: url))\n    .filterSuccessfulStatusAndRedirectCodes()\n    .mapObject(type: JSONDocumentManyObjects.self)\n    .flatMap { jsonDocumentManyObjects in\n      if let url = jsonDocumentManyObjects.nextURL {\n        return followTheURLs(url: url)\n      } else {\n        return Observable.just(jsonDocumentManyObjects)\n      }\n    }\n}\nfollowTheURLs()\n      .subscribe { event in\n        switch event {\n        case .next(let element):\n          print(\"next: (element.url)\")\n        case .error(let error):\n          print(\"error: (error)\")\n        case .completed:\n          print(\"completed\")\n        }\n      }\n      .addDisposableTo(disposeBag)\n```\nNow a couple of points:\n  * If your MooApi has different endpoints then you'll need an additional strategy here. Look at #978 for ideas.\n  * I'm not exactly sure about how this recursive flat mapping will propagate errors. You'll want to test that.\n  * It might be possible to instead do this with an Observable of Observables, but I'm not sure it would be much simpler.. I think it may have just been a copying error from the Cocoapods instructions.. @iShawnWang thanks for reporting this and creating a repro project. I can confirm that I experienced the same compiler crash from that project. I haven't had a chance to look into it much further, however, because these sorts of compiler crashes can take a while to debug \ud83d\ude1e . In the past when I have experienced this it has been related to issues with generics (many times having to do with generics and inheritance). I don't know if that is the issue here or not though, but it's my first guess. Have you had a chance to see if this behavior is the same when compiling with Swift 3.1?. Thanks @ashfurrow! I share your concerns for Swift ABI compatibility, which is why I introduced a PR for Carthage to only use prebuilt binaries when they are compatible with your local version of Swift (https://github.com/Carthage/Carthage/pull/1755). This is has been merged and will deploy soon with the next Carthage release. With this feature, a Carthage consumer of Moya will at worst have the same behavior as current (building Moya), but may also benefit further from a prebuilt binary.. Thanks for the contribution @yanamura3!\nI have to think about this one for a second. Something feels a little off about transforming an AFError into a MoyaError like this. I don't know that it is a bad approach, it just feels unique as to how we handle other underlying errors. Also, having it depend on validate and possibly not doing the transform if a response doesn't exist feel a bit too non-deterministic.\nOn the other hand, this is a clever way to get the changes necessary for #975! It is technically a breaking change, though. If someone wrote code that looks for the a AFError. responseValidationFailed embedded in a MoyaError.underyling, their code will break with this update. Worse, it would probably be silent--no compiler error.\nIn the light that it would be a breaking change, I'm leaning towards it being better to just add an optional Response value to MoyaError.underyling, but that's not a strong opinion.\nWould love to hear what other @Moya/contributors think of this approach.. Do you mean logging it to the console? If so, checkout NetworkLoggerPlugin.. Sure, you just initialize a NetworkLoggingPlugin and pass it to the plugins parameter of your MoyaProvider initializer. (e.g. plugins: [NetworkLoggerPlugin()]).. Thanks @dannymout !. I could be wrong, but I believe this is more of an App Transport Security issue. Have you tried searching for information/solutions regarding that?. Hmm. Well, I'm not sure I can think of where Moya might be interfering with this. Moya runs network requests through Alamofire which in turn uses URLSession. I believe this is a configuration that should be happening at the URLSession level, but possibly there is something to do at the Alamofire level. Here is a link to Alamofire's security section that covers some ATS and common issues with self-signed certificates.. Oops. Thanks @BasThomas. I missed it. Sorry @gperdomor. Looks good!. Hmm we might want to start a separate changelog section for 9.0.0 instead of making it seem like this change is on master.. Hey @justinmakaila, are you familiar with how to generate a reverse commit? As @ashfurrow mentioned, you should be able to push that to master without force pushing anything. If you need any help or would like me to do it,  post the hash of the commit you want reversed and I can do it. Thanks!. Try diffing the branch with the reverted commit against the last commit before your accidental one.. Well, I suppose on the other hand, as long as we can't force push, then we won't be able to do anything absolutely irreversible. It just might be a major pain to do so.... Sure, @ashfurrow. My other workload has picked up a bit, so it might be a few days before I can look at this, but happy to give it a go.. Handling object deserialization in general has been discussed, but currently is on the roadmap per se. So I don't think deserializing XML and parsing that into an RSS model is in the near future.\nThat being said, I took a look the library you referenced and I don't think it would be terribly hard to port it to Moya. 90% of the code would be reusable--you would just need to write the extensions for Moya.Response which should be pretty straightforward. I think if you were interested in that, it could be a very valuable addition to our community extensions.\nAnother option you have is to extend Alamofire with ReactiveSwift--I'd be surprised if such a library doesn't already exist. That also should be straightforward, especially since Alamofire already uses a Result-like pattern.. You should pass a stubClosure to MoyaProvider on instantiation. There are some default ones:\n\nneverStub (default)\nimmediatelyStub\ndelayedStub\n\ne.g.\nswift\nlet provider = MoyaProvider<MyApi>(stubClosure: MoyaProvider.immediatelyStub). I think you will have better luck if you make the language and sort query parameters constants in the parameters return as opposed to hard coding them in the path. That way they don't escaped as you are seeing. Let us know if that works for you!. @bestwnh. We'd love to have your support in taking a look at this if you can. I would start looking in these locations:\nWhere the code branches from a normal request to a stub request:\nhttps://github.com/Moya/Moya/blob/master/Sources/Moya/MoyaProvider%2BInternal.swift#L71\nThe function that is called to stub a request:\nhttps://github.com/Moya/Moya/blob/master/Sources/Moya/MoyaProvider.swift#L92. @pedrovereza thanks for this! I think maybe this extension also has to be modified? https://github.com/Moya/Moya/blob/master/Sources/RxMoya/Observable%2BResponse.swift. Ok I understand that intention. Should we duplicate this as an extension on PrimitiveType too so that users can still do something like:\nswift\nprovider.request(.myRepos)\n  .filterSuccessfulStatusCodes()\n  .subscribe()\n  .disposed(by: disposeBag)\nOr would the recommended approach be to do:\nswift\nprovider.request(.myRepos)\n  .asObservable()\n  .filterSuccessfulStatusCodes()\n  .asSingle()\n  .subscribe()\n  .disposed(by: disposeBag)\n?. My hope was that the type information would be clear enough, but I can definitely see both sides. We can't use RequestType for prepareRequest, but it would also be possible to change willSendRequest to pass just the URLRequest of the Alamofire.Request to be more consistent. This would eliminate the need for RequestType but it would also mean that CredentialsPlugin would need to be modified. That might be a good thing now though so that there is consistency in where in the lifecycle requests are being modified.. I understand that confusion. Should this just be reverted or is there another change you have in mind?. I'll take a stab at that.. Not that I can see. RequestType is used to expose Alamofire.Requests functionality for adding URLCredentials. So if you eliminated it, CredentialsPlugin would need another path to adding credentials.. I actually like reduce better because you can maintain immutability and also it's very clear that the result or request is being modified.\nIt might be slightly bulkier, but TBH requestNormal is pretty overweight as is \ud83d\ude48, and I'd be more concerned about refactoring that to make it more readable and highlight the request/response lifecycle better. I'd at least write it like this:\nswift\nlet pluginsWithCompletion: Moya.Completion = {\n  result in\n  let processedResult = self.plugins.reduce(result) { $1.processResponse($0, target: target) }\n  completion(processedResult)\n}. I went ahead and made this change.. @sunshinejr I tried updating the docs to be clearer. Let me know what you think.. Great. Once we settle on changes I will revert that commit and rebase.. I like that idea.. Done!. Sorry for the little nitpick, but would you mind adding periods to these descriptions? Otherwise, they look great.. Sure, I can make that change.. I'll change that grammar.. What follows is an example of how to use this. Which boiler plate are you referring to?. Let me know if the update is clearer.. Done.. shouldAuthorize is implemented in the same way as TargetType.validate or TargetType.parameters. Normally you'd implement it as a switch on the enum. In my trivial test case, I made a struct that conforms to TargetType and AccessTokenAuthorizable and it takes an initialization parameter to indicate how is should respond to shouldAuthenticate. This is just to write more concise tests. This isn't the way you'd normally use it. In fact I think most people will be fine with the default behavior and not conform to AccessTokenAuthorizable. Does that make sense to you?. I changed the endpoints in the example to make that more clear as well.. I just used the name that was already present in the docs under \"Basic HTTP Authentication\". Do you think both should be renamed?. I think target makes sense though, because it is an instance of a TargetType and not of an Endpoint.. Yeah, I was just going off of the preexisting documentation for consistency. But I will change that as well. . For a single target project, I think we can get even simpler with our recommended SPM install and do this:\n```swift\nimport PackageDescription\nlet package = Package(\n  name: \"MyApp\",\n  dependencies: [\n    .Package(url: \"https://github.com/Moya/Moya\", majorVersion: 8)\n  ]\n)\n```\nThat should be all the majority of people need. You don't need Targets unless you have a multi-target package (maybe that will be more common when you can use SPM to build Apps). Also the dependencies on a Target level are usually used to specify inter-Target dependencies and not external package dependencies like Moya.. What about killing the [weak self] here and just strongly capturing. Then we can kill the guard. There doesn't appear to be a risk of a retain cycle here, so the only other reason to do it this way would be if we want to use the release of an RxMoyaProvider to error out observables it has created. I think we want those Observables to be valid until they are disposed, right?\n. What do you think @ashfurrow? I think you did a lot of the early work here. What makes more sense to you: Having the Observable be usable regardless of what happens with the RxMoyaProvider that generated it or emitting an error if that provider gets released? Maybe we can also think about how that would be consistent with behavior of MoyaProvider. If you release a MoyaProvider will inflight requests still be finished?\nAlso, to note, if we adopt the pattern of emitting an error on release, I think users might still be able to work around this by retaining the provider inside of a closure retained by the Observable (e.g. do or subscribe). A bit hacky though.... Here is another potential solution: We could support both behaviors.\nIn the instance method request we can weakly retain the provider assuming the user is handling that. We will emit the error if it was deallocated.\nThen we can create a class method on RxMoyaProvider that will retain the provider in the request. Then we can still support workflows where users want ad-hoc requests out of the box. Something like:\nswift\nRxMoyaProvider<MyApi>.request(/* ... */). That second method would mean we'd need to take all the initializer args to RxMoyaProvider in the class method. OR maybe we make this an instance method too of a different name?\nI suppose both of these things can be left as exercises for the user though. Do we know what happens to an inflight request of a regular MoyaProvider is deallocated?. Unless we want to ensure compatibility with specific version, is there an option to do OS latest?. You can check #915 for an idea on how to launch the latest iOS simulator. Not sure if we still need the instruments call.. Do we still need to handle the (_, _, .some(error)) case here in case we get an AFError that doesn't have a Response?. I think that looks better \ud83d\udc4d . ",
    "delebedev": "It can be fixed by changing signature of Custom closure:\n        case Custom((URLRequestConvertible, [String: AnyObject]?) -> (NSURLRequest, NSError?)) but I am really not sure that it's the right way.\n. Absolutely sure it is because I've checked out the latest master of Alamofire separately.\n. If the fix I've described is suitable I'll make the PR (it can be fixed by using the same closure signature as in Alamofire)\n. modifying endpointsClosure works perfectly!\nBut you really need some documentation for this :+1: \n. +1, one step forward to \"declarative\" API\n. ",
    "swizzlr": "The codegen logic might be abstractable across inputs. Never written this, do I need to use yacc?\n. cc @Alexey-Matjuk\n. Real talk I'm going to bed now and this needs to be squashed but it basically uses CP to manage dependencies while allowing for users to bare clone and integrate as a framework in a subproject, provided you also have AF and RAC.\n. It does but I'm not happy with it.\n. My findings:\n- Defining dependencies using CocoaPods couples the build phases of the framework to a PODS_ROOT that may not exist (cc @modocache)\n- This means that as of right now, Frameworks that use CocoaPods must only be integrated in a CocoaPods environment\nHoly war indeed.\nAsh I don't know how much skin in the game you have for this but I really don't want to see a fractured either/or world.\nThe current solutions:\n1. Define your dependencies the \"traditional\" way through Carthage or submodules, since they support alternative sources of dependent frameworks. Your project will still work as a CocoaPod.\n2. Fix CocoaPods so it supports alternative sources of dependent frameworks.\n. Delete it mate I will do a new one when I get the chance\ni will\ni will\n. Oh, this is purely so we can show off a loading animation, I'm sure I'm not the only one who uses stubs for demo purposes. It already should be async because callbacks (I haven't checked the implementation but a dispatch_async is as good as any guarantee that it'll wait a loop, I think).\n. Super helpful for when stage/dev is down.\n. Let's make this happen!\nHow about creating a subprotocol, MultipartFormUploadable (I think we should get rid of this Moya namespacing too, but that's kinda just me) that inherits from MoyaTarget \u2013 we overload request to take the more specific type, and to use it, and require an extra function to vend either an NSData, NSStream or a closure that returns those things to supply the body.\nThis might be the groundwork for a more strongly typed set of targets that more closely specify their methods of encoding and requesting, though that is perhaps an exercise best left to the reader.\n. I've added this for consideration to the v5 milestone, since now's the opportunity to break APIs (though not too much).\n. A protocol, \"ParameterEncodable\" might be a good plan. We could add conformance for dicts to keep previous behavior, and then allow further smarts by providing a \"GraphQLNode\" struct (or let the users define it as an optional third party extension to Moya, until such time as it's a huge demand).\n. I think this should definitely be included in version 5.\n. Well, I'd rather have a result type, because otherwise everyone's just going to be writing let e = error as! MoyaError, but what do I know checked exception bleh etc\n(looking at you, Lattner)\n. I have a massive PR incoming btw that addresses this issue plus a bunch of other stuff; this approach is better than our strange disjoint union of optional types.\n. I bet we can rustle one up!\n. Cheers :+1: \n. To do: add tests\n. SOMEBODY MERGE IT\n. You know, I have no idea. I need to experiment and find out. I'll make a playground when I get to work (~1hr)\n. I've ducked the issue by making the stub function take a cancellable token, and refactoring the token to be a reference type. While I was at it I gave it a canceled property and ensured writes to it were locked, let's see what this does to coverage.\n. @JRHeaton care to take a look?\n. Can do! Could also do an if let \u2013 it's really just because the nil-coalescing operator gave up the ghost. I'm trying to be conservative with API changes, but I keep forgetting this is an internal class.\n. If we're getting into the nitty gritty I'm going to assume the non-optional version would take slightly more overhead in terms of space; or I could just be justifying the change I made and pushed before I saw your comment :)\n. @ashfurrow sorted. Cancellable tokens should keep track of canceled state because otherwise they're really just a glorified completion handler.\n. Don't furrow me bro\n. Don't furrow me bro\n. I've opened a PR against this branch to try to resolve some of the code coverage issues: https://github.com/petester42/Moya/pull/1\n. I've opened a PR against this branch to try to resolve some of the code coverage issues: https://github.com/petester42/Moya/pull/1\n. Merging #297 into master will increase coverage by +9.07% as of 20e82cf\n\ud83d\ude31\n. Merging #297 into master will increase coverage by +9.07% as of 20e82cf\n\ud83d\ude31\n. Do however agree with -1 on default cases in switches, and not comparing underlying values, but while it's internal to the framework it matters not to consumers of the API.\n. Do however agree with -1 on default cases in switches, and not comparing underlying values, but while it's internal to the framework it matters not to consumers of the API.\n. Looks damn good to me! We just need to resolve the merge conflicts.\n. Looks damn good to me! We just need to resolve the merge conflicts.\n. Next action would be to add @available(*, deprecated, message=\"This will be removed in the next major version of Moya. Please visit https://github.com/Moya/Moya/issues/298 for more information.\") to all relevant methods (I should think request overload).\n. Next action would be to add @available(*, deprecated, message=\"This will be removed in the next major version of Moya. Please visit https://github.com/Moya/Moya/issues/298 for more information.\") to all relevant methods (I should think request overload).\n. I can personally confirm that the matching version thing was a bug and was def fixed for me. There's no good reason to declare the framework version, so I think 1 is a safe bet.\nThe issue this resolves was that some targets had no MOYA_VERSION defined, thus causing a nil short bundle ID, and thus failing ITC checks.\n. I can personally confirm that the matching version thing was a bug and was def fixed for me. There's no good reason to declare the framework version, so I think 1 is a safe bet.\nThe issue this resolves was that some targets had no MOYA_VERSION defined, thus causing a nil short bundle ID, and thus failing ITC checks.\n. No worries sport; was there a reason why you wanted MOYA_VERSION? I can put it back in if that makes the library easier to use for more people.\n. No worries sport; was there a reason why you wanted MOYA_VERSION? I can put it back in if that makes the library easier to use for more people.\n. Well, looks like we're good to go with this?\n. Well, looks like we're good to go with this?\n. I believe these changes to be good because they make the library a bit more \"Swift\". Modules provide a namespace, so we don't need to prefix stuff, nor do we need to create our own namespace.\nPlugins sorely needed to be a protocol, but were quite objc. I sometimes feel Moya is really wanting to have that magic dynamism that Swift rightly disallows. Turns out that if we get rid of the provider param, we can make plugins protocols. I can't see a good use for it either. Could be replaced with an AnyObject param.\nWe should either make the completion in-type a result, or a throwing func, just as suggested by @petester42, right now this is just weird.\n. You ever change one thing, and then change something else, and then before you know it you're crying on the bathroom floor and the compiler is screaming in the kitchen?\n. I agree with the points about target and provider. Let me know if you think I should do it for response too. Generally speaking, Swift is moving in a direction where namespaces are a thing (cf Alamofire.Request etc) but I can totally see how this could be irritating and make the APIs less usable.\n. I'm going to factor this into individual PRs, so we do this right!\n. How about just removing when Moya hits v6?\n. Am I correct in reading this as \"that would be cake\"\n. THE CI WAS FAILING\n. NOOOOOOO WE\n(:sly smile:)\n. LGTM, mind if I merge this before CI check finishes?\n. Code coverage check is a nice way to remind you of technical debt, IMO, and I've got a fix coming up now.\n. +2%. NICE.\n. Sorry, week got mad. To do is to address your crashing concerns and string inference, add some code coverage to alamofire method conversion and the method logger plugin. After that i think my codecov duty will be done.\n. Disabling force pushes: probably good.\nRequiring status checks: probably good, but there are instances where discretion is required.\nThen again, that discretion can be exercised by temporarily disabling the protection setting.\n. The inherent issue is that Carthage just builds targets in an xcodeproj; based on the issue, I'd recommend option 1, which was to make extension frameworks that sugar the respective libraries for Moya. I'm pretty sure that's what Apple would recommend in this situation if we were back in submodules. Until such time as we have weak linking in Swift, I think that would be the best option.\n. The \"correct\" way to do this would be to provide a core \"Moya\" framework and then \"ReactiveMoya\" and \"RxMoya\" ancillary frameworks. Yes, you may end up needing to do two imports. You have to deal.\n. YUP. Subspecs are a bad method of organising code.\n. But Orta, the projects are not strongly correlated! The RAC extensions to Moya are simply extensions to provide helpful wrapping. The core value of Moya lies in its endpoint modelling types, and if the extension subspecs went away tomorrow, we would be no worse off. There will be very little requirement for lockstep updates as long as the extensions only use public API, just as they should. A strong adherence to semantic versioning would obviate many issues. I agree that lockstep repo updates suck, but that wouldn't be the case here.\n. @AvdLee I should think the correct way to do this would be to embed it within the Target and correctly generate the params using the parameters property of the TargetType so you have a single point of entry.\n. Yes it could. Hold on.\n. @ashfurrow ready to merge at your pleasure\n. At Network Locum, we're taking this struct based approach as it's a little more flexible. The enums with the vast proliferation of AVs is here, though since an AV is really just a tuple, I could typealias those away, or embed them in a struct, since they form a pack of relevant query parameters.\nYou can see I've taken something of a middleground over the usual enum approach, versus the innovative one above. @mpurland, it would be incredible if you could write this up somewhere and add a link to the Moya docs, or even better contribute back to them. I love the economy of the protocol extension, faking a base class without the cruft of inheritance with opt-in behavior!\nswift\npublic struct LocumTarget {\n  public enum Environment: String {\n    case Dev = \"com.networklocum.environment.dev\"\n    case Live = \"com.networklocum.environment.live\"\n  }\n  public enum Action {\n    case FindJobs(postcode: String, radius: Int, fromDate: NSDate, weekdays: Set<Job.Weekday>, timePeriod: Set<Job.TimePeriod>, hourType: Set<Job.HourType>, includeUrgentCare: Bool, token: String)\n    case FindJobDaysAtFollowedPractices(fromDate: NSDate, weekdays: Set<Job.Weekday>, timePeriod: Set<Job.TimePeriod>, token: String)\n    case GetUserToken(saltedHashedPassword: String, email: String)\n    case GetSaltForEmail(email: String)\n    /// Nil status implies no filtering, so return every application\n    case GetUpcomingApplications(token: String, filteredByStatus: Application.ApplicationStatus?)\n    case GetUser(token: String)\n    case ApplyForJob(jobID: String, userToken: String)\n    case WithdrawApplication(applicationID: String, userToken: String)\n    case GetApplicationByID(token: String, id: String)\n    case PostViewedJobDayEvent(jobDayID: Int, token: String)\n  }\n  public let environment: Environment\n  public let action: Action\n  internal init(environment: Environment, action: Action) {\n    self.environment = environment\n    self.action = action\n  }\n}\n. That's unusual! And also bad! That shouldn't happen! A PR to fix this would be most welcomed. Hopefully there's a way to retrieve the AF request object without side-effecting.\n. I wonder if the world would benefit from RAC factoring out the Scheduling library into its own framework.\n. Can do but you'll lose API compatibility, that cool?\n. Bed to kill al this\n. I should think that, in fact, we can merely rename these types, remove the domain and take away the underlying Int \u2013\u00a0these types are still useful and ought to remain.\n. RLY\n. OMG\n. There's nothing meaningful to coalesce to \u2013 it's a programmer error for these methods to not to map to Alamofire methods, IMO. I'd rather it crash than start sending GETs when you're expecting PUT.\n. ",
    "lkuczborski": "Thanks for the mention @orta! :) I am planning to update the generator soon with new features, including sample data generation and header values parsing.\n@orta It would be great if you could quickly test/have a look at the extension and let me know what fundamentals are still missing there before I could launch it officially on Paw Extensions page.\n. No PR currently, but you can take a look at what is currently in master.\n. Great, thanks! \ud83d\ude4c\n. Awesome, thanks! \ud83d\ude03\n. I am happy that I could spark this discussion :) I agree that this is a topic for a separate pod (possibly living inside github.com/Moya organization as @colinta said). Like the @ashfurrow idea about clever completion blocks and I am really curious what will emerge out of it.\n. Wow, never imagined that this would explode to such an active discussion! \ud83c\udf89\n@ivanbruel Great work, thanks for sharing! \ud83d\udc4d\n@petester42 Very nice idea! Would gladly collaborate myself \u2013 thinking about the same thing for Unbox. We have recently switched to Unbox as it offers immutable model classes, gets rid of empty inits and it basically lives well with basically any model class.\n. ",
    "dangthaison91": "Hey guys, I just created a Moya Generator from Swagger Spec by using SwagGen. At the beginning, I was successful create it by using original Swagger Codegen but it has many limitations and hard to modify.\nLuckily @yonaskolb created another Codegen written in Swift, more flexible and simple. I am very happy it now. kudos for him.\nYou can get the template here: https://github.com/dangthaison91/SwagGen/tree/master/Templates/Swift-Moya\nIt supports upload file, all parameter types.\nBut It also has some issues: not support multi-authentication method, the Model generator is not perfect with Realm.. I still get the error. Seem that code was not updated?\n. @BasThomas Yes, i'm using CocoaPods and pod version is 7.0.2. Try to set to 7.0.0 but it still load as 7.0.2?\n. Oops, sorry, i'm using XCode 7.3.1/Swift 2.2. \nIn #631 @ashfurrow told that 7.0.1 is latest version support Swift 2.2.. But i cannot install although i have specific version number in pod, it always get 7.0.2.\nThis is my pod:\npod 'Moya', '~> 7.0.0'\n    pod 'Moya/RxSwift', '~> 7.0.0'\n    pod 'ObjectMapper'\n    pod 'Moya-ObjectMapper/RxSwift', '~> 1.3.1'\nHere is pod log:\n\nInstalling Moya (7.0.2)\nInstalling Moya-ObjectMapper (1.3.1)\nInstalling ObjectMapper (1.4.0)\n. Thanks @sunshinejr, i used wrong opertor :(. Thanks the team for yours really quick response!\n. @cocoatoucher Have you find out the solution?\n\nNow you can create your own custom Plugin, may be named as MyErrorPlugin. Then you can parse your response data and change it to Error if need:\n```ruby\npublic struct MyErrorPlugin: PluginType {\n    func process(_ result: Result, target: TargetType) -> Result {\n        let json = JSON(data: response.data)\n    // Convert response.data to APIError instance\n    guard let apiError = APIError(jsonData: json) else {\n        return Result.success(response.data).\n    }\n\n    let userInfo = [NSLocalizedDescriptionKey: apiError.message, \"httpStatus\": response.statusCode, \"areaStatus\": apiError.errorCode, \"url\": response.request?.url?.absoluteString] as [String : Any]\n    let mappedError: NSError = NSError(domain: \"custom error domain\", code: response.statusCode, userInfo: userInfo)\n\n    return Result.failure(mappedError)\n}\n\n}\n```\nSo, you don't need to subclass ReactiveCocoaMoyaProvider. @AndrewSB I face a problem when the access token expires and multiple requests happen, that all request a new access token via the refresh token, at the same time.\nI noticed that Ello-iOS is handling multiple unauthorized requests by call request/refresh token at a time and waiting for a new token on other requests.\nI don\u2019t see the similar feature on Artsy Eidolon.\nDoes trackInFlights will help. I didn\u2019t see much information or document about it, just read in some related issues/commits?. @sunshinejr Could you help @syegin finish this PR and release it asap? We also have the same problem for several APIs.\nAt the moment, I have to manually create MultiFormData like PR in API Target.. I just faced issue #1599 and I think this will help to solve the similar issues and improve extend problem in the future. What do you think?. Did you resolve this @anhpt681995 ?. ",
    "mrackwitz": ":metal: \n. ",
    "aschuch": "I just had the same issue and resolved it with your suggested fix.\nIs there a reason this has not made it into master yet? Do you want to hold off until this is resolved in ReactiveCocoa itself?\n. :+1: done\n. @swizzlr Any news on this issue?\n. Oh nice.\nThis might actually be pretty helpful, thanks. \ud83d\udc9e\n. Hi @ashfurrow,\nI tried to build Moya for Swift 1.2 with your aforementioned link, but went straight to dependency hell.\nI've done 2 things now:\n1. I updated Moya to swift 1.2. (I am happy to open a separate pull request for that if you want?)\n2. I have now created a project at https://github.com/aschuch/MoyaCarthage that creates Moya.framework to directly work with Carthage.  \nDo you think Carthage support should be part of Moya itself or do you want someone else to cover that part? I am happy to maintain this project as a reference to other developers using Carthage. \n. Hey @te-chris, I will open a pull request this week that should fix 1.2 compatibility. \n\n@ashfurrow, 1.2 compatibility would require a ReactiveCocoa version bump to alpha 3 on the CocoaPods side of things and I don't think there is a podspec for that yet?\n\nSomeone tried once but apparently it was really hard?\n\nThis was actually the reason why I ended up creating a new project for Carthage, because I wasn't able to resolve the CocoaPods dependencies to work with swift 1.2.\nI think we should have two separate Demo projects, one for CocoaPods and one for Carthage? I am open towards maintaining the Carthage side of things if you want.\n. See changes in #107.\n. I think 2 targets would be best, not a huge fan of 2 demo projects or repos tbh. The repo I created was meant to be a POC only.\nI think Carthage requires the project file to reside in the root of the repo though, so we would need to rearrange some things.\n@orta's idea sounds really great. What do you think, @jspahrsummers?\n. :+1:\n. - I think that the server sends a response anyway, although it may not contain any actual data. However, it would still be possible to parse the response into a MoyaResponse object to e.g. get its statusCode.\n- Based on this PR, Alamofire seems to be handling redirects transparently, but I have not had the time to further investigate.\nSomething like filterSuccessfulStatusAndRedirectCodes definitely makes sense, especially for backwards compatibility with any existing code using this library.\n. See changes in #107. \n. See changes in #107. \n. Cool, :+1:\n. Cool, :+1:\n. There is Alamofire support for uploading and downloading files, so this would be straight forward I guess.\nI anyone already working on this? Might need it in the following weeks so I might as well hack on it if you want.\n. @zdavison I did not start on it yet. I probably don't get time to do it anytime soon though... :disappointed: \n. Not yet, do you want to give it a shot and open a PR @clooth?\n. @startupthekid I like that.\n\nwhere uploadType would only be checked if requestType returns .Upload. What I like a lot about this approach is it's easy to implement, it keeps the abstraction, and makes migrations much easier since all people now have to do is add the two new variables to conform.\n\nWe could even go as far as adding a default implementation with sensible defaults to the added protocol vars, which would \"upgrade\" any existing implementations. \n. Great idea, count me in. \n. Is MoyaResponse solely used for ReactiveCocoa stuff? If so, we should document that in its header too.\n. Yes you can definitely just fork Moya, change the ReactiveCocoa branch in the Cartfile and you are good to go.\nTo add more context: The problem here is that the ReactiveCocoa beta is referenced using its specific github branch.\nI think we should simply add a version requirement to the major version of ReactiveCocoa, so that Carthage has a bit more room to decide which version of ReactiveCocoa to use.\ngithub \"ReactiveCocoa/ReactiveCocoa\" ~> 3.0\n. I get how you feel @ashfurrow. What do you think of my proposed solution based on multiple frameworks. https://github.com/Carthage/Carthage/issues/588\nThis way we can keep everything in one repo?\n. We just discovered a case where in-flight GET requests would lead to a bug in one of our apps.\nWe continuously check for user settings whenever the app is opened. \nIn case the user is no longer authorized, an automatic \"relogin\" attempt is made, which also tries to download the user settings.\nIn case the user settings call is not finished by the time of the \"relogin\", the \"relogin\" waits for the current unauthorized user settings request to return and gets a 401 from the API.\nThis was easy enough to fix, but shows that GET requests might also lead to some unexpected behaviour.\nI think I'd like in-flight caching to be opt-in, which would also make it less \"magic\" for everyone new to reactive programming concepts.\n. Sounds great!\nI think we should also consider caching the result of any previous requests and replay them in case we are offline.\n. @irace Would you mind sharing some info/pseudocode of what you are doing in Tumblr.app? Would love to get some more ideas. What kind of use cases do you cover with your implementation? \n. This can be closed with the release of 3.0.\n. :+1: Good for me :)\n. Looking good. \nOne concern that I have: The default logger uses multiple print statements to log a single request/response. I guess that multiple simultaneous requests/responses (on different threads) could corrupt the log output in a way that could be misleading to the user...\nI would like to suggest to at least accumulate a the log output of each of the logNetwork... methods into a single String that gets printed at the very end of the method. This way, a single log is somewhat atomic.\n. I think it is reasonable to accumulate the request log output into a string, then print the whole thing. That should be fine. Don't see any reason to use NSLog here. Also, I think its fine to log the request and the response separately (i.e. don't wait for a response to print request + response together).\n. I'd like to introduce #238 in 3.0.0 as well. :tada: \n. Actually, this should be merged into develop.\nContinued in #238.\n. Thanks for the feedback. I'll push your remarks asap.\n- First of, I don't really like the subclassing approach either. I tried a few things with protocols but none of them really seemed to work out. I'd love to discuss alternatives though.\n- I decided to give the Plugin separate calls for stubbed requests and real ones, because the parameters are a bit different. This could, however, be abstracted into a single method on the plugin that accepts a stubbed/not-stubbed parameter.\n- Could easily add the manager to the plugin functions, not sure what the plugin would do with it though. Do you have any use cases that come to mind?\n- I am not too fond on the term plugin either. Maybe mixin? sideeffect? I just named it plugin, because everyone is sort of familiar of this term. \n:boom:\n. Ok, so I've removed the duplication of methods for stubbed/real requests and added the provider to the callbacks.\nI have also put together a version on a different branch that shows how Plugin can be implemented in terms of a protocol. This requires a PluginContainer wrapper in order to keep a reference within MoyaProvider and satisfy the type system. \nI also tried to make  PluginContainer conform to ArrayLiteralConvertible to keep the API clean, but could not figure out a way to accept the type constraints.\nswift\nextension PluginContainer: ArrayLiteralConvertible {\n    init<P: Plugin where P.T == T>(arrayLiteral elements: P...) {\n        willSendRequestClosures = elements.map { $0.willSendRequest }\n        didReceiveResponseClosures = elements.map { $0.didReceiveResponse }\n    }\n}\n. Any opinions towards keeping the subclass vs. the protocol approach?\n. Awesome. Thanks for your input everyone. :heart: \n. Yup. Since Alamofire.Request is implemented as a class, we could simply modify the request object in place. There is no real need to return it, just illustrates the intent of the method and would be future proof in case Alamofire.Request might be changed to a struct or something.\nI still think we could get rid of it now, can always change it back later...\nYour implementation of the logger is pretty awesome as well :tada:\n. Looking good. \nI like the abstraction of the Request a lot. Much cleaner now. \n. Shouldn't the Cartfile specify ~> 2.0 instead of ~> 2.0.2? Not sure about the exact implications of this, but pinning to a major version seems to be the better choice here. Opinions?\n. Go for it :)\n. In my experience with Carthage, the last version (2.0.2) is picked up.\n. Looks good, @nosrak113. :sparkler: \n. I am getting \nA shell task failed with exit code 66:\nxcodebuild: error: Scheme Moya is not currently configured for the build action.\nwhen running carthage update --no-use-binaries --platform iOS\n. I've just tried, works pretty well. Good work, @JRHeaton!\n. Nice idea, @DanielTomlinson. I guess this could be part of the path within MoyaTarget? However, I can see this to be difficult to implement in a generic way.\n. I'll submit a PR as soon as I get time. Just wanted to report in case anyone wants to take a shot at it right away. We should potentially cut a 6.0.1 release after that as well.\n. I think mapping responses to models is something that is quite far away from a networking abstraction library such as Moya. I do not see this kind of stuff directly within Moya.\nThat said, you could create an internal protocol JSONMappable that defines the responseType property and conforms to TargetType. Your API definition(s) may then conform to JSONMappable.\nI've done something similar with Argonaut but opted for an implementation where you can optionally parse the response to Argo model(s).\nSomething along the lines of\nswift\nProvider.request(.Profile)\n    .filterSuccessfulStatusCodes()\n    .mapJSON()\n    .mapToType(User) // maps to a User model\n. Ok, I guess you can do something like this.\n`` swift\n// Create your own protocol that extendsTargetType`\nprotocol JSONMappableTargetType: TargetType {\n    var responseType: ALSwiftyJSONAble { get }\n}\n// Implement your Moya enum using JSONMappableTargetType\nenum ExampleAPI:  JSONMappableTargetType {\n    // Implement all TargetType properties\nvar responseType: ALSwiftyJSONAble.Type {\n    switch self {\n    case .X:\n        return GetResponse.self\n    // etc.\n}\n\n}\n// Then add an additional request method\nfunc requestType(target: JSONMappableTargetType) -> SignalProducer {\n    return request(target).mapObject(target.responseType)\n}\n``\n. I think we should specify the dependency as~> 4.0, this will always pick the current RAC version.\n. This looks really good to me. I think we should also consider adding a way to get progress information for uploads. Do you think an optional closure on therequestmethod would be ok?\n. Although I don't use RxSwift, [I have done something similar](https://github.com/aschuch/Argonaut/blob/master/Argonaut/JSONMapping%2BReactiveCocoa.swift#L55) for ReactiveCocoa and [Argo](https://github.com/thoughtbot/Argo). This might point you in the right direction. \n. Actually, thinking about it again, my solution does not really work around your problem. However, Argo has a way to extract an object [based on a root key](https://github.com/thoughtbot/Argo/blob/b0b6920e5c34591e3884a4e50a740167e6cbaf68/Argo/Functions/decode.swift#L21).\n. I completely agree. We should keep.nsErrorand get rid of RAC 2.0 with the next major release.\n. @BasThomas Oh I must have missed that. Yup that would be best I think.. Oh, I might have found the error: we accidentally enabled thevalidateflag in our target.... Huh, I put that in for debugging. Good catch!\n. Good point.Alamofire.Request` is passed by reference anyway, maybe we can get rid of the return anyway?\nIn case we want to go forward with the overloading, calling just  plugins.forEach{ request = $0.willSendRequest(token, request: request) } would no longer work, since it will always call the function with the return value.\nShould we invoke both methods within the forEach closure?\n. :tada: \n. ",
    "ryancrosby": "I don't have time to make a pull request right now, but the Gemfile in this repo no longer works. See https://github.com/CocoaPods/CocoaPods/issues/2869 and https://github.com/CocoaPods/CocoaPods/pull/2835. The changes for swift support in cocoapods have started to get merged into master as 0.36.0 approaches.\nUse this:\n```\nsource 'https://rubygems.org'\ngem 'xcpretty'\nPre-release CocoaPods support for Swift AWWW YEAH\ngem 'cocoapods', :git => 'https://github.com/CocoaPods/CocoaPods.git', :branch => 'swift'\ngem 'cocoapods-core', :git => 'https://github.com/CocoaPods/Core.git'\ngem 'xcodeproj',  :git => \"https://github.com/CocoaPods/Xcodeproj.git\"\ngem 'claide',  :git => 'https://github.com/CocoaPods/CLAide.git'\n```\n. ",
    "retsohuang": "You guys are genius!! Thanks.\n. Thanks to reply, seems like we need wait that work finished.\nI saw your app eidolon(Artsy's new auction app) also use this pod, how do you deploy to Hockey?\nOr you haven't deploy yet?\n. Ok, I'll check that later, thanks. \n. I'm using RxSwift + Moya in my project, Is the sample code like this  would help?\nprovider.request(.UserProfile(\"ashfurrow\")).subscribe(next: {\n          image = UIImage(data: $0)\n        }, error: {\n          println($0)\n      })\n. I have a similar question, how can I send an array as parameters? \n[\n  \"Foo\",\n  \"Bar\"\n]\n. ",
    "alloy": "Wrote down the idea of CocoaPods being able to generate a throw-away Xcode project from a podspec here https://github.com/CocoaPods/CocoaPods/issues/2885.\n. \ud83d\udc4b\ud83d\ude06\n. @ashfurrow Btw another thing you can do, going forward, is that, while you can still oversee it all, give commit access to contributors early.\nE.g. When they create a second PR that follows all design rules.\nIt worked great for CocoaPods, but your audience and mileage might vary.\n. I wouldn\u2019t say all open source, but if your goal is to have contributors, then yeah making them feel as owners hugely improves contribution. I\u2019d also outline the rules for getting push access in e.g. your README, which might give people that extra push they need to contribute something they\u2019d otherwise not feel motivated enough for.\n. Awesome :tada: \n. ",
    "te-chris": "Sorry, I'm not sure if this is the appropriate place for this comment, but I'm trying to get Moya going on a swift 1.2 XC 6.3 Beta 4 project and running into some compile errors.  Some were easy fixes (swift demanding that a method parameter be called with its parameter name), but one is stumping me somewhat:\n``` swift\n/// Used for stubbing responses.\npublic enum EndpointSampleResponse {\n    case Success(Int, NSData)\n    case Error(Int?, NSError?, NSData?)\n    case Closure(@autoclosure () -> EndpointSampleResponse)\nfunc evaluate() -> EndpointSampleResponse {\n    switch self {\n    case Success, Error: return self\n    case Closure(let closure):\n        return closure().evaluate()\n    }\n}\n\n}\n```\nThe use of @autoclosure here raises a '...Pods/Moya/Endpoint.swift:16:19: 'autoclosure' attribute is only allowed on parameters, not on enum cases'\nerror.   I'm not familiar enough with swift yet to know what a the right thing to do in this situation is, though it looks like this discussion here covers it somewhat, at least I think so.  https://devforums.apple.com/message/1101244#1101244\nHappy to open a new issue as I'm guessing this isn't related, just saw the discussion of 1.2 compatibility and seized one it.\n. Thanks! @ashfurrow great project, can't wait to get more familiar with it.\n. Thanks! @ashfurrow great project, can't wait to get more familiar with it.\n. ",
    "neonichu": "@orta wouldn't be a fan of generating that. If you want to support Carthage, you should at least run it once to verify that it builds and then you'll have the Cartfile.lock, anyway.\n. Should be really easy with the approach from CocoaPods/pod-template#106 and ensuring that it continues to work can be done via CI. I'll make a PR once everything is in place inside both Carthage and CP.\n. @ashfurrow since both CP as well as Carthage have shipped now with the required changes, this should be good to merge. \nKeep this in mind, though:\n\nthe Pods/ directory would need to be added to the repo\n. @ashfurrow should be good to merge now, sir!\n. @ashfurrow this should be :ok_hand: now\n. I'm not actually using Moya, but I'd be up to help out with support for dependency managers :)\n. @aschuch sounds good, do you want to make a PR for that?\n. AFAIK, there's nothing like subspecs in Carthage, so it would need to be a separate repo, probably?\n. Yah, I wouldn't know how to do optional dependencies, but I'm also not the most knowledgeable on this subject :)\n. The goal was to do the carthage build as part of CI to catch issues with it\n. \n",
    "jspahrsummers": "I don't think two demos split by choice of dependency manager make sense. A demo is just a demo, so why does it matter to consumers how it includes its dependencies?\nOn the other hand, it shouldn't be hard to add an Xcode project for Carthage compatibility with the framework. If you have questions about that, I'd be happy to help.\n. No problem. :tada: \n. @crmorse If you're using Carthage to manage submodules, you might be hitting https://github.com/Carthage/Carthage/issues/320.\n. ",
    "hariseldon78": "It's in the file \"Moya/docs/Readme.md\". Now i realize that there is another Readme.md in the root directory, so maybe the obsolete one should be deleted? \n. ",
    "chipsterm": "Thank you for the response. I figured that out shortly after I created the ticket. \n. Thank you for the response. I figured that out shortly after I created the ticket. \n. ",
    "steam": "I saw you got the CI failure fixed. Nice work! I've added a spec for the stubbed nsdata error. Should be good to go. Thanks!\n. @colinta we're currently parsing Link: into NSURLComponents and then reassembling the params in defaultParameters. Its not ideal though. I am curious how other Moya users handle this.\n. Nice, we are using WebLinking.swift for the parsing. WebLinking gives us the ability to ask for \"next\" and \"prev\" which are super handy. The issue we're running into is that the links are already url encoded by the application server generating the \"Link\" in the response header. Just saw your representor pattern comment. We'll explore that internally. We're non-RAC so we'll need to come up with something without signals. Seems like a good idea though @ashfurrow. Thanks.\n. Sounds great @ashfurrow, I'm in. I think @colinta is mentioning this but I have two github accounts, doh, and I use @steam for the most part these days (I am also @process255). If possible @steam would be a better github user to add.\nGreat work with Moya so far. We're loving it at Ello.\n. Sure thing @ashfurrow! I'll add those here shortly.\n. I'll bump the version to 2.1.0 since this is an added feature. Have you been using lightweight tags or annotated tags?\n. Ok, latest is up. Sounds like I'd better leave the release to you :smile: Thanks!\n. I'll throw my vote in for using GH issues. One of the problems with a separate discussion tool in my opinion is fragmenting the conversation and not preserving it for the future. Future Moya users (and current ones) can easily search and read the conversation history in GH.\n. :metal: Nice work. The API is much clearer with these changes.\n. I like the idea of using a single result type. :+1: \n. @colinta loves to merge!\n. Its been interesting watching this discussion. As @colinta and I work on the same project that uses Moya I haven't commented because we share a similar love for enums and I share his perspective. The possibility of the project ditching them concerns me though so I figured I better speak up. \nThe enum pattern introduced to us by Moya very early on has helped guide a lot of our decisions in our large and mature swift app. We love using enums for just about everything we can. They express a large (and complete) set of information in a very concise package. \nHowever, we ran into the same issue that @ashfurrow mentions, they don't scale very well when there are a lot of endpoints. We haven't had a great solve until now. I like @colinta's struct in an enum suggestion. Its something that works within the existing Moya paradigm and may help solve the scale issue. I see a refactor to ElloAPI in the near future. :metal: \n. ",
    "crmorse": "I am still getting this error with 0.6 and 0.6.1 in Carthage.  If I try going back to 0.5 (just to find anything that works) I get a different error:\n\n*** Checking out Moya at \"0.5\"\nfatal: reference is not a tree: 80cc05720013042eccfc8bc20a8304cd3ae656d7\n\nI have tried an empty Cartfile with nothing but Moya and also fully deleting the Carthage/Checkout/Moya folder to start from scratch and I'm still getting this.  Is the errant .gitmodules in my own repo or in Moya's?\n. ",
    "raphaelmor": "I still have an issue though with :\nswift\nprovider.request(.Zen, completion: { (data, error) in\n            if let data = data {\n                // do something with the data\n            }\n        })\nIt complains about Missing argument for parameter 'method' in call\n. for this particular line in the commit it is just an issue with the order of the parameters\n. ",
    "aehlke": "Ah, never mind... Misunderstood how this is done.\n. I've posted the question on StackOverflow since it's not particularly Moya-specific: http://stackoverflow.com/questions/34707426/what-does-this-swift-type-error-mean-it-reads-like-whats-expected-is-already-t\n. Just realized I didn't post the actual implementation of endpointsClosure, at the top of this:\n```\nstruct APIProvider {\n    static var username: String? = nil\n    static var password: String? = nil\nstatic var endpointsClosure = { (target: ManabiAPI) -> Endpoint<ManabiAPI> in\n    var base64Login: NSString?\n\n    if let username = username {\n        if let password = password {\n            let login = NSString(format: \"%@:%@\", username, password)\n            let loginData: NSData = login.dataUsingEncoding(NSUTF8StringEncoding)!\n            base64Login = loginData.base64EncodedStringWithOptions([])\n        }\n    }\n\n    let parameterEncoding: ReactiveMoya.ParameterEncoding = target.method == .GET ? .URL : .JSON\n\n    let endpoint: Endpoint<ManabiAPI> = Endpoint<ManabiAPI>(\n        URL: url(target),\n        sampleResponseClosure: {.NetworkResponse(200, target.sampleData)},\n        method: target.method,\n        parameters: target.parameters,\n        parameterEncoding: parameterEncoding)\n\n    if let base64Login = base64Login {\n        let headerFields = [\"Authorization\": \"Basic \\(base64Login)\"]\n        return endpoint.endpointByAddingHTTPHeaderFields(headerFields)\n    } else {\n        return endpoint\n    }\n}\n\nstatic func StubBehaviour(_: ManabiAPI) -> ReactiveMoya.StubBehavior {\n    return .Never\n}\n\nstatic func DefaultProvider() -> ReactiveManabiAPIProvider<ManabiAPI> {\n    return ReactiveManabiAPIProvider(endpointClosure: endpointsClosure,\n        requestClosure: endpointResolver(),\n        stubClosure: StubBehaviour,\n        plugins: APIProvider.plugins)\n}\n\nprivate struct SharedProvider {\n    static var instance = APIProvider.DefaultProvider()\n}\n\nstatic var sharedProvider: ReactiveManabiAPIProvider<ManabiAPI> {\n    get {\n        return SharedProvider.instance\n    }\n\n    set (newSharedProvider) {\n        SharedProvider.instance = newSharedProvider\n    }\n}\n\n}\n``\n. Thanks @gregpardo that may help. But I've disabled plugins in an attempt to narrow down this issue. Glad you found your fix.\n. Ah I think I've solved it, something stupid - I specifyplugins: APIProvider.pluginsdespite having commented outAPIProvider.plugins- it gave that unrelated error for that static var not existing. I don't know if this is related to what you ran into, but at least your problem led me to it.\n. Yep, all resolved now... Sorry for the noise, thanks.\n. These solutions end up encoding the commas a%2C` which isn't ideal.\n. ",
    "dcflow": "Ok I fixed it. :) I see you guys at Artsy use beta 1. Are there any problems when you submit the app to the app store with beta 1?\n. Thank You Orta! :)\n. ",
    "sebinsua": "What I mean is that this happens when you follow the installation instructions in your README. :)\n```\npod 'Moya', :git => \"https://github.com/AshFurrow/Moya\"\nInclude the following only if you want to use ReactiveCocoa extensions with Moya\npod 'LlamaKit', :git => \"https://github.com/AshFurrow/LlamaKit\", :branch => \"rac_podspec\"\npod 'ReactiveCocoa', :git => \"https://github.com/AshFurrow/ReactiveCocoa\", :branch => \"podspec\"\npod 'Moya/Reactive', :git => \"https://github.com/AshFurrow/Moya\"\n```\n. Ah, alright. Thanks for the help. :)\n. Ah, alright. Thanks for the help. :)\n. Has anybody done any work on this yet?\n. ",
    "avgx": "As for me closure will be great\n. As for me closure will be great\n. failed to add closure due to poor swift experience.\nadded property.\nused with this code:\n```\nclass MyReactiveMoyaProvider : ReactiveMoyaProvider {\n/// Initializes a reactive provider.\noverride init(endpointsClosure: MoyaEndpointsClosure, endpointResolver: MoyaEndpointResolution = MoyaProvider.DefaultEnpointResolution(), stubResponses: Bool  = false, stubBehavior: MoyaStubbedBehavior = MoyaProvider.DefaultStubBehavior) {\n    super.init(endpointsClosure: endpointsClosure, endpointResolver: endpointResolver, stubResponses: stubResponses, stubBehavior: stubBehavior)\n}\n\noverride var hasNetworkActivity: Bool {\n    get {\n        return self.hasNetworkActivity\n    }\n    set(newValue) {\n        println(\"MyReactiveMoyaProvider.hasNetworkActivity \\(newValue)\")\n        UIApplication.sharedApplication().networkActivityIndicatorVisible = newValue\n    }\n}\n\n}\n```\n. failed to add closure due to poor swift experience.\nadded property.\nused with this code:\n```\nclass MyReactiveMoyaProvider : ReactiveMoyaProvider {\n/// Initializes a reactive provider.\noverride init(endpointsClosure: MoyaEndpointsClosure, endpointResolver: MoyaEndpointResolution = MoyaProvider.DefaultEnpointResolution(), stubResponses: Bool  = false, stubBehavior: MoyaStubbedBehavior = MoyaProvider.DefaultStubBehavior) {\n    super.init(endpointsClosure: endpointsClosure, endpointResolver: endpointResolver, stubResponses: stubResponses, stubBehavior: stubBehavior)\n}\n\noverride var hasNetworkActivity: Bool {\n    get {\n        return self.hasNetworkActivity\n    }\n    set(newValue) {\n        println(\"MyReactiveMoyaProvider.hasNetworkActivity \\(newValue)\")\n        UIApplication.sharedApplication().networkActivityIndicatorVisible = newValue\n    }\n}\n\n}\n```\n. Great! That is almost exactly what I wish to express, but failed to make it compilable!\n. Great! That is almost exactly what I wish to express, but failed to make it compilable!\n. ",
    "skywinder": "@ashfurrow hmm, update it to 1.2? :wink: \n. Hooray! :+1: \n. Yep, it's not perfect, it can't read your minds (what should be in change log and what shouldn't), but can work very closely with labels.\n(for example #81 should be also tagged as duplicate to avoid appearing in change log)\nBut it's not a big deal. And in the end you will get fully automated change log. ^)\n. Cool! I'm in! +1 :+1: \n. As option:\nAs @esttorhe suggested, but this 2 images in a row and add arrow between like this: :city_sunset:  :arrow_right:  :rocket: \n. As option:\nAs @esttorhe suggested, but this 2 images in a row and add arrow between like this: :city_sunset:  :arrow_right:  :rocket: \n. @ashfurrow  :+1:\n. @ashfurrow  :+1:\n. Hi. I created special script for this steps ( it do anything except 2 ). I use it for my personal needs, but create a gem also. Check https://github.com/skywinder/bumper_pusher repo for details. Or just intall and try it: \ngem install bumper_pusher\nYou can also try a dry run to verify steps. \n. No. But if it is all about running make release command, I believe that it's easy to implement. \n. Ok, so we can add some shell script in the root directory to bump and update and push pod.\nFeel free to ask, if you need any help with bumper_pusher\n. +1. Fully agree with you. It's quite confusing to see success, when actually there is no relevant data in json.\n. About response codes, my thoughts:\n- Response 2xx - successful operation.\n- Response 3xx says that for the successful execution the request is necessary to take additional action. - it's not an error. (luckily Alamofire handle automatically most of this responses, so we don't need to worry about that)\n- Response 4xx says that the client, making the request, did something wrong. - this is error behaviour\n- Response 5xx indicates that the client did everything right - a problem on the server side. - it's discussible but I think it should be also error behaviour\n. ",
    "ptiz": "I am afraid it is not, out of the box. But it would be great if there was something like Alamofire.upload at least.\n. ",
    "zdavison": "Also looking for this fairly soon. @aschuch do you have any progress on this? If not I can take a look.\n. @aschuch that's ok, i'll take a look here, we need it in the next week or so.\n. FWIW we ended up just doing it by hand (since we only need it for one request) and having a special case that returns a MoyaResponse until Moya/Alamofire support it natively.\nI'd be of the opinion that we should have a seperate upload fwiw, trying to compress it into existing methods usually leads to confusion as to what exactly is going on and lack of flexibility.\n. ``` swift\n  // Multipart image uploading not supported by Moya/Alamofire, temporary stand in\n  internal static func ns_multipartImageUpload(urlString: String, image: UIImage, imageKind: ImageKind, progressHandler: ((Float) -> Void)?) -> RACSignal{\nlet imageData       = UIImageJPEGRepresentation(image, 9.5)\n\nreturn RACSignal.createSignal{\n  (subscriber) in\n\n  Just.post(\n    urlString,\n    headers:    [\"X-Auth-Token\":  DropLogic.sharedInstance.apiToken!],\n    data:       [\"sizes\":         imageKind.rawValue],\n    files:      [\"file\":          HTTPFile.Data(\"image.jpeg\", imageData, nil)],\n    asyncProgressHandler: {\n      (progress) in\n      progressHandler?(progress.percent)\n    },\n    asyncCompletionHandler: {\n      (result) in\n\n      if let error = result.error {\n        subscriber.sendError(error)\n        return\n      }\n\n      let moyaResponse = MoyaResponse(statusCode: result.statusCode!, data: result.content!, response: result.response)\n      subscriber.sendNext(moyaResponse)\n      subscriber.sendCompleted()\n    }\n  )\n\n  return RACDisposable()\n}\n\n}\n```\nUsing Just and ReactiveCocoa. \n. ",
    "SpacyRicochet": "@zdavison Can we see what your solution looks like? I tried hacking it in an endpointResolver, but I hit a wall when I figured out the Endpoint doesn't seem to know about any of the parameters it's been given in by the enum. Now, creating a custom, plain NSURLRequest seems the best option. \nBut you returning a MoyaResponse sounds intriguing, but I don't get what that would look like.\n@ashfurrow \n\nOn the other hand, if we add a new optional property to MoyaTarget for uploading (say, we call it uploadData), we could ignore the method of the target and assume it's uploading based on the presence of a non-nil uploadData.\n\nI like this one. Beyond the fact that we still need a call-back of some kind, it fits very well within the existing way of creating a Target.\n\nNeither option really sits with me. We could, instead, have a new upload method on the MoyaProvider class. We would still need the optional uploadData property, the API would become slightly more complicated, and it would be some duplicated code in MoyaProvider and its subclasses.\n\nThis also sounds good, though slightly confused on how this would interact with a Target. Do suddenly all Target cases have the ability to upload data if you call them with this method? Should the method check if the request is a .POST or not?\n. Didn't know about Just :) That's going to be useful. Thanks!\n. ",
    "clooth": "Has there been any work on this yet? :pray: \n. I'll give it a try this weekend, need to look around the source a bit so it feels enough Moya-like.\nSent from my iPhone\n\nOn 08 Oct 2015, at 18:04, Alexander Schuch notifications@github.com wrote:\nNot yet, do you want to give it a shot and open a PR @clooth?\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, I'm sorry to say that I don't have time for this after all.\n. \n",
    "mgroh": "BTW Alamofire now supports uploading multipart/form-data  natively.\n. ",
    "GuidoHendriks": "I would really like this to be part of Moya. Might give it as shot, but I think I need a better understanding of the project before that will work... Is anyone else making progress on this?\n. Maybe we should not focus on multipart/form-data, but on uploads in general. In Alamofire there are 4 types of uploads:\n- File\n- Data\n- Stream\n- MultipartFormData\nI would say we add some kind of request type, which can be either Request or Upload (we could add  Download too). Based on the request type it would execute the right Alamofire methods with the needed data from the target. That would also mean adding some kind of UploadType enum for all the supported upload types.\nThis way you maintain the abstraction. If you were adding a request specifically for uploads, you'd be picking the request type when executing a request, but that's something that the target should know.\nPlease do correct me if I'm wrong, but this seems like a step in the right direction to me.\n. @drw86312 Why would you need an extra endpoint for that? You could instead just use an optional:\n``` swift\npublic enum API: MoyaTarget\n{\n    case CreateAccount(name: String, imageData: NSData?)\npublic var requestType: RequestType {\n    switch self {\n    case .CreateAccount(_, let imageData) where imageData != nil:\n        return .Upload\n    default:\n        return .Request\n    }\n}\n\n}\nAPI.CreateAccount(name: \"Guido\", imageData: nil).requestType      // .Request\nAPI.CreateAccount(name: \"Guido\", imageData: NSData()).requestType // .Upload\n```\n. Looks really good, nicely done! \ud83d\ude0e Will have a good look at this soon, if only I had time I would have given it a shot myself. \n. ",
    "JRHeaton": "Played around with your ideas a bit, @swizzlr. A problem I'm running into is that if using something like:\n``` swift\npublic protocol MultipartFormUploadable: MoyaTarget { }\npublic enum UploadDataProvider {\n    case Data(NSData)\n    case File(NSURL)\n    case Stream(NSInputStream)\n}\nextension MoyaProvider where Target: MultipartFormUploadable {\n    public func request(target: Target, provider: UploadDataProvider, completion: Moya.Completion) -> Cancellable\n}\n```\nThen your entire target type is then needing to conform to this protocol, or you need a second provider and target type for your multipart endpoints. While it doesn't seem like a necessarily common occurrence with a buffer of common sense, someone could technically call this version of request() with a POST target that is not multipart with a random (valid) data provider, since there's no way to distinguish between multipart and non-multipart enum target cases. Any better ideas for separation and compile-time verification of these types of endpoint targets?\n. @ashfurrow Yeah, that is what I demonstrated above in the extension, but saw potential confusion with. Since the entire enum type must conform to MultipartFormUploadable, there's no way to determine whether a specific enum case should be able to be used for a multipart upload or not. This means it's not \"perfectly strict\" in that it can't warn or error if you try to misuse it in this way (misuse meaning call the overloaded version of request() in the extension with a data provider, on a target enum case that doesn't take multipart data). If you do so, you're stuck waiting potentially for the server to WTF at you for trying to upload data to a POST endpoint that doesn't take it, if that will even happen. In short, there's something that we know would at compile time, but can't enforce with the compiler in any way that I can think of, at least with targets as enum types.\n. I've also realized another fault due to Moya's project dependencies coming from the podspec. We are attempting to install Moya via Carthage with yesterday's Xcode beta, and using the swift2 branch of ReactiveCocoa. Moya builds its own version of RAC that comes from its pod dependency on it. Because of this, and since it's an older version of RAC than we actually depend on, Carthage fails to build Moya's RAC w/ the beta command line tools.\nThe way this project is set up for Carthage is seemingly less than ideal. Is there some way that it can be changed to better support it (while retaining your support for CocoaPods)?\n. Just brainstorming possible solutions here.\nRXMoya, ReactiveMoya, and Moya could each have their own (shared) framework target inside of a dedicated xcodeproj (allowing carthage to build them), and then your subspecs could be kept to point to the same files still for people installing through pods. The demo project could install the library via either pods or carthage (or both, with two targets).\n. @orta There isn't a need for multiple repos as I understand it.  It's just having one single standard project w/ the 3 framework targets, and a Demo project that installs/uses it locally. Theoretically the Demo target(s) could even be in the same project file as the framework targets I think. The only maintenance I see being needed there is adding/removing references to source files to the framework targets when files are created/deleted, whereas they would be automatically included via the podspec's source file patterns.\nWhen installed via Carthage, that project's 3 targets would be built and made available, as well as the dependencies listed in the Cartfile as expected. When installed with Pods, the podspecs work as they do now, generating targets to build etc.\nOur team is currently working on a framework we plan to make available via Carthage, and would be nice to make usable via pods as well. So I'm genuinely interested from an author perspective what you feel the burdensome work deriving from such changes could be. It could help us save some time in the future potentially also :)\n. I don't see how most will \"just work\" \u2013 factually, you are missing one single file at minimum that will not at all disrupt your current setup (Cartfile) that is required to have it checkout/build these frameworks, unless people want to use the ones Pods built (which requires going into the Pods build dir, rather than `Carthage/Build, and takes away dep version specification control from the depending target's Cartfile which is confusing to everyone). \nWe ran into confusion at first when realizing Alamofire was missing when it's a direct dep of Moya, and then again when we adopted ReactiveMoya and ReactiveCocoa was missing. I can't quite see how maintaining a 2 line file is determined to be too much work; I think it could be at the very least a good compromise?\nOtherwise, it reasonable to at least put proper usage instructions in the README? Saying use github \"Moya/Moya\" and that alone is gonna wind up with people going through the same aforementioned confusion, however brief (though this will be hard on beginner users of Carthage, which many are w/ it being new).\nAlso, not sure what's up with \"declining request for information\" (had a \"whut\" moment reading that actually) \u2013 not only was it a pretty innocent request for opinion based on experience of what the \"extra\" work on similar goals we have was (in attempts of just understanding why not to properly support Carthage), but also stated that you're not saying anything because you work on Pods? I didn't realize there was a \"don't use that guy's tool\" war going on :'( Saying \"we don't wanna support X because our Y will be supported by more people\" serves only to perpetuate that truth. I was not trying to overstep or pry for information that isn't public or is special sauce... My apologies if I did. I will look at the PR you linked to and try to deduce what the deterrent was.\nIn the mean time I think we will just fork Moya and update it to support the dependency and Xcode versions we need. Thanks for the replies guys; no intention to come off abrasive, just want a better world where we can all use these sexy libraries without being constrained to certain dep managers :)\nPS: fwiw as a random opinion, as someone who comes from a time before Pods/Carthage, it's also less desirable from a depending app setup that a library has no dedicated natural build targets for itself (in an xcodeproj) even with Carthage support not being considered. Makes manual integration via target deps + linking the framework impossible, as pods generating a project is the only way of building it.\n. Updating the README w/ proper directions for Carthage is an understandable compromise to the original issue topic. I think that is helpful from the perspective of someone using the library. :)\n\nThe Cartfile is there now but I don't think it should include ReactiveMoya. Not all projects will need that dependency.\n\nI think you mean ReactiveCocoa. While true, ReactiveMoya(+RAC) is already checked out + built anyway when Carthage builds all 3 framework targets in the Pods project (there are no subspec-specific installs w/ Carthage). Including RAC in the Cartfile would build that version into Carthage/Build (as expected anyway \u2013 this will eliminate \"hunting\" for the build RAC result from Pods). Sure it will mean having 2 RAC builds, but that is already happening with the current setup (since dependent apps have to list it in their own Cartfile, breaking this rule here: https://github.com/Carthage/Carthage#nested-dependencies)\n. That is correct, those all need checked out and built, though not all will need integrated into dependent targets (Rx/RAC mutually exclusive in this case).\n. The only downside would be that for people installing Moya via Carthage with no intent to use the Reactive or Rx extensions will have to wait for Carthage to build its RxSwift and ReactiveCocoa checkouts. But this is sort of the nature of Carthage with there being no support for subspecs or any way to specify specific targets to build when checked out.\n. Update: The issue remains with the 7.0.1 Xcode. We are unable to use ReactiveMoya via Carthage, and unable to install ReactiveMoya(Moya/ReactiveCocoa) via CocoaPods if we want to also use Mantle(https://github.com/ReactiveCocoa/ReactiveCocoa/issues/2464), leaving us no good option for integration currently. \ud83d\udc94We'd very much like to be able to use Moya for our SDK. \n. I updated everything as you described. Let me know if anything needs changed.\n. Cool, I've made the changes you mentioned, fixed a couple of things, and set the iOS deployment target to iOS 8.0 to match the podspec.\nI've been giving some other things a bit of thought...\n- ~~What purpose do/did the separate Rx/RAC Moya podspecs have?~~\n- What would be the correct rDNS company identifier to use for these targets' bundle identifiers?\n- Should I add a step to the CI script to run carthage checkout --use-submodules; carthage build --platform -iOS --no-skip-current (verify that things resolve & build via Carthage)?\n. Heh, oops, I updated that comment right as you replied. The identifier will be set as the bundle identifier of the built product, so it probably would seem a little weird to see a shipping app embedding a com.example.ReactiveMoya bundle, for example. I'll go ahead and remove the podspecs from this branch though :smile: \n. Well, there really isn't much more work to do. Making sure the targets reference the right files is a matter of seconds of work, and only on the occasion that you actually add or remove a file. How often is that, and is the extra 15 seconds to open the project and drag in the file truly \"a lot of work?\" Definitely not any \"duplicate\" work that I can think of. The podspec in most cases should automatically work with file changes if the patterns still match said files. \n. Yes, will do. Thanks for verifying! :+1: \n. Indeed, that is the unique beauty of Moya, I agree. It's just really hard to nail 100% of endpoint parameter configuration cases through associated values at the moment. And even with associated value defaults in the future, imagine an API where there are 10 optional parameters for 2/3 of endpoints. If that's 75 of 100, in total there are now 750 associated values you're switching on and checking against nil to decide whether to include them in the parameters calculated property in the enum. This is a lot more code and deters the ability to take a \"quick glance.\"\nIndirect target cases like I showed above can work for transforming any property of a MoyaTarget, and eliminates the repetitive associated value switching in this scenario. The caller is still providing these parameters now, but the downside is that this functionality is restricted to MoyaTarget types that implement such indirect transformation cases (in other words, it's implementation opt-in per-API), which requires documentation, and to me feels like a downside. You can't extend enums to add cases so you couldn't add this to an existing target type yourself, either. At best, you could create an intermediate target type, parameterized by the real target type, which applies transformations when it returns its MoyaTarget values. (ex: TransformationTarget<GitHubAPI>.Parameterized(.Zen, myParams), but then you need a different provider to send transformed targets. I'd like to hear your thoughts on a best approach for this if you're willing.\nWhile I didn't see harm necessarily in providing the option for the caller to tweak target parameters directly, I do see how it conflicts with Moya's original principals, so I will go ahead and back down and close this. Thank you reviewing the code though and explaining the reasoning, and better potential alternatives. \ud83d\ude07\n. I think that's a great idea. I'm gonna spend some time this afternoon experimenting with my ideas; I will create the issue later tonight after I've tried out some things and educated myself a bit more. Thanks again!\n. Gonna go ahead and close this since #289 is merged. Nice job on this again @tomburns \n. Very cool, I think this is a great way to handle errors \ud83d\udc4d. \nA couple of thoughts:\n1. Since Alamofire fails with NSError, I think it may make sense to type the associated value on Underlying to be NSError rather than ErrorType. This prevents confusion that there could be any other type given and thus need to do runtime identification of the type that we know at compile time. This would require re-typing EndpointSampleResponse.NetworkError's associated error type as well, so that Moya.Completion could have it's error type be NSError.\nIn short, the Alamofire/\"underlying\" layer only fails with NSError, and since none of these status code filtration or data mapping functions exist in the non-reactive Moya core, it is the only error type to be dealt with, so we can benefit from some type specificity here.\n2. With Swift's sweet pattern matching, I think you may able to trim some redundant code off of the sameErrorType function by switching on a tuple of the two values. Example:\nswift\nswitch (self, otherError) {\ncase (.ImageMapping, .ImageMapping), (.JSONMapping, .JSONMapping) /*, etc... */:\n    return true\ndefault: \n    return false\n}\n. Good point @tomburns, it's a bit of concision versus compile-time safety. I wish there was a prettier way to get the latter, but oh well. At this point it may be best to keep it your way, unless there's another, more concise way to get that safety that I'm not aware of.\nAny thoughts on my first point above? Alamofire only uses NSError, so the MoyaError case that covers the domain of Alamofire errors should provide an associated NSError, not ErrorType.\n. Just seems silly to declare things as ErrorType when we know it's literally only ever an NSError. Am I not understanding a benefit of doing it the other way? I'm not complaining, but I am truly not understanding, I guess. This is even the motivation behind parametric error types for ReactiveCocoa signals \u2013 to not leave a signal that can throw deterministic error types to the open-ended ErrorType that could be anything, but to give a specific ErrorType-conforming type so that there is no nondeterminism about types at compile time. It is convertible to NSError, but it also ALREADY is an NSError, hence my not understanding declaring it differently. And this only applies of course to the Underlying error case.\nThink about the call point of the Alamofire request. The completion handler provided takes an NSError, which Moya gets back, and then (only ever) feeds as Underlying, which takes a more generic type than we know it to be. \n. > Well, I'd rather have a result type, because otherwise everyone's just going to be writing let e = error as! MoyaError\n@swizzlr I agree with that, at least with Swift's current shortcomings when it comes to specifying throwable error types. Leaving our known error type declared as ErrorType in the completion block requires a cast back to MoyaError to work with. \nWhat about the original idea, but with the explicit error type:\npublic typealias Completion = (response: MoyaResponse?, error: MoyaError?) -> ()\nThat also aligns more closely with the RAC signal type for requests:\npublic func request(token: Target) -> SignalProducer<MoyaResponse, MoyaError>\n. Nice work. I have some confusion regarding the behavior of createStubFunction's canceled parameter. I'm unfamiliar exactly with how inout parameters work in this type of context. When the closure returned from createStubFunction checks this bool, is it still checking the original variable in the caller's scope by reference? Or is it a copied value at this point, thus negating the intended cancellation behavior?\nEither way, it may be worthwhile to write a test that verifies this cancellation behavior pre-merge if we don't have one already. If we do, carry on and this should be ready for merge \ud83d\ude07\n. Nice work. I have some confusion regarding the behavior of createStubFunction's canceled parameter. I'm unfamiliar exactly with how inout parameters work in this type of context. When the closure returned from createStubFunction checks this bool, is it still checking the original variable in the caller's scope by reference? Or is it a copied value at this point, thus negating the intended cancellation behavior?\nEither way, it may be worthwhile to write a test that verifies this cancellation behavior pre-merge if we don't have one already. If we do, carry on and this should be ready for merge \ud83d\ude07\n. Clever! I'd say that seems like a better implementation. The only odd thing to me here is having a non-optional action closure on the token, but the initializer takes an optional one, defaulting to an empty { } closure if initialized with nil. Perhaps the token could have an optional action closure (since it itself now handles a cancellation state boolean), and it could be invoked with Swift's optional function call syntax: cancelAction?() Feelings on this? It's a small thing, but would allow us to remove the icky force unwrap in init() :)\n. Clever! I'd say that seems like a better implementation. The only odd thing to me here is having a non-optional action closure on the token, but the initializer takes an optional one, defaulting to an empty { } closure if initialized with nil. Perhaps the token could have an optional action closure (since it itself now handles a cancellation state boolean), and it could be invoked with Swift's optional function call syntax: cancelAction?() Feelings on this? It's a small thing, but would allow us to remove the icky force unwrap in init() :)\n. Just a thought, but does it make sense to implement Equatable for \"case equality\" vs \"value equality\" (and are those two different for this type)? This expression could be true: .Underlying(x) == .Underlying(y) (where x != y). Seems to be typical convention to implement equality checking for associated value enum cases to compare the associated values, provided they're equatable (example: https://github.com/ReactiveCocoa/ReactiveCocoa/blob/fd64bf6ea7a83dec13fe42244db470fd9641a9a1/ReactiveCocoa/Swift/Event.swift#L94-L111), which I think MoyaResponse could conform to to make this work for this error type.\nAs for specifically checking the case equality, that's still very much useful and necessary, in this case for the tests, but it felt more appropriate as a function on the enum IMO. May be confusing for users of Moya seeking or trying to implement true value equality checking on this type, which may have been the reason for @tomburns' initial reservation about implementing it this way.\n. Just a thought, but does it make sense to implement Equatable for \"case equality\" vs \"value equality\" (and are those two different for this type)? This expression could be true: .Underlying(x) == .Underlying(y) (where x != y). Seems to be typical convention to implement equality checking for associated value enum cases to compare the associated values, provided they're equatable (example: https://github.com/ReactiveCocoa/ReactiveCocoa/blob/fd64bf6ea7a83dec13fe42244db470fd9641a9a1/ReactiveCocoa/Swift/Event.swift#L94-L111), which I think MoyaResponse could conform to to make this work for this error type.\nAs for specifically checking the case equality, that's still very much useful and necessary, in this case for the tests, but it felt more appropriate as a function on the enum IMO. May be confusing for users of Moya seeking or trying to implement true value equality checking on this type, which may have been the reason for @tomburns' initial reservation about implementing it this way.\n. Just a thought, but does it make sense to implement Equatable for \"case equality\" vs \"value equality\" (and are those two different for this type)? This expression could be true: .Underlying(x) == .Underlying(y) (where x != y). Seems to be typical convention to implement equality checking for associated value enum cases to compare the associated values, provided they're equatable (example: https://github.com/ReactiveCocoa/ReactiveCocoa/blob/fd64bf6ea7a83dec13fe42244db470fd9641a9a1/ReactiveCocoa/Swift/Event.swift#L94-L111), which I think MoyaResponse could conform to to make this work for this error type.\nAs for specifically checking the case equality, that's still very much useful and necessary, in this case for the tests, but it felt more appropriate as a function on the enum IMO. May be confusing for users of Moya seeking or trying to implement true value equality checking on this type, which may have been the reason for @tomburns' initial reservation about implementing it this way.\n. Sure, just trying to stay aligned with observed language conventions \ud83d\ude0a\nFrom Swift Equatable docs:\n\nInstances of conforming types can be compared for value equality using operators == and !=.\n\nI think it's more responsible of us to not to use an unconventional Equatable implementation just to be able to use == in a test rather than a (more appropriately named) function on the type. We don't need value equality for this type at this point, but we may in the future, or users of Moya may want to extend to implement it themselves, and would be stuck as the type already conforms with behavior they don't expect. \n. Sure, just trying to stay aligned with observed language conventions \ud83d\ude0a\nFrom Swift Equatable docs:\n\nInstances of conforming types can be compared for value equality using operators == and !=.\n\nI think it's more responsible of us to not to use an unconventional Equatable implementation just to be able to use == in a test rather than a (more appropriately named) function on the type. We don't need value equality for this type at this point, but we may in the future, or users of Moya may want to extend to implement it themselves, and would be stuck as the type already conforms with behavior they don't expect. \n. Sure, just trying to stay aligned with observed language conventions \ud83d\ude0a\nFrom Swift Equatable docs:\n\nInstances of conforming types can be compared for value equality using operators == and !=.\n\nI think it's more responsible of us to not to use an unconventional Equatable implementation just to be able to use == in a test rather than a (more appropriately named) function on the type. We don't need value equality for this type at this point, but we may in the future, or users of Moya may want to extend to implement it themselves, and would be stuck as the type already conforms with behavior they don't expect. \n. Well I didn't say anything needed changed with the switch statement or how it was implemented (I agree with you, exhaustive is nice \u2013 let's let the compiler work for us), just that this (again, perfectly valid) case comparison should change in no way other than taking it away from Equatable where it doesn't fit.\nAnd it is public, unless you mean unreleased. It publicly conforms to Equatable, using up that conformity in a non-standard way, which was my point. Out of curiosity to understand: why is it thought that two \"same-operation\" errors from two entirely different responses are \"equal?\" Or two completely different NSError objects in .Underlying(err)? .Underlying(errorA) == .Underlying(errorB) evaluating true in any scenario other than where errorA == errorB seems lacking in sanity to me. As someone (also a user of Moya) who would potentially want equality checking with the behavior I describe, and would be forced to implement it OUTSIDE of Equatable.\nFor what it's worth, I briefly described this situation on Twitter and saw an agreeing response from Joe Groff on the Swift team.\n. Well I didn't say anything needed changed with the switch statement or how it was implemented (I agree with you, exhaustive is nice \u2013 let's let the compiler work for us), just that this (again, perfectly valid) case comparison should change in no way other than taking it away from Equatable where it doesn't fit.\nAnd it is public, unless you mean unreleased. It publicly conforms to Equatable, using up that conformity in a non-standard way, which was my point. Out of curiosity to understand: why is it thought that two \"same-operation\" errors from two entirely different responses are \"equal?\" Or two completely different NSError objects in .Underlying(err)? .Underlying(errorA) == .Underlying(errorB) evaluating true in any scenario other than where errorA == errorB seems lacking in sanity to me. As someone (also a user of Moya) who would potentially want equality checking with the behavior I describe, and would be forced to implement it OUTSIDE of Equatable.\nFor what it's worth, I briefly described this situation on Twitter and saw an agreeing response from Joe Groff on the Swift team.\n. Well I didn't say anything needed changed with the switch statement or how it was implemented (I agree with you, exhaustive is nice \u2013 let's let the compiler work for us), just that this (again, perfectly valid) case comparison should change in no way other than taking it away from Equatable where it doesn't fit.\nAnd it is public, unless you mean unreleased. It publicly conforms to Equatable, using up that conformity in a non-standard way, which was my point. Out of curiosity to understand: why is it thought that two \"same-operation\" errors from two entirely different responses are \"equal?\" Or two completely different NSError objects in .Underlying(err)? .Underlying(errorA) == .Underlying(errorB) evaluating true in any scenario other than where errorA == errorB seems lacking in sanity to me. As someone (also a user of Moya) who would potentially want equality checking with the behavior I describe, and would be forced to implement it OUTSIDE of Equatable.\nFor what it's worth, I briefly described this situation on Twitter and saw an agreeing response from Joe Groff on the Swift team.\n. Looks good once conflicts are fixed \ud83d\udc4d\n. Looks good once conflicts are fixed \ud83d\udc4d\n. Looks good once conflicts are fixed \ud83d\udc4d\n. I don't see any real downsides to prefix-less type names in frameworks. As has been established, with references to the full type name including the module name prefix, there's always a way to disambiguate references to same-name types that exist in separate modules.\nIn the case where a user of Moya (or any other Swift module) with a \"colliding\" type name doesn't want to keep prefixing with the module name, they can always use a typealias.\n. I don't see any real downsides to prefix-less type names in frameworks. As has been established, with references to the full type name including the module name prefix, there's always a way to disambiguate references to same-name types that exist in separate modules.\nIn the case where a user of Moya (or any other Swift module) with a \"colliding\" type name doesn't want to keep prefixing with the module name, they can always use a typealias.\n. I may have spoken too soon about that option. It seems that Xcode for whatever reason won't let you alter the module name setting (only errors if name is not equal to the framework bundle basename). \n. I may have spoken too soon about that option. It seems that Xcode for whatever reason won't let you alter the module name setting (only errors if name is not equal to the framework bundle basename). \n. It appears this was already brought up in the description of #310. Definitely something we should fix before doing a release with all of these new changes lest we break Carthage support.\n. It appears this was already brought up in the description of #310. Definitely something we should fix before doing a release with all of these new changes lest we break Carthage support.\n. True. I just hadn't done that initially to prevent breaking existing code that uses Moya, whose parameter-less calls to request() will need updated to explicitly be request(parameters: nil) without this bridging function. If you're saying the breaking change is still okay with you, I will change it though.\n. ",
    "petester42": "Makes sense to add the type of request to the target. \n. Ya the ReactiveCocoa podspec also doesn't reflect the project's settings. In the project it is 10.9 but not in the podspec. \ud83d\ude22\n. I don't think that mapping to objects should be in the library but we could provide an easier way to transform responses for people who don't use reactive extensions. I've been playing around with some changes here and what we could do is move all responses to MoyaResponse.\nThis change would allow anyone to make an extension to MoyaResponse and create functions that map from MoyaResponse to anything.\nFor Argo it would be something like this:\n``` swift\nextension MoyaResponse {\nfunc mapEntity<U: Decodable where U == U.DecodedType>() throws -> U {\n\n    let response = try self.mapJSON()\n    let decoded: Decoded<U> = decode(response)\n\n    switch decoded {\n    case .Success(let success):\n        return success\n    case let .Failure(.MissingKey(key)):\n        throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.JSONMapping.rawValue, userInfo: [\"data\": response, \"missing\": key])\n    case let .Failure(.TypeMismatch(expected, actual)):\n        throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.JSONMapping.rawValue, userInfo: [\"data\": response, \"expected\": expected, \"actual\": actual])\n    case let .Failure(.Custom(error)):\n        throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.JSONMapping.rawValue, userInfo: [\"data\": response, \"custom\": error])\n    }\n}\n\nfunc mapEntity<U: Decodable where U == U.DecodedType>() throws -> [U] {\n\n    let response = try self.mapJSON()\n    let decoded: Decoded<[U]> = decode(response)\n\n    switch decoded {\n    case .Success(let success):\n        return success\n    case let .Failure(.MissingKey(key)):\n        throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.JSONMapping.rawValue, userInfo: [\"data\": response, \"missing\": key])\n    case let .Failure(.TypeMismatch(expected, actual)):\n        throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.JSONMapping.rawValue, userInfo: [\"data\": response, \"expected\": expected, \"actual\": actual])\n    case let .Failure(.Custom(error)):\n        throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.JSONMapping.rawValue, userInfo: [\"data\": response, \"custom\": error])\n    }\n}\n\n}\n```\nWhat does everyone think about solving object mapping this way?\n. Could you clarify what you mean by configure different maps per endpoint. Doesn't ObjectMapper handle this?\nI believe you can achieve everything you need without plugins, subclasses or changing the library. For example you could do something like this:\n``` swift\npublic extension MoyaResponse {\nfunc mapObjectMapper<U: Mappable>() throws -> [U] {\n\n    let response = try self.mapJSON()\n    guard let decoded: [U] = Mapper<U>().mapArray(response) else {\n        throw NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.JSONMapping.rawValue, userInfo: nil)\n    }\n\n    return decoded\n}\n\n}\npublic extension MoyaProvider {\nfunc request<U: Mappable>(target: Target, completion: (response: [U]?, error: ErrorType?) -> ()) -> Cancellable {\n    return request(target) { (response: MoyaResponse?, error: ErrorType?) in\n        do {\n            completion(response: try response?.mapObjectMapper(), error: error)\n        } catch {\n            completion(response: nil, error: error)\n        }\n    }\n}\n\n}\n```\nAnd then just call the provider like so: \nswift\nGitHubProvider.request(.UserRepositories(username)) { (response: [Repo]?, error) in\n    //do cool things here\n}\n. :+1: for the documentation. We could also add references to moya extensions that do this in the documentation so that people don't have to reimplement things.\n. I think we could provide a default project for new mapping projects so that people can just copy the project and write their extensions. This would probably help people especially for the carthage support since the carthage support for Moya does have some custom scripts to get around the namespacing issues.\n. It would be more like a starting project for any extensions someone would want to create for Moya not just for ObjectMapper. It could also document how the scripts work to change the namespaces when building for carthage.\n. Ya it would be a bigger project for sure.\n. I'll open a new issue for it when I have time to put my thoughts into a good description. \n. The first thing would be that this library requires Xcode 7.1 and the second would be that there are issues with the Mac target if you are not using cocoapods. There is a fix here #283 but we still have some problems. \n. The problem is that ReactiveCocoa doesn't set it's version or compatibility version so it is just one. They use carthage to manage the version so it doesn't matter what the version is in the Xcode project. On the other hand, cocoapods does set it the compatibility version to 4 when building ReactiveCocoa which results in a conflict. You could manually set the compatibility version for all the pods in the Carthage.xcodeproj to 1. That should fix the issues. Not really a fix but should work.\n. I think that should do it.\n. There we go! xcodeproj conflicts are the worst.\n. The MoyaTarget never gets passed the the provider directly. You call provider.request(Github.Zen). Could you elaborate on what the issue is?\n. As far as I can tell print doesn't write to the device log which NSLog does. It might be useful to debug things when you device is not connected. Since its extensible leaving it as just print is fine\n. Yes. The ReactiveCocoa one needs updating too. There are two things wrong with it.\n1. Doesn't specify tvOS when it should\n2. OS X target version is 10.10 instead of the project's 10.9\n. looks good :+1: \n. looks good :+1: \n. Thats a good way to fix that. There are a couple of issues though.\n1. The podspec does not pass linting you can try it out by doing pod lib lint\n2. There should probably be a demo target for os x\n3. Tests should also be added for os x\n. Could you separate the update to Xcode 7.1/Swift 2.1 from the OS X support?\n. I like framework targets but I have some concerns with this move. I find that it might be hard to keep everything up to date with what is proposed here and might result in duplicate work. \nWhat happens when someone wants to contribute to the project? They change a file and then to make sure everything works they have to do carthage bootstrap to get those dependencies, make sure everything builds fine without error in the framework project, the run pod install, then run the tests in the demo project.\nTo me seems like a lot more work to make sure things are working fine. I think we should pick either having a project with framework targets or the current setup as the source of truth for the library. This would be only the place people would need go to contribute to the library (build framework, run tests, etc.). \nWhat does everyone think?\n. It's already in the works #263 \n. Ya it is a relic from the inflight request days and not needed. The RxSwift version has this issue too.\n. I made some formatting changes so that the two type of providers more closely match. If you are ok with this change it should be ready to merge.\n. yep will do. Im not a fan of those either.\n. :+1: \n. Cool. Thanks!\n. The reason the Xcode project won't work is because it relies on frameworks that aren't present in the folder. You need to run carthage bootstrap to get them. Other than that, just dragging the project should work. No need to delete anything. \n. Im not sure how RACSignal would work with an error other than NSError. I have never tried it. But other than that everything looks good.\n. Names aren't needed. All the errors only have 1 thing which is easy to understand. If you absolutely wants names then reponse I guess. \n. Im all for moving to a typed error instead of NSError. We could possibly use the typed error everywhere instead of just the reactive extensions. It would make things more consistent. The same could be done for MoyaResponse as I discussed here\n. You mentioned that you want to keep associated values clean \"especially given their lack of names\". You can give names to associated values inside an enum in swift if that's what you wanted to do. So like case CoolCase(value: Sting)\n. You didn't add the MoyaError+MoyaSpec.swift to the DemoTests target inside the demo project. Should work after you do that.\n. I like pattern matching more but that's just me. Also the switch can be exhaustive without default if that is what you are worried about. You just need to add all the combinations as cases. I don't think having a default case that returns false would be bad. Usually we would want to check that 2 errors are the same so if there is a new error and that function has not been updated then it will return false so tests would fail etc. \n. After those small changes I think it should be good. It might cause you to have to update other parts of the codebase like the tests and the RxSwift extension though. If you need help with that, I'm here to help. :+1: \n. Looks good. There might be a little clean up needed to maybe remove MoyaErrorDomain and MoyaErrorCode if possible. If no one has other objections I will merge this.\n. The only case I can think of this being a breaking change would be if the developer subclassed the provider and created a new request function that returned a subclass of MoyaRespnse instead. I believe that this would not work anymore but it would have before. I could try it out to see if that is really the case. Aside from that there are no API changes just additions. \n. I've been playing with this idea a little bit and would like to suggest something a little different. How about the following:\npublic typealias Completion = (result: () throws -> MoyaResponse) -> Void\nThe advantage is that there is a clear distinction between the success and error paths. Which would look something like this:\nswift\nGitHubProvider.request(.UserRepositories(username)) { result in\n    do {\n        let response = try result()\n        print(response)\n    } catch {\n        print(error)\n    }\n}\n. I'm fine with a result type. I was going to go with a result type but I was trying to find way that we could remove the Underlying error from MoyaError. This would mean that we could have a clear distinction between our errors and cocoa errors. It would give the user a better indication of where things are going wrong.\nSo you could do something like this:\nswift\nGitHubProvider.request(.UserRepositories(username)) { result in\n    do {\n        let response = try result()\n        print(response)\n    } catch let error as MoyaError {\n        print(\"moya errors\", error)\n    } catch {\n        print(\"other errors\", error)\n    }\n}\n. Should be good to merge now. If anyone wants to look it over.\n. Should be good to merge now. If anyone wants to look it over.\n. Equality is just what we define to be equal. In this case since we are just using it for tests its simpler to just check the error type since in the tests that use it the response is going to be the same since it is hard coded. If we were going to make it public then ya I agree. @tomburns wanted it to be exhaustive and comparing the responses too without a default case is not fun. The equality is just for a simpler syntax in tests. If it is agreed that a function is better than we can change it back\n. Equality is just what we define to be equal. In this case since we are just using it for tests its simpler to just check the error type since in the tests that use it the response is going to be the same since it is hard coded. If we were going to make it public then ya I agree. @tomburns wanted it to be exhaustive and comparing the responses too without a default case is not fun. The equality is just for a simpler syntax in tests. If it is agreed that a function is better than we can change it back\n. Good points all round. I didn't think it would have caused such a big issue since that file is not even in Moya. Yes it is public but it is only part of the test target. I'll see what I can do about it later today. \n. Good points all round. I didn't think it would have caused such a big issue since that file is not even in Moya. Yes it is public but it is only part of the test target. I'll see what I can do about it later today. \n. Since the MoyaError Equatable method was only used by tests to compare the types of errors, I changed it to be a matcher for Nimble. Makes more sense since it's only for tests. \n@JRHeaton want to review this and then merge?\n. Since the MoyaError Equatable method was only used by tests to compare the types of errors, I changed it to be a matcher for Nimble. Makes more sense since it's only for tests. \n@JRHeaton want to review this and then merge?\n. That should do it :smile: \n. That should do it :smile: \n. I'm all for removing them. We could mark them as depreciated in the next major version and keep them in as long as RAC4 is still not final.\n. I'm all for removing them. We could mark them as depreciated in the next major version and keep them in as long as RAC4 is still not final.\n. I don't think this will solve the problem. Doesn't the framework bundle version have to match the app version now?\n. I don't think this will solve the problem. Doesn't the framework bundle version have to match the app version now?\n. It wasn't fixed last week when I uploaded a beta. Maybe with the update to iTunes connect that just came out it is fixed,\n. It wasn't fixed last week when I uploaded a beta. Maybe with the update to iTunes connect that just came out it is fixed,\n. Ah ok. Thanks for the fix. That was probably my fault. Forgot to add MOYA_VERSION to the other targets when I created them. \n. Ah ok. Thanks for the fix. That was probably my fault. Forgot to add MOYA_VERSION to the other targets when I created them. \n. I have no need for it. I didn't add it. I just updated the project to have more targets. Just didn't add it to the newer ones I guess. \n. I have no need for it. I didn't add it. I just updated the project to have more targets. Just didn't add it to the newer ones I guess. \n. If reactive cocoa 4 is final by then it sounds like a good idea. \n. Ya. I am unsure of how to solve this. If you change the module name and the framework name it works. The problem with that is that it build 3 frameworks but overwrites the previous one since it is also called Moya.framework. Im gonna try to rename them in the post build phase. Maybe that will work.\n. I believe I found a solution to this problem. I still need to test out if works with Carthage but it works fine in Xcode so I don't see why it wouldn't work. \n. The problem with option 1 is that cocoapods support would be broken. If we want to keep subspecs the way they are then we can't change the source files to using import Moya for reactive extensions. If we use option one then I believe that we also will need 3 distinct pods rather than 1 with subspecs. \n. URGH! Don't know why this intermittently fails seems like #259 is still an issue. Whenever it fails it happens to be the uses a custom Alamofire.Manager for session challenges test that fails.\n. You think its a quick thing or a travis thing?\n. I had done it already. cross your finger lol\n. nope. :cry: \n. There is not but you could check out the discussion in #198 for indications on how other people are solving this problem.\n. the problem that I've encountered with the prebuilt binaries from Carthage is that when a new version of swift/Xcode comes out it has to be recompiled right now. I saw myself using the \"-no-use-binaries\" option a lot to circumvent that since even though the source didnt have errors it just doesn't work and has to be rebuilt. \nRight now I would advise against distributing prebuilt binaries until that problem with swift is solved.\n. I think that specifying targets would be the way to go just like the example from (Package.swift documentation)[https://github.com/apple/swift-package-manager/blob/master/Documentation/Package.swift.md] . Don't know if that will cause the targets that depend on the \"core\" target to need to have import Moya in their source code.\n. Want to hit that merge button @mpurland?\n.    \n. There is a technical reason we can't. Since alamofire uses its own result we can't use the standard result library because we need to namespace it. Sadly you can't do Result.Result as a type for the completion block. Compiler no like. \nIs there a thing like hiding in Haskell for swift that I don't know of?\n. As for your original issue. You can use Result's Result type just prefix the Moya one like so Moya.Result where the two clash. \n. You might need to do some hacks to make it work. I tried added this dependency when we moved to result but the compiler was not happen. Maybe moving the completion typealias to another file would work. Any file with import Alamofire will cause issues. \n. Having an empty path is fine. Wouldn't it be better to set \"rest\" as the path and \"https://api.flickr.com/services\" as the base url. That seems to be the intent that you want to describe. \n. I like to define my API as explicitly has possible. If I have to make an empty path then maybe I didn't use the proper baseURL. Hope that helps.\n. great. thanks\n. The update to ReactiveCocoa 4 RC1 fixes the reactive cocoa issues. The RxSwift issue still happens but I'm pretty sure its on their side now.\n. @mpurland yes it did. thanks. The same issue is happening with RxSwift but I sent them a fix.\n. This should be good to go with the update to rxswift :tada: \n. Sadly there is not notion of sub-libraries for Carthage so we can't do the same thing as cocoapods. There is, as far as I know, no way around not building all schemes in a project with Carthage. The solutions you bring up do work but as you indicated they are not ideal. \nIt is time consuming to build but you can version control it to not have to build it everytime you checkout your repo. \n. Sadly there is no way to build only certain targets using Carthage. You could just do carthage checkout and manually link your dependencies. This is what reactive cocoa does for their project I believe. Might reduce build times. \nWhy are pods not an option? (Just curious)\n. The only \"real\" fix for this is to have separate repos but we decided to not go that way in the past since it adds a lot of complexity for 2 extra files. \n. This is very interesting but wouldn't this mean that a Target could only map to one type of response. Wouldn't you need to create an extension for every single endpoint?\n. I personally like the enum syntax better but there is nothing wrong with this, that is why protocols are cool. In an application I am working on, there are 2 APIs that I need to talk to so I just created 2 different enums for each one. You don't have to only use 1 enum you can have one per API, or even one per endpoint.\nOne per endpoint would be particularly interesting since you could implement all the different methods on that object (GET, POST, etc..) and have it encapsulated. \nWould love to hear what others have been doing. It is giving me ideas :tada: \n. Everything looks good aside of a couple syntax fixes. Let's hope it fixes the CI problems. \n. From what I understood from @orta's comment is that we will be able to set the COCOAPODS_DISABLE_DETERMINISTIC_UUIDS environment variable in the podfile with cocoapods 1.0. So I'll merge this and open an issue to fix the COCOAPODS_DISABLE_DETERMINISTIC_UUIDS issue when cocoapods reaches 1.0.\nGood job :100: \n. Thanks!\n. Yep. Result has been added to replace Moya's own result type because some users where having issues with it. \n. Yep. I was gonna suggest something like that. \n. I would assume that your provider is not of type ReactiveCocoaMoyaProvider\n. The error message is correct. The problem is that he normal provider and the reactive provider have the same request method. The code up to start would be correct for the normal provider so that's why you don't get a type mismatch error. \n. Are you sure that UserManager().apiAuth isn't taking a long time to execute?\n. Ya. I find that it is always better to set that on\n. What happens if you use the most recent Carthage version. I think it's 0.18.1\n. I'd be down to help with releases. \n. Looks good. Pretty straightforward. \n. Since the project was built around cocoapod subspecs the source doesn't have import Moya in the subspec's files. To get Carthage support the easiest solution without changing the source too much was to include all the files. This matches the way cocoapods builds the project. \nI like the idea of dependent frameworks. I'll look into how much effort it would be. \n. I have a working branch that does this but the Carthage build command gives some errors. Works fine in Xcode though. \nThe only problem was that certain things needed to be made public. I'll try to push my branch later today. Could you give it a try to see if it works for you?\n. I don't think we should keep the nsError property. It really doesn't add anything. You can get all the same information from Error. The advantage I see NSError is that can be printed nicely to the console but that can easily be added to Error\n. You can have two enum cases. One that takes a string and one that takes an array of strings. \n. I had started doing something like that here which works great in Xcode but I was getting Carthage errors. \n. I don't really remember what they were but the build using Carthage would fail but building with Xcode worked fine. \n. Its fine. I'm just playing around. Don't worry about it\n. There is a prebuild and a postbuild script that is located in the build phase section of the targets. It is there because cocoapods doesn't need the extra import. By default the import should be commented out so cocoapods works and when building Carthage it will toggle it on, build, and then toggle it off again. \n. The changes are mainly removing the Moya files from the reactive targets. \n. It won't build with cocoapods in you have import Moya anywhere because it is building Moya itself. \n. I think this has been addressed by #563 \n. I'll review it when you're done. \ud83d\ude09\n. Interesting idea. Sounds good to me. \n. This looks good but I'll review it more throughly tomorrow night. I have a question though. Why are we using the COCOAPODS flag in the source files? \nI believe a better solution would be to provide our own flag to do the same thing so that was we are not dependent on cocoapods having this flag. We can simply add our own flag to Other Swift Flags by adding -DNEEDS_MOYA or something to our targets. That way we check for #if NEEDS_MOYA in the code instead. It's basically the same but I like that better.\n. As far as your other tasks I think everything has already been addressed. You can merge this whenever you feel comfortable with it. \n. For a library I don't see the resolved file being necessary since we don't really need to care which exact version we are using. Not having the resolved file means that if we specify ~> 2.2 then when someone builds Moya they will always get the most recent 2.2.x version without us having to run carthage update to update the resolved file.\nAt least, that is what I understood from reading the description of the resolved file.\n. Are you using cocoapods 1.1.0.rc.2? Using it fixed all my problems related to lint fails.\n. You can't. It doesn't exist. \n. You can't. It doesn't exist. \n. We don't solve it for both at the same time. For Carthage we use the xcodeproj and for cocoapods we use the podspec. \nFor cocoapods you don't need a xcodeproj since we just need to define a file that says what our dependencies are, where the source files are etc. Later when a user uses cocoapods to install our library it creates a target based on the settings we provide. \n. We don't make the scheme for Carthage. We just make it a normal xcode scheme. We use Carthage to download the dependencies so that our schemes will compile by specifying a Cartfile. \nSo what happens when someone uses Carthage to get Moya for their app. Carthage builds all Moya dependencies (by looking at all of the cartfile) and Moya itself (by looking at the xcodeproj). The developer now has to add Moya and all it's dependencies to their own scheme. You can't just include Moya, you have to include all the dependencies of the Moya version you want to use as well. \n. That's possible. I don't think that scenario has been tested. . You can already do this by using the baseUrl and path properties. Just set the baseUrl to be the URL and the path to be nothing for the URL case. . For iPhones using the name might not always work. If the simulator has a watch tied to it the OS and the name will not be unique. You can have more than one. I'm guessing this works for iPhone 6s because the watches are now tied to an iPhone 7 simulator in circle. \nLet's just keep that in mind if something breaks in the future. \n. Maybe some schemes are shared when they shouldn't be. . I linked it in the pull request. Here it is again https://github.com/petester42/framework-generate feedback is welcome. . Adding the test command to the target is easy. I thought I had added that already. I'll check. . Ok so the following should be addressed:\n- \u2318 + U for the targets\n- Code coverage is now enabled again\n- Carthage framework copy script is now part of the source control.. I don't really know what to do about the danger errors. Any ideas since I don't think my change has those errors. . @scottrhoyt\n\n\nWill this work with both Carthage and Cocoapods? And have both been tested?\n\n\nYes this works with both. Cocoapods doesn't use the xcode project so no problem there. I've used this same thing for other projects and Carthage works too. Just tested it to make sure and it works.\n\n\nDoes this method work with Carthage prebuilt binaries incase we want to introduce that for Moya?\n\n\nYup. Just tried it and it works too.\n\n\nAre there any other downsides to this?\n\n\nFor a maintainer I don't see any downside. Might be a little odd for people who aren't familiar with it.\n\n\nThis won't be breaking for anyone will it?\n\n\nI don't see why it would.\n@AndrewSB\n\n\u2318 + U for the targets\nCode coverage is now enabled again\nCarthage framework copy script is now part of the source control.\n\nAll this has been taken care of already.. \ud83d\udc4d. I've been burned by prebuilt binaries as the swift version changes in the past. I've resorted to not use prebuilt binaries since it makes things easier. I'd advise against using them until stable ABI. For a library as small as this one I don't think the gain is that worth it. . Even with prebuilt binaries the user would have to build all the dependencies. As far as I know Carthage would only output Moya as a prebuilt binary without all the dependices. \nI\u2019m not against using prebuilt binaries, I\u2019m just concerned that it will be more effort for little gain until ABI stability.. This is why I advised against going with prebuilt versions. The release notes thing sounds good to me. . They look like Mac OS targets but they are cross platform. Just pick iPhone or simulator when running and it will just work. . It was a bug in previous versions. What version are you using?. I don\u2019t think that\u2019s a good idea. I want the tool to be just about targets and setting them up easier. I\u2019d like the tool to maybe just read the project and update your targets based on the FrameworkSpec rather than recreate the project every time. I\u2019ve seen it not work very well when trying to just migrate version.  In that case setting xcode project setting wouldn\u2019t change when using the tool. \nAs far as providing the ability to add this when we generate the project it should be doable without changing the tool at all. All targets should be already be exposing the xcodeproj objects. All that would need to be done is dig through their documentation and apply the setting in the FrameworkSpec. It\u2019s an alright solution given the state of Carthage. I would have loved to ignore one scheme and all its dependencies would be ignored but Carthage doesn\u2019t know what dependency belongs to what scheme.. It shouldn't be if the developer has their types set properly. For example if the developer just has something like this let signal = provider.request(target) then there will be an error. They would need to specify the type or chain it directly with a subscribe like so provider.request(target).subscribeNext { _ in  }. It's not really breaking but it might cause errors for some users.\n. Making the error conform to Equatable would be a better solution in my opinion. \n. Would love to but I can't.\n\n. If the Int is taken away then it is just what MoyaError is. I don't really see a use for both MoyaErrorCode and MoyaError when we remove RAC 2 support. The only use of MoyaErrorCode is to generate an NSError for RAC 2.\n. I am trying finish up this pull request but I really don't like the use of rawValue here. Explicitly mapping the methods seems better and offer compile time checks that all cases are handled. Also no !\n. is there any plans to use this mapping function? Because I just noticed it is never used. We could just remove it :stuck_out_tongue: \n. What about trying to change the task's currentRequest. Would that work?\n. This empty framework can be removed from the targets that have it.\n. I think we should use our own swift flag instead of piggybacking on the cocoapods one. Something like IMPORTS_MOYA or something.\n. Fair enough. It's really just preference so it's all good!\n. I think that would be a good idea. I'll look into it. \n. I was using Xcode 8.2.1 to test the project was generated properly and didn't see any. The \"update project settings\" actually checked for properties of the project. I've already handled up to Xcode 8.2 and maybe 8.3 settings. . Ya that's possible. I'll add an option to my tool and regenerate the project. . ",
    "drw86312": "I think, ideally, we'd like to be able to use the same endpoints for both Requests and Uploads, and therefore directly provide the DataProvider as a parameter to the request function. I ran with @JRHeaton's idea of a protocol extension to MoyaTarget, MultipartFormUploadable. I posted some of the implementation below and would love any feedback!\n``` swift\npublic protocol MultipartFormUploadable: MoyaTarget { }\nextension MoyaProvider where Target: MultipartFormUploadable {\npublic func request(target: Target, parts: [MultipartBodyPart], completion:Moya.Completion) -> Cancellable {\n    precondition(target.method == .POST, \"Uploads require Moya.method to be .POST\")\n\n    let endpoint = self.endpoint(target)\n    let stubBehavior = self.stubClosure(target)\n    var cancellableToken = CancellableWrapper()\n\n    let performNetworking = { (request: NSURLRequest) in\n        if cancellableToken.isCancelled { return }\n\n        switch stubBehavior {\n        case .Never:\n            cancellableToken.innerCancellable = self.sendUpload(target, request: request, parts: parts, completion: completion)\n        default:\n            cancellableToken.innerCancellable = self.stubRequest(target, request: request, completion: completion, endpoint: endpoint, stubBehavior: stubBehavior)\n        }\n    }\n\n    requestClosure(endpoint, performNetworking)\n\n    return cancellableToken\n}\n\n}\n```\nThe sendUpload function would take an additional parameter representing a collection of each part of the multi-part upload, with those parts represented by the MultipartBodyPart struct. We could then have some helper function on the Manager that takes that collection and returns an Alamofire request.\n``` swift\npublic struct MultipartBodyPart {\npublic enum DataProvider {\n    case Data(NSData)\n    case File(NSURL)\n    case Stream(NSInputStream)\n}\n\npublic let name: String\npublic let provider: DataProvider\n\n// Additional stream parameters\npublic let length: UInt64\npublic let fileName: String\npublic let mimeType: String\n\n}\nfunc sendUpload(target: Target, request: NSURLRequest, parts: [MultipartBodyPart], completion: Moya.Completion) -> CancellableToken {\n    guard let request = manager.uploadRequest(request, parts : parts) else {\n        var cancellableToken = CancellableWrapper()\n        cancellableToken.isCancelled = true\n        return cancellableToken.innerCancellable!\n    }\n\n    return sendRequest(target, request: request, completion: completion)\n}\n\npublic extension Manager {\nprivate func uploadRequest(request: NSURLRequest, parts: [MultipartBodyPart]) -> Request? {\n\n    let formData = MultipartFormData()\n\n    for part in parts {\n        switch part.provider {\n        case .Data(let data):\n            formData.appendBodyPart(data: data, name: part.name)\n\n        case .File(let file):\n            formData.appendBodyPart(fileURL: file, name: part.name)\n\n        case .Stream(let stream):\n            formData.appendBodyPart(stream: stream, length: part.length, name: part.name, fileName: part.fileName, mimeType: part.mimeType)\n        }\n    }\n\n    do {\n        let data = try formData.encode()\n        return self.upload(request, data: data)\n    } catch {\n        return nil\n    }\n}\n\n}\n```\n. @colinta pretty much any endpoints that could take optional data. I may not be completely understanding @GuidoHendriks solution, but I'd like to not have to write multiple enum cases for, say a \"Create Account\" request that may or may not take image data.  Essentially, I want one \"Create Account\" endpoint to which I can optionally pass one or multiple NSData, NSURL, NSInputStream parameters.  \nEssentially, I'd like to avoid extraneous enum cases like this...\n``` swift\npublic enum API: MoyaTarget {\ncase CreateAccount(name: String, type: String, description: String)\n\ncase CreateAccountWithImageData(name: String, type: String, description: String, imageData : NSData)\n\n}\nextension API  {\npublic var requestType: RequestType {\n    switch self {\n    case .CreateAccount:\n        return .Request\n\n    case .CreateAccountWithImageData:\n        return .Upload\n    }\n\n}\n```\n. ",
    "mMaxy": "Hey, guys. Any progress on this issue? Is there any solution that is working and can be used?\nAnyway, upvoting!\nAnd thanks for so cool artefact, Moya literally saved me days of work and tons of headache!\n. @mo3bius Hi!\nMoya have no special mechanism for handling cookies, afaik. You should use standart iOS API for it, for example:\n1) Create a cookie:\nlet headers = [\"Set-Cookie\": \"YOUR_COOKIE\"]\nlet cookie = HTTPCookie.cookies(withResponseHeaderFields: headers, for: URL(string: \"YOUR_URL\")!)\n2) Save this cookie for host:\nlet cookieStorage = HTTPCookieStorage.shared\ncookieStorage.setCookie(cookie.first!). ",
    "startupthekid": "Getting in way late to the party here but I second @GuidoHendriks' idea of just adding a RequestType enum with two cases .Upload and .Request and then a second enum, UploadType with four cases: .File, .Data, .Stream, .Multipart.\nWe could then add two variables to TargetType:\npublic var requestType: RequestType { get }\npublic var uploadType: UploadType?\nwhere uploadType would only be checked if requestType returns .Upload. What I like a lot about this approach is it's easy to implement, it keeps the abstraction, and makes migrations much easier since all people now have to do is add the two new variables to conform. \nMy only concern is as mentioned, how to show progress of a upload request.\n. Exactly. Anything that doesn't explicitly say they're an upload is just a request. People can opt into the behavior as needed.\n. @petester42 I'm a big fan of that approach as well. That's essentially how Alamofire adds support for different ResponseSerializers, just extensions on the Request object. And I think that's the best way to go because it doesn't really require changes to what Moya is or how it's implemented. Instead the burden is offloaded to the consumer. Another benefit of doing it the Alamofire way is that then the different \"transform\" or mapping functions can be chained. \nThe only thing I would change is instead of having mapping functions like mapObjectMapper, just use the built-in response serializer functionality of Alamofire because that's all AlamofireObjectMapper does.\n. I might be off base here but what about for multipart uploads, we create a Response subclass that has a progress method? That way all the normal methods on Response would work and for multipart, you'd get the progress you need.\nSomething like:\nswift\nfunc request(token: Target) -> SignalProducer<UploadResponse, Error> {}\n. That does mean though that Response can't be a final class. That should be ok though, makes Moya more extensible, especially if someone wants to provide a custom response class for debugging purposes or what have you.\nAnother interesting direction could be making a ResponseType protocol that Response provides the implementation for and then an UploadResponseType that conforms to ResponseType and adds a few handy progress methods. \n``` swift\npublic protocol ResponseType: CustomDebugStringConvertible, Equatable {\n    var statusCode: Int { get }\n    var data: NSData { get }\n    var response: NSURLResponse?\n....\n}\npublic protocol UploadResponseType: ResponseType {\n    func progress(...)\n}\n``\n. Instead of onResponseit could be onRequestand thenrequest` could send an intermediary request object that informs progress. Not sure how to go about implementing that though.\n. @jasi that's a good point. It may be better to use our own encoding that mirrors Alamofire.\n@justinmakaila something else I'm concerned about is supporting parameters in an upload request.\nIn the scenario where someone uploads a file and needs to attach that reference to another model, that can't currently be done in Alamofire. \nFor example I'm using feathersjs on my backend to supports before and after hooks:\n``` javascript\nblobService.before({\n  all: sharedAuthHooks,\n  // Verify that the postID parameter exists and that it refers to a real post.\n  create(hook) {\n    const { params } = hook;\n    const { postID } = params;\n    if (typeof postID === 'undefined') {\n      return Promise.reject(new errors.BadRequest('Invalid postID parameter'));\n    }\n    // Find a post with that id, error will be thrown if none exists\n    return postService.get(postID).then(() => hook);\n  }\n});\nblobService.after({\n  // After a blob is created, attach the id to the post.\n  create(hook) {\n    const { result, data } = hook;\n    const { id } = result;\n    const { postID } = data;\n    // Update the associated post with the blob id\n    return postService.patch(postID, { blob: id }, {}).then(() => hook);\n  }\n});\n```\nBefore a blob (a file object) is created, it verifies that a postID parameter is sent and that that post exists. After the creation occurs, the blob id is then attached to the post. But with Alamofire, you can't attach parameters to a file upload.\nThe reason I'm worried about that is because in applications that will introduce multiple points of failure in similar situations. Instead of relying on a single source of truth on the backend where parameters are verified and the appropriate models are updated, each client has to ensure that post-creation, the correct updating takes place. The more we can do to mitigate that risk that better but I'm not sure how with Alamofire currently. \n. ",
    "nanoxd": "I think it would be best to have it in one class. Perhaps it would be best to have three versions of the API:\n1. ReactiveCocoa 2 (RACSignals)\n2. ReactiveCocoa 3 Bridge (RACSignal -> SignalProducer)\n3. ReactiveCocoa 3 (SignalProducer)\n2 would provide an API for those already using RACSignal throughout their app and want to switch over piecemeal to RAC 3.\n. I added a few doc changes but overall it's a step in the right direction. Good job!\n\n. I believe that should be it but I'm sure I missed something \ud83d\ude05. \n. Cool, I'll send one over shortly\n. \u270b I can do it if no one else has time today\n. We should add tests to be sure there aren't any regressions as well as document the change and a migration plan for existing users (if any). \n. I should read more closely at filenames \ud83d\ude05. \n. Spelling\ndiff\n+an\n-and\ndiff\n+NSURLRequest\n-NSURLrequest\n. diff\n+ .Immediate\n- .Immedaite\n. URL is invalid. Should be https://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/ArtsyAPI.swift\n. Missing a backtick on userInfo\n. diff\n+ Moya providers are an optional\n- Moya providers an optional\n. Too many \"instead\"s, I propose a change to \n\nInstead of calling the request() method and providing a callback closure to be executed when the request completes, we emit RACSignals.\n. diff\n+ and a(n optional)\n- an a(n optional)\n. detail -> dealing\n. :confused: Not sure what you mean on this line. \n. With the new value types, there's no need to use NSMutableRequest. You instead use a var \ud83d\udc83 \n. \n",
    "rhysforyou": "I'm starting a new project with Moya and RAC 3.0, so it's likely I'll end up writing these extensions as part of them. If I'm happy with how they turn out, I'd be happy to contribute them back.\n. @sammoore Yeah I've been working on a small project on and off over the past few weeks. I'll work on getting my extensions polished up and publish the project on the weekend if all goes as planned.\n. ",
    "samtheprogram": "/cc @rpowelll Any movement on this? I'm considering doing the same now.\n. ",
    "justinmakaila": "This is all taken care of in github.com/Moya/ReactiveMoya. Unfortunately, there's no CocoaPods support yet, only Carthage. \n. Hey guys, I filed this issue on the Carthage repo asking for \"subspec\" support. If you have any ideas to contribute, I'm sure it would help the case.\nI may add Carthage support to RXSwift, but I'm on the fence, mainly because RXSwift is the foundation of RAC 3.0, and it doesn't appear as if development is going to continue moving forward. Where does everyone stand on that? Is RXSwift support necessary, or can it be phased out down the line?\n. AH! I had a feeling I was looking at the wrong RxSwift repo.\nEither way, the enhancement suggested to the Carthage maintainers should help solve this issue, that is, if it's implemented.\n\u2014Justin Makaila\nOn Sat, Jun 27, 2015 at 4:06 PM, Ash Furrow notifications@github.com\nwrote:\n\nRxSwift was the original name of the RAC 3 proof of concept. It also happens to be the name of a Swift-based reactive extensions library. The library is young but growing. Whether there's enough demand for this from Carthage users, I don't know.\nReply to this email directly or view it on GitHub:\nhttps://github.com/ashfurrow/Moya/issues/154#issuecomment-116127584\n. @MarvinNazari I've started doing something similar. I'm battling with myself over the idea of master holding a project with multiple targets, all of which are built when someone specifies Moya in their Cartfile, or different branches where you can pull the one you need... i.e.\n\n```\n// Build Moya\ngit \"ashfurrow/Moya\" \"master\"\n// Build ReactiveMoya\ngit \"ashfurrow/Moya\" \"ReactiveMoya\"\n// Build RxMoya\ngit \"ashfurrow/Moya\" \"RxMoya\"\n```\nBut that's adds a whole lot of pain to whomever is maintaining the repository.\n. @ashfurrow That's also legit. I'm trying to be extremely considerate of the CocoaPods support.\n. @ashfurrow, could you clarify a little bit? Do you mean OS X vs iOS platforms?\n. Well, carthage uses xcodebuild to build the schemes which are shared by your .xcodeproj. In order to build an iOS framework and an OS X framework, you need to share both schemes in your .xcodeproj.\nWe would need a Moya, ReactiveMoya, and RxMoya scheme & associated target.\n. Yes, a separate xcodeproj for telling carthage how to build the framework. I'd be happy to get it set up on my fork so you can take a peek and pass judgements rather than building it into the main repo.\n. All,\nI added support for two target outputs from carthage, Moya and ReactiveMoya (RxSwift doesn't support carthage, and I didn't want to play with it just yet) on my fork.\nIf you add github \"justinmakaila/Moya\" \"swift-2.0\" to your Cartfile, then run carthage update, it should build Moya and ReactiveMoya for you. Moya requires Alamofire, and ReactiveMoya requires Moya, Alamofire, Result, and ReactiveCocoa to work.\nI also made some changes to the ReactiveMoyaProvider for RAC 3.0.\nLet me know if you run into any issues!\nNOTE: I borked the Demo project. I'll be fixing that, btw.\nEDIT: I overlooked the Cartfile. Just re-added ReactiveCocoa. \n. @ashfurrow Totally. I'll try to get something in by the end of the day.\n. @ashfurrow @kzaher Sorry for the delay, but check out my fork right now. I restructured a good portion of the repo, added RxSwift support and an RxMoya target, as well as updates to the ReactiveMoya target to simplify retrieving JSON data from an API service. Also included is a completely new example project, demonstrating how to use each type of *MoyaProvider.\nI'm in the process of updating the README right now.\nCheck it out and let me know what you think. If you're into it, I'll merge in master and file a PR. \nEDIT: Check out the carthage/reactive-extensions branch\n. @gfontenot Correct me if I'm wrong, but I don't think it could output Moya.framework, mainly because Moya is a dependency for RxMoya and ReactiveMoya. I'm all for the separate repos for the sake of modularity and intent, but I don't think it would solve that problem.\n. But wouldn't that lead to files being overwritten by the carthage output?\nI'm just trying to understand, as I'd also be happy to help with putting this together.\n@ashfurrow, do you want to throw the repos up and add @gfontenot and myself as collaborators?\n. @gfontenot So, from what you're saying:\nruby\ngithub \"ashfurrow/RxMoya\"\nWhere the project is configured to spit out Moya.framework, rather than my current solution, where all three dependent projects are spit out by the single Cartfile entry:\nruby\ngithub \"ashfurrow/Moya\"\nI like this. A lot. \n. @gfontenot How would you recommend handling the shared files between the reactive repos? Include them in the main Moya repo?\n. @gfontenot @ashfurrow @orta \nI put together the repos that were discussed.\njustinmakaila/Moya\njustinmakaila/RxMoya\njustinmakaila/ReactiveMoya\nCan we transfer them to the organization so we can get a collaborative effort? I don't have access rights to do it myself. \n. @ashfurrow just got rejected while trying to push:\nj ~/W/S/ReactiveMoya> git push upstream master\nremote: Permission to Moya/ReactiveMoya.git denied to justinmakaila.\nfatal: unable to access 'https://github.com/Moya/ReactiveMoya.git/': The requested URL returned error: 403\n. Worked, and pushed\n. @gfontenot Take a peak at the branch when you get a chance. I keep getting this error while trying to build the example projects for RxMoya and ReactiveMoya:\nj ~/W/S/R/Example> carthage update\n*** Fetching RxMoya\n*** Cloning RxSwift\n*** Fetching Alamofire\nParse error: expected submodule commit SHA in ls-tree output:\n. @Moya/contributors \nThe ReactiveMoya and RxMoya repositories are updated. I'd love for some help on getting them to work with CocoaPods. The ReactiveMoya README and Example are the only \"complete\" ones. I still need to update RxMoya.\nLet me know if you need hlep getting anything set up.\n. @ashfurrow RxMoya and ReactiveMoya all work with Carthage. They're Swift 1.x. Yes, we just need to update CocoaPods.\nRxMoya also requires an example project, right now I only have TODOs. \nEDIT: Just realized that I have the submodules pointing to my fork of Moya. I'm merging in master now with Carthage and CocoaPods support and some tweaks for CI. I will need some help to get pod try working on that.\n. @ashfurrow I have 1 and 2 done, going to be pushing it soon\n\u2014Justin Makaila\nOn Tue, Aug 18, 2015 at 3:17 PM, Ash Furrow notifications@github.com\nwrote:\n\nSuper, cool! So if everything is working with Carthage, there's only a few things left to do:\n1. Ensure the new repos with RxMoya and ReactiveMoya are up-to-date with this one. \n1. Remove files from this repo.\n1. Update podspec to point to the two new repos.\n1. Test/lint podspec\n1. Ensure pod try continues to work.\n1. Release a new version of Moya.\nLet me know if I'm forgetting anything. \nAll sounds good? I can get started as early as this weekend, unless someone wants to do it sooner.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/issues/154#issuecomment-132322735\n. @ashfurrow I'm good with the proposal. I'd like to jump on a hangout to understand the organization's feelings on this subject, and also to spec out next steps for the reactive repositories and further developments. Shoot me an email at justinmakaila[at]gmail[dot]com to set something up this week.\n\n\u2014Justin Makaila\nOn Tue, Aug 18, 2015 at 4:44 PM, null justinmakaila@gmail.com wrote:\n\n@ashfurrow I have 1 and 2 done, going to be pushing it soon\n\u2014Justin Makaila\nOn Tue, Aug 18, 2015 at 3:17 PM, Ash Furrow notifications@github.com\nwrote:\n\nSuper, cool! So if everything is working with Carthage, there's only a few things left to do:\n1. Ensure the new repos with RxMoya and ReactiveMoya are up-to-date with this one. \n1. Remove files from this repo.\n1. Update podspec to point to the two new repos.\n1. Test/lint podspec\n1. Ensure pod try continues to work.\n1. Release a new version of Moya.\nLet me know if I'm forgetting anything. \nAll sounds good? I can get started as early as this weekend, unless someone wants to do it sooner.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/issues/154#issuecomment-132322735\n. I'm in the midst of cleaning up the dependencies on the swift-2.0 branch, and I wanted to make some changes to how the demo project is set up and whatnot (having it in the Pods.xcodeproj is kind of bulky and confusing). How attached are you to keeping CocoaPods in the directory? If I can achieve the same thing using Carthage and pushing the frameworks to the repo, would that be cool?\n\n\nThe goal is still to make it as easy as possible for people to run the Demo project, but to remove the bulk of CocoaPods.\n. No idea, I've never worked with circle before. I'll take a look and get back to you about that\n\u2014Justin Makaila\nOn Thu, Jul 16, 2015 at 9:09 PM, Ash Furrow notifications@github.com\nwrote:\n\nThanks a lot, Justin! It's a huge PR \u2013 I'll take a look at it this weekend. If any other contributors could lend a hand, that'd be :+1: \nJustin, could I please ask you to mark these improvements in the changelog? I see you've already updated the README \u2013 awesome :tada: \nThe tests are failing \u2013 looks like a Circle configuration problem around the Demo workspace. Any ideas?\nReply to this email directly or view it on GitHub:\nhttps://github.com/ashfurrow/Moya/pull/169#issuecomment-122141741\n. Yes, we could remove it. I pushed the Carthage/build dir so you can use the demo without running Carthage\n\n\u2014Justin Makaila\nOn Thu, Jul 16, 2015 at 11:15 PM, Colin T.A. Gray\nnotifications@github.com wrote:\n\n1,054 files!?  That's... ahem a bit alarming.\nIt looks like all these files are mostly build artifacts.  Looking at other projects that support Carthage & CocoaPods, they don't include a Carthage/ folder that contains all the build headers.  I'm looking in particular at https://github.com/thoughtbot/argo\nI'm wondering: can that entire folder be removed?  From what I understand about Carthage, it's a minimalist system, it seems like a red flag that all these header files are included here.\nReply to this email directly or view it on GitHub:\nhttps://github.com/ashfurrow/Moya/pull/169#issuecomment-122157655\n. @colinta I'm with you completely, I just didn't want to introduce a PR with less functionality than the previous version. Ultimately, the decision is up to @ashfurrow and the core team, and I'm open to modifying this PR to match the requirements!\n. @orta I'm with you on that. Not a huge fan of pushing things just for the sake of an example project.\n\nI'm going to make the adjustments for the circle build, and then make the modifications I need to to get pod try Moya to work. I think broke that in my haste of ripping everything out early on.\n. Can we link the library to the demo repo some how? git submodules or something?\n. I mean, we could move the demo project to a separate project, pushing a Carthage/Build dir there, which would allow people to just clone and run.\nObviously, this isn't ideal, because pod try is a sweet way to handle that. \n. I\u2019m going to add that to this PR.\nThough, because this is such a small library, I think it\u2019s perfect to try to optimize for these cases, so bigger libraries can follow suit.\u00a0\n\u2014Justin Makaila\nOn Mon, Jul 20, 2015 at 5:04 AM, Orta notifications@github.com wrote:\n\nI don't think moving the example to a separate repo is a good idea, other libraries don't do this. \nI'd move the Pods and the Carthage-whatever directories into .gitignore then add a note in the README that if you want to run the example you have to go to the example folder and run pod install or carthage install. Or for the no-effort approach pod try Moya. Again, this isn't some mega-huge library with thousands of moving parts.\nReply to this email directly or view it on GitHub:\nhttps://github.com/ashfurrow/Moya/pull/169#issuecomment-122817681\n. @ashfurrow It'd be possible, but all of that would have to be redone. As it stands:\n\nTo run the example:\n1. Run carthage update in the root\n2. Open Moya.xcworkspace and set your target to MoyaExample ~~OR open Example/MoyaExample.xcodeproj~~\n3. Run.\nTo execute tests:\n1. Run carthage update in the root (if you haven't already)\n2. Open Moya.xcworkspace or Moya.xcodeproj and set your target to Moya Tests\n3. Run\nEDIT: Slight correction, you can't open the MoyaExample.xcodeproj and run the project because it has a target dependency on the Moya.xcodeproj output.\n. Yes. CocoaPods was symlinking to the Pods project, but I found it to be overkill. I totally understand your hesitation, and want to do everything I can to make the transition simple, and answer any questions you have along the way.\n. None here\n\u2014Justin Makaila\nOn Thu, Sep 10, 2015 at 1:31 PM, Ash Furrow notifications@github.com\nwrote:\n\nHey! This is still on my radar, just got sidetracked. \nAs for the code structure, having the separate repos like https://github.com/Moya/ReactiveMoya is fine for code, but I think it's a good idea to keep all documentation and issue tracking in this main repo. This will keep the barrier to entry low (someone learning to use Moya shouldn't have to know how we structure our code to read our docs). Any objections?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/pull/169#issuecomment-139319537\n. As long as the reactive repositories can be imported into the test suite without naming collisions (They both have their product names set to \u201cMoya\u201d).\u00a0\n\n\u2014Justin Makaila\nOn Thu, Sep 10, 2015 at 1:44 PM, Ash Furrow notifications@github.com\nwrote:\n\nAlrighty, I've disabled issues on the other repositories. We also need to update their READMEs to point to this repository. These other repos are basically just places to store files.\nIf we're centralizing docs here, I think it makes sense to centralize tests here as well. I can't see that being a problem with Carthage \u2013 @justinmakaila does that sound OK?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/pull/169#issuecomment-139322383\n. \ud83d\udc4d\ud83c\udffb\n\n\u2014Justin Makaila\nOn Thu, Sep 10, 2015 at 2:04 PM, Ash Furrow notifications@github.com\nwrote:\n\nShouldn't be a problem \u2013 we're restructuring the tests to run under CocoaPods, which won't have that problem.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/pull/169#issuecomment-139329643\n. You could extend your provider with a requestCount method, which handles that logic for you. You can even go a step further, and have a requestJSON method, which handles the JSON serialization for you, and then use it within your requestCount method.\n\n```\nextension MoyaProvider {\n    func requestJSON(endpoint: T, completion: (AnyObject?, NSError?) -> Void) -> Cancellable {\n        return self.request(endpoint) { (data, status, response, error) in\n            if let data = data {\n                let json: AnyObject? = NSJSONSerialization.JSONObjectWithData(data, options: nil, error: nil)\n                return completion(json, error)\n            }\n        completion(nil, error)\n    }\n}\n\nfunc requestCount(endpoint: T, completion: (Int, NSError?) -> Void) -> Cancellable {\n    return self.requestJSON(endpoint, completion: { json, error in\n        if let jsonObject = json as? [NSObject: AnyObject], count = jsonObject[\"count\"] as? Int {\n            return completion(count, error)\n        }\n\n        completion(-1, error)\n    })\n}\n\n}\n``\n. Let me know if that works for you, and I'll close the issue. \n. Awesome! :+1: \n. Add the.xcodeprojto your project, and then link theMoya.framework` output against your project.\nLet me know if you have any issues or need more clarification. \n. Oh, sorry, just woke up. Skimmed it and missed that part ;)\nYou can just add the source files straight to the project.\n. Could this potentially help with things like #164? If we provide an offline cache and specify a TTL at the request level, and whether or not a request should use the cache, I think we could ditch the idea of inflight requests.\n. I mean, this COULD be solved with the same principles we applied to the ReactiveMoya and RxMoya extensions, I just think that these things need to be contributed by the community, otherwise we're going to have a hell of a time maintaining it all, or more likely, flat out denying the feature requests.\nI can put together a more detailed guide (if anybody's into it), but here are the basics:\n1. Add Moya as a submodule.\n2. Write your code which uses Moya.\n3. Package it up in your package manager of choice and distribute.\nI don't think this is ideal, but it is a possibility for those who really want to use Moya to compose their ideal networking stack into a framework.\n. How does this work for Cartfiles? What do carthage users do to use ReactiveMoya, RxMoya, and Moya, on a per requirement basis? Is that a concept anymore, or are we back to the single Moya.framework?\n\u2014Justin Makaila\nOn Sat, Sep 12, 2015 at 9:24 PM, Ash Furrow notifications@github.com\nwrote:\n\nThis pull requests adds Carthage support to Moya, including its two extensions, RxMoya and ReactiveMoya. It works off of @justinmakaila's work in #169 to include Carthage support, but works using a different solution that @orta and I implemented this afternoon. Let me explain.\nIn #154, we discussed a solution that involved splitting up Moya into several repositories to generate separate .framework files for each Moya, ReactiveMoya, and RxMoya. The solution in this PR instead uses thin podspecs solely for the ReactiveCocoa and RxSwift extensions. This lets the Pods Xcode project build separately-named targets, which compile into the frameworks that Carthage needs.\nThe benefits of this approach are that we keep all of our code in one repository instead of having to synchronize version numbers, tags, pull requests, and so on between three or four repositories. This would be a significant challenge.\nThe downsides are that we need to keep versions synced between the three podspecs (I've written a rake task to automate this). Additionally, if the public APIs to RxSwift or ReactiveCocoa change, Carthage users will need to continue to use the versions required by the CocoaPods builds. I actually kind of like the idea of one Moya existing in parallel on two dependency managers.\nWork Done\n\nWe switched from a Makefile to a Rakefile.\nAutomated releases.\nRe-added Pods/ directory for Carthage support.\nDuplicated the RxMoya and ReactiveMoya subspecs into their own standalone podspecs, and trimmed them down.\nRemoves unnecessary Box dependency from the Demo's Podfile.\nUpdated documentation.\n  ## Next Steps\n  The ReactiveMoya and RxMoya repositories are no longer needed and should be deleted after this pull request is merged. Any existing Carthage users will need to update their Cartfiles.\n  ## Notes\n  MoyaResponse.swift is included in both Carthage-specific podspecs, but it only appears once in the Pods project's file pane. The file is a member of both targets, but only appears once. The ambiguity between the files referenced in both frameworks led me to split up the unit tests into distinct files (to avoid having both MoyaResponses in scope). I also tidied them up a bit.\n  Fixes #204.\n  Fixes #154.\n  Fixes #184.\n  You can view, comment on, or merge this pull request online at:\n  https://github.com/Moya/Moya/pull/215\n  -- Commit Summary --\ncarthage_via_internal_podspecs\n[Carthage] Added Reactive podspec.\n[Carthage] Cleaned up unit tests.\n[Infrastructure] Moved to Rake tasks.\nMerge branch 'master' of https://github.com/Moya/Moya into internal_podspecs\n[Carthage] Slims down podspects.\n[CocoaPods] Cleans up Demo Podfile.\nremove cartfiles\nbring back the pods\n[CocoaPods] Updated to latest beta.\n[README] Updated installation section.\n[CocoaPods] Adds version requirement on Alamofire.\n[Deploys] Automated release task.\n[README] Updated installation instructions.\n    -- File Changes --\n    M .gitignore (7)\n    M .travis.yml (2)\n    M CHANGELOG.md (3)\n    D Cartfile (2)\n    D Cartfile.resolved (4)\n    M Demo/Demo.xcodeproj/project.pbxproj (8)\n    M Demo/DemoTests/EndpointSpec.swift (4)\n    M Demo/DemoTests/MoyaProviderIntegrationTests.swift (9)\n    M Demo/DemoTests/MoyaProviderSpec.swift (574)\n    M Demo/DemoTests/RACSignal+MoyaSpec.swift (20)\n    A Demo/DemoTests/ReactiveCocoaMoyaProviderTests.swift (150)\n    A Demo/DemoTests/RxSwiftMoyaProviderTests.swift (78)\n    M Demo/Podfile (8)\n    M Demo/Podfile.lock (36)\n    A Demo/Pods/Alamofire/LICENSE (19)\n    A Demo/Pods/Alamofire/README.md (1072)\n    A Demo/Pods/Alamofire/Source/Alamofire.swift (368)\n    A Demo/Pods/Alamofire/Source/Download.swift (244)\n    A Demo/Pods/Alamofire/Source/Error.swift (66)\n    A Demo/Pods/Alamofire/Source/Manager.swift (649)\n    A Demo/Pods/Alamofire/Source/MultipartFormData.swift (669)\n    A Demo/Pods/Alamofire/Source/ParameterEncoding.swift (217)\n    A Demo/Pods/Alamofire/Source/Request.swift (536)\n    A Demo/Pods/Alamofire/Source/ResponseSerialization.swift (331)\n    A Demo/Pods/Alamofire/Source/Result.swift (114)\n    A Demo/Pods/Alamofire/Source/ServerTrustPolicy.swift (305)\n    A Demo/Pods/Alamofire/Source/Stream.swift (180)\n    A Demo/Pods/Alamofire/Source/Upload.swift (372)\n    A Demo/Pods/Alamofire/Source/Validation.swift (187)\n    A Demo/Pods/Headers/Private/Nimble/DSL.h (1)\n    A Demo/Pods/Headers/Private/Nimble/NMBExceptionCapture.h (1)\n    A Demo/Pods/Headers/Private/Nimble/Nimble.h (1)\n    A Demo/Pods/Headers/Private/OHHTTPStubs/Compatibility.h (1)\n    A Demo/Pods/Headers/Private/OHHTTPStubs/OHHTTPStubs.h (1)\n    A Demo/Pods/Headers/Private/OHHTTPStubs/OHHTTPStubsResponse+JSON.h (1)\n    A Demo/Pods/Headers/Private/OHHTTPStubs/OHHTTPStubsResponse.h (1)\n    A Demo/Pods/Headers/Private/OHHTTPStubs/OHPathHelpers.h (1)\n    A Demo/Pods/Headers/Private/Quick/NSString+QCKSelectorName.h (1)\n    A Demo/Pods/Headers/Private/Quick/QCKDSL.h (1)\n    A Demo/Pods/Headers/Private/Quick/Quick.h (1)\n    A Demo/Pods/Headers/Private/Quick/QuickConfiguration.h (1)\n    A Demo/Pods/Headers/Private/Quick/QuickSpec.h (1)\n    A Demo/Pods/Headers/Private/Quick/World+DSL.h (1)\n    A Demo/Pods/Headers/Private/Quick/World.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/MKAnnotationView+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/RACObjCRuntime.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/EXTKeyPathCoding.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/EXTRuntimeExtensions.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/EXTScope.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSArray+RACSequenceAdditions.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSData+RACSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSDictionary+RACSequenceAdditions.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSEnumerator+RACSequenceAdditions.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSFileHandle+RACSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSIndexSet+RACSequenceAdditions.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSInvocation+RACTypeParsing.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSNotificationCenter+RACSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSObject+RACDeallocating.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSObject+RACDescription.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSObject+RACKVOWrapper.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSObject+RACLifting.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSObject+RACPropertySubscribing.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSObject+RACSelectorSignal.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSOrderedSet+RACSequenceAdditions.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSSet+RACSequenceAdditions.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSString+RACKeyPathUtilities.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSString+RACSequenceAdditions.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSString+RACSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSURLConnection+RACSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/NSUserDefaults+RACSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACArraySequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACBehaviorSubject.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACBlockTrampoline.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACChannel.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACCommand.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACCompoundDisposable.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACDelegateProxy.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACDisposable.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACDynamicPropertySuperclass.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACDynamicSequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACDynamicSignal.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACEagerSequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACEmptySequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACEmptySignal.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACErrorSignal.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACEvent.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACGroupedSignal.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACImmediateScheduler.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACIndexSetSequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACKVOChannel.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACKVOProxy.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACKVOTrampoline.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACMulticastConnection+Private.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACMulticastConnection.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACPassthroughSubscriber.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACQueueScheduler+Subclass.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACQueueScheduler.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACReplaySubject.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACReturnSignal.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACScheduler+Private.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACScheduler+Subclass.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACScheduler.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACScopedDisposable.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSerialDisposable.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSignal+Operations.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSignal.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSignalSequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACStream+Private.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACStream.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACStringSequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSubject.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSubscriber+Private.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSubscriber.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSubscriptingAssignmentTrampoline.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSubscriptionScheduler.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACTargetQueueScheduler.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACTestScheduler.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACTuple.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACTupleSequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACUnarySequence.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACUnit.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACValueTransformer.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa-Bridging-Header.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/metamacros.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIActionSheet+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIAlertView+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIBarButtonItem+RACCommandSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIButton+RACCommandSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UICollectionReusableView+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIControl+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIControl+RACSignalSupportPrivate.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIDatePicker+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIGestureRecognizer+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIImagePickerController+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIRefreshControl+RACCommandSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UISegmentedControl+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UISlider+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UIStepper+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UISwitch+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UITableViewCell+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UITableViewHeaderFooterView+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UITextField+RACSignalSupport.h (1)\n    A Demo/Pods/Headers/Private/ReactiveCocoa/UITextView+RACSignalSupport.h (1)\n    A Demo/Pods/Local Podspecs/Moya.podspec.json (68)\n    A Demo/Pods/Local Podspecs/Nimble.podspec.json (31)\n    A Demo/Pods/Local Podspecs/Quick.podspec.json (35)\n    A Demo/Pods/Local Podspecs/ReactiveCocoa.podspec.json (76)\n    A Demo/Pods/Local Podspecs/ReactiveMoya.podspec.json (20)\n    A Demo/Pods/Local Podspecs/RxMoya.podspec.json (20)\n    A Demo/Pods/Manifest.lock (89)\n    A Demo/Pods/Nimble/LICENSE.md (201)\n    A Demo/Pods/Nimble/Nimble/Adapters/AdapterProtocols.swift (17)\n    A Demo/Pods/Nimble/Nimble/Adapters/AssertionDispatcher.swift (20)\n    A Demo/Pods/Nimble/Nimble/Adapters/AssertionRecorder.swift (99)\n    A Demo/Pods/Nimble/Nimble/Adapters/NimbleXCTestHandler.swift (40)\n    A Demo/Pods/Nimble/Nimble/DSL+Wait.swift (50)\n    A Demo/Pods/Nimble/Nimble/DSL.swift (32)\n    A Demo/Pods/Nimble/Nimble/Expectation.swift (64)\n    A Demo/Pods/Nimble/Nimble/Expression.swift (90)\n    A Demo/Pods/Nimble/Nimble/FailureMessage.swift (56)\n    A Demo/Pods/Nimble/Nimble/Matchers/AllPass.swift (90)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeAKindOf.swift (34)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeAnInstanceOf.swift (34)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeCloseTo.swift (121)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeEmpty.swift (90)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeGreaterThan.swift (37)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeGreaterThanOrEqualTo.swift (39)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeIdenticalTo.swift (28)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeLessThan.swift (36)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeLessThanOrEqual.swift (37)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeLogical.swift (93)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeNil.swift (18)\n    A Demo/Pods/Nimble/Nimble/Matchers/BeginWith.swift (53)\n    A Demo/Pods/Nimble/Nimble/Matchers/Contain.swift (91)\n    A Demo/Pods/Nimble/Nimble/Matchers/EndWith.swift (63)\n    A Demo/Pods/Nimble/Nimble/Matchers/Equal.swift (148)\n    A Demo/Pods/Nimble/Nimble/Matchers/HaveCount.swift (48)\n    A Demo/Pods/Nimble/Nimble/Matchers/Match.swift (27)\n    A Demo/Pods/Nimble/Nimble/Matchers/MatcherProtocols.swift (98)\n    A Demo/Pods/Nimble/Nimble/Matchers/RaisesException.swift (178)\n    A Demo/Pods/Nimble/Nimble/Matchers/ThrowError.swift (181)\n    A Demo/Pods/Nimble/Nimble/Nimble.h (6)\n    A Demo/Pods/Nimble/Nimble/ObjCExpectation.swift (125)\n    A Demo/Pods/Nimble/Nimble/Utils/Functional.swift (11)\n    A Demo/Pods/Nimble/Nimble/Utils/Poll.swift (86)\n    A Demo/Pods/Nimble/Nimble/Utils/SourceLocation.swift (21)\n    A Demo/Pods/Nimble/Nimble/Utils/Stringers.swift (62)\n    A Demo/Pods/Nimble/Nimble/Wrappers/AsyncMatcherWrapper.swift (98)\n    A Demo/Pods/Nimble/Nimble/Wrappers/MatcherFunc.swift (95)\n    A Demo/Pods/Nimble/Nimble/Wrappers/ObjCMatcher.swift (78)\n    A Demo/Pods/Nimble/Nimble/objc/DSL.h (133)\n    A Demo/Pods/Nimble/Nimble/objc/DSL.m (142)\n    A Demo/Pods/Nimble/Nimble/objc/NMBExceptionCapture.h (8)\n    A Demo/Pods/Nimble/Nimble/objc/NMBExceptionCapture.m (35)\n    A Demo/Pods/Nimble/README.md (1175)\n    A Demo/Pods/OHHTTPStubs/LICENSE (9)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/Compatibility.h (47)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/JSON/OHHTTPStubsResponse+JSON.h (57)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/JSON/OHHTTPStubsResponse+JSON.m (48)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/NSURLSession/OHHTTPStubs+NSURLSessionConfiguration.m (88)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/OHHTTPStubs.h (195)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/OHHTTPStubs.m (530)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/OHHTTPStubsResponse.h (264)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/OHHTTPStubsResponse.m (193)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/OHPathHelpers/OHPathHelpers.h (86)\n    A Demo/Pods/OHHTTPStubs/OHHTTPStubs/Sources/OHPathHelpers/OHPathHelpers.m (52)\n    A Demo/Pods/OHHTTPStubs/README.md (113)\n    A Demo/Pods/Pods.xcodeproj/project.pbxproj (3980)\n    A Demo/Pods/Pods.xcodeproj/xcshareddata/xcschemes/Moya.xcscheme (60)\n    A Demo/Pods/Pods.xcodeproj/xcshareddata/xcschemes/ReactiveMoya.xcscheme (60)\n    A Demo/Pods/Pods.xcodeproj/xcshareddata/xcschemes/RxMoya.xcscheme (60)\n    A Demo/Pods/Quick/LICENSE (201)\n    A Demo/Pods/Quick/Quick/Callsite.swift (28)\n    A Demo/Pods/Quick/Quick/Configuration/Configuration.swift (147)\n    A Demo/Pods/Quick/Quick/Configuration/QuickConfiguration.h (30)\n    A Demo/Pods/Quick/Quick/Configuration/QuickConfiguration.m (83)\n    A Demo/Pods/Quick/Quick/DSL/DSL.swift (227)\n    A Demo/Pods/Quick/Quick/DSL/QCKDSL.h (234)\n    A Demo/Pods/Quick/Quick/DSL/QCKDSL.m (79)\n    A Demo/Pods/Quick/Quick/DSL/World+DSL.h (20)\n    A Demo/Pods/Quick/Quick/DSL/World+DSL.swift (102)\n    A Demo/Pods/Quick/Quick/Example.swift (107)\n    A Demo/Pods/Quick/Quick/ExampleGroup.swift (101)\n    A Demo/Pods/Quick/Quick/ExampleMetadata.swift (22)\n    A Demo/Pods/Quick/Quick/Filter.swift (31)\n    A Demo/Pods/Quick/Quick/Hooks/Closures.swift (35)\n    A Demo/Pods/Quick/Quick/Hooks/ExampleHooks.swift (36)\n    A Demo/Pods/Quick/Quick/Hooks/SuiteHooks.swift (34)\n    A Demo/Pods/Quick/Quick/NSString+QCKSelectorName.h (17)\n    A Demo/Pods/Quick/Quick/NSString+QCKSelectorName.m (33)\n    A Demo/Pods/Quick/Quick/Quick.h (13)\n    A Demo/Pods/Quick/Quick/QuickSpec.h (48)\n    A Demo/Pods/Quick/Quick/QuickSpec.m (158)\n    A Demo/Pods/Quick/Quick/World.h (17)\n    A Demo/Pods/Quick/Quick/World.swift (197)\n    A Demo/Pods/Quick/README.md (66)\n    A Demo/Pods/ReactiveCocoa/LICENSE.md (19)\n    A Demo/Pods/ReactiveCocoa/README.md (333)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/MKAnnotationView+RACSignalSupport.h (29)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/MKAnnotationView+RACSignalSupport.m (31)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSArray+RACSequenceAdditions.h (20)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSArray+RACSequenceAdditions.m (18)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSData+RACSupport.h (22)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSData+RACSupport.m (35)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSDictionary+RACSequenceAdditions.h (31)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSDictionary+RACSequenceAdditions.m (34)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSEnumerator+RACSequenceAdditions.h (20)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSEnumerator+RACSequenceAdditions.m (22)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSFileHandle+RACSupport.h (19)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSFileHandle+RACSupport.m (40)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSIndexSet+RACSequenceAdditions.h (21)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSIndexSet+RACSequenceAdditions.m (18)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSInvocation+RACTypeParsing.h (56)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSInvocation+RACTypeParsing.m (232)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSNotificationCenter+RACSupport.h (18)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSNotificationCenter+RACSupport.m (31)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACDeallocating.h (34)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACDeallocating.m (129)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACDescription.h (16)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACDescription.m (50)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACKVOWrapper.h (46)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACKVOWrapper.m (213)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACLifting.h (61)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACLifting.m (142)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACPropertySubscribing.h (117)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACPropertySubscribing.m (159)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACSelectorSignal.h (79)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSObject+RACSelectorSignal.m (330)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSOrderedSet+RACSequenceAdditions.h (20)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSOrderedSet+RACSequenceAdditions.m (19)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSSet+RACSequenceAdditions.h (20)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSSet+RACSequenceAdditions.m (19)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSString+RACKeyPathUtilities.h (34)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSString+RACKeyPathUtilities.m (36)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSString+RACSequenceAdditions.h (21)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSString+RACSequenceAdditions.m (18)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSString+RACSupport.h (22)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSString+RACSupport.m (35)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSURLConnection+RACSupport.h (25)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSURLConnection+RACSupport.m (54)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSUserDefaults+RACSupport.h (27)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/NSUserDefaults+RACSupport.m (56)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACArraySequence.h (18)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACArraySequence.m (125)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACBehaviorSubject.h (18)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACBehaviorSubject.m (56)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACBlockTrampoline.h (30)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACBlockTrampoline.m (156)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACChannel.h (70)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACChannel.m (90)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACCommand.h (123)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACCommand.m (267)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACCompoundDisposable.h (48)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACCompoundDisposable.m (239)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACCompoundDisposableProvider.d (4)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACDelegateProxy.h (28)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACDelegateProxy.m (76)\n    A Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACDisposable.h (35)\n    I Demo/Pods/ReactiveCocoa/ReactiveCocoa/Objective-C/RACDisposable.m (0)\n    -- Patch Links --\n    https://github.com/Moya/Moya/pull/215.patch\n    https://github.com/Moya/Moya/pull/215.diff\n    ---\n    Reply to this email directly or view it on GitHub:\n    https://github.com/Moya/Moya/pull/215\n. Before I started the Carthage refactor, that's initially what I did. I had three frameworks output, with all of their dependencies. The downside was that in every file where you wanted to use any component of ReactiveMoya, you had to import Moya as well. \n\n\nIs this still the case? Or do ReactiveMoya and RxMoya have the Moya core embedded?\n. It shouldn't be the default, it was an annoyance, for which we initially compensated by creating the separate repositories. This allowed for Cartfile level specification of the flavor of Moya, and an output of a single Moya.franework.\n\u2014Justin Makaila\nOn Sun, Sep 13, 2015 at 8:47 AM, Orta notifications@github.com wrote:\n\nRight now that's not the case, but I don't see any reason to not make that behaviour default @ashfurrow ?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/pull/215#issuecomment-139870146\n. Yes, exactly. That way, if you change your flavor, you don't have to search for all the imports and update, you just update your usage of the API.\n\n\u2014Justin Makaila\nOn Sun, Sep 13, 2015 at 8:59 AM, Orta notifications@github.com wrote:\n\nSo you want the behaviour where you would always do @import Moya; and it would work fine regardless of which framework you've imported? This is totally doable using module_name in the other Podspecs. I think it would generate three differently named frameworks for drag & drop but they would all all work with @import Moya;. Can't guarantee that Xcode allows the generation of the three frameworks with the same module name, but can be tested.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/pull/215#issuecomment-139872551\n. Sure, I'll take it\n\n\u2014Justin Makaila\nOn Sun, Sep 13, 2015 at 2:45 PM, Ash Furrow notifications@github.com\nwrote:\n\nI've fixed #216 on this branch \u2013 just rearranging the podfile a bit. I've run carthage locally and it seems to be :+1:\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/pull/215#issuecomment-139907249\n. @ashfurrow @MarvinNazari you shouldn't have to specify Moya's dependencies in your Cartfile, unless you also have a specific dependency on it. \n\nThe initial error looks like you missed adding the copy-frameworks script. Check out step 4 in the \"Getting Started\" section of the README.\n. @MarvinNazari Can you post your updated Cartfile real quick?\n. @MarvinNazari Are you building for Xcode 7 and Swift 2?\n. Ah, I'm afraid I can't be of much help right now, I need to install the Xcode 7 GM. Let me get that download started, and I'll report back here if I find anything.\n@Moya/contributors: Can anyone step in?\n. ;) I've been checking the Software update section on my phone every half hour all day.\n\u2014Justin Makaila\nOn Wed, Sep 16, 2015 at 1:23 PM, Marvin Nazari notifications@github.com\nwrote:\n\nXcode 7 is coming very soon so just wait for that (https://developer.apple.com/xcode/download/)\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/issues/222#issuecomment-140811163\n. Ok, all installed. Beginning triage!\n. Using the latest of Carthage and RAC 4.0, I built just fine\u00a0\n\n\u2014Justin Makaila\nOn Fri, Sep 18, 2015 at 5:28 AM, Petr Korolev notifications@github.com\nwrote:\n\nThe same issue with my projects. I believe it's not related with Moya..\nhttps://github.com/Alamofire/Alamofire/issues/55\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/issues/222#issuecomment-141397118\n. Hey, can you post the contents of the xcodebuild output file?\n. I think a custom error type is the way to go, because it gets rid of some guessing on the end-user side. I'm all for it\n. I think associated values are the way to go. They represent a domain, and each case can encapsulate any values associated with it.\n\n\u2014Justin Makaila\nOn Sun, Nov 8, 2015 at 7:50 PM, Pierre-Marc Airoldi\nnotifications@github.com wrote:\n\nYou mentioned that you want to keep associated values clean \"especially given their lack of names\". You can give names to associated values inside an enum in swift if that's what you wanted to do. So like case CoolCase(value: Sting)\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/pull/289#issuecomment-154894267\n. We want to be able to recreate this CURL functionality:\n\nbash\n$ curl -XPOST -H 'Content-Type:application/graphql'  -d '{ count }' http://localhost:3000/graphql\nAs far as custom parameter encoding, I'm seeing something like this:\n``` Swift\n// A GraphQL utility that I'm currently developing\nimport GraphQL\nstatic let ApplicationBaseAPIURL = NSURL(string: \"https://myDomain.com/\")!\n// The query for a user matching an ID\nfunc userQuery(id: String) -> GraphQLNode {\n  return GraphQLNode(name: \"user\", arguments: [\"id\": id], properties: [\n    \"id\",\n    \"firstName\",\n    \"lastName\",\n    \"username\",\n    \"email\"\n  ])\n}\nenum UserEndpoint: MoyaTarget {\n  case GetUserByID(id: String)\nvar baseURL: NSURL {\n    return ApplicationBaseAPIURL\n  }\nvar path: String {\n    return \"graphql\"\n  }\nvar method: Moya.Method {\n    switch self {\n      case GetUserByID(_):\n        return .GET\n    }\n  }\nvar parameters: [String: AnyObject]? {\n    switch self {\n      case GetUserByID(let id):\n        return [\"query\": userQuery(id)]\n    }\n  }\nvar sampleData: NSData {\n    // Return sample data in the same shape specified by the query.\n  }\n}\nlet GraphQLProvider = ReactiveCocoaMoyaProvider(endpointClosure: { target in\n    let graphQLParameterEncoding = Moya.ParameterEncoding.Custom { requestConvertible, parameters -> (NSMutableURLRequest, NSError?) in\n        // A little pseudo cod never hurt... \n        let urlRequest = requestConvertible.URLRequest.mutableCopy()\n        if let query = parameters[\"query\"] as? GraphQLQueryType {\n            urlRequest.body = query.description\n        }\n    return urlRequest\n}\n\nlet graphQLEndpoint = Endpoint(\n    URL: target.baseURL,\n    sampleResponseClosure: {\n        return .NetworkResponse(200, NSData())\n    },\n    method: target.method,\n    parameters: target.parameters,\n    parameterEncoding: graphQLParameterEncoding\n)\n\nreturn graphQLEndpoint\n\n})\n```\nBut I don't really like how we abstract away the requirement of there being a GraphQLQueryType available at the query key in the parameters dictionary.\nWe could change the parameters property of MoyaTarget to AnyObject?, and have Endpoint do some assertions to ensure that parameters is either an Array, [NSObject: AnyObject], or String, which would allow us to supply the GraphQLQueryType.description to the parameters, but this is more of the same black-box functionality that I'd like to avoid.\n. Could you elaborate a little bit on that idea?\nI'm starting to think that it might be best to leave that on the end user's side, and have them use similar logic to what was outlined above. I can't think of a way to do it without breaking changes, and without making assumptions about what was intended. \n. I have a GraphQL framework that I've been working on, in case anyone wants to contribute ;)\n\u2014Justin Makaila\nOn Sat, Nov 14, 2015 at 12:44 PM, swizzlr notifications@github.com\nwrote:\n\nA protocol, \"ParameterEncodable\" might be a good plan. We could add conformance for dicts to keep previous behavior, and then allow further smarts by providing a \"GraphQLNode\" struct (or let the users define it as an optional third party extension to Moya, until such time as it's a huge demand).\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/issues/290#issuecomment-156740424\n. Dope, just realized that my email response never sent:\n\n@ashfurrow I wrote a simple framework that provided typed interfaces for GraphQL structures. You could then use the description property to build the proper strings. I implemented this around Moya like so:\n``` swift\nenum APITarget: TargetType {\n    case graphOperation(GraphQLType, [String: Any])\npublic var path: String {\n    switch self {\n        case .graphOperation:\n            return \"graphql\"\n        // ...\n    }\n}\n\npublic var method: Moya.Method {\n    switch self {\n    case .graphOperation:\n        return .post\n    default:\n        return .get\n    }\n}\n\npublic var parameters: [String : Any]? {\n    switch self {\n    case let .graphOperation(operation, variables):\n        return [\n            \"query\": operation.description,\n            \"variables\": variables\n        ]\n    // ...\n    default:\n        return nil\n    }\n}\n\npublic var task: Moya.Task {\n        return .request\n}\n\npublic var sampleData: Data {\n    case let .graphOperation(operation, variables):\n        // Your sample response based on the operation here\n    // ...\n    default:\n        return Data()\n}\n\n}\n```\nTurns out my initial issue with sending a raw string wasn't necessarily an issue with Moya, per se.\n. @ashfurrow the framework went wonderfully for my use case, it's OS on my\nprofile.\nI ended up just using standard JSON encoding to send queries/variables.\nNot so familiar with Apollo though.\nOn Mon, Oct 24, 2016 at 05:14 Alex H\u00fcllmandel notifications@github.com\nwrote:\n\nHey @ashfurrow https://github.com/ashfurrow! Do you use GraphQL in\ncombination with Moya? Is there any update on how to make parameter\nencoding more generic? I'm very new to GraphQL and try to integrate Apollo\niOS https://github.com/apollostack/apollo-ios with how I use Moya and\nAlamofire to make network requests.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/290#issuecomment-255688417, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABkCVG8d1rhUmoGcPFWAenJMFhCN7IACks5q3HbZgaJpZM4GeTZL\n.\n. Into it\n. I'm a fan of this. It simplifies things a little bit. technically, the type is currently Moya.MoyaResponse, which is redundant.\n\n\u2014Justin Makaila\nOn Mon, Nov 16, 2015 at 10:00 AM, Greg Pardo notifications@github.com\nwrote:\n\nhttps://github.com/raywenderlich/swift-style-guide\nAccording to this we should just use namespaces. I'm okay with that. If there is a collision you just have a little more to type.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Moya/Moya/pull/305#issuecomment-157097295\n. I've been dabbling with this for the past hour... Does anyone have any idea how we would split up ReactiveMoya and RxMoya? I know we just went through this for Carthage, but I think this deserves the same amount of scrutiny.\n\nIn the current state, as per the swift-package-manager documentation, the sources in the Plugins/, ReactiveCocoa/ and RxSwift/ directories will be compiled as separate modules, named as their directories specify. I've attempted to embed Package.swift files within each subdirectory, but it doesn't work due to file name collisions.\nEDIT I'm going to try this after lunch, but I think it might be possible if we split everything up into targets and specify the dependencies in Package.swift.\nFWIW: https://github.com/apple/swift-package-manager/blob/master/Documentation/DevelopingPackages.md#working-on-apps-and-packages-side-by-side\n. @swizzlr True, but that would then break our CocoaPods and Carthage integrations.\nTBH, I think this is the way to go. I know that the RAC and Rx extensions are supposed to be subspecs, but in reality, they're extensions of the library. They're built on top of it, very similarly to how Apple built the dealer example libraries. \n. @tomburns That's a good point. The Swift package manager is going to be distributed with all versions of Swift and Xcode in the future. There's no 3rd party software to be installed like there is with CocoaPods and Carthage. Someone who says that Moya is a dependency in their Package.swift file should not be required to also import ReactiveCocoa or RxSwift into their project if they don't use it, which they're required to do now with Carthage. \n. @aloco I'm all for that. When Xcode 7.3 dropped, I had serious issues building Moya due to dependencies not yet being updated. It's a huge hassle, especially when the dependencies that are causing issues aren't used in the project.\n. I think the best way to handle response parsing is by extending the SignalProducerType, similarly to what we do in SignalProducer+Moya, or by creating a global function.\n. I think Moya.Response and Alamofire.Response are the most responsible ways to access the types. I don't think we should be forced to prefix our types due to external collisions, especially when the solution is as simple as saying Module.SomeType\n. I think Moya.Response and Alamofire.Response are the most responsible ways to access the types. I don't think we should be forced to prefix our types due to external collisions, especially when the solution is as simple as saying Module.SomeType\n. @yinanfang Can you post an example of what you're trying to do? The example should be accurate.\n. @yinanfang Can you post an example of what you're trying to do? The example should be accurate.\n. Duplicate of #114 \n. This doesn't build on Carthage for the same reason master doesn't (Something about \"Result\" being built with a different version of the compiler). Looking into it now. \n. Uhh, strange issue... The project doesn't build if Demo/ is present, probably due to the shared schemes in the xcworkspace. @ashfurrow, @orta, Do they have to be shared for Cocoapods?\nEdit: nvm, there was a rogue scheme floating around. Everything's looking good now.\n. This still requires some tests for the other upload types, but multipart is working :+1: \n. @GuidoHendriks There's still time, I'm sure there are bugs I'm missing cause I've been looking at it a bit too long\n. @GuidoHendriks There's still time, I'm sure there are bugs I'm missing cause I've been looking at it a bit too long\n. Turns out that this builds on Carthage, unlike the last one. You have to run carthage update --no-use-binaries, because most of the distributed binaries were built with the old compiler /facepalm\n. Turns out that this builds on Carthage, unlike the last one. You have to run carthage update --no-use-binaries, because most of the distributed binaries were built with the old compiler /facepalm\n. @aschuch I'm down with that. I think it'd be coolest if we could get it like this:\nswift\nlet target = API.Target.SomeUploadTarget\nAPIProvider.request(target)\n  .progress { bytesSent, totalBytes in\n    let percentage = bytesSent / totalBytes\n    self.progressView.value = percentage\n  }\nBut that would require some contextual knowledge of the target (mostly that it's an upload).\n. @aschuch I'm down with that. I think it'd be coolest if we could get it like this:\nswift\nlet target = API.Target.SomeUploadTarget\nAPIProvider.request(target)\n  .progress { bytesSent, totalBytes in\n    let percentage = bytesSent / totalBytes\n    self.progressView.value = percentage\n  }\nBut that would require some contextual knowledge of the target (mostly that it's an upload).\n. @startupthekid I think you're on to something. Do @Moya/contributors see any issues with potentially introducing a new Response type?\n. @startupthekid I think you're on to something. Do @Moya/contributors see any issues with potentially introducing a new Response type?\n. +1 to the ResponseType protocol.\nNot sure how to integrate the progress though, because the response type wouldn't be available until after the request completes. \n. +1 to the ResponseType protocol.\nNot sure how to integrate the progress though, because the response type wouldn't be available until after the request completes. \n. We may have to introduce an UploadRequest or something along those lines... I'm imagining we'd just  add a .progress { ... } closure to the Alamofire call site which invokes the progress provided by Moya.\n. We may have to introduce an UploadRequest or something along those lines... I'm imagining we'd just  add a .progress { ... } closure to the Alamofire call site which invokes the progress provided by Moya.\n. @startupthekid I think it should be possible for us to utilize the encodingCompletion invocation to add parameters from the target. All I'm doing is taking the encoded request and immediately kicking it off.\nAlso, short-term, I've been encoding any of my parameters straight into my multipart request as different parts\n. @startupthekid I think it should be possible for us to utilize the encodingCompletion invocation to add parameters from the target. All I'm doing is taking the encoded request and immediately kicking it off.\nAlso, short-term, I've been encoding any of my parameters straight into my multipart request as different parts\n. The only thing I don't like about mirroring the Alamofire.ParameterEncoding to a custom Moya.ParameterEncoding (rather than the typealias) is that we tie ourselves to Alamofire updates. As their ParameterEncoding changes, we have to update ours. I'd rather us be able to abstract it in Moya land, transforming it into Alamofire land.\n. The only thing I don't like about mirroring the Alamofire.ParameterEncoding to a custom Moya.ParameterEncoding (rather than the typealias) is that we tie ourselves to Alamofire updates. As their ParameterEncoding changes, we have to update ours. I'd rather us be able to abstract it in Moya land, transforming it into Alamofire land.\n. Closing in favor of #483 and f3f7570dcf875d2c95cae41397176c4577cfc555\n. Closing in favor of #483 and f3f7570dcf875d2c95cae41397176c4577cfc555\n. carthage update --platform iOS --no-use-binaries\n. carthage update --platform iOS --no-use-binaries\n. That's exactly what the problem is. Haha\n. That's exactly what the problem is. Haha\n. @jakemarsh I'm going to go ahead and close the issue. Feel free to reopen if this doesn't seem to work!\n. @jakemarsh I'm going to go ahead and close the issue. Feel free to reopen if this doesn't seem to work!\n. @alskipp So you're running with a freshly cloned version of Moya, and just trying to run carthage update --platform iOS --no-use-binaries in the root of the directory, and receiving the error above, right?\nAlso, can you give me the output of the carthage log file? It logs it just before it starts building, says something like \"log file will be output to {{yellow file path}}\"\n. @alskipp So you're running with a freshly cloned version of Moya, and just trying to run carthage update --platform iOS --no-use-binaries in the root of the directory, and receiving the error above, right?\nAlso, can you give me the output of the carthage log file? It logs it just before it starts building, says something like \"log file will be output to {{yellow file path}}\"\n. @alskipp Are you trying to open the Moya.xcodeproj, or the Demo/Demo.xcworkspace? Also, see my comment above. I edited it, probably after the notification was sent out.\n. @alskipp Are you trying to open the Moya.xcodeproj, or the Demo/Demo.xcworkspace? Also, see my comment above. I edited it, probably after the notification was sent out.\n. @alskipp No, you should be able to edit the source in the Moya.xcodeproj, and then the CocoaPods implementation in Demo pulls that in as a Development Pod. Demo houses the implementation tests/examples, and the unit tests.\nI just cloned the repo into a new folder, cd'd in, and ran carthage update --platform iOS --no-use-binaries with no problem.\nI'm thinking your issue could be with the Carthage cache, perhaps pulling old versions of the dependencies?\nrm -rf ~/Library/Caches/org.carthage.CarthageKit/dependencies/\n. @alskipp No, you should be able to edit the source in the Moya.xcodeproj, and then the CocoaPods implementation in Demo pulls that in as a Development Pod. Demo houses the implementation tests/examples, and the unit tests.\nI just cloned the repo into a new folder, cd'd in, and ran carthage update --platform iOS --no-use-binaries with no problem.\nI'm thinking your issue could be with the Carthage cache, perhaps pulling old versions of the dependencies?\nrm -rf ~/Library/Caches/org.carthage.CarthageKit/dependencies/\n. @alskipp can you send me the output of the carthage build? the issue always lies in there, and not in the console output.\n. @alskipp can you send me the output of the carthage build? the issue always lies in there, and not in the console output.\n. I think we should remove the nsError property. After all, we're really coercing our already good errors into NSError for legacy support and dated patterns. I think keeping it just adds to the confusion and is what is leading people to ask about it.\n. I think we should remove the nsError property. After all, we're really coercing our already good errors into NSError for legacy support and dated patterns. I think keeping it just adds to the confusion and is what is leading people to ask about it.\n. I'd love to see a working example, I've been working on something similar, but unfortunately I can't get away from the singleton object for making requests, which results in a lot of API.request(target: MoyaTarget) calls around\n. I'd love to see a working example, I've been working on something similar, but unfortunately I can't get away from the singleton object for making requests, which results in a lot of API.request(target: MoyaTarget) calls around\n. I'm going to close this issue. @mrfarukturgut, feel free to open it again if you still have questions!\n. I'm going to close this issue. @mrfarukturgut, feel free to open it again if you still have questions!\n. @matteogazzato It's going to depend on your backend. Some can just take raw image blobs, some need it encoded a certain way, blah blah blah.\nIf you just want to put the raw data in the dictionary, you can do so using UIImageJPEGRepresentation(_:) or UIImagePNGRepresentation(_:), as per the docs.\nIf you want to use multipart, check out the open PRs, specifically #441 and #483.\nLet me know if you have any questions!\n. @matteogazzato It's going to depend on your backend. Some can just take raw image blobs, some need it encoded a certain way, blah blah blah.\nIf you just want to put the raw data in the dictionary, you can do so using UIImageJPEGRepresentation(_:) or UIImagePNGRepresentation(_:), as per the docs.\nIf you want to use multipart, check out the open PRs, specifically #441 and #483.\nLet me know if you have any questions!\n. @AsimNet Worst case:\nvar sampleData: NSData {\n  return NSData()\n}\n...But as @orta said, mostly for testing. You don't realize how great it is until you start writing your tests.\n. @AsimNet Worst case:\nvar sampleData: NSData {\n  return NSData()\n}\n...But as @orta said, mostly for testing. You don't realize how great it is until you start writing your tests.\n. Removed .gitmodules file on my fork and currently testing. Will file PR and leave merging to you guys\n. Removed .gitmodules file on my fork and currently testing. Will file PR and leave merging to you guys\n. @ashfurrow I don't think so, everything looks fine for downloading the build with carthage with and without submodules. I think it made it in as a mistake and became a problem somewhere between then and now as Carthage progressed.\nEDIT:\nWith the Carthage/Checkouts directory present, Carthage was able to pull the repos from that directory, which would come down with the git clone operation. When we pulled it in between now and the last tag, the .gitmodules file pointing to nothing in particular started causing problems while Carthage was trying to establish dependencies.\n. @ashfurrow I don't think so, everything looks fine for downloading the build with carthage with and without submodules. I think it made it in as a mistake and became a problem somewhere between then and now as Carthage progressed.\nEDIT:\nWith the Carthage/Checkouts directory present, Carthage was able to pull the repos from that directory, which would come down with the git clone operation. When we pulled it in between now and the last tag, the .gitmodules file pointing to nothing in particular started causing problems while Carthage was trying to establish dependencies.\n. Can't we just set the RxMoya targets to 10.10?\n. Can't we just set the RxMoya targets to 10.10?\n. @ashfurrow @sendyhalim Sorry guys, I got hung up with work. I tried my proposed solution above and it didn't seem like it worked; glad this got merged in and is good to go for all our RxMoya users... now we gotta figure out how to make it so you don't have to download unnecessary dependencies ;)\n. omg you're my hero. this has been on my docket for too long. Excited to check this out when you're done @AndrewSB!\n. @AndrewSB I use Carthage as my dependency manager, and I believe @orta and @ashfurrow are the resident CocoaPods experts\n. The man @colinta always throws around the Ello API as an example. See the networking/ dir for examples: https://github.com/ello/ello-ios/tree/master/Sources/Networking\nThe real magic is in ElloProvider though.\nI've borrowed heavily from it in the past. IMO, the provider set up is all about what your project needs. TargetType provides enough flexibility that you can request different URLs with the same provider, however, as you mentioned, you might have different requirements for different APIs.\nPersonally, I set up a provider per API service. In my current project, I created a MyProjectAPI struct, which manages providers and a singleton instance. The struct has a static method named  \nswift\nrequest(target: MyProjectAPI.Target, queue: NSOperationQueue, progress: ReactiveMoya.ProgressBlock)\non it. When you invoke something like MyProjectAPI.request(.SignIn(username, password)), it grabs the default provider, which is configured with a custom endpointClosure (to add headers/auth fields to the request based on the Target), and plugins. Since I use ReactiveMoya, I just added parsing the JSON response as an extension on SignalProducerType, so my API looks like this:\nswift\nlet target: MyProjectAPI.Target = .SignIn(username, password)\nMyProjectAPI.request(target)\n  .mapSignInResponse()\n  .flatMap(.Latest) { // Do some work on the mapped response }\nThe request method also handles checking the response for errors related to authentication, and will post a notification if the user is not authenticated, to which I respond by kicking the user back to sign in.\nUltimately, the decision is up to you. In the example above, I'm only interacting with a single API, so wrapping it into a single struct seemed best. Ello has a very similar set up. In the Moya example project, you can see that we set up a provider per API service.\n. I'm talking about the send(value:) vs sendNext methods\n. Closed #661 \n. @tspecht You should just return the SignalProducer from your provider from your login(_:) method, and change the signature to login(token: String) -> SignalProducer<Response, Moya.Error>.\nWhat you should have is this:\n```swift\nclass APIProvider {\n    static let provider = ReactiveCocoaMoyaProvider()\nstatic func login(token: String) -> Signal<Response, Moya.Error> {\n    return provider.request(token: .login(token: token))\n        .filterSuccessfulStatusCodes()\n}\n\n}\n``\nAll that does is creates aSignalProducer, or \"unit of work\" when you callAPIProvider.login(\"someToken\")`. That unit of work still needs a subscriber before it will be invoked. In your view controller, you're going to want to do something like:\nswift\nAPIProvider.login(\"someToken\").startWithValues { response in\n    /// Update the UI with the response.\n}\nIf you want the response to be transformed into some new value, you'll have to write extensions on the SignalProducerProtocol, i.e.:\nswift\nextension SignalProducerProtocol where Value == Moya.Response, Error == Moya.Error {\n  func mapLoginResponse() -> SignalProducer<NewValue, Error> {\n    return producer\n      .map { response -> NewValue in\n        /// Transform response to `NewValue` and return the transformed value\n      }\n  }\n}\nWhich will slightly modify your login producer to look like...\nswift\nstatic func login(token: String) -> Signal<NewValue, Moya.Error> {\n    return provider.request(token: .login(token: token))\n        .filterSuccessfulStatusCodes()\n        .mapLoginResponse()\n}. @BasThomas I'm just going to go ahead and close this.\n@tspecht, Please re-open if your issue persists.. I think the best bet is to provide a custom wrapper around your provider, similar to the Ello app.\nMy current implementation, which is built around a GraphQL server:\n```swift\nstruct MyProvider {\n    public static var sharedProvider: ReactiveCocoaMoyaProvider  = WellthProvider.DefaultProvider()\npublic static func request(_ target: MyAPI, queue: DispatchQueue? = nil, progress: @escaping Progress = { _ in  }) -> SignalProducer<JSON, Error> {\n    return sharedProvider\n        .requestWithProgress(token: target)\n        .mapProgressResponse(progress)\n        .mapSwiftyJSON()\n}\n\npublic static func graphQL(_ operation: GraphQLType, variables: [String: Any] = [:]) -> SignalProducer<GraphQLResponse, Error> {\n    return request(.graphOperation(operation: operation, variables: variables))\n        .mapGraphQLResponse()\n}\n\n}\n```\nAt this point, all you have to do is wrap the Moya API, and provide the proper extensions to process the request.\nUltimately, I agree with @scottrhoyt that deserialization is beyond the scope of the library. It should be the consumer of the API that maps the response to specific results. \nYou can achieve this with protocols and dependency injection:\n```swift\nprotocol MySpecializedProvider {\n   func request(target: MyAPITarget) -> SignalProducer\n}\nclass MyViewController {\n  let networkProvider: MySpecializedProvider\nfunc refresh() {\n    let endpoint = MyAPITarget.doSomething(parameter)\n    networkProvider.request(endpoint).startWithResult { (result: Result) in\n      switch result {\n        case .success: /// Handle successful request\n        case let .failure(error): /// Handle error\n      }\n    }\n  }\n}\n```. I like the intention, but I think we're on thin ice already hosting ReactiveSwift and Rx extensions... Adding this means we have to add a Rx version, and ReactiveSwift version, and a plain jane version, right?. I mean, I think it would be best, almost 1/3rd of my carthage build time is in building the Rx targets, and I don't even use them. It's peeved me since day 1, but no more than Cocoapods does on the reg ;)\nAnyways, maybe it's worthwhile to set up a repo of examples and a playground?\nEDIT: Uhh I'm currently building my own OnlineProvider... maybe we should provide some interface for online status in the API by default?. I've actually run into a similar issue, only it's much more spotty than what OP describes... it happens occasionally on my sign in request. I'm using ReactiveSwift and ReactiveCocoa with ReactiveMoya. My network request is wrapped in an Action<(), String, AuthenticationError>, and it seems to be invoked, because my button disables properly, but no network requests show up on the server, in the network logger, in my local proxy, or anywhere. I have to leave the app and come back, which for whatever reason, forces the Action to send an error.\nTypically, this will fix itself with a few tries of leaving the app and coming back.\nWe've been trying to chase this bug down for MONTHS, but have such a hard time trying to reproduce it.. Hmm... that doesn't fix it for me. If I get a re-creatable test case, I'll open a new issue.. @jonlambert I set up a few breakpoints in your project and ran into this curious situation:\n\nit looks like the provider is nil at the point of creating the Observable\nEDIT (addition?): That's probably due to the fact that the provider is out of scope at the end of download() on the view model. I'm going to try keeping the provider around.... @jonlambert Updating your view model code to:\n```swift\nclass WelcomeViewModel: NSObject {\n    let provider: RxMoyaProvider\noverride init() {\n    provider = RxMoyaProvider<API>(\n        endpointClosure:  MoyaProvider.defaultEndpointMapping,\n        requestClosure: MoyaProvider.defaultRequestMapping,\n        stubClosure: MoyaProvider.neverStub,\n        manager: RxMoyaProvider<API>.defaultAlamofireManager(),\n        plugins: [NetworkLoggerPlugin(cURL: true)],\n        trackInflights: true\n    )\n\n    super.init()\n}\n\nfunc download() -> Observable<Moya.Response> {\n    return provider.request(.ping)\n}\n\n}\nResults in expected behavior:\n2017-01-10 17:48:01.958: WelcomeViewController.swift:39 (viewDidLoad()) -> subscribed\n[\"$ curl -i \\\\n\\t-H \\\"Accept-Language: en;q=1.0\\\" \\\\n\\t-H \\\"User-Agent: MoyaIssue844/1.0 (co.evada.MoyaIssue844; build:1; iOS 10.2.0) Alamofire/4.2.0\\\" \\\\n\\t-H \\\"Accept-Encoding: gzip;q=1.0, compress;q=0.5\\\" \\\\n\\t\\\"https://hookb.in/Z6mo35ag/?foo=bar\\\"\"]\n[[\"Moya_Logger: [10/01/2017 17:48:16] Response:  { URL: https://hookb.in/Z6mo35ag/?foo=bar } { status code: 200, headers {\\n    \\\"Access-Control-Allow-Origin\\\" = \\\"*\\\";\\n    \\\"Cache-Control\\\" = \\\"private, no-cache, no-store, must-revalidate\\\";\\n    \\\"Content-Length\\\" = 16;\\n    \\\"Content-Type\\\" = \\\"application/json; charset=utf-8\\\";\\n    Date = \\\"Tue, 10 Jan 2017 22:48:17 GMT\\\";\\n    Expires = \\\"-1\\\";\\n    Pragma = \\\"no-cache\\\";\\n    Server = nginx;\\n    \\\"Strict-Transport-Security\\\" = \\\"max-age=31536000; includeSubdomains; preload\\\";\\n    \\\"access-control-allow-headers\\\" = \\\"Origin, X-Requested-With, Content-Type, Accept\\\";\\n    \\\"access-control-allow-methods\\\" = \\\"GET, PUT, POST, DELETE\\\";\\n    \\\"x-expires-at\\\" = \\\"Tue, 17 Jan 2017 16:25:02 GMT\\\";\\n    \\\"x-ratelimit-limit\\\" = 1000;\\n    \\\"x-ratelimit-remaining\\\" = 999;\\n    \\\"x-ratelimit-reset\\\" = 3600;\\n    \\\"x-ua-compatible\\\" = \\\"IE=Edge,chrome=1\\\";\\n} }\"]]\n2017-01-10 17:48:18.035: WelcomeViewController.swift:39 (viewDidLoad()) -> Event next(Status Code: 200, Data Length: 16)\nStatus Code: 200, Data Length: 16\n2017-01-10 17:48:18.035: WelcomeViewController.swift:39 (viewDidLoad()) -> Event completed\n2017-01-10 17:48:18.035: WelcomeViewController.swift:39 (viewDidLoad()) -> isDisposed\n```. Side note: I don't think this is exactly related to the sporadic issue. In fact, while playing with this project, my team reported that they encountered the bug again. Requests began appearing in a proxy they had set up within 15-90 seconds of the initial \"stumble\". Still trying to dig in.. @scottrhoyt No, thank you. I'm so glad this got done! \ud83d\udcaf . Maybe it's just me, but does this really belong in Moya? It seems like it's just sugar that could be implemented on a per-client basis. As OP said, this is only really relevant for testing, and this is stuff that should be coming from your network layer, rather than Moya itself.. I don't think it's on us to provide tools for loading the sample data in an opinionated format.\nFor instance, in my most recent networking library, I have this ((pardon the space formatting...):\nswift\nvar sampleData: Data {\n  switch self {\n    // ...\n      case .verify:\n          return try! JSON([\n              \"isValid\": true\n          ]).rawData()\n      case .graphOperation:\n          return try! JSON([\n              \"data\": [:],\n              \"errors\": []\n          ]).rawData()\n      case .checkProgramCode:\n          return try! JSON([\n              \"isValid\": true\n          ]).rawData()\n  }\n} \nI think we're headed down a slippery slope if we're just adding sugar.\nThe end user of Moya is the one implementing TargetType, and should be deciding where and how to load their data for their stubbed responses. If they're not building with tests in mind, they're going to put return Data(), and if they are, they probably have some custom way that they're going to serve their responses anyway.\n. But isn't providing sampleData and built in mocks/stubbing enough to make it a first class citizen?\nAPI resource models are literally providing their Data representation.\nI'm just afraid that we'll start adding something like this while everyone has divergent ideas will put us in the same place we were when people started writing JSON extensions and saying \"oh well 90% of services deliver data in this form, why don't we build in JSON handling with this provider?\".. As a Carthage user, I'm very fond of switching into two separate repos, but as @ashfurrow mentioned, there's an impending shift towards the native package manager. Any work spent breaking up the repos is likely to conclude with SPM becoming widely adopted.\nI'm in favor of keeping it as is, unless there was some tricky configuring we could do with Cartfiles in separate repositories.\ni.e.:\nMoya/ReactiveMoya hosts a repo with a Cartfile that specifies reliance on a specific branch of Moya, which includes a Cartfile for those dependencies.\nCartfile in Moya/ReactiveMoya\ngithub \"Moya/Moya\" \"reactive-moya\"\nCartfile in Moya/Moya on \"reactive-moya\"\ngithub \"ReactiveCocoa/ReactiveSwift\" ~> 1.0\n/// ... The remainder of Moya's dependencies\nHowever, this feels like it has it's own set of problems I haven't fully considered.... No, we're on the same page. This has been on the table for the better part of a year and a half while I've been contributing.\nThe only real pain point comes from waiting on Carthage to build dependencies that aren't in use. That can be mitigated (in part) by distributing binary frameworks, but that's always dependent on the build system used at the point of distribution (nothing like waiting 30 minutes for your dependencies to build only to have it fail because a binary distribution was compiled with Swift 3.0 instead of Swift 3.0.2).\nit's a tough problem, because it's only relevant to our Carthage users. CocoaPods users have had this ability pretty much since the libraries inception. Any changes that are made for Carthage users can't effect CP users, I learned that the hard way when I came on. One of my first in-depth PRs broke CP support while attempting to address this issue.\nWe totally hijacked the thread. I think the PR looks good, and is required instruction. I'm good to merge in, and we can open an issue to further this discussion... in fact, I think there already is one somewhere.... I'm still 100% against Moya taking an opinionated stance on how to handle responses. It's easy for us to extend the Response type with more properties from the NSURLSession or even the NSHTTPResponse, but it gets incredibly nasty when we start saying \"this is how you really wanted the data to be\" and start adding all sorts of JSON/XML/(insert response format here) parsers and types for handling those. The worst thing we can do, by providing a native parser, is force it on our users, thus removing the flexibility of the library and introducing some wild wild west for working around such an opinion.\nAs @sunshinejr mentioned, there's still going to be some abstraction implemented. With the reactive providers, you can easily extend the reactive types to process the response, and I think that consumers of the default MoyaProvider should be doing the something similar.\nOne implementation suggestion is to provide serialization closures, which get passed to the MoyaProvider:\n```swift\nfunc zenResponseHandler(result: Result) {\n  /// Handle the zen response\n}\nprovider.request(.zen, completion: zenResponseHandler)\nAnother suggestion would be to extend the `MoyaProvider` and implement your own `request` methods:swift\nextension MoyaProvider {\n  func requestZen() -> Result {\n    return provider.request(.zen) { result in\n      /// Process the response\n    }\n  }\n}\n```\nI completely understand the motivation, but what I've found in the multiple projects and applications I've built that use Moya is that there is no single one-size-fits-all solution. Never have I pulled a serialization layer from a previous project and used it in a future project.\nEDIT:\nAs OP mentioned, wouldn't it be possible to just extend the Response type to provide custom mapping functions to transform to custom types?\nswift\nextension Response {\n  func mapObjects<T>() -> throws [T] {\n    guard let myResponseType = MyType(data) else { throw .mapError }\n    return myResponseType\n  }\n}. FWIW, my perspective is that of a ReactiveMoya user. I guess the way I'm viewing Moya is that it takes in a TargetType and it gets you a Response. I get the response, check it for errors, map it into some result and send it on it's way.\nTaking on @colinta's challenge for a dissenting opinion:\n```swift\npublic func authenticate(type: AuthType, username: String, password: String) {\n    provider.request(.auth(type, username: username, password: password), completion: { result in\n        do {\n            let response = try result.dematerialize()\n            let authToken = try response.mapAuthenticationResponse()\n            /// Store the auth token\n            /// Update the UI\n        } catch let error as AuthenticateError {\n            /// Show an alert\n            self.showAlert(title: error.title, message: error.message)\n        } catch {\n            /// Handle other errors\n        }\n    })\n}\nextension Moya.Response {\n    func mapSwiftyJSON() throws -> JSON {\n        let json = try mapJSON()\n        return JSON(json)\n    }\nfunc mapAPIResponse() throws -> MyAPIResponse {\n    let json = try mapSwiftyJSON()\n    return MyAPIResponse(json: json)\n}\n\nfunc mapAuthenticationResponse() throws -> String {\n    do {\n        let response = try mapAPIResponse()\n    } catch {\n        throw AuthenticateError.underlying(error)\n    }\n\n    if response.isError {\n        /// Parse and throw an Authenticate Error\n        throw AuthenticateError.invalidPassword(\"Password is invalid\")\n    }\n\n    if let authToken = response.data[\"authToken\"] {\n        return authToken\n    }\n\n    throw AuthenticateError.invalidToken(\"Could not find valid auth token\")\n}\n\n}\nenum AuthenticateError {\n    case invalidToken(String)\n    case invalidUsername(String)\n    case invalidPassword(String)\n    case underlying(MoyaError)\nvar title: String {\n    return \"Uh-oh\"\n}\n\nvar message: String {\n    switch self {\n    case let .invalidPassword(message):\n        return message\n    case let .invalidUsername(message):\n        return message\n    }\n}\n\n}\n```\nThe more I look into this, the more I realize that this is just a recreation of what the reactive users already have (in terms of this).\nI think this is mostly an improvement for the users who don't use any of the extensions. I like the opt-in/opt-out functionality, and the non-breaking aspect of it. I guess my main point is that this functionality is currently achievable by extending the Response, though it's not immediately obvious.\nEdit\nUpdated to reflect concerns from @michaelsand regarding throwing errors of certain types... I really dislike the concept of throwing in Swift because, in most cases, you have to have domain information to know what kind of Error the function is going to throw, given the fact that the Error type isn't dictated in the method signature.. @scottrhoyt Comment on your aside regarding Result: We need to be mindful about the version numbers. Since ReactiveSwift also relies on it, we need to keep that in sync with their version, especially for the users that are using the binary distribution (i.e. me).. @michaelsand I agree with a lot of what you said, especially around the free-floating AuthenticateError. However, I don't think calling the other functions is a deal, particularly because the Error stays as a MoyaError until you hit the mapAPIResponse().\nAs I mentioned, it's not the prettiest in regards to error handling, but that could easily be changed to work like so (this is untested sudo-code, my brain compiler gives it the \ud83d\udc4d):\n```swift\nextension Response {\n  func mapAuthenticationResult() -> Result {\n    do {\n      let authToken = try mapAuthenticationResponse()\n      return .success(authToken)\n    } catch error as AuthenticateError {\n      return .failure(error)\n    } catch {\n      return .failure(.underlying(error))\n    }\n  }\n}\n``\nIMO, the most valuable part of theparser` function is the type information that can be provided.\nThat said, since we would be changing the call site to pull the correct parser and apply it, I'm leaning with @scottrhoyt that we should just wrap the provider and modify it to work accordingly with completion blocks.\nWrapped Example:\n```swift\nstruct NetworkProvider {\n  struct Parsers {\n    static func authentication(type: AuthType) -> ((Moya.Response) -> String) {\n      return { response in\n        /// Transform response\n      }\n    }\n  }\nvar provider: MoyaProvider\n  func request(target: MyAPI, parser: (Moya.Response) -> T, completion: Result) {\n    provider.request(target) { result in\n      do {\n        let response = try result.dematerialize()\n        completion(.success(parser(response)))\n      } catch {\n        completion(.failure(.underlying(error)))\n      }\n    }\n  }\n}\nlet provider = /// Create some provider\nlet networkProvider = NetworkProvider(provider)\nnetworkProvider.request(.auth(.signIn, username, password), NetworkProvider.Parsers.authentication(.signIn)) { result in\n  /// TODO: Handle the result\n}\nIn-line Example:swift\npublic func authenticate(type: AuthType, username: String, password: String) {\n    let parser = Parsers.authentication(type)\n    provider.request(.auth(type, username: username, password: password), completion: { result in\n        do {\n            let response = try result.dematerialize()\n            let authToken = parser(response)\n            /// Store the auth token\n            /// Update the UI\n        } catch let error as AuthenticateError {\n            /// Show an alert\n            self.showAlert(title: error.title, message: error.message)\n        } catch {\n            /// Handle other errors\n        }\n    })\n}\n``. @Moya/contributors as well. I'm trying to usegit revert, but I'm not entirely familiar. The... reset... push -fdidn't work. I rangit revert master -m 1`, but haven't pushed it yet because i don't want to undo the wrong stuff.. Exactly, @BasThomas. \n@scottrhoyt, @ashfurrow, I'm fine with PR'ing it, I just wanna make sure the command I'm running is legit.\nQuick patch: Is there any reason we allow direct pushes to master? I know, realistically, I should have watched what I was pushing to, but is there anyway we can protect against this in the future?. @ashfurrow Well here's the fun part... ca5c9fe is actually a merge commit... I had my own fork of Moya with tweaks for whatever version of ReactiveSwit I was using. I pulled in upstream (this repo), and merged, then, thinking I was pushing to my branch, accidentally typed git push upstream master which pushed whatever just got merged in with whatever out of date changes I had.\nThe parents of the commit are  4160bb6 + b0a70e2, where b0a70e2 is the commit that I want to revert master back to (i.e. undo whatever was merged in from 4160bb6.\nI believe the proper revert command would be git revert -m 1 ca5c9fe, which gives me the message:\n```\nRevert \"Merge in master\"\nThis reverts commit ca5c9fe..., reversing changes made to 4160bb6...\n```\nI'm a little tentative to pull the trigger right now, seeing as I've already ruined our history a bit ;).\nI'm going to create a new fork (I don't trust the history of my old one anymore...), create a new branch, run the revert command above, and then file a PR.. @Moya/contributors after further review, it looks like my branch was used as the base, and the \"merge\" was really just a fast forward, that looks weird because my branch was used last the base.\nI changed one of my projects to point to master, and have been using it with seemingly no issue.. Ultimately, I think this demonstrates that we need to lock down the master branch and ensure that the only code that can get into master is via PR and approval from the organization.. @BasThomas The issue (I believe) was that I was running my own fork, and my own version of master, so when I went to merge in, it used my branch as the base, and merged in this repo's master, which pretty much just merged my four month old commits into the history.\nI attempted to use the standard suggested git revert and whatnot, but since my branch was the base for the merge, it was threatening to undo months of work on this branch.\nGiven that context, if anyone who understands git a little better has an idea, it should be pretty easy to drop those commits from the history (I was literally just tweaking the Cartfile to match ReactiveSwift with the version of ReactiveCocoa I was using), then that would provide a more accurate representation of development over time, but I'm not sure if it's necessary, given that all of the files I edited were definitely manipulated and changed since I last touched them.. @BasThomas, @ashfurrow, @scottrhoyt:\nI can't possibly believe that this is correct; the Cartfile is totally wrong. I ran the command I posted in #996: git revert -m 1 ca5c9fe and popped this onto a branch... any ideas?. I'm not a user of RxSwift, but just cruising through their API (you know, trying to form an educated opinion), it looks like Single<MoyaResponse> IS the most analogous structure to represent a network request, unless the request is repeating, in which case, Observable would make sense. In the case of a repeating request however, it should be on the developer to format their signal in that way.\nRealistically, I don't think we should not embrace this change just because our API already utilizes Observable, but rather note it as a breaking change and release.\nForcing people to make changes to existing code bases to implement the best practices from one of our dependencies for a new version should be expected, and as @AndrewSB mentioned, you can just add asObservable() if you're a client who wants to continue to use Observable.. I'll hit it, it's a two second fix @pedrovereza. @evermeer Pulling master from here and using the specified dependencies via the Cartfile and Podfile, I'm seeing that we're not using a version of ReactiveSwift that has the DateSchedulerProtocol deprecation. Are you perhaps pointing to the master of ReactiveSwift?. So I'm trying to understand... this is the queue that will be used by Alamofire for callbacks as a hook back into Moya, whereas the remaining Scheduler property is in place for delivery of whatever reactive abstraction you use?. Yeah I agree. The queue passed to Alamofire doesn't necessarily have to be the same one as our Reactive Scheduler, all that really matters is that we provide this init option so people can move their request building/handling off of the main queue and into a dedicated background queue (if desired).. Loving it, seeing as I've implemented this like, 8x in different projects. Should we add a default of nil to the TargetType? I think that would make sense, given that most requests currently don't implement this.. @BasThomas I'd be interested in re-hashing that discussion here; I've had to implement this myself a handful of times and it's particularly annoying. I think it's save to say that MOST private APIs will require some sort of authentication and it seems a little ridiculous to have the Endpoint initializer be considerate of state, given that most of the state is already incorporated in TargetType.. @pedrovereza @BasThomas Ahh, sorry, I misunderstood. I remember the no defaults conversation... I mean, I guess this will get wrapped up in 9.0, so breaking changes are legit... I just got excited and wanted to start using it immediately :). \ud83d\udc4d\ud83c\udffb\nOn Fri, Apr 28, 2017 at 21:19 Pedro Vereza notifications@github.com wrote:\n\nGreat, so I think we all agree having no default is better \ud83d\ude4c\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1067#issuecomment-298138033, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABkCVIW-_GgCRLoLceRrh4B-fEcSnJwmks5r0pAQgaJpZM4NJexz\n.\n. ```swift\nenum MyTargetType: TargetType {\n   /// cases, other variables...\n\nvar sampleData: Data {\n    switch self {\n    case .emptyCase:\n      return Data()\n    /// other cases\n  }\n}\n``\nIf you return emptyData()`, it should work . I'm in for 3. ",
    "zbeckman": "What's the current/best configuration for use with Swift 2 (Xcode 7) and RAC? It looks like the Moya swift-2.0 branch, w/ RAC swift-2.0 branch, and a carthage pull of ReactiveMoya?\n. I agree \u2013\u00a0as someone that definitely falls into the \"new user\" category. I'm just now trying to get Moya, ReactiveCocoa, and Alamofire working together... and the fewer things I have to hunt down and figure out, the better. I also vote for keeping a focus on CocoaPods. I have one Carthage module (because they don't have a pod yet... but should soon). Pods work much better for us, in a distributed project.\n. Tried a few different things, starting with the swift-2.0 branch README.md... obviously out of date.\nAfter updating to:\npod 'Box', :head\npod 'Result', :head\npod 'Alamofire', :git => 'https://github.com/Alamofire/Alamofire.git', :branch => 'swift-2.0'\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => 'https://github.com/Moya/Moya.git', :branch => 'swift-2.0'\nIt is healthier \u2013\u00a0seems to be down to two compile errors (versus the dozens prior to the change):\n```\nCompileSwift normal x86_64 /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Moya/Moya/ReactiveCocoa/Moya+ReactiveCocoa.swift\n    cd /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Moya/Moya/Endpoint.swift -primary-file /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Moya/Moya/ReactiveCocoa/Moya+ReactiveCocoa.swift /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Moya/Moya/Moya.swift /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Moya/Moya/ReactiveCore/MoyaResponse.swift /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Moya/Moya/ReactiveCocoa/RACSignal+Moya.swift -target x86_64-apple-ios8.2 -enable-objc-interop -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.0.sdk -I \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Products/QA 1-iphonesimulator\" -F \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Products/QA 1-iphonesimulator\" -g -import-underlying-module -module-cache-path /Users/zbeckman/Library/Developer/Xcode/DerivedData/ModuleCache -D COCOAPODS -serialize-debugging-options -Xcc \"-I/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/swift-overrides.hmap\" -Xcc -iquote -Xcc \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Moya-generated-files.hmap\" -Xcc \"-I/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Moya-own-target-headers.hmap\" -Xcc \"-I/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Moya-all-non-framework-target-headers.hmap\" -Xcc -ivfsoverlay -Xcc /Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/all-product-headers.yaml -Xcc -iquote -Xcc \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Moya-project-headers.hmap\" -Xcc \"-I/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Products/QA 1-iphonesimulator/include\" -Xcc -I/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Headers/Private -Xcc -I/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Headers/Private/Moya -Xcc -I/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Headers/Public -Xcc \"-I/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/DerivedSources/x86_64\" -Xcc \"-I/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/DerivedSources\" -Xcc -DQA_1=1 -Xcc -DCOCOAPODS=1 -Xcc -ivfsoverlay -Xcc \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/unextended-module-overlay.yaml\" -Xcc -working-directory/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods -emit-module-doc-path \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Objects-normal/x86_64/Moya+ReactiveCocoa~partial.swiftdoc\" -O -module-name Moya -emit-module-path \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Objects-normal/x86_64/Moya+ReactiveCocoa~partial.swiftmodule\" -serialize-diagnostics-path \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Objects-normal/x86_64/Moya+ReactiveCocoa.dia\" -emit-dependencies-path \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Objects-normal/x86_64/Moya+ReactiveCocoa.d\" -emit-reference-dependencies-path \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Objects-normal/x86_64/Moya+ReactiveCocoa.swiftdeps\" -o \"/Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/Pods.build/QA 1-iphonesimulator/Moya.build/Objects-normal/x86_64/Moya+ReactiveCocoa.o\"\n/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Moya/Moya/ReactiveCocoa/Moya+ReactiveCocoa.swift:37:66: error: value of type 'ErrorType' has no member 'domain'\n                            subscriber.sendError(NSError(domain: error.domain, code: statusCode, userInfo: error.userInfo))\n                                                                 ^~~~~ ~~~~~~\n/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Moya/Moya/ReactiveCocoa/Moya+ReactiveCocoa.swift:39:50: error: cannot convert value of type 'ErrorType' to expected argument type 'NSError!'\n                            subscriber.sendError(error)\n                                                 ^~~~~\n```\nIdeas...?\nBy the way, what's the difference between your Alamofire branch and the Swift 2 master (Alamofire) branch? Can I safely point at the Alamofire URL or should I stick with your's for now...?\n(Kind of looking for guidance on how to proceed now that Xcode 7 GM is out...)\n. Hmm. Still no good, I'm seeing the same error. Updated to use the latest AlamoFire. Here's the complete Podspec I'm using:\ntarget 'Glimpulse', :exclusive => false do\n        pod 'SwiftSpinner', :git => 'https://github.com/zbeckman/SwiftSpinner.git'\n        pod 'XCGLogger', :git => 'https://github.com/DaveWoodCom/XCGLogger.git', :branch => 'swift_2.0'\n        pod 'GRValidation', '~> 0.2'\n        pod 'SwiftDate', :git => 'https://github.com/malcommac/SwiftDate.git', :branch => 'swift-2.0'\n        pod 'DateTimeKit', :git => 'https://github.com/zbeckman/DateTimeKit.git'\n        pod 'MagicalRecord'\n        pod 'Box', :head\n        pod 'Result', :head\n        pod 'Alamofire', '~> 2.0'\n        pod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\n        pod 'Moya/ReactiveCocoa', :git => 'https://github.com/Moya/Moya.git', :branch => 'swift-2.0'\nend\n. (Realizing that, technically this looks like a Moya/ReactiveCocoa issue \u2013\u00a0I can create an issue over there if you would prefer).\n. I'm now pulling the following pods:\npod 'Box', :head\n    pod 'Result', :head\n    pod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\n    pod 'Alamofire', '~> 2.0'\n    pod 'Moya', :git => 'https://github.com/Moya/Moya.git', :branch => 'swift-2.0'\nAfter adding Alamofire and Moya, I'm getting the following runtime error. This only seems to be happening after adding in Alamofire and Moya, but I'm still debugging.\nIf you see anything wrong with my config please let me know.\n2015-09-11 01:48:07.648 XCTRunner[35507:240964] The bundle \u201cGlimpulseUITests\u201d couldn\u2019t be loaded because it is damaged or missing necessary resources. Try reinstalling the bundle.\n2015-09-11 01:48:07.648 XCTRunner[35507:240964] (dlopen_preflight(/Users/zbeckman/Library/Developer/CoreSimulator/Devices/FCFAAFBF-1AB4-4223-9BCC-CA91CBDE96DC/data/Containers/Bundle/Application/11F5D849-3061-4E91-A44C-F35AA544520A/GlimpulseUITests-Runner.app/PlugIns/GlimpulseUITests.xctest/GlimpulseUITests): Library not loaded: @rpath/libswiftCoreLocation.dylib\n  Referenced from: /Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/CodeCoverage/Glimpulse/Products/QA 1-iphonesimulator/ReactiveCocoa.framework/ReactiveCocoa\n  Reason: image not found)\n. Yes \u2013\u00a0all the routine fixes.\nI'm very fuzzy on which pods I need to pull in... ReactiveCocoa, Alamofire, Moya, ReactiveMoya... And I'm pretty sure the README is quite out of date in this regard.\nI'm able to get Moya to install \u2013\u00a0but, any attempt to bring in ReactiveCocoa fails.\n. Hm, OK \u2013\u00a0a little more info \u2013\u00a0the error I reported above:\n2015-09-11 01:48:07.648 XCTRunner[35507:240964] The bundle \u201cGlimpulseUITests\u201d couldn\u2019t be loaded because it is damaged or missing necessary resources. Try reinstalling the bundle.\n2015-09-11 01:48:07.648 XCTRunner[35507:240964] (dlopen_preflight(/Users/zbeckman/Library/Developer/CoreSimulator/Devices/FCFAAFBF-1AB4-4223-9BCC-CA91CBDE96DC/data/Containers/Bundle/Application/11F5D849-3061-4E91-A44C-F35AA544520A/GlimpulseUITests-Runner.app/PlugIns/GlimpulseUITests.xctest/GlimpulseUITests): Library not loaded: @rpath/libswiftCoreLocation.dylib\n  Referenced from: /Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/CodeCoverage/Glimpulse/Products/QA 1-iphonesimulator/ReactiveCocoa.framework/ReactiveCocoa\n  Reason: image not found)\nOnly seems to be a problem in the \"iOS UI Testing Bundle\" target type. (Unfortunately, this is where we do all our testing, so the outcome is that when we run tests, it immediately fails and nothing works \u2013\u00a0we just get the above error).\n. Also, if I only use:\npod 'Alamofire'\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => 'https://github.com/Moya/Moya.git', :branch => 'swift-2.0'\nThen, I get compile errors as follows:\n```\nCompileSwift normal x86_64 /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Box/Box/Box.swift\n    cd /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods\n/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Box/Box/Box.swift:6:37: error: 'Printable' has been renamed to 'CustomStringConvertible'\npublic final class Box: BoxType, Printable {\n                                    ^~~~~~~~~\n                                    CustomStringConvertible\n/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Box/Box/Box.swift:31:10: error: 'toString' has been renamed to 'String'\n                return toString(value)\n                       ^~~~~~~~\n                       String\nSwift.toString:1:33: note: 'toString' has been explicitly marked unavailable here\n@available(*, unavailable) func toString(x: T) -> String\n                                ^\nCompileSwift normal x86_64 /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Box/Box/MutableBox.swift\n    cd /Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods\n/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Box/Box/MutableBox.swift:8:51: error: 'Printable' has been renamed to 'CustomStringConvertible'\npublic final class MutableBox: MutableBoxType, Printable {\n                                                  ^~~~~~~~~\n                                                  CustomStringConvertible\n/Users/zbeckman/Projects/Glimpulse/iOS/project/Glimpulse/Pods/Box/Box/MutableBox.swift:25:10: error: 'toString' has been renamed to 'String'\n                return toString(value)\n                       ^~~~~~~~\n                       String\nSwift.toString:1:33: note: 'toString' has been explicitly marked unavailable here\n@available(*, unavailable) func toString(x: T) -> String\n                                ^\n```\n(Hence, the addition of the pods for Box and Result from HEAD). However, once I add in those (fixing the compiler errors) \u2013\u00a0we end up back at the original problem where none of our tests work (the image not found error).\n. It would seem that if I build ReactiveCocoa using Carthage, and install it as directed (that is, drag the framework into my embedded binaries) \u2013\u00a0the problem changes. Now:\n2015-09-11 21:15:50.796 XCTRunner[20612:2543548] (dlopen_preflight(/Users/zbeckman/Library/Developer/CoreSimulator/Devices/FCFAAFBF-1AB4-4223-9BCC-CA91CBDE96DC/data/Containers/Bundle/Application/7FD22288-32A0-419F-B0AF-54DE9143FDBB/GlimpulseUITests-Runner.app/PlugIns/GlimpulseUITests.xctest/GlimpulseUITests): Library not loaded: @rpath/libswiftCoreLocation.dylib\n  Referenced from: /Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/CodeCoverage/Glimpulse/Products/QA 1-iphonesimulator/Moya.framework/Moya\n  Reason: image not found)\n(Notice that now it's Moya that has library problems...)\nI think this has something to do with the fact that I'm building &/or testing for iOS. And I found this, which I'm not sure what to make of: https://github.com/Carthage/Carthage#if-youre-building-for-ios.\n. Ok, so after a good bit of fiddling, I learned a few things.\nI'm using Xcode 7 GM. I'm in the habit of clearing the project directory and derived data whenever anything odd happens (so, um... like hourly ;-).\nFirst off, everything works just fine if I install ReactiveCocoa using Carthage (Swift 2 branch of course), and drag the framework into our project, in conjunction with the following pods (all required for a good build). In addition, I have SwiftCheck installed via Carthage:\n```\nUX components\npod 'SwiftSpinner', :git => 'https://github.com/zbeckman/SwiftSpinner.git'\nFrameworks\npod 'MagicalRecord'\npod 'Alamofire'\npod 'Moya', :git => 'https://github.com/Moya/Moya.git', :branch => 'swift-2.0'\nUtility components\npod 'XCGLogger', :git => 'https://github.com/DaveWoodCom/XCGLogger.git', :branch => 'swift_2.0'\npod 'GRValidation', '~> 0.2'\npod 'DateTimeKit', :git => 'https://github.com/zbeckman/DateTimeKit.git'\n```\nI also learned that BrightFutures has an incompatible dependency (it requires Result 0.6.1 and ReactiveCocoa is now using 1.0.0 \u2013\u00a0which leads to a lot of problems... However, with RAC your probably don't need BrightFutures so hopefully this isn't an issue for anyone).\nNOW. After getting all that figured out (and committed! It took forever so I don't want to lose this config), I gave our project a try with nothing except these pods (and, of course, I removed the Carthage install of RAC):\n```\npod 'SwiftSpinner', :git => 'https://github.com/zbeckman/SwiftSpinner.git'\npod 'Result', :head\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => 'https://github.com/Moya/Moya.git'\npod 'XCGLogger', :git => 'https://github.com/DaveWoodCom/XCGLogger.git', :branch => 'swift_2.0'\npod 'GRValidation', '~> 0.2'\ntarget 'GlimpulseTests', :exclusive => false do\n    # Testing framework\n    pod 'Nimble', :git => 'https://github.com/Quick/Nimble.git', :branch => 'swift-2.0'\n    pod 'Quick', :git => 'https://github.com/Quick/Quick', :branch => 'swift-2.0'\nend\n```\nDid the usual (clean project, delete derived data) \u2013\u00a0and it fails with the following output:\n2015-09-12 20:20:32.726 XCTRunner[84436:3618319] (dlopen_preflight(/Users/zbeckman/Library/Developer/CoreSimulator/Devices/FCFAAFBF-1AB4-4223-9BCC-CA91CBDE96DC/data/Containers/Bundle/Application/EF1E312C-E955-45EE-B805-B86307D314A2/GlimpulseUITests-Runner.app/PlugIns/GlimpulseUITests.xctest/GlimpulseUITests): Library not loaded: @rpath/libswiftCoreLocation.dylib\n  Referenced from: /Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/CodeCoverage/Glimpulse/Products/QA 1-iphonesimulator/Moya.framework/Moya\n  Reason: image not found)\nJust for the heck of it (to make sure nothing is different) I tried:\npod 'Moya', :git => 'https://github.com/Moya/Moya.git'\nBut I think that initial name is just symbolic \u2013\u00a0anyhow, it didn't matter.\nSo bottom line \u2013 Still no good using the CocoaPod, but it's fine using Carthage from the original ReactiveCocoa repository.\nI'm stumped...\n. I tried removing the Carthage install of ReactiveCocoa, and then updating with the pods you suggested:\npod 'Result', :head\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => \"https://github.com/Moya/Moya.git\"\nI get the same problem, again, only on the UI testing target (regular test targets and the app itself seem to work fine):\n2015-09-13 11:22:13.386 XCTRunner[29003:4857736] (dlopen_preflight(/Users/zbeckman/Library/Developer/CoreSimulator/Devices/FCFAAFBF-1AB4-4223-9BCC-CA91CBDE96DC/data/Containers/Bundle/Application/056B5BED-0B9F-41AB-A248-117BD6824748/GlimpulseUITests-Runner.app/PlugIns/GlimpulseUITests.xctest/GlimpulseUITests): Library not loaded: @rpath/libswiftCoreLocation.dylib\n  Referenced from: /Users/zbeckman/Library/Developer/Xcode/DerivedData/Glimpulse-avhroqmcgyzbiecltqxshdpczkht/Build/Intermediates/CodeCoverage/Glimpulse/Products/QA 1-iphonesimulator/Moya.framework/Moya\n  Reason: image not found)\nI also took a look at your test project. There is an important different in regard to how we have our Podfiles set up, and possibly the resulting code:\nMy Podfile installs all of the common pods without including them in a target (that is, like this):\n```\npod 'Moya'\npod 'OtherCommonStuff'\ntarget 'UITests'\n    pod 'Quick'\nend\n```\nSo, with that in mind, I started \"upgrading\" your Podfile, incrementally adding elements until I got a similar failure.\nThe first step was to adopt the above format. Then I added a few lines that were missing from yours, but present in my config (such as the iOS target). Finally, I added in my testing libraries.\nThis is what I ended up with:\n```\nplatform :ios, '8.0'\nsource 'https://github.com/CocoaPods/Specs.git'\nuse_frameworks!\npod 'Result', :head\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => \"https://github.com/Moya/Moya.git\"\ntarget 'TestTests' do\n    pod 'Nimble', :git => 'https://github.com/Quick/Nimble.git', :branch => 'swift-2.0'\n    pod 'Quick', :git => 'https://github.com/Quick/Quick', :branch => 'swift-2.0'\nend\ntarget 'TestUITests' do\n    pod 'Nimble', :git => 'https://github.com/Quick/Nimble.git', :branch => 'swift-2.0'\n    pod 'Quick', :git => 'https://github.com/Quick/Quick', :branch => 'swift-2.0'\nend\n```\nAnd I get this result when the UI tests run:\n2015-09-13 11:31:46.948 XCTRunner[32697:4885511] (dlopen_preflight(/Users/zbeckman/Library/Developer/CoreSimulator/Devices/A5E91AA9-62B2-43C9-9378-9FA9A3F5491D/data/Containers/Bundle/Application/B2691E9B-944A-49C7-8EF3-FE1CCB98D62B/TestUITests-Runner.app/PlugIns/TestUITests.xctest/TestUITests): Library not loaded: @rpath/libswiftCoreLocation.dylib\n  Referenced from: /Users/zbeckman/Library/Developer/Xcode/DerivedData/Test-hbfuhujgtjfczffhoidfubqaazyo/Build/Products/Debug-iphonesimulator/Moya.framework/Moya\n  Reason: image not found)\n. Same here! Ok, I updated our main project's Podfile as follows (specifically, I put the main target 'Glimpulse' back in, so now every pod is explicitly included in a target):\n```\nplatform :ios, '8.0'\nsource 'https://github.com/CocoaPods/Specs.git'\nuse_frameworks!\ntarget 'Glimpulse', :exclusive => false do\n    # UX components\n    pod 'SwiftSpinner', :git => 'https://github.com/zbeckman/SwiftSpinner.git'\n# Frameworks\npod 'MagicalRecord'\npod 'Result', :head\npod 'ReactiveCocoa', :git => 'https://github.com/ashfurrow/ReactiveCocoa.git', :branch => 'swift2'\npod 'Moya/ReactiveCocoa', :git => \"https://github.com/Moya/Moya.git\"\n\n# Utility components\npod 'XCGLogger', :git => 'https://github.com/DaveWoodCom/XCGLogger.git', :branch => 'swift_2.0'\npod 'GRValidation', '~> 0.2'\npod 'DateTimeKit', :git => 'https://github.com/zbeckman/DateTimeKit.git'\n\nend\ntarget 'GlimpulseTests', :exclusive => false do\n    # Testing framework\n    pod 'Nimble', :git => 'https://github.com/Quick/Nimble.git', :branch => 'swift-2.0'\n    pod 'Quick', :git => 'https://github.com/Quick/Quick', :branch => 'swift-2.0'\nend\ntarget 'GlimpulseIntegrationTests', :exclusive => false do\n    # Testing framework\n    pod 'Nimble', :git => 'https://github.com/Quick/Nimble.git', :branch => 'swift-2.0'\n    pod 'Quick', :git => 'https://github.com/Quick/Quick', :branch => 'swift-2.0'\nend\ntarget 'GlimpulseUITests', :exclusive => false do\n    # Testing framework\n    pod 'Nimble', :git => 'https://github.com/Quick/Nimble.git', :branch => 'swift-2.0'\n    pod 'Quick', :git => 'https://github.com/Quick/Quick', :branch => 'swift-2.0'\nend\n```\nAnd it works!\nQuestions, though:\nNotice that I am not including any of the following pods:\n#pod 'Box', :head\n    #pod 'Result', :head\n    #pod 'Alamofire'\nSo, are Result and Alamofire looped in through dependencies? Do we need to include these in our Podfile?\nThankfully this simplifies our Carthage setup too... just one project now (SwiftCheck) that doesn't do pods.\n. Nice! Thanks for the tip.\n. Xcode 7 GM.\n. All fixed. Sorry for the slow response! (Too many windows!)\n. ",
    "SRandazzo": "@ashfurrow thank you! Looking forward to getting into Moya :-D\n. That would be great! Still getting familiar with Moya but this will help push me along!\n. I am also :+1: for this!\nOn a related note, is there not a dedicated XCProj/workspace for Moya development?\nIf we have one, we can mirror project structure with file structure\n. :tada: \n. I've actually been building, and using, an extension to MoyaProvider that integrates ObjectMapper support. It's been working really great so far, but I haven't gotten to the point of PR-ing it just yet. I feel like pattern of subclassing MoyaProvider isn't the best decision, and ultimately limits flexibility (what if i want to use ObjectMapper in on instance, but the RAC extensions in another?)\nI like @ashfurrow's idea above, and think we could focus on making Moya more flexible and conducive to extensions without subclassing\nThe basics of the ObjectMapper extension are:\n- The MoyaMappable protcol requires you to specify the key at which the object can be found in the JSon response. (Follows a RESTful assumption)\nSwift\npublic protocol MoyaMappable : MoyaTarget {\n    //The keypath in the response which contains the nested object or objects you want to map\n    var rootKeyPath: String { get }\n}\nObjectMapperMoyaProvider takes generic type MoyaMappable\npublic class ObjectMapperMoyaProvider<T: MoyaMappable>: MoyaProvider<T>\nWhen sending a request, you specify alla generics what type of object is returnd. The object must conform to Mappable\nSwift\n    func requestObjects<U: Mappable>(token: T, completion: ((objects: [U]?, data: NSData?, statusCode: Int?, response: NSURLResponse?, error: NSError?) -> ())) -> Cancellable {\nHere is a Gist to the extension I wrote\nhttps://gist.github.com/SRandazzo/a07500391da99a580937\n. Little bit of snooping around led me to this issue on Travis-CI:\nhttps://github.com/travis-ci/travis-ci/issues/4725\nThis appears to be a known bug. There is a potential workaround where you can a sleep n to the end of our travis.yml\nThoughts on doing the above hack?\n. Like this a lot :+1:\n. Looks good to me :+1: :rocket: \n. Glad to hear master is already \u26a0\ufe0fprotected\u26a0\ufe0f!!!\nSorry to hear about the intermittent CI failures, those are always fun :grimacing: \nYou have a great point that getting a PR merged may be more important than passing tests. I'm coming from an app-based repository mindset with bi-weekly releases, so pretty different :fish: here. \nI think that with the right kind of friendly community (which Moya has!) either approach can work, and barring the intermittent failure issue, it could get people more involved and focused on testing, with other contributors pitching in to help people out with tests!\nIf it weren't for those intermittent failures, I would propose an experiment to try it out, but we should figure those failures out first! I'll do a little bit of researching on that issue \nThanks again @swizzlr @ashfurrow :tada: \n. ",
    "fastred": "Glad to help. The documentation is first class :+1: \n. ",
    "searls": "And for anyone looking for that \"push\" I gave Ash, this is the talk he's referencing.\n. ",
    "chriseidhof": "I don't really understand the code base, so feel unqualified to comment on\nthis... But I'd be happy to have a look at this together at a computer\nduring the next days?\nOn Thu, Jun 11, 2015 at 9:01 PM, Colin T.A. Gray notifications@github.com\nwrote:\n\nMy immediate, gut response is yes, because they seem related and it's\neasier (conceptually, to a new Moya user) to implement just the one\nprotocol.\nIs there ever a time when these protocols would be implemented by separate\nobjects?\n\nOn Jun 11, 2015, at 8:35 PM, Ash Furrow notifications@github.com\nwrote:\nDoes it make sense now that we're saying that parameters are on the\ntarget, and path is on the path, given that either property depends on the\nenum's associated values?\n/cc @chriseidhof\n\u2015\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ashfurrow/Moya/issues/136#issuecomment-111345814.\n\n\nChris Eidhof\n. ",
    "nikita-leonov": "Was it actually addressed? We are trying to subclass both MoyaProvider and ReactiveCocoaMoyaProvider and Xcode says we should override designated initializer.\n. I see. Yes, it is easier to define default parameters now, but it still require overriding designated initializer. Actually situation does not change in compare with what you writing in Oct, 1. Here is current experience of subclassing \u2014\u00a0https://www.evernote.com/l/AEaV5Z1HlZRGprguAUiszmTarcbrRgFzQA0\n. Swift actually supports inheritance of initializers. For example in a following code Bar will not require initializer, but it will still be available:\n```\nclass Foo {\n  let value: Int\n  init(value: Int = 5) {\n    self.value = value\n  }\n}\nclass Bar: Foo {\n}\n```\nThe problematic situation will be if we make Foo generic. Somehow in this scenario Swift starts to ask designated initializer override. I do not really understand why yet and what could be an option, but I am trying to find an answer now.\n. While I am going to dig a little bit more, I am not sure that I will be able to handle the whole issue. I suggest to not create a new one, but just reopen current issue. It has whole history of thought, with an actual problem described by you. I think this issue is good enough for tracking everything related to simplifying of subclasses. \nAlso I would like to highlight why it is important. As for today we have a lot of code duplication in our product of initializers like following:\noverride init(endpointClosure: EndpointClosure = ReactiveCocoaMoyaProvider.DefaultEndpointMapping, requestClosure: RequestClosure = ReactiveCocoaMoyaProvider.DefaultRequestMapping, stubClosure: StubClosure = ReactiveCocoaMoyaProvider.NeverStub, manager: Manager = ReactiveCocoaMoyaProvider<IdentificationServiceAPI>.DefaultAlamofireManager(), plugins: [PluginType] = [], stubScheduler: DateSchedulerType? = nil) {\n        super.init(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, manager: manager, plugins: plugins, stubScheduler: stubScheduler)\n    }\nWith the only difference of managers token. Our static analysis tools complaining about this a lot, and I believe it is right complain, as it eventually unnecessary code duplication that hard to read and that does not actually adds value.\n. Here is a stack overflow question with a problem explained \u2014\u00a0http://stackoverflow.com/questions/36957858/why-swift-requires-override-of-designated-initializer-of-generic-superclass lets see if someone in community actually can explain this strange generics behavior.\n. @ashfurrow As result of my research I found some combinations of associated types and default values that actually removes requirement to override designated initializer. It seems that major reason for override requirement in Moya can be some default values. While it is definitely some buggy behavior of Swift, I think it is possible to find workaround even in a current state of Swift.\n. @ashfurrow good news, an issue that prevents of removing this huge initializers was recently fixed in master \u2014\u00a0https://bugs.swift.org/browse/SR-416 so this issue prob not bearably will be fixed in Swift 3. \nps I still suggest to reopen it, as it ongoing and reproducible in current maya with Swift 2.2.\n. @ashfurrow I did review ObjectMapper. It is a nice work, but the way how it is integrated into Moya makes me worry. My expectation that Plugins should be integratabtle through plugin system. The fact that it just an extension on some types of results limits an option to vary capabilities depends on the end point. So here is another example to make my idea a little bit more clear. This is the real production scenario that I am experiencing now. We have different endpoints, all of them return status 200 independently of result. One of outcomes actually can be error and it will be explained in the body. It would be nice to have an option to redefine mapping rules for result/error as a Plugin, so the rest of routine of work with Moya will be kept the same.\n. Got it. Thanks. Just want to be sure that I didn't miss a built-in extension point.\n. NetworkLoggerPlugin  does not have correlation capabilities. It seems like logging strategy now \"all or nothing\" while I have a particular need in mind which I believe is common. When error happened I would like to log both response with an error and request that caused it. Does it look like a valid problem?\n. Would it be a natural thing to return back correlation of request & response into Moya result? Why in Miya.swift on line 207 of Alamofire response, NSURLRequest just discarded, while the rest is propagated as result? It is common feature of networking libraries. It was in Alamofire, MKNetworkingKit etc as well as for libraries on other platforms. As I am not really familiar with details of some architecture decisions It would be interesting to understand what was a decision process for removing this feature from Moya.\n. @colinta recreating URL requests is not the same as getting a reference to the one that were sent. There could be various random identifiers attached etc, so the question to trace an exact request sent. Somehow \"hard way\" looks most logical one, which is very unfortunate. Thanks.\n. @ashfurrow as for today we do not have a good solution. The only elegant solution is option 1 suggested by @colinta, but maintaining an own fork of Moya at the current stage of our project is killing. Having correlation logging in the plugin does not work as well since such option missing a context of the call and many other benefits of having request together in response in a place of request initialization. \nRecreating a call when needed does not work, since as I mentioned it missing parameters uniquely generated for the response. \nDo you think re-introducing request & response correlation, that was initially available in AFNetworking would be accepted as PR into Moya? I would be happy to work on it.\n. It seems I can workaround it with Plugin with willSend implementation. It would be hard to actually fix it in Moya, as Alamofire underlaying implementation does expect Dictionary too.\n. Ok, apparently Plugins are not able to modify requests due to following issue https://github.com/Moya/Moya/issues/326 Need to find another workaround. \n. Augmenting of request by overridingurlRequest` property for endpoint is also impossible, since it is defined in extension :(\n. It seem that the best option possible now is defying of requestClosure and intercept NSURLRequest there.\n. Since there is no way to find out Endpoint Target value within RequestClosure, I was forced to match response URLs and define override behavior based on a URL patterns. Looks like a complete hack :(\n. Yes, arrays specified as you described actually are duplicated parameter keys. This is what I was trying to solve. Custom endpoint mapping with a custom encode parameters for the scenario where duplicated parameter keys required helped. Thanks for a guidance. \nMeanwhile the amount of code required to handle the case that is correct use case for APIs is a little bit disappointing. Should I keep this issue closed or open for further discussion how possible to address this case?\n. Yes, it was fine to close. Sorry next time I will close myself. \n. ",
    "davidbarsky": "(I should add \u2014\u00a0a lengthy answer isn\u2019t necessary! just a yes or no would suffice.)\n. Unless I misunderstand, HTTP Basic Auth is implemented by Alamofire as just a chained method after .request. \nHere\u2019s my naive suggestion: pass the username/password to MoyaProvider#sendRequest as an optional parameter of type NSURLCredential, and if it\u2019s not nil, call .authenticate after the Alamofire.Manager.sharedInstance.request(request) call.\nGranted, that makes the method messy, hence my referring to it as \u201cnaive\u201d.\n. Good point, I didn\u2019t think through how my API would break a lot of applications in production. I like your suggestion of the the optional closure in the MoyaProvider initializer.\nWould you like me to open a pull request in the next day or so?\n. \ud83d\udc4d\n. So the API I\u2019m writing against is going to be deprecating their basic auth, and because of that, I don\u2019t need to add that to Moya. Since nobody else seemed to expressed a need for it, I think it's best if the issue is closed.\n. Thanks for your help!\n. ",
    "tp": "Same here. Seems like RxSwift can't support carthage ATM, so there's no easy way to include it manually.\n. ",
    "MarvinNazari": "In my opinion i think its better to separate these extensions to have a its own repository e.g. (Moya, ReactiveMoya, and RxMoya)\n. @ashfurrow It's okey i understand, i really love Moya and Carthage for their simplicity, for now I'm gonna go oldskool and copy-paste the code until there is a better solution\n. Yeah!! this is awesome!\n. Looks good! solves my problem \ud83d\udc4d\n. I think this is actually a issue with Cocoapods check it\ngithub \"ReactiveCocoa/ReactiveCocoa\" ~> 4.0\ngithub \"TransitApp/SVProgressHUD\" ~> 1.1\ngithub \"Moya/Moya\" ~> 2.2.2\ngithub \"robb/Cartography\" ~> 0.6\ngithub \"kishikawakatsumi/KeychainAccess\" \"swift-2.0\"\ngithub \"Hearst-DD/ObjectMapper\"\ngithub \"Alamofire/Alamofire\" ~> 2.0\ngithub \"tristanhimmelman/AlamofireObjectMapper\" ~> 0.8\ngithub \"onevcat/Kingfisher\" ~> 1.5\n. Not sure if its CocoaPods issue, but it didn't work when i removed Alamofire  and  ReactiveCocoa from Cartfile either\n. @justinmakaila I have the copy-frameworks script and all the library works except Moya, i removed the Alamofire from Cartfile too, but no luck.\n. github \"ReactiveCocoa/ReactiveCocoa\" ~> 4.0\ngithub \"TransitApp/SVProgressHUD\" ~> 1.1\ngithub \"robb/Cartography\" ~> 0.6\ngithub \"Moya/Moya\" ~> 2.2.2\ngithub \"kishikawakatsumi/KeychainAccess\" \"swift-2.0\"\ngithub \"Hearst-DD/ObjectMapper\"\ngithub \"tristanhimmelman/AlamofireObjectMapper\" ~> 0.8\ngithub \"onevcat/Kingfisher\" ~> 1.5\ngithub \"MarvinNazari/ICSPullToRefresh.Swift\" \"master\"\ngithub \"raulriera/TextFieldEffects\" ~> 0.4.2\n. Yes.\n. Xcode 7 is coming very soon so just wait for that (https://developer.apple.com/xcode/download/)\n. it builds fine! when u run the app it crashes!\nI just copied the files directly in the project for time being and it runs as it should\n. Thanks! Yeah i use ReactiveCocoa would be great if u could provide more details on that :) \n. Ah Amazing! thanks. :heart: \n. ",
    "kzaher": "Hi guys,\nsorry for being unable to currently support Carthage in RxSwift, but I'm waiting for some issues to be resolved on their end.\nhttps://github.com/Carthage/Carthage/issues/395\n. I've temporary made a workaround that enables Carthage to compile RXS/RXC.\nIt's one huge hack, but it looks like it could work until Carthage gets support for multiple repositories.\nI've made separate branches for Carthage releases.\nlatest-carthage/rxswift\nlatest-carthage/rxcocoa\nThe both contain one last commit that contains something like\nln -s RxSwift/RxSwift.xcodeproj _.xcodeproj\nln -s RxCocoa/RxCocoa.xcodeproj _.xcodeproj\nThis helps Carthage automagic target finder to locate targets for RxSwift and RxCocoa correctly and build them.\nIt looks like you can't have Carthage fetching both in parallel :( so you'll need to only uncomment one of them at a time.\nComment one, carhage update, then comment other carthage update.\n```\ngit \"git@github.com:kzaher/RxSwift.git\" \"latest-carthage/rxswift\"\ngit \"git@github.com:kzaher/RxSwift.git\" \"latest-carthage/rxcocoa\"\n```\n:(\n. Yeah, you could do that. I would suggest that default behavior should be false :)\nIt would also be cool if you could do something like \ninternalRequest(token)\n    >- cacheInFlightRequests\ncacheInFlightRequests should probably be internal method so you could write the code like\nfunc request(token: T) -> Observable<MoyaResponse>\n    if shouldCheckInflightRequests(target) {\n        return internalRequest(token)\n    }\n   else {\n        return internalRequest(token)\n                   >- cacheInFlightRequests\n    }\n}\nIt would maybe also make sense to add functionality that would enable you to get typed object for endpoint instead of MoyaResponse (Observable).\n. That's probably a reasonable tradeoff. If somebody has command GET and HEAD requests he probably has bigger problems on his hands anyway :)\n. :)\n. ~> 2.0 :+1:\n. ",
    "gfontenot": "Carthage will happily download any submodule in a repo. So yeah, you could have Moya/Moya as a subspec for Moya/RAC and Moya/RxSwift, where those both build the RAC and RxSwift versions of the frameworks. The best part here would be that all 3 could output Moya.framework, which would be much nicer than needing to do import MoyaRxSwift all over the place.\nI actually think this is a pretty rad solution to this problem. The only downside would be added overhead with updating the reactive versions, and (presumably) keeping the tags in sync. But I'd be willing to bet there's a fancy way to automate that using computers.\n. It'd depend on how you constructed the repos. If you make Moya.framework a dependency of the reactive version then no, you wouldn't be able to name it like I suggested. But if you use submodules (as hinted at by Ash) to pull in just the source of Moya for the reactive version, then you could name it whatever you want, including Moya.framework.\nObviously, this is a more complicated solution. But CocoaPods could take advantage of this same architecture by using subspecs with different sources that have submodules enabled. It'd also provide a way to split up READMEs and documentation for each of the reactive versions, which might be nice.\nFwiw, I'd be happy to help out in figuring out how to put this together. Seems like it'd be a fun experiment.\n. I don't know why it would. Carthage just spits out built frameworks, it doesn't care too much about how the project itself is constructed, so long as it builds cleanly.\n. fwiw, pulling this down and running carthage build --no-skip-current results in a failure (with Xcode 7):\n```\n\u276f carthage build --no-skip-current\n xcodebuild output can be found in /var/folders/ym/cjv2ctc130v3slskyn7zw_2r0000gn/T/carthage-xcodebuild.Kbexbi.log\n Building scheme \"RxMoya\" in Demo.xcworkspace\n BUILD FAILED \nThe following build commands failed:\n        CompileSwift normal x86_64 /Users/gordon/Code/Moya/Moya/Moya/RxSwift/Moya+RxSwift.swift\n        CompileSwift normal x86_64 /Users/gordon/Code/Moya/Moya/Moya/ReactiveCore/MoyaResponse.swift\n        CompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler\n(3 failures)\n/Users/gordon/Code/Moya/Moya/Moya/RxSwift/Moya+RxSwift.swift:2:8: error: no such module 'Moya'\n/Users/gordon/Code/Moya/Moya/Moya/RxSwift/Moya+RxSwift.swift:2:8: error: no such module 'Moya'\nA shell task failed with exit code 65:\n BUILD FAILED \nThe following build commands failed:\n        CompileSwift normal x86_64 /Users/gordon/Code/Moya/Moya/Moya/RxSwift/Moya+RxSwift.swift\n        CompileSwift normal x86_64 /Users/gordon/Code/Moya/Moya/Moya/ReactiveCore/MoyaResponse.swift\n        CompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler\n(3 failures)\n```\n. ",
    "XBeg9": "For example I am not using Moya for now, because I want to use https://github.com/tristanhimmelman/AlamofireObjectMapper\n. @ashfurrow hi Ash, glad to see you here :) Just checked https://github.com/tristanhimmelman/AlamofireObjectMapper/blob/master/AlamofireObjectMapper/AlmofireObjectMapper.swift and they use extension Request. How I can get similar with MoyaProvider? \n. @ashfurrow Thanks, already found solution. Inspired by Kiosk app :)\n``` swift\npublic class Provider: MoyaProvider {\noverride public init(endpointsClosure: MoyaEndpointsClosure = MoyaProvider.DefaultEndpointMapping(), endpointResolver: MoyaEndpointResolution = MoyaProvider.DefaultEnpointResolution(), stubResponses: Bool = false, stubBehavior: MoyaStubbedBehavior = MoyaProvider.DefaultStubBehavior, networkActivityClosure: Moya.NetworkActivityClosure? = nil) {\n    super.init(endpointsClosure: endpointsClosure, endpointResolver: endpointResolver, stubResponses: stubResponses, stubBehavior: stubBehavior, networkActivityClosure: networkActivityClosure)\n}\n\npublic func mappingRequest(token: T) -> Request {\n    let endpoint = self.endpoint(token)\n    let request = endpointResolver(endpoint: endpoint)\n\n    return sendRequest(request)\n}\n\n}\nprivate extension Provider {\n    func sendRequest(request: NSURLRequest) -> Request {\n        return Alamofire.Manager.sharedInstance.request(request)\n    }\n}\n```\nAnd then somewhere in the code:\nswift\nAPIProvider.mappingRequest(.Login(username: \"test\", password: \"test123\")).responseObject { (user: User?, error: NSError?) -> Void in\n            println(user?.username)\n}\n. ",
    "ejensen": "It appears the ReactiveCocoa/Core subspec is broken when using frameworks. It's missing a header referenced in the bridging header.\n. ",
    "esttorhe": "I think I accidentally left my current take of ReactiveCocoa.podspec in there (I'm migrating the JSON file to a proper podspec but is less than WIP ATM)\n)\n. @garethknowles I rebased your branch into mine and updated the code in this PR to keep it under unified. \nThe demo currently compiles and runs (although I didn't check the code if RxSwift was being used anywhere).\nSadly the tests won't run because of the ReactiveCocoa issue; I'll try to leave them out in the meantime to have a passing build\n. That's not my username but I think its because of me; give me a sec\n. @alcarvalho I pushed a change to the Podfile pointing Alamofire to its github path and to the swift-2.0 branch instead of a relative path.\n. What tests specifically?\nIf you open the Demo project on this branch and hit Command + U the test won't work because there are a bunch of ReactiveCocoa tests there and ReactiveCocoa imports and that part is not yet migrated to Swift 2.0.\nI'm currently working on having a podspec that works with their swift2 branch but I'm getting a CocoaPods crash locally that I'm trying to fix first.\n. Sadly (or for our own safety) we can't point podspec dependencies to specific branches and that's why I left all dependencies on this PR without version specific tags.\nIf you take a look at the Demo Podfile you'll see it like this:\n``` ruby\nplatform :ios, '8.0'\nsource 'https://github.com/CocoaPods/Specs.git'\nuse_frameworks!\npod 'ReactiveCocoa', :git => \"https://github.com/reactivecocoa/reactivecocoa.git\", :branch => \"swift2\"\npod 'RxSwift', :git => \"https://github.com/kzaher/RxSwift.git\", :branch => \"feature/swift2.0\"\npod 'Alamofire', :git => \"https://github.com/Alamofire/Alamofire\", :branch => \"swift-2.0\"\npod 'Moya/RxSwift', :path => \"../\"\npod 'Moya/ReactiveCocoa', :path => \"../\"\npod 'Moya', :path => \"../\"\ntarget 'DemoTests' do\npod 'Quick', :git => 'https://github.com/Quick/Quick', :branch => 'swift-2.0'\n  pod 'Nimble', :git => 'https://github.com/Quick/Nimble', :branch => 'swift-2.0'\n  pod 'OHHTTPStubs'\nend\n```\nThat's in order to satisfy the Swift 2.0 requirements that can't be specified on the podspec.\nAs for ReactiveCocoa haven't had the time to tinker with the custom made podspec to point to a Swift 2.0 branch and thus, the status on that front is still the same :snowflake: \n. FYI started this late last night with my eye sight barely functioning and couldn't get too far due to my :eyes: being too tired.\nToday is a brand new day :city_sunset: and I'll hope to have this done by EOD today\n. The rebase is done; I'm going to close this issue BUUUUUUUUT\nI can't compile on \u00df5; getting the following\nconsole\nModule file was created by an older version of the compiler; rebuild 'Security' and try again: /Applications/Xcode-7.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphonesimulator/x86_64/Security.swiftmodule\n. Or maybe I won't because I'll need to rename the branch or something else in order for Github to let me open a new PR (can't from the same branch)\n. ## I did it!!\n\n. Hi, I rebased this branch into my PR and fixed the defer issue.\n\nEsteban Torres\n(+506)8813-0934\nTwitter: @esttorhe\nOn Sat, Jul 11, 2015 at 8:07 AM -0700, \"Ash Furrow\" notifications@github.com wrote:\nHey, thanks so much! This is a great step forward. @esttorhe has done some work in #162 \u2013 maybe you two could work together?\nUntil RxSwift renames defer, if it does, you just need to surround it in backticks like defer.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome sauce! :tada: \n:clap: \n. Perhaps leave the introduction paragraph and then a section of\nCurrent state of apps\n\n\nHow Moya solves this\n\n\n. Honestly I like that the image uses Moya colors to keep it in sync and consistent with the rest of the README; looks \u00abprettier\u00bb IMHO\n. Honestly I like that the image uses Moya colors to keep it in sync and consistent with the rest of the README; looks \u00abprettier\u00bb IMHO\n. hahahahaha; it makes me think of infomercials when people are terribly using a normal product product.\nPut a filter to make it look \u00abold and archaic\u00bb? \u00af_(\u30c4)_/\u00af\n. hahahahaha; it makes me think of infomercials when people are terribly using a normal product product.\nPut a filter to make it look \u00abold and archaic\u00bb? \u00af_(\u30c4)_/\u00af\n. Perhaps the \u00abbiggest\u00bb issue is that the image is the first in the README and as you pointed out could be potentially confusing.\nWhat about putting them both side by side with current / Moya as a footnote to the images?\nPS. I think the label could work as well but I'm throwing ideas just in case\n. Perhaps the \u00abbiggest\u00bb issue is that the image is the first in the README and as you pointed out could be potentially confusing.\nWhat about putting them both side by side with current / Moya as a footnote to the images?\nPS. I think the label could work as well but I'm throwing ideas just in case\n. :shipit: \n. :shipit: \n. Not a contributor/maintainer but it looks good :ok_hand: \n. Not a contributor/maintainer but it looks good :ok_hand: \n. Ha! :bow: \nMuch appreciated\n. Ha! :bow: \nMuch appreciated\n. i thought I clicked the button but apparently I did not \u00af_(\u30c4)_/\u00af\nFixed that though \n. i thought I clicked the button but apparently I did not \u00af_(\u30c4)_/\u00af\nFixed that though \n. If its failing on the lint make sure your xcode-select is pointing to NOT Xcode7\u00a0\nSomething like that was happening to me yesterday\n\nEsteban Torres\n(+506)8813-0934\nTwitter: @esttorhe\nOn Thu, Aug 6, 2015 at 6:48 AM -0700, \"Ash Furrow\" notifications@github.com wrote:\nHaving trouble getting pod trunk push to work, hold tight. \n\u2014\nReply to this email directly or view it on GitHub.\n. I need to change that on my terminal as well now that you mention it.\u00a0\n\nEsteban Torres\n(+506)8813-0934\nTwitter: @esttorhe\nOn Thu, Aug 6, 2015 at 6:51 AM -0700, \"Ash Furrow\" notifications@github.com wrote:\nGood idea, @esttorhe. Checked and it's 6, which sucks since I am getting a linker error. \nSet iTerm to \"unlimited scrollback\" to actually see the failure message. (Why is that not the default??)\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks\n. Umm. Apparently cant merge from my phone due to the failed tests.\nWill check from computer later\n. :+1:  good tip Ash; I'll do that next time\n. Worth noting that this branch is currently not compiling on my computer with the following message:\nconsole\nModule file was created by an older version of the compiler; rebuild 'Security' and try again: /Applications/Xcode-7.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphonesimulator/x86_64/Security.swiftmodule\n\n. After uninstalling and re installing Xcode 7 \u00df5 the project is compiling with Swift 2.0 now :sunglasses: \n. Will do; just need to finish the ReactiveCocoa podspec and in theory that will make it compile 100%; next step would be to \u00abtranslate\u00bb to Swift 2.0 and take advantage of stuff like guard and/or throws, etc\n. @Moya/contributors given the new repo organization would it make more sense to close this PR (again) and start 3 different ones; 1 Swift 2.0 for the core, and 2 for each Reactive extension repo? (maybe 3 because there's a shared reactive core) ?\n. @Moya/contributors I'm almost done with this BUUUUT\nAfter creating a podspec for ReactiveCocoa https://github.com/esttorhe/ReactiveCocoa/blob/swift2/ReactiveCocoa.podspec and correctly configuring it i'm facing one last issue.\nWhen building ReactiveCocoa scheme on Demo.xcworkspace everything works as expected; but if I try to build Pods or Moya I'm getting this error:\nconsole\n/Users/<username>/Library/Developer/Xcode/DerivedData/Demo-dwrrownhydordrffokwamvlwfmga/Build/Products/Debug-iphonesimulator/ReactiveCocoa.framework/Headers/ReactiveCocoa-Swift.h:94:9: 'ReactiveCocoa/ReactiveCocoa.h' file not found\nAnd here's the generated file:\n``` objectivec\n// Generated by Apple Swift version 2.0 (swiftlang-700.0.52.2 clang-700.0.65)\npragma clang diagnostic push\nif defined(__has_include) && __has_include()\ninclude \nendif\npragma clang diagnostic ignored \"-Wauto-import\"\ninclude \ninclude \ninclude \ninclude \nif defined(__has_include) && __has_include()\ninclude \nelif !defined(__cplusplus) || __cplusplus < 201103L\ntypedef uint_least16_t char16_t;\ntypedef uint_least32_t char32_t;\nendif\ntypedef struct _NSZone NSZone;\nif !defined(SWIFT_PASTE)\ndefine SWIFT_PASTE_HELPER(x, y) x##y\ndefine SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)\nendif\nif !defined(SWIFT_METATYPE)\ndefine SWIFT_METATYPE(X) Class\nendif\nif defined(__has_attribute) && __has_attribute(objc_runtime_name)\ndefine SWIFT_RUNTIME_NAME(X) attribute((objc_runtime_name(X)))\nelse\ndefine SWIFT_RUNTIME_NAME(X)\nendif\nif defined(__has_attribute) && __has_attribute(swift_name)\ndefine SWIFT_COMPILE_NAME(X) attribute((swift_name(X)))\nelse\ndefine SWIFT_COMPILE_NAME(X)\nendif\nif !defined(SWIFT_CLASS_EXTRA)\ndefine SWIFT_CLASS_EXTRA\nendif\nif !defined(SWIFT_PROTOCOL_EXTRA)\ndefine SWIFT_PROTOCOL_EXTRA\nendif\nif !defined(SWIFT_ENUM_EXTRA)\ndefine SWIFT_ENUM_EXTRA\nendif\nif !defined(SWIFT_CLASS)\nif defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)\ndefine SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) attribute((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA\ndefine SWIFT_CLASS_NAMED(SWIFT_NAME) attribute((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA\nelse\ndefine SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA\ndefine SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA\nendif\nendif\nif !defined(SWIFT_PROTOCOL)\ndefine SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA\ndefine SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA\nendif\nif !defined(SWIFT_EXTENSION)\ndefine SWIFT_EXTENSION(M) SWIFT_PASTE(M##Swift, LINE)\nendif\nif !defined(OBJC_DESIGNATED_INITIALIZER)\nif defined(__has_attribute) && __has_attribute(objc_designated_initializer)\ndefine OBJC_DESIGNATED_INITIALIZER attribute((objc_designated_initializer))\nelse\ndefine OBJC_DESIGNATED_INITIALIZER\nendif\nendif\nif !defined(SWIFT_ENUM)\ndefine SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type\nendif\ntypedef float swift_float2  attribute((ext_vector_type(2)));\ntypedef float swift_float3  attribute((ext_vector_type(3)));\ntypedef float swift_float4  attribute((ext_vector_type(4)));\ntypedef double swift_double2  attribute((ext_vector_type(2)));\ntypedef double swift_double3  attribute((ext_vector_type(3)));\ntypedef double swift_double4  attribute((ext_vector_type(4)));\ntypedef int swift_int2  attribute((ext_vector_type(2)));\ntypedef int swift_int3  attribute((ext_vector_type(3)));\ntypedef int swift_int4  attribute((ext_vector_type(4)));\nif defined(__has_feature) && __has_feature(modules)\n@import ObjectiveC;\n@import Foundation;\n@import Foundation.NSURLSession;\nendif\nimport \npragma clang diagnostic ignored \"-Wproperty-attribute-mismatch\"\npragma clang diagnostic ignored \"-Wduplicate-method-arg\"\n/// Wraps an Action for use by a GUI control (such as NSControl or UIControl), with KVO, or with Cocoa Bindings.\nSWIFT_CLASS(\"_TtC13ReactiveCocoa11CocoaAction\")\n@interface CocoaAction : NSObject\n/// The selector that a caller should invoke upon a CocoaAction in order to execute it.\n+ (SEL __null_unspecified)selector;\n/// Whether the action is enabled.\n///\n/// This property will only change on the main thread, and will generate a\n/// KVO notification for every change.\n@property (nonatomic, readonly) BOOL enabled;\n/// Whether the action is executing.\n///\n/// This property will only change on the main thread, and will generate a\n/// KVO notification for every change.\n@property (nonatomic, readonly) BOOL executing;\n/// Attempts to execute the underlying action with the given input, subject to the behavior described by the initializer that was used.\n- (IBAction)execute:(id __nullable)input;\n+ (BOOL)automaticallyNotifiesObserversForKey:(NSString * __nonnull)key;\n@end\n/// Wraps a dynamic property, or one defined in Objective-C, using Key-Value Coding and Key-Value Observing.\n///\n/// Use this class only as a last resort! MutableProperty\n///  is generally better\n/// unless KVC/KVO is required by the API you're using (for example,\n/// NSOperation\n/// ).\nSWIFT_CLASS(\"_TtC13ReactiveCocoa15DynamicProperty\")\n@interface DynamicProperty : RACDynamicPropertySuperclass\n/// The current value of the property, as read and written using Key-Value Coding.\n@property (nonatomic, getter=rac_value, setter=setRac_value:) id __nullable value;\n/// Initializes a property that will observe and set the given key path of the given object. object must support weak references!\n- (nonnull instancetype)initWithObject:(NSObject * __nullable)object keyPath:(NSString * __nonnull)keyPath OBJC_DESIGNATED_INITIALIZER;\n@end\n@interface NSNotificationCenter (SWIFT_EXTENSION(ReactiveCocoa))\n@end\n@interface NSURLSession (SWIFT_EXTENSION(ReactiveCocoa))\n@end\n@interface RACCommand (SWIFT_EXTENSION(ReactiveCocoa))\n@end\n@interface RACDisposable (SWIFT_EXTENSION(ReactiveCocoa))\n@end\n@class NSDate;\n@interface RACScheduler (SWIFT_EXTENSION(ReactiveCocoa))\n@property (nonatomic, readonly) NSDate * __nonnull currentDate;\n@end\n@interface RACSignal (SWIFT_EXTENSION(ReactiveCocoa))\n@end\npragma clang diagnostic pop\n```\nThe faulting line being 94:\n``` objectivec\nimport \n```\nAny ideas why it works when building it separately works but not when trying to build Pods or Moya ?\n. @ashfurrow I forked ReactiveCocoa and then added the .podspec to the swift2 branch.\nEven created a custom tag just to test it but sadly I can't make it work inside the Pods project.\nIf you can update the podspec I would give it a try with your version\n. Wouldn't that fail if I try to use that podspec but pointing to swift2 branch?\n. But doing that wouldn't produce a framework as well?\nWhich are not available to be used on 7 iirc?\n\nEsteban Torres\n(+506)8813-0934\nTwitter: @esttorhe\nOn Wed, Aug 19, 2015 at 6:13 AM -0700, \"Justin Makaila\" notifications@github.com wrote:\nAdd the .xcodeproj to your project, and then link the Moya.framework output against your project.\nLet me know if you have any issues or need more clarification. \n\u2014\nReply to this email directly or view it on GitHub.\n. Sadly ReactiveCocoa dropped support for CocoaPods some versions ago.\nThis means that the podspec is not maintained by them and there's currently no Swift 2.0 podspec.\nI forked ReactiveCocoa and added a podspec to their 2.0 branch but I'm having some issues when trying to compile the pod.\nTL;DR\nI need to figure out a correct podspec for Swift 2.0 :smile: \n. I think is up to date but if I try to point the pod to the Swift 2.0 branch it fails telling me there's no pod at that location or something along those lines (can't remember the exact error right now).\n. console\nFetching podspec for `Moya` from `../`\n[!] Unknown external source parameters for `ReactiveCocoa`: `{:branch=>\"swift2\"}`\n. Let me check because I just changed something and I might be writing the Podfile wrong\n. Ok; here's the Podfile:\n``` ruby\nplatform :ios, '8.0'\nsource 'https://github.com/CocoaPods/Specs.git'\nuse_frameworks!\npod 'ReactiveCocoa', :git => 'https://github.com/ReactiveCocoa/ReactiveCocoa', :branch => \"swift2\"\npod 'RxSwift', :git => 'https://github.com/ReactiveX/RxSwift', :branch => 'rxswift-2.0'\npod 'Alamofire', :git => \"https://github.com/Alamofire/Alamofire\", :branch => \"swift-2.0\"\npod 'Moya/RxSwift', :path => \"../\"\npod 'Moya/ReactiveCocoa', :path => \"../\"\npod 'Moya', :path => \"../\"\ntarget 'DemoTests' do\npod 'Quick', :git => 'https://github.com/Quick/Quick', :branch => 'swift-2.0'\n  pod 'Nimble', :git => 'https://github.com/Quick/Nimble', :branch => 'swift-2.0'\n  pod 'OHHTTPStubs'\nend\n```\nAnd here's the error:\nconsole\nPre-downloading: `ReactiveCocoa` from `https://github.com/ReactiveCocoa/ReactiveCocoa`, branch `swift2`\n[!] Unable to find a specification for 'ReactiveCocoa'.\n. Tried pointing to your fork just in case; this is what I'm getting:\n`` console\nPre-downloading:ReactiveCocoafromhttps://github.com/ashfurrow/ReactiveCocoa, branchswift2`\n[!] Error installing ReactiveCocoa\n[!] /usr/local/bin/git clone https://github.com/ashfurrow/ReactiveCocoa /var/folders/xk/378q_x1x4b3289cbr_kjyhzr0000gn/T/d20150821-25846-1w2akmk --single-branch --depth 1 --branch swift2\nCloning into '/var/folders/xk/378q_x1x4b3289cbr_kjyhzr0000gn/T/d20150821-25846-1w2akmk'...\nwarning: Could not find remote branch swift2 to clone.\nfatal: Remote branch swift2 not found in upstream origin\n```\n. I'm using this: https://github.com/esttorhe/ReactiveCocoa/blob/swift2/ReactiveCocoa.podspec\nI'll take a look at the one you provided and see what differs from mine\n. \n. I've never used Gitter before TBH.\nWould give it a try as long as someone could point me to the benefits of having a Gitter room vs only the issues here.\nI think @colinta and @ashfurrow already made some valid points of pros for the issues in Github but I still don't know what are the benefits of the other option.\n. I think the \u00abvast\u00bb majority is against Gitter.\nI agree that the fragmentation would be an issue.\nHow does Gitter work in regards of; I don't know. Google indexing? Would I get hits in Google pointing to Gitter? how long does the discussions in Gitter are stored? or are they discarded after X amount of bytes?\nI think having an outlet for users to help themselves would be great; but ~~if~~ as long as there's not a way to preserve and index said discussions they would go to \u00abwaste\u00bb\n. Any special reason to move away from CircleCI and back to TravisCI ?\n. Makes sense :ok_hand: \nThanks :bow: \n. Wow :scream: \nGreat idea and implementation @aschuch :bow: :ok_hand: \n. I think you can specify the specific branch of RxSwift on your Podfile with tvOS support and CocoaPods should be able to use the branch specified in the Podfile (as long as that doesn't break current implementation of Moya)\n. \u00af_(\u30c4)_/\u00af  sorry; i thought you were trying to use a \u00abcustom made\u00bb .podspec.\nIt shouldn't take too much to support tvOS. I'll try to get to it today.\n. @ashfurrow I just updated the .podspec to use 2.0.0-alpha.4 which is the one with tvOS support.\nAlso added all supported \u00abdevices\u00bb like so:\nruby\ns.ios.deployment_target = '8.0'\ns.osx.deployment_target = '10.9'\ns.watchos.deployment_target = '2.0'\ns.tvos.deployment_target = '9.0'\nI can upload the .podspec but I can't push to trunk (I don't have push rights and the pod spec lint fails due to the dependency issue with Alamofire.\n`` ruby\nResolving dependencies of\n -> Moya (3.0.0)\n    - ERROR | [tvOS] unknown: Encountered an unknown error (The platform of the targetPods(tvOS 9.0) is not compatible withAlamofire (2.0.2), which does not supporttvos`.) during validation.\nAnalyzed 1 podspec.\n[!] The spec did not pass validation, due to 1 error.\n```\nWe could have it living on a tvOS branch (the .podspec) while Alamofire merges that branch to master or makes an official release supporting it and people could use Moya for tvOS from our support branch.\n. Branch tvOS should address this.\nPlease @gregpardo test it and let me know if something is not working.\nPS. I also modified the Podfile to use this branch\n. Yeah; try to specify the Podfile like the Demo project in that branch => https://github.com/Moya/Moya/blob/tvOS/Demo/Podfile\nChances are you are missing this from the Podfile:\n``` ruby\nFix for Alamofire with tvOS support\npod 'Alamofire', :git => \"https://github.com/Alamofire/Alamofire\", :branch => \"tvOS\"\n```\n\nBear in mind this is temporarily until Alamofire moves tvOS support to the master/official branch/release\n. Added 2 labels to it.\nI think leaving it open would be better so we can keep it in mind.\nI'll :lock: the issue though since it doesn't make sense to keep it open.\nIf any @Moya/contributors has other idea as to how to handle this I'm open to ideas.\nThanks for confirming the fix @gregpardo :bow: \n. Just noticed that when we merge tvOS with master we'll be able to close #192 as well since the .podspec on that branch already handles OSX, watchOS and tvOS :tada: \n. :scream: beat me to it Ash :smile: \n. I agree with @gregpardo on this.\nLike Orta stated already Moya grew to a \u00abtoo complex\u00bb scenario where there's no \u00abworks for all\u00bb solution; I think supporting Carthage via the underlying Pods project works for most of the cases and having a more \u00abdetailed\u00bb installation instruction for Carthage on the README would satisfy those scenarios not covered by the Pods project.\n. This looks OK to me; not too \u00absavy\u00bb on Carthage; but not providing the last part of the semver will still work and will pick up minor releases?\n. Thanks @aschuch.\nI think it won't hurt to merge this change.\nThanks\n. :100: \n. Looks good to me; does this provide some kind of badge with the coverage to put on the README perhaps?\n. I like this and don't think this will introduce any breaking changes so I'm merging it. :+1: \n. :100: :ship: it\n. If i'm not mistaken that was an error from \uf8ff that should be fixed by now.\n. :ok_hand: \n. oooops\nsorry; just saw that you assigned Orta :/\n. \nShould I revert?\n. interesting; github did not notify me of this\naaaaanyways; If you need more hands i'm down to help with this as well\n. Not from my end; seems pretty straight forward \n. > /Users/travis/build/Moya/Moya/Demo/Pods/Nimble/Nimble/Adapters/NimbleXCTestHandler.swift:9:64: cannot convert value of type 'String' to expected argument type 'StaticString'\nHaven't checked the .travis.yml but are we building against/using Swift 2.2?\nOr the Podfile points to Nimble with Swift 2.2 ?\n. ahhh; thanks @ashfurrow \nsorry for maybe bringing old stuff up; have been kind of away from the project due to a massive amount of work and trying to catch up on stuff\n:grimacing: \n. @jimmy0251 the parameters var is the dictionary containing ALL parameters and their values.\nIn this case if you want to send an array as parameter; e.g. [String] or something along those lines you would need to pass it like this:\nswift\nvar parameters: [String: AnyObject]? {\n  switch self {\n    case .ArrayParameter: return [ \"parameterName\": arrayObject ]\n  }\n}\nThat means that the parameter called parameterName will contain the arrayObject.\nLet me know if that helps and if not we can dig it up until you got it up and running\n. @ashfurrow yeah I was working under the assumption that perhaps Jimmy wanted to send an array as a parameter.\nIf what he wants is send a JSON array then yeah I guess .Custom would be needed.\nMaybe let's wait until he can clarify if he meant the array parameter or the parameters as an array \ud83d\ude04 \n. Same here but maybe there's a really good and valid scenario for something like that (although I haven't found one just yet).\n. This looks AMAZING\n. @AndrewSB would you mind adding an entry to the Changelog ? \ud83d\ude04 \n. Looks good and test are passing \u2705 \n. I'll need some time to get used to the \ud83e\udd16Ash from posting as soon as I hit the merge button \ud83d\ude1b \n. I totally understand going with single-colour but oh boy; i'm going to miss the colors \ud83d\ude09 \n. Hi @ashfurrow do you reckon I still have time to update my address?\nThe current address is SoundCloud but attention to \u00abPedro Pi\u00f1era\u00bb because I didn't know if I was going to be in \ud83c\udde9\ud83c\uddea by the time the stickers would arrive.\nIf its too much hassle I won't update, was just wondering\n. Thanks @ashfurrow.\nI'm in Berlin now actually. I just didn't want to bother Pedro now that I can actually get it myself \ud83d\ude0a\nBut like I said. No biggie\n\u2013\nEsteban Torres\nCraftKollective (http://craftkollective.com) Co-Founder\nPhone: (+506)8813-0934 (tel:(+506)8813-0934)\nSkype: esteban.a.torres.hernandez\nTwitter: @esttorhe (https://twitter.com/esttorhe)\nOn 12 Oct 2016, 23:20 +0200, Ash Furrow notifications@github.com, wrote:\n\n@esttorhe (https://github.com/esttorhe) Aye, I've addressed it to Berlin, but if you're not there anymore I can change it.\nIf anyone else has address updates, please send the updated address to ash@ashfurrow.com (mailto:ash@ashfurrow.com) . Thanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (https://github.com/Moya/Moya/issues/559#issuecomment-253342931), or mute the thread (https://github.com/notifications/unsubscribe-auth/AChTonfydJwuZiujIkPUgC3n9kdDmSz_ks5qzU8pgaJpZM4JTZGx).\n. \n",
    "garethknowles": "https://github.com/ashfurrow/Moya/pull/167\nI have looked at getting Moya (specifically for RxSwift) working with swift 2.0 using the newly released Xcode 7.3 beta and by totally ignoring ReactiveCocoa, I think I've managed to get it somewhat working.\nIt seems to be working well in my own project but I haven't got the Demo project and its tests working. I also had problems with ReactiveCocoa due to Carthage setup which I'm not very familiar with.\nThe main concern for me is the return defer in Moya+RxSwift.swift due to the changes which won't allow defer's to return.  I don't really see the need for a defer so have simply replaced with a return closure.\nNonetheless, hopefully this might help with the migration over to 2.0\n. ",
    "vCrespoP": "First of all, thanks to all contributors and of course the author :D\nAny news with Swift 2.0? I still see in the fork that Alamofire is not pointing to the right version thus not compiling with xCode 7 beta 4. \nIn order to set Alamofire correctly, this is an extract of my podfile:\npod 'Alamofire',\n    :git => 'https://github.com/Alamofire/Alamofire.git',\n    :branch => 'swift-2.0'\nI know they may remove that branch, but for now maybe is convenient to point there in sift 2.0 branch?\nThanks for your effort!\n. Thanks for your feedback guys, I will do that in the meantime.\nI find this framework really interesting and meets my philosophy quite well, so keep up the good work and let's spread it :D\nCheers.\n. ",
    "rynbyjn": "Looks legit to me, would be sweet to get SSL Pinning in!\n. ",
    "argentounce": "Can you help me setup a Provider with RxSwift? How a simple RxMoyaProvider should look? How the closure should look?\nIt would be good that the demo includes examples for both RAC and RX. \nCurrently I got my way with the Artsy implementation but im having problems declaring the provider. I know there is a branch about Rx Docs, but this probably be some kinda Faqsy. \n. Can you help me setup a Provider with RxSwift? How a simple RxMoyaProvider should look? How the closure should look?\nIt would be good that the demo includes examples for both RAC and RX. \nCurrently I got my way with the Artsy implementation but im having problems declaring the provider. I know there is a branch about Rx Docs, but this probably be some kinda Faqsy. \n. @ashfurrow Thanks! working now :yum: \n. @ashfurrow Thanks! working now :yum: \n. ",
    "jk": "Woha. That's a great troubleshooting experience. A lot like following a sports live ticker :)\n. @ashfurrow it does work now. Thanks.\n```\npod try Moya\nUpdating spec repositories\nTrying Moya\nPerforming CocoaPods Installation\nFetching podspec for Moya from ../\nUsing Alamofire (1.3.0)\nUsing Box (1.2.2)\nUsing Moya (2.0.1)\nUsing Nimble (0.4.2)\nUsing OHHTTPStubs (4.0.2)\nUsing Quick (0.3.1)\nUsing ReactiveCocoa (3.0-beta.6)\nUsing Result (0.4.4)\nUsing RxSwift (1.9)\nSending stats\nOpening '/private/var/folders/pc/plkw89_s63lb5cj277y8_f580000gn/T/CocoaPods/Try/Moya/Demo/Demo.xcworkspace'\n```\nAnd by the way, you don't want to set iTerm to \u00bbunlimited scrollback\u00ab it will get slow after a certain threshold. I'm very comfortable with it set to 5.000.\n. Found the solution by myself. I had a hard time with the docs.\nI had to replace the following line\nswift\nlet MyAPI: MoyaProvider<MyAPI> = MoyaProvider<MyAPI>()\nwhere I used the default initializer, with the following:\n``` swift\nlet MyAPI: MoyaProvider = MoyaProvider(endpointClosure: {\n    (target: MyAPI) -> Endpoint in\nreturn Endpoint(URL: url(target), sampleResponse: .Success(200, {target.sampleData}), method: target.method, parameters: target.parameters, parameterEncoding: target.parameterEncoding)\n\n})\n```\nwhere I set the endpointClosure. Within the the closure I defined my Endpoint with my own parameterEncoding: (parameterEncoding: target.parameterEncoding).\nHopefully this issue helps future like-me's :)\n. @ashfurrow I'm already thinking about it, but it needs some more thoughts. In general I would shoot for more complete examples. Newcomers as I am one, lack guidance. For example it wasn't quite clear at first for me if I have to implement my own Provider. Turns out it was sufficient to use the default one with a closure as an initialization parameter.\n. ",
    "regexident": "\"All checks have failed\" makes it sound pretty horrible.\nLike I BROKE ALL THE THINGS with just plain english. :joy:\nNo biggie.\nFound a typo and thought \"nah, I can't spam them with a PR for a single cosmetic character change\". \nSo I looked for another one. Found one and thought \"now we're talking!\". :smile:\n. ",
    "callmewhy": "Good idea. Thanks\n. It works for me. \n. @ashfurrow Thanks, it's really awesome!\n. ",
    "alexito4": "Hi here!\nIt's been a while since I don't play with Moya but just to try to help here, the issue seems related to what was discussed in https://github.com/Moya/Moya/issues/102\nHope it helps a little ;)\n. ",
    "thedevme": "Thanks for the response.  I am not finding a solution with that link.  I figured that I will need to split the string and pass a base url and the path but I cant seem to figure out how to dynamically set the base url if thats even possible.  My major problem is that the base urls that I have are not always the same.\n. I actually figured out a way to do it in a simplified way using enums thanks for your help @alexito4 \n. ",
    "chrisfarrell": "@thedevme can you provide an example of your solution?\n. ",
    "mauricerkelly": "I probably should add a line to the changelog.md given that this changes the API - but I\u2019ll leave it until I get the thumbs up/down.\n. Hey guys, sorry for not coming back sooner. I like the idea of the backwards compatible function, but I want to make sure I have the same understanding as yous. I\u2019m thinking something like this:\n``` swift\npublic class func DefaultEnpointResolution(endpoint: Endpoint) -> NSURLRequest {\n    return DefaultEndpointResolution(endpoint)\n}\npublic class func DefaultEndpointResolution(endpoint: Endpoint) -> NSURLRequest {\n    return endpoint.urlRequest\n}\n```\n. ",
    "mikejd": "@justinmakaila, @esttorhe: In iOS 7 we cannot use dynamic frameworks, so probably there's no way to install Moya, neither ReactiveCocoa (which seemingly dropped iOS 7 support at some point). Please let me know, if I'm wrong.\n. @justinmakaila: It was the first thing that I did. : ) But then you need to add ReactiveCocoa, which is not possible for iOS 7. From their Readme page:\n\nReactiveCocoa supports OS X 10.9+ and iOS 8.0+.\n\nI realized this limitation only after asking the question. Seems that the Moya is an iOS 8+ library as well.\n. ",
    "Neirys": "Hi, sorry for commenting closed issue. I spent last hour troubleshooting an Error Domain=NSURLErrorDomain Code=-1017 \"cannot parse response\".\nDue to non-optional parameter property in MoyaTarget protocol, setting endpoint's parameter encoding to .JSON causes the associated NSURLRequest to have an empty HTTPBody property instead of a nil one. It seems that some server-side technology can have bad time handling such configurations (I'm using Node.js/Express.js as a sandox server).\nMoreover, it's more likely that parameter encoding are request-basis instead of global-basis (usually .URL for .GET methods and .JSON for .POST | PUT methods).\nCould be a good idea to make parameterEncoding part of the MoyaTarget ?\n. @ashfurrow Thanks for your quick reply :) Actually I already had some solutions in mind but I was wondering if some changes on Moya could reduce possibilities of server-side errors like I had today.\nTwo idea in mind : making parameterEncoding as part of MoyaTarget protocol or maybe changing the MoyaTarget's parameters property to an optional.\nBig inconvenience to these solutions : they don't support backward compatibility to previous versions :(\n. Totally makes sense !\n. ",
    "wishsoul": "jk's solution works for me! \ud83d\udc4d \ud83d\udc4d \ud83d\udc4d \n. ",
    "bontoJR": "This is definitely something I would like to see. :)\nAt the moment I am trying to figure out how to have a parameter always passed to every request, in this case is an access_token. It took me some time to understand how to use this library and I had to check the whole source code to master it, I know they are not so much lines, but still... also the RxSwift's version requires some extra documentation b/c it looks like is outdated, I think. :+1: \n. This is definitely something I would like to see. :)\nAt the moment I am trying to figure out how to have a parameter always passed to every request, in this case is an access_token. It took me some time to understand how to use this library and I had to check the whole source code to master it, I know they are not so much lines, but still... also the RxSwift's version requires some extra documentation b/c it looks like is outdated, I think. :+1: \n. @ashfurrow is right. In the Rx world, Moya's behaviour is correct. There's a fundamental misconception on the first assumption that seems to be the root of this discussion and is Scheduler = Thread. In a first instance I got tricked as well, but then re-reading the whole discussion I understood what the original issue was about and I can say that Moya is behaving in a more than reasonable way. \nThe fact that is changing the thread is something natural if considering that Moya is a helper to talk with an api, perform the work in the background and call the callback in the main scheduler to update the UI in most of the times. Changing Moya's behaviour would be more a design decision, rather than a real solution for a bug or the necessity to comply to a guideline. \nI would also like to point to the chapter about Schedulers in introtorx.com:\n\nBeing free-threaded means that you are not restricted to which thread you choose to do your work. For example, you can choose to do your work such as invoking a subscription, observing or producing notifications, on any thread you like.\n\nWe should remember that in the Rx world there's no thread concept, considering its \"threat agnostic\" nature, but we have the scheduler abstraction that is the entity taking care of scheduling the work. \nThe referenced documentation is more for RxSwift itself, rather than for a third party library relying on it. So the discussion about how Moya should behave, has to be done with @ashfurrow, in my opinion it shouldn't be changed, but I am happy to follow the discussion and help if necessary. \n. @ashfurrow is right. In the Rx world, Moya's behaviour is correct. There's a fundamental misconception on the first assumption that seems to be the root of this discussion and is Scheduler = Thread. In a first instance I got tricked as well, but then re-reading the whole discussion I understood what the original issue was about and I can say that Moya is behaving in a more than reasonable way. \nThe fact that is changing the thread is something natural if considering that Moya is a helper to talk with an api, perform the work in the background and call the callback in the main scheduler to update the UI in most of the times. Changing Moya's behaviour would be more a design decision, rather than a real solution for a bug or the necessity to comply to a guideline. \nI would also like to point to the chapter about Schedulers in introtorx.com:\n\nBeing free-threaded means that you are not restricted to which thread you choose to do your work. For example, you can choose to do your work such as invoking a subscription, observing or producing notifications, on any thread you like.\n\nWe should remember that in the Rx world there's no thread concept, considering its \"threat agnostic\" nature, but we have the scheduler abstraction that is the entity taking care of scheduling the work. \nThe referenced documentation is more for RxSwift itself, rather than for a third party library relying on it. So the discussion about how Moya should behave, has to be done with @ashfurrow, in my opinion it shouldn't be changed, but I am happy to follow the discussion and help if necessary. \n. Hello @VictorAlbertos. I really like this part of your post: I see it just like a rx resource which performed certain task, you're right, RxMoya is a resource. I just added my 2 cents because the original documentation for RxSwift has been referenced, alongside the ReactiveX official documentation, to justify and promote a change in the default behaviour of RxMoya, which I think they should not be related. RxMoya is using RxSwift, but it's not part of the original RxSwift framework. :)\nI see your point and I would definitely agree in case the error would have been in the RxSwift code, but in this case it's a matter of design specific decision rather than a design error. I don't see any issue keeping the current behaviour, but I would like to know in which case you would prefer to have the callback called in a scheduler working in a background thread, rather than the main one, just to better picture a potential scenario and see if the change would add more value than problems. :)\n. Hello @VictorAlbertos. I really like this part of your post: I see it just like a rx resource which performed certain task, you're right, RxMoya is a resource. I just added my 2 cents because the original documentation for RxSwift has been referenced, alongside the ReactiveX official documentation, to justify and promote a change in the default behaviour of RxMoya, which I think they should not be related. RxMoya is using RxSwift, but it's not part of the original RxSwift framework. :)\nI see your point and I would definitely agree in case the error would have been in the RxSwift code, but in this case it's a matter of design specific decision rather than a design error. I don't see any issue keeping the current behaviour, but I would like to know in which case you would prefer to have the callback called in a scheduler working in a background thread, rather than the main one, just to better picture a potential scenario and see if the change would add more value than problems. :)\n. ",
    "mhuusko5": "Curious what's involved in this? Seems like it's the last piece in the puzzle in getting Moya working under Swift 2/Xcode 7..\nGreat work, btw!\n. request() currently..\nobj-c\nlet endpoint = self.endpoint(token)\nlet request = endpointResolver(endpoint: endpoint)\nlet stubBehavior = self.stubBehavior(token)\n... perhaps it could go... \nobj-c\nlet endpoint = self.endpoint(token)\nlet request = endpointResolver(token, endpoint: endpoint)\nlet stubBehavior = self.stubBehavior(token)\nBtw, thanks for the speedy reply!\n. Yes, definitely gleaned the significance of the pattern/chain vs. this just being an error. Don't want to change it unless necessary.\nUnfortunately I'm not sure how to work around it in this case. In the the endpointClosure I'm adding the appropriate headers for my auth flow. That's for all targets.\nBut for some targets I need to HMAC sign the url requests, which is based off of properties of the url request, so it needs to go in the endpointResolver.\nI feel like people doing oAuth or other auth flows might also need this, since most of the time you're not signing your signup/signin targets.\n. It is janky, but it'll do for now. Anyway, I guess just see if anybody else runs into a similar issue, and if so maybe this is worth revisiting.\nThanks!\n. Having rethunk it, my real question is: if there's only one sampleData property, what am I do to if a target has sample data for success and sample data for failure? Other than that, I think I get the pattern for representing success/failure with endpointClosures.\n. Your two answers combined covered the bases. I get it now. Thanks a bunch!\n. It had to do with Alamofire and deployment targets. Just pushed a fix.\n. Yayyy, thanks\n. Out of curiosity, what's the flow from tag necessitating change, to new CocoaPods version? Would be cool to see OS X support on trunk, but not sure if there's a lot to do (for example, if addressing the CI issue is pre-req) before making a push?\n. Sorted.\nCI is failing but for reasons unknown to me. Something to do with your guys' wacky multi-podpsec setup. ;)\n. Pushed to trunk\n. Unfortunately as @petester42 mentions, Result.Result doesn't work because of an ongoing Swift quirk where you cant explicitly access a type that has the same name as its module.\nSo, Moya.Result can be access inferred or explicitly, but if Moya is imported in a file, inferred use of Result is ambiguous/won't compile, but Result.Result can't be accessed either.\nAnd there's no hiding or such, as far as I know :(\nIt's a weird position to be in, because this could be fixed in the language tomorrow, or.. not tomorrow. I personally think it's worth integrating the defacto Result.Result, but I haven't been bitten by adding a dep to a large OSS library before.\n. Moya.Result makes it so those uses are unambiguous. It doesn't make it so I can use Result.Result. Those instances are still ambiguous (because can't prefix).\n. Little busy atm, but should be able to some time this week. Perhaps that will also give some time for others (@Moya/contributors), if anyone has strong opinions about additional dependencies, to chime in.\n. Unfortunately theres significant breaking changes in alpha 2 and 3 (which this pull request has changes/fixes for.. you just have to scroll a lot).\nSo, the point of this pull request is to support the latest alpha, with the expectation that this would be pushed as a 4.1.0 release.\n. Two things..\n1) as you say, its possible/likely 4th alpha will have breaking changes\n2) I tested ~> 4.0.0-alpha-3 and it resolves to 4.0.4-alpha-1.. I guess CP prioritises the version number and ignore the alpha bit. as mentioned above, have opened https://github.com/CocoaPods/Specs/pull/13588 to change 4.0.0-alpha-1 to the contents of 4.0.4-alpha-1, and kill 4.0.(1/2/3/4)-alpha-1\n. ",
    "irace": "@ashfurrow You have it correct. I can definitely share some more details on how this works in Tumblr.app (the code isn\u2019t generic enough to be open sourced in it\u2019s current form).\nLet me know if you have any specific questions, additionally I can just dumb down our implementation and post some sample code or pseudocode.\n. At Tumblr, we have the concept of an OutgoingRequest and an OutgoingRequestEngine.\nThe request itself just models an HTTP request and conforms to NSCoding. It has:\n- A type (certain types may have their progress reflected in the UI, others won\u2019t)\n- A URL\n- A parameter dictionary\n- (Optional) file names/paths/content types (for multipart file uploads)\n- A created date (we won\u2019t retry if a request is too old)\n- A retry count (we\u2019ll only retry so many times)\nWe keep all of these in an OutgoingRequestStore, which is some sugar on top of a thread-safe, persistent NSArray with some additional smarts like deleting files from disk once a request has finished (or we\u2019ve given up on it).\nThe OutgoingRequestEngine is backed by an OutgoingRequestStore and requests are added to it from the application\u2019s controllers/coordinators/whatever. It\u2019s fairly naive at the moment but could be more sophisticated: it retries the requests in the store whenever UIApplicationWillEnterForegroundNotification is received, or whenever reachability changes. It does so in serial \u2013 requests are only processed one at a time in FIFO order. It has a delegate that can notify other parts oft he application about success/failure/progress.\n. ",
    "jarrodrobins": "This is a great idea! I really like the idea of caching responses for use in offline situations (as suggested by @aschuch). I've implemented a similar thing in my own projects in the past. It's pretty straightforward and is super useful. \n. This is a great idea! I really like the idea of caching responses for use in offline situations (as suggested by @aschuch). I've implemented a similar thing in my own projects in the past. It's pretty straightforward and is super useful. \n. I don't think I can get away with sharing the existing code as the company I'm at isn't quite as open-source friendly as Artsy. ;-) But! That code's quite old, written well before Swift, sits on top of AFNetworking and isn't as generic as it could be. What I can do is explain what we did. \nThis was purely for caching responses (not requests). \nThe goal at the time was essentially to prevent users from seeing a loading indicator as much as possible. If they've loaded data before and there's a fair chance it hasn't changed, we should present existing data and update it in the background. This also handled the case of the user's internet dropping out. We only used it for GET requests (it doesn't really make much sense for POSTs, etc).\nIt doesn't make sense for some responses to be cached (eg, search responses). Others should be, but may be invalidated by a pull-to-refresh. So, we had an enum that we'd pass into our API client with each request that looked something like - \nenum CachePolicy {\n    case None, // don't cache the response\n    case UpdateOnly, // don't show old data. eg, user just did a pull-to-refresh, but update the cache with what we get if we read it again\n    case ReadAndUpdate // return old data and then go update it in the background. \n}\nI'm sure those names could be improved. For Moya, I can potentially see this as something that we could add to MoyaTarget as an instance variable. Obviously if the user's offline, there's no need to fire the update request.\nHow did we show old data/new data? If we had a cached response, we'd immediately call the response block (ie, MoyaCompletion), then go make the request anyway. If the data changed, the response block would be called again. So, that response block could therefore be called twice (I can see how that might be confusing, but since the developer would need to set a cache policy it wasn't too bad - by default it was disabled). \nWhenever we received a response, we'd wrap it in an object which contained a couple of other bits of metadata, namely -\n- data - the NSData itself\n- ETag - HTTP header for checking if the response actually changed or not. \n- version - This was an API version specific for our app. If we bumped our API version, we wouldn't use old cached responses at all. I'm not sure how we'd tackle this in Moya cleanly at this point. \nThis object would then be saved to disk with the request URL as the key. \nAny time we would make a request, firstly we'd check the cache policy. \n- For None, simple - just fire off the request.\n- For UpdateOnly, fire the request but save the response. \n- For ReadAndUpdate, check the cache and if an entry is found, return the response. Then for the interesting bit: we get ready to fire off the request anyway to update the data. We'd pull off that ETag field I mentioned earlier from the cached response and add it as a If-None-Match header for the request. Then fire the request. If that ETag hadn't changed, or if the response code was 304 (not modified), we wouldn't call the completion block. Otherwise, the updated data would be passed back up. \nI'm far from an expert on HTTP headers/ETags, but I understand that it's respected by NSURLRequest if you set the cachePolicy property to NSURLRequestUseProtocolCachePolicy. That's something AFNetworking seems to take care of itself (just looking at the header file documentation, I haven't looked into whether Alamofire does it).\nWe should probably also respect the Expires header (though that's something we didn't implement in our solution). \nI hope this all makes sense and that I haven't waffled on too much (I have a tendency for doing that). I'd definitely be keen to hear others' thoughts and suggestions on this and how it might be implemented. I'm more than happy to have a stab at it when I find some time if we agree on the method. \n. Alamofire were very quick - they've already merged their Swift branch into master and deleted the Swift 2 branch. You just need to point at the master branch for Alamofire now. \nI've submitted a PR for Moya which updates this. \n. OK, looks like I spoke too soon on the tests. They run locally? :-P\nI'm seeings lots of things like use of undeclared type 'ErrorType' - I'm guessing CI isn't using Swift 2?\n. Looks good to me. :+1: \nI particularly like these changes -\n`MoyaProvider.MoyaEndpointResolution` to `MoyaProvider.RequestClosure`\n `MoyaProvider.endpointResolver` to `MoyaProvider.requestClosure`\nSo much clearer! \n. \nSounds good to me. :+1: \n. ",
    "henkvanderspek": "Any progress on this or alternatives @ashfurrow?\n. ",
    "PatrickSCLin": "any progress? this is what I looking for. any progress? this is what I looking for. Do you know any sample codes about this that I can study? \nI'd like to make a plugin with moya, it will be useful in social app\n\u5f9e\u6211\u7684 iPhone \u50b3\u9001\n\nSteven Deutsch notifications@github.com \u65bc 2017\u5e749\u67082\u65e5 \u4e0b\u53485:45 \u5beb\u9053\uff1a\n@PatrickSCLin I'm afraid there's no progress on this. This could have some potential as a plugin but I'm not sure if it should be Moya's responsibility \ud83e\udd14\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Do you know any sample codes about this that I can study? \n\nI'd like to make a plugin with moya, it will be useful in social app\n\u5f9e\u6211\u7684 iPhone \u50b3\u9001\n\nSteven Deutsch notifications@github.com \u65bc 2017\u5e749\u67082\u65e5 \u4e0b\u53485:45 \u5beb\u9053\uff1a\n@PatrickSCLin I'm afraid there's no progress on this. This could have some potential as a plugin but I'm not sure if it should be Moya's responsibility \ud83e\udd14\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Can Moya just return 204 no content response directly instead of waiting underlying error when request was GET ?. Can Moya just return 204 no content response directly instead of waiting underlying error when request was GET ?. It's easy to reproduce with AWS S3 + ELB!\nwe have multiple stages of server, it's working with Nginx all the time, but hanging sometimes with AWS ELB, progress is not reliable !. It's easy to reproduce with AWS S3 + ELB!\nwe have multiple stages of server, it's working with Nginx all the time, but hanging sometimes with AWS ELB, progress is not reliable !. it should be the latest version, i cant tell double onNext event happen or not, i have use RxSwift, however it's easy to reproduce hanging issue, onNext event freeze sometimes,  but onCompleted is work.\n\n\u5f9e\u6211\u7684 iPhone \u50b3\u9001\n\n\u0141ukasz Mr\u00f3z notifications@github.com \u65bc 2017\u5e748\u670817\u65e5 \u4e0b\u53484:44 \u5beb\u9053\uff1a\nHey @PatrickSCLin, do you still encounter double onNext event? What version of Moya do you use? Is it with RxSwift?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. sorry, I was testing with project of company, you can try to set AWS S3 + ELB in Tokyo region, it's easy to reproduce. sorry, I was testing with project of company, you can try to set AWS S3 + ELB in Tokyo region, it's easy to reproduce. \n",
    "SD10": "@PatrickSCLin I'm afraid there's no progress on this. This could have some potential as a plugin but I'm not sure if it should be Moya's responsibility \ud83e\udd14 . I understand this is an old and closed thread but I recently started working on a project for Firebase inspired by Moya. I've called it Nora. I'm really a huge fan of the Moya networking abstraction pattern. I initially tried seeing if Moya could support Firebase but like others in this thread have mentioned, Moya is too tightly coupled with Alamofire and it would require a different Provider and Target types. Thank you everyone for your hard work on this project and the inspiration.. @fbeeper This is awesome! Thanks for writing that article about Moya \ud83e\udd17 I don't think the examples are too simplistic. In fact, I think simple examples help to reduce the complexity of the topic.\n\nNevertheless, if you give me some feedback on the technical part, I will be very happy to rewrite it more formally as documentation.\n\nYou're right, I think Moya documentation should read a bit more formal than that article. I think the stubbing documentation we need would be:\n- How to get started stubbing easily and quickly\n- Explaining sampleData in TargetType\n- Explaining the different types of Moya.StubBehavior\n- Explaining the endpointSampleResponseClosure and the EndpointSampleResponse\nThose things should be great! Of course, if you open a PR with a rough draft we can always help you review it \ud83d\ude03 . I can see why this is confusing. There doesn't seem to be a centralized section for testing. It's scattered among providers, basics, etc. \nI'll see what I can do to improve this but I'm guessing it's a week before I'll be able to do a write up. I'm assigning this issue to myself but if anyone can complete it before me - feel free.. This is a duplicate of #632. Linking and closing. @mayuur It works because \"?\" should not be part of the path. It indicates the query. Therefore, the appendingPathComponent method will encode the \"?\" as \"%3F\".. @douglastaquary I've been trying to replicate this. Can you share any more information? I've set breakpoints on prepare() and it's called for me.. @sunshinejr The configuration looks correct to me. Do you think its a permission issue considering it can comment on issues but not close them? \nThe link in the closeComment looks like it causes a different syntax coloring -- could this be an issue?\nEDIT: I created #1157 in case. @sunshinejr Thanks for checking the permissions. This change is already merged in. It may take some time to determine if this changes anything. There's little and no official documentation on when probot will scan the issues. Some info here if anyone is interested.\nI'll continue watching this until it's resolved.. I think the problem is with our label having spaces. \nThe method used to grab stale issues at probot/stale doesn't wrap the label in quotes when performing the search query to find closable issues. I created a PR at stale to fix this (if it is the problem \ud83d\ude05).. @pedrovereza You read my mind! I was going to ask you to please test this there \ud83d\udc4d . @pedrovereza What do you think about changing our label to one without spaces? The support at stale looks limited. I don't think they'll be merging that PR anytime soon.. @sunshinejr We would probably have to resolve all the current issues manually. \nUpdating a label is an action that will update the last modified date of an issue. Issues that are currently marked as no recent activity won't get marked with the new label until 45 days after they were marked with the first label \ud83d\ude10\nIt would work immediately for all issues not already marked.. I actually think it does the query using the updated search qualifier:\ni.e) is:issue is:open updated:>2017-07-10\nI think that PR should've taken effect immediately, so I'm thinking there's a stateful issue.\nRegardless, I think that was the right step so let's see how the next marked issue is handled.. It looks like probot has stopped slacking off \ud83d\ude05. \nI don't know if we want to keep this issue open to discuss the merit of this automation tool or close it now that the bot has completed a full cycle.. @sunshinejr I think that's a good idea. #1126 SampleData still needs some time and I think there are enough changes in 9.0 as is. I recommend we move it to 10.0 to not hold up this release. . @sunshinejr When referring to the next release, are you talking about 9.0.0-beta or 10.0.0?. @sunshinejr Thanks for taking care of those unit tests \ud83d\udcaa I think we should go with beta.1. I don't have any more breaking changes personally and I don't think we should hold up the release for much longer. There's been more issues regarding Swift 4 recently and people looking to use some of the changes made in 9.0.0.. Thank you for all your hard-work @sunshinejr @BasThomas \ud83c\udf7a \ud83c\udf89 . I was thinking of cleaning up Moya's in source documentation and generating documentation using jazzy. We would need to create a moya.github.io repo to host the page. Is anyone opposed to this? @Moya/contributors\nI have no web development skills so it would only be jazzy for now, but this gets the ball rolling.. Awesome, I started here: https://moya.github.io. Checking out what the current status of the docs look like.\nThat Eggheads link is awesome btw, I may try to learn a little web development. I feel limited because I don't know Javascript (would prefer learning Typescript first if possible TBH). I doubt anyone wants me to work on the Moya website in Elixir or Go \ud83d\ude02 . I'm starting to learn React this morning so I will probably move forward with making Moya a website. Likely using Gatsby. Hope everyone is ok with that setup. As an aspiring contributor, I think a Vision document would be a great move! \ud83d\ude03 . No promises or set time frame but I'd like to take a stab at this. I think a Playground driven approach would result in a more fine-grained and chronological learning experience. Compile time errors might even make it easier to maintain than static documentation \ud83d\ude05. So if anyone has something to add to the discussion feel free to let me know.\nI think the concern regarding maintenance of a website and playground is insightful and agree it would be difficult to maintain a large amount of content. I also agree that if the community decides to go both directions, then we should find a way to reuse as much documentation as possible.\nWould anyone else like to see this?\n. Hey there everyone, this is something I'd like to move forward on. I've started a branch here:\nhttps://github.com/SD10/Moya/tree/playground\nBasically, I took the Targets.md documentation and converted it to a playground file. I'm trying to re-use as much as the existing docs as possible, however, if we're looking for an authentic walkthrough I can do that too.\nI think reusing as much existing documentation as possible will make things easier to maintain. I also like the idea of having our static documentation backed up by a compiled playground. This will immediately trigger errors for out of date documentation.\nI'd just like some feedback on my approach before continuing. One thing I'd like to know is if the wording in the Playground file should mirror the Documentation exactly. My current implementation paraphrased the existing documentation.\nThanks for any feedback!. @sunshinejr I replied to your suggestions. Thank you, I really appreciate the feedback.. A hacktoberfest label would be great. I gave up on this because I wasn't satisfied with how it was turning out. Something I may revisit in the future if no one else picks it up before me \ud83d\ude04\nSent with GitHawk. @sunshinejr thank you for the feedback. I would be willing to provide the implementation for this feature when Moya is ready to start the Swift 4 migration. Including writing the Rx/Reactive extensions, documentation, and testing. If there's anything else I can do the contribute in the meantime, please feel free to let me know.. @devxoul You may be interested in working on this one? I just saw RxCodable.\nI have a branch that's part way through on my local copy but I thought I'd get your thoughts. Not trying to dictate contributions, just thought you may be interested \ud83d\ude03 . Closing this in favor of #1335. Let's move the discussion there \ud83c\udf89 . Good point @BasThomas. I always thought it was to encourage discussion on the PR and not have it split across two places. Feel free to reopen this and maybe we can default to the policy you described\nSent with GitHawk. Hey @GuiFoA, could you provide a bit of sample code for your request so others can assist you with what's not working? You may want to check out: https://github.com/Moya/Moya/issues/1119. @GuiFoA let me see if I understand correctly.\n~https://www.XXX.net/buildAction.do?mbGetIndexJson is your base URL and the entire URL.~\n~You are not appending any path component to the baseURL?~\nIf you just share the piece of code causing this issue, we can resolve this more efficiently :). @GuiFoA I just got the chance to look at the Demo.\nThe problem is you're using ? inside of your path -- which isn't common practice.\nSwift\n    //parmenter 'city'\n    static let homepage = \"/buildAction.do?mbGetIndexJson\"\nThis method you provided by concatenating the path yourself is possible:\n```Swift\n// Using this method is possible\nlet publicParamEndpointClosure = { (target: DemoService) -> Endpoint in\n// get the complete url by myself\nlet url = DemoURL.base + target.path\n\nlet endpoint = Endpoint<DemoService>(url: url, sampleResponseClosure: { .networkResponse(300, target.sampleData) }, method: target.method, parameters: target.parameters, parameterEncoding: target.parameterEncoding)\n\nreturn endpoint\n\n}\n```\nAnother idea I have for you is:\n```Swift\nextension DemoService:TargetType {\nvar baseURL: URL { return URL(string: DemoURL.base + queryPath)! }\nvar queryPath: String {\n    switch self {\n    case .getInfo:\n      return DemoURL.homepage\n    }\n  }\nvar path: String {\n    return \"\"\n  }\n```. I completely agree with @tbaranes. I find the inclusion of testing code directly in the app unpalatable. As someone who is passionate about testing, I would like to have this separation of concerns.\nI don't really believe testing is a practice that can be encouraged through an API. If one does not see the benefit of or appreciate writing tests, they are simply are not going to do so.\nFurthermore, from the perspective of responsibility, I think it makes far more sense for sampleData to be the concern of the Provider as opposed to the TargetType. \n. I tried taking a crack at it. If we use the approach of adding a response to StubClosure:\nDiff\n-typealias StubClosure = TargetType -> Moya.StubBehavior\n+typealias StubClosure = TargetType -> (Moya.StubBehavior, Response)\nThis requires that StubClosure is also passed to the method defaultEndpointMapping(target:).\nThis is because defaultEndpointMapping(target:) is a class method so I won't have access to the stubClosure instance property to get the data for the sampleResponseClosure. It is currently just receiving the sampleData from the TargetType.\nI think this is the only thing a little awkward about this approach.\nAnother thing to point out, what I didn't like is how it broke a lot of the tests that were written without the use of a MoyaProvider. If a test is written using just an Endpoint then we have no way to retrieve sampleData because the current implementation gets it from the  TargetType.\nI would have to create some sort of namespace in my TestTarget to store all the sampleData in order to remove the resulting boilerplate code.\nAny insight, suggestions, and corrections are appreciated \ud83d\ude05 . What about providing a default implementation for sampleData in TargetType:\nswift\nextension TargetType {\n   var sampleData: Data {\n      return Data()\n   }\n}\nI think this is the implementation that most people who are not using testing are doing already: \nWhy not make it default?\nThen in the Test Target people can provide a new implementation for sampleData:\n```swift\n// Example TargetType used in App\nenum MyAppTargets: TargetType {\n    case zen\n}\n// Test Target Implementation\nextension MyAppTargets {\n    var sampleData: Data {\n        // return sample data for testing\n    }\n}\n``\nI think this is a far easier way to remove test code from the Main Target and less damaging to the API. However, if we're concerned about movingsampleData` to the provider from a responsibility perspective then this is not a valid solution.. @pedrovereza I don't know if this is a hard rule but if Moya is no longer going to force people to write networking tests then this seems like a good case for a default implementation.\nI'd also like to point out the contrast that the MoyaProvider has the default behavior of StubBehavior.never -- it makes sense to default sampleData to Data() to match this.\nFrom #861 this is an excerpt by @scottrhoyt:\n\nAs for sampleData, even as an ardent unit tester, I think there is a difference between first-class support of unit testing and first-class forcing people to write testing code. We all know very few projects get started with full test suites in place. If tests do eventually get added, it is often done at a later date (i.e. not much TDD going on). The amount of Moya code that starts off with\n```swift\n\nvar sampleData: Data {\n  return Data()\n}\n```\n\nconsiderably outnumbers the amount of code that is using sampleData in it's intended fashion. This search backs that up at least for public repos. By adding even a little bit of friction to selecting Moya as your networking layer because of it's verbosity and forcing of unit testing code into your app, we just encourage people to go a different route that will be harder for them to add unit tests once they get to the point that they realize they need it. While it is admirable to say that we can change testing etiquette by forcing people to implement sampleData, the reality is that it's still just a--confusing for anyone that isn't familiar with Moya--Data() away from being ignored and that is what most people are doing. Changing testing behavior will require a bigger impetus than a single networking library, but every single networking library should still support it in some way. Frankly I think Moya should go further to support testing by providing an easy way for test data to be stored in fixtures because if you want to use real returns from even a moderate-complexity API, the TargetType code quickly gets bloated back to unreadable status.\n\nIt's a large read but my takes from it are:\n- Forcing people to implement sampleData makes it harder to get Moya up and running\n- sampleData is required prematurely (long before unit tests are written)\n- Having sampleData in the TargetType bloats the file, especially with a complex API\n. I've also been considering the possibility of a TestTargetType protocol:\nswift\nprotocol TestTargetType: TargetType {\n    var sampleData: Data { get }\n    var stubBehavior: Moya.StubBehavior { get }\n}\nMoya users can then conform to this protocol inside of their testing target. This adds the benefits of:\n- moving sampleData to the Test Target\n- allows more fine grain control over stubBehavior eg.) stubBehavior based on specific target case\nMoya provider could then route a request based on whether a Target is a TestTargetType:\n```swift\nextension MoyaProvider where Target: TestTargetType {\nfunc requestNormal(_ target: Target, queue: DispatchQueue?, progress: Moya.ProgressBlock?, completion: @escaping Moya.Completion) -> Cancellable {\n    // Return stubbed response\n}\n\n}\nThis could even improve the MoyaProvider because if the target is not a `TestTargetType` then the provider knows it doesn't have to handle anything regarding stubbing. You could remove something like the `StubClosure` from the initializer of the `MoyaProvider` as well.. @ranayahya It's difficult to tell with the code you posted, possibly this line:Swift\nvar request = URLRequest(url : URL(string: API)!)\n```\nAside from that, it's best if you don't open issues under open source projects you're not using. \nThe maintainers put a lot of time and effort into resolving issues and don't need extra unrelated work.\nThat being said, I recommend asking these types of questions on: stackoverflow. It is perfect for this \ud83d\udc4d Good luck!. @sunshinejr What about adding the documentation tag instead?. This should be taken care of in #1153, correct?. The changes aren't reflected in the search because they are on the 9.0.0-dev branch. We can wait until they are merged into master to close this. I just don't want someone to get confused and think this is still available as it is a starter task \ud83d\ude05 . We still need to update docs/Examples/Basic.md and possibly more in the examples section. While the examples are not pure documentation, Basic.md is a very important reference file.. I'm actually not sure about ArrayAsRootContainer.md but it looks like more of a specialty example, so if it wasn't updated before a release I wouldn't mind too much. My biggest concern was Basic.md considering it is our #1 most viewed documentation file. Thanks for taking care of this!   . @Dschee I think what you've listed is fine. We don't need to add unavailable attributes to specific cases in the enum. The migration guide will cover this.. @ledikari Do you know which case the MoyaError is? \nYou can use errorResponse?.errorDescription if you'd like.\nThe reason I'm asking is the MoyaError.underlying and MoyaError.requestMapping return nil for the response property.. Yes @dimohamdy this is available in Moya 9.0+. Removing the emojis could work too. I think we will have to wait about an hour+ to see if Probot makes any changes.. @BasThomas Great idea, I just want to get a better handle on the problem before opening a premature issue. I'm not sure if it's the emojis or just any colon in the message body -- or even something else \ud83d\ude05 . I found babel is using emoji literals in their stale comments. \nPossibly writing \ud83d\udc4d as :+1: could have thrown it off? I'm not too convinced.\nI was skeptical of all colons (like the one in the link) but hubotio is using links in their comments. I'll have to sleep on this and see if any thing has taken effect by morning.. @pedrovereza I did find repos using both emojis and markdown inside of the markComment. None inside of the closeComment but I would assume the behavior would be similar.\nbabel uses emojis.\nhubotio uses markdown.\nI created an issue here in the stale repo asking for some troubleshooting support.\nNonetheless, let's give this a try. I think when updating the stale.yml file the changes should be applied immediately by probot.. @BasThomas I agree, this was my last idea. I already have an open issue. . @yar1vn I believe @sunshinejr was just trying to mock up a good way to add this functionality considering the state of Moya's current API. \nThe code he provided in the comment is a rough draft and may not even compile due to the switch statement not being exhaustive. There may be other things to implement such as updating docs/tests.\nMaintaining a project requires a large effort and we're always encouraging new contributors. Small contributions have a snowball effect and save maintainers a great deal of time. \nWould you be interested in moving this forward?. @yar1vn Sorry I'm not an expert in this area. Could we just switch on the authValue property to provide a different value based on the case of AuthorizationType?. This shouldn't take that long to make the changes to sources, tests, and docs.\n@yar1vn If you end up not being able to get around to making the changes this weekend, would you like me to take care of it for you?\nI'm not trying to rush you but it's always great to bundle as many breaking changes in a major release \ud83d\ude05 . I like the content of Threading.md. Let's also add a link to it in the docs/README.md? \nPossibly right after the RxSwift & ReactiveSwift sections since it builds on them.. Hey @GTMYang thanks for reporting this. Can you provide us with any more information?\ni.e) Specific compile errors, your Swift version, Moya version. @GTMYang Are you sure this is an issue with Moya? I can't find any reference to it in the error output.. I like the URL init over having to access a class method on Endpoint. It feels right.\nI guess this raises the question of providing these kinds of utilities in Moya, considering I think we haven't extended Apple's frameworks thus far?\nFrom Targets.md:\nSwift\nextension String {\n    var urlEscaped: String {\n        return addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!\n    }\n}\nI believe there also use to be one like this: \n(which I'm thankful is removed because it confused me when starting out and not seeing the bottom)\nSwift\nextension String {\n    var utf8StringEncoding: Data {\n        return data(using: String.Encoding.utf8)!\n    }\n}\nJust my two cents, to say we discussed it in the case someone adds another extension and tries to point to this as justification.\n. > I think that it might be a rare case that we extend Apple framework, but if we do, I feel like it has to be something unique to Moya.\nThis sounds like a good precedent \ud83d\udc4d. Where to document it? Endpoints.md?\nEndpoints.md...\n\nThe first might resemble the following:\ndiff\nlet endpointClosure = { (target: MyTarget) -> Endpoint<MyTarget> in\n+   let url = URL(target: target).absoluteString\n    return Endpoint(url: url, sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n}\nThis is actually the default implementation Moya provides. If you need something custom, like if your API requires custom parameter mapping, or if you're creating a test provider that returns non-200 HTTP statuses in unit tests, this is where you would do it.\ndiff\n+ Notice the URL(target:) initializer, Moya provides a convenient extension to create a URL from any TargetType.\n...\n. Yeah @sunshinejr I'll take care of it tomorrow afternoon. Oops I made the PR to master does anyone know if I can change branches or do I have to reopen one? Haven't done that before \ud83d\ude05 \nEDIT: Got it \ud83d\ude06 . @larryonoff carthage bootstrap. Maybe add #1126 comment:\n- favor explicitly defined behavior over default implementations\nThere are also a couple other things mentioned in #1081. Such as object decoding.\nThis document heavily refers to requests but doesn't talk about the responses. \nCurrently, I wouldn't say Moya is in the business of response handling -- aside from providing a few Moya.Response extensions. But what's the vision for this? Are we for or against this behavior?. @alfian0 How about using the case statusCode(Response) from the MoyaError enum? \nYou can then get the statusCode property by extracting the associated value of Response. \nLet me know if this helps \ud83d\udc4d\nIn Moya 9.0.0 (which should be released soon) you will also receive the response (if any) in the .underlying case.. @alfian0 Unfortunately, if you need the statusCode in the .underlying error case, you'll have to wait for the Moya 9.0.0 release. Sorry :(. This is possible with Moya 9.0.0-alpha.1 but keep in mind this version is still a pre-release. It will have official support in Moya 9.0.0 which is soon to come.. @ondev Have you been able to find any useful documentation? \nI recommend reading Targets.md and Basic.md. \nThe MoyaProvider is generic over an object conforming to the TargetType protocol. \nYour MoyaProvider instance can make any number of requests to the underlying TargetType.. Documention Affected:\n- [x]  Basic.md\n- [x] Targets.md\n- [x] Endpoints.md\n- [x] ArraysAsRootContainer.md\n- [x] Providers.md\n- [x] OptionalParameters.md\n- [x] Assets.md\nIt's important to know that a great deal of these has already been taken care of in #1147 so that should be the basis for which docs still need updating. \nIf I can check any of these off the list when I have time I will.\n. Hey @aelam,\nThe current documentation is representing Moya v9.0.0-alpha.1. If you want to continue using Moya 8.0.5 you will need to use the RxMoyaProvider. Let me know if this helps \ud83d\ude03 . @riyanpratama Let me preface this by saying I don't know much about Carthage.\nIt looks like you're using ReactiveSwift 1.0.0 and DateScheduler was added in version 1.1.0.\nI think that Moya 8.0.5 has a minimum ReactiveSwift requirement of 1.1.0.\nLet me know if this helps.. I strongly dislike merging my own PR's regardless of how trivial. Having someone else merge your work is an extra seal of approval. In the future, feel free to merge anything of mine you see \ud83d\ude03 . It looks like the build error is from compiling the project in Xcode 8? Admittingly, I haven't been using Xcode 9 beta enough \ud83d\ude05 . @sunshinejr I made the requested tokenClosure changes. If anyone else has any other changes or feedback just let me know. Once the implementation is agreed on I'll:\n- [x] Update Docs\n- [x] Add a CHANGELOG entry\n- [x] Do you want me to add something in the MigrationGuide.md?. @sunshinejr I updated the documentation and the CHANGELOG.md. Let me know how those look. \nAlso, let me know if you want me to write something in MigrationGuide.md.. @sunshinejr Done. Sorry for all the push spam. My rebase attempt failed so I just took care of the CHANGELOG conflict with a commit.\nWhat do we need to add the the MigrationGuide.md for the Reactive API's? Just the fact that they're in the reactive and rx namespaces? I can add this in another PR.. @sunshinejr Yeah, I removed the WIP tag. I'll open a PR to work on the MigrationGuide for the reactive API sometime later today.. @pedrovereza Changes made. Thank you for jumping in and giving me your review! Those were some great suggestions \ud83d\ude03 . @ivangodfather The stubClosure argument for the MoyaProvider initializer is a closure that takes in a TargetType and returns StubBehavior. You can pass it a custom closure that switches on the cases of the target and returns the respective stub behavior that you'd like. Is this what you were looking for?\nExample:\nSwift\nlet stubClosure = { (target: TargetType) -> Moya.StubBehavior in \n    switch target.path {\n    case \"endPointThatShouldReturnAStub404\":\n        return .immediate\n    default:\n        return .never\n    }\n}. @ivangodfather Sorry, I think I understand better now. The example was just that -- an example \ud83d\ude04.\nWhat's wrong with your current approach?. @ivangodfather Are you calling setProvider() before every request?. @ivangodfather I think there may be some issues with the initialization of the MoyaProvider. \n``Swift\n// Here when you're passing the new endpointClosure you're not giving it stubBehavior\n// it defaults to.never`\nprovider = MoyaProvider(endpointClosure: endpointClosure)\n// I think it should be\nprovider = MoyaProvider(endpointClosure: endpointClosure, stubClosure: MoyaProvider.immediatelyStub)\n``\nSorry I wasn't able to help but I will check back later \ud83d\ude1e Let me know if you resolve this.. @ivangodfather Did you see the edit in my most recent comment? It looks like you're overwriting the stub behavior you provided in the first initialization ofMoyaProvider`.. @ivangodfather Can you see if this documentation helps? Providers.md\nBasically, your stubClosure handles the mapping of a (TargetType) -> StubBehavior.\nThis allows the MoyaProvider to have different stub behavior based on the target.\nSimilarly, the endpointClosure handles the mapping of a (TargetType) -> Endpoint.\nThis allows the MoyaProvider to have different endpoints based on the target.\nYou need this because you want to return a 404 response for some targets.\nIt looks like you will need both a custom stubClosure and endpointClosure to achieve the behavior you want. Am I making sense? \nMy final recommendation is to maybe do your tests in a Unit Test Target. Then create a mock provider solely for testing in the XCTestCase.\n . @ivangodfather I'm trying to tell you that you're not receiving the sample response closure because your MoyaProvider is defaulting to a stubBehavior of .never.\n``Swift\n// This line of code will not stub requests. It defaults to.never`.\n// This is why you are receiving an actual request and not stubbing.\nprovider = MoyaProvider(endpointClosure: endPointClosure)\n// You need to provide a stub behavior to receive the sample response\nprovider = MoyaProvider(endpointClosure: endPointClosure, stubClosure: MoyaProvider.immediatelyStub)\n```\nAm I making sense?. Hey @nhantrivinh,\nThere is a method on Moya response which you can use to filter a specific status code:\nSwift\n    public func filter(statusCode: Int) throws -> Response\nLet me know if this helps.\n. @nhantrivinh Glad you were able to work this out \ud83d\ude03 . Yeah that makes sense the docs updates / gardening of master matches the inconsistency of the error.\nNext month?! \ud83d\ude31 We're so close!! . @xumoyan Sorry I don't exactly understand what you're trying to convey in your last message. The output you've posted looks like the result of setting a breakpoint. If there is a crash unrelated to the breakpoint, would you be able to provide us with the console output?. Closing this in favor of moving the discussion to the implementation in #1229.. @freak4pc I just cleared the cache and triggered a rebuild.\nAnyways, thanks for taking care of this so Swiftly \ud83d\ude06 There's some nice cleanup in there.. @phimage Thank you for the PR \ud83c\udf89 I've only skimmed the changes but I know this will conflict with changes made to TargetType from #1147 in the 9.0.0-dev branch. If we move forward on this PR, maybe you could submit your work to 9.0.0-dev?. We still need some more work here on determining which versions of Moya are compatible with Swift 3.0 and Swift 3.1-3.2. @sunshinejr I was just looking into this because I had to familiarize myself with the new API for danger-swift. It looks like it should be backwards compatible according to this.. How were we thinking of doing this? Dowloading the 8.0.5 release and updating it? master already represents 9.0.x betas . @larryonoff Can you migrate to Moya 9.0.0-beta.1? I think it should be pretty stable -- plus we could use some beta users to make sure of this \ud83d\ude05. Any issues you have would be resolved swiftly.. @larryonoff No, nothing that I'm aware of and we have unit tests. If you did run into something it can always be resolved. @larryonoff I just want to let you know there's a migration guide. Feel free to let us know if the guide can be improved or is missing something from your migration. @larryonoff I just want to let you know there's a migration guide. Feel free to let us know if the guide can be improved or is missing something from your migration. @larryonoff I believe one of Moya's design philosophies is to \"favour explicitly-defined behaviour over default implementations.\". Therefore, we're trying to avoid default behaviors. I tried to make the same argument for sampleData :smiley:. @larryonoff I believe one of Moya's design philosophies is to \"favour explicitly-defined behaviour over default implementations.\". Therefore, we're trying to avoid default behaviors. I tried to make the same argument for sampleData :smiley:. @Legoless The parameters get applied inside of the provider's requestClosure. \nIt is set to MoyaProvider.defaultRequestMapping by default. \nIt does this by calling the urlRequest property on Endpoint.. @Legoless The parameters get applied inside of the provider's requestClosure. \nIt is set to MoyaProvider.defaultRequestMapping by default. \nIt does this by calling the urlRequest property on Endpoint.. I agree, let's remove them so no one else faces this issue. @Legoless Thanks for the feedback and sorry for the confusion!. @sunshinejr Do you think there's any value in making the urlRequest property throwing and then propagating the parameter encoding errors? \nSince defaultRequestMapping just converts a URLRequest to a Result<URLRequest,Error> we can pass on this information quite easily here. Just on my mind from looking at this part of the code.\nIf urlRequest is used frequently outside of this context -- having to use it with try could be too annoying \ud83e\udd14 . Closing this in favor of #1249. @sunshinejr I have no problem delaying this until v10.0 or even not going with this solution at all. @sunshinejr Yes, I will finish this up. I need about 2 days though. That's what I get for trying to resolve a merge conflict in nano \ud83d\ude03 . @sunshinejr Sure thing. Should be good to go if resolving the conflicts went well and CI is all green. Unless anyone else has any input/review. Giving it another look over myself now . Yes, I'd really appreciate it if another @Moya/contributors gave their input. The goal of this PR is to expose more information about the failure of parameter encoding for a request. \nI don't want to hear a ton of complaints about having to use try syntax when accessing the urlRequest for an Endpoint if this were to be merged. . As per @ashfurrow 's feedback I added tests to make sure urlRequest is throwing the correct error.\nI changed the implementation to throw the .parameterEncoding error directly from urlRequest() instead of wrapping it up in defaultEndpointMapping. This is because I was receiving an Alamofire error instead of a MoyaError through urlRequest. Nice how writing a test caught this \ud83d\ude09\nTruthfully, it was extremely hard to write a test that caught an error -- it even made me question the value of this change. \nThis error will only ever be triggered when JSONSerialization fails to serialize the parameters. I went hunting in core-libs-foundation to see what errors it throws -- but the majority of them aren't caught gracefully and come back as an NSInvalidArgumentException. . @sunshinejr I meant to check the docs and forgot. I will shift this to WIP and take care of it. About the demo app -- I'm guilty of not even thinking about that. I will do this too \ud83d\ude05 . @sunshinejr Sorry I didn't get a chance to follow up on this. I will do this in a couple hours from now. Why don't you want to do this breaking change? Am I holding things up?. @sunshinejr No problem, good thoughts. It's good to know when to draw the line. I noticed there are no changes in the demo app or the docs. We weren't using the default values in the docs. I opened up a fresh PR so I'm closing this one.. Kind of similar to #197. I'm not sure if Moya should have a caching layer but maybe this could be extended through a plugin. In v10.0 we're going to review the API around stubbed requests so that would be a good time to look at this further.. @AndrewSB I think I had similiar thoughts:\n```Swift\nlet moyaProvider = MoyaProvider()\nlet cacheProvider = CacheProvider(provider: moyaProvider)\ncacheProvider.request(.zen)\n```\nI think a cache at any level of a program increases its complexity/the difficulty to reason about its state. Having this hidden in Moya's internals could increase that difficulty but I believe this is true for any library you don't fully understand internally. \nMy main concerns are:\n- The maintainability of the codebase\n- The quality of a caching feature (considering there are other projects devoted to this)\n- We have to consider different types of persistence\nMoya does one simple thing and it does it incredibly well. If a new feature doesn't match the quality of what we do already it's more clutter than anything useful IMO.. @AndrewSB The only upside is Moya users getting these capabilities by default \ud83e\udd14 I don't think we can maintain something as robust as Carlos.\nI just checked Alamofire because I consider it a good guide considering we lean so heavily on it and are one level above it. It supports basic caching using URLCache. However, I'm not too fond of the auto-purging behavior \ud83d\ude05. @AndrewSB So it seems like we both agree this wouldn't be a valuable addition to Moya's core. Better to let other libraries build Moya plugins.. We still have a good amount of time to work on 10.0 but I think it's important to note that the RxSwift/ ReactiveSwift support should be the top priority. We can always iterate quickly by shipping 10.0 and then 11.0 soon after.\nThe reason I say this is because I've given a lot of thought to the sample data refactor (#1126) and IMO I only see two good solutions. I think it's important that the initial PR for this receives input from a handful of Moya contributors. \nEssentially, let's not rush any core API decisions to get full Swift 4.0 / reactive support \ud83d\ude03. Yes, let's delay the sample data refactor again and move it to Moya 11.0. It's worth taking the time to find a long-term solution and one that will play well with Harvey. In #1285, I suggest a short-term solution to keeping sampleData in the Test Target for those who are concerned.. Hey @evermeer I'm really sorry for the inconvenience. We're trying to get a 10.0 beta out ASAP. I'll ping you with more updates as I have them\nSent with GitHawk. It looks like it could be difficult to find the right solution for #1325 in a timely manner. Does anyone think that we should delay this until the next version? It would be nice to group more breaking changes into this release but we probably want to cut an official beta release with Swift 4 support by now\nEDIT: Looks like this has some more progress as of late. Congratulations everyone \ud83d\udcaa \ud83c\udf89 Thank you for moving this forward @sunshinejr \ud83d\ude03!\ncc @evermeer . @sunshinejr I started using GitHub tags + PR numbers at IBAnimatable and think it would be a great idea to formalize the same approach for Moya. Knowing the PR where the changes were made and who made them help a great deal with visibility and accountability. If I ship a regression (or someone has any questions about a change) you know where to find me \ud83d\ude03\nDo you think we should also create a documentation file that describes our CHANGELOG process for new contributors?. Doh \ud83d\ude05 Sorry @arjunnaha can't believe I missed that. Thank you!!. Hey @YanisSOTO,\nThis isn't a part of the Moya core library. You're using Moya-ModelMapper, correct?\nYou can check the CHANGELOG for the library. \nIt looks like mapObject and mapArray have been renamed to map(to:keyPath:). Hey @YanisSOTO,\nThis isn't a part of the Moya core library. You're using Moya-ModelMapper, correct?\nYou can check the CHANGELOG for the library. \nIt looks like mapObject and mapArray have been renamed to map(to:keyPath:). @arjunnaha Thanks for the report! Do you want to submit a PR to take care of this? \ud83d\ude03 . @damianesteban No, you do not need to add the parameters using the parameters property of TargetType in Moya 9.0. Basically, parameters and task has been combined into a single property. You might want to check the Migration Guide (sorry if you've done so already). Maybe it would be useful to provide a deprecated warning for the parameters property. @BasThomas What do you think? Currently, if a Moya user doesn't remove the old parameters property it just results in it being unused. Thank you @damianesteban . @pccole You can find all our migration guides under docs/MigrationGuides. I would recommend going through each one from your previous Moya version to the latest to get a feel for all the changes.  As mentioned above, we removed the parameters property in Moya 9.0 in favor of combining it with the Task enum.\nSent with GitHawk. @dotprox Thank you for your contribution \ud83c\udf89 I'm just curious could this not be done with a regular target type by adding token_url as a URL parameter?. @BasThomas Thank you!\n@dotprox This will also require us to update the documentation around AccessTokenPlugin and its tests. If you need some help with that I'd be happy to assist.. @matthewweldon I would encourage you to separate your TargetTypes as much as possible while still maximizing code reuse. \nIs all of this shared info across the targets stored in associated values of the enum? If it's not you could consider creating a protocol that sits a level above your individual TargetTypes and provides this information.. @matthewweldon I was asking about the associated values is that those can't be shared via a protocol, but your \"Parameter vars\" section looks like something that could be nicely extracted into a protocol that sits above your TargetType.. @sunshinejr I think the discussion tag is a great idea because I couldn't find a fitting label for this.\nI'm still having trouble wrapping my head around having a plugin that's responsible for headers and url parameters. What happens if we want both of them on a single request? \nLooking at option (4.) we can only return a single case of .header or .parameter.\nI realize (5.) is a little out of scope for what started as a simple issue, I would be fine going with an easy/temporary fix to move things forward. \nBut I do think this issue starts to address an underlying issue with plugins. They seem to be brittle and not easy to combine/extend. I'd like to spend some time looking at #1123 too.  \n. I have to review my own thoughts here because I lost the the \"deep\" understanding I had regarding the problem.\n@AndrewSB I'm not sure if supporting reactive plugins makes sense if we don't also provide a non-reactive component in the core library.\nHowever, I do agree with you about the current plugins not encouraging the best use of Moya's API. Personally, I have never used the AccessTokenPlugin either -- which may further demonstrate the point above.. @ffittschen Thanks for this feedback \ud83d\udcaf I agree 2 is more scalable than 1 and 3. The reason I suggested 5 is because I tried to look at things from one level above the AccessTokenPlugin. \nI wasn't active in Moya when this plugin was created but I'm going to make the assumption that it was designed to reduce repetitive code among TargetTypes for requests the require some form of authentication. \nThis makes me believe that a core underlying issue that plugins should aim to solve is code re-use among the target types. . @sunshinejr I think we can move forward with that approach. Trying to re-evaluate the plugin system isn't really getting us anywhere (and I've been less active recently). I think we've delayed solving this long enough as we've already had ~3 PRs requesting different prefixes.\nI think the idea is solid, not too fond of the tuple to be honest. I think a typealias or wrapping it in a struct may be useful.\nWould like to hear @ffittschen 's thoughts or any others. @ffittschen What about the tokenClosure causes a roadblock for you and do you have any ideas as to how we can resolve that issue?. @sunshinejr Can we agree that this should not be a blocker for Moya 11.0? I think we have enough breaking changes in development to move forward with a beta release. I can work on this in the next major version.. I'm not sure if \"improving plugins in general\" is necessary @ffittschen. It's hard to get an active discussion on the topic and we shouldn't break things on a whim. Part of naming the issue this way was I was looking at this issue from a higher level. I think the underlying problem is not that people want to authorize requests, but rather that they want to reuse headers and or parameters across multiple providers.. I'm going to close this because I don't think introducing this level of complexity via plugins is a good fit for Moya. I may write up some examples of how to achieve some of the things discussed above. If anyone wants to continue the discussion feel free to reopen.. @arjunnaha Can you cast the error to a MoyaError?. Do you have Moya imported? \ud83d\ude05 I'm rusty on my RxSwift. Hey @xaverlohmueller,\nI ran into this several weeks ago. Solution 1 does not work without a little more effort. It seems that you can't override dispatch between two different target modules. In order to make this work, you would also have to provide your own endpoint function inside of the test target\nSee if this comment helps you and let me know\n. Yeah, there's an issue requesting that feature here. It's been 4 years already so I don't think it's coming anytime soon \ud83d\ude2d I really want it though. Unrelated to the PR:\n@sunshinejr I tried tackling some of the 10.0 tasks yesterday but was having trouble building the project + it's dependencies. I'm going to try again tonight. I should just have to switch to the 10.0.0-dev branch and run carthage bootstrap again?. This is merged into 10.0.0-dev so closing this. Thank you @devxoul \ud83d\udc4d!!. Build Error:\nResolving dependencies of Podfile\n[!] Due to the previous na\u00efve CocoaPods resolver, you were using a pre-release version of RxSwift, without explicitly asking for a pre-release version, which now leads to a conflict. \nPlease decide to either use that pre-release version by adding the version requirement to your Podfile (e.g. pod 'RxSwift', '= 4.0.0-alpha.1') or revert to a stable version by running pod update RxSwift.\n. @AndrewSB I grabbed the error from the build log so you don't need to go hunting \ud83d\ude03 \n/Users/distiller/Moya/Sources/RxMoya/MoyaProvider+Rx.swift:64:17: value of optional type 'Cancellable?' not unwrapped; did you mean to use '!' or '?'?\nAlso, we have started to formalize the CHANGELOG guidelines. I noticed you added this under the Changed section but it could be better under Fixed. Assuming this behavior was incorrect. There's a lot of discussion going on in the other thread and I got lost.\n. Great, thanks for clarifying. Are we going to remove these in Moya 10.0? I assume we only leave things deprecated for 1 major version? . @sunshinejr I can submit a PR removing these if you'd like. They're blocking my fun \u2639\ufe0f \nSome other things:\n1. Are these two tests identical? Test One and Test Two.\nI can remove both if so. Just want to make sure we're not missing something.\n\nWhat's the replacement for the stubScheduler property of ReactiveSwiftMoyaProvider? \n\nAre we requiring that users override the stubRequest method of MoyaProvider to use a scheduler?. Yes closing this for now \ud83d\udc4d . @sunshinejr I'm a little confused about the refactoring that needs to be done to remove the two abstractions. It requires I prefix all MoyaProvider methods with .rx.base & .reactive.base then.\nI tried moving the methods back into extension Reactive where Base: MoyaProviderType but have problems regarding capturing self on a non-class constrained type.\nFeel free to take over if you'd like. I teared up when I saw this PR this morning \ud83e\udd23 I think that having Chinese documentation is great! Anything that makes Moya more accessible to different developers is fine by me.\nIn regards to maintenance, it may be good to note that the Chinese documentation may not always be up to date and I think that our English documentation should only be a blocker for a breaking change.\nLike Ash said, I'm sure our Chinese-speaking contributors will jump in and join the effort to keep things up to date.\n@Moya/contributors and watchers: If you speak Chinese give this comment a \ud83d\udc4d so we can see how many contributors are fluent in the language \ud83d\ude03 . We could possibly add a task for someone to rewrite the CHANGELOG using our new guidelines?. @afonsograca Thank's for giving this a shot. There's an open PR #1326 regarding this. It will be a difficult one to work out. As you mentioned, I don't believe making the entire Task type generic to support a single case is the right solution.  Hopefully, I can look into this more sometime this week. . Hey @LeLuckyVint, I just wanted to check if the status has changed on this one at all. It's one of the last things left to do for v10.0 \ud83d\ude03 Thank you!. @wieweb Thank's for raising this issue \ud83d\udc4d You're responsible for adding your own headers. This is why the headers property is declared on TargetType without any default implementation. \nI'm not sure that passing the headers inside of Task is a good idea. I think it's far more flexible to be able to set this through the headers property.. @devxoul \ud83d\udcaf Thank you for implementing this, you're a life-saver \ud83d\udc4d Thank you for writing tests too!\nI can help with updating any docs that revolve around these changes.\nI do like @sunshinejr's suggestion of naming the method map(to:) over mapObject. Object seems redundant and intuitive. I also like shorter names. However, I do like keeping the external parameter names the same as the original method:\nSwift\nfunc map<D: Decodable>(to: D.Type, atKeyPath keyPath: String? = nil, using decoder: JSONDecoder) throws -> D\nThe reason being is because this method reads as fluent English using the atKeyPath and using parameter names. \ud83e\udd14\n\ud83d\udeb2 Shedding\n\n\ud83d\udc4d on using a default decoder argument as well. @devxoul \ud83d\udcaf Thank you for implementing this, you're a life-saver \ud83d\udc4d Thank you for writing tests too!\nI can help with updating any docs that revolve around these changes.\nI do like @sunshinejr's suggestion of naming the method map(to:) over mapObject. Object seems redundant and intuitive. I also like shorter names. However, I do like keeping the external parameter names the same as the original method:\nSwift\nfunc map<D: Decodable>(to: D.Type, atKeyPath keyPath: String? = nil, using decoder: JSONDecoder) throws -> D\nThe reason being is because this method reads as fluent English using the atKeyPath and using parameter names. \ud83e\udd14\n\ud83d\udeb2 Shedding\n\n\ud83d\udc4d on using a default decoder argument as well. Wow, very interesting @phimage. Maybe we can keep the type constraint on the reactive methods and drop it on the normal Moya.Response method? I also wonder how obvious it will be that you need to specify the type explicitly \ud83e\udd14. Wow, very interesting @phimage. Maybe we can keep the type constraint on the reactive methods and drop it on the normal Moya.Response method? I also wonder how obvious it will be that you need to specify the type explicitly \ud83e\udd14. @devxoul It's most likely because of #1292. Looks like the Xcodeproj was corrupted in the rebase. I believe I fixed it on a local copy if anyone needs it. It's essentially copying the project.pbxproj off of master and deleting the two references to RxMoya+Availability & ReactiveMoya+Availability.\nEDIT: I didn't see your post \ud83d\ude05 Resolving the conflict via GitHub should fix it~. Same changes I made.. This does require a change to the rarely viewedErrorTypes.md but it can be done when we provide some sort of example documentation for the response decoding.. @devxoul \ud83d\udc4d on updating ErrorTypes.md. About the CHANGELOG entry, I think that adding MoyaError.objectMapping(Error, Response) is a breaking change because the MoyaError enum will no longer be considered exhaustive in some cases. Could you add an extra entry for this change?. @AndrewSB I think all open PRs targeting 10.0.0-dev were closed upon deletion of the branch. . Wow, I wonder if pulling out the nested switch statement in an earlier PR contributed to removing the cyclomatic complexity warning. Thanks for doing this @AndrewSB \ud83d\udc4d I wanted to get rid of that for awhile.. Wow, I wonder if pulling out the nested switch statement in an earlier PR contributed to removing the cyclomatic complexity warning. Thanks for doing this @AndrewSB \ud83d\udc4d I wanted to get rid of that for awhile.. Sorry, computer experienced a major lag (yes on GitHub \ud83d\ude05) and I accidentally closed this.\nIt looks like it can be closed anyways though. Sorry, you had to resolve this by upgrading to Moya 9.0 @ninasaveljeva but we hope you like the new version!. Sorry, computer experienced a major lag (yes on GitHub \ud83d\ude05) and I accidentally closed this.\nIt looks like it can be closed anyways though. Sorry, you had to resolve this by upgrading to Moya 9.0 @ninasaveljeva but we hope you like the new version!. Does anyone think that maybe we shouldn't discuss stubbing in Basic.md? It's the most viewed file for all of Moya's documentation. I've always considered it a Quick Start guide -- or the bare necessities to get Moya up and running.\nWe have issue #1001 open regarding more documentation around stubbing. I had assigned myself and suggested creating a Testing.md or Stubbing.md doc but never got around to it \ud83d\ude05 I think I was planning on writing it after any changes were made to Moya's stubbing API . Does anyone think that maybe we shouldn't discuss stubbing in Basic.md? It's the most viewed file for all of Moya's documentation. I've always considered it a Quick Start guide -- or the bare necessities to get Moya up and running.\nWe have issue #1001 open regarding more documentation around stubbing. I had assigned myself and suggested creating a Testing.md or Stubbing.md doc but never got around to it \ud83d\ude05 I think I was planning on writing it after any changes were made to Moya's stubbing API . @sunshinejr We do something similar with the Moya.Response extensions at the end of the document. We could also link to Stubbing.md once we have one.. @sunshinejr We do something similar with the Moya.Response extensions at the end of the document. We could also link to Stubbing.md once we have one.. @afonsograca I just wanted to check up on the progress on this one. No pressure if you don't have enough free time! Just let us know \ud83d\ude03 . @afonsograca I just wanted to check up on the progress on this one. No pressure if you don't have enough free time! Just let us know \ud83d\ude03 . I'm going to close this one as it seems to have gone stale. We have issues #1001 and #632 tracking this. Tagging them to keep track of any extra details discussed here. . I'm going to close this one as it seems to have gone stale. We have issues #1001 and #632 tracking this. Tagging them to keep track of any extra details discussed here. . I think this is great and a good way to handle both PRs. I do think this is better being listed as a breaking change because you are breaking the exhaustiveness of two enums \ud83e\udd14 . @sunshinejr Yeah, I didn't know if the policy was to keep a single entry per PR or to add multiple entries when dealing with an addition + a breaking change. I notice we didn't mention the new error case in #1335 as well.. This was closed in #1367. Hey @mazz, in Moya 9.0 we condensed task and parameters into a single property.\nCan you take a look at Moya 9.0 Migration Guide and let me know if you have any questions after this? . @mazz Do your requests have parameters? If they do you need to use:\n.requestParameters and provide the parameters and parameter encoding as associated values.. @mazz Glad we could resolve this for you. You might want to check out Targets.md and Basic.md for examples on using .requestParameters.. @BasThomas I think that's a great idea. Are we only concerned about the README or are we talking about all documentation in general?\nWe could have an issue: Changes in English docs not reflected in Chinese docs\nThen we could reference that issue in any PR that modifies the docs. We could even write a danger rule to remind us \ud83d\ude09. @BasThomas I had to step away for a bit but can create that issue later unless you\u2019d like to first.\nRe: Danger - instead of having it remind us, if it had the Issue # we were using for tracking. Couldn\u2019t the bot just reference it? It\u2019s still probably better for us to organize that information \nSent with GitHawk. @BasThomas I was kind of treating the MigrationGuides.md like we do a CHANGELOG.md. I wouldn't mind separating these documents and creating a folder for it.\nHowever, I don't think we should remove them or point to them in other branches/earlier commits. I think that migration guides are relevant for several major versions, possibly up to a years time \ud83d\ude15 Therefore, I think they should be very easy to find. @BasThomas I created a folder to host all the migration guides. Let me know what you think. @sunshinejr I made the discussed changes. Also, let me know if the Endpoint entry is clear now.. @Moya/contributors If any of you speak Chinese and have some spare time, we could really use some help to sync up our English docs and Chinese docs. You can see what needs to be done above.\nIf I had to prioritize things:\n- Add Moya 10 to 11 migration guide\n- Add ValidationType to TargetType #1505 . @bestwnh No need to be sorry! \u4e0d\u8981\u7d27\u3002\u8c22\u8c22\u4f60!. Hey @0111b, thank you for submitting this PR. I was able to review it and now I understand what you mean. I just wish the solution didn't have to be so heavy-handed \ud83e\udd14 \nIt was my hopes that Moya really didn't have to manage anything related to Decodable outside of the Moya.Response class as this is not the library's core focus. I'll wait for some more qualified Moya contributors to shed light on this issue. @Moya/contributors Can we get a few extra eyes on this pull request? To summarize things, this addition would eliminate a roundtrip from data -> object -> data when decoding using a keyPath.\nWhile I don't believe it's Moya's intention to specialize in response decoding, I feel it hard to ignore a potential performance win. We also already have a simple struct wrapper around Encodable. . Thank you to everyone who jumped in and gave input. As someone who is guilty of premature optimization himself, I agree that performance tests are the most logical path forward.\n@0111b I would take a look at how long the response decoding on several different sized responses using a measure block in XCTest. I would also look at CPU usage with the Time Profiler in instruments. This is also something I can do this weekend. . Hey @lovesomeone, great question \ud83d\ude03\nI usually wait for a couple Moya Core Team members to approve my pull requests before merging. Personally, I never merge my own PRs \ud83d\ude05 \nIt's good to get a few pairs of eyes on everything if possible. I know this is related to Chinese so reviewers are sparse, but @BasThomas was still able to give some feedback.\n. I'm dying because Lukasz is answering the questions and Bas is getting all the pings \ud83e\udd23 \ud83e\udd23. I added a comment but it was showing as being posted twice. I deleted one and now both are gone after a refresh. Thanks GitHub \ud83d\ude10 . @bjarkehs This is awesome \ud83d\udcaf! I'll be able to do a better review later but these are my thoughts at first glance:\n\nI think we should talk about Moya's use of the Result type and how the .success case contains a Response and the .failure case contains a MoyaError.\nI think less of the document should be focused on explaining Codable/Decodable to the user and more focused on how this specifically relates to Moya.\nI would like to see more on response status code filtering and other extensions\nIt may be good to discuss the properties of Response in general\n\nFeel free to make any changes around these points. I totally understand if I'm throwing you a lot. We can always add more to this document over time.. I completely agree with having both required code reviews and passing CI builds. At the very minimum code reviews. \nYou can add specific individuals who are able to override these requirements in the case of it becoming a nuisance. If CI starts acting up then we can just temporarily disable it as a requirement.. I really wish GitHub had decided to use Starter Task \ud83d\ude22\nSent with GitHawk. I don't think this made it in the release. To be honest, I was having trouble removing the abstraction while keeping the same API. My RxSwift skills have grown a bit rusty.. This has been closed in #1399. Hey @mwapptest,\nCan you do pod update and then try pod install again?. SD10 Bot Has Commented \ud83d\ude02:\n\u274c  fatal error: URLEncoding is disallowed as bodyEncoding.: file /Users/distiller/Moya/Sources/Moya/Endpoint.swift, line 95. Hey @xuech,\nYou're receiving the Xcode error because Array(endpoint.parameters!.values.map { $0 }) results in an array and the httpBody property accepts Data?.\nCan you achieve what you want to do without creating a requestClosure and using the other properties of the TargetType protocol? You can check the docs for TargetType in Moya 8.0 here.\n . This is related to #1283. Yeah, we can close this if you'd like \ud83d\udc4d. I was just trying to get a vision/start some discussion of what 11.0 would look like. I'm fine with testing out the GitHub projects too. \nI see @AndrewSB set us up with an initial structure. I think this is good but mainly represents the concept of a backlog. Do we also want to track the states of these tasks?\n- In Progress\n- In Testing\n- Merged (Next Release)\n- Merged (Master)\nWe could also add a column for all documentation related tasks?\nEDIT: I've changed the subject of this issue to represent GitHub project management since we're all talking about it now \ud83d\ude0e . So sorry @BasThomas, I prematurely changed the discussion here without your feedback \ud83d\ude2d My apologies. Just a bit of record keeping. The GitHub project management wasn't that helpful for the latest release.. Does anyone mind if I close the existing GitHub project? We haven't been using it and I don't find it helpful personally. I'd like to continue with project management via milestones.. Discussions take place in:\n905 Providers that are deallocated never completes\n1267 Objects with RxMoyaProvider are no longer retained in 9.0\n1294 Fixing potential issue with RxSwift request method\n1311 Stop retaining self in rxReuestWithProgress. @AndrewSB Thanks for starting this discussion \ud83d\udc4d I am a bit confused as to what you're trying to accomplish. Are we talking about having network requests that return decoded objects instead of the response?. I'm really anxious to discuss this more because I built something similar for my own networking layer (based on Moya) a few months back. I never made the suggestion because I thought it was out of scope.\nUnfortunately, I deleted the project in a recent cleanup \ud83d\ude2d It is possible but like @sunshinejr mentioned a nice API is key. I had a critical design decision where I either had to make TargetType generic or lean too heavily on Any. I think I also explored some sort of type eraser / wrapper object.\n@AndrewSB Can you make that returnType property return something like an AnyDecodable wrapper?\nWe need a way of specifying which types can be decoded from a TargetType. We can lean on the Moya.Response decodable extensions if the AnyDecodable idea works. If not, we may need some protocol like TargetTypeDecodable for users to adopt on their models.. @tosbaha Can you give us the line where the error occurs?. Hey @tosbaha,\nI'm really sorry that you feel like the Moya contributors haven't given you the help you need. I can assure you that we all do our best to answer any question that's asked, but it takes a large effort to answer several new questions daily while maintaining the core library. I believe if a Moya contributor is focusing on a seemingly \"trivial\" task while you have an outstanding question, it is likely that the contributor only has enough time to resolve that simple issue.\nThat being said, I feel like your question is more related to the use of RxSwift and the Swift compiler than it is directly related to Moya. . Hey @tosbaha,\nI'm really sorry that you feel like the Moya contributors haven't given you the help you need. I can assure you that we all do our best to answer any question that's asked, but it takes a large effort to answer several new questions daily while maintaining the core library. I believe if a Moya contributor is focusing on a seemingly \"trivial\" task while you have an outstanding question, it is likely that the contributor only has enough time to resolve that simple issue.\nThat being said, I feel like your question is more related to the use of RxSwift and the Swift compiler than it is directly related to Moya. . Hey @DirtyDann, I'm going to close this. Feel free to re-open if you have a question \ud83d\udc4d . We need to add a CHANGELOG entry for this under Fixed.\nFor anyone who is interested this is the intended behavior so crashing instead of throwing is not a bug.\nUsing isValidJSONObject will protect us from this \ud83d\ude03\n. @ufosky We add new changelog entries under the Next Release section without a specified version. \nYou can refer to our changelog guidelines if this helps \ud83d\udc4d . @ufosky The current decoding method should handle a case where the key is invalid, correct? We could consider propagating a more descriptive error regarding which point in the process the decoding failed, but I don't think we need the overhead of an additional method.. @ufosky You can always just resolve this conflict on GitHub. It's just a CHANGELOG conflict. We need to keep the both of them. It will be a little easier to rebase once you don't have to work from a fork \ud83d\ude05 . Thanks for jumping in so quickly @freak4pc @sunshinejr and of course @ufosky for the great work \ud83d\udc4d . @SeRG1k17 I think you can use two different providers, each with a different plugin for your request. We have an open PR for updating the AccessTokenPlugin. Maybe you would like to review the PR and provide any input there\nSent with GitHawk. The downside of not putting patches on master is they're not available until we make another release. I'd be fine with this workflow, I'm in the process of trying to adopt something similar on a project of my own. \nI do have questions about point 2 though: How easy is it to pick commits for master off the development branch?. Sorry, my replies to issues when first waking up can be pretty terrible I'm realizing \ud83d\ude05\n@BasThomas If someone installs the latest Moya from master then they get all these bugfixes/internal enhancements out of the box. If the fix is on some separate branch, they're not available until we make a new release. They could point to the development branch but it wouldn't be stable like master is.. @sunshinejr Yes this sounds like the ideal approach IMO \ud83d\udc4d . This is becoming a difficult discussion. I think what I have in mind is simple but may be naive:\n- master <- documentation, bug fixes, non API breaking changes \n(this could technically include features that are: tested, non-api breaking, additive)\n\ndevelop <- anything that breaks the API, requires a major version. This is an evaluation I did on my fork (I don't know if you all can view it):\nhttps://codebeat.co/projects/github-com-sd10-moya-master. This is related to #1357. We need to update the Chinese docs to reflect the changes for the urlRequest() method of Endpoint.. Hey @zichenJack,\nPlease check out the Moya 8.0 -> 9.0 migration guide and let me know if you have any questions after that \ud83d\ude03 . @zichenJack I'm going to close this issue. Let me know if you have any other questions \ud83d\udc4d . @jgongo Thanks for reporting this \ud83d\udc4d Are you talking about #1382? This has been resolved in Moya 10.0. We have an official major version now, so you can upgrade from beta \ud83d\ude03 . I just did a roundtrip swap on the target branch of this PR and it seemed to remove a lot of the excess commits in this PR. I don't know if we want to squash the commits further but the changes LGTM. This was resolved in #1421. @ufosky Can you use TargetType's two propertiesbaseURL & path to form the absolute URL? You could add an extension to TargetType to make this easier for you across all of your targets.. I just remembered that Moya also has a URL extension to initlaize a URL with a TargetType. You can check out the source file for this. It could help \ud83d\ude03 . Sorry @ufosky you're right. I'm not sure of any easy way of doing this at the moment. The final URLRequest is constructed through the Endpoint class \ud83e\udd14. This seems to be a more pressing issue as of lately. I can never get builds to pass on CI because of these tests.. @sunshinejr Sure, what do you think is a reasonable timeout interval? I'm thinking 10 seconds. I guess I can experiment until it works again \ud83d\ude13 . Not even 10 seconds is enough \ud83d\ude13 Need to give this one a deeper look tomorrow. But getting CI green again should be a top priority.. @sunshinejr Think we can comment out the failing test? There are 6. I'm not sure if there is a deeper problem but sometimes only 3 fail locally for me. So I think it's a network problem. We need to get CI green again.. Thanks for doing this @lovesomeone \ud83d\udc4d . Hey @hamda147,\n\nWhy do you need a synchronous request? It's not recommended to do network requests synchronously. I guess you could use DispatchQueue.main? I'm not sure, to be honest :neutral_face:. @hamada147 Can you give me more context as to why you need to perform the request synchronously?. @hamada147 You can nest your requests so that you can still perform everything asynchronously.\nSwift\nprovider.request(.zen) { result in\n    switch result {\n    case .success(let response):\n         // launch next request\n        provider.request(.zen) { result in\n            switch result {\n            case .success(let response):\n                // add 3rd request here\n            case .failure(let error):\n                // failure code\n            }\n        }\n    case .failure(let error):\n        // failure code\n    }\n}\nThe code gets a bit messy but you can look into using some sort of abstraction like a Promise to make it more readable.\nhttps://github.com/mxcl/PromiseKit. @canny09 Can you share:\n- the code for the request \n- where you are holding the reference to the provider\n- your target case for the request\nYou can also set a breakpoint at: MoyaProvider+Internal.Swift, Line #241 at the didReceive callsite.. @canny09 This is a lot to take in for me, but it looks like the problem isn't in Moya or plugins specifically. I don't think your request is returning a response in general?. @ninasaveljeva Can you wrap the call to the MoyaProvider in a throwing function then propagate the errors in the failure case? You can then handle them at the call site of the wrapper method. Sorry if this isn't what you wanted to accomplish \ud83d\ude1e . @ninasaveljeva I'm not sure if this compiles but maybe its a step in the right direction?\nSwift\nfunc someRequest(completion: (Result<MoyaError, Moya.Response>) throws -> Void ) {\n    provider.request(.zen) { result in\n        completion(result)\n    }\n}\nThis post also looks promising:\nhttp://alisoftware.github.io/swift/async/error/2016/02/06/async-errors/\nSorry I'm short on time -- but if you can't resolve it I'll investigate further \ud83d\ude04 . Hey @asasdasasd,\nThose types are available in Moya 9.0. We're on Moya 10.0 now so I recommend you upgrade to the latest version \ud83d\udc4d . @asasdasasd You're using 3.0 or 3.2? I think you should be able to use Moya 9.0 but I'm not entirely certain.. Hey @asasdasasd,\nThese are the docs for Moya 8.0.5 if you're unable to convert. Hey @levibostian,\nThanks for taking the time to write this up \ud83d\udc4d. \nI just want to clarify: Are you suggesting we make the localizedDescription more readable in a sense that the error message will be displayed in an UIAlertController to the users of the application?\nIf so, these errors are not meant to be displayed to users, they're for the programmer to debug the app. An error message requires a very specific client-side implementation.. Hey @JohnTheBastard, we usually wait for ~2 people to approve any given pull request before merging. I don't know anything about Carthage so I can't sign off on this but I'm sure another qualified Moya contributor will give their input when available. Hey @evgeny-sureev, thanks for doing this \ud83d\udc4d I think this PR is better targeted at development because the addition of a new Task case is an API breaking change. However, I see that development needs to be updated to reflect master.\nIf you could also take care of some of the SwiftLint errors that would be great \ud83d\udc4d The first one is regarding complexity so I'm not sure how easy it is to resolve. I'm not sure I agree with this approach. We're avoiding adding another enum case (technically replacing an existing one) by adding a static method. \nI don't think there is anything to gain here, we're simply moving the definition from the case level to the method level and making the API less intuitive.\nI also really dislike that the default name of this task is now requestCustomJSONEncodable\n. @Istered I'm not worried about breaking the API, breaking changes are inevitable and this requires a very simple migration.\nSwift\n// These may \"do\" the same thing but the way they are defined have implications\nreturn .requestJSONEncodable(...)\nreturn .requestCustomJSONEncodable(..., JSONEncoder())\nWhat bothers me is there is no value in defining requestJSONEncodable(Encodable, encoder: JSONEncoder) as a static method.\n\n\nIt's true that there will be 1 less enum case but the code footprint is no smaller, it actually takes more code to define a method.\n\n\nIt makes the API non-intuitive, Task.requestJSONEncodable looks like an enum case to the user but it is really a method that returns a Task.requestCustomJSONEncodable.\n\n\nWe no longer get the added benefit of exhaustiveness for having this defined as an enum case. You won't be able to differentiate between Task.requestCustomJSONEncodable and Task.requestJSONEncodable.\n\n\nI think we should solve this problem 1 of two ways:\na) We make one case requestJSONEncodable(Encodable, encoder: JSONEncoder) and the user just has to use a boilerplate JSONEncoder() or create their own convenience property.\nb) We have two cases: requestJSONEncodable(Encodable) and requestCustomJSONEncodable(Encodable, encoder: JSONEncoder). @evgeny-sureev Can we revert the last commit and move forward on merging this? That would be in line with option (B) I mentioned in my previous comment. Unless any @Moya/contributors disagree with me of course. @sunshinejr I agree that adding another case best matches the existing request/parameter encoding API. It doesn\u2019t make sense to treat encodable requests any different. If we\u2019re not going to require users to specify parameter encoding on every request then we shouldn\u2019t require them to pass a JSON decoder (which is more likely to remain constant).\nSent with GitHawk. @evgeny-sureev Thanks \ud83d\udc4d It looks good to me. If you could just two do more things:\n1) Fix the SwiftLint warning\n2) Add a CHANGELOG entry under Added, this is a breaking change. @evgeny-sureev I don't see a good way to fix that one. When I made my comment Moya had not updated the comment from the results of CI. The build was failing so I restarted it. @evgeny-sureev Sure that would be fine by me. It looks like there are 39 failing tests on CI. We made some improvements here in Moya 11.0 with PR #1505 . Hey @amaurydavid thanks for submitting the PR \ud83d\udc4d I think this is an enhancement I can get behind. Hey @amaurydavid thanks for submitting the PR \ud83d\udc4d I think this is an enhancement I can get behind. @amaurydavid Are you sure that is what is happening? Can you try to use a different default like successCodes to verify?. @amaurydavid The problem is probably related to using String(describing:), we shouldn't test it this way. @amaurydavid I could be wrong but I can\u2019t replicate the functionality you described. However, when using String(describing:) I can replicate what you are experiencing\nSent with GitHawk. @amaurydavid Any progress here? How did you implement Equatable conformance?. @amaurydavid Can you check the enum case without using Quick/Nimble by using a switch statement?\nswift\nswitch target.validationType {\n/// ...\n}. Ok @amaurydavid I can take over if you'd like and finish this (if the feature is possible) this weekend.\nAre you okay with that?. @nikhileshRayapureddy I'm going to close this as it's just merging branches. Hey @bweickert, \nI think you need to be keeping a reference to your MoyaProvider outside of the function body\nDocs: https://github.com/Moya/Moya/blob/master/docs/Providers.md\nRelated: https://github.com/Moya/Moya/pull/1386. Hey @ReverseScale,\nCan you write an extension on the Task enum that switches on self and returns parameters, if any?\nSent with GitHawk. @ETmanwenhan It looks like you're not retaining your MoyaProvider:\n\nAlways remember to retain your providers, as they will get deallocated if you fail to do so. Deallocation will return a -999 \"canceled\" error on response.\n\nhttps://github.com/Moya/Moya/blob/master/docs/Providers.md. Hey @ETmanwenhan,\nI'd retain your DisposeBag in the same place you retain your provider, this way they're released in sync. @BasThomas Can we send this through? \u26f5\ufe0f . Hey @ZHDeveloper, thanks for opening this issue. \nCan you try providing a keyPath to do the mapping or use try with a do/catch block to see where the error occurs?\nIt looks like Moya does the mapping without a specified keyPath like this:\nSwift\n            // Key path was not provided, parse entire response as string\n            guard let string = String(data: data, encoding: .utf8) else {\n                throw MoyaError.stringMapping(self)\n            }\n            return string\nI'd have to test but I wonder if that fails for JSON objects.. Hey @ETmanwenhan,\nAre there two requests or is task just being called twice? TargetType serves as a representation of the requests, therefore, Moya may need to access some of this information multiple times internally when creating a request.\nSent with GitHawk. @ETmanwenhan No it will not, it looks to me like only one request is being logged in your debug output. Sometimes Moya just needs to access this information multiple times, it doesn't create multiple requests every time it is accessed, there are no side effects. Hey @eastsss, this is definitely something we need to do. Do you know if 3.0.0 has any breaking changes that affect Moya? We would be open to a PR with the upgrade\nSent with GitHawk. This is a duplicate of #1468 but thank you @larryonoff . We may have to update the Package.swift as well. I'm also unsure if this should go into master or development. If master, we could do a minor patch release including the bugfixes we've merged.. I've changed this from master to development because this change will go into Moya 11.0. The excess commits look scary but it's only because we need to merge the commits currently on master into development. Then they should all disappear.. @sunshinejr I think putting the upgrade to ReactiveSwift 3.0 is fine, but then we may want 11.0 to be a lot lighter than usual because a few people are already asking about this.\nI noticed a lot of issues around Carthage lately as well. I need to reduce the technical knowledge debt in this area because I\u2019m useless on the subject \ud83d\ude05 \nSent with GitHawk. Hey @arjunnaha,\nI don't think there is a right or wrong way to use a provider. It ultimately depends on the behavior you'd like to have. If you create a 'global' instance or something like a singleton then that provider will have an infinite lifetime. Personally, I prefer to tie the lifetime of the provider to the object using it. Hey @RiuHDuo,\nI know Moya 10.0 uses ReactiveSwift 2.0.0. Could this possibly be the issue?. Hey @DrewKiino, I'm going to close this because it's a duplicate of #1470. But thank you for taking the time to make this pull request \ud83d\udc4d . In #1283 I talk about creating a plugin that allows parameters to be reused across multiple providers in point 5. This is not something I've tried to implement myself but it may be possible.. I\u2019d like this to remain open\nSent with GitHawk. @RiuHDuo I'd advise against this. What kind of complex computation are we talking about here?. Hey @biboran, thanks for submitting this issue \ud83d\ude03\nA few of my thoughts:\n- The casting behavior was present in Moya 8.0.2.\n- An assert() could work, but plugins are applied through the Moya provider, which can accept multi targets and not all targets are AccessTokenAuthorizable.\n\nIt introduces unnecessary hidden coupling, breaks encapsulation, and makes it impossible to understand the behavior of AccessTokenPlugin without looking at the documentation (which I didn't find) or the source code.\n\nI do agree it would be quite difficult to infer this behavior without looking at the documentation. You can find the documentation for the AccessTokenPlugin here.\nCould you help me better understand what kind of problem you ran into before we discuss adding an AccessTokenAuthorizationSource? \nThe plugin is already getting quite complex, due for a refactor in #1283, and this introduces some coupling I'm not fond of \ud83d\ude15 . @biboran After comparing the 8.0.2 and 10.0 sources I can see the issue clearly. \n\nIn Moya 10.0 we return early using a guard statement so the \"Authorization\" header is never applied. \nIn Moya 8.0.2 we use an if let statement which continues to execute the scope after the failed cast.\n\nI now remember I made these changes because I didn't think we should opt into any default behavior. \nI wanted users to explicitly have to conform to AccessTokenAuthorizable when using the AccessTokenPlugin.\n. cc @sunshinejr \nIf you're going to take on the issue regarding improving the AccessTokenPlugin this is something to look at. \nShort summary is: \nMoya 8.0.2: AccessTokenPlugin applies header by default, conforming to AccessTokenAuthorizable only allows you to decide whether header is applied\nMoya 11.0: AccessTokenPlugin does nothing by default. You must conform to AccessTokenAuthorizable for the plugin to take effect.. Coverage has increased to 92% in Moya 11.0. That's pretty much as good as it will get without writing boilerplate or trivial docs for the sake of completeness. I'm still going to keep this open because I think we can improve this still. See comment above ^. I'm tagging #1539 because I think it's an issue that will help me better analyze potential cons with this approach.. Revisited this today with an even better understanding of Moya's internals.\nCurrently, to stub a request in Moya you have to configure the stubbed request in 3 different places:\n1. You need to provide sampleData in the TargetType protocol\n2. You need to provide a StubBehavior through the stubClosure property of MoyaProvider\n3. You need to provide a new endpointClosure to a MoyaProvider if you want to manipulate the mapping of a TargetType to EndpointSampleResponse\nI think the drawback of this approach is it requires so much configuration in many different places throughtout the library. This also results in intertwining testing logic with the business logic of your codebase.\nFurthermore, stubClosure and endpointClosure both take in a TargetType as their only parameters. \nI think this alludes to the behavior that people really want: to customize behavior per TargetType.\nSo, this PR aims to address this issue by making all these things configurable in the TargetType directly. Looking for any feedback from @Moya/contributors again\n. @gligorkot Thanks for the feedback \ud83d\udcaf This does in fact address #1126 and I agree it's a worthwhile change.\nIt allows greater flexibility, a better separation of concerns, and would allow us to remove MoyaProvider's closure based customization in favor of plugins (should we choose to do so) in the future.\nI do plan on fixing this up, however, I just started a new job so my time for open source has significantly decreased. Over the next month, I will be moving our apps networking layer to Moya, so after that, I will look at this again.\nIf the Moya community accepts this proposal, I don't see this change being made until Moya 13.\nIn the meantime, if you want to move your tests to the test target this work around could work?\n```Swift\n// In your app target\nextension TargetType {\n   var data: Data { return Data() }\n}\n// In your test target\nextension YourObjectThatConformsToTargetType {\n    var data: Data { \n          // return your real data here\n    }\n}\n``\nThis should work because the extension on your object will override the implementation provided on theTargetType` protocol.. Hey @amaurydavid, thanks so much for taking the time to review this \u2764\ufe0f Unfortunately I can only give a brief response.\n\nAs I see it, there are 2 main usages of request stubbing: creating unit tests, and having a placeholder content for a soon-to-be-live route of our favorite API.\n\nI think this is a really good way of summarizing things \ud83d\udc4d \n\nFor the first case, this solution is functionnal: just replace TargetType by TestTargetType in the mock target, implement the 2 new properties, and if needed, also replace MultiTarget by MultiTestTarget.\n\nIt is a bit concerning that you would need to replace MultiTarget with MultiTestTarget. Unfortunately, that downside is related to the abstraction of MultiTarget itself\n\nAs of the second case, it's more a boilerplate. Let's say you start with a target without stub, and you want to support a new route that will be released soon:\n- replace TargetType by TestTargetType\n- implement the 2 new properties\n- replace MultiTarget by MultiTestTarget if needed\n- And then, when the API is live, you'll have to remove the stubbing code:\n\nGood point, but I think there's always some overhead around mocking an API. I would probably leverage some compiler directives so that the TestTargetType conformance is only implemented when using something like a development/staging/qa target\n\nSpeaking of temporary stubbing, could you consider making the sampleResponse being Optional? It would prevent having to return Data() for a route using StubBehavior.never. Or even better to me: merging those 2 properties by having the Data as associated value of the StubBehavior (as proposed on #1754 ).\n\nThe idea of combining the two is interesting! I briefly reviewed that issue but would have to explore the implications of this further.\nThanks for giving me a bunch of things to think about! \ud83d\udc4d \n. I gave this some thought and I think it makes sense to change this to a static property. Do any other @Moya/contributors have some input on this subject? I only joined the project recently so I may be missing context..  @freak4pc Thanks for mentioning the repercussions for those relying on this behavior. I had similar concerns, less so because the method is marked public, but more so now that I realize someone could wrap this call in another function making modifications or modify the property of the provider directly. \ud83d\udc4d \nI want to say that this should be made a static var but after @ashfurrow's comments I'm thinking otherwise:\n\n\nDoes it really make sense to have a 1 to many relationship between Manager and Provider?\nI think the current 1:1 relationship may make more sense, to be honest.\n\n\nNormally, Manager would be considered a candidate to be made static to eliminate the overhead of initialization. It seems like this is not a huge concern, as no Moya consumer has mentioned it before.\n\n\nI mean, Ash has made a good case as to why this is a function and it is prefixed default. It really makes sense if you read between the lines. (It's not like it's named sharedManager \ud83e\udd14)\nI would opt for adding a comment unless we have overwhelming support to change this.\n. I'd agree to add a sharedAlamofireManager that is a static var on top of the existing defaultAlamofireManager() function. \nThe problem is this is such a trivial detail I think it would be really difficult to communicate to Moya users that they can use the sharedAlamofireManager through documentation.  \nAnd if we make the change to using sharedAlamofireManager by default, this is a silent change in behavior. I don't think that's good either. . The way I see it I think we can either add a static var sharedAlamofireManager and replace this as the default in MoyaProvider or we can just add this property as a purely additive change. Then document that this is available to use. However, it is likely that not many people would find it even with proper documentation. So I guess it comes down to do we want to make this purely additive or do we want to change default behavior?\nSent with GitHawk. More context on this issue. Looks like this setup is due to this comment. @sunshinejr I will update the docs tonight and start a Moya 12.0 migration guide. I'm not sure about the CI error, right now that specific test won't pass locally but CI runs fine. I guess I'll just use CI to run my tests for now. Curious if others face this issue on their local copy as well. I'm tagging #1357 because AlamofireValidation.md will need to be updated in the Chinese documentation. . I'm going to tag #1357 because this requires some updates to the Chinese documentation. @ahmetoguzlu I'm going to close this but feel free to reopen if it includes changes. And don't hesitate to reach out if you need assistance \ud83d\udc4d . @rainedAllNight You're correct, extensions may not contain stored properties. You just need a computed property that returns the baseURL.\nSwift\nextension TargetType {\n    var baseURL: URL {\n       return URL() //\n    }\n}. @sunshinejr Thanks for not letting this slip by. I think that\u2019s a great idea if it works for @fengerxixi \nSent with GitHawk. @gb-6k-house How are you installing Moya?. Thanks for sharing how you resolved this @gb-6k-house \ud83d\udc4d . Sorry this took so long! #1527. Hey @ffittschen, first and foremost thanks for taking the time to put together this PR \ud83d\udcaa.\nAre there any @Moya/contributors that want to give this a look through? No pressure because we won't have another major release for some time. I can only make minor contributions at the moment. @richgabrielli if you want more forking & PR practice this is another great issue \ud83e\udd23 \ud83e\udd23 No pressure!. @AndrewSB That\u2019s also an option. 2014 you mean!\nSent with GitHawk. @AndrewSB That\u2019s also an option. 2014 you mean!\nSent with GitHawk. I\u2019m down with that!\nSent with GitHawk. Closed by #1523 . You need to add a new remote, traditionally called upstream that reflects the original repo:\ngit remote add upstream https://github.com/Moya/Moya.git\nThen check that you have them setup:\ngit remote -v\nThen you need to fetch the new commits from the original repo, upstream:\ngit fetch upstream master <-- or another branch if you want, ie) development\nThen you need to merge those changes from upstream into origin (your local copy):\ngit merge upstream/master\nSometimes you may need to rebase and not merge. You'll want to learn about the difference between the two.\nNote: Moya has unique contributing guidelines. Thus, you're able to work from the original repo after having your first PR merged in. However, this is the workflow you will need to use for other projects that you're not a member of.. @richgabrielli You can ignore my post and just read Ash's. Awesome to hear @richgabrielli! I faced similar struggles and wouldn\u2019t have gotten involved in open source if people weren\u2019t patient and supporting. Please remember this experience if you see the opportunity to help another GitHub user one day \ud83e\udd17 \nSent with GitHawk. @richgabrielli ^ This. But sometimes you will be lucky enough to submit a PR without needing to resync if the changes don\u2019t affect any files you worked on.\nSent with GitHawk. @zhongwuzw I think @AndrewSB makes a good suggestion here. You can try and remove it by submitting a PR for this change. However, I can't guarantee it will be accepted.. #434 Is related. @Rashesh-Bosamiya is the mobileNumber associated value a String?\nSent with GitHawk. I think I know what\u2019s happening. @Rashesh-Bosamiya can I see your TargetType code? We don\u2019t use the parameters property in Moya 9+. We flattened this into the Task property. Check the migration guide for more information if my hypothesis is correct.\nSent with GitHawk. @Rashesh-Bosamiya Here is the migration guide.\nYou need to change .requestPlain to .requestParameters(parameters:encoding)\nYou can check out the docs for TargetType here.. @sunshinejr Sorry for the slow turnaround. I added a link to the ReactiveSwift 3.0.0 release notes.\nRegarding #1521, I'm fine with that but I haven't had the time to review it and we need more eyes on it. I don't want to be making decisions on new functionality or API breaking changes myself.. This would be good to translate to Chinese as well. #1357 . Thanks for submitting this @zhongwuzw \ud83d\udc4d It seems like a good idea to have @Moya/contributors review this one.. I think the PR is good too. However, I can\u2019t see any positive gains from doing so other than clean code. The generic is resolved at compile time so there shouldn\u2019t be any performance boosts.\nSent with GitHawk. @ashfurrow How do you recommend Moya handles code churn going forward? I realize it's important given the maturity of the project, but Moya was also built over 4 years of an unstable Swift.\nFor example, we still have class methods on MoyaProvider because a generic type couldn't have a nested type. \nThough important now, maybe this becomes even more important when Swift itself reaches ABI stability?. @zhongwuzw I don't expect this to significantly impact build times, even on a large project using Moya, but it is relevant.\nHonestly, the migration for this is trivial. That does not worry me in the slightest. I just want to figure out if it is possible for someone to be relying on the generic before removing it. We need to figure out if it has any meaning.. Ironically, I found an issue #434 Endpoint doesn't need to be generic by @ashfurrow \ud83e\udd23 . @ashfurrow I've been keeping track of all the changes to the English docs that are not reflected in the Chinese docs in #1357. Last week I released Moya 11.0.0-beta.1, should this change be merged before the official release of 11.0?\n@zhongwuzw How about I take care of the documentation Ash has requested since my native language is English and you can translate them into Chinese for me?. @ashfurrow I've been keeping track of all the changes to the English docs that are not reflected in the Chinese docs in #1357. Last week I released Moya 11.0.0-beta.1, should this change be merged before the official release of 11.0?\n@zhongwuzw How about I take care of the documentation Ash has requested since my native language is English and you can translate them into Chinese for me?. I got it @BasThomas. So sorry, I will really do this today.\n\n[x] CHANGELOG\n[x] Docs\n[x] Migration Guide\n[x] Inline Endpoint Docs\n\nSent with GitHawk. I got it @BasThomas. So sorry, I will really do this today.\n\n[x] CHANGELOG\n[x] Docs\n[x] Migration Guide\n[x] Inline Endpoint Docs\n\nSent with GitHawk. Alright, really really sorry for the delays. I completed the checklist I made above. \nI updated all the occurrences of the Endpoint generic in the docs_CN directory as well @zhongwuzw. So there doesn't seem to be anything to translate to Chinese. We could use the docs/migration_10_to_11.md translated but that seems like it should be another issue. . Alright, really really sorry for the delays. I completed the checklist I made above. \nI updated all the occurrences of the Endpoint generic in the docs_CN directory as well @zhongwuzw. So there doesn't seem to be anything to translate to Chinese. We could use the docs/migration_10_to_11.md translated but that seems like it should be another issue. . We had a lot of input on this one. Let me know if everything looks good to merge and we can get this merged into 11.0.0 \u26f5\ufe0f . We had a lot of input on this one. Let me know if everything looks good to merge and we can get this merged into 11.0.0 \u26f5\ufe0f . Hey @lucas34, I think development is the best place to submit this change. It's not too late to get something in the 11.0 release.\n  . Hey @lucas34, I think development is the best place to submit this change. It's not too late to get something in the 11.0 release.\n  . @shwetachitlangia Did this issue occur after a migration to 10.0.1? If so, what was the previous Moya version where this issue was not present?\nSent with GitHawk. @shwetachitlangia Did this issue occur after a migration to 10.0.1? If so, what was the previous Moya version where this issue was not present?\nSent with GitHawk. It looks like we have 4 people experiencing this issue and they mention it wasn\u2019t present in Moya 8.0. We refactored the Task object in Moya 9.0. \nCan anyone who is experiencing the issue put together an example project that replicates it?\nTagging @Dschee in case he can give any insight\nSent with GitHawk. It looks like we have 4 people experiencing this issue and they mention it wasn\u2019t present in Moya 8.0. We refactored the Task object in Moya 9.0. \nCan anyone who is experiencing the issue put together an example project that replicates it?\nTagging @Dschee in case he can give any insight\nSent with GitHawk. How many people are using Spring here?. How many people are using Spring here?. I suspect this issue is unrelated to Moya and is in fact a problem with Spring. Going to ask Mr. Stalebot to keep this open\nSent with GitHawk. I suspect this issue is unrelated to Moya and is in fact a problem with Spring. Going to ask Mr. Stalebot to keep this open\nSent with GitHawk. Hey @inforeqd512,\nYour MoyaProvider can be initialized with an endpointClosure which is responsible for mapping the TargetType to a concrete Endpoint. \nOne of the properties of Endpoint is sampleResponseClosure which is responsible for returning a EndpointSampleResponse, which is an enum consisting of the cases:\n\ncase networkResponse(Int, Data)\ncase response(HTTPURLResponse, Data)\ncase networkError(NSError)\n\nYou have access to the TargetType inside of the endpointClosure, so you can use this as an access point to return different sampleResponseClosures.. Hey @inforeqd512,\nYour MoyaProvider can be initialized with an endpointClosure which is responsible for mapping the TargetType to a concrete Endpoint. \nOne of the properties of Endpoint is sampleResponseClosure which is responsible for returning a EndpointSampleResponse, which is an enum consisting of the cases:\n\ncase networkResponse(Int, Data)\ncase response(HTTPURLResponse, Data)\ncase networkError(NSError)\n\nYou have access to the TargetType inside of the endpointClosure, so you can use this as an access point to return different sampleResponseClosures.. It looks like this could the integration tests failing from #1424?. It looks like this could the integration tests failing from #1424?. @sunshinejr Ok I'm going to try and do it that way. @sunshinejr Ok I'm going to try and do it that way. @lucas34 Any input on this one? I don\u2019t use Carthage but it looks like maybe we need to use 10.0.1 in the Cartfile?\nEDIT: I have no idea what I'm talking about \ud83d\ude02 \nSent with GitHawk. @lucas34 Any input on this one? I don\u2019t use Carthage but it looks like maybe we need to use 10.0.1 in the Cartfile?\nEDIT: I have no idea what I'm talking about \ud83d\ude02 \nSent with GitHawk. @shwetachitlangia Are you facing the same error regarding Swiftlint? @lucas34 was apparently able to fetch Moya without SwiftLint installed. Would love some feedback on this from Moya Carthage users. @shwetachitlangia Are you facing the same error regarding Swiftlint? @lucas34 was apparently able to fetch Moya without SwiftLint installed. Would love some feedback on this from Moya Carthage users. I just released Moya 11.0.2 with the patch for this. Please re-open if the problem continues. I just released Moya 11.0.2 with the patch for this. Please re-open if the problem continues. Providers.md:\n\nAlways remember to retain your providers, as they will get deallocated if you fail to do so. Deallocation will return a -999 \"canceled\" error on response.. Providers.md:\nAlways remember to retain your providers, as they will get deallocated if you fail to do so. Deallocation will return a -999 \"canceled\" error on response.. > Is there a way to modify multipart data outside of TargetType in Moya 10.0.1?\n\n@seasox Why are you looking to modify the request outside of TargetType? Is it because you are trying to reuse authentication on every request? \nHave you considered creating a plugin?\n\nMoya plugins are used to modify requests and responses or perform side-effects. A plugin is called: \n\n(prepare) after Moya has resolved the TargetType to a URLRequest. This is an opportunity to modify the request before it is sent (e.g. add headers).. > Is there a way to modify multipart data outside of TargetType in Moya 10.0.1?\n\n\n@seasox Why are you looking to modify the request outside of TargetType? Is it because you are trying to reuse authentication on every request? \nHave you considered creating a plugin?\n\nMoya plugins are used to modify requests and responses or perform side-effects. A plugin is called: \n\n(prepare) after Moya has resolved the TargetType to a URLRequest. This is an opportunity to modify the request before it is sent (e.g. add headers).. > This doesn't work either, since, if I understand MoyaProvider+Internal correctly, the original target gets passed to:\nperformRequest(_:request:callbackQueue:progress:completion:endpoint:stubBehavior:) \nalongside endpoint\n\n\nhttps://github.com/Moya/Moya/blob/e212f6e638fa6383f19537a89a8a647b7120c0b1/Sources/Moya/MoyaProvider%2BInternal.swift#L93\n@sunshinejr He could be correct. It looks like the request is being sent with the original target.task. I think switching on endpoint.task would be better? If not, he's going to receive the unmodified associated values from the Task enum.. > This doesn't work either, since, if I understand MoyaProvider+Internal correctly, the original target gets passed to:\nperformRequest(_:request:callbackQueue:progress:completion:endpoint:stubBehavior:) \nalongside endpoint\nhttps://github.com/Moya/Moya/blob/e212f6e638fa6383f19537a89a8a647b7120c0b1/Sources/Moya/MoyaProvider%2BInternal.swift#L93\n@sunshinejr He could be correct. It looks like the request is being sent with the original target.task. I think switching on endpoint.task would be better? If not, he's going to receive the unmodified associated values from the Task enum.. - [x] Issues that end in a question mark or the title contains the words \u201cWho\u201d, \u201cWhat\u201d, \u201cWhere\u201d, \u201cWhen\u201d, \u201cWhy\u201d, or \u201cHow\u201d are labeled as a question\n\n\n[ ] Issues that contain the words \u201cbug\u201d, \u201ccrash\u201d, or \u201cmemory leak\u201d in the title are automatically labeled bug?\n\n\n[ ] Issues that contain the word \u201cCarthage\u201d, \u201cCocoaPods\u201d, or \"Pod\" in the title are labeled Carthage or CocoaPods respectively.\n\n\n[ ] We could add an \"SPM\" tag and look for words like \"Package\" or \"SPM\" in the issue title.\n\n\n[ ] We introduce two new tags, \u201cRxSwift\u201d and \u201cReactiveSwift\u201d. If the issue title or issue bodies contains the words \u201cRxSwift\u201d or maybe even \u201c.rx\u201d the issue is labeled RxSwift. If the issue title or body contains the words \u201cReactiveSwift\u201d or \u201c.reactive\u201d we label it ReactiveSwift.\n\n\n[ ] If the issue title contains the words \u201cDocumentation\u201d, \"Document\", \u201cDocs\u201c, \u201cREADME\u201d, \"CHANGELOG\", or maybe even references \u201c.md\u201d it is labeled documentation. You could label these as good first issue or help wanted as well.\n\n\n[ ] It looks like a lot of enhancement issues start with the words: \"Improve\", \"Add\", \"Allow\", \"Update\" or \"Enhancement\"\n\n\nSent with GitHawk. - [x] Issues that end in a question mark or the title contains the words \u201cWho\u201d, \u201cWhat\u201d, \u201cWhere\u201d, \u201cWhen\u201d, \u201cWhy\u201d, or \u201cHow\u201d are labeled as a question\n\n\n[ ] Issues that contain the words \u201cbug\u201d, \u201ccrash\u201d, or \u201cmemory leak\u201d in the title are automatically labeled bug?\n\n\n[ ] Issues that contain the word \u201cCarthage\u201d, \u201cCocoaPods\u201d, or \"Pod\" in the title are labeled Carthage or CocoaPods respectively.\n\n\n[ ] We could add an \"SPM\" tag and look for words like \"Package\" or \"SPM\" in the issue title.\n\n\n[ ] We introduce two new tags, \u201cRxSwift\u201d and \u201cReactiveSwift\u201d. If the issue title or issue bodies contains the words \u201cRxSwift\u201d or maybe even \u201c.rx\u201d the issue is labeled RxSwift. If the issue title or body contains the words \u201cReactiveSwift\u201d or \u201c.reactive\u201d we label it ReactiveSwift.\n\n\n[ ] If the issue title contains the words \u201cDocumentation\u201d, \"Document\", \u201cDocs\u201c, \u201cREADME\u201d, \"CHANGELOG\", or maybe even references \u201c.md\u201d it is labeled documentation. You could label these as good first issue or help wanted as well.\n\n\n[ ] It looks like a lot of enhancement issues start with the words: \"Improve\", \"Add\", \"Allow\", \"Update\" or \"Enhancement\"\n\n\nSent with GitHawk. @BasThomas It looks like a lot of enhancement issues start with the words: \"Improve\", \"Add\", \"Allow\", \"Update\" or \"Enhancement\". What do you think?. @BasThomas It looks like a lot of enhancement issues start with the words: \"Improve\", \"Add\", \"Allow\", \"Update\" or \"Enhancement\". What do you think?. Thanks @AndrewSB! Maybe I will do that \ud83d\ude05 \nI did a lot of manual labor trying to figure out relationships between issues and labels. I was just thinking: what if there was a tool that grabbed all the issues with a certain label, takes all their titles, and finds the most used words among all of them?\nOr just most used words in all the repos issues in general, this could indicate the need for a new label. Thanks @AndrewSB! Maybe I will do that \ud83d\ude05 \nI did a lot of manual labor trying to figure out relationships between issues and labels. I was just thinking: what if there was a tool that grabbed all the issues with a certain label, takes all their titles, and finds the most used words among all of them?\nOr just most used words in all the repos issues in general, this could indicate the need for a new label. I\u2019ll take a look at setting up Peril for Moya and moving forward on this sometime this weekend\nSent with GitHawk. I\u2019ll take a look at setting up Peril for Moya and moving forward on this sometime this weekend\nSent with GitHawk. The easiest way to see it is:\n1. Modify an Endpoint\u2019s task through an endpointClosure.\n\n\nAdd a PluginType with a prepare(request:target) method to Moya provider.\n\n\nThe task of TargetType passed into prepare(request:target) won\u2019t have the changes from the endpoint closure. \n\n\nProbably not a huge issue. The behavior actually makes sense because plugin delegate methods are handed the original target and not an Endpoint. Maybe just good to document? \nI do think plugins and the endpointClosure have a significant overlap.\nSent with GitHawk. The easiest way to see it is:\n1. Modify an Endpoint\u2019s task through an endpointClosure.\n\n\nAdd a PluginType with a prepare(request:target) method to Moya provider.\n\n\nThe task of TargetType passed into prepare(request:target) won\u2019t have the changes from the endpoint closure. \n\n\nProbably not a huge issue. The behavior actually makes sense because plugin delegate methods are handed the original target and not an Endpoint. Maybe just good to document? \nI do think plugins and the endpointClosure have a significant overlap.\nSent with GitHawk. @ashfurrow I should\u2019ve made some sort of PR or example demonstration for sure. I was on the fence about opening this issue. As for asserts, there\u2019s little we can do IMO. We would have to check all the properties that Endpoint and TargetType share to check for inconsistencies. It\u2019s not worth having those checks on every request as this is an edge case.\nTo be honest, I\u2019m not ashamed to admit I think this is a pretty nitty issue after a good nights sleep.\n\nIt won't because endpointClosure doesn't change/update TargetType, it creates a completely new object that is of an Endpoint type (and while it most of the time bases on TargetType, sometimes it doesn't at all). We could document it but right now I'm not sure where/how.\n\nPerfectly worded \ud83d\udc4d\nSent with GitHawk. @ashfurrow I should\u2019ve made some sort of PR or example demonstration for sure. I was on the fence about opening this issue. As for asserts, there\u2019s little we can do IMO. We would have to check all the properties that Endpoint and TargetType share to check for inconsistencies. It\u2019s not worth having those checks on every request as this is an edge case.\nTo be honest, I\u2019m not ashamed to admit I think this is a pretty nitty issue after a good nights sleep.\n\nIt won't because endpointClosure doesn't change/update TargetType, it creates a completely new object that is of an Endpoint type (and while it most of the time bases on TargetType, sometimes it doesn't at all). We could document it but right now I'm not sure where/how.\n\nPerfectly worded \ud83d\udc4d\nSent with GitHawk. @sunshinejr I agree with your quote from #1123 \n\nRight now plugins: \n\nDo many things that endpointClosure & requestClosure do as well - making it ambiguous for users to use & for us to recommend a good practice.\n\n\nIn fact, I'd argue that is the crux of this issue. You can achieve the same thing two different ways and if you use a little bit of both - something unexpected might happen.\nBut Moya could be a little too mature to remove the endpointClosure & requestClosure. I can only imagine how much logic people have there. . @sunshinejr I agree with your quote from #1123 \n\nRight now plugins: \n\nDo many things that endpointClosure & requestClosure do as well - making it ambiguous for users to use & for us to recommend a good practice.\n\n\nIn fact, I'd argue that is the crux of this issue. You can achieve the same thing two different ways and if you use a little bit of both - something unexpected might happen.\nBut Moya could be a little too mature to remove the endpointClosure & requestClosure. I can only imagine how much logic people have there. . The closures + plugins are capable of the same things, with one exception. The endpointClosure is the access point for modifying the EndpointSampleResponse. However, #1502 would remove this responsibility and make it customizable through a new TestTargetType protocol. This would allow EndpointSampleResponse to be modified through either TestTargetType directly or inside plugins with a simple cast. Which is pretty cool IMO, you could create plugins solely for testing. \nNevertheless, I wouldn't take #1502 or removing the closures lightly. I would really want to spend some time reviewing some projects dependent on Moya and what effects that would have.\n. The closures + plugins are capable of the same things, with one exception. The endpointClosure is the access point for modifying the EndpointSampleResponse. However, #1502 would remove this responsibility and make it customizable through a new TestTargetType protocol. This would allow EndpointSampleResponse to be modified through either TestTargetType directly or inside plugins with a simple cast. Which is pretty cool IMO, you could create plugins solely for testing. \nNevertheless, I wouldn't take #1502 or removing the closures lightly. I would really want to spend some time reviewing some projects dependent on Moya and what effects that would have.\n. @sunshinejr Sorry for the delay. I played around with the refactor in 91bb548. Let me know if that is what you were expecting. If not, we can kill the commit and make it an issue.. @sunshinejr Sorry for the delay. I played around with the refactor in 91bb548. Let me know if that is what you were expecting. If not, we can kill the commit and make it an issue.. @sunshinejr Fixed. Thanks for the eyes \ud83d\udc40 . @sunshinejr Fixed. Thanks for the eyes \ud83d\udc40 . @yeskunall This is fine to be targeted at master. You can read more about our development process in CONTRIBUTING.md. You also don\u2019t need to tag other Moya contributors in your PRs unless you feel that a specific contributor should review it. Whenever other Moya contributors have time, they\u2019ll stop by to review the PR \ud83c\udfce\nSent with GitHawk. @yeskunall This is fine to be targeted at master. You can read more about our development process in CONTRIBUTING.md. You also don\u2019t need to tag other Moya contributors in your PRs unless you feel that a specific contributor should review it. Whenever other Moya contributors have time, they\u2019ll stop by to review the PR \ud83c\udfce\nSent with GitHawk. @minuscorp It could be that the provider is a computed property? Maybe make it a closure that is called immediately so that a value is stored in the property.\nSent with GitHawk. @minuscorp It could be that the provider is a computed property? Maybe make it a closure that is called immediately so that a value is stored in the property.\nSent with GitHawk. @minuscorp what I meant was something like\nSwift\nlet provider: MoyaProvider<Service> = { return ... }()\nIt\u2019s impossible to tell without your full service class, but this property has to have a value for the lifetime of the request. It can\u2019t be a factory spitting out new ones. It has to be retained somewhere in the singleton\nSent with GitHawk. @minuscorp Can you generate the providers in a protocol extension but then assign them to a stored property in the Singleton? Sorry for the inconvenience but I believe this is the correct behavior\nSent with GitHawk. Hey @dangthaison91, thank you for doing such an extensive write up on this topic \ud83d\udc4d. I agree with you partially on this issue, as I personally prefer thinking about my requests as a HTTP method + parameters. \nI had a very short discussion with @sunshinejr a few weeks ago and we agreed the current API prevents some undefined behavior by choosing the wrong HTTP method and it also gives us Encodable support.\nThe biggest problem, however, is we can't keep flip-flopping the API on Moya users. We've had very little push back on the Moya 9.0+ API and in my opinion, it just doesn't make sense to make such a heavy API breaking change this far down the road. Thanks for taking the time to formalize your thoughts @minuscorp \ud83d\udc4d This is also related to #905 #1380. . @minuscorp Thanks for taking the time to share what worked for you in order to help other Moya users in the future \ud83d\udcaf I agree that is kind of rough \ud83d\ude13 . I can't offer much input here because I haven't used Rx in months. \nBut I'm a little confused because did we not purposely make this change in #1311?\nThe discussion is in #1380 and #1294. @LucianoPAlmeida I'm tagging you because I see you setting this up for https://github.com/SwifterSwift/SwifterSwift/pull/498. If you get it working would you be so kind as to see if it can be applied to Moya too? \u2764\ufe0f \n. This was resolve in #1680. Awesome work!. I\u2019m fine with adding a tool to fix spelling errors in documentation, however, I\u2019m against any rules surrounding git. \nThe reason is it I believe it would discourage contributors and increase the barrier of entry to the project. I already have difficulty explaining the concept of rebasing to some people. Having them revert or modify the git history for a character limitation seems like a nightmare \ud83d\ude10\nSent with GitHawk. I wouldn\u2019t mind this addition. If the community does agree to add it I would kind of prefer it to be named requestSync so that it stays in line with the current request method.\nSent with GitHawk. @kdawgwilk What do you mean by a plugin? You could make a small supporting library for Moya, but let\u2019s see what some others say first. IMO it makes sense to have if we\u2019re supporting SPM at this stage and it doesn\u2019t provide a ton of new overhead. It saves people boilerplate of wrapping a request with the semaphore. \nSent with GitHawk. I really do think a relatively simple CLI tool could benefit from having a synchronous request. I guess touching on what @AndrewSB mentioned: considering an asynchronous architecture may allow for greater expandability in the future, but it is also a hindrance for wanting to create something simple quickly. \nHowever, my greatest fear is that by adding this to Moya, we'll encourage people to write bad code as they use this to solve the issue of dependencies between requests in iOS apps. See #1426\nConsidering Moya is primarily used for iOS, I'd change my position to be against this addition solely for the reason described above.. I'm going to close this because it seems like we all agree that adding a blocking request would be encouraging bad practice.. @juniorgarcia I'm going to close this one as you seem to have resolved the issue. Thank you for posting your solution to potentially help other Moya users.. Moya 11.0 has been released and ReactiveSwift 3.0 support is now available on master. I'm going to close this, thank you @chapayGhub \ud83d\udc4d . Mr. Stale Bot please don\u2019t close this issue just yet\nSent with GitHawk. @freak4pc I don't think we can use a protocol here because Task has no specific implementation requirements. A lot of the context for these cases is provided by Moya internals as defaults.\n@ffittschen There is #1556 discussing this. I partially agree with some the suggestions there. I moved this discussion of this to #1655. Hey @jhrasco, thanks for reporting this. I'm thinking that MoyaProvider.defaultRequestMapping needs to have its RequestResultClosure argument marked as @escaping. What version of Moya are you migrating from?. @jhrasco Are you subclassing? This is an odd error message. \nThe real fix is you need to reference YourProviderSubclass.defaultRequestMapping or resolve MoyaProvider's generic.. It compiles without it but I still think we should resolve the missing @escaping attribute.\nThe function signature is:\nSwift\npublic final class func defaultRequestMapping(for endpoint: Endpoint, closure: RequestResultClosure)\nRequestClosure is typed as:\nSwift\npublic typealias RequestClosure = (Endpoint, @escaping RequestResultClosure) -> Void\ncc @sunshinejr . Looks like a typealias for a function is @escaping by default in Swift. So we don't need to mark RequestResultClosure. \nBut we need the @escaping attribute on RequestClosure because it looks like the @escaping attribute is not inferred by default on a typealias \ud83e\udd14 \nBad error message I guess.. It looks like when Endpoint was generic, MoyaProvider was able to resolve the type. \nYou could use MoyaProvider.defaultRequestMapping in 10.0.2 but now you cannot. You must pass on the generic from the subclass or refer to the subclass itself. . Sorry! I forgot to do this! Thank you for catching it \ud83d\ude4f . Looks like you can't tag issues through a PR review. Double tag #1357 . Hey @sandeepbol,\nYou have to make the APIService type itself generic:\nSwift\nenum APIService<T> {\n    case enrollUser(enrollRequest: T)\n}. @sandeepbol MoyaProvider<APIService<T>> where you resolve T with the type you need to use. Could be String or Int etc.\nSent with GitHawk. @sandeepbol No problem. Instead of having a specific type as a Struct why don\u2019t you just use [String: Any] to accept the serialized data type? Or better yet - you could use this strategy internally and then expose methods in your SDK that accept the specific data types. \nThe calls to those public methods would be wrapped in an internal method that takes the Struct, turns it into query parameters, then passes it onto Moya.\nSent with GitHawk. Thanks for letting us know this worked for you @mkkroliks \ud83d\udc4d\nSent with GitHawk. Thanks for letting us know this worked for you @mkkroliks \ud83d\udc4d\nSent with GitHawk. Awesome \ud83d\ude4c Good idea\nSent with GitHawk. Awesome \ud83d\ude4c Good idea\nSent with GitHawk. > I can use try? but I like more do{ ... } catch { ... }for being more expressive and doing more while catching the error.\nForgive me but I disagree, it doesn't do anything \"more\" to handle the error, it just returns nil. Using do/catch syntax to return a nil value is just boilerplate.\nI really think handling the error is the best approach here. The MoyaError could occur for a variety of reasons: problems with endpoint mapping, invalid response, failure to decode an object.\n. > I can use try? but I like more do{ ... } catch { ... }for being more expressive and doing more while catching the error.\nForgive me but I disagree, it doesn't do anything \"more\" to handle the error, it just returns nil. Using do/catch syntax to return a nil value is just boilerplate.\nI really think handling the error is the best approach here. The MoyaError could occur for a variety of reasons: problems with endpoint mapping, invalid response, failure to decode an object.\n. No problem @jdisho, we really appreciate you taking the time to open this PR \ud83d\udc4d. No problem @jdisho, we really appreciate you taking the time to open this PR \ud83d\udc4d. Hey @sasojadrovski, I don't believe this is related to #1549. That issue is only regarding using both a custom endpointClosure and PluginTypes with a MoyaProvider.\nDo you have a custom endpointClosure or are you using any plugins with this provider? That modify the headers of course.\nIt looks like NSURLErrorDomain Code=-1005 is regarding a lost network connection. A lot of StackOverflow posts recommend restarting the simulator (if you are using one). . Hey @sasojadrovski, I don't believe this is related to #1549. That issue is only regarding using both a custom endpointClosure and PluginTypes with a MoyaProvider.\nDo you have a custom endpointClosure or are you using any plugins with this provider? That modify the headers of course.\nIt looks like NSURLErrorDomain Code=-1005 is regarding a lost network connection. A lot of StackOverflow posts recommend restarting the simulator (if you are using one). . Maybe related to #1533 . Maybe related to #1533 . Hey @Tritium7, we're glad to hear you have resolved the issue! \ud83d\ude03 Thank you for sharing how you solved the problem as it may help future Moya users. I'm going to close this \ud83d\udc4d . Hey @Tritium7, we're glad to hear you have resolved the issue! \ud83d\ude03 Thank you for sharing how you solved the problem as it may help future Moya users. I'm going to close this \ud83d\udc4d . @HadiYaac What validation type are you using?. @HadiYaac What validation type are you using?. Thank you for reporting this @HadiYaac. I'm working on the patch \ud83d\ude03 . Thank you for reporting this @HadiYaac. I'm working on the patch \ud83d\ude03 . @sunshinejr No problem, I added some spacing between the tests. LMK if this is \ud83d\udc4c . @sunshinejr No problem, I added some spacing between the tests. LMK if this is \ud83d\udc4c . Doing a little more research on this - there should be no issue here. Worst case scenario a user would have to implement a convenience initializer on HTTPURLResponse.. Doing a little more research on this - there should be no issue here. Worst case scenario a user would have to implement a convenience initializer on HTTPURLResponse.. Alright @sunshinejr, I cleaned up the unit tests and added a CHANGELOG entry. Alright @sunshinejr, I cleaned up the unit tests and added a CHANGELOG entry. Hey @jshier, thank you for taking the time to reach out! \nIronically, I was thinking last week that I need to get more familiar with the advanced capabilities of Alamofire and its internals to see if more enhancements can be made to Moya. I have no suggestions at the moment, but I'll tag @Moya/contributors to get some more ears on this topic \ud83d\ude03 . Hey @jshier, thank you for taking the time to reach out! \nIronically, I was thinking last week that I need to get more familiar with the advanced capabilities of Alamofire and its internals to see if more enhancements can be made to Moya. I have no suggestions at the moment, but I'll tag @Moya/contributors to get some more ears on this topic \ud83d\ude03 . @zerozheng It is because you are not retaining your provider. It needs to be at a scope outside of the function definition in order for it to be retained. \nProviders.md\n\nAlways remember to retain your providers, as they will get deallocated if you fail to do so. Deallocation will return a -999 \"canceled\" error on response.. @zerozheng It is because you are not retaining your provider. It needs to be at a scope outside of the function definition in order for it to be retained. \n\nProviders.md\n\nAlways remember to retain your providers, as they will get deallocated if you fail to do so. Deallocation will return a -999 \"canceled\" error on response.. @zerozheng Can you show me more of your code? Where are you retaining the provider?. @zerozheng Can you show me more of your code? Where are you retaining the provider?. > I think the provider may be deallocated when give a new provider to self.provider self.provider = provider in the loadData() function.\n\n@zerozheng Yes, this would cause the provider to be deallocated. I would use 1 provider per TargetType as that is the recommended pattern when using Moya. . > I think the provider may be deallocated when give a new provider to self.provider self.provider = provider in the loadData() function.\n@zerozheng Yes, this would cause the provider to be deallocated. I would use 1 provider per TargetType as that is the recommended pattern when using Moya. . Hey @SeRG1k17, thanks for opening this issue. Why do you believe that this parameter needs to be a closure, (JSONDecoder) -> (JSONDecoder)? I'm not sure I see what you're trying to accomplish. Hey @SeRG1k17, thanks for opening this issue. Why do you believe that this parameter needs to be a closure, (JSONDecoder) -> (JSONDecoder)? I'm not sure I see what you're trying to accomplish. Yep, it's all good @kimdv. Thank you for taking care of this issue so Swiftly \ud83d\ude06 \u2764\ufe0f . Yep, it's all good @kimdv. Thank you for taking care of this issue so Swiftly \ud83d\ude06 \u2764\ufe0f . @sunshinejr Thanks for fixing those integration tests. The String based tests are so brittle \ud83d\ude22\nSent with GitHawk. @sunshinejr Thanks for fixing those integration tests. The String based tests are so brittle \ud83d\ude22\nSent with GitHawk. @freak4pc Could you tell me if you are able to merge now? \nWe had some restrictions set up regarding who can push to master. IIRC, we introduced this after we had someone merge something without any review. \nI've lessened the restriction to simply only enforce reviews since that is what we want here.. @freak4pc Could you tell me if you are able to merge now? \nWe had some restrictions set up regarding who can push to master. IIRC, we introduced this after we had someone merge something without any review. \nI've lessened the restriction to simply only enforce reviews since that is what we want here.. @BuildBuilt As @esam091 suggested your provider is being deallocated before the request completes. You need to make it a property of PromotionViewController or something. You need to store it as a property and tie it to the lifetime of the controller.. @BuildBuilt As @esam091 suggested your provider is being deallocated before the request completes. You need to make it a property of PromotionViewController or something. You need to store it as a property and tie it to the lifetime of the controller.. @BuildBuilt when you initialize the provider inside the init assign it to a property of the object before making the request \nSent with GitHawk. @BuildBuilt when you initialize the provider inside the init assign it to a property of the object before making the request \nSent with GitHawk. Hey @LucianoPAlmeida, thanks for taking the time to submit this PR \ud83d\udc4d \nI'm not all that opposed to adding this because there is a low maintenance cost but I'll get some others opinions. \nHere are my thoughts:\n- We can already achieve the same functionality through ClosedRange\n- If we do decide to add this then we need to maintain the parity of the RxSwift and ReactiveSwift APIs:\n   - Update RxMoya's Observable response type to have this method as well\n   - Provide this method to ReactiveSwift as well.. Hey @LucianoPAlmeida, thanks for taking the time to submit this PR \ud83d\udc4d \nI'm not all that opposed to adding this because there is a low maintenance cost but I'll get some others opinions. \nHere are my thoughts:\n- We can already achieve the same functionality through ClosedRange\n- If we do decide to add this then we need to maintain the parity of the RxSwift and ReactiveSwift APIs:\n   - Update RxMoya's Observable response type to have this method as well\n   - Provide this method to ReactiveSwift as well.. @LucianoPAlmeida Can you also add a CHANGELOG entry for this? It\u2019s non api breaking under added\nSent with GitHawk. @LucianoPAlmeida Can you also add a CHANGELOG entry for this? It\u2019s non api breaking under added\nSent with GitHawk. @fragilehm I see that you resolved this issue, do you have any insight for future Moya users who may have a similar problem?. @fragilehm I see that you resolved this issue, do you have any insight for future Moya users who may have a similar problem?. > what do I need to do to correctly compile and test Moya?\n@SeRG1k17 Thanks for contributing and welcome \ud83d\ude03 You will need Carthage and run carthage bootstrap to build the dependencies.\nAbout this PR:\nWe have another PR open that does what you're requesting here, see #1521. Unfortunately, we haven't had enough Moya contributors to review and decide if this is something we want to merge.. > what do I need to do to correctly compile and test Moya?\n@SeRG1k17 Thanks for contributing and welcome \ud83d\ude03 You will need Carthage and run carthage bootstrap to build the dependencies.\nAbout this PR:\nWe have another PR open that does what you're requesting here, see #1521. Unfortunately, we haven't had enough Moya contributors to review and decide if this is something we want to merge.. @SeRG1k17 I don't think we should focus on improving the AccessTokenPlugin further in this PR. That was the goal of #1521. I think we should keep it simple and only add the ability to set a custom header since this is what is most commonly requested.. @SeRG1k17 I don't think we should focus on improving the AccessTokenPlugin further in this PR. That was the goal of #1521. I think we should keep it simple and only add the ability to set a custom header since this is what is most commonly requested.. @SeRG1k17 Are you able to make the changes described above?\n- [ ] Make the value property return an optional String\n- [ ] Use a hardcoded string value instead of String(describing:)\n- [ ] Fix SwiftLint warnings\nWe also need to:\n- [ ] Add a CHANGELOG entry\n- [ ] Update the docs. @SeRG1k17 Are you able to make the changes described above?\n- [ ] Make the value property return an optional String\n- [ ] Use a hardcoded string value instead of String(describing:)\n- [ ] Fix SwiftLint warnings\nWe also need to:\n- [ ] Add a CHANGELOG entry\n- [ ] Update the docs. @SeRG1k17 Any update on this? I'd like to get it in the release of Moya + Swift 4.1. If you like I can take over from here. . @SeRG1k17 Any update on this? I'd like to get it in the release of Moya + Swift 4.1. If you like I can take over from here. . @SeRG1k17 Doesn't need to be that rushed. If we could get this done by the end of the weekend that would be \ud83d\udc4c If you need any help just LMK!. @SeRG1k17 Doesn't need to be that rushed. If we could get this done by the end of the weekend that would be \ud83d\udc4c If you need any help just LMK!. Lot of excess commits here... seems like commits are from master that are not yet in development.\ncc @sunshinejr what should we do? \nRebase this or open a PR syncing master & development and see what's left here?. Don't think I can fix this one with my git-Fu skills. Trying to drop the merge commits but they don't show up in interactive rebase.. @SeRG1k17 Sorry this one has been so confusing. We have a really messy git history too... I would've preferred we did a rebase instead of merging the branch multiple times.\nCan you try to squash/clean up the history?\nIt looks like the CHANGELOG is corrupted now too \ud83d\ude13 I could possibly take over later if this is too much for you?. This will require an update to docs_CN/Authentication.md so I'll tag #1357 . @SeRG1k17 I looked into this today and I can't reproduce. Can you put together an example project demonstrating the issue?. @SeRG1k17 Unfortunately, there's not much I can do to help without an example that reproduces this \ud83d\ude15 . Looks good peril! But this is not what I wanted you to do \ud83d\ude02 But that's the linker \u261d\ufe0f . We're closing this one in favor of #1619. Thanks for getting the ball rolling @sunshinejr \ud83d\udcaa . Going to close this as it has been patched in Moya 11.0.2. Thanks for taking the time to investigate and write a detailed outline of the problem @sunshinejr \ud83d\udc4d . @sunshinejr Can we merge this one?. @Dschee Thanks for finding an alternative solution to removing part of our tooling. I just released Moya 11.0.2 with the patch for this. Please re-open if the problem continues. @mihai8804858 Thanks for doing this but I think this is being covered in #1615 and #1619 . @eMdOS Thank you for bringing this to our attention again. As you mentioned it is a duplicate of your old issue so I'm going to close this to keep the discussion there. We'd also need a CHANGELOG entry, this is API breaking cuz we've changed signatures. @PlutusCat It's because ? is not meant to be used in path and this is what causes it to get encoded this way. You could move the ? into baseURL and it should fix your issue.\nRelated:\n1198\n1129\n1030\n1119\n1121\n1059\n969 . @jdisho Thanks for helping us clean up! But we actually have a bot that automatically closes an issue after 2 weeks of inactivity \ud83d\ude07 . @PlutusCat We're glad you were able to resolve your issue. Mind letting us know how you managed to fix this? It could help a future Moya user. @mossby Glad you could get this one resolved \ud83d\udc4d No worries, I make the most outrageous mistakes all the time \ud83d\ude06 . @ashfurrow Thanks. I agree a more generic emoji is a better fit. I guess I'm just hungry right now \ud83d\ude0b I just wanted to use something different than CocoaPods so the same emoji didn't become common use. . @BasThomas Good idea \ud83d\udc4d . @fbeeper Don't worry if some of my feedback is asking too much. Just the nitty ones are blocking! \ud83d\ude06 Thanks for doing this \ud83d\udc4d  . It is frustrating that releasing major Moya versions is dependent on the major ReactiveSwift versions. This is the first time it's been really really slow but I'm just throwing this out there from a maintainers perspective. See #1710 . @alanyjw To clarify, are you suggesting both support for NSLog and Print via the output closure? If so, think this is a reasonable enhancement.. @alanyjw Sounds good to me \ud83d\udc4d A PR would be welcome. Thank you @pedrovereza \ud83d\udc4d . It would be good to have example projects that use RxSwift and ReactiveCocoa -- not only as examples but also as a way to test the Moya/RxMoya and Moya/ReactiveMoya installations. @jdisho Thanks for writing this up \ud83d\udc4d\nTo be honest, I\u2019m not sure what a lighter weight version of Moya would look like. The Moya codebase is already extremely small and well focused. I\u2019m not sure if a thinner layer could even be considered Moya anymore. \nIt sounds like in this situation someone should just be using Alamofire directly. Making the request you described above with Alamofire is less than 15 lines of code with decoding included.\nSent with GitHawk. @jdisho I have similar feelings when it comes to dependencies but Alamofire is a reasonable dependency IMO. It's used in ~600k apps with ~40million downloads according to CocoaPods alone. And if you examine the Alamofire codebase it's not as large of a project as you'd expect it to be.\nAs for Result, I feel you on this one. However, it's really lightweight too \ud83d\ude06 It just doesn't make sense for Moya to have its own internal Result type, because the official Result dependency offers a small set of more robust features.\nSo I'm not sure I really see the benefits of building another project that is free of these dependencies.\nI'm also thinking this discussion could be possibly related to:\n#556: Any possibility for a network abstraction engine\n#495: Making Moya more ignorant\nI've played around with these ideas but I could never think of any architecture that provides more value here\nLet's see if any other Moya contributors can provide any input. I feel like if the project is that small that it doesn't warrant the use of Moya, it doesn't warrant the use of a network abstraction beyond URLSession or Alamofire in general. \nPersonally, I don't really care about my dependencies in small projects, it's quite the opposite actually. I don't want dependencies in a large project because the effort to replace them is massive. I could change networking layers on an app that only has a handful of requests and not be bothered in the slightest.. @alanyjw I think it's possible that this is due to you working off of the master branch and not development. Just a wild guess. Yeah ignore what I said about CI, this is an odd one. The error isn't even the same as the last build.. I'm not sure about these changes making it in Moya 12.0. Anyone else have thoughts at this point?. Hey @SeRG1k17,\nI think it's fantastic that you have so many ideas to improve Moya \ud83d\udca1. If you could try and keep issues on-topic in the future that would be much appreciated. Keeping things on topic helps users easily find the information they're looking for. So if you have any ideas for improvements, please don't hesitate to open a separate issue \ud83d\ude0a \nAbout your suggestion, unfortunately, I'm against expanding the Task enum to support this case because I feel like providing the same data in both the request body and the query parameters is an uncommon use case.\nI've thought of your suggestion to consolidate the cases:\ndiff\n-  requestJSONEncodable(Encodable)\n+ requestJSONEncodable(Encodable, urlParameters: [String: Any])\nHowever, I think having the extra associated value would annoy the majority of users who don't need it.\nMy suggestion is to convert your Encodable model to Data directly before assigning it to the .requestCompositeData(bodyData:urlParameters), as you demonstrated above.\ncc @sunshinejr Thoughts?. @SeRG1k17 I'm sympathetic to not being able to handle the encoding error. That is in fact, a real problem \ud83e\udd14 \nCan you add the parameters in the baseURL directly by making it dynamic and then ignore the path component for this case?\nI just think that if we're going to add another case for this, we need to decide where we either draw the line or need to rethink things \ud83d\ude2d \n. This is a really long issue but for the sake of record keeping I want to make a few notes:\n- You cannot do this through the requestClosure because the TargetType has been abstracted\n- You can do this through the use of a PluginType because you still have access to TargetType\n@SeRG1k17 Addresses the issue of wanting to use Encodable to encode parameters and there is currently not a good way to handle such an error. \nHowever, if we made the methods of the PluginType protocol throwing, then we could bubble up this error to the user when applying plugins.. @sunnyleeyun Can you configure the path in the baseUrl instead?. @gobetti No problem \ud83d\udc4d Glad you found a solution\nSent with GitHawk. @kaleemozitech You can use .requestCompositeParameters\nhttps://github.com/Moya/Moya/blob/4555c7956e5acfb81bf759476c905f0866e5df4c/Sources/Moya/Task.swift#L25. The real use case I had in mind was when rejecting new cases to the Task enum \ud83d\ude02 The user could handle the creation of the URLRequest themselves for their custom case. . You can achieve this level of granularity with a PluginType so I'm going to close this for now. My long run vision of Moya would probably be to deprecate the requestClosure and endpointClosure in favor of plugins. They both provide similar ways to do the same thing and PluginType is more flexible. Additionally, the two of them together cause undefined behavior. See #1549 \nIf I can ever finish up #1502, this would eliminate the need for an endpointClosure altogether. Maybe next month \ud83d\ude2d . Not having this in Moya is kind of haunting me today. I don't want to write my data to a temporary file just to get upload progress (as described in the comment above) -- because doing so is wasteful and I also have to worry about cleaning up my URL.. Should we kill https://github.com/Moya/Moya/blob/master/.swift-version?. Looks like this is failing CI though \ud83e\udd14 . Thanks for adding some input @simonrice \ud83d\udc4d I'm just starting to get familiar with Carthage now but if anyone wants to try and debug this that would be totally awesome. I probably won't have time for any open source work until mid next month.. @sunshinejr In regards to access tokens, I deleted the one for Aeryn when we switched to peril. Is it possible that they were using the same token? I'm just throwing this comment out there blindly. @sunshinejr @pedrovereza @ashfurrow Thanks so much for getting everything working again \ud83c\udf89 This was really stressing me out \ud83d\ude05 You guys rock!. This is done by #1668 . I didn't know about this feature until now \ud83d\ude2e I'm open to trying new things. My biggest problem is when you have an issue template designed around a bug report and then users start reporting their frustrations with the library as bugs when they're really just questions. Maybe multiple templates will help solve this issue? Not sure . @andy1247008998 You probably have to make a custom URLEncoding for this. The easier, more hacky way would be for you to not use the path variable but rather declare the path as part of the baseUrl\nSent with GitHawk. @wongzigii The best thing to do would be to extract the associated value from the Task enum. Or else you have to cache/store the previously generated key somewhere. @panjiulong I would make a protocol BaseUrlRepresentable with the baseURL property and then conform all your targets to that. Alternatively you could just provide a default implementation via protocol extension on TargetType if all base URLs are the same\nSent with GitHawk. @jdisho if there are two different urls than that works\nSent with GitHawk. @hairui19 Could you update us on the result of this issue? If you were able to solve it, please share to help a future Moya user \ud83d\udc4d . @kjisoo I believe this is the intended behavior, you need to retain your provider.\nSee the folliwng issues:\n1496 Incorrect Retainment Model for RxSwift extension in MoyaProvider\n905 Providers that are deallocated never completes\n1267 Objects with RxMoyaProvider are no longer retained in 9.0\n1294 Fixing potential issue with RxSwift request method\n1311 Stop retaining self in rxReuestWithProgress. @sunshinejr I agree we need to make a major release soon. I was pretty much waiting on ReactiveSwift because I thought it was the cause of the CI failures. I don't have time to dig on that one.\nI would have time to do stuff related to documentation for the release -- migration guide, making the release, etc.. ReactiveSwift is on 4.0.0-rc.2 now for 20 days \ud83d\ude10 . @xaverlohmueller It will release with 12.0. @oluckyman You probably want to create a custom PluginType for this. You can\u2019t really do this using the requestClosure because the underlying TargetType has been abstracted away at this point.\nSent with GitHawk. @oluckyman You probably want to chain your Firebase auth token request with your requests from Moya provider then. You would make your auth request, save the token in a local variable, then execute your Moya request on completion. @oluckyman You probably want to chain your Firebase auth token request with your requests from Moya provider then. You would make your auth request, save the token in a local variable, then execute your Moya request on completion. @sandeepbol Yeah I'm a little confused as to whether the behavior you want here is something like tracking in flights or throttling requests, but this feature is out of scope for Moya, in my opinion. It's too client specific. @sandeepbol Yeah I'm a little confused as to whether the behavior you want here is something like tracking in flights or throttling requests, but this feature is out of scope for Moya, in my opinion. It's too client specific. @R-U-N This is a bug in the Swift compiler \nSent with GitHawk. @R-U-N This is a bug in the Swift compiler \nSent with GitHawk. Hey @fredpi \ud83d\udc4b,\nThis was discussed in:\n1251, #713,  and #197\nIn my opinion, caching is too client specific to be in scope for Moya. It would be better to let a caching library focus on this end of things. I think something great about Moya is that it makes things like this easy to do with the PluginType system as you demo'd above.. Hey @fredpi \ud83d\udc4b,\nThis was discussed in:\n1251, #713,  and #197\nIn my opinion, caching is too client specific to be in scope for Moya. It would be better to let a caching library focus on this end of things. I think something great about Moya is that it makes things like this easy to do with the PluginType system as you demo'd above.. @fredpi Thanks for clarifying, I agree with you \ud83d\udc4d In my opinion, I just want to keep the Moya codebase small. I feel that Moya is in the business of making something like plugins possible, and consumers of the library should be responsible for writing them. Otherwise, we're just going to end up maintaining a bunch of different plugins. \nIf it was a plugin that was really difficult to write and widely used, I'd consider voting to add it to Moya, but I don't see that in this situation. Maybe another Moya contributor has thoughts on this issue.. @LucianoPAlmeida Thanks for taking this on \ud83d\udcaa Can you squash all these testing commits into one commit when you get things working?. @LucianoPAlmeida it doesn't seem to be ignoring ld warnings \ud83e\udd14 . @LucianoPAlmeida why are all the lines strikethrough above?. @LucianoPAlmeida maybe we should delete the comment and see what happens when we rebuild it a few times?. @pgawlowski You're going to need to create some boolean properties or another enum and then switch on them inside of your TargetType to determine which sampleData or which stubClosure you'd like to use. . Hey @ivanmah, can you show me the configuration for your TestTarget type? Did you make any changes to the endpointClosure? Thanks. @feixue299 Can you show the code where you're calling this from?. @feixue299  It is because you are not retaining your provider. It needs to be at a scope outside of the function definition in order for it to be retained. \nProviders.md\n\nAlways remember to retain your providers, as they will get deallocated if you fail to do so. Deallocation will return a -999 \"canceled\" error on response.. @QiProject This looks like expected behavior to me, you need to retain your NetService object which causes your MoyaProvider to be retained as well. \n\nBy using NetService().req(\"Jim\") your provider is deallocated immediately\nProviders.md\n\nRemember, where you put your target and the provider, are completely up to you. You can check out Artsy's implementation for an example.\nAlways remember to retain your providers, as they will get deallocated if you fail to do so. Deallocation will return a -999 \"canceled\" error on response.\nThe same reminder applies also to Moya Reactive implementations, but you will not receive any response because the whole Observable will be disposed, releasing any subscription that you may have configured.\n. @AndrewSB Using a Result here would require changing the API to be:\nswift\nfunc prepare(_ request: URLRequest, target: TargetType) -> Result<Error, URLRequest> {\n   // ...\n}\nThat's a bigger change than just making the method throwing. I do like the Result type but I find myself using it towards later stages in the API -- whereas I tend to use throws in lower level methods/helpers because they're most likely using a throwing API from UIKit or some apple library.\n\n. Thanks for the input @pietrocaselani, I think there could be huge benefits to something like this as well. \nIn my app I'm faced with a situation where I need to modify a request's parameters asynchronously but not through a request per say. Rather, I just need to access an optional value on some other object that could or could not be nil. So chaining callbacks, promises, or Rx are all useless to me\nRight now I'm writing a wrapper around my MoyaProvider to wait for this value to not be nil.\nTL;DR this doesn't scale well and creates some tight coupling between my provider and this resource.\nI do agree this would work awesome for a RefreshTokenPlugin. Hey @pedrovereza, as I was explaining it I was realizing it was a slippery slope and difficult for people to understand my situation.\nTo better explain my problem, I need to access an optional resource (a Firebase token) but I'm only given a synchronous API to access it. The resource is set by Firebase internally, asynchronously. Thus I have to block all Moya requests until this resource is available. If that makes more sense?\nI've solved this problem without an async plugin, I'm just saying it would help me decouple the relationship between my providers and this resource\nThat being said -- I think there is value for this in Moya beyond my specific use case as @pietrocaselani has mentioned -- as long as it doesn't introduce a ton of complexity or heavily impact the existing API. I think it would be a good idea to mock up a plugin as an example like you said. I agree that I don't want to be supporting async plugins through Moya. I'd just like to make it easier for users to create their own async plugins.\n\nI implemented a refresh token logic using the RequestClosure API because it's async, and there is no (good) way to do a sync request.\n\nThis is a really great point \u261d\ufe0f Honestly, I really dislike that Moya provides 2 ways to do similar things: closures to customize requests and plugins to customize requests. I still hold a long term belief that Moya should deprecate the usage of customization closures on the MoyaProvider and favor a plugin system.\nMy problem with providing both of these methods is they actually conflict and if you use both combined you can actually end up creating undefined behavior (see #1549).\nHowever, to deprecate something like requestClosure & endpointClosure you would need:\n1. an async plugin system to replace the asynchronous capabilities of these closures\n2. the ability to stub an endpoint not using a endpointClosure (see #1502)\nIf you do these two things, you essentially don't need closures any longer. Everything that the closures can do the plugins can. It doesn't hurt to ping @Moya/contributors for any input on the discussion. Things have been slow around here lately \ud83d\ude06 . @pietrocaselani Yeah this is definitely not a feature that will be in Moya 12.0 \u2014 we also need more community input on this subject. Other than that, I would like to finish #1502 before submitting a PR for something like this because they will both make changes related to Moya internals\nSent with GitHawk. @pietrocaselani I tried doing this with the RequestClosure as you mentioned above and it was very difficult because the Endpoint object is useless to me, I need access to the underlying TargetType that's been abstracted away. @pietrocaselani this is a really clever approach \ud83d\udcaf that may work for my architecture. I'd argue this is pretty unfriendly though. Hey @m3g0byt3, thanks for submitting this PR \ud83d\udcaf \nI've only glanced at it but the general idea looks good to me. Any other @Moya/contributors with more Ruby knowledge than me want to take a look?\n. Thanks for raising this issue \ud83d\udcaf I didn't get time to work on the 12.0 release last weekend unfortunately. I plan on trying again this weekend but if anyone wants to work on it before then -- feel free.\nSince #1126 / #1502 is my pr, I'll chime in on that. I'm very confident that this change is the correct direction Moya should take, but I think delaying this to Moya 13.0 is a healthy decision. I'm biased to my own design so if possible I would like other @Moya/core-team members input before making this change \ud83d\ude15. Yeah, there's not a lot of breaking changes but I believe we need a migration guide. I'm working on it now. Migration guide is in #1710 . I released 12.0.0-beta.1. It looks like I missed some commits from master but they are all related to documentation and nothing related to Moya functionality. \nI'll make sure they get added to the next beta (if there is one). If anyone is significantly bothered by this I can roll it back and re-release\nEDIT: just looked again and it's really not even worth trying to add those commits. my bad though. Next person who reviews this, unless you have something to add, please merge and I'll do the 12.0.0-beta.1 release following. @pedrovereza I'm not sure what you mean by \"recreate\". Sorry for letting this drag on. I was going to solve it by re-running bundler on development to replace the lockfile. @pedrovereza I see what you mean. There's 43 commits on development that aren't on master yet, as we usually do the beta releases from the development branch\n. Sorry, it took me so long to resolve this. I had a nightmare of a month at work. Closing this as it's no longer necessary. I resolved the conflict on development by running bundle update and pushed. Thanks for helping out here @zhongwuzw \u2764\ufe0f \ud83e\udd47 . @phi161 This is a good question. I\u2019m not sure if Moya should dig into the underlying target type or only concern itself with the top level MultiTarget. Can you make MultiTarget conform to AccessTokenAuthorizable to solve your issue? \nSent with GitHawk. @phi161  Have you confirmed that this would be a valid solution?\n\nOne way to solve this would be to change the way plugins modify requests - something like this:\nswift\n// Allow plugins to modify request\nlet preparedRequest: URLRequest\nif let multi = target as? MultiTarget {\n    preparedRequest = self.plugins.reduce(request) { $1.prepare($0, target: multi.target) }\n} else {\n    preparedRequest = self.plugins.reduce(request) { $1.prepare($0, target: target) }\n}\n\nI suspect this solution does not work as you intend, however, I have not confirmed it myself. Currently, the target parameter is typed as Target -- the generic component of a MoyaProvider. I believe this is what allows the compiler to know that this generic type conforms to AccessTokenAuthorizable. \nWhen you access the multi.target property, the return type is just a plain TargetType -- so I don't think the compiler will know that this type also conforms to AccessTokenAuthorizable. \nHow could we solve this?\nWe could cast to AccessTokenAuthorizable to check this, but this is a slippery slope in my opinion because I think it is best to keep logic relating to a specific plugin outside of Moya's internals.\nOther concerns\nThis also raises the question: \nWhich TargetType takes precedence? The MultiTarget or the embedded Target?\nIn my opinion, the MultiTarget should be the type considered when applying any plugins because it can then be used to share plugins among the embedded targets.\nBecause of this, in my opinion, this is expected behavior\nAlso related #1492 \n. @phi161 I'm glad you were able to resolve this \ud83d\udc4d I'm going to close this issue but feel free to re-open it if the problem continues. Hey @tiago-queiros, I'm going to close this due to inactivity. If you think we should bump the min RxSwift version please feel free to open an issue \ud83d\udc4d . I have yet to try running Moya, RxMoya, or ReactiveMoya on Swift 4.2. I'm guessing we need to update the minimum version of RxSwift to 4.2 and ReactiveSwift to 4.0?\nWe're ready to do a Moya 12 release once we're certain things work on Swift 4.2. We'll be releasing a Moya 12.0.0-beta.1 shortly which will resolve the issues with your Carthage dependency. I see it happening this week @kamranpirwani. Really just waiting on #1740. Don't think anything else needs to be done. #1753 \ud83d\udc4d . @nicktrienensfuzz Thanks for submitting this PR \ud83d\udc4d I had to change the base branch to point to development because Swift 4.2 changes would need to go in the next major release.\nCan you also remove the commits from master that are unrelated to this PR?. Hey @nicktrienensfuzz, I appreciate you taking the time to submit this but we're going to close this in favor of #1740 . This should be fixed by Moya version 12.0. Please upgrade \ud83d\udc4d Thanks for your patience. @lexorus Thanks for taking care of this \ud83d\udc4d Sorry for the delay!\n\nShould I also update .circleci/config.yml's xcode version?\n\nI think that would be great \ud83d\udc4d \nWe should be able to proceed with a Moya 12.0.0-beta.1 release after this. . @lexorus If you also want to add a CHANGELOG entry regarding support for Swift 4.2 that would be \ud83d\udd25 . @lexorus Looks like CI is still failing. That aside, I definitely think we should keep the cached builds. There used to be a rebuild without cache option on Circle CI but I'm not sure where it went now that we switched to Circle CI 2.0 \ud83e\udd14 \nBtw, are you using Moya at Crunchyroll? I only ask because... I \u2764\ufe0f Crunchyroll \ud83d\ude06 . Good thoughts here everyone \ud83d\udc4d I think @freak4pc is correct that we should not disable the SwiftLint for the Tests directory. @lexorus Would you mind reverting that change?\nDisabling the warnings via comments seems to be the strategy we\u2019ve used in the past and I\u2019m fine continuing to do that moving forward. If there\u2019s a better solution we can take care of it with another PR.\nThe SwiftLint errors in the test target are also not caused by this PR so I don\u2019t think they need to be resolved in this specific PR\nSent with GitHawk. This should be fixed by Moya version 12.0. Please upgrade and feel free to re-open if the problem persists. Thank you for your patience \ud83d\ude4f . @r3econ Other than initializing a new MoyaProvider, you could do something like:\n```swift\nprotocol OffOnPluginTarget {\n    var needsPlugin: Bool {  get }\n}\nenum MyTarget: TargetType, OffOnPluginTarget {\n    var needsPlugin: Bool {\n        return false\n    }\n}\nclass OffOnPlugin: PluginType {   \n    public func prepare(_ request: URLRequest, target: TargetType) -> URLRequest {\n        guard let target = target as? OffOnPluginTarget else { return request }\n        if target.needsPlugin {\n             // do this\n        } else {\n            return request\n        }\n    }\n}\n```. Tagging #1357 . I was planning on doing a release yesterday but then I saw this PR. I need to check out this branch and compile Moya. I'm not sure why this didn't fail in #1740 . Hey @multinerd,\nYou may want to check out the getting started guide for the non-Rx version of Moya. You can also see the non-Rx MoyaProvider documentation here. Hope this helps \ud83d\ude04 . @maxxx777 This is super cool \ud83d\udcaf I briefly took a look last evening and was happy to see you decide to add some ignored words. Based on the output above, it looks like we may want to add some more: iOS, Codable, Deallocated, Initializer? Whatever is not a typo really.  \nOn one hand, it's almost as if we'll never remove all warnings entirely because proselint is so opinionated. However, if we keep up with it by adding ignored words on doc changes/enhancements I think this will scale.\nI almost wish it collapsed the warning though and we could expand as needed \ud83e\udd14 . @maxxx777 Sorry for the slow follow up. I don't have any specific changes. I like the idea behind this -- I just think this will add a lot of noise to PRs. Maybe some @Moya/contributors have ideas/feedback?\nThanks \ud83d\udc4d . > I'd recommend only having it run on new or modified files instead of every text file when there's a single change - easier to get buy in from whoever is working on that file\n\ud83d\udcaf I think this is a great idea. Hey @WenzheFan, you can find the documentation for Moya here. I recommend starting with basic usage. Hope this helps \ud83d\ude04 . @Moya/core-team We've all been pretty quiet for a while. I just thought I would give y'all a friendly ping to sign off on this. This release is long overdue. It was initially delayed as we were waiting for the release of ReactiveSwift 4.0 but one thing led to another and here we are -- some time after Swift 4.2 . We'll have to update the README for this as well. @gligorkot Of course, I like the idea of #1502 too lol. However, decisions like this have always been made by a combination of core team members and the rest of the Moya community. I'd like to keep the development process this way and because we don't really have many active team members as of lately I'm hesitant to make \"big\" changes. Hey @amaurydavid, we've talked about changing the stubbing API, check out #1502 and let me know what you think. Hey @TarekSalama, I've yet to run into this situation but it could be because your MoyaProvider is being deallocated and thus the request is canceled. Hey @simonrice, yes we should bump the version in the podspec as well \ud83d\udc4d Could you please add a CHANGELOG entry under Changed to convey this to users?. This should be fixed by Moya version 12.0. Please upgrade and feel free to re-open if the problem persists. Thank you for your patience \ud83d\ude4f . Hey @ranhsd, this feature was added by #1611. It's currently on Moya development. Will be available in Moya 12.0.0. This is now available in Moya 12.0 \ud83d\udc4d . @gityubj Could be related to #1758 . This should be fixed by Moya version 12.0. Please upgrade and feel free to re-open if the problem persists. Thank you for your patience \ud83d\ude4f . Tagging #1357 for anyone who wants to translate one day. Looks like I could've broken the labeler in https://github.com/Moya/moya-peril/pull/32 \ud83d\ude05 What a night. Can you share your podfile @UNIQUEXJ? I'll try some example projects with Moya now \ud83d\ude15 . Thanks @zgjff I can reproduce so I'm looking into it. Could be related to #1758 and #1766 but I'm still unsure. The deployment targets are set for the RxSwift and ReactiveSwift targets in the xcodeproj. All platforms are supported for the targets in build settings as well. @Moya/core-team Anyone has any ideas as to what's wrong here?. Yeah, so it looks like definingwatchos.deployment_target inside of the subspecs is the culprit. I don't know if we can have different deployment target for different subspecs. \nThe previous minimum deployment target is 2.0 and RxMoya now requires 3.0. The best solution might be to just make the minimum deployment target 3.0 overall. Reopening because this is still broken when downloading from CocoaPods. Installing locally works for me now. Don't think I can fix this tonight. I'll likely have to ship a 12.0.1 to update the podspec stored at CocoaPods/Specs. I think that's the remaining issue. Very tired of this rabbit hole though \ud83d\ude05 . @UNIQUEXJ @zgjff @Limon-O-O This should be fixed by Moya version 12.0.1. Can you please let me know if that works for you? Really sorry about this \ud83d\ude13 \nI'm going to leave this open for visibility. @andre991 Hey there,\n1. Make sure you are using Moya version 12.0.1\n2. Try deleting your derived data folder and rebuild\n3. Make sure your deployment target is set to 3.0 in your project. Linting the pod spec fails again with these changes \ud83d\ude13\n- ERROR | [Moya/Core, Moya/ReactiveSwift, Moya/RxSwift, and more...] xcodebuild: Returned an unsuccessful exit code. You can use '--verbose' for more information. \nTrying to get the output of verbose but last time I tried it was utterly useless. Will also try the CocoaPods beta to see if it goes through that way.\nEDIT: Upgrading CocoaPods worked. @xavierLowmiller Hey, this might be configurable through Alamofire's manager.\nCan you check out this stack overflow post on handling redirects in Alamofire -- it links to a related PR for support for this in Alamofire\n\nWe're looking for a way to not follow redirects on some targets.\n\nIf your question is specifically asking about how to configure this on a target by target basis, I don't have any great ideas off the top of my head. The Alamofire Manager used by a MoyaProvider can only be configured per provider:\nhttps://github.com/Moya/Moya/blob/master/Sources/Moya/MoyaProvider%2BDefaults.swift#L28-L37\nWithout giving this more thought, I'd say you may need two providers -- one that allows redirects and one that does not.. > What I was hoping for would be a shouldFollowRedirect or something as an extension on TargetType, similar to the optional validationType.\n\nI'm willing to look into this. Would you be interested in a Pull Request?\n\n@xavierLowmiller My concern is that TargetType will become bloated with all of these configurations. We have a policy of not setting default values for protocol requirements in order to be explicit in the intent.\nI'm also concerned about how this would work with concurrent requests that all share the same Manager \ud83e\udd14 \nWill tag @Moya/contributors to see if anyone has input or more experience here. Yep @AndrewSB, that I agree with. He's looking to customize the behavior of MoyaProvider's manager on a TargetType by TargetType basis. Not sure if that is feasible, or as he mentioned, common enough to support in Moya. @kakubei Sounds like you need to configure the URL outside of the target. You should look at the MoyaProvider's endpointClosure or the PluginType class. Sorry I don't have time to post an example.\nPS. If you could pass the userId into your TargetType model that is a far more recommended approach when using Moya. @andmix Can you give me some more context here? How are you installing Moya? Can I see your lockfile?. Hey @dpoggi \n\nI recognize that an unsolicited PR is less than ideal, and I do apologize. This is something I thought I ought to do while I had the spare minutes and the inspiration.\n\nAlways recommend opening an issue but nonetheless thanks for the PR \ud83d\udc4d \n\nMy frustration, looking at a run-of-the-mill \"handled\" error in Bugsnag, when I realized I couldn't determine the key path at which Codable's object mapping had failed.\n\nI'm definitely a little skeptical about modifying Moya for better integration with other libraries that use NSError, one of our principles is to provide a Swift-first API/abstraction for making network requests. But I can understand your frustration \ud83d\ude1e \nIf I'm reading this right (I'm not familiar with CustomNSError), it looks like the errorDescription property would be deprecated with this change, so it's API breaking.\n@Moya/contributors do you have any input here?. Hey @alexandergmacleod, thanks for taking the time to submit this PR \ud83d\udc4d \nI'm actually not a huge fan of this functionality. It seems odd to allow the user to discard the result of a filter. If you don't need the result then it seems like you're not trying to \"filter\" but are rather trying to \"validate\" the response. \nHow about using Moya's validationType property on TargetType?. Nit suggestion but we name this gitHubProvider then access provider in the example. Same thing in RxSwift.md. @sunshinejr CI fail is possibly related to this?\nno umbrella header found for target 'Moya', module map will not be generated. I think if you click on the .h files and go to File Inspector -> Check the respective box for Target Membership this should resolve the issue.\nEDIT: I think it may be a bit deeper than that. There are no headers or compile sources under build phases. \n. @AndrewSB I had similar thoughts. It defaults to self inside the method body with a nil coalescing operator. \nSwift\nlet callbackQueue = callbackQueue ?? self.callbackQueue\nWe could possibly explicitly mark this parameter as nil by default?. I think it would be better to swap the order of the urlParameters and bodyData associated values. The first associated value should match the last word of the enum case. I have the same opinion for a few other cases below it.. A little trivial and unrelated to the PR - but can we pull this switch statement out into a processRequest || processTask function? This way we don't have nested switch statements and can start cleaning up this behemoth of a method \ud83d\ude03. Awesome. This looks great with the do/catch removed.. This is confusing to me as well \ud83e\udd14 I have no suggestions for a replacement.. Yeah, we can achieve this with requestCompositeData. It may not be as clean, but I think it's better than undefined behavior. In my experience, if it's possible for someone to make a mistake -- someone will. It could be as simple as using the wrong encoding w/ auto-complete.\nI'm fine with removing it for now. We can start simple and then expand the API from there based on user feedback. \nAnother suggestion would be to throw an error in this situation. The previous API returned nil and ignored encoding errors, but now we have a lot going on here.. I was thinking of something more along the lines of making urlRequest a throwing method:\nswift \nfunc urlRequest() throws -> URLRequest\nThis way we can make use of the other encoding errors + add our own MoyaError cases.\nI don't know how difficult this would be to implement without looking at the callers.\nI'm not 100% against using a fatalError but I'll acknowledge I am a bit biased towards its use. It's certainly more explicit but it also feels like we're avoiding the problem \ud83d\ude1e. Sorry I did this quickly! I thought code was arbitrarily highlighted but I realize now it was talking about the error code.\nI also usually put a trailing parenthesis behind my example abbreviation: ex) eg) etc. If that's a problem I'll fix it. If you're talking about adding the spacing, I felt like having the example mid sentence really flowed poorly.. I'm fine with that, a closure would be far more flexible. Good idea regarding using autoclosure \ud83d\ude03 . @sunshinejr Were you thinking of removing the token property and replacing it with a tokenClosure too?\n```Swift\nlet tokenClosure: () -> String\npublic init(tokenClosure: @autoclosure () -> String) {\n   self.tokenClosure = tokenClosure\n}\n``\nDo we want this to be escaping?. This probably needs to be removed now. I agree, less forceful \ud83d\ude06. I don't know if adding tests needs a CHANGELOG entry but we usually list all API breaking changes first.. I think moving it to the bottom would be great. Right under where we mention addingSingle.. @freak4pc I think we have to import UIKit to use CGFloat \ud83e\udd14./Users/distiller/Moya/Tests/TestHelpers.swift:174:50: use of undeclared type 'CGFloat'; did you mean to use 'CGFloat'?` -- This is such a weird CI error.\nI learned yesterday that CGFloat is not declared in Foundation. It's part of UIKit \ud83e\udd14. @BasThomas I came to that realization after awhile! I have to stop thinking in the extreme that everything not in UIKit is Foundation. I originally thought that Foundation imported CoreGraphics because they have an Int.init(CGFloat)... Stopping to think -- it's actually more likely that CoreGraphics extends Foundation with this initializer...  I'm such a noob \ud83d\ude06 . Can these two cases be merged into one since they have the same implementation? One less String \ud83d\ude05 Small and nitty -- I know  . Thank you, I was biting my tongue on this \ud83d\ude13. I believe this is failing because I don't thinkurlForImageResource is available on iOS.. We probably shouldn't use the word override. I also noticed that the cases aren't prefixed with a full stop \ud83d\ude05 \nIt's amazing how much I take auto-complete for granted...\nIf you fix this can you also indent the switch statement?. Should these be .exact versions as well?. Very minor detail but \"and url parameter\" -> \"or url parameter\". @AndrewSB Since AccessTokenAuthorizable is implemented by adding its conformance to an existing TargetType, there could be endpoints within that target that don't want auth. I had similar thoughts regarding how many cases this plugin would support. I was thinking about changing the enum to use associated values.\nSwift\nenum AuthorizationType {\n    case header(String)\n    case urlParameter(String)\n    case none\n}\n. If you needed to use the header and urlParameters you would have to add the parameters in the TargetType still. The AccessTokenPlugin was designed around supplying header values.. What if we had a ParameterPlugin or HeaderPlugin that would add a shared parameter or header across TargetTypes? Too awkward? I agree with the need for reuse.. @dotprox I don't know what's best to be honest and it's not for me to decide alone. I'm just trying to drive some discussion. I don't want to ask you to do A then decide B \ud83d\ude10 Maybe we should open an issue discussing reuse across multiple targets and see if anyone has other ideas/input. Swift\npublic struct HeaderPlugin: PluginType {\n    var headerValue: String\n    var headerName: String\n}\npublic struct ParameterPlugin: PluginType {\n   var parameterValue: Any\n   var parameterName: String\n   var encoding: ParameterEncoding\n}\nEDIT: The shouldApply would be part of the protocol but hopefully this conveys an idea\nThis sort of removes the concept of auth but it is a way to share a specific header or parameter across multiple targets. @sunshinejr I like what you suggested but what feels awkward is when I don't want to deal with a header vs a parameter or vice versa. It would be nice to see this decoupled.. Swift\nprotocol ParameterApplicable {\n    var shouldApply: Bool\n}\nprotocol HeaderApplicable {\n    var shouldApply: Bool\n}\nThe TargetType would need to conform to one or both of these then you just return true or false depending on the case of the target. I can open an issue a little bit later documenting what's been discussed\n. Created an issue #1283 to summarize what has been discussed here. If two different Endpoints both fail to produce a urlRequest it will compare both endpoints using the hashValue of the url: String property. \nSo if two different Endpoints both fail to produce a urlRequest and they have the same String for the url -- they will be considered equal. I'll add a comment noting this behavior.. Great idea \ud83d\udc4d Thanks for the input. suggest for -> suggesting better\nThis matches the rest of the verb forms used in the other two points. Yes, they should be automatically created and specifying the keys is only necessary if you want to change the name.. Added Decodable object mapping methods to Moya.Response. \nThis could be a little more descriptive. Sorry to be so needy \ud83d\ude05 . Much cleaner \ud83d\udc4d. Bonus points for updating the Chinese docs \ud83d\ude31. My OCD is killing me -- technically this is not a breaking change as we've separated the breaking as its own entry. If you clear this up you'll be my hero \ud83d\ude05 . Yeah LN 8 is not a breaking change. The breaking component is listed on LN 6. @lovesomeone The descriptions may be similar but the syntax provided in the code snippets is different. I think that there should be a RxSwift.md & ReactiveSwift.md just like the English docs.. I have it listed under Endpoint Migration so I was hoping that would provide enough context \ud83e\udd14. Yeah I agree \ud83d\udc4d I'll make these changes. I agree. I will make this more clear. Do we want >= or just 4.0.0?. I agree. It would probably be good in Providers.md, RxSwift.md, ReactiveSwift.md. If you want to add basic too that's fine \ud83d\ude05. Yeah but this keeps coming up mainly on the reactive providers? Or is it just because most people use the reactive Moya libraries?. Ok sorry to bikeshed the issue \ud83d\ude05 I think Providers.md and Basic.md will be clear enough. Duh \ud83d\ude10 I just had to change self to base. Now I feel stupid \ud83d\ude1d . Yeah, I see now. self was referencing the ReactiveBase and base references the wrapped value. \ud83e\udd26\u200d\u2642\ufe0f Thanks \ud83d\udc4d  . Yes, I'm pretty sure when I was digging through Foundation's source, I saw that isValidJSONObject just performs all the checks we're attempting here.. @BasThomas I seriously love how you're always willing to go grab a reference \u2764\ufe0f . It looks like we're repeating this block again. Can we extract it into a closure?. Can you explain why we had to add this wrapper?. @devSC Thanks for this pull request, however, this is the correct code style for Moya 10.0+.. @devSC However, our Chinese docs here are invalid. We should be using try and do/catch. Care to update these?. This is very nitty but mind shifting this ident over <- ?. Maybe we can add test case for when encoding fails?. Maybe we could make the section header something like Development Process?. I really like this last paragraph too because it stresses the importance of merge vs rebase on the development branch and this is something I did not know \ud83d\udc4d . Maybe a .none case would be more expressive? . Just fixing the ones in Package.swift would've been ok... no need for a separate PR \ud83d\ude13\nNow this misalignment is killing my OCD. @BasThomas Looks related to #1499. It's possible we can't run the demo with pod install because the Quick/Nimble dependencies are managed with Carthage?. This is also the only thing I haven't been able to get around with this PR. I don't use theMultiTargetso I don't really understand it's purpose.. I had to make some changes here but I think they're unrelated to the PR. I was getting the string back with a different capitalization. It also returns the content-length, 43, wrapped in parentheses now. No matter what I tried I couldn't get(43);==(43);String testing is brittle. Looks like this is the cause of CI failure now \ud83e\udd14 . An update on this:\nMy tests won't pass locally without these changes, but the changes cause CI to fail.. This is a breaking change because we changed the function signatures of themapmethods. This PR is very low priority IMO. It won't make it in Moya 12.0 for sure and I'd like a few Moya members to discuss if they even like this change.. I believe this should work as well. Good clean up \ud83d\udc4d . Ah, I commented it out temporarily. I should've added a TODO. I don't think I should be reducing test coverage, but rather fix whatever tests I break \ud83d\ude05 . Thanks for the review!. @sunshinejr This is the test that fails locally for me. The \"status code: 200, headers\" comes back with capitalized words when I run them locally and on CI they're not capitalized.. Locally, 43 comes back as (43) wrapped in parentheses. On CI it does not \ud83d\ude13 . Yep, it doesn't break any functionality but it breaks the API. The map method has a new parameter, which is a change in the function's signature, and therefore it is a different type.. Sorry @sunshinejr that was me \ud83d\ude05\nhttps://github.com/Moya/Moya/pull/1508#discussion_r157958053. My definition of breaking is anything that will prevent the project from compiling. Changes in variable names, type names, function signatures, adding/removing cases from an enum, or changes to a more restrictive form of access control. . Nothing in particular, I just go by those general rules \ud83d\ude05 Someone could be relying on the function signature ofResponse.map. Using it as an argument of a higher order function maybe? . this needs to be removed :joy:. Any reason why we didn't do the core Moya pod as well?. I think it is better to keep this in the test target if we're not using it in the core library?. Ok, thanks for pointing that out. I'll take care of it tonight \ud83d\udc4d . Can we add aChangedheader here?. Can we add aChangedheader here?. Can we add these 3 things underChanged?. Can we move this up to added?. Can we move this up to added?. Lets putChangedhere after moving the two items below. Changes -> Changed. Remove the space to fix the header. Sounds like a good idea to me \ud83d\udc4d . I think our hands are tied on this one. Response validation is only done on Alamofire integration tests. So I can't stub and ensure a response \ud83d\ude15 This could be an improvement . Ugh, that is what I had originally. I knew I should've left it \ud83d\ude06 . Great catch. I totally forgot about that. This is the change I discuss in the body of the issue above. I can do that \ud83d\udc4c. To be honest the reason why this is such a hack of a test is I can't validate a stubbed request. Or else I wouldn't need another enum case \ud83d\ude15 . I wasn't able to test for287specifically because I have no control over the actual response since this is not a stub. I just tested forValidationType.successCodesinstead. I didn't mention Alamofire because technically it doesn't have anything to do with Alamofire \ud83d\ude02 They don't need to know that though. He always had eyes like a hawk \ud83d\ude06#1reviewer \ud83e\udd47 . Revisited this today... I have a feeling it \"just works\" now that I understand whatMultiTarget` is doing.\nIf the multi-target type is a TestTargetType the user will have to specify where to get sampleData from.\nFollowing the pattern of the existing properties, they would have to extract the associated value of the target case. Then they would have to cast to TestTargetType to access the underlying sampleData. \nIf casting fails they still have to return something because sampleData is non-optional. Really hard to go unnoticed unless you're already writing bad code to begin with.\nSo as the other properties are doing, they would unwrap the associated value of the enum and return the data from the nested target. . @sunshinejr I wouldn't say \"we won't provide any support\" but I was going to suggest that they extend MultiTarget to conform to TestTargetType inside their test target. We could add a MultiTestTarget if you believe this is expecting too much.\nI guess the latter also has some added type safety, because we can ensure that the associated value in the enum case is a TestTargetType as well. MultiTestTarget would cover all cases because the enum associated value would have to be TestTargetType as well. \nAn edge case would be a MultiTarget with an inner TestTargetType. Stubbing would be determined by the type of the root target, MultiTarget, so it would never stub.\nWe could document this. Even provide an assertion/error if the inner target is a TestTargetType but MultiTarget is not? The only way to fully prevent this is to check every target at runtime by trying to cast it to TestTargetType.. Honestly, the edge case allows you to opt in or out of testing by wrapping your TargetType or TestTargetType. It's valuable behavior in a way \ud83d\ude02 \nLet's sit on this a bit more for me to explore casting. To be honest, I really liked the code separation that the where clause provides, but if I can protect people from their own design decisions then that should be explored.. Realized last night in a dream that nothing can be done with casting. The MultiTarget abstracts away any sense of an underlying TargetType.. Can you just use a String literal \"Basic\" here please? I trust you not to misspell it \ud83d\ude1d . ~I think this makes more sense to be optional and return nil for .none. We just break on .none so having a non-nil value doesn't save us much. It just makes it more confusing for a user that they are receiving an empty string.~. Scratch that, ValidationType returns an empty array for .none so I think this is fine as well. Better to remain consistent. We have to split it into 2 separate cases. We lost rawValue because we have an associated value now. The reason I suggested this is I don't want to rely on String(describing:) then capitalized to save 1 line of code.. That\u2019s a great point! You rarely if ever see optional arrays for that reason. I change my mind again \ud83d\ude06. May want to remove the reference to a closed range in the comment above. I'm not sure if we do this in our other docs but I would remove the link. These are hard to track down if our doc structure changes.. Nit: This is, because -> This is because. an it can be -> and it can be. Can we change this line to:\n\nA sampleResponseClosure should return a case of the EndpointSampleResponse enum:\n\nI just want to mention that this is an enum.. Nit: error occurred -> error that occurred. I feel like this section is a little unclear but we could expand on this later in another PR?  I would like it to feel a bit more explanatory.\n\nThe stubClosure property of a MoyaProvider is responsible for configuring whether a provider returns an actual or stubbed response. The stubClosure is responsible for mapping a TargetType to a case of the StubBehavior enum:\n\nThen I would list all cases of StubBehavior and explain what each of them does.\nI just think it's clearer this way and also matches the setup of the next section. \ud83d\ude13 . This was so confusing. The flatMap is from RxSwift \ud83d\ude44 . I had 1 chance and I goofed \ud83d\ude44 . AGreed. Thank you \ud83d\udc4d . This looks good \ud83d\udc4d I'm just curious if another Moya contributor thinks that we should extract this to a Formatter object at this point. . Nit: Think we need some work on naming here. \nMaybe NetworkLoggerOutputFormatter? Need advice from another contributor. Can't we just make this an open class and remove the protocol?\nDefaultNetworkLoggerOutput -> NetworkLoggerOutputFormatter. If we made it a NetworkLoggerFormatter we could throw these 2 properties in there as well to remain consistent . Possibly?\npublic init(verbose: Bool = false, cURL: Bool = false, formatter: NetworkLoggerFormatter = .defaultFormatter)\n. I'm fine with namespacing it, but then it can't be open. All the properties would have default properties (as you said), declared as vars, so you can assign a different closure to them.. Yeah, I think this could be a beneficial addition. If we don't add it here, let's open an issue for it. argument with constrained -> argument constrained. Sounds good to me, I just removed that part relating to the default case. This will be done by the release script after merging into master. Good question, I should check this. Not a bad idea to mention it \ud83d\udc4d . I can totally handle it. Feel free then lol. Just didn\u2019t want to bother you. Want to bump the Swift version in the podspec too?. ",
    "gregpardo": "So I messed around on a branch and experimented with making the plugin system middleware style. Where each plugin can transform data before reaching the next plugin. I realize this is a huge change and there may be another way to accomplish some of the same things. One major change in my experiment is that all data is now 'AnyObject?'. This could allow for easy means to mutate response data and such for something like ObjectMapper. \nhttps://github.com/gregpardo/Moya/tree/experiment/middleware-flow\nAnd example of a plugin that can transform response data might look something like this...\n``` Swift\npublic class ResponseTransformPlugin: Plugin {\npublic override func didReceiveResponse(object: AnyObject?, statusCode: Int?, response: NSURLResponse?, error: ErrorType?, provider: MoyaProvider<Target>, target: Target) -> MoyaProvider<Target>.Response {\n    object = target.responseTransform(object)\n    return MoyaProvider<Target>.Response(object, statusCode: statusCode, response: response, error: error, provider: provider, target: target)\n}\n\n}\npublic extension MoyaTarget {\n    func responseTransform(object: AnyObject?) -> AnyObject?\n}\n```\nThen the target could look something like this\nSwift\nextension MyTarget : MoyaTarget {\n   // Other setup here first (baseUrl, path, etc)\n   public func responseTransform(object:AnyObject?) -> AnyObject? {\n       switch self {\n        case .GetUser:\n            let user = Mapper<User>().map(object)\n            return user\n        }\n   }\n}\nDoes this make any sense or have I taken some strange roundabout approach to attempting to give plugins more power easily?\n. Well yeah it works both ways but the downside of the reactive extension approach is a couple things in my opinion. \n- Different extensions need to be written for RxSwift/ReactiveSwift\n- Either needs an API wrapper for all requests to map them to the object or each time the request is called the object class to map to has to be specified\nThe later seems like the approach most have taken but it kind of goes around the simplicity of configuring your provider and being ready to go.\nI guess noticed two things about the current system that may or may not need improving.\n- Plugins cannot mutate data in a middleware like fashion (Perhaps this is actually simpler and preferred)\n- Moya layer is confined to returning NSData thus not allowing plugins to override this naturally\n. I like the approach. I think it's a nice bridge and keeps any mapping out of Moya's responsibilities. Would it be possible to write an ObjectMapper plugin that allows me to configure different maps per endpoint with this?\n. Okay this looks like a great approach. I suppose whether something is a 'plugin' or not is not really important as someone can download a cocoapod of an approach like this and would get the functionality included. Now I just need to code an ObjectMapper RxSwift version!\n. Sounds good. I guess this ticket could become add examples of how to implement this. I think providing some direction in the documentation on how to accomplish such a thing would be useful to a lot of people. It seems this is a feature that a lot of folks are having to hack together. \n. When I did that it said there was conflicts with Moya's dependencies. Also the Moya podspec only defines target of iOS. \n. Well I did try that too and such resulted in the dependency conflict with my own pods. Here was the pods I was using.\npod 'Alamofire', :git => 'https://github.com/Alamofire/Alamofire.git', :branch => 'tvOS'\npod 'RxSwift', :git => 'https://github.com/ReactiveX/RxSwift.git', :branch => 'develop'\npod 'RxCocoa', :git => 'https://github.com/ReactiveX/RxSwift.git', :branch => 'develop'\n. A branch would be great. Keeping it out of the main branch until all dependencies are updated solves the issue for me at least. Then I can just use Moya and get rid of all the other libraries! Thanks for looking into this everyone!\n. In my Podfile\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => 'tvOS'\nI get this error on pod install\n[!] The platform of the target `My Project` (tvOS 9.0) is not compatible with `Alamofire (3.0.0-beta.3)`, which does not support `tvos`.\n. Okay I was anxious to try it and I guess I didn't notice the Alamofire part. It's working now. Not sure if you guys want to close this out or leave open until these libraries catch up and this can be merged into master...\n. That makes sense. The only issue I had with this was that I could not include custom enum types in the parameters\npublic enum MyApi {\n    case GetSomething\n    case SendSomething(CustomObject)\n}\nHowever I suppose this may not be a good idea and maybe I should map my objects to [String: AnyObject] before sending them through the parameters instead?\n. Apparently you can't if the object is marked as 'public'. I'm sure there's some sort of reason the compiler doesn't allow it. I'll just attempt to convert the object before hand and it should work fine for now. \nOne thing to mention though is that on Endpoint Documentation it mentions that:\n\nNote that the endpointResolver is not intended to be used for any sort of application-level mapping. This closure is really about modifying properties specific to the NSURLRequest, or providing information to the request that cannot be known until that request is created, like cookies settings.\n\nIs that supposed to say endpointClosure? Also it's kind of confusing wording at first glance. Maybe something like...\n\nThis requestClosure is useful for modifying properties specific to the NSURLRequest or providing information to the request that cannot be known until that request is created, like cookies settings. Note that the endpointClosure mentioned above is not intended for this purpose or any request-specific application-level mapping. \n. Erm realized I should have used ~> 2.0 on that instead... Grr\n. I remember seeing talk about this in the Carthage issues tracker. If I remember correctly there is nothing like subspecs in Carthage so essentially ReactiveMoya and RxMoya need to be separated into their own repositories/frameworks I believe. \n. The Cartfile is there now but I don't think it should include ReactiveMoya. Not all projects will need that dependency. Can't we just update the README to include instructions for setting up your personal Cartfile for all configurations: Moya, RxMoya, ReactiveMoya?\n. So it looks like anyone using Carthage has to install Alamofire, Moya, ReactiveCocoa, RxSwift, ReactiveMoya, and RxMoya it seems. Is that correct?\n. Okay so what's the downside if any of adding the other required install dependencies to the Cartfile? \n. Yes I mentioned that here. I can make another pull request if needed unless someone wants to push a quick fix. \n. I am also on board with moving away from NSError pattern. Can we just put the NSError into the metadata in case it's needed as well StatusCodeErrorMetadata @tomburns suggested?\n. Should an issue be opened on Alamofire? I do believe it would be an API breaking change but I think it's probably worth pursuing. The docs on swift errors suggest using the ErrorType pattern is the way to go. \n. Coincidentally, their 'benefits to upgrading' to 3.0 is almost all about errors.\n\nI think the part that may be of interest is the custom wrapping of any NSError to a type of our choosing. \nhttps://github.com/Alamofire/Alamofire/blob/0cb96d59ad47be1b6f5018188fcfd1d6b0ecbb0c/Documentation/Alamofire%203.0%20Migration%20Guide.md#benefits-of-upgrading\n. On board with this. This is much simpler. I was kind of wondering why it was broken up into 3 values related to response. \n. +1. Out with the old in with the new.\n. +1. Out with the old in with the new.\n. https://github.com/raywenderlich/swift-style-guide\nAccording to this we should just use namespaces. I'm okay with that. If there is a collision you just have a little more to type.\nSo you may have to refactor the refactor again if we go with namespaces :P\n. Quite impressive! I looked it over and it looks like this will be a great direction going forward. I'm going to go ahead and merge it so I can get some participation here. \n. I'm having the same problem. I thought it was a derived data issue or something like that but nothing I could do was working. When I removed my plugins it would compile but none of the autocomplete was working and it was seeming to happen with other pods to. It was driving me a little crazy glad I'm not the only one. \n. Update for me. I was also getting a casting to objc bridge error on my plugins array. Which is odd because I wasn't doing any objc. \nswift\nlet plugins = [somePlugin]\nNow works as\nswift\nlet plugins:[PluginType] = [somePlugin]\nNot sure if this is a related issue but was a similar obscure result. I'm guessing you have to be explicit in such a case because the compiler shouldn't assume you don't want to add other types of objects to the array later.\n. It may be more of a swift 2 lint/compile error than anything else. Just seems like sometimes the errors are really unrelated to what is actually going on.\n. Seems like a very similar issue. The swift compiler sometimes needs to be explicit but does not properly hint on where the problem is. I'm going to keep this in mind for this and other projects.\n. This has been discussed previously. I think what is currently implemented is the standard swift way. You can always alias if you want to use something else right?\n. I'm going to +1 this idea. I love Moya but while using it, one of my biggest frustrations was when working with/adding an endpoint... I would have to jump around these very large sections to get to the different parts of the enums. I think this is really great to have it all contained in a single place. \n. I create a protocol for my network calls wraps my methods of my target. Then I inject them into my view models using Swinject. This way my objects have no idea what they are interfacing with just that it conforms to a service or network type. Sounds similar to what you are doing.\n. Wouldn't you do something like this....\n```swift\nclass SomeViewController: UIViewController {\nlet provider = RxMoyaProvider()\n  let disposeBag = DisposeBag()\noverride func viewDidLoad() {\nTimer.every(5.0.seconds)\n   .flatMap({ _ in return provider.request(.heartbeat)})\n   .switchLatest()\n   .subscribe(onNext: { _ in \n      print(\"thump\")\n   })\n   .disposed(by: disposeBag)\n\n}\n}\n```\nEDIT: \nI realize I gave an answer but didn't really explain as Andrew did. This is probably more of a RxSwift question than a Moya question. You would treat the request as any other rx signal as Andrew mentioned. My example is showing that you probably want to extract the provider out and hold reference onto it instead of creating a new provider every time you want to make a request. In the example above the disposeBag is attached to the view controller... When the view controller goes out of scope, the disposeBag will be disposed, and so will any subscriptions attached to it.. ",
    "ivanbruel": "I created a pod for people who specifically want to use Moya alongside with ObjectMapper. \nI also created the RxSwift bindings, if anyone wants to create the ReactiveCocoa ones feel free to create a pull request.\n. You should update Moya-ObjectMapper to 1.3.1, as it supports Moya 7.0. \n. Can you copy-paste your Podfile? Seems like you should also update Moya-ObjectMapper/RxSwift to 1.3.1, but a Podfile would provide more info.\n. Try running pod update with the following pod versions.\n``` ruby\npod 'Moya', '~> 7.0.0'\npod 'Moya/RxSwift', '~> 7.0.0'\npod 'Moya-ObjectMapper', '1.3.1'\npod 'Moya-ObjectMapper/RxSwift', '1.3.1'\n```\n. ",
    "damianesteban": "Concerning the endpoint documentation:\nI'm working on an iOS application that fetches data from the GitHub API and I've already OAuth authentication.  Originally I was planning on using Alamofire to make the authenticated requests to GitHub, but I've been wanting to use Moya for a while in a larger project.  Anyway, I was going over the documentation on endpoints and I saw the OAuth example but it is not very clear to me how to implement it in an actual application.  Perhaps the Artsy application would be a good place to look?\n. You are welcome.  Yes, I completely agree that Moya doesn't need a separate OAuth component to it :smile: .  I have OAuth up and running with good old NSURLSession and I plan on eventually moving over to Moya once I get the rest of the requests a but more fleshed out.  Thanks!\n. I definitely will.\n. Not quite sure how I missed this :). Thanks!. I think that's a good idea. In fact, I would be happy to work on that.. Yes I will. Thanks.. I usually make a separate endpointClosure for testing errors, i.e.:\nswift\nlet failingEndpointClosure = { (target: MyTarget) -> Endpoint<MyTarget> in\n    let url = URL(target: target).absoluteString\n    return Endpoint(url: url, sampleResponseClosure: {.networkResponse(500, sampleErrorData)}, \n    method: target.method, task: target.task)\n}. ",
    "Dschee": "It just happened two days ago that one of my colleagues took over a project I implemented a new API class for using Moya and he was completely confused by the fact that an API error (regardless of 4xx or 5xx) was returned within the .Success case. Although I understand and like the fact that Moya only forwards network errors to the .Failure case what about renaming the generic .Success and .Failure cases to something more clear? For example simply adding Network as a prefix resulting to .NetworkSuccess and .NetworkFailure should already improve the clarity a lot. What do you think?\n. Hmm, I understand now why those are named the way they are.\nBut the good news is that the Result dependency has exactly the same license as Moya does (MIT). :) Therefore what about we create our own fork with only the renamed cases and use that? Should be a straight forward find & replace. And in case we want to update the dependency rebasing shouldn't be hard either. Also if I remember correctly I read about plans for the Swift Package Manager to support dependencies with alterations, so maybe we can even drop maintaining the fork sometime?\nNot very happy about the suggestion myself, but that would definitely solve the main problem.\n. Sure, no hurry on my side.\nI think we have two more options:\nFirst we could of course try to convince the Swift community that we need support for typealias for enum cases in Swift 3. Second option is we create a wrapper around Result that simply passes through all features we need for Moya from the Result project.\nThe first option (if it would be successful which we can't be sure of) would delay the support for a better naming until at least September so I think we should only discuss the second alternative for now. What do you think about a wrapper?\n. @jasl Although I like the suggestion about improving the failure case with pre-defined cases, that still doesn't solve the issue that API errors (4xx/5xx) are still accessed via something simply called .Success. The confusion therefore wouldn't be reduced with Timeout and Cancelled failure cases imo.\n. @jasl Thanks for adding cases for the success part as well. I continue to think those are great suggestions.\nBut again, that still doesn't solve the problem that the outer let .Success(response) case is named in a way people may be confused. To repeat the example with my colleague two days ago: I implemented a Moya provider class and he used it. But at the moment he wrote the first outer .Success and .Failure cases he already was convinced that he had handled API errors within the .Failure case and couldn't understand why the .Success case was called but didn't provide any data he was expecting from a successful API response.\nTo put it in code, here's what I would expect your code to look like:\nSwift\nprovider.request(.UserProfile) { result in\n  switch result {\n  case let .Response(response):\n    switch(response.responseClass) {\n    case .Success:\n      doSuccess(response)\n    case .ClientError:\n      // tip user provided data invalid\n    default:\n      // tip error\n    }\n  case let .Incomplete(error):\n    switch(error) {\n    case .Timeout:\n      // tip timeout\n    case .Cancelled:\n      // tip cancelled\n    default:\n      // tip unknown\n    }\n  }\n}\n. I suggest you try removing the entire Carthage/build folder and run carthage update --platform ios --no-use-binaries. That might work \u2013 no need to fall back to Xcode 7.2.1. ;)\nCarthage by default tries to reuse an already built framework (like here Result) as long as the specified version didn't change. You can force Carthage to rebuild by removing the build folder. Also I've added --platform ios as this saves time by not building possibly existing (but in iOS-only projects unnecessary) tvos, osx and watchos targets. Additionally --no-use-binaries ensures no pre-build binaries are downloaded.\n. @ashfurrow Can you maybe explain shortly why this issue is considered \"closed\"? I can't see how it is, none of the above mentioned workarounds is a real solution, they're all bad for different reasons. And I'm fighting with the fact that Moya is not supporting RESTful API endpoints nearly every second month when I write a new API client. Could we keep this open please until a real solution is there? I might even tackle this myself when I have some time .... @sunshinejr Thanks for pointing that out. Actually I have not used MultiTarget yet. But as far as I understood from the example docs it's rather there to structure the targets into smaller parts. Of course, one could use that and create one target per model, but then I have to still manually add my baseUrl, method and task in each target, right?\nAs far as I understand, the only thing MultiTarget does is to prevent me from having to create multiple providers \u2013 no other help is given in the TargetType. But with this issue I'd rather see something that simplifies defining the targets for RESTful APIs a lot. I have not worked on any details yet, but MultiTarget doesn't look like the real solution to me .... I'm happy #1147 is planned to be added, too \u2013 I think documentation is up-to-date, the only missing thing should be tests. I've got a question on the last bullet point of the initial post though:\n\nCheck 8.0 -> 9.0 migration with an old project and check if the fix-its work as expected / there is need for a migration guide\n\nFirst, do I understand it correctly, you were able to add Xcode fix-its to the code base of Moya? I didn't know we can do this. If so, I should probably add some fix-its to #1147 as well. And second, #1147 does include a MigrationGuides.md file which could be extended with other changes as well. Also it should be probably linked to within the Readme.md or at least in the release notes.\nAnd one more thing: We should probably update or remove the ArrayAsRootContainer.md cause it doesn't work as it is now. It depends on an outdated Alamofire class structure, I'm not sure how the same is possible with the updated ones.. @BasThomas Thanks for the pointers. I've tried to add fix-its but my approaches all failed.\nSee https://github.com/Moya/Moya/pull/1147#issuecomment-318890623 for more details.. Please note that there is now https://github.com/Alamofire/Alamofire/issues/2180 around which tracks support for the Decodable type right within Alamofire. As it is our main dependency, I think their approach to integrate this feature should be considered before finally deciding on how to implement this.\nPlease also note that the contributors have already confirmed that they have plans to support both Encodable and Decodable types in release version 5 in https://github.com/Alamofire/Alamofire/issues/2177.. I agree that there exists a problem for Carthage users, but in my opinion this is a Carthage issue, which is why I just started the discussion with my suggestion here on that topic on the Carthage side again. I hope the reactions (starting with this) are going to develop into the right direction.\nSo, I see the need for faster build times and I agree that we should not add additional maintenance costs just to work around an issue of a package manager. Problems should be solved where they lie.. I'm always trying to test my apps, and I usually do. But I have never used the sampleData for that. If I want to test parsing JSON data into my Swift objects, I write specific tests for that \u2013 it's part of the model then, though. If I want to test that the API answers the way I expect it to, sampleData doesn't help with that either.\nI've never found good usage for the sampleData anyways, so nowadays I'm actually defaulting to return Data(), too. Maybe I missed something about stubbing, but from my point of view other tests are much more useful, so I'd welcome this change!. By the way, why are we not using the GitHub Projects feature to manage what goes into our next releases? That would give us a good overview and prevent using a PR like https://github.com/Moya/Moya/pull/1124 for that. Or are there any concerns?. Ahh, I overlooked the milestones. That's a good alternative, of course.\nTo keep the discussion to this topic: Could we add this issue to the milestone 9.0.0 board until it proves to be more complicated than it currently looks? Cause this change doesn't look overly complex to me. \ud83d\ude04 . The fact that JSONEncoder returns Data ist exactly the reason why I've created RequestData. Its purpose is to allow both variants, the \"classic\" variant with parameters and parameterEncoding and using the JSONEncoder and its Data return type. With little changes elsewhere too this should allow us to use the above example to specify APIs.\nI think the biggest drawback about this approach is the fact that it's a breaking change and everybody would need to use the requestData instead of parameters and parameterEncoding. Also note that it's not so easy any more to group same parameterEncoding cases together to just return once, but usually that should not be a problem when we add an option to define a defaultParameterEncoding.\nI know I can fork this (although I could also create a branch within this repo), but I'd like to get some feedback first as we could tackle this problem in many different ways. Anybody else who needs this?. @mbuchetics I agree that Encodable is the way to go forward. But we also have to consider that people are using Moya in their released apps and migration should not be too hard. We should not force Moya consumers to use Encodable, there will still be valid reasons not to use that approach.\nSo, we can't simply drop the parameters without an alternative (IMHO), thus I'm still keeping them with my RequestData wrapper. What I try is to abstract away the return type of the params and making it flexible with my RequestData enum. There could be a different return type for each case, e.g. Data for .jsonEncoder and [String: Any] for Alamofires parameterEncoding. It just needs to be handled somewhere down in Moya. Data should be straightforward to handle though, as URLRequest has native support for setting the body via Data (which is probably also the reason why the .encode method of JSONEncoder has a return type of Data, I guess).. I'm going to implement my above suggestion then, as it seems I did not misunderstand the issue here. This way we can figure out if we can come up with an even better solution to this problem or keep my approach. I'm gonna try to post an initial PR until sometime tomorrow.. Thanks for the alternative. I've already thought about this solution. The problem with it is, that when having both type of API endpoints, the developer has to ensure that all cases of the TargetType are covered and split correctly between the two options. I think the risk that developers forget a case or specify two different types for a case is very high and would lead to some kind of error or unexpected behavior. That's why I introduced the enum, which is a little more code to write but prevents any such issues.. Hmm, I see your point now. I've actually used that workaround, too. \ud83d\ude04\nSo, let's think about this for a second. Until now we had to provide [String: Any]? and we could only specify one type of parameterEncoding. My approach does abstract away the type of [String: Any]? by using RequestData as the return type \u2013 but I'm still keeping the fact that you can only specify one.\nWhat if we just changed the return type to [RequestData] so people could potentially return multiple of them? Does that make sense? Are there any other cases except for the URL params and body case where this would be useful? Cause if not, I tend to say that a return type of [RequestData] would be too confusing for many and would open the door for misuse cause people could put any number of things in there.\nIn my opinion we should rather cover the one exception case with special treatment rather than make the return type an array if there's no other useful case. (Although I'm not strongly opinionated on that.) But if there's another useful case that we can think of, I think it makes sense to implement it that way. What do you think?\nAlso what's the take of other @Moya/contributors on this issue and ideas on how to approach it? I think this is a core change and therefore should be validated by more contributors.. Here's an idea on how we could cover the one case with url params and body data with my approach:\nswift\nenum RequestData {\n    case jsonEncodable(encodable: Encodable)\n    case parameterEncoding(parameters: [String: Any], parameterEncoding: ParameterEncoding)\n    case urlAndBodyParameterEncoding(urlParameters: [String: Any], bodyParameters: [String: Any], bodyEncoding: ParameterEncoding)\n}\nThe case urlAndBodyParameterEncoding would specify both URL parameters and body parameters. The body parameter encoding can be further specified (so people can choose between JSONEncoding, PropertyListEncoding or any of their custom encoding).\nI think this is a better approach than to expect a return type of [RequestData] and works well with my approach explained on my initial post.. What is it that makes you think they\u2018re obscure? Their name? And wich ones, only the last one, right?. I've created an initial PR in #1136 to implement my approach. Please have a look \u2013 I'm not sure yet if it even works. Thus, your feedback is welcome!. Why wait for this feature until September/October? The Encodable type will most likely not change at all as it was showed off during WWDC in detail without any hint on any possible changes that are planned to be made. I agree that any Alamofire-internal change would be welcome to cover this, but why not support this in a branch and further explore what else could be tackled by this approach, cause until now we are pretty dependent on Alamofires parameters solution, which was also the reason why #314 still isn\u2018t really solved.\nIf we really want to depend on Alamofire on this, we should at least get the opinion of its contributors on supporting Encodable before we decide that we just wait. Cause my gut feeling is that we might need to add some kind of enum into Moya anyways cause their solution might not be via the parameters and parameterEncoding, we just don\u2018t know and could wait for nothing in the end.. I'm in for the idea of introducing a more flexible parameter providing approach in general and using this to simplify the task along the way. That could even cover the usage of Encodable by default (without any specific changes for that). I'm not sure though what all the cases mean that you are providing. Specifically:\n\nIn the case of parameters([String: Any]) in RequestType \u2013 how are the params encoded, URL for GET and JSON for others by default? Or URL encoded always per default? Or something else?\nWhat are all the cases in DownloadType? I'm guessing that destination(DownloadDestination) replaces the existing request(DownloadDestination)? What are the others then?\nIn DownloadType for the case case composite(urlParameters: [String: Any], bodyParameters: [String: Any]): How do we know the encoding to be used for encoding the body parameters?\n\nAlso, given we would tackle the above change, I think as a consequence quite some parts of the code & tests need to be changed & updated. Do you have an idea on how we could split the introduction of them into separate PRs so we don't have one big PR?. Regarding Point No. 1\nI understand what you mean. I think expecting there to be a defaultParameterEncoding present for this case will be hard for the user to understand/memorize.\nHere's my alternative suggestion:\nLet's add a defaultParameterEncoding to the TargetFile and provide a default implementation for it that simply returns URLEncoding.default.\nAdditionally let's entirely remove the parameters([String: Any] case. Instead users would be able to use the case encoded(parameters: [String: Any], encoding: ParameterEncoding) and provide defaultParameterEncoding for the encoding: parameter of that case. This would prevent any confusion and even make the existence/usage of the encoding explicit.. Regarding Point No. 2: I understand now and this totally makes sense (sounds like it was quite annoying to specify params alongside a download request?).\nRegarding Point No 3: Okay, let's add the bodyEncoding there then. If we use my defaultParameterEncoding suggested above, this would be useful here, too.. Please note that there is now https://github.com/Alamofire/Alamofire/issues/2181 around which tracks support for the Encodable type right within Alamofire. As it is our main dependency, I think their approach to integrate this feature should be considered before finally deciding on how to implement this.\nPlease also note that the contributors have already confirmed that they have plans to support both Encodable and Decodable types in release version 5 in https://github.com/Alamofire/Alamofire/issues/2177.. I've just created #1147 which implements @sunshinejr's suggestions with my suggested changes above. Note that I decided to make two more changes than explained above:\n\nRename RequestType to RequestDataType since there was a name collision with a type in the Result framework\nI've split composite up into compositeEncoded and compositeData since that is more consistent in my opinion (someone might need url parameters using Data as well)\n\nHere's what the above four types now look like:\n```swift\n/// Represents a type of upload task.\npublic enum UploadType {\n/// Upload a file.\ncase file(URL)\n\n/// Upload \"multipart/form-data\"\ncase multipart([MultipartFormData])\n\n}\n/// Represents a type of download task.\npublic enum DownloadType {\n/// Download a file to a destination.\ncase destination(DownloadDestination)\n\n/// Download a file to a destination with extra parameters using the given encoding.\ncase encoded(DownloadDestination, parameters: [String: Any], encoding: ParameterEncoding)\n\n}\n/// Represents an HTTP task.\npublic enum Task {\n/// A basic request task.\ncase request(RequestDataType)\n\n/// An upload task.\ncase upload(UploadType)\n\n/// A download task.\ncase download(DownloadType)\n\n}\n/// Represents a type of request.\npublic enum RequestDataType {\n/// A requests body set with data.\ncase data(Data)\n\n/// A requests body set with parameters and encoding.\ncase encoded(parameters: [String: Any], encoding: ParameterEncoding)\n\n/// A requests body set with data, combined with url parameters.\ncase compositeData(urlParameters: [String: Any], bodyData: Data)\n\n/// A requests body set with parameters and encoding, combined with url parameters.\ncase compositeEncoded(urlParameters: [String: Any], bodyParameters: [String: Any], bodyEncoding: ParameterEncoding)\n\n}\n``. This was fixed via #1147.. For now, yes. But note that this included **real** support for the Encodable types, so we might want to add something like that later. But this, yes, this is now deprecated and should be closed. Let's wait what Alamofire does in order to support theEncodable` type as September comes closer .... I've created #1148 which is a simple reincarnation of this PR, but based on the approach we have introduced in #1147. I know we might not need it at all if Alamofire integrates it somehow themselves. But if they don't we might need it.\nAlso, I'd like learn why I get the compiler error in there and how to work around it anyways, so I've also created it because of technical reasons. I'd like to at least play around with that API and see if it works well from the consumer side. Maybe the Alamofire guys introduce support, but we don't like it? You never know ... \ud83d\ude04 . Nice idea, adds just the one thing missing from my \"TODOs\" list in PRs like #1147 \u2013 now I would not need to add those points explicitly, they all are listed in the PR via Danger. \ud83d\udc4d \n(Except for \"write a migration guide\" which, I think, we cannot automate so easily.). If we happen to integrate #1147 (which @sunshinejr mentioned here) then it definitely will, cause it removes parameters and parameterEncoding which everybody using Moya had to implement. :). I have just integrated my fork into the project where I'm using the Encodable type.\nHere's how my target now looks:\n```swift\nimport Foundation\nimport Moya\nenum MyTarget {\n    case createUser(CreateUserRequest)\n    case signIn(SignInRequest)\n}\n// MARK: - TargetType Protocol Implementation\nextension MyTarget: TargetType {\n    var baseURL: URL {\n        return URL(string: \"https://example.com/api/v1/\")!\n    }\nvar path: String {\n    switch self {\n    case .createUser:\n        return \"user\"\n\n    case .signIn:\n        return \"session\"\n    }\n}\n\nvar method: Moya.Method {\n    return .post\n}\n\nvar sampleData: Data {\n    return Data()\n}\n\nvar task: Task {\n    switch self {\n    case .createUser(let createUserRequest):\n        let requestData = encode(createUserRequest)\n        return .request(.data(requestData))\n\n    case .signIn(let signInRequest):\n        let requestData = encode(signInRequest)\n        return .request(.data(requestData))\n    }\n}\n\n}\n// MARK: - Helper Methods\nextension Tm5Target {\n    private func encode(_ encodable: T) -> Data {\n        do {\n            return try JSONEncoder().encode(encodable)\n        } catch {\n            fatalError(\"Could not encode '(type(of: encodable))' using JSONEncoder. Error: (error)\")\n        }\n    }\n}\n```\nIt builds fine and I think it should work (haven't tested yet). But this is how the usage might look now. Just to have something to review.. @ashfurrow Sure, why not. Think that makes sense. Just rebased onto the current master and added the requested change. The task computed property example from above now looks like this:\n```swift\n    var task: Task {\n        switch self {\n        case .createUser(let createUserRequest):\n            return .requestData(encode(createUserRequest))\n    case .signIn(let signInRequest):\n        return .requestData(encode(signInRequest))\n    }\n}\n\n``. Shall I flatten theUploadTypeandDownloadTypeenums into theTask` enum as well? It would be consistent, for sure. But I'm not sure cause there's no pressing issue with them and it would require more people to change their code when updating to a newer version, so I'd understand if we would keep them as is. But we should probably tackle that in a different PR anyways to keep this lean.. Any preferences on how to deal with the exceptions thrown in places like this:\nswift\ndo {\n    preparedRequest = try parameterEncoding.encode(preparedRequest, with: parameters)\n} catch {\n    // TODO: Add exception handling here\n}\n@ashfurrow @sunshinejr ?\nI think, I could deal with the other TODO steps left myself, but I'm not sure about that one.. Sorry for letting you wait for two weeks, I've been on vacation this entire time. Now that I'm back I've had a look onto your feedback @sunshinejr and commented on them (two of three I fixed). Also I have flattened the upload and download types into the Task enum. Unfortunately I will need more help to handle the exceptions properly (the TODOs).\nOther than that, is there anything that speaks against merging this except for the TODOs on the initial Post that are still open? If not, then I would proceed implementing the TODOs so we can merge this soon.. Okay, I have now worked through my TODOs. Except for the exception handling, I think this is now finished. I've removed the [WIP] from the title cause I think it's theoretically mergeable as it is, cause I can imagine the work on the exception handling could be decided upon later and the TODO's kept in code until then, as it is right now.\nBtw, when I updated the docs, I've seen that some examples are outdated and I didn't fix that (although my code change has to do with it) cause it is using an old syntax of Alamofire. Specifically I'm talking about https://github.com/Moya/Moya/blob/master/docs/Examples/ArrayAsRootContainer.md\nWe should think about removing or updating it in a different PR / Issue.. Just rebased onto the current master so things are updated (and tests can pass, hopefully).. Worked through your comments again and rebased. Are you planning to add this to the current release after the alpha is out? Would be awesome to see this in the next version. :). @SD10 I've just rebased to master after #1181 was merged and updated the Basic example file. Note that there's one point I'm not sure about (see here) \u2013 other than that I think the file should be ready.. @SD10 I've just checked all other example files and found two more which need to be updated: ArrayAsRootContainer.md and OptionalParameters.md. I've updated the latter but I can't update the first as already explained in my previous comment https://github.com/Moya/Moya/pull/1147#issuecomment-316640623.\nI hope this is what you were expecting!. FYI: I have just tried adding fix-its via @available lines in a reintroduced MoyaAvailability.swift file but I couldn't cover any of the cases this PR changes. Specifically my code looked as follows with the reason why it doesn't work as comments:\n```swift\nimport Foundation\nextension TargetType {\n    @available(*, unavailable, message: \"parameters has been removed in version 9.0.0, use new task case .requestParameters instead\")\n    public var parameters: [String: Any]? { fatalError() } // does not show up in a type conforming to TargetType\n@available(*, unavailable, message: \"parameterEncoding has been removed in version 9.0.0, use new task case .requestParameters instead\")\npublic var parameterEncoding: ParameterEncoding { fatalError() } // does not show up in a type conforming to TargetType\n\n}\nextension Task {\n    @available(*, unavailable, message: \"upload has been removed in version 9.0.0, use new task cases .uploadFile, .uploadMultipart or .uploadCompositeMultipart instead\")\n    case upload // leads to an error: \"Enum 'case' is not allowed outside of an enum\"\n    // NOTE: Adding in Task directly leads to \"Switch must be exhaustive, consider adding a default clause\" errors\n}\n``. Thanks @sunshinejr, I've worked through your comments and rebased onto the9.0.0-devbranch!. Thank you everyone for reviewing and going all the way with me. You're the best! \ud83d\udcaa \ud83d\udc4f \ud83d\udc4d . I've just tested again. When I putgithub \"Moya/Moya\" \"9.0.0-dev\"into my Cartfile, runcarthage update` and run the app, I get the error.\nOnce I replace it with github \"Moya/Moya\" \"4bcac8144fd438b9b93c2a9907a8581dfd899278\" (which is the commit right before #1212 and #1213 were merged), run carthage update and run the app it works correctly. So the issue must have been introduced either with #1212 or with #1213.. Maybe the new file Single+Response.swift accidentally got into the Moya main target? Cause it has an import RxSwift which looks like the source for the error.. I checked, it works. Thank you @sunshinejr! \ud83c\udf89 . I can confirm that it works. Thank you for the quick fix @sunshinejr!. I've read through the thread, but I can't remember anything that might cause this error related with the refactoring of Task. Also the code was refactored quite a bit after me implementing the initial feature.\nWhat I'd suggest the people seeings this issue to do:\n1. Downgrade to Moya 10.0.0 and see if the issue is there, still.\n2. Downgrade to Moya 9.0.0, possibly reverse-migrate your code if needed, then try that.\nThis way we can isolate the time frame the issue was introduced more exactly.. Having the same problem @canny09, also don't know what's going on .... I'm personally against removing SwiftLint entirely. There's a reason to have a linter and that's to have a common code style. If any rule is problematic in this project, we can still configure SwiftLint to match our purposes.\nRegarding Carthage builds, there's a simple solution by only running the script in debug mode \u2013 Carthage does release builds so that fixes the issues. I've created a PR #1619 with my suggestion.. I have just also cherry-picked the identifier_name fixes of @sunshinejr into my PR and continued his work (he didn't fix all violations of that rule).. When specifying this branch and running carthage update --platform ios the build of RxMoya failed. I just created a new branch named xcode_9.3 which includes this branch and the branch swiftlint-fix which is part of #1619. Now it works. Just as a note ... Moya is currently not working with Xcode 9.3 (at least for me).. I just added something to the Circle CI config. Let's see what the result's gonna be .... The new step running this before SwiftLint install:\ncarthage build --no-skip-current --cache-builds\nResulted in a successful build of all Moya targets:\n*** Building scheme \"Moya\" in Moya.xcodeproj\n*** Building scheme \"RxMoya\" in Moya.xcodeproj\n*** Building scheme \"ReactiveMoya\" in Moya.xcodeproj\n@sunshinejr Does this meet your expectations?. Just as a side note: I had similar issues with SwiftLint and Carthage like I saw in several issues here in my own open source projects. This approach successfully fixed them all. That\u2018s why when I saw you were removing SwiftLint I felt like I should share my experience there.. I've tried this entry:\ngithub \"Moya/Moya\" \"swift_4.1\"\nWith the same command and still got an error. Then I created the branch xcode_9.3 based on swift_4.1 and got it working there. See my comment here for reference.\nSo, if anyone is having the same issue, until this is fixed properly you can use this in your Cartfile:\ngithub \"Moya/Moya\" \"xcode_9.3\". @jdisho I like this idea and plan to either write a small library (maybe named SimpleMoya?) or a GitHub gist with an article explaining on how to use it based on an implementation similar to this. You can find a usage example here in the same project.\nIn my opinion, using this SimpleMoya approach can be seen as a first step for people who don't really understand Moya immediately (and I've come across many of them) but still want a somehow structured approach in writing their APIs. The advantage of such a tiny implementation would be to learn the basics of Moya. But such a project or article should also have clear instructions on how to migrate to the \"full Moya\" experience once convinced of this method of implementing APIs.\nAlso, most of the time recently, when I wanted to write a client for a simple API within a library (like the Microsoft Translator API example linked above), I wanted to keep dependencies as small as possible. Moya seemed to be too much, but I still wanted to use the same ideas so people who know Moya could grasp the code quickly. That's another reason I think a \"simpler\" Moya version could be useful.\nSince this thread was closed by the OP himself and because the title \"lightweight\" is misleading, I'm reopening this and changing the title to \"simpler\". \nMy purposes of keeping this open are:\n Discuss if the Moya community should use this \"simplified\" approach for teaching new Moya users the basic ideas of Moya.\n Discuss how library authors could use the Moya approach without actually integrating the entire Moya library with its Alamofire subdependency. (Most library authors try to have no dependencies at all.)\n* Discuss how this could be done specifically. Should it be a separate library? A Markdown file within Moya? A wiki article? A gist with a blog post? Should it even be part of Moya at all?\nI'd like to hear what you think!. @orta I liked your name suggestion so much that it motivated me to actually refactor the Moya-inspired simple network abstraction layer I linked above and actually bring Microya to life:\nhttps://github.com/Flinesoft/Microya\nI hope you're fine with me using the name. \ud83d\udcaf points for that idea! \ud83d\ude06 . Hey guys, just a small update: I don't know why right now (maybe because of this PR?), but the amazing @petester42 finally helped me finishing my PR over at Carthage which adds a feature to skip specific schemes when building: https://github.com/Carthage/Carthage/pull/1990. I think, in case that the PR gets merged, we have another alternative:\nDocumenting that people can add a Cartfile.ignore in order to skip building the extensions they don't need like so:\n```\nIgnore RxSwift variant of Moya\nscheme \"RxBlocking-tvOS\"\nscheme \"RxBlocking-macOS\"\nscheme \"RxBlocking-iOS\"\nscheme \"RxBlocking-watchOS\"\nscheme \"RxCocoa-macOS\"\nscheme \"RxCocoa-watchOS\"\nscheme \"RxCocoa-tvOS\"\nscheme \"RxCocoa-iOS\"\nscheme \"RxSwift-macOS\"\nscheme \"RxSwift-tvOS\"\nscheme \"RxSwift-watchOS\"\nscheme \"RxSwift-iOS\"\nscheme \"RxTests-macOS\"\nscheme \"RxTests-tvOS\"\nscheme \"RxTests-iOS\"\nscheme \"RxMoya\"\nIgnore ReactiveSwift variant of Moya\nscheme \"ReactiveSwift-macOS\"\nscheme \"ReactiveSwift-watchOS\"\nscheme \"ReactiveSwift-tvOS\"\nscheme \"ReactiveSwift-iOS\"\nscheme \"ReactiveMoya\"\n```\nFar away from perfect, but it's working and has higher chances to get merged fast than a \"real\" dependency-graph based solution.. Cool, you're right, I was using it like that already but thought that might be a Swift side effect and actually undocumented. But now you say it, I can clean it up. Thanks!\n. Sure, but let's not use PUT either then as it's not very RESTful (what I think is kind of the standard right now) so what about changing the .UpdateUser case up to a .CreateUser and make it a POST? That should be familiar enough. I've changed the code to do this. I hope you're okay with that solution, too.\n. Isn't the Authentication.md linked just at the end of the section above? Shouldn't this be sufficient? You can of course add an additional link but I'm not sure what you are thinking of exactly.\n. Did as suggested. Two variations though. One: I used ParameterEncoding as the return type isntead of JSONEncoding. Two: I had to backtick default as I saw an error (in Xcode 9 beta 3).. I've renamed to requestParameters, although I also considered requestParameterEncoded (tell me if you like that more, otherwise I'll keep it).. Sorry, I don't really understand how I could throw a MoyaError.requestMapping from within the performNetworking closure, also I have no idea how to move the code to the endpoint. How can I switch on the target.task from within the Endpoint class? Need some help with this .... Actually the extension didn't work correctly. I received the following error in Xcode 8.3:\nStatic member 'default' cannot be used on protocol metatype 'ParameterEncoding.Protocol'\nI'm removing it now ... I think JSONEncoding.default and URLEncoding.default should be fine enough for now.. Uh, I forgot to remove it (thought I actually did that). No problem with that.. Fixed this.. Fixed.. Sure, I've moved it to its own MigrationGuides.md file within the docs folder. I think we should consider linking to the file when doing major releases within the changelog & release notes.. Ok, let me try .... I think I got this now. Note that there's no convenience .addingParameters or something. Don't know if we can provide a replacement with the task enum. We can't append all enum cases with each other (e.g. Data with Data), can we?. Ok, I see. Let me try .... I think I got this, too. Trying to clean up the internal MoyaProvider now .... Ok, that was easy. As you suggested, I'm now returning nil when an exception is thrown. This way I can even mark my last TODO as completed. Thanks for the feedback! \ud83d\udc4d . Can we do that in a subsequent PR so this one can be in the 9.0 release? Cause I won't have much time to work on this in the near future (I'm concentrating my free time onto this project and on https://github.com/Carthage/Carthage/pull/1990 right now) and I feel like the logic of adding the task cases data to the request isn't overly complicated, so it should all work fine. Maybe except for some edge cases, but those would probably be related to the new cases (like .composite...) anyways ... which nobody uses yet.. Sounds good. \ud83d\udc4d . Good catch, updated the cases requestParameters and downloadParameters where this was possible. This didn't work in the composite cases though as they need to to multiple things with the request.. Does 4a2bc0e57c745c97a817ea71e23ce50e09d0bf1a fix it correctly?. Not sure what you mean. There is already a sendRequest function, so I'm a little confused. Also I'm not sure why the we should pull only the .never stub behavior switch statement out into a function named sendRequest, I don't really understand how that's the same thing. Did you mean the entire performNetworking closure? I could extract that into a method named performNetworking to make the function shorter if that's what you mean.. Okay, after having a detailed look, I think I understand your issue now. I've just extracted the inner switch statement to a method named unstubbedRequest in ab18763cfd7f70a3057b6c9af4c21871c380b21a. I hope this is what you were expecting.. I have rebased and worked through some more feedback from @SD10. I'd be happy to work through any other feedback this weekend, but regarding tests it would be great to have help there. I don't think I'll have the time to set them up in addition to reacting to change requests  .... Well, I can only use try? if the request is not needed after that line like in those other cases. But here for example the request type is needed to set the http body afterwards. Of course I could change the order here and set the http body first ... but on the composite parameters case I need to do two trys anyway so I simply kept the do-catch.\nBut since you seem not to like the do-catchs I've changed them up to this:\n```swift\n        case let .requestCompositeData(bodyData: bodyData, urlParameters: urlParameters):\n            request.httpBody = bodyData\n            return try? URLEncoding.default.encode(request, with: urlParameters)\n    case let .requestCompositeParameters(bodyParameters: bodyParameters, bodyEncoding: bodyParameterEncoding, urlParameters: urlParameters):\n        guard let bodyfulRequest = try? bodyParameterEncoding.encode(request, with: bodyParameters) else { return nil }\n        return try? URLEncoding.default.encode(bodyfulRequest, with: urlParameters)\n\n```\nI hope this is better.\n. Thanks for reviewing & approving in any case! \ud83d\udc4d . Fixed.. Removed.. Sure, sounds good, better than what it is now. :) I've named the method performRequest. Hope it's more readable now.. I have no idea to be honest, never uploaded files and added parameters. But probably you're right, so I've changed this to be uploadCompositeMultipart and only have urlParameters as parameter.. Sounds good to me, reverting this.. I did not really understand this sentence and I'm also not sure if it's needed with the new task type. So I removed it. I would need an explanation if this should be kept and updated.. Done.. Although that is true, I don't think we can handle this properly. Best we could do would be to ensure that both parameters get merged in that case. But I think that if this is really used that way then it is a user side error cause it doesn't make sense to send url parameters twice.. Done. Called it destination.. Updated.. Updated.. Updated the Endpoint urlRequest cases to use URLEncoding(destination: .queryString) instead of URLEncoding.default.. I'm actually against removing the case only because of one possible way of misusing it. Let's finally properly fix #314! I agree though that we should deal with that situation somehow to minimize any unexpected behavior: For that I think throwing a fatalError would be possible. What do you think @sunshinejr? @SD10 seemed to be okay with that.. I've just updated the composite case to include this check in f24ee454f9429035aed611ce2c1f19620b42f5e0:\nswift\nif bodyParameterEncoding is URLEncoding { fatalError(\"URLEncoding is disallowed as bodyEncoding.\") }. Fixed.. Sure, no problem. We can talk about code style somewhere else. I've removed the empty lines via 516764c503bc60b63cf59da49f3798f02ba365de.. Good catch, overlooked this. Added the task now.. Don't know what I was thinking back then, but I usually use it like that, too. So sorry for that, fixed it via 516764c503bc60b63cf59da49f3798f02ba365de. :). ",
    "jasl": "Result seems to be a pattern now, actually Alamofire has its own modified version of Result, see https://github.com/Alamofire/Alamofire/blob/master/Source/Result.swift\nSo, maybe improving Moya.Error is a better way, to clear what failure is, currently, Moya will wrap all Alamofire's error (which is NSError) to Error.Underlying(error), and NSError not easy to do pattern-match.\nConsider that if we add more error types, such as Timeout, Cancelled\nswift\nprovider.request(.UserProfile) { result in\n  switch result {\n  case let .Success(response):\n    doSuccess(response)\n  case let .Failure(error):\n    switch(error) {\n    case .Timeout:\n      // tip timeout\n    case .Cancelled:\n      // tip cancelled\n    default:\n      // tip unknown\n    }\n  }\n}\ndoes it more make sense?\n. @Dschee  The definition of Result is Result<Response, Error>, means errors of API's shouldn't be handled, because you've got the response. \nBut your question is right, we need to handle API errors, for now Moya has provided some functions to help filter the status code, codes here, but those can't be used for pattern-matching. so we could do a small extension\n``` swift\npublic enum ResponseClass {\n    case Informational\n    case Success\n    case Redirection\n    case ClientError\n    case ServerError\n    case Undefined\npublic init(statusCode: Int) {\n    switch statusCode {\n    case 100 ..< 200:\n        self = .Informational\n    case 200 ..< 300:\n        self = .Success\n    case 300 ..< 400:\n        self = .Redirection\n    case 400 ..< 500:\n        self = .ClientError\n    case 500 ..< 600:\n        self = .ServerError\n    default:\n        self = .Undefined\n    }\n}\n\n}\npublic extension Response {\n    public var responseClass: ResponseClass {\n        return ResponseClass(statusCode: self.statusCode)\n    }\n}\n```\nthen, we could\nswift\nprovider.request(.UserProfile) { result in\n  switch result {\n  case let .Success(response):\n    switch response.responseClass {\n    case .Success:\n      doSuccess(response)\n    case .ClientError:\n      // tip user provided data is invalid\n    default:\n      // tip unexpected error\n    }\n  case let .Failure(error):\n    switch(error) {\n    case .Timeout:\n      // tip timeout\n    case .Cancelled:\n      // tip cancelled\n    default:\n      // tip unknown\n    }\n  }\n}\n. @Dschee your issue I also meet too, but I think there is two parts, one is the codes that I just provided is the right way (at least for me), the other part is this really make some people confusing.\nIn my opinion, there are too many kinds of errors could be occured, but we don't need to handle those one per one, let's regrouping them (remember, this depends on your business and your restful-api design)\nswift\nenum APIResult {\n    case Ok // the request with success but no content (e.g. status code 204)\n    case Success(NSData) // success with content\n    case Failure(APIError) // the request success but with 4xx, 5xx status\n    case NetworkError(Moya.Error) // the request is failed\n}\nthen I wrapped Moya's provider (just for demo)\n``` swift\nfunc request(provider: Provider = Provider.defaultInstance(), completion: (result: APIResult) -> ()) -> Moya.Cancellable {\n        return provider.request(self) { result in\n            var apiResult: APIResult\n        switch result {\n        case let .Success(response):\n            let json = response.mapSwiftyJSON()\n\n            if json[\"ok\"].int != nil {\n                apiResult = .Ok\n            } else if let errorMessage = json[\"error\"].string {\n                apiResult = .Failure(APIError(statusCode: response.statusCode, message: errorMessage))\n            } else if let entity = parseResponse(json) {\n                apiResult = .Success(entity)\n            } else {\n                apiResult = .Ok\n            }\n        case let .Failure(error):\n            apiResult = .NetworkError(error)\n        }\n\n        completion(result: apiResult)\n    }\n}\n\n```\nso my colleagues could use like\nrequest(.UserProfile) { result in\n  switch result {\n  case .Ok:\n  case let .Success(data):\n  case let .Failure(error):\n  case let .NetworkError(error):\n  }\n}\nyou could see my project for learning https://github.com/jasl/RubyChinaAPP/blob/master/RubyChinaApp/Controllers/Topics/TopicsViewController.swift#L127 (It's for Ruby Community of China, and the repo may not be passed to compiling because I using my forked Moya, but you could see how I wrapping Moya's Provider)\nIn my opinion, I don't like a library to do too much, if you think it's too complex to use, you can wrap it, that should be easy, but if the library to do too much, if there has any which not suit for your need, hacking it would be hard. I think Moya is a balance choice,\n. I've an idea, but may break design goal of Moya: Providing a non-generic MoyaProvider\nenum isn't a good way for complex endpoints\nFor example, there is an endpoint\napi/v1/topics\n| param | type | optional | sample | desc |\n| --- | --- | --- | --- | --- |\n| offset | Integer | Yes | 20 |  |\n| limit | Integer | Yes | 20 |  |\n| type | String | Yes | recent | should in last_actived, recent, no_reply, popular, excellent |\n| node_id | Int | Yes | 1 |  |\nIn Moya flavour, I must define a case like Topics(Int?, Int?, String?, Int?), that's unreadable and uneasy to use.\nHow about struct or class ?\nFor complex endpoints, struct or class has definitly advantage than enum, and Moya can use it actually (if they adopt the TargetType protocol).\n``` swift\nstruct ListingTopics: TargetType {\n    enum TypeFieldValue: String {\n        case LastActived = \"last_actived\"\n        case Recent = \"recent\"\n        case NoReply = \"no_reply\"\n        case Popular = \"popular\"\n        case Excellent = \"excellent\"\n    }\nvar type: TypeFieldValue?\nvar nodeId: String?\nvar offset: Int?\nvar limit: Int?\n\ninit(type: TypeFieldValue? = nil, nodeId: String? = nil, offset: Int? = nil, limit: Int? = nil) {\n    self.type = type\n    self.nodeId = nodeId\n    self.offset = offset\n    self.limit = limit\n}\n\nvar baseURL: NSURL { return Global.baseURL }\nvar path: String { return \"api/v1/topics\" }\nvar method: Moya.Method { return .GET }\nvar parameters: [String: AnyObject]? {\n    var parameters = [String: AnyObject]()\n\n    if let type = self.type {\n        parameters[\"type\"] = type.rawValue\n    }\n    if let nodeId = self.nodeId {\n        parameters[\"nodeId\"] = nodeId\n    }\n    if let offset = self.offset {\n        parameters[\"offset\"] = offset\n    }\n    if let limit = self.limit {\n        parameters[\"limit\"] = limit\n    }\n\n    return parameters\n}\n\n}\n```\nBUT, there's a little STRANGE when using:\nswift\nprovider = MoyaProvider<ListingTopics>()\nprovider.request(ListingTopics(nodeId: 1, type: .Recent)) { ... }\nThe provider rely on ListingTopics so that can't be reuse.\nConclusion\nMoya is limiting by generic MoyaProvider\nOne More Thing\nFor simple endpoints, struct or class still works well\n``` swift\nstruct GetTopic: TargetType {\n    var id: String\ninit(id: String) {\n    self.id = id\n}\n\nvar baseURL: NSURL { return RubyChinaV3.BaseURL }\nvar path: String { return \"\\(RubyChinaV3.Topics.Path)/\\(self.id)\" }\nvar method: NetworkAbstraction.Method { return .GET }\nvar parameters: [String: AnyObject]? { return nil }\n\n}\n```\nNot too much longer than enum's, and there's another advantage for RESTful-flavour: namespace\n``` swift\nstruct MySiteAPI {\n    static let baseURL = NSURL(\"http://mysite.fake\")!\n}\nextension MySiteAPI {\n    struct Topics {\n        static let path = \"topics\"\n    }\n}\nextension MySiteAPI.Topics {\n    struct Listing: TargetType { ... }\n    struct Get: TargetType { ... }\n}\n```\nThat's all I thought.\n. I've an idea, but may break design goal of Moya: Providing a non-generic MoyaProvider\nenum isn't a good way for complex endpoints\nFor example, there is an endpoint\napi/v1/topics\n| param | type | optional | sample | desc |\n| --- | --- | --- | --- | --- |\n| offset | Integer | Yes | 20 |  |\n| limit | Integer | Yes | 20 |  |\n| type | String | Yes | recent | should in last_actived, recent, no_reply, popular, excellent |\n| node_id | Int | Yes | 1 |  |\nIn Moya flavour, I must define a case like Topics(Int?, Int?, String?, Int?), that's unreadable and uneasy to use.\nHow about struct or class ?\nFor complex endpoints, struct or class has definitly advantage than enum, and Moya can use it actually (if they adopt the TargetType protocol).\n``` swift\nstruct ListingTopics: TargetType {\n    enum TypeFieldValue: String {\n        case LastActived = \"last_actived\"\n        case Recent = \"recent\"\n        case NoReply = \"no_reply\"\n        case Popular = \"popular\"\n        case Excellent = \"excellent\"\n    }\nvar type: TypeFieldValue?\nvar nodeId: String?\nvar offset: Int?\nvar limit: Int?\n\ninit(type: TypeFieldValue? = nil, nodeId: String? = nil, offset: Int? = nil, limit: Int? = nil) {\n    self.type = type\n    self.nodeId = nodeId\n    self.offset = offset\n    self.limit = limit\n}\n\nvar baseURL: NSURL { return Global.baseURL }\nvar path: String { return \"api/v1/topics\" }\nvar method: Moya.Method { return .GET }\nvar parameters: [String: AnyObject]? {\n    var parameters = [String: AnyObject]()\n\n    if let type = self.type {\n        parameters[\"type\"] = type.rawValue\n    }\n    if let nodeId = self.nodeId {\n        parameters[\"nodeId\"] = nodeId\n    }\n    if let offset = self.offset {\n        parameters[\"offset\"] = offset\n    }\n    if let limit = self.limit {\n        parameters[\"limit\"] = limit\n    }\n\n    return parameters\n}\n\n}\n```\nBUT, there's a little STRANGE when using:\nswift\nprovider = MoyaProvider<ListingTopics>()\nprovider.request(ListingTopics(nodeId: 1, type: .Recent)) { ... }\nThe provider rely on ListingTopics so that can't be reuse.\nConclusion\nMoya is limiting by generic MoyaProvider\nOne More Thing\nFor simple endpoints, struct or class still works well\n``` swift\nstruct GetTopic: TargetType {\n    var id: String\ninit(id: String) {\n    self.id = id\n}\n\nvar baseURL: NSURL { return RubyChinaV3.BaseURL }\nvar path: String { return \"\\(RubyChinaV3.Topics.Path)/\\(self.id)\" }\nvar method: NetworkAbstraction.Method { return .GET }\nvar parameters: [String: AnyObject]? { return nil }\n\n}\n```\nNot too much longer than enum's, and there's another advantage for RESTful-flavour: namespace\n``` swift\nstruct MySiteAPI {\n    static let baseURL = NSURL(\"http://mysite.fake\")!\n}\nextension MySiteAPI {\n    struct Topics {\n        static let path = \"topics\"\n    }\n}\nextension MySiteAPI.Topics {\n    struct Listing: TargetType { ... }\n    struct Get: TargetType { ... }\n}\n```\nThat's all I thought.\n. Actually I'm doing some researching.\n(PS: I'm a full stack Ruby on Rails developer but still a new guy to learning Swift and iOS development about 1 month)\n(PS2: I really appreciate Moya and SwiftyJSON)\nHere's my project for learning (a client for Ruby-China community):https://github.com/jasl/RubyChinaAPP\nIt's not done yet, but I've done some interesting works about invoking endpoints.\n- https://github.com/jasl/RubyChinaAPP/blob/ui/topics/NetworkAbstraction/NetworkAbstraction/APIProvider.swift#L52 \n  - cheated from Moya 5.3.0\n  - removing generic by deleting <Target: TargetType> and replace Target to TargetType\n- https://github.com/jasl/RubyChinaAPP/blob/ui/topics/NetworkAbstraction/NetworkAbstraction/Endpoint.swift#L57\n  - Endpoint can return a NSMutableRequest that I can process it more easily, like signing the request with OAuth2 bearer header https://github.com/jasl/RubyChinaAPP/blob/ui/topics/RubyChinaApp/Libraries/Provider.swift#L49-L53\n  - removing generic, I think generic is no use here\n- https://github.com/jasl/RubyChinaAPP/blob/ui/topics/RubyChinaApp/Libraries/APIResult.swift\n  - wrapping the Moya's Result, this concern the next point, also, I'm thinking about UI only concern 4 cases: request successfully and no data response, request successfully with data, invoking endpoint error(like given wrong values), networking or other errors\n- https://github.com/jasl/RubyChinaAPP/blob/ui/topics/RubyChinaApp/Libraries/EndpointType.swift\n  - here is the magic I think, when I invoking an endpoint like RubyChinaV3.Topics.Get(id: \"28725\").doRequest() in its callback, it's will returns me the parsed Topic entity, so I can use it directly\n. Actually I'm doing some researching.\n(PS: I'm a full stack Ruby on Rails developer but still a new guy to learning Swift and iOS development about 1 month)\n(PS2: I really appreciate Moya and SwiftyJSON)\nHere's my project for learning (a client for Ruby-China community):https://github.com/jasl/RubyChinaAPP\nIt's not done yet, but I've done some interesting works about invoking endpoints.\n- https://github.com/jasl/RubyChinaAPP/blob/ui/topics/NetworkAbstraction/NetworkAbstraction/APIProvider.swift#L52 \n  - cheated from Moya 5.3.0\n  - removing generic by deleting <Target: TargetType> and replace Target to TargetType\n- https://github.com/jasl/RubyChinaAPP/blob/ui/topics/NetworkAbstraction/NetworkAbstraction/Endpoint.swift#L57\n  - Endpoint can return a NSMutableRequest that I can process it more easily, like signing the request with OAuth2 bearer header https://github.com/jasl/RubyChinaAPP/blob/ui/topics/RubyChinaApp/Libraries/Provider.swift#L49-L53\n  - removing generic, I think generic is no use here\n- https://github.com/jasl/RubyChinaAPP/blob/ui/topics/RubyChinaApp/Libraries/APIResult.swift\n  - wrapping the Moya's Result, this concern the next point, also, I'm thinking about UI only concern 4 cases: request successfully and no data response, request successfully with data, invoking endpoint error(like given wrong values), networking or other errors\n- https://github.com/jasl/RubyChinaAPP/blob/ui/topics/RubyChinaApp/Libraries/EndpointType.swift\n  - here is the magic I think, when I invoking an endpoint like RubyChinaV3.Topics.Get(id: \"28725\").doRequest() in its callback, it's will returns me the parsed Topic entity, so I can use it directly\n. @aamctustwo but you can't give them default vaules\n. @aamctustwo but you can't give them default vaules\n. Besides, when the APIs growth big (consider there have hundreds endpoints), organizing them by enum seem to be difficult.\nFor example:\nhttps://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/ArtsyAPI.swift\nWe need switch ... case on every properties, just for path we have 55 lines in https://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/ArtsyAPI.swift#L51-L106, and if I ask you: what path is the AuctionListings used for? first you need find the definition of path then search AuctionListings\nBut for struct or class, that will be fine.\nAnyway, I admit in usual case, enum might be a good way.\n. Besides, when the APIs growth big (consider there have hundreds endpoints), organizing them by enum seem to be difficult.\nFor example:\nhttps://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/ArtsyAPI.swift\nWe need switch ... case on every properties, just for path we have 55 lines in https://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/ArtsyAPI.swift#L51-L106, and if I ask you: what path is the AuctionListings used for? first you need find the definition of path then search AuctionListings\nBut for struct or class, that will be fine.\nAnyway, I admit in usual case, enum might be a good way.\n. @aamctustwo sorry I'm misled by struct and enum, actually choose what is no mattar\nMy point is, generic Provider limiting its flexible.\n- It should be reused, as your said endpoints can be categorized into separate enums, that's really solved endpoints management, but Providers still need to be initialized for every enums with the same configuration but with different type, if a Provider can be reused for a specified type, why can not be reused for all types?\n- There is little benefit from generic except made easier invoking request when give it an enum (provider.request(MySiteAPI.Topics) to provider.request(.Topics))\n. @aamctustwo sorry I'm misled by struct and enum, actually choose what is no mattar\nMy point is, generic Provider limiting its flexible.\n- It should be reused, as your said endpoints can be categorized into separate enums, that's really solved endpoints management, but Providers still need to be initialized for every enums with the same configuration but with different type, if a Provider can be reused for a specified type, why can not be reused for all types?\n- There is little benefit from generic except made easier invoking request when give it an enum (provider.request(MySiteAPI.Topics) to provider.request(.Topics))\n. @ashfurrow \nWithout generic Endpoint your example still work with a small refactor, the key is protocol contravariance.\nthe refactored codes should looks like:\n``` swift\nlet endpointClosure = { (target: TargetType) -> Endpoint in\n    let endpoint: Endpoint = Endpoint(URL: url(target), sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n// Here's the magic\nguard let myTarget = target as? MyTarget else {\n    return endpoint\n}\n\n// Sign all non-authenticating requests\nswitch myTarget {\ncase .Authenticate:\n    return endpoint\ndefault:\n    return endpoint.endpointByAddingHTTPHeaderFields([\"AUTHENTICATION_TOKEN\": GlobalAppStorage.authToken])\n}\n\n}\n``\n. @ashfurrow \nWithout genericEndpoint` your example still work with a small refactor, the key is protocol contravariance.\nthe refactored codes should looks like:\n``` swift\nlet endpointClosure = { (target: TargetType) -> Endpoint in\n    let endpoint: Endpoint = Endpoint(URL: url(target), sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n// Here's the magic\nguard let myTarget = target as? MyTarget else {\n    return endpoint\n}\n\n// Sign all non-authenticating requests\nswitch myTarget {\ncase .Authenticate:\n    return endpoint\ndefault:\n    return endpoint.endpointByAddingHTTPHeaderFields([\"AUTHENTICATION_TOKEN\": GlobalAppStorage.authToken])\n}\n\n}\n``\n. @ashfurrow I understand, and I'm still researching how to refactor but keeping interfaces stable, maybe I could PR some proving codes to discuss few days later.\n. @ashfurrow I understand, and I'm still researching how to refactor but keeping interfaces stable, maybe I could PR some proving codes to discuss few days later.\n. @ashfurrow \nLet's close this\n. @ashfurrow \nLet's close this\n. This PR mainly extract duties fromProvider, it's has too many jobs before: buildEndpoint`s, do requests, decide how to mock requests, that's made things complex, like mock requests, it's no need in production.\nNow, Provider only handle build Endpoint and as a interface to end-user to requesting targets, let backend do the really job, it's a protocol MoyaProviderBackendType so we can replace it easily.\nThere an additional advantage, we separate the really requests and mock requests to specified backends. In test env, use mock backend, use normal backend in production. and Moya now could decoupling with Alamofire.\nThen, the provider become lightweight, so maintain a non-generic version become possible.\n. This PR mainly extract duties from Provider, it's has too many jobs before: build Endpoints, do requests, decide how to mock requests, that's made things complex, like mock requests, it's no need in production.\nNow, Provider only handle build Endpoint and as a interface to end-user to requesting targets, let backend do the really job, it's a protocol MoyaProviderBackendType so we can replace it easily.\nThere an additional advantage, we separate the really requests and mock requests to specified backends. In test env, use mock backend, use normal backend in production. and Moya now could decoupling with Alamofire.\nThen, the provider become lightweight, so maintain a non-generic version become possible.\n. Endpoint is intermediate product from Target to Request, when building Endpoint by Target, all job relates Target should be done in endpointClosure, like add authenticate header as your mentioned, so in requestClosure no need to know the Endpoint where's from, so Endpoint no need to generic.\n. Endpoint is intermediate product from Target to Request, when building Endpoint by Target, all job relates Target should be done in endpointClosure, like add authenticate header as your mentioned, so in requestClosure no need to know the Endpoint where's from, so Endpoint no need to generic.\n. @colinta \nI'm a new guy to learning Swift and iOS developing, my project using Moya and I feel a little inconvenient, have described at #358 \nPlease don't merge it, I'm no confident in my Swift skill, and it's not polish yet.\nThis PR is mainly to prove, It's possible to make a non-generic provider and keeping interfaces compatible, and is it keeping Moya's philosophy? does the new provider design more reasonable? the refactor isn't do things right?\n. @colinta \nI'm a new guy to learning Swift and iOS developing, my project using Moya and I feel a little inconvenient, have described at #358 \nPlease don't merge it, I'm no confident in my Swift skill, and it's not polish yet.\nThis PR is mainly to prove, It's possible to make a non-generic provider and keeping interfaces compatible, and is it keeping Moya's philosophy? does the new provider design more reasonable? the refactor isn't do things right?\n. @colinta No matter, after discussion I can cherry-pick the good part\n. @colinta No matter, after discussion I can cherry-pick the good part\n. just adding a changes:\n- TargetType has toEndpoint() to build Endpoint, Provider#endpoint is no used and has removed\n. just adding a changes:\n- TargetType has toEndpoint() to build Endpoint, Provider#endpoint is no used and has removed\n. And, I have a question: Why Endpoint needs immutable? is it possible to mutate itself when we change something?\n. And, I have a question: Why Endpoint needs immutable? is it possible to mutate itself when we change something?\n. @ashfurrow \nHere is the last wave I can imagine at this time:\n- Endpoint has parameterEncoding property but can not be setting except in endpointClosure, let's made it into TargetType, and set default is .URL as Moya currently does\n- [Break] add toNSMutableRequest() method to Endpoint, deprecate urlRequest property\nHere I have another question:\nHow does it work to make Endpoint to Request asynchonous?\nNow data flow is clear: TargetType#toEndpoint -> Endpoint -> Endpoint#toNSMutableRequest -> NSMutableRequest\nMoya's provider just combine this flow and adding some hooks (such as endpointClosure, requestClosure) and plugins, then pass request to Backend to handle\n. @ashfurrow \nHere is the last wave I can imagine at this time:\n- Endpoint has parameterEncoding property but can not be setting except in endpointClosure, let's made it into TargetType, and set default is .URL as Moya currently does\n- [Break] add toNSMutableRequest() method to Endpoint, deprecate urlRequest property\nHere I have another question:\nHow does it work to make Endpoint to Request asynchonous?\nNow data flow is clear: TargetType#toEndpoint -> Endpoint -> Endpoint#toNSMutableRequest -> NSMutableRequest\nMoya's provider just combine this flow and adding some hooks (such as endpointClosure, requestClosure) and plugins, then pass request to Backend to handle\n. Currently backend (stub backend, clear to say) still needs to know plugins, target and endpoint\n. Currently backend (stub backend, clear to say) still needs to know plugins, target and endpoint\n. @colinta \ncould you tell me when we need to customize stubClosure?\nI'm trying to keeping stubClosure as current Moya does, but I found it seems impossible.\nIf you can told me usage of stubClousure I may find another way to keep that\n. @colinta \ncould you tell me when we need to customize stubClosure?\nI'm trying to keeping stubClosure as current Moya does, but I found it seems impossible.\nIf you can told me usage of stubClousure I may find another way to keep that\n. @ashfurrow \nI've consider stubClosure, This behavior can be moved to StubBehavior, even we can enhence it like mockEndpoint(Endpoint, response) I think that's more flexible on testing, better than 'sampleDate(I don't have critical reason, but testing code in releasing codebase seem weird to me)\n. @ashfurrow \nI've considerstubClosure, This behavior can be moved toStubBehavior, even we can enhence it likemockEndpoint(Endpoint, response)I think that's more flexible on testing, better than 'sampleDate (I don't have critical reason, but testing code in releasing codebase seem weird to me)\n. @ashfurrow \nStubBackend could do stubbing responses, just using it in testing and development, and I've an idea could move all codes for stubbing, but that's another discussion.\nAt last, thank you for reviewing my huge PR, and thank for your blog and other open source works!\n. @ashfurrow \nStubBackend could do stubbing responses, just using it in testing and development, and I've an idea could move all codes for stubbing, but that's another discussion.\nAt last, thank you for reviewing my huge PR, and thank for your blog and other open source works!\n. First, I apologize for my terrible English, I'll try my best to explain my motivation and my idea.\nMotivation\nI'm looking for a solution to build a Restful endpoints abstraction for my learning project which is a forum's client, by read many articles and libraries I found Moya seems to fit my needs.\nWhen I progressing my plan, I meet some difficulties:\n- There are 38 endpoints need to declare\n- Some endpoints are complex that may has optional value, mutually exclusive field, required fields\n- too many endpoints in ONE enum made it to long, difficult to organize\n(PS: My company's app has about 100+ endpoints, and more complex than mine)\nSo, I tried to using struct to organize endpoints, It looks better, I use nested struct to simulate namespace (that mapping Restful resources), and resources' path can reusable.\nBut, there is an another problem, Moya's provider is generic, and it's designed for endpoints which declared in a enum, like Eidolon. If I still using struct, the code should like:\nswift\nlet provider = MoyaProvider<TheSite.Topics.Listing>()\nprovider.request(TheSite.Topics.Listing) { res in\n  // callback\n}\nThat's weird, can't be reused, and difficult to building a higher abstraction for provider to encapsulating OAuth2 signing and some configuration for Request [sample]\nThe only problem is the Provider's generic contraint, and I consider it's possible to remove without side effect, so I copy Moya 5.3 to my project, and just remove the generic contraint, all problem solved perfectly!\nThen, I wrote my thinking in #358, and @ashfurrow replied me.\nThe goal\nThe goal is simple, but complex to reach, that making a non-generic Provider possible.\nHow to\nBy theory, most of Provider's codes should be shared, but I tried many ways, failed.\nFinally, I found a way, to short:\n- Clearify data flow that how Provider sending a request\n- Made Provider light-weight\n- Introducing Backend to handle request\nAbout StubClosure\nThat's my mistake, because I promise keeping current APIs, In new Provider design I need to decide what backend should be use, and stubClosure can't be evaluate here.\nActually, stubClosure should be setting to StubBackend directly like StubBackend(stubClosure: {}), that's make sense.\nAnyway, It's should break current Provider's initializer.\nAnswer questions\nWhat does MoyaCommonProvider do? I don't see this class used anywhere, but it is defined in Provider.swift.\nMoyaCommonProvider is a non-generic Provider, you can use it when you using struct or class to organizing your endpoints.\nDefaultCommonEndpointMapping and DefaultEndpointMapping do the same thing, can this be simplified to just having DefaultEndpointMapping?\nDefaultCommonEndpointMapping and DefaultEndpointMapping is do the same thing, but DefaultEndpointMapping can't be used for non-generic Provider, and some people want do something works which needs to know TargetType's type\nBut, I think DefaultEnpointMapping is no need, you can just override toEndpoint (It's declared in TargetType) to do the same job.\nI see that CancellableToken has been made public, but I think it can remain private if you change the return type to Cancellable in MoyaProviderBackend\nI don't have idea about this, I think made its public may help for create new Backend in project?\n. First, I apologize for my terrible English, I'll try my best to explain my motivation and my idea.\nMotivation\nI'm looking for a solution to build a Restful endpoints abstraction for my learning project which is a forum's client, by read many articles and libraries I found Moya seems to fit my needs.\nWhen I progressing my plan, I meet some difficulties:\n- There are 38 endpoints need to declare\n- Some endpoints are complex that may has optional value, mutually exclusive field, required fields\n- too many endpoints in ONE enum made it to long, difficult to organize\n(PS: My company's app has about 100+ endpoints, and more complex than mine)\nSo, I tried to using struct to organize endpoints, It looks better, I use nested struct to simulate namespace (that mapping Restful resources), and resources' path can reusable.\nBut, there is an another problem, Moya's provider is generic, and it's designed for endpoints which declared in a enum, like Eidolon. If I still using struct, the code should like:\nswift\nlet provider = MoyaProvider<TheSite.Topics.Listing>()\nprovider.request(TheSite.Topics.Listing) { res in\n  // callback\n}\nThat's weird, can't be reused, and difficult to building a higher abstraction for provider to encapsulating OAuth2 signing and some configuration for Request [sample]\nThe only problem is the Provider's generic contraint, and I consider it's possible to remove without side effect, so I copy Moya 5.3 to my project, and just remove the generic contraint, all problem solved perfectly!\nThen, I wrote my thinking in #358, and @ashfurrow replied me.\nThe goal\nThe goal is simple, but complex to reach, that making a non-generic Provider possible.\nHow to\nBy theory, most of Provider's codes should be shared, but I tried many ways, failed.\nFinally, I found a way, to short:\n- Clearify data flow that how Provider sending a request\n- Made Provider light-weight\n- Introducing Backend to handle request\nAbout StubClosure\nThat's my mistake, because I promise keeping current APIs, In new Provider design I need to decide what backend should be use, and stubClosure can't be evaluate here.\nActually, stubClosure should be setting to StubBackend directly like StubBackend(stubClosure: {}), that's make sense.\nAnyway, It's should break current Provider's initializer.\nAnswer questions\nWhat does MoyaCommonProvider do? I don't see this class used anywhere, but it is defined in Provider.swift.\nMoyaCommonProvider is a non-generic Provider, you can use it when you using struct or class to organizing your endpoints.\nDefaultCommonEndpointMapping and DefaultEndpointMapping do the same thing, can this be simplified to just having DefaultEndpointMapping?\nDefaultCommonEndpointMapping and DefaultEndpointMapping is do the same thing, but DefaultEndpointMapping can't be used for non-generic Provider, and some people want do something works which needs to know TargetType's type\nBut, I think DefaultEnpointMapping is no need, you can just override toEndpoint (It's declared in TargetType) to do the same job.\nI see that CancellableToken has been made public, but I think it can remain private if you change the return type to Cancellable in MoyaProviderBackend\nI don't have idea about this, I think made its public may help for create new Backend in project?\n. ping @colinta \n. ping @colinta \n. It seems still made MoyaProvider can't be reused, it specify the struct type\nActually we can do the same thing before that PR\nswift\nlet provider = MoyaProvider<StructAPI>()\nprovider.request(StructAPI()) { res in\n  // callback\n}\nnow\nswift\nlet provider = MoyaProvider<StructTarget<StructAPI>>()\nprovider.request(StructTarget(StructAPI())) { res in\n  // callbace\n}\nThat's not simplify our codes, but make the things complex(wrap StructAPI into StructTarget)\nhttps://github.com/Moya/Moya/tree/structs this branch is a good try, but the implement too tricky(use Mirror)\n. It seems still made MoyaProvider can't be reused, it specify the struct type\nActually we can do the same thing before that PR\nswift\nlet provider = MoyaProvider<StructAPI>()\nprovider.request(StructAPI()) { res in\n  // callback\n}\nnow\nswift\nlet provider = MoyaProvider<StructTarget<StructAPI>>()\nprovider.request(StructTarget(StructAPI())) { res in\n  // callbace\n}\nThat's not simplify our codes, but make the things complex(wrap StructAPI into StructTarget)\nhttps://github.com/Moya/Moya/tree/structs this branch is a good try, but the implement too tricky(use Mirror)\n. @ashfurrow \nMy English speaking quite badly :scream:  My Skype is my email jasl9187 at hotmail.com, I'll try to explain my thoughts as I can.\nActually, after this PR, I forked Moya and build my own version for research MoyaX  (I'm sorry to renaming the project, I'm not want to divide, just because that's can made me away from compatibility concerns).\n. @ashfurrow \nMy English speaking quite badly :scream:  My Skype is my email jasl9187 at hotmail.com, I'll try to explain my thoughts as I can.\nActually, after this PR, I forked Moya and build my own version for research MoyaX  (I'm sorry to renaming the project, I'm not want to divide, just because that's can made me away from compatibility concerns).\n. I polished this PR in my fork, and I fork eidolon with MoyaX works quite well, codes here.\nPS: It's may not pass compiling because I force push MoyaX master, and not change test cases, they're too big.\n. I polished this PR in my fork, and I fork eidolon with MoyaX works quite well, codes here.\nPS: It's may not pass compiling because I force push MoyaX master, and not change test cases, they're too big.\n. Seems Backend should be Strategy more clearly.\nThe Moya current data flow is\nTargetType - endpointClosure -> Endpoint<T> - requestClosure -> NSURLRequest - plugins -> Alamofire's Request -> Cancellable\nBecause of generic Endpoint, we can do some things like adding authentication headers for specified targets in endpointClosure, for example. I think that's why Endpoint needs be generic. @ashfurrow is this right?\nIf Endpoint becoming non-generic, how do we do the same thing? maybe moving this job into TargetType itself is a good choice, so MoyaX's flow is\nTargetType - TargetType#endpoint-> Endpoint -> Provider#willTransformToRequest -> NSMutableURLRequest - plugins - Backend -> Cancellable\nBesides, Endpoint is a Moya internal presentation of TargetType, I think there is no side effect and should keeping in a single thread, so changing Endpoint is no need returns a new instance and It could be a struct, that's may good for performance slightly.\nAfter this change, I think generic Provider become just for convenient.\nI admit non-generic provider is a little radical, but If we have non-generic Provider first, we can easily wrapping it as generic provider but harder the other way.\nIn MoyaX, the generic Provider reused most of non-generic provider, so It's only 10 lines.\n. Seems Backend should be Strategy more clearly.\nThe Moya current data flow is\nTargetType - endpointClosure -> Endpoint<T> - requestClosure -> NSURLRequest - plugins -> Alamofire's Request -> Cancellable\nBecause of generic Endpoint, we can do some things like adding authentication headers for specified targets in endpointClosure, for example. I think that's why Endpoint needs be generic. @ashfurrow is this right?\nIf Endpoint becoming non-generic, how do we do the same thing? maybe moving this job into TargetType itself is a good choice, so MoyaX's flow is\nTargetType - TargetType#endpoint-> Endpoint -> Provider#willTransformToRequest -> NSMutableURLRequest - plugins - Backend -> Cancellable\nBesides, Endpoint is a Moya internal presentation of TargetType, I think there is no side effect and should keeping in a single thread, so changing Endpoint is no need returns a new instance and It could be a struct, that's may good for performance slightly.\nAfter this change, I think generic Provider become just for convenient.\nI admit non-generic provider is a little radical, but If we have non-generic Provider first, we can easily wrapping it as generic provider but harder the other way.\nIn MoyaX, the generic Provider reused most of non-generic provider, so It's only 10 lines.\n. @ashfurrow I'm very sorry for inappropriate words, I'm not to offensive, you know... I've edited the issue. I'm very sorry.\nI'm just thinking about that, it seems if cancel the Alamofire's request, the response completion will not be triggered. \nPluginType#didReceiveResponse is invoked in Alamofire's response completion\nThe point is, does PluginType#didReceiveResponse should always be invoked for a request? if yes, that might be a bug, because if Alamofire's response completion not invoke, `PluginType#didReceiveResponse will not invoke too .\npseudocode for example\n``` swift\n// In a ViewController\nlet networkActivityClosure: NetworkActivityPlugin.NetworkActivityClosure = { change in\n  switch change {\n  case .Began:\n    ShowTipBar()\n  case .Ended:\n    HideTipBar()\n  }\n}\nlet networkActivityPlugin = NetworkActivityPlugin(networkActivityClosure: networkActivityClosure)\nlet provider = MoyaProvider(plugins: [networkActivityPlugin])\n// do a request\nlet cancellableToken = provider.request(.UserProfiles) { result in\n  // do something\n}\n```\nif networking toooo terrible, and for some reason I cancel the request by cancellableToken.cancel(), the HideTipBar may not be triggered (which is unexpected).\n. have read the doc again,\nin https://github.com/Moya/Moya/blob/master/docs/Providers.md#plugins\nswift\n    /// Called by the provider as soon as a response arrives\n    public func didReceiveResponse(data: NSData?, statusCode: Int?, response: NSURLResponse?, error: ErrorType?, target: TargetType) {\n        networkActivityClosure(change: .Ended)\n    }\nthe comment and the functional naming is clear and point out that will be called when response arrives\nbut, as the doc tips This is useful for working with the network activity indicator, if the response not arrives (the request be canceled or some other reasons), the .Ended state would not be reached, and if developer not consider this possibility, that would have issue.\n. My mistake, just do some experiment, when cancel a request, the callback will be triggered but got Error Domain=NSURLErrorDomain Code=-999 \"cancelled\"\nSorry for my inappropriate words again @ashfurrow , just closing the issue.\n. My mistake, just do some experiment, when cancel a request, the callback will be triggered but got Error Domain=NSURLErrorDomain Code=-999 \"cancelled\"\nSorry for my inappropriate words again @ashfurrow , just closing the issue.\n. Yes!\n- https://github.com/Moya/Moya/blob/master/Source/Plugins/NetworkActivityPlugin.swift#L9 wrong description here.\n- https://github.com/Moya/Moya/blob/master/Source/Plugins/NetworkActivityPlugin.swift#L26 the didReceiveResponse not only triggered by the response arrives but also the request be cancelled (with a \"cancelled\" error), notice here may be better.\n. Yes!\n- https://github.com/Moya/Moya/blob/master/Source/Plugins/NetworkActivityPlugin.swift#L9 wrong description here.\n- https://github.com/Moya/Moya/blob/master/Source/Plugins/NetworkActivityPlugin.swift#L26 the didReceiveResponse not only triggered by the response arrives but also the request be cancelled (with a \"cancelled\" error), notice here may be better.\n. No problem! I'll give a PR later.\n. No problem! I'll give a PR later.\n. Or we may add progress here and add a closure named willPerformRequest(request: RequestType) and call it before the request is sending out (for upload, we call it in encodingCompletion\n. But I think a better solution needs a breaking change, the ParameterEncoding is conflict with multipart-form-data, actually multipart-form-data is a kind of parameter's encoding, but Moya currently using Alamofire's ParameterEncoding directly\n. If we refactor the ParameterEncoding, keeping the same behaviour both with normal request and multipart upload is possible and simple\nI've done this for my Moya fork, details here\n. That's may not be an issue, for Cocoapods or Charthage, we can lock the Alamofire's version, and for 3.x, Alamofire would unlikely change ParameterEncoding (and ParameterEncoding should be a stable component according to its commit logs)\n. There seems no best practice for now, my solution is\n``` swift\nenum Articles: TargetType {\n  enum Comments: TargetType {\n    case .Index(articleId: Int)\n    case .Show(articleId: Int, id: Int)\n    case .Create(articleId: Int, comment: Comment)\n    // ...\n  }\ncase .Index\n  case .Show(id: Int)\n  // ...\n}\n// articles provider\nlet providerForArticles = MoyaProvider()\n// call listing articles\nproviderForArticles.request(.Index) { result in\n  // do sth.\n}\n// comments provider\nlet providerForComments = MoyaProvider()\n// call listing comments\nproviderForComments.request(.Index(articleId)) { result in\n  // do sth.\n}\n```\nthe disadvantage is the provider couldn't be shared.\nI think the better way is using struct-based targets which is under active discussion in PR #447 #434 and Moya has a initial support in PR #430 \nPseudo-code is\n``` swift\nextension RubyChinaV3 {\n    struct Replies {\n        static let Path = \"replies\"\n    }\n}\nextension RubyChinaV3.Replies {\n    struct Listing: TargetType {\n        var topicId: String\n        var offset: Int\n        var limit: Int\n    init(topicId: String, offset: Int = 0, limit: Int = 20) {\n        self.topicId = topicId\n        self.offset = offset\n        self.limit = limit\n    }\n\n    var baseURL: NSURL { return RubyChinaV3.BaseURL }\n    var path: String { return \"\\(RubyChinaV3.Topics.Path)/\\(self.topicId)/\\(RubyChinaV3.Replies.Path)\" }\n    var parameters: [String: AnyObject] {\n        var parameters = [String: AnyObject]()\n\n        parameters[\"limit\"] = self.limit\n        parameters[\"offset\"] = self.offset\n\n        return parameters\n    }\n}\n\nstruct Create: TargetType {\n    var topicId: String\n    var body: String\n\n    init(topicId: String, body: String) {\n        self.topicId = topicId\n        self.body = body\n    }\n\n    var baseURL: NSURL { return RubyChinaV3.BaseURL }\n    var path: String { return \"\\(RubyChinaV3.Topics.Path)/\\(self.topicId)/\\(RubyChinaV3.Replies.Path)\" }\n    var method: Moya.Method { return .POST }\n    var parameters: [String: AnyObject] {\n        var parameters = [String: AnyObject]()\n        parameters[\"body\"] = self.body\n        return parameters\n    }\n}\n\n}\nlet provider = MoyaProvider()\nprovider.request(RubyChinaV3.Replies.Listing(topicId: topicId)) { result in\n  // do sth\n}\nprovider.request(RubyChinaV3.Users.Followers.Listing(userId: userId, page: 2)) { result in\n  // do sth\n}\n```\nThere are possible to design chaining-style API like RubyChinaV3.user(3),followers.page(2).per(20)\n. @ealeksandrov \nSorry I'm not working on Moya now. \nFor Moya, you may consider using StructTarget \nBesides, you may check my fork \n. What about\nswift\n  public var parameters: [String: AnyObject]? {\n    switch self {\n   ...\n    case .Foo(_, let data1, let data2, let data3, bool data4):\n      return [\n        \"data1\": data1,\n        \"data2\": data2,\n        \"data3\": data3,\n        \"somethingBool\": data4 ? 1 : 0\n      ]\n    default:\n      return nil\n    }\n  }\n. @lucasp90 \nSorry my previous answer is wrong.\nBoth URI query and form are only support string, other types should be encoded to string (Moya can help you do some, but not all, details here) .\nThere are three common practices for passing boolean value to server side:\n- \"1\" for true, \"0\" for false\n- \"t\" for true, \"f\" for false\n- \"true\" for true, \"false\" for false\nChoose what is depending your server side, if you passing string \"true\" or \"false\" to server can get right response, just keeping the way.\n. @ashfurrow \nI think better not do this, because there haven't a standard practice for passing boolean value yet, different web framework may have different convention.\n. @ashfurrow \nRuby on Rails (one of the most famous web framework) both using 1/ 0 and t / f\n. My fork has done this (which we'd talked before)\n. @ashfurrow I sync all commits to https://github.com/jasl/Moya and it's a fork of Moya.\nI'm afraid my fork has large different with current Moya, because I've done myself version of multipart-upload, new Swift 3 naming convention, refactor example, non-generic provider etc  before (more early than Moya has these feature).\n. In my fork, I wrap network engine into Backend which handle initiallizing and configuring the engine, and it's has a request method, that accept Moya's Endpoint value.\nIn request method, the backend should handle how to make a Endpoint become to request and launch it, then invoking response closure when get response, Moya don't care about how to encode the parameter or how to make endpoint to request, these job is NSURLSession's or Alamofire's, Moya just provides a easy way to encapsulation the remote API definition, and give a easy way to intercept the upcoming Endpoint. I think this is the core value of a networking abstraction.\n. and I think using typealias isn't a good way to abstract engines, because engines interface are different, and may need to configure, so we need to wrap them.\n. duplicate issue #556 \n. the Moya current flow is Endpoint -> NSURLRequest (by RequestClosure definition) then NSURLRequest -> AlamoRequest (by sendRequest)\ntoNSMutableURLRequest is used in RequestClosure for example \nI just keeping the behavior, and I think that's fine, I've read Alamofire's Request, most except authenticate are no use on preparation (authenticate can be done by plugin), and that's help with decoupling with Alamofire (although it's no necessary)\n. Reverted, but keeping parameterEncoding, I've not updated test cases yet\n. @ashfurrow I've do some research in Playground, toEndpoint() is safe.\n``` swift\nprotocol FooType {\n    func foo() // that's important\n}\nextension FooType {\n    func foo() {\n        print(\"foo type\")\n    }\n}\nclass FooClass: FooType {\n    func foo() {\n        print(\"foo class\")\n    }\n}\nstruct FooStruct: FooType {\n    func foo() {\n        print(\"foo struct\")\n    }\n}\nfunc bar(foo: FooType) {\n    let fooType = foo as FooType\n    fooType.foo()\n}\nlet foo = FooClass()\nfoo.foo() //=> foo class\n(foo as FooType).foo() //=> foo class\nbar(foo) //=> foo class\nlet fooS = FooStruct()\nfooS.foo() //=> foo struct\n(fooS as FooType).foo() //=> foo struct\n``\n. It seems by overriding can do the same job inendpointClosure`\n. ",
    "rad182": "+1\n. awesome! thanks @ashfurrow sorry didn't see those documentations\n. ",
    "aloco": "+1\n. I really like this approach! Since Moya get\u00b4s more and more awesomeness, there should be a consistent way in adding new features without having dozens of specific closures (like the already mentioned credentials, logger, network activity). \nIt would also reduce the amount of breaking changes if new features were implemented as Plugins whenever possible.\n. This is fixed with 731db29d6a68d350ef97ad059e881f361dc35e3f, thx @bojan \nA version bump would be nice :)\n. Exactly, leaving my Cartfile with \"Moya/Moya\" \"master\" looks risky to me :)\n. thx! Although Carthage can\u00b4t pick this tag with github \"Moya/Moya\" ~> 4.0 I think this is sufficient for the moment, since I can use github \"Moya/Moya\" \"4.0.2-carthage\" \nI hope there is soon a 4.0.3 release so I can use ~> 4.0 again :)\n. There were some files missed, but as already mentioned https://github.com/Moya/Moya/commit/731db29d6a68d350ef97ad059e881f361dc35e3f fixed that. So I guess there is no need for any deploy script update\n. thx, everything seems to be working again \ud83d\udc4d\ud83c\udffb\n. Hi, \nI went through all discussions (https://github.com/Moya/Moya/pull/169, https://github.com/Moya/Moya/pull/215) regarding multi repo setup / carthage / cocoapods and so on. But I still don\u00b4t get the point why it\u00b4s such a mess to break out Moya\u00b4s reactive extensions from the core library. \nTBH the reactive stuff is nothing more  (like @justinmakaila and @swizzlr pointed out) than convenient extensions of the core library. Why can\u00b4t we treat them like the other Community extensions and keep things simple? I think that approach would work for Carthage, CocoaPods and SPM. \nI am a Carthage user and I am using Moya together with ReactiveCocoa in every project. I like it. But I don\u00b4t like to include dependencies I am actually not using (RxSwift), and I am sure RxSwift users don\u00b4t like to wait for ReactiveCocoa to build, when updating their dependencies (what happens often caused by e.g. a new Xcode release, Moya release, ReactiveCocoa release, RxSwift release, ....). If you checkout the Changelog every second release of Moya just updates it\u00b4s dependency to external libraries. Maybe this is caused by the nature of external dependencies but why should pure Moya users care about an updated ReactiveCocoa or RxSwift? Why should a ReactiveCocoa user care about RxSwift updates? They have to deal with issues caused by a library they are not using. \nIMHO since everything is moving so fast with new releases, its worth the multi repo tradeoff to make developers everyday life easier / increasing (minimal) maintenance effort for contributors. Maybe I\u00b4m not experienced enough to catch all implications of moving the extensions to external repos but I can only report that I nearly always run into issues with Moya when updating my dependencies. \nSorry for reigniting this discussion \ud83d\ude43\u270c\ud83c\udffc\n. hm it seems something went wrong with the ReactiveCocoa dependency within the podspec file. Not sure what causes the issue - I\u00b4m rather less experienced with cocoa pods..\n. \ud83d\udc4d\ud83c\udffb\n. Yes thx received that invite, I am just not active enough to count as organization member :)\n. Hi, \nI am updating a project from Moya 7.0.0 (swift 2.x) to Moya 10.0.0, facing the same issue. @shwetachitlangia did you find any workarounds? . Hi, trying to investigate the issue but it seems very strange to me. First it doesn\u00b4t happen with every POST request every time and secondly I just ran into the same issue with a DELETE call.\n\"status\" : 405,\n  \"message\" : \"Request method 'LETE' not supported\",\n  \"timestamp\" : 1516355038187,\n  \"exception\" : \"org.springframework.web.HttpRequestMethodNotSupportedException\",\nThe request setup looks correct since MoyaLogger prints the request correctly. I think this happens also only with long url\u00b4s @shwetachitlangia can you confirm this?. I tried mitmproxy but facing other issues with using the proxy (getting some timeouts \ud83e\udd37\u200d\u2642\ufe0f), will dig into it more when I find time, but so far, I haven\u00b4t seen the issue when using the proxy but don\u00b4t take my attempt as too meaningful as I tested this not excessively and sometimes the issue doesn\u00b4t show up, even without the proxy. . ",
    "avf": "Thanks for your kind words :-)\nI've merged the master and you should be able to merge the pull request now.\nAbout tests: I'm pretty busy right now, but maybe I'll give it a shot next week. I'm familiar with OHTTPStubs, but I haven't used Nimble before. I'll message you when I get started or if I need help, ok?\n. Hey, thanks for doing the merge! I should really turn on github notifications ;-)\n. Hmm, good question, the only reason I can think of is for debugging purposes maybe, to see if the credentials are set correctly for each request? Haven't really used the stubbing yet, so I'm not sure.\n. ",
    "BMR731": "```\nlet endpointClosure = { (target: MyTarget) -> Endpoint in\n    let url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString\n    let endpoint: Endpoint = Endpoint(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n    return endpoint.endpointByAddingHTTPHeaderFields([\"APP_NAME\": \"MY_AWESOME_APP\"])\n}\nlet provider = MoyaProvider(endpointClosure: endpointClosure)\n```\nthen i got this error\n  \"errors\" : [\n    \"Unable to find endpoint\"\n  ]\nmy usage is not correct or something, i read the documents....,thank you \n. ```\nlet endpointClosure = { (target: MyTarget) -> Endpoint in\n    let url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString\n    let endpoint: Endpoint = Endpoint(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n    return endpoint.endpointByAddingHTTPHeaderFields([\"APP_NAME\": \"MY_AWESOME_APP\"])\n}\nlet provider = MoyaProvider(endpointClosure: endpointClosure)\n```\nthen i got this error\n  \"errors\" : [\n    \"Unable to find endpoint\"\n  ]\nmy usage is not correct or something, i read the documents....,thank you \n. ok..thank you, i will check it again\n. ",
    "nmtitov": "Yes of course. I am running latest stable cocoapods (however I've noticed you are using 0.39 beta?):\n$ pod --version\n0.38.2\nThis is my Podfile.lock\n```\nPODS:\n  - Alamofire (2.0.0)\n  - Box (HEAD based on 1.2.2)\n  - Moya (2.1.0):\n    - Moya/Core (= 2.1.0)\n  - Moya/Core (2.1.0):\n    - Alamofire\n  - Moya/ReactiveCocoa (2.1.0):\n    - Moya/ReactiveCore\n    - ReactiveCocoa\n  - Moya/ReactiveCore (2.1.0):\n    - Moya/Core\n  - Moya/RxSwift (2.1.0):\n    - Moya/ReactiveCore\n    - RxSwift\n  - Nimble (2.0.0-rc.3)\n  - OHHTTPStubs (4.2.0):\n    - OHHTTPStubs/Default (= 4.2.0)\n  - OHHTTPStubs/Core (4.2.0)\n  - OHHTTPStubs/Default (4.2.0):\n    - OHHTTPStubs/Core\n    - OHHTTPStubs/JSON\n    - OHHTTPStubs/NSURLSession\n    - OHHTTPStubs/OHPathHelpers\n  - OHHTTPStubs/JSON (4.2.0):\n    - OHHTTPStubs/Core\n  - OHHTTPStubs/NSURLSession (4.2.0):\n    - OHHTTPStubs/Core\n  - OHHTTPStubs/OHPathHelpers (4.2.0)\n  - Quick (0.6.0)\n  - ReactiveCocoa (3.0-swift2):\n    - Box\n    - ReactiveCocoa/UI (= 3.0-swift2)\n    - Result\n  - ReactiveCocoa/Core (3.0-swift2):\n    - Box\n    - ReactiveCocoa/no-arc\n    - Result\n  - ReactiveCocoa/no-arc (3.0-swift2):\n    - Box\n    - Result\n  - ReactiveCocoa/UI (3.0-swift2):\n    - Box\n    - ReactiveCocoa/Core\n    - Result\n  - Result (HEAD based on 0.6-beta.1)\n  - RxSwift (2.0.0-alpha.2)\nDEPENDENCIES:\n  - Alamofire\n  - Box (HEAD)\n  - Moya (from ../)\n  - Moya/ReactiveCocoa (from ../)\n  - Moya/RxSwift (from ../)\n  - Nimble (from https://github.com/Quick/Nimble)\n  - OHHTTPStubs\n  - Quick (from https://github.com/Quick/Quick)\n  - ReactiveCocoa (from https://github.com/ashfurrow/ReactiveCocoa.git, branch swift2)\n  - Result (HEAD)\n  - RxSwift (~> 2.0.0-alpha)\nEXTERNAL SOURCES:\n  Moya:\n    :path: ../\n  Nimble:\n    :git: https://github.com/Quick/Nimble\n  Quick:\n    :git: https://github.com/Quick/Quick\n  ReactiveCocoa:\n    :branch: swift2\n    :git: https://github.com/ashfurrow/ReactiveCocoa.git\nCHECKOUT OPTIONS:\n  Nimble:\n    :commit: 91f3921fbfdae1b02def17b27267a13f4606ec03\n    :git: https://github.com/Quick/Nimble\n  Quick:\n    :commit: ac5eadd202dd67741628f80fb96e8c57388d954d\n    :git: https://github.com/Quick/Quick\n  ReactiveCocoa:\n    :commit: b653f8db9f1788ec1f1ae6523a2f2e01a289b3c1\n    :git: https://github.com/ashfurrow/ReactiveCocoa.git\nSPEC CHECKSUMS:\n  Alamofire: 2f13548b29d25a58ecd91c9225fb51493e2b782b\n  Box: a92e8aa4c099e6bc0733829665caf9e668ef53b8\n  Moya: cf40dc2fef002d59b6745cac715d6016bc0428aa\n  Nimble: 2f64d173ad23dc39f10110840a1ed15f29ef75e8\n  OHHTTPStubs: f639130b83fb5f4f022d38f841141b0a6fa77249\n  Quick: aaa961333f0bec39bfefa4b759128e4eb39f0d0e\n  ReactiveCocoa: d99571cf654b8e6703f338ca13f486b999c51969\n  Result: 6c990ec4a72470672f9fc5b6fef009da0f6f40d1\n  RxSwift: 0450126df5f8de3ec7ee789b420d7ba98baea364\nCOCOAPODS: 0.38.2\n```\nBy the way I guess everything is fine with Xcode 6.x? Will demo work if I reinstall previous version?\n. Yes of course. I am running latest stable cocoapods (however I've noticed you are using 0.39 beta?):\n$ pod --version\n0.38.2\nThis is my Podfile.lock\n```\nPODS:\n  - Alamofire (2.0.0)\n  - Box (HEAD based on 1.2.2)\n  - Moya (2.1.0):\n    - Moya/Core (= 2.1.0)\n  - Moya/Core (2.1.0):\n    - Alamofire\n  - Moya/ReactiveCocoa (2.1.0):\n    - Moya/ReactiveCore\n    - ReactiveCocoa\n  - Moya/ReactiveCore (2.1.0):\n    - Moya/Core\n  - Moya/RxSwift (2.1.0):\n    - Moya/ReactiveCore\n    - RxSwift\n  - Nimble (2.0.0-rc.3)\n  - OHHTTPStubs (4.2.0):\n    - OHHTTPStubs/Default (= 4.2.0)\n  - OHHTTPStubs/Core (4.2.0)\n  - OHHTTPStubs/Default (4.2.0):\n    - OHHTTPStubs/Core\n    - OHHTTPStubs/JSON\n    - OHHTTPStubs/NSURLSession\n    - OHHTTPStubs/OHPathHelpers\n  - OHHTTPStubs/JSON (4.2.0):\n    - OHHTTPStubs/Core\n  - OHHTTPStubs/NSURLSession (4.2.0):\n    - OHHTTPStubs/Core\n  - OHHTTPStubs/OHPathHelpers (4.2.0)\n  - Quick (0.6.0)\n  - ReactiveCocoa (3.0-swift2):\n    - Box\n    - ReactiveCocoa/UI (= 3.0-swift2)\n    - Result\n  - ReactiveCocoa/Core (3.0-swift2):\n    - Box\n    - ReactiveCocoa/no-arc\n    - Result\n  - ReactiveCocoa/no-arc (3.0-swift2):\n    - Box\n    - Result\n  - ReactiveCocoa/UI (3.0-swift2):\n    - Box\n    - ReactiveCocoa/Core\n    - Result\n  - Result (HEAD based on 0.6-beta.1)\n  - RxSwift (2.0.0-alpha.2)\nDEPENDENCIES:\n  - Alamofire\n  - Box (HEAD)\n  - Moya (from ../)\n  - Moya/ReactiveCocoa (from ../)\n  - Moya/RxSwift (from ../)\n  - Nimble (from https://github.com/Quick/Nimble)\n  - OHHTTPStubs\n  - Quick (from https://github.com/Quick/Quick)\n  - ReactiveCocoa (from https://github.com/ashfurrow/ReactiveCocoa.git, branch swift2)\n  - Result (HEAD)\n  - RxSwift (~> 2.0.0-alpha)\nEXTERNAL SOURCES:\n  Moya:\n    :path: ../\n  Nimble:\n    :git: https://github.com/Quick/Nimble\n  Quick:\n    :git: https://github.com/Quick/Quick\n  ReactiveCocoa:\n    :branch: swift2\n    :git: https://github.com/ashfurrow/ReactiveCocoa.git\nCHECKOUT OPTIONS:\n  Nimble:\n    :commit: 91f3921fbfdae1b02def17b27267a13f4606ec03\n    :git: https://github.com/Quick/Nimble\n  Quick:\n    :commit: ac5eadd202dd67741628f80fb96e8c57388d954d\n    :git: https://github.com/Quick/Quick\n  ReactiveCocoa:\n    :commit: b653f8db9f1788ec1f1ae6523a2f2e01a289b3c1\n    :git: https://github.com/ashfurrow/ReactiveCocoa.git\nSPEC CHECKSUMS:\n  Alamofire: 2f13548b29d25a58ecd91c9225fb51493e2b782b\n  Box: a92e8aa4c099e6bc0733829665caf9e668ef53b8\n  Moya: cf40dc2fef002d59b6745cac715d6016bc0428aa\n  Nimble: 2f64d173ad23dc39f10110840a1ed15f29ef75e8\n  OHHTTPStubs: f639130b83fb5f4f022d38f841141b0a6fa77249\n  Quick: aaa961333f0bec39bfefa4b759128e4eb39f0d0e\n  ReactiveCocoa: d99571cf654b8e6703f338ca13f486b999c51969\n  Result: 6c990ec4a72470672f9fc5b6fef009da0f6f40d1\n  RxSwift: 0450126df5f8de3ec7ee789b420d7ba98baea364\nCOCOAPODS: 0.38.2\n```\nBy the way I guess everything is fine with Xcode 6.x? Will demo work if I reinstall previous version?\n. I tried cocoapods version 0.39.0.beta.4 and got same error:\ndyld: Library not loaded: @rpath/libswiftCoreLocation.dylib\n  Referenced from: /Users/hello/Library/Developer/Xcode/DerivedData/Demo-djsbbkgjbpaearfipsplncpfociz/Build/Products/Debug-iphonesimulator/Moya.framework/Moya\n  Reason: image not found\nThis error happens in runtime, after I see simulator with launch screen. Compilation completes successfully without errors. I'll try with Xcode 6 and report status soon.\n. I tried cocoapods version 0.39.0.beta.4 and got same error:\ndyld: Library not loaded: @rpath/libswiftCoreLocation.dylib\n  Referenced from: /Users/hello/Library/Developer/Xcode/DerivedData/Demo-djsbbkgjbpaearfipsplncpfociz/Build/Products/Debug-iphonesimulator/Moya.framework/Moya\n  Reason: image not found\nThis error happens in runtime, after I see simulator with launch screen. Compilation completes successfully without errors. I'll try with Xcode 6 and report status soon.\n. Thank you, it works now :)\n. Thank you, it works now :)\n. Oh, I see. Thank you!\n. Oh, I see. Thank you!\n. Any solution to this problem?. Any solution to this problem?. ",
    "sauravambastha": "Hi, i am trying to run Xcode for mac app. No code nothing but still it gives errors . I am using Xcode 6.4.  why ?\nSteps i am doing are : open Xcode , select OS X - application- cocoa application, and language swift. errors are with objective c as well. Why so ?\n. ",
    "AlexanderKaraberov": "If we add something like print(\"\\(applicationName): \\(date) Request Headers:\\(request.request!.allHTTPHeaderFields)\") inside func request(token: T, completion: MoyaCompletion) it will be too intrusive. Or did you mean smth. different in \"hook into the existing provider initialization\"?  NSNotification sounds like a good idea. \n. @ashfurrow  Great idea. We can go with this solution. What about logging a response? It can be useful to see plain server response in string format.\n. @ashfurrow  Just to be sure I understood you correctly. We will have a protocol Loggable with some methods/callbacks (networkRequestDidStart/Finish). Also we would have some kind of type class (protocol extension) with default implementations of the logging methods. And we will use it as some kind of delegate and call its methods inside of  request(token: T, completion: MoyaCompletion) -> Cancellable. We will declare it like let loggerDelegate: T and  T where T: Loggable.  Correct me, please, if I was wrong somewhere or missed smth.\n. @ashfurrow  I understood my mistake, so I deleted my previous response:)\nThe only question: why do you want to make it an Optional var, not just let ? I don't really want mutable properties inside Provider. We can allow user to init it when he creates a provider instance here:  return ReactiveMoyaProvider<UserApi>(endpointsClosure: endpointsClosure, endpointResolver: endpointResolver(), logger: MyLogger(), stubResponses: false) or use a default parameter PlainLogger with our predefined implementation.\nAs for other you suggestions I completely agree. \n. @ashfurrow \"Many (most?) users won't want HTTP logging\" - reasonable :blush: \nOk, so we will have a nullable property let logger? and no logging by default, a PlainLogger (better MoyaLogger or smth. like this), which we have to include in the documentation and Logger protocol, so users can provide their own logging implementations if they want. In the basic implementation we just will print() all the things (headers, data in UTF8 strings)\n. Great.  I hope to implement this soon, when I will have more free time.\n. @aschuch \"I would like to suggest to at least accumulate a the log output\" - very reasonable, thanks - will reimplement it to print everything  after we get either a response or error. Or may be we should use NSLog? NSLog() ensures that all strings passing through it are written in a thread safe manner to stderr. Or it will look not good in Swift code?\n. @ashfurrow  Thanks a lot for feedback! Yeah - there are many style errors, so I asked for review:). Will fix it and add comments to protocol methods.\n. @ashfurrow \"Could you update the MoyaProvider subclasses for ReactiveCocoa and RxSwift?\". Sorry I'm not sure I understood your comment...\nYou mean only to add logger parameter to initializer in Reactive/Rx Moya extensions? Or add some FRP-friendly implementation of the Logger? :smile: \n. @aschuch \"Anyone have any resources? Blog posts?\" - yes, we need some authoritative opinion here about the thread safety. Also I'm not sure if it is good from the code style viewpoint...\n. @ashfurrow Oh. Sorry Again, I'm sooo slow :smile:  (deleted previous comments),\nAs I found here. You have already merged my Logger code with new Plugin feature and also did all the code cleaning. Thanks for the terrific work!\nAre there smth. left for me in in the logger functionality? Or I can look for other features to implement? :smiley: \n. @ashfurrow  What are the next plans for 3.0+ release. I use Moya intensively in my pet and job Swift projects, so I'm interested about the plans and future updates.\n. Yes, I think it will be reasonable.\n. @ashfurrow  Seems reasonable. We can even add several flags (debug/verbose/info) or something like that.\n. @ashfurrow So, you want to add date/id preamble at the very beginning? And then just log response, headers, request, etc. after without it? \nIt can be useful to get rid of noise in the log output.\n. @ashfurrow Agree. I think I can add some comments which will serve as a hint for user what he can implement it his own logger.\n. ",
    "floskel": "Any news on this. I've started seeing the error as well. No luck yet.\n. ",
    "Alexey-Matjuk": "@petester42 thanks, changing compatibility version to 1 helped\n. @sunshinejr tried today installing Moya from 10.0.0-dev branch using Carthage. But can't build my project, because framework is compiled with Swift 3.1.\n\n. @BasThomas thanks, it false alarm.\nI cleaned Derived data before my first comment, but didn't think of Derived Data of Moya itself. Now it works.\n. ",
    "luigidimuzio": "It looks like the Endpoint main initializer still requires them as a non-optional\n. It looks like the Endpoint main initializer still requires them as a non-optional\n. ",
    "AvdLee": "Passing by, as I was looking for this feature. I did miss it, as my app requests many of the same API endpoints at the same time. I was wondering why all these calls were fired.\nJust for my understanding, what would ideally be the way to handle these duplicate calls and prevent them to be all fired? Should I create my own inflights and duplicate detection?\n. Ok, I gave it a shot, but my knowledge did not let me create a certain solution using plugins. I'm really looking into a way to fix this for all Moya users. Anyone here to give me a good shot in the right direction?\n. I was thinking about a simple boolean added to the initializer of MoyaProvider trackInflights:Bool = false to make it available for all provider types. This makes if easy to enable for those who need it.\nCreating a dictionary  containing all completion blocks for that request and call them when that existing request is finished.\nHow about that?\n. Ok, I gave it a shot: \nhttps://github.com/AvdLee/Moya/commit/a029491b3219716c91b32feb0172e0f74be67154\nFor a quick test I duplicated the zen request. Checked it in Charles, one request, three completions.\nCurious about your feedback!\n. I would love to, but I'm unexperienced with Nimble and Quick. I'm having trouble to even execute the existing tests, but I'm happy to learn and see this working.\nIs there anything to do before the tests works with a clean checkout?\n. Got it working, needed to force update the project to version 4.0.1 of Nimble, as a clean checkout used version 3.0.0. Had the convert string to staticstring error.\nThis is the unit test I've got now, which is close, but not successful yet:\n``` swift\n        it(\"returns 3 times but executes one request\") {\n            var networkActivityCallTimes = 0\n            var requestCompletionTimes = 0\n            let plugin = NetworkActivityPlugin { (change) -> () in\n                if change == .Ended {\n                    networkActivityCallTimes += 1\n                }\n            }\n        let provider = MoyaProvider<GitHub>(plugins: [plugin], trackInflights: true)\n        let target: GitHub = .Zen\n\n        provider.request(target) { _ in\n            requestCompletionTimes += 1\n        }\n        provider.request(target) { _ in\n            requestCompletionTimes += 1\n        }\n        provider.request(target) { _ in\n            requestCompletionTimes += 1\n        }\n\n        expect(requestCompletionTimes).toEventually(beIdenticalTo(3))\n        expect(networkActivityCallTimes).toEventually(beIdenticalTo(1))\n    }\n\n```\nIt's probably a small thing, any suggestions here?\n. Ok, got it! https://github.com/Moya/Moya/pull/477\n. The thing is, we're using Moya the same as the Artsy project, using Enums. These can't contain stored properties.\nThe way I'm now doing this is by creating a seperated class conforming the MoyaTarget protocol, in which I'm copying the properties of the Enum and adding the extra parameters as you describe.\nIt just doesn't feels like the way it should be done.\n. I agree, this should be the way to do this. Downside of this, is that I have multiple calls like:\ncase getMovies\ncase getSeries\ncase getCollection(collectionId:Int)\nWhich are all pageable. \nI was hoping to create a generic solution to call these targets, with the paging logic handled by a seperated paging class:\n```\nfinal class PageableOperation {\nprivate let endpoint:ExampleAPI\n\ninit(endpoint:ExampleAPI){\n    self.endpoint = endpoint\n}\n\nfunc pagingSignalWithOffset(offset:Int, limit:Int) -> RACSignal {\n\n    var parameters = self.endpoint.parameters as [String : AnyObject]\n\n    parameters[\"offset\"] = offset\n    parameters[\"limit\"] = limit\n\n    return TIFProvider.request(self.endpoint, parameters: parameters)\n}\n\n}\n```\nBut I guess I'll go for a datasource implementation, which should send back a new paging signal based on the given offset and limit. Seems to be OK for this as well.\nIf you have any other suggestions, feel free to let me know!\n. It's a true honour to join this great project. Thanks Ash, hoping some people enjoy my extension! \n. Yeah, but the problem remains, as I still have to know the model type on implementation level (User in your example).\nIn my ViewModel / ViewController etc. I simply want to call Provider.request(.Profile) which then should return a SignalProducer<User, Moya.Error>.\n. Alright, interesting. I've implemented your suggestion and encountered some issues. You can check the example project here:\nhttps://github.com/AvdLee/Moya-SwiftyJSONMapper/tree/ObjectMapper_from_enum\nProblems encountered:\n\nAfter rewriting, the project compiled:\n``` swift\n// Works but has al the mapping logic in it, I don't want that!\nfunc requestType(target: ExampleAPI) -> SignalProducer {\n    return RCStubbedProvider.request(target).flatMap(FlattenStrategy.Latest, transform: { (response) -> SignalProducer in\n        do {\n            let jsonObject = try response.mapJSON()\n        guard let mappedObject = T(jsonData: JSON(jsonObject)) else {\n            throw Error.JSONMapping(response)\n        }\n\n        return SignalProducer(value: mappedObject)\n    } catch let error {\n        return SignalProducer(error: Moya.Error.Underlying(error))\n    }\n})\n\n}\n```\nHowever, on the implementation level, where I want this to work:\nswift\n    func exampleRequestDirectMapping(){\n        requestType(ExampleAPI.GetObject).on { (object) -> () in\n            print(\"Example origin \\(object.origin)\")\n        }.start()\n    }\nIt still doesn't. When I explicit cast to the given return type, it does work:\nswift\n    func exampleRequestDirectMapping(){\n        // This instead works, with type definition\n        let producer:SignalProducer<GetResponse, Moya.Error> = requestType(ExampleAPI.GetObject).on { (object) -> () in\n            print(\"Example origin \\(object.origin)\")\n        }\n        producer.start()\n    }\nI would suggest to open the Example project yourself and see the problem in action. Hoping we can find the solution for this!\n. I think I would love to see this kind of implementation too. For me personally, it makes it possible to fix my issue #383.\nTo make it more flexible, I mis an option to add other parameters to the struct which will not be automatically included in the query because of the reflection implementation. \n. Good point, done that!\n. @ashfurrow I've added these tests. However, I had to make the CancellableWrapper public to get to the cancellableToken. I'm not really happy with that change, but maybe this is a good start for someone else to continue.\nI'm out of time today (end of the day in the Netherlands \ud83d\udc4d ) Will try to create a changelog entry later this week!\n. Changelog entry is added\n. @ashfurrow good find! Done that. Should be all good now.\n. @ashfurrow the release of 6.5.0 should include this commits as noted with the release commits. However, checking https://github.com/Moya/Moya/blob/6.5.0/Source/Moya.swift shows there's no trackInflights included, where the master right now does. \nWhich base branch is used for the release of tag 6.5.0?\n. It does, I was confused as I saw my commits included in the release, but missed my changes. Thanks! \n. Just to make this clear, the tracking is implemented inside the MoyaProvider. The RxMoyaProvider and ReactiveCocoaMoyaProvider inherit from this base class and therefor inherit the inflight tracking functionality. \n. You forgot to implement this protocol required property:\nswift\nvar multipartBody: [MultipartFormData]? {\n        return nil\n}\nI also encountered the documentation wasn't up to date for this. Changed that now: \nhttps://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md\n. I just did a release for beta 6, to update the podspec for ReactiveSwift beta 4. However, a new error occurred:\n``\nValidating podspec\n -> Moya (8.0.0-beta.5)\n    - ERROR | [Moya/ReactiveSwift] file patterns: Thesource_files` pattern did not match any file.\n[!] The spec did not pass validation, due to 1 error.\n```\nCurrently busy fixing this issue.\nUpdate\nOk, this was also related to the already noted issue with upgrading the podspec version from beta 5 to beta 6. After updating the version manually, pushing the new podspec worked without a problem.\nI've manually updated the release including the changelog as well.. I'm getting the error: \nFor your GitHub repo, you need to expose: DANGER_GITHUB_API_TOKEN\nYou may also need: DANGER_GITHUB_HOST, DANGER_GITHUB_API_BASE_URL\nI've got my token ready, but I'm unable to expose it using the DANGER_GITHUB_API_TOKEN key. Anyone available to provide me the needed information to do this?. We could do that. However, I think it's important that we reference the repo's who are up to date the most. When developing you want to reference up to date repo's as much as possible.. After contact with @BasThomas I started releasing 8.0.0. Release is done, only the podspec had some issues, which I'm fixing right now!\nUpdate\nUpdated for Cocoapods as well!. Ah indeed, I've fixed that. Also updated for the SwiftLint issue.. Hmm, you're right. It's strange though, as it's executing exactly the same request method, only with the progress parameter added.\nI'll look into it further tomorrow!. Ok, I've fixed the tests, everything seems to be OK now. The only thing I want to discuss here, is that another solution is already available for progress tracking:\nswift\nfunc requestWithProgress(token: Target) -> SignalProducer<ProgressResponse, MoyaError>\nHowever, this doesn't really fit in our JSON parsing functionalities and needs some more code to write on our side to make it easy to track progress.\nWith this pull request we're introducing another way of tracking progress, which is quite more easy to use and feels simpler.\nHow do you guys think about this?\n. Good discussion, I agree with the above. We'll look further into implementing it using the suggested methods. Thanks!. ",
    "onmyway133": "@petester42 @ashfurrow this is not an issue. Maybe I misunderstand the code\n. @petester42 @ashfurrow this is not an issue. Maybe I misunderstand the code\n. I just misunderstood the code. Now I'm realize that MoyaProvider uses generic on MoyaTarget, and indeed, MoyaTarget instance is passed into MoyaProvider 's request method\n. I just misunderstood the code. Now I'm realize that MoyaProvider uses generic on MoyaTarget, and indeed, MoyaTarget instance is passed into MoyaProvider 's request method\n. ",
    "PiXeL16": "Great!\n. ",
    "gmertk": "Thank you for Moya :smile: \n. ",
    "vishvish": "I guess I should ask if there's an updated version of the Artsy app :)\n. I guess I should ask if there's an updated version of the Artsy app :)\n. Thanks @ashfurrow - appreciate the response. ReactiveCocoa is changing so quickly that when I tried the Artsy app to help me, it was clear that they've diverged somewhat! I'm still using Moya 2.2.0 as I can't get up to speed with the changes yet, but thanks for the software, it's pretty good stuff.\n. Thanks @ashfurrow - appreciate the response. ReactiveCocoa is changing so quickly that when I tried the Artsy app to help me, it was clear that they've diverged somewhat! I'm still using Moya 2.2.0 as I can't get up to speed with the changes yet, but thanks for the software, it's pretty good stuff.\n. ",
    "nosrak113": "257\n. ",
    "istvanelekes": "Carthage\ngithub \"Moya/Moya\"\n. ",
    "bojan": "@ashfurrow I think that some of the fixes in f6a791398b47b4a982c91305d1bdd25533a52407 were somehow reverted in the later commits. I've tried recreating the Demo project with 0.39.0 (not b4) on 4.0.2, it builds and works just fine.\n. I'm already on it.\n. #261 should do it.\n. ",
    "vinnybad": "For what it's worth, I'm seeing the same thing happen on our jenkins instance.\n. I had this issue when multiple builds were executing at the same time. Decreasing the number of executors to 1 resolved the issue. Not an ideal solution but this bought us some time to look for other solutions. \n. ",
    "midori2012": "Oh, I miss it! Thank you for letting me know:smiley:\nHope the pull req merge soon!\nThanx\n. ",
    "wouterw": "@ashfurrow Oops no, I forgot to update the podspec. \n. ",
    "BasThomas": "Is this something we might be able to take on for 8.0.0 still? Not sure how this would fit in the API as it stands right now. @Moya/contributors, anyone?. I think it'd be nice to see if we can improve here in the future. . I agree, and think our approach is better, at least according to Moya's vision:\n```\nSome awesome features of Moya:\n\nCompile-time checking for correct API endpoint accesses.\n```\n\nWhich I think the current approach seems to do. Closing this. If anyone disagrees or has an even better solution, please feel free to reopen.. Thanks for weighing in, @kylef! I think it's a really great tool, just not for Moya. :). Thanks for weighing in, @kylef! I think it's a really great tool, just not for Moya. :). Seems like this has been resolved, please reopen if there's any other issues. :). Hmm, after looking through Moya's code, I don't really see how we can use this to enhance it. Maybe I am missing something. \ud83e\udd14. Closing this for now, please reopen if you do find a way to improve the enums with private types.. Closing this for now, please reopen if you do find a way to improve the enums with private types.. What is your problem exactly? Check the samples above or check the docs.\n. Closing this for now, as it seems this has been resolved by merging the PR. Please reopen if there's anything else that needs discussing! :). Had a quick look, but can't seem to find anything similar in the Alamofire issues.\n. @robertofrontado can you post your code where you're getting this issue? Also, what version of Moya are you using?. Have you been able to fix this, @Miasma87?\n. Do you have an update on this, @VivienGiraud? :). No worries, thanks for the update nonetheless!. It seems the issue here has been solved, so I guess this issue can be closed, right?\n. Thanks for the kind words, @SD10, and good luck with Nora. :). Thank you, Ash!\n. Have you been able to have a look at this, @ashfurrow?\n. Xcode itself reports 0% (as it checks the demo itself, not the library)... or am I overlooking something?\n\n. Ah great, thanks. The overall coverage reported by Xcode is 80% (see attached)\n\n\n. Not familiar with CodeCov, but the algorithms to get a percentage might be different, explaining the difference. But the gap would still be pretty big...\n. Circle is complaining, is this a problem? @AndrewSB \n. Rebuilding from their web interface immediately fails the build again, it seems. \ud83d\ude15 \n. Hey @mingyeow, did you find a way to make it work as you wanted?. Have you been able to solve this issue, @kanishkatn?\n. I prefer a guard. It wouldn't be optional if it could never fail.\n. But a guard does not do any harm in that case, either.\n. Should be possible, can you create a PR?. I suppose so, and then release a 7.something release for CP / Carthage. @ashfurrow, is this possible?. I guess that's not actually needed? Or should I add a improved header documentation in the Changelog?\n. A PR to update that would be great!\n. I'm not sure what the plans on this are, but a PR to update the branch would be great!\n. Also, there seems to be an issue that's tracking the progres. I am not sure how up-to-date it is, though. But it might be helpful.\n. Yeah, that makes sense. I'll add the need for a pod install to the readme for clarity.\n. @charlag because this is a PR to add support for Swift 2.3. We are currently using Swift 2.2, which also means using Xcode 7.3.1. We may need to change the CircleCI file though? (cc @ashfurrow @gustavogervasio)\n. Sorry if I wasn't clear - that's what I was trying to say. \nSwift 2.2 == Xcode 7\nSwift 2.3 == Xcode 8\nSwift 3.0 == Xcode 8\n. Thanks for the follow up!\n. I think you can omit the ? when casting (so, as instead of as?).\n. I have been taking a look, and it seems the error is not an optional. The unwrapping therefore makes no sense. Also, I found converting the error from Error to Moya.Error has no effect either, so that can be committed as well. That means you can the following in your closure:\nswift\nlet provider = MoyaProvider<MyService>()\nprovider.request(.CreateUser(firstName: \"James\", lastName: \"Potter\")) { result in\n  switch result {\n  case let .Success(response):\n    ()\n  case let .Failure(error):\n    switch error {\n    case .Data(let response):\n      print(response)\n    case .ImageMapping(let response):\n      print(response)\n    case .JSONMapping(let response):\n      print(response)\n    case .StatusCode(let response):\n      print(response)\n    case .StringMapping(let response):\n      print(response)\n    case .Underlying(let nsError):\n      // now can access NSError error.code or whatever\n      // e.g. NSURLErrorTimedOut or NSURLErrorNotConnectedToInternet\n      print(nsError.code)\n      print(nsError.domain)\n    }\n  }\n}\nwhich will 'just work'.\n. Maybe @leoneparise can help with this. And the Multipart still has to be documented (see #586)\n. What version of Moya are you using?\n. Yeah, that installs the latest version.\n. Yeah, the syntax for that is the following:\nruby\npod 'Moya', '~> 7.0.0'\n. Woo, nice!\n. I think a separate PR for docs and README is a great idea.\n. I too think that makes the most sense, yeah.\n. What exactly is your question?\n. Ref #620 \n. I have removed the API key, just to avoid tempering with it.\nNext time, you can just leave your issue open after editing its content / title :)\n. Also, I am not sure if this is an error. The response is empty, but maybe this is intended? What is the status code returned for the request?\n. What is unclear to you? We'd love to help!. Are you using Cocoapods or Carthage? Is the version number 7.0.2?\n. Is there a problem with Moya here, or the RxSwift branch? @gordoneliel \n. But does that not work? It should point to the / a Swift 3 branch of Rx of course.\n. Any idea @sunshinejr?\n. LGTM \ud83d\udc4d \n. Does that answer your question, @rlam3? :)\n. Specifically this comment makes for a great start for the documentation.. That\u2019s awesome, thanks so much @fbeeper! Feel free to open a pull request and we can go from there - I am sure it will be greatly appreciated. \nSent with GitHawk. Looking good!\n. I think you are still using Swift 2.2, correct? 7.0.2 is a Swift 2.3 release (in which URLByAppendingPathComponent is optional. :)\n. Use 7.0.0 on Swift 2.2 instead, upgrading to 7.0.2 once you switch to Swift 2.3 :)\n. I think you did a pod update before? I don't think pod install automatically downgrades to the specific pod version. You should be able to update to 7.0.0 again now, I think?\n. Fixed now? ^^\n. \ud83d\ude4c\n. Take a look at #627. Does that help? :)\nYou should be able to use the following:\nruby\npod \"Moya\", :git => \"https://github.com/Moya/Moya\", :branch => \"swift-3.0\"\n. Ah, of course. Sorry!\n. Is this issue still present in the latest release, @aphorisme?\n. @AndrewSB, any idea if this is still an issue?\n. Does @aamctustwo's answer solve your problem, @Henawey? Let us know it doesn't :)\n. What is your deployment target? It should be iOS 9 or higher. (See #639)\n. I'm not entirely sure, but you should only need the following in your Podfile:\nruby\npod \"Moya/RxSwift\", :git => \"https://github.com/Moya/Moya\", :branch => \"swift-3.0\"\nDoes that work?\n. It would also be useful to make users aware of syntax highlighting for code in these templates.\n. A PR template still has to / can be done maybe?\n. I don't see the need to add a PR template right now. If someone does, please reopen or submit a PR :)\n. Do we want to take this on for 8.0.0? This might be the best time to do so.. That does make sense, but I am not sure how to do that myself. @Moya/contributors, anyone that wants to take a stab at this?. Waiting for an official release of ReactiveSwift is about it, I think. . #805 has been merged. \ud83e\udd17. Let's hope so. \ud83d\ude00. Seems like there's now one issue still open for 1.0 there, but I bet it won't take too long anymore.. A PR to add this would be welcome!\n. What is you question exactly?\n. Does that answer your question, @12207480?\n. @wangguangfeng unfortunately, the Swift 3 branch has dropped support for iOS 8. For the reasoning behind this, see #639\n. This has been fixed in #661. @ashfurrow, could a second beta be released for this?\n. I suppose that changelog entry is not needed here. \ud83d\ude09 \n. YES! Thanks for this :)\n. Yes, I definitely think we should do this.\n. \ud83d\ude4c\n. Closing this now, then. :)\n. Thanks for noticing! I've fixed it now :)\n. Was just busy doing this, thank god I had a GitHub window open \ud83d\ude48\n. Was just busy doing this, thank god I had a GitHub window open \ud83d\ude48\n. No worries!\n. No worries!\n. @nanoxd, any idea?\n. @nanoxd, any idea?\n. Right, closing this in favor of #681.\n. Right, closing this in favor of #681.\n. @justinmakaila @ashfurrow, care to have a look?\n. @justinmakaila @ashfurrow, care to have a look?\n. Might take a look at this soon. :). Might take a look at this soon. :). Hmm, just started \"fresh\" on this, but Xcode is complaining when moving the Tests directory into the root.\n\n\n\n\nNot sure how to proceed :/. Hmm, just started \"fresh\" on this, but Xcode is complaining when moving the Tests directory into the root.\n\n\n\n\nNot sure how to proceed :/. \ud83d\udc4d. This seems like a great addition! Would you be able to submit a PR implementing this, @jeryRazakarison?\n. Adding documentation for this change is definitely appreciated! \ud83d\ude03 \n. What is your Podfile like?\n. Sounds good!\n. I think that's a good idea - I don't see it doing any harm, anyway \ud83d\ude03 \n. Reworded and fixed some typos; LGTM otherwise! Thanks for adding this :)\n. What do you mean? I am not sure I understand your question.\n. If you look closely at @MoyaBot's message, you can see it is generated by Danger. :)\n. Not sure, but shouldn't the .Custom be .custom?\n. @Ernest-su, what do you mean? Is this a possible bug? If you can create an issue for that, that'd be greatly appreciated!. Closing in favor of #759\n. We should also consider changing .neverStub and friends to exclude the Stub part, making it .never. Does that make sense to do?\n. That's what I was wondering. In context .never makes sense, but out of context it doesn't.\n. Yeah, I think that's overkill. Let's just leave it like this for now.\n. Same failure occurred in #731, it seems. \n. Hey @tuyendv2, have you ever found a solution for this? Would love to add it to our documentation. :). The closure is called with a Result, which is one type. You are now referring to two (endpoint and done)\n. Does @fjcaetano's answer solve your problem, @ohohco? Let us know it doesn't :)\n. Does @WildDylan's answer solve your problem, @wenzhaot? Let us know it doesn't :)\n. Hmm, I've always been using the ~> syntax with pods, as per the guides. Anybody knows the difference? Should we update the README? @Moya/contributors \n. Does @haydarKarkin's answer solve your problem, @zeew? Let us know it doesn't :)\n. Closing this for now. Let us know if you still have any questions, @rlam3 :). Could you create a PR with the improvements you proposed? No pressure, I could look into doing that as well. \ud83d\udc4d\n. Not sure if we want to use a \"better\" workaround, but I saw there is this now: https://discuss.circleci.com/t/multiple-ios-simulators-available-for-single-os-device-configurations/7854/13\n\nFor now you can add this to your dependencies step in your circle.yml:\ndependencies:\n  pre:\n    - snapshot reset_simulators. Not sure if we want to use a \"better\" workaround, but I saw there is this now: https://discuss.circleci.com/t/multiple-ios-simulators-available-for-single-os-device-configurations/7854/13\nFor now you can add this to your dependencies step in your circle.yml:\ndependencies:\n  pre:\n    - snapshot reset_simulators. Not sure if this needs a comment explaining what this is needed for?\n. Not sure if this needs a comment explaining what this is needed for?\n. I think you're right - the documentation on the type should be enough.\n. I think you're right - the documentation on the type should be enough.\n. ReactiveSwift seems to be really close to their 1.0 release, as they have pushed their first release candidate! \ud83c\udf89\n\nIs there anything we should tackle ourselves for 8.0.0 still? @Moya/contributors . FYI, this has been resolved in #835 :). And a SwiftLint sweep, apparently. \ud83d\ude01. Ah, missed that @pedrovereza. Nice work @sunshinejr :). About the docs: do we want to include this in Advanced.md or in Providers.md? Not sure where it fits best.. Did you mean to make a separate issue for this? (#700)\n. Did you mean to make a separate issue for this? (#700)\n. Cool, makes sense!\n. Cool, makes sense!\n. We could include an example in the example app maybe? Also, we've been considering an Advanced.md file, maybe it would fit there?\n. We could include an example in the example app maybe? Also, we've been considering an Advanced.md file, maybe it would fit there?\n. Yes, that'd be awesome!\n. Yes, that'd be awesome!\n. Thanks @jeryRazakarison! \ud83d\ude00\n. Thanks @jeryRazakarison! \ud83d\ude00\n. @Moya/contributors, can anybody reproduce this bug? Might be good to take a look at this for 8.0.0.. As this seems to be an Alamofire issue, I'll close this for now. Please reopen if not!. Oh no, seems like all of these have been commited incrementally... ( #773, #774, #775, #776, #777 )\nAny idea how I can fix this?\n. Yeah, I saw that. Let me take a look.\n. Ah, it seems like in this few changes, I did not yet change Cancellable's cancelled to isCancelled yet.\n. Added the bool renaming to the CHANGELOG in d77c261.\n. Done, thanks a lot! \ud83d\ude4c\n. Thanks @bchrobot! \ud83d\ude4c. Due to the dependencies not being included in this repository, I am not sure if this is possible at this moment. Do we want to support this, @ashfurrow?. I think you're missing out on all Alamofire code in that case, which would mean that doesn't work? I think you'd have to manually copy Alamofire's code as well. . Hmm, and it seems like we need to add Result as well.\n... and then it still doesn't work. Removed all import Results, then Xcode started complaining about all Moya.-files, which makes sense. Seems like we're going to have a little more work to make this possible.\n. It seems like Alamofire's approach (git submodule) might work (?).. Yay, got it working using git submodules. Let me add a how-to to the readme. :). Does that solve your question, @Ernest-su?. Unfortunately, I don't know either. :/. Take a look at #639. As Alamofire seems to have lowered their target to 8.0, we can take another look if the other dependencies did so as well, but that was our reason to drop iOS 8 support. \n. Cool! What do you think, @ashfurrow? Seems like we can lower it again.\n. Let's keep this open to make sure we won't forget. :)\n. Does that solve your issue, @ohohco?. So you want to fetch multiple \"pages\" at once? Most of the time, paging in an API is added to prevent sending too much information at once. I think what you would be trying to do is something that might not be the ideal solution.\nThat being said, I think \"chaining\" the requests like you are doing here should be a solution that works just fine.. Yep, most endpoints probably use .request.. The Changelog seems to not be completely correct right now either. I see beta 5 duplicated.. Updated the previous releases to show the changes from Changelog.md. Is this something we might want to automate too?. I think you still needed to manually add the release notes from the changelog, right @AvdLee?. @tspecht, have you been able to solve your issue with the answers given? Let us know if you have any more questions!. You are right. :). Because we use 4.1.0 via CocoaPods as well. We might be able to up this to 4.2.0, but let's bump it to 4.1.0 for now to keep them in sync.. Hmm, do we want to update both CocoaPods and Carthage to Alamofire 4.2.0? Now I've locked Carthage to 4.1.0, but not really for a reason. This might be confusing in the future? Let me create a new PR for that.. Closing in favor of #799. What is your question exactly? What doesn't work? If using CocoaPods, please post your Podfile. :). \ud83d\ude4c. The URL parameter should be url. . ^ I've updated the documentation to reflect that in #804. Sorry!. How does this increase the coverage? \ud83e\udd14. If anyone wants / has an idea on how to take this, please do!\n\nI was thinking we could include it as two subspecs, and deprecate the old one in favour of the new. To avoid repeating ourselves in the podspec, we can have the old deprecated subspec simply have a dependency on the new one. Does that make sense?. Could we simply do this? Without needing the ss.source_files?\n\ns.subspec \"ReactiveCocoa\" do |ss|\n    ss.dependency \"Moya/ReactiveSwift\"\nend. The current podspec seems to work. Did what I thought would work. Can anyone confirm? pod lib lint runs fine (although it takes a really long time \ud83d\ude2e). Done. \ud83d\udc4d. Codecov, please. \ud83d\ude4c. On the error: am I right you are expecting the error's response data to be in the NSError's userInfo? I think that would make sense to do.. Would definitely do the renaming in another PR, yeah.. Hmm, should we also create some tests around pluginsWithCompletion? Not really sure where to start on that myself.. The tests are located in the Demo app, located here. :-). Ah, I see we can use #trivial in the PR title to prevent this. Neat!. The casting does fail, as Data can't be cast to [AnyHashable: Any].\nI've made a gist, does that clarify? https://gist.github.com/BasThomas/0f894d610f7f24732077fa961a6fc182. So, does that solve the issue for you? :). I am going to close this issue as it is not related to Moya.\nThe problem again is casting. You are trying to cast Any to Data here, which is not possible.\nWhat you can do to solve this is the following:\n\nCreate Data from your Any response with the JSONSerialization(withJSONObject:) function.\nCreate a JSONObject / [AnyHashable: Any] by using JSONSerialization(withData:) on the data you just received.. Hmm, would this be a breaking change? I agree this would definitely be nice, but I am not so sure if we need it before releasing 8.0.0. . Closing this as all this work has been done in #824 and #825 (and these have both been merged) \ud83d\udc4d . Totally unrelated, by why is the testing class for the NetworkLoggerPlugin called NetworkLogginPluginSpec? Seems like a pretty strange typo \ud83d\ude2c. Or am I missing something there?. Was actually referring to the Loggin part. ;). Sure, will do!. Should be good to go! Thanks @pedrovereza \ud83d\ude4c. Hmm, not sure about the renaming of filterStatusCodes(:) to filterStatusCodes(in:) quite sure myself, to be honest. I think filterStatusCodes(0...9) reads nicer than filterStatusCodes(in: 0...9). Reading the first as \"filter status codes zero through nine\", which seems more readable. Thoughts? Esp. because this will probably not be called (much) like filterStatusCodes(in: range) where range is predefined.. @jaymutzafi: please check if this works for you, and let me know if you have any questions / improvements!. Was considering that. And then make it \"compatible\" with all three frameworks? (As Alamofire needs just Alamofire, and we need Alamofire, Result & Moya itself). Updated them. If someone could try this and provide feedback, that'd be awesome!. Seems like the same problem as #760, but that hasn't been identified yet. :/. When I run it with an empty project, I get the following result:\n\n```bash\nbas$ carthage update\n Cloning Moya\n Cloning ReactiveCocoa\n Fetching RxSwift\n Fetching Alamofire\n Fetching Result\n Checking out Alamofire at \"3.5.1\"\n Checking out Result at \"2.1.3\"\n Checking out ReactiveCocoa at \"v4.2.2\"\n Checking out RxSwift at \"2.6.1\"\n Checking out Moya at \"7.0.4\"\n xcodebuild output can be found in /var/folders/ys/z545gl_90v7918jxtvv_2dzm0000gn/T/carthage-xcodebuild.u1E6C9.log\n Building scheme \"Alamofire tvOS\" in Alamofire.xcworkspace\n Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\n Building scheme \"Alamofire watchOS\" in Alamofire.xcworkspace\n Building scheme \"Alamofire OSX\" in Alamofire.xcworkspace\n Building scheme \"Result-Mac\" in Result.xcodeproj\n Building scheme \"Result-watchOS\" in Result.xcodeproj\n Building scheme \"Result-iOS\" in Result.xcodeproj\n Building scheme \"Result-tvOS\" in Result.xcodeproj\n Building scheme \"ReactiveCocoa-Mac\" in ReactiveCocoa.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.xcworkspace'.\n Building scheme \"ReactiveCocoa-tvOS\" in ReactiveCocoa.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.xcworkspace'.\n Building scheme \"ReactiveCocoa-watchOS\" in ReactiveCocoa.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.xcworkspace'.\n Building scheme \"ReactiveCocoa-iOS\" in ReactiveCocoa.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa.xcworkspace'.\n Building scheme \"RxBlocking-OSX\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxBlocking-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxBlocking-watchOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxCocoa-OSX\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxCocoa-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxSwift-tvOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxSwift-watchOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxTests-OSX\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxCocoa-watchOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxSwift-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxTests-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxCocoa-tvOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxBlocking-tvOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxSwift-OSX\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxTests-tvOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n Building scheme \"RxMoya watchOS\" in Moya.xcodeproj\n Building scheme \"ReactiveMoya watchOS\" in Moya.xcodeproj\n Building scheme \"Moya watchOS\" in Moya.xcodeproj\n Building scheme \"ReactiveMoya iOS\" in Moya.xcodeproj\n Building scheme \"Moya iOS\" in Moya.xcodeproj\n Building scheme \"RxMoya tvOS\" in Moya.xcodeproj\n Building scheme \"RxMoya iOS\" in Moya.xcodeproj\n Building scheme \"RxMoya OSX\" in Moya.xcodeproj\n BUILD FAILED \nThe following build commands failed:\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Error.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Image.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Plugins/NetworkActivityPlugin.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Response.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Endpoint.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Plugins/CredentialsPlugin.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Plugins/NetworkLoggerPlugin.swift\n    CompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler\n(9 failures)\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveCocoa/ReactiveCocoa/Swift/SignalProducer.swift:1945:69: warning: 'buffer' is deprecated: Use properties instead. 'buffer' will be removed in RAC 5.0\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift:2:8: error: module file's minimum deployment target is OS X v10.10: /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Carthage/Build/Mac/RxSwift.framework/Modules/RxSwift.swiftmodule/x86_64.swiftmodule\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift:2:8: error: module file's minimum deployment target is OS X v10.10: /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Carthage/Build/Mac/RxSwift.framework/Modules/RxSwift.swiftmodule/x86_64.swiftmodule\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift:2:8: error: module file's minimum deployment target is OS X v10.10: /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Carthage/Build/Mac/RxSwift.framework/Modules/RxSwift.swiftmodule/x86_64.swiftmodule\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift:2:8: error: module file's minimum deployment target is OS X v10.10: /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Carthage/Build/Mac/RxSwift.framework/Modules/RxSwift.swiftmodule/x86_64.swiftmodule\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift:2:8: error: module file's minimum deployment target is OS X v10.10: /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Carthage/Build/Mac/RxSwift.framework/Modules/RxSwift.swiftmodule/x86_64.swiftmodule\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift:2:8: error: module file's minimum deployment target is OS X v10.10: /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Carthage/Build/Mac/RxSwift.framework/Modules/RxSwift.swiftmodule/x86_64.swiftmodule\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift:2:8: error: module file's minimum deployment target is OS X v10.10: /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Carthage/Build/Mac/RxSwift.framework/Modules/RxSwift.swiftmodule/x86_64.swiftmodule\n/Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift:2:8: error: module file's minimum deployment target is OS X v10.10: /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Carthage/Build/Mac/RxSwift.framework/Modules/RxSwift.swiftmodule/x86_64.swiftmodule\nA shell task (/usr/bin/xcrun xcodebuild -project /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme \"RxMoya OSX\" -configuration Release ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES clean build) failed with exit code 65:\n BUILD FAILED \nThe following build commands failed:\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Error.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/RxSwift/Moya+RxSwift.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Image.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Plugins/NetworkActivityPlugin.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Response.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Endpoint.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Plugins/CredentialsPlugin.swift\n    CompileSwift normal x86_64 /Users/bas/Documents/iOS/Test/Carthage/Checkouts/Moya/Source/Plugins/NetworkLoggerPlugin.swift\n    CompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler\n(9 failures)\n```\n(Also, my gosh, that took forever)\nCartfile:\ngithub \"Moya/Moya\"\nCartfile.resolved:\ngithub \"Alamofire/Alamofire\" \"3.5.1\"\ngithub \"antitypical/Result\" \"2.1.3\"\ngithub \"ReactiveX/RxSwift\" \"2.6.1\"\ngithub \"ReactiveCocoa/ReactiveCocoa\" \"v4.2.2\"\ngithub \"Moya/Moya\" \"7.0.4\"\nThe failing here makes sense, as Carthage can't resolve beta tags, and it fetched a Swift 2 release.\nTesting with github \"Moya/Moya\" >= 8.0 now.. With Cartfile\ngithub \"Moya/Moya\" >= 8.0\nand Cartfile.resolved:\ngithub \"Alamofire/Alamofire\" \"4.2.0\"\ngithub \"antitypical/Result\" \"3.1.0\"\ngithub \"ReactiveX/RxSwift\" \"3.0.1\"\ngithub \"ReactiveCocoa/ReactiveSwift\" \"1.0.0-alpha.3\"\ngithub \"Moya/Moya\" \"8.0.0-beta.5\"\n... it seems to just work. Not sure what's happening \ud83d\ude15\nOutput, for reference:\nbash\nbas$ carthage update\n*** Fetching Moya\n*** Fetching RxSwift\n*** Fetching Alamofire\n*** Fetching Result\n*** Checking out Alamofire at \"4.2.0\"\n*** Checking out Result at \"3.1.0\"\n*** Checking out ReactiveSwift at \"1.0.0-alpha.3\"\n*** Downloading RxSwift.framework binary at \"Graham\"\n*** Checking out Moya at \"8.0.0-beta.5\"\n*** xcodebuild output can be found in /var/folders/ys/z545gl_90v7918jxtvv_2dzm0000gn/T/carthage-xcodebuild.5A09ae.log\n*** Building scheme \"Alamofire macOS\" in Alamofire.xcworkspace\n*** Building scheme \"Alamofire tvOS\" in Alamofire.xcworkspace\n*** Building scheme \"Alamofire watchOS\" in Alamofire.xcworkspace\n*** Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\n*** Building scheme \"Result-Mac\" in Result.xcodeproj\n*** Building scheme \"Result-watchOS\" in Result.xcodeproj\n*** Building scheme \"Result-tvOS\" in Result.xcodeproj\n*** Building scheme \"Result-iOS\" in Result.xcodeproj\n*** Building scheme \"ReactiveSwift-macOS\" in ReactiveSwift.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n*** Building scheme \"ReactiveSwift-tvOS\" in ReactiveSwift.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n*** Building scheme \"ReactiveSwift-watchOS\" in ReactiveSwift.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n*** Building scheme \"ReactiveSwift-iOS\" in ReactiveSwift.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/bas/Documents/iOS/Test/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n*** Building scheme \"ReactiveMoya iOS\" in Moya.xcodeproj\n*** Building scheme \"RxMoya OSX\" in Moya.xcodeproj\n*** Building scheme \"RxMoya iOS\" in Moya.xcodeproj\n*** Building scheme \"RxMoya tvOS\" in Moya.xcodeproj\n*** Building scheme \"ReactiveMoya watchOS\" in Moya.xcodeproj\n*** Building scheme \"RxMoya watchOS\" in Moya.xcodeproj\n*** Building scheme \"Moya tvOS\" in Moya.xcodeproj\n*** Building scheme \"Moya watchOS\" in Moya.xcodeproj\n*** Building scheme \"Moya OSX\" in Moya.xcodeproj\n*** Building scheme \"Moya iOS\" in Moya.xcodeproj\n*** Building scheme \"ReactiveMoya tvOS\" in Moya.xcodeproj\n*** Building scheme \"ReactiveMoya OSX\" in Moya.xcodeproj. What do you mean exactly?. What do you mean exactly?. Just saw that in the NetworkLoggerPlugin, there a non is-bool (verbose) that should be updated. Let's do that in a separate PR. -> #841 . Hmm... (cc @pedrovereza)\n```bash\nDownloading CocoaPods master repo from cocoapods-specs S3 bucket...\nUncompressing CocoaPods master repo...\nmaster/.git/objects/pack/pack-35326da53152e3c953d14b6383803365213400d7.pack: gzip decompression failed\ntar: Error exit delayed from previous errors.\nDownload from S3 failed, cleaning up and falling back to standard checkout...\ncurl -sS https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash returned exit code 1\nAction failed: curl -sS https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash\n```\nLet me rebuild.. Hmm, interesting. I am not sure. Should we use verbose in the initializer, but leaving it isVerbose internally? Does that make sense? Then again, you can get the \"verbosity status\" as it is a pubic Bool. \ud83e\udd14. Why are these (read: cURL and isVerbose) public anyway? They are lets, and always configured in the init. Is there a reason they should be accessible?. Agreed \ud83d\udc4d. Changed the constructor back to use verbose instead of isVerbose. @Moya/contributors, any idea as to this?\n\nWhy are these (read: cURL and isVerbose) public anyway? They are lets, and always configured in the init. Is there a reason they should be accessible?\n\nIf that's cleared up this should be good to go.. Yep, great! There's not really a problem keeping them public, so let's keep it this way. \ud83d\udc4d. Yay Danger! :D. Strange; I don't think I have run into any issues myself doing this. \ud83e\udd14. Thanks for providing all the details. You could try adding the NetworkLogger plugin to see if that reports anything.\nAlso, which version of Moya are you using?. Although I am not aware of anything that might fix this particular issue, please give it a go :). Hey @jonlambert, Moya-SwiftyJSONMapper has been updated for beta.6. Could you try with that version and see if that makes a difference?. Hmm, I see your API.swift file uses POST instead of GET, might that cause the issue?. Hmm, don't see anything that'd cause it, then. @Moya/contributors, any ideas?. Agree, that's much better.. You can take a look at #834 to get started, maybe?. Hey, I already updated dependencies in #842, which has yet to be merged. Might be better to update that (rc.1 to rc.2) and update everything at once? :). Closing this, then. :). I agree with @AvdLee. Maybe @sunshinejr knows about any intended work on the former?. I was thinking... should we default everything for TargetType as well, or just for your suggested SingleURLTarget? I think the latter might be better.\nAlso, a separate PR for the documentation for TargetType would also definitely welcome!. While we are talking about this: we might want to consider removing the defaults already in place at this moment and add the (much) needed (?) documentation for all the options, like was done in this PR, to the options.. I think it's the \"Any changes to library code need a summary in the Changelog.\" maybe?. #859 already adds parameterEncoding defaulting to JSONEncoding. Which version of Moya are you using?. Ah right, @scottrhoyt's change has not had a new release yet. Do you think that solves your problem or would your number 3 still be something you'd really like to see?. Alright, I am going to close this issue then. @EvilNOP, if you feel like something else should still be addressed, feel free to reopen!. Closing this now then, let us know if you encounter any issues!. \ud83c\udf89\ud83c\udf89\ud83c\udf89\ud83c\udf89. I don't really think a changelog entry is needed for a refactor. :). Hmm, added #trivial in this case just to make Danger happy. Oh well.. Hmm, how does this close #819 exactly? I don't think I understand; although bear in mind I'm not that familiar with Rx.. Hmm, right. Not entirely sure what OP's issue was then; let us just close it, and we can reopen if needed. . FWIW, I can't really think of a better function name. About the assert(): I think this is the best option here.. > I'm also not sure if this will just hang a CI build or crash the test and cause it to fail.\n... but we should definitely test this before doing so.. Hmm, does sampleResponse(forFileNamed:) make sense for the function name?. I think the least we can do here (especially since I think @justinmakaila makes a fair point), is to include this snippet in the docs. Just as we did with some of the String extensions. This then is also a reference point for future issues. :). Oh, didn't notice those were missing too. Just saw the GitHub one and fixed it within GitHub. \ud83d\ude48\nTeamwork. \ud83d\ude4c. As we've seen with Result, I think it might not be a bad idea to go ahead with this and prevent namespacing issues, as well as making room for the use of more than one \"Error type\".. Yeah, I suppose we can add some trivial tests to bump the percentage, although, like I said, it's pretty trivial. \ud83e\udd37\u200d\u2642\ufe0f. FWIW, check out https://github.com/antitypical/Result/issues/77 for the Result error. Although you're specifying Moya here, I think it might still be a failed lookup between Result and Alamofire's Result type. \ud83e\udd14. @ashfurrow mentioned that might be a Danger bug. . I remember @scottrhoyt saying somewhere he thought it wasn't needed; can't seem to find it now though.. I've deleted the branch; please restore if needed!. Or maybe just one more thing... should we add unavailable markers for the functions and variables we've changed to ease transition? I suppose we're a little late with it, but now we still can...\nAs Carthage has done, it might be a good idea to put all of these in a Availability.swift file.. I think we should be good to go releasing 8.0.0. Most if not all breaking changes have been implemented, and we've been in beta for a long time as well.. Could only really find this small post: http://www.mokacoding.com/blog/swift-unavailable-how-to/. Although I think Carthage is a good example as to what it can do.. And Apple has a page that explains it quite well, too: https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html#//apple_ref/doc/uid/TP40014097-CH35-ID347. \n. I'll take a stab at this later today. I think it's worth it.. I've opened #890.. Yep. \ud83d\ude07. I encountered the following error trying to release, any idea as to what that could have been?\n```bash\nbas-imac:Moya bas$ rake release[\"8.0.0\"] --trace\n Invoke release (first_time)\n Execute release\nUpdating podspec.\nUpdating Demo project.\nbundle exec pod update Moya\nUpdating local specs repositories\nCocoaPods 1.2.0.beta.3 is available.\nTo update use: sudo gem install cocoapods --pre\n[!] This is a test version we'd love you to try.\nFor more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0.beta.3\nAnalyzing dependencies\nFetching podspec for Moya from ../\nDownloading dependencies\nUsing Alamofire (4.2.0)\nUsing Moya (8.0.0-beta.6)\nUsing ReactiveSwift (1.0.0)\nUsing Result (3.1.0)\nUsing RxSwift (3.1.0)\nGenerating Pods project\nrake aborted!\nCommand failed with status (): [bundle exec pod update Moya...]\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/file_utils.rb:66:in block in create_shell_runner'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/file_utils.rb:57:incall'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/file_utils.rb:57:in sh'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/file_utils_ext.rb:37:insh'\n/Users/bas/Documents/Programming/iOS/Moya/Rakefile:166:in block (2 levels) in <top (required)>'\n/Users/bas/Documents/Programming/iOS/Moya/Rakefile:164:inchdir'\n/Users/bas/Documents/Programming/iOS/Moya/Rakefile:164:in block in <top (required)>'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/task.rb:240:incall'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/task.rb:240:in block in execute'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/task.rb:235:ineach'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/task.rb:235:in execute'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/task.rb:179:inblock in invoke_with_call_chain'\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/monitor.rb:211:in mon_synchronize'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/task.rb:172:ininvoke_with_call_chain'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/task.rb:165:in invoke'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:150:ininvoke_task'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:106:in block (2 levels) in top_level'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:106:ineach'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:106:in block in top_level'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:115:inrun_with_threads'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:100:in top_level'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:78:inblock in run'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:176:in standard_exception_handling'\n/Library/Ruby/Gems/2.0.0/gems/rake-10.4.2/lib/rake/application.rb:75:inrun'\n/usr/bin/rake:37:in <main>'\nTasks: TOP => release\n```. I'm going to close this issue. Thanks everyone for making this an awesome release! \ud83c\udf89\ud83d\ude4c. I think, especially since we did #890, a migration guide isn't really needed? All documentation has been updated as well. What would we add to the migration guide? The availability tags seem to be *the* migration guide.. And yes, I am glad I did so too. Besides, that was relatively low effort and high reward. What's not to love?!. Hmm, I think we can best link people to [the docs](https://github.com/Moya/Moya/blob/master/docs/Targets.md) if any issues will be opened, or work it out from the specific issues. :). But we **do** [use it](https://github.com/Moya/Moya/blob/ea331f79c534db1334b93b0d5526bfeb5227a6d1/Source/ReactiveSwift/ReactiveSwiftMoyaProvider.swift#L8), and it should not be unavailable, right?. And if we do leave them commented out, I'd like to add an explanation for that before merging.. It would also be **awesome** if somebody could test this (by converting a pre-8.0.0 project to this branch.. Hmm, I suppose we can just fixpublic func filterStatusCodes(range: ClosedInterval) throws -> Response has a 'ClosedInterval' has been renamed to 'ClosedRange' error.by changingClosedIntervaltoClosedRange, as the compiler will see that error first (probably?) and the signatures then match.. Been able to fix the two remaining functions as well. ImportedReactiveSwift` et voil\u00e0.\nIf someone could help me squashing these commits, please let me know. Think it can use some cleanup, but I am not sure how to proceed myself.. Welp, CI is failing. @scottrhoyt @AndrewSB any idea why the files can't be found?. I get the same error building just the framework locally, using the Demo.xcworkspace works fine.. If you could do so, please go ahead. I'd probably have closed this and started with a clean slate at this point, especially because there's only one file change. \ud83d\ude48\n@Demo.xcworkspace: thought as much.. Yes, looks good!. Thanks for the help @scottrhoyt! I think this should be good to go now. . Oh, one more thing: we might want to move the Moya.Error unavailability tag to the MoyaAvailability.swift file instead of letting it \"linger\" in MoyaErrror.swift.. Can someone review and merge? Also, I think we can release 8.0.0 once merged! \ud83c\udf89. Or we could just keep them. We'll see. :). We might want to unify the header docs at one point just for consistency (only /// or your approach with /**), but lets leave that for another time.. You might have to use - parameter name: name does thing per parameter with ///: see http://ericasadun.com/2015/06/14/swift-header-documentation-in-xcode-7/.. I agree, but I think I like /// above /**. \ud83d\ude1b . Hmm, we might want to add a Danger rule to keep CP+Carthage+SPM in sync (as we did in #808).. Hmm, this means we should use:\ngithub \"Moya/Moya\"\nfor Moya,\ngithub \"Moya/Moya\"\ngithub \"Moya/RxMoya\"\nfor RxMoya, and\ngithub \"Moya/Moya\"\ngithub \"Moya/ReactiveMoya\"\n.. right? If that's the case, we might want to add these examples as we did with CocoaPods, to make it even more clear.. I am open for providing multiple repo's to make the users' lives easier. I think SPM will still take a while to catch on, and in the meantime, I think we should consider this. Would gladly join a call to discuss the implications.. Any idea what's up with CI failing? It seems like the identifiers for the simulators have changed?. References #914. Possibly ref #911 . #911 might provide some insight.. ruby\npod 'Moya', :git => 'https://github.com/Moya/Moya.git', :branch => 'master'. Yeah, seems like a good idea. \ud83d\udc4d. Good question! Take a look at this community extension, which helps you map your responses to objects using ObjectMapper.\nWhat seems to go wrong now, is that you're mapping the request immediately, instead of the response.\nswift\nprovider.request(.bible).mapObjectOptional(type: Dates.self).subscribe { event in\n  switch event {\n    case let .next(response):\n      // do something with the response\n    case let .error(error):\n      // do something with the error\n  }\n}\nInstead, you'd probably want something like:\nswift\nprovider.request(.bible).subscribe { event in\n  switch event {\n    case let .next(response):\n      let dates = response.mapObjectOptional(type: Dates.self)\n    case let .error(error):\n      // do something with the error\n  }\n}. Two tests seem to be failing:\na_subsclassed_reactive_provider_that_tracks_cancellation_with_delayed_stubs__cancels_network_request_when_subscription_is_cancelled, expected to be true, got <false>\nprovider_with_SignalProducer__a_subsclassed_reactive_provider_that_tracks_cancellation_with_delayed_stubs__cancels_network_request_when_subscription_is_cancelled, expected to be true, got <false>. Nice! \ud83d\ude4c. Let's see if we can update our dependencies.. It would actually be really nice to have some sort of dependency update check somewhere to keep us up to date. What do you think, @Moya/contributors? Should I create a separate issue?. Or we should do what @sunshinejr suggested, using just ~> 3.0 and ~> 4.0 respectively. Not sure what is the best option here.. We should also release a new version once this has been merged.. Yeah. That's not very useful. Let me update.. Good point @bjarkehs; we actually rely on Alamofire 4.1 (https://github.com/Moya/Moya/pull/797). It's pretty ironic we're saying this in the README:\n\nFor Moya, use the following entry in your Podfile:\nruby\npod 'Moya', '8.0.2'\n\nInstead of \nruby\npod 'Moya', '~> 8.0'\n\ud83d\ude1c. Now we're at it, how do the Reactive extensions work with SwiftPM?. Yeah, that might be even better. Does SwiftPM work like that as well?. It seems like we need to at least provide a majorVersion there.. Heads-up in the meantime - you can highlight the syntax in the code snippets with ``swift at the start. :). This is true indeed; Swift 3.1 should be source compatible with 3.0.. This fix has not been included in a release yet, right @scottrhoyt?. We should add Result to SwiftPM as well. . The right signature for that function isadding(newHTTPHeaderFields)`, wherein \"HTTP\" is fully capitalized. It was recently changed and it seems we forgot to update the documentation.  Could you make a PR to change the docs?\nIf not, don't worry - we'll get on it. . I also really like .rx and .reactive!. You beat me to it, @bjarkehs. \ud83d\ude05. \ud83e\udd14, 7.0.4 actually targets Swift 2.3. I think the documentation over at https://github.com/Moya/Moya/tree/7.0.1 is better for Swift 2.2.. Go ahead and update to Swift 3. You won't regret it. In the meantime, you could of course use an older version of the Object Mapper as well, such as v1.0.5 of the SwiftyJSONMapper?. Maybe @scottrhoyt can help you with this one. . FWIW, I think in this case it should definitely be corrected to also include data in Moya, and we should consider releasing a 9.0 for it. What would be the downsides of doing it this quick after 8.0?. \ud83d\udc4d great idea . I think I misunderstood the instructions and made an error here. Thanks for fixing this, @Lutzifer! \ud83d\ude4c. Yes, I think this would be awesome! Would you mind looking into that @AndrewSB? Let me know if I can help out.. Let\u2019s maybe create another ticket for that? \ud83d\udc4d\nSent with GitHawk. What are you referring to exactly? Where do you get an error?. Also, which dependency manager are you using?. @scottrhoyt, in the branch / PR, this has already been done, right? https://github.com/gperdomor/Moya/blob/1ac84d7387703d552f51ac41e9d0c7c16cb577c2/Sources/Moya/MoyaError.swift#L32\nNot sure why you are referring to the main repo?. We should also not forget to update the docs to reflect this change, although I think we can do so in another PR. . I would think this concerns ca5c9fed3a6ad4bb8be9a5d882bb202782910ac1, right @justinmakaila?. Yeah, if we can do releases via @moyabot, that'd be awesome!. Does anyone have an idea on how to revert the accidental push? I think that would be good to figure out as well.. Yeah, I didn't notice any file changes in the project itself, so it should be fine.. Can you share your code where this is happening?. Solved in #1002 . @pedrovereza, is it intentionally a tag and not a release?. Feel free to take a stab at implementing this! Would this be a breaking change or would/should it coexist with the Observable-implementation?. Wow, that was a conflict GitHub wanted to resolve on this PR. Didn't mean to do that... \ud83d\ude14. Thanks @pedrovereza!. This is breaking and should go in 9.0.0 and not master, right?. Also, some Cocoapods package versions don't match up with Cartfile anymore.. Thanks for fixing this, @pedrovereza. This looks good.. Yeah, I guess that wouldn't hurt.. I went ahead and added it.. Ugh, that Swiftlint issue... what's their reasoning behind that? I think let _ = is better than != nil. Thoughts?. \ud83e\udd14. I think both are equally obvious, and like let _ = for looking cleaner (imho).. Let's deal with it later. Don't think its that important right now. FWIW, the Swiftlint rule is unused_optional_binding.. Once again thanks for fixing the merging issues @pedrovereza! \ud83c\udf89. Would you like the user of your app to retry the request? You can show an alert for them to do so yourself when a request has failed.. You should be able to use Reactive / Rx just for the retrying part, no need to use it in your app as a whole. :). Yes, that's possible! Have a look at the providers docs:\n\nThat's it! The request() method returns a Cancellable, which has only one public function, cancel(), which you can use to cancel the request.. Unfortunately, I don't know.. Can you please post your Podfile and its dependency graph?. What if you only add pod Moya, removing Alamofire? Alamofire is included with Moya. And what is your deployment target in Xcode?. Can you give us a code example?. @Moya/contributors, can anyone take a look at this? Might this be a bug with our Reactive implementation?. What does this do over #967?. Nice, thanks @LarsJK!. If you initialize your NetworkLoggerPlugin, its cURL flag is set to false by default. Initializing it like NetworkLoggerPlugin(cURL: true), willSendRequest should print the cURL. Does that help?. Yeah - I think this changed? I've been seeing this in a couple of repositories over the last week. Thanks though!. I'll see if I can help out anywhere. Exit code 65 doesn't make me happy, though. :(. Seems like Alamofire does give us an HTTPURLResponse. \ud83d\ude03 https://github.com/Moya/Moya/blob/master/Sources/Moya/MoyaProvider.swift#L147. As it has been implemented, yep!\n\nThanks again :). Maybe a stupid question, but how do I run the tests from Xcode now? Can't seem to do so from the Demo project, and opening the framework's xcodeproj complains of Alamofire missing (which makes sense, right?). Also, though this should probably be tackled in another PR, updating the dependencies causes a bunch of warnings in the Demo project.. @AndrewSB: Ah, but that is then complaining of Alamofire not being there. Which gives me an error, and cancels the tests.. \ud83d\ude4c\ud83d\udc4f great teamwork, thanks for the fix!. Nice! That was easy. Can you add this to the Changelog as well?\nBy the way, thanks for the really clear description. Greatly appreciated! :). \ud83e\udd14, you should change the initializer as well, I think.. Why are we targeting this at 9.0.0, actually? Is this breaking in any way? @AndrewSB @juliengdt. Well, it seems like it is a breaking change (see failed tests). Could you update them as well, @juliengdt?. It technically is breaking though, is it not? The Response class is not private and can be instantiated by the user (just like we did in the tests).. No worries @haritowa - take your time. \ud83d\ude03 . Can you run it on a simulator? If you can, can you check if other projects run on your iPhone?. Wouldn't this be a breaking change?. Yes, it's a bugfix, but the \"buggy\" behavior may be (?) expected. And if that would be the case, this would change that expectation.. Sure, let's treat this as a bugfix then. \ud83d\ude03. Yes, I think callbackQueue is a better name. It takes away any ambiguity.\n@haritowa, do you think we can improve the queue parameter in the request method as well?. What do you think is a better option?. But those are not parameters, right? That's just the URL.. I think you can use JSONEncoding for your parameters in that case, yep!. \ud83e\udd14, I remember that we actually didn't want to implemented / default this ourselves.. This would be awesome, thanks for looking in to this, @AndrewSB!. No worries, take your time Ash :). I really like this - though looking at fastlane-bot's repository, I have no idea how it would work implementing it. Does anybody have an idea, or should we go ahead and file an issue there?. Sure, this would be really nice! Re: MoyaBot: I think you should ping @ashfurrow to ask if that's possible. :). Awesome! \ud83d\udc4a. The API has an \"updated_at\" for issues. This might (?) be updated when a label changes? I'm not sure.. I saw that over at Fastlane, there's actually another step locking an issue some time after an issue has been closed. Would it be possible to add this as well? And then maybe add another comment before locking that asks to create a new issue?. Ah. No, it uses their Fastlanebot. Let's hold off on this for now then; not that important . Ah. No, it uses their Fastlanebot. Let's hold off on this for now then; not that important . Thanks for looking into this, @aksswami! \ud83d\ude00 . This has been merged on Apple's side. @aksswami, thank you so much for picking this up!. I think so? Maybe better to ask over at https://github.com/apple/swift-source-compat-suite/pull/35; @lplarson fixed it (by updating just the hash as far as I understand, so I think the .git suffix did the trick.. Good question. I'd just start from the Compat PR, and go from there?. Or going straight to the mailing list is also an option.. Can you post an example of your use case? I think - but I can't find it right now - we are using NSErrors on purpose. Maybe someone of the @Moya/contributors knows or can point to a discussion on that?\nIf we do indeed want to end up changing this, It'd be awesome if we can take this with us in the 9.0.0 release.. Just released 8.0.4. Can anyone check if everything went smoothly? My terminal said there was an error when the script tried to git push --follow-tags.\nOnly had to manually convert the tag to a release.\nbash\n ! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/Moya/Moya.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nrake aborted!\nCommand failed with status (1): [git push --follow-tags...]\n/Users/bas/Documents/Programming/iOS/Moya/Rakefile:185:in `block in <top (required)>'\n/Users/bas/.rvm/gems/ruby-2.4.0/bin/ruby_executable_hooks:15:in `eval'\n/Users/bas/.rvm/gems/ruby-2.4.0/bin/ruby_executable_hooks:15:in `<main>'\nTasks: TOP => release\n(See full trace by running task with --trace). \ud83e\udd14, that might have been due to the merge of #1076 I guess.. I think the release didn't go through with CP. Installing in a fresh project results in 8.0.3. \ud83d\ude1e. Tried to push the pod manually but that failed as well. Can any of you help me out? @ashfurrow @sunshinejr @pedrovereza?\nbash\n[!] You (email) are not allowed to push new versions for this pod. The owners of this pod are ---.. Look at it!\n\ud83c\udf89  Congrats\n\ud83d\ude80  Moya (8.0.4) successfully published\n \ud83d\udcc5  May 9th, 21:17\n \ud83c\udf0e  https://cocoapods.org/pods/Moya\n \ud83d\udc4d  Tell your friends!. Yeah, I think we should try to get 9.0.0 out of the door soonish, also to avoid having 10.0.0 being around the corner immediately.\nI feel like the queue changes are first priority. rx.request and reactive.request are not that difficult to implement (I think?). As both are breaking changes, it would be nice to have them both in one release.\nI think the sampleData is a little less of a priority, and we might want to put that into 10.0.0 if it takes too long.. I was thinking of a migration strategy to go from RxMoyaProvider to MoyaProvider.rx and from ReactiveSwiftMoyaProvider to MoyaProvider.reactive, but couldn't think of any where we can have a fix-it. Then I thought of something else. What we can do, is deprecate RxMoyaProvider and ReactiveSwiftMoyaProvider's inits and make them private in 10.0.0, therefore having a more user-friendly migration as well as a transition with deprecation.. +1 on the alpha. . Seems like a great idea, especially when it would be that simple. No reason to make it another major version bump just for Swift 4. . Thanks for all the hard work you've been putting into this, @sunshinejr! \ud83d\udcaa. On availability / fix-its: check https://github.com/Moya/Moya/pull/890. Example: https://github.com/Moya/Moya/issues/888#issuecomment-270004469. Thanks for all the effort, everyone - and @sunshinejr in particular. \ud83d\ude4c. Seems like a great plan. Let's get this shipped!. Great idea, thanks for some initial thoughts @sunshinejr!\n\nSeems OK, but might grow a bit big long term.\nSeems even better than 1., without any downsides.\nThis seems like a great option to me. Easily expandable, and when linking from the Readme, it's also easily accessible.\nI have a feeling wikis are not often used nor seen. I can't remember the last time I've looked a wiki for anything else than documentation (for reference, I used it when browsing Freddy documentation).\nI think the other options are all better, so let's change things for the better. \ud83d\ude03 . Let me know if I can help in any way :). What would be the advantage compared to a list in the repo? Or maybe: what would we want to get out of a website apart from just a list of project built with / on top of / extending Moya?. Also, as @juliengdt mentioned, I think doing so with Jekyll would be pretty nice, as I think most of us (?) already have some experience with it.. Go for it!. \ud83d\ude0d\ud83d\ude4c. Can you post your code where this error is shown?. How did you end up solving the problem?. Nice! Could this also fix #1072 / https://github.com/apple/swift-source-compat-suite/pull/35? Seems like this might have been the issue there. . Should we also add the git suffix to the Readme SPM instructions for Moya itself?. Other than that, this LGTM.. That'd be awesome, @SD10!\n\nOn maintaining everything: yeah, this will definitely be some more work. But as @SD10 brought up, having \"compiling documentation\" makes it easier to spot errors and fix them.\nI am also still not sure about the website, but let me comment about that in its ticket.. Maybe not for now, but I was thinking: can we lock issues with x comments after being closed?. GitHub apparently doesn't support locking (yet)... https://github.com/probot/stale/issues/16#issuecomment-291862121. ... but there seems to be a plugin that does work? I can't really find out how this would work: https://github.com/lee-dohm/lock.. Thanks for all this work though, @sunshinejr! This seems like a great addition. \ud83c\udf89. What is it exactly where you encounter an error? Can you clarify what doesn't work as expected?. In this case, considering the bug, I'd say go ahead and release 8.0.5. . \ud83e\udd14, never saw this, but it seems like we're using ---- style and # style headers all around the place. I can open  a PR soon changing these all to the # notation? That, at least to me, is a bit cleaner. Thoughts?. Let's open a separate one for that. \ud83d\ude03 I'd need to dive into SwiftLint for that though, so if you'd like to do that, feel free.. Does SwiftLint actually work with non-.swift files? \ud83d\ude2e. Hah, of course. Let me think of a nice way to check.. I think we should be able to add this in Moya. I'll take a look.. Thanks for bringing this to our attention! I've opened #1127.. It's been a while since using Carthage, but it seems like @pedrovereza has no Carthage folder, and you do, @dannymout. Any idea what the difference in setup was?. Hey, thanks @phimage! Can you open a PR so we can add that test? That'd be awesome!. \ud83d\udc4f\ud83d\udc4d. Hmm, this is an interesting one. Not sure what to think of it yet.. Why do we close these issues if they get auto-closed after the PR is merged? Now, if for some reason the PR isn't merged, there's a big chance this issue gets overlooked and stays closed.. I can't remember this happening somewhere actually, and I feel like the auto-closing works best. But if I am in a minority here, I'd not want to change the way this is handled now. @Moya/contributors, what do you think?. We can close this now :). Think it was confused because we closed an reopened manually \ud83d\ude1b. What's your parameterEncoding?. I am not sure if this is supported. Take a look at the discussion in #597, specifically this comment. Does that work?. Can you share the code where you expect a ? instead of %3f? The example URLs in your initial message are both the same and work fine.. ~~Thanks for noticing, @LeonardoCardoso! @Moya/contributors, should we release 8.0.6 to support this for version 8 still, or do we want to hold off on this for v9? Not sure if this would break anything?~~. ~~This confuses me every time. Why does 3.5 not work at this point, then? 3.5 is in the range of 3.0 and 4.0, so that should work? \ud83e\udd14~~. @LeonardoCardoso, I just set up a test project and it seems to work fine with RxSwift. Alamofire seems not to be updated yet, though, and causes an error.\nHave you tried pod update? A fresh install uses RxSwift 3.5.. bash\n$ pod install\nAnalyzing dependencies\nDownloading dependencies\nInstalling Alamofire (4.4.0)\nInstalling Moya (8.0.5)\nInstalling Result (3.2.3)\nInstalling RxSwift (3.5.0)\nGenerating Pods project\nIntegrating client project. Are there any dependency problems? What would the benefits of having a separate repository be for each submodule? I think having a separate repository per submodule introduces quite some challenges without solving any problems. \nOn Moya/ReactiveCocoa and Moya/ReactiveSwift: yes, it might be time to remove the ReactiveCocoa subspec. It has been left after the rename for compatibility with Podfiles using Moya/ReactiveCocoa. The only downside is that we can't really inform those users that there is a new subspec name, and I am not sure how big the impact could be. They would basically get stuck at a maximum library version when we would remove it, without being warned of any new versions in any way. . I am going to close this for now as per the above comments, but thanks for bringing this up @Huang-Libo!. When doing a search, it does seem like a lot of people just return Data(): https://github.com/search?q=%22var+sampledata%22+language:Swift+extension:.swift&type=Code&utf8=%E2%9C%93.\nOn it being a breaking change: we're releasing 9.0 soon, and with Swift 4 around the corner, there will probably be room to include this in 10.0 in the near future if we want to go this way.. What do other @Moya/contributors think?. Anyone up for a PR?. Yep, that'll do as well, I think. \ud83d\ude03 . Hey @ranayahya - it doesn't seem like you're using Moya, right? \ud83e\udd14\n. In that case I am going to close this issue, as it is not related to Moya. What seems to be going wrong is that you are unwrapping (!) an optional value, which is nil. Check in Xcode on what line this happens (probably this one: var request = URLRequest(url : URL(string: API)!)?) If that's the case, it seems like the URL is invalid, in which case URL(string: url) returns nil.. I think making issues like these is a really good idea, so thanks for that! Also love the starter-task, but we already have the good first step. Should we remove that and start using starter-task? Also, although this is a nit, let's call it starter task to be in line with our other labels?. First of all, thanks for looking into this! It seems like JSONEncoder returns Data and not [String: Any], so I am not sure how we could use the encoder for parameters in that case; we really need a [String: Any] for parameters.\nAlso, I am not quite sure what RequestData would do over parameters and parameterEncoding?Does it offer anything other than combining these two?\nKeep us updated on your progress, we'd love to see the possibilities. You might want to consider forking Moya and don't be afraid of trying things out there. \ud83d\ude03 . Swift 4 will probably be released around September, which means we still have a two+ months to go, during which Swift will still be in development and will have some fixes and improvements.\nOnce it is released, the transition to Swift 4 will probably be pretty fast indeed, so I think we should aim to support Swift 4 sometime in September / October.. Earlier is better, and having a beta period would be great, so we can release a non-beta once Swift 4 is out of beta. . Can someone confirm this as a bug?\nIf so, @syegin, would you be willing to do a PR to fix this? :). Targeted this at the master branch by accident, changing the base branch to 9.0.0-dev adds a bunch of commits. \ud83e\udd14. Also, from #963:\n\nThen let MoyaProvider conform to ReactiveCompatible and ReactiveExtensionsProvider, then we could change our code like this:\n\nIt seems like we can't use both of these protocols, seeing how they are implemented (ReactiveCompatible; ReactiveExtensionsProvider). Or at least, I don't really see how to do so. Am I missing something there?. Interesting CI failure:\n```\n\u274c  /Users/distiller/Moya/Tests/ReactiveSwiftMoyaProviderTests.swift:190:92: argument 'stubScheduler' must precede argument 'stubClosure'\n            provider = MoyaProvider<GitHub>(stubClosure: MoyaProvider.immediatelyStub, stubScheduler: testScheduler).reactive\n                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n```\nIt seems like the parameter order differs from ReactiveSwiftMoyaProvider and MoyaProvider. \ud83d\ude2f. @sunshinejr I've been trying to update the tests and verify if everything is working locally, but can't seem to get the tests running. For this I think I need to do a swift build and swift test, right? Problem is, swift build errors:\nbash\nbas$ swift build\nwarning: refname '4.5.0' is ambiguous.\nwarning: refname '4.5.0' is ambiguous.\nHEAD is now at 7fe7b91 Added release notes to the CHANGELOG and bumped the version to 4.5.0.\nResolved version: 4.5.0\nwarning: refname '1.1.3' is ambiguous.\nwarning: refname '1.1.3' is ambiguous.\nHEAD is now at 92d73573 1.1.3\nResolved version: 1.1.3\nwarning: refname '3.2.3' is ambiguous.\nwarning: refname '3.2.3' is ambiguous.\nHEAD is now at c844618 3.2.3\nResolved version: 3.2.3\n/Users/bas/Documents/Programming/iOS/Moya/Packages/RxSwift/Package.swift:5:36: error: use of unresolved identifier 'ProcessInfo'\nlet RxTestIsTarget = buildTests || ProcessInfo.processInfo.environment[\"TEST\"] == \"1\"\n                                   ^~~~~~~~~~~\nFoundation.NSProcessInfo:1:14: note: did you mean 'NSProcessInfo'?\npublic class NSProcessInfo : NSObject {\n             ^\nApplicationServices.ProcessInfoRec:1:15: note: did you mean 'ProcessInfoRec'?\npublic struct ProcessInfoRec {\n              ^\nerror: exit(1): /Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a.xctoolchain/usr/bin/swiftc --driver-mode=swift -I /Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a.xctoolchain/usr/lib/swift/pm -L /Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a.xctoolchain/usr/lib/swift/pm -lPackageDescription -target x86_64-apple-macosx10.10 /Users/bas/Documents/Programming/iOS/Moya/Packages/RxSwift/Package.swift -fileno 3\nAny idea? Is this an RxSwift issue? AFAIK, NSProcessInfo was renamed to ProcessInfo in Swift 3 an thus shouldn't error.. Interesting, I had two really old snapshots, though Xcode was just using the one bundled with Xcode; I wonder how it used one of those other snapshots when running swift build. \ud83e\udd37\u200d\u2642\ufe0f. Testing via Carthage works; I've created #1141 to make a short .md to document this.. Added a DNM, as we would need to merge this into 9.0.0-dev, not master, which seemed to cause some issues when trying to do so.. Yeah, that's what I saw when switching the target branch as well. \ud83e\udd14. Will take a look!. I've just updated to use ReactiveExtensionsProvider and ReactiveCompatible. The build is expected to fail - I haven't updated all tests yet, and the extensions don't implement the request(). method yet.\nDoes anyone else want to look into that? As I don't have too much experience with Reactive, I feel some of you might be better for that job. :). Also, might both these extensions creating a type of Reactive<MoyaProvider<Target>> cause a problem somewhere? \ud83e\udd14. Definitely, go for it!. I've done another update to the docs, meanwhile fixing #1144 as well.. Yeah, sure!. Yep!. Both seem like a great idea. I'll create another issue for your second point! :). Any idea as to what to call the \"others\"?. This is a bit trickier now as the documents have been (partially) translated to Chinese and I am not a big fan of pulling both the English and the Chinese versions into the root.. ... allthough we did the same already with the Readme, CoC and Vision. I feel like even further clouding the root is not a great idea.. Ah, yes - it's been fixed there. Let's close the issue to prevent duplicate PRs, and just wait until the 9.0.0 branch is merged into master.. Fixed in #1146 . I guess we could, but it would be a hassle that's not really worth it. Thanks for mentioning it though; I've added a check to see if a migration guide would be necessary for 9.0: https://github.com/Moya/Moya/issues/1075#issue-227035119. Yep, definitely. Although deprecating / making methods or variables unavailable and providing useful error messages goes a long way, too. :). Amazing work everyone, @Dschee especially! \ud83d\udcaa. Check out the Demo, there's an example with a MultiTarget. Let us know if that helps!. AFAIK it's 4 spaces. :). Thanks for picking this up, @sunshinejr!. It might be good to open an issue over at Probot as well, to get them in the loop? https://github.com/probot/probot/issues. I think, at this point, we might be better off opening an issue over at Stalebot, instead of doing this hit-and-miss approach. \ud83d\ude10 . Check out https://github.com/Moya/Moya/blob/master/docs/Development.md :)\nAnd let us know if you need any help!. Would it not make more sense to make the private func public? Having this extension on URL feels a bit weird / hard to discover.. \ud83d\udc4d. Two other small things:\n\nwe might want to reference to the Vision document in (at least the) Readme.\nfor consistency call the document Vision.md (instead of VISION.md) - or update all top level files to use uppercase.. Can you update the Demo's Podfile.lock as well? Just can do so by running pod update in the Demo directory. Thanks \ud83d\udc4d. Awesome, thanks @larryonoff! :). \u2705 8.0.5 with Xcode 8.3.3\n\u2705 8.0.5 with Xcode 9.0 (opened with the previous project)\n\u274c 8.0.5 with Xcode 9.0\n\u274c 8.0.5 with Xcode 8.3.3 (opened with the previous project and Deployment target reset to 10.3\n\nSo the first point should be OK: Swift 3.2 works on Xcode 9.. Hey @lovesomeone. Thanks for reporting this. Moya does not (yet) support Swift 4 in v9, so you'll need to either update this yourself (and a PR is welcome!) or wait until we support Swift 4.. I think these have been lost with merging somewhere? Pretty sure those were updated. \ud83e\udd14. I can definitely remove the examples and update the text. Not sure what you would like to add regarding the progress - feel free to add that :). I've opened #1203; lets merge this for now.. I think those two would be enough. Then in September we can drop Swift 3 tests.. What is your current Moya version? You can check in the Podfile.lock. And can you maybe also share the contents of your Podfile itself? I just set up a fresh projects and everything builds fine. Moya is using 8.0.5 there.. Exactly what @SD10 said. You can browse the 8.0.5 documentation here: https://github.com/Moya/Moya/tree/4512a2a4bc8019cf006434378ac6a0640f34f35f/docs. You have a dependence on ReactiveSwift 1.0.0, but Moya needs 2.0.0. Did you add github \"ReactiveCocoa/ReactiveSwift\" \"1.0.0\" for a reason?. I don't know why you get the error of the renamed MoyaError in the availability file. Which Swift version are you using? And which version of Xcode?. Closed by #1236 . Whaaat, this still had an uppercase enum case? \ud83d\ude2e . Thanks for these @SD10! \ud83c\udf89. Nice to hear you've resolved the issue, and thanks for providing your implementation! \ud83d\udc4d. Are you sure it worked before? I think there's no option to get an equivalent to the \"subspecs\" in CocoaPods, so you'd have to download everything. That should still not show the library not loaded error, though.. \ud83e\udd14, interesting. Check the PR (#1218) that was just opened. . Just an internal fix without impact, don't think it needs a Changelog entry. :). Should I update the SPM bug?. \ud83d\udd14\ud83d\udd14\ud83d\udd14. @Alexey-Matjuk did you update from an existing project? You might need to delete your Derived Data in that case. . Awesome, thanks @karthikdash! \ud83d\ude4c\nCongratulations on your first contribution \ud83d\ude03. I think the issue has to do with incompatible Moya / ReactiveSwift versions; so it is kind of unrelated - meaning we can leave the issue open (awaiting user feedback) when this is merged.\nI am now going to the process of setting up an app with Moya via Carthage to check if everything works as expected.. I'll take a look later today!. @sunshinejr - is this what you meant? If not, I don't really know what should be done further... let me know :). That does make sense. I think that all versions should work fine with all 3.x versions though. Why do you think they might not be?. Unfortunately not. Think that would involve downloading old versions of Xcode as well, right? :(. If it's a non breaking change, please go ahead and open a PR. :). In that case, we shouldn't add it to 8.0. We'd want to do a major version update for breaking changes. Why did you want to update ReactiveSwift for 8.0 as well?. @sunshinejr is there anything we still need to do for 10.0 except waiting for stable RxSwift and ReactiveSwift releases?. Yes, it does. Only if all paths have the same AuthorizationType, you could return immediately. . @arjunnaha be aware the compiler won't warn you when adding a new endpoint that might using something other than .basic though!. That's awesome @arjunnaha! Congrats :). You can just add the access_token in the parameters. . With the access token being a parameter, I think the best solution would be to add it via parameters; in this case the access token is not really different from any other parameter.\nBut it is a parameter that needs to be added to every request, so you might want to look into adding it to the Authentication Plugin, yes. Do you want to take a stab at implementing that?. Hey @arjunnaha, did you find a solution for this? If so, can you post it? \ud83d\ude03. Yes - that'd be awesome. Want to open a PR, @damianesteban? Let me know if you need any help. . Hey @mac10688. What did you change? What version of Moya and Xcode are you using? I've just tried installing Moya 9.0.0 with Xcode 8.3.3, and doing a pod repo update and pod install in the Demo directory worked fine.. @sunshinejr would it be possible to enable the Demos to be run with a Podfile too?. @SD10 see the discussion here.. Hi @uditha2233! Can you show some more of your code? For example your endPoint, param and headers parameters.\nOther than that, a parameter should always be a key-value pair. Can you give us an example URL of what you are trying to achieve?. Done, feel free to merge once green!. That would enable something like this, but I feel it will make readability worse.\n```swift\nenum Network {\n    case userEdit(name: String?, surname: String?, email: String?)\n    case search(query: String)\n}\nextension Network {\n    init(name: String? = nil, surname: String? = nil, email: String? = nil) {\n        self = .userEdit(name: name, surname: surname, email: email)\n    }\n}\nNetwork.userEdit(name: nil, surname: nil, email: nil) // userEdit(name: nil, surname: nil, email: nil)\nNetwork.search(query: \"test\") // search(\"test\")\nNetwork(name: \"test\") // userEdit(name: Optional(\"test\"), surname: nil, email: nil)\n``. You canreturn Data()too. We don\u2019t offer defaults so the implementation is always clear (see the Vision document). Definitely! It\u2019s planned for the 10.0 release. Would you be up for a PR to add support for RxSwift 4? :). On the branch: we should, so I changed it to the dev branch \ud83d\udc4d . On the branch: we should, so I changed it to the dev branch \ud83d\udc4d . If you add Moya as a pod, you\u2019ll need to add theuse_frameworks!line in your Podfile. It\u2019s required for all Swift frameworks. . Yes, probably. For now you\u2019d have to stick with adding theuse_frameworks!though.. Yes, probably. For now you\u2019d have to stick with adding theuse_frameworks!though.. No; they should use the current implementation. . GitHub's a little funny there - I know of only \"fixes #whatever\" that automatically closes the issue.. Ah, so that's why @AndrewSB closed a few things. I was confused \ud83d\ude48. I'll reopen and point to master for now?. No worries! :). Also, I think it's kind of GitHub's fault for not letting you know that removing the branch would close some PRs. Ooooh, emoji in branch names. \ud83d\ude2c. Triggered a rebuild @pietrocaselani! :). Triggered a rebuild @pietrocaselani! :). Hey @ninasaveljeva! Moya 9.0 [doesn\u2019t support Swift 3.1](https://github.com/Moya/Moya#moya-version-vs-swift-version). Try to change thepod 'Moya'topod 'Moya', '~> 8.0.5'and see if that helps? :). Hey @ninasaveljeva! Moya 9.0 [doesn\u2019t support Swift 3.1](https://github.com/Moya/Moya#moya-version-vs-swift-version). Try to change thepod 'Moya'topod 'Moya', '~> 8.0.5'and see if that helps? :). I agree with that, @SD10, and I think it would be better if it would have it's own file.. I agree with that, @SD10, and I think it would be better if it would have it's own file.. Although this is probably out of scope at this point, I think it would be awesome to have the documentation to lead a path, so you go fromatoband can \"hop off\" when you feel comfortable doing so.. Although this is probably out of scope at this point, I think it would be awesome to have the documentation to lead a path, so you go fromatob` and can \"hop off\" when you feel comfortable doing so.. What is the compiler error you are seeing?. Awesome!\nI was thinking... would it be nice to create an issue to keep track of changes in the Readme, so that the Chinese Readme can be updated according to that issue? That way we can keep track of the changes to keep both Readmes in sync as best way can.. Exactly what I was thinking. Maybe add other docs once they have an initial translation.\nOn the Danger rule: awesome! Would never have thought about that. Let's do it!. @SD10 Done: #1357 . Danger: fancy! I think at this point any of those will do. Let's not put in too much effort for now, we can always expand on it later.. Although I don't mind leaving old migration guides, I'd like to do either one of two things:\n\nCreate a folder \"Migration Guides\" and have separate documents per migration.\nRemove old migration guides (as we can point to them anyway in another branch - it's git!). Offtopic, but I really don't get these Codecov reports. \ud83d\ude10 . I am not sure exactly what this PR addresses / how impactful it is, but just as an FYI, this is from the Vision:\n\n\nprovide basics of response decoding while exposing customization points for other libraries to help.\n\nI don't want to say this shouldn't be in the library, but just to help with the discussion.. I felt exactly the same as you did @sunshinejr, so thanks for biting the bullet and posting something. I do feel like adding performance tests would be a great improvement. Also, if we can make it more clear why we need this and we can accomplish that with a few code comments, I\u2019d greatly appreciate that as well.. Thanks so much for doing this, @lovesomeone! \ud83d\ude00. Lol. Was trying to thumb it up and the picker just no-opped. Did you lose what you wrote? \ud83d\ude15 . Done!\n. Did the same for the 10.0.0-dev branch.. Can this one not be improved? https://github.com/Moya/Moya/pull/1370/files#diff-1e290ac8433d555bce009b162cb869d0R79. Let's go with good first issue indeed.. Would love to try out GitHub Projects.\nInitial list of tasks looks solid, too. Thanks for taking the initiative here, @SD10.. > Also, do we want to keep this issue anyways? I feel like it is not necessary and whenever we want to publish a new version (alpha/beta/release), we can make a new issue about it. From the last issues that covered the release I feel like these are going stale really fast and are hard to find.\nI agree on all of these points, but I must say that I really like having that one issue where we can share updates regarding the release; eg. when a new version is ((almost) ready to be) released.. Also, I think it would be nice to create a separate issue for the ReactiveSwift 4.0 support.. No problem!\nSent with GitHawk. Yeah, I don\u2019t feel like we have any need / that it would improve managing releases for us at this point. \nSent with GitHawk. Super exciting! Very interested in what you come up with. No doubt you'll spot some improvements that we can get in Moya itself. Looking forward to what you create. Let me know if I can help in any way :). @sunshinejr seems like there are actually returns? The first flatmap returns immediately, the catchError returns after the if.\nSent with GitHawk. Thanks for looking into this @ufosky! It seems like this would a breaking change, right?. Also I think this should go into master, right @sunshinejr? When / where do we use the development branch even? I was surprised to see it was even with master. \ud83e\udd14. I don't really see a reason not to work on master. I think not working on master only coplicates things, but doesn't really add any value. As we are doing releases anyway, I feel like using a separate branch doesn't do more than keeping the (updated) documentation for that change in a separate branch.\nWriting this, I'd maybe even suggest putting just the documentation changes in a separate branch and merge that in once we release a new version.. > The downside of not putting patches on master is they're not available until we make another release.\nWhat do you mean by that @SD10?. We don\u2019t have to do any git voodoo as we have tags/releases for every new version. That means we can just create a branch from said release, fix and merge back into master.\nOr, we can use a release branch and have that reflect the latest release, making it so we don\u2019t need to create said branch from the tag if a hotfix is needed.\nAll in all, it seems like a development branch is \u201coverkill\u201d and imo it would make sense to reflect work being done on the master branch. \nSent with GitHawk. Where does the Contributing.md needs updating? I think it's already reflecting the current state.. But I only changed the README? :)\nSent with GitHawk. Awesome, thanks for the approvals!. Hey @Vict0rS - I think some other tests were impacted by this change. See here. Can you check if everything works fine locally?. Nice catch! We should enable the flags for the remaining targets as well. Would you be up for that?. @pedrovereza - but not for every target in both release+debug. It's not a regression. :). And you could extend your TargetType maybe to wrap this in a variable \ud83d\udc4d \nSent with GitHawk. Yes, I fully support this change. (Having to make) a more conscious decision of the type of test you\u2019re writing never hurts either. \ud83d\udcaf \nSent with GitHawk. With Carthage, this is unfortunately not a possibility at this point. :(\nSent with GitHawk. That's a good one. Would you be up for opening a pull request adding it? \ud83d\ude03 If not, that's OK too of course!. Good to hear your issue is resolved and thanks for sharing your findings. \ud83d\udc4d. That should just work - we're actually doing something similar already here.. @SD10 according to https://github.com/Moya/Moya/issues/1441#issuecomment-341722746:\n\nour podspec already uses 10.10, thus I believe that this is a bug that our Moya.xcodeproj uses 10.11 as a deployment target and it should be safe to fix.. Hey @ReverseScale - can you post your complete podfile?\n\nAlso, please try pod 'Moya/RxSwift' without the space at the end - does that fix the problem?. Hey @ReverseScale - @Mikelulu's suggestion fixes the problem, but doing a pod install should install version 10.0.0 as far as I can tell. I'll create a separate issue. \ud83d\udc4d. Ah - that was actually the problem. Does it make sense that CocoaPods doesn't warn you about that at all?. Yeah of course, but it doesn't warn you that it didn't fetch the latest release (I know, at this point CocoaPods doesn't know about it) / that you have an out-of-date spec repo. \ud83d\ude15. So what would it do if I would've done 'Moya/RxSwift', '~> 10.0' before the pod update?. Ah, right. We should update the Readme and add the version back then, I feel.. I've opened #1459 for that - I'll close this. Thanks @pedrovereza @sunshinejr! :). Yep, what @sunshinejr says seems to be the case indeed.. It seems to fail because of a SwiftLint violation, can you verify @sunshinejr?\n```\nDone linting! Found 12 violations, 1 serious in 51 files.\n ARCHIVE FAILED \nThe following build commands failed:\n    PhaseScriptExecution Swiftlint /Users/corentin/Library/Caches/org.carthage.CarthageKit/DerivedData/9.1_9B55/Moya/10.0.0/Build/Intermediates.noindex/ArchiveIntermediates/Moya/IntermediateBuildFilesPath/Moya.build/Release-iphoneos/Moya.build/Script-46AE31F21F86DDC6004E4236.sh\n(1 failure)\n```. Agree. Is this something we should report upstream too?. And/or Swiftlint, yes. \nSent with GitHawk. In this case, we wanted to fix a silent install of an outdated version; you can read all the information on it here. I think what you are trying to achieve is something different. :). That\u2019s interesting! Feel free to open a pull request, and we discuss it further there? :)\nSent with GitHawk. Hey @huaqixue, what is exactly the problem you are running into? Can you provide your complete TargetType implementation?. Can we use four spaces for indentation instead of a tab? That would keep it in line with our current code samples.. > Also, it doesn't look like your Closes #1258 in the first comment took effect. Not sure what's up there\nSeems like that was because they were using the URL rather than the #. GitHub \ud83d\ude15 . Yep, don't see a reason why not \ud83d\udc4d. I'll reopen so we can keep track \ud83d\udc4d. Hey @realcarlos. It seems like your issue is related to decoding your JSON; that being said, it\u2019s hard to debug as you only provide a part of that JSON.\nIt seems like you may not have an array of objects, but rather just one. That would mean that you should map to TaskResult instead of [TaskResult]. Can you try if that helps?. Awesome! Feel free to add it to our list of Community Projects.. This is super cool - thanks for sharing your thoughts and code @SD10; much appreciated. I\u2019ll give this a closer inspection soon \ud83d\udc4d\nSent with GitHawk. If you clone Moya/Moya (instead of your fork), you can simply git pull to get up-to-date @richgabrielli \nSent with GitHawk. If you don\u2019t have push access to a repository, you have to fork. So for this PR you created you made a fork, but as you now have push access to Moya, you no longer need it.\nSo yes - you can delete the current fork. And no - you have to fork if you do not have push access to a repository.\nSent with GitHawk. GitHub will tell you there are merge conflicts in that case, and you can either fix it on GitHub.com or locally (in the command line or any program you prefer)\nSent with GitHawk. But it is in JSON format - your JSON is simply a Dictionary, which is what [String: Any] is, too. What does not work? What error do you get?\nSent with GitHawk. Thanks for reporting @LipYoung. Would you be interested in fixing this and opening a pull request?\nSent with GitHawk. Hey @LipYoung - I've already opened a pull request for this - #1551. \ud83d\udc4d. No pressure @SD10!. Hey @lucas34, thanks for raising this issue. I think it would be a great addition. Feel free to attempt a pull request and feel free to reach out if you're running into anything.. What do you mean exactly? \ud83e\udd14. Ah. That\u2019s really strange. @orta, any idea?\n\u201cWorst\u201d case you recreate your original / implementation pull request directly on Moya?\nSent with GitHawk. Looks awesome! Although this is super confusing, it seems like it will improve things.\nWhat about another PR targeting this branch so we can test all scenarios there? Then you also don't have to run Danger locally, and we can all see the results. :). Ah - yes. And you're right, as a member you can clone the Moya repo and create a branch here \ud83d\udc4d. Thanks for taking this on @SD10! \ud83d\ude00 . Awesome, thanks @Snoops!. Oh my god, this is great @SD10!. Oh my god, this is great @SD10!. Lovely!. This is awesome! Do we want to exclude the Readme, Code of Conduct and Vision though?. Thanks for the awesome write-up, @dangthaison91! I'll take a look at this later, but thanks so much for making this super clear and extensive \ud83d\udc4d. Oh wow, why have I not heard of this before?!. Regarding commit messages: how would we enforce that? Fail a pull request if any of the commit messages exceed it? Seems a bit much. Maybe just add a warning if, but I lean towards not doing anything there.. Hey @dtomicAZ, can you share the code where you\u2019re experiencing the issue?\nSent with GitHawk. Yes, if you can open a pull request in Moya/contributors, \ud83d\ude4f \nSent with GitHawk. Thanks so much for taking this on @ashfurrow  and @freak4pc \u2764\ufe0f\nSent with GitHawk. Nice! \ud83d\ude00. Can you post your code?\nSent with GitHawk. Can you give a better explanation of what\u2019s not working / what you expect? Is there any error you\u2019re seeing?\nSent with GitHawk. OK. What is not working exactly? What is the output?. > You will need Carthage and run carthage bootstrap to build the dependencies.\nDo we have this documented somewhere?\n\nAlthough, having looked at it, I had some doubts\n\nCan you elaborate?. Hey @lSkyPivot, what about let dictionary = data as? [String: Any]?. Can you add this to https://github.com/Moya/contributors/blob/master/Contributing.md too?\nSent with GitHawk. I \ud83d\ude0d this, thanks so much @fbeeper!. Hi @goktugaral, thanks for letting us know. Unfortunately, even though we try our very best, some things might slip through the cracks and aren't update alongside the library itself. Please bear with us!. We should probably still take a look at this.. Especially since we rely heavily on Alamofire, I don't see this making too much sense. I don't know the initial reasons to have Alamofire as a dependency though, and I do not know if it would be worth it dropping the dependency at this point.. Are there any strong opinions or instances were you really need Moya over URLSession when dependency size is important?. I get it, but I still don't see the point of it:\n\nAre there any strong opinions or instances were you really need Moya over URLSession when dependency size is important?. But in the smaller projects you would probably not need the \u201coverhead\u201d of Moya, and you can use a simple URLSession. Right?\n\nSent with GitHawk. Feel free to open a pull request :)\nSent with GitHawk. I am not a big fan. I discussed MessageKit's issue template a while back with @SD10, which they feel is not working like they'd want to.\nIn the original issue template I intentionally made the barrier for creating an issue as low as possible, and these \"please fill out this form\" will not make it easier, I am afraid.\nThat being said, do you feel like there is a specific area of improvement? Maybe we can take a look at how we can tackle that?\nOh and still really appreciated that you're pushing stuff and trying new things! \ud83d\ude00. That's interesting. I have no idea how these could things could be related. Can you share your whole Podfile?\nAnd is the trouble you're having with autocompletion something specific? If so, can you give some more information?. \ud83e\udd14, not sure if there are some clashes with RxSwift possibly. Moya now depends on 4.0, while you specified 4.1.2.\nCan you try to remove the RxSwift dependency and check if the problem persists?\nIf so, can you post your Podfile.lock?. Hi @gligorkot \ud83d\udc4b\nTake a look at the Decodable docs.\nThere, you can set your keyDecodingStrategy (I think that is what you're looking for) on the JSONDecoder.. Hi @gligorkot \ud83d\udc4b\nTake a look at the Decodable docs.\nThere, you can set your keyDecodingStrategy (I think that is what you're looking for) on the JSONDecoder.. What is the use case? I feel like this is a responsibility of the client.. What is the use case? I feel like this is a responsibility of the client.. That does feel like a client side thing. \nSent with GitHawk. That does feel like a client side thing. \nSent with GitHawk. Hi @KompoD \u2014 you can! In the README there is an example of an endpoint that returns Data for an image which you can then use to initialize a UIImage.. Yeah; can you share your Cartfile.resolved by chance, @stfnhdr?. Any reason you're not wanting to initialize a new provider for it?. Sorry. Will take a look soon, but this looks good \ud83d\udc4d\nSent with GitHawk. @kamranpirwani we'll do our best to get it out soon!. You could always use a fork in the meantime, @gityubj :). Hey @pinddFull, thanks! I think a large chunk of this was done by @SD10, and the reason we did so was to be more explicit about access control, and to make sure we question it.\nNot sure if we want to change that. :). Thanks for your effort though! \ud83d\ude0a\nSent with GitHawk. Hey \ud83d\ude03\nYou should be able to do the following:\nswift\nswitch self {\n  case .API_some1, .API_some3:\n    print(self)\n  case .API_some2(let dictionary), .API_some4(let dictionary):\n   print(self, dictionary)\n}\nDoes that help?\nI don't think you can match \"any case that has an associated type\".. I (unfortunately) don't think you can do that.. Ooh awesome, thanks for all the work recently, @sunshinejr!. In that case, adding a ? should just work.\nswift\nguard let stringURL = target.baseURL.URLByAppendingPathComponent(target.path)?.absoluteString  else {\n    fatalError(...)\n}\nRight?\n. In that case, I'd do the following:\nswift\nif let\n    url = target.baseURL.URLByAppendingPathcomponent(target.path),\n    stringURL = url.absolutestring {\n        return Endpoint(URL: url, sampleResponseClosure: { .NetworkResponse(200, target.sampleData) }, method: target.method, parameters: target.parameters)\n}\nfatalError(\"\\(target) url is not valid\")\nNotes:\n- url shouldn't need force unwrapping, as it has been unwrapped previously, right?\n- we might want to go with an inverted code path here, using guard to fail early. \n. I see a typo; Rsponse should be Response.\n. Maybe also add an explanation for the addition; right now, it doesn't really say anything.\n. \ud83d\udc4d\n. What about if let _ = progressCompletion Instead of the nil check?\n. \ud83d\ude4c\n. Any reason for swapping this order here? Not that it matters that much, just curious\n. Yeah, we might want to just use a typealias here.\n. Agreed.\n. Why the MoyaProvider.ImmediatelyStub instead of just .ImmediatelyStub? And have these not been updated to lowercase enums yet?\n. Hmm, I see these are class funcs mimicking an enum. We might want to make them lowercased?\n. Made a PR instead. Let me know what you think.\n. Nice catch!\n. Although I am not sure about naming, you might want to do this step in two lines. Something like\nswift\nlet initialRequest = manager.upload(file, with: request)\nlet alamoRequest = target.validate ? initialRequest.validate() : initialRequest\nSo we can prevent code duplication and possible errors due to that in the future. What do you think?\n. This also applies to the sendDownloadRequest and sendRequest functions, of course.\n. Hmm, why not? I think using one function is more clear. This would also prevent possible code duplication.\n. You're right. Changed.. The forEach reads better for me, but not sure what others think. Would at least change the reduce to\nswift\nlet result = self.plugins.reduce(result) { resultSoFar, plugin in\n  return plugin.processResponse(resultSoFar, target: target)\n}\n... losing the (by me) dreaded }).\nWhat I don't really like about the current implementation is the need for shadowing the result parameter to let (ha!) it be a var.. Basically, I think both would be just fine.. I see this print; although it's not related to the change, I think this can be removed, right?. Seems like the list increments anyway (using 1s). I did the same as in the lists above, which are also using just 1s.. Yep. You can even import specific functions :-). Elsewhere in Moya, we use == false (as this is clearer?), maybe want to do that here as well?. [..] will add the authorization header to all requests of the TargetType.. This might need an example of how to use this. Also, why the boilerplate from the user's perspective?. I don't see how this would work at the call site. According to the tests you wrote, it seems like you add the needsAuthentication in your TargetType init:\nswift\nlet target = TestTarget(shouldAuthorize: true). What was trowing me off-guard as well, was your example of using case needsAuthorization and case doesntNeedAuthorization, although these are obviously two endpoints. Don't know why I didn't see that; that was what seemed to \"duplicate\" / boilerplate, but obviously doesn't.\nDoes that make any sense? \ud83d\ude06. Ah, that makes total sense. \ud83d\udc4d. targetThatNeedsAuthorization should be endpointThatNeedsAuthorization, right?. \ud83d\udc4d. These just return an Error, right? Not multiple. Might want to make that more clear.. And maybe make it \"Filters out the responses of the specified status code [..]\". Is this step still needed? If so, why?. Good catch!. You can :). The initializer still uses verbose as its parameter, so this is incorrect. . This was discussed in #841. Created #990 to change it back :). No problem. :). I'm not sure on reopening vs opening a new one. On wording: \"This issue has been auto-closed [..]\" I think would better reflect the action.. What about just \"stale\"? I can't really think of anything better, although it seems like something's just on the tip of my tongue. \"awaiting input\" seems... off.. \"no recent activity\" maybe?. \"This issue has been marked as stale because it has not had any recent activity. If no further activity occurs, it will be closed. Please feel free to open a new issue / Please feel free to reopen this issue if needed.\"\nAt least the \"automatically\" seems redundant. Also, for issues, \"Thank you for you contributions\" seems strange.. It would be nice to thank them for taking the time to file an issue, though.. Wasn't sure here - as it is a closure, with the ]) on the last line, I thought this would be better than two }'s with the same indentation vertically. \ud83e\udd14. Let's just go with 45 in that case and adjust if needed?. Do we want to change this still, or stick with queue everywhere?. Oh, oops. Started working on this and it seems like I did so from the wrong branch. I'll remove those.. Not quite sure what to do here - right now, using .reactive means the stubScheduler will always be nil. Should this then be a var instead of a let, or can we solve this in another way?. I am not quite sure what this does / how that would work? Would this drop RxMoyaProvider completely, add the .rx var and make only request() be enabled for the returned value of .rx?. Good catch, will fix both :). Nit, but why the do-catch instead of try? like in some other cases?. I have nothing against do-catch, just noticed the inconsistency. :). Wasn't sure about it. This way you can more easily switch (but why?), if you use the suffix immediately you can't forget it by mistake.. Curious how many people will \"forget\" this and end up with unexpected results. :/. I've updated this in both ReactiveSwift.md and RxSwift.md \ud83d\udc4d. @SD10 GCFloat is actually imported in CoreGraphics, which in turn is not included in Foundation, but is included in UIKit. :). https://developer.apple.com/documentation/swift/int/1455396-init\n->\nFramework\nCore Graphics\nDocumentation is* awesome. \ud83d\ude2c\n* And with is, I mean can be.. Because of waiting for the dependencies to update to Swift 4? Or why?. \ud83e\udd14, you might be right there. I wonder why the table wasn't updated when Swift 3.0 was dropped (if it was? Not sure). Any reason for the force unwrap here? We might want to crash more gracefully (or skip) if the url is not valid.. I am thinking this might not cover everything now. What if you have an API that uses api_key or api_token as an url parameter?. I feel like it would make sense to support a way to add a specific parameter to every request in a provider though.. What do you mean? Is it or is it not a breaking change? Feel free to change!. This is RxSwift, not ReactiveSwift. Why did you add this?. I think its more readable and easier to understand this document when you are to the point stating the facts; not asking questions / filling in the user's thoughts. I've not seen this in other examples as well, so it feels a bit out of place.. Same as above.. Can be omitted.. It felt weird reading the example using only .map(User.self). Maybe just omit this line or tell the user that we use a default keyPath and decoder.. A*. Unrelated, but now that I am looking at this... I don't like the filterSuccessfulStatusCodes() function name. Seems like it would return status codes or something, not responses. Anyone feeling the same way?. Maybe specify the user constant is now of type User?. Shouldn't keyPath be \"users\" here?. Also, how does the decoder \"magically\" infer \"updated\" is supposed to be a Date here? Does it map the Int to Date because of updated's type being Date in our User model? That's awesome!. Nit: you can omit the options parameter - it has a default value of [].. I would say ~> 4.0 for both CocoaPods and Carthage, like we are dong with the other dependencies.. Yep, I think Basic.md would be good. Pretty nice to at least have read when you start using Moya, as the Xcode errors might not lead you to a fix immediately.. Maybe we can add a local constant let contentType = \"Content-Type\" here and use that instead of typing it twice? To prevent regressions in the future.. Pretty much, yup: https://github.com/apple/swift-corelibs-foundation/blob/3ee0925fceb476e89b26673effb7b9f92edbc3da/Foundation/JSONSerialization.swift#L57-L126. Let\u2019s just say that\n1. I was curious\n2. I like context\nHappy to help \ud83d\ude03. Not sure if these things being in a provider would serve as a great example - I think they are not the responsibility of the provider. What do you think?. Will do \ud83d\udc4d. I know it's a helper, but maybe fatalError here too?. Can we assume to always have a response here?. Can we not forward this to the ClosedRange filter to prevent duplicating the implementation?. Nice!. This could also be forwarded.. But it should support .basic and .bearer right? What about self.rawValue.capitalized?. Is this supposed to be in this pull request?. Why?. Does this need a space after the |? There isn't any at this moment.. Hm, I am not so sure about this one. Moya and its dependencies should definitely be extension-safe APIs. What does the warning output look like if we remove this?. Maybe put this in a function so we can report ios? Not sure if that's worth it.. Would be something like this:\n```ruby\ndef report(platform:)\n  xcode_summary.report \"xcodebuild-#{platform}.json\"\nend\nusage\nreport(platform: ios)\n``. Nit:Handle the*. Also, can we explain what this.custom(String)does / can be used for?. Not sure if it would be worth mentioning that handling the case is the preferred way to exhaust a switch here, as a default case might then not catch any new cases in future migrations.. Nit: a comma after@autoclosure.. Is this correct?. I think this should be12.0.0or at least12.0.0-beta.2.. This is a breaking change. Did we mention it in the release notes? I can't see it.. Same here. Is this still needed? It is used in multiple files.. Think it should be 4.2. Want me to open a PR?. I can do it too if you want! :). Ah, this was because of'let' properties are implicitly 'final'; use 'public' instead of 'open'`; it should therefore not be a breaking change.. ",
    "kylef": "I agree with @BasThomas, my intentions for using URITemplate in iOS applications are a little different than the goals of Moya. The compile-time checking in Moya is making upfront assumptions on how the API currently works and assumes that to always be the case in the future. If you're already hard-coding the URIs then I don't think it adds too much using URI Template in this case and just adds unnecessary complexity. Unless you are looking to use a common format to specify URLs which you can share against your backend or other clients.\nThe goals behind URI Template (and other libraries I created using URI Template) was to communicate with APIs using the REST architectural style similar to the GitHub API. This would allow machines to dynamically understanding how the API works instead of it having up-front hard-coded knowledge.\nAllowing a machine to learn how to communicate with a foreign API providing it has shared semantic understanding of the given domain.\nInstead an approach without hard-coding upfront knowledge of the API layout might look as follows:\n```swift\nlet client = Client()\n// Find the master commit for kylef/URITemplate.swift repository on GitHub\nclient.enter(\"https://api.github.com\")\n  .flatMap { client.load($0.transition(\"repository\", [\"owner\": \"kylef\", \"repo\": \"URITemplate.swift\"]) }\n  .flatMap { client.load($0.transition(\"branches\", [\"branch\": \"master\"]) }\n  .map { $0.attributes[\"commit\"] }\n```\nWhere I've entered the API at it's root and  then followed some of the transitions the API has offered. The client has an understanding of a repository and know a specific owner and repository I'm looking for.\njson\n{ \"repository_url\": \"https://api.github.com/repos/{owner}/{repo}\" }\nNOTE: The client could just as easily look at all repositories for a user by not expanding the repo component of the URI.\nThen following a transition called branches with a branch parameter.\njson\n{ \"branches_url\": \"https://api.github.com/repos/kylef/URITemplate.swift/branches{/branch}\" }\nObviously this example makes a lot of assumptions about the features in the API so it should instead check for the features and the types of variables that can be supplied to the transitions. For brevity and simplicity the example is as-is.. I agree with @BasThomas, my intentions for using URITemplate in iOS applications are a little different than the goals of Moya. The compile-time checking in Moya is making upfront assumptions on how the API currently works and assumes that to always be the case in the future. If you're already hard-coding the URIs then I don't think it adds too much using URI Template in this case and just adds unnecessary complexity. Unless you are looking to use a common format to specify URLs which you can share against your backend or other clients.\nThe goals behind URI Template (and other libraries I created using URI Template) was to communicate with APIs using the REST architectural style similar to the GitHub API. This would allow machines to dynamically understanding how the API works instead of it having up-front hard-coded knowledge.\nAllowing a machine to learn how to communicate with a foreign API providing it has shared semantic understanding of the given domain.\nInstead an approach without hard-coding upfront knowledge of the API layout might look as follows:\n```swift\nlet client = Client()\n// Find the master commit for kylef/URITemplate.swift repository on GitHub\nclient.enter(\"https://api.github.com\")\n  .flatMap { client.load($0.transition(\"repository\", [\"owner\": \"kylef\", \"repo\": \"URITemplate.swift\"]) }\n  .flatMap { client.load($0.transition(\"branches\", [\"branch\": \"master\"]) }\n  .map { $0.attributes[\"commit\"] }\n```\nWhere I've entered the API at it's root and  then followed some of the transitions the API has offered. The client has an understanding of a repository and know a specific owner and repository I'm looking for.\njson\n{ \"repository_url\": \"https://api.github.com/repos/{owner}/{repo}\" }\nNOTE: The client could just as easily look at all repositories for a user by not expanding the repo component of the URI.\nThen following a transition called branches with a branch parameter.\njson\n{ \"branches_url\": \"https://api.github.com/repos/kylef/URITemplate.swift/branches{/branch}\" }\nObviously this example makes a lot of assumptions about the features in the API so it should instead check for the features and the types of variables that can be supplied to the transitions. For brevity and simplicity the example is as-is.. I'm surprised expect doesn't use @autoclosure\n. Ah, I haven't used Quick/Nimble yet\n. ",
    "dowhilenet": "thanks. I download Moya-4.4.0 to my project. dragging the Moya.xcodeproj to project  and remove RxSwift \u3001ReactiveCocoa also remove the import Alamofire from the Moya files. Click on the + button under the \"Embedded Binaries\" section. add the Moya.framework.  Then have an error:\nclang: error: no such file or directory: '/Users/xiaolei/Library/Developer/Xcode/DerivedData/WeatherQ-cvhqwncoeewmnxemtgteetjgepxd/Build/Products/Debug-iphonesimulator/Moya.framework/Moya'\n\n. Think you, I will try other methods.\n. I think this is a bug in Xcode. When I delete the project to re-establish this project, everything becomes normal.Thank you for your answer, then what is the problem I will initiate issue.\n. ",
    "tomburns": "I think this would cause the RAC4 support to diverge a bit from the legacy RACSignal interface, but I'm not sure that's a bad thing either.\n. I believe anything that conforms to ErrorType can be bridged to an NSError, but honestly I don't know enough about the older RACSignal ReactiveCocoa interface to guarantee that'd work in this specific case.\n. #289 is nearly merged, so I'm moving conversation back here to continue discussing which associated value's we'd like to see on the newly minted MoyaError type.\nHere's what we have currently:\npublic enum MoyaError: ErrorType {\n    case ImageMapping(MoyaResponse)\n    case JSONMapping(MoyaResponse)\n    case StringMapping(MoyaResponse)\n    case StatusCode(Int,MoyaResponse)\n    case Data(MoyaResponse)\n    case Underlying(ErrorType)\n}\nAt the very least i think it might be helpful to add names to these tuples for clarity's sake; does anyone else have suggestions?\n. Hmm, tests are passing for me locally after that last commit. Let me know if there's something I can do to make Travis happy :)\n. Pushed a simple comparison function for the error type; I wasn't comfortable shoving that operation into Equatable (or a custom operator) without further discussion. Also updated the changelog.\n. While we're looking at this change, it might be worth examining which associated values we'd like to have for each error. As an example: I've already added the status code as an associated Int on the .StatusCode error, but it might be nice to have the expected range which resulted in the error as well? e.g. .StatusCode(404,200...299,response)\n. To keep the associated values clean (especially given their lack of names) we could also consider specialized struts, like so:\n```\npublic enum MoyaError: ErrorType {\n    case StatusCode(StatusCodeErrorMetadata)\n    [...]\n}\nstruct StatusCodeErrorMetadata {\n    let encounteredStatusCode: Int\n    let expectedStatusRange: Range\n    let response: MoyaResponse\n}\n```\nThat struct's name is a bit of a mouthful, but I like that it keeps us down to one associated value and the convention is fairly straightforward.\n. Ah, glad to learn that names work! No idea why I was so sure they didn't. \n+1 for associated values, then :joy: \n. I broke it again! :tada: \nTests are passing locally for me; not sure what's up: \n```\ntburns@Monarch ~/code/Moya [error-type *]\n\u00b1 % rake test                                                                                                                              !10072\nset -o pipefail && xcodebuild -workspace 'Demo.xcworkspace' -scheme 'Demo' -configuration 'Debug' -sdk iphonesimulator -destination platform='iOS Simulator',OS='9.0',name='iPhone 6' build test | xcpretty -c --test\n2015-11-08 23:02:13.836 xcodebuild[73178:2107923] [MT] IDETestOperationsObserverDebug: (FC2F7820-8995-42A0-8796-B9ADFD7D4C44) Beginning test session FC2F7820-8995-42A0-8796-B9ADFD7D4C44 with Xcode 7B91b on target  {\n        SimDevice: SimDevice : iPhone 6 (C5B3EBC8-B35E-44DE-8D89-72DCB622959D) : state={ Shutdown } deviceType={ SimDeviceType : com.apple.CoreSimulator.SimDeviceType.iPhone-6 } runtime={ SimRuntime : 9.0 (13A344) - com.apple.CoreSimulator.SimRuntime.iOS-9-0 }\n} (9.0 (13A344))\n..................................................................\n Executed 66 tests, with 0 failures (0 unexpected) in 5.932 (5.959) seconds\n\n```\n. @JRHeaton The only nice thing about the current shape of that comparison function is that it's exhaustive, and will generate warnings if we add to the enum. Your version is certainly the more handsome of the two; what does the group think?\nAs an aside, the latest CI failure appears to be Travis flapping again.\n. I think this can be merged as a first step, unless we want to go all-in on the new error type all at once. If there are any pending changes I've missed, let me know and i'll try to address them.\n. Scanning the thread, the only things that I see as unresolved are what associated values we want to make available on each error, and naming them inside the tuples. Do we want to take care of that before merging, or just before releasing this into the wild?\n. Merge to master: :white_check_mark: \nIf someone could give that a quick spot check I think we're good to go.\n. Thanks for the feedback! Good catches all around; I agree with all the proposed changes and I'll try to get this updated today.\n. I believe this is ready for further review; as it stands I was able to make the suggested changes without touching the Rx extensions or tests. I'm a little unhappy with that revised attempt at passing along the status code error (see my comment on the latest commit above) , so if anyone has any tips I'm all ears.\n. This is a great idea :+1: \n. I currently use cocoapods to integrate Moya in my projects, but subspecs are basically a proprietary notion and the library needs to be easily usable for everyone without them (and without simultaneously requiring Rx and RAC for all users, obviously).\n+1 for breaking out the extensions, in the absence of any other apparent solution.\n. Nice; that'll be great if it makes it in. My major point in the previous comment was that we should probably make good support for the pending first-party package manager our top priority, even if it involves some additional overhead. If we can pull off the current structure in SPM, so much the better.\n. ...and of course that did it. Thanks! :laughing: \n. For anyone curious, it was colliding with Alamofire.Response.\n. @ashfurrow Thinking about it, I'm not a huge fan of the fact that we're knowingly shadowing a type from our dependency; this is something that's likely to come up for all consumers interacting with the type from outside the Moya/RxMoya modules. I'll open another issue for discussion.\n. I'm not sure I have a strong opinion either way, just wanted to open the table for discussion.\n. @gregpardo Certainly, and perhaps the real issue here is that the Xcode error when you encounter this sort of ambiguity doesn't volunteer the more specific types as a FIXME. As I said, I wasn't sure any action was necessary here, but figured it couldn't hurt to make sure we had consensus either way :)\nThanks for the discussion!\n. Forgot to comment earlier: I wasn't clear on a good replacement for this line\n. This isn't equality per se though; to my mind that would involve the associated values matching as well.\nMoving it to an extension makes sense; I'm trying to come up with non-testing use cases but nothing so far. Maybe we move it into the test target for now and see if we miss it?\n. ",
    "aamctustwo": ":+1: to the idea of a ParameterEncodable protocol.\n. @jasl You can used labeled parameters with an enum in Swift, they're just not required. So for longer endpoints such as in your example, I would definitely use labeled parameters to improve readability.\nSo your endpoint would become:\nswift\nenum MyTarget {\n  case Topics(offset: Int?, limit: Int?, type: String?, nodeID: Int?)\n}\nAnd using your provider, it would be:\nswift\nlet provider = MoyaProvider<MyTarget>()\nprovider.request(.Topics(offset: 20, limit: nil, type: nil, nodeID: nil), completion { ... })\n. @jasl You can provide default parameter values in your definition of the parameters variable by using the nil coalescing operator. Example:\nswift\nvar parameters: [String: AnyObject]? {\n  switch self {\n    case let .Topics(offset, limit, type, nodeID):\n      return [\"offset\" : offset ?? 20,\n                 \"limit\" : limit ?? 20,\n                 \"type\" : type ?? \"recent\",\n                 \"node_id\" : nodeID ?? 1]\n  }\n}\nAlso, for cases where you have hundreds of endpoints, it may be better to categorize them into separate enums anyway for organization. It'd be messy for than many endpoints in any type structure - enum, struct, or class.\n. @skornos A couple of questions to help me understand your situation. I want to make sure I'm not missing anything!\n1. Why are you waiting till the call is made to check if the request is authenticated? Why not have a bool that is checked prior to preparing any network requests that would need to be authenticated?\n2. Why are you concerned about checking the authentication at the time of the request? You will need to implement handling for a failed authentication response anyway in case their token/sessions/etc. has expired. This handling would include re-authentication and re-making the original (now properly authenticated) request.\nIn the end it may not be such a bad idea in the end to separate out your authentication endpoint from your other endpoints. There are a number of Moya regulars who use multiple TargetTypes and Providers to separate out categories of endpoints.\n. You add the plugins as part of the initialization for your provider. It is passed in as an array. As an example, to add the NetworkLoggerPlugin to your provider, use the following sample code:\nswift\nlet plugins: [PluginType] = [NetworkLoggerPlugin(verbose: true)]\nlet myProvider = MoyaProvider<MyTarget>(plugins: plugins)\nHere is the full spec for the init of a MoyaProvider.\n. Not yet. This is being tracked in #114 Implement uploading of multpart/form-data.\n. To debug using Moya, I generally take advantage of the NetworkLoggerPlugin. See the Providers documentation.\n. To debug using Moya, I generally take advantage of the NetworkLoggerPlugin. See the Providers documentation.\n. ",
    "offbye": "How to  add post data in MoyaProvider subclass?  Is there a solution?\n. Who knows how to post a json string use Moya?\n. ",
    "fruitcoder": "Hey @ashfurrow! Do you use GraphQL in combination with Moya? Is there any update on how to make parameter encoding more generic? I'm very new to GraphQL and try to integrate Apollo iOS with how I use Moya and Alamofire to make network requests. \n. Thanks @ashfurrow for the great reply, I just took a look at your example (I've already taken a look at the whole project for reference). So you take a look at the page - a parameter depending on the target - which is a perfect fit here. \nI already implemented my test before I read your answer. I use a global variable that is changed after the first request was made and the test works fine. Personally, I would have preferred to keep the state inside the Provider subclass as a static variable, but Static store properties not yet supported in generic types, so I am happy for now. \nIt's a great idea to discuss general best practices for Moya in the documentation (especially for testing), since I find myself so often trying to apply the sometimes specific solutions in the Artsy project to my own. I can think of special test providers, that I already use in my tests (like FailingProvider, which always returns a 404 response similar to a behaviour described in #533). \nAlso, I still haven't found a best practice on how to handle my stubs. I currently have them as JSON files in the test target, which works ok, but I would prefer to have a setup like:\n{ define values as variables }\n{ create JSON with variables }\n{ give JSON to provider as a stubbed response }\n{ use provider to get response }\n{ - parsing: check that the values returned are correctly parsed by comparing them with the variables declared above }\n{ - viewModel: check that the viewModel returns correct values based on variables declared above\n}\nThe motivation behind this is that I can't make a typo when asserting something by reusing the variables (actually constants) instead of taking a look at the value in my JSON stub. I've seen that you already discussed on how to inject the responses easier but I just can't find out where it was. It looked very promising!\n. That's EXACTLY the issue I was talking about!\nThe list looks like a very good start and linking to an actual implementation sounds great as well \ud83d\udc4d \nHaving just reread the list, I really cannot think of anything else right now. It would cover all my testing scenarios. \nAnother thing that doesn't relate to testing specifically is how to handle pagination. I don't know if there should be a snippet for that as well (especially if you want to focus on testing practices first). Currently, I use the following approach:\n```\npublic struct PaginationInfo {\n  let page: Int\n  let limit: Int\n  let offset: String?\n}\nenum MyAPI {\n  case Search(query: String, pagination: PaginationInfo?)\n  case UserByName(name: String, pagination: PaginationInfo?)\n  ...\nfunc appending(paginationInfo info: PaginationInfo) -> MyAPI {\n    switch self {\n      case let Search(query, _):\n        return Search(query: query, pagination: info)\n      ... \n    }\n  }\n}\n```\nPagination might work differently for each API, but a general approach might be helpful. The client then uses the appending function inside the request call to add the pagination info.\nAnyways, do you want to open a new issue for the community to discuss the list?\n. Carthage Version: 0.18.1\nxcrun swift -version: Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)\nXcode: Xcode 8.1 8B62\nI also have an issue when resolving Moya dependencies in the following line\nRxCococa*** Building scheme \"RxCocoa-iOS\" in Rx.xcworkspace\nafter I tried to rebuild the frameworks with carthage update --platform iOS --no-use-binaries (for the new Swift 3.0.1). Should this be posted in RxSwift or might this be resolved by updating the Cartfile in Moya?\nThe specific error in xcodebuilt output is duplicate symbol __TMRbBp in ...KVOObservable.o and ...UIButton+Rx.o which might be related to this issue\n. Carthage Version: 0.18.1\nxcrun swift -version: Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)\nXcode: Xcode 8.1 8B62\nI also have an issue when resolving Moya dependencies in the following line\nRxCococa*** Building scheme \"RxCocoa-iOS\" in Rx.xcworkspace\nafter I tried to rebuild the frameworks with carthage update --platform iOS --no-use-binaries (for the new Swift 3.0.1). Should this be posted in RxSwift or might this be resolved by updating the Cartfile in Moya?\nThe specific error in xcodebuilt output is duplicate symbol __TMRbBp in ...KVOObservable.o and ...UIButton+Rx.o which might be related to this issue\n. ",
    "codecov-io": "Current coverage is 72.22%\n\nMerging #296 into master will increase coverage by +1.11% as of df44c41\n\ndiff\n@@            master    #296   diff @@\n======================================\n  Files           12      12       \n  Stmts          509     540    +31\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            362     390    +28\n  Partial          0       0       \n- Missed         147     150     +3\n\nReview entire Coverage Diff as of df44c41\n\n\nUncovered Suggestions\n\n+9.07% via ...rkLoggerPlugin.swift#28...76 \n+2.96% via Source/Moya.swift#18...33 \n+1.66% via ...e/MoyaResponse.swift#33...41 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.22%\nMerging #296 into master will increase coverage by +1.11% as of df44c41\n\ndiff\n@@            master    #296   diff @@\n======================================\n  Files           12      12       \n  Stmts          509     540    +31\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            362     390    +28\n  Partial          0       0       \n- Missed         147     150     +3\n\nReview entire Coverage Diff as of df44c41\n\n\nUncovered Suggestions\n\n+9.07% via ...rkLoggerPlugin.swift#28...76 \n+2.96% via Source/Moya.swift#18...33 \n+1.66% via ...e/MoyaResponse.swift#33...41 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.22%\nMerging #296 into master will increase coverage by +1.11% as of df44c41\n\ndiff\n@@            master    #296   diff @@\n======================================\n  Files           12      12       \n  Stmts          509     540    +31\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            362     390    +28\n  Partial          0       0       \n- Missed         147     150     +3\n\nReview entire Coverage Diff as of df44c41\n\n\nUncovered Suggestions\n\n+9.07% via ...rkLoggerPlugin.swift#28...76 \n+2.96% via Source/Moya.swift#18...33 \n+1.66% via ...e/MoyaResponse.swift#33...41 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.13%\nMerging #297 into master will increase coverage by +7.91% as of 82678ce\n\ndiff\n@@            master    #297   diff @@\n======================================\n  Files           12      13     +1\n  Stmts          540     579    +39\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            390     464    +74\n  Partial          0       0       \n+ Missed         150     115    -35\n\nReview entire Coverage Diff as of 82678ce\n\n\nUncovered Suggestions\n\n+8.47% via ...rkLoggerPlugin.swift#28...76 \n+2.77% via Source/Moya.swift#18...33 \n+1.56% via ...rkLoggerPlugin.swift#12...20 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.13%\nMerging #297 into master will increase coverage by +7.91% as of 82678ce\n\ndiff\n@@            master    #297   diff @@\n======================================\n  Files           12      13     +1\n  Stmts          540     579    +39\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            390     464    +74\n  Partial          0       0       \n+ Missed         150     115    -35\n\nReview entire Coverage Diff as of 82678ce\n\n\nUncovered Suggestions\n\n+8.47% via ...rkLoggerPlugin.swift#28...76 \n+2.77% via Source/Moya.swift#18...33 \n+1.56% via ...rkLoggerPlugin.swift#12...20 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.22%\nMerging #299 into master will not affect coverage as of 637a753\n\ndiff\n@@            master    #299   diff @@\n======================================\n  Files           12      12       \n  Stmts          540     540       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            390     390       \n  Partial          0       0       \n  Missed         150     150\n\nReview entire Coverage Diff as of 637a753\n\n\nUncovered Suggestions\n\n+9.07% via ...rkLoggerPlugin.swift#28...76 \n+2.96% via Source/Moya.swift#18...33 \n+1.66% via ...e/MoyaResponse.swift#33...41 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.13%\nMerging #301 into master will not affect coverage as of 1644687\n\ndiff\n@@            master    #301   diff @@\n======================================\n  Files           13      13       \n  Stmts          579     579       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            464     464       \n  Partial          0       0       \n  Missed         115     115\n\nReview entire Coverage Diff as of 1644687\n\n\nUncovered Suggestions\n\n+8.47% via ...rkLoggerPlugin.swift#28...76 \n+2.77% via Source/Moya.swift#18...33 \n+1.56% via ...rkLoggerPlugin.swift#12...20 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 81.16%\nMerging #302 into master will increase coverage by +1.03% as of f4ab7e7\n\ndiff\n@@            master    #302   diff @@\n======================================\n  Files           13      12     -1\n  Stmts          579     568    -11\n  Branches         0       0       \n  Methods                          \n======================================\n- Hit            464     461     -3\n  Partial          0       0       \n+ Missed         115     107     -8\n\nReview entire Coverage Diff as of f4ab7e7\n\n\nUncovered Suggestions\n\n+8.62% via ...rkLoggerPlugin.swift#28...76 \n+1.93% via ...ource/Response.swift#75...85 \n+1.58% via ...rkLoggerPlugin.swift#12...20 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.13%\nMerging #304 into master will not affect coverage as of 1726e03\n\ndiff\n@@            master    #304   diff @@\n======================================\n  Files           13      13       \n  Stmts          579     579       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            464     464       \n  Partial          0       0       \n  Missed         115     115\n\nReview entire Coverage Diff as of 1726e03\n\n\nUncovered Suggestions\n\n+8.47% via ...rkLoggerPlugin.swift#28...76 \n+2.77% via Source/Moya.swift#15...30 \n+1.56% via ...rkLoggerPlugin.swift#12...20 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.30%\nMerging #305 into master will increase coverage by +0.17% as of d5a8a72\n\ndiff\n@@            master   #305   diff @@\n=====================================\n  Files           13     13       \n  Stmts          579    584     +5\n  Branches         0      0       \n  Methods                         \n=====================================\n+ Hit            464    469     +5\n  Partial          0      0       \n  Missed         115    115\n\nReview entire Coverage Diff as of d5a8a72\n\n\nUncovered Suggestions\n\n+8.39% via ...rkLoggerPlugin.swift#28...76 \n+2.74% via Source/Moya.swift#15...30 \n+1.54% via ...rkLoggerPlugin.swift#12...20 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 80.13%\nMerging #306 into master will not affect coverage as of c06be6e\n\ndiff\n@@            master    #306   diff @@\n======================================\n  Files           13      13       \n  Stmts          579     579       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            464     464       \n  Partial          0       0       \n  Missed         115     115\n\nReview entire Coverage Diff as of c06be6e\n\n\nUncovered Suggestions\n\n+8.47% via ...rkLoggerPlugin.swift#28...76 \n+2.77% via Source/Moya.swift#18...33 \n+1.56% via ...rkLoggerPlugin.swift#12...20 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 84.84%\nMerging #307 into master will increase coverage by +11.91% as of cc6b042\n\ndiff\n@@            master    #307   diff @@\n======================================\n  Files           14      13     -1\n  Stmts          665     640    -25\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            485     543    +58\n  Partial          0       0       \n+ Missed         180      97    -83\n\nReview entire Coverage Diff as of cc6b042\n\n\nUncovered Suggestions\n\n+2.50% via Source/Result.swift#53...68 \n+1.72% via Source/Result.swift#38...48 \n+1.25% via ...ource/Response.swift#75...82 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.93%\nMerging #310 into master will decrease coverage by -7.37% as of bce0dbe\n\ndiff\n@@            master    #310   diff @@\n======================================\n  Files           13      14     +1\n  Stmts          584     665    +81\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            469     485    +16\n  Partial          0       0       \n- Missed         115     180    +65\n\nReview entire Coverage Diff as of bce0dbe\n\n\nUncovered Suggestions\n\n+7.37% via ...rkLoggerPlugin.swift#33...81 \n+2.40% via Source/Moya.swift#15...30 \n+2.40% via Source/Result.swift#53...68 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.93%\nMerging #315 into master will not affect coverage as of 06a9a48\n\ndiff\n@@            master    #315   diff @@\n======================================\n  Files           14      14       \n  Stmts          665     665       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            485     485       \n  Partial          0       0       \n  Missed         180     180\n\nReview entire Coverage Diff as of 06a9a48\n\n\nUncovered Suggestions\n\n+7.37% via ...rkLoggerPlugin.swift#33...81 \n+2.40% via Source/Moya.swift#15...30 \n+2.40% via Source/Result.swift#53...68 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 72.93%\nMerging #316 into master will not affect coverage as of f2972ea\n\ndiff\n@@            master    #316   diff @@\n======================================\n  Files           14      14       \n  Stmts          665     665       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            485     485       \n  Partial          0       0       \n  Missed         180     180\n\nReview entire Coverage Diff as of f2972ea\n\n\nUncovered Suggestions\n\n+7.37% via ...rkLoggerPlugin.swift#33...81 \n+2.40% via Source/Moya.swift#15...30 \n+2.40% via Source/Result.swift#53...68 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 84.84%\nMerging #324 into master will not affect coverage as of 1113bf8\n\ndiff\n@@            master    #324   diff @@\n======================================\n  Files           13      13       \n  Stmts          640     640       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            543     543       \n  Partial          0       0       \n  Missed          97      97\n\nReview entire Coverage Diff as of 1113bf8\n\n\nUncovered Suggestions\n\n+2.50% via Source/Result.swift#53...68 \n+1.72% via Source/Result.swift#38...48 \n+1.25% via ...ource/Response.swift#75...82 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 84.63%\nMerging #328 into master will decrease coverage by -0.21% as of 0e743ca\n\ndiff\n@@            master    #328   diff @@\n======================================\n  Files           13      13       \n  Stmts          640     651    +11\n  Branches         0       0       \n  Methods          0               \n======================================\n+ Hit            543     551     +8\n  Partial          0       0       \n- Missed          97     100     +3\n\nReview entire Coverage Diff as of 0e743ca\n\n\nUncovered Suggestions\n\n+2.46% via Source/Result.swift#53...68 \n+1.69% via Source/Result.swift#38...48 \n+1.23% via ...ource/Response.swift#75...82 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 84.84%\nMerging #329 into master will not affect coverage as of d76a93a\n\ndiff\n@@            master    #329   diff @@\n======================================\n  Files           13      13       \n  Stmts          640     640       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            543     543       \n  Partial          0       0       \n  Missed          97      97\n\nReview entire Coverage Diff as of d76a93a\n\n\nUncovered Suggestions\n\n+2.50% via Source/Result.swift#53...68 \n+1.72% via Source/Result.swift#38...48 \n+1.25% via ...ource/Response.swift#75...82 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 84.84%\nMerging #336 into master will not affect coverage as of 47bc726\n\ndiff\n@@            master    #336   diff @@\n======================================\n  Files           13      13       \n  Stmts          640     640       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            543     543       \n  Partial          0       0       \n  Missed          97      97\n\nReview entire Coverage Diff as of 47bc726\n\n\nUncovered Suggestions\n\n+2.50% via Source/Result.swift#53...68 \n+1.72% via Source/Result.swift#38...48 \n+1.25% via ...ource/Response.swift#75...82 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 84.84%\nMerging #337 into master will not affect coverage as of 3bbd0e9\n\ndiff\n@@            master    #337   diff @@\n======================================\n  Files           13      13       \n  Stmts          640     640       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            543     543       \n  Partial          0       0       \n  Missed          97      97\n\nReview entire Coverage Diff as of 3bbd0e9\n\n\nUncovered Suggestions\n\n+2.50% via Source/Result.swift#53...68 \n+1.72% via Source/Result.swift#38...48 \n+1.25% via ...ource/Response.swift#75...82 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 85.20%\nMerging #343 into master will increase coverage by +85.20% as of 7e37680\n\ndiff\n@@            master   #343   diff @@\n=====================================\n  Files            3     13    +10\n  Stmts           51    473   +422\n  Branches         0      0       \n  Methods                         \n=====================================\n+ Hit              0    403   +403\n  Partial          0      0       \n- Missed          51     70    +19\n\nReview entire Coverage Diff as of 7e37680\n\n\nUncovered Suggestions\n\n+1.69% via Source/Result.swift#48...55 \n+1.26% via ...ource/Response.swift#76...81 \n+1.26% via Source/Result.swift#93...98 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.30%\nMerging #344 into master will increase coverage by +6.10% as of b9d6799\n\ndiff\n@@            master   #344   diff @@\n=====================================\n  Files           13     13       \n  Stmts          473    437    -36\n  Branches         0      0       \n  Methods                         \n=====================================\n- Hit            403    399     -4\n  Partial          0      0       \n+ Missed          70     38    -32\n\nReview entire Coverage Diff as of b9d6799\n\n\nUncovered Suggestions\n\n+1.37% via ...ource/Response.swift#76...81 \n+1.14% via ...+ReactiveCocoa.swift#54...58 \n+1.14% via Source/Moya.swift#177...181 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 85.20%\nMerging #346 into master will increase coverage by +85.20% as of 45f8c18\n\ndiff\n@@            master   #346   diff @@\n=====================================\n  Files            3     13    +10\n  Stmts           51    473   +422\n  Branches         0      0       \n  Methods                         \n=====================================\n+ Hit              0    403   +403\n  Partial          0      0       \n- Missed          51     70    +19\n\nReview entire Coverage Diff as of 45f8c18\n\n\nUncovered Suggestions\n\n+1.69% via Source/Result.swift#48...55 \n+1.26% via ...ource/Response.swift#76...81 \n+1.26% via Source/Result.swift#93...98 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 85.20%\nMerging #351 into master will not affect coverage as of 458a671\n\ndiff\n@@            master   #351   diff @@\n=====================================\n  Files           13     13       \n  Stmts          473    473       \n  Branches         0      0       \n  Methods                         \n=====================================\n  Hit            403    403       \n  Partial          0      0       \n  Missed          70     70\n\nReview entire Coverage Diff as of 458a671\n\n\nUncovered Suggestions\n\n+1.69% via Source/Result.swift#48...55 \n+1.26% via ...ource/Response.swift#76...81 \n+1.26% via Source/Result.swift#93...98 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.30%\nMerging #361 into master will not affect coverage as of c972fdd\n\ndiff\n@@            master   #361   diff @@\n=====================================\n  Files           13     13       \n  Stmts          437    437       \n  Branches         0      0       \n  Methods                         \n=====================================\n  Hit            399    399       \n  Partial          0      0       \n  Missed          38     38\n\nReview entire Coverage Diff as of c972fdd\n\n\nUncovered Suggestions\n\n+1.37% via ...ource/Response.swift#76...81 \n+1.14% via ...+ReactiveCocoa.swift#54...58 \n+1.14% via Source/Moya.swift#177...181 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #364 into master will not affect coverage as of 719bd22\n\ndiff\n@@            master    #364   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 719bd22\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #372 into master will not affect coverage as of b5f1e7b\n\ndiff\n@@            master    #372   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of b5f1e7b\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 86.57%\nMerging #376 into master will decrease coverage by -4.90% as of 21f352b\n\ndiff\n@@            master    #376   diff @@\n======================================\n  Files           13      15     +2\n  Stmts          446     484    +38\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            408     419    +11\n  Partial          0       0       \n- Missed          38      65    +27\n\nReview entire Coverage Diff as of 21f352b\n\n\nUncovered Suggestions\n\n+2.68% via ...ource/Provider.swift#93...105 \n+1.23% via ...ource/Response.swift#76...81 \n+1.23% via ...ource/Endpoint.swift#80...85 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #377 into master will not affect coverage as of b8f8955\n\ndiff\n@@            master    #377   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of b8f8955\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #380 into master will not affect coverage as of 9ac7da2\n\ndiff\n@@            master    #380   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 9ac7da2\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #382 into master will not affect coverage as of 778a02f\n\ndiff\n@@            master    #382   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 778a02f\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #382 into master will not affect coverage as of 778a02f\n\ndiff\n@@            master    #382   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 778a02f\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #387 into master will not affect coverage as of 831cc03\n\ndiff\n@@            master    #387   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 831cc03\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #387 into master will not affect coverage as of 831cc03\n\ndiff\n@@            master    #387   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 831cc03\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #388 into master will not affect coverage as of 666bac6\n\ndiff\n@@            master    #388   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 666bac6\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #388 into master will not affect coverage as of 666bac6\n\ndiff\n@@            master    #388   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 666bac6\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #389 into master will not affect coverage as of 48b1402\n\ndiff\n@@            master    #389   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 48b1402\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.47%\nMerging #389 into master will not affect coverage as of 48b1402\n\ndiff\n@@            master    #389   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     446       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            408     408       \n  Partial          0       0       \n  Missed          38      38\n\nReview entire Coverage Diff as of 48b1402\n\n\nUncovered Suggestions\n\n+1.35% via ...ource/Response.swift#76...81 \n+1.13% via ...+ReactiveCocoa.swift#54...58 \n+1.13% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.16%\nMerging #394 into master will decrease coverage by -0.31% as of 2910a07\n\ndiff\n@@            master    #394   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     453     +7\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            408     413     +5\n  Partial          0       0       \n- Missed          38      40     +2\n\nReview entire Coverage Diff as of 2910a07\n\n\nUncovered Suggestions\n\n+1.33% via ...ource/Response.swift#76...81 \n+1.11% via ...+ReactiveCocoa.swift#54...58 \n+1.11% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.16%\nMerging #394 into master will decrease coverage by -0.31% as of 2910a07\n\ndiff\n@@            master    #394   diff @@\n======================================\n  Files           13      13       \n  Stmts          446     453     +7\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            408     413     +5\n  Partial          0       0       \n- Missed          38      40     +2\n\nReview entire Coverage Diff as of 2910a07\n\n\nUncovered Suggestions\n\n+1.33% via ...ource/Response.swift#76...81 \n+1.11% via ...+ReactiveCocoa.swift#54...58 \n+1.11% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.16%\nMerging #396 into master will not affect coverage as of b249606\n\ndiff\n@@            master    #396   diff @@\n======================================\n  Files           13      13       \n  Stmts          453     453       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            413     413       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of b249606\n\n\nUncovered Suggestions\n\n+1.33% via ...ource/Response.swift#76...81 \n+1.11% via ...+ReactiveCocoa.swift#54...58 \n+1.11% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.16%\nMerging #396 into master will not affect coverage as of b249606\n\ndiff\n@@            master    #396   diff @@\n======================================\n  Files           13      13       \n  Stmts          453     453       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            413     413       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of b249606\n\n\nUncovered Suggestions\n\n+1.33% via ...ource/Response.swift#76...81 \n+1.11% via ...+ReactiveCocoa.swift#54...58 \n+1.11% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.16%\nMerging #398 into master will not affect coverage as of 53c66d4\n\ndiff\n@@            master    #398   diff @@\n======================================\n  Files           13      13       \n  Stmts          453     453       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            413     413       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 53c66d4\n\n\nUncovered Suggestions\n\n+1.33% via ...ource/Response.swift#76...81 \n+1.11% via ...+ReactiveCocoa.swift#54...58 \n+1.11% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.16%\nMerging #398 into master will not affect coverage as of 53c66d4\n\ndiff\n@@            master    #398   diff @@\n======================================\n  Files           13      13       \n  Stmts          453     453       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            413     413       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 53c66d4\n\n\nUncovered Suggestions\n\n+1.33% via ...ource/Response.swift#76...81 \n+1.11% via ...+ReactiveCocoa.swift#54...58 \n+1.11% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.72%\nMerging #401 into master will increase coverage by +0.56% as of 9ac593d\n\ndiff\n@@            master    #401   diff @@\n======================================\n  Files           13      13       \n  Stmts          453     459     +6\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            413     421     +8\n  Partial          0       0       \n+ Missed          40      38     -2\n\nReview entire Coverage Diff as of 9ac593d\n\n\nUncovered Suggestions\n\n+1.30% via ...ource/Response.swift#76...81 \n+1.09% via ...+ReactiveCocoa.swift#54...58 \n+1.09% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.72%\nMerging #401 into master will increase coverage by +0.56% as of 9ac593d\n\ndiff\n@@            master    #401   diff @@\n======================================\n  Files           13      13       \n  Stmts          453     459     +6\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            413     421     +8\n  Partial          0       0       \n+ Missed          40      38     -2\n\nReview entire Coverage Diff as of 9ac593d\n\n\nUncovered Suggestions\n\n+1.30% via ...ource/Response.swift#76...81 \n+1.09% via ...+ReactiveCocoa.swift#54...58 \n+1.09% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.37%\nMerging #404 into master will decrease coverage by -0.35% as of 62e90a7\n\ndiff\n@@            master    #404   diff @@\n======================================\n  Files           13      13       \n  Stmts          459     464     +5\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            421     424     +3\n  Partial          0       0       \n- Missed          38      40     +2\n\nReview entire Coverage Diff as of 62e90a7\n\n\nUncovered Suggestions\n\n+2.16% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.37%\nMerging #404 into master will decrease coverage by -0.35% as of 62e90a7\n\ndiff\n@@            master    #404   diff @@\n======================================\n  Files           13      13       \n  Stmts          459     464     +5\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            421     424     +3\n  Partial          0       0       \n- Missed          38      40     +2\n\nReview entire Coverage Diff as of 62e90a7\n\n\nUncovered Suggestions\n\n+2.16% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.32%\nMerging #405 into master will decrease coverage by -0.40% as of 15030a2\n\ndiff\n@@            master    #405   diff @@\n======================================\n  Files           13      13       \n  Stmts          459     461     +2\n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            421     421       \n  Partial          0       0       \n- Missed          38      40     +2\n\nReview entire Coverage Diff as of 15030a2\n\n\nUncovered Suggestions\n\n+2.17% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.32%\nMerging #405 into master will decrease coverage by -0.40% as of 15030a2\n\ndiff\n@@            master    #405   diff @@\n======================================\n  Files           13      13       \n  Stmts          459     461     +2\n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            421     421       \n  Partial          0       0       \n- Missed          38      40     +2\n\nReview entire Coverage Diff as of 15030a2\n\n\nUncovered Suggestions\n\n+2.17% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.37%\nMerging #406 into master will increase coverage by +0.05% as of a0c8ac4\n\ndiff\n@@            master    #406   diff @@\n======================================\n  Files           13      13       \n  Stmts          461     464     +3\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            421     424     +3\n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of a0c8ac4\n\n\nUncovered Suggestions\n\n+2.16% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.37%\nMerging #406 into master will increase coverage by +0.05% as of a0c8ac4\n\ndiff\n@@            master    #406   diff @@\n======================================\n  Files           13      13       \n  Stmts          461     464     +3\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            421     424     +3\n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of a0c8ac4\n\n\nUncovered Suggestions\n\n+2.16% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.20%\nMerging #409 into master will decrease coverage by -0.23% as of 8637f08\n\ndiff\n@@            master   #409   diff @@\n=====================================\n  Files           13     13       \n  Stmts          467    455    -12\n  Branches         0      0       \n  Methods                         \n=====================================\n- Hit            427    415    -12\n  Partial          0      0       \n  Missed          40     40\n\nReview entire Coverage Diff as of 8637f08\n\n\nUncovered Suggestions\n\n+2.20% via ...ource/Response.swift#84...93 \n+1.10% via ...+ReactiveCocoa.swift#54...58 \n+1.10% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.20%\nMerging #409 into master will decrease coverage by -0.23% as of 8637f08\n\ndiff\n@@            master   #409   diff @@\n=====================================\n  Files           13     13       \n  Stmts          467    455    -12\n  Branches         0      0       \n  Methods                         \n=====================================\n- Hit            427    415    -12\n  Partial          0      0       \n  Missed          40     40\n\nReview entire Coverage Diff as of 8637f08\n\n\nUncovered Suggestions\n\n+2.20% via ...ource/Response.swift#84...93 \n+1.10% via ...+ReactiveCocoa.swift#54...58 \n+1.10% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.20%\nMerging #409 into master will decrease coverage by -0.23% as of 8637f08\n\ndiff\n@@            master   #409   diff @@\n=====================================\n  Files           13     13       \n  Stmts          467    455    -12\n  Branches         0      0       \n  Methods                         \n=====================================\n- Hit            427    415    -12\n  Partial          0      0       \n  Missed          40     40\n\nReview entire Coverage Diff as of 8637f08\n\n\nUncovered Suggestions\n\n+2.20% via ...ource/Response.swift#84...93 \n+1.10% via ...+ReactiveCocoa.swift#54...58 \n+1.10% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.20%\nMerging #414 into master will not affect coverage as of a8d9fba\n\ndiff\n@@            master   #414   diff @@\n=====================================\n  Files           13     13       \n  Stmts          455    455       \n  Branches         0      0       \n  Methods                         \n=====================================\n  Hit            415    415       \n  Partial          0      0       \n  Missed          40     40\n\nReview entire Coverage Diff as of a8d9fba\n\n\nUncovered Suggestions\n\n+2.20% via ...ource/Response.swift#84...93 \n+1.10% via ...+ReactiveCocoa.swift#54...58 \n+1.10% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.20%\nMerging #414 into master will not affect coverage as of a8d9fba\n\ndiff\n@@            master   #414   diff @@\n=====================================\n  Files           13     13       \n  Stmts          455    455       \n  Branches         0      0       \n  Methods                         \n=====================================\n  Hit            415    415       \n  Partial          0      0       \n  Missed          40     40\n\nReview entire Coverage Diff as of a8d9fba\n\n\nUncovered Suggestions\n\n+2.20% via ...ource/Response.swift#84...93 \n+1.10% via ...+ReactiveCocoa.swift#54...58 \n+1.10% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.20%\nMerging #418 into master will not affect coverage as of d72e284\n\ndiff\n@@            master   #418   diff @@\n=====================================\n  Files           13     13       \n  Stmts          455    455       \n  Branches         0      0       \n  Methods                         \n=====================================\n  Hit            415    415       \n  Partial          0      0       \n  Missed          40     40\n\nReview entire Coverage Diff as of d72e284\n\n\nUncovered Suggestions\n\n+2.20% via ...ource/Response.swift#84...93 \n+1.10% via ...+ReactiveCocoa.swift#54...58 \n+1.10% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.20%\nMerging #418 into master will not affect coverage as of d72e284\n\ndiff\n@@            master   #418   diff @@\n=====================================\n  Files           13     13       \n  Stmts          455    455       \n  Branches         0      0       \n  Methods                         \n=====================================\n  Hit            415    415       \n  Partial          0      0       \n  Missed          40     40\n\nReview entire Coverage Diff as of d72e284\n\n\nUncovered Suggestions\n\n+2.20% via ...ource/Response.swift#84...93 \n+1.10% via ...+ReactiveCocoa.swift#54...58 \n+1.10% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.37%\nMerging #420 into master will increase coverage by +0.17% as of ad8578b\n\ndiff\n@@            master    #420   diff @@\n======================================\n  Files           13      13       \n  Stmts          455     464     +9\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            415     424     +9\n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of ad8578b\n\n\nUncovered Suggestions\n\n+2.16% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.37%\nMerging #420 into master will increase coverage by +0.17% as of ad8578b\n\ndiff\n@@            master    #420   diff @@\n======================================\n  Files           13      13       \n  Stmts          455     464     +9\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            415     424     +9\n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of ad8578b\n\n\nUncovered Suggestions\n\n+2.16% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#188...192 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 90.31%\nMerging #424 into master will decrease coverage by -1.06% as of d258c2f\n\ndiff\n@@            master    #424   diff @@\n======================================\n  Files           13      13       \n  Stmts          464     475    +11\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            424     429     +5\n  Partial          0       0       \n- Missed          40      46     +6\n\nReview entire Coverage Diff as of d258c2f\n\n\nUncovered Suggestions\n\n+2.11% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#215...219 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 90.31%\nMerging #424 into master will decrease coverage by -1.06% as of d258c2f\n\ndiff\n@@            master    #424   diff @@\n======================================\n  Files           13      13       \n  Stmts          464     475    +11\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            424     429     +5\n  Partial          0       0       \n- Missed          40      46     +6\n\nReview entire Coverage Diff as of d258c2f\n\n\nUncovered Suggestions\n\n+2.11% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#215...219 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.37%\nMerging #426 into master will not affect coverage as of e97f2bc\n\ndiff\n@@            master    #426   diff @@\n======================================\n  Files           13      13       \n  Stmts          464     464       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            424     424       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of e97f2bc\n\n\nUncovered Suggestions\n\n+2.16% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#189...193 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.37%\nMerging #426 into master will not affect coverage as of e97f2bc\n\ndiff\n@@            master    #426   diff @@\n======================================\n  Files           13      13       \n  Stmts          464     464       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            424     424       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of e97f2bc\n\n\nUncovered Suggestions\n\n+2.16% via ...ource/Response.swift#84...93 \n+1.08% via ...+ReactiveCocoa.swift#54...58 \n+1.08% via Source/Moya.swift#189...193 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #427 into master will increase coverage by +0.27% as of d8c0175\n\ndiff\n@@            master    #427   diff @@\n======================================\n  Files           13      13       \n  Stmts          464     479    +15\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            424     439    +15\n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of d8c0175\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #427 into master will increase coverage by +0.27% as of d8c0175\n\ndiff\n@@            master    #427   diff @@\n======================================\n  Files           13      13       \n  Stmts          464     479    +15\n  Branches         0       0       \n  Methods                          \n======================================\n+ Hit            424     439    +15\n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of d8c0175\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #430 into master will not affect coverage as of 217f9f7\n\ndiff\n@@            master    #430   diff @@\n======================================\n  Files           13      13       \n  Stmts          479     479       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            439     439       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 217f9f7\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #430 into master will not affect coverage as of 217f9f7\n\ndiff\n@@            master    #430   diff @@\n======================================\n  Files           13      13       \n  Stmts          479     479       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            439     439       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 217f9f7\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #438 into master will not affect coverage as of 9fd8cf6\n\ndiff\n@@            master    #438   diff @@\n======================================\n  Files           13      13       \n  Stmts          479     479       \n  Branches         0       0       \n  Methods          0               \n======================================\n  Hit            439     439       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 9fd8cf6\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #452 into master will not affect coverage as of 308b2e0\n\ndiff\n@@            master    #452   diff @@\n======================================\n  Files           13      13       \n  Stmts          479     479       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            439     439       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 308b2e0\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #452 into master will not affect coverage as of 67754bc\n\ndiff\n@@            master    #452   diff @@\n======================================\n  Files           13      13       \n  Stmts          479     479       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            439     439       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 67754bc\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #452 into master will not affect coverage as of 308b2e0\n\ndiff\n@@            master    #452   diff @@\n======================================\n  Files           13      13       \n  Stmts          479     479       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            439     439       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 308b2e0\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.64%\nMerging #452 into master will not affect coverage as of 67754bc\n\ndiff\n@@            master    #452   diff @@\n======================================\n  Files           13      13       \n  Stmts          479     479       \n  Branches         0       0       \n  Methods                          \n======================================\n  Hit            439     439       \n  Partial          0       0       \n  Missed          40      40\n\nReview entire Coverage Diff as of 67754bc\n\n\nUncovered Suggestions\n\n+2.09% via ...ource/Response.swift#84...93 \n+1.05% via ...+ReactiveCocoa.swift#54...58 \n+1.05% via Source/Moya.swift#222...226 \nSee 7 more...\n\n\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 91.83%\nMerging #477 into master will increase coverage by +0.17%\n1. File ...ource/Endpoint.swift (not in diff) was modified. more \n   - Misses -4 \n   - Partials 0 \n   - Hits +4\n\ndiff\n@@             master       #477   diff @@\n==========================================\n  Files            13         13          \n  Lines           479        514    +35   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            439        472    +33   \n- Misses           40         42     +2   \n  Partials          0          0\n\nPowered by Codecov. Last updated by 5a800bb...07f26c2\n. ## Current coverage is 91.83%\nMerging #477 into master will increase coverage by +0.17%\n1. File ...ource/Endpoint.swift (not in diff) was modified. more \n   - Misses -4 \n   - Partials 0 \n   - Hits +4\n\ndiff\n@@             master       #477   diff @@\n==========================================\n  Files            13         13          \n  Lines           479        514    +35   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            439        472    +33   \n- Misses           40         42     +2   \n  Partials          0          0\n\nPowered by Codecov. Last updated by 5a800bb...07f26c2\n. ## Current coverage is 65.02%\n\n\n\nNo coverage report found for master at e9a1382.\nPowered by Codecov. Last updated by e9a1382...77dea94\n. ## Current coverage is 65.02%\n\n\n\nNo coverage report found for master at e9a1382.\nPowered by Codecov. Last updated by e9a1382...77dea94\n. ## Current coverage is 86.45%\n\n\n\nNo coverage report found for master at f00ac46.\nPowered by Codecov. Last updated by f00ac46...1eb7e7a\n. ## Current coverage is 86.45%\n\n\n\nNo coverage report found for master at f00ac46.\nPowered by Codecov. Last updated by f00ac46...1eb7e7a\n. ## Current coverage is 85.95%\nMerging #521 into master will decrease coverage by 0.50%\n\ndiff\n@@             master       #521   diff @@\n==========================================\n  Files            12         12          \n  Lines           480        484     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            415        416     +1   \n- Misses           65         68     +3   \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by f6af892...69b517e\n. ## Current coverage is 85.95%\nMerging #521 into master will decrease coverage by 0.50%\n\ndiff\n@@             master       #521   diff @@\n==========================================\n  Files            12         12          \n  Lines           480        484     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            415        416     +1   \n- Misses           65         68     +3   \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by f6af892...69b517e\n. ## Current coverage is 85.95%\nMerging #526 into master will not change coverage\n\ndiff\n@@             master       #526   diff @@\n==========================================\n  Files            12         12          \n  Lines           484        484          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            416        416          \n  Misses           68         68          \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by de5caed...1d06108\n. ## Current coverage is 85.95%\nMerging #526 into master will not change coverage\n\ndiff\n@@             master       #526   diff @@\n==========================================\n  Files            12         12          \n  Lines           484        484          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            416        416          \n  Misses           68         68          \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by de5caed...1d06108\n. ## Current coverage is 63.29%\nMerging #532 into master will decrease coverage by 0.11%\n\ndiff\n@@             master       #532   diff @@\n==========================================\n  Files            12         12          \n  Lines           667        673     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            423        426     +3   \n- Misses          244        247     +3   \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by f3f7570...05c2a77\n. ## Current coverage is 63.29%\nMerging #532 into master will decrease coverage by 0.11%\n\ndiff\n@@             master       #532   diff @@\n==========================================\n  Files            12         12          \n  Lines           667        673     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            423        426     +3   \n- Misses          244        247     +3   \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by f3f7570...05c2a77\n. ## Current coverage is 69.30%\nMerging #547 into master will not change coverage\n\ndiff\n@@             master       #547   diff @@\n==========================================\n  Files            12         12          \n  Lines           619        619          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            429        429          \n  Misses          190        190          \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by ae72ae8...8a1043d\n. ## Current coverage is 69.30%\nMerging #547 into master will not change coverage\n\ndiff\n@@             master       #547   diff @@\n==========================================\n  Files            12         12          \n  Lines           619        619          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            429        429          \n  Misses          190        190          \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by ae72ae8...8a1043d\n. ## Current coverage is 68.10%\nMerging #553 into master will decrease coverage by 1.20%\n\ndiff\n@@             master       #553   diff @@\n==========================================\n  Files            12         12          \n  Lines           619        627     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits            429        427     -2   \n- Misses          190        200    +10   \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by 6453987...1c577da\n. ## Current coverage is 68.10%\nMerging #553 into master will decrease coverage by 1.20%\n\ndiff\n@@             master       #553   diff @@\n==========================================\n  Files            12         12          \n  Lines           619        627     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits            429        427     -2   \n- Misses          190        200    +10   \n  Partials          0          0\n\n\nPowered by Codecov. Last updated by 6453987...1c577da\n. ## Current coverage is 67.45% (diff: 59.54%)\nMerging #561 into master will decrease coverage by 0.64%\n\ndiff\n@@             master       #561   diff @@\n==========================================\n  Files            12         16     +4   \n  Lines           627        633     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            427        427          \n- Misses          200        206     +6   \n  Partials          0          0\n\n\nPowered by Codecov. Last update f68b9e7...af7442d\n. ## Current coverage is 84.37% (diff: 72.22%)\nMerging #563 into master will not change coverage\n\ndiff\n@@             master       #563   diff @@\n==========================================\n  Files            29         29          \n  Lines          2496       2496          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2106       2106          \n  Misses          390        390          \n  Partials          0          0\n\nPowered by Codecov. Last update bc434f6...2650c85\n. ## Current coverage is 68.33% (diff: 100%)\nMerging #575 into master will not change coverage\n\ndiff\n@@             master       #575   diff @@\n==========================================\n  Files            16         16          \n  Lines           641        641          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            438        438          \n  Misses          203        203          \n  Partials          0          0\n\n\nPowered by Codecov. Last update bea928a...4d4106d\n. ## Current coverage is 68.33% (diff: 100%)\nMerging #577 into master will not change coverage\n\ndiff\n@@             master       #577   diff @@\n==========================================\n  Files            16         16          \n  Lines           641        641          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            438        438          \n  Misses          203        203          \n  Partials          0          0\n\n\nPowered by Codecov. Last update c42033f...7087a47\n. ## Current coverage is 68.33% (diff: 100%)\nMerging #578 into master will not change coverage\n\ndiff\n@@             master       #578   diff @@\n==========================================\n  Files            16         16          \n  Lines           641        641          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            438        438          \n  Misses          203        203          \n  Partials          0          0\n\n\nPowered by Codecov. Last update c15ead6...9369677\n. ## Current coverage is 68.33% (diff: 100%)\nMerging #579 into master will not change coverage\n\ndiff\n@@             master       #579   diff @@\n==========================================\n  Files            16         16          \n  Lines           641        641          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            438        438          \n  Misses          203        203          \n  Partials          0          0\n\n\nPowered by Codecov. Last update 6f0b8fe...ca8be19\n. ## Current coverage is 66.76% (diff: 0.00%)\n\n\n\nNo coverage report found for master at 87bbac2.\nPowered by Codecov. Last update 87bbac2...6060941\n. ## Current coverage is 66.76% (diff: 100%)\nMerging #599 into master will not change coverage\n\ndiff\n@@             master       #599   diff @@\n==========================================\n  Files            16         16          \n  Lines           653        653          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            436        436          \n  Misses          217        217          \n  Partials          0          0\n\n\nPowered by Codecov. Last update 70ade6c...19d8654\n. ## Current coverage is 66.76% (diff: 100%)\nMerging #603 into master will not change coverage\n\ndiff\n@@             master       #603   diff @@\n==========================================\n  Files            16         16          \n  Lines           653        653          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            436        436          \n  Misses          217        217          \n  Partials          0          0\n\n\nPowered by Codecov. Last update 48e3440...72b1c0a\n. ## Current coverage is 79.48% (diff: 74.96%)\nMerging #608 into master will increase coverage by 12.26%\n\ndiff\n@@             master       #608   diff @@\n==========================================\n  Files            16         33     +17   \n  Lines           653       2623   +1970   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits            439       2085   +1646   \n- Misses          214        538    +324   \n  Partials          0          0\n\nPowered by Codecov. Last update 6b9b08d...17426f8\n. ## Current coverage is 67.07% (diff: 100%)\nMerging #621 into master will increase coverage by 0.30%\n\ndiff\n@@             master       #621   diff @@\n==========================================\n  Files            16         16          \n  Lines           653        653          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            436        438     +2   \n+ Misses          217        215     -2   \n  Partials          0          0\n\n\nPowered by Codecov. Last update d0c073b...5a7012e\n. ## Current coverage is 67.07% (diff: 100%)\nMerging #622 into master will not change coverage\n\ndiff\n@@             master       #622   diff @@\n==========================================\n  Files            16         16          \n  Lines           653        653          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            438        438          \n  Misses          215        215          \n  Partials          0          0\n\n\nPowered by Codecov. Last update a65cdd7...6b704bb\n. ## Current coverage is 67.07% (diff: 100%)\nMerging #630 into master will not change coverage\n\ndiff\n@@             master       #630   diff @@\n==========================================\n  Files            16         16          \n  Lines           653        653          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            438        438          \n  Misses          215        215          \n  Partials          0          0\n\n\nPowered by Codecov. Last update 43d09f2...8c726c5\n. ## Current coverage is 67.07% (diff: 100%)\nMerging #633 into master will not change coverage\n\ndiff\n@@             master       #633   diff @@\n==========================================\n  Files            16         16          \n  Lines           653        653          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            438        438          \n  Misses          215        215          \n  Partials          0          0\n\n\nPowered by Codecov. Last update ac898ea...52e4b96\n. ## Current coverage is 67.07% (diff: 100%)\nMerging #637 into master will not change coverage\n\ndiff\n@@             master       #637   diff @@\n==========================================\n  Files            16         16          \n  Lines           653        653          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            438        438          \n  Misses          215        215          \n  Partials          0          0\n\n\nPowered by Codecov. Last update b0d7439...5229e60\n. ## Current coverage is 73.46% (diff: 100%)\nMerging #643 into master will not change coverage\n\ndiff\n@@             master       #643   diff @@\n==========================================\n  Files            19         19          \n  Lines           701        701          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            515        515          \n  Misses          186        186          \n  Partials          0          0\n\nPowered by Codecov. Last update ea1406d...fc99d7e. ## Current coverage is 84.96% (diff: 100%)\nMerging #674 into master will decrease coverage by 1.12%\n\ndiff\n@@             master       #674   diff @@\n==========================================\n  Files            29         29          \n  Lines          2610       2454   -156   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2247       2085   -162   \n- Misses          363        369     +6   \n  Partials          0          0\n\nPowered by Codecov. Last update b4a38c0...25e41b3\n. ## Current coverage is 84.96% (diff: 100%)\nMerging #676 into master will not change coverage\n\ndiff\n@@             master       #676   diff @@\n==========================================\n  Files            29         29          \n  Lines          2454       2454          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2085       2085          \n  Misses          369        369          \n  Partials          0          0\n\nPowered by Codecov. Last update 25b8072...9c390b1\n. ## Current coverage is 84.96% (diff: 100%)\nMerging #678 into master will not change coverage\n\ndiff\n@@             master       #678   diff @@\n==========================================\n  Files            29         29          \n  Lines          2454       2454          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2085       2085          \n  Misses          369        369          \n  Partials          0          0\n\nPowered by Codecov. Last update 33d4724...4d84f63\n. ## Current coverage is 84.96% (diff: 100%)\nMerging #680 into master will not change coverage\n\ndiff\n@@             master       #680   diff @@\n==========================================\n  Files            29         29          \n  Lines          2454       2454          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2085       2085          \n  Misses          369        369          \n  Partials          0          0\n\nPowered by Codecov. Last update 515ae70...b43428d\n. ## Current coverage is 84.96% (diff: 100%)\nMerging #683 into master will not change coverage\n\ndiff\n@@             master       #683   diff @@\n==========================================\n  Files            29         29          \n  Lines          2454       2454          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2085       2085          \n  Misses          369        369          \n  Partials          0          0\n\nPowered by Codecov. Last update 517a145...fb59431\n. ## Current coverage is 84.96% (diff: 100%)\nMerging #686 into master will not change coverage\n\ndiff\n@@             master       #686   diff @@\n==========================================\n  Files            29         29          \n  Lines          2454       2454          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2085       2085          \n  Misses          369        369          \n  Partials          0          0\n\nPowered by Codecov. Last update 517a145...68983ff\n. ## Current coverage is 84.96% (diff: 100%)\nMerging #686 into master will not change coverage\n\ndiff\n@@             master       #686   diff @@\n==========================================\n  Files            29         29          \n  Lines          2454       2454          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2085       2085          \n  Misses          369        369          \n  Partials          0          0\n\nPowered by Codecov. Last update 517a145...68983ff\n. ## Current coverage is 84.96% (diff: 94.44%)\nMerging #689 into master will not change coverage\n\ndiff\n@@             master       #689   diff @@\n==========================================\n  Files            29         29          \n  Lines          2454       2454          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2085       2085          \n  Misses          369        369          \n  Partials          0          0\n\nPowered by Codecov. Last update ff9a558...7b48a8e\n. ## Current coverage is 84.96% (diff: 94.44%)\nMerging #689 into master will not change coverage\n\ndiff\n@@             master       #689   diff @@\n==========================================\n  Files            29         29          \n  Lines          2454       2454          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2085       2085          \n  Misses          369        369          \n  Partials          0          0\n\nPowered by Codecov. Last update ff9a558...7b48a8e\n. ## Current coverage is 84.37% (diff: 100%)\nMerging #694 into master will not change coverage\n\ndiff\n@@             master       #694   diff @@\n==========================================\n  Files            29         29          \n  Lines          2496       2496          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2106       2106          \n  Misses          390        390          \n  Partials          0          0\n\nPowered by Codecov. Last update 8e3e9a0...59f0003\n. ## Current coverage is 84.37% (diff: 100%)\nMerging #694 into master will not change coverage\n\ndiff\n@@             master       #694   diff @@\n==========================================\n  Files            29         29          \n  Lines          2496       2496          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2106       2106          \n  Misses          390        390          \n  Partials          0          0\n\nPowered by Codecov. Last update 8e3e9a0...59f0003\n. ## Current coverage is 84.37% (diff: 100%)\nMerging #709 into master will not change coverage\n\ndiff\n@@             master       #709   diff @@\n==========================================\n  Files            29         29          \n  Lines          2496       2496          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2106       2106          \n  Misses          390        390          \n  Partials          0          0\n\nPowered by Codecov. Last update 606fd46...1533583\n. ## Current coverage is 85.90% (diff: 97.36%)\nMerging #716 into master will increase coverage by 1.52%\n\ndiff\n@@             master       #716   diff @@\n==========================================\n  Files            29         29          \n  Lines          2496       2561    +65   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2106       2200    +94   \n+ Misses          390        361    -29   \n  Partials          0          0\n\nPowered by Codecov. Last update 0b2c725...aba2187\n. ## Current coverage is 84.24% (diff: 0.00%)\nMerging #717 into master will decrease coverage by 0.13%\n\ndiff\n@@             master       #717   diff @@\n==========================================\n  Files            29         29          \n  Lines          2496       2500     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2106       2106          \n- Misses          390        394     +4   \n  Partials          0          0\n\nPowered by Codecov. Last update 0b2c725...fcc23d1\n. ## Current coverage is 86.09% (diff: 97.77%)\nMerging #719 into master will increase coverage by 0.32%\n\ndiff\n@@             master       #719   diff @@\n==========================================\n  Files            29         29          \n  Lines          2565       2610    +45   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2200       2247    +47   \n+ Misses          365        363     -2   \n  Partials          0          0\n\nPowered by Codecov. Last update cdafa50...9399ae3\n. ## Current coverage is 86.09% (diff: 100%)\nNo coverage report found for master at 3832192.\nPowered by Codecov. Last update 3832192...b2b422d\n. ## Current coverage is 86.09% (diff: 100%)\nMerging #727 into master will not change coverage\n\ndiff\n@@             master       #727   diff @@\n==========================================\n  Files            29         29          \n  Lines          2610       2610          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2247       2247          \n  Misses          363        363          \n  Partials          0          0\n\nPowered by Codecov. Last update 14a21cb...a9042d0\n. ## Current coverage is 86.09% (diff: 100%)\nMerging #731 into master will not change coverage\n\ndiff\n@@             master       #731   diff @@\n==========================================\n  Files            29         29          \n  Lines          2610       2610          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2247       2247          \n  Misses          363        363          \n  Partials          0          0\n\nPowered by Codecov. Last update 0ffb350...5618f68\n. ## Current coverage is 86.08% (diff: 100%)\nNo coverage report found for master at a0f1e00.\nPowered by Codecov. Last update a0f1e00...45142d9\n. ## Current coverage is 86.08% (diff: 100%)\nMerging #735 into master will not change coverage\n\ndiff\n@@             master       #735   diff @@\n==========================================\n  Files            29         29          \n  Lines          2609       2609          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2246       2246          \n  Misses          363        363          \n  Partials          0          0\n\nPowered by Codecov. Last update 5f6fcae...4c9e59a\n. ## Current coverage is 86.02% (diff: 0.00%)\nMerging #736 into master will decrease coverage by 0.06%\n\ndiff\n@@             master       #736   diff @@\n==========================================\n  Files            29         30     +1   \n  Lines          2609       2611     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2246       2246          \n- Misses          363        365     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update da056cf...f959a0a\n. ## Current coverage is 86.08% (diff: 100%)\nMerging #737 into master will not change coverage\n\ndiff\n@@             master       #737   diff @@\n==========================================\n  Files            29         29          \n  Lines          2609       2609          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2246       2246          \n  Misses          363        363          \n  Partials          0          0\n\nPowered by Codecov. Last update da056cf...dbcf32f\n. ## Current coverage is 86.08% (diff: 100%)\nMerging #745 into master will not change coverage\n\ndiff\n@@             master       #745   diff @@\n==========================================\n  Files            29         29          \n  Lines          2609       2609          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2246       2246          \n  Misses          363        363          \n  Partials          0          0\n\nPowered by Codecov. Last update da056cf...e6f5adf\n. ## Current coverage is 86.02% (diff: 100%)\nMerging #758 into master will not change coverage\n\ndiff\n@@             master       #758   diff @@\n==========================================\n  Files            30         30          \n  Lines          2611       2611          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2246       2246          \n  Misses          365        365          \n  Partials          0          0\n\nPowered by Codecov. Last update 1b1edcf...3060956\n. ## Current coverage is 86.02% (diff: 100%)\nMerging #758 into master will not change coverage\n\ndiff\n@@             master       #758   diff @@\n==========================================\n  Files            30         30          \n  Lines          2611       2611          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2246       2246          \n  Misses          365        365          \n  Partials          0          0\n\nPowered by Codecov. Last update 1b1edcf...3060956\n. ## Current coverage is 86.02% (diff: 100%)\nMerging #761 into master will not change coverage\n\ndiff\n@@             master       #761   diff @@\n==========================================\n  Files            30         30          \n  Lines          2611       2611          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2246       2246          \n  Misses          365        365          \n  Partials          0          0\n\nPowered by Codecov. Last update 166de54...bc679b7\n. # Codecov Report\nMerging #762 into master will decrease coverage by 0.71%.\nThe diff coverage is 74.46%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #762      +/-\n==========================================\n- Coverage   77.11%   76.39%   -0.72%   \n==========================================\n  Files          22       22            \n  Lines         721      733      +12   \n==========================================\n+ Hits          556      560       +4   \n- Misses        165      173       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Moya+Alamofire.swift | 82.6% <100%> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/RxMoyaProvider.swift | 94.44% <100%> (-0.16%) | :arrow_down: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <55.55%> (-1.41%) | :arrow_down: |\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 51.72% <71.42%> (-0.82%) | :arrow_down: |\n| Sources/Moya/MoyaProvider.swift | 88.7% <84.61%> (-2.2%) | :arrow_down: |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 93.33% <0%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c09c7d1...641f7c8. Read the comment docs.\n. # Codecov Report\nMerging #762 into master will decrease coverage by 0.71%.\nThe diff coverage is 74.46%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #762      +/-\n==========================================\n- Coverage   77.11%   76.39%   -0.72%   \n==========================================\n  Files          22       22            \n  Lines         721      733      +12   \n==========================================\n+ Hits          556      560       +4   \n- Misses        165      173       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Moya+Alamofire.swift | 82.6% <100%> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/RxMoyaProvider.swift | 94.44% <100%> (-0.16%) | :arrow_down: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <55.55%> (-1.41%) | :arrow_down: |\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 51.72% <71.42%> (-0.82%) | :arrow_down: |\n| Sources/Moya/MoyaProvider.swift | 88.7% <84.61%> (-2.2%) | :arrow_down: |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 93.33% <0%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c09c7d1...641f7c8. Read the comment docs.\n. ## Current coverage is 85.94% (diff: 60.00%)\nMerging #767 into master will decrease coverage by 0.07%\n\ndiff\n@@             master       #767   diff @@\n==========================================\n  Files            30         30          \n  Lines          2611       2618     +7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2246       2250     +4   \n- Misses          365        368     +3   \n  Partials          0          0\n\nPowered by Codecov. Last update dffad98...bee6f15\n. ## Current coverage is 85.94% (diff: 100%)\nMerging #768 into master will not change coverage\n\ndiff\n@@             master       #768   diff @@\n==========================================\n  Files            30         30          \n  Lines          2618       2618          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2250       2250          \n  Misses          368        368          \n  Partials          0          0\n\nPowered by Codecov. Last update 217dd25...ba71a1f\n. ## Current coverage is 85.94% (diff: 100%)\nMerging #771 into master will not change coverage\n\ndiff\n@@             master       #771   diff @@\n==========================================\n  Files            30         30          \n  Lines          2618       2618          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2250       2250          \n  Misses          368        368          \n  Partials          0          0\n\nPowered by Codecov. Last update 1b1f221...8f4ea9b\n. ## Current coverage is 85.94% (diff: 100%)\nMerging #772 into master will not change coverage\n\ndiff\n@@             master       #772   diff @@\n==========================================\n  Files            30         30          \n  Lines          2618       2618          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2250       2250          \n  Misses          368        368          \n  Partials          0          0\n\nPowered by Codecov. Last update 1b1f221...b8c5363\n. ## Current coverage is 85.69% (diff: 67.56%)\nMerging #775 into master will decrease coverage by 0.24%\n\ndiff\n@@             master       #775   diff @@\n==========================================\n  Files            30         30          \n  Lines          2618       2615     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2250       2241     -9   \n- Misses          368        374     +6   \n  Partials          0          0\n\nPowered by Codecov. Last update f624f2c...d77c261\n. ## Current coverage is 85.69% (diff: 73.91%)\nMerging #776 into master will decrease coverage by 0.24%\n\ndiff\n@@             master       #776   diff @@\n==========================================\n  Files            30         30          \n  Lines          2618       2615     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2250       2241     -9   \n- Misses          368        374     +6   \n  Partials          0          0\n\nPowered by Codecov. Last update f624f2c...96efdfe\n. ## Current coverage is 85.69% (diff: 70.83%)\nMerging #777 into master will decrease coverage by 0.24%\n\ndiff\n@@             master       #777   diff @@\n==========================================\n  Files            30         30          \n  Lines          2618       2615     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2250       2241     -9   \n- Misses          368        374     +6   \n  Partials          0          0\n\nPowered by Codecov. Last update f624f2c...79af1ed\n. ## Current coverage is 86.11% (diff: 93.33%)\nMerging #778 into master will increase coverage by 0.16%\n\ndiff\n@@             master       #778   diff @@\n==========================================\n  Files            30         30          \n  Lines          2618       2650    +32   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2250       2282    +32   \n  Misses          368        368          \n  Partials          0          0\n\nPowered by Codecov. Last update c666c6b...e6e039c\n. ## Current coverage is 83.10% (diff: 66.66%)\nMerging #779 into master will decrease coverage by 0.23%\n\ndiff\n@@             master       #779   diff @@\n==========================================\n  Files            34         34          \n  Lines          2738       2735     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2282       2273     -9   \n- Misses          456        462     +6   \n  Partials          0          0\n\nPowered by Codecov. Last update 1958731...8f31c28. ## Current coverage is 83.14% (diff: 92.98%)\nMerging #784 into master will decrease coverage by 2.79%\n\ndiff\n@@             master       #784   diff @@\n==========================================\n  Files            30         34     +4   \n  Lines          2618       2706    +88   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2250       2250          \n- Misses          368        456    +88   \n  Partials          0          0\n\nPowered by Codecov. Last update c12f6b1...d8dd82e\n. ## Current coverage is 83.05% (diff: 100%)\nMerging #799 into master will decrease coverage by 0.05%\n\ndiff\n@@             master       #799   diff @@\n==========================================\n  Files            34         34          \n  Lines          2735       2738     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2273       2274     +1   \n- Misses          462        464     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 925a549...7801b33. ## Current coverage is 85.94% (diff: 100%)\nMerging #804 into master will increase coverage by 2.89%\n\ndiff\n@@             master       #804   diff @@\n==========================================\n  Files            34         30     -4   \n  Lines          2738       2618   -120   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2274       2250    -24   \n+ Misses          464        368    -96   \n  Partials          0          0\n\nPowered by Codecov. Last update 02af5c0...a253046. ## Current coverage is 83.05% (diff: 100%)\nMerging #805 into master will not change coverage\n\ndiff\n@@             master       #805   diff @@\n==========================================\n  Files            34         34          \n  Lines          2738       2738          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2274       2274          \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update 02af5c0...3545429. ## Current coverage is 83.05% (diff: 50.00%)\nMerging #806 into master will not change coverage\n\ndiff\n@@             master       #806   diff @@\n==========================================\n  Files            34         34          \n  Lines          2738       2738          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2274       2274          \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update e6abf6b...ab8c2d5. ## Current coverage is 83.05% (diff: 100%)\nMerging #807 into master will not change coverage\n\ndiff\n@@             master       #807   diff @@\n==========================================\n  Files            34         34          \n  Lines          2738       2738          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2274       2274          \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update 7c576e5...a962d08. ## Current coverage is 83.05% (diff: 100%)\nMerging #808 into master will not change coverage\n\ndiff\n@@             master       #808   diff @@\n==========================================\n  Files            34         34          \n  Lines          2738       2738          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2274       2274          \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update 1a49afc...11680fc. ## Current coverage is 83.32% (diff: 96.36%)\nMerging #813 into master will increase coverage by 0.26%\n\ndiff\n@@             master       #813   diff @@\n==========================================\n  Files            34         34          \n  Lines          2738       2782    +44   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2274       2318    +44   \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update 86166e4...20ae1a3. ## Current coverage is 83.05% (diff: 100%)\nMerging #817 into master will not change coverage\n\ndiff\n@@             master       #817   diff @@\n==========================================\n  Files            34         34          \n  Lines          2738       2738          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2274       2274          \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update 8288667...2a81b2a. ## Current coverage is 83.29% (diff: 90.32%)\nMerging #824 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #824   diff @@\n==========================================\n  Files            34         34          \n  Lines          2775       2771     -4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2311       2308     -3   \n+ Misses          464        463     -1   \n  Partials          0          0\n\nPowered by Codecov. Last update 483cbd1...73ddbc8. ## Current coverage is 83.27% (diff: 95.23%)\nMerging #825 into master will not change coverage\n\ndiff\n@@             master       #825   diff @@\n==========================================\n  Files            34         34          \n  Lines          2775       2775          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2311       2311          \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update 6637718...3b1ac3b. ## Current coverage is 83.27% (diff: 100%)\nMerging #826 into master will not change coverage\n\ndiff\n@@             master       #826   diff @@\n==========================================\n  Files            34         34          \n  Lines          2775       2775          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2311       2311          \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update 483cbd1...c263075. ## Current coverage is 83.27% (diff: 93.18%)\nMerging #827 into master will decrease coverage by 0.04%\n\ndiff\n@@             master       #827   diff @@\n==========================================\n  Files            34         34          \n  Lines          2782       2775     -7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2318       2311     -7   \n  Misses          464        464          \n  Partials          0          0\n\nPowered by Codecov. Last update e55bcec...1c441c3. ## Current coverage is 83.27% (diff: 100%)\nNo coverage report found for master at 8ed8920.\nPowered by Codecov. Last update 8ed8920...9f2e46f. ## Current coverage is 83.29% (diff: 100%)\nMerging #831 into master will not change coverage\n\ndiff\n@@             master       #831   diff @@\n==========================================\n  Files            34         34          \n  Lines          2771       2771          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2308       2308          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 8b1dc46...2da7c37. ## Current coverage is 83.29% (diff: 100%)\nMerging #832 into master will not change coverage\n\ndiff\n@@             master       #832   diff @@\n==========================================\n  Files            34         34          \n  Lines          2771       2771          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2308       2308          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 8b1dc46...6d886cb. ## Current coverage is 83.29% (diff: 100%)\nMerging #833 into master will not change coverage\n\ndiff\n@@             master       #833   diff @@\n==========================================\n  Files            34         34          \n  Lines          2771       2771          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2308       2308          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 8b1dc46...0ba42ad. ## Current coverage is 83.29% (diff: 100%)\nMerging #838 into master will not change coverage\n\ndiff\n@@             master       #838   diff @@\n==========================================\n  Files            34         34          \n  Lines          2771       2771          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2308       2308          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 67b02ae...8c7bed4. ## Current coverage is 83.27% (diff: 100%)\nMerging #840 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #840   diff @@\n==========================================\n  Files            34         34          \n  Lines          2771       2769     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2308       2306     -2   \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 67b02ae...19fadbc. ## Current coverage is 83.36% (diff: 100%)\nMerging #841 into master will not change coverage\n\ndiff\n@@             master       #841   diff @@\n==========================================\n  Files            34         34          \n  Lines          2783       2783          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2320       2320          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update f90a124...2ef4ee8. ## Current coverage is 83.27% (diff: 100%)\nMerging #842 into master will not change coverage\n\ndiff\n@@             master       #842   diff @@\n==========================================\n  Files            34         34          \n  Lines          2769       2769          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2306       2306          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 3fdc051...9a82f70. ## Current coverage is 83.27% (diff: 100%)\nMerging #843 into master will not change coverage\n\ndiff\n@@             master       #843   diff @@\n==========================================\n  Files            34         34          \n  Lines          2769       2769          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2306       2306          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 3fdc051...1937e05. ## Current coverage is 83.27% (diff: 100%)\nMerging #845 into master will not change coverage\n\ndiff\n@@             master       #845   diff @@\n==========================================\n  Files            34         34          \n  Lines          2769       2769          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2306       2306          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 3fdc051...b6a7392. ## Current coverage is 83.27% (diff: 100%)\nMerging #846 into master will not change coverage\n\ndiff\n@@             master       #846   diff @@\n==========================================\n  Files            34         34          \n  Lines          2769       2769          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2306       2306          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 3fdc051...6ff66c5. ## Current coverage is 83.27% (diff: 100%)\nMerging #847 into master will not change coverage\n\ndiff\n@@             master       #847   diff @@\n==========================================\n  Files            34         34          \n  Lines          2769       2769          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2306       2306          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 3fdc051...61e62a0. ## Current coverage is 83.27% (diff: 100%)\nMerging #856 into master will not change coverage\n\ndiff\n@@             master       #856   diff @@\n==========================================\n  Files            34         34          \n  Lines          2769       2769          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2306       2306          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 967d169...faa5ff7. ## Current coverage is 83.36% (diff: 100%)\nMerging #859 into master will increase coverage by 0.08%\n\ndiff\n@@             master       #859   diff @@\n==========================================\n  Files            34         34          \n  Lines          2769       2783    +14   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2306       2320    +14   \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 967d169...f7b7300. ## Current coverage is 83.27% (diff: 100%)\nMerging #860 into master will not change coverage\n\ndiff\n@@             master       #860   diff @@\n==========================================\n  Files            34         34          \n  Lines          2769       2769          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2306       2306          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 967d169...a80f945. ## Current coverage is 75.25% (diff: 100%)\nNo coverage report found for master at c1fb3fa.\nPowered by Codecov. Last update c1fb3fa...07797f1. ## Current coverage is 83.36% (diff: 33.33%)\nMerging #865 into master will not change coverage\n\ndiff\n@@             master       #865   diff @@\n==========================================\n  Files            34         34          \n  Lines          2783       2783          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2320       2320          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 95058c1...5016fe5. ## Current coverage is 83.36% (diff: 100%)\nMerging #867 into master will not change coverage\n\ndiff\n@@             master       #867   diff @@\n==========================================\n  Files            34         34          \n  Lines          2783       2783          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2320       2320          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 416c19f...89e69da. ## Current coverage is 83.36% (diff: 100%)\nMerging #869 into master will not change coverage\n\ndiff\n@@             master       #869   diff @@\n==========================================\n  Files            34         34          \n  Lines          2783       2783          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2320       2320          \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update f90a124...ec63660. ## Current coverage is 76.45% (diff: 96.55%)\nMerging #871 into master will decrease coverage by 7.30%\n\ndiff\n@@             master       #871   diff @@\n==========================================\n  Files            35         37     +2   \n  Lines          2827       3122   +295   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2368       2387    +19   \n- Misses          459        735   +276   \n  Partials          0          0\n\nPowered by Codecov. Last update 40054e5...0290934. ## Current coverage is 83.39% (diff: 100%)\nMerging #872 into master will increase coverage by 0.03%\n\ndiff\n@@             master       #872   diff @@\n==========================================\n  Files            34         34          \n  Lines          2783       2789     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2320       2326     +6   \n  Misses          463        463          \n  Partials          0          0\n\nPowered by Codecov. Last update 98886f2...ef8b86e. ## Current coverage is 83.76% (diff: 100%)\nMerging #873 into master will increase coverage by 0.40%\n\ndiff\n@@             master       #873   diff @@\n==========================================\n  Files            34         35     +1   \n  Lines          2783       2827    +44   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2320       2368    +48   \n+ Misses          463        459     -4   \n  Partials          0          0\n\nPowered by Codecov. Last update 98886f2...cf7d461. ## Current coverage is 75.07% (diff: 100%)\nMerging #874 into master will decrease coverage by 1.38%\n\ndiff\n@@             master       #874   diff @@\n==========================================\n  Files            37         19     -18   \n  Lines          3122        690   -2432   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n- Hits           2387        518   -1869   \n+ Misses          735        172    -563   \n  Partials          0          0\n\nPowered by Codecov. Last update 1e9a9d1...e4a5d11. ## Current coverage is 75.00% (diff: 100%)\nMerging #876 into master will not change coverage\n\ndiff\n@@             master       #876   diff @@\n==========================================\n  Files            19         19          \n  Lines           688        688          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            516        516          \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update c1fb3fa...01b8df8. ## Current coverage is 75.07% (diff: 100%)\nMerging #877 into master will not change coverage\n\ndiff\n@@             master       #877   diff @@\n==========================================\n  Files            19         19          \n  Lines           690        690          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            518        518          \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update 6282a21...b3cc8c4. ## Current coverage is 83.27% (diff: 100%)\nMerging #878 into master will increase coverage by 8.20%\n\ndiff\n@@             master       #878   diff @@\n==========================================\n  Files            19         34     +15   \n  Lines           690       2769   +2079   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits            518       2306   +1788   \n- Misses          172        463    +291   \n  Partials          0          0\n\nPowered by Codecov. Last update 6282a21...416cb23. ## Current coverage is 75.07% (diff: 100%)\nMerging #879 into master will not change coverage\n\ndiff\n@@             master       #879   diff @@\n==========================================\n  Files            19         19          \n  Lines           690        690          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            518        518          \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update d4cc57c...e242a7a. ## Current coverage is 75.07% (diff: 100%)\nMerging #880 into master will not change coverage\n\ndiff\n@@             master       #880   diff @@\n==========================================\n  Files            19         19          \n  Lines           690        690          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            518        518          \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update d4cc57c...d98e098. ## Current coverage is 73.63% (diff: 66.66%)\nMerging #881 into master will decrease coverage by 0.08%\n\ndiff\n@@             master       #881   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        732     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            533        539     +6   \n- Misses          190        193     +3   \n  Partials          0          0\n\nPowered by Codecov. Last update b29f032...5775dd9. ## Current coverage is 73.63% (diff: 66.66%)\nMerging #881 into master will decrease coverage by 0.08%\n\ndiff\n@@             master       #881   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        732     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            533        539     +6   \n- Misses          190        193     +3   \n  Partials          0          0\n\nPowered by Codecov. Last update b29f032...5775dd9. ## Current coverage is 75.00% (diff: 100%)\nMerging #882 into master will decrease coverage by 0.07%\n\ndiff\n@@             master       #882   diff @@\n==========================================\n  Files            19         19          \n  Lines           690        688     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits            518        516     -2   \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update 66b863c...f83d925. ## Current coverage is 74.96% (diff: 80.00%)\nMerging #883 into master will increase coverage by 1.49%\n\ndiff\n@@             master       #883   diff @@\n==========================================\n  Files            19         19          \n  Lines           701        687    -14   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            515        515          \n+ Misses          186        172    -14   \n  Partials          0          0\n\nPowered by Codecov. Last update ea1406d...8a37df2. ## Current coverage is 73.46% (diff: 0.00%)\nMerging #884 into master will decrease coverage by 1.53%\n\ndiff\n@@             master       #884   diff @@\n==========================================\n  Files            19         19          \n  Lines           688        701    +13   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits            516        515     -1   \n- Misses          172        186    +14   \n  Partials          0          0\n\nPowered by Codecov. Last update c1fb3fa...4ba25d5. ## Current coverage is 73.46% (diff: 100%)\nMerging #885 into master will not change coverage\n\ndiff\n@@             master       #885   diff @@\n==========================================\n  Files            19         19          \n  Lines           701        701          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            515        515          \n  Misses          186        186          \n  Partials          0          0\n\nPowered by Codecov. Last update 55c4d5d...fadcdca. ## Current coverage is 75.00% (diff: 100%)\nMerging #886 into master will not change coverage\n\ndiff\n@@             master       #886   diff @@\n==========================================\n  Files            19         19          \n  Lines           688        688          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            516        516          \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update c1fb3fa...e0023f9. ## Current coverage is 73.46% (diff: 100%)\nMerging #889 into master will not change coverage\n\ndiff\n@@             master       #889   diff @@\n==========================================\n  Files            19         19          \n  Lines           701        701          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            515        515          \n  Misses          186        186          \n  Partials          0          0\n\nPowered by Codecov. Last update 3472baa...30387b4. ## Current coverage is 74.33% (diff: 0.00%)\nMerging #890 into master will decrease coverage by 1.06%\n\ndiff\n@@             master       #890   diff @@\n==========================================\n  Files            20         22     +2   \n  Lines           699        709    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            527        527          \n- Misses          172        182    +10   \n  Partials          0          0\n\nPowered by Codecov. Last update 106d429...b948531. # Codecov Report\nMerging #891 into master will decrease coverage by 0.18%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #891      +/-\n==========================================\n- Coverage   73.65%   73.46%   -0.19%   \n==========================================\n  Files          22       19       -3   \n  Lines         725      701      -24   \n==========================================\n- Hits          534      515      -19   \n+ Misses        191      186       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Endpoint.swift | 82% <0%> (-12%) | :arrow_down: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.1% <0%> (-0.18%) | :arrow_down: |\n| Sources/Moya/MultiTarget.swift | 100% <0%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Defaults.swift | 95.23% <0%> (\u00f8) | :arrow_up: |\n| Sources/Moya/Response.swift | 95.65% <0%> (\u00f8) | :arrow_up: |\n| ...ources/ReactiveMoya/ReactiveMoyaAvailability.swift | | |\n| Sources/Moya/MoyaError.swift | | |\n| Sources/Moya/Plugins/AccessTokenPlugin.swift | | |\n| Sources/Moya/MoyaAvailability.swift | | |\n| Sources/Moya/Error.swift | 31.81% <0%> (\u00f8) | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2394d53...0d692aa. Read the comment docs.. ## Current coverage is 75.39% (diff: 100%)\nMerging #893 into master will increase coverage by 0.42%\n\ndiff\n@@             master       #893   diff @@\n==========================================\n  Files            19         20     +1   \n  Lines           687        699    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            515        527    +12   \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update 37abb66...d42efa7. ## Current coverage is 75.39% (diff: 100%)\nMerging #895 into master will not change coverage\n\ndiff\n@@             master       #895   diff @@\n==========================================\n  Files            20         20          \n  Lines           699        699          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            527        527          \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update 106d429...3c034c9. ## Current coverage is 75.39% (diff: 100%)\nMerging #896 into master will not change coverage\n\ndiff\n@@             master       #896   diff @@\n==========================================\n  Files            20         20          \n  Lines           699        699          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            527        527          \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update 106d429...2cbd82b. ## Current coverage is 76.25% (diff: 100%)\nMerging #897 into master will increase coverage by 0.85%\n\ndiff\n@@             master       #897   diff @@\n==========================================\n  Files            20         20          \n  Lines           699        699          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            527        533     +6   \n+ Misses          172        166     -6   \n  Partials          0          0\n\nPowered by Codecov. Last update 17e9d44...89b6c2d. ## Current coverage is 73.91% (diff: 0.00%)\nMerging #898 into master will decrease coverage by 1.48%\n\ndiff\n@@             master       #898   diff @@\n==========================================\n  Files            20         20          \n  Lines           699        713    +14   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            527        527          \n- Misses          172        186    +14   \n  Partials          0          0\n\nPowered by Codecov. Last update 17e9d44...d60dc75. ## Current coverage is 75.39% (diff: 100%)\nMerging #899 into master will not change coverage\n\ndiff\n@@             master       #899   diff @@\n==========================================\n  Files            20         20          \n  Lines           699        699          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            527        527          \n  Misses          172        172          \n  Partials          0          0\n\nPowered by Codecov. Last update 17e9d44...4c154a0. ## Current coverage is 75.39% (diff: 100%)\nMerging #900 into master will increase coverage by 1.67%\n\ndiff\n@@             master       #900   diff @@\n==========================================\n  Files            22         20     -2   \n  Lines           723        699    -24   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits            533        527     -6   \n+ Misses          190        172    -18   \n  Partials          0          0\n\nPowered by Codecov. Last update 86886b4...3cd09cb. ## Current coverage is 73.72% (diff: 100%)\nNo coverage report found for master at fa59869.\nPowered by Codecov. Last update fa59869...3804439. ## Current coverage is 73.72% (diff: 100%)\nNo coverage report found for master at fa59869.\nPowered by Codecov. Last update fa59869...3804439. ## Current coverage is 73.72% (diff: 100%)\nMerging #902 into master will not change coverage\n\ndiff\n@@             master       #902   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update 6e96aec...4bc09fe. ## Current coverage is 73.72% (diff: 100%)\nMerging #903 into master will not change coverage\n\ndiff\n@@             master       #903   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update 917997f...f4263be. ## Current coverage is 73.72% (diff: 50.00%)\nMerging #905 into master will not change coverage\n\ndiff\n@@             master       #905   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update b29f032...07edb84. ## Current coverage is 73.72% (diff: 100%)\nMerging #906 into master will not change coverage\n\ndiff\n@@             master       #906   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update b29f032...dd471de. ## Current coverage is 73.72% (diff: 100%)\nMerging #907 into master will not change coverage\n\ndiff\n@@             master       #907   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update b29f032...7a3654e. ## Current coverage is 73.72% (diff: 100%)\nMerging #910 into master will not change coverage\n\ndiff\n@@             master       #910   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update 9c0a41a...d4830f3. ## Current coverage is 73.72% (diff: 100%)\nMerging #923 into master will not change coverage\n\ndiff\n@@             master       #923   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update 2f96939...5454ed2. ## Current coverage is 73.72% (diff: 100%)\nMerging #924 into master will not change coverage\n\ndiff\n@@             master       #924   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update 54d09b8...ac6d0ce. ## Current coverage is 73.72% (diff: 100%)\nMerging #925 into master will not change coverage\n\ndiff\n@@             master       #925   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update 54d09b8...2079f38. ## Current coverage is 73.72% (diff: 100%)\nMerging #931 into master will not change coverage\n\ndiff\n@@             master       #931   diff @@\n==========================================\n  Files            22         22          \n  Lines           723        723          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            533        533          \n  Misses          190        190          \n  Partials          0          0\n\nPowered by Codecov. Last update 805e981...c2aca8e. # Codecov Report\nMerging #939 into master will not impact coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #939   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c36262...35672e8. Read the comment docs.. # Codecov Report\nMerging #941 into master will not impact coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #941   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7de7f79...1fa474c. Read the comment docs.. # Codecov Report\nMerging #947 into master will not impact coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #947   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2858dac...a82967f. Read the comment docs.. # Codecov Report\nMerging #954 into master will not impact coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #954   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0dfc0b6...1429112. Read the comment docs.. # Codecov Report\nMerging #960 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #960   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e0924cd...c22653c. Read the comment docs.. # Codecov Report\nMerging #962 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #962   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e0924cd...bd5f218. Read the comment docs.. # Codecov Report\nMerging #966 into master will not change coverage.\nThe diff coverage is 0%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #966   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaAvailability.swift | 0% <\u00f8> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5678a4c...9b41e6b. Read the comment docs.. # Codecov Report\nMerging #966 into master will not change coverage.\nThe diff coverage is 0%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #966   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaAvailability.swift | 0% <\u00f8> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5678a4c...9b41e6b. Read the comment docs.. # Codecov Report\nMerging #967 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #967   +/-\n=======================================\n  Coverage   73.65%   73.65%         \n=======================================\n  Files          22       22         \n  Lines         725      725         \n=======================================\n  Hits          534      534         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2394d53...b0b2339. Read the comment docs.. # Codecov Report\nMerging #968 into master will increase coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #968     +/-\n=========================================\n+ Coverage   73.65%   73.75%   +0.1%   \n=========================================\n  Files          22       22           \n  Lines         725      724      -1   \n=========================================\n  Hits          534      534           \n+ Misses        191      190      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Endpoint.swift | 94% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.1% <100%> (-0.18%) | :arrow_down: |\n| Sources/Moya/Response.swift | 95.74% <100%> (+0.09%) | :arrow_up: |\n| Sources/Moya/Moya+Alamofire.swift | 82.6% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Defaults.swift | 95.23% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider.swift | 90.9% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 94.91% <0%> (+1.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 80a55f5...32a90b2. Read the comment docs.. # Codecov Report\nMerging #971 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #971   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 26c4fd3...c4a6f34. Read the comment docs.. # Codecov Report\nMerging #977 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #977   +/-\n=======================================\n  Coverage   73.72%   73.72%         \n=======================================\n  Files          22       22         \n  Lines         723      723         \n=======================================\n  Hits          533      533         \n  Misses        190      190\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 15be7c7...180e379. Read the comment docs.. # Codecov Report\nMerging #979 into master will decrease coverage by -0.11%.\nThe diff coverage is 25%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #979      +/-\n==========================================\n- Coverage   73.72%   73.61%   -0.11%   \n==========================================\n  Files          22       22            \n  Lines         723      724       +1   \n==========================================\n  Hits          533      533            \n- Misses        190      191       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 93.33% <25%> (-1.59%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 807b24f...8991a15. Read the comment docs.. # Codecov Report\nMerging #981 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #981   +/-\n=======================================\n  Coverage   73.61%   73.61%         \n=======================================\n  Files          22       22         \n  Lines         724      724         \n=======================================\n  Hits          533      533         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd2a332...722a78b. Read the comment docs.. # Codecov Report\nMerging #984 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #984   +/-\n=======================================\n  Coverage   73.61%   73.61%         \n=======================================\n  Files          22       22         \n  Lines         724      724         \n=======================================\n  Hits          533      533         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f5e405a...5d93b9f. Read the comment docs.. # Codecov Report\nMerging #989 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #989   +/-\n=======================================\n  Coverage   73.61%   73.61%         \n=======================================\n  Files          22       22         \n  Lines         724      724         \n=======================================\n  Hits          533      533         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c07085d...67c5068. Read the comment docs.. # Codecov Report\nMerging #990 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #990   +/-\n=======================================\n  Coverage   73.61%   73.61%         \n=======================================\n  Files          22       22         \n  Lines         724      724         \n=======================================\n  Hits          533      533         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5a37dc0...66cea45. Read the comment docs.. # Codecov Report\nMerging #993 into 9.0.0-dev will decrease coverage by -0.41%.\nThe diff coverage is 50%.\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev     #993      +/-\n=============================================\n- Coverage      73.61%   73.21%   -0.41%   \n=============================================\n  Files             22       22            \n  Lines            724      728       +4   \n=============================================\n  Hits             533      533            \n- Misses           191      195       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (\u00f8) | :white_check_mark: |\n| Sources/Moya/MoyaError.swift | 31.81% <50%> (\u00f8) | :white_check_mark: |\n| Sources/Moya/MoyaProvider.swift | 84.74% <50%> (-6.17%) | :x: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.1% <66.66%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c07085d...249e436. Read the comment docs.. # Codecov Report\nMerging #1002 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1002      +/-\n==========================================\n+ Coverage   73.61%   73.65%   +0.03%   \n==========================================\n  Files          22       22            \n  Lines         724      725       +1   \n==========================================\n+ Hits          533      534       +1   \n  Misses        191      191\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <100%> (+0.17%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca5c9fe...d2070ee. Read the comment docs.. # Codecov Report\nMerging #1005 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1005   +/-\n=======================================\n  Coverage   73.65%   73.65%         \n=======================================\n  Files          22       22         \n  Lines         725      725         \n=======================================\n  Hits          534      534         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bd0365f...1fac330. Read the comment docs.. # Codecov Report\nMerging #1010 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1010   +/-\n=======================================\n  Coverage   73.65%   73.65%         \n=======================================\n  Files          22       22         \n  Lines         725      725         \n=======================================\n  Hits          534      534         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e27a381...cdb0f3f. Read the comment docs.. # Codecov Report\nMerging #1013 into 9.0.0-dev will increase coverage by 0.44%.\nThe diff coverage is 55.55%.\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1013      +/-\n=============================================\n+ Coverage      73.21%   73.65%   +0.44%   \n=============================================\n  Files             22       22            \n  Lines            728      725       -3   \n=============================================\n+ Hits             533      534       +1   \n+ Misses           195      191       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (\u00f8) | :white_check_mark: |\n| Sources/Moya/MoyaProvider.swift | 90.9% <50%> (+6.16%) | :white_check_mark: |\n| Sources/Moya/MoyaError.swift | 31.81% <50%> (\u00f8) | :white_check_mark: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <75%> (+0.17%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a3f0c52...3011754. Read the comment docs.. # Codecov Report\nMerging #1015 into master will increase coverage by 0.4%.\nThe diff coverage is 50%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1015     +/-\n=========================================\n+ Coverage   73.25%   73.65%   +0.4%   \n=========================================\n  Files          22       22           \n  Lines         729      725      -4   \n=========================================\n  Hits          534      534           \n+ Misses        195      191      -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (\u00f8) | :white_check_mark: |\n| Sources/Moya/MoyaProvider.swift | 90.9% <50%> (+6.16%) | :white_check_mark: |\n| Sources/Moya/MoyaError.swift | 31.81% <50%> (\u00f8) | :white_check_mark: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <66.66%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 23be214...14881b0. Read the comment docs.. # Codecov Report\nMerging #1016 into 9.0.0-dev will increase coverage by 0.44%.\nThe diff coverage is 60%.\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1016      +/-\n=============================================\n+ Coverage      73.25%   73.69%   +0.44%   \n=============================================\n  Files             22       22            \n  Lines            729      726       -3   \n=============================================\n+ Hits             534      535       +1   \n+ Misses           195      191       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/RxMoyaProvider.swift | 43.58% <100%> (+1.48%) | :arrow_up: |\n| Sources/Moya/MoyaProvider.swift | 90.9% <50%> (+6.16%) | :arrow_up: |\n| Sources/Moya/MoyaError.swift | 31.81% <50%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <66.66%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0dc516b...26b9d47. Read the comment docs.. # Codecov Report\nMerging #1017 into 9.0.0-dev will decrease coverage by 0.4%.\nThe diff coverage is 50%.\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1017      +/-\n=============================================\n- Coverage      73.65%   73.25%   -0.41%   \n=============================================\n  Files             22       22            \n  Lines            725      729       +4   \n=============================================\n  Hits             534      534            \n- Misses           191      195       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (\u00f8) | :white_check_mark: |\n| Sources/Moya/MoyaProvider.swift | 84.74% <50%> (-6.17%) | :x: |\n| Sources/Moya/MoyaError.swift | 31.81% <50%> (\u00f8) | :white_check_mark: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <66.66%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 107b362...746f81a. Read the comment docs.. # Codecov Report\nMerging #1020 into 9.0.0-dev will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1020      +/-\n=============================================\n+ Coverage      73.25%   73.28%   +0.03%   \n=============================================\n  Files             22       22            \n  Lines            729      730       +1   \n=============================================\n+ Hits             534      535       +1   \n  Misses           195      195\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/RxMoyaProvider.swift | 43.58% <100%> (+1.48%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0dc516b...7cd988d. Read the comment docs.. # Codecov Report\nMerging #1027 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1027   +/-\n=======================================\n  Coverage   73.65%   73.65%         \n=======================================\n  Files          22       22         \n  Lines         725      725         \n=======================================\n  Hits          534      534         \n  Misses        191      191\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 52.54% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d431add...56b9d53. Read the comment docs.. # Codecov Report\nMerging #1031 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1031   +/-\n==========================================\n  Coverage      73.28%   73.28%         \n==========================================\n  Files             22       22         \n  Lines            730      730         \n==========================================\n  Hits             535      535         \n  Misses           195      195\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 52.54% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60c3b83...316c9f6. Read the comment docs.. # Codecov Report\nMerging #1044 into 9.0.0-dev will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1044   +/-\n==========================================\n  Coverage      73.28%   73.28%         \n==========================================\n  Files             22       22         \n  Lines            730      730         \n==========================================\n  Hits             535      535         \n  Misses           195      195\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 93.33% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/Response.swift | 95.65% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60c3b83...e0071f2. Read the comment docs.. # Codecov Report\nMerging #1053 into master will increase coverage by 0.14%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1053      +/-\n==========================================\n+ Coverage   73.65%   73.79%   +0.14%   \n==========================================\n  Files          22       22            \n  Lines         725      729       +4   \n==========================================\n+ Hits          534      538       +4   \n  Misses        191      191\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Defaults.swift | 96% <100%> (+0.76%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 616e38c...eabe9cb. Read the comment docs.\n. # Codecov Report\nMerging #1055 into optional-response-thread-param will not change coverage.\nThe diff coverage is 71.42%.\n\n\n```diff\n@@                       Coverage Diff                       @@\noptional-response-thread-param    #1055   +/-\n===============================================================\n  Coverage                           73.79%   73.79%         \n===============================================================\n  Files                                  22       22         \n  Lines                                 729      729         \n===============================================================\n  Hits                                  538      538         \n  Misses                                191      191\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider.swift | 91.22% <100%> (+0.31%) | :arrow_up: |\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 51.72% <60%> (-0.82%) | :arrow_down: |\n| Sources/RxMoya/RxMoyaProvider.swift | 40.54% <60%> (-1.57%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ed83657...e276294. Read the comment docs.\n. # Codecov Report\nMerging #1065 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1065   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5fd1ac2...46e876e. Read the comment docs.\n. # Codecov Report\nMerging #1067 into 9.0.0-dev will increase coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\n9.0.0-dev    #1067     +/-\n============================================\n+ Coverage      73.43%   73.54%   +0.1%   \n============================================\n  Files             22       22           \n  Lines            734      737      +3   \n============================================\n+ Hits             539      542      +3   \n  Misses           195      195\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/TargetType.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Defaults.swift | 96.15% <100%> (+0.15%) | :arrow_up: |\n| Sources/Moya/MultiTarget.swift | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0c95a70...23a8fc8. Read the comment docs.\n. # Codecov Report\nMerging #1076 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1076   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5fd1ac2...9e8043b. Read the comment docs.\n. # Codecov Report\nMerging #1077 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1077   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb2f18f...7cceeeb. Read the comment docs.\n. # Codecov Report\nMerging #1082 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1082   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c299ec...c82cd92. Read the comment docs.\n. # Codecov Report\nMerging #1084 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1084   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c299ec...46d7c5a. Read the comment docs.\n. # Codecov Report\nMerging #1085 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1085   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c299ec...60930cc. Read the comment docs.\n. # Codecov Report\nMerging #1086 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1086   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cdb0632...17af40d. Read the comment docs.\n. # Codecov Report\nMerging #1091 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1091   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bac7bab...77e0c65. Read the comment docs.\n. # Codecov Report\nMerging #1092 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1092   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfa3568...f7ffdb6. Read the comment docs.\n. # Codecov Report\nMerging #1093 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1093   +/-\n=======================================\n  Coverage   73.79%   73.79%         \n=======================================\n  Files          22       22         \n  Lines         729      729         \n=======================================\n  Hits          538      538         \n  Misses        191      191\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update caadf45...0cf39eb. Read the comment docs.\n. # Codecov Report\nMerging #1095 into master will increase coverage by 2.71%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1095      +/-\n==========================================\n+ Coverage   73.79%   76.51%   +2.71%   \n==========================================\n  Files          22       22            \n  Lines         729      728       -1   \n==========================================\n+ Hits          538      557      +19   \n+ Misses        191      171      -20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/RxMoyaProvider.swift | 94.59% <100%> (+52.48%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update caadf45...17e15a6. Read the comment docs.\n. # Codecov Report\nMerging #1099 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1099   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c4e58ee...8170445. Read the comment docs.\n. # Codecov Report\nMerging #1101 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1101   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a74c4da...8346267. Read the comment docs.\n. # Codecov Report\nMerging #1103 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1103   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a74c4da...30839d4. Read the comment docs.\n. # Codecov Report\nMerging #1105 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1105   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4512a2a...5d429f1. Read the comment docs.\n. # Codecov Report\nMerging #1106 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1106   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4512a2a...30e7994. Read the comment docs.\n. # Codecov Report\nMerging #1112 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1112   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 784f609...a9678b5. Read the comment docs.\n. # Codecov Report\nMerging #1113 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1113   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 988caff...31a816a. Read the comment docs.\n. # Codecov Report\nMerging #1117 into optional-response-thread-param will not change coverage.\nThe diff coverage is 72.22%.\n\n\n```diff\n@@                       Coverage Diff                       @@\noptional-response-thread-param    #1117   +/-\n===============================================================\n  Coverage                           76.51%   76.51%         \n===============================================================\n  Files                                  22       22         \n  Lines                                 728      728         \n===============================================================\n  Hits                                  557      557         \n  Misses                                171      171\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/RxMoyaProvider.swift | 94.44% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider.swift | 91.22% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/Moya+Alamofire.swift | 82.6% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <52.94%> (\u00f8) | :arrow_up: |\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 51.72% <60%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b11060b...0c034df. Read the comment docs.\n. # Codecov Report\nMerging #1120 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1120   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5106077...6a58b0b. Read the comment docs.\n. # Codecov Report\nMerging #1121 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1121      +/-\n=========================================\n+ Coverage   76.51%   76.6%   +0.09%   \n=========================================\n  Files          22      22            \n  Lines         728     731       +3   \n=========================================\n+ Hits          557     560       +3   \n  Misses        171     171\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Defaults.swift | 96.42% <100%> (+0.42%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5106077...6d710b0. Read the comment docs.\n. # Codecov Report\nMerging #1124 into 9.0.0-dev will increase coverage by 2.68%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1124      +/-\n=============================================\n+ Coverage      73.54%   76.22%   +2.68%   \n=============================================\n  Files             22       22            \n  Lines            737      736       -1   \n=============================================\n+ Hits             542      561      +19   \n+ Misses           195      175      -20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/RxMoyaProvider.swift | 94.73% <100%> (+51.14%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7724451...a132929. Read the comment docs.\n. # Codecov Report\nMerging #1127 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1127   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa33a04...74f910f. Read the comment docs.\n. # Codecov Report\nMerging #1132 into master will decrease coverage by 2.71%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1132      +/-\n==========================================\n- Coverage   76.51%   73.79%   -2.72%   \n==========================================\n  Files          22       22            \n  Lines         728      729       +1   \n==========================================\n- Hits          557      538      -19   \n- Misses        171      191      +20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/RxMoyaProvider.swift | 42.1% <0%> (-52.49%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5f7c8f6...ef0eb93. Read the comment docs.\n. # Codecov Report\nMerging #1139 into master will decrease coverage by 0.2%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1139      +/-\n=========================================\n- Coverage   76.51%   76.3%   -0.21%   \n=========================================\n  Files          22      22            \n  Lines         728     730       +2   \n=========================================\n  Hits          557     557            \n- Misses        171     173       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Internal.swift | 61.71% <0%> (-0.57%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5f7c8f6...10e8dd2. Read the comment docs.\n. # Codecov Report\nMerging #1140 into 9.0.0-dev will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1140      +/-\n=============================================\n+ Coverage      76.22%   76.24%   +0.01%   \n=============================================\n  Files             22       22            \n  Lines            736      745       +9   \n=============================================\n+ Hits             561      568       +7   \n- Misses           175      177       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/RxMoyaProvider.swift | 90.47% <100%> (-4.27%) | :arrow_down: |\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 56.25% <100%> (+3.7%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 80fab67...27bb5ea. Read the comment docs.\n. # Codecov Report\nMerging #1142 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1142   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5f7c8f6...e559323. Read the comment docs.\n. # Codecov Report\nMerging #1146 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1146   +/-\n=======================================\n  Coverage   76.51%   76.51%         \n=======================================\n  Files          22       22         \n  Lines         728      728         \n=======================================\n  Hits          557      557         \n  Misses        171      171\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0dad20e...29ab166. Read the comment docs.\n. # Codecov Report\nMerging #1147 into 9.0.0-dev will decrease coverage by 1.05%.\nThe diff coverage is 58.33%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1147      +/-\n=============================================\n- Coverage      79.53%   78.48%   -1.06%   \n=============================================\n  Files             23       23            \n  Lines            738      739       +1   \n=============================================\n- Hits             587      580       -7   \n- Misses           151      159       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/TargetType.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/Moya/MultiTarget.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Defaults.swift | 95% <100%> (-0.24%) | :arrow_down: |\n| Sources/Moya/Endpoint.swift | 66.03% <36.36%> (-27.97%) | :arrow_down: |\n| Sources/Moya/MoyaProvider+Internal.swift | 67.44% <76%> (+3.76%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd290c7...2216c2f. Read the comment docs.\n. # Codecov Report\nMerging #1149 into master will increase coverage by 0.57%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1149      +/-\n==========================================\n+ Coverage   76.51%   77.08%   +0.57%   \n==========================================\n  Files          22       22            \n  Lines         728      720       -8   \n==========================================\n- Hits          557      555       -2   \n+ Misses        171      165       -6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Internal.swift | 63.67% <100%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 722eee8...66ae6a9. Read the comment docs.\n. # Codecov Report\nMerging #1151 into master will decrease coverage by 0.57%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1151      +/-\n==========================================\n- Coverage   77.08%   76.51%   -0.58%   \n==========================================\n  Files          22       22            \n  Lines         720      728       +8   \n==========================================\n+ Hits          555      557       +2   \n- Misses        165      171       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <0%> (-1.41%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2611d06...988caff. Read the comment docs.\n. # Codecov Report\nMerging #1153 into 9.0.0-dev will decrease coverage by 0.95%.\nThe diff coverage is 50.64%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1153      +/-\n=============================================\n- Coverage      76.22%   75.26%   -0.96%   \n=============================================\n  Files             22       23       +1   \n  Lines            736      748      +12   \n=============================================\n+ Hits             561      563       +2   \n- Misses           175      185      +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider.swift | 84.74% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/RxMoyaAvailability.swift | 100% <100%> (\u00f8) | |\n| Sources/ReactiveMoya/MoyaProvider+Reactive.swift | 30.76% <30.76%> (\u00f8) | |\n| Sources/RxMoya/MoyaProvider+Rx.swift | 84.21% <33.33%> (\u00f8) | |\n| ...ources/ReactiveMoya/ReactiveMoyaAvailability.swift | 70.37% <73.07%> (+70.37%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 80fab67...bd4f48d. Read the comment docs.\n. # Codecov Report\nMerging #1155 into master will decrease coverage by 0.54%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1155      +/-\n==========================================\n- Coverage   77.08%   76.54%   -0.55%   \n==========================================\n  Files          22       22            \n  Lines         720      729       +9   \n==========================================\n+ Hits          555      558       +3   \n- Misses        165      171       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 93.44% <100%> (+0.1%) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <0%> (-1.41%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2611d06...eff08ee. Read the comment docs.\n. # Codecov Report\nMerging #1157 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1157   +/-\n=======================================\n  Coverage   77.11%   77.11%         \n=======================================\n  Files          22       22         \n  Lines         721      721         \n=======================================\n  Hits          556      556         \n  Misses        165      165\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 346af2b...9da1083. Read the comment docs.\n. # Codecov Report\nMerging #1158 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1158   +/-\n=======================================\n  Coverage   77.11%   77.11%         \n=======================================\n  Files          22       22         \n  Lines         721      721         \n=======================================\n  Hits          556      556         \n  Misses        165      165\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32221eb...c130f63. Read the comment docs.\n. # Codecov Report\nMerging #1159 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1159   +/-\n=======================================\n  Coverage   77.11%   77.11%         \n=======================================\n  Files          22       22         \n  Lines         721      721         \n=======================================\n  Hits          556      556         \n  Misses        165      165\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9dded0c...cab54a6. Read the comment docs.\n. # Codecov Report\nMerging #1161 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1161   +/-\n=======================================\n  Coverage   77.11%   77.11%         \n=======================================\n  Files          22       22         \n  Lines         721      721         \n=======================================\n  Hits          556      556         \n  Misses        165      165\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 22e2be5...5d292ab. Read the comment docs.\n. # Codecov Report\nMerging #1162 into 9.0.0-dev will increase coverage by 1.05%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n9.0.0-dev   #1162      +/-\n============================================\n+ Coverage      78.04%   79.1%   +1.05%   \n============================================\n  Files             23      22       -1   \n  Lines            747     737      -10   \n============================================\n  Hits             583     583            \n+ Misses           164     154      -10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ources/ReactiveMoya/ReactiveMoyaAvailability.swift | 65.38% <\u00f8> (+2.42%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b8bd7ec...7e79c58. Read the comment docs.\n. # Codecov Report\nMerging #1163 into 9.0.0-dev will increase coverage by 2.77%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1163      +/-\n=============================================\n+ Coverage      75.26%   78.04%   +2.77%   \n=============================================\n  Files             23       23            \n  Lines            748      747       -1   \n=============================================\n+ Hits             563      583      +20   \n+ Misses           185      164      -21\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/MoyaProvider+Reactive.swift | 94.73% <100%> (+63.96%) | :arrow_up: |\n| Sources/RxMoya/RxMoyaAvailability.swift | 0% <0%> (-100%) | :arrow_down: |\n| ...ources/ReactiveMoya/ReactiveMoyaAvailability.swift | 62.96% <0%> (-7.41%) | :arrow_down: |\n| Sources/RxMoya/MoyaProvider+Rx.swift | 94.73% <0%> (+10.52%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 155475b...10ab03c. Read the comment docs.\n. # Codecov Report\nMerging #1164 into optional-response-thread-param will decrease coverage by 0.11%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@                        Coverage Diff                         @@\noptional-response-thread-param    #1164      +/-\n==================================================================\n- Coverage                           76.51%   76.39%   -0.12%   \n==================================================================\n  Files                                  22       22            \n  Lines                                 728      733       +5   \n==================================================================\n+ Hits                                  557      560       +3   \n- Misses                                171      173       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <100%> (\u00f8) | :arrow_up: |\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 51.72% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider.swift | 88.7% <75%> (-2.52%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f58271...36c9a96. Read the comment docs.\n. # Codecov Report\nMerging #1164 into optional-response-thread-param will decrease coverage by 0.11%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@                        Coverage Diff                         @@\noptional-response-thread-param    #1164      +/-\n==================================================================\n- Coverage                           76.51%   76.39%   -0.12%   \n==================================================================\n  Files                                  22       22            \n  Lines                                 728      733       +5   \n==================================================================\n+ Hits                                  557      560       +3   \n- Misses                                171      173       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Internal.swift | 62.27% <100%> (\u00f8) | :arrow_up: |\n| ...urces/ReactiveMoya/ReactiveSwiftMoyaProvider.swift | 51.72% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider.swift | 88.7% <75%> (-2.52%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f58271...36c9a96. Read the comment docs.\n. # Codecov Report\nMerging #1168 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1168   +/-\n=======================================\n  Coverage   77.11%   77.11%         \n=======================================\n  Files          22       22         \n  Lines         721      721         \n=======================================\n  Hits          556      556         \n  Misses        165      165\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d53c550...136568b. Read the comment docs.\n. # Codecov Report\nMerging #1169 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1169   +/-\n==========================================\n  Coverage      75.26%   75.26%         \n==========================================\n  Files             23       23         \n  Lines            748      748         \n==========================================\n  Hits             563      563         \n  Misses           185      185\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 155475b...9f2af17. Read the comment docs.\n. # Codecov Report\nMerging #1173 into optional-response-thread-param will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@                       Coverage Diff                       @@\noptional-response-thread-param    #1173   +/-\n===============================================================\n  Coverage                           76.39%   76.39%         \n===============================================================\n  Files                                  22       22         \n  Lines                                 733      733         \n===============================================================\n  Hits                                  560      560         \n  Misses                                173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d1758cb...37c5876. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (9.0.0-dev@62a73bc). Click here to learn what that means.\nThe diff coverage is 50%.\n\n\n```diff\n@@             Coverage Diff              @@\n9.0.0-dev    #1193   +/-\n============================================\n  Coverage             ?   79.53%         \n============================================\n  Files                ?       23         \n  Lines                ?      738         \n  Branches             ?        0         \n============================================\n  Hits                 ?      587         \n  Misses               ?      151         \n  Partials             ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 91.8% <50%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 62a73bc...8a84015. Read the comment docs.\n. # Codecov Report\nMerging #1212 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1212   +/-\n==========================================\n  Coverage      78.48%   78.48%         \n==========================================\n  Files             23       23         \n  Lines            739      739         \n==========================================\n  Hits             580      580         \n  Misses           159      159\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/RxMoyaAvailability.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bcac81...f3dece8. Read the comment docs.\n. # Codecov Report\nMerging #1213 into 9.0.0-dev will decrease coverage by 2.16%.\nThe diff coverage is 0%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1213      +/-\n=============================================\n- Coverage      78.48%   76.31%   -2.17%   \n=============================================\n  Files             23       24       +1   \n  Lines            739      760      +21   \n=============================================\n  Hits             580      580            \n- Misses           159      180      +21\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bcac81...36a354c. Read the comment docs.\n. # Codecov Report\nMerging #1215 into 9.0.0-dev will increase coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\n9.0.0-dev   #1215      +/-\n============================================\n+ Coverage      76.25%   76.4%   +0.15%   \n============================================\n  Files             24      24            \n  Lines            758     763       +5   \n============================================\n+ Hits             578     583       +5   \n  Misses           180     180\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/AccessTokenPlugin.swift | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2dfd629...09cebda. Read the comment docs.\n. # Codecov Report\nMerging #1218 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1218   +/-\n==========================================\n  Coverage      76.31%   76.31%         \n==========================================\n  Files             24       24         \n  Lines            760      760         \n==========================================\n  Hits             580      580         \n  Misses           180      180\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0c25037...b012d8a. Read the comment docs.\n. # Codecov Report\nMerging #1224 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1224   +/-\n==========================================\n  Coverage      76.25%   76.25%         \n==========================================\n  Files             24       24         \n  Lines            758      758         \n==========================================\n  Hits             578      578         \n  Misses           180      180\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ources/ReactiveMoya/ReactiveMoyaAvailability.swift | 65.38% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/RxMoyaAvailability.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f2787a2...9fb12a5. Read the comment docs.\n. # Codecov Report\nMerging #1225 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1225   +/-\n==========================================\n  Coverage      76.25%   76.25%         \n==========================================\n  Files             24       24         \n  Lines            758      758         \n==========================================\n  Hits             578      578         \n  Misses           180      180\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f2787a2...1af4117. Read the comment docs.\n. # Codecov Report\nMerging #1229 into 9.0.0-dev will increase coverage by 2.75%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1229      +/-\n=============================================\n+ Coverage       76.4%   79.16%   +2.75%   \n=============================================\n  Files             24       24            \n  Lines            763      763            \n=============================================\n+ Hits             583      604      +21   \n+ Misses           180      159      -21\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+100%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5cb8f6...96479a2. Read the comment docs.\n. # Codecov Report\nMerging #1234 into 9.0.0-dev will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1234      +/-\n=============================================\n+ Coverage      79.16%   79.24%   +0.08%   \n=============================================\n  Files             24       24            \n  Lines            763      766       +3   \n=============================================\n+ Hits             604      607       +3   \n  Misses           159      159\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Internal.swift | 67.88% <100%> (+0.44%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 486a933...0e1b13e. Read the comment docs.\n. # Codecov Report\nMerging #1241 into 9.0.0-dev will increase coverage by 1.78%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\n9.0.0-dev    #1241      +/-\n=============================================\n+ Coverage      78.58%   80.36%   +1.78%   \n=============================================\n  Files             24       24            \n  Lines            775      774       -1   \n=============================================\n+ Hits             609      622      +13   \n+ Misses           166      152      -14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/Moya/Endpoint.swift | 92.3% <100%> (+26.26%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9a17935...e58d0d7. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (10.0.0-dev@a684307). Click here to learn what that means.\nThe diff coverage is 78.72%.\n\n\n```diff\n@@              Coverage Diff              @@\n10.0.0-dev    #1248   +/-\n=============================================\n  Coverage              ?   83.98%         \n=============================================\n  Files                 ?       24         \n  Lines                 ?      768         \n  Branches              ?        0         \n=============================================\n  Hits                  ?      645         \n  Misses                ?      123         \n  Partials              ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaError.swift | 28% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | 100% <100%> (\u00f8) | |\n| Sources/Moya/MoyaProvider+Defaults.swift | 76% <25%> (\u00f8) | |\n| Sources/Moya/Endpoint.swift | 93.22% <97.05%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a684307...42ecf86. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (10.0.0-dev@a684307). Click here to learn what that means.\nThe diff coverage is 78.72%.\n\n\n```diff\n@@              Coverage Diff              @@\n10.0.0-dev    #1248   +/-\n=============================================\n  Coverage              ?   83.98%         \n=============================================\n  Files                 ?       24         \n  Lines                 ?      768         \n  Branches              ?        0         \n=============================================\n  Hits                  ?      645         \n  Misses                ?      123         \n  Partials              ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaError.swift | 28% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | 100% <100%> (\u00f8) | |\n| Sources/Moya/MoyaProvider+Defaults.swift | 76% <25%> (\u00f8) | |\n| Sources/Moya/Endpoint.swift | 93.22% <97.05%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a684307...42ecf86. Read the comment docs.\n. # Codecov Report\nMerging #1249 into 9.0.0-dev will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1249   +/-\n==========================================\n  Coverage      81.59%   81.59%         \n==========================================\n  Files             24       24         \n  Lines            766      766         \n==========================================\n  Hits             625      625         \n  Misses           141      141\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Endpoint.swift | 92.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c29fb18...fc9f89e. Read the comment docs.\n. # Codecov Report\nMerging #1252 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1252   +/-\n==========================================\n  Coverage      81.59%   81.59%         \n==========================================\n  Files             24       24         \n  Lines            766      766         \n==========================================\n  Hits             625      625         \n  Misses           141      141\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Endpoint.swift | 92.3% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c29fb18...432cb7d. Read the comment docs.\n. # Codecov Report\nMerging #1254 into 9.0.0-dev will increase coverage by 1.4%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\n9.0.0-dev   #1254     +/-\n===========================================\n+ Coverage      81.59%     83%   +1.4%   \n===========================================\n  Files             24      24           \n  Lines            766     753     -13   \n===========================================\n  Hits             625     625           \n+ Misses           141     128     -13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/TargetType.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/Moya/MultipartFormData.swift | 25% <0%> (-75%) | :arrow_down: |\n| Sources/Moya/MoyaProvider+Internal.swift | 81.67% <0%> (+10.44%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d30998d...e639cd3. Read the comment docs.\n. # Codecov Report\nMerging #1255 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1255   +/-\n==========================================\n  Coverage      81.59%   81.59%         \n==========================================\n  Files             24       24         \n  Lines            766      766         \n==========================================\n  Hits             625      625         \n  Misses           141      141\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d30998d...6cbc1b3. Read the comment docs.\n. # Codecov Report\nMerging #1256 into 9.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n9.0.0-dev    #1256   +/-\n==========================================\n  Coverage      81.59%   81.59%         \n==========================================\n  Files             24       24         \n  Lines            766      766         \n==========================================\n  Hits             625      625         \n  Misses           141      141\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d30998d...a56e128. Read the comment docs.\n. # Codecov Report\nMerging #1262 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1262   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 137d530...f1dfbf1. Read the comment docs.\n. # Codecov Report\nMerging #1262 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1262   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 137d530...f1dfbf1. Read the comment docs.\n. # Codecov Report\nMerging #1264 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1264   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0bd6ef7...ea84ca7. Read the comment docs.\n. # Codecov Report\nMerging #1264 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1264   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0bd6ef7...ea84ca7. Read the comment docs.\n. # Codecov Report\nMerging #1266 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n10.0.0-dev   #1266   +/-\n==========================================\n  Coverage          83%     83%         \n==========================================\n  Files              24      24         \n  Lines             753     753         \n==========================================\n  Hits              625     625         \n  Misses            128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5d1c0c...b817435. Read the comment docs.\n. # Codecov Report\nMerging #1266 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n10.0.0-dev   #1266   +/-\n==========================================\n  Coverage          83%     83%         \n==========================================\n  Files              24      24         \n  Lines             753     753         \n==========================================\n  Hits              625     625         \n  Misses            128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5d1c0c...b817435. Read the comment docs.\n. # Codecov Report\nMerging #1269 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1269   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/TargetType.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d45ac12...45e6d4c. Read the comment docs.\n. # Codecov Report\nMerging #1269 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1269   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/TargetType.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d45ac12...45e6d4c. Read the comment docs.\n. # Codecov Report\nMerging #1274 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1274   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 077d3e5...9e89bde. Read the comment docs.\n. # Codecov Report\nMerging #1279 into master will increase coverage by 0.07%.\nThe diff coverage is 86.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1279      +/-\n==========================================\n+ Coverage      83%   83.07%   +0.07%   \n==========================================\n  Files          24       24            \n  Lines         753      768      +15   \n==========================================\n+ Hits          625      638      +13   \n- Misses        128      130       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/AccessTokenPlugin.swift | 93.75% <86.66%> (-6.25%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afb192c...2b976d3. Read the comment docs.\n. # Codecov Report\nMerging #1289 into 10.0.0-dev will increase coverage by 1.72%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\n10.0.0-dev   #1289      +/-\n=============================================\n+ Coverage       81.27%     83%   +1.72%   \n=============================================\n  Files              24      24            \n  Lines             753     753            \n=============================================\n+ Hits              612     625      +13   \n+ Misses            141     128      -13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Endpoint.swift | 92.3% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/Response.swift | 95.65% <0%> (+8.69%) | :arrow_up: |\n| Sources/RxMoya/Observable+Response.swift | 67.74% <0%> (+9.67%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (+10%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+14.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 494ff5c...62be9b2. Read the comment docs.\n. # Codecov Report\nMerging #1290 into 10.0.0-dev will decrease coverage by 1.72%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff               @@\n10.0.0-dev    #1290      +/-\n==============================================\n- Coverage          83%   81.27%   -1.73%   \n==============================================\n  Files              24       24            \n  Lines             753      753            \n==============================================\n- Hits              625      612      -13   \n- Misses            128      141      +13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 85.71% <0%> (-14.29%) | :arrow_down: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 80% <0%> (-10%) | :arrow_down: |\n| Sources/RxMoya/Observable+Response.swift | 58.06% <0%> (-9.68%) | :arrow_down: |\n| Sources/Moya/Response.swift | 86.95% <0%> (-8.7%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8034515...9755f4b. Read the comment docs.\n. # Codecov Report\nMerging #1291 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1291   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6be712a...815bbe2. Read the comment docs.\n. # Codecov Report\nMerging #1294 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1294      +/-\n==========================================\n+ Coverage      83%   83.04%   +0.04%   \n==========================================\n  Files          24       24            \n  Lines         753      755       +2   \n==========================================\n+ Hits          625      627       +2   \n  Misses        128      128\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/MoyaProvider+Rx.swift | 92.1% <100%> (+0.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1eb1810...e51e71a. Read the comment docs.\n. # Codecov Report\nMerging #1302 into 10.0.0-dev will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n10.0.0-dev   #1302   +/-\n==========================================\n  Coverage          83%     83%         \n==========================================\n  Files              24      24         \n  Lines             753     753         \n==========================================\n  Hits              625     625         \n  Misses            128     128\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/MoyaProvider+Rx.swift | 91.66% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5d1c0c...4f8f0c0. Read the comment docs.\n. # Codecov Report\nMerging #1306 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1306   +/-\n===========================================\n  Coverage       86.45%   86.45%         \n===========================================\n  Files              24       24         \n  Lines             753      753         \n===========================================\n  Hits              651      651         \n  Misses            102      102\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9998418...8a1d503. Read the comment docs.\n. # Codecov Report\nMerging #1314 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1314   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b9a367b...291e251. Read the comment docs.\n. # Codecov Report\nMerging #1315 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1315   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b9a367b...03c44d7. Read the comment docs.\n. # Codecov Report\nMerging #1322 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1322   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 000d57a...9e33570. Read the comment docs.\n. # Codecov Report\nMerging #1324 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1324   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d889e10...0ed2eb1. Read the comment docs.\n. # Codecov Report\nMerging #1327 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1327   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d889e10...f535595. Read the comment docs.\n. # Codecov Report\nMerging #1328 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1328   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d889e10...dc80e20. Read the comment docs.\n. # Codecov Report\nMerging #1335 into 10.0.0-dev will increase coverage by 6.47%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff               @@\n10.0.0-dev    #1335      +/-\n==============================================\n+ Coverage       81.93%   88.41%   +6.47%   \n==============================================\n  Files               5        5            \n  Lines             155      164       +9   \n==============================================\n+ Hits              127      145      +18   \n+ Misses             28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <100%> (+10.9%) | :arrow_up: |\n| Sources/RxMoya/Observable+Response.swift | 70.58% <100%> (+12.52%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <100%> (+14.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9fa5482...9281b58. Read the comment docs.\n. # Codecov Report\nMerging #1337 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1337   +/-\n======================================\n  Coverage      83%     83%         \n======================================\n  Files          24      24         \n  Lines         753     753         \n======================================\n  Hits          625     625         \n  Misses        128     128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55c561c...5309dc6. Read the comment docs.\n. # Codecov Report\nMerging #1340 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1340   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55e18c0...ca29029. Read the comment docs.\n. # Codecov Report\nMerging #1341 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1341   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 789f74e...48220cf. Read the comment docs.\n. # Codecov Report\nMerging #1341 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1341   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 789f74e...48220cf. Read the comment docs.\n. # Codecov Report\nMerging #1343 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1343   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8789f8f...0f64096. Read the comment docs.\n. # Codecov Report\nMerging #1343 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1343   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8789f8f...0f64096. Read the comment docs.\n. # Codecov Report\nMerging #1344 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1344   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8789f8f...e52644e. Read the comment docs.\n. # Codecov Report\nMerging #1344 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1344   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8789f8f...e52644e. Read the comment docs.\n. # Codecov Report\nMerging #1346 into master will decrease coverage by 4.81%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1346      +/-\n=========================================\n- Coverage   81.81%     77%   -4.82%   \n=========================================\n  Files           7       7            \n  Lines         187     187            \n=========================================\n- Hits          153     144       -9   \n- Misses         34      43       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 85.71% <0%> (-14.29%) | :arrow_down: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 80% <0%> (-10%) | :arrow_down: |\n| Sources/RxMoya/Observable+Response.swift | 58.06% <0%> (-9.68%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8789f8f...a5b0c0f. Read the comment docs.\n. # Codecov Report\nMerging #1346 into master will decrease coverage by 4.81%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1346      +/-\n=========================================\n- Coverage   81.81%     77%   -4.82%   \n=========================================\n  Files           7       7            \n  Lines         187     187            \n=========================================\n- Hits          153     144       -9   \n- Misses         34      43       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 85.71% <0%> (-14.29%) | :arrow_down: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 80% <0%> (-10%) | :arrow_down: |\n| Sources/RxMoya/Observable+Response.swift | 58.06% <0%> (-9.68%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8789f8f...a5b0c0f. Read the comment docs.\n. # Codecov Report\nMerging #1348 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1348   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c563689...14fdfe8. Read the comment docs.\n. # Codecov Report\nMerging #1349 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1349   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e4ddf0f...67463b8. Read the comment docs.\n. # Codecov Report\nMerging #1350 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1350   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e4ddf0f...3544538. Read the comment docs.\n. # Codecov Report\nMerging #1351 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1351   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f246ce2...30fa1be. Read the comment docs.\n. # Codecov Report\nMerging #1355 into master will increase coverage by 4.81%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1355      +/-\n==========================================\n+ Coverage      77%   81.81%   +4.81%   \n==========================================\n  Files           7        7            \n  Lines         187      187            \n==========================================\n+ Hits          144      153       +9   \n+ Misses         43       34       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 67.74% <0%> (+9.67%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (+10%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+14.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4c74fc...ae39ac6. Read the comment docs.\n. # Codecov Report\nMerging #1356 into 10.0.0-dev will decrease coverage by 11.4%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff               @@\n10.0.0-dev   #1356       +/-\n==============================================\n- Coverage       88.41%     77%   -11.41%   \n==============================================\n  Files               5       7        +2   \n  Lines             164     187       +23   \n==============================================\n- Hits              145     144        -1   \n- Misses             19      43       +24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 85.71% <0%> (-14.29%) | :arrow_down: |\n| Sources/RxMoya/Observable+Response.swift | 58.06% <0%> (-12.53%) | :arrow_down: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 80% <0%> (-10.91%) | :arrow_down: |\n| Sources/RxMoya/RxMoyaAvailability.swift | 0% <0%> (\u00f8) | |\n| ...ources/ReactiveMoya/ReactiveMoyaAvailability.swift | 65.38% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bb9617...a19efa6. Read the comment docs.\n. # Codecov Report\nMerging #1358 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1358   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bb9617...2f1ebba. Read the comment docs.\n. # Codecov Report\nMerging #1359 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1359   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bb9617...86c17da. Read the comment docs.\n. # Codecov Report\nMerging #1360 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1360   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e10aac0...e10b676. Read the comment docs.\n. # Codecov Report\nMerging #1365 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1365   +/-\n=======================================\n  Coverage   81.81%   81.81%         \n=======================================\n  Files           7        7         \n  Lines         187      187         \n=======================================\n  Hits          153      153         \n  Misses         34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e10aac0...d9d22ac. Read the comment docs.\n. # Codecov Report\nMerging #1367 into 10.0.0-dev will increase coverage by 2.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff               @@\n10.0.0-dev    #1367      +/-\n==============================================\n+ Coverage       86.35%   88.41%   +2.06%   \n==============================================\n  Files              24        5      -19   \n  Lines             784      164     -620   \n==============================================\n- Hits              677      145     -532   \n+ Misses            107       19      -88\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/URLRequest+Encoding.swift | | |\n| Sources/Moya/URL+Moya.swift | | |\n| Sources/Moya/Cancellable.swift | | |\n| Sources/Moya/Response.swift | | |\n| Sources/Moya/Plugins/CredentialsPlugin.swift | | |\n| Sources/Moya/MoyaProvider+Internal.swift | | |\n| Sources/Moya/Endpoint.swift | | |\n| Sources/Moya/Plugins/AccessTokenPlugin.swift | | |\n| Sources/Moya/TargetType.swift | | |\n| Sources/Moya/MoyaProvider.swift | | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33e536e...94366af. Read the comment docs.\n. # Codecov Report\nMerging #1370 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1370   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 43ff1e1...0a01085. Read the comment docs.\n. # Codecov Report\nMerging #1373 into master will increase coverage by 11.4%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1373      +/-\n==========================================\n+ Coverage      77%   88.41%   +11.4%   \n==========================================\n  Files           7        5       -2   \n  Lines         187      164      -23   \n==========================================\n+ Hits          144      145       +1   \n+ Misses         43       19      -24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <100%> (+12.52%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <100%> (+14.28%) | :arrow_up: |\n| Sources/RxMoya/MoyaProvider+Rx.swift | 91.66% <100%> (\u00f8) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <100%> (+10.9%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6a37ac5...41efa0b. Read the comment docs.\n. # Codecov Report\nMerging #1374 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1374   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41efa0b...4377989. Read the comment docs.\n. # Codecov Report\nMerging #1375 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1375   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f72761e...8dfe99a. Read the comment docs.\n. # Codecov Report\nMerging #1377 into master will increase coverage by 4.81%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1377      +/-\n==========================================\n+ Coverage      77%   81.81%   +4.81%   \n==========================================\n  Files           7        7            \n  Lines         187      187            \n==========================================\n+ Hits          144      153       +9   \n+ Misses         43       34       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 67.74% <0%> (+9.67%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (+10%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+14.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6a37ac5...b808817. Read the comment docs.\n. # Codecov Report\nMerging #1385 into 10.0.0-dev will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n10.0.0-dev    #1385   +/-\n===========================================\n  Coverage       88.41%   88.41%         \n===========================================\n  Files               5        5         \n  Lines             164      164         \n===========================================\n  Hits              145      145         \n  Misses             19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a951eea...52ec9d7. Read the comment docs.\n. # Codecov Report\nMerging #1386 into master will increase coverage by 4.81%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1386      +/-\n==========================================\n+ Coverage      77%   81.81%   +4.81%   \n==========================================\n  Files           7        7            \n  Lines         187      187            \n==========================================\n+ Hits          144      153       +9   \n+ Misses         43       34       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 67.74% <0%> (+9.67%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90% <0%> (+10%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+14.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6a37ac5...1af24ee. Read the comment docs.\n. # Codecov Report\nMerging #1397 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1397   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e9b81ff...aebf532. Read the comment docs.\n. # Codecov Report\nMerging #1399 into development will decrease coverage by 0.59%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff               @@\ndevelopment    #1399     +/-\n==============================================\n- Coverage        88.41%   87.82%   -0.6%   \n==============================================\n  Files                5        5           \n  Lines              164      156      -8   \n==============================================\n- Hits               145      137      -8   \n  Misses              19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/MoyaProvider+Reactive.swift | 90.9% <100%> (-0.99%) | :arrow_down: |\n| Sources/RxMoya/MoyaProvider+Rx.swift | 90.62% <100%> (-1.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a7451f...e905172. Read the comment docs.\n. # Codecov Report\nMerging #1405 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1405   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d2a9dd...3b4cf9f. Read the comment docs.\n. # Codecov Report\nMerging #1409 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1409   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a7451f...a63ea09. Read the comment docs.\n. # Codecov Report\nMerging #1410 into master will decrease coverage by 1.97%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1410      +/-\n==========================================\n- Coverage   88.41%   86.43%   -1.98%   \n==========================================\n  Files           5       24      +19   \n  Lines         164      789     +625   \n==========================================\n+ Hits          145      682     +537   \n- Misses         19      107      +88\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/URLRequest+Encoding.swift | 88.23% <100%> (\u00f8) | |\n| Sources/Moya/Plugin.swift | 75% <0%> (\u00f8) | |\n| Sources/Moya/TargetType.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/Endpoint.swift | 93.44% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/CredentialsPlugin.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/URL+Moya.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 91.8% <0%> (\u00f8) | |\n| Sources/Moya/MoyaProvider+Defaults.swift | 76% <0%> (\u00f8) | |\n| Sources/Moya/MultipartFormData.swift | 55% <0%> (\u00f8) | |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a7451f...f72d5ed. Read the comment docs.\n. # Codecov Report\nMerging #1412 into master will increase coverage by 2.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1412      +/-\n==========================================\n+ Coverage   86.35%   88.41%   +2.06%   \n==========================================\n  Files          24        5      -19   \n  Lines         784      164     -620   \n==========================================\n- Hits          677      145     -532   \n+ Misses        107       19      -88\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/URL+Moya.swift | | |\n| Sources/Moya/TargetType.swift | | |\n| Sources/Moya/MoyaProvider+Defaults.swift | | |\n| Sources/Moya/Response.swift | | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | | |\n| Sources/Moya/Endpoint.swift | | |\n| Sources/Moya/URLRequest+Encoding.swift | | |\n| Sources/Moya/MoyaProvider+Internal.swift | | |\n| Sources/Moya/MultipartFormData.swift | | |\n| Sources/Moya/MoyaProvider.swift | | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4935fe4...9338777. Read the comment docs.\n. # Codecov Report\nMerging #1416 into master will increase coverage by 2.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1416      +/-\n==========================================\n+ Coverage   86.35%   88.41%   +2.06%   \n==========================================\n  Files          24        5      -19   \n  Lines         784      164     -620   \n==========================================\n- Hits          677      145     -532   \n+ Misses        107       19      -88\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Defaults.swift | | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | | |\n| Sources/Moya/Response.swift | | |\n| Sources/Moya/MoyaError.swift | | |\n| Sources/Moya/MoyaProvider+Internal.swift | | |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | | |\n| Sources/Moya/Moya+Alamofire.swift | | |\n| Sources/Moya/Plugin.swift | | |\n| Sources/Moya/URL+Moya.swift | | |\n| Sources/Moya/AnyEncodable.swift | | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4935fe4...5ede358. Read the comment docs.\n. # Codecov Report\nMerging #1417 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1417   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 025548b...22501f0. Read the comment docs.\n. # Codecov Report\nMerging #1421 into master will increase coverage by 2.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1421      +/-\n==========================================\n+ Coverage   86.35%   88.41%   +2.06%   \n==========================================\n  Files          24        5      -19   \n  Lines         784      164     -620   \n==========================================\n- Hits          677      145     -532   \n+ Misses        107       19      -88\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/TargetType.swift | | |\n| Sources/Moya/Moya+Alamofire.swift | | |\n| Sources/Moya/MoyaProvider+Internal.swift | | |\n| Sources/Moya/MoyaError.swift | | |\n| Sources/Moya/Cancellable.swift | | |\n| Sources/Moya/MoyaProvider.swift | | |\n| Sources/Moya/Endpoint.swift | | |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | | |\n| Sources/Moya/URL+Moya.swift | | |\n| Sources/Moya/Plugin.swift | | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4935fe4...15508a5. Read the comment docs.\n. # Codecov Report\nMerging #1425 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1425   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 681a415...465a8fd. Read the comment docs.\n. # Codecov Report\nMerging #1443 into development will increase coverage by 0.59%.\nThe diff coverage is n/a.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1443      +/-\n===============================================\n+ Coverage        87.82%   88.41%   +0.59%   \n===============================================\n  Files                5        5            \n  Lines              156      164       +8   \n===============================================\n+ Hits               137      145       +8   \n  Misses              19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/MoyaProvider+Reactive.swift | 91.89% <0%> (+0.98%) | :arrow_up: |\n| Sources/RxMoya/MoyaProvider+Rx.swift | 91.66% <0%> (+1.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e729b3a...d3de41f. Read the comment docs.\n. # Codecov Report\nMerging #1443 into development will increase coverage by 0.59%.\nThe diff coverage is n/a.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1443      +/-\n===============================================\n+ Coverage        87.82%   88.41%   +0.59%   \n===============================================\n  Files                5        5            \n  Lines              156      164       +8   \n===============================================\n+ Hits               137      145       +8   \n  Misses              19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/MoyaProvider+Reactive.swift | 91.89% <0%> (+0.98%) | :arrow_up: |\n| Sources/RxMoya/MoyaProvider+Rx.swift | 91.66% <0%> (+1.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e729b3a...d3de41f. Read the comment docs.\n. # Codecov Report\nMerging #1444 into master will increase coverage by 5.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1444      +/-\n==========================================\n+ Coverage   82.92%   88.41%   +5.48%   \n==========================================\n  Files           5        5            \n  Lines         164      164            \n==========================================\n+ Hits          136      145       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e4eeb7e...54ffb0d. Read the comment docs.\n. # Codecov Report\nMerging #1444 into master will increase coverage by 5.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1444      +/-\n==========================================\n+ Coverage   82.92%   88.41%   +5.48%   \n==========================================\n  Files           5        5            \n  Lines         164      164            \n==========================================\n+ Hits          136      145       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e4eeb7e...54ffb0d. Read the comment docs.\n. # Codecov Report\nMerging #1445 into master will decrease coverage by 5.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1445      +/-\n==========================================\n- Coverage   88.41%   82.92%   -5.49%   \n==========================================\n  Files           5        5            \n  Lines         164      164            \n==========================================\n- Hits          145      136       -9   \n- Misses         19       28       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 87.5% <0%> (-12.5%) | :arrow_down: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 81.81% <0%> (-9.1%) | :arrow_down: |\n| Sources/RxMoya/Observable+Response.swift | 61.76% <0%> (-8.83%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1d4700b...07b505c. Read the comment docs.\n. # Codecov Report\nMerging #1449 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1449   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1bdcb5c...c538ca9. Read the comment docs.\n. # Codecov Report\nMerging #1454 into development will decrease coverage by 2.24%.\nThe diff coverage is 46.66%.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1454      +/-\n===============================================\n- Coverage        87.82%   85.57%   -2.25%   \n===============================================\n  Files                5       24      +19   \n  Lines              156      797     +641   \n===============================================\n+ Hits               137      682     +545   \n- Misses              19      115      +96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MultiTarget.swift | 100% <100%> (\u00f8) | |\n| Sources/Moya/MoyaProvider+Internal.swift | 92.14% <100%> (\u00f8) | |\n| Sources/Moya/TargetType.swift | 20% <20%> (\u00f8) | |\n| Sources/Moya/Plugin.swift | 75% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 91.8% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/AccessTokenPlugin.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/MultipartFormData.swift | 55% <0%> (\u00f8) | |\n| Sources/Moya/Moya+Alamofire.swift | 82.6% <0%> (\u00f8) | |\n| Sources/Moya/MoyaError.swift | 22.58% <0%> (\u00f8) | |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7b8d14d...6acf355. Read the comment docs.\n. # Codecov Report\nMerging #1454 into development will decrease coverage by 2.24%.\nThe diff coverage is 46.66%.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1454      +/-\n===============================================\n- Coverage        87.82%   85.57%   -2.25%   \n===============================================\n  Files                5       24      +19   \n  Lines              156      797     +641   \n===============================================\n+ Hits               137      682     +545   \n- Misses              19      115      +96\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MultiTarget.swift | 100% <100%> (\u00f8) | |\n| Sources/Moya/MoyaProvider+Internal.swift | 92.14% <100%> (\u00f8) | |\n| Sources/Moya/TargetType.swift | 20% <20%> (\u00f8) | |\n| Sources/Moya/Plugin.swift | 75% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | 91.8% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/AccessTokenPlugin.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/MultipartFormData.swift | 55% <0%> (\u00f8) | |\n| Sources/Moya/Moya+Alamofire.swift | 82.6% <0%> (\u00f8) | |\n| Sources/Moya/MoyaError.swift | 22.58% <0%> (\u00f8) | |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7b8d14d...6acf355. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (danger_swift@b808817). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@               Coverage Diff               @@\ndanger_swift    #1457   +/-\n===============================================\n  Coverage                ?   88.41%         \n===============================================\n  Files                   ?        5         \n  Lines                   ?      164         \n  Branches                ?        0         \n===============================================\n  Hits                    ?      145         \n  Misses                  ?       19         \n  Partials                ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/MoyaProvider+Rx.swift | 91.66% <100%> (\u00f8) | |\n| Sources/RxMoya/Observable+Response.swift | 70.58% <100%> (\u00f8) | |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <100%> (\u00f8) | |\n| Sources/RxMoya/Single+Response.swift | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b808817...1bdcb5c. Read the comment docs.\n. # Codecov Report\nMerging #1465 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1465   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b000af3...848de2a. Read the comment docs.\n. # Codecov Report\nMerging #1470 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1470   +/-\n============================================\n  Coverage        87.82%   87.82%         \n============================================\n  Files                5        5         \n  Lines              156      156         \n============================================\n  Hits               137      137         \n  Misses              19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e729b3a...2edb074. Read the comment docs.\n. # Codecov Report\nMerging #1470 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1470   +/-\n============================================\n  Coverage        87.82%   87.82%         \n============================================\n  Files                5        5         \n  Lines              156      156         \n============================================\n  Hits               137      137         \n  Misses              19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e729b3a...2edb074. Read the comment docs.\n. # Codecov Report\nMerging #1473 into master will increase coverage by 5.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1473      +/-\n==========================================\n+ Coverage   82.92%   88.41%   +5.48%   \n==========================================\n  Files           5        5            \n  Lines         164      164            \n==========================================\n+ Hits          136      145       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea236dc...346148d. Read the comment docs.\n. # Codecov Report\nMerging #1475 into master will increase coverage by 5.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1475      +/-\n==========================================\n+ Coverage   82.92%   88.41%   +5.48%   \n==========================================\n  Files           5        5            \n  Lines         164      164            \n==========================================\n+ Hits          136      145       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea236dc...5b90e6a. Read the comment docs.\n. # Codecov Report\nMerging #1476 into master will increase coverage by 5.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1476      +/-\n==========================================\n+ Coverage   82.92%   88.41%   +5.48%   \n==========================================\n  Files           5        5            \n  Lines         164      164            \n==========================================\n+ Hits          136      145       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea236dc...c7f1e23. Read the comment docs.\n. # Codecov Report\nMerging #1483 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1483   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f7ea361...c04a08d. Read the comment docs.\n. # Codecov Report\nMerging #1489 into development will decrease coverage by 0.16%.\nThe diff coverage is n/a.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1489      +/-\n===============================================\n- Coverage        87.82%   87.65%   -0.17%   \n===============================================\n  Files                5       24      +19   \n  Lines              156     1053     +897   \n  Branches             0       96      +96   \n===============================================\n+ Hits               137      923     +786   \n- Misses              19      128     +109   \n- Partials             0        2       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.38% <0%> (-0.53%) | :arrow_down: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Defaults.swift | 89.65% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/CredentialsPlugin.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/AccessTokenPlugin.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/URLRequest+Encoding.swift | 90.9% <0%> (\u00f8) | |\n| Sources/Moya/Response.swift | 88.67% <0%> (\u00f8) | |\n| Sources/Moya/MoyaProvider+Internal.swift | 92.73% <0%> (\u00f8) | |\n| Sources/Moya/Cancellable.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/MultipartFormData.swift | 59.25% <0%> (\u00f8) | |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6bfca04...2eb34c0. Read the comment docs.\n. # Codecov Report\nMerging #1495 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1495   +/-\n============================================\n  Coverage        87.65%   87.65%         \n============================================\n  Files               24       24         \n  Lines             1053     1053         \n  Branches            96       96         \n============================================\n  Hits               923      923         \n  Misses             128      128         \n  Partials             2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bbfd354...7798dee. Read the comment docs.\n. # Codecov Report\nMerging #1505 into development will decrease coverage by 0.67%.\nThe diff coverage is 71.42%.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1505      +/-\n===============================================\n- Coverage        87.65%   86.98%   -0.68%   \n===============================================\n  Files               24       25       +1   \n  Lines             1053     1083      +30   \n  Branches            96       98       +2   \n===============================================\n+ Hits               923      942      +19   \n- Misses             128      139      +11   \n  Partials             2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/TargetType.swift | 50% <100%> (-50%) | :arrow_down: |\n| Sources/Moya/MultiTarget.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/MoyaProvider+Internal.swift | 92.82% <66.66%> (+0.09%) | :arrow_up: |\n| Sources/Moya/ValidationType.swift | 66.66% <66.66%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bbfd354...93eea52. Read the comment docs.\n. # Codecov Report\nMerging #1508 into development will decrease coverage by 0.04%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@              Coverage Diff               @@\ndevelopment   #1508      +/-\n==============================================\n- Coverage        87.65%   87.6%   -0.05%   \n==============================================\n  Files               24      24            \n  Lines             1053    1065      +12   \n  Branches            96      97       +1   \n==============================================\n+ Hits               923     933      +10   \n- Misses             128     130       +2   \n  Partials             2       2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 74.07% <100%> (\u00f8) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.38% <100%> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Sources/Moya/Response.swift | 88.13% <75%> (-0.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bbfd354...9d514ab. Read the comment docs.\n. # Codecov Report\nMerging #1509 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1509   +/-\n=======================================\n  Coverage   87.67%   87.67%         \n=======================================\n  Files          24       24         \n  Lines        1063     1063         \n  Branches       96       96         \n=======================================\n  Hits          932      932         \n  Misses        129      129         \n  Partials        2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e07809c...ea971ce. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (development@c9ddcb3). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff               @@\ndevelopment    #1521   +/-\n==============================================\n  Coverage               ?   87.82%         \n==============================================\n  Files                  ?        5         \n  Lines                  ?      156         \n  Branches               ?        0         \n==============================================\n  Hits                   ?      137         \n  Misses                 ?       19         \n  Partials               ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9ddcb3...2135954. Read the comment docs.\n. # Codecov Report\nMerging #1523 into master will increase coverage by 0.73%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1523      +/-\n==========================================\n+ Coverage   87.67%   88.41%   +0.73%   \n==========================================\n  Files          24        5      -19   \n  Lines        1063      164     -899   \n  Branches       96        0      -96   \n==========================================\n- Hits          932      145     -787   \n+ Misses        129       19     -110   \n+ Partials        2        0       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (-3.49%) | :arrow_down: |\n| Sources/RxMoya/MoyaProvider+Rx.swift | 91.66% <0%> (-2.46%) | :arrow_down: |\n| Sources/ReactiveMoya/MoyaProvider+Reactive.swift | 91.89% <0%> (-2.34%) | :arrow_down: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (\u00f8) | :arrow_up: |\n| Sources/Moya/Endpoint.swift | | |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | | |\n| Sources/Moya/MoyaError.swift | | |\n| Sources/Moya/URL+Moya.swift | | |\n| Sources/Moya/MultipartFormData.swift | | |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 03d9d62...764c5a0. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (development@c9ddcb3). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff               @@\ndevelopment    #1527   +/-\n==============================================\n  Coverage               ?   87.82%         \n==============================================\n  Files                  ?        5         \n  Lines                  ?      156         \n  Branches               ?        0         \n==============================================\n  Hits                   ?      137         \n  Misses                 ?       19         \n  Partials               ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9ddcb3...1529c05. Read the comment docs.\n. # Codecov Report\nMerging #1529 into development will increase coverage by 1.96%.\nThe diff coverage is n/a.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1529      +/-\n===============================================\n+ Coverage        85.85%   87.82%   +1.96%   \n===============================================\n  Files               25        5      -20   \n  Lines              834      156     -678   \n===============================================\n- Hits               716      137     -579   \n+ Misses             118       19      -99\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MultiTarget.swift | | |\n| Sources/Moya/MultipartFormData.swift | | |\n| Sources/Moya/Plugins/NetworkLoggerPlugin.swift | | |\n| Sources/Moya/Plugins/CredentialsPlugin.swift | | |\n| Sources/Moya/URL+Moya.swift | | |\n| Sources/Moya/MoyaError.swift | | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | | |\n| Sources/Moya/TargetType.swift | | |\n| Sources/Moya/Plugin.swift | | |\n| Sources/Moya/AnyEncodable.swift | | |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6f16f6c...c472b2f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (development@c9ddcb3). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff               @@\ndevelopment    #1531   +/-\n==============================================\n  Coverage               ?   87.82%         \n==============================================\n  Files                  ?        5         \n  Lines                  ?      156         \n  Branches               ?        0         \n==============================================\n  Hits                   ?      137         \n  Misses                 ?       19         \n  Partials               ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9ddcb3...e908987. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (development@c9ddcb3). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff               @@\ndevelopment    #1532   +/-\n==============================================\n  Coverage               ?   87.82%         \n==============================================\n  Files                  ?        5         \n  Lines                  ?      156         \n  Branches               ?        0         \n==============================================\n  Hits                   ?      137         \n  Misses                 ?       19         \n  Partials               ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9ddcb3...009da86. Read the comment docs.\n. # Codecov Report\nMerging #1535 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1535   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f071d97...446e36c. Read the comment docs.\n. # Codecov Report\nMerging #1537 into enhancement/dangerfile will increase coverage by 1.81%.\nThe diff coverage is n/a.\n\n\n```diff\n@@                    Coverage Diff                     @@\nenhancement/dangerfile    #1537      +/-\n==========================================================\n+ Coverage                    86.6%   88.41%   +1.81%   \n==========================================================\n  Files                          24        5      -19   \n  Lines                         806      164     -642   \n==========================================================\n- Hits                          698      145     -553   \n+ Misses                        108       19      -89\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/MoyaProvider+Defaults.swift | | |\n| Sources/Moya/Cancellable.swift | | |\n| Sources/Moya/Moya+Alamofire.swift | | |\n| Sources/Moya/MoyaProvider.swift | | |\n| Sources/Moya/Plugins/CredentialsPlugin.swift | | |\n| Sources/Moya/TargetType.swift | | |\n| Sources/Moya/Endpoint.swift | | |\n| Sources/Moya/URLRequest+Encoding.swift | | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | | |\n| Sources/Moya/Response.swift | | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 10dc50d...3d61adc. Read the comment docs.\n. # Codecov Report\nMerging #1544 into master will decrease coverage by 2.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1544      +/-\n==========================================\n- Coverage   88.41%   86.35%   -2.07%   \n==========================================\n  Files           5       24      +19   \n  Lines         164      806     +642   \n==========================================\n+ Hits          145      696     +551   \n- Misses         19      110      +91\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Cancellable.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/MoyaProvider+Internal.swift | 91.09% <0%> (\u00f8) | |\n| Sources/Moya/Response.swift | 91.02% <0%> (\u00f8) | |\n| Sources/Moya/Plugins/NetworkActivityPlugin.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/AnyEncodable.swift | 100% <0%> (\u00f8) | |\n| Sources/Moya/MultipartFormData.swift | 55% <0%> (\u00f8) | |\n| Sources/Moya/MoyaProvider.swift | 81.53% <0%> (\u00f8) | |\n| Sources/Moya/MoyaProvider+Defaults.swift | 76% <0%> (\u00f8) | |\n| Sources/Moya/URLRequest+Encoding.swift | 88.23% <0%> (\u00f8) | |\n| Sources/Moya/Moya+Alamofire.swift | 82.6% <0%> (\u00f8) | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f071d97...454a6d0. Read the comment docs.\n. # Codecov Report\nMerging #1550 into master will increase coverage by 5.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1550      +/-\n==========================================\n+ Coverage   82.92%   88.41%   +5.48%   \n==========================================\n  Files           5        5            \n  Lines         164      164            \n==========================================\n+ Hits          136      145       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bd9d27a...9d8c2c0. Read the comment docs.\n. # Codecov Report\nMerging #1552 into master will increase coverage by 2.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1552      +/-\n==========================================\n+ Coverage   86.35%   88.41%   +2.06%   \n==========================================\n  Files          24        5      -19   \n  Lines         806      164     -642   \n==========================================\n- Hits          696      145     -551   \n+ Misses        110       19      -91\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Moya/Moya+Alamofire.swift | | |\n| Sources/Moya/AnyEncodable.swift | | |\n| Sources/Moya/MoyaProvider+Internal.swift | | |\n| Sources/Moya/MultipartFormData.swift | | |\n| Sources/Moya/Endpoint.swift | | |\n| Sources/Moya/Cancellable.swift | | |\n| Sources/Moya/MoyaProvider+Defaults.swift | | |\n| Sources/Moya/MoyaError.swift | | |\n| Sources/Moya/Response.swift | | |\n| Sources/Moya/URLRequest+Encoding.swift | | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e212f6e...dcef7b6. Read the comment docs.\n. # Codecov Report\nMerging #1553 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1553   +/-\n=======================================\n  Coverage   88.41%   88.41%         \n=======================================\n  Files           5        5         \n  Lines         164      164         \n=======================================\n  Hits          145      145         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7b799ce...77cfb1a. Read the comment docs.\n. # Codecov Report\nMerging #1557 into master will increase coverage by 5.48%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1557      +/-\n==========================================\n+ Coverage   82.92%   88.41%   +5.48%   \n==========================================\n  Files           5        5            \n  Lines         164      164            \n==========================================\n+ Hits          136      145       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3ba9182...738b9ec. Read the comment docs.\n. # Codecov Report\nMerging #1570 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1570   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b90f7e...cada23a. Read the comment docs.\n. # Codecov Report\nMerging #1571 into master will decrease coverage by 5.76%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1571      +/-\n==========================================\n- Coverage   87.82%   82.05%   -5.77%   \n==========================================\n  Files           5        5            \n  Lines         156      156            \n==========================================\n- Hits          137      128       -9   \n- Misses         19       28       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 87.5% <0%> (-12.5%) | :arrow_down: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 81.81% <0%> (-9.1%) | :arrow_down: |\n| Sources/RxMoya/Observable+Response.swift | 61.76% <0%> (-8.83%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b90f7e...cac2a25. Read the comment docs.\n. # Codecov Report\nMerging #1572 into master will increase coverage by 5.76%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1572      +/-\n==========================================\n+ Coverage   82.05%   87.82%   +5.76%   \n==========================================\n  Files           5        5            \n  Lines         156      156            \n==========================================\n+ Hits          128      137       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32521e4...062e5e6. Read the comment docs.\n. # Codecov Report\nMerging #1572 into master will increase coverage by 5.76%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1572      +/-\n==========================================\n+ Coverage   82.05%   87.82%   +5.76%   \n==========================================\n  Files           5        5            \n  Lines         156      156            \n==========================================\n+ Hits          128      137       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32521e4...062e5e6. Read the comment docs.\n. # Codecov Report\nMerging #1573 into master will increase coverage by 5.76%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1573      +/-\n==========================================\n+ Coverage   82.05%   87.82%   +5.76%   \n==========================================\n  Files           5        5            \n  Lines         156      156            \n==========================================\n+ Hits          128      137       +9   \n+ Misses         28       19       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 70.58% <0%> (+8.82%) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <0%> (+9.09%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32521e4...53d2fab. Read the comment docs.\n. # Codecov Report\nMerging #1577 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1577   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 561a86c...4521461. Read the comment docs.\n. # Codecov Report\nMerging #1579 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1579   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c982c08...378fd0d. Read the comment docs.\n. # Codecov Report\nMerging #1580 into development will decrease coverage by 7.23%.\nThe diff coverage is 53.33%.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1580      +/-\n===============================================\n- Coverage        87.82%   80.58%   -7.24%   \n===============================================\n  Files                5        5            \n  Lines              156      170      +14   \n===============================================\n  Hits               137      137            \n- Misses              19       33      +14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 58.53% <53.33%> (-12.06%) | :arrow_down: |\n| Sources/RxMoya/Single+Response.swift | 77.41% <53.33%> (-22.59%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6af0de8...d33d750. Read the comment docs.\n. # Codecov Report\nMerging #1581 into development will decrease coverage by 7.23%.\nThe diff coverage is 53.33%.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1581      +/-\n===============================================\n- Coverage        87.82%   80.58%   -7.24%   \n===============================================\n  Files                5        5            \n  Lines              156      170      +14   \n===============================================\n  Hits               137      137            \n- Misses              19       33      +14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 58.53% <53.33%> (-12.06%) | :arrow_down: |\n| Sources/RxMoya/Single+Response.swift | 77.41% <53.33%> (-22.59%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6af0de8...b2307a8. Read the comment docs.\n. # Codecov Report\nMerging #1586 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1586   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 471bc2e...71923bb. Read the comment docs.\n. # Codecov Report\nMerging #1587 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1587   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 471bc2e...ac08665. Read the comment docs.\n. # Codecov Report\nMerging #1589 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1589   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 11e2e5c...be5818c. Read the comment docs.\n. # Codecov Report\nMerging #1591 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1591   +/-\n=======================================\n  Coverage   82.05%   82.05%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          128      128         \n  Misses         28       28\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77cd637...77f8622. Read the comment docs.\n. # Codecov Report\nMerging #1593 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1593   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d57da7...3095767. Read the comment docs.\n. # Codecov Report\nMerging #1602 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1602   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b3ff7e...85c75a6. Read the comment docs.\n. # Codecov Report\nMerging #1605 into development will increase coverage by 0.66%.\nThe diff coverage is 100%.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1605      +/-\n===============================================\n+ Coverage        87.82%   88.48%   +0.66%   \n===============================================\n  Files                5        5            \n  Lines              156      165       +9   \n===============================================\n+ Hits               137      146       +9   \n  Misses              19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 72.97% <100%> (+2.38%) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 91.66% <100%> (+0.75%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8744753...048f779. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (development@66006b3). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff               @@\ndevelopment    #1611   +/-\n==============================================\n  Coverage               ?   87.82%         \n==============================================\n  Files                  ?        5         \n  Lines                  ?      156         \n  Branches               ?        0         \n==============================================\n  Hits                   ?      137         \n  Misses                 ?       19         \n  Partials               ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 66006b3...8884b97. Read the comment docs.\n. # Codecov Report\nMerging #1615 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1615   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5bdb72b...b21daa5. Read the comment docs.\n. # Codecov Report\nMerging #1617 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1617   +/-\n============================================\n  Coverage        88.48%   88.48%         \n============================================\n  Files                5        5         \n  Lines              165      165         \n============================================\n  Hits               146      146         \n  Misses              19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f29999d...069781e. Read the comment docs.\n. # Codecov Report\nMerging #1619 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1619   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5bdb72b...f68f5ca. Read the comment docs.\n. # Codecov Report\nMerging #1621 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1621   +/-\n=======================================\n  Coverage   87.82%   87.82%         \n=======================================\n  Files           5        5         \n  Lines         156      156         \n=======================================\n  Hits          137      137         \n  Misses         19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5bdb72b...5a28119. Read the comment docs.\n. # Codecov Report\nMerging #1624 into development will decrease coverage by 0.66%.\nThe diff coverage is 100%.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1624      +/-\n===============================================\n- Coverage        88.48%   87.82%   -0.67%   \n===============================================\n  Files                5        5            \n  Lines              165      156       -9   \n===============================================\n- Hits               146      137       -9   \n  Misses              19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 90.9% <100%> (-0.76%) | :arrow_down: |\n| Sources/RxMoya/Observable+Response.swift | 70.58% <100%> (-2.39%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e50289...605b31f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (development@40a43c8). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff               @@\ndevelopment    #1632   +/-\n==============================================\n  Coverage               ?   87.82%         \n==============================================\n  Files                  ?        5         \n  Lines                  ?      156         \n  Branches               ?        0         \n==============================================\n  Hits                   ?      137         \n  Misses                 ?       19         \n  Partials               ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 40a43c8...7bf11b6. Read the comment docs.\n. # Codecov Report\nMerging #1710 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelopment   #1710   +/-\n===========================================\n  Coverage           90%     90%         \n===========================================\n  Files                5       5         \n  Lines              140     140         \n===========================================\n  Hits               126     126         \n  Misses              14      14\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 326bff7...0ad7875. Read the comment docs.\n. # Codecov Report\nMerging #1724 into development will decrease coverage by 5%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\ndevelopment   #1724   +/-\n===========================================\n- Coverage           90%     85%   -5%   \n===========================================\n  Files                5       5         \n  Lines              140     140         \n===========================================\n- Hits               126     119    -7   \n- Misses              14      21    +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 87.5% <0%> (-12.5%) | :arrow_down: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 84.84% <0%> (-9.1%) | :arrow_down: |\n| Sources/RxMoya/Observable+Response.swift | 53.84% <0%> (-7.7%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9363f0b...9e3c424. Read the comment docs.\n. # Codecov Report\nMerging #1740 into development will increase coverage by 0.83%.\nThe diff coverage is n/a.\n\n\n```diff\n@@               Coverage Diff               @@\ndevelopment    #1740      +/-\n===============================================\n+ Coverage           90%   90.83%   +0.83%   \n===============================================\n  Files                5        5            \n  Lines              140      131       -9   \n===============================================\n- Hits               126      119       -7   \n+ Misses              14       12       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 100% <0%> (+6.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9363f0b...d8e56b5. Read the comment docs.\n. # Codecov Report\nMerging #1746 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1746   +/-\n============================================\n  Coverage        90.83%   90.83%         \n============================================\n  Files                5        5         \n  Lines              131      131         \n============================================\n  Hits               119      119         \n  Misses              12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4c44b35...ade8c69. Read the comment docs.\n. # Codecov Report\nMerging #1748 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1748   +/-\n============================================\n  Coverage        90.83%   90.83%         \n============================================\n  Files                5        5         \n  Lines              131      131         \n============================================\n  Hits               119      119         \n  Misses              12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4c44b35...625204c. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@00c5a18). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1753   +/-\n=========================================\n  Coverage          ?   90.83%         \n=========================================\n  Files             ?        5         \n  Lines             ?      131         \n  Branches          ?        0         \n=========================================\n  Hits              ?      119         \n  Misses            ?       12         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Single+Response.swift | 100% <\u00f8> (\u00f8) | |\n| Sources/RxMoya/Observable+Response.swift | 61.53% <\u00f8> (\u00f8) | |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 100% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 00c5a18...b791faa. Read the comment docs.\n. # Codecov Report\nMerging #1756 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1756   +/-\n============================================\n  Coverage        90.83%   90.83%         \n============================================\n  Files                5        5         \n  Lines              131      131         \n============================================\n  Hits               119      119         \n  Misses              12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cc2f158...e5003e7. Read the comment docs.\n. # Codecov Report\nMerging #1758 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1758   +/-\n============================================\n  Coverage        90.83%   90.83%         \n============================================\n  Files                5        5         \n  Lines              131      131         \n============================================\n  Hits               119      119         \n  Misses              12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9d1ed87...4ba1266. Read the comment docs.\n. # Codecov Report\nMerging #1766 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1766   +/-\n=======================================\n  Coverage   90.83%   90.83%         \n=======================================\n  Files           5        5         \n  Lines         131      131         \n=======================================\n  Hits          119      119         \n  Misses         12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aca54fb...527473b. Read the comment docs.\n. # Codecov Report\nMerging #1767 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1767   +/-\n=======================================\n  Coverage   90.83%   90.83%         \n=======================================\n  Files           5        5         \n  Lines         131      131         \n=======================================\n  Hits          119      119         \n  Misses         12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 130a183...dae9447. Read the comment docs.\n. # Codecov Report\nMerging #1769 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1769   +/-\n=======================================\n  Coverage   90.83%   90.83%         \n=======================================\n  Files           5        5         \n  Lines         131      131         \n=======================================\n  Hits          119      119         \n  Misses         12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 130a183...a3aacad. Read the comment docs.\n. # Codecov Report\nMerging #1777 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1777   +/-\n=======================================\n  Coverage   90.83%   90.83%         \n=======================================\n  Files           5        5         \n  Lines         131      131         \n=======================================\n  Hits          119      119         \n  Misses         12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fbdb37b...bda61a5. Read the comment docs.\n. # Codecov Report\nMerging #1783 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1783   +/-\n============================================\n  Coverage        90.83%   90.83%         \n============================================\n  Files                5        5         \n  Lines              131      131         \n============================================\n  Hits               119      119         \n  Misses              12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9b516e...dd7ee94. Read the comment docs.\n. # Codecov Report\nMerging #1803 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1803   +/-\n============================================\n  Coverage        90.83%   90.83%         \n============================================\n  Files                5        5         \n  Lines              131      131         \n============================================\n  Hits               119      119         \n  Misses              12       12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/RxMoya/Observable+Response.swift | 61.53% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/ReactiveMoya/SignalProducer+Response.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/RxMoya/Single+Response.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c336933...6099037. Read the comment docs.\n. # Codecov Report\nMerging #1810 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1810   +/-\n============================================\n  Coverage        90.83%   90.83%         \n============================================\n  Files                5        5         \n  Lines              131      131         \n============================================\n  Hits               119      119         \n  Misses              12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9b516e...194dbb8. Read the comment docs.\n. # Codecov Report\nMerging #1812 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1812   +/-\n=======================================\n  Coverage   90.83%   90.83%         \n=======================================\n  Files           5        5         \n  Lines         131      131         \n=======================================\n  Hits          119      119         \n  Misses         12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2fa0fb...5acc171. Read the comment docs.\n. # Codecov Report\nMerging #1812 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1812   +/-\n=======================================\n  Coverage   90.83%   90.83%         \n=======================================\n  Files           5        5         \n  Lines         131      131         \n=======================================\n  Hits          119      119         \n  Misses         12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2fa0fb...5acc171. Read the comment docs.\n. # Codecov Report\nMerging #1815 into development will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\ndevelopment    #1815   +/-\n============================================\n  Coverage        90.83%   90.83%         \n============================================\n  Files                5        5         \n  Lines              131      131         \n============================================\n  Hits               119      119         \n  Misses              12       12\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4125728...f8c66e2. Read the comment docs.\n. \n",
    "sunshinejr": "I'm closing this one in favor of #489. \ud83d\udc3c \n. I think we can close this one, but if there is something to add to the discussion, please let us know! \ud83d\udc3c \n. I think we can close this one, if you have any ideas for our new Examples docs, please let us know! \ud83d\udc3c \n. Just to chime in here, what I think @aleufms understood was that he could use the nsError property of the Error. If it is true, yes this is deprecated as of now, but the discussion about it is still going on in #489. \nAdditionally, in your case you could just get the .Underlying(let error) case from the response error, as @ashfurrow mentioned. Having in mind your response error has a name responseError, you can get it as following:\nswift\nif case .Underlying(let error) = responseError {\n    // Now you can use error property as an object of NSError\n}\nHope it helps! \n. I'm gonna close this one, if you have more questions about it @joedaniels29, please let us know! \ud83d\udc3c \n. I think we can close this one for now, if anything pops out, let us know! \ud83d\udc3c \n. Because we are currently in the middle of changing the documentation and examples, it would be awesome to add some documentation on plugins as well. What comes to my mind would be a new file, let's say Plugins.md, which will cover the basics, and also we could add examples to our new examples directory. What do you think about it @wattson12? Also would you be up for the PR as well? \ud83d\udc3c \n. Whoops, my bad! @ealeksandrov got the right one, I've also edited mine.\n. This one was implemented in #514, closing.\n. The problem with your layer is in this line:\nswift\nvar a : T = try! response.mapObjectMapper()\nMethod used in the Moya-ObjectMapper bridge has kinda different declaration, without the Mapper suffix. I tested your code with change in the mapping part, specifically:\nswift\nvar a: T = try! response.mapObject()\naaaand it works. So if this is your custom method, make sure you test it correctly or just use the method from bridge library. Hope that now you will resolve it!\n. This one that @ashfurrow was talking about. In README it has only mapArray() in examples, but here you can see that there are 2 methods, mapObject() and mapArray().\n. I think that everything should be clear now, so I'm gonna close it. \ud83c\udf89 If you have any more concerns, please let me now and I will reopen the issue!\n. :+1: \n. I think we can close this one for now, if anything pops out, let us know! \ud83d\udc3c\n. Hey! Thanks for the PR! \ud83c\udf89\nAlthough it seems fine to me, please add the test case for it. \n. Hey! Thanks for the PR! \ud83c\udf89\nYou are right, it returns Optional and we should change it, since it is compile-time error. Although in the Demo project we actually use it a little bit differently. I think we should stick to one version and depending on which one we choose, make changes to Docs & Demo respectively.\nEdit: Just choose one, update it accordingly and we gucci \ud83d\ude4c\n. Perfect! thanks again @Legoless  \ud83c\udf89\n. It looks neat! I also thought about structures, but I really like enums' type safety. I'll take a closer look today/tomorrow if we could use something from it @ashfurrow. Also, great job @Matthijn \ud83d\udca3\n. @ashfurrow Exactly my thoughts, was worried that user would have to import Alamofire, but it seems fine. This was just a suggestion, because I thought that there was a specific reason we didn't try typealias yet \ud83e\udd15 So if we end up doing this, I will definitely write up the changelog + in my opinion we could remove the AlamofireMoyaMappingSpec test since this should be now done by the Alamofire itself. \ud83e\udd13\ud83d\udc4c\n. @ashfurrow Exactly my thoughts, was worried that user would have to import Alamofire, but it seems fine. This was just a suggestion, because I thought that there was a specific reason we didn't try typealias yet \ud83e\udd15 So if we end up doing this, I will definitely write up the changelog + in my opinion we could remove the AlamofireMoyaMappingSpec test since this should be now done by the Alamofire itself. \ud83e\udd13\ud83d\udc4c\n. Okay I've updated the PR to prepare for merge \ud83d\ude07\n. Okay I've updated the PR to prepare for merge \ud83d\ude07\n. @matteogazzato You just need to retain the provider. You can do it by e.g. setting the provider as a property for your controller. \u270c\ufe0f\n. @matteogazzato You just need to retain the provider. You can do it by e.g. setting the provider as a property for your controller. \u270c\ufe0f\n. @matteogazzato No problemo :beers: \n. @matteogazzato No problemo :beers: \n. @tomj it would be awesome if you could make a PR with how would you like to be informed about retaining the provider. \ud83d\ude4c \n. @tomj it would be awesome if you could make a PR with how would you like to be informed about retaining the provider. \ud83d\ude4c \n. Does that answer your questions @remirobert? \ud83d\udc3c \n. Hey!\nIt is because you are assigning tuple of parameters to the activity constant. It is now a tuple and when you have your variables named then you can access it like you have shown activity.id etc. If you didn't have them named, access to it would be like activity.0, activity.1 etc. If you want to assign your parameters not to a tuple, but to a variables, just specify them in the parenthesis, like:\ncase PATCHApiActivitiesIdJson(let id, let nextParam, let nextNextParam):\n      return \"/api/activities/\\(id)/\"\nHope it is now clear :beers: \n. @onemanstartup If you specify only one parameter (when you need to assign more than one) in enum's case, it will convert it to a tuple of parameters, otherwise it won't. So in your case, if you have e.g. 3 associated types, when you specify one, all parameters are converted into a tuple (because you need to catch all the values), and then passed to the variable. If you specify all parameters, it doesn't convert it to the tuple, that's why id in my case isn't a tuple, because we have all parameters already. I encourage you to try tuples in playground, really fun stuff (e.g. you can pass tuple as one argument, when you have function with 3 parameters needed! - really similar situation). \nAlso, don't worry, swift is evolving all the time, no-one knows everything about it, learning is a key. Keep it up  \ud83c\udf89\n. @tbaranes Could you please try to clone the repo, then use the pod from the cloned repo (using the path in Podfile, like in Demo project) and go from commit with version 6.1.3. to the latest one? We could get the commit that produced the error and work with it. Other than that I don't see a reason for the behavior on the spot. :cry: \n. @tbaranes Perfect! \ud83c\udf89 I was trying to reproduce the long request on 6.2.0 but got nothing so far. Might be some edge case that you have on your environment. I will try again anyways \ud83d\ude07\n. Hey! \nFirst of all, thanks for the time spent on resolving the issue! Helps a lot \ud83d\ude4c I've made some small comments, but other than that we are good to go! \n. @tbaranes Thanks again for the changes! You did great job in finding that one and fixing it! \ud83d\udcaf When the build will pass I will merge it. Cheers! \ud83c\udf89\n. @ashfurrow We will need an invite for @tbaranes :beers: \n. I like the idea of expanding StubClosure rather than passing it with provider as it is already big I would say (even tho we might not get any problems of the structs now as we'd chosen the simpler way of handling it). It also feels right in TargetType (at least for me \ud83d\ude06).\n. So we basically can't (at least not with the changes I proposed) introduce #424 without introducing MoyaDefaults. Normally it would go the way you suggested, but this time we kinda have to do it the other way around, which is:\n1. Merge this.\n2. Make sure everything is running correctly.\n3. Merge #424 which is the StructsAPI on its own (without MoyaDefaults introduction).\n4. (Possibly wait for other breaking changes.)\n5. Release a major version for this.\nIf something is still unclear I'm happy to answer! \ud83d\ude09\n. Yeah I could rebase the #424 and delete the last commit which is MoyaDefaults. What I meant was that merging #424 before this one will also include the changes from here (or I don't really understand the idea).\n. Yeah, makes sense! But, I don't know if it possible. #424 relies on MoyaDefaults, because there was problems with type inferring \ud83d\ude14\n. Sure, will take a look \ud83d\udc40\n. So, the problem with generics is that we have 2 options:\n- we have TargetType as a MoyaProvider's Target,\n- we have ServiceType which has 0..infinity TargetTypes\nWhat leaves us with the case that our base protocol is ServiceType. Swift's generics seems to have a problem when an actual TargetType is passed:\n\nAnd we can \"repair\" it by specifying the TargetType explicitly. From:\nswift\nMoyaProvider<GitHub>(endpointClosure: MoyaProvider.DefaultEndpointMapping)\nTo:\nswift\nMoyaProvider<GitHub>(endpointClosure: MoyaProvider<GitHub>.DefaultEndpointMapping)\nBut it is still a breaking change. \ud83d\ude14\n. That would be most likely possible, but I don't know if it suits really #424 tho? Maybe we could leave #424 with the current implementation and create new one, which will only add new Demo project or new class that shows struct setup that is currently possible. Also, we agreed on a new Demo project, right? DemoStructs seems all right? Do we need some extra changes in old Demo? You got the documentation part, right?\nAnd thank you, I really appreciate that I can contribute to the project I use the most. \u263a\ufe0f \n. Yeah, go for it \ud83c\udf89 Adding it to the existing Demo is perfectly fine with me \ud83d\udc4c\n. I'm closing this one. This doesn't need to be introduced since we went with another option of structs API. \n. I think we can close this one, it should be implemented in #784.\n. I think we can close this one, it should be implemented in #784.\n. Seems fine to me, @ashfurrow! \ud83c\udf89 I don't know, but maybe we could add the info about structs to Changelog with this PR?\n. Hey @retsohuang! We've updated our examples and here you can see it step by step. Hope it helps! If you have any questions/feedback about our examples, please let us know \ud83d\udc3c Also, I think that this issue is resolved for now, so I'm closing it.\n. First, milestone is a good choice, it would be much easier to read (also yeah, kinda a duplicate, sorry about that). About examples I agree that multiple files are a way to go, also we could have one file that will guide new user through examples, like in this file you can learn basic and the simplest usage, then here you have this and that because reasons. Or maybe do it in the main docs? Hmm \ud83e\udd14\n. I really like that one! \ud83d\ude4c\n. Close in favor of #466. \n. Hey! Thank you for reporting an issue!. \ud83c\udf89\nWith your problem could you please provide what was the case and how you have repaired it? It might be useful for other people in the future \u270c\ufe0f\nAnd about Heimdller, I didn't really play with that, but what I can tell you is that Moya relies on Alamofire in its core. If you want to use Heimdller instead of Alamofire, you would need to create your own version of Moya and replace the Alamofire code in requests etc. But you can try using endpointClosure to add additional parameters based on Heimdller. There is an example here, that adds auth token to your request. Hope it helps! \ud83d\ude09\n. I think we can close this one as well, if anything pops out, let us know @mrfarukturgut!\n. @Dschee did you try MultiTarget maybe?. I could help as well if needed. \n. Thank you for the PR! \ud83c\udf89\n. Hey Shai!\nI'm afraid there is no direct solution other than mapping response to have the top object that should be the array with objects. \ud83d\ude22\n. Sure! Here I have a method that gets a user by repository name. Let's say I give name Moya/Moya, it does the request here, and retrieves the owner object to parse it:\n``` swift\nfunc getUser(byRepoName name: String) -> Observable {\n    return self.provider\n        .request(GitHub.Repo(fullName: name))\n        .debug()\n        .map { response -> Response in\n            guard let responseDict = try? response.mapJSON(),\n                owner: AnyObject = responseDict[\"owner\"],\n                newData = try? NSJSONSerialization.dataWithJSONObject(owner, options: NSJSONWritingOptions.PrettyPrinted) else {\n                return response\n            }\n        let newResponse = Response(statusCode: response.statusCode, data: newData, response: response.response)\n        return newResponse\n    }\n    .mapObject(User.self)\n\n}\n```\nEdit: You could also use our extension for Argo, which @aschuch pointed out. \ud83d\udcaa\n. Sure! You can make your own mapper extensions for it:\n``` swift\nextension ObservableType where E == Response {\nfunc marvelMapArrayOptional<T: Mappable>(type: T.Type) -> Observable<[T]?> {\n    return map { response -> Response in\n        // your map\n    }\n    .mapArrayOptional(type)\n}\n\n}\n```\nJust copy your map code above and you should be fine. And then you could use marvelMapArrayOptional instead of mapArrayOptional. You could also do a more generic method if you would like to do it for more methods like mapObject and so on.\n``` swift\nextension ObservableType where E == Response {\nprivate func marvelMapResponse() -> Observable<E> {\n    return map { response -> Response in\n        // your map\n    }\n}\n\nfunc marvelMapArrayOptional<T: Mappable>(type: T.Type) -> Observable<[T]?> {\n    return marvelMapResponse()\n        .mapArrayOptional(type)\n}\n\n}\n```\nHope it helps! \ud83c\udf89\n. Unfortunately we don't have a slack channel, but you could try asking on the RxSwift channel if it is more connected to RxSwift, or on this slack for ios-devs, they are all very helpful. Of course you could still ask the questions on here, no problem with that as well \ud83c\udf89\n. That is actually a question for Mapper rather than Moya itself, so please make an issue there. Other than that it would be really helpful if you could make new issues as the questions go, it will be then useful for other people if they need the answer as well (rather than scrolling). \nI think that we have resolved current issue, so I'm closing it for now. Thanks!\n. Good point @nuudles! \ud83d\udc4f  What do you think about it @kokhong20? Is it okay with you? Also it would be probably the last point before we can merge this one I think.\n. For additional token fields you could use Endpoint settings, explained here (with auth token as well).\n. Sure! I can take a stab at that.\n. Closing in favor of #488.\n. Really good job! \ud83c\udf89 I've made some comments, didn't really have time to look deeply at it, but got a brief of what's in there. \n. Thanks again for the changes! Really digging it so far. One thing to notice would be to maybe add sections with examples, something like: Basic, RxSwift, ReactiveCocoa. Then maybe Endpoints customization and so on. For now I think it's okay as it is. Would love to see if someone else from @Moya/contributors has any feedback about this PR. \n. Yeah, I definitely agree! Looks really clean and nice to me. \ud83d\udc4cIf no-one will have any suggestions, I will check it again and probably merge it :)\n. I've reviewed it once more and for me it is a really good starting point, so I'm gonna merge it and we can continue to develop more and more examples as time goes by. Thank you again so much! \ud83c\udf89 \ud83c\udf89 \n. In fact, it's how you should approach this, @vytis \ud83d\udc3c More about it here.\n. @tdouglas1313 Hmm, it should be possible to do it the same way, using endpointClosure. Did you encounter any problems with that? If so, please open another issue targeting Swift 3.0 version :)\n. Yeah, you can pass it as JSONEncoding.default, URLEncoding.default etc., instead of an enum case.\n. No probs! Happy to help! \ud83d\udc4a\n. Yeah, looks good! Thanks! \ud83c\udf89\n. Awesome, thanks! \ud83c\udf89 \n. Yeah, basically you pass the plugins in init of your provider, the same as closures, manager etc. For example something like:\nswift\nMoyaProvider<GitHub>(plugins: [NetworkLoggerPlugin()])\n. @VivienGiraud glad you found out the issue! Also looking by code, if you are using Swift's Structs API for arrays (instead of NSArray), you don't have to cast it and you can just use joinWithSeparator(_:) (in Swift 2) or joined(separator:) (in Swift 3) method:\nswift\n[\"test\", \"test2\"].joined(separator: \",\")\n. Hey @vishal91. \ud83c\udf89 Can you please provide the code where you described all of these? It will help us with helping you \ud83d\ude09 \n. At a first glance, it seems like your switches in method (and/or) path are not exhaustive, there are different number of cases. I'd try to add default to both of them and see what happens.\n. +1 for the change from ErrorType to NSError, also we could provide an example when we are at it.\n. I'm okay with removing the nsError property as long as we document the error section, because this is really a common question here. \n. Okay, I think we came to the agreement that it should be thrown out from Moya. Is anyone from @Moya/contributors willing to PR these changes? It would include erasing deprecated methods only, if we decide to expand documentation on the Error matter, I think it should go into another PR anyways.\n. Closing in favor of #508.\n. Hmm, also what is going on with the tests? Anybody from @Moya/contributors knows? \ud83e\udd14\n. @nickolayl Pull Request \ud83d\ude09 \n. Hey @iSame7, thanks so much for the idea! \ud83c\udf89  Seems really fun! \nAlthough I'm not sure if it would fit in current core of Moya, I would love to see it at least as some sort of extension. What do you think about that? \nAlso, anyone else from @Moya/contributors could take a look? \ud83d\udc3c \n. I think we can close this one, but if you will have any more questions @awclives about this topic, let us know! \ud83d\udc3c \n. Additionally, new error appeared from #505, https://travis-ci.org/Moya/Moya/builds/136311523:\n** TEST FAILED **\nrake aborted!\nCommand failed with status (65): [set -o pipefail && xcodebuild -workspace '...]\n/Users/travis/build/Moya/Moya/Rakefile:47:in `block in xcodebuild_in_demo_dir'\n/Users/travis/build/Moya/Moya/Rakefile:46:in `chdir'\n/Users/travis/build/Moya/Moya/Rakefile:46:in `xcodebuild_in_demo_dir'\n/Users/travis/build/Moya/Moya/Rakefile:63:in `block (2 levels) in <top (required)>'\n/Users/travis/build/Moya/Moya/Rakefile:63:in `map'\n/Users/travis/build/Moya/Moya/Rakefile:63:in `block in <top (required)>'\n/Users/travis/.rvm/gems/ruby-2.0.0-p648/bin/ruby_executable_hooks:15:in `eval'\n/Users/travis/.rvm/gems/ruby-2.0.0-p648/bin/ruby_executable_hooks:15:in `<main>'\nTasks: TOP => test\n(See full trace by running task with --trace)\nThe command \"rake test\" exited with 1.\n. Hey @iDiyor, thanks for opening an issue! :tada: \nMoya uses Alamofire's parameter encoding which has URLEncodedInURL case, which I believe you can use in your case. \ud83d\ude0e\nHope it helps! \n. Hey @Miasma87! What I think @petester42 meant, was to extend your TargetType to have 2 cases:\n- First one for getting one genre from API:\nswift\ncase Genre(String)\n- Second one for getting more than one (or to be precise, 0 or more) genres using array of strings:\nswift\ncase Genres([String])\nBut it depends if your API has an endpoint for getting more than one genre at a time. If not, I'm afraid Moya does not have built-in solution for that. Actually, it would be really tricky, because what happens if one request succeeds and one does not? We would need an array of result responses/errors or any other solution to handle this.\nBut what comes to my mind is that you could create an asynchronous queue and handle this by yourself. Or use reactive extensions for Moya, which would make that task significantly cleaner.\nHope it helps! \ud83d\udc3c \n. Neat, thanks! \ud83c\udf89 Build failure is not connected with the PR so I'm gonna merge it. \ud83d\udc3c \n. I've changed the title due to #522 discussion.\n. Hey @tdouglas1313. There is a conversation in #513 about Swift 2.3 and 3.0 support. However, there is no PR with updates for any of versions yet. \n. Good suggestion! I've changed the title, thanks! I think in this case I can close this one in favor of #513.\n. @ashfurrow because we've closed milestones(#539), do you think we should add Documentation issue tag, or just try to use appropriate one from the existing tags?\n. Good job @ashfurrow! \ud83c\udf89  I will try to help with whatever I can. Have a great weekend as well! \n. @ashfurrow About Documentation milestone, it is used for ongoing documentation update that is mostly done. I think it is fine to keep it till we polish everything. I don't know, however, about the Long Term one. We might check them out because the update dates of these issues are relatively old. \nAbout documenting it, would it be okay to add a paragraph in Readme#Contributing about using milestones (and listing current ones with description)? \n. I was rather thinking about finishing the current issues we had with docs, reach the milestone, close it and go from there (with issue labels for instance, like you said). What do you think about it?\n. Sure! Makes sense. How about the Long Term milestone? I'm just wondering if we need to actually document it if we resign from Documentation. \n. Right! I've closed them, I think it is safe to close this issue for now then, if anything comes up we can reopen it.\n. @bryanbartow your problem might be returning the Result type in the closure that takes Void as a return type. Below code works under Xcode 7.3.1 & Moya 7.0.0:\n``` swift\nlet requestClosure = { (endpoint: Moya.Endpoint, done: MoyaProvider.RequestResultClosure) in\n    let request = endpoint.urlRequest.mutableCopy() as! NSMutableURLRequest\ndone(.Success(request))\n\n}\n```\n@kamil-tomaszewski: @ashfurrow is right, when you specify nil in the rest of the parameters, Xcode throws not-so-specific error. When you remove the parameters with nil it should be good with the code below:\nswift\nlet endpointClosure = { (target: GitHub) -> Endpoint<GitHub> in\n    let url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString\n    let endpoint: Endpoint<GitHub> = Endpoint<GitHub>(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n    return endpoint.endpointByAddingHTTPHeaderFields([\"APP_NAME\": \"MY_AWESOME_APP\"])\n}\nAbout @dccarmo issue I'm kinda lost as well \u00af(\u30c4)/\u00af Might try omitting the Result type in done callback, like done(.Success(result)) and try if it works? Otherwise could you provide us an example project where the issue exists? Would be really helpful.\n. Thanks! \ud83d\ude4c\n. Exactly, thank you Ash & @orta for starting this amazing journey \ud83d\udc4f\n. \ud83d\udc4c\n. This one was implemented as well, closing it.. @rlam3 I think that the discussion for difference between endpointClosure and requestClosure is moved to #617 so I will take on the next questions:\n1. YourAPI is in this example is the Target you use for requests. Let's say you have one Target in your app and let's call it TwitterAPI here instead of YourAPI.\n2. The YourAwesomeOauthProvider is just an example. Here you can use third party library to get your token, or you can just use Moya to get it - your choice. There are times you are working with existing SDK's for fetching tokens, but also there might be time that you will need to handle it yourself and Moya can be a perfect fit for it as well. You can even have it in the one TwitterAPI if you want.\n3. Yes, now every time you use your provider, it will first use the requestClosure to map Endpoint to NSURLRequest.\n. @riksof-zzlalani Hey there! What your code is lacking is subscription. This is not really a Moya problem, but problem with Reactive Extensions. So, a quick fix would be a following:\nswift\nreturn testApiProvider\n    .request(.PostTest(obj: _file))\n    .debug()\n    .mapJSON()\n    .map({ JSON -> EKResponse? in\n        return Mapper<EKResponse>().map(JSON)\n    })\n    .subscribeNext { _ in }\nI hope it helps! Please next time use another issue for questions if they are touching quite different topic, so others can easily search for it \ud83d\udc3c\n. @riksof-zzlalani no problem! I think that the original problem @swabzz had should be resolved as of now, so I'm gonna close for now.\n. Hey again guys! Thanks for helping out so quickly! \ud83c\udf89  I've added fix to Podfile that should fix most of the problems with building. Let's now agree that every new changes to this PR should go in another PR, just to not make any more chaos than needed and not duplicate the code in advance. Thanks again! \ud83d\ude47 \n. @edwardvalentini yeah, these are the tasks I've listed as a TODO ones in the first post, I've just removed the errors with building Frameworks, which didn't have Swift 3.0 set in settings. \n@AndrewSB yeah, one of the reasons I'd rather see this change in NetworkLoggerPlugin in a PR, to agree on the solution.\nAlso, I'm gonna take a stab at new progress APIs for Alamofire.\n. @charlag Yeah, we need to also update README, docs, examples, prepare for next major release and I thought that it would be good to have migration guide of some sort. I'm not sure if everything should be in this PR tho. Thoughts? \n. As of now, Moya core, Moya/RxSwift and Demo should build correctly \ud83c\udf89\n. Yeah, I'm working on the tests right now, we also need help with ReactiveCocoa if possible, and we have to wait for Circle CI because as of right now they don't support Xcode 8 GM Seed (more info here). But we are really close :)\n. @charlag Thanks! Because both Alamofire and RxSwift have iOS 9.0 as a minimum deployment target.\n. @Moya/contributors is there a way to use current master branch of ReactiveCocoa via CocoaPods? It seems like they have their Podspec here, instead of the main repo.\n. @ashfurrow great! Can't wait for this piece to be done as well \ud83c\udf89\n. Wow, fast! Thanks! Looks fine to me! About that problem with printing array, would it work that instead of using array, make the items parameter the last one in tuple, so it can accept variadic parameter?\n. \ud83d\udcaf\n. Okay, I think that it can be merged to the main Swift-3.0 repo, and make sure that Moya builds, and if there are any issues about this PR we can make a new one with fixes.\n. Tried it out and it seems fine! Thanks! \n. Thanks! Good job! \n. Hey there! I'll do my best to help you distinguish them \ud83d\ude09\nEndpointClosure defines how to map TargetType to Endpoint. RequestClosure on the other hand, resolves Endpoint into NSURLRequest (or Error if the request shouldn't be performed). You can use them both on the same provider and  RequestClosure follows after EndpointClosure.\nIn the EndpointClosure you can customize endpoint's parameterEncoding, headers or additional parameters and more if you want. There you can setup things your API needs in the headers or parameters, that should go globally. You can also stub the statusCode so it returns errors instead of 200 for testing purposes.\nThen, when you have the Endpoint created, there is that RequestClosure. You are moments before the request. Here you can change things that you want in NSURLRequest, but also you can perform asynchronous token fetch, and if it fails you can stop the request as well (and this is the place for it). \nThere is also great documentation about the topic here. If you find something hard to understand, you are more than welcome to make an issue or pull request if you know how to fix it.\nHope it helps! If you have more questions, let us know! \ud83d\udc3c \n. Thanks! \n. @dangthaison91 You need to explicitly specify that you want Moya 7.0.0. You can do this like:\npod 'Moya/RxSwift', '7.0.0'\n(you also don't need both Moya and Moya/RxSwift, because Moya/RxSwift has Moya in it)\nYou can check here what ~> means and more in a Podfile. Hope it helps! \n. Hey @lixingshi! We are currently working hard on releasing Moya for Swift 3.0 in #608. For now you can use Moya with CocoaPods specifying the branch \"swift-3.0\", like:\nruby\npod \"Moya\", :git => \"https://github.com/Moya/Moya\", :branch => \"swift-3.0\"\nAnd switch to Moya 8.0 when the release happens.\nHope it helps! \n. Hmm, what is your Podfile @zhaoyunyi? Can you download our Demo and check if it works for you? Because I've downloaded it, and RxMoyaProvider works just fine in the Demo. Another idea could be that you maybe forgot importing RxSwift at the top of your file along with Moya?\n. Good job! \ud83d\udc4a\n. @Denis1992 please use specific Moya version, like:\npod 'Moya', '7.0.0'\n. You are right @v-ken, it should be fixed now. Thanks for mentioning! \ud83d\ude47 \n. Hey @marcusficner! This is a really good question, I'm not really sure why we don't use it in the mapJSON() function, but I would be up for introducing it there! \n. Closing in favor of #664 then!\n. We have now Demo with single file upload and example documentation for multipart upload. Thus, I'm closing this one.. Hey @bryanbartow, only typo I found in your code is the .GET instead of .get enum case, otherwise it should be good to go. I've tested it in the Moya demo and was building correctly. If there are still some errors and cleaning doesn't help, let us know! \nAlso I've made a PR with the ParameterEncoding changes so I'm gonna close this one in favor of #709. If you guys could chime in there, it would be awesome! \ud83d\udc4a\n. Oh, I will keep this opened till we resolve the issue then :)\n. \ud83d\udc4d \n. Hey! Thanks for the PR! Although at the first glance I don't get the error here, so I've made a comment about the line that is confusing me the most. \n. Hey! Thanks for the PR! Although at the first glance I don't get the error here, so I've made a comment about the line that is confusing me the most. \n. Well, I didn't know about this caveat, not sure if this is intended behaviour of Swift, but glad you discovered it and shared with us! Only one more comment from me and we are ready to merge. Thanks again!\n. Well, I didn't know about this caveat, not sure if this is intended behaviour of Swift, but glad you discovered it and shared with us! Only one more comment from me and we are ready to merge. Thanks again!\n. I believe CI fail is not connected with the changes so gonna merge it \ud83d\udc4d \n. Great! Closing this one in favor of #710 which should implement the idea.\n. Hey @zhigang1992! I know the feeling so don't worry about it \ud83d\udc4a \nYou can extend TargetType protocol with ParameterEncoding parameter, then in the endpointClosure use the parameterEncoding from target. Here you have example how I did it with authToken type, just instead of authToken use parameterEncoding in the Endpoint init. \nMore on the endpointClosure you can also find here.\nHope it helps! If you have more questions or something is unclear, shoot \ud83d\ude42\n. @shivayogic if you are using Swift 3 version of Moya, there is no enum for ParameterEncoding. If you want custom one, you need to implement ParameterEncoding protocol. More on the topic in our documentation here. Hope it helps! \ud83d\udc4a\n. @shivayogic usually you don't need to specify custom httpBody, parameters do it for you. If you want to add parameters that you want in every request, then endpointClosure might be the best way. However if your case is a specific one, you might try to replace the httpBody of a request in requestClosure.\n. I also think that we should stay in beta as long as our dependencies are. No need to rush and ReactiveSwift isn't even out of alpha. Also, I've removed the milestone to avoid confusion. \n. Hey there @kanishkatn. There was an update for ParameterEncoding type in Alamofire, so we had to adapt as well. Everything should be clean when you read it here. Basically there is no enum anymore, just a protocol that you have to implement. There are also 3 predefined types that you can use:URLEncoding, JSONEncoding, PropertyListEncoding. These you can use by .default property, like: JSONEncoding.default in your case.\nHope it helps! \ud83d\udc4a \n. Queue parameters are almost implemented in #1055 so I'm gonna close this one.. Damn, sorry, my bad. Somehow I've missed branch & this comment. Nevermind, carry on \ud83d\ude04. @pedrovereza did a PR with rename, so the only thing we need right now is a doc update + last check if everything is correct?. Yup, completely agree with @pedrovereza.. I would go with Threading.md - this is big enough topic that it should have its own space, in my opinion.. Haha, we don't - but we should :D. Also, what do you guys think about removing stubScheduler from ReactiveSwiftProvider? Now that we have unified queues, I think we might consider this change. It would also help in transition from multiple providers to rx.request & reactive.request mentioned in #963.. Also, what do you guys think about removing stubScheduler from ReactiveSwiftProvider? Now that we have unified queues, I think we might consider this change. It would also help in transition from multiple providers to rx.request & reactive.request mentioned in #963.. ~~@AndrewSB it is scheduling stubbed data onto scheduler, so queues should resolve this problem. We may need to revisit tests and add few that ensures the data comes on a given queue.~~. ~~@AndrewSB it is scheduling stubbed data onto scheduler, so queues should resolve this problem. We may need to revisit tests and add few that ensures the data comes on a given queue.~~. Seems like this is a special scheduler, DateScheduler, and it is used instead of GCD when dispatching the stubbed data. Any idea why it was used instead of GCD in RAC extensions here? From what I've seen it was implemented by @swizzlr, but maybe someone else remembers the reason? @ashfurrow maybe?\nEdit: nvm, we can take care of it after the release. If needed, we'll still have ReactiveSwiftMoyaProvider.. Seems like this is a special scheduler, DateScheduler, and it is used instead of GCD when dispatching the stubbed data. Any idea why it was used instead of GCD in RAC extensions here? From what I've seen it was implemented by @swizzlr, but maybe someone else remembers the reason? @ashfurrow maybe?\nEdit: nvm, we can take care of it after the release. If needed, we'll still have ReactiveSwiftMoyaProvider.. Seems like this is a special scheduler, DateScheduler, and it is used instead of GCD when dispatching the stubbed data. Any idea why it was used instead of GCD in RAC extensions here? From what I've seen it was implemented by @swizzlr, but maybe someone else remembers the reason? @ashfurrow maybe?\nEdit: nvm, we can take care of it after the release. If needed, we'll still have ReactiveSwiftMoyaProvider.. Ok. Final stage of this one I think. Only docs left - make a Threading.md with what @AndrewSB wrote + check other docs if there is something we need to change. Anyone up for this one? Let's merge it already \ud83d\ude04 . Ok. Final stage of this one I think. Only docs left - make a Threading.md with what @AndrewSB wrote + check other docs if there is something we need to change. Anyone up for this one? Let's merge it already \ud83d\ude04 . Ok. Final stage of this one I think. Only docs left - make a Threading.md with what @AndrewSB wrote + check other docs if there is something we need to change. Anyone up for this one? Let's merge it already \ud83d\ude04 . Okay, docs are in, @AndrewSB. We just need to check if we have everything we need here. If you could take a look (and other @Moya/contributors to double-check) it would be awesome!. Okay, docs are in, @AndrewSB. We just need to check if we have everything we need here. If you could take a look (and other @Moya/contributors to double-check) it would be awesome!. Was a quick one, refactor by @SD10 from #1149. Fixed it (hopefully \ud83d\ude04)! Gonna do another review of the whole PR in a few.. Was a quick one, refactor by @SD10 from #1149. Fixed it (hopefully \ud83d\ude04)! Gonna do another review of the whole PR in a few.. Great job everyone, especially @AndrewSB! This is a huge one! \nNow might be even bigger one: making sure we got everything between 9.0.0-dev and master in the new release \ud83d\ude05\nGonna hit this satisfying merge button after CI!\nEdit: Damn, didn't update tests for stubs. Gonna repair that one.\nEdit2: Pushed the fix, gonna still wait for the CI, though \ud83d\ude05. Great job everyone, especially @AndrewSB! This is a huge one! \nNow might be even bigger one: making sure we got everything between 9.0.0-dev and master in the new release \ud83d\ude05\nGonna hit this satisfying merge button after CI!\nEdit: Damn, didn't update tests for stubs. Gonna repair that one.\nEdit2: Pushed the fix, gonna still wait for the CI, though \ud83d\ude05. This issue should be actually closed already by probot, so I'm gonna close it for them.. \ud83d\udcaf Thanks!\n. Hey there @bchrobot! Thank you so much for the PR \ud83c\udf89 I've only got one comment but other than that it looks \ud83d\udcaf\n. Thanks, @lulee007! Also, PR #1053 by @pedrovereza should fix this problem as well (released in Moya 8.0.4). Thus I'm gonna close it, but please feel free to reopen whenever.. Thanks Ash! \ud83d\ude47\n. Yeah, I will close this one as this is a duplicate of #782, let's track the process there. \ud83d\udc4a. Hey @rlam3. We have updated our documentation around the new ParameterEncoding type from Alamofire, please check it here. Hope it helps! \nAlso, whenever you feel like something isn't clear enough, please let us know so we can improve the docs. \ud83d\udc4a. @rlam3 it is, it was probably the URL renaming to url as @BasThomas mentioned. Can you try if it works?. Hey there @rlam3. You could look up Artsy's eidolon, they are using Quick/Nimble with Moya. . The idea behind upgrading Plugins is great, and the implementation is \ud83d\udcaf, good job @scottrhoyt! \nHowever I'm not sure about prepareRequest, for some reason it feels like duplicating functionality (requestClosure). We might get a lot more questions about what is better for that use case and so on. \nAlso, about dropping the request, response part of the plugin function names - great idea, I'm up for that, but maybe let's do it in another PR to avoid chaos.\n. @scottrhoyt love the changes to docs, good job! \ud83d\ude4c. Woah, that's harsh. Didn't have time to update all the things lately, dunno when will it happen so can't promise anything. I'm gonna leave the decision to you guys.. After changing structure to SPM-first, changing project to single target, now we can think about consolidating Demos. How do you feel about it, @AndrewSB?. Is someone up for doing this one? Would be awesome to get it started again. cc @Moya/contributors . Hey @abadikaka, what might be an error is that celebrations is in fact an array of objects, not a single object. Try to change the type of celebrations to [CalendarBible] and see if it helps. \n@BasThomas I think all of the community extensions that support RxSwift has an extension on \"request\" (which in fact is an Observable of response) that should do the mapping auto-magically, thus I believe the syntax is correct.\nEdit: Also it seems like season_week is an Int rather than String.. @abadikaka sorry if I didn't get to you, was quite a busy time for me lately. Glad I could help tho! Matching the type from the API response is a good practice, because some languages/mappers do not do the automatic casting from String to Int etc, then you might end up with error on parsing where you would be sure that it should work. . Your current response is an object, thus you use mapObject. If you had an array of objects, like:\njson\n[{\n  \"date\":\"2017-01-19\",\n  \"season\":\"ordinary\",\n  \"season_week\":2,\n  \"celebrations\":[\n    {\n      \"title\":\"\",\n      \"colour\":\"green\",\n      \"rank\":\"ferial\",\n      \"rank_num\":3.13\n    }\n  ],\n  \"weekday\":\"thursday\"\n}]\n(notice the[ and ] surrounding {}) then you would need to use mapArray, to map more than one object.. @migue1s, @vaunus the problem with double onNext event after filterCompleted should be resolved after #1095. We still need to find the issue with hanging in the progress. If any of you guys have time and want to help us, PR would be greatly appreciated.. Hey @PatrickSCLin, do you still encounter double onNext event? What version of Moya do you use? Is it with RxSwift?. Would you be able to make a new test project where this issue happens, @PatrickSCLin?. Seems like a problem with these lines in Podspec:\nss.dependency \"RxSwift\", \"~> 3.1.0\"\nss.dependency \"Alamofire\", \"~> 4.2.0\"\nchange to ~> 3.0 and ~> 4.0 accordingly, could fix the problem, but there might be a reason why we have it this way (I'm out of the loop lately). Because of this we should discuss the fix with @Moya/contributors first. We could just higher up the versions of pods as well.. I think doing it this way we would have to make new version every time there is a new minor version update of any of our dependencies. Also I won't be able to use RxSwift 3.2 with Alamofire 4.2 this way. . A while ago I was trying to make something similar (make an option to TargetType that can map the response), but given tools of Swift 2.2 I wasn't satisfied with any of my results. \nUnfortunately with your proposition and passing parser to request function it makes me responsible for remembering how should I parse the response every time, so I still need some abstraction layer over Moya to get what I want (thus I don't see much pros in this one). Although as @scottrhoyt said, this have an advantage with option to make a standard protocol for object parsing.. I'm gonna close this one for now since there is no activity, but feel free to reopen it whenever.. This example you've added is good, but we could also add the basic URLEncoding below/above the example with JSONEncoding, imho.. I was thinking about doing one more request with different type of encoding, maybe just below the one with user, and then make a comment how would it look like. But your suggestion works as well, make a comment how could it look like with URLEncoding.. Closing this one in favor of #968.. @kemchenj no problem, don't worry about that. About your idea with conforming to protocols: I love it. Would you be up for doing the PR with this idea implemented? :)\nAbout final on MoyaProvider - I'm not sure about that. People may rely on subclassing it.. Okay, @BasThomas took a stab at it, I'm gonna close this one then. Thank you so much @kemchenj for you work, we really appreciate it! \ud83d\ude47 . I'm gonna close this one due to inactivity. Thank you for taking your time for this PR though, @fjcaetano. \nTo give my opinion about this one, I'm not sure destinationURL, which is nil most of the time (for normal request & sample data), is the best way to implement it. Maybe an enum property that would be having special metadata based on the task type would be better? Not sure. What i know for sure is that this example with assets by @scottrhoyt should be added to our examples. \nEdit: I've added a PR with new example, #1113.. Thank you for your help, @hugweb! \ud83d\udc4d I think this should be resolved, so I'm gonna close it. If you still have questions about this topic, @iShawnWang, please feel free to reopen whenever.. This would be cool, @AndrewSB! Even better if we could automate it not only for CI, but also for our development process.. I agree on removing them all, lots of people can still ignore release notes and be confused about this one. . I agree. Especially right now, when one of the most required features of EndpointClosure, setting headers, will be out in 9.0.0 (#1067). We might try with few additions to Plugin type and see if it fits whatever we need. We need to provide the same functionality, that is in both closures, and then try to expand for more.\nOne of my first ideas would be to provide multiple protocols that inherit from base Plugin protocol. Each of these protocols would have its own methods (let's say we can have RequestPluginType, EndpointPluginType, maybe even StubbingPluginType). We would have to play with it for a bit, that's for sure.\nMy dream would be to leverage some of properties in TargetType as well, but it might not be possible, though. \u00af\\(\u30c4)/\u00af \nEdit: I've got a proof of concept already in the works, gonna do a PR with an overview sometime this week, maybe a good time before 9.0.0 release :)\nEdit2: Closing in favor of #1123.. I think this should be resolved, so I'm gonna close it for now.. I'm gonna close this issue due to inactivity, but feel free to reopen whenever.. Great! Could you post your fix to the problem here as well, @philipengberg? Might be helpful for other people in the future.  . Hey @moto0000. Unfortunately, this is something we didn't introduce yet in our API. Upload especially is something we are still working on. However, I think this would be a nice feature. Would you be up for doing the PR with implementation? :). Thanks! \ud83c\udf89. I'm gonna close this issue due to inactivity, but feel free to reopen whenever.. If you need it rather universal, meaning that at any moment in the app, only 1 request can be fired up at once, you would need to implement your own logic for that, using e.g. OperationQueue. \nHowever, if you want it for only one, special case, you could make use of requestClosure. You could fire up request_1 in that closure with a check that you are firing request_2. Now based on the response from request_1, you can decide whether request_2 should be performed or not using this closure. Unfortunately this way you probably can't propagate the response from request_1 easily and thus this is a workaround.. @pedrovereza from swift.org:\n```swift\nimport PackageDescription\nlet package = Package(\n    name: \"DeckOfPlayingCards\",\n    targets: [],\n    dependencies: [\n        .Package(url: \"https://github.com/apple/example-package-fisheryates.git\",\n                 majorVersion: 1),\n        .Package(url: \"https://github.com/apple/example-package-playingcard.git\",\n                 majorVersion: 1),\n    ]\n)\n```\n\nEach dependency specifies a source URL and version requirements. The source URL is a URL accessible to the current user that resolves to a Git repository. The version requirements, which follow Semantic Versioning (SemVer) conventions, are used to determine which Git tag to check out and use to build the dependency. The version requirements, which follow Semantic Versioning (SemVer) conventions, are used to determine which Git tag to check out and use to build the dependency. For of both the FisherYates and PlayingCard dependencies, the most recent version with major version equal to 1 (for example, 1.0.0) will be used.\n\nThat being sad I think it is safe to assume we don't need to update our Package.swift file. . I think this should be resolved, if there are still questions about this topic, please feel free to reopen whenever.. Hey @LarsJK! Thanks for the changes! \ud83c\udf89 \nThese warning doesn't have anything to do with this PR so I'm gonna merge this anyways :) . Just a heads-up, I'm gonna look at it once my Xcode download completes \ud83d\ude05 . Hey @BenEmdon! Thanks for the changes! \ud83c\udf89\nThese warnings do not have anything to do with this PR so I'm gonna merge this anyways :). Nah, I think you're good @BenEmdon. Thank you again! \ud83c\udf89 \nAlso, sorry @sendyhalim for clicking on you, didn't see that \"reviewers suggestions\" popup before \ud83d\ude05. Yep, as @BasThomas said, it is a breaking change, thus making it obvious in Changelog would be awesome :). This is also done already. Closing this one as well!. Since there is no activity in that matter, I'm gonna close this issue. Feel free to reopen if this error occurs again.. I'm wondering whether the parameter name queue isn't too vague and if e.g. callbackQueue wouldn't help with recognizing for what exactly is this queue used. Thoughts? . Cool! What do you guys think @AndrewSB, @justinmakaila?. Seems like @AndrewSB fixed the build! Now the only things to do before the merge: \n- Fix the Chanelog.md conflicts (basically add the new line to Next column instead of 8.0.4, because 8.0.4 was released)\n- Change the name of queue to callbackQueue (wherever we can)\nDoes that seem right? \ud83d\ude04. @haritowa Are these two points, that I wrote above, something you have time to do in the near future? If not, I might try to help :). I think so \ud83d\udc4d Probably in another PR tho, that would point to optional-response-thread-param. But I'm in.. Hey @Blackjacx. NetworkLoggerPlugin uses request.debugDescription() to print the given request. This function is using headers from request.allHTTPHeaderFields, but also configuration headers from current Alamofire session. To get them as well, just use the line below:\nswift\nlet configurationHeaders = provider.manager.session.configuration.httpAdditionalHeaders\nlet additionalHeaders = response.request?.allHTTPHeaderFields\nHope it helps!. Yeah, that seems correct. I think we can improve that one. Would you be up for making a PR? :). Hey @gmoalvarez. That is a really interesting question. What you can do is to make also one wrapper-class around all the tasks in the pipeline before parsing response. In your case it would be:\nswift\nfunc request(target: Target) {\n    return provider\n        .request(target)\n        .take(1)\n        .filterSuccessfulStatusCodes()\n        .retry(2)\n}\nand then create multiple classes that do the request & mapping like your MyClient class does. It would be then useful in case you want to expand your preparation to request, or tearDown after. E.g. you can see how we can use a quite powerful wrapper with token extractor here.\nHope it helps!. Hi @geraldeersteling, sorry for the late response. Moya depends on Alamofire in terms of pinning, more on the matter you can see here. After the manager setup you have to assign correct SessionManager to the MoyaProvider initializer.\nApart from that we have some methods you might be interested in, in Plugin type. If there is nothing you are interested of, maybe you have an idea how to add it to Moya? If yes, please let us know, maybe we can work something out.\nCheers!. Wow, thank you for detailed explanation, @geraldeersteling. Glad you figured it out. Good job! \ud83d\udcaa. I'm gonna close this issue due inactivity, feel free to reopen with new info.. No problem @konnorbeard! Thank you for taking your time to explain what was wrong. It can help someone in the future :). Hey @iOSUser110, try pod repo update before installing version 9. Or just use version in your podfile, like:\nswift\npod 'Moya', '~> 9.0'. I also think this is not an extension to Moya, so unfortunately I'm gonna close this PR. \nHowever, it doesn't mean we can't include your library in our Readme. Maybe we need to rethink how we promote libraries/extension that work with Moya? For now we have only extensions, how about libraries, projects, abstractions? For instance, Quick uses wiki, and other libraries may have some ideas for this kind of promoting.\nI'm gonna open an issue for that, we'd love it if you could help us with that matter, @alexruperez. Thanks again for the nice work! . Hey @ivanmkc. I've just tested a similar case, using RxMoyaProvider, upload task and endpointClosure without any conditional statements, and seems like every time Moya is adding correct parameters. By the code there is also no difference whether you are using upload or request task, our request method will just get the endpoint from endpointClosure if there is any. \nI'm gonna close this issue for now, however, if you are certain that this issue exist, please create an example project that I can test against, and reopen the issue. . Hey @zhaoyunyi. Is it still happening? If yes, please provide more code to us. Most valuable would be your endpointClosure, requestClosure, plugins and .customAlamofireManager(). Or if you have time, it would be awesome to have a test demo project that this behavior occurs at. I can't say what's wrong without more context, sorry.. We can wait for Peril from @orta. It looks really promising. It is not fully stable yet, but it can already post on issues AFAIK.. This one is really cool! I think we can try to do it. What do you think, @Moya/contributors?\nEdit: Also, can we do it using MoyaBot?. Ye, and this one is looking cool. The question is if we want/can use MoyaBot for that. Also, we would need someone to do a PR with config. Let's just start with something and we will adjust values in a PR if needed.. I was talking with Ash and we've figured that MoyaBot would need a write access so it would be better to use different bot or someone else's access token. Thus, it might be better just to install this stale bot and go from that. I'm gonna do a PR with some default values for config so we can discuss it there \ud83d\udc4d . I've opened a PR#1101 with the config, please let me know what do you guys think!\nWhat we need to get this bot running:\n- [x] #1101 merged.\n- [x] Re-visit issues that might have need a label to not flag it.\n- [x] Install the bot & iterate with the feedback.\nIs there something I didn't think about? \ud83e\udd14 . I've revisited some issues anyways - I've flagged most of documentation ones to leave it as it is, because it is important that we have these open and add it in the future. If you guys want to make last review, I'm gonna try to launch the bot tomorrow morning or so.. Bot added - let see how it goes :D. Wanted to make a quick summary after a month, but seems like our bot is stuck? Maybe wrong configuration? Anyone sees something strange here? Because in issue like #1056, label was added 28 days ago, which means 14 days ago it should be closed, but it is still open \ud83e\udd14 . \ud83d\udc4d nice catch, @SD10. Can you take care of that issue and see if this PR helped? Because from the permission side it looks like it has everything it needs:\n\n. Great, thank you Steven! \ud83c\udf7b . This should be as easy as changing the name of one label & updating the StaleBot config, correct? If so, and if its gonna fix the bot, I am up for the change \ud83d\udc4d I also don't mind waiting few days before we make a change, but seeing from the Issues/PRs it might be quite some time before they merge it.. But if we rename the label to something without spaces, then the update date shouldn't change (since it is the same label object but a different name) and if we change name of the label in the config, the bot should catch that one as well, right? \nFor instance, we could change label name to no-recent-activity or no_recent_activity in both Issues & bot config (until they fix the issue). Or am I missing something obvious here? \ud83d\ude04 . Well, we can (probably) make sure it will work! \ud83d\ude04 \nI've just tested it on my test repo. My steps to reproduce:\n1. Create a new label with space, \"new label\"\n2. Create an issue with this label.\n3. Check updated_at field (since from here I understand that it queries based on updated_at field). Date: 2017-07-10T15:05:36Z\n4. Rename the label to a label without space, \"new_label\".\n5. Check updated_at field again. Date: 2017-07-10T15:05:36Z, which is the same as before.\n(Note: I was using this request to test it.)\nSo if the data is correct and I didn't miss anything, whenever we change the label, the update_at field of the issue is not updated. Therefore, we can assume we won't need to take care of all the issues above. \nThat was fun! \ud83d\ude04 . The issue was created to integrate the bot, and because it is both integrated and working now, there is a reason to close it \ud83d\ude04 We can create another issue for things related to this bot if something pops up.  \nThanks everyone for feedback & help! \ud83c\udf89 . Is that also using probot/stale, @BasThomas? I think we had this conversation here at #1101 and it wasn't possible, but using another plugin could work (though I don't know if we can do it without deploying it).. Is that also using probot/stale, @BasThomas? I think we had this conversation here at #1101 and it wasn't possible, but using another plugin could work (though I don't know if we can do it without deploying it).. @BasThomas so it was, in fact, this .git suffix bug? Maybe we should let the world know somehow, this was found by an accident \ud83e\udd14 . Huh, now where should we raise an issue, on SPM or SPM-compat? \ud83e\udd14 . Right, gonna just comment on the PR what was wrong in our project then. :+1:. I think I was implementing this one and I'm also positive there was a reason for NSError, but I don't remember right now and I don't see any downsides as well. Thus I think we can try changing it to just an implementation of Error type. At least we can do a PR and see what happens. Especially with 9.0.0 version that is in the making. Do you want to take a stab at that, @Zeeker? . Oh right, I was talking about this one for sure! Thanks, @pedrovereza. \nHowever, I was mistaken, this is a different error here. The problem was with underlying error in request/response, here is a problem with sample response. However, it is kinda similar problem, because normally this should be an underlying NSError (a network error)... \nNow that I think about it, maybe we can go with MoyaError here? Moya has an .underlying error already, which takes an NSError if needed. Although how would we go about custom errors? \ud83e\udd14. I think it is time to focus more on this release in the near future. There were multiple issues regarding our new introductions in 9.0.0 and Swift 4 is on the horizon. I'd love to have queues changes (#762) in, and if we can, rx.request & reactive.request from #963 and sampleData from #1126 as well. These are quite big breaking changes so I think we could try and wait for that, but we might want to just go without them if it takes too much time. What do you guys think?. Exactly my point of view as well. Let's just try and finish queues, then pursue rx.request & reactive.request (which shouldn't be hard to implement, but if it turns out there is something in the way, we might want to skip it as well). If we can get sampleData PR in the meantime - great. If not, we may release 9.0.0 anyways.. Yeah, that's a good idea, let's do it \ud83d\udc4d . I'm thinking of merging 9.0.0-dev into master after we merge queues & removing deprecations. What do you guys think?. Removed sample data from the todo-list and checked availability point since it has been recently merged. ~Only queues left (which probably needs a double-check only)~ and a final check for the entire release.\nI also think it might be a good idea to do a beta release before the official one. Seems like quite a lot has changed! \ud83d\ude04 \nEdit: Queues merged! Now we need to merge changes from master & 9.0.0-dev. I will try to do it on the weekend!. Update! \ud83c\udf89 \nI've managed to merge changes from master & 9.0.0. I Must say it wasn't that easy, but I think I've got everything in the end. I'm gonna make a PR in a sec, because it would be awesome to double check we got everything. Especially reactive providers with tests, since we had 2 PRs side by side, with one being in master and second one in 9.0.0-dev, so I had to merge them manually.\nAlso, I think that we should do alpha release instead of beta first. Why? There is this PR #1147, it progressed really fast from zero to almost ready state. I'm not sure if we can squeeze this one in 9.0.0, we gotta think about it for sure, but making an alpha release gives us more flexibility.. We can also think about adding Swift 4.0 support. From what I've seen we just need to change NetworkLoggerPlugin init, because it uses fileprivate method as a default parameter, thus Swift 4 compiler complains. Simple fix would be to use optional output parameter with nil as a default argument and in case nil is passed, use NetworkLoggerPlugin.reversedPrint. This way compiler shouldn't complain anymore \ud83d\ude04 \nThis might be a good idea just after an alpha merge since we probably don't want to mess with that PR anymore \ud83d\ude04 . Okay everyone, alpha is merged. I'm gonna do a release in a bit \ud83c\udf89 . 9.0.0-alpha released! Thanks to everyone involved \ud83d\udcaa\ud83d\udcaa\ud83d\udcaa\nWe can try to focus on the next release now \ud83d\ude04 Apart from bugs/patches we'd need to do, we could:\n- Update NetworkLoggerPlugin to make Moya compatible with Swift 4.0\n- If we update our codebase to support Swift 4.0, we shoud update our CI setup to build both 3.X version and 4.0.\n- Add #1147 (+ documentation/tests).\n- Update AccessTokenPlugin to accept Basic or Bearer. This should be covered by @yar1vn from #1172.\nWhat do you think guys? Something to add, something to remove? . Oh, I mean in 9.0.0 context - beta.1/alpha.2, depends how we feel about what we can still add to the pile.. We are closing in for the next release! \ud83c\udf89  I think the last PR that is needed (from the code perspective) is #1241. We've come really far with this one! \nThe only question I'm having is whether we should release alpha.2 or beta.1? Do we have more breaking changes that we want to include in this release? \ud83e\udd14 . That's what I was thinking as well! We need to speed up with the process a little bit, we can add more breaking changes in the 10.0 from now on. Thanks for the input, @SD10!\nSo, we've got tests merged in (we've got a lot of improvement lately thanks to @phimage), I'm gonna release beta.1 in a while! \ud83c\udf89 . Beta 1 released! Thanks to everyone that played even a small part in it! \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \nNow it's time to make sure it is all working well before final release. \ud83d\ude04 . Alright everybody. After weeks of testing we got only one issue and it's fixed now by @SD10 at #1252. We should aim for a release! \ud83c\udf89 I think that we can test it out till the end of this weekend and release it on Monday. At least that is a time I would like to have to test it out \ud83d\ude04. In the meantime we can check out documentation (especially migration) if everything is alright. \nWhat do you guys think? \ud83d\ude09 . Alright, this is exciting! Doing final checks and releasing this bad boy in a few! \ud83c\udf89 Gonna keep you guys posted!. Aaaaaand it's out! \ud83c\udf89 We can officially close this one, it was a fun ride! Thank you all, you are awesome \ud83e\udd47 \n. Great, seems like another doc is a way to go :) Thank you all for the feedback! Gonna tackle that one later today.. Seems like a good idea! I'm gonna open a new issue for that as well.. Closing in favor of #1082.. I think we don't have to constraint it only to the community around Moya (projects/extensions/etc), but we can also show examples/tutorials/documentation there as well. We could also show how we do open source or how to start contributing. We'd have everything in docs, but website may be an alternative way of presenting the important stuff. But that makes me wonder, can we connect the website with our markdown docs fairly easy? Would it be time-consuming to maintain it? . Great! I think we can start with a skeleton in Jekyll as a first step. Does anyone here want to take a stab at it?. Hey @iOSUser110. Is this JSON you provided your response, or do you want to construct a request with these parameters in it?. It is really strange, could you give us the specific code for parameters that you return, @iOSUser110 ?. \ud83d\udc4d \nWe could start with maybe using something we already have. I think the first paragraph of our Readme (till the Sample Project) with some changes could be a good start.. I think we should prioritize Vision document, as it will be really helpful in reviewing new features/ideas for contributors as well as making sure that idea someone has is a good fit for Moya. \nPinging you, @ashfurrow, as your contribution here would be invaluable. Could any of you guys start this one and we can go from there in a PR? . Thank you, @jawwad! \ud83c\udf89 . Btw, our 100th member of Moya organization! \ud83c\udf89\ud83c\udf89\ud83c\udf89. Haha, membership in the best community out there :>. Thanks again, keep it up! . I'm gonna close this issue for now, but if you'll have more questions about this topic, please feel free to reopen it whenever \ud83d\udc4d  . Hey @ZHDeveloper. I'm not sure if I understood your question correctly: you want to access request parameters after getting the response? If yes, it should be possible, but not so easy. \nOur Response object has a request property that contains a URLRequest object in it. Now, depending on the parameter encoding, you would have to extract the parameters yourself: get parameters from the request.url if the request was using URLEncoding, maybe access the request.httpBody if it was using POST method. \nBelow is a snippet how to get to request property from firing up the Moya request:\nswift\nfunc downloadZen() {\n    provider.request(.zen) { result in\n        if case let .success(response) = result {\n            let request = response.request // now do some logic with `URLRequest` object\n        }\n    }\n}\nHowever, you may try to get your parameters just before the request. We have a requestClosure that does the mapping from Endpoint to URLRequest and you can extract them from this place as well. An example of that is in our tests, here.\nHope it helps! Let us know if something wasn't clear or you need more help on that matter.. Hmm, that is a vital PR not only in fixing typos, but finding out that our tests needs linting as well. Gonna do it in the next PR. . It might, we will have to test it once this is merged. . Oh, right! Thanks, I'm on it. . Done \ud83d\udc4d . Hey @Re-cover! Thank you so much for filling in an issue.\nI'm investigating it and seems like a problem on our end. I have a fix for that already, just need to write some tests. Gonna reference it here once I do the PR. . I've made a PR with the fix, #1095. I'm gonna close this one in favor of this PR. If you'd still have the problem after this PR is merged, please reopen this issue. Thanks again!. Good idea. I really like the way RxSwift did its Rx.playground. We could use our documentation & examples to create some chapters (initial idea): Setup -> Basic usage -> Closures -> Stubbing -> Tests -> Plugins -> Advanced usage.\nBut then, having in mind we wanted to make a website(#1079), having also docs with examples, we would have to find a way of maintaining it all, or choose something we actually can maintain \ud83e\udd14 . This looks cool, @SD10! Made two comments in there, other than that I love it. I think there should be a fine line between reusing existing docs and making the walkthrough feel more like a learning process.. Not sure if you are still working on this one @SD10 - might be worth adding a label for help needed if not \ud83d\ude09 . Cool, I've added the label @SD10.. Hey @longshihua, this is a good one. Testing is our top priority, so we should've better documentation around that. We are working on it, but in the meantime... \nIf we are talking about testing with sampleData in unit tests, you can see it in our tests how we do it here. Basically we use stubbingClosure and check the data from the response. If we are talking about testing without using any stubbing option built in in Moya, we have these as well. For that purpose we use OHHTTPStubs, you can see how we do it here.\nHope it helps! . (Don't worry about this SwiftLint warnings: I've got a next PR lined up, with all fixes. Just need to do some gardening before :D). Looking at the lib file, I think there is no lock() method and any other that are needed for this to happen. Although I love the idea and we can try to add an Issue or PR if someone is more skilled in .js than me \ud83d\ude05 . I've updated the PR:\n- Added confirmed bug & chore in exempt labels.\n- Renamed stale label to no recent acitivity\n- Changed the comments for marking & closing.\n- Added days we waited for the response in an issue.\nLet me know what do you guys think :)\n. Fair trade :D Should be good to go \ud83d\udc4d . Released! \ud83c\udf89 . Yeah, good idea. Let's make it consistent :). This is great \ud83d\udc4d Also, can we maybe make a Danger rule to avoid ===== & ------ and use # in .md files? \ud83e\udd14 \nEdit: I see your \ud83d\udc4d , does it mean you're gonna do this in this PR @BasThomas? :D or let's just do another one?. Haha, probably not, I've meant Danger but well, that happened \ud83d\ude05. Hey @eliacamposilvan. Thanks for filling in an issue.\nIs this issue happening on other versions of Moya as well? Can you use our NetworkLoggerPlugin in your MoyaProvider or any other tool like mitmproxy to make sure it's Moya issue, not a server issue? Logs from that would be really helpful. It would be even better if you could prepare demo project where this issue exist so I can investigate more.. Don't worry about it, glad you figured it out! \ud83c\udf89  Also, from the logs it seems like there is no body in the response, might want to check that out as well. \nPlease feel free to reopen if you find something that might be a Moya problem anyways.. Thank you :D. Hey @KieSun. This is really strange. We have tests around progress, but if you found an edge case which our tests do not cover - please let us know with more detailed description. Even better if you could write a test for that. Right now, I can't really help you based on this information.. Hey @k8mil. You are right - by default POST method would add parameters to the body. But there is an option to brute-force it in the query string: you would have to use URLEncoding(destination: .queryString) as your parameterEncoding. More on this matter you can find here.. Thanks for the issue, @SD10 - this is a really good idea. Having standardized encoding/decoding by Swift standard library, I think it is natural for us to implement a basic map method that would cover this behavior. However, for now we don't have any Swift 4.0 branch and we are in the middle of Moya 9.0 release, so we might want to wait with that implementation. . Hey @devxoul, just making sure - do you think you will want to implement this one? If not we might want to add labels to seek for help \ud83d\ude09 . That's great! I assigned you to this task then \ud83d\ude09 . Just to add to it: URLEncoding.default will behave differently in GET and POST requests. In GET method you will, in fact, get parameters in URL, @pete183. In POST on the other hand, you will get parameters in body. You can specify if you want it all the time in the URL or body using different properties of URLEncoding - more on the matter here.. We don't have a method exclusively for this behavior, but you can use custom ParameterEncoding, that would decide whether the parameter should be in body/url/header. You can find instructions on creating your own encoding here.\nEdit: Now that I think about it, that would be a good addition to our examples. If you, @pete183, or someone else end up doing their own ParameterEncoding, we would love to have it added to our examples directory.. Yeah, I was thinking about something similar. Unfortunately, this way you have to remember about 2 root keys being kinda instructions for sub dictionaries. We can improve it a little bit making these dictionary keys static in the CompositeEncoding:\n```swift\nstruct CompositeEncoding: ParameterEncoding {\n    enum Keys {\n        static let query = \"query\" \n        static let httpBody = \"httpBody\"\n    }\n...\n\n}\npublic var parameters: [String: Any]? {\n    return [CompositeEncoding.Keys.query: [\"access_token\": getAccessToken()],\n            CompositeEncoding.Keys.body: [\"user_name\": \"Pete\"]]\n}\n```\nWould you want to make a PR with this, @pete183? It would require adding this example to docs/Examples and linking it in the docs/Examples/Readme.md.. Great, thank you! \ud83c\udf89 . Thank you so much for the feedback, @pedrovereza \ud83d\udc4c \nAbout empty base protocol - it would be needed if we wanted to go with solution 2 to the problem - array of plugins. For the first solution it would be possible to avoid the base protocol if there wouldn't be a reason for keeping it.\nAbout different contracts - I agree that these are different. But we already have different contracts in our current PluginType and I've just built on top of that. Maybe we need to think if we still want multiple contracts, but I believe that it would open more possibilities, like e.g. eliminating closures.\nAbout second option to storing problem - we would need to have collections/properties of given plugins anyways, because we need to know which plugin to invocate, e.g. before firing up the request, we could invocate some plugin type that can decide if the request should use network or use stubs.\nAnd the last but not least - what should our Plugin be? Given the fact how we use it right now (both delegation and modification of some objects), I wouldn't shrink the capabilities, rather stick to them (or stretch if needed). This way we would be able to reduce some responsibilities of Moya core and extract them into plugins. We might need to be circumspect in selecting which plugins we can add and which we cannot, though.. @colinta you could use one plugin that implements few protocols, or just use multiple plugins - your choice. The point of this idea was to refactor plugins to have the same functionality as now, but also be easily expandable to features like endpointClosure & requestClosure or authentication/stubbing/inflights. \nProtocols in my example are just stubs for what we can really do - the endpoint function could get the parameter from the other plugin that makes an Endpoint from TargetType.\nNonetheless, If anyone have a different idea I'd love to hear it.. Because of scale of this improvement and lack of feedback/better alternatives, I'm closing this one. Maybe we will revisit it some time in the future.. @pedrovereza Yeah, I did that as well, but didn't push to the branch itself, but created a new one and did a PR since it was a big merge and wanted to make sure I didn't break anything. Also, this problem with Changelog is strange since there was no conflict in it \ud83e\udd14. Fixed Changelog.md & Package.swift - thanks @pedrovereza! Also, I've checked once again and it seems alright, but another look wouldn't hurt :D. For sure! Still, I think that ParameterEncoding using some specific Moya configuration would be awesome as well.. As @bchrobot stated, this one is also resolved by #1343. . Hey @BasantAshraf. Use URLEncoding(destination: .queryString) as your parameterEncoding and add userName & password as your parameters. Let us know if it worked!. Hey @shenxiewei, great to hear! Can you share your solution with us? Maybe it'll help someone else \ud83d\ude09 . Hey @XavierDK. You can create your own Manager and pass it to the MoyaProvider:\nswift\nlet configuration = URLSessionConfiguration.background(withIdentifier: \"com.example.app.background\")\nlet manager = Manager(configuration: configuration)\nLet us know if it helps!\nEdit: Also, see how the default Manager is created here.. Glad it worked! \ud83c\udf89 . Hey @leo-lp, I'm assuming this is a mistake-PR so I'm gonna close it. If it's not, please describe what was your intention here and we will work things out \ud83d\udc4d. Hey @bfjfm2. Thank you for bringing that up. I think we somehow missed updating some docs regarding this matter in some places, like here.\nBut our main docs should be up-to-date, so please take a look at them. You can also take a look at our tests that use this new closure here. Basically you can now specify if you want to pursue the request using .success case of Result type, or to fail the request using .failure case and passing the error down.\nLet us know if it helped!\nEdit: Also, because we need to update our docs around it, I've opened an issue #1134. If you resolve your problem and want to take stab at it, feel free to do so :). Glad it helped! \ud83c\udf89. We might want to see what \"good first step\" is used for, but for me it would be slithly different. E.g. I would use it for an idea that I have and that need improvements, where \"starter task\" would be rather concrete specification of what's needed, how to achieve that and possible caveats. \nAlso, I'm in for changing \"starter-task\" to \"starter task\" to keep consistency \ud83d\udc4d. I'm sorry mr. stalebot, but we have to do this sometime in the future so I'm gonna reopen this. Maybe we should add starter-task to labels ignored by stalebot? \ud83e\udd14 . In case of documentation we use additionally chore tag which is ignored by stalebot. That leads me to a reason why this was closed by our bot \ud83d\ude04 I'm gonna add labels where needed, right now I think all starter tasks are docs, so we should be fine for now.. This is covered by #1256.. Hey guys. I must admit I didn't read the whole conversation, but I'd suggest that we wait a little bit with planning this one. We are still focusing on releasing 9.0.0 first. Additionally, we build Moya on top of Alamofire, and these guys could also implement some ParameterEncoding interop with Encodable & Decodable, thus making our life easier (they change ParameterEncoding a lot). Swift 4 has a long way to go and time may play on our side. Although if we don't get any new API, enum idea with some tweaks seems good for me :). Actually, we have some undefined behavior in Moya already, so maybe we can start implementing the changes you talk about right now (and then add Encodable later for Swift 4.0). Because there is a problem between task & parameters & parameterEncoding (especially in upload, parameters & parameterEncoding do nothing in it), maybe we can merge it and create a room for Encodable in the future? I imagine something like this (while removing parameters & parameterEncoding properties):\n```swift\nenum Task {\n    case request(RequestType) // that's new\n    case download(DownloadType)\n    case upload(UploadType)\n}\n// this whole enum would be new\nenum RequestType {\n    case data(Data) // may be used with Encodable later or/and maybe we can add .encodable case too\n    case parameters([String: Any])\n    case encoded(parameters: [String: Any], encoding: ParameterEncoding)\n    case composite(urlParameters: [String: Any], bodyParameters: [String: Any])\n}\n// expanded current DownloadType a little\nenum DownloadType {\n    case destination(DownloadDestination)\n    case parameters(DownloadDestination, parameters: [String: Any])\n    case encoded(DownloadDestination, parameters: [String: Any], encoding: ParameterEncoding)\n}\n// this could stay the same as it is\nenum UploadType {\n    case file(URL)\n    case multipart([MultipartFormData])\n}\n``\nThis is just expanding our currentTaskAPI to cover more cases. We could also merge it into oneenummaking it kinda more easy to use (just make sure the most common use-case, request, would be easy to use). The problem would be withendpointClosure- what would adding theparameters&parameterEncodingmean forupload&uploadMultipart`? \nWhat do you think guys?. The cases are:\n1. I was thinking of producing a default parameter encoding to make it easier to use (most of the time you use one specific encoding), maybe it can be customizable in MoyaProvider like provider.defaultParameterEncoding, or maybe we should just use URLEncoding.default like it is in endpointClosure by default right now.\n2. In the other two cases you can also specify parameters in your download requests. Download request is almost the same as normal one that doesn't save anything to disk, so we might also add these options to them if needed.\n3. Yeah, this is the trickiest one - we probably need this parameter encoding there too.\nSo about PRs - I'm thinking about one big PR that we can target in the smaller PRs. This is because we probably can't do few PRs without breaking a build for some time. \nAlso, I would love to hear feedback from more @Moya/contributors since it is kinda big change, and if we agree on something, we may want to implement it in 9.0.0 as well.. I think we can close this one in favor of #1147.. Exactly what I was thinking \ud83d\udc4d . Hey @syegin, thank you for the issue. Seems like what you're saying might be the case - upload doesn't take parameters, just data, so in case of an Endpoint, we just add parameters and not append the data. Was trying to think of a fix and it seems like adding parameters from endpoint to the multipart data here might be sufficient. Also, we would need to add a test that covers this situation (probably asserting the data). \nLet us know if you want to take a stab at it, @syegin - we will try to help you in any way we can :). Now that I think about it, this fix will now transition from ignoring parameters in multipart upload to adding them to the request as well. But in normal upload parameters will still be ignored. This makes a lot of kinda-undefined behavior. But that's another problem (and I will open a new issue for that). I think we may accept it as a bug fix and release a 8.0.6 for now if needed.\nAbout this changes - seems like a way to go! Please make a PR so we can discuss the implementation details \ud83d\udc4d . This is being worked on at #1139, so I'm closing this one.. Hey @ercancelik. You are right - you cannot do it in TargetType yet. This is in our planned 9.0.0 release. Right now you can do it in endpointClosure (more details here), and after the release you can switch to the new parameter headers in TargetType.\nLet us know if it helped!. Hey @syegin, just checking if everything is alright. Let me know if you need some help or you just don't have time to do it right now. . It is not yet merged, @codwam. I can take it from here (filling the tests & changelog), if @syegin won't in the near future. . @dangthaison91 It might be the case that this PR won't make it into 9.0.0 release, since we are in the middle of changing the parameters/encoding/Task in #1147. Basically the API will be more verbose and you would specify what to do based on a task. . This can be closed as #1147 is merged into 9.0.0-dev and will be into the new release soon. Thanks for your time, @syegin! . @BasThomas you probably just need to extend Reactive (RxSwift.Reactive & ReactiveSwift.Reactive) and then we can skip using other providers and provide request method.. @BasThomas We don't support swift test yet, it is on my todo list to make it work some day and there is an issue for that as well (#894). Right now we can use Carthage for it (carthage update --platform iOS should be fine) and then open Moya.xcodeproj and run the tests in. Should work fine, but if you encounter any issue let me know \ud83d\udc4d \nEdit: About the swift build command, do you have an old toolchain somewhere? Maybe old Xcode? This command should work \ud83e\udd14 . I did the rebase on 9.0.0-dev and fixed conflicts on this branch, should be alright. In case something is wrong, I've got the copy of the 9.0.0-dev branch so it's all good \ud83d\udc4d . And how are we with that extension change to ReactiveCompatibles, @BasThomas? What do you think? Kinda got buried in the process of this PR, so it is hard to follow the conversation :D. @BasThomas I might do one commit that will show what I had in mind, what do you think? In case something went wrong we can just remove it :D. I did some work on that and it seems like we would need to add a protocol for MoyaProvider to make extensions happen, because we can't still do something like: \nswift\nextension Reactive where MoyaProvider {}\nAnd also we would need to get rid of overriding stubRequest in ReactiveSwift provider - but I think that we established that queues are gonna implement it. I just made a comment on queues PR for that to make sure we do not forget about it. \nDue to it being a bigger change than 1 commit + a lot of discussion happened there, I think we should do another PR with clear state. What do you think, @BasThomas?. This is great idea, thank you, @BasThomas! Although, maybe rename it do something more verbose about it being in the \"development\" phase, rather than testing in Moya itself (sampleData, stubbing etc.)? Like Development.md? These are the steps that we can really use for development as well :D \nAlso maybe we need to split documentation on usage of Moya and everything around it (like Community, Code of Conduct, Development, Releasing etc.)? \ud83e\udd14 . I thought about it for a while, but couldn't get anything good enough. I came to a conclusion that we can just move CommunityProjects.md, Development.md & Releasing.md from docs/ into the root directory for now (like with everything else that does not touch Moya usage itself). This idea is also supported by GitHub (they expect Code of Conduct & Contributing to be in the root dir as well).. Yeah, we probably need to group it somehow. No idea how, though \ud83d\ude1e . Not exactly @SD10, there are still places where ReactiveCocoa is mentioned. Look at the link by @BasThomas.. Oh no, I've meant that someone else should take a look at it as well :D Also, I'm not sure how can we test this one, since it is on a branch that does not belong to Moya, but to you.. I will go ahead and say we might not want to add it to 9.0.0 release since we have many breaking changes already (and few big ones). To make transition smoother we may just hold onto this one till after the release. This is a really big change and a great amount of work from @Dschee, so it would be awesome to get some feedback from @Moya/contributors in the meanwhile.\nThis PR helps with a lot of undefined behavior but from the user perspective it might look messy. We may need to think about this one a little bit more:\nswift\nreturn .request(.parameters([\"test1\": \"test\", \"test2\": \"test\"]))\nLooks kinda uncomfortable at first glance. And especially because it is the default use-case, we may think of a cleaner solution. Would one enum instead of 3 help? Not sure. Opinions?. I left you comments around most issues @Dschee. For flattening I agree we would need to flat upload & download types as well. I think we might do it in the same PR since naming convention in this one would be similar. \nAnyhow, I like the direction that this PR has taken. Keep it up :). Hey @Dschee, just a heads-up. I'll try to get to it ASAP and edit this comment. Thank you for the constant work on this one. \ud83d\udc4d . Thanks, @Dschee! I'd love to have it, but we are still without tests and I'm not the only one to decide such things. Would love to get some feedback on it from @Moya/contributors, since it is almost finished now.\nAlso, sorry that I didn't mentioned it earlier, but would you rebase it to 9.0.0-alpha.1 branch, please? . Hey @T1ASH. If I understand your question correctly, you can do it as follows:\n```swift\nenum GitHub {\n    case zen\n}\nextension GitHub: TargetType {\n    ...\n    var task: Task {\n        let data = \"test data\".data(using: .utf8)\n        return .requestData(data)\n    }\n    ...\n}\n```\nWhere, of course, your data is whatever you want to send in this endpoint. This will send the data request (meaning it will replace httpBody in the URLRequest) for GitHub.zen endpoint.\nLet me know if this is what you wanted or I've completely missed \ud83d\ude04 . Damn it! Thanks for the great catch, though, @pedrovereza! . Please look at my comment here. Because of that and because we may have too many PRs opened at the same time and we want to make it easier for our contributors to find the ones that matter the most right, I'm gonna close it for now. We will continue the discussion later on.. Hey @lovesomeone. I went through our docs and surely it could use some improvements. For now I've managed to write some really simple use-case for MultiMoyaProvider that compiles. Let me know what do you think!\n```swift\nprotocol TestResultType {\n    associatedtype T\n    static func parse(_ object: Any) -> Self?\n}\nprotocol DecodableTargetType: Moya.TargetType {\n    associatedtype ResultType: TestResultType\n}\nfinal class MultiMoyaProvider: MoyaProvider {\ntypealias Target = MultiTarget\n\noverride init(endpointClosure: @escaping EndpointClosure = MoyaProvider.defaultEndpointMapping,\n              requestClosure: @escaping RequestClosure = MoyaProvider.defaultRequestMapping,\n              stubClosure: @escaping StubClosure = MoyaProvider.neverStub,\n              manager: Manager = MoyaProvider<Target>.defaultAlamofireManager(),\n              plugins: [PluginType] = [],\n              trackInflights: Bool = false) {\n    super.init(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, manager: manager, plugins: plugins, trackInflights: trackInflights)\n}\n\nfunc requestDecoded<T: DecodableTargetType>(_ target: T, completion: @escaping (_ result: Result<T.ResultType, Moya.Error>) -> ()) -> Cancellable {\n    return request(MultiTarget(target)) { result in\n        switch result {\n        case .success(let response):\n            if let parsed = T.ResultType.parse(try! response.mapJSON()) {\n                completion(.success(parsed))\n            } else {\n                completion(.failure(.jsonMapping(response)))\n            }\n        case .failure(let error):\n            completion(.failure(error))\n        }\n    }\n}\n\n}\n```\nWe may want to improve existing docs, maybe creating a new example out of this - this will be a good material for a starter task imho.. Hey @MrAsterisco, thank you so much for this PR. \ud83c\udf89  This is a really nice idea, however, from the user perspective, I often need this plugin to tell me exactly what is the body of a request I send to the API. So for me it would be not-so-obvious that Moya is doing some kind of decoding under the hood. \nMaybe we can figure out a way that user can opt-in (like parameter?) for that feature. Do you have any idea how we can achieve that? \ud83e\udd14. Looks good, @MrAsterisco! I've fixed some indentation in your PR, so now we need only 2 more things:\n- [ ] Add Changelog.md entry\n- [ ] Add a test case.\nAbout Changelog.md entry, just need to add a new item in the Next column with the change you implemented. Example here (it is not a breaking change, so without that breaking change label).\nAbout test case, you can take a look how it is done for formatting response data here and make something similar.\nLet me know if it looks good for you. Also, do not hesitate to ask for help If you have any troubles with the above. We will try to assist with whatever you want.. Seems good! Indent is quite off though, could you take care of that? :). Hey @codwam. Please let us know the details of your issue. For example it could be your TargetType setup, what are you trying to achieve and what is happening. For now we can't really help you with that info, unfortunately. . @codwam to make your request multipart-friendly, you need to have a multipartBody that is not empty and your method in TargetType must be one of the following:\nswift\n.post\n.put\n.patch \n.connect\nIf you specify the following correctly, there should be no issue on our side. \nFrom the code you posted it seems like your backend wants multipart request on given endpoint, but you are just doing a request in case of no image - thus server does not allow the request. \nOne of the fixes would be to just switch from optional UIImage? to just UIImage:\nswift\nenum Router {\n    case test(account: String, image: UIImage)\n}\nLet us know if it helped!. Can you post the logs from Charles? Like the whole request you see? (headers, method, body)?. It is not a must, @codwam, but having this check should help users when making a mistake by not specifying multipartFormData. If you really want to send an empty data, you could try with:\nswift\nreturn .upload(.multipart([MultipartFormData(provider: .data(Data()), name: \"serviceImg\")]))\nLet me know what you think :). Glad it helped! \ud83c\udf89 . This is a great idea. I'd love it if you could help with migration guide, @ashfurrow. Especially because we will only deprecate providers, without removing them, we might get more feedback on the change as well (and thus we could see what features are really used in Moya).. Great! Thank you, Ash \ud83c\udf89. Btw. anyone have an idea why is CI failing? \ud83e\udd14 . Ok I think, I fixed it (it actually passed from the state it was stuck on \ud83d\ude04 ). There was a problem with project (I had to regenerate it using framework-generate. I'll bring that up in another issue) + problem with Carthage deps. . Thank you guys so much for the reviews and help!. Hey @MrAsterisco. This is a very good question. Usually, I have a refresh observable that would cover that for me. So my usual stack would be somewhat similar to:\n```swift\nfinal class TestViewModel {\nlet refresh: Observable<Void>\nlet items: Observable<[Item]>\n\nprivate let provider: RxMoyaProvider<GitHub>\n\ninit(refresh: Observable<Void>, provider: RxMoyaProvider<GitHub>) {\n    self.refresh = refresh\n    self.provider = provider\n\n    self.items = refresh\n        .flatMapLatest { [unowned self] in\n            return self.provider.request(.zen)\n                .catchError() // logic for error catching here\n        }\n        .map(toArray: Item.self)\n}\n\n}\n```\nThis way every time refresh observable produces next element, my items refresh with it. This refresh observable might be also Subject or Action, whatever works for you. \nLet me know if it helped \ud83d\udc4d . Hey @MrAsterisco. Yeah, it is one of the most common usages of reactive extensions. You don't necessarily need to make a Variable, you want to refresh your items based on some sort of event. This event could be passed to the view model from view controller and thus could trigger the refresh. E.g. you can pass observable that on each button click it refreshes the items:\nswift\nlet viewModel = TestViewModel(refresh: refreshButton.rx.tap.map { _ in })\nHowever your idea could work as well. You could make your own subclass of MoyaProvider that covers a function of repeatLastRequest(), but it would require saving state in the normal, overridden request function. It could be tricky (probably needs some locks), but it should work.. Of course! \ud83d\udc4d  Let me know if I can be any help.. Hey @ledikari. @pedrovereza is right, in 9.0.0 the underlying case would be getting response as well, but right now you can just cast error to Moya.Error and parse the response data:\nswift\n.catchError { error in\n    if let error = error as? Moya.Error, body = error.response?.mapJSON() {}\n}\nthe syntax might be off since I'm writing this from the bus, but the idea should be alright. \ud83d\ude05\nLet us know if it helped!. Yes, we are sorry about that - just the underlying error & body needed in it was so uncommon we didn't really think about it till few months back. But we are closing in for the 9.0.0 version so please take a look at it once it is shipped. Sorry again for the inconvenience \ud83d\ude25 . @ledikari Not sure, we are tracking progress in #1075, but slowly getting there. I didn't recommend using our 9.0.0-dev since there might be some breaking changes in the near future, so please use it at your own risk \ud83d\udc4d . Could anyone take a look at this one, @Moya/contributors? \ud83d\udc3c . Wow, that was quick! Thanks guys!. This is a good one! But I think a comment would be sufficient, no need to make a PR out of this \ud83d\ude04 I'm gonna merge it and add alias to the method as @pedrovereza pointed out \ud83d\udc4d . This is a good one! But I think a comment would be sufficient, no need to make a PR out of this \ud83d\ude04 I'm gonna merge it and add alias to the method as @pedrovereza pointed out \ud83d\udc4d . Hey @abeintopalo, thank you so much for this detailed explanation! Really awesome of you.\nAbout the problem - yeah, we got 4 schemes and each one is gathering coverage data. It should work just fine with MoyaTests doing that, we gotta see and test. Would you be up for doing a PR? You would have to branch from 9.0.0-dev and target that one in the PR, though.. Thank you @abeintopalo! I'll try to get to it & test it whenever I have some free time. Maybe someone else will be free to check it before me, though! Also, from the PR it seems like codecov integration didn't break (I think), so it is a good sign \ud83d\ude04 . I'm gonna close this one and we will focus on this matter in the PR @abeintopalo created (#1169). \ud83d\udc4d . Hey @sandeepbol. This is a good question!\nUnfortunately, we do not have such solution built-in Moya core. This might change when we migrate to Swift 4, in fact there are already plans on implementing such functionality (#1135, #1147). For now you would have to do the object mapping to JSON manually. However, there are libraries out there that can help with that, like Wrap by John Sundell - you could give it a try.\nPlease let me know if you have any further questions regarding this topic! . Setting parameterEncoding in endpointClosure (first option) was an option long before parameterEncoding in TargetType (second option). The first one is more generic - you can have one closure that handles multiple providers/target types (so you can setup one encoding for an entire API or for some part of the endpoints), where the second one is more TargetType specific (sometimes you just want different encoding for one endpoint, not for a whole API, thus this option).\nAlso when you use both methods at the same time, the endpointClosure one will override the TargetType one, since it is executed after.\nBut both of them are setting the ParameterEncoding, which is the same functionality, but for kinda different use-cases.. Also, because I think your issue is resolved for now, I'm gonna close this issue. If you find yourself getting more questions about Moya, don't hesitate to open a new one! . Hey @Marcopohlo, thanks for the issue! \nBasically, what you want to accomplish doesn't really benefit from the fact you are using reactive provider (besides retry). You are transforming your Signal to a simple closure callback, where the whole point is to keep this object and make plethora of operations on it. If you want ReactiveSwift just for Moya and this adapter, I'd say that you should leave it and do something similar to our current wrapper (without reactive provider).\nAlthough if you are using ReactiveSwift in your project quite extensively, I would suggest you take a different approach, a more reactive one. Please take a look at our subclassing example. This is in RxSwift, but conversion to ReactiveSwift should be pretty simple (RxMoyaProvider -> ReactiveSwiftMoyaProvider, Observable -> Signal/SignalProducer). \nThis is also a subclassing example, but you could go with composition instead (especially because in Moya 9.0.0 we are deprecating reactive providers). A simple pseudo-code that would cover what I have in mind would be:\n```swift\nfinal class Networking {\nlet provider: ReactiveSwiftMoyaProvider<T>\n\ninit(provider: ReactiveSwiftMoyaProvider<T>) {\n    self.provider = provider\n}\n\nfunc request(target: T) -> SignalProducer<Response, MoyaError> {\n    return provider.request(target) // here you could add some logic for retrying/handling global errors etc.\n}\n\n}\n```\nAlso, if you'd do it, you could make a PR with example using ReactiveSwift - we would gladly take that one \ud83d\ude04 \nLet me know if you still have some questions about it :). No problem, happy to assist! Did you have some more troubles there, @Marcopohlo?. Hey @yar1vn, thank you for the PR! Seems like a good idea of introducing Basic auth. Although, we might want to add this one to  our existing AccessTokenPlugin. Because right now this plugin is not really flexible - you can't use both OAuth & Basic on different endpoints (sometimes it happens) - you either use it or not. \nI'm thinking about updating the AccessTokenAuthorizable protocol so it would look like:\n```swift\nenum AuthorizationType {\n    case None\n    case Basic\n    case OAuth\n}\npublic protocol AccessTokenAuthorizable {\n/// Declares whether or not `AccessTokenPlugin` should add an authorization header\n/// to requests. If it should, what type of authorization does this request need?\nvar authorizationType: AuthorizationType { get }\n\n}\n```\nAnd then it would be easy to append header based on the type specified:\n```swift\n    public func prepare(_ request: URLRequest, target: TargetType) -> URLRequest {\n        guard let authorizable = target as? AccessTokenAuthorizable, authorizable.authorizationType != .None else {\n            return request\n        }\n    var request = request\n    switch authorizable.authorizationType {\n        case .OAuth:\n            request.addValue(authVal, forHTTPHeaderField: \"Authorization\")\n        case .Basic:\n            // add Basic header\n    }\n    return request\n}\n\n```\nThis makes it really flexible to use and also this way we can really cover most of the use-cases in the networking layer with auths.\nWhat do you think about it, @yar1vn?\n. What I meant was to update what we have with Basic authorization on top of it. We can name it Bearer type, instead of OAuth, to describe it properly. We would just send a Bearer or Basic token in the header, so it makes sense to name it that way. And also, as @SD10 mentioned, to that we would also need to add tests, Changelog entry (with a breaking change) and check docs/update them accordingly.\nWould you be up for that one, @yar1vn?. Hey @yar1vn! Just a heads-up that we just released 9.0.0-alpha.1 version of Moya. We would be up for taking your PR in the next release, so if you'd have time to implement it in the near future it would be awesome \ud83d\udc4d Thanks for taking this one! . Sure, @yar1vn. Thanks for your response. \ud83d\udc3c  \nPlease let me know if you'll be able to do it this week, would be awesome! Otherwise we might just help you out since this is a breaking change and is a perfect fit for a new major release we are planning.. We don't want you to feel pressured to do this, @yar1vn, since nothing good happens from it. Thus, I think, that we should just take it from here and you can always contribute in the future when you have more free time. We will always have some tasks for starters, so don't worry about that :) Thanks for the initiative and your time spent on this one! \ud83d\ude47 \n@SD10 could you please create an issue and then we can move there and close this one? :). Moving this to #1214.. Good catch, @SD10! Added this one as well.. Hey @ArthurAlvarez. This is a good one!\nI must say that there is no easy way to do it right now. We have an AccessTokenPlugin, but it doesn't allow to change the token or refresh it easily.\nI really like your solution though! What I could add to that is to save token duration and if you know it expired, just send a request for token and then a normal request. This way you can avoid 1 request that shouldn't be needed.\nI feel like it could even be a good CocoaPod out of it - one that handles full OAuth in Moya. Many people implement their own at some point in time. I was thinking about plugin, but not sure we can do it with current plugin limitations.. Hey @zichenJack. Thanks for detailed explanation. This should be a fairly easy fix. As error says, the problem is because both Moya and Swift use type name Error. Having imported Moya, the compiler just gets confused as to what type do you really want. To make sure it gets a Swift one, just prefix the type with Swift., like Swift.Error:\nswift\n    func webView(_ webView: UIWebView, didFailLoadWithError error: Swift.Error) {\n        print(\"UIWebView Error\")\n    }\nand it should resolve the issue. I've tested it on a clean project using Moya 8.0.5 and Swift 3.1 and it worked correctly, but if you still encounter the issue, please let us know! \ud83d\udc4d . Hey @mrachid. This is not the easiest thing to do, so I understand your pain. \nCould you please share what have you tried? The best would be code that you wrote with comments around places you had problems with. This way we could figure out the easiest way to help you in your specific scenario (configuration, abstraction layers etc.). Hmm, you might be right and it might be hard to discover manually. But I think you will find it from the docs anyways. But I'm open for a change \ud83d\ude04 . Good point @SD10! I think that it might be a rare case that we extend Apple framework, but if we do, I feel like it has to be something unique to Moya. In this case, we are creating URL from a TargetType, which is only viable for Moya codebase. This way users shouldn't get confused since the type accepted by this init is important only for Moya users. In case of these other two extensions you showed, they may seem like standard library methods \ud83d\ude04 . Yeah, I think Endpoint is the place where we use this extension and where you would need it for a basic implementation. Would you be up for updating the docs in another PR? :). \ud83d\udc4d What do you think about it, @BasThomas? :). Hey @dindonkey. You can use it the same way as any other Observable. Below is the simple test taken from RxSwift repository:\n```swift\nfunc testSequenceOf_complete_immediate() {\n    let scheduler = TestScheduler(initialClock: 0)\n    let res = scheduler.start {\n        Observable.of(3, 1, 2, 4)\n    }\nXCTAssertEqual(res.events, [\n    next(200, 3),\n    next(200, 1),\n    next(200, 2),\n    next(200, 4),\n    completed(200)\n])\n\n}\n```\nThis code above is a simple test from RxSwift using TestScheduler. What you want to do is to replace Observable in scheduler.start method and then assert whatever you like:\n```swift\n    let res = scheduler.start {\n        provider.request(target).observeOn(scheduler)\n    }\nXCTAssertEqual(res.events, [\n    next(200, response),\n    completed(200)\n])\n\n```\nThis code above might not compile since I didn't try this one out, but the idea should be precise. Also don't forget to manipulate stubClosure in your tests \ud83d\ude04 \nLet me know if it helped or if you have more questions about it \ud83d\udc3c . Damn misclick, sorry @nanoxd. . Merging this one and starting the big merge (master & 9.0.0-dev). Thanks again, @SD10 :). Good ones, @pedrovereza! Updated both Changelog & comment for headers in TargetType \ud83d\udc4d . Okay, I also fixed most of the issues from SwiftLint. The rest is either from Demo (which we might update as well, in another PR) or from things we know exist but we need time to refactor (like long MoyaProviderSpec). Hey @Moya/contributors, just a reminder that we'd love it if we could get another pair of eyes on that one. Pushing an alpha release this week would be \ud83d\udcaf . Thank you, @SD10! @pedrovereza, do you feel like you'd have time to validate this one as well? :) . Thank you so much, y'all! \ud83c\udf89 . Hey @larryonoff! Your proposal is just in time for our 9.0.0 version \ud83d\ude04 I think this one can get in as well, what do you guys think, @Moya/contributors? . Cool! I think we should do it after #1181 merges onto master since there are many changes already.\nAlso, maybe you would be up for doing PR with the update, @larryonoff? \ud83d\ude09 . Hey @lhalcyon. It seems like we don't have that option right now, but to allow this behavior we could just add another parameter in NetworkActivityClosure, from:\nswift\n(_ change: NetworkActivityChangeType) -> Void\nto\nswift\n(_ change: NetworkActivityChangeType, _ target: TargetType) -> Void\nand this way you could make conditional statements based on TargetType. Also, I think this would be a valuable addition to our codebase, so maybe you would you be up for a PR? \ud83d\ude09 . Good job, @larryonoff! However, we might want to wait with this one after the #1181 merge, since there are multiple changes to reactive providers.. If you could it would be awesome \ud83d\udc4d . We should do that for our 9.0.0 release, gonna make sure people will have a clear view as of which version they can use for their app. Thanks for reporting, @Coeur \ud83d\udc4d . This should be resolved in #1239.. Hey @wz1383691. This is a duplicate of #1189. Basically we don't really have a Swift 4.0 support right now. Please head to #1189 for more info.. Hey @plam4u. Thanks for an issue!\nI must admit that this is the first time I'm seeing this error and so my comment may not be useful at all. But, from my googling, I found 2 projects that use this error log and both use really similar codebase (there and there).\nAre you sure these errors are from Alamofire? I'm not seeing  anything like that in their sources but maybe I just didn't search enough \ud83d\ude04 . Hey @lovesomeone.\u00a0We don't really need to do much to support Swift 4.0 in Moya core (without RxSwift/ReactiveSwift extensions). I think we can squeeze this one in alpha.2 or beta version of 9.0.0 \ud83d\ude09 \nRight now you can just use Swift 3.2 version of our pod, which should work with your 4.0 project.. Yup, you're right, but unfortunately only examples \ud83d\ude22 . Thanks for doing this, @BasThomas! I agree that deprecation warnings may not be needed \ud83d\udc4d Would you be also up for completing all of the rest in this PR? I mean finishing the examples & progress?. We can just mention that these exist, it doesn't need to be another big example :). Would you be up for adding these in this PR @BasThomas or let's just add it later? :). Sure! Good catch, @pedrovereza, PR updated :). Update: So I tried the new workflows API from CircleCI, but seems like macOS is not yet supported there. Thus, we probably need to fallback to rake.\nEdit: I'm gonna unassign myself from that one for a while, if anyone have more free time to do it, feel free to assign yourself.. Update: CircleCI 2 on macOS is in beta stages and for the last few days I was tweaking the script to at least run 3 jobs asynchronously - with success! You can take a look at branch workflows which is kinda in a WIP stage. I've managed to split our build process into 3 routes:\n- build_demo (builds our Demo project, with CocoaPods)\n- test_integration_carthage (tests Carthage integration)\n- test (tests the project)\nAnd after that there is a danger/codecov plugin that I didn't really test that well, because I would need a PR on top of that.\nAlso, all of these reduced our build time to around ~12-13 minutes (from 20-25)!\nNow I just need to add additional asynchronous routes so it can test with Swift 3.2 & Swift 4 at the same time. I'm gonna update you guys here with the progress!. Got a working copy of both Swift 3.2 & 4.0 builds on here, really cool stuff. Might try to get skipping trivial builds if it's possible as well.. Hey @xavierXing. You would have to use your own manager in MoyaProvider for that one. You would then configure your certificate handling in it. You can see how we use it in our defaultAlamofireManager:\n```swift\npublic final class func defaultAlamofireManager() -> Manager {\n    let configuration = URLSessionConfiguration.default\n    configuration.httpAdditionalHeaders = Manager.defaultHTTPHeaders\nlet manager = Manager(configuration: configuration)\nmanager.startRequestsImmediately = false\nreturn manager\n\n}\n```\nOf course this one doesn't have certs handling in it. But you can just use the same setup as for self-signed certs in Alamofire.\nLet me know if you have any more questions about it :). Hey @xavierXing. Please post your code and we will try to help you :). Hey @xavierXing. From your code I don't see any manager that you are creating and passing to the MoyaProvider. You can checkout the full demo of how would you do it - pedrovereza/SelfSignedMoya.\nIn short you would need to create a manager:\n```swift\nimport Alamofire\nclass CustomServerTrustPoliceManager : ServerTrustPolicyManager {\n    override func serverTrustPolicy(forHost host: String) -> ServerTrustPolicy? {\n        return .disableEvaluation\n    }\n    public init() {\n        super.init(policies: [:])\n    }\n}\nlet manager = Manager(\n    configuration: URLSessionConfiguration.default,\n    serverTrustPolicyManager: CustomServerTrustPoliceManager()\n)\n```\nAnd then add it to your provider:\nswift\nlet MoyaNewsCarProvider = MoyaProvider<MoyaNewsCar>(endpointClosure: endpointClosure , manager: manager, plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)])\nAnd don't forget to set Allow Arbitrary Loads = YES in Info.plist.\nPlease let me know if you have further questions!. Hey @xumoyan. Thanks for the issue! However, this is a duplicate of #1189. Please see it as there is more info about this and current workaround. Basically you created a Swift 4.0 project, and we currently do not support it. You need to change Swift version of Moya to 3.2, or wait for 9.0 release (after #1193 merges).\nLet me know if it resolves your problem :). Nice one, @yangcaimu! Would you be able to remove these from Tests as well? Would be awesome :). Hey @edopelawi. Thank you for your really well written description of the issue! Glad you figured this out. \ud83d\ude09 . Hey @i-schuetz. Thank you for writing a complete guide how to fix the issue you encountered! :D This surely will help people with similar problems in the future, so again thank you for doing this.. I've opened #1212 that should solve this one.. This is covered by #1256. Closing this one, thanks for the list, @SD10! \ud83d\udc4d . Hey @swordjoy. The code you posted is good for multipart uploading. If you want to add text to it, you should add it to the multipart data as well. For instance, if you wanted to add width parameter to the request, you would do:\nswift\nmutDatas.append(MultipartFormData(provider: .data(\"100\".data(using: .utf8)!), name: \"width\"))\nLet me know if it resolves your issue or if you have some more questions around this topic :). Huh, just before your post haha \ud83d\ude04. Thank you for the CR, @pedrovereza! \u2764\ufe0f . Hmm, are you sure that it works for both @AndrewSB? I don't see it in code, but I might be missing something.. Oh, you are right. Maybe we will get something better in the future, doesn't seem too clean to me as well. \nNonetheless, thanks for the CR, @AndrewSB \u2764\ufe0f . We've changed Xcode on CI from 8.3.3 to 9.0.0 and the there is still cache built with 8.3.3. I re-triggered your build without cache, @SD10, and it seems fine :)\nAbout the PR - looks really nice! We don't really default to anything - if you don't implement the protocol and do not specify what AuthorizationType you need, you won't get any headers added. This is a breaking change, yes, but in different way. People now do not decide whether they want authorization or not, but rather if they want authorization, they need to specify which one.. \ud83d\udc4d Code-wise seems good to me :). Yeah, I feel like we should add something to the MigrationGuide, especially if we have this file already created. I didn't closely check the PR, but from the brief overview it looks great \ud83d\udc4d \nAlso, now that I think about it, we should add few lines about migrating to new reactive APIs, but thats another issue. . No problem, @SD10 \ud83d\udc4d Is this PR still WIP? If you feel like this is ready for a review, we can remove the prefix so people can chime in :)\nAbout migration guide and reactive providers - you are correct. We should stop using reactive providers and use rx and reactive namespaces instead. We could also point to this PR from Ash in Eidolon, that covers migration from subclassing to composition. . No problem, thanks to you for testing 9.0.0-dev on Carthage so we have a feedback and we can fix bugs faster \ud83d\ude47 \nAlso, gonna close it in favor of #1218 then.. Hey @nhantrivinh! I can't remember if I saw a full example out there, so I'm gonna try to give it here. Basically you need to pass parameters only in MultipartFormData of a task property (if these aren't url parameters). \nFor instance, if you want to pass gif data and description parameter, you would combine these like:\nswift\nlet gifData = MultipartFormData(provider: .data(data), name: \"file\", fileName: \"gif.gif\", mimeType: \"image/gif\")\nlet description = MultipartFormData(provider: .data(\"description of a gif\".data(using: .utf8)!), name: \"description\")\nlet multipartData = [gifData, imageWidthData]\nNow, you would just wrap it in the task property, like:\n```swift\nextension Giphy: TargetType {\n    public var task: Task {\n        switch self {\n        case let .upload(data):\n            let gifData = MultipartFormData(provider: .data(data), name: \"file\", fileName: \"gif.gif\", mimeType: \"image/gif\")\n            let description = MultipartFormData(provider: .data(\"description of a gif\".data(using: .utf8)!), name: \"description\")\n            let multipartData = [gifData, imageWidthData]\n            return .upload(.multipart(multipartData))\n        }\n    }\n}\n```\nFor Moya 9 the return type would be a little bit different (as the API is more verbose now):\nswift\nreturn uploadMultipart(multipartData)\nAnd that new API we would like to have in our docs. \nHope it helps! . This is covered by #1255.. I believe so! If there is a way of improving/fixing the error on SPM, that's on their side now I think. We can always reopen in case something happens. Thanks everyone for helping out! \ud83d\udc4f . It would be awesome. TL;DR we found the issue (having tag and branch with the same name, removing branch helped). If there is something SPM could do to fix the issue or improve error handling, it would be great \ud83d\ude09 . @danwey do you use swift4.0 branch of RxSwift in your Podfile?. I'm not sure I understand you correctly, @danwey, but if you still want to use Swift 4.0 version of Moya and RxSwift, you should use our 9.0.0-dev branch and RxSwift's swift4.0 branch:\nrb\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '9.0.0-dev'\npod 'RxSwift', :git => 'https://github.com/ReactiveX/RxSwift.git', :branch => 'swift4.0'\nPlease keep in mind that these are both prerelease branches and might expect difficulties/bugs.. Clearing cache is not something I would pursue, since building dependencies each time might be too painful. I'm thinking if this is a temporary problem, since on master we have this old cache with 3.1, and on 9.0.0-dev we have new cache with 3.2. Maybe new PRs are getting cache from master and that's the problem? \ud83e\udd14 . Yeah, let's just wait that out until we merge it for next version (which should be a lot faster than one month \ud83d\ude04). Hey @neoD1, thanks for the issue. I guess you are right - we cannot support Swift 4.0 with RxSwift and Moya 9.0. This is because we probably gonna release it before Swift 4.0 and RxSwift 4, and after the new releases we will update our extensions. \nRight now we offer Moya core working with Swift 4.0 (on branch 9.0.0-dev for a while yet) or Moya with Swift 3.2 that should work correctly with RxSwift 3.3+. Sorry for the inconvenience! \nIf you have any more questions, let me know.. Hey guys, @aninhakrieger, @linbx08, @neoD1! Just a heads-up that today we are planning to release version 9.0.0 and immediately after we will start with development branch for 10.0.0, which will include support for Swift 4.0 and reactive extensions. We will update this issue once we get something working. . Hey again, @aninhakrieger, @linbx08, @neoD1! I've created a branch that is fully Swift 4.0.0-compatible! Branch name: 10.0.0-dev (more info and CocoaPods install steps at #1253). Let me know if it's working for you :). @phimage Nah, not needed, thank you very much for this PR! \ud83c\udf89 . Hey @JeanVinge, thanks for the issue!\nThis is actually how multipart file uploads are encoded (details here). And even if it weren't, we can't change it really as Alamofire (our dependency for doing network requests) does it for us here - just before sending the upload request and after our request setup (thus changing the request in Moya won't do anything).\nLet me know if you have more questions around this topic!\nEdit: Closing this one, but please don't hesitate to reopen in case you have more questions.. PR looks good, thanks @karthikdash! You also did it to 9.0.0-dev branch, that's awesome too! \ud83c\udf89 \nHowever, I'm not sure whether it resolves the issue. From the conversation in the issues referenced I'm not sure what the Carthage installation step should look like. I guess that it was connected to Moya/Reactive extensions versions? \ud83e\udd14 Could you make a short description/todo-list in the issue, @BasThomas? . Update: AppleTV with iOS 11 simulator probably won't be available in this beta for us, maybe we will get iOS 10.2 instead, I will remove AppleTV for now from Rake since we need tests working, when new simulator is added I will add it back.. Update: With Xcode 9 GM, Apple TV simulators are back (with 4k support of course). Already fixing this one, gonna make a PR soon!. Hey @BasThomas, how are we with the updates? \ud83d\ude09 . This is good, thanks, @BasThomas! What we should do next, I think, is that we should check whether 3.* is true for all 3.0 Swift versions that we have in this table. So I've imagined that if there is a problem with 3.0, we would have 2 rows: one for 3.0 (with Moya versions that are working for Swift 3.0) and one for 3.1-3.2 Swift (with Moya versions that work for Swift 3.1-3.2). Does it make sense? . Oh, I was pretty sure that there was some issue that not all version were working correctly. So maybe let's just double check if it works? Will you have time to do that maybe, @BasThomas?. I'm currently using Xcode 8.2.1 for 2.3 project, but it has probably 3.0.2 Swift and I can use 3.1.1 Swift toolchain there as well. On the other hand 3.2 & 4.0 Swift can be checked on Xcode 9.0 beta I think. This is unfortunately time consuming and I'm not sure when/if I can do it, so maybe someone with more free time could pick this one, @Moya/contributors?. FYI, I removed the milestone as the 9.0.0 is released already. We should try to get it merged ASAP, though!\nEdit: Damn, GitHub did let me remove the 9.0.0-dev branch while PRs were targeted to it still.. Just a friendly reminder, that we still need a volunteer to help out with this one! cc @Moya/contributors . Alright, I think we don't have to wait for this one until someone does the check. For now, we can just mention whatever we have figured out now: 4.0 is supported for Moya/Core & Moya/ReactiveSwift. Moya/RxSwift will be covered in Moya 10.0.\nSo, would you add the info in the ReactiveSwift column, @BasThomas? (the same as in the Moya/Core, >= 9.0.0). Also, I'm thinking that we don't need to remove Swift 2 row at all, maybe someone somewhere will need this info, it doesn't hurt to have it on.\nWe should make an issue then to check Swift version vs Moya version for Moya 8 and Swift 3.*. If you are at it, can you bring back the Swift 2 row as well, @pedrovereza? \ud83d\ude04 . Cool, thanks @pedrovereza & @BasThomas! Let's get this one in :). Hey @BasThomas. Not sure, but does migrating to new SPM API means that we will drop Xcode 8/Swift 3.1 support? If yes, we probably need to postpone it to 10.0 release.. Hmm, it seems like we would have to specify swift-tools-version:<specifier>, which probably will be 4.0, and someone who is working on Xcode 8 could be missing Swift 4.0 tools. Also, I wasn't sure what is this swift-tools-version parameters, but swift.org got me covered:\n\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n. Yup, I think it its, @josefdolezal! PR should be up for grabs \ud83d\ude09 . That's actually fixed already, so I'm closing this one.. Hey @phimage, just checking out if everything's fine. Let me know if you have time to split this one into two tests and simplify logic a little bit. If not we can just revisit it in the future, no problem with that \ud83d\udc4d . Hey @gumnym, thanks for the issue. However, this one is rather a Mapper problem, see this one here: Mapper#105 (probably null in your JSON payload). You can bump this issue so the creators of Mapper know that this is still a valid problem.\n\nI'm gonna close this one, but if there is something else to it please don't hesitate to reopen it again \ud83d\udc4d . Thanks, @larryonoff! If you find something strange in the newest beta don't hesitate to open an issue/PR so we can fix it before official release :). @Legoless this is a great idea. In fact, I think we should remove all default parameters from Endpoint.init as all of them might get confusing. Would you be up for a PR maybe? :)\nIt will be a breaking change, but I think this is for a good cause.. @Legoless this is a great idea. In fact, I think we should remove all default parameters from Endpoint.init as all of them might get confusing. Would you be up for a PR maybe? :)\nIt will be a breaking change, but I think this is for a good cause.. @SD10 seems like it would be quite helpful! If you have some free time to research this one I think it would be a great update of our error handling \ud83d\udc4d . This is really cool, but I feel like this could be something we think about for version 10.0. We need to release 9.0 in a few. What do you think about it, @SD10?. Damn, GitHub did let me remove the 9.0.0-dev branch while PRs were targeted to it still. Reopening! . Hey @SD10, would you be up for finishing that one? Conflicts + Docs + Changelog is there to finish I believe? Other than that I think this looks good!. Great! Take your time \ud83d\udc4d . @SD10 would you please rebase & fix the conflicts? I've merged few other PRs in the meantime. . I was rebasing 10.0.0-dev again as we had documentation changes, so I rebased this one as well. Sorry for trouble.. Great! Thanks for all your hard work on that one, @SD10 \ud83d\ude09 . This is cool, thanks @SD10! Did you also check Demo project/Docs if it needs updating anywhere?. No worries! We have 2 projects right now that we have to check whenever developing stuff so it happens often, to me as well. We should take care of consolidating them (#891) in the near future so it is easier for us.. No worries! We have 2 projects right now that we have to check whenever developing stuff so it happens often, to me as well. We should take care of consolidating them (#891) in the near future so it is easier for us.. Hmm, I thought about it for a while and I don't think there is time for another breaking change. What we can do is to remove default parameter from the task property and release it as a patch. This way we won't have a breaking change. Just need to confirm docs/tests/demo, but I believe not much (if any) will have to be changed. We can think about the the rest parameters in 10.0. \nWhat do you think, @SD10?. Hmm, I thought about it for a while and I don't think there is time for another breaking change. What we can do is to remove default parameter from the task property and release it as a patch. This way we won't have a breaking change. Just need to confirm docs/tests/demo, but I believe not much (if any) will have to be changed. We can think about the the rest parameters in 10.0. \nWhat do you think, @SD10?. First of all we would have to do some checks, then break semver and in the end probably test it a bit more. Having removed only task default property probably will be an easier one for 9.0.0 and we could follow this up in 10.0. I think we just need to release 9.0 in a few, because we will need to focus on Swift 4 support for reactive extensions \ud83d\ude1e . First of all we would have to do some checks, then break semver and in the end probably test it a bit more. Having removed only task default property probably will be an easier one for 9.0.0 and we could follow this up in 10.0. I think we just need to release 9.0 in a few, because we will need to focus on Swift 4 support for reactive extensions \ud83d\ude1e . Hey @zallanx, thanks for the issue and sorry for the wait. It just happened for another user so we should priority this one a little more. Would you be able to report your environment for this one? Moya version, Swift version, Reactive  extensions if any. Also the Moya setup if possible - especially setting up the provider. . Hey @zallanx, thanks for the issue and sorry for the wait. It just happened for another user so we should priority this one a little more. Would you be able to report your environment for this one? Moya version, Swift version, Reactive  extensions if any. Also the Moya setup if possible - especially setting up the provider. . Hey @apollow. This is a good question. There is no out-of-the-box solution yet (but there is potential for a library). However, I did a demo some time ago to show how to easily save stubs and use them using Moya (and few more), here. This one is kinda old (both Swift/Moya), so you would have to update the syntax, but the idea is there. \nHope it helps!. Hey @apollow. This is a good question. There is no out-of-the-box solution yet (but there is potential for a library). However, I did a demo some time ago to show how to easily save stubs and use them using Moya (and few more), here. This one is kinda old (both Swift/Moya), so you would have to update the syntax, but the idea is there. \nHope it helps!. Sure! This list is rather something we could potentially do, so few of them might not get into the list of features in 10.0. I agree that we should release the next version around the time Swift 4.0 comes out officially.. Sure! This list is rather something we could potentially do, so few of them might not get into the list of features in 10.0. I agree that we should release the next version around the time Swift 4.0 comes out officially.. Hey all, I've also created a branch that is completely Swift 4.0.0-compatible! Branch name is 10.0.0-dev. So install step for CocoaPods would be one of the following:\n```rbi\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\nor\npod 'Moya/ReactiveSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\n. Hey all, I've also created a branch that is completely Swift 4.0.0-compatible! Branch name is `10.0.0-dev`. So install step for CocoaPods would be one of the following:rbi\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\nor\npod 'Moya/ReactiveSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\n``. Hey all! I'm thinking that after Decodable/Encodable extensions and removing deprecated methods we could release a beta. I'm not sure we can get the sample data refactor in the 10.0 as I know @SD10 had some troubles with that one and it might be a lot bigger than expected. What do you guys think?. Hey all! I'm thinking that after Decodable/Encodable extensions and removing deprecated methods we could release a beta. I'm not sure we can get the sample data refactor in the 10.0 as I know @SD10 had some troubles with that one and it might be a lot bigger than expected. What do you guys think?. @SD10 there were some troubles, but the PR is there: #1349. I found a way to make the API call a little more user-friendly without casting toAnyEncodableand it seems to be working fine. After that one we are ready to \ud83d\udea2 beta version! \ud83c\udf89 . @SD10 there were some troubles, but the PR is there: #1349. I found a way to make the API call a little more user-friendly without casting toAnyEncodableand it seems to be working fine. After that one we are ready to \ud83d\udea2 beta version! \ud83c\udf89 . Alrighty! Today, after #1349 & #1350 are merged, we should aim for releasing 10.0.0-beta.1! . Alrighty! Today, after #1349 & #1350 are merged, we should aim for releasing 10.0.0-beta.1! . 10.0.0-beta.1 released! \ud83c\udf89 Just before the release RxSwift4.0.0-rc.0came out, so I've updated all package managers to cover it as well. Thus, to useMoya/RxSwiftyou need4.0.0-rc.0version ofRxSwift` as well. For CocoaPods, it means:\nruby\npod 'RxSwift', '4.0.0-rc.0'\npod 'Moya/RxSwift', '10.0.0-beta.1'. 10.0.0-beta.1 released! \ud83c\udf89 Just before the release RxSwift 4.0.0-rc.0 came out, so I've updated all package managers to cover it as well. Thus, to use Moya/RxSwift you need 4.0.0-rc.0 version of RxSwift as well. For CocoaPods, it means:\nruby\npod 'RxSwift', '4.0.0-rc.0'\npod 'Moya/RxSwift', '10.0.0-beta.1'. Fix bugs if there are any! \ud83d\ude04 But other than that we are good to go @BasThomas :). Fix bugs if there are any! \ud83d\ude04 But other than that we are good to go @BasThomas :). Okay guys, the bug fix is there, I'm gonna try to push a release in the next few hours or so \ud83d\ude09 . Moya 10.0.0 released! You can see the release here. Big \u2764\ufe0f to everyone involved:\n@devxoul @SD10 @LeLuckyVint @afonsograca @AndrewSB @BasThomas @pedrovereza @sunshinejr (sorry if I forgot someone)\n\ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \nI'm closing this one, but for every problem/question about 10.0.0 let's just create new issue \ud83d\ude09 . Could someone review it today, @Moya/contributors? Would be awesome that we'd have it on the release as we've changed the existing behavior a bit.. Could someone review it today, @Moya/contributors? Would be awesome that we'd have it on the release as we've changed the existing behavior a bit.. I've updated the document with improvements you suggested, @freak4pc @SD10. Let me know if there is still something we can improve or merge it instead \ud83d\ude04 . I've updated the document with improvements you suggested, @freak4pc @SD10. Let me know if there is still something we can improve or merge it instead \ud83d\ude04 . Thank you so much guys, it was really a quick one! \ud83d\udc4f . Thank you so much guys, it was really a quick one! \ud83d\udc4f . Thanks guys \u2764\ufe0f . Thanks guys \u2764\ufe0f . Awesome! Keep us updated :). Awesome! Keep us updated :). Thanks for the links, @orta! Yeah, seems like we could adopt http://keepachangelog.com/ fully (I actually copied some of the rules from that website \ud83d\ude04). Additionally, I would really like to use both PR number and GitHub tag in the entry (which I've not seen on there). \nI'm also thinking if/how should we document that one. Maybe in our contributors repo? \ud83e\udd14 . Thanks for the links, @orta! Yeah, seems like we could adopt http://keepachangelog.com/ fully (I actually copied some of the rules from that website \ud83d\ude04). Additionally, I would really like to use both PR number and GitHub tag in the entry (which I've not seen on there). \nI'm also thinking if/how should we document that one. Maybe in our contributors repo? \ud83e\udd14 . Does anyone else have any opinion on that one, @Moya/contributors? . Does anyone else have any opinion on that one, @Moya/contributors? . Alright, I've made a PR so we can discuss the details further there - see Moya/contributors#16. Closing this one for now!. Alright, I've made a PR so we can discuss the details further there - see Moya/contributors#16. Closing this one for now!. Oh, seems like we have a missing switch in the documentation, nice catch @arjunnaha! Would you be up for fixing that one in a PR? \ud83d\ude04 . Oh, seems like we have a missing switch in the documentation, nice catch @arjunnaha! Would you be up for fixing that one in a PR? \ud83d\ude04 . Oh, and to answer the question, @arjunnaha: yes, you can just return .basic if you are using Basic everywhere, no need for a switch then \ud83d\udc4d . Oh, and to answer the question, @arjunnaha: yes, you can just return .basic if you are using Basic everywhere, no need for a switch then \ud83d\udc4d . Hey @josefdolezal, just checking out if everything's fine. Let me know if there is something I can do to help with this one.. Hey @josefdolezal, just checking out if everything's fine. Let me know if there is something I can do to help with this one.. Hey @josefdolezal, just checking out if everything's fine. Let me know if there is something I can do to help with this one.. @josefdolezal I'm not sure either, unfortuntely. We will have to investigate that one.. @josefdolezal I'm not sure either, unfortuntely. We will have to investigate that one.. @josefdolezal I'm not sure either, unfortuntely. We will have to investigate that one.. I think this can be closed, but if you still have any questions about this one @ICCanche, let us know! . I think this can be closed, but if you still have any questions about this one @ICCanche, let us know! . I'm closing this one in favor of #1283 as we discuss the issue further there.. I'm closing this one in favor of #1283 as we discuss the issue further there.. Hey @maross. You'll need to build Carthage modules now. Basically you can go into the directory in terminal and run:\ncarthage update --platform iOS\nWe will need to update our docs to reflect the changes we did in latest version, though. Would you be up for the PR, @maross?. Hey @maross. You'll need to build Carthage modules now. Basically you can go into the directory in terminal and run:\ncarthage update --platform iOS\nWe will need to update our docs to reflect the changes we did in latest version, though. Would you be up for the PR, @maross?. Not sure because CocoaPods creates its own workspace etc. Right now we are doing it with Carthage, but we might want to switch to SPM once we get swift test done (also Harvey working copy).. Not sure because CocoaPods creates its own workspace etc. Right now we are doing it with Carthage, but we might want to switch to SPM once we get swift test done (also Harvey working copy).. Hey @dotprox, thank you so much for your work here! We really appreciate the time you have given to support Moya. However, seems like we have a problem with how do we want to implement this one. @SD10 created an issue to discuss it - see #1283. We would love to get your feedback on it.\nFor now I will close this PR, though.. Note: I've added one option (4.) which is another version of option 3. \nFirst of all thanks @SD10 for writing this up! \ud83d\udc4f What I think that we need to do is to agree on what we want to achieve. By gathering info from the discussion, right now we need (feel free to correct me if I'm wrong):\n1. Availability to add basic/bearer token in headers\n1. Availability to add basic/bearer token in parameters\n1. Availability to not adding token (when plugin is on)\n1. Availability to mix all of these in one TargetType implementation\n1. Availability to change name of the header/parameter - now I'm not sure if we can achieve this on a flexible enough level, so we may just start with making the name global for the plugin (which is probably the most popular use-case)\n1. Easy to use (e.g. typing the name of the parameter/header in each TargetType might be cumbersome)\nIf these are correct, we can make a quick rundown and check which option meets the criteria and if there are more than one, add additional criteria or see pros/cons.\nEdit: I've also added the new label - discussion - as I've felt we were lacking this one and it fits here and with sample data perfectly for me. Let me know if we should reconsider that, though!. @SD10 looking back at your comment right now, I'm not sure if we want to support sending both token in parameters and in headers in one request. In comparison, I would love to use token in headers and token in parameters in two endpoints, using one plugin, though.. @ffittschen Thank you so much for the detailed answer! You make very good points and I agree with most of them. From yours and @SD10's feedback I've came with an improved idea:\n```swift\nenum AuthorizationType {\n    case basic\n    case bearer\n    case custom(prefix: String)\nvar prefix: String {\n    switch self {\n        case .bearer: return \"Bearer\"\n        case .basic: return \"Authorization\"\n        case let .custom(prefix): return prefix\n    }\n}\n\n}\nenum AuthorizationTypePlacement {\n    case header\n    case parameter\n}\npublic protocol AccessTokenAuthorizable {\n    var authorizationType: (AuthorizationType, AuthorizationTypePlacemenet)? { get }\n}\n```\nThis one allows Bearer/Basic authorization, custom prefix in case you need one, headers/parameters placement and opting in/out of the plugin depending on the endpoint.\nThe authorizationType is an optional tuple of two types, because if you don't need authorization for an endpoint, you will return .none, but if you want an authorization, you need to pass both type and placement. We could do a typealias for authorizationType, but ran short on names \ud83d\ude04\nI'd love to get your feedback on that one \ud83d\udc4d . I'm gonna work on this one in the next week as Moya 11 should be released ASAP (ReactiveSwift guys probably want to play with a new toy \ud83d\ude09). @SD10 I agree \ud83d\udc4d. Sure thing, thanks @Sherlouk! (seems like I can't assign outside of the org, but everyone sees it so I think it's okay anyways \ud83d\ude04). @yeskunall you can check #1339 as there should be a working script that does that.. Thanks, @petester42!. @SD10 maybe, do not remember honestly \ud83d\ude04 I was selecting tasks from 10.0.0 release that I can do on the train and these two PRs were easy to do so.. Yup, should work just fine \ud83d\udc4d . Thank you so much for doing this, @AndrewSB! I will try to check that one a bit later, but seems like we need to update the Demo building script as well, as CI is failing.. @AndrewSB Oh, seems like you mistyped Moya.xcworkspace instead of Moya.xcodeproj. We would also need to change the build command to use project instead of workspace.. Hmm, any idea why the build is failing now? Maybe copy-frameworks from Carthage is needed?. @AndrewSB I think I resolved the failing build. First, our example GithubAPI wasn't updated to Moya 9. Second, framework search paths needed to be added. And the last one was importing Result & Alamofire in GithubAPI.swift as well. I don't understand why we have to import Alamofire when we just use our own type-aliased ParameterEncoding. And Result as well. Do we have to import these in a CocoaPods project? \ud83e\udd14 . Alright, it has been built and it's green! It should be ready for review. cc @petester42 @ashfurrow @pedrovereza @SD10 @BasThomas and all @Moya/contributors that want to help. This one is very important for newcomers as they might be confused as to what to do when developing a new feature/fix.. @BasThomas are you up for removing these indents? Seems like the last one for merge :) (we can add linting afterwards). Thanks so much everyone! \u2764\ufe0f . @AndrewSB yeah, good idea, if you have some spare time you can go for it :) . Hey guys. Thanks for reporting the issue. Would you please describe more your environment? Moya version, Swift version, RxSwift version? I see that you did not specify your library version in the Podfile, @wz1383691, so can you please copy the Podfile.lock info?. @wz1383691 thanks for the details! It seems like this might be connected to #1250 and we should investigate it more. I personally didn't encounter this crash, but I'm not sure any of my releases had Moya 8.0.5 in it. \nCould you also copy the code for NetWorkLog and NetWorkLoading plugins, please?. @wz1383691 Thank you so much! I will try to investigate it more when I have time. But it might be something connected to plugins - you can try a quick fix to remove these and try to push a release if these are not that important.. I believe we always guided to retain the provider to get the correct behavior. We will need to investigate why there is no response for a Single extension, though - there should be at least an error. Also we should check the consistency across both RxSwift request methods as well as both ReactiveSwift methods.. @AndrewSB I agree in the terms of Rx, but the Single type is either a value or a failure, so if there is no value in it we can't really complete because there is no such event for this trait. From docs:\n\nA Single is a variation of Observable that, instead of emitting a series of elements, is always guaranteed to emit either a single element or an error.\n\nThis makes me think that implementing an error there might be the right thing to do to not break the contract. What do you think?. Alright, seems like they fixed our project already. Gonna close this issue for now.. Hey @Sadmansamee. Please take a look at this example. It covers multipart upload - image and description. If this is not what you wanted/you have more questions about it, please let me know!. Hey @adimango. Can you try if importing Result resolves the issue?. Hey @Nikolaev, this one is tricky. Because we don't really provide a way of doing that in our core. It seems like your only chance would be to subclass SessionManager and override multipart upload function, as the content-type is set right before the request, here. Then you would have to pass your own manager as a parameter to MoyaProvider.\nHowever, there is another way. If you can find something different than content-type header to depend on, you could create your endpointClosure or requestClosure to handle it. Maybe you can switch on Task type in endpointClosure to detect if it's a multipart upload?\nLooking forward to hear about your choice in this one!. Because I had to rebase 10.0.0-dev, I resolved conflicts here as well. But then I figured that we probably don't want this merge and rebase would be more preferable. Would you be able to remove my merge commit and rebase this one, @devxoul? Sorry for the trouble.. Thanks again, @devxoul! \ud83c\udf89 . @msalman I didn't try the feature yet, but Artsy's eigen is already moved to static libraries, see artsy/eigen#2561, maybe it will help.. Hey @wassimseif. This is a good question.\nFirst of all, our URLEncoding is just a typealias on Alamofire's URLEncoding. Thus, these are the same in terms of encoding the parameters. \nWhat you see on Charles is actually interpreted by Content-Type header. The data you send is in fact the same, but the way we/server interpret it depends on Content-Type itself. \nNow to the encoding part: because you have your own Content-Type already in the header fields when we encode the request, Alamofire's URLEncoding won't add the Content-Type they usually do for this type of encoding, which is application/x-www-form-urlencoded (more on this matter here). This results in your data being formatted for URLEncoding where your Content-Type says that you encoded it for JSON = your endpoint can't resolve it correctly.\nPlease let me know if it is clear for you or you have any more questions around this topic. Cheers!. @volodg this PR focus rather on inconsistency than on fixing the Single behavior - let's focus at one thing at a time. @AndrewSB I think there is only a Changelog fix left to merge \ud83d\udc4d . Sure thing \ud83d\udc4d . @AndrewSB I don't see any changes to the Changelog \ud83e\udd14 What I'm talking about is that comment about making it in the separate column Fixed, instead of having it in Changed.. I went ahead and fixed the Changelog. It should be good to go now. Please re-review @Moya/contributors.. @SD10 thank you! . @SD10 We changed the tests as well, I don't see where is RxMoyaProvider used in tests, but if it is, we should change it. I left some tests for ReactiveSwiftMoyaProvider because there were some specific tests with subclassing that could be still valuable before we remove reactive providers.\nBut, indeed, I found one place when we have ReactiveSwiftMoyaProvider where we probably don't need to. \n. That\u2019s correct, we can add it to the 10.0 list, so it is more verbose for everyone.. Sure, go ahead @SD10!\n\nRight, seems like these are the same.\nCurrently we don't have a replacement easy to build, one of the ways should be subclassing the MoyaProvider as you've said. We were hoping that if the request for this feature is big, we would come up with something easier, but seems like it is not \ud83d\ude04 . @SD10 if you are working on that, could you change the name of MoyaProviderRx class in tests to MoyaProviderRxSpec as it is for the rest of specs (really bugs me off but I don't want to overlap your work)?. Good idea, maybe we can link to the Changelog guide in there as well? . Thank you for this one, @adimango! The app seems really cool \ud83d\ude09 . Makes sense @petester42. Alright, merging this one then!. I feel ya. Although with your recent findings I believe we can close this one for now? Might be cool to revisit it once we get to plugins revamp :). Cool! Will take care of that.. Hey @WeiRujian! You are probably mismatching types between Alamofire and Moya. Our implementation doesn't allow to initialize without parameters. Generally you do not want to import Alamofire as Moya's purpose is to avoid crossing network abstraction layers. \n\nRemoving the import could help Xcode guide you to the answer. Fixed code would look similar to the one below:\n```swift\ncase .uploadImage(let imgArr):\nlet formatter = DateFormatter()\nformatter.dateFormat = \"yyyMMddHHmmss\"\nvar multipartFormData = Moya.MultipartFormData\nfor index in 0..<imgArr.count {\n    // \u8bbe\u7f6e\u65f6\u95f4\u4e3a\u6587\u4ef6\u540d\n    let strNowTome = formatter.string(from: Date())\n    let img = imgArr[index]\n    let imgData = UIImageJPEGRepresentation(img, 1.0)\n    let imageMultipartFormData = Moya.MultipartFormData(provider: imgData!, name: strNowTome+String(index), fileName: strNowTome+String(index)+\".png\", mimeType: \"image/png\")\n    multipartFormData.append(imageMultipartFormData)\n}\nprint(multipartFormData)\nreturn .uploadMultipart(multipartFormData)\n```\nLet me know if it helped \ud83d\ude09 . @SD10 oh, let's just fix these linting issues then and we can do the refactor in another PR, no worries!. Hey @lovesomeone. Thank you so much for this PR. This is a great amount of work and we really appreciate that! \ud83d\udc4f \nHowever, I'm not sure that this translation belongs here. The amount of work we would have to do to maintain both documentations is quite big (especially if you look at how many open documentation issues are there, meaning there are not many people that want to take care of that).\nI suggest that you can create your repository with Moya documentation in Chinese and we will point to that from our Readme. What do you think?\nAlso, I'm interested in other @Moya/contributors opinion.. Okay, okay. Maybe my first take on this one was a bit premature - Chinese docs being a little bit behind  might not be a big problem if we state so. Let's just take a look at the content there and merge it if it's ready then \ud83d\udc4d . Hm, I don't have anything like that in my list anymore apart from SPM testing that I'm taking care off. There are also tasks like website, playgrounds etc that are almost stale now, but not sure if these are easy starter tasks \ud83d\ude1e . @Sherlouk I've labeled it with [WIP] - please remove it once it is ready for review \ud83d\ude09 . @marcomorain That's correct, but new contributors might not know the rule and we are trying to automate the process without additional steps if possible.. @pedrovereza is probably right. If you want more info about CircleCI 2.0 with Moya see #1194. I have already made some progress and will try if skipping the job will be easier to do there.. Good idea @Sherlouk. Sorry for the trouble and thanks for doing this! I'll make a PR with my WIP branch to see how it works!. Right, how the hell did I think of htmlBody I'm not sure \ud83d\ude25 . Not sure why I had to close it manually as the PR had Resolves #1325 keyword, but yeah, it is already in beta so closing this one!. Hey @LeLuckyVint, thanks for getting this one up! There are few more things before we can merge, though:\n- [ ] Handling transformation from endpoint to urlRequest here\n- [ ] Handling performing the request here\n- [ ] Adding a test case around here\n- [ ] Adding a changelog entry (you can checkout our guidelines here)\n- [ ] At the end check if we do not have any issues with SwiftLint\nThe behavior of requestJsonEncodable vs requestData is very similar, so you can try to base your implementation on that one. If you'll need help in anything, we'll be happy to assist! . Oh yeah, this is the tricky one @LeLuckyVint. I believe we would have to think about this - the problem is that we can't use Encodable and generic in the case. One solution that comes to my mind is making a type eraser on it. Maybe you have any other idea how to fix that one, @LeLuckyVint?. Hey @LeLuckyVint. Thank you so much for this one! Unfortunately there were still few things to do before this would be merged. And because we want to release new version pretty soon, I finished it while giving credits to you and @afonsograca that also did a similar PR. I would love it if you could review my PR #1349 and let me know what do you think!\nOh, and I invited you to the organization as well! :). Hey @xiaoyaogaojian! I think we don't need to remove this one, we didn't implement Encodable/Decodable yet so people might wanna use your extensions in the meantime. \nI'll close this PR right now, but we can go back to it once we have everything done. Once again thank you for your time and involvement in this topic, we really appreciate that! \u2764\ufe0f Also, no worries about not being the best code-wise, we all learn everyday! And in Moya community we are really supportive so you don't have to be shy when it comes to PRs - we will try to help you in everything we can. . Hey @AYastrebov. Thanks for the PR! However, we were thinking rather about improving our documentation here. We don't really have an implementation of MultiTargetProvider in there and that's what we were trying to fix.\nThe PR is really good in the matter of updating the example, but we'll still need to update the documentation as well. Would you be up for doing it? \ud83d\ude09 \nOh, and would you fix the linting errors, please? If you'd need a help in anything, let us know!. Sure, thanks for doing this, @AYastrebov! You'll need to rebase as few PRs were merged in the meantime.. Hey @narlei. Thanks for doing that! Would you be up for making a PR that adds this one to the CommunityProjects.md? Here is an example of how could it look like.. Hey @narlei. Thanks for doing that! Would you be up for making a PR that adds this one to the CommunityProjects.md? Here is an example of how could it look like.. Closed by #1332.. Closed by #1332.. Hey @ondev. We have a branch 10.0.0-dev that works with newest RxSwift. You just need to keep in mind that this is our development branch and you shouldn't rely on it in the production code. We plan to release 10.0.0-beta in a near future, just few things left. You can track the progress at #1253.\nIf you use CocoaPods you can use these lines to use RxSwift & Moya with Swift 4:\nruby\npod 'RxSwift', '4.0.0-beta.1'\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\nIf you want a stable production version, you can use Moya in Swift 3.2 with your codebase being 4.0 - see this tweet for instructions.\nLet me know if you have more questions around this topic!. Hey @ondev. We have a branch 10.0.0-dev that works with newest RxSwift. You just need to keep in mind that this is our development branch and you shouldn't rely on it in the production code. We plan to release 10.0.0-beta in a near future, just few things left. You can track the progress at #1253.\nIf you use CocoaPods you can use these lines to use RxSwift & Moya with Swift 4:\nruby\npod 'RxSwift', '4.0.0-beta.1'\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\nIf you want a stable production version, you can use Moya in Swift 3.2 with your codebase being 4.0 - see this tweet for instructions.\nLet me know if you have more questions around this topic!. Just updating the issue: you can now use Moya with Swift 4.0 and RxSwift 4.0! With RxSwift you can use Moya 9.0.0, but with RxSwift you need Moya 10.0.0 (which is right now in beta.1 stage). You need RxSwift 4.0.0-rc.0, so for example when you use CocoaPods, you would need lines below to use newest Moya:\nruby\npod 'RxSwift', '4.0.0-rc.0'\npod 'Moya/RxSwift', '10.0.0-beta.1'. Just updating the issue: you can now use Moya with Swift 4.0 and RxSwift 4.0! With RxSwift you can use Moya 9.0.0, but with RxSwift you need Moya 10.0.0 (which is right now in beta.1 stage). You need RxSwift 4.0.0-rc.0, so for example when you use CocoaPods, you would need lines below to use newest Moya:\nruby\npod 'RxSwift', '4.0.0-rc.0'\npod 'Moya/RxSwift', '10.0.0-beta.1'. Thank you so much @devxoul for this one! \ud83c\udf89  I didn't go through all of this yet, but few questions at a first glance:\n- How do you feel about mapping arrays of Decodables?\n- How do you feel about renaming mapObject(_:atKeyPath:using) to map(to:keyPath:decoder)?\n- How do you feel about having default decoder argument?\n. Thank you so much @devxoul for this one! \ud83c\udf89  I didn't go through all of this yet, but few questions at a first glance:\n- How do you feel about mapping arrays of Decodables?\n- How do you feel about renaming mapObject(_:atKeyPath:using) to map(to:keyPath:decoder)?\n- How do you feel about having default decoder argument?\n. @devxoul Definitely, I was talking about decoder but my mind got messed up, sorry!\nI didn't know that [Decodable] is also Decodable - that's awesome! So now the question is for the interface, I don't mind both(or mixture) of them, so maybe let's wait for more inputs :). @devxoul Definitely, I was talking about decoder but my mind got messed up, sorry!\nI didn't know that [Decodable] is also Decodable - that's awesome! So now the question is for the interface, I don't mind both(or mixture) of them, so maybe let's wait for more inputs :). I'm up for mixed strategy as well (for interface naming), which is:\nswift\nfunc map<D: Decodable>(to: D.Type, atKeyPath keyPath: String? = nil, using decoder: JSONDecoder = JSONDecoder()) throws -> D\nSo that will be the last thing before documentation (Changelog + documenting the option itself) \ud83d\udc4d\nOh, and can you also fix linting issues (these that you can without bigger refactor), please?. I'm up for mixed strategy as well (for interface naming), which is:\nswift\nfunc map<D: Decodable>(to: D.Type, atKeyPath keyPath: String? = nil, using decoder: JSONDecoder = JSONDecoder()) throws -> D\nSo that will be the last thing before documentation (Changelog + documenting the option itself) \ud83d\udc4d\nOh, and can you also fix linting issues (these that you can without bigger refactor), please?. \ud83d\udc4d for removing to parameter name\nAbout skipping type parameter - I feel like this would make more issues about compiler problems as you need to explicitly write that type to let compiler infer it. Making it explicit with a parameter removes this problem as people would have to specify it always as a parameter.. \ud83d\udc4d for removing to parameter name\nAbout skipping type parameter - I feel like this would make more issues about compiler problems as you need to explicitly write that type to let compiler infer it. Making it explicit with a parameter removes this problem as people would have to specify it always as a parameter.. Also, I'm sorry again @devxoul but I had to rebase 10.0.0-dev again as we had project changes that were needed on master. You will need to rebase again \ud83d\ude22 . Also, I'm sorry again @devxoul but I had to rebase 10.0.0-dev again as we had project changes that were needed on master. You will need to rebase again \ud83d\ude22 . Yep, working on it!. Yep, working on it!. @devxoul I think it is fixed, please try now. It turned out that we had both on 10.0.0-dev and master changes to pbxproj and automerge kinda broke it \ud83d\ude1e . @devxoul I think it is fixed, please try now. It turned out that we had both on 10.0.0-dev and master changes to pbxproj and automerge kinda broke it \ud83d\ude1e . @devxoul last comments from me!. @devxoul last comments from me!. Oh, Jeon, could you also add entry to Changelog, please?. Oh, Jeon, could you also add entry to Changelog, please?. Thank you again, @devxoul and all contributors in this one! \ud83c\udf89 . Thank you again, @devxoul and all contributors in this one! \ud83c\udf89 . Hey @Zaccc123, thank you very much for this PR! I left you one comment, nothing big. Let me know if it makes sense to you!. Aye, @pedrovereza, I\u2019ll do that after I got it working, just need a playground that i can test, thus why WIP PR.. @AndrewSB basically right now it doesn't really matter, I use it as a playground to test everything (especially PRs), but you are right - we would do it in master and 10.0.0-dev both. About he commits - are showing as I didn't rebase to current 10.0.0 yet.. Oh, no worries @AndrewSB, I did it once as well \ud83d\ude05 I agree that there should be a warning before deleting the branch that targets multiple PRs. Also I need to start working again on this one, been a long time.. @AndrewSB to answer your questions:\n1. It did came up before that we could have SwiftLint build phase, but it is not that easy to do as we have to be careful for Carthage users. I remember when I used Carthage with Quick that they had problems because SwiftLint was running on the whole project, instead of their own library. Of course that does not mean we cannot implement it - just be careful with it.\n2. About progress: before we assign normal alamoRequest to progressRequest, in case of given progressCompletion we just replace alamoRequest with request with progress for given types (namely: DataRequest, UploadRequest, DownloadRequest). We don't do anything for other cases (right now the other case is probably StreamRequest because it doesn't have progress in it).. Hey @SeRG1k17. You can download images with Moya, both to a disk (Task.downloadDestination or Task.downloadParameters if you need parameters in the Task) and not (using all Task.request* cases). If you just want to fetch the image without downloading... we provide mappers! Response.mapImage() function should be helpful in this one:\nswift\nprovider.request(.downloadImage) { result in\n    switch result {\n        case let .success(response):\n            let image = try? response.mapImage()\n        ...\n    }\n}\nLet me know if this resolves your issue \ud83d\ude09 . Hey @SeRG1k17. You can download images with Moya, both to a disk (Task.downloadDestination or Task.downloadParameters if you need parameters in the Task) and not (using all Task.request* cases). If you just want to fetch the image without downloading... we provide mappers! Response.mapImage() function should be helpful in this one:\nswift\nprovider.request(.downloadImage) { result in\n    switch result {\n        case let .success(response):\n            let image = try? response.mapImage()\n        ...\n    }\n}\nLet me know if this resolves your issue \ud83d\ude09 . Cool, we can make it a new file \ud83d\udc4d Do you guys think we should link it from Basic.md as well?. Cool, we can make it a new file \ud83d\udc4d Do you guys think we should link it from Basic.md as well?. Alright then! Would you be up for the changes discussed here, @afonsograca? . Alright then! Would you be up for the changes discussed here, @afonsograca? . Hey @afonsograca. Thank you so much for this one! Unfortunately there were still few things to do before this would be merged. And because we want to release new version pretty soon, I finished it while giving credits to you and @LeLuckyVint that also did a similar PR. I would love it if you could review my PR #1349 and let me know what do you think!. True @SD10, we should probably list addition of new error cases as well.. @pedrovereza @SD10 pushed my fixes, let me know how it looks now!. Just a heads-up that I'll probably merge this later today as we plan to release 10.0.0-beta.1. So if anyone can/want to review this one, it will be greatly appreciated!. Just a heads-up that I'll probably merge this later today as we plan to release 10.0.0-beta.1. So if anyone can/want to review this one, it will be greatly appreciated!. Great idea @SD10, thank you for covering that one!. Hm, this one didn't close itself as well, seems like resolved #NNNN doesn't work even though it is highlighted as if it would. \u00af_(\u30c4)_/\u00af . Hey guys, sorry for the late response. I was actually looking at this PR few times but I didn't really know what to think about it. \nFirst of all we have really great amount of work by @0111b that optimizes decoding the object whenever there is a keyPath involved - that's great! In case of a big list of items to parse/map using keypath, it would be beneficial for sure. \nOn the other hand we have kinda big refactor around new Decodable methods - that surely makes our codebase a little bit more complicated because it isn't clear on first sight as of why do we need such wrapper.\nHowever, I'm up for the change once we see that this is a visible improvement. We can improve the code a little bit to make it more readable to other users, that is not a big problem I think. So, let's make some performance tests on bigger/smaller objects first and see how it relates to each other. This way whenever we have some sort of improvements in this part of the code we can see if the performance is still there.\nHow do you feel about this guys?. I've updated the release notes as well \ud83d\ude09 . I assume this one can be closed now as #1365 went on.. Hey @RockyAo! Please take a look at our example for MultipartUpload. There you can find how to add parameters in body and in url. Also, please let me know if there is something missing or something we can improve. Cheers! . Hey @lubieapki, please let me know your environment better: CocoaPods version, Podfile, Podfile.lock all would be greatly appreciated to inspect the problem. Thanks!. Hey @lubieapki, our current branch 10.0.0-dev shouldn't be used anymore as we have a version 10.0.0-beta.1 already released. Please use the following lines instead:\nruby\npod 'RxSwift', '4.0.0-rc.0'\npod 'RxCocoa', '4.0.0-rc.0'\npod 'Moya/RxSwift', '10.0.0-beta.1'\nYou'll probably need to see if other Rx dependencies like RxOptional etc. support RxSwift version 4.0.0-rc.0.\n. Hey @vincentSuwenliang, it would really help us if you could provide more details about the problem. Additionally, please take a look at our tutorial about using upload, here - maybe it will help you with your current problem.. @vincentSuwenliang I suppose you want body parameters then, not urlParameters. Please take a look at this section here. (.uploadMultipart(multipartData) instead of .uploadCompositeMultipart(multipartData, urlParameters: urlParameters)). If you still have problems and you are sure you were using URLEncoding for parameters, I would need your old Moya configuration (TargetType + Provider).. @vincentSuwenliang please try the following:\n```swift\nlet uuidData = MultipartFormData(provider: .data(uuid.data(using: .utf8)!), name: \"uuid\")\nlet tokenData = MultipartFormData(provider: .data(token.data(using: .utf8)!), name: \"token\")\nlet imageData = MultipartFormData(provider: .data(asset), name: \"photo\", fileName: photoName, mimeType: \"image/jpg\")\nlet multipartData = [imageData, uuidData, tokenData]\nreturn .uploadMultipart(multipartData)\n```\nThis one assumes you want to send an image + 2 additional parameters (uuid and token), which you have under uuid and token variables.. @vincentSuwenliang you might be right, we may want to add some form of a convenience method that could do that for us. Although, what we wanted to do, is to unify how we add parameters to multipart upload, because in older version you could use two ways and one of them wasn't obvious/clear - thus the change. Would you be up for a PR? Our code that was doing the convert contained:\nswift\nif let parameters = target.parameters {\n    parameters\n        .flatMap { key, value in multipartQueryComponents(key, value) }\n        .forEach { key, value in\n            if let data = value.data(using: .utf8, allowLossyConversion: false) {\n                form.append(data, withName: key)\n            }\n    }\n}\nand\n```swift\n/// Encode parameters for multipart/form-data\nprivate func multipartQueryComponents(_ key: String, _ value: Any) -> [(String, String)] {\n    var components: [(String, String)] = []\nif let dictionary = value as? [String: Any] {\n    for (nestedKey, value) in dictionary {\n        components += multipartQueryComponents(\"\\(key)[\\(nestedKey)]\", value)\n    }\n} else if let array = value as? [Any] {\n    for value in array {\n        components += multipartQueryComponents(\"\\(key)[]\", value)\n    }\n} else {\n    components.append((key, \"\\(value)\"))\n}\n\nreturn components\n\n}\n``. Oh, sorry if I wasn't clear enough. I meant that we could have a convenience method that could convert parameters tomultipartFormDatain Moya codebase. I'm not sure what would be the best way to handle it (maybe method, maybeMultipartFormData.init` or something like that). I asked if you want to take a look what would be the best way to do that, then implement it and make a pull request with the code you've written. This way you could contribute to Moya :)\nOf course if you don't feel comfortable with it we can make an issue and maybe somebody else would like to do it. No pressure!. @vincentSuwenliang sorry for the delayed answer, was drowning in notifications and just catching up with them. Generally speaking - yes. We were using similar approach before, first make a dictionary ([String: String]) with parameters, then append to the request (these two snippets I posted above).\nLet me know if there is anything else I can help you with.. Hey @lovesomeone, thank you for doing this! Really good job \ud83c\udf89  \nAlso, for the next PRs, we usually want some accepted reviews before merging. Nothing bad happened, but another pair of eyes is always good. Also, people sometimes comment but don't really have time right now to check the PR (like I assume @BasThomas did), so it is better to wait for the green \"accepted PR\" thingy like in #1359. Nonetheless, thanks again \ud83c\udf89 . Hey @hamada147. When switching to Moya 9. from 8. you need to follow our migrate guide as few changes were made to parameters/encoding/task. Basically there is no standalone parameters/encoding variables, everything is defined in the task property, and you in yours specify requestPlain which suggest that you do not send the parameters in your request at all. More in the docs I linked. \nLet me know if something in the docs is not clear so we can improve it if that happens.. Oh, dob\u2019t worry @hamada147, happens all the time. Glad it helped! \ud83c\udf89. @SD10 @BasThomas would you be up for reviewing this one again after the updates? \ud83d\ude09 . \ud83d\udc4d Good idea. Core team members have Admin access to Moya so they should be able to override the settings in case of failable CI or whatever other reasons. Would you be up for setting this one up, @BasThomas?. @BasThomas mainly because in case of bug fixes it is easier to release new 9.* version and have it rebased in 10 as well.. @BasThomas \ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f you are right, it could, sorry for not noticing \ud83d\ude04 probably Chinese docs want to be updated as well. I'm gonna tackle it in a sec.. I also liked it more. Cool then, renamed already! Thanks for a quick feedback guys! \ud83d\udcaf . Same @SD10, when it happens, we will adjust accordingly of course \ud83d\ude09 . Oh, thank you for catching it! Totally forgot about it. \ud83d\ude13 . Taking care of this as we speak. In hindsight, it might not be the best issue for hacktoberfest \ud83d\ude05 . Hey @majamusan, thanks for the PR! However, I'm really sorry but we are not gonna merge the 10.0.0-dev branch into master until 10.0.0 official release. Until then you can use 10.0.0-dev branch or our tags to follow beta releases. . Good idea @BasThomas. I think this is the right call. Enough time to migrate. I would only ask if we could add this to the migration guide? To remind that if somebody didn't migrate, they should, now.. @orta closing this one for now, but we should definitely look into integrating danger swift in Moya in the future \ud83d\udc4d . Huh, the PR didn't close this issue even though there was a \"Fixes #1381\" keyword in it. Really strange, but \u00af_(\u30c4)_/\u00af. Closing this one!. @devxoul would you rebase it so we can merge this one in? \ud83d\ude09 . @devxoul Thanks! Could you also update Package.swift, please?. Hey @ffittschen, thank you very much for taking your time to do it. However, we have quite a big discussion around this topic at #1283. Before taking any steps further we have to agree on a solution. We would love it if you could help us with your feedback and then you could recreate a PR with implementation.\nFor now I have to close it, unfortunately, but as I said please help us resolve it issue and we can go back to it really soon. Thanks for understanding! . Hey @dannymout, just checking out how is the task going. Is there anything we can help you with?. Hey @wassimseif. I'd say that you would need another abstraction layer that decides whether to use Moya or certain SDK to process the request. Without needed information about the target, it would be really painful to integrate FacebookSDK into TargetType, unfortunately.. Thanks for doing this, @SD10! I'm also up for trying the projects out, at least for one version to test the waters. \nAlso, do we want to keep this issue anyways? I feel like it is not necessary and whenever we want to publish a new version (alpha/beta/release), we can make a new issue about it. From the last issues that covered the release I feel like these are going stale really fast and are hard to find.\nHuh, I just noticed that ReactiveSwift didn't release 2.1.0 \ud83d\ude2e Now they have alpha for 3.*, that is really interesting. . Thanks for the review guys! \ud83d\udc3c \n@AndrewSB I created an issue, #1408, would love to hear your feedback around branches and development/release flow there. Apart from that, I'm gonna merge it to development, as we did before, but if anything bigger comes out of #1408 we can easily change it.. @AndrewSB I was trying to do something similar for Moya, but I'm afraid it is not possible (and it is rather a Swift issue). Basically you want a generic method, but you are returning concrete types, instead of given generic ones. But if somehow you manage to get this nice API in, I would love to see it.. @tosbaha I would add return types to every closure (you have missing ones in your first flatMap and catchError). Compiler with RxSwift gets confused so general rule of thumb is to specifically add return types in each operator.. Hey @asasdasasd. Please take a look at Wrapping in Adapter example and let me know if it is understandable for you.. @asasdasasd you would need to check out retryWhen operator in RxSwift.. I also assigned you @devxoul, would love to have your input in it, but no pressure of course :). @ufosky can you also rebase and change this PR's target into master, please? This is a fix we would like to include in the nearest patch release.. @freak4pc yeah, if you have some spare time it would be awesome if you could do a PR. I was talking about the guard in this PR only \ud83d\ude04 . Thank you very much for your hard work, @ufosky! \ud83d\udc4d . Oh. It seems like a bug. Thank you very much @Vict0rS for reporting it. Would you be up for fixing it by making a Pull Request? We would have to add it manually somewhere around here, similar as Alamofire does it.\nI can help to guide you through, but if you don't have time or just can't do it, I can take it from here.. Hey @ranhsd. Right now to add a token you need to specify when/how you want to add it (by implementing AccessTokenAuthorizable) and what you want to add (by using tokenClosure). The first one should give you the ability to manipulate when/how you want to add it. You can have a default extension that you would always want to add the token, but in your login/register endpoint you would not send it with the request, e.g.:\nswift\nextension API: AccessTokenAuthorizable {\n    var authorizationType: AuthorizationType {\n        switch self {\n            case .loginUser, .createUser: .none\n            default: return .bearer\n        }\n    }\n}\nLet me know if it's what you are looking for.. Oh, I think I understand the issue now. We had this problem before, so we changed the plugin lately that you don't have to specify token when registering the provider. Now we have a tokenClosure, instead of a token, so you can specify a way of getting your token instead of a token itself. We also added a convenience autoclosure keyword, so even a string is accepted by this plugin (thus why the code you posted works as well).\nSo, let's say that you save your token in a keychain. You can initialize a provider even though you don't have your token yet:\nswift\nlet tokenClosure: () -> String = {\n    return Keychain.getToken() // here you can specify how to retrieve a token\n}\nlet authPlugin = AccessTokenPlugin(tokenClosure: tokenClosure)\nlet myProvider = MoyaProvider<API>(plugins: [authPlugin])\nDoes this resolve your problem now, @ranhsd?. Yes, @ranhsd. Each time there is a request, the plugin evaluates the tokenClosure just before, as you can see here. No caching involved.. Glad it helped! \ud83c\udf89. @kavanbrandon Hey, my guess would be that MultiTarget doesn't conform to AccessTokenAuthorizable and you would have to do it yourself:\nswift\nextension MultiTarget: AccessTokenAuthorizable {\n    var authorizationType: AuthorizationType {\n        // here you will have to check whether the `target` is also conforming to `AccessTokenAuthorizable` or not...\n    }\n}\n@SeRG1k17 Hmm, using TargetType as parameter to tokenClosure seems fine with me, as @SD10 it would be awesome if you would provide your feedback in the PR that improves this plugin (#1521). Current workaround would be to use multiple providers for multiple access tokens.. Having everything on master might be a problem in case we want to release a fix before we release a new major version. Let's say we add new breaking feature and then we figure out that 10.0 contains a really bad bug, we would need to do some git voodoo to make a fix release.\nThus, I suggest that we could follow git-flow, making hot fixes on master and develop, but features on develop. Opinions? @SD10 @BasThomas . @BasThomas Oh, I meant that Contributing.md is copied from our contributors repository and we probably need to update that repository too.. Damn it, I swear I saw Contributing.md on my phone, seems like I\u2019m done for today :D. You are right @Vict0rS, both tests that were failing are not your fault, I've created an issue for this one  (#1424).. Yup, can you add a Changelog entry for this one, @spookyvision? Other than that it looks great. \nAbout the Changelog update - you should rebase master before you add this one, as we already have one fix in it. This entry should be under Fixed column, as we enabled this flag before, but not for each target for both debug and release.. I've resolved conflicts, it seems ready to merge! Thanks @spookyvision! \ud83c\udf89 . Hey @PasinduDineth, thanks for the PR. Unfortunately, this branch is not yet ready for a merge. It was a testing playground for both @Sherlouk and @pedrovereza. Sorry, but I'll have to close it for now.. @SD10 we can try to make a workaround with increased timeouts on these tests until we can improve them later on. Want to take a stab at it?. Yeah 10 secs should be enough, if not maybe there is another problem in these two test \ud83e\udd14 We would need to investigate. Hmm, I would rather get it fixed or get a clear understanding of what is happening. Maybe we broke something in the process and just missed it because these tests were failing quite often. I can't really check this until later this week, but maybe someone from @Moya/contributors is available and ready for some digging?. @BasThomas our podspec already uses 10.10, thus I believe that this is a bug that our Moya.xcodeproj uses 10.11 as a deployment target and it should be safe to fix.. That is merged and will be available in Moya 11.. This is really smart @Istered! Doesn't compiler complain about it, though? \ud83e\udd14 . Oh, so even though the parameter list is different, it still won't work right @Istered? Bummer. Then we probably can't make it pretty without duplicating cases, right?. I agree completely with @SD10. This is why I don't see much advantages in that approach with our current situation. . We have already a method that requires only to pass Encodable and if you don't worry about your JSONEncoder (which is probably the case most of the times), it is tedious to pass an empty instance to the method all the time (we have it already e.g. request with/without parameters/encoding etc.). Thus, I'm more keen to just add another case to our Task type.\nThoughts @evgeny-sureev @SD10 @AndrewSB?. Cool! @evgeny-sureev can we go back to two cases then? :)\nOh, and btw, I changed your base branch to development as per our updated Development process docs.. Hey @amaurydavid, I had to change the base for your PR because of #1483, sorry about that. Could you rebase this PR before further implementation, please?. Hey @amaurydavid, as this is a breaking change we would like to introduce it in nearest Moya 11. Do you feel like you would have time to do this next week? If not maybe someone else could help you with that. Please let us know.. We could, only drawback is that we'd have to update it on each release, but we do it for SPM anyways, so not a big deal. . Hey @Nitner0C. I'm no expert here, but my guess would be that your cached binary of Moya was built with different Swift version, therefore you can't use it in this project and Carthage needs to rebuild it (thus checking out Moya, I guess there is a building phase afterwards).\nThis is just a wild guess, so maybe a Carthage expert would help (cc @AndrewSB). @shwetachitlangia can you please paste the xcodebuild log? (At the end of your error log in carthage build you have a path to it). Oh snap, it could be it @BasThomas. Damn it, I knew SwiftLint build step is hard to do against Carthage installation process, still didn't have time to properly test it. Linting errors/warnings shouldn't prevent users from installing Moya, so we need to fix it ASAP. . @BasThomas you mean add an issue to Carthage?. I'm not sure if any of these would be interested in it, but we could try at least try to make an example/guide or just warn people about consequences on Carthage/SwiftLint. . Thanks for letting us know @CocoaPriest. I'm tackling this as we speak.\nEdit: @CocoaPriest could you please let us know what command did you use and what was the result of it? Oh, and also what Moya version do you use?. @CocoaPriest I've created a PR that fixes lint errors and removes the SwiftLint build phase. This should fix the problem for now, and for a further improvement I will just create a new issue. \nIf you could test this branch, remove_swiftlint_buildphase (and remove the Moya cache on Carthage/Cartfile.resolved), it would be awesome.. @BasThomas we can keep this open as the PR didn't land yet \ud83d\ude05 \nAlso, @CocoaPriest there is an another PR that instead of removing the build phase, uses it only in debug mode. Can you try this one as well (#1619)? As we would prefer it actually, because it solves the problem for Carthage users without removing a tool in our development process.. That's cool, thanks for the help @CocoaPriest! \ud83d\udc4c . Hey @larryonoff, could you rebase your PR, please? I think we will be looking at new major version in the near future \ud83d\ude09 . Cool, thanks @larryonoff! Can you just add an entry to Changelog? Here you can find some guidelines for that (this is also a breaking change).. @SD10 good idea, was about to make a similar thread \ud83d\ude04 \nAbout bumping ReactiveSwift version and our release process - I tend to think about Moya/ReactiveSwift as both, Moya and ReactiveSwift codebases, combined. This is due to the fact that if you want to use Moya with newer ReactiveSwift version, you need to migrate your whole codebase beforehand. Therefore we probably have to release Moya 11 to support ReactiveSwift 3.\nThere is also Carthage integration that is broken, seems like nobody fixed it yet. I might take a stab at it, but it probably could go as 10.0.2, where all of these we could release faster in 10.0.1.\nLet me know how do you feel about it :). Yeah, we will probably release a lot lighter version than 9 or 10, maybe we can squeeze the authorization plugin which is also a breaking change.. Okay, I think we should move forward with the patch release. @SD10 do you want to take a stab at it? \ud83d\ude09 . Could any of you guys create an example project that I could look at? @SebastianBoldt @robfeldmann or maybe someone else with the same problem? Would help a lot.. Hey @aelam, you are right - it's not that simple to append parameters to all requests. Whenever I\u2019ll find time I will post a function that I was using to achieve this. Adding this to my todo-list as we speak. Sorry for the troubles!. Hey @aelam, sorry for the wait. Here is the endpointClosure that you could use to built your own version. Basically we don't really introduce a function to append parameters to all targets as there are lots of undefined behaviors (as you will see in the code below). You need to have a domain specific knowledge to build your own version, where in older versions the behavior was mostly done by us under the hood and we had multiple issues asking why is something done this way and not another (in upload especially).\n```swift\nlet endpointClosure1: MoyaProvider.EndpointClosure = { target in\n    let additionalParameters = [\"Additional\": \"Parameter\"]\n    let defaultEncoding = URLEncoding.default\n    let task: Task\nswitch target.task {\ncase let .downloadDestination(destination):\n    // First decision: what encoding to use when there wasn't one before\n    task = .downloadParameters(parameters: additionalParameters, encoding: defaultEncoding, destination: destination)\ncase .downloadParameters(var parameters, let encoding, let destination):\n    additionalParameters.forEach { parameters[$0.key] = $0.value }\n    task = .downloadParameters(parameters: parameters, encoding: encoding, destination: destination)\ncase .requestCompositeData(let bodyData, var urlParameters):\n    // Second decision: encode data and append the parameters there or append parameters to urlParameters?\n    additionalParameters.forEach { urlParameters[$0.key] = $0.value }\n    task = .requestCompositeData(bodyData: bodyData, urlParameters: urlParameters)\ncase .requestCompositeParameters(let bodyParameters, let bodyEncoding, var urlParameters):\n    // Third decision: where to append parameters here, body or url?\n    additionalParameters.forEach { urlParameters[$0.key] = $0.value }\n    task = .requestCompositeParameters(bodyParameters: bodyParameters, bodyEncoding: bodyEncoding, urlParameters: urlParameters)\ncase let .requestData(data):\n    task = .requestCompositeData(bodyData: data, urlParameters: additionalParameters)\ncase let .requestJSONEncodable(encodable):\n    // You would have to create data from `encodable`, encode it to JSON object, then append parameters\n    // and make Data from it - and assign .requestData to the task\n    task = target.task\ncase .requestParameters(var parameters, let encoding):\n    additionalParameters.forEach { parameters[$0.key] = $0.value }\n    task = .requestParameters(parameters: parameters, encoding: encoding)\ncase .requestPlain:\n    task = .requestParameters(parameters: additionalParameters, encoding: defaultEncoding)\ncase .uploadCompositeMultipart(let multipartData, var urlParameters):\n    additionalParameters.forEach { urlParameters[$0.key] = $0.value }\n    task = .uploadCompositeMultipart(multipartData, urlParameters: urlParameters)\ncase let .uploadFile(url):\n    // Another decision: where to add it with upload? in multipart data, or url?\n    let data = Moya.MultipartFormData(provider: .file(url), name: \"file\")\n    task = .uploadCompositeMultipart([data], urlParameters: additionalParameters)\ncase let .uploadMultipart(multipartData):\n    task = .uploadCompositeMultipart(multipartData, urlParameters: additionalParameters)\n}\n\nreturn Endpoint<HTTPBin>(url: URL(target: target).absoluteString, sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, task: task, httpHeaderFields: target.headers)\n\n}\n``. @SD10 oh, what a nice catch! Updated as well :). Hey @Blackjacx, good question. Probably the first thing I\u2019d try to use would berequestClosure. If it wasn\u2019t scalable for me, I would create my ownTargetType` that would have additional field with request/validation before the real request was fired (this would need your own Provider as well to implement the logic behind it).\nPlease let me know if any of these is helpful to you :). @Blackjacx @tosbaha is correct, you can't really get Target from Endpoint (I mean you can try to guess using properties, but that's not really reliable as it depends on endpointClosure and trying not to duplicate things). You would use endpointClosure for that one. . Hey @dtomicAZ. You can take a look at our NetworkLoggerPlugin, which basically logs both requests/responses - maybe it has all the functionalities you need \ud83d\ude09  \nThis plugin logs the request in willSend method. You could log it in the didReceive as well, then you would use response.request to get underlying request of a response (see our Response model). \nPlease let me know if any of these is helpful to you!. Ye, adding our *.md docs to the side menu would be awesome.. Ye, adding our *.md docs to the side menu would be awesome.. @SD10 I know that we are still trying to pass this one, so please rebase it when you find time so we can   review it again.. If I could add my two cents here, both of these options doesn't feel very appealing to me. Having two managers, sharedAlamofireManager and defaultAlamofireManager, would be very confusing to me at first. And having in mind the fact that the only difference between them is that one is a stored and one is a computed property, is not a big enough factor to introduce this unnecessary complexity.\nIf someone wants this manager to be a stored one, the fix is fairly simple. We could document it more, but that's all I would do.. @rainedAllNight there are few options:\n1. You could do an extension to TargetType with default baseUrl and headers:\nswift\nextension TargetType {\n    var baseUrl:...\n    var headers:...\n}\n\n\nYou could create your own subtype basing on TargetType so it doesn't need baseUrl & headers:\nswift\nprotocol MyTargetType: TargetType {}\nextension MyTargetType {\n    var baseUrl:...\n    var headers:...\n}\n\n\nYou could create your own version of MultiTarget that has default baseURL & headers properties in it:\n``swift\npublic enum MyMultiTarget: TargetType {\n    /// The embeddedTargetType`.\n    case target(TargetType)\npublic init(_ target: TargetType) {\n    self = MultiTarget.target(target)\n}\npublic var path: String {\n    return target.path\n}\npublic var baseURL: URL {\n    return myCustomBaseUrl\n}\npublic var method: Moya.Method {\n    return target.method\n}\npublic var sampleData: Data {\n    return target.sampleData\n}\npublic var task: Task {\n    return target.task\n}\npublic var validate: Bool {\n    return target.validate\n}\npublic var headers: [String: String]? {\n    return myCustomHeaders\n}\n/// The embedded TargetType.\npublic var target: TargetType {\n    switch self {\n    case .target(let t): return t\n    }\n}\n}\n```\n\n\nYou could also expand the last option(3.) to use a type that doesn't need baseUrl & headers (because TargetType does).. @rainedAllNight Yeah, thus option 4 - you can create your own protocol that doesn't require baseUrl & headers and take that one instead of TargetType in MyMultiTarget:\nswift\npublic protocol MyTargetType {\n    var path: String { get }\n    var method: Moya.Method { get }\n    var sampleData: Data { get }\n    var task: Task { get }\n    var validate: Bool { get }\n}\n\n\n``swift\npublic enum MyMultiTarget: MyTargetType {\n    /// The embeddedMyTargetType`.\n    case target(MyTargetType)\npublic init(_ target: MyTargetType) {\n    self = MultiTarget.target(target)\n}\n\npublic var path: String {\n    return target.path\n}\n\npublic var baseURL: URL {\n    return myCustomBaseUrl\n}\n\npublic var method: Moya.Method {\n    return target.method\n}\n\npublic var sampleData: Data {\n    return target.sampleData\n}\n\npublic var task: Task {\n    return target.task\n}\n\npublic var validate: Bool {\n    return target.validate\n}\n\npublic var headers: [String: String]? {\n    return myCustomHeaders\n}\n\n/// The embedded `MyTargetType`.\npublic var target: MyTargetType {\n    switch self {\n    case .target(let t): return t\n    }\n}\n\n}\n``. Hmm, I guess we could remove thefatalError. What we really wanted was to avoid a situation where you would useURLEncoding.queryStringasParameterEncodingfor body parameters (orURLEncoding.methodDependentwheremethodwould beget,head,delete). Right now we block users from encoding parameters usingURLEncodingin thehttpBody`.\nWhat we could do: instead of blocking URLEncoding as parameterEncoding for bodyParameters, we could block URLEncoding.methodDependent and URLEncoding.queryString and say that only URLEncoding we accept in bodyParameters is URLEncoding.httpBody. \nOpinions, @fengerxixi @SD10?. @fengerxixi Hey, just a heads-up that we enabled URLEncoding.httpBody as bodyEncoding argument. It is also released in the newest Moya 10.0.2, thanks to @SD10. If this doesn't resolve your issue, please let us know!. Hey @ETmanwenhan, sorry for the late response. If you really need the multipart/form-data, you can just use a normal uploadMultipart with empty data. There was a similar use-case to yours in #1152.\nLet me know if it helped!. Hey @ffittschen. First of all thanks so much for the hard work not only when creating the PR, but also by participating in finding a good, flexible solution. This is a hard one though, as the migration is a big one and seems like the placement of the token is rather a custom usage.  We also didn't get enough feedback on this big change.\nBecause of that we decided to go with a simpler solution proposed in #1611, at least for now. Although, I've already sent you an invite to the organization as a thank you for your hard work. I hope that this won't stop you from contributing more in the future! . Closing this one. It's already \u26f5\ufe0fin Moya 11.0.0-beta.2 \ud83c\udf89 . Hey @NguyenDucThanhTam. I think the purpose of this PR is to use the newest changes of Moya that we have in development - in that case you just need to wait just a little bit more, but the beta release its on its way. After #1527 we should be ready to go. Sorry for the trouble!. This looks good! I'm just thinking if we should add some info that this release needs major upgrade of ReactiveSwift as well. What do you think?\nAbout releases - I'm cool with it. No need for an alpha I think, and one week beta should be enough, as we did it before and worked fine.\nEdit: actually, how about waiting with release and get #1521 in? It seems like a good addition and it's already a done PR I believe.. @SD10 okay, cool. As much as I'd love to have this plugin in Moya 11, I don't really have much time for it either. Thus, I'm gonna merge this one and we could try with beta I guess!. I see the value of this PR in terms of cleaner endpoint/endpointClosure, but as others stated I'm not sure it outweighs the cons from migration/relying on the generic part of an Endpoint. We would have to investigate it a bit more to see what really would happen after the flattening.. @Jeroenbb94 Thank you very much for this feedback! We didn't hear any in beta stage so each report is really valuable to us.. Hey @lucas34. I'm curious: why are we doing this change? '~> 4.0' should be enough to use with both 4.0 and 4.1. Unless something big happened between those 2 releases that we should support in our code?\n  . Oh, now I understand! Thanks @lucas34, nice catch! . This is really strange and unfortunately all of you guys can't share your project to help us investigate it, right?\nIn that case, will any of you guys (@aloco, @karbhasin, @shwetachitlangia) want to make a quick call with me and we could try debug it on the fly? Being able to reproduce it and access to the server logs would be awesome.. Can you guys check with a proxy (like mitmproxy) to see if the request seems to be okay there as well?. Hey @lucas34, I'm gonna close this one because there is no activity for about 4 months now. If you are  keen to work on this again, please create a new PR. Thanks again for the hard work on this \ud83d\udc4c . @SD10 yeah it seems like this is the case with integration tests taking longer than expected. \nAlso, I'm gonna take a look at this PR ASAP, sorry for delay.. Hey @canny09!\nCan you post what result do you got when using code you included (with URLEncoding.querystring)? The best way would be to add NetworkLoggerPlugin to your plugins in MoyaProvider and copy whatever it prints (both request/response logs). More info about plugin customization you can find here.. @canny09 I believe this is not supported. Additionally, with your syntax, few of the server-side languages would only catch one ids, because you passed two arguments for one parameter. If you still need it though (can't talk with the server guys), you probably need to write your own ParameterEncoding (here you have a quick example on how to create your custom one).. Hmm, it's strange, appending it in endpointClosure should just work. Can you confirm for sure that it doesn't, @seasox?. @ashfurrow these two cases are separate, in #1550 there is a fix for a bug that if you appended multipart data in endpointClosure, the request wouldn't respect it and wouldn't add it to the list.\nFor this case though, I don't think there is a specific problem. Let me explain: endpointClosure is in fact a way of transitioning from the target to the endpoint. Every plugin's method receive target as a way of telling which target did something and we can react. These plugins do not receive endpoint, which is gathered after using endpointClosure on a target. In fact, you could get an endpoint when manually executing endpointClosure on given target that is passed through.\nLet me know if it makes sense.. > 3. The task of TargetType passed into prepare(request:target) won\u2019t have the changes from the endpoint closure.\nIt won't because endpointClosure doesn't change/update TargetType, it creates a completely new object that is of an Endpoint type (and while it most of the time bases on TargetType, sometimes it doesn't at all). We could document it but right now I'm not sure where/how.\nAlso, I agree that plugins in its current state overlap some of the closure(both endpoint, request) functionalities, that's why I've tried to unify them into one unit in #1123, maybe we should try to revisit this topic sometime in the future.. I agree that all the closures are a core of Moya right now. Although, we might think about a smooth migration process and maybe a deprecation when Swift 5 comes? Then we have some time to focus on this one and think about all pros and cons.. Closing this one as I think we've reached an agreement on the issue \ud83d\ude04 We can expand on plugins in other issues \ud83d\udc4d . @SD10 I'd love to get it released as patch for 10.0, even though we are really close to 11.0 release. The reasoning is that this bug is kind of a big for people that rely on this config, and upgrading to 11 might take time for some. Thus, would you please target master instead of development?. @SD10 almost there! Everything is correct except we don't need convertMoyaMultipartFormDataToAlamofire() now \ud83d\ude09 \nAlso: did you fix that failing tests in the meantime? Seems like the build is passing now.. Hey @BasThomas, I was doing some docs changes and had some time to fix this one too, would be awesome if you could take a look at #1573. I'm gonna close it as it supersedes this one.. Hey @BasThomas, I was doing some docs changes and had some time to fix this one too, would be awesome if you could take a look at #1573. I'm gonna close it as it supersedes this one.. Hey @minuscorp, thanks for the issue.\nPlease take a look at #1267, seems like a similar issue. If it's not the case, let me know.. @minuscorp you can still store variables in protocol extensions (even though it's not that simple to do). \nAdditionally, Moya always warned users that they need to retain the provider as long as you need the callback from it. In the recent versions we just fixed the inconsistency around this topic (especially in reactive plugins) and documented it a bit more. \nThe main advantage (at leas for me) with having it deallocated is that I don't waste my resources whenever I don't want to. Simple use-case: we have a provider created for the user. In the app there are many requests for fetching data and displaying it. Whenever user logs out we don't want the requests to go through and give us back the responses, because these are not needed anymore - the object responsible for it is not there.\nIf you feel like we could discuss it further, we can close this issue and create a new one for this specific case.. @minuscorp I'm not talking about any library specifically, just saying that when the object is released (in this case MoyaProvider), I don't expect anything anymore from this object, because it doesn't exist. But I guess this is just a personal matter and if we want to discuss this behavior in Moya further, let's create another issue \ud83d\udc4d . Yeah, let's keep it open then \ud83d\udc4d . Yes, we changed it to unify the behavior across all the platforms. Moya's general design from the very beginning was to keep reference to the provider as long as you need it. We never really supported the  behavior when you released the provider before you got the response. Thus we fixed some of the methods from reactive libraries as well.\nPersonally I'm against the change to retain only for reactive extensions, as we should be consistent with provider's behavior. Maybe we could send an error/failure event, but that's all I would do.\nAlamofire is not releasing anything as it's using singletons, same for URLSession. We are not using singletons, thus why I also agree with releasing the resources whenever the provider is deallocated.\nAlso, to have a non-hacky solution to this one, creating your own method that does not release resources whenever request didn't complete is pretty straight-forward.. Hey @blackchena. There are few ways to do this, but I'd use MultiTarget and split your API into two TargetTypes.  You can take a look at our MultiTarget examples here. \nLet me know if I can be any more helpful with that matter!. Hey @kdawgwilk! I don't think that adding a synchronous version of a request is something that we should add to Moya. This is not seen as a good practice to use blocking requests. You can take a look at both NSURLSession and Alamofire - none of them support this behavior. You can also look at Alamofire#1147 for more detailed answer. (we support queues as well now!). @AndrewSB Yeah I'm talking about the queues that Alamofire uses as well.. Hey @juniorgarcia, that's a good one. In Moya 11 we introduced an enum type for ValidationType (you can check it here). You can specify your own validation for status codes of your response, but it seems like you have these codes in the response body instead. Thus, plugins seems like a pretty good solution. You could share it here so maybe someone else in your position will benefit from this it as well.. Hey @chapayGhub. We support ReactiveSwift >= 3.0 in the newest beta of Moya 11 (11.0.0-beta.2). We strive to release it in the next days when we feel like it's stable enough. Would love it if you could use it and give any feedback on the changes if you have time to do it.. Hey @matthiasotto. First of all, thank you so much for this detailed bug report. Means a lot. \nI've copied your code into my Moya project, but I was getting the same (bad) results for both Moya and Alamofire. Would you be so kind to create a sample project with images that reproduce this problem? Then I would be able to investigate the problem more.. @AndrewSB I\u2019m afraid we don\u2019t have one at the moment. Probably need to add them at some point, though.. \ud83d\udcaf I've added a line to Migration Guide in #1570.. I'm gonna go ahead and merge it as it's changing only Moya versions and people might not notice new Moya version by reading Readme.. @SD10 no worries!. Hi @alfian0. You could try making the function generic, as our function expects any type that implements Decodable and AFAIK Decodable does not implement Decodable, which shouldn't be the case and I'm not sure if it's fixed in the newest Swift.\nSomething like:\nswift\ninternal func requestObject<T: Decodable>(token, decodableClass: T.Type) {}\nLet me know if it helps.. Nah, not dumb at all @alfian0. In fact this shouldn't be a problem and you should be able to just run the code you posted without any changes. But yeah, it's not there yet.\nI'm closing this one but if there is anything else we can help you with, let us know!. Hey @mkkroliks. Try to import Alamofire and see if it helps.. Hey @eyrdor, can you please use NetworkLoggerPlugin and paste here request/response?. @eyrdor try removing \"Content-Type\": \"application/json\" from headers maybe?. Thanks for the info @eyrdor. Please let us know when u resolve it and what was the cause, maybe it\u2019ll help someone in the future.. Hey @sasojadrovski. The only difference I see in these two snippets of code is that in the working code you always send Authorization header even if it's not there. If it's not it, then there must be something in Swift itself, because Moya just gets the dictionary of headers that is passed to Alamofire. Not sure what though, as creating dictionary by appending/initialization shouldn't have any difference. You could also check this thread on SO.. I think this one should be resolved thanks to @lucas34, but if there are still questions about it, don't hesitate to reopen it @hherman1.. Hey @Rashesh-Bosamiya. Please take a look at our Multipart Upload example. It covers sending image with parameters in body or in URL.\nIf there is something specific with documentation that you need help with, please create a new issue.. Hey @Tritium7. Can you try to make the same request with Alamofire/URLSession and see if it works? If yes, please copy-paste the code here so I can prepare a demo project and see what's the problem.. @dtomicAZ seems like this response from SO says it all - when you have www-authenticate header, authentication challenges are triggered. This issue from RN is also similar. Really interesting, didn't know about it either!\nI'm gonna close this one, but if you have any more questions for Moya itself, please don't hesitate to create new issue.. Hey @kou0117. Unfortunately, you can't really send all of it as a JSON body, because JSONEncoding sends \nContent-Type: application/json\nwhere uploading multipart needs a different header:\nContent-Type: multipart/form-data\nand this is needed because server needs to resolve the request correctly in case of a multipart one.\nNow the question is: what is really wrong with the code you posted, because from the server perspective it would seem similar to what you want to achieve (meaning it would get 3 parameters and a data). If it's different serialization, you can use JSONSerialization instead of \"\".data(using: .utf8) to get the data:\nswift\nJSONSerialization.data(withJSONObject: parameters, options: options)\nIf it's still not what you really want, let me know please.. @kou0117 you won't really send it as JSON; it will be sent as a form-data. However, if your server accepts both image and parameters in the body, your code is fine. If you want your parameters in the url instead, please take a look at our Multipart upload example.. Hey @vishal91. Please try to import Alamofire wherever you are using the ParameterEncoding. \nThis seemed like an issue with Carthage though, so it's odd that it happens to you with CocoaPods. \ud83e\udd14 . @ashfurrow @freak4pc Thanks for taking care of it! I was trying to migrate to Circle CI 2 few months back but didn't really have time to finish it. You can see #1339, though - maybe there is something useful to you.. Yeah, it was the headers that were in the next line with a left-padding so it didn't pass. I'd split them and then used lowercased() because sometimes it is returned lowercased status code: 200, but sometimes it is not (e.g. on my machine) Status Code: 200. Added comments to the code as well as it is not something that I would know when I'd see these tests.. Yeah, @LucianoPAlmeida, sorry for the problem but our org is currently bugged on CircleCI. Long-story-short we were using a beta of CircleCI 2.0 on macOS and we had to be given a trial to make it work. I already messaged support and we should have it resolved soon. Then we can proceed with this PR. \ud83d\ude05 . @BasThomas you even wrote this one \ud83d\ude04 Just that there is a specific command to update the libraries if possible, where bootstrap just runs on defaults. We could improve it by adding a flag to cache libraries, though.\nAbout this PR we will have to decide what to do, because we already have a PR in the works, which is a bigger rewrite. This one is simpler and doesn't require that much to migrate for the old users.. @SeRG1k17 would you please remove the @autoclosure from the plugin as well? We agreed to remove it as it causes a lot of chaos, where we just wanted to make it easier for people to pass the token \ud83d\ude05. @SD10 yeah, tough one. I'd try merging master into development as we need to do it anyways. If it doesn't help, then let's rebase the PR.. Hey guys @SeRG1k17 @SD10 - I've rebased the PR and did reset some comments, it seems like the history is little bit more clear now and we can proceed \ud83d\ude09 . @oluckyman this needs a major version release as it's breaking, but I think we are near to complete the scope for it \ud83d\ude09 . @Dschee I'm not against the build phase as well, just that we need to have this working for all, especially Carthage users. That's why I created #1616. I'm happy to close this one if #1619 will work correctly.. @Dschee yeah because this one doesn't fix the Carthage problem, that's why you have these errors. After fixing Carthage Swift 4.1 will work without any additional works. This one just adds a file that Xcode 9.3 added and updates dependencies, that's why it's targeted to the development branch as well.. @SD10 Yeah, it's good to go.. I appreciate that you jumped in on this, @Dschee. However, we don't want to make the same mistake twice and just believe that this is working. Could you please create a step in Circle CI config that runs carthage script without SwiftLint installed?. @LucianoPAlmeida just wanted to say that this is the first time I'm seeing RangeExpression type and I'm amazed. Will probably take a closer look on this and PR later on, but great job on finding it \ud83d\udcaf. Hey @canny09. I'll need more informations to help you resolve the issue:\n\nWhat version of Moya do you use?\nAre you sure that map<R>(_ transform:) is a method that Moya had before? I can't recall it but maybe my memory is failing me \ud83d\ude05 \nCan you tell me if you are using additional CocoaPods, for mapping specifically? ObjectMapper or ModelMapper or any other? If yes, please provide me Podfile.lock if possible.. Oh, so now you are probably facing a problem with Swift, rather than with RxSwift or Moya... I'll try to give you some hints on how you could try to solve it, as I don't see nothing in particular on the first sight.\n\nSwift is not the best at giving you a precise errors in this situation, that's why I always try to extract the code to a playground if possible to check if the inner code is working without the Rx part. in your case I would try to check if I could write a function and see if it works:\nswift\nfunc transform<T>(response: Response) -> T {\n    let jsonDict = response as? [String : Any]\n    guard let model = T.deserialize(from: jsonDict, designatedPath: \"data\") else {\n        throw BlockyError.unKnown\n    }\n    return model\n}\nIf it doesn't, you have a better error right in front of you. If it does work, however, there is a problem up the chain. Then I would check if the Single extension without the whole map transformation works.\nswift\nextension Single {\n    func mapModel<T: HandyJSON>(type: T.Type) -> Single<T> {\n        return Single.just(T.deserialize(from: jsonDict, designatedPath: \"data\"))\n    }\n}\nThe same situation here, if it doesn't work you know where to dig. If it works, then it's probably a typo somewhere or maybe you need an explicit parameter names or explicit return types somewhere. Really not an easy fight.\nIf you can't find it, let us know, maybe try to build an example project where it happens and someone will for sure try to help you.. First of all thanks so much for this piece @fbeeper! This is a huge amount of work and many years in the making so you did a great job \ud83d\udc4f \nI've left few comments myself as well - I know that with all of us commenting this is a lot of work, but I hope we can get this finished.. Hey @honbolau. To get the complete URL you would have to get the url + parameters. URL you can get using Moya's initializer for URL, URL(target:). Parameters are harder because you would need to know if these parameters are gonna be encoded in the URL or not. You basically would need to implement all the logic Moya has to do it.\nThe other way would be to implement a Plugin. There is a function, willSend(_:target:), that should contain all the data you need.\nWe could also think about a way that helps you achieve all you need without using a Plugin, but I don't have any specific idea in mind, maybe you have one?. @Legoless thanks for the report. I guess we should file a radar as it clearly works with the old build system but it doesn't with the new one. Just one question: is it using a static or dynamic framework option in a Podfile?. Hey, coming back to you with the results of my tests @Legoless. Unfortunately, I didn't have the same result as you. I ran the following:\n- Create a fresh project\n- pod init and add pod 'Moya', '11.0.2' to the Podfile\n- Open *.xcworkspace\n- Build with the default build system (success)\n- Switch to the new build system\n- Build with the new build system (also success)\n(using Xcode 9.3 and CocoaPods 1.5.0)\nThere might be something else to get the mentioned result, I didn't find it though. Maybe try removing all the cache/derived data and try again?. @orta yeah, there is also the Community Project section. \nI guess there could be many projects that try to simplify Moya in its own way. This one is a nice alternative when you can't afford Moya itself but still want some abstraction layer on top of your JSON api. Still, it lacks many features that Moya is known for and this kinda proves the point that we, as a Moya community, shouldn't really make our own micro version of Moya. . That\u2019s awesome. Thank you so much @petester42 for stepping in and finishig the works, this is imo the best solution to this problem. And thanks @Dschee for pushing this forward! \ud83d\udc4f\ud83c\udffb\ud83d\udc4f\ud83c\udffb\ud83d\udc4f\ud83c\udffb. @SD10 sorry, but it's kinda not clear to me: how would the branch impact the build fail? Didn't investigate it yet, but didn't see that error before \ud83d\ude05 . I know it's a huge delay, but would you like to finish the works on this one @alanyjw? I think it would be valuable addition to Moya 13.. @alanyjw there is no definitive date for the moment, but we will try to align our release with new Alamofire 5 I think. No pressure tho, let us know if you\u2019d need any help :). So did we come back to the solution I gave at the beginning? \ud83d\ude04 I also do agree that we shouldn't really replace the case with additional parameter \ud83d\udc4d . @SeRG1k17 Yeah, yeah, I just said that we all agree that replacing the current task is a no-no, and asked if you guys like the solution I gave at the beginning \ud83d\ude04 . Hey @gobetti. That's a great question. So I didn't really use delayed stubs in combination with TestScheduler in RxSwift, but I know that people who did, subclassed MoyaProvider. \nIf there is a way of introducing this to Moya without creating additional subclasses it would be awesome. If not, maybe just adding an example of subclassing to our docs would be sufficient? What do you think?. Oh, I thought that you wanted to take a stab at it and create a PR with the example, @gobetti \ud83d\ude04 My time is limited right now so maybe you could try to do it and I could help you with your questions in a PR?. Hey @kaleemozitech. Please use NetworkLoggerPlugin(verbose: true) and post the logs here.. This is a really good write-up, thanks @SD10 \ud83d\udc4d I'm still trying to think of a real use-case that would benefit from that. Do you have something in mind, maybe?. Yeah, now the usage of multiple enums seems more fitting, but I would try to leave it as it is until we face another bigger improvement that we need to do in Task implementation. . @SD10 Oh, right. This is tricky because SwiftEnv still uses it but we don't really use SwiftEnv yet (was thinking that I implemented the Swift 3 & Swift 4 tasks in CircleCI, but I didn't \ud83d\ude05). Updated!. Hmm, really not sure what the error is. Was suspecting that Carthage is the problem since it had to rebuild all the dependencies and it always crashed in that case. Might need a deeper investigation :shipit: \nEdit: Okay, this seems like a problem with Carthage + problem with this email address from Danger/Peril. I'm gonna try to clean up the Carthage builds soon(tm) \ud83d\ude06. Okay so the build passes now! I've made a separate job for carthage integration, we should do few more of these like @pedrovereza in his branch, but for this PR I think it's enough.\nThe only problem for now is that Danger doesn't pass, although this is a problem for quite some time now. @SD10 might it be something connected to the token capabilities? \ud83e\udd14  We should resolve this soon as we are missing out on PR checks.. Oh, didn't know that, thanks @pedrovereza! Is it somewhere documented and maybe is there a road map that would have this option available for macOS as well?\nAlso, I've sent an email about this seed plan as well, we'll update once I got the info.. @SD10 Hm, not sure if I understand. We don't have MoyaBot right now and we use Peril for both issues/PRs, right? So in theory they should use the same token? Because Peril seems to work fine on Issues, but not on PRs.\nEdit: Also, our seed plan just got accepted (it was fast)! \ud83c\udf89. Oh, okay, that explains everything, thanks @ashfurrow! If we are at it, could we add all tokens/credentials of our bots to our 1password keychain?. Thanks for the help guys! A little bit overtime, but seems like we\u2019ve got it covered! I think we can fix the linter problems in another PR, so if you could check this PR one last time - it would be awesome \ud83d\ude0e . Yeah, @cooler333, would you be willing to make a PR with the change? The target would be our development branch as this would be a breaking change (major upgrade of a dep). Hey @kaleemozitech, this is a tough one because there might be many factors involved.\n\nType of your dict. Do you have your dictionary typed as [String: Any] or [String: String]? Additionally, what are areas? Is this a [String] or [Int]? Make sure you are passing the types right.\n.prettyPrinted option for your data serialization. This adds some additional space to the encoded data, maybe your server doesn't accept it at all? Try replacing .prettyPrinted with []:\nswift\nlet data = try! JSONSerialization.data(withJSONObject: dict, options: [])\nWhat headers are you supposed to pass to the server? Is it really multipart/form-data? Do you override your headers somewhere? This also can be the reason that your server cannot decode your parameters well.\n\nI think these are the biggest ones that come to my mind right now. If none of these help, let me know and we will try to figure it out. Server logs and more code would be appreciated. Oh, and please add NetworkLoggerPlugin(verbose: true) to your MoyaProvider plugins and paste it here if you can, this is really helpful with debugging.. I think that the templates are still just templates, you don't necessarily have to stick fully to the template - it should help in forming your opinion or bug report. Anyway, I would still pursue the idea of multiple issue templates, but I don't really have time to finish it, so I'm gonna close it \ud83d\ude22 . Hey @ETmanwenhan! Sorry, but I'm not sure I understand the problem \ud83d\ude1e\n\nDo you use Chinese characters and there is a problem when sending the request?\nIf true, what is the problem - crash, wrong encoding? (you could add logs you got from the request/response, using NetworkLoggerPlugin(verbose: true) adding to your MoyaProvider plugins)\nOr maybe you're not sure what method to use?. Okay, updated the lockfiles but there is a thing - ReactiveSwift will have a release in a few as there is already 4.0.0-rc.1 so we should watch for the update and probably release a major version as well.\ncc @SD10 . @SD10 Yeah I was thinking about the beta version with their RC but was thinking that they would probably release a major in a day or two so didn't bother.. Aw, thanks @freak4pc for syncing the PR and thanks to all for taking time to review it! \ud83e\udde1 \n\nI also updated .podspec so it is in sync with newest ReactiveSwift version; please do a final check if you can!. Hey @simonrice, thank you so much for a very detailed issue! \ud83d\udcaf \nSo this is something I noticed as well when I started migrating to Xcode 9.3 in #1656. I actually did what you also suggested in second point, importing UIKit.UIImage where possible. I think it fixed the original problem you encountered but I've got stuck on some other error that happened after the fix, probably now connected more to the Carthage than Moya, but still I didn't finish the job, unfortunately.\nIf you have some experience in Carthage and want to help out in finishing the PR, please don\u2019t hesitate to do so \ud83d\ude09 . Oh, thanks for closing it @simonrice, totally forgot about the issue \ud83d\ude04 We still need to prepare a new major version to get this through, but in the meantime you can use development branch.. Thanks @pedrovereza this is great! Let me know how do you feel about my comment, otherwise it's good to go \ud83d\ude09 . @oluckyman What we do is to create our own protocol that has auth type, if you are using only bearer or nothing, you would have:\nswift\nprotocol AuthTargetType: TargetType {\n    var auth: Bool { get }\n}\nAnd then in your wrapper you would check if you need to do auth or not. Also, your wrapper could be a little bit smarter by checking the current token (if it expired or not), then:\n- if it expired, fire auth request\n- if it didn't expire, fire normal request, if you have a 401 error (unauthorized), just fire auth request and then normal request again\nJust be careful to not get into infinity loop with retries, we usually retry with these steps to max 3 times and then activate the request once the network connection is up again.. No worries @gligorkot, glad you resolved the issue! \ud83d\udc3c . No worries @gligorkot, glad you resolved the issue! \ud83d\udc3c . Hey @freemub-ios-syb, I'm sorry but I don't think I understand what is the problem here. Could you be more specific about the problem? \nThe best way would be to show a log of requests/reponses (see this doc about logging) and then explain what you were trying to achieve instead of what you've got.. Hey @freemub-ios-syb, I'm sorry but I don't think I understand what is the problem here. Could you be more specific about the problem? \nThe best way would be to show a log of requests/reponses (see this doc about logging) and then explain what you were trying to achieve instead of what you've got.. Hey @marshallee, sorry but this is not really a question to Moya, rather to Swift - you could try using StackOverflow. Generally you would need a function that finds any unicode character in your params and replace/remove it.  \nSorry, but I have to close this one - hope you understand! \ud83d\udc3c . Hey @marshallee, sorry but this is not really a question to Moya, rather to Swift - you could try using StackOverflow. Generally you would need a function that finds any unicode character in your params and replace/remove it.  \nSorry, but I have to close this one - hope you understand! \ud83d\udc3c . Thanks for doing this @LucianoPAlmeida! Seems like it's working now, but can we have the results labeled with the platform? Seems like we are testing 3 platforms and we've got 3 results, but it might be confusing as of which one is for which platform currently:\n\n. Hey @tiago-queiros, thanks so much for the PR! I was wondering, is there a specific reason why we would like to support only 4.3.1 or higher patch version of RxSwift?. @lordcodes @ryancrunchi @AndrewSB FYI I've created a PR with a fix (#1815).. Closing it as the PR with the fix is merged. This should be released in Moya 13 in the near future! You can try it out using develop branch, but please don't use the code from develop on production yet. Thanks!. Hey @dpoggi! Will you be able to finish the work on this one? I think it would be a valuable contribution to Moya 13.. @dpoggi awesome, thanks!. @dpoggi thanks so much for taking care of that! . Hey @LCBbest, sorry for the late reply. So let's say you have a Task object and you want to fetch parameters out of it, right?\nFirst, you need to take into consideration that your Task might be one of many different options. Fortunately, you can just use switch to fetch only the information you need:\nswift\nswitch task {\n    case let .requestParameters(parameters, _):\n        // now you have parameters for `.requestParameters` task\n    case let .downloadParameters(parameters, _):\n        // now you also have parameters, but for `. downloadParameters ` task now\n    case let . requestCompositeData(_, urlParameters):\n        // now you have _url_ parameters for `. requestCompositeData` task\n    case let . requestCompositeParameters(bodyParameters, _, urlParameters):\n        // now you have both bodyParameters and urlParameters for `\n    case let .uploadCompositeMultipart(_, urlParameters):\n        // again you have `urlParameters` but now for multipart upload\n    default:\n        // here you won't really have any parameters, you have to handle that case as well\n}\nLet me know if this is of any use to you! If not, don't worry, please provide more info about your use-case and we will figure it out :) Cheers!. Hi @dagad! What you described is one of the options you have to use an access token in your API and it's totally fine!\nHowever, I believe that using our AccessTokenPlugin will give you a little bit more clarity and flexibility in the code. Please take a look at this tutorial about it, as @pietrocaselani pointed out, and let me know if you have any more questions about it :). Hey @olivinesguerra, could you please describe where did you fail to manually import Moya? There are a lot of steps in the Readme, so please point me in a direction in which you failed and I will try my best to help you resolve the issue!. Hey @rlam3, we don't really have anything like that. We usually preferred you to post an issue here so it is searchable for other people with the same problem. \nBut, apart from that, would there be any interest in a slack/discord channel? If so, please add \ud83d\udc4d to this comment.. The build error seems to be an issue with CocoaPods linting, gonna open a new PR for that one. Thanks for the review @LucianoPAlmeida!. Hey @LucianoPAlmeida! No worries, it seems to be working just fine after the fix. The culprit was the CocoaPods version (see referenced issue in the PR body). The build passes fine now, though, so it's all good! \ud83c\udf89 . @jdisho yeah, danger got stuck for some reason but retriggering the build helped! Thanks for the review!. Hey @marco-palumbo, sorry for the late reply. Do you happen to have an example project where this problem exists? I would have a look at it and see what could be the culprit.. Oh no worries @marco-palumbo, glad you\u2019ve figured it out! . Hey @v2kb2l, sorry for the late response. You probably figured this out already, so I'll take my time and try to answer with some more details about which encoding you should use. Let's start with the ParameterEncoding itself and what it is for.\nParameterEncoding was introduced to help with encoding parameters that you send to the server. Basically your server can accept your parameters in multiple ways, with classics like URL (https://server.com/endpoint?param1=1&param2=2), body (the params are not visible in the URL anymore, but are encoded in the request body) or multipart encoding, used for e.g. mixing file uploads with passing normal parameters as well. This means that ParameterEncoding is not really associated with the response, but rather the request itself.\nNow, about your question. As I can see, you say that your server accepts multipart/form-data encoding for that particular request. Setting aside if it's a good usage of multipart encoding, you should use our Task.uploadMultipart([MultipartData]) case instead of your normal requestParameters. If, however, that doesn't work as well, you would have to ask someone from the server to help you out as there might be some custom encoding used.\nLet me know if this was helpful or if you've figured it out and we can close the issue. Have a good day!. @BasThomas thanks! It's still a long way to go, though! . Update: it compiles, but I did a little workaround for willSend plugin method. I'm currently discussing if we could get a way of having willSend method provided by Alamofire, so gonna hold with this PR until that conversation is resolved.. Also finally fixed the \"waiting for Circle status\" thingy that wouldn't make a green status even though the build was correct. Turns out that we had a relict from CircleCI 1.0 (more here if someone is interested).. Hey @wwdc14. I'm not sure if this is a Moya problem, but rather Swift in general. In this case the method signature is quite complex so probably adding specific type in <> brackets could help.\nBut, from a quick look at the code, there might be a problem with T because once you declare it as APIResponse<TestModel> and then as APIResponse<TestModel2>.. @wwdc14 Moya doesn't have an API support for multiple simultaneous request, no. You would have to create it yourself.. Hey @wwdc14 no problem, happy to help! \ud83d\udc4d . Hey @vlainvaldez. That's an interesting way of forming data, indeed!\nFrom what I can see you'll need one parameter named identity that contains a string, in JSON format, which contains all other properties. In your example you were really close! You just turned your dictionary to data without JSON-specific format.\nSo how do we transform parameters to JSON-formatted data? A really simple example would be something along the lines:\n```swift\nlet params: [String: String] = [\"firstName\": ...] // your full params array\nlet identityData = try JSONSerialization.data(withJSONObject: params, options: []) \nlet identityFormData = MultipartFormData(provider: .data(identityData), name: \"identity\")\nvar multipartData = MultipartFormData\nmultipartData.append(identityFormData)\nreturn .uploadMultipart(multipartData)\n```\nNote: This was written without a compiler so you'd probably have to fix some bugs in the code, but I think you get the idea. \nLet me know if it helps!. @vlainvaldez glad you have worked this out \ud83c\udf89 . Hey @larryonoff, thanks for the PR! Was there something specific that happened in Result 4.1 that we don't want to support version 4.0?. @larryonoff makes sense, thanks! Would you please update SPM lock (probably swift package update if I'm not mistaken)? \n+ I see that the project doesn't want to build tests due to Alamofire update... Interestingly enough it seems like they've made a breaking change without a major update \ud83e\udd14 . @larryonoff when you look at the Cartfile.resolved (we use Carthage dependencies for building/testing), you can see that the Alamofire has bumped version to 4.8.1. Then, when we look at the build error in tests:\n```swift\n\u274c  /Users/distiller/Moya/Moya/Tests/EndpointClosureSpec.swift:65:19: method does not override any method from its superclass\noverride func upload(multipartFormData: @escaping (Alamofire.MultipartFormData) -> Void, usingThreshold encodingMemoryThreshold: UInt64, with urlRequest: URLRequestConvertible, encodingCompletion: ((SessionManager.MultipartFormDataEncodingResult) -> Void)?) {\n\n```\nit seems like Alamofire updated this method in their minor/patch release. If you have time to fix this one it would be great! If not, I could try to look around and help you out so no worries \ud83d\udc4d . Hey @wakaryry! See https://github.com/Moya/Moya/issues/1007, might help!\nIn case you still have some issues, please provide more context about what your server expects to get and we will figure it out. Cheers!. @wakaryry hmm, interesting. So it seems like your server is parsing None as a nil, not <null>. That might need a custom property serialization, but first, could you try:\n```swift\nstruct None: CustomStringConvertible {\nvar description: String { return \"None\" }\n\n}\n```\nand use it like province ?? None()?. I was suggested by the removed toAlamofire() function which our ParameterEncoding had. \ud83e\udd14But it was internal so I'm fine with removing the breaking change alias \u270c\ufe0f\n. Agreed \u270c\ufe0fRemoved the warning.\n. Seems like we are assigning 2x self.parameters to the newParameters variable, when it is not nil. I would just assign new array to it if its nil, otherwise do nothing :panda_face: \n. In that case we are sure we have the newParameters array (via check few lines above), so I would use ! (but it's me) :smiling_imp: \n. Same as above with 2x assigning.\n. We can use unwrappedHeaders here :)\n. Sure, no problem with that!\n. Perfect \ud83d\udcaf\n. Are you sure that if we use unwrappedHeaders instead of headers? we will have to cast? Tried that one in Xcode and seems like it's working just fine, but it might be just me \u00af(\u30c4)/\u00af\n. One last comment, this header has to go \ud83d\ude25\n. Thanks \ud83c\udf89 Sure, will do this today. \u270c\ufe0f\n. Of course! So the general idea of ServiceType is that this is the core of StructsAPI. Every enum that wants to use Moya with structs would have to conform to ServiceType. We then believe that when you conform to that protocol, you know what are you doing (I mean that is the risk I was talking about on hangout). So as a follow-up, I continue to believe the user and I try to fetch the associated object as it is a Resource (TargetType). But! I've made TargetType to conform to ServiceType as a default. So if you are using EnumAPI, it basically means that we don't need to look for associated object, we are the associated object, we are a TargetType (Resource). \nI don't know if that seems good to you, but let me know, I will try harder to express my mind \ud83e\udd15\n. Yeah, I've added this as a second option with using properties of a struct as a parameters. Sure, will do!\n. Nice one! I really like that \ud83d\ude4c One thing I can add to this is that we can create a computed property for example that will give us the target, e.g.:\nswift\nprivate var target: T {\n    switch self {\n        case .Struct(let t): return t\n    }\n}\nand then we can skip the switch stuff in other properties with just e.g. return target.path.\n. I think there is no need to use name requestWithQueue, we can just call it  request, but with one parameter more.\n. Yup, exactly my thoughts \ud83d\udc4d \n. \"And you should be using this too.\" gives me that weird feeling. What do you think about just deleting this line? Doesn't really change the context and feels \"nicer\" (at least for me \ud83d\ude2c) \n. This example is great! \ud83c\udf89 \nHow do you feel about changing the name of this example to something that is more verbose about the fact that we send an Array instead of a Dictionary, which is the default one? I don't know if this one is clear enough for beginners, which we aim for \ud83d\ude25\n. I feel like we should add here basic usage at least for RxSwift, without any endpoints, just to show how it works. Below we have SubclassingProvider & RxSwiftErrorHandling with kinda more advanced usage, but we didn't really show the basics of. ReactiveCocoa would be awesome as well. \n. Could you align the left margin with the line below, please? And also the comment below as well.\n. Great! Although I don't know if we should split RxSwift and ReactiveCocoa into docs and examples separately. What do you think?\n. Hmm, didn't really check the code so forgive me, but is there a reason we cannot use typealias for existing enum from Alamofire? \n. Hmm, does this line compile for you? \n. Oh, right, no probs, confused me a bit huh\n. Could you align vertically default with case .users? \n. \ud83d\udc4d \n. Hmm, should we also consider making defaultAlamofireManager a variable? Looking by the init this is the only place we use brackets.\n. On the other hand this is another breaking change... \ud83e\udd14\n. Oh, right! Was just thinking out loud. Let's just leave it as it is for now \ud83d\udc4d\n. Hmm, here we don't have default value for keyPath parameter, but for RxSwift & ReactiveSwift extensions we have nil as default. I would rather stick to one, but I'm not sure which one is better, what do you think?\n. Also I'm not sure whether it should be .jsonMapping error or .stringMapping error. The function name still is mapString so I'm more sold on the latter.\n. Normally I would stand with @BasThomas, but in this case, where the implementation is different, I think we can use the solution proposed by @bchrobot.\n. Hmm, here we have URLRequest for request parameter, and for willSendRequest we have RequestType instead. Even tho parameter names are the same, the type is different. Dunno if it is worth to reconsider naming/parameter types here. Thoughts? . Hmm, dunno about this \"when request is being prepared\". Should the user be worried that Moya is still preparing the request? I'd go with something that describes it more clearly. Your docs for functions are good enough imo.. The same situation here (as for preparing).. Maybe we can be more descriptive about events and in the parenthesis add the function name? So we can describe it freely and still have reference in the line. What do you think?\nAlso I've just noticed that you missed \"to\" in:\n\nplugins are used to modify requests. Hmm, would it possible to remove the RequestType with modification of CredentialsPlugin? Not sure because didn't really investigate it that much.. 1. -> 2.. This is a minor one, but I think we can strip these (_, _, _) when we don't need any of the parameters in there.. The syntax is correct, Nimble allows operators for equivalence/comparison.. In my opinion this is the most reasonable - one month is too short, 3 months kinda too long?. On the other hand, if we introduce this bot now, we might want to give more time for users to respond to issues. Thus, making me change the default of 7 days to 14 for days until close. I think we may adjust the values as we go, but at the beginning it might be better to start off high.. Wasn't sure if this should be the only one white-listed labels, thoughts? . And also wasn't sure with naming in this one, took the default here.. This is also default comment, someone with better wording skills might want to take a stab at this one :D. I think it's meaningless to have a comment that says \"label was removed\", since it will be seen after any comment appears in the issue. This is just my opinion, though.  . Here, I was contemplating if suggestion to create a new issue will be better than reopening current one. I might like latter, but I'd love to hear your opinions.. Also, wasn't sure here, but I've figured, that we don't have a problem with PRs right now, but more with Issues.. I've decided to add this rule because it's tedious to comment every spec() func in the tests.. And this one because we have many workarounds needed for testing, so we would have a lot of comments to disable it.. I would agree if we had that much Issues, but we don't, really. On the first page we have an issue from December last year, so in my opinion 10/30 will be too short.. I agree! Both chore & confirmed bug are great additions.. I really like no recent activity. Gonna change to that one!. shouldn't the indentation here be smaller? . Oh, okay, let's just leave it as it is then \ud83d\udc4d . +1 to creating a new one just because of locking, so let's stay with what we've got ^^. So, how are we feeling about this one? @AndrewSB, @pedrovereza, @BasThomas . This one parameter would have been without default value. Otherwise we have similar declarations, because if you don't need to specify this parameter, you have 2 identical initializers in most of the cases. Thus:\nswift\nstubScheduler: DateSchedulerProtocol? = nil\n-> \nswift\nstubScheduler: DateSchedulerProtocol?. you need to store nil to stubScheduler before super.init(). can we please remove this change from the PR?. Let's specify in comment that it would always send parameters in URL here, and above will depend on a http method (GET, HEAD and DELETE being in URL, and in body otherwise). Nice catch!. Maybe MultipartFormData.swift would be better for this extension?. Hmm, because of the queues we're adding in the other PR, I think this scheduler could be removed and then making this extensions would be quite easy.. Oh, we might just use the Rx Reactive struct, like:\nswift\nextension Reactive where Base: MoyaProvider {\n    func request() -> Observable<Response> {...}\n}\n\nIt is probably similar in ReactiveSwift, but you would have to check :D. I think we just need to conform to ReactiveCompatible like:\nswift\nextension MoyaProvider: ReactiveCompatible {}\nAnd the same for ReactiveSwift. This way we get .rx & .reactive properties for free and we could remove RxProvider & ReactiveProvider, using only rx.request & reactive.request (which we have already implemented, just need to extract request functions from providers into extensions to Reactive structs). We need to add queue also to stubbed request.. This line below is kinda unused if we do have our own formatter. Also in case of lack of message (nil), we still print request body (which we didn't before). How about this little change to if let:\nswift\nif let body = request?.httpBody, let stringOutput = requestDataFormatter?(body) ?? String(data: body, encoding: .utf8), isVerbose {...}\nLet me know what do you think.. lack of after MoyaProvider breaks the whole paragraph :D. also lack of after MoyaProvider. maybe request/requestParameters? or requestWithParameters? I feel like encoded is not as a user-friendly name as parameters \ud83d\ude04 requestWithParameters reminds me of Swift 2.0 though \ud83d\ude1e . I feel like we don't actually need to add this to the core. We do not use it anywhere, and this can be easily added to the migration guide as a best practice to use. Or better yet, make an extension to ParameterEncoding:\nswift\nextension ParameterEncoding. {\n    static var default: JSONEncoding {\n        return JSONEncoding.default\n    }\n}\nThis way it would be easily used in task:\nswift\nreturn .request(parameters: [:], encoding: .default). Usually this is done in an Endpoint, take a look here. If we cannot encode parameters, we throw a MoyaError.requestMapping(_:) error to the user.. I don't mind either so I did a quick research what we use in the project: we use ...Type & ...able for protocols and thus I agree, I'll change to MoyaProviderType \ud83d\udc4d . Was doing my own CR and didn't want to make multiple commits with code review fixes, so waited till someone did it as well so I can cumulate \ud83d\ude04 . I think that we can't just remove option to update parameters/parameterEncoding in the Endpoint closure. Yes, we don't have it as separate properties, but we can replace it with task - it would be even more customizable.. This is a place where you would do a switch and prepare the request based on a task. We don't really want to do it in the core file since preparing the request based on an Endpoint is Endpoint's responsibility. Another benefit is the fact that when we return nil, there is an error thrown in basic request mapping and we don't even have to do a request (source).. I think we can remove the defaultParameterEncoding from our codebase - I meant that someone can implement it in their own codebase if its convenient for them.. \"A requests body set with encoded parameters\". I feel like this have its own file in the docs.. we also need to properly test encoding the request from an endpoint. hmm, dunno what happened :D for sure it is not supposed to be here. You are right, default argument seems like a good idea. I'm thinking of nil, since in case of a nil self.callbackQueue is taken anyways. What do you think?. Making this one into the 9.0.0 release would be cool, but we can't do that without testing it (this is one of the major things we changed in the whole core). We can do that in separate PR, but still I think merging this should happen with tests in it. \nI understand that you may be busy now, though. If that's the case, let me know and maybe someone can help with the tests and additional feedback on the code review (and rebase in the near future). There is still work to do, unfortunately, but we are close.. We probably can't, yeah. But I think just the fact that you can change the task yourself in the endpointClosure is enough, though. . we can just do returns in cases I think:\nswift\nreturn try? parameterEncoding.encode(request, with: parameters). this is minor, but you forgot ` aroundTask. this is probably leftover from rebasing, but we have this entry already (line 15). I wouldn't know what this function does without checking the source code, unfortunately. I'm thinking if we can create a function that would return cancellable, but also it would check thestubBehaviorand base on that one. Like:\n```swift\nfunc abc(...) -> Cancellable {\n    switch stubBehavior {\n        ...\n    }\n}\n```\nso we could remove this logic inperformNetworkingand just assign theCancellable`:\nswift\ncancellableToken.innerCancellable = abc(...)\nit's responsibility would be to send a request based on types & return Cancellable. What do you think?. I can help with tests, no problem with that \ud83d\udc4d I'll try to do it ASAP.. Correct me if I'm wrong, but if you want to add parameters to the multipart request, you want to add them using MultipartFormData, not parameters property (at least in Alamofire). You may want to add parameters to the URL, though, so that would be an exception. But I'm not sure if we should allow more encodings, like JSON, too.. Also, not sure about that one. If you want to upload a file with parameters, you would just use uploadMultipart.. Yup, usage is \ud83d\udcaf . I'd change that a little bit. It feels a bit odd to me. Maybe something along the lines:\n\nTo use reactive extensions you don't need any additional setup. Just use your MoyaProvider instance.. Oh, this is probably more of a preference and I don't mind both - just the general assumption and code style is to rather preserve the original object and use extension when needed. Also, I wouldn't worry so much about forgetting to use rx or reactive, since these are really extensively used by people who use reactive programming with ReactiveSwift or RxSwift. . all changes should go to the Next section. Hmm, still multiple duplication of entries in here (9.0.0-alpha.1). We should remove them as well.. What worries me here is that we allow URLEncoding as a bodyEncoding \ud83e\udd14 . I'd add a parameter name for DownloadDestination. We should add a description why this test has failed.. Same here.. In fact URLEncoding.default sends parameters in URL when possible, not always (see #ParameterEncoding).. I'm more and more keen to remove this one case. It makes it so we still have undefined behavior. And undefined behavior is kinda what we wanted to avoid in the first place. Oh, and we can achieve this one using requestCompositeData quite easy. Any other @Moya/contributors have an opinion on that one? \ud83e\udd14 . Okay, we can start with failing on wrong encoding (although checking if this is a URLEncoding type might be not so efficient, you can still create your own encoding that does the same encoding as URLEncoding, just with a different type name \ud83d\ude04). We are using fatalError when checking if everything is correct with multipart here as well, but we might want to update it in the future to some more user-friendly error throwing. I think this is a decent start.. Great \ud83d\udc4d . This is a stylistic one: can we remove the empty lines in the code (separating cases, first line empty in a method body)? This is probably a lot nicer for many people (including you), but I don't think we want to change the code style right now, especially with so much code changes.. We should pass task in the .init as well here, because otherwise we will get a .requestPlain always.. Another stylistic one, signatures are often referenced as:\nswift\n.requestParameters(parameters:encoding:)\n\ninstead of:\nswift\n.requestParameters(parameters:,encoding:). Hm, not sure what you wanted to do here, but e.g.) doesn't seem like a desired result? \ud83d\ude04 Also I'd go with code instead of \"code\".. Oh, I though that it was a typo, sorry :). ~~Good one, changing this one in a sec!~~ Done!. I was thinking also about this token here. Normally you don't really have your token when initializing the MoyaProvider. Could we use a closure here that will get us a token? Marking it with autoclosure should also allow people with token upfront to have a nicer migration. \nWhat do you think?. Nice! Really a clean way of implementing it :). Yeah, exactly what I imagined. We probably need to have it marked @escaping since it will be used in later stages of the endpoint -> request cycle.. I would start with why you would want to check out this PR, you don't need to check it if you don't really subclass reactive provider. Like:\nIf you subclass reactive provider, check out this pull request.... How about just:\n\nAdded tests for Single<Response> operators.\n\nThe refactor part might not be as important in my opinion.. I think that fatalError might better here, as it is not a failed test, but rather an error in preparation (this one is in few more places as well). We may want to stick to more verbose conditional statements (as we had before):\n#if os(iOS) || os(watchOS) || os(tvOS)\n    ...\n  #elseif os(OSX)\n    ...\n  #endif. as we have here \ud83d\ude04 . This is a minor one, but you forgot backticks around Single<Response> \ud83d\ude04 . Can we rather stick to convention \"Added/Fixed\"? e.g. \"Fixed a bug with no progress for data request\". Can we add this one before Fixed entry? Just to keep it in parts Added -> Fixed.... Do you think we should add tests that check whether the last result have both progress & response?. I wouldn't remove old Swift versions, especially 2.3 which is still used in some projects. . 4.X would be supported probably only for Moya/Core, not for Moya/RxSwift (dunno how about Moya/ReactiveSwift, but probably the same situation as with RxSwift). Not sure how to describe it in this table, though.. 3.0 is probably not working from some of the last versions (like 8.0.3 and up maybe?). Not sure if all versions from 8.0 support Swift 3.1/3.2. It might be good idea to separate Swift 3.0, 3.1, 3.2 in this table.. @BasThomas @Coeur This is because we can't support two major versions of reactive extensions libraries at once. We could support Swift 4 in our core with very little change in our codebase, so we did it. Of course we will create a new version with new major versions of reactive extensions libraries just after 9.0.0, where beta might be really soon available.\nAbout the table, maybe we should split the Moya version column on Moya and Moya/RxSwift, Moya/ReactiveSwift.. Yeah, I think we can skip changelog entry here.. Hmm, CI is failing on this one Bundle.urlForImageResource(\"testImage.png\")!, could you check if it compiles for you locally?. Huh, this one I'm having trouble with (kinda a bit too complicated for me). Do you think you could simplify this one a little bit? . Oh, I think I understand now. We are checking two things (correct me if I'm wrong):\n1. Check if the progress is tracked correctly.\n2. Check if the response is correct as well.\nI think that we don't really have to test the response here (2.), as this is just probably sample data test and if it's returned correctly in the stubbed response.  If there is no such test yet (not sure now, would have to check), we could introduce it, but separately. \nWhat do you think?. Hmm, we should still split it, because in this test we check only for progress of the upload. In the next one we could check if the upload was correct (checking the JSON). Also we should somehow simplify this if/let hell.. You are correct that query string is more correct, but it might not be more understandable vs just using URL term. But I agree with the rest of the changes here \ud83d\udc4d . Exactly, but few good improvements there so I've added them as well!. Done, good catches! \ud83d\udc4d . I agree we could improve current plugin to allow using the token as a parameter (I had multiple occasions to use it once as a parameter and once as a header). \nHow about adding the parameter name in initializer? We could also add header name if needed. Then the cases could be:\n```swift\ninit(tokenClosure: ..., parameterName: ..., headerName: ...) { ... }\nenum AuthorizationType {\n    case basicInHeaders\n    case bearerInHeaders\n    case basicInParameters\n    case bearerInParameters\n    case none\n}\n```\nThis way I don't have to repeat each time what parameterName or headerName I need. Which is probably one of the most used cases I think.\nJust an idea, though.\nEdit: We could also split this enum into two by using optional AuthorizationType instead of .none case.. Should we also add Swift 3 here?. I know that you need to have Swift 4 on your machine, but can you use Swift 3.2 anyways (when you have 4 on your computer)? \ud83e\udd14 . Hmm, how would it handle having one call with parameter and one with header in one TargetType? Also, I agree that we could discuss it in another issue as this one will be buried fast.. Can we add it in the new column, Fixed, instead of Changed? Here is the guidelines we created for the Changelog.md, we didn't yet link it from Moya repository yet but we should make it visible somewhere.. You forgot to add ? in Dispsables.create { cancellableToken.cancel } below \ud83d\ude04 . \ud83d\udc4c . It's a trivial one, but can we change the name to SwiftMoyaCodeGenerator instead of Moya-Paw? \ud83d\ude09 . Could we also add here that we'd love some help on Chinese documentation as well? \ud83d\ude09 . Can we add a test that maps an array of objects? . don't we wanna catch the error here as well and make it a .jsonMapping as well? \ud83e\udd14 . hmm, isn't MoyaError equatable? if not, maybe we can make it so (at least for tests), would make this test cleaner. Hmm, is it a preconditionFailure though? For me it is a fail() as if the test failed, but I'm curious what's your opinion on that one. Also, it is a shame that we cannot avoid this if & preconditionFailure/fail \ud83d\udc7f . Can we describe a little more the stubClosure parameter? Just a little bit about few options of stubbing, the default argument etc. . :D you always spot my little errors that nobody notices, thanks!. This line is probably not needed now as we have only one migration guide per file.  Maybe also let's merge the titles  Migration Guide and Upgrade from 9.x to 10.x to something like Migration guide from 9.x to 10.x? What do you think?. We need context for urlRequest here (mention somewhere that this is used on endpoint or mostly in endpointClosure?. Oh, I didn't get it then, not so obvious - we can make it similar to what we have in Changelog, duplicate the name in the bullet points maybe?. Unfortunately in this case the resolver would say that the graph can't be resolved because he needs version starting from 10.0.0 :(. Hm, this is more of a general rule for all of the configurations: Moya, Moya/RxSwift, Moya/ReactiveSwift. Can we move it somewhere to e.g. Basic usage? Or maybe we should duplicate it in all the docs to make sure everyone sees it? \ud83e\udd14 . Oh, now that I think about it duplicating it in 4 places might not be the best idea. Maybe just cover it in Basic.md and  Providers.md?. I think the vast majority of people using Moya is using RxSwift extensions. At least it was the case few months back. When you start with Moya, whether your use reactive extensions or not, you should read the basics as well. I'm thinking if providers also should have it, though. \ud83e\udd14 . Okay cool, I agree \ud83d\udc4d Sorry for the delay in this one, @MrAsterisco, we got an agreement now \ud83d\ude04 . Not exactly the very same sentence, because we have Observable and disposing here. We would need to adopt it to a more broader use (if you don't retain the provider, it (probably) will be released before the response comes back). But yes, remove it from RxSwift.md and move to Providers.md and Basic.md \ud83d\udc4d . Don't be! Both in RxSwift and ReactiveSwift there is this struct called ReactiveBase or whatever, that is nothing more than the object that hold rx namespace and the object itself. E.g. when you have provider.rx, the base for it is a MoyaProvider object, provider.. Instead of checking for NSDictionary or NSArray, can we use isValidJSONObject method? I feel like it will be more scalable this way. Also we can use guard to make the code below more user-friendly (with the check for valid JSON object). should we add tests for mapping these primitives without keypath?. we should also add all of these to Single+MoyaSpec + SignalProducer+MoyaSpec. I'd rearrange the words for tests that \"should not do something\", to something similar to:\n\nit shouldn't map String data to an Int value, at a key path\n\nIdeally we would add a context that says:\nswift\ncontext(\"when using key path mapping\") {\n    it(\"shouldn't map String data to an Int value\")\n}\nAnd then maybe we could create a sharedExample and do not duplicate code for tests with and without a key path.\nBut it isn't required right now and we could make an issue for improving this in the future :). This is minor, but can you change Fixes to Fixed, please? :). Then again, we have Development.md already in place, maybe move it there? \ud83e\udd14 . how about pre-releases? alpha/beta, should it also be merged on master? \ud83e\udd14 . We're almost there \ud83d\ude04 We need a Breaking Change alias before the entry, and a column (probably Changed is the most fitting one):\n```\nNext\nChanged\n\nBreaking Change Updated minimum version of ReactiveSwift to 3.0.\n```. nice one \ud83d\udc4c . Examples were merged with main project so we don\u2019t use CocoaPods anymore.. Additional new line, I believe not necessary.. I would avoid giving implementation details in the comment - once you change the method you would have to remember to change the comment too. First line should be sufficient.. Again, I would avoid implementation details and say what does this stub option mean (in that case it wouldn\u2019t stub at all). Yeah, this is tricky. I will think about this one, but two ideas that come to my mind right now are:\nCreate two MultiTargets, one that stubs and one that does not (like with target types)\nIf target is not a Testing one, use empty data/crash, but this is not the best solution I think.. I know this isn't the main point of this PR, but is it really a breaking change? There is a default argument for this parameter, this parameter is a last one, and if you don't provide an option you will get the same behavior as in previous versions. Or am I missing something? \ud83e\udd14 . Oh! You are absolutely correct @SD10, I just don't see any issue that could break it, do you have anything particular in mind?. AFAIK this should be done by rake releasing script. This should be done by the script as well. oh, that is a copy-paste name I copied from the other spec, I'd go with something like: \"it appends additional multipart body in endpoint closure\". I've added this method here, but maybe we can add it as an internal extension to Moya.MultipartFormData?. We don't really have a Demo project per se, after migrating to one-project-to-rule-them-all \ud83d\ude04 I think that we should rewrite this sentence somehow to include this knowledge (that we should open a main Moya project and run examples in there) in a simple format. What do you think?. Actually, we use it in the core as well! If you have time to refactor this a little bit, go for it, if not, let's just make this an extension to MultipartFormData and add an issue for a little refactor?. validatedRequest?. I would restructure this testing code a little bit. Instead of using expects inside the closures, we could use waitUntil structure. This makes sure we don't skip this test, where with using expects inside the closure we are risking the situation where this test is skipped, e.g. when closure is not executed. See tests above for examples.. \ud83d\udc4c . hmm, how about adding customCodes as an associated value, so we can provide it in tests? we could also comment in tests why do we use this constant. how about it returns error for status code different than 287 and then we could add another case it returns valid response for status code 287. nitpick: we could change the name to include test in it, e.g. createTestMultipartFormData(). last one, can we add few empty lines to the code? looks really stacked \ud83d\ude05 \n\ne.g. before it(\"\"), in it(\"\") we could use a 3 blocks scenario similar to Act-Act-Assert which would add new line before waitUntil and one before expects.. can we change it to use waitUntil as well here? \ud83d\ude09 . how about returns an error?. few empty lines in these would be awesome as well \ud83d\ude04 . here a failure case is probably a failed test, as we expect only success case, right? and similar in the above test with the success case?. makes sense \ud83d\udc4d . can we phrase it the same as the entry above? it is basically the same thing, just fixed for different parts of the library, but might seem like something different. @freak4pc is this step necessary right now? I think we do pod install / pod update anymore. would be great!. @SD10 Sorry, I'm not sure I follow... Are you saying that we won't provide any support for MultiTarget with TestTargetType so the users would have to do it themselves?. @SD10 Oh, sorry if it sounded like that, I was just trying to understand if that's what you would do. I don't think there is a 100% good solution for this, MultiTestTarget is okay, but still doesn't cover all cases (like mixed targets & test targets). I wonder if making few examples instead would be enough... What do you think?. this shouldn't have to use logic again, it is defined on Response and this way we can have inconsistent condense whenever we forgot to change the same line in 3 places after a fix/change... let's change it to:\nswift\n     public func filter(statusCodes: Range<Int>) -> SignalProducer<Value, MoyaError> {\n         return producer.flatMap(.latest) { response -> SignalProducer<Value, Error> in\n             return unwrapThrowable { try response.filter(statusCodes: statusCodes) }\n          }\n      }. the same situation here, as per ReactiveSwift version. can we also have a test for lower bound, please? (e.g. with range 200..<300). I agree, never really trusted String(describing:) \ud83d\ude05 You just miss the fact that the value is optional and the returned string is not something you'd expect! 2 separate cases seems reasonable to me \ud83d\udc4d . I think that returning optional value is good though. Right now you need to have the knowledge that the value is useless for .none case. With optional value you'll always get a meaningful value from it, if you don't, you'll get nil.\nIt is kinda different with ValidationType, because you'll either way check if the statusCode is in the returning array. In this case you will need an additional conditional statement, that if the string is empty, do not do anything.\nBut yeah we could improve the ValidationType in the future if needed.. I would move this line to the paragraph before \"For example\", as the last sentence.. Yeah I like it better as well.. Yeah, and also I'd add a quick explanation what this closure does as well.. Right now the sentence doesn't feel connected to the paragraph above, at least for me. Maybe we could change it to something like:\n\nIf you want to setup your own sampleResponseClosure, you have few options to return in it:\n\nOr any other sentence that goes: \"this is a default one, but you could also specify one of the following\".. How about removing the part about the return type? Like in the above filter(statusCode: Int)?. We could. We could also extract output as it is not that clear of a type as well. Maybe we could create two typealiases for these?. Oh, if you are talking about both output & ouputFormat then I guess yeah \ud83d\udc4d Maybe the Formatter object name a bit more verbose, like Output as it is an output + output format.  . Yeah, I agree.. I like the idea for the generic Formatter class, but imo all of the properties should have a default value, as I don't usually want to override everything. Also, how do you feel about namespacing the Formatter object in the NetworkLoggerPlugin?\nswift\npublic final class NetworkLoggerPlugin: PluginType {\n    class Formatter {}\n}. Would you be up for adding SPM to the checks here as well? Seems like we only check if Carthage was updated and CP not or CP was updated and Carthage not - maybe we could add Package checks as well in here.. I think that we should just leave this property internal. More than half of the errors do not have the underlying error inside of it so it might confuse more people than it could help.\nAlso, we already have a case named underlying in Moya.error and so it might be confusing as well: is the underlyingError an error of the underlying case or just an error associated with the case? Do you have an idea of a different name for this purpose?. @LucianoPAlmeida I guess I just use it because it's a lot more convenient to just type == instead of .to(equal(value)).. \ud83e\udd26\u200d\u2642\ufe0f thanks @pedrovereza!. ",
    "shinyaohira": "Thanks, I'll try it!\n. Thanks!\n. ",
    "gfpacheco": "The current version of this solution is:\n``` swift\nlet compositeParameterEncodingRequestClosure(endpoint: Endpoint, closure: NSURLRequest -> Void) -> Void {\n    guard let parameters = endpoint.parameters else {\n        return closure(endpoint.urlRequest)\n    }\nlet (queryRequest, _) = ParameterEncoding.URL.encode(endpoint.urlRequest, parameters: (parameters[\"query\"] as! [String: AnyObject]))\nlet (bodyRequest, _) = ParameterEncoding.JSON.encode(endpoint.urlRequest, parameters: (parameters[\"body\"] as! [String: AnyObject]))\nlet compositeRequest = queryRequest.mutableCopy() as! NSMutableURLRequest\ncompositeRequest.HTTPBody = bodyRequest.HTTPBody\nreturn closure(compositeRequest)\n\n}\n```\nand use it as the requestClosure of your provider.\n. ",
    "jhihguan": "I don't know why but I can't build my url with parameter[\"query\"]\nex: url is example.com, parameter[\"query\"] = [\"q\": \"wane\"]\nafter ParameterEncoding.URL.encode(endpoint.urlRequest, parameters: (parameters[\"query\"] as! [String: AnyObject]))\nthe url will still be example.com but not example.com?q=wane\nI end up change the code to\n``` swift\nlet compositeParameterEncodingClosure: (URLRequestConvertible, [String: AnyObject]?) -> (NSMutableURLRequest, NSError?) = { request, parameters in\n    guard let parameters = parameters else {\n        return (request.URLRequest, nil)\n    }\nlet (bodyRequest, _) = ParameterEncoding.JSON.encode(request, parameters: parameters[\"body\"] as? [String: AnyObject])\nlet compositeRequest = bodyRequest.mutableCopy() as! NSMutableURLRequest\ncompositeRequest.HTTPBody = bodyRequest.HTTPBody\nif let query = parameters[\"query\"] as? [String: String],\n    let url = request.URLRequest.URL?.absoluteString,\n    var urlComponent = NSURLComponents(string: url) {\n    urlComponent.queryItems = query.flatMap {\n        NSURLQueryItem.init(name: $0.0, value: $0.1)\n    }\n    compositeRequest.URL = urlComponent.URL\n}\nreturn (compositeRequest, nil)\n\n}\n```\n. ",
    "mixdesign": "In case anyone wants to perform: [only Query] or [Query + Body] (application/json) request:\n```swift\nstruct CompositeEncoding: ParameterEncoding {\n    public func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n        guard let parameters = parameters else {\n            return try urlRequest.asURLRequest()\n        }\n    let queryParameters = (parameters[\"query\"] as! Parameters)\n    let queryRequest = try URLEncoding(destination: .queryString).encode(urlRequest, with: queryParameters)\n\n    if let body = parameters[\"body\"] {\n        let bodyParameters = (body as! Parameters)\n        var bodyRequest = try JSONEncoding().encode(urlRequest, with: bodyParameters)\n\n        bodyRequest.url = queryRequest.url\n        return bodyRequest\n    } else {\n        return queryRequest\n    }\n}\n\n}\npublic var parameterEncoding: ParameterEncoding {\n    return CompositeEncoding() // For all requests composite encoding.\n}\npublic var parameters: [String: Any]? {\n    var params:[String: Any] = [:]\n    params[\"query\"] = [\"token\": API_TOKEN, \"appId\":API_APP_ID, \"appKey\":API_APP_KEY]\nswitch self {\n    case .validatePhone(let phone):\n        params[\"body\"] = [\"phone\":phone] // Setting body attribute finally makes request application/json\n        break\n    default: break\n}\nreturn params\n\n}\n```\n. ",
    "ivanruizscm": "Ok! Fixed. Waiting for it. Theres a branch for 5.0 so i dont have to rename it later?\n. Still getting 4.5.0 with this repo url.\n``\nivan.ruiz$ pod update\nUpdate all pods\nUpdating local specs repositories\nAnalyzing dependencies\nPre-downloading:Moyafromhttps://github.com/Moya/Moya`\nRemoving RxSwift\nDownloading dependencies\nUsing Alamofire (3.1.3)\nInstalling Moya 4.5.0 (was 4.5.0)\nGenerating Pods project\nIntegrating client project\nSending stats\nPod installation complete! There is 1 dependency from the Podfile and 2 total\npods installed.\nAFE0806015:TestingMoya ivan.ruiz$ cat Podfile\nUncomment this line to define a global platform for your project\nplatform :ios, '8.0'\nUncomment this line if you're using Swift\nuse_frameworks!\ntarget 'TestingMoya' do\n    pod 'Moya', :git => 'https://github.com/Moya/Moya'\nend\ntarget 'TestingMoyaTests' do\nend\ntarget 'TestingMoyaUITests' do\nend\n```\n. Yes, now points to 5.0.0 \nThank you all\n. Nope, i want to pass those parameters to my endpointClosure cause i need to modify my headers\nSee my endPointClousure which uses      \"userString\" and \"passwordString\"\n    let credentialData = \"userString:passwordString\".dataUsingEncoding(NSUTF8StringEncoding)!\n. Nope, i want to pass those parameters to my endpointClosure cause i need to modify my headers\nSee my endPointClousure which uses      \"userString\" and \"passwordString\"\n    let credentialData = \"userString:passwordString\".dataUsingEncoding(NSUTF8StringEncoding)!\n. Awesome! \nEdit suggest: case .Login \n. Awesome! \nEdit suggest: case .Login \n. And its weird to me that if i do in one line forcing everything seems working:\nWorks:\n\nDont work:\n\n. And its weird to me that if i do in one line forcing everything seems working:\nWorks:\n\nDont work:\n\n. Yes, as you said you had to explicy set the return type. If anyone interested:\nfunc getCustomers() -> Observable<[Customer]> {\n        return TestApiProvider.request(TestApi.Customers).map { response -> [Customer]  in\n            do {\n                if  let customersJSON: NSArray? = try response.mapJSON() as? NSArray {\n                    if let customers = Mapper().mapArray(customersJSON) {\n                        return customers\n                    }\n                    throw CustomError.ParseError\n                }\n            } catch {\n                throw CustomError.ServerError\n            }\n        }\n    }\nenum CustomError: ErrorType {\n    case ParseError\n    case ServerError\n}\n. Yes, as you said you had to explicy set the return type. If anyone interested:\nfunc getCustomers() -> Observable<[Customer]> {\n        return TestApiProvider.request(TestApi.Customers).map { response -> [Customer]  in\n            do {\n                if  let customersJSON: NSArray? = try response.mapJSON() as? NSArray {\n                    if let customers = Mapper().mapArray(customersJSON) {\n                        return customers\n                    }\n                    throw CustomError.ParseError\n                }\n            } catch {\n                throw CustomError.ServerError\n            }\n        }\n    }\nenum CustomError: ErrorType {\n    case ParseError\n    case ServerError\n}\n. \n. \n. For now i can leave like this: :-1:    \n``` swift\nswitch target {\n    case .Customers(let u, let p):\n        return endPointWithAuthHeader(u, p: p, endpoint: endpoint)\n    case .Properties(let u, let p):\n        return endPointWithAuthHeader(u, p: p, endpoint: endpoint)\n    case .Login(let u, let p):\n        return endPointWithAuthHeader(u, p: p, endpoint: endpoint)\n    }\n}\nfunc endPointWithAuthHeader(u: String, p:String, endpoint: Endpoint) -> Endpoint {\n        let credentialData = \"(u):(p)\".dataUsingEncoding(NSUTF8StringEncoding)!\n        let base64Credentials = credentialData.base64EncodedStringWithOptions([])\n        return endpoint.endpointByAddingHTTPHeaderFields([\"Authorization\": \"Basic (base64Credentials)\"])\n}\n```\n. For now i can leave like this: :-1:    \n``` swift\nswitch target {\n    case .Customers(let u, let p):\n        return endPointWithAuthHeader(u, p: p, endpoint: endpoint)\n    case .Properties(let u, let p):\n        return endPointWithAuthHeader(u, p: p, endpoint: endpoint)\n    case .Login(let u, let p):\n        return endPointWithAuthHeader(u, p: p, endpoint: endpoint)\n    }\n}\nfunc endPointWithAuthHeader(u: String, p:String, endpoint: Endpoint) -> Endpoint {\n        let credentialData = \"(u):(p)\".dataUsingEncoding(NSUTF8StringEncoding)!\n        let base64Credentials = credentialData.base64EncodedStringWithOptions([])\n        return endpoint.endpointByAddingHTTPHeaderFields([\"Authorization\": \"Basic (base64Credentials)\"])\n}\n```\n. How can i add it without retreiving the username/password?\n. How can i add it without retreiving the username/password?\n. When i call the endPoint i pass a username/password stored in disk. Then i add those to the header. I dont want to retreive those directly from here. I have a  'user repository' where i store them.\n. When i call the endPoint i pass a username/password stored in disk. Then i add those to the header. I dont want to retreive those directly from here. I have a  'user repository' where i store them.\n. I solved by manually setting the version in Cocoapod:\npod 'Moya/RxSwift', '5.3.0'\n. I solved by manually setting the version in Cocoapod:\npod 'Moya/RxSwift', '5.3.0'\n. This is correct?\nvar endpointClosure = { (target: NextVisitApi) -> Endpoint<NextVisitApi> in\n    let endpoint: Endpoint<NextVisitApi> = Endpoint<NextVisitApi>(\n        URL: url(target),\n        sampleResponseClosure: {.NetworkResponse(200, target.sampleData)},\n        method: target.method,\n        parameters: target.parameters\n    )\n    switch target {\n    case .VisitsPUT:\n        return endpoint.endpointByAddingParameterEncoding(.URL).endpointByAddingHTTPHeaderFields([\"Content-Type\":\"application/x-www-form-urlencoded; charset=UTF-8\"])\n    default:\n        return endPointWithAuthHeader(endpoint)\n    }\n}\n. This is correct?\nvar endpointClosure = { (target: NextVisitApi) -> Endpoint<NextVisitApi> in\n    let endpoint: Endpoint<NextVisitApi> = Endpoint<NextVisitApi>(\n        URL: url(target),\n        sampleResponseClosure: {.NetworkResponse(200, target.sampleData)},\n        method: target.method,\n        parameters: target.parameters\n    )\n    switch target {\n    case .VisitsPUT:\n        return endpoint.endpointByAddingParameterEncoding(.URL).endpointByAddingHTTPHeaderFields([\"Content-Type\":\"application/x-www-form-urlencoded; charset=UTF-8\"])\n    default:\n        return endPointWithAuthHeader(endpoint)\n    }\n}\n. ",
    "pschneider": "@ashfurrow Just curious if this is still the best solution doing HTTP Basic Auth with Moya. Didn't found a way to set NSURLAuthenticationMethodHTTPBasic\nIs it correct that I can't use the credentialsPlugin doing this? \nThanks\n. @ashfurrow  Alright, thank you for your fast response!\n. This seems to be related to #681 \nStill trying to figure out how to set the encoding in Alamofire.request via Moya now.\n. This seems to be related to #681 \nStill trying to figure out how to set the encoding in Alamofire.request via Moya now.\n. ",
    "wangshengjia": "Just a quick guess: you sure about (request.request as? NSMutableURLRequest)? will not give a nil cause NSURLRequest not same as NSMutableURLRequest ?\n. Hmm.. you are right. It's not caused by nil\nApparently, it's because willSendRequest get called after request.resume()... (It probably should not !)\nSo the workaround for now is using the approach mentioned by @ashfurrow in issue https://github.com/Moya/Moya/issues/325#issuecomment-161039326, it will work.\n. I've finally got some time in weekend and could be back to this issue. Here is my rethought.\n- All the manipulations of NSURLRequest should be done in either endpoingClosure or requestClosure, the latter is the original way to resolve/alter a request, and should probably be the answer of this issue. (I should've noticed it at the first place:disappointed: ).\n- It is probably not a good idea to manipulate request in plugin. \n  Think about this case: assume we have let plugins = [A, B, C, D], \n  - C could sometimes break A, because C could alter some value which already have been altered by A again accidentally, then we got a silent failure.\n  - D will be functional based on B, which means [A, B, C, D] will work, but [A, D, C, B] will not work.\n  - :bomb: \nThe Plugin mechanism is basically a \"multicast delegation\" pattern. If we do not keep every plugin entirely independent (such as alter the same instance one by one), we could easily entry into a mess.\nConclusion:\n- This is not a bug. :wink: \n- We may need to rethink also the implementation of CredentialsPlugin. :thought_balloon: \n. Btw, I suppose if you can create the PR based on another branch instead of master, that would be great. :tada: \n. Ah... my bad.. I didn't see it. It should compile without any error then.\nOn the other hand.. it seems to that you can not just fake methods without implementing the details. It turns out this solution will likely break the implementation of willSendRequest in CredentialsPlugin\nWhy not just set startRequestsImmediately to false by default and call resume() manually.\n. @mrahmiao Great, thx\n. +10000 :tada: :+1: \n. ~~In this case, you can take advantage from \"Pattern Matching\" in Swift~~\n. Ok...I also run my tests this time, it won't work. I removed my answer\n. If you need to put the same user and password for any kind of endpoint, why not just add auth header directly without switch cases ?\n. Before all, there is nothing to apology, and thank you for addressing this issue :100: \nThe problem is probably from here, inside manager.request(urlRequest), it call resume() immediately.\nIn my opinion, this is a bug and should be fixed. I'll look forward and propose a PR to fix this.\n. Hmm, solution is surprisingly simple\ud83d\ude02 ... but it do solve our issue.  It's OK for me. I'll update PR #354 if there is no objection. \n. Yeah, in short terms, I think it would be suffice to modify ade1589 with default configuration:\n``` swift\n    public final class func DefaultAlamofireManager() -> Manager {\n        let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()\n        configuration.HTTPAdditionalHeaders = Alamofire.Manager.defaultHTTPHeaders\n    let manager = Alamofire.Manager(configuration: configuration)\n    manager.startRequestsImmediately = false\n    return manager\n}\n\n``\n. Checkoutpath&parameters` which mentioned in documentation Target.\nHope this is helpful :)\n. As discussed in #350 , I've updated PR with some more commits. Would you take a look?\n. :+1: \n. This approach is a little bit weird and will likely break the CredentialsPlugin.\nPersonally I suppose we can just set startRequestsImmediately to false and add alamoRequest.resume() right behind where we created alamoRequest\n. Nice catch ... \n. Probably non ...\n. Yeah.. I see what you mean. Me too actually, I'm not sure about another option. \nEither we find another way to build an Alamofire.Request ourself which is obviously not a good idea, or we can just pass a NSURLRequest instance into plugin's delegate method instead of Alamofire.Request. In latter case, we gain a safer plugin mechanism (as I mentioned here), but we will lose a little flexibility, it'll break CredentialsPlugin.\n\u00af_(\u30c4)_/\u00af , still seeking ...\n. Ah.. yes, my bad. I forgot to move(or remove) this line \ud83d\ude05\n. ",
    "mrahmiao": "I've printed the request and the mutable request do exist. \nswift\nprint(request.request)           // Optional(<NSMutableURLRequest: 0x7fa0fbf12e30> { URL: http://httpbin.org/post })\nprint(request.request != nil)    // true\nThis is what the logger logged:\n[\"Moya_Logger: [02/12/2015 05:53:18] Request: <NSMutableURLRequest: 0x7fd5134ae1c0> { URL: http://httpbin.org/post }\", \"Moya_Logger: [02/12/2015 05:53:19] Request Headers: [\\\"Content-Type\\\": \\\"application/x-www-form-urlencoded; charset=utf-8\\\", \\\"Hello\\\": \\\"World\\\"]\", \"Moya_Logger: [02/12/2015 05:53:19] HTTP Request Method: POST\"]\n. I've printed the request and the mutable request do exist. \nswift\nprint(request.request)           // Optional(<NSMutableURLRequest: 0x7fa0fbf12e30> { URL: http://httpbin.org/post })\nprint(request.request != nil)    // true\nThis is what the logger logged:\n[\"Moya_Logger: [02/12/2015 05:53:18] Request: <NSMutableURLRequest: 0x7fd5134ae1c0> { URL: http://httpbin.org/post }\", \"Moya_Logger: [02/12/2015 05:53:19] Request Headers: [\\\"Content-Type\\\": \\\"application/x-www-form-urlencoded; charset=utf-8\\\", \\\"Hello\\\": \\\"World\\\"]\", \"Moya_Logger: [02/12/2015 05:53:19] HTTP Request Method: POST\"]\n. Yes, the workaround in issue #325  can be used to solve my interception problem.\n~~And I think the solution of the plugin interception is to pause the request in the initializer of MoyaProvider by setting property startRequestsImmediately of the Alamofire manager to false. And then resume the request after enumerating plugins in sendRequest(_:request:completion:) of MoyaProvider.~~\nThe NSURLRequest objects have been wrapped into Alamofire request before willSendRequest(_:target:) has been invoked. And the process of wrapping (manager.request(request)) should happen after plugins finish process the raw requests.\n. Yes, the workaround in issue #325  can be used to solve my interception problem.\n~~And I think the solution of the plugin interception is to pause the request in the initializer of MoyaProvider by setting property startRequestsImmediately of the Alamofire manager to false. And then resume the request after enumerating plugins in sendRequest(_:request:completion:) of MoyaProvider.~~\nThe NSURLRequest objects have been wrapped into Alamofire request before willSendRequest(_:target:) has been invoked. And the process of wrapping (manager.request(request)) should happen after plugins finish process the raw requests.\n. Never notice the requestClosure ever before. Let me have a try on it.\n. Never notice the requestClosure ever before. Let me have a try on it.\n. @ashfurrow Resolved.\n. @ashfurrow Resolved.\n. Close this PR,  create a new branch in my local repo and then create a PR?\n. Close this PR,  create a new branch in my local repo and then create a PR?\n. @wangshengjia I've used my local repo in a new project and everything works fine.\n. @wangshengjia I've used my local repo in a new project and everything works fine.\n. @wangshengjia Credential is the missing part and I am working on it.\n. @wangshengjia Credential is the missing part and I am working on it.\n. @ashfurrow Alter the changelog and make a PR?\n. @ashfurrow Alter the changelog and make a PR?\n. It seems that separating two kinds of plugins (ordinary plugins and plugins used to change requests) is a much more appropriate way to solve this bug since almost no related point is exposed by Alamofire.\n. It seems that separating two kinds of plugins (ordinary plugins and plugins used to change requests) is a much more appropriate way to solve this bug since almost no related point is exposed by Alamofire.\n. Setting startRequestsImmediately to false and then call resume() will not work since the request will be wrapped in NSURLSessionDataTask (in Alamofire) in manager.request(request). At the time any changes to the original request would not affect the data task.\nAnd it is similar to the code below:\n``` swift\nlet request = NSMutableURLRequest(URL: NSURL(string: \"http://httpbin.org/post\")!)\nrequest.HTTPMethod = \"POST\"\nlet session = NSURLSession(configuration: NSURLSessionConfiguration.defaultSessionConfiguration())\nlet task = session.dataTaskWithRequest(request)\nrequest.allHTTPHeaderFields = [\"Hello\": \"World\"]\ntask.resume()\n```\nIf you inspect the outgoing request using Charles, you can see nothing attached to the request.\n. ",
    "mpurland": "I agree with @wangshengjia about the Plugin mechanism for manipulating requests can have problems. We could solve this with some type of requirements, ordering, priority, or another type of streaming/proxy solution (something along the lines of https://github.com/typelift/Aquifer comes to mind).\n. Sure, will do after I look into this build issue.\n. @ashfurrow Can you trunk push this updated podspec for the latest ReactiveCocoa alpha? It's needed in order to set the version in the Podfile for the Demo project in Moya. \nSee https://github.com/mpurland/Specs/blob/rac-update/Specs/ReactiveCocoa/4.0.4-alpha-4/ReactiveCocoa.podspec.json\n. For reference: https://github.com/ReactiveCocoa/ReactiveCocoa/issues/2590\n. I used the podspec for 4.0.3-alpha-3 as a base since that's the last one you added. 4.0.4-alpha-1 is a much older version actually...\n. Not sure what the next step here is. The carthage build works, but the Demo project will not build because it depends on CocoaPods and the Moya podspec which can't reference a branch or commit.\n. Done https://github.com/mhuusko5/Podspecs/pull/1 \n. Thanks @mhuusko5 \nRe-pushed commit, now let's see if travis builds it...\n. @ashfurrow This should be good now?\n. Ready to :boat: \n. @ashfurrow Thanks. Glad to help out now and in the future.\n. @ashfurrow Any reason why 4.0.2 is the Latest release and every release since is just a tag vs. a published release?\nAlso, any thoughts on submitting .framework.zip to releases for carthage compatibility so that Moya doesn't need to build (there are a lot of dependencies)?\n. I've run into that issue as well. I hope it will be addressed soon.\n. @ashfurrow The above issue about tags and releases was encountered in #332.\nIt looks like the Rakefile will need to be adjusted to publish releases vs. just tags if you would still only want to cut releases that way.\n. There is a dependency for rakefiles that I've seen referenced that can be used.\n. I think this is what I saw earlier: https://github.com/mpalmer/github-release\n. This is because 4.0.2 is the Latest release. The others are just tags. \n@minhoryang To fix this right now you can use:\ngithub \"Moya/Moya\" \"5.1.0\"\n. @ashfurrow Okay, sure, let me have a look\nEDIT:\nLooks good :+1: let it :boat: \n. :boat: \n. Did bumping to RC1 fix the issue?\n. With a separated out TargetType for each endpoint I take this approach:\nswift\nvar parameters: [String: AnyObject]? {\n    let optionalParameters: [String: AnyObject?] = [\"value\": nonOptionalValue, \"optionalValue\": optionalValue]\n    return optionalParameters.mapMaybe { $0 }\n}\nwhere mapMaybe is to take a [String: AnyObject?] to [String: AnyObject]\nAs from Swiftz:\nswift\nfunc mapMaybe<Value2>(f : Value -> Value2?) -> [Key : Value2]\n. Sure\n. ",
    "AndrewSB": "Closing this conversation in favor of https://github.com/Moya/Moya/pull/643.\nI didn't see this conversation when I was working on https://github.com/Moya/Moya/pull/563, but I'm glad to see other people had noticed the same problem I had \ud83d\ude04 \nOf course, please re-open this if there's anything lingering that should be discussed!. @marchinram: Is it possible to use a plugin? That would be awesome!\nBoth @colinta and I are using static functions after we see errors, that parse the JSON in an presentable error model. @colinta's code is actually open source, his function is called generateElloError https://github.com/ello/ello-ios/search?utf8=\u2713&q=generateElloError\n. I think I understand the two sides of this idea:\n1. The ability to use RxMoya without Alamofire dispatching to a different thread\n2. The fact that ^ is the expected behavior for a majority of apps using (Rx)Moya, to load a network resource and then show it in the UI\nI was wondering how to get closer to the first scenario - strictly as a client of this library, not to change the implementation inside RxMoya.\nIs it as simple as calling .observeOn(ABackgroundThreadForMoreProcessing.instance) after my .flatMap { provider.request(.zenResource) }?\nSo something like\nswift\nprovider.request(.networkResource) // called on whatever the current thread is\n    .observeOn(ABackgroundThreadForMoreProcessing.instance) \n    .flatMap(persistToLocalStorage) // called on the thread associated with ABackgroundThreadForMoreProcessing\n    .flatMap(expensiveConversionToMakePresentableToUI) // called on the thread associated with ABackgroundThreadForMoreProcessing\n    .observeOn(MainScheduler.instance)\n    .subscribe { /* bind the result to UI here */ } // called on the main thread\n. Also, maybe it would be cool to expose https://github.com/Alamofire/Alamofire#response-handler-queue through RxMoya? That way, as a Rx user, if I explicitly say .observeOn a specific scheduler, we can pass the queue related to that scheduler to Alamofire?\nEDIT: it looks like somebody had a similar question about doing the same with Alamofire https://github.com/Alamofire/Alamofire/issues/1147  (another use case that involved Rx) - may be worth adding an optional parameter to the provider that specifies which queue to run the responseHandler on \ud83d\udc40\n. That is so awesome \u2764\ufe0f\nI'll also go ahead and open a PR to track progress on the optional param.\nMy thoughts on where to put the param is definitely impacted by what I'm currently working on though: I'm moving an SDK (almost) completely onto a background thread, so all my requests are going to be moved onto a background thread, and I'm going to call .observeOn(MainScheduler.instance) after I've parsed and cached the data and to pass it to a client\nIt makes more sense to me as in the provider subclass - so I have consistent behavior across all my requests, but I can be convinced otherwise. What do you think?\n. Created #762 \ud83d\ude43\n. Created #762 \ud83d\ude43\n. @leonereveel this looks great! What's left before we can use it?\n. This looks like it's been solved with the 8.0.0 beta releases, I'm going to close it out. Please feel free to open this if there are any loose ends!\n. Closing this as it looks like it's been resolved \ud83d\ude04 thanks for contributing the README again, @lucasp90!\n. Are there any good examples of how people have setup testing for their apps?\n. Woah - thank you for open sourcing @colinta \ud83c\udf89\n. of course, sorry about the lack of details @ashfurrow.\nI'm on Xcode Version 7.3.1 (7D1014). I've tried building by:\n1. Cloning the repo, opening in Xcode and attempting to build Moya-iOS\n2. Doing a carthage update --no-use-binaries --platform ios with github \"Moya/Moya\" \"master\" in my Cartfile\n. @orta that sounds right\n@ashfurrow I downgraded to the latest release (6.5.0), so its not blocking \ud83d\ude04 thank you for the suggestion \nI'll work on that PR and have it up in a couple minutes!\n. got it @esttorhe \ud83d\ude04 \n. thanks for the invite @ashfurrow \ud83d\ude04, I accepted!\nAll the new notifications I'm getting from Moya are a little crazy, but I love what you're trying to do setting up a community of people around Moya.\n\ud83d\udd25\n. From the test failing on this PR, it looks like they were shared so circleci could find them and run tests on the demo & test schemes.\nIs there any way for circle CI to do so without the schemes being shared?\n. Here was the relevant Carthage update output:\n```\n Building scheme \"RxMoya iOS\" in Moya.xcodeproj\n Building scheme \"ReactiveMoya iOS\" in Moya.xcodeproj\n Building scheme \"Moya\" in Demo.xcworkspace\n Building scheme \"Moya iOS\" in Moya.xcodeproj\n Building scheme \"ReactiveMoya\" in Demo.xcworkspace\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:395:17: warning: passing 2 arguments to a callee as a single tuple value is deprecated\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:693:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:695:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:697:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:699:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:701:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ParameterEncoding.swift:239:29: warning: 'init(start:end:)' is deprecated: it will be removed in Swift 3.  Use the '..<' operator.\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Request.swift:471:17: warning: keyword 'protocol' does not need to be escaped in argument list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:32:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:35:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:187:9: warning: 'var' parameters are deprecated and will be removed in Swift 3\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:395:17: warning: passing 2 arguments to a callee as a single tuple value is deprecated\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:693:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:695:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:697:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:699:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:701:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ParameterEncoding.swift:239:29: warning: 'init(start:end:)' is deprecated: it will be removed in Swift 3.  Use the '..<' operator.\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Request.swift:471:17: warning: keyword 'protocol' does not need to be escaped in argument list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:32:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:35:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:187:9: warning: 'var' parameters are deprecated and will be removed in Swift 3\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Moya/Moya.swift:174:40: warning: curried function declaration syntax will be removed in a future version of Swift; use a single parameter list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Moya/Moya.swift:174:40: warning: curried function declaration syntax will be removed in a future version of Swift; use a single parameter list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:395:17: warning: passing 2 arguments to a callee as a single tuple value is deprecated\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:693:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:695:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:697:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:699:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:701:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ParameterEncoding.swift:239:29: warning: 'init(start:end:)' is deprecated: it will be removed in Swift 3.  Use the '..<' operator.\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Request.swift:471:17: warning: keyword 'protocol' does not need to be escaped in argument list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:32:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:35:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:187:9: warning: 'var' parameters are deprecated and will be removed in Swift 3\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:395:17: warning: passing 2 arguments to a callee as a single tuple value is deprecated\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:693:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:695:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:697:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:699:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:701:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ParameterEncoding.swift:239:29: warning: 'init(start:end:)' is deprecated: it will be removed in Swift 3.  Use the '..<' operator.\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Request.swift:471:17: warning: keyword 'protocol' does not need to be escaped in argument list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:32:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:35:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:187:9: warning: 'var' parameters are deprecated and will be removed in Swift 3\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Moya/Moya.swift:174:40: warning: curried function declaration syntax will be removed in a future version of Swift; use a single parameter list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Moya/Moya.swift:174:40: warning: curried function declaration syntax will be removed in a future version of Swift; use a single parameter list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:89:70: warning: FUNCTION is deprecated and will be removed in Swift 3, please use #function\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:89:99: warning: FILE is deprecated and will be removed in Swift 3, please use #file\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:89:121: warning: LINE is deprecated and will be removed in Swift 3, please use #line\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:164:41: warning: FUNCTION is deprecated and will be removed in Swift 3, please use #function\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:164:70: warning: FILE is deprecated and will be removed in Swift 3, please use #file\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:164:92: warning: LINE is deprecated and will be removed in Swift 3, please use #line\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:174:38: warning: FUNCTION is deprecated and will be removed in Swift 3, please use #function\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:174:67: warning: FILE is deprecated and will be removed in Swift 3, please use #file\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:174:89: warning: LINE is deprecated and will be removed in Swift 3, please use #line\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/ResultType.swift:5:2: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/ResultType.swift:6:2: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:89:70: warning: FUNCTION is deprecated and will be removed in Swift 3, please use #function\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:89:99: warning: FILE is deprecated and will be removed in Swift 3, please use #file\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:89:121: warning: LINE is deprecated and will be removed in Swift 3, please use #line\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:164:41: warning: FUNCTION is deprecated and will be removed in Swift 3, please use #function\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:164:70: warning: FILE is deprecated and will be removed in Swift 3, please use #file\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:164:92: warning: LINE is deprecated and will be removed in Swift 3, please use #line\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:174:38: warning: FUNCTION is deprecated and will be removed in Swift 3, please use #function\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:174:67: warning: FILE is deprecated and will be removed in Swift 3, please use #file\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/Result.swift:174:89: warning: LINE is deprecated and will be removed in Swift 3, please use #line\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/ResultType.swift:5:2: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Result/Result/ResultType.swift:6:2: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:395:17: warning: passing 2 arguments to a callee as a single tuple value is deprecated\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:693:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:695:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:697:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:699:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:701:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ParameterEncoding.swift:239:29: warning: 'init(start:end:)' is deprecated: it will be removed in Swift 3.  Use the '..<' operator.\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Request.swift:471:17: warning: keyword 'protocol' does not need to be escaped in argument list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:32:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:35:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:187:9: warning: 'var' parameters are deprecated and will be removed in Swift 3\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:395:17: warning: passing 2 arguments to a callee as a single tuple value is deprecated\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:693:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:695:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:697:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:699:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Manager.swift:701:18: warning: use of string literal for Objective-C selectors is deprecated; use '#selector' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ParameterEncoding.swift:239:29: warning: 'init(start:end:)' is deprecated: it will be removed in Swift 3.  Use the '..<' operator.\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/Request.swift:471:17: warning: keyword 'protocol' does not need to be escaped in argument list\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:32:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:35:5: warning: use of 'typealias' to declare associated types is deprecated; use 'associatedtype' instead\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/Alamofire/Source/ResponseSerialization.swift:187:9: warning: 'var' parameters are deprecated and will be removed in Swift 3\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:67:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:68:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:69:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:70:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:71:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:72:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:73:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:74:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:75:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:76:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:77:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:78:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:79:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:80:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:81:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:82:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:83:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:84:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:85:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n:0: error: could not build Objective-C module 'ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:67:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:68:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:69:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:70:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:71:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:72:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:73:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:74:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:75:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:76:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:77:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:78:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:79:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:80:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:81:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:82:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:83:10: error: include of non-modular header insid* BUILD FAILED \nThe following build commands failed:\n    CompileSwiftSources normal arm64 com.apple.xcode.tools.swift.compiler\n    CompileSwift normal arm64 /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/Swift/Action.swift\n    CompileSwift normal arm64 /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/Swift/Atomic.swift\n    CompileSwift normal arm64 /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/Swift/Bag.swift\n    CompileSwift normal arm64 /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/Swift/Disposable.swift\n(5 failures)\ne framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:84:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:85:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n:0: error: could not build Objective-C module 'ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:67:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:68:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:69:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:70:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:71:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:72:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:73:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:74:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:75:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:76:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:77:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:78:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:79:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:80:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:81:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:82:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:83:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:84:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:85:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n:0: error: could not build Objective-C module 'ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:67:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:68:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:69:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:70:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:71:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:72:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:73:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:74:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:75:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:76:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:77:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:78:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:79:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:80:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:81:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:82:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:83:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:84:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n/Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/ReactiveCocoa.h:85:10: error: include of non-modular header inside framework module 'ReactiveCocoa.ReactiveCocoa'\n:0: error: could not build Objective-C module 'ReactiveCocoa'\nA shell task (/usr/bin/xcrun xcodebuild -workspace /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Demo.xcworkspace -scheme ReactiveMoya -configuration Release -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES clean build) failed with exit code 65:\n BUILD FAILED \nThe following build commands failed:\n    CompileSwiftSources normal arm64 com.apple.xcode.tools.swift.compiler\n    CompileSwift normal arm64 /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/Swift/Action.swift\n    CompileSwift normal arm64 /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/Swift/Atomic.swift\n    CompileSwift normal arm64 /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/Swift/Bag.swift\n    CompileSwift normal arm64 /Users/asb/Developer/proxy-consumer-ios/Carthage/Checkouts/Moya/Demo/Pods/ReactiveCocoa/ReactiveCocoa/Swift/Disposable.swift\n(5 failures)\n```\nLooks like it fails on scheme \"ReactiveMoya\" in Demo.xcworkspace\n. The strange thing is, this is the first time I've seen the build error with schemes in Demo.xcworkspace, and I'm targeting release 6.5.0, so I'm not sure why this is coming up now...\nDebugging on my machine, seeing if anything has changed with carthage or the flags I've been using\n. Weird. So I got the problem fixed by deleting my project directory, cloning from github, and trying to build again.\nPrior to that I wiped Carthage's cache, deleted my Cartfile.resolved and the Carthage Build & Checkouts folder... \nNot sure why that happened, but it seems to be working as a clean install.\nWeird bug, but closing this because it doesn't seem to be a problem with Moya\n. thanks for taking care of this @ashfurrow \ud83d\ude04 \n. unfortunately - waiting for the Swift Package Manager to be released\nassuming that if you're using cocoapods, there is no RxMoya.TargetType since cocoapods doesn't actually build modules?\n. @ashfurrow playing with this right now, will hopefully update soon with what I ended up doing\n. I think the underlying issue (speaking from the perspective of the compiled code that Carthage gives us) is that you can't pass a Moya.TargetType to an RxMoyaProvider.\n. @petester42 can you talk more about the Carthage errors? \nI feel as if this problem will be exasperated once people start using Moya through the swift package manager, so finding an answer before we're up against a wall would be \ud83d\udd25\n. hey @petester42, saw that you merged master into your branch. Did you mean to rebase? It's still saying that your branch is ~120 commits behind master\nI'll try to take a look at this right now\n. Discovery: \nWhen I try to manually run what carthage uses to build the RxMoya iOS scheme (which is xcrun xcodebuild -project /Users/asb/Desktop/Bruh/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme \"RxMoya iOS\" -configuration Release -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=  CARTHAGE=YES clean build) here's the output I get:\n```\nxcrun xcodebuild -project /Users/asb/Desktop/Bruh/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme \"RxMoya iOS\" -configuration Release -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=                      \nBuild settings from command line:\n    BITCODE_GENERATION_MODE = bitcode\n    CODE_SIGN_IDENTITY = \n    CODE_SIGNING_REQUIRED = NO\n    ONLY_ACTIVE_ARCH = NO\n    SDKROOT = iphoneos9.3\n=== BUILD TARGET Moya tvOS OF PROJECT Moya WITH CONFIGURATION Release ===\n...\n...\n...\nCompileSwift fail\n```\nWhere it says it's trying to build the Moya tvOS target, not the RxMoya iOS target that was passed into xcrun as an argument... \nNot sure why that's happening, but the other targets seem to work correctly - just RxMoya iOS. I'm going to check out what happens if I try the same xcrun on master.\n. Stranger still: If I do a clean clone of Moya/Moya master, and I try the same xcrun with the RxMoya iOS target, it works, major steps:\n=== CLEAN TARGET Moya iOS OF PROJECT Moya WITH CONFIGURATION Release ===, \n=== CLEAN TARGET RxMoya iOS OF PROJECT Moya WITH CONFIGURATION Release ===,\n=== BUILD TARGET Moya iOS OF PROJECT Moya WITH CONFIGURATION Release ===, and then\n=== BUILD TARGET RxMoya iOS OF PROJECT Moya WITH CONFIGURATION Release ===.\nBut if I try @petester42's branch, it sometimes first cleans RxMoya watchOS, or RxMoya tvOS, and then fails while trying to build the same. Not sure why it's doing that.\nI'm going to branch off master and see if my branch has the same behavior or if one of @petester42's commits introduced the inconsistent clean+build procedure\n. @petester42 can you explain how https://github.com/Moya/Moya/commit/e1b02527c15b3920c9968511303f68358040d735 works?\nWhat script toggles the imports on and off?\n. gotcha, can you also touch upon the changes you made to the project.pbxproj? Reorganizing the files/ folder structure?\n. @petester42 you said \"cocoapods doesn't need the extra import\", does having the import cause a compile error for cocoa pods? or will it just be a redundant line of code? I feel as if it would be ok to live with the redundant line of code for cocoapod users to avoid to complexity of the build script\n. that makes sense - ok. Script it is\n. Yup! I did delete the pre & post build scripts in that PR \ud83d\udc4d\nOn Wed, Oct 19, 2016 at 8:07 PM Pierre-Marc Airoldi \nnotifications@github.com wrote:\n\nI think this has been addressed by #563\nhttps://github.com/Moya/Moya/pull/563\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/551#issuecomment-254997633, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dE0LBtCwBJZ6lpO2x2Cxj99HFd7Zks5q1trQgaJpZM4JNqy5\n.\n. Will do @ashfurrow! I still need to finish this up - another 2 or 3 commits before this works - will get a short write up here when I get around to those commits\n\nI'll also need to verify that this doesn't break the existing Cocoapods install - I can try a pod install, but it would be awesome if a contributor who's more familiar with Cocoapods (maybe you \ud83d\ude1b) also vets this PR when it's done\n. @petester42 instead of using a build script, it may be more idiomatic to use a compiler directive - similar to how RxCocoa uses RX_NO_MODULE https://github.com/ReactiveX/RxSwift/blob/master/RxCocoa/Common/DelegateProxyType.swift#L10\nWhat do you think? I haven't used a compiler directive before, but if it seems like a good idea we can give implementing it a shot\n. Just got around to finish implementing this, what I've done is importing the Moya framework into each of the Reactive & Rx source files, and remove all Moya source files from the Reactive and Rx targets.\nCurrently I'm importing Moya into the Reactive & Rx files like so:\n```\nif !COCOAPOD\nimport Moya\nendif\n```\nwhere I'm expecting Cocoapods to define a debug flag named COCOAPOD, kind of like how it's explained in this SO post.\nI'm relatively sure Cocoapods doesn't define that flag, so some other workaround must be found. I've just created https://github.com/CocoaPods/CocoaPods/issues/5889 asking if there's anything I can do.\nAlso currently testing this to make sure it works through a carthage install\n. Ok, I think this is now at a point where it's usable through Carthage, testing currently.\n. This works for me through Carthage!\nHeres an excerpt from the diff upgrading to this branch in my app \ud83c\udf89\n``` diff\ndiff --git a/Proxy/Internal/Network/Networking.swift b/Proxy/Internal/Network/Networking.swift\nindex d9bcd86..bafb067 100644\n--- a/Proxy/Internal/Network/Networking.swift\n+++ b/Proxy/Internal/Network/Networking.swift\n@@ -9,7 +9,7 @@ import RxMoya\nprivate let reachabilityManager = ReachabilityManager()\n-class OnlineProvider: RxMoyaProvider where Target: RxMoya.TargetType {\n+class OnlineProvider: RxMoyaProvider where Target: TargetType {\n fileprivate let online: Observable<Bool>\n\n@@ -17,7 +17,7 @@ class OnlineProvider: RxMoyaProvider where Target: RxMoya.Target\n          requestClosure: @escaping RxMoyaProvider.RequestClosure = RxMoyaProvider.DefaultRequestMapping,\n          stubClosure: @escaping RxMoyaProvider.StubClosure = RxMoyaProvider.NeverStub,\n          manager: Manager = RxMoyaProvider.DefaultAlamofireManager(),\n-         plugins: [RxMoya.PluginType] = [NetworkLoggerPlugin(verbose: true)],\n+         plugins: [PluginType] = [NetworkLoggerPlugin(verbose: true)],\n          online: Observable = reachabilityManager.reach) {\n     self.online = online\n\n@@ -28,7 +28,7 @@ class OnlineProvider: RxMoyaProvider where Target: RxMoya.Target\n                    plugins: plugins)\n     }\n\noverride func request(_ token: Target) -> Observable {\noverride func request(_ token: Target) -> Observable {\n         let actualRequest = super.request(token) return online\n\n@@ -43,7 +43,7 @@ class OnlineProvider: RxMoyaProvider where Target: RxMoya.Target\n }\n\n\nprotocol NetworkingType {\n-    associatedtype T: RxMoya.TargetType, ProxyAPIType\n+    associatedtype T: TargetType, ProxyAPIType\n     var provider: OnlineProvider { get }\n }\n@@ -55,7 +55,7 @@ struct Networking: NetworkingType {\n extension Networking {\n // public interface\n\n\nfunc request(_ token: ProxyAPI) -> Observable {\nfunc request(_ token: ProxyAPI) -> Observable {\n         let actualRequest = self.provider\n             .request(token)\n             .filterSuccessfulStatusCodes()\n@@ -99,15 +99,15 @@ extension Networking {\n\nprivate extension Networking {\n\nstatic func endpointsClosure(_ target: T) -> RxMoya.Endpoint where T: RxMoya.TargetType, T: ProxyAPIType {\nstatic func endpointsClosure(_ target: T) -> Endpoint where T: TargetType, T: ProxyAPIType {\n         let url = \"(target.baseURL.absoluteString)(target.path)\"\nlet sampleResponse: RxMoya.Endpoint.SampleResponseClosure = { .networkResponse(200, target.sampleData) }\n\nlet sampleResponse: Endpoint.SampleResponseClosure = { .networkResponse(200, target.sampleData) }\n\n\nlet endpoint = RxMoya.Endpoint(URL: url,\n\nsampleResponseClosure: sampleResponse,\nmethod: target.method,\nparameters: target.parameters,\nparameterEncoding: target.parameterEncoding)\nlet endpoint = Endpoint(URL: url,\nsampleResponseClosure: sampleResponse,\nmethod: target.method,\nparameters: target.parameters,\n\nparameterEncoding: target.parameterEncoding)\n let baseHeaderFields = [\n     \"Accept-Version\": \"2016-07-05\",\n\n@@ -120,7 +120,7 @@ private extension Networking {\n     // networking is the epitome of side effects + shared global state \ud83d\ude30\n     let authenticationHeaderFields: [String: String]? = target.requiresAuth ? [\"Authorization\": \"Bearer (AuthToken.local()!.accessToken)\"] : nil // swiftlint:disable:this line_length\n\n\nreturn endpoint.endpointByAddingHTTPHeaderFields(baseHeaderFields + authenticationHeaderFields)\n\nreturn endpoint.adding(newParameters: baseHeaderFields + authenticationHeaderFields)\n     }\n\n}\n```\n. @petester42 @ashfurrow @justinmakaila: I'm sorry this took so long, but I think it's finally done!\nThings left before this is ready to merge:\n- [ ] check to make sure cocoapods install works\n- [ ] fix danger on tests? currently bundle exec danger is crashing on CI\n- [x] code review from you guys \ud83d\ude04, and a vote of confidence that this change is still a good idea to anyone but me \ud83d\ude0b\nReally excited to have this working now!\n. Awesome! Thanks for the review @petester42 \ud83d\udc4d I'm using this branch in prod with one of my apps, so I feel pretty comfortable with it too.\nI do want to make sure that this doesn't break the cocoapods install though. Can any @Moya/contributors who use Moya through Cocoapods try pointing their install to this branch to confirm that everything still works?\n. @justinmakaila alright, I'll wait for someone familiar with cocoapods to test it, I don't want to merge this into master and have it break for everyone depending on this library through Cocoapods \ud83d\ude2c\n. awesome, I'll merge \ud83d\ude04\n. oh, @ashfurrow: you mentioned that it would be cool to write a blog post about this change. If you think it still merits one, I'd love to write/help write it. You can email me (asbreckenridge@me.com) to talk about it \ud83d\udc4d \n. Ahh, the problem is that the Cartfile hasn't been updated to point to swift 3 versions, just the Podfile. I'll make a commit that brings the Cartfile upto speed\n. @ashfurrow \ud83d\ude04 \nTesting this again with the new cartfile\n. Created #610, can someone sanity check the PR if it makes sense merge it in?\n. @sunshinejr looks great!\nHere's what I've uncovered with with output in the NetworkLoggerPlugin.\nSwift 3 removed parameter labels for tuples, making it impossible to create a tuple with a variadic parameter\nI think we're going to have to make a breaking change with the NetworkLoggerPlugin, and switch from output: (_ items: Any..., _ separator: String, _ terminator: String) -> Void to something else. I see two possibilities:\n1. remove the variadic parameter of _ items: Any..., into_ items: [Any], or _ items: Any\n2. switch from this tuple to some sort of delegate\nI think it makes sense to do the first, I'm going to get started with it in a PR. Open to any other suggestions though! \n. \ud83d\ude4c \nno experience with alamofire,  so I'm happy you offered \ud83d\ude05\nJust submitted https://github.com/Moya/Moya/pull/612\n. Oh that might! Let me try it\n. Yeah, that worked @sunshinejr. Awesome insight!\nIf this looks good to you, then I think it's ready to merge \ud83d\ude04 \n. Standby, performing the conversion for all 8 Rx & Reactive targets\n. that should have done it \ud83d\ude04 \n. https://github.com/Moya/Moya/pull/608#issuecomment-247292895\n. Both ReactiveSwift & RxSwift vend through spm now, trying to see if I can get Alamofire to work, running into some issues related to https://github.com/Alamofire/Alamofire/issues/1544\nAfter that we should be ready to go \ud83c\udf89\nWe still can't import Foundation, but I think we can go ahead without that for now, until @apple figures out how they want to handle that\n. @VivienGiraud still waiting on the folks at Alamofire. \nI opened https://github.com/Alamofire/Alamofire/issues/1815, since they previously closed https://github.com/Alamofire/Alamofire/issues/1544. @scottrhoyt: I was able to use spm to deploy an iOS app (I only had one private dependency), but it was very similar to using a submodule. swift package update pulled down the files and built a binary (that I ignored), and then I dragged the source files into my iOS xcodeproj\nnot ideal, but it worked. I'm going to retarget this PR to come off #885.\nHopefully we'll have Alamofire cooperating soon so we can merge this in \ud83d\udc4c. I'll check it out. Woah, that was awesome. Cool, I'll cherry pick two commits onto Moya's master and we should be ready to go here. 8's going to be a big one \ud83d\ude2e. @ashfurrow carthage is pretty slow, so unfortunately a 15 minute bootstrap is not unexpected. We could use something like https://github.com/guidomb/carthage_cache to speed up build times though \n. For what it's worth, I think @wongzigii has the right idea. We should probably be using the semantic version of a library instead of (basically) a commit hash (in this case master).\n@wongzigii if you update the tag ReactiveSwift's release to alpha 2; confirm that it doesn't break anything in ReactiveMoya's target, and no one from @Moya/contributors has an issue with it, I think it would make sense to merge this in.\n. If the move is possible, I think we should do it. The directory structure with Source/, Demo/, Test/ will also play very nicely with swift package manager once we support it.\nI'll start a PR, but I'm not sure how to do the pod lib lint on CI. Can you help out with that when you have some time?\n. If the move is possible, I think we should do it. The directory structure with Source/, Demo/, Test/ will also play very nicely with swift package manager once we support it.\nI'll start a PR, but I'm not sure how to do the pod lib lint on CI. Can you help out with that when you have some time?\n. Created #698 \n. Created #698 \n. Oh wow \ud83d\ude02\ud83d\ude02\nI wonder when Apple will decide that watch apps deserve tests \ud83d\ude1b\n. Oh wow \ud83d\ude02\ud83d\ude02\nI wonder when Apple will decide that watch apps deserve tests \ud83d\ude1b\n. This works with a carthage install, but is completely broken when you're using Cocoapods, and since CI uses Cocoapods as well, CI is reporting \u2716\ufe0f.\nAre there any cocoapods users from @Moya/contributors that have some time to un-break the tests when installing through pod?\n. This works with a carthage install, but is completely broken when you're using Cocoapods, and since CI uses Cocoapods as well, CI is reporting \u2716\ufe0f.\nAre there any cocoapods users from @Moya/contributors that have some time to un-break the tests when installing through pod?\n. This works with a carthage install, but is completely broken when you're using Cocoapods, and since CI uses Cocoapods as well, CI is reporting \u2716\ufe0f.\nAre there any cocoapods users from @Moya/contributors that have some time to un-break the tests when installing through pod?\n. Sounds awesome @BasThomas!\nI tried rebasing, but I'm not sure what a lot of the changes on master have been.\nWasn't sure how to handle this conflict while rebasing\n\nSo I didn't finish the updating this branch. Do you know why those files were changed on master? \nI'm around to fix the conflicts, or you can take a shot if you'd like. Sounds awesome @BasThomas!\nI tried rebasing, but I'm not sure what a lot of the changes on master have been.\nWasn't sure how to handle this conflict while rebasing\n\nSo I didn't finish the updating this branch. Do you know why those files were changed on master? \nI'm around to fix the conflicts, or you can take a shot if you'd like. fresh as in pulling from master and manually redoing the work? If that's what you're thinking of doing, I can take the lead instead. I got it working before, so I can probably figure it out again.\nXcode looks as if it's expecting some source files and they're no longer there. Maybe you moved them in the filesystem without updating the xcodeproj?. fresh as in pulling from master and manually redoing the work? If that's what you're thinking of doing, I can take the lead instead. I got it working before, so I can probably figure it out again.\nXcode looks as if it's expecting some source files and they're no longer there. Maybe you moved them in the filesystem without updating the xcodeproj?. @BasThomas I think I'm just going to redo this PR, that seems easier than managing all the rebase merge conflicts we're going to hit.\nI'll do it later today. @BasThomas I think I'm just going to redo this PR, that seems easier than managing all the rebase merge conflicts we're going to hit.\nI'll do it later today. Created #885 to continue this. Created #885 to continue this. Hey @lolgear! I believe you're talking about some changes that I made last month.\nhttps://github.com/Moya/Moya/pull/563 is the pull request that suggested those changes, and the comments there go into the rationale behind the choices I made, and how it solves the dependency management mystery \ud83c\udfa9 \nI'm around if you have any follow up questions, or if you want me to talk about the tricks I'm using in more detail \ud83d\udc4a\n. Yup, @petester42 is completely right.\nBy including the line github \"Moya/Moya\" in a Cartfile, it builds all three of the shared targets (Moya, RxMoya, and ReactiveMoya), as well as all of the dependencies, and then you choose which frameworks you want to drag into your linked frameworks\n. I agree with @DeepMissea. This should be it's own library, caching is really hard\nPlug for a talk my friend gave: https://www.youtube.com/watch?v=8uqXuEZLyUU\nHe talks about a caching library called Carlos, I haven't tried it, but he makes a good case for using it https://github.com/WeltN24/Carlos\nCaching would be a level above Moya though \nYou'd probably want to use Carlos from your application level, and Moya (i.e. the network) would be one of the caches you could fetch from.. @WildDylan can you elaborate? \nAre you saying that you'd like Moya to implement a cache that follows the cache policy you outline?. @WildDylan I'm going to close this for now, please do re-open if you'd like to further explore adding a cache!. @ashfurrow yup, that sounds like the way it should be done.\nI've been thinking: it would be really useful to extract Eidolen's networking stack into a sub-repo.\nTwo reasons:\n\nMany @Moya/contributors often link to Eidolon as an implementation example, having a repo with just the networking part of eidolon would be easier for new readers to digest\nEidolon has a pretty great RxMoya networking stack, I used almost an exact copy of it in the app that I was previously working on. It would be awesome if the two of us (and whoever else) could share an opinionated RxMoya implementation, so we can fix things like deadlocks together.\n\nI'm free today, I could create the repo (not sure if it makes sense to have it under artsy or Moya), and then also create a PR to eidolon that removes the code from App/Networking/ and includes it through the new repo\nCheers. I was thinking everything other than XAppToken, ArtsyAPI, and APIKeys, but I have a feeling I'll run into some implementation issues once I get started.\nI'll get started on the repo & get eidolon integrated with it\nAny thoughts on a name for the repo?. Yup, I did GitHub.com/AndrewSB/Networking. The library is much smaller than I thought it would be, there was a voice in my head saying that making a new repo to solve this problem may have been overkill :p \nI'll create a WIP PR for eidolon so we can figure out your integration first. Cool, no rush at all! Thanks Ash\nOn Sat, Dec 10, 2016 at 7:33 AM Ash Furrow notifications@github.com wrote:\n\nCool, thanks Andrew! I probably won't be able to take an in-depth look\nuntil Monday, but I wanted to thank you for exploring this! Even if it\nturns out to be overkill, we've still learned something we can use to make\ndocumentation better, etc. Thanks again!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/722#issuecomment-266216281, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dKqfsphzGwdQD1cYz2bYr_B7sClBks5rGsY6gaJpZM4KZMTe\n.\n. Done!\n\nYup, this is what I wanted: I probably wouldn't have thought of replaying an auth request, I think I was going to store an instance bool isRequestingAuth or something. \nThats why I think something like www.github.com/AndrewSB/Networking is useful, so we can work on these problems together and come up with better solutions.\nSo I think we should either create an add-on library to work on the common parts of our RxMoya implementations together, or add this stuff to core. I favor the former. Yup! Thanks for staying on this, @scottrhoyt . @tuyendv2 closing this for now, but we'd love to hear back from you! Please re-open this if you found a solution we can add to our docs \ud83d\ude04 . CI errd out for some strange reason, attempting a rebuild\n. Closing this for now @zeew, please re-open this if @haydarKarkin's solution doesn't solve your problem!. @mrdaios can you elaborate?. You want to have a variable timeout based on the target? For example: you want .zen to timeout in 60 seconds, but .requestSomeThings to timeout after 45 seconds?. Hmm, yeah. That's an interesting question. I don't know if we have a per-target timeout setup yet.\nThe easiest thing right now, would be to add var timeoutInterval: TimeInterval { get } to your enum, and cancel override the provider.request function to cancel the request after the target. timeoutInterval.\nTo get a better solution for per target timeouts, creating a new issue is probably the best idea, to get other people's opinions \ud83d\ude04  . @wongzigii: #737 updates the Cartfile, not the Cartfile.resolved. How does having an outdated Cartfile.resolved affect your builds? Are you running carthage bootstrap, not update?\n. Hmm #737 has my carthage install functioning properly, what command are you using to build your dependencies?\n. Hmm, when I carthage update for github \"Moya/Moya\" \"master\", it's checking out and building the latest compatible versions of the dependencies, it doesn't look as if it's pinned to the versions in the Cartfile.resolved\n```\n\ncarthage update --platform iOS\n Fetching Moya\n Fetching RxSwift\n Fetching Alamofire\n Fetching Result\n Checking out Alamofire at \"4.0.1\"\n Downloading Result.framework binary at \"3.0.0\"\n Checking out ReactiveSwift at \"1.0.0-alpha.3\"\n Checking out RxSwift at \"3.0.1\"\n*** Checking out Moya at \"1b1edcf782bdf9eea0fa0c55c18275904d35d1e6\"\n```\n\nAre you seeing anything different?\n. It can be updated, but updating it has no effect on usage of the library - it's a build artifact, right?\nAre you interested in updating it just for the sake of updating it? Or to solve an issue you've noticed with using Moya?\n. Ahh, I understand - I thought you were running into a build problem and I wanted to make sure that wasn't the case \ud83d\ude04 \n. You're welcome \ud83d\ude04 \n\nI understand you wrap your provider in a Networking class/struct. What is NetworkingType though? I'm not understanding what you're subclassing here...\n\nNetworkingType is\nswift\nprotocol NetworkingType {\n    associatedtype T: TargetType, ProxyAPIType\n    var provider: OnlineProvider<T> { get }\n}\nits a wrapper for the provider (I'm using a custom provider that takes into account the online status, OnlineProvider is just a subclass of RxMoyaProvider), that has the custom request function I was talking about.\n\nWhere would my requestClosure and endpointClosure be? Also in the provider? I need to do be able to modify my request based on its HTTP methods.\n\nThe requestClosure and endpointClosure stay inside the provider.\n\nWhere does Networking's request function exist? Is it in the Networking class/struct?\nIf it exists within the same Networking struct/class... what is the _ in front of token? \n\nYup \ud83d\ude04 Networking's request function is inside the Networking struct.\nThe _ in request(_ token: ProxyAPI)? That just makes it so you can call request(.getMyTweets) instead of request(token: .getMyTweets). It's a swift language feature, just syntactic sugar \ud83d\ude09\n\nWhat exactly are you trying to do here:\nYou're calling back on the same provider class and passing a token into the request? Or is it the API enum?\n\nYou're right again, actualRequest calls the request function on the provider, it passes in the OAuthToken in the flatMap right after the definition.\n\nDoes OAuthTokenRequest also exist inside of Networking class/structure, or in it's own seperate class?\n\nOAuthTokenRequest is a global free function.\n\nwhat are the trade offs of using an Observable rather than Endpoints?\n\nNot sure what you mean \ud83d\ude1e If you rephrase that, I'm happy to help you understand it further \ud83d\ude04 \n\nIf you can't provide the opensource version of it. Could you please provide me with a few gist? Thanks!\n\nNetworkingType.swift OAuthTokenRequest.swift\n. I am indeed wrapping my provider inside this Networking struct. I later create an instance of my networking client by \nswift\nstatic func newDefaultNetworking() -> Networking {\n  return Networking(provider: OnlineProvider(endpointClosure: endpointsClosure))\n}\nTargetType comes down from Moya, ProxyAPIType (Proxy is the name of the iOS app from which I'm showing you code) is a protocol that defines some additional params that each of my endpoints must provide:\nswift\nprotocol ProxyAPIType {\n    var parameterEncoding: ParameterEncoding { get }\n    var accept: String { get }\n    var contentType: String { get }\n    var contentLength: Int? { get }\n    var requiresAuth: Bool { get }\n}\nSo for me, having this Networking wrapper accomplishes 2 main things\n1. It lets me use the OnlineProvider to only send networking requests when Reachability says I have internet connection (watch out for #722, I haven't solved the problem there yet)\n2. It allows me to have a custom request function (gist) that reactively injects an OAuthToken to all endpoints that requiresAuth from ProxyAPIType\nLet me know if you have any other questions, I'm here to help \ud83d\ude04 \n. Associated types work, I'm using this in swift 3, I can show you how I'm doing my OAuthToken expiry, I'll post a gist soon\nEDIT: OAuthTokenRequest gist\nSo in my Networking struct's request function, if the target required authentication, I flatMap this OAuthTokenRequest into the target, to make sure it's valid and fresh, then I grab it from my persistent storage \n. Hey @rlam3! Sorry about not responding, this must have slipped past me on my notifications!\nIf your OAuthTokenRequest depends on your CSRFTokenRequest then you don't want to zip, Zip is good when you have two operations that don't depend on each other you'd like to have completed, (diagram for reference) http://rxmarbles.com/#zip\nIf your OAuthTokenRequest is dependent on CSRFTokenRequest, you should \nswift\nCSRFTokenRequest()\n  .flatMap { csrfToken in OAuthTokenRequest(csrfToken) }\n  .flatMap { _ in actualRequest }. @rlam3 I renamed this issue to reflect what the discussion turned into, I hope that's alright with you, please let me know if I should change it back or change it to something else \ud83d\ude43. I'd say (after thinking for about 5 seconds) make your authtoken observable\nshare replays, that way you'll only have one AuthToken request actually\nissued.\nYou'll also have to handle invalidation of the token somewhere internally,\nas soon as the token expires the replay-able event should be dropped so the\nnext subscription to the observable triggers an actual auth token refresh\nWhile working on this myself, I used http://github.com/Expirable and\nthinking of my AuthTokens in that way really helped me\nHere if you need clarification!\nOn Tue, May 23, 2017 at 12:22 AM (Alfred) notifications@github.com wrote:\n\n@AndrewSB https://github.com/andrewsb I face a problem when the access\ntoken expires and multiple requests happen, that all request a new access\ntoken via the refresh token, at the same time.\nI noticed that Ello-iOS is handling multiple unauthorized requests by\ncall request/refresh token at a time and waiting for a new token on other\nrequests.\nI don\u2019t see the similar feature on Artsy Eidolon. Does your code support\nthis?\nDoes trackInFlights will help. I didn\u2019t see much information or document\nabout it, just read in some related issues/commits?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/748#issuecomment-303312259, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dFHJvTTo97u-Jt-W6a9DvlzVhNJvks5r8okGgaJpZM4KjFdG\n.\n. I did, thanks for catching that @pedrovereza!\n\nAlso, this thread is becoming awfully long, I'm going to lock it so it doesn't become much longer. @dangthaison91 if you want to follow up on handling multiple unauthorized requests at once, can you create a new issue and mention your earlier comment in it?. Yeah, that is unfortunate that it only works with the inferred dependency commands \ud83d\ude1e.\nI wonder if there's some way we could use circle's inferred dependency installation instead of overriding with our custom commands? https://github.com/Moya/Moya/pull/698 might be a good candidate for a solution where we can use a CI platform's inferred dependency installation.\nMaybe we could try to get CI dependency caching going once we've simplified our dependency installation steps on CI. Yeah, that is unfortunate that it only works with the inferred dependency commands \ud83d\ude1e.\nI wonder if there's some way we could use circle's inferred dependency installation instead of overriding with our custom commands? https://github.com/Moya/Moya/pull/698 might be a good candidate for a solution where we can use a CI platform's inferred dependency installation.\nMaybe we could try to get CI dependency caching going once we've simplified our dependency installation steps on CI. Does it only come up when building RxCocoa through Moya? Not if you just have a Cartfile with github \"ReactiveX/RxSwift\" ~> 3.0?\nIf the issue is in fact with RxSwift, then it should be tracked on their library, on the issue @fruitcoder  mentioned https://github.com/ReactiveX/RxSwift/issues/970.\n. Does it only come up when building RxCocoa through Moya? Not if you just have a Cartfile with github \"ReactiveX/RxSwift\" ~> 3.0?\nIf the issue is in fact with RxSwift, then it should be tracked on their library, on the issue @fruitcoder  mentioned https://github.com/ReactiveX/RxSwift/issues/970.\n. Can you delete your derived data and try again? \n. Can you delete your derived data and try again? \n. Hmm, so it's working on me when I check specify github \"Moya/Moya\" \"master\". Testing now with the 8.0.0-beta.2 release.\nmaster output:\n\u279c  how-carthage-works carthage update --platform iOS\n*** Fetching Moya\n*** Fetching RxSwift\n*** Fetching Alamofire\n*** Fetching Result\n*** Checking out Alamofire at \"4.0.1\"\n*** Downloading Result.framework binary at \"3.0.0\"\n*** Checking out ReactiveSwift at \"1.0.0-alpha.3\"\n*** Checking out RxSwift at \"3.0.1\"\n*** Checking out Moya at \"1b1edcf782bdf9eea0fa0c55c18275904d35d1e6\"\n*** xcodebuild output can be found in /var/folders/6y/2zb68tcs4nn6v899_jz0nmfr0000gn/T/carthage-xcodebuild.nCphgo.log\n*** Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\n*** Building scheme \"ReactiveSwift-iOS\" in ReactiveSwift.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n*** Building scheme \"RxBlocking-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n*** Building scheme \"RxTests-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n*** Building scheme \"RxCocoa-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n*** Building scheme \"RxSwift-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n*** Building scheme \"ReactiveMoya iOS\" in Moya.xcodeproj\n*** Building scheme \"RxMoya iOS\" in Moya.xcodeproj\n*** Building scheme \"Moya iOS\" in Moya.xcodeproj\n. Hmm, so it's working on me when I check specify github \"Moya/Moya\" \"master\". Testing now with the 8.0.0-beta.2 release.\nmaster output:\n\u279c  how-carthage-works carthage update --platform iOS\n*** Fetching Moya\n*** Fetching RxSwift\n*** Fetching Alamofire\n*** Fetching Result\n*** Checking out Alamofire at \"4.0.1\"\n*** Downloading Result.framework binary at \"3.0.0\"\n*** Checking out ReactiveSwift at \"1.0.0-alpha.3\"\n*** Checking out RxSwift at \"3.0.1\"\n*** Checking out Moya at \"1b1edcf782bdf9eea0fa0c55c18275904d35d1e6\"\n*** xcodebuild output can be found in /var/folders/6y/2zb68tcs4nn6v899_jz0nmfr0000gn/T/carthage-xcodebuild.nCphgo.log\n*** Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\n*** Building scheme \"ReactiveSwift-iOS\" in ReactiveSwift.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n*** Building scheme \"RxBlocking-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n*** Building scheme \"RxTests-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n*** Building scheme \"RxCocoa-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n*** Building scheme \"RxSwift-iOS\" in Rx.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.playground' in workspace '/Users/asb/how-carthage-works/Carthage/Checkouts/RxSwift/Rx.xcworkspace'.\n*** Building scheme \"ReactiveMoya iOS\" in Moya.xcodeproj\n*** Building scheme \"RxMoya iOS\" in Moya.xcodeproj\n*** Building scheme \"Moya iOS\" in Moya.xcodeproj\n. Hmm, I'm definitely seeing the issue on the latest release, but not on master. It seems to come and go.\n@mobilestar0223 after it fails, can you open the Rx.xcodeproj inside Carthage/Checkouts/RxSwift and see if you can build the RxCocoa target from Xcode? If not, can you paste your error?\nTrying to get a handle on what the issue is.\nWe may just want to do a new release soon -- not sure if that will fix the problem though, let's investigate it\n. Hmm, I'm definitely seeing the issue on the latest release, but not on master. It seems to come and go.\n@mobilestar0223 after it fails, can you open the Rx.xcodeproj inside Carthage/Checkouts/RxSwift and see if you can build the RxCocoa target from Xcode? If not, can you paste your error?\nTrying to get a handle on what the issue is.\nWe may just want to do a new release soon -- not sure if that will fix the problem though, let's investigate it\n. I think I've got a handle on the issue - I'm only seeing the Ld error from RxCocoa if I'm trying to build version 3.0.0-beta.1, if I checkout RxSwift at 3.0.1 instead, I don't get the build failure\nSo we should release master as a new version ASAP, since our latest release (https://github.com/Moya/Moya/releases/tag/8.0.0-beta.3) points to RxSwift 3.0.0-beta.1.\n@ashfurrow can we do a new release? The Cartfile on master points to a non-breaking install of RxSwift \ud83d\ude04 \n. I think I've got a handle on the issue - I'm only seeing the Ld error from RxCocoa if I'm trying to build version 3.0.0-beta.1, if I checkout RxSwift at 3.0.1 instead, I don't get the build failure\nSo we should release master as a new version ASAP, since our latest release (https://github.com/Moya/Moya/releases/tag/8.0.0-beta.3) points to RxSwift 3.0.0-beta.1.\n@ashfurrow can we do a new release? The Cartfile on master points to a non-breaking install of RxSwift \ud83d\ude04 \n. Thanks @ashfurrow!\nFix for this issue: target Moya 8.0.0-beta.4.\nIf anyone is having issues, please reopen this. Im happy to help!\n. I'll approve after that update \ud83d\ude04 \nI think you're right about adding other types of tasks making Basic.md too complicated\n. I'll approve after that update \ud83d\ude04 \nI think you're right about adding other types of tasks making Basic.md too complicated\n. @BasThomas is that because Task feels less cut and dry than something like Method or Path?\nI feel as if a user can just deep link into the Task type and see the documentation for the type there - if you still think docs in the basic usage make sense, go ahead and add that comment \ud83d\udc4c.\nI can review and then merge it in after you've made that edit \ud83d\ude43\n. @BasThomas is that because Task feels less cut and dry than something like Method or Path?\nI feel as if a user can just deep link into the Task type and see the documentation for the type there - if you still think docs in the basic usage make sense, go ahead and add that comment \ud83d\udc4c.\nI can review and then merge it in after you've made that edit \ud83d\ude43\n. ReactiveCocoa/ReactiveSwift looks like it's still an alpha (1.0.0-alpha.3 from what I can tell) - are you saying that their alpha release is stable on Swift 3, and would make sense to vend a ReacticeSwift alpha in a stable version of Moya?\n. We could either close this, or add that as a milestone to track the release - whatever you prefer ash\n. Closing this in favor of the milestone (https://github.com/Moya/Moya/milestone/6). Can you show us the entire Cartfile that results in that 3.0.0 being resolved? It's possible that there's another dependency you've included that depends on Moya@3.0.0\n. @sunshinejr: the plan was to merge #1055 into this branch, and then discuss what kind of queue primitive we wanted to use for ReactiveMoya & RxMoya (based on https://github.com/Moya/Moya/pull/1055#issuecomment-294671464). haha not an issue \ud83d\ude0b. Two tasks to go:\n\n[x] Rename everywhere we mention queue to callbackQueue\n[ ] Add docs\n\nlet's tackle this in another PR! Anyone is free to start it \ud83d\ude04 \nI'll resolve merge conflicts here rn. Oh! That's perfect, I didn't know we had a threading readme\nOn Tue, Jun 13, 2017 at 7:34 AM \u0141ukasz Mr\u00f3z notifications@github.com\nwrote:\n\nI would go with Threading.md.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/762#issuecomment-308136080, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dECoOTZMEfWrXIMKwM_TtLe6vPaNks5sDp2zgaJpZM4KuD7b\n.\n. \ud83d\ude02\ud83d\ude02\nAgreed\nOn Tue, Jun 13, 2017 at 7:44 AM \u0141ukasz Mr\u00f3z notifications@github.com\nwrote:\nHaha, we don't - but we should :D\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/762#issuecomment-308139564, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dJiDMa1CdK-L-a93uM0yGm9p2xgtks5sDqAwgaJpZM4KuD7b\n.\n. for the uninitiated, what does stubScheduler do? Does adding queues already fix it, or do we need to add more functionality?. alright, I'm happy with this. Let's wait for CI\n\nCan someone who knows what the conflict for this to be merged try to resolve?. \ud83d\udd25 once you do that review, if you're happy, go ahead and merge.\nLet's land this pull request 8 months in the making\n. \ud83c\udf89\ud83c\udf89. @Fredehagelund92 this sounds like an issue at the Alamofire level. Moya doesn't actually handle making the request, all of that work is delegated to Alamofire. You may be better suited to asking the folks over there?\nApologies if I misunderstood your problem, and the issue is actually something related to Moya incorrectly embedding your headers \ud83d\ude05. @jaymutzafi it is unfortunate that the current package manager landscape on iOS is that unapproachable to new developers \ud83d\ude15.\n@ashfurrow I think we've removed most of our hacks to support Cocoapods & Carthage, so it shouldn't be too hard to integrate manually (famous last words \ud83d\ude1b)\n@ashfurrow is right though, a blog post describing how to do this in general would be better, and more sustainable in the long run, but I can't find one as of now. So I'll just try to help you out here \ud83d\ude04 \nFor a manual integration, all you (should) need to do is drag the source files inside https://github.com/Moya/Moya/tree/master/Source into your xcodeproj. You might want to not drag in the RxSwift and ReactiveSwift directories, unless you're using those packages in conjunction with Moya.\nI haven't tested this, so I may be wrong. Let us know if you have any issues, we'll try our best to get you working with Moya \ud83d\ude04 . Oh yup, you're right @BasThomas. Thanks for catching that \ud83d\udcaf\n@jaymutzafi you'd also need to include Alamofire in your project, they have manual integration instructions here: https://github.com/Alamofire/Alamofire#manually. Thanks for rolling with this @BasThomas!. @BasThomas is that an issue? I'm not that familiar with DefaultDownloadDestination. @bchrobot? Anyone else from @Moya/contributors?. Ooooh @mrfarukturgut, that's a doozie of a synchronization problem. I, personally, like to model problems with reative programming. Abstracting multiple, potentially concurrent Requests that require a common resource (an auth token in this case) as streams allow me to stay sane, and reason about the state of program at any point in time.\nI recently had a long conversation with @rlam3 in https://github.com/Moya/Moya/issues/748 where we talked about a similar problem, why don't you give that a read, and then let us know how we can help once you're aware of the Rx/Reactive Moya solution to your problem. sounds good @mrfarukturgut! Let me know if theres anything else we can help with \ud83d\ude04 \nGCD is a perfectly fine alternative as well. you could use a dispatch group to turn the callback into something that blocks the thread. I wouldn't recommend it, but it is doable. @BasThomas this looks good to me (thank you for making it \ud83d\ude43), can you run a carthage update --no-build to update rxswift in the resolved file, and to make sure everything works?. #799 looks good to me \ud83d\ude04 . @rlam3 it looks like @BasThomas' change should have fixed what you were seeing, please do re-open this if it didn't!\nClosing for now \ud83d\ude04 . @rlam3 are you interested in testing Moya specifically for authentication?. @petester42 I think we should go ahead with this, and we can fix watchOS issues if/when they come up. When you create a PR, can you close this issue?\nThanks \ud83d\ude04 . @scottrhoyt @BasThomas @pedrovereza: Along the lines of simplifying the project structure in #885, I think it would be really awesome to have this implemented too.\nEspecially if we can have it in before the 8.0.0 release.. Oh, you guys are right. It would have 0 effect on the API, it was just related to the new project structure we had. Implemented in #967 \ud83d\ude06. @Ernest-su is the problem that .complete is not called? You are getting all the .next(progress) events?\nIf that is the case, I think the way we should fix the bug is by creating a pull request that creates a (currently failing) test in https://github.com/Moya/Moya/blob/master/Demo/Tests/RxSwiftMoyaProviderTests.swift, and then write code to make the test pass.\nIf you want to take a shot at that @Ernest-su, that would be awesome (no pressure!), if you don't have time right now or aren't comfortable doing that, I'm sure a contributor will look into this soon!\nProviding the clarification on the .next vs .complete would be very useful either way!. Thanks @ashfurrow, that makes sense!. @manas-chaudhari yeah, you would have to create a different provider instance for each kind of model that your API calls return. Maybe instead of having associatedTypes on the protocol, you could pass the types in. Your call function would have to then be generic, and your parse function would take the type as an argument.\n```swift\nstatic func call(request: Request) -> T? {\n        let params = parameters(request: request)\n        // Invoke api get result\n        return parse(data: Data(), type: T.self)\n}\ninternal static func parse(data: Data, type: T) -> Result? {\n        return T.init(data: data)\n}\n``` \nand you'd probably have to also create a protocol where you can specify that T can be initialized with some Data, and specify that conformance in your generic, Mappable, or Unboxable, as @scottrhoyt said.\nFWIW It sounds like you want an extremely simple API layer, where a consumer doesn't have the opportunity to mess anything up by putting the wrong type in; somewhat similar to the API layer one might ship in an SDK.\nIf that is what your goal is, I'd recommend going with @scottrhoyt's Networking layer. The Networking layer would be the closest thing to what Facebook, or Stripe's SDK vend.\nI recently built an SDK, and did the same thing. I had Moya included as a private implementation detail, and I wrote functions for each API call that looked something like \nswift\nstatic func login(email: String, password: String) -> Observable<User> {\n    return Email.validate(email)\n        .flatMap { email in networkingProvider.request(.login(email: email.value, password: password)) }\n        .mapJSON()\n        .do(onNext: saveAuthTokenToKeychain)\n        .map(User.init)\n}. @scottrhoyt https://github.com/Moya/Moya/issues/823#issuecomment-264653488 was incredibly detailed. Thank you \ud83d\ude4f\nShould we create a documentation page for this questions like this issue? Your comment is 90% of the content I think we'd need for that doc page. Hmm, I see where you're coming from...\nI dont think we'd add it to Moya right now, since it would definitely force us to include (or depend upon) a JSON parsing library, and force all consumers of Moya to use the same.\nWhat about defining another protocol that conforms to TargetType?\n```swift\nprotocol DecodableTargetType: Moya.TargetType {\n    var modelType: SomeJSONDecodableProtocolConformance.Type { get }\n}\n// then you'd be able to take your model\nstruct User: SomeJSONDecodableProtocolConformance {}\n// and then convert your TargetType enum conformance to DecodableTargetType, and add\nenum MyAPI: DecodableTargetType {\n    ...\n    var modelType: SomeJSONDecodableProtocolConformance.Type {\n        switch self {\n             case .me: return User.self\n        }\n    }\n    ...\n```\nby doing that, you could have all the functionality you're looking for from Retrofit in Moya.\nYour API consumer can be oblivious to the fact that the response is in JSON by defining a parse function in your networking stack that mapJSONs, and then calls your JSON decode function with the modelType of the target; making it look like\nswift\nprovider.request(.me).decode() // returns Observable<User>. I hope it can be eliminated \ud83d\ude04 But I'm not sure how to. I think we might need to something type-erasurey here. I'm not totally sure, but the goal is to be able to express\n```swift\nenum MyAPI: DecodableTargetType {\n  ...\n   var modelType: SomeJSONDecodableProtocolConformance {\n     switch self {\n       case .upload: return String.self\n     }\n    }\nfunc decoded(response: Response) -> Observable<Self.modelType> { // This line doesn't compile \ud83d\ude2d\n  // parse things and return the correct modelType\n}\n\n...\n}\n```\nRight now, without any type magic, its possible to return Observable< SomeJSONDecodableProtocolConformance >. It makes sense that you should be able to return Observable<String> (or Observable<any other modelType>) because I know how to express that in logic, but I'm not sure how to express it in the Swift type system.\n@Moya/contributors: Does anyone more experienced with such problems care to chime in?\nI feel as if the answer would be to make each case in the MyAPI generic over type T: SomeJSONDecodableProtocolConformance, (or give each case an associatedValue of SomeJSONDecodableProtocolConformance). But I'm not sure to do that . @manas-chaudhari: I think using an approach like Ello would be best for your use case under the current Moya.\nYour point on \n\nbuild[ing] a MoyaProvider variant which does not have a generic <Target> parameter\n\ndoes sound interesting. If its possible for us to make Moya better by implementing that, we should look into it. I've created an issue for you to expand on that idea (https://github.com/Moya/Moya/issues/830).\nIf you think your initial question was answered, and you're satisfied with the Networking layer, go ahead and close this issue, and we can continue discussion on #830. FWIW I think \"filter status codes zero through nine\" is grammatically correct, and sounds better than \"filter status codes in zero through nine\". +1 for filter(statusCodes:), filter(statusCode:). closing this for now. @manas-chaudhari: please do re-open this if you're interested in getting this added to Moya. Sounds interesting @manas-chaudhari, I'm having a little trouble understanding your example though, are you saying that if I wanted to request my user model, for example, I'd do provider.request<UserModel>(.me, completion...)? In my opinion, that doesn't add much to provider.request(.me).map(UserModel.init).\nWould you like to make a PR to implement your idea? I think starting out by amending the docs would be the easiest way for me to understand what you're suggesting, and for the contributors to talk about (see https://github.com/Moya/Moya/pull/762 for an example of a README-first PR). If we can get enough people saying they like your idea, we'd be more than happy to merge this in \ud83d\ude04 . Sounds great @manas-chaudhari, looking forward to checking out the updated docs \ud83d\ude04 . Closing this in favor of #910 \ud83d\ude04 . Do the same for Moya is a little sparse, what if we tried to copy more of Alamofire's docs?\nalmost exactly all of this, tweaked to work for Moya\n\n. @BasThomas that sounds good to me!. @nahung89 can you also post your Cartfile.resolved?. Hmm...\nThe problem seems to be a bug in Carthage, for some reason Carthage is choosing a really old version of Moya (3.0.0), and you're failing to build because that version is written in an older version of Swift.\nA temp fix would be to add a greater than version specifier to your Cartfile, but we should loop in the Carthage maintainers to take a look.\nUpdate your Cartfile to github \"Moya/Moya\" >= 8.0, and let us know if that works . This all seems very strange - Carthage shouldn't be looking at the demo.xcodeproj\nCan you also try clearing your derived data and Carthage cache?. Hmm, Carthage is consistently checking out an older versions of Moya (initially 3.0.0, and 7.0.4) when one doesn't specify >= 8.0.\n@BasThomas, @pedrovereza, and I all have it compiling when specifying >= 8.0, I'm not sure why you're running into this issue @nahung89. Are you in a Swift 3 project?\nWhat's stranger still, is that your Carthage is trying to build Moya/Demo/Pods/Pods.xcodeproj, which shouldn't be seen by Carthage (and isn't seen by the three of us) when the project is being built by Carthage...\nI'll go ahead and create an issue on Carthage to see if they know what's happening.. Thanks for the additional information @nahung89, we're waiting on https://github.com/Carthage/Carthage/issues/1637 now.. Sounds good @nahung89! Matt from Carthage said he thinks it was something wrong with your Carthage cache, if you see this problem again, can you report it?\nThanks!. Yeah, it would, I share your sentiment. \nIn my opinion, a better approach is to create separate repositories. The major downside is the overhead of maintaining an additional library, setting it up with CI, Carthage, Cocoapods, etc.\nI guess we should just swallow that pill though?. Yeah, I think things like OnlineProvider are super useful. I think we should create another repo, maybe Moya/CommunityExtensions for things like OnlineProvider.\n@justinmakaila: you can also copy and calback-ify the one I wrote in AndrewSB/Networking, if you'd like.\nAlso, for Rx target build time, they recently bundled a binary with their latest release, so you should just be downloading Graham.zip instead of building. Lmk if that isn't the case, because then we probably have an issue in Moya's Cartfile. @jonlambert it looks to me like an Rx issue. Are you adding your subscription to a disposeBag?. @jonlambert: could it have anything to do with creating a new provider and then immediately using it? Could you try creating your Provider, and then dispatching your network request a second later, as an experiment, to see if it changes anything?\n@justinmakaila: sounds like a headache \ud83d\ude15. @rlam3 since you're using Rx, I'd recommend looking at this example in the RxSwift repo: https://github.com/ReactiveX/RxSwift/tree/master/RxExample/RxExample/Examples/GitHubSearchRepositories\nIt doesn't use Moya, but the GitHub service it uses is similar to a Moya provider. I really can't say without seeing the rest of your code @rlam3. I'd recommend putting a didSet propertyObserver on your feedItems property, and either printing out the newValue, or setting a breakpoint so you can see what is mutating the property. It doesn't look like an RxSwift problem to me, I've been able to use standard collection view functions while using Rx \ud83d\ude04 . @rlam3: I'm going to close this for now, but please do re-open this if you still have questions, it sounds like this is more of a Rx-y question than a Moya question.\nRxSwift also has a really friendly slack where people are usually really willing to help out, especially with questions about best practice \ud83d\ude04 . Could someone explain what this change does?\nFrom my understanding, Void is just a typealias for (), what is swiftlint's complaint?. Which rule catches functions that return ()?. Hmmm\n@scottrhoyt I feel as if you're totally right when you say\n\nlack of default implementation is a powerful means for discovering functionality and ensuring intended behavior\n\nI thought the problem you've noticed is better serviced by something like NSURLSession or Alamofire. but then I looked around a bit at Moya's documentation, and realized that Moya is supposed to be a completely unified networking layer. If youre using Moya, there should be no need to use Alamofire.\n\nSo now I'm not totally sure whether or not Moya should integrate your solution. Can you share the code you were working with that led to you seeing the need of a default implementation? So I can see where you're coming from?\nThe way I've been using Moya is to model all of my API calls. So I look at my API's swagger, and then I convert each operation into a Moya enum case. Moya, for me, has become a way to document how I'm using the provided API. In that paradigm, being able to create a one-off API call has no value, I'd rather have the API call documented in my provider's enum. @scottrhoyt what about a subclass of TargetType? OpinionatedTargetType or something that gives you nice defaults?\nThat way one can continue to take advantage of \n\nlack of default implementation is a powerful means for discovering functionality and ensuring intended behavior\n\nwhile removing the need to specify defaults in the simple cases. Yeah @scottrhoyt, I see what you're saying. There are pros and cons, and its definitely central.\nLets wait for some other people to chime in before we do anything here. I have no idea either... github \"ReactiveX/RxSwift\" ~> 3.0 should pull down the binary... I just tested locally and it pulled down the binary\n\nvery strange.... It shouldn't... maybe we should get in touch with circle CI support.\nI'll try an SSH enabled circle build later this week to try and debug it. @scottrhoyt: that's a good idea. I set something similar up for AndrewSB/wrytr, a project I've been working on every now and then. I created a fastlane action to run a cached Carthage build on CI.\nHere's the bootstrap action https://github.com/AndrewSB/fastlane/blob/master/carthage-bootstrap-if-needed.sh\nI could set up Moya to do something similar. Implemented in #885 \ud83c\udf89. @scottrhoyt: thank you for doing this \ud83d\ude04 . @GTMYang: We have some documentation here: https://github.com/Moya/Moya/blob/master/docs/Providers.md#requestclosure\nIf you have further questions on how to use it after reading that, and the Endpoints documentation, we'd be happy to help!. Closing this due to inactivity, please re-open if you're still having issues \ud83d\ude04 . For what it's worth, I prefer Moya.Error to MoyaError. \nHaving either MoyaError or Moya.Error be more idiomatic isn't an objective measure, it's just a marker of familiarity with.\nYour comment about the confusion between Swift.Error and Moya.Error is real though, it does make Error ambiguous in some cases, and forces one to namespace the error. But, I feel as if that makes sense, you have your module, each with its own kind of error (Swift.Error, Moya.Error, or MyApplication.Error), and each of those define an error (that's what I have, at least).\nThen in my catchError, I usually switch to pattern match between those three.\nIt wouldn't be the end of the world if we made this change, I'd be ok with it, but I think having MyModule.Error instead of MyModuleError is a paradigm shift and I'd like to encourage it for swift. A few years from now I think it would be awesome if the former is the default, idiomatic naming option for Errors in our language \ud83d\ude04. Haha, I was actually editing my comment to add that as an enhancement!\nI have 3-4 more commits to finish up on this PR, and after which I'll branch off to take a shot at #870. How far did you get?. Cool, that sounds great.\nI'm going to get the tests building locally, and then I think I'm done with this PR.\nI'm seeing a strange error with Result, have you seen anything like it?\n\nI made sure I was using a current version of Result (I have 3.1.0 checked out), I've never seen Result used without an error type specialization. @scottrhoyt: sounds great! Oh wow, I just saw all the work you put into #886 \ud83d\ude2b I'm sorry about superseding it!\n@BasThomas: thanks for the link, https://github.com/antitypical/Result/issues/77#issuecomment-231423891 was perfect . @scottrhoyt: I think this is ready to go. We just need to deal with the 3 TODOs above, and then add any learnings you have from #886 \nFor #886: We could either have fewer commits redone here, or you can rebase #886 onto this branch and we can merge it here. What do you think?. Oh awesome! Should I close this then and help review your pull request instead? . That sounds great to me too. Let me give your PR a look over to see what you've implemented so I can try to figure out what we should include from both. @scottrhoyt this looks really great, awesome to come on and see that the PR's checks are passing \ud83d\ude04 \nReviewing code now. @scottrhoyt: Really great work. This all looks good to me. \nOnly thing that may be nice would be for us to squash some commits\nI also saw that you marked README changes as done, but I didn't see any changes. Is that because they weren't required?. I perused the documentation and have come to the same conclusion.\nWell then the only thing left is for @scottrhoyt to squash some of his commits \ud83d\ude04 then I think we're ready to merge this (assuming Danger is happy, I'm not sure how to see that status). Oh wait, I just noticed one thing: Previously, I had deleted the Demo.xcodeproj and .xcworkspace and moved everything into Moya.xcodeproj (the Demos were put into a Demo group inside Moya.xcodeproj).\nYour merge, @scottrhoyt, seems to have undone that. Was that purposeful? Or should I redo the integration of the 2 xcodeprojs?. Hmm... Having one xcodeproj is a strong opinion that I weakly hold. I'm willing to change, but here's what I think\n\nCarthage is driven off of the main Moya.xcodeproj, so I think it's a good idea to keep that as lean as possible.\n\nIt is, but Carthage only looks at the shared targets inside of Moya.xcodeproj. As long as we don't share the Demo targets, it won't have any impact on Carthage at all.\n\nHaving an example/demo project in separate sub folder and project is in line with CocoaPods best practices and most libraries do it this way, so I think it is more in line with user expectations.\n\nThat makes sense for CocoaPods best practice. I wasn't aware of it.\nI'm not sure about this, but I think most Carthage-first projects include the Demo within the same xcodeproj, and I think spm is the same way, especially with their generate-xcodeproj command. I'll do some research and get back to you\n\nMerge conflicts are not fun in *.xcodeproj's, so keeping separate projects will allow people to contribute to Demo code and core library code simultaneously with less risk that the Carthage-driving project will get corrupted.\n\nMerge conflicts are a headache, but from my experience they're pretty rare. \nApart from commits like this where we radically change project layout, most changes to xcodeproj's are just adding or removing a file. Which usually don't conflict, or if they do, are trivial to resolve by setting the merge strategy to union.. Your point on validating cocoapods is real though.\nIs there any way to validate cocoapods without having a separate xcodeproj?\nHow important do you think it is for us to run integration tests to make sure we're not broken through our package managers on every master commit?\n I've started to feel like it's (at least to some extent) overkill. And its going to be even worse when we're also validating that SPM works on each commit\nI'm going to go back and see why we added the Carthage validation on each commit\nUpdate: we added Carthage sanity checking in https://github.com/Moya/Moya/pull/630, and the reason why was because we missed https://github.com/Moya/Moya/issues/629.\nWhat do you think about testing our package managers in parallel? Either on Travis, or telling Circle to perform our tests in parallel with our spm & cocoapods bootstraps. @ashfurrow awesome! So that fixes the validation problem.\n@scottrhoyt: RxSwift is the only large project I could find that just has one xcodeproj and includes their Demos & Examples as part of the one project. Some other projects don't include Demos (ReactiveSwift, Result), while Alamofire has a separate xcodeproj. I think RxSwift does an exceptional job with project structure, and that's where my fondness for the one-project-approach comes from. > I could be misunderstanding how sharing of schemes works, but doesn't unsharing a scheme normally put it in .xcuserdata or somewhere else that we normally gitignore?\nSharing schemes is just checking this box in the Scheme manager (Carthage talks about it here). Unshared schemes are still totally visible to users, and runnable. Not gitignored \n\nI would disagree on merge conflicts. I think the majority of the merge conflicts I have solved have been in *.xcodeproj's. It's one of the reasons why bigger tech companies don't use them at all.\n\nTotally valid. I don't have the experience of working at a large company, so I'm probably not qualified to contribute on the severity of merge conflicts. But, regardless of whether we have one or two xcodeprojs, we're still going to get merge conflicts. Having two xcodeproj's might make the conflicts smaller, or space them out to some extent, but it won't get rid of them #xcodeprojmergeconflictsheretostay \ud83d\ude2d\n\nFor example before before #869 example MultiTarget.swift was missing from Carthage installs because nothing was testing that it was being included via Carthage and the base project could still build fine without it.\n\nCan we write an integration test that verifies that the built targets have all the files we expect it to have? Something that would have caught MultiTarget.swift being orphaned?\nIf there is, I think we should write it, but I don't see how having one or two projects would affect \u2b06\ufe0f\n\nSo given that what we have is working correctly and has some advantages, I'm just trying to understand the advantages of changing it to be in one merged project.\n\nTo me there are two benefits\n1. Simplicity. \nEven though sharing iOS code is heavy right now (i.e. you cant just throw up a few .swift files up on GitHub, you need to deal with an xcodeproj, and targets, etc.) I like being able to see the entire project at once. For a while, I didn't even realize Moya had a Demo or Tests, since they were hidden away somewhere I don't usually look.\nThat was the same motive you had for moving the tests into the main project, so they're easier to access\n\nSPM expects & generates only one xcodeproj per package. Likewise, its a pleasure to work with you guys \ud83d\ude04\n\nI have a feeling you might be right about schemes affecting the xcuserdata to xcshareddata, I'm not totally sure what the implementation details of checking the \"Shared\" checkbox is either.\nThat sounds good to me, this PR is starting to get bloated. Lets get this merged and talk about it in another PR. I can create one as soon as we merge this into master. That looks great \ud83d\ude04 \nI'll get started with the Demo/ PR\nEDIT: created #891 . What I understand from this is \n1. You moved the tests into Moya.xcodeproj\n2. You actually got the tests to run & updated Rake things, and cocoapods things, and implemented caching\nIf we could cherrypick all the2 commits from this branch onto redo-spm-layout, and then merge this into #885, then we'll have this PR done, and 2/3 of the TODOs on #855 done as well\nIf you're onboard with \u261d\ufe0f, then I'll start helping choose which commits are needed, and we can revert/delete the ones implemented in #885. awesome, I'll take a look \ud83d\udc4d . ReactiveSwift released \ud83c\udf89\ud83c\udf89\ud83c\udf89. I don't think putting all the changes since 7.x for 8.0 in the changelog\nmake sense, but adding them to the GitHub release sounds like a great idea!\nIn the release notes, we can have one section that describes changes since\nbeta 6, and then below that have a section that talks about all the changes\nsince 7.x.\nOn Wed, Jan 4, 2017 at 9:29 AM Ash Furrow notifications@github.com wrote:\n\n@scottrhoyt https://github.com/scottrhoyt that sounds like a good idea,\ndo others have opinions on this?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/888#issuecomment-270431832, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dITEeVrhj2prvXzNSUbLsk-j-Rz2ks5rO9bwgaJpZM4LY7ac\n.\n. @ashfurrow I feel the same way, Carthage affords itself to SPM, and the project structure between the two are almost interchangeable.\n\nMerging this PR would get us closer to that point. The lingering difference to make us truly SPM-first, would be \n1. To finish up #643\n2. to use SPM to pull down dependencies ourselves, which we currently aren't doing, mostly because we don't have #643 merged, but also because SPM - as it is now - doesn't build .frameworks, it compiles to an executable (*.build). Here's what Result looks like compiled, for example \n\nTo be honest, I'm not sure how people are using SPM compiled dependencies for iOS apps, I've seen people that have dragged the *.swift files that SPM fetched into their projects, but not the .build files.\nI don't think SPM is at that point yet, but when it is, we should be ready to go \ud83d\ude04 . @scottrhoyt you're right, both layouts are compatible with all 3 package managers. I've been using the word compatible when what I really mean is in the spirit of, which is definitely a matter of opinion, and not right and wrong.\nI'm also biased since I've never really used CocoaPods (I started programming a couple months before Swift came out, and other than iOS hello world esque apps, I've always used Carthage). So the upside to have Demo in it's own directory is lost on me. Thank you for the reviews. Do you want to take a shot at those changes @scottrhoyt? Otherwise I can take care of them some time tomorrow \nWhat do you guys think? Should we wait a couple days to see what the other contributors think?\nAs it stands now, this PR is only a matter of preference, it has no functional benefit. Perhaps in the future, when we're using the SPM to generate our xcodeproj, it might. But theres a chance that SPM will change their implementation in the interim, and having only 1 xcodeproj will not matter.. Gotcha, I do the same thing with my storyboards (the project Im working on now has 9). I hadn't thought of/heard of splitting up xcodeproj's to reduce merge conflicts. I'll look into that. Haha, I totally understand. Thank you for all you did speeding up CI, its noticeable \ud83d\ude04 \nYeah, we do need to rethink our package manager integration tests. \nLets prioritize the 8.0 release while we wait for a couple more people to give us their thoughts, meanwhile thinking of how to better test.\nI'm on a flight on Wednesday, so I can write those tests and validate locally while I don't have internet, and then we can finish this PR up towards the end of the week. I think thats enough time for everyone to give their thoughts.\nYou're right, I'll move that from the pros \ud83d\ude04 . ## TODO\n\n[ ] Update circle.yml to pass, moving the Demo project expectation from Demo/Demo.xcodeproj to Moya.xcodeproj\n[ ] Write (hopefully parallelized) tests on CI to validate CocoaPods, Carthage & SPM validity (lets make this is separate PR)\n[ ] Update docs for new Demo project location & Carthage instead of CocoaPods instructions\n. That sounds great! I can finish this up (probably) early next month, but anyone else who's motivated to make this happen should feel free to take charge \ud83d\ude0a. on it. Thank you for opening this @scottrhoyt, swift test not working was an oversight on my part when setting up Package.swift. I forgot to test it \ud83d\ude2c\n\nI'll try to take a shot at it next week, but I'm open to someone else running with it as well \ud83d\udcaf. I think I agree with @scottrhoyt, it doesn't seem best practice to strongly capture the provider when making a request.\nThe provider should be held on by some other object, and the response should only be acknowledged if the provider is still listening for it.\nThis may be sort of nitpicky though. Merging this would make the common case simpler (why is my request never responding), but could potentially create memory leaks for more complicated implementations (I set my provider = nil, but I can see that it hasn't been deallocated, wut) . I feel like keeping them together is the easiest thing to do right now. I've felt bullish on SPM for over 6 months now, but I do know using it is still a ways out.\nI'm down for a call as well, but I think we should let this sit until someone else brings it up (unless one of you feel very strongly about making the change to multiple repos). Hopefully then we'll have a more informed perspective on the possibilities of SPM at that point. Yup, I agree with @scottrhoyt, it seems like a non issue now. \nFeel free to re-open if anyone would like to go into this further \ud83d\ude04 . This sounds like a Carthage issue. If you post on their repo, they\u2019ll be\nable to help you troubleshoot your Carthage\nOn Tue, Oct 31, 2017 at 6:23 AM Eduardo Louren\u00e7o Pinto Neto \nnotifications@github.com wrote:\n\nI'm having issues when running carthage update --platform iOS with Moya\nin my Cartfile. Carthage hangs while fetching ReactiveSwift, CPU spikes to\n100% and it will freeze up the entire machine unless I kill the process.\nCommenting Moya on the Cartfile makes it work, but locks me outside of my\nnetworking...\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/908#issuecomment-340760333, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dFIk0JHKmDLlkA5mzz3U2lIRXWdVks5sxx8ogaJpZM4LdPFY\n.\n. Cool! I'm happy the community saw value in this. @manas-chaudhari, we'll look for your next PR which implements the documentation we've added \ud83d\ude04 . Hey @tosbaha, thank you for making an issue \ud83d\ude09 \n\nI'd recommend starting out by taking a look at #748. I had a discussion with someone else who had a similar questions about Authorization.\nAfter that, take a look at @scottrhoyt's contribution (https://github.com/Moya/Moya/pull/893). It has a plugin for AccessTokens.\nFor loading a resource with retryability, it's as simple as .retry(2) (to retry twice when you're using RxMoya). Moya doesn't offer any custom functionality for retrying, so all of your retrying has to be done through RxSwift. There are some great resources for using RxSwift's retry, that you can find in the first couple resources here\nCome back with any lingering questions you have \ud83d\ude04 \nWe'll be happy to help you out. Closing this due to inactivity, let us know if you still need help @tosbaha . This looks pretty interesting @migue1s. Do you think it's related to #819 as well?\nIt would be really awesome if you'd make a Pull Request with your change, so people can discuss your solution, and we can get your bug fixed!. My thoughts: https://xkcd.com/927/\nOn Wed, Feb 8, 2017 at 9:39 AM Michael Sanderson notifications@github.com\nwrote:\n\nThe idea is to take Moya the last mile, so clients don't have to do\nparsing in their completion blocks at the call site. I think @pedrovereza\nhttps://github.com/pedrovereza 's comment that's what nearly all the\nextensions do reflects that. In this generic solution, since there's no way\nthrough Swift's type system to have enums vend closures returning different\ntypes, the call site still needs to know which parser to use. Putting the\nparser in the function signature removes one concern from the completion.\n(This is obviously less of a concern for the reactive variations that use\nlenses throughout their entire structure. Of course it could be moved up\nfor them as well.)\nAs @scottrhoyt https://github.com/scottrhoyt said allowing extensions\nto standardize their own interfaces would be a benefit and allow better\nintegration. Because of generics this needs to be done carefully, as the\ngeneric function parameters func request(TargetType, (Response) -> T,\ncompletion (T) -> Void)don't hold up when passed a generic\nfunction--legitimately, because all type information is gone. Typing the\ncompletion block only sometimes fixes this.\nActually, browsing through the extensions it seems like all of them work\nby requiring T to conform to some protocol -able for the library, usually init(_\njson: JSON)? Assuming the compiler could be instructed what the type is,\nit would be possible to have a protocol init(from response:\nMoya.Response) throws and put the requirement in the generic function\nconstraint.\nHowever, maybe it's my experience parsing terrible JSON but I would be\nagainst creating the expectation that JSON parsing can be accomplished\nautomatically from endpoint-magic-object. There's a gap between\nendpointJSON and model, that clients need to be explicitly and consciously\nbridge. The place to do that is the TargetType, but that was a dead end for\nenums.\nIn the case of completion blocks it makes sense that the knowledge of how\nto get the response into the app domain should have been made as part of\nthe call. Baking the option to provide a parser of choice -- an option,\nbecause this would be able to live alongside the existing method and\nimmediately use into it -- would make Moya more end-to-end by covering the\nfinal distance.\n\u2014\nYou are receiving this because you are on a team that was mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/950#issuecomment-278202738, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dCOtObOkVw2WqdCSy7OdpQJyvrHmks5raRzJgaJpZM4L2xjp\n.\n. @michaelsand I'm sorry about how l made you feel by posting a comic. I had no intention of disrespecting you, or the proposal you clearly have put a lot of thought into.\n\nI'm not working right now, so I haven't been spending as much time keeping up with the project, when I glanced at your issue in an email it was the first thing my mind jumped to.\nI should have provided substantive feedback, and put greater thought into how simply posting a comic would have come across in this situation.\nI hope I haven't tainted your opinion of this community and that you're still excited to contribute to this project.. @scottrhoyt: I'm not an expert, but I think it should just make maintaining the Moya.xcodeproj a lot easier.\n\nWill this work with both Carthage and Cocoapods? And have both been tested?\n\nIt works fine with Cocoapods & Carthage (PromiseKit has one target and they support both + SPM). \n\nDoes this method work with Carthage prebuilt binaries incase we want to introduce that for Moya?\n\nI'm not sure about this one. I think it should - since all we're doing is merging the targets, which should just mean we need to build the one target for each device type - but we should test before merging.\n\nAre there any other downsides to this?\n\nJust that what we're doing isn't officially supported by Apple. http://promisekit.org/news/2016/08/Multiplatform-Single-Scheme-Xcode-Projects/ is a great resource on this idea\n\nThis won't be breaking for anyone will it?\n\nNot to my knowledge. @petester42 I'd love to get this merged in. Do we just have those three issues left?\n\n\u2318 + U for the targets\nCode coverage is now enabled again\nCarthage framework copy script is now part of the source control.. So after rebasing this & fixing CI, this should be ready to go. \n\nIf no one else has taken a stab at resolving conflicts by tomorrow, I'll give it a shot and add some contributors as reviewers for this before we merge in \ud83d\ude04 . I rebased, but we were still having a conflict, so I merged Podfile.lock. Going to get this CI passing and then we should be good to go \ud83d\ude04 . Apparently something is wrong with Danger, but it looks like a nonsensical error. The Dangerfile on this branch matches the one on master. Can a @Moya/contributors who's familiar with Danger try to debug this?. Thank you everyone for your work! I'm excited that we got this merged in \ud83d\ude01. It looks like that solved your problem @gperdomor, let us know if you still need any help with this! Closing for now \ud83d\ude04 . @sunshinejr @BasThomas I think it would be really cool to do this, maybe add prebuilt binaries to our next release automatically?. Carthage has some nice instructions on how to do this now https://github.com/Carthage/Carthage#use-travis-ci-to-upload-your-tagged-prebuild-frameworks. I don't think I have enough time to work on something like this. I don't think it would help to drag it along for a few months. I'd be really excited to look at someone else's PR though! We can track this at https://github.com/Moya/Moya/projects/1 as well. But think about this, this small library has to build both reactiveswift\nand rxswift, alamofire, and result.\nCarthage has added\nhttps://github.com/Carthage/Carthage/blob/master/README.md#swift-binary-framework-download-compatibility\nthough, so it should be much better, and the binaries will be ignored if\none has a different swift version\nOn Fri, Oct 27, 2017 at 5:07 PM Pierre-Marc Airoldi \nnotifications@github.com wrote:\n\nI've been burned by prebuilt binaries as the swift version changes in the\npast. I've resorted to not use prebuilt binaries since it makes things\neasier. I'd advise against using them until stable ABI. For a library as\nsmall as this one I don't think the gain is that worth it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/983#issuecomment-340124342, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dLldsRwRmP3UmrSyX0UIn--KGGnQks5swnAlgaJpZM4ML80R\n.\n. Just saw all the issues you closed, really nice work @scottrhoyt \ud83d\udc4c. This looks like an old release, hopefully everything should be fixed in our latest. Please reopen if you're still having issues @coderRMS!. I agree with Justin about locking down master, especially since the Moya\norganization is huge, which introduces more potential points of failure. Is\nthe release script the only consumer committing directly to master? Can we\nhave it make a Pull Request instead?\n\nOn Fri, Mar 3, 2017 at 3:03 AM Justin Makaila notifications@github.com\nwrote:\n\nUltimately, I think this demonstrates that we need to lock down the master\nbranch and ensure that the only code that can get into master is via PR and\napproval from the organization.\n\u2014\nYou are receiving this because you are on a team that was mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/994#issuecomment-283788926, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dKXew-BYKg2aq7F5ck9pDwXDw5_8ks5rhzW0gaJpZM4MPIc3\n.\n. Great question @PMExtra \ud83d\ude04 \n\nFirst, you wouldn't be disposing the RxMoyaProvider as a whole, you'd dispose a (or a number) of subscriptions created by the RxMoyaProvider which represent pending network requests. More of a naming issue, but it could cause a misunderstanding with what you're actually doing.\nSo you should dispose subscriptions when you're no longer interested in them. In your case, thats when you'd no longer like to send heartbeats to your server.\nIf you only want to send heartbeats when a specific view controller is alive, then you should add it to the vc's dispose bag, otherwise you should add it to a long living disposeBag, maybe of a class that belongs to your AppDelegate (like your NetworkManager, or something like that)\nLet us know if you have any other questions about this \ud83d\udc4d . Single<> sounds incredible! I brought something similar up as an issue a few months ago, I'm so excited they implemented something that solved the same problem.\nI'll take a shot at this \ud83d\ude04 . Implemented in #1020. @BasThomas: In its current state, it is breaking, retargeted to 9.0.0-dev. Can you match the Cocoapods package versions that I missed?\n@andreyfel: I don't know if adding another choice to a very simple module is a smart idea long-term. I feel as though we should either stick with Observable and not make this change, or embrace RxSwift's new semantics and publish Single. But not try to solve both inelegantly\nAfter understanding the change, the easy path to migrate to the new RxMoya syntax will simply be for a consumer to extend RxMoyaProvider and supply a method that returns an Observable<Response>, which .asObservable()'s the new RxMoyaProvider.request. All rebased! cc/ @gperdomor can you approve?\nAlso, @andreyfel, if you have any thoughts following up on what I said above , that would be awesome\nI need to fix a couple tests to get CI passing, working on them soon \ud83d\ude04 . Thank you for sharing your thoughts @justinmakaila!\n@pedrovereza: I'm lazy, and I don't see the harm in #2, but feel free to go ahead with whichever one makes you more comfortable. Thanks Pedro \ud83d\ude0a\nOn Wed, Mar 22, 2017 at 11:34 AM Pedro Vereza notifications@github.com\nwrote:\n\nClosed #1016 https://github.com/Moya/Moya/pull/1016.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1016#event-1011047362, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dLgc60B1bdVsvKubatVJR95BZ8QDks5roWmggaJpZM4MfFHB\n.\n. Yeah, thanks a bunch @Pedrovereza!\nOn Fri, Mar 24, 2017 at 8:27 AM Bas Broek notifications@github.com wrote:\nOnce again thanks for fixing the merging issues @pedrovereza\nhttps://github.com/pedrovereza! \ud83c\udf89\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1020#issuecomment-289055097, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dLLl3Onm14sXQFTCxDgQu7PBK5YWks5ro-DrgaJpZM4MlpGj\n.\n. @scottrhoyt: thanks for catching that!\n\nHere's what I think: the functions in Observable+Response.swift are extensions on any type of Observable<Response>. I think it's totally valid to have a producer that sends multiple .next events to an Observable<Response> (for example, I could have a request processor, which is of type Observable<Response>, through which I pass every single response that goes through my client).\nI thought it best not to assume that every Observable<Response> should be constrained to Single, and that's a choice a consumer of this library should make, by doing .asSingle() after using one of the operators. I see your pain point. We should also probably extend Single to have the same functions. I wonder if theres a common superclass/protocol we could extend? I'm not sure how the Rx project does it.\nI'll look into doing a common extension tomorrow, but feel free to give it a shot as well \ud83d\ude04 . Oh, just noticed that you know what the superclass is - PrimitiveType\nYes, lets make them functions on that. Also, if you're using ReactiveMoya/RxMoya, they both include built in ways of retry failed requests. Closing this due to inactivity, please come back if you're still having issues @iOSUser110! We'd love to help get this working for you \ud83d\ude04 . Yup, #978 should have a solution, if you're still having issues @camcoding, reopen this and we'd be happy to help \ud83d\udc4d . Are you implementing an optimistic UI (i.e. you're going to show an update has succeeded before it actually comes back from the network)? If so, moving your network requests into a separate queue will make it very hard to tie back server validation/network failures back to the original callee (from my experience, YMMV).\nI'd recommend instead when your user edits/adds item A, you do\nswift \nfunc updateA(newA: AType) -> Observable<AType> {\n  return Observable.concat([\n    saveDataToRealm(newA),\n    saveDataToNetwork(newA)\n  ])\n}\nand what will happen is, first your data will be saved to Realm, on completion of that, you'll get a .next even from your updateA() observable, and simultaneously your network request will kick off. At this point, you can update your UI to be optimistically successful. (hundreds of) Milliseconds later you should get back the second network request, which will show itself is a .nextand .complete, where you can now make the optimistic success an actual success.\nAlso, if there was an error, you'd be able to handle the error at the callsite, instead of trying to associate it back to the callsite from your queue\nSo you call updateA(), you get\n.next(realm)\n.next(network)\n.complete\nThere is the chance for a race condition though, but you should be returned the latest model from the network in updateA(). So as long as your UI uses that as the source of truth, your user will be able to see the race condition and fix it\nSo, I'm not sure this was the answer you were looking for, just another approach. Hmm, yeah, if I understand what you're doing, yes. More or less.\nWhat I would do is just mark that entity as having a pending sync in Realm, (and then have a background process that periodically goes and tries to upload pending syncs), like you said \ud83d\ude04 \nIf you save that request (in memory) to a list of requests to be retried once the network has been established, you may run into some non deterministic behavior, either by sending the sync multiple times (one from the realm background process, another from the in memory queue waiting for network reconnection), or risk dropping the queue from in memory if the app is quit before you persist to realm.\nI'd recommend just going the persistent save + background processing route, and maybe even building a custom OfflineSync class that handles all your network requests if your app relies heavily on offline syncing . \ud83d\ude04. So happy you've made this issue! This is a feature we were looking to implement for RxMoya. Here's the pull request: https://github.com/Moya/Moya/pull/762\nLet me know if you have any other questions, or if you're interested in implementing the functionality we're missing \ud83d\ude04 . Let's continue discussion for this on #762, closing this for now. @lizhihui0215: yes, but its not the most user friendly. Check out this issue on Result: https://github.com/antitypical/Result/issues/76, and make sure you also read the discussion they link off to in LlamaKit.\nCome back here if you're still trying to figure out how to compose your own error type that augments MoyaError. Hey @Blackjacx, awesome to see that you're thinking about doing some local validation before hitting the network \ud83d\udc4c\nI've used www.GitHub.com/Ben-G/Validated in the past to great effect. Basically I create a PhoneNumber type and I change my parameter type to be a PhoneNumber (case validatePhoneNumber(number: PhoneNumber)). I think (after looking at this for ~20 seconds) that we need to update our circle CI to compile Moya using swift 3.1, not 3.0. This seems like a good idea to me @juliengdt! Do you want to try branching off 9.0.0-dev and implementing the change? No pressure if you're not comfortable with that \ud83d\ude04 \nThe two potential hurdles I see are\n1. We're currently grabbing the URLResponse from Alamofire, does Alamofire expose a HTTPURLResponse as well?\n2. Some small difference b/w URLResponse and HTTPURLResponse that makes the latter unusable for some reason we haven't thought off yet\nWe can get a couple of reviewers on the PR to validate that its a good idea, and if they agree, we'd be more than happy to merge this in \ud83d\udc4d . \ud83d\udc4a\nAwesome!\nOn Tue, Apr 4, 2017 at 2:20 AM JulienGdt notifications@github.com wrote:\n\nI edit the issue + did the PR.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/1040#issuecomment-291442898, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dFQDo2gyamQ09CE1zGIYc8nqEmFvks5rsgtagaJpZM4Mxspi\n.\n. Getting different errors! This looks like progress.\n\nIt seems as if Swift 3.1 the non breaking update, broke our tests. Right now, I can see that our NetworkLoggerPlugin.init calls in our tests are broken.\n\nThe compiler error looks like it's related to the output param in the initializer.\nswift\npublic init(verbose: Bool = false, cURL: Bool = false, output: @escaping (_ separator: String, _ terminator: String, _ items: Any...) -> Void = NetworkLoggerPlugin.reversedPrint, responseDataFormatter: ((Data) -> (Data))? = nil) {\n        self.cURL = cURL\n        self.isVerbose = verbose\n        self.output = output\n        self.responseDataFormatter = responseDataFormatter\n}\nThe definition says its expecting output: @escaping (_ separator: String, _ terminator: String, _ items: Any...) -> Void, but our initializer is just taking one param (printing in the screenshot), from the closure, and incorrectly not handling the other ones.\nDoes anyone who's more familiar with the NetworkLoggerPlugin or these tests know why that may be?\nFeel free to take a shot at adding a commit onto this branch if you know how to fix the tests \ud83d\ude04\nMake sure you're running Xcode 8.3!. That was a good move @pedrovereza\nYeah, I thought that was really strange too- why weren't we _, _ing those params previously?\nI just don't know much about that piece of the codebase, so I was hoping another contributor could jump in and enlighten us \ud83d\ude1b. Pedro: what scares me is that previously we just had printing, and from what I can infer from the contents of the test, it looks like it was an array, not a tuple (with three elements).\nI'll do a git blame and figure out who wrote those tests when I'm back on a computer tonight- to ask the OG author what they think we should do\nBas: command-U when you're on one of the Moya targets should run the tests. Ohh, I missed that.\nIf that's how the tests are, then I feel pretty confident with just\ncontinuing as we were\nI wonder why the tests regressed with swift 3.1 then \ud83e\udd14\nOn Tue, Apr 4, 2017 at 2:14 PM Pedro Vereza notifications@github.com\nwrote:\n\nand from what I can infer from the contents of the test, it looks like it\nwas an array, not a tuple (with three elements).\nI think it was a tuple \ud83e\udd14\nlet stringArray: [String] = printing.2.map { $0 as? String }.flatMap { $0 }\nIsn't printing.2 returning the third argument (the array of Any)?\nBut you're right, if we can find who wrote the test just to confirm the\nintention it'd be better \ud83d\udc4d\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1043#issuecomment-291633764, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dPI8DCIbGqSG-7nfLOUE0za4HRi_ks5rsrKLgaJpZM4MyPC7\n.\n. @BasThomas what's the complaint?. Hey @haritowa: I'm not sure I totally understand your question, but it sounds like youre looking for something similar to #1032. If that's the case, we have #762, and we'd love your help \ud83d\ude04 . That all sounds good to me @haritowa: it makes sense to be able to do that on a provider-basis and request-basis \ud83d\ude04 \n\nYou're right, we need to add this to both RxMoya & ReactiveMoya.\nScheduler is an Rx concept, its just an abstraction on queues and (for all intents and purposes here) can be thought as equivalent to queues.\nI'd be more than happy to review a PR \ud83d\udc4d this is something I've wanted for a while too. Very interesting use case. Thanks for implementing this @pedrovereza \ud83d\ude04 . It's possible in theory. We'd need to implement what people talked about in #556: basically abstract out the network engine to not just use Alamofire\nWe'd be open to a PR that does this, and theres a chance some other contributors might be interested in helping out \ud83d\ude04 . @myafer: line 19 that's highlighted in your project doesn't show up in our Repo (NetworkTarget doesn't exist, here's that file on our repo). Maybe you added that line by mistake?\nI'd recommend\n1. deleting derived data\n2. deleting the Moya/ directory and recloning from GitHub. awesome job @pedrovereza \ud83d\ude04 . I'd say not breaking. It's a bug fix\nOn Mon, Apr 17, 2017 at 7:31 AM Pedro Vereza notifications@github.com\nwrote:\n\nI see, you're saying that someone may be relying on this buggy behavior\nfor something. But I'd say there are probably workarounds to avoid the\nissue \ud83e\udd14\nI'd still not call it a breaking change as the API contract has not\nchanged, and the current behavior seems odd and probably is not expected.\n@AndrewSB https://github.com/AndrewSB @sunshinejr\nhttps://github.com/sunshinejr thoughts on that?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1053#issuecomment-294496325, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dBfs_efXVlVvG6cW74L0tqBCyUOGks5rw3eugaJpZM4M-fqL\n.\n. Hey @balancin, this looks like more of an Argo question, asking the people over at Moya-Argo may also yield good results.\nSorry I can't be more helpful! I haven't used Argo for a while \ud83d\ude15. Let's get the linting issues fixed, and maybe write some tests. \n\nThen we can merge this into optional-response-thread-param, and continue the discussion on which queue/scheduler primitive to use in #762. Cool, it would be awesome to get those RxSwift tests then! Maybe someone else can add them for ReactiveSwift later.\nThings pending before we merge to optional-response-thread-param\n- [x] write tests for RxSwift\n- [x] fix the overriding initializer and change the MoyaProvider initializer to take a queue as well. That's correct @justinmakaila. So then if you're using the vanilla MoyaProvider, you pass a thread. But if you're using an RxMoyaProvider, you'd pass in the Rx abstraction of a thread - a scheduler, and we want to implement whatever the equivalent is for ReactiveSwift as well.\nFor rationale and example usage, check out #762. Let's re-examine that assumption: that you can't get a queue from a scheduler.\nSchedulers internally use DispatchQueues to do their work (here's how the MainScheduler uses a queue).\nLet's make an issue on RxSwift's repo asking if theres any way to grab it, since right now, it is private. @haritowa: yeah, CI failed because there's no changelog for this. We're working on making that more clear to contributors.\nFor now, can you just add an entry to the changelog, and then we can see how the tests do?. I got really busy with work, sorry about that @haritowa! . that was broken by me -- I'll fix it now. Sorry!\nI prefer callbackQueue too. yup, that does! Then we can figure out docs and usage instructions in #762 . Yeah, lets merge this into optional-response-thread-param, and then do another PR also targeted to optional-response-thread-param that handles the renaming and docs \ud83d\udc4c . @GTMYang: In our implementation, [String: Any]? is equivalent to a json array. What type did you want to pass in instead?. @konnorbeard: which error? Did you forget to paste in the message?. What does NetClient do? I took a look at the README, but I had trouble seeing why I'd use it over just Alamofire or just Moya. Maybe a section saying \"Why would someone use this over just Alamofire\"\nIt seems like a nice piece of work though \ud83d\udc4d . @pedrovereza: love this change, I've also overrode the endpointClosure multiple times for HTTP auth stuff. so I think adding it is a great change\nI am against providing a default implementation though, I think it's important forcing consumers of Moya to implement every part of the protocol. Not doing so obfuscates the simplicity of creating a provider (being confused on how to get started with headers, for example).\nEven if one isn't planning to use headers (or sampleData, as was mentioned in #861), I think a consumer should still have to explicitly decide what should be returned from them. why has danger been failing so often on PRs?. @pedroverrza: can we set danger to have a more descriptive failure?\nOr add it as a separate integration, not through circle ci? So danger &\ntests can run and be seen independent of one another?\nOn Sat, Apr 29, 2017 at 4:31 AM Bas Broek notifications@github.com wrote:\n\n@BasThomas commented on this pull request.\nWe should update the docs as well.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1067#pullrequestreview-35494761, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dJZf14ZqxPgLMFnbbSxk7Cd6OiPPks5r0x-DgaJpZM4NJexz\n.\n. I think just actionable error messages would be a great start. We can re-evaluate that if contributors are still getting confused about why CI crashing. \n\nIt doesn't seem like its worth it to decouple danger's dependency on our build artifacts rn. Peril does look really nice, let's wait for that to be usable. \ud83d\ude06\nI'm happy this is happening!. That sounds good to me. Thanks for figuring this out!!\nOn to-do 2, let's wait to add labels until we've iterated on the bot, just\nin case we end up not liking it\nOn Thu, May 25, 2017 at 8:21 AM \u0141ukasz Mr\u00f3z notifications@github.com\nwrote:\n\nI've opened a PR#1101 with the config, please let me know what do you guys\nthink!\nWhat we need to get this bot running:\n\n\n1101 https://github.com/Moya/Moya/pull/1101 merged.\n\nRe-visit issues that might have need a label to not flag it.\nInstall the bot & iterate with the feedback.\n\nIs there something I didn't think about? \ud83e\udd14\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/1071#issuecomment-304037990, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dFodJSG0iR_dKP_AKOVN3RAbcAP6ks5r9Zx2gaJpZM4NQHMU\n.\n. yup, that would be awesome! Do you want try to make a pull request against apple's repository? . yup, lets do it. @BasThomas read my mind. Locking would be awesome, let's create that issue \ud83d\ude04 . Thanks for taking the initiative @SD10! That sounds great, we'll update this issue once we cut a 9.0 release \ud83d\ude04 . woah, I just switched the base from master to 9.0.0-dev, and it looks like 9.0.0-dev is in dire need of a rebase :octocat: . somebody's who's familiar with the recent commits on master should run\ngit checkout 9.0.0-dev\ngit rebase master\ngit push 9.0.0-dev\n\nand the unrelated commits should disappear from this PR\nOn Mon, Jun 26, 2017 at 10:10 AM Bas Broek notifications@github.com wrote:\n\nYeah, that's what I saw when switching the target branch as well. \ud83e\udd14\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1140#issuecomment-311122243, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dERsXlpMpGdSYGGLQJFTDxp11mTfks5sH-YQgaJpZM4OEqVD\n.\n. @ArthurAlvarez this conversation may help https://github.com/Moya/Moya/issues/748#issuecomment-264572164. Also, we'd be open to a PR that fixes the breakages \ud83d\ude04 . @mrachid this conversation may help https://github.com/Moya/Moya/issues/748#issuecomment-260059360. @dindonkey I have a feeling that your Drivers are being disposed of before the subscriptions can fire and propagate next events. You may need to use one of the RxBlocking operators after you scheduler.start() to fix that. Sounds good to me!\nOn Sat, Jul 22, 2017 at 3:35 AM \u0141ukasz Mr\u00f3z notifications@github.com\nwrote:\nHey @larryonoff https://github.com/larryonoff! Your proposal is just in\ntime for our 9.0.0 version \ud83d\ude04 I think this one can get in as well, what\ndo you guys think, @Moya/contributors\nhttps://github.com/orgs/Moya/teams/contributors?\n\u2014\nYou are receiving this because you are on a team that was mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/1182#issuecomment-317174538, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dFjjCxZclQaRMAkGpxoyNoOk9ZR4ks5sQdB3gaJpZM4OgHcz\n.\n. \ud83d\udc4b\n\nThanks for doing this @sunshinejr, let's also remove the functions that are on ObservableType, since the ones you've added on PrimitiveSequence should work for both Singles and Observables. From my understanding, observables are primitivetypes, but I'm not sure\neither\nI'll take a look soon\nOn Fri, Aug 11, 2017 at 10:33 AM \u0141ukasz Mr\u00f3z notifications@github.com\nwrote:\n\nHmm, are you sure that it works for both @AndrewSB\nhttps://github.com/andrewsb? I don't see it in code, but I might be\nmissing something.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1213#issuecomment-321873359, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dAq7ukf9591S5C_7WkJpsuXxRY23ks5sXJBrgaJpZM4O02ym\n.\n. https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Traits/PrimitiveSequence.swift#L60\n\nIt looks like PrimitiveSequence conforms to ObservableConvertibleType... so I was wrong, we need to keep the operators duped between Observable & Primitive :/ \nsais la vie. The approach is up to you :)\nIf you want to catch the error, then maybe want to push a uialercontroller onto the view hierarchy?\nAnother option could be to try re-trying the request . It looks like your program crashed at breakpoint, can you share what was outputted in the console?. @SD10 I'm still pretty bullish on small single purpose libraries, and I think adding caching to Moya would add a lot of complexity and make it harder to reason about the state of program.\nIdeal caching in my opinion would sit above Moya, maybe like\n```swift\nlet networkProvider = RxMoya()\nlet diskProvider = SomeDiskProvider()\nlet cache = ACache(firstPrioritize: diskProvider, thenPrioritize: networkProvider)\ncache.giveMeThe(.zen)\n```\nWhat do you think?. @SD10: Other than making it more visible, what upside do you think there would be in building this cache over using Carlos?. I think the capabilities are robust, complicated, and variable enough that we shouldn't prescribe a one-size-fits-all solution to everyone who uses Moya. \nI think those who care about caching should configure something that works for them -- whether that be a URLCache, something like PINRemoteImage just to cache images, or Carlos to cache some/all requests -- and all of their caching and expiration policies . I think the issue is that the provider itself isn't retained, usually a singleton is defined somewhere outside the function scope with a static let. Are you familiar with how ARC works in Swift?\nHere is your function with some annotations from me\n```swift\nfunc login() {\n  // begin creating a UserService\n  //      create a MoyaProvider to pass in as a param\n  //      set the UserService.provider to this MoyaProvider (in UserService.init)\n  let userService = UserService(provider: MoyaProvider())\n// create and subscribe to an Observable - nothing interesting here\n  userService.performLogin(username: \"foo\", password: \"bar\")\n    .subscribe(onSuccess: {...}, onError: {...}\n// we're about to leave the scope of this function! free any local variables we created!\n  //   userService has 0 strong references and will be disposed of\n  //      all of userService's instance variables (userService.provider included) will all be disposed of as well if they have 0 references -- which in this simple case they do\n}\n``. I think the issue is that the provider itself isn't retained, usually a singleton is defined somewhere outside the function scope with astatic let`. Are you familiar with how ARC works in Swift?\nHere is your function with some annotations from me\n```swift\nfunc login() {\n  // begin creating a UserService\n  //      create a MoyaProvider to pass in as a param\n  //      set the UserService.provider to this MoyaProvider (in UserService.init)\n  let userService = UserService(provider: MoyaProvider())\n// create and subscribe to an Observable - nothing interesting here\n  userService.performLogin(username: \"foo\", password: \"bar\")\n    .subscribe(onSuccess: {...}, onError: {...}\n// we're about to leave the scope of this function! free any local variables we created!\n  //   userService has 0 strong references and will be disposed of\n  //      all of userService's instance variables (userService.provider included) will all be disposed of as well if they have 0 references -- which in this simple case they do\n}\n```. @bhstrifork that does look like a pretty serious bug in 8.x, are you sure that request's subscription fired? Can you give me a commit hash of Moya where you were able to repro?\nIf you think it's non obvious behaviour we should see if there's anyway to make it easier to reason about. If you're interested, I'd be more than happy to make changes based on what you think is wrong; can you explain what doesn't make sense?. @bhstrifork that does look like a pretty serious bug in 8.x, are you sure that request's subscription fired? Can you give me a commit hash of Moya where you were able to repro?\nIf you think it's non obvious behaviour we should see if there's anyway to make it easier to reason about. If you're interested, I'd be more than happy to make changes based on what you think is wrong; can you explain what doesn't make sense?. Hmm, it looks like maybe the bug was fixed in https://github.com/Moya/Moya/blob/master/Changelog.md#900-alpha1\nThat makes sense, thanks for reporting @bjarkehs. Hmm, it looks like maybe the bug was fixed in https://github.com/Moya/Moya/blob/master/Changelog.md#900-alpha1\nThat makes sense, thanks for reporting @bjarkehs. ```swift\nvar disposeBag = DisposeBag()\nprovider.rx.request(.zen).mapString().subscribe(onSuccess: { json in\n    print(zen) // this will never get called because we dispose\n}) { error in\n    print(error)\n}.disposed(by: disposeBag)\ndisposeBag = nil\n```\nso here, the request will be started, but the subscription will never print zen, since we dispose (set to nil) the disposeBag before the request can finish.\nIf you're interested in the implementation, when the disposeBag is set to nil, code here in RxMoya gets called that cancels the request using Alamofire.\nIs there anything else we can shine the light on for you?. ```swift\nvar disposeBag = DisposeBag()\nprovider.rx.request(.zen).mapString().subscribe(onSuccess: { json in\n    print(zen) // this will never get called because we dispose\n}) { error in\n    print(error)\n}.disposed(by: disposeBag)\ndisposeBag = nil\n```\nso here, the request will be started, but the subscription will never print zen, since we dispose (set to nil) the disposeBag before the request can finish.\nIf you're interested in the implementation, when the disposeBag is set to nil, code here in RxMoya gets called that cancels the request using Alamofire.\nIs there anything else we can shine the light on for you?. Ahh, my fault. The swift type system probably inferred disposeBag to not be an optional. Change the first line to \nswift\nvar disposeBag: DisposeBag? = DisposeBag()\nand you should be fine\nHappy you got it to work \ud83d\ude04 . Ahh, my fault. The swift type system probably inferred disposeBag to not be an optional. Change the first line to \nswift\nvar disposeBag: DisposeBag? = DisposeBag()\nand you should be fine\nHappy you got it to work \ud83d\ude04 . I'd recommend creating a second MoyaProvider which provides photos, and then calling the passing in the ID of the photo (needed to make the URL) into a call after you get it from the first request.\nThat is assuming some knowledge of the pictureURL though. If you don't have that we'd have to go another route.\nAlso, I use a library called PINRemoteImage so I don't need to worry about the request of the image. If you're just planning to display it in a view, I'd recommend not worrying about the second request by giving that responsibility to another library. I'd recommend creating a second MoyaProvider which provides photos, and then calling the passing in the ID of the photo (needed to make the URL) into a call after you get it from the first request.\nThat is assuming some knowledge of the pictureURL though. If you don't have that we'd have to go another route.\nAlso, I use a library called PINRemoteImage so I don't need to worry about the request of the image. If you're just planning to display it in a view, I'd recommend not worrying about the second request by giving that responsibility to another library. The simple fix would just be to add an .asObservable() before you retryWhen. The reason we switched to a Single over an Observable was because RxSwift's new Single trait modeled a network request better than the more permissive Observable. Hey @uditha2233, apologies for the inactivity here. If you're still using that design on your server, you'll probably want to implement an endpointClosure and add your string in there\nLet us know if we can help in any other way \ud83d\ude04 . Great write-up. My two cents: I haven't ever used the AccessTokenPlugin since my subroutine for getting an access token is usually async, where I return an Observable that checks disk, make sure the token is still valid, and if not hits the network. \nMaybe making Rx versions of the plugins would be a nice alternative? I'm not sure that our plugins right now are encouraging the best, most correct use of our APIs. This does seem really great, and from the conversation in #1126 it seems like people agree. Let's get this in \ud83d\ude04 \nI'll fix the stale\nCloses #1126. Moya is probably a level of abstraction too high to get metrics like that. Can you explain how you want to use the circuit breaker pattern? Is it with all of your requests, or just one endpoint?. Can someone test to see if the demos work? I only have Xcode 9 on my machine, so I cant currently build and run the project. @sunshinejr I tried to fix this, but I'm not sure why the Rakefile is now invalid. Here were my changes https://github.com/Moya/Moya/pull/1292/commits/c1fb4a00af632a8937deddcc58caa0861109ab21\nCan you point me in the right direction?. Thanks @pedrovereza \ud83d\ude04 . \u2764\ufe0f thank you for finishing this up @sunshinejr, and for the reviews everyone\n@pedrovereza @BasThomas: Is there a reason we're not linting the demo project? Now that it's in the same xcodeproj it would be trivial to enable. Thoughts?. working on it now \ud83d\udc4c\nOn Tue, Oct 3, 2017 at 10:27 AM \u0141ukasz Mr\u00f3z notifications@github.com\nwrote:\n\n@AndrewSB https://github.com/andrewsb yeah, good idea, if you have some\nspare time you can go for it :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1292#issuecomment-333918478, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dF1-jxlHPzOwjkKBnSW8BQFlm_Lfks5som5_gaJpZM4Pbdc7\n.\n. I'm reading through RxSwift's guide to disposing and, in my potentially uninformed mindset of things Rx, it seems to me like you have to hold onto your provider if you want your subscriptions to stay alive. \n\nCan we arrive at a consensus for that? @sunshinejr @pedrovereza @freak4pc what do you think?\nAlso, if that is the case, maybe we shouldn't be capturing self in rxRequestWithProgress. > even if a request was released there should be at least an error.\n@volodg I disagree, I think Rx's philosophy is to do nothing when an Observable is disposed, the pattern doesn't recommend sending an error event before disposing.\nIf you don't want to retain the provider, then you need to handle the disposed case just like the error case. @sunshinejr: this may be a good candidate for hacktoberfest!. #1311 does The Right Thing and supersedes this . This dupes #1294, @volodg we'd love your input there instead!. Sorry about the sloppy pull requests @SD10 @sunshinejr, both here and #1292. I'll work on testing my changes before submitting them so you guys don't have to play compiler for me -- I've been doing less Swift lately so it looks like my intuition is less on point than it used to be \ud83d\ude25. @volodg from my understanding, onDispose is already being called if the Single is disposed. in this comment https://github.com/Moya/Moya/pull/1294#issue-258728763 for example, the .debug() operator prints isDisposed.\n@sunshinejr sounds good! Once I commit can you re-review before merge?. We're now deep in hacktoberfest. Does anyone have any issues we can create as good starter tasks? Something we've wanted to add/change/remove for a while?. \nsquashing sounds good to me, but its a little worrying that some of these commits are showing up in the log. also, is there a reason why this isn't being targeted to master, but 10.0-dev instead?. I'm so confused. I don't remember closing this. Was this landed elsewhere?. I'm sorry about that! 10.0.0-dev was behind master, so I thought we were done with it!. \ud83d\ude13. @sunshinejr I just rebased!. 2 questions came up while I was doing this\n\nWhy don't we have a build phase that runs swiftlint for us?\nCan someone try to remove cyclomatic_complexity from https://github.com/Moya/Moya/blob/master/Sources/Moya/MoyaProvider+Internal.swift#L204, maybe by splitting the function up, or collapsing them into existing switches. Also, can we add documentation for what https://github.com/Moya/Moya/blob/master/Sources/Moya/MoyaProvider+Internal.swift#L224 is doing? Specifically why we don't have to do anything if progressCompletion is nil, or why we aren't handling the other cases of progressAlamoRequest? It no longer looks as if its \"making the actual request\", but that it's just registering progress callbacks.. 1. I added the build phases, is there any way you can think of to test the potential breakage?\nIt sounds complicated, but like it's working. So I just disabled cyclomatic_complexity for the function :) \n\nPast that, this is ready to go after review. @SeRG1k17 to my knowledge using AlamofireImage through Moya currently isn't possible. We may be open to a Pull Request that adds support, but I don't speak for the entire org, if you're interested in that, I'd recommend creating a new issue with a proposal, rationale, etc.\nI personally use PINRemoteImage and love it. I think it's ok to leave the Moya ecosystem for image downloading and caching. I saw no upside from limiting myself to just Moya (other than first class testing support, for which I wrapped PINRemoteImage with a class that could used stubbed images instead). Or, in your case, using AlamofireImage directly if you're so inclined . @SeRG1k17 to my knowledge using AlamofireImage through Moya currently isn't possible. We may be open to a Pull Request that adds support, but I don't speak for the entire org, if you're interested in that, I'd recommend creating a new issue with a proposal, rationale, etc.\nI personally use PINRemoteImage and love it. I think it's ok to leave the Moya ecosystem for image downloading and caching. I saw no upside from limiting myself to just Moya (other than first class testing support, for which I wrapped PINRemoteImage with a class that could used stubbed images instead). Or, in your case, using AlamofireImage directly if you're so inclined . This is awesome :)\nCan you delete c9981ee and rebase instead? I think it's ready to merge after that. @lovesomeone for sure!\nSo you're going to do two things.\n1. delete that commit\n2. rebase your branch onto the latest Moya:master.\ngit rebase is a really interesting and often hard to understand tool, https://git-scm.com/book/en/v2/Git-Branching-Rebasing is a great resource if you're interested.\nTo delete the commit, you're going to do an interactive rebase (see https://stackoverflow.com/a/1338756)\nso I think the command will be \ngit rebase -i c9981ee~1\nwhich will bring up your $EDITOR, where you should drop c9981ee and save. That should initiate a rebase and delete the commit\nTo rebase your changes onto Moya:master, first you'll need to have Moya/Moya as a git remote (you can see all your remotes with git remote -v), assuming you have it as a remote named origin that points to Moya/Moya, you can\ngit fetch origin\ngit rebase origin/master\nand if that worked without error, you can force push to your fork (assuming the remote is named lovesomeone)\ngit push lovesomeone -f\nand that will update this Pull Request. Once again, thank you so much for translating these docs \u2764\ufe0f it's an amazing thing to have done\nlet me know if I can clear anything up or if I was confusing anywhere!. Let me know if this is too high level, but Carlos, a swift caching library supports this https://github.com/WeltN24/Carlos#pooling-requests\nAlso, if you're so inclined, I always recommend a swift caching talk given by a friend of mine: https://www.youtube.com/watch?v=8uqXuEZLyUU. This is looking to me like a wontfix. I don't see an issue in task being called multiple times.  If you do, please help me understand why that's the case\nIf there is a time consuming operation you have a couple of options\n\ncache the value so the operation is only performed once, and the second value comes at O(1) from the cache\ndispatch onto another thread before you request to prevent the UI from hanging\nperform the time consuming operation outside of the task computed property and pass in the computed value to your endpoint. @zhaoyunyi can you share your Podfile and Podfile.lock please?. and the code that isn't working for you (sorry, I should have put this in the earlier comment). yup, @sunshinejr's got it\n\n```swift\nprotocol NetworkTarget {} // an empty marker protocol to use\nenum FacebookTarget: NetworkTarget {\n    case login\n}\n```\nswift\nclass TheNetwork {\n    func request(target: NetworkTarget) -> Observable<Response> {\n        switch target {\n        case target as FacebookTarget: return facebookRequestLogin()\n        case target as MoyaTargetTypeEnum: return moyaProvider.request(target)\n        default: fatalError(\"not yet implemented\")\n        }\n    }\n}. Looks good @SD10 \nI thought it might be interesting for us to give GitHub projects a try. https://github.com/Moya/Moya/projects/1, what do you think?. @sunshinejr we should tag the issues/PRs so someone new to this has the context required to write a test \ud83d\ude04 . I'm admittedly a little rusty with Moya, but I'm trying to make a single request method that uses the type in the enum as it's return type.\nIs something like this possible? I remember seeing discussion in #948, #950, and #1061.\n\nI'm trying to fill out the request method right now. From where I got on my side project with thrift, I realized that something like Moya wasn't useful, and I could use the generated code just as well.\nI guess that means Moya can be replaced \ud83d\ude1c\nI'm switching to gRPC next week to help with some streaming requirements, maybe Moya will have some use there?\n@SD10: I could return an AnyDecodable wrapper, but then I'd have to force unwrap types at the callsite, which removes the type safety I was going for. @SD10 can you elaborate re: TargetTypeDecodable?. @asasdasasd There are a couple of open source apps using Moya, they're interesting to check out https://github.com/Moya/Moya/blob/master/docs/CommunityProjects.md#applications, I'm pretty sure Eidolon retries using RxSwift.\nIf you're having issues retrying the request when the HTTP response code is 405, and want us to help, please share an example app that shows your approach.. hmm, great question!\nYou can probably handle it by doing subclassing MoyaProvider and overriding request, maybe something like \n```swift\nfunc request(token: ..., callback: (Response) -> ()) {\n  super.request(token) { (response)\n    // heres where the magic happens, you can do anything you want. Check if the token expired, re-request, etc.\n// finally, call the callback in the params once you're happy with the response\ncallback(response)\n\n}\n}\n```. This looks interesting @SD10. Does it show up as a GitHub comment on Pull Requests? Do you know of any repos using it where we can see what it looks like?\nI'd be down to switch to something like codebeat instead of what we have, codecov, I've always looked at that comment as noise. Codebeat looks more actionable to me from the dashboard I saw. It sounds interesting, but it's hard to say without more concrete thoughts. What kind of generic methods?. @spookyvision it's a little worrying to see 25 commits in this PR. Any idea why your PR is pulling in so many other commits?. happy we could help @ufosky!. I believe that through Carthage, Moya Vends precompiled frameworks\nThey\u2019re on the release page . @canny09 I think @SD10 was trying to say that the server never sends a response, which is why your logger never receives anything to print.\nThere are a lot of layers here, with your custom Moya wrapper, view model, view controller, etc.\nIf you could simplify your bug to the smallest example, that would be ideal for us to help you debug. We're not going to be able to debug your entire system with you, it's just too much to go through. If you'd like to find out if your plugin works, I'd recommend adding it to the provider in one of the examples instead \ud83d\ude04. @levibostian serious props on the repo, it looks like a lot of work went into it!! \nLet me tell you how I handle these assumptions when I work\n\nThe app could call my API and return back a 500 error if my API is down.\n\nwhen I 500, 2 things happen.\n1. A user alert that says \"Uh oh, there looks like there was some problem with your network, try again\" happens\n2. My backend fires an alert that an engineer can look at and potentially fix.\n\nThe app could have a spotty network connection and fail the API request.\n\nNope! I use a provider that only hits the network if the device has internet connection\n\nThe device could be offline and the network request will fail.\n\nNope! I use a provider that only hits the network if the device has internet connection\n\nThe app performed an API call, got a 401, I need to have the user re-login.\n\nNope! I use http://github.com/AndrewSB/Expirable, so I know if my user fail to auth before the request is sent.\n\nThe app performed an API call, got a 400, I need to be alerted because there is a bug with the app. I need to tell the user there is an issue, instead of the app crashing without telling the user there is an issue.\n\nThis is legitimate, this would get through everything and result in the same \"Uh oh, try again popup\", where I'd include the error.localizedDescription if it exists.\nThis would be an actual programmer error on my part, probably. The way I get around this is by unit & integration testing\nSo overall, to respond to\n\nDoing what I am doing with the Lucid library seems like the recommended method, is that safe to say?\n\nSomewhat...\nYour first step would be to reduce the kinds of errors your networking layer can throw, and then catch those errors. \nAlso, Lucid creates issues because it isn't localized. For example, lets say someone in Japan is using my app. NSError.localizedDescriptions are translated to the user's NSLocale, that way if my request 5xxs and I need to show an error message, if I use the error.localizedDescription I'll get something relevant in Japanese (assuming Alamofire/NSURLSession/the callee that raises the NSError had it translated). So by catching and rethrowing a non localized error message, you may be reducing your user-friendliness. I missed your question, I'm sorry. To respond:\n\nBecause of the API of Moya, you must get the more human readable error message after the request completion handler has been called. The task cannot be accomplished via a Moya plugin. This makes the library kinda hacky to get working. I am simply taking the result's MoyaError and doing, \"is the MoyaError an error with the Internet connection? If so, return this message...\" kinda code. It would be nicer if this type of error processing would be available functionality in Moya.\n\nI feel as if we already give this kind of functionality from Moya, by parsing the error to see what went wrong\n\nBoilerplate code. I need to remember for each and every API call in my app to call processErrors() (to call the Lucid code) or my library code will not run and I run the risk of showing my users the not-super-useful error messages and not getting alerted when an error has happened. Remembering to call one of the .filterStatusCode() functions makes sense to do for every API call but that's hard enough to remember which causes bugs.\n\nLet me blow your mind here. Instead of calling .filterStatusCode() on a per-response basis, you could use a common request function that will do all of the filtering and even the error parsing just once!  I usually use a custom wrapper of Moya (called Networking in https://github.com/Moya/Moya/issues/748#issuecomment-257692175), and inside Networking.request, I handle filtering successful error codes, and even something similar to what your Lucid does in the next line (using .catchError(parseMoyaError)). @heyjas0n you have a separate issue. You're using an async function inside the requestClosure. That isn't supported, you'll need to assign your accessToken synchronously inside the requestClosure. Let's not pollute this issue with your separate issue. If you still need help, please open a separate issue.. @ivanmkc your issue sounds pretty serious. Can you share the diff you applied to get the header to work?. Ahh, I see.\nThanks for following up @ivanmkc!. @evgeny-sureev can associated values in an enum case be given defaults? If so, maybe it would be nice to add an encoder property to the requestJSONEncodable case instead of creating a new one. For people who don't want to change the default value, they need not change it. @SD10: tbh I prefer (a), it seems more complete a solution . Uggh, I don't particularly like the trade-off we made, but I understand why we did. Thank you for your work and patience @evgeny-sureev \ud83d\udc4d . Yup, it looks great. \nOh interesting, the merge commits are from the GitHub CTA... I wonder if they show up in the history of master once we merged. I guess we're going to find out!. Wow, that's incredibly annoying\n\nGithub adds them as clean merges, complete noise. . What additional validation functions do you think would be useful in Moya? If it adds value we'd probably be happy to take a PR. I have a hunch, share your MoyaAPIClosures.endpointClosure?. Haha sounds good @colinta . Haha sounds good @colinta . This is out of scope for Moya, so I'm going to mark this is wontfix and close the issue. If you'd like to help other people who run into the same issue, you should post your findings here once you've solved the issue. The documentation is current, and valid in 10.0. If you look at the interface for MoyaProvider, you'll see that you may omit the other parameters since they have default values, and specify only the plugins and endpointClosure.. Yeah, maybe as comments throughout the code?\nAlso, it doesn't look like your Closes #1258 in the first comment took effect. Not sure what's up there. We really appreciate your QE's (and your) time to surface this bug, that you guys used Charles to make sure it was a legitimate issue, and then wrote a minimal reproducible example \ud83d\ude04\nThis sounds like a problem and we'd love to fix it. In my opinion, the easiest way to find the cause and fix the bug is through TDD - we can write a failing test that shows the 2 request behavior, and then mess with the code until the test passes.\nWe'd be more than happy to accept a PR from you, or if you wait a couple days/longer, a contributor will probably come around and try to fix it. If you aren't sure where to start, write the failing test. That would be a huge help, no pressure though, we'll get around to it soon if not \ud83d\ude43. @ETmanwenhan: I might be wrong, but I don't think plugins can touch the response, they only have access to the request. If you want to use cached data you're probably going to have to wrap Moya and have some logic to decide if a request should be fulfilled by the network or the cache.\nMoya has historically decided not to deal with caching, since that's a totally separate issue. There are a couple of closed issues on this repo that ask for advice on how to accomplish basically the same question you're asking. Take a look at a few of them and if you still have questions one of us will be more than happy to answer. Not stupid at all \ud83d\ude43. This is so awesome @SD10, thank you for doing it \ud83d\ude04 . @freak4pc brings up a great point. Those silent breakages are the most dangerous in my opinion. If we decide to make this change I recommend artificially making a breaking change in the source with a @deprecated message that shows up as a warning so people see that at upgrade time.\nI\u2019ve also asked a friend who\u2019s a consumer of Moya, currently back on v8 for his opinion on this. I\u2019ll post here when we\u2019re done talking . @ashfurrow your thoughts are always awesome. Thank you for taking the time to step in on this \u2764\ufe0f\nMy friend is more of a professional friend, he is almost definitely going to respond, but I'm not going to push him to respond right now due to the chance of him taking time off for the holidays. His opinion should be useful for more than just this issue. I was very curious when I heard they were on a 10+ month old release for an iOS app which is currently in active development . I got a response back a while ago, forgot to forward it\n\nWe haven\u2019t upgraded it yet mostly because of time constraints because we wanted to get our app out the door.  We were in crunch mode.  We\u2019d like to update it soon-ish (within a month or so) if possible. \n\nSo it's because their team cares prioritizes their product working over keeping their dependencies upto date.. Hey @Jeroenbb9! Thanks for doing this \ud83d\ude43\nBefore we can accept it, can you please\n\nClean up the commits so SD10 & sunshinejr\u2019s commits don\u2019t appear as part of this PR\nFix the swiftlint warnings\n\n\ud83d\ude4c. Thanks for doing this @ahmetoguzlu!\nIt doesn't look like your changes came through in this Pull Request though, do you want to try again? Let us know if you're confused and a contributor will try to help out \ud83d\ude43. Another good pattern I've seen is along the lines of \nCopyright 2004-present Artsy, Ash Furrow\nwhere 2004 is the year the project started. That way we don't have to remember to keep it up to date every year. Another good pattern I've seen is along the lines of \nCopyright 2004-present Artsy, Ash Furrow\nwhere 2004 is the year the project started. That way we don't have to remember to keep it up to date every year. It doesn't seem like a bad idea to me, but I can't imagine why the person who implemented the generics in Endpoint would do so for no reason. I think the easiest way to see why it's required is by attempting the PR. Maybe you'll find out if/why it can't be removed while attempting the change. @shwetachitlangia without more information it's going to be hard to help you debug your issue. This would be a massive bug in Moya if it is an issue with Moya, but (from the fact that hundreds, if not thousands of apps are in production with Moya) it's more likely an issue with your code than the library.\nDo you think you can make a Playground/example project that shows the issue? Without wireshark logs that would be most helpful for us to get your bug sorted out.. @shwetachitlangia did this issue not show up on an earlier version? 9.x, for example?. Thank you for working on this @lucas34 \ud83d\ude04 \nIsn't this a headache? We should create a new dependency management definition that compiles down to pods+carthage+spm! famous last words https://xkcd.com/927/. @pietrocaselani that was a great answer. We should investigate if we can start sorting our knowledge base better to add a note to the ISSUE_TEMPLATE to check some sort of frequently asked issue section.\nEDIT: Tracking over at https://github.com/orgs/Moya/teams/contributors/discussions/1\n  . My first question for you is whether you're retaining your provider or not. If your provider is released, the request will be too. \nOnce you're sure you're retaining your provider we can move onto other potential issues \ud83d\ude04 \nThe fact that an immediate (synchronous) retry works and one that waits a little doesn't makes me suspect that something you weren't expecting to have disposed of is being disposed.\n  . You\u2019re welcome! Glad we figured it out \ud83d\ude06. Oh no \ud83d\ude15\nWe need to fix this, swiftlint shouldn't be required to compile the targets.. Hmm, very interesting. Could you add a debug() statement above your take(1) line and share your logs after that? \nIIRC if your fromLocal Observable sends a .next event, the fromNetwork should never be subscribed to, so Moya shouldn't be doing anything in the case of a local cache hit.. Maybe the code -999 is the signal for being cancelled (disposed)? I'd recommend switching to .concat instead of .take(1), since that makes more logical sense to me. Formally (from my understanding), a cache should only resort to the less efficient source after receiving a cache miss from the more efficient source.\nEDIT: not concat, thats the wrong operator. some other operator that will only subscribe to the second observable if the first one doesn't emit an image. The operator isn't coming to me right now, but the Rx slack would be a great place to ask if you aren't sure \ud83d\ude04 . This is really awesome. Once we're done doing this, you should publish a blog post about how to classify issues @SD10 . That sounds like a useful tool, if I was to implement it, it would be a python script that used the GitHub API - probably <200 LOC.\nMaybe that already exists\nOr perhaps an extension to Danger/Peril. I think the main issue is that when the Provider architecture was decided upon, they were planned to be used as long lived objects, that basically matched the lifetime of the application.\nI think refactoring them to change that would be awesome, and adding a static func request that would return a disposable. That seems like the right answer to me \ud83d\ude43. @esam091 most implementations I've seen have a global provider - it's what Eidolon does too. Yup, you're totally right @SD10. I was being more pedantic because I just found tpope's style guide and was trying to up my git commit game.\nLet's say no to the commit message length, but yes to prose.. Yeah, I don't think it's possible in a plugin\nI don't know exactly what you're trying to build, but I'd recommend re-visiting your assumption that a CLI has to have blocking requests. Great CLIs, from my experience, don't block. They show loading indicators and update with content when they finish loading.\nThey also make it possible to run multiple tasks at once, instead of doing them one at a time, which is probably what an architecture that incorporates blocking requests will result in. I'm thinking of tools like npm, buck, fastlane, etc.. @sunshinejr are you talking about our callbackQueue? Or something else. Yeah! This is awesome \ud83d\ude04 \n@sunshinejr do we have any linters/tools that can validate our CHANGELOG formatting? Or should we check manually?. Back from when I was changing how Moya's response queue worked, I thought it would be awesome to be able to specify which queue to run an Alamofire request on; I would have loved to do something like have a serial queue for my network requests, managed by Rx. \nI didn't look too far to see whether a client could specify which queue to have the work run on, I think having that control would be really cool \ud83d\ude04 . @jshier that sounds like a great potential perf win. Once you're done making the change, I'd love to see a method to pass in those queues (with a default param so that most users don't need to deal with it), or variables that contain the queue names so clients (if they care about that level of granularity) can reach in and change or prioritize things. \ud83d\ude06\nHappy you got this figured out. Open a new issue if you get stuck on anything else!. Sorry for the delay, I'm actually sympathetic to @jdisho's issues, I'm currently working on an app where we're incredibly constrained on binary size, so I wouldn't be able to take a dependency like Alamofire, I can't use Moya because of that, so I have a minimal reimplementation I've been using with graphql.\nI'd love to see a variant of Moya that takes out Alamofire (more likely, offers a compile time option to use either Alamofire or NSURLSession).. Thoughts on using a throwing function over returning a Result? I prefer dealing with results than try catching. Hmm, that's true. I'm ok with the throwing function then, if you want to do it, go ahead . @chyrta yup, that was me! I'd love to be able to point people to your blog post instead of the issue where I explained something similar. Don't hesitate to reach out if my suggestions weren't clear. IIRC we've had issues with requestWithProgress before -- last time there were no .next events with progress. This sounds like it could be a real bug in Moya, I'm looking to find the issue that described the old bug. Actually, as I read closer, it may not be as deep-seated a bug as I imagined. Here's the implementation of filterCompleted: https://github.com/Moya/Moya/blob/9a4b2901492898acaceb232dc6481ecc85dfff50/Sources/RxMoya/Observable%2BResponse.swift#L65\nDo you see any issues with it? If you edit it to work, I'd be more than happy to accept a PR from you. There's some history behind the implementation in the PR that stemmed from #1094, I'd recommend taking a look there to understand how filterCompleted / completed / requestWithProgress evolved. I feel as if the right answer here would be passing in a custom Alamofire Manager into Moya, we already support that, right? That way you can set all the options you care about for Alamofire, and pass the configured manager to Moya to use. Thank you for explaining, my apologies on not understanding that context.\nTo keep Moya simple, my initial opinion is to mark that as wontfix, and say the mitigation is to use a different Provider for each TargetType.\nThanks for taking care of this @SD10 . @sunshinejr can you explain this line? It's causing an error for me. Is it a typo?\n. that makes sense. I'll give this a shot\n. removed all of them \ud83d\udc4d \nthanks for catching that!\n. I talked to orta about it https://github.com/CocoaPods/CocoaPods/issues/5889#issuecomment-247737624, he said that Cocoapods defines a env variable, that I think (but am not sure) can be used in code with a #if check.\nWe could also define our own flag, but rn that just seems like extra work to test and maintain for no added value. But if you think there's a compelling reason to define out own flag, then we should jump on it \ud83d\ude04 \n. I think this should either be ~> 3.0.0 or == 3.0.0\nhttps://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#version-requirement\n. It works as is now, but \"\" tell carthage to use git rev-parse, which the dependency resolver often has issues with \u00e0 la https://github.com/Carthage/Carthage/issues/733\n. Yeah, RxSwift updated their README https://github.com/ReactiveX/RxSwift#carthage\nIt should be github \"ReactiveX/RxSwift\" ~> 3.0\n. @ashfurrow I think you're right, having a scheduler, per RxSwift norms would be more idiomatic, I need to find out if I can ask a scheduler to give me the thread it would run on, to pass at Alamofire.\nThank you for the feedback!\n. \ud83d\ude43\n. I agree with @BasThomas we can remove this line. should we make this an exhaustive switch instead?. woah, you can do this? That's incredible . I think this can be done in one line, carthage bootstrap --platform ios tvOS macOS. yeah, I'm not sure how that happened. Thanks for catching it @pedrovereza . Let's add a comment here with the link to the issue and a rationale for why this is being done. In this test case as well. I think a link to the issue would go a long way \ud83d\ude04 . I'm not 100% sure about the syntax here. Shouldn't you use a matcher? .toEqual or something?. I could be wrong though. why is override no longer needed here? is it because you added the queue param? If so, should we not also add the queue param to the regular callback MoyaProvider?. I don't think we'd need to deprecate the old signature, if we have a default value,nil, for the queue param, then it would be a non-breaking change. So it should just be safe to change the MoyaProvider initializer \ud83d\ude04 . Oh!! I see, interesting behavior. Thank you for explaining it with examples! I totally get it now\nLet's just make a breaking change and target 9.0.0 instead? What are your thoughts? Do you think deprecating is better practice?. Yes, I think adding it to all 3 is the best approach, so we have feature parity (as much as possible) between all three.\nWe also might be able to remove all the queue logic from our Reactive and Rx subclasses by instead implementing it in MoyaProvider and then doing super.request instead of self.request in places like https://github.com/Moya/Moya/pull/1055/files#diff-ffd4342ff685cb2dff7f9c3cf77cef22R38\nLet's do the deprecate approach, and then maybe in 9.0.0 I can remove the deprecated function so we keep our codebase clean (I can make that PR after we're done with this one)\n. I feel as if 30 days is a pretty reasonable amount of time before an issue/PR is stale. Stale to me feels like a bump for the contributor to respond, maybe even 10 days with no activity.\nI think it's a good thing for us to keep open issues moving through the pipeline. as well as confirmed bug those often take a while to be resolved. LGTM. I think it would be, and also add a sentence saying something along the lines of \"please open a new issue to further discuss the issue, if desired\". hmm, we wouldn't be able to lock the issue then.\nShould we keep locking as a manual thing, not something we do to stale issues?\nI'm just afraid of someone responding to a closed issue later, and one of us having to pay attention to that and re-opening the issue.\nI feel as if that goes against what we're trying to automate away with this bot. That's true, but if I think of issues that are opened now, (to me) it feels like an issue without a response for a month feels stale\nI would love to hear what other people think - @BasThomas especially (since you handle closing so many of our current stale issues \ud83d\ude0b)\nTotally fine with 60 otherwise, Im just trying to make sure our bot is useful. I'm down to go with 45 and then adjust in the future. \ud83d\udcaf . thoughts on MoyaProviderProtocol v MoyaProviderType? I've always preferred the latter, but I don't know if I've fallen behind the times ;p . \ud83d\ude2e . thanks @pedrovereza . is this diff supposed to be included in this PR? Seems wrong to me. do you think we should give the callbackQueue a default argument? Maybe self.callbackQueue? This seems like an advanced feature and might confuse people. ditto here. Unrelated to this PR: Why is there a none case? It doesn't seem to be doing anything. Being a plugin, the none case should just be modeled by not using the plugin. Am I missing something?. Ahh, I see. Thanks for clearing that up \ud83d\ude04 . @devxoul are these keys needed? I thought Codable automatically synthesized them if omitted.. does it need to be exact, or can we just specify version 10, and it will choose the latest published beta/stable?. nit: it would be nice to mark tests we add from bug reports with the bug report that found it. So adding something like bug from Moya/Moya#1311 would be awesome. I remember seeing this and being super confused. This is just a hack in the language to get nice namespaced Observables. I don't want to disagree - you're probably right - but whats the upside of putting a bugfix into master and then merging that into develop instead of creating the bugfix commit in develop and then cherry-picking that commit onto master?. that makes sense, thanks @colinta \ud83d\ude04 . let's recommend the --cache-builds flag as well!. cache-builds. I think it's wise to implement Equatable, also, tabs are off. I think it would be helpful to\n1. make a recommendation for what the default was (i.e. the upgrade path)\n2. Link to the Alamofire docs on validationType. nit: [up for discussion, since this actually might be more confusing] can we change these lines to target.validationType?.statusCodes.map(uploadRequest.validate) ?? uploadRequest instead?. what does localizedDescription return here? Could you add some tests with expected values?. adding a comment that it bridges to the NSLocalizedDescriptionKey, and a link to the apple documentation of that would be awesome. ",
    "minhoryang": "Resolved!!! Thanks All!\n. Resolved!!! Thanks All!\n. ",
    "ivangodfather": "Ok thx you!\n. Not exactly. \nI want also for the default case continue stubbing. And for \"endPointThatShouldReturnAStub404\" return a custom stub.\nSo imagine this situation, you have all your endpoints stubbed and no other requeriment.\nYou can have something like: var provider: MoyaProvider<TWApiProvider> = MoyaProvider<ApiProvider>(stubClosure: MoyaProvider.immediatelyStub)\nThis is ok since stubs all your requests with a 200 with a json from sampleData.\nNow imagine you want to do a test for a specific endpoint that relies that other still stubbed as before but for this endPoint you want to return a 404 and another json.\nSo in other words:\nswift\nlet stubClosure = { (target: TargetType) -> Moya.StubBehavior in \n    switch target.path {\n    case \"endPointThatShouldReturnAStub404\":\n        return // i want to return a custom stub like 404 and specific json\n    default:\n        return .immediate\n    }\n}\n. @SD10 with my first approach?\n      returning return Endpoint<ApiProvider>(url: url(route: target), sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)i get no stub, it just do the network call when i call apiProvider.request(.404case), i want to get the sampleClosure\n. @SD10 why you think with just this\nswift\n                default:  ///endPointThatShouldReturnARegularStub\n                    return Endpoint<ApiProvider>(url: url(route: target), sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\ni would get a stub instead of a regular network call?\nNo, i just set this when creating the provider.\nlet apiProvider = UITestsSupport.setProvider()\n. @SD10 just thing you have an API Contract but the API still not ready. So you just create a provider with (stubClosure: MoyaProvider.immediatelyStub) and in your sample data you just return what the backend would return with 200 status code.  But if you also want to test that what would happen when a certain endpoint fails you need more than that, i dont want to return the sampleData i defined there cause its the regular response, i want to customize that, makes more sense?. @SD10 i know, the think is that i don't want to never stub, i want to still stubbing, but with a customized stub for a specific path.. With this approax:\nswift\nprovider = MoyaProvider<TWApiProvider>(endpointClosure: endpointClosure, stubClosure: MoyaProvider.immediatelyStub)\nHow in my tests i determine which calls are stubbed are which are not? Seems i'm missunderstood that cause makes no sot much sense to me that you actually can create a Provider setting both, but still unsure how to determine which ones goes into which closure.\nAnd yes i know i'm overriding it, cause its not the the behaviour that i want when i found set \"CUSTOM_STUB\". \n. But in any case seem i didnt explain it properly what i wanted to achieve.\nBy parts:\n1- One and most important\nThis initialization was till i opened the tick perfecly fine, and i want to continue the sampleData from my Provider still gets returned. Cause there is NO real API at this moment.\nSwift\nvar provider: MoyaProvider<TWApiProvider> = MoyaProvider<ApiProvider>(stubClosure: MoyaProvider.immediatelyStub)\n2- Now that i have all the network calls stubbed from my previous initialization, i want for an specific path to return a 404 response. Just in the case that \"CUSTOM_STUB\" is set. Maybe i need to create another Provider instead of doing this, i dunno.\n3- Im doing this from UITests\nIm gonna re-read the doc and tell you about if i see something clear this morning.. Doesnt help at all. \nIt says But usually you want the same stubbing behavior for all your targets. Yes for all the targets its ok, but i want for a specific one return a 404.\nswift\n            let stubClosure = { (target: ApiProvider) -> Moya.StubBehavior in\n                switch target {\n                case .404case: ???\n                default: return .immediate\n                }\n            }\nIn the 404 case i would like to return something like EndpointSampleResponse.networkResponse(404, Data()). \nSo from your previous comment i think i can't achieve with just a stubClosure. I need also a endPointClosure.\nswift\n            let endPointClosure = { (target: ApiProvider) -> Endpoint<TWApiProvider> in\n                switch target {\n                case ..404case:\n                    return ???\n                default:\n                    return //I dont want here to make a real request, i want to still stubbing.\n                }\n            }\nIn the 404case i want to return always the EndpointSampleResponse.networkResponse(404, Data()), not just creating an Endpoint  like return Endpoint<ApiProvider>(url: url(route: target), sampleResponseClosure: {.networkResponse(404, target.sampleData)}, method: target.method, parameters: target.parameters) cause it will make the actual request since i dunno after creating a Regular endpoint how the calls can go throught the sample response if you dont create just a stubClosure when initializing. If you create a provider like this: let provider = MoyaProvider<MyService>()when the sampleResponse will be returning instead of the actual request? If you are in UnitsTests it gets returned instead of the request?. ```swift\n    static func setProvider() -> MoyaProvider {\n        var provider: MoyaProvider!\n        if ProcessInfo().arguments.contains(\"STUB_TAGS\") {\n            let endPointClosure = { (target: ApiProvider) -> Endpoint in\n                let sampleClosure = { () -> EndpointSampleResponse in\n                    switch target {\n                    case .404target: return EndpointSampleResponse.networkResponse(400, target.sampleData)\n                    default: return EndpointSampleResponse.networkResponse(200, target.sampleData)\n                    }\n                }\n                return Endpoint(url: url(route: target), sampleResponseClosure: sampleClosure)\n            }\n        provider = MoyaProvider<ApiProvider>(endpointClosure: endPointClosure)\n    } else {\n        provider = MoyaProvider<ApiProvider>(stubClosure: MoyaProvider.immediatelyStub)\n    }\n    return provider\n}\n\n```\nAfter reading again the docs I think this soltuion could work for me. But i dont know why if i initialize the Provider with this Endpoint the sample response closure never gets executed, instead it makes the real url calls.. I think i got it. So basically when you provide an endpointClosure and a stubClosure if you return .immediate or .delayed it will go to the endpointClosure and grab the sampleData. \nSo finally it works! Thx you a lot! If you are curious how i implemented this here it is:\nswift\n    static func setProvider() -> MoyaProvider<ApiProvider> {\n        var provider: MoyaProvider<ApiProvider>!\n        if ProcessInfo().arguments.contains(\"STUB_TAGS\") {\n            let endPointClosure = { (target: ApiProvider) -> Endpoint<ApiProvider> in\n                let sampleClosure = { () -> EndpointSampleResponse in\n                    switch target {\n                    case .400target:\n                        return EndpointSampleResponse.networkResponse(400, target.sampleData)\n                    default:\n                        return EndpointSampleResponse.networkResponse(200, target.sampleData)\n                    }\n                }\n                return Endpoint<ApiProvider>(url: url(route: target), sampleResponseClosure: sampleClosure)\n            }\n            provider = MoyaProvider<ApiProvider>(endpointClosure: endPointClosure, stubClosure: MoyaProvider.immediatelyStub)\n        } else {\n            provider = MoyaProvider<ApiProvider>(stubClosure: MoyaProvider.immediatelyStub)\n        }\n        return provider\n    }. @pietrocaselani yes, im still confused about that thread. The solution is to pass a requestClosure?. @pietrocaselani i also have read this but is not even close of what im looking for. \nI basically need when i perform a request, flatMap the response, check the statusCode to see if its 401 (unauthorized) and if so perform a provider.login() -> wich gives me a valid token, that i can use to retry the previous request. @pietrocaselani \nI had to do all this stuff to implement this function, tomorrow ill give a try with requestClosure, but still unsure that i can check the status code with signedRequest.\n```\nclass MyMoyaProvider {\n    private var sessionCookie: String = \"\"\nfileprivate let provider: MoyaProvider<CustomProvider>\n\ninit(endpointClosure: @escaping MoyaProvider<CustomProvider>.EndpointClosure = MoyaProvider.defaultEndpointMapping,\n     requestClosure: @escaping MoyaProvider<CustomProvider>.RequestClosure = MoyaProvider.defaultRequestMapping,\n     stubClosure: @escaping MoyaProvider<CustomProvider>.StubClosure = MoyaProvider.neverStub,\n     manager: Manager = MoyaProvider<CustomProvider>.defaultAlamofireManager(),\n     plugins: [PluginType] = [],\n     trackInflights: Bool = false) {\n\n    self.provider = MoyaProvider<CustomProvider>(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, callbackQueue: nil, manager: manager, plugins: plugins, trackInflights: trackInflights)\n}\n\n\nfunc request(_ token: CustomProvider) -> Single<Moya.Response> {\n    return provider.rx.request(token)\n        .flatMap({ (response) -> PrimitiveSequence<SingleTrait, Response> in\n            if response.statusCode == 401, let credentials = Realm.getCurrentCredentials {\n                return self.provider.rx.request(.login(user: credentials.username, password: credentials.password))\n                    .do(onNext: { moyaResponse in\n                        self.getToken(response: moyaResponse.response)\n                    })\n                    .map(LoginResponse.self)\n                    .do(onNext: { loginResponse  in\n                        self.saveToken(loginResponse)\n                    }).flatMap { _ in\n                        return self.request(token) //retry the previous connection\n                }\n            } else {\n                return Single.just(response)\n            }\n        })\n}\n\n\nprivate func searchToken(response: HTTPURLResponse?) {\n    sessionCookie = response.getToken()\n}\n\nprivate func saveToken(_ loginResponse: LoginResponse) {\n     //save token to db from loginResponse\n}\n\n```. ",
    "mingyeow": "@AvdLee i am having very similar issues / concerns. i am currently a struct called pagination that encapsulates the page # calculation based on current offset/perpage, amongst other things.\nDo you mind sharing a gist of your datasource implementation when you are done? I would love to get some inspiration.\n. thanks! both works great. \ni was not aware of the need to use .URL when doing GET requests. :)\n. thanks! both works great. \ni was not aware of the need to use .URL when doing GET requests. :)\n. By the way, @Austinate is there an example of using headers to pass in authentication information like tokens?\n. By the way, @Austinate is there an example of using headers to pass in authentication information like tokens?\n. Yes, that is what i would like to do - catch and ignore the error. \nAs you can see, if the errorcode is -999, i am not showing the user any UI. otherwise, i am calling the default network failure indicator.\nswift\nif error.nsError.code == -999{\n  print (\"operation cancelled\")\n} else {\n  self.defaultFailureCallback(error)\n  // this throws an error message\n}\n. Yes, that is what i would like to do - catch and ignore the error. \nAs you can see, if the errorcode is -999, i am not showing the user any UI. otherwise, i am calling the default network failure indicator.\nswift\nif error.nsError.code == -999{\n  print (\"operation cancelled\")\n} else {\n  self.defaultFailureCallback(error)\n  // this throws an error message\n}\n. ",
    "phamquochoan": "Hi ashfurrow,\nIt still doesn't work. I've tried these cases so far\n```\ncartfile:\ngithub \"Moya/Moya\"\n Checking out RxSwift at \"2.0.0-beta.2\"\n Checking out Moya at \"5.1.0\"\n```\n```\ncartfile:\ngithub \"Alamofire/Alamofire\"\ngithub \"ReactiveX/RxSwift\" \"2.0.0-beta.4\"\ngithub \"Moya/Moya\"\n Checking out Alamofire at \"3.1.3\"\n Checking out Moya at \"4.1.0\"\n*** Checking out RxSwift at \"2.0.0-beta.4\"\n```\n```\ncartfile:\ngithub \"Alamofire/Alamofire\"\ngithub \"ReactiveX/RxSwift\" \"2.0.0-beta.4\"\ngithub \"Moya/Moya\" \"5.1.0\"\nCould not pick a version for github \"ReactiveX/RxSwift\", due to mutually incompatible requirements:\n    \"2.0.0-beta.4\"\n    \"2.0.0-beta.2\"\n```\n. ",
    "Austinate": "Thanks, your opinion on this seems to be much more reasonable. \n. I see now,  thanks fkr making this more clear. \n. I can try to bring proper solution \n. :disappointed: Thanks, hope it will get better soon. \n. Hi! Just to be sure, do you have Run Script which fixes well-known issue with frameworks? \nIt's on 4th step here\n. So you have Moya & Result & Alamofire added to project and all of them specified in script? \nI remember i had issue after Moya update when i forgot to add Result.framework too\nProbably if all is set up properly it would be good to share some sample proj which reproduces issue?\n. In my opinion automatically receiving minor updates for dependencies is much better. \nI don't think RxSwift will break something during minor update. \n. #396 possibly does this \u00af(\u30c4)/\u00af\n. Moya updated to use release version of RC4.\n. Also probably we should bump Moya version since RC4 update but i'm not sure yet, so decided to delay that change\n. :+1: \n. Also i'd like to add this link\nHope it will be helpful \n. Hi! Let me try to help you :) \n1) When you're creating request via your MoyaProvider \u2014 it returns you a thing conforming to Cancellable protocol.\n You can simply print it to your logs so see how you can re-create this request via curl\nExample: \nlet provider = MoyaProvider<SignInAPI>()\nlet cancellable = provider.request(.RestorePassword(email: email)) { result in }\nprint(cancellable)\n2) I believe you should use .URL parameters encoding for GET request, instead of .JSON \nHope that will help. If you will have any additional questions \u2014 feel free to ask :) \n. OAuth & HTTPAuth are described here\nBut if you need just token as header field \u2014 i'd configure custom Alamofire.Manager with header fields as described (see \"managers\" section) here.\n I'm not 100%(just 99.9% \ud83d\ude43) sure that's the best way for Moya, so maybe someone will correct me\n. @mingyeow for additional fields just take a look at Alamofire readme (Advanced Usage section)\n. 0.01% \u00af(\u30c4)/\u00af \n. ",
    "crenwick": "Hey @petester42 -- curious if this could be re-evaluated (though not opening a new issue for it).\nI understand that carthage has submodule limitations, but my last carthage bootstrap --platform iOS build took 15m11.546s as it built schemes for:\n- Alamofire iOS\n- RxBlocking-iOS\n- RxTests-iOS\n- RxCocoa-iOS\n- RxSwift-iOS\n- Moya iOS\n- ReactiveMoya iOS\nbut, as our app only uses vanilla Moya, we only needed to build schemes for:\n- Alamofire iOS\n- Moya iOS\nand I imagine skipping the other 5 frameworks would reduce this time significantly.\nAdding version control to not build is only a work around for carthage update (and, not ideal to ignore on our repo).\nSo version control or not, a 15 minute build time makes Fastlane completely unusable on dev machines, as it doesn't use carthage update to build.\nI have yet to play around with forks, but is there still no solution to this? Would removing ReactiveCocoa/ReactiveCocoa and ReactiveX/RxSwift from the Cartfile (and letting users add them when they need it) completely break the vanilla build?\nI'd love more insight on this, and to be able to help out with finding a solution. Otherwise, our alternative is either managing a private fork of Moya, or dropping it entirely (as Pods is not a technical option for this app).\n. Yeah -- multiple repos is way out of the question.\nThanks for the quick responses, y'all. You're all a super friendly and\nhelpful bunch :)\nI'll be looking at other ways to bring moya in before going with more\ndrastic measures.\nAnd we can't use pods with any swift libraries at the moment. We have a\nrequired dependency that's very pick with who it plays with. Though, moving\nthat around might be a solution we will look more into.\nOn Fri, Feb 12, 2016 at 4:30 PM Ash Furrow notifications@github.com wrote:\n\nCorrect \u2013 we tried multiple repos but it got out of hand, quickly. Moya\nwas created as a CocoaPod, and the Carthage support we have today was added\nafter the fact by volunteer contributors (we're very grateful). The\nCarthage team has been asked for a subspec-like feature to accommodate\nthis, but they have decline (it's antithetical to how they believe\nlibraries should be built).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Moya/Moya/issues/345#issuecomment-183494797.\n. Yup. Even tried redoing the Run Script but still no luck.\n. Ohhh, I had no idea about Result. Didn't seem to run into that issue before now, but I'll give it a shot and report back.\n. !! Worked! Upgraded to 6.0.0 successfully after adding Result.framework to the Embedded Binaries of the target.\n\nClosing :) Thank you @Austinate and @petester42 for the help!\n. ",
    "KevinVitale": "@mpurland: thank you for sharing! I'm just dipping into Moya, and while it's probably not the feedback you're asking for exactly, seeing an example like this has been valuable for someone who is trying to move from RAC2, ObjC, and AFNetworking.\n. Any suggestions on how to best decouple baseURL from TargetType? Perhaps I'm not familiar enough with Moya yet, but having TargetType be responsible for providing an API service's root path feels strange.\nI'd like to have TargetType adopters defer to another object for its baseURL, but in the case of enums, I can't have stored properties. Even the Artsy repo internalizes its baseURL value via global state.\nAm I missing something? And if this is off topic, let me know and I'll create a new issue instead.\n. @mpurland: thanks again for the thread. After more than a few long nights, I've achieved a setup similar to yours. My goal was to create a system whereby TargetType enums could associate with the native types their JSON results should be parsed into, as well as create signal producers from TargetType enums without much boilerplate. \nThe result: \n``\n// Sends onlyCart` structs\nAPITarget(.Create(treeID: 77))\n    .on( next: { print($0.id) } )\n    .start()\n// Sends only Product structs\nAPITarget(.InCategory(treeID: 77, categoryID: 40))\n    .on( next: { print($0.name) } )\n    .start()\n```\n\nLike you I created a struct, APITarget, that mirrors my own APITargetType: TargetType protocol. Then, APITarget adopts SignalProducerType.\nI extended ReactiveCocoaMoyaProvider with mapDecodable() (similar to mapJSON()) for targets which are APITargetType, and I'm able to parse results using the associated type on APITargetType (typealias ParsedType). APITarget creates instances of ReactiveCocoaMoyaProvider based on the APITargetType it's given.\npublic struct APITarget<T: APITargetType where T.ParsedType: Decodable, T.ParsedType.DecodedType == T.ParsedType> {\n    let provider: ReactiveCocoaMoyaProvider<T> = ReactiveCocoaMoyaProvider()\n    let target: T\n    public init(_ target: T) {\n        self.target = target\n    }\n}\n\n. I adopted Moya for a new project back in November, and quickly found enums to not scale very well, also.\nI came up with a solution similar to what @colinta and others have shared, with a struct wrapping a single (internal) TargetType adopter. I also extend the struct as a SignalTypeProducer, with magnificent results!\nHere is an example taken from my playground file:\n``` swift\nXCPlaygroundPage.currentPage.needsIndefiniteExecution = true\n// http://jsonplaceholder.typicode.com\nCurrentAPIHost = APIHost(serverContext: .PlaceholderTest)\nJSONRequest(\"users\")\n    .startWithNext {\n        print($0) // Individually prints each 'user' JSON object\n}\n// https://api.guildwars2.com/v2\nCurrentAPIHost = APIHost(serverContext: .GuildWars2)\nJSONRequest(\"colors\", parameters: [\"ids\":\"all\"])\n    .startWithNext {\n        print($0)  // Individually prints each 'color' JSON object\n}\n```\n\nJSONRequest looks like this:\nswift\npublic func JSONRequest<T>(endpointPath: EndpointPath, method: ReactiveMoya.Method = .GET, parameters: [String:AnyObject]? = nil) -> JSONTarget<T> {\n    let endpoint = JSONEndpoint.Request(endpointPath: endpointPath, method: method, parameters: parameters)\n    return JSONTarget(endpoint: endpoint)\n}\n\nEDIT: EndpointPath is this:\n``` swift\n// MARK: -\n// MARK: Endpoint Path\n// MARK: -\npublic protocol EndpointPath {\n    var endpointPath: String { get }\n}\npublic extension RawRepresentable where RawValue == String {\n    public var endpointPath: String {\n        return self.rawValue\n    }\n}\npublic extension String {\n    public var endpointPath: String {\n        return self\n    }\n}\nextension String: EndpointPath { }\n```\n. I had a scheduling conflict, and so I appreciate the summary, @ashfurrow. \nHaving missed my opportunity to participate, I understand things are in motion; however, I'd still like to share my struct solution (KevinVitale/Shelley). It's promising to read so much of what motivated me reflected in the meeting notes, and as such, I'm looking forward to seeing what comes of it.\nThanks for such a great project, all.\n. ",
    "AnnieNinaJoyceV": "Thank you for the help :)\nThe solution was to use EndPoint :+1: \n. Again, not sure what happened. It is working fine now!! I have done no changes.\nMight be some network connection issue??\n. ",
    "alfredcc": "I am very pleased to accept.\ud83d\ude2c\n. Moya\u2019s dependencies is too much? See here Checkouts\nAnd i think your problem is your network.\n. May NetworkActivityPlugin can do this. See end of the Providers Doc\n. ",
    "cconecode": "Sorry, my description of the problem is wrong\uff0cI mean the Moya\u2019s dependencies is too much\uff0cWhen I use carthage\uff0cI failed in Fetching LlamaKit\uff0cBut sometime\uff0csuccess. The causes of the network?\n. OK, thx\n. Moya is so great, I love it\n. ",
    "Skornos": "Thanks for such quick answer.\nI have found another workaround. Assigning nil to initialized dictionary is equal to removing the key from the dictionary so instead of naming all the params in the initializer you create new empty dictionary of type [String: AnyObject]? and than you assign each parameter like parameters[\"foo\"] = nil.\n. Thanks for such quick answer.\nI have found another workaround. Assigning nil to initialized dictionary is equal to removing the key from the dictionary so instead of naming all the params in the initializer you create new empty dictionary of type [String: AnyObject]? and than you assign each parameter like parameters[\"foo\"] = nil.\n. I will have time for PR hopefully anytime soon :+1: \n. I will have time for PR hopefully anytime soon :+1: \n. Checking against the Endpoint's URL seems like a solution but it is not possible to call the same Provider request within it's own init method (getting 'requestClosure' used within its own type) error. \nDoes it mean that it's necessary to create new Provider which will serve only for Authetication to be able to call it within requestClosure?\n. Checking against the Endpoint's URL seems like a solution but it is not possible to call the same Provider request within it's own init method (getting 'requestClosure' used within its own type) error. \nDoes it mean that it's necessary to create new Provider which will serve only for Authetication to be able to call it within requestClosure?\n. ",
    "jschneier": "I'd just like to note for posterity that if anyone lands here I had the exact same issue and the fix was being more explicit about the types.\nI had something like\nswift\nstatic var sharedProvider = ...\nThat then returned my provider.\nI fixed the issue by switching to\nswift\nstatic var sharedProvider: MoyaProvider<EtherAPI> = ...\n. ",
    "mertnesvat": "Thanks @alfredcc I tried to add plugins but couldn't. Can you give me an example code or some more detailed link about plugins? \n. thanks @aamctustwo :+1: \n. Great question @offbye I was wondering that too. I would like to send my requests with JSON and I found that I need to change Parameter Encoding like below\npublic var parameterEncoding : Moya.ParameterEncoding {\n        return .JSON\n    }\nwhat else should I do? \n. @offbye I found the solution among the other issues #188 check it out :+1:\n. Yes you're right I'm using Moya-ObjectMapper but what I couldn't do is creating a network layer to gather all responses in one place. So as you say I need a Network struct on top of Moya, but I have problems with generic parameters T. \nMy unfinished network layer is here problem is when I try to map object returns empty. \n. @sunshinejr thanks for your answer but I couldn't find mapObject() method? Which library has it? \n. @sunshinejr @ashfurrow  your're life saver many thanks :) I wasn't aware of the new updates at Moya-ObjectMapper, I implemented it when it was 1.0.0 version and now it is _1.1.2 _so I typed pod update and its working now. :+1: \n. ",
    "Prayer-RecycleSmart": "Thanks Ash!\nYea I was looking forward to create a clean implementation, not having to pass the closure all the times.\nI kinda reached that point with the code above, not sure if I will keep it in my code.\nIf you had some spare time I would suggest you to include another Demo project that explores other advanced customisations. Everything is already pretty much explained in the docs, but having other examples to wrap up all the concepts would not hurt. Imagine that I ended up here after I started to study your Kiosk app... :) OnlineProvider is a subclass and I struggle to understand how to compose my provider implementation (without Rx and all the rest).. Now its definitely clear!\nThanks again!\n. ",
    "aleufms": "I've been having the same problem. If a network error happens, I display the localized description to the user. But it always have the same error (The operation couldn\u2019t be completed. (Moya.Error error 5.)). \nIs there a way to Moya.Error provide the original network error? (e.g. Network seems to be down)\n. Oh. Thank you. This method is marked as deprecated. Will it have a replaced method? I'm using with rxSwift\n. ",
    "namhn": "I am experiencing the above error, how to turn off the above message. I am using on swift version 2.3. I am experiencing the above error, how to turn off the above message. I am using on swift version 2.3. ",
    "ceyhuno": "Well thank you \ud83d\ude0a I'd be more than happy to accept.\n. ",
    "novak": "Thanks for the quick input @colinta. Extremely valid points.\nWhat's your scenario like for a 5xx response? In that case do you attempt any retries?\n. Thanks for the quick input @colinta. Extremely valid points.\nWhat's your scenario like for a 5xx response? In that case do you attempt any retries?\n. Thanks. I would say that answers my question. Appreciate it.\n. ",
    "marchinram": "@colinta How do you handle the the response in your provider, with a plugin?\n. ",
    "mrfarukturgut": "@colinta Hey, how do queue the requests while the refreshing request is on the air, then when it is done executing the queued ones? . Solved the main question. A simple mistake. But second question is still valid\n. Thank you! I think there would be no problem, if I examine your library and get some inspirations :)\nI am following Ello as much as I can by the way. You are doing great work! May the success be with you \ud83d\udc4d \n. @AndrewSB Hi, sorry for the really really late response. I just had to focus on the school, so I suspended the project. As the school is over for now, I just started work on my project. \nI examined your answer and the reference, but I am not feeling safe with the idea of using RxSwift right now. Because I do not have experience with it and it will cost me more time. I just used GCD in seperate function which is responsible for refreshing token so, it seems OK for now. \nBut for further work about the service you are providing, I really want to see a feature that handles this kind of operations by itself. And as a user of Moya I want to help as much as I can. \nThanks!. Just one question for now @AndrewSB . I know it is not preferred but it there a way to make all the requests made with Moya synchronous. Because my way seems to not working correctly? It still has the bug. Any other simple but 'saves the day' solution will work also.. I think I used this code piece in my code, but it was deleted somehow. anyway, thanks a lot \ud83d\ude03 . ",
    "stephenjames": "If you implement validation on your endpoint, you define which codes are considered a success\npublic var validationType: ValidationType . ",
    "mustafaibrahim989": "Thanks for letting me contribute in the amazing Moya :tada: . and I hope I can help :)\n. ",
    "yinanfang": "No problem. Thanks for point out! \nDo we have to use try and catch? I was usually told not to use try and catch in ObjC but now I see many try and catch statements in the swift, for example in this demo code. Is it a different code style or just a lazy way for making a simple demo app?\n. That makes sense! Thank you for the explanation. Moya is a great framework. Thank you for maintaining this!\n. @colinta @ashfurrow Thank you so much for the update! I just came across another problem. I got kCFStreamErrorDomainSSL, -9843 error. I found that this happened because the Apple ATS which doesn't allows insecure HTTPS call. Alamofire suggested an solution here: https://github.com/Alamofire/Alamofire#app-transport-security & https://github.com/Alamofire/Alamofire/issues/977#issuecomment-167925391 \nDo you know how I can configure the network manager in Moya similarly? Should I open another issue for this?\n. Oops... I just found the documentation here: https://github.com/Moya/Moya/blob/master/docs/Providers.md#advanced-use Sorry about that. It's not a very smart question. \n. @ashfurrow Thanks for the quick response! Yes, I just want to log JSON in this case. I saw that Alamofire let me log out a nicely formatted JSON. Maybe you can borrow their formatter? I'm not sure how their's formatter works though. \nAlso, It would be great if Moya can let the user specify which specific request their want to log out. The current plugin will show verbose log output for all requests. Once the app grows, the log may not be readable.\n. I think that solution is great for requests of some TargetType but not individual requests. What I wanted is to separate the Moya request and response closure like Alamofire does so that we can log out only one outgoing request or one incoming response. I just want to clarify my thoughts. I know that's not the most important feature now. I can just use search and find to dig through the logger. \nBy the way, I just tried the ReactiveCocoa example on the ReadMe and it doesn't work. Xcode points to my target and says \"... has no member MyTarget\". Maybe you forgot the update the ReactiveCocoa part of the ReadMe? Is there an working example somewhere?\nhttps://github.com/Moya/Moya#reactivecocoa\n. Thanks! @ashfurrow @sunshinejr \n. @justinmakaila Here's a screen shot of what I'm trying to do. I've correctly set up the Moya framework and the first example is working. However, when I'm trying to use the ReactiveCocoa extension, it doesn't work and gives an error. \n\n. @petester42 Oh! That's it! Thank you so much. I felt like Swift's error message is sometimes irrelevant to the actually problem. If the error message were to be something like \"there's no such method as start\" then I would probably think about I'm inheriting the wrong type. Or maybe it was just that I misunderstood Swift's error message.\n. Thanks for explanation! I'm new to Swift and I think I misunderstood its error message!\n. ",
    "philipengberg": "We use hard versioning, so that's not really an option for us. I'll submit a PR.\n. That's correct. But allowing 2.x might be a little too agressive.\n. It's fine by me. I just wanted to allow for the Moya community to test new 2.x features before officially supporting them.\n. Cool, thanks! Since I have never published a cocoapod before: Does this change require a new release to cocoapods?\n. It works, thanks a lot!\n. Thanks @vzsg. But I'm curious as to why you need to use some old NSObject subclass in a Swift dictionary, when we have optionals?\nAlso, what is the easiest way to unwrap the optional values when constructing the parameters dictionary then? Let's say I have an object\nswift\nstruct LineupPlayer {\n    let id: Int\n    let user : User?\n}\ndoing the following\nswift\nextension LineupPlayer : ParameterRepresentation {\n    var representation: [String : Any] {\n        return [\"id\": id, \"user\": user?.representation ?? NSNull()]\n    }\nresults in a compile error Generic parameter 'T' could not be inferred, since the nil-coalescing operator tries to operate on two different types.\nHow would you recommend to do this?. Doing\nswift\nextension LineupPlayer : ParameterRepresentation {\n    var representation: [String : Any] {\n        return [\"id\": id, \"user\": (user?.representation as? Any`) ?? NSNull()]\n    }\ncompiles, but now I get this error \ud83d\ude44  I'm so confused!. It's just a protocol\nswift\nprotocol ParameterRepresentation {\n    var representation : [String : Any] { get }\n}\nBecause the API only accepts null, not { }, when there is no value @jessearmand.. I got it working now. Thanks everyone \ud83d\ude4f . ",
    "wattson12": "No worries, thanks for merging\n. No worries, thanks for merging\n. I'd be happy to help on this one. I took a quick look and first thoughts are to add an optional response data formatter function to the logger (called only in verbose mode). This way a user can format data however they want, maybe with the demo updated to include a formatter closure \nIn testing I was using a quick and dirty data -> NSJSONSerialiazation object -> NSJSONSerialiazation  pretty printed data function\nThe other problem is that even formatted strings are printed without formatting when printing as part of the array, so the output function will need to print item by item rather that array as a whole (probably only in verbose mode since it increases the console real estate used)\nI can open up a pull request if that sounds good\n. I'd be happy to help on this one. I took a quick look and first thoughts are to add an optional response data formatter function to the logger (called only in verbose mode). This way a user can format data however they want, maybe with the demo updated to include a formatter closure \nIn testing I was using a quick and dirty data -> NSJSONSerialiazation object -> NSJSONSerialiazation  pretty printed data function\nThe other problem is that even formatted strings are printed without formatting when printing as part of the array, so the output function will need to print item by item rather that array as a whole (probably only in verbose mode since it increases the console real estate used)\nI can open up a pull request if that sounds good\n. Cool, will put something up later today.\nTo give an example this is some simple JSON as a string returned by NSJSONSerialiazation with .PrettyPrinted as an option:\n{\n  \"id\" : 1,\n  \"name\" : \"first object\"\n}\nAnd this is the same object when printed inside an array (i.e. the way response components are printed in NetworkLoggerPlugin):\n[\"{\\n  \\\"id\\\" : 1,\\n  \\\"name\\\" : \\\"first object\\\"\\n}\"]\n. Cool, will put something up later today.\nTo give an example this is some simple JSON as a string returned by NSJSONSerialiazation with .PrettyPrinted as an option:\n{\n  \"id\" : 1,\n  \"name\" : \"first object\"\n}\nAnd this is the same object when printed inside an array (i.e. the way response components are printed in NetworkLoggerPlugin):\n[\"{\\n  \\\"id\\\" : 1,\\n  \\\"name\\\" : \\\"first object\\\"\\n}\"]\n. I tried printing the logNetworkResponse array item by item, and overall its an improvement (it breaks up headers and becomes a lot more readable), but the response JSON component is still unformatted (or i guess more accurately it matches the formatting returned from the server)\n. I tried printing the logNetworkResponse array item by item, and overall its an improvement (it breaks up headers and becomes a lot more readable), but the response JSON component is still unformatted (or i guess more accurately it matches the formatting returned from the server)\n. awesome, thanks\nyeah i'd agree it was a bit difficult knowing how to extend the network logger plugin (and it felt like the style of extension I made will get messy eventually)\n. awesome, thanks\nyeah i'd agree it was a bit difficult knowing how to extend the network logger plugin (and it felt like the style of extension I made will get messy eventually)\n. Sounds good, I can take a look\nthe examples directory link in your comment is 404 for me though?\n. Sounds good, I can take a look\nthe examples directory link in your comment is 404 for me though?\n. Caching would be handled by AlamoFire: https://github.com/Alamofire/Alamofire#caching (which in turn uses the system cache)\nA cache is set at a system level by default but if you want to set specific sizes or handle it yourself, you can set your own cache:\nswift\nlet URLCache = NSURLCache(memoryCapacity: 4 * 1024 * 1024, diskCapacity: 20 * 1024 * 1024, diskPath: nil)\nNSURLCache.setSharedURLCache(URLCache)\n. Caching would be handled by AlamoFire: https://github.com/Alamofire/Alamofire#caching (which in turn uses the system cache)\nA cache is set at a system level by default but if you want to set specific sizes or handle it yourself, you can set your own cache:\nswift\nlet URLCache = NSURLCache(memoryCapacity: 4 * 1024 * 1024, diskCapacity: 20 * 1024 * 1024, diskPath: nil)\nNSURLCache.setSharedURLCache(URLCache)\n. Moya itself has no concept of a cache so you don't need to apply the cache in Moya directly, you also don't need to set a cache for AlamoFire since it uses the system level cache. If you set the system level NSURLCache it will be used by both libraries (though it is already set by default)\nThere is a good description of NSURLCache here: http://nshipster.com/nsurlcache/\n(you can also set a subclass of NSURLCache if you want more customisation)\n. Moya itself has no concept of a cache so you don't need to apply the cache in Moya directly, you also don't need to set a cache for AlamoFire since it uses the system level cache. If you set the system level NSURLCache it will be used by both libraries (though it is already set by default)\nThere is a good description of NSURLCache here: http://nshipster.com/nsurlcache/\n(you can also set a subclass of NSURLCache if you want more customisation)\n. Interesting discussion. I'd prefer enums still for a couple of reasons:\n- I like how enums give my endpoints structure (e.g. AuthTarget.SignIn and ContentTarget.LatestPosts)\n- While the enum code has more boilerplate, it has less magic and so less of an understanding curve which is important to me in an open source library\nThat said I really like a couple of points in the structs (non generic providers especially) and would be interested in seeing how we could get some of them into Moya\n. Interesting discussion. I'd prefer enums still for a couple of reasons:\n- I like how enums give my endpoints structure (e.g. AuthTarget.SignIn and ContentTarget.LatestPosts)\n- While the enum code has more boilerplate, it has less magic and so less of an understanding curve which is important to me in an open source library\nThat said I really like a couple of points in the structs (non generic providers especially) and would be interested in seeing how we could get some of them into Moya\n. that's true, but it's more work for my use case which at the moment is a few different services with a few endpoints each (i.e. a micro services backend) \ni might be biased though, I do love swift enums :) \n. that's true, but it's more work for my use case which at the moment is a few different services with a few endpoints each (i.e. a micro services backend) \ni might be biased though, I do love swift enums :) \n. Are you retaining the provider anywhere? I've seen 999 errors when whatever is making the request is deallocated\n. Are you retaining the provider anywhere? I've seen 999 errors when whatever is making the request is deallocated\n. Are you retaining the provider anywhere? I've seen 999 errors when whatever is making the request is deallocated\n. @colinta I use multiple providers because I have multiple endpoints I am calling (e.g. an auth service and a content service) so I like to have different named providers for readability (I also use different TargetType enums for each to stop them getting too complex)\n. @colinta I use multiple providers because I have multiple endpoints I am calling (e.g. an auth service and a content service) so I like to have different named providers for readability (I also use different TargetType enums for each to stop them getting too complex)\n. @colinta I use multiple providers because I have multiple endpoints I am calling (e.g. an auth service and a content service) so I like to have different named providers for readability (I also use different TargetType enums for each to stop them getting too complex)\n. @remirobert you should be able to send as many requests on the same provider as you like. The bottleneck here (apart from the quality of the connection, type of request being made etc) is the underlying NSURLSessionConfiguration. It has a default value of 4 for HTTPMaximumConnectionsPerHost but you could initialise a provider with a custom configuration if you wanted to change that \n. @remirobert you should be able to send as many requests on the same provider as you like. The bottleneck here (apart from the quality of the connection, type of request being made etc) is the underlying NSURLSessionConfiguration. It has a default value of 4 for HTTPMaximumConnectionsPerHost but you could initialise a provider with a custom configuration if you wanted to change that \n. @remirobert you should be able to send as many requests on the same provider as you like. The bottleneck here (apart from the quality of the connection, type of request being made etc) is the underlying NSURLSessionConfiguration. It has a default value of 4 for HTTPMaximumConnectionsPerHost but you could initialise a provider with a custom configuration if you wanted to change that \n. Thanks @colinta I've merged those changes\n@ashfurrow I've just pushed those suggested changes\nThanks both for the feedback / help \n. Thanks @colinta I've merged those changes\n@ashfurrow I've just pushed those suggested changes\nThanks both for the feedback / help \n. ",
    "beretis": "Hi, guys, I recently updated to swift 3, and now the JSONResponseDataFormatter prints data with brake line characters and quotes are escaped. Before swift 3, it was OK. Any idea how to solve this?\n. Hi guys, I'm sorry for opening this again but I think my network calls are happening in UI Thread. I'm experiencing UI freezes when performing calls, so I started to dig around, I found this issue and noticed that on @VictorAlbertos 's screenshots RxMoyaProvider's request function starts in thread 4 and then switch to Main thread. This doesn't happen in my case. Everithing happens in UI thread and I really don't know why. \n\n\n\n\nthis is the way im subscribing (its on main thread)\nfunc getApp() {\n        return providerCert.request(RestAPI.getApp)\n            .filterSuccessfulStatusCodes()\n            .mapJSON().subscribe(onNext: { result in\n                print(result)\n            })\n    }\n. Thank you, for swift 3 compatibility if anyone is interested\n```swift\nextension RxMoyaProvider {\nfunc requestBackground(target: Target) -> Observable<Response> {\n    return request(target).observeOn(SerialDispatchQueueScheduler(qos: DispatchQoS.background))\n}\n\n}\n```. ",
    "pedrovereza": "Hey @beretis, we heard something similar before. Can you check https://github.com/Moya/Moya/issues/739#issuecomment-257120482 and see if it fixes for you?\nIf not, please open a new issue :wink:\n. Hm, found something while digging in the tool\n\nThese changes happened on the day the coverage went down:\n\nThe build for 48e4b01 has the same error messages in the coverage log: https://circleci.com/gh/Moya/Moya/285\nFeels like it's an actual drop in the coverage, not an issue with the tool.\n. @BasThomas You have to check Show Test Bundles on the upper right corner \ud83d\ude09 \n. Coverage reported by CodeCov is back to 79%. Closing this for now.\n. Doesn't seem to be happening anymore (latest build from master)\n. Hey @hewigovens, this is being worked on in #594 :wink:\n. Hey, 7.0.1 is tagged at the same commit as 7.0.0, but that's was a conscious decision\nDetails here: https://github.com/Moya/Moya/pull/594#issuecomment-246513882\n. \ud83d\udc4d \n. Closed after #704\n. @BasThomas you're right, my bad \ud83d\ude05 \n. Hey, check #604\n. @BasThomas Oh, my bad! Totally forgot to mention I was working on it \ud83d\ude05 \n. @BasThomas Oh, my bad! Totally forgot to mention I was working on it \ud83d\ude05 \n. Thanks @Viniciuscarvalho!\n. Thanks @Viniciuscarvalho!\n. Attempting another rebuild now that #745 seems to have saved cocoapods/repo/master\n. And it got past pod install. I'm so happy :tada:\n. Edited your comment to enable code highlighting :wink:\n. @user6724161 Hey!\nThe function endpointResolver() returns a RequestClosure that you can then pass on to your provider:\nswift\nlet provider = MoyaProvider<YourTarget>(requestClosure: endpointPointResolver())\nMore details in our docs. @pietrocaselani good call out, the conversation is indeed moving further from the original issue \ud83d\udc4d \nI'll close this issue and people that still have questions (related or not to authentication), feel free to open a new issue \ud83d\ude09 . @AndrewSB think you meant https://github.com/AndrewSB/Expirable :wink:. Closing this one, we can follow up in #757 \n. From the link you posted:\n\nThe feature has been automatically enabled for all customers who use our inferred iOS dependency commands. If you are using iOS inference for the dependencies step, you will notice a new step, Fetch CocoaPods specs, in your build\n\nWe can't use this feature yet as we're overriding the steps in circle.yml \ud83d\ude15 \nDetails on the override option from Circle CI docs:\n\noverride: commands run instead of CircleCI\u2019s inferred commands\n\nFeels like we'll have to wait until they roll this out to everyone.\n. From the link you posted:\n\nThe feature has been automatically enabled for all customers who use our inferred iOS dependency commands. If you are using iOS inference for the dependencies step, you will notice a new step, Fetch CocoaPods specs, in your build\n\nWe can't use this feature yet as we're overriding the steps in circle.yml \ud83d\ude15 \nDetails on the override option from Circle CI docs:\n\noverride: commands run instead of CircleCI\u2019s inferred commands\n\nFeels like we'll have to wait until they roll this out to everyone.\n. Issue in Circle CI: https://discuss.circleci.com/t/multiple-ios-simulators-available-for-single-os-device-configurations/7854\n. Issue in Circle CI: https://discuss.circleci.com/t/multiple-ios-simulators-available-for-single-os-device-configurations/7854\n. It seems like both options deliver the same result, so I'm ok keeping the workaround we have now.\nAlso got an update from Circle CI folks on that thread:\n\nWe are working on massive changes behind the scenes in order to prevent any of this longterm. This will take a while though so the proper solution to these issues won't be around for a while.. It seems like both options deliver the same result, so I'm ok keeping the workaround we have now.\n\nAlso got an update from Circle CI folks on that thread:\n\nWe are working on massive changes behind the scenes in order to prevent any of this longterm. This will take a while though so the proper solution to these issues won't be around for a while.. Nice! \ud83d\udc85 \n. Nice! \ud83d\udc85 \n. I think most of the SwiftLint issues on test files were fixed in #1103, they should go away once we rebase our branches against master (optional-response-thread-param and 9.0.0-dev).\n\nThe warnings on ViewController seem legit, but I'd rather clean them up after we merge this PR against 9.0.0-dev \ud83d\ude04 . I'll merge this since it's the first one (and the most simple), then we see if the others need to be fixed \ud83d\ude09 \n. Let me try to combine this PR with #775 #776 and #777 :wink:\n. @BasThomas Ok, branch cleanups should have all changes. Can you open a new PR out of that branch? I'll close this and the other PRs to avoid confusion \ud83d\ude04 \n. Closing this, see https://github.com/Moya/Moya/pull/774#issuecomment-261369545\n. Closing this, see https://github.com/Moya/Moya/pull/774#issuecomment-261369545\n. Closing this, see https://github.com/Moya/Moya/pull/774#issuecomment-261369545\n. @ashfurrow Where is @bchrobot invitation to join us?? \ud83d\ude04 . Hey @rlam3, was the documentation helpful? Do you still have questions regarding the use of Task? . @ashfurrow It seems that we only got a tag created, I think we should make a release out of it:\n\n. Sure, will do :wink:. I think this should be adding the changelog \ud83e\udd14 . I was able to release 8.0.1 following the docs and #941 solves the version format. \ud83d\udc4a. Hey @tspecht I'm not too familiar with ReactiveSwift, but this is on our docs:\n\nFor ReactiveSwiftMoyaProvider, the network request is not started until the signal is subscribed to.\n\nAlso, from ReactiveSwift docs:\n\n[SignalProducer] Unlike a plain signal, no work is started (and thus no events are generated) until an observer is attached\n\nFeels like this could explain the problem you're facing. \nBut I think @ashfurrow may have a better answer \ud83d\ude09 . Should we make the verification for Moya.podspec and the Podfile and Podfile.lock files inside Demo?\nI feel we should only verify Moya.podspec but I may be missing something \ud83d\ude05 . :+1: on the changes and functions renaming.\n@ashfurrow thoughts?. Opened #824 as a start \ud83d\ude09 . Renaming the file makes sense \ud83d\udc4d  \nCan we make the change in another PR?. BTW, do we need anything else done in this PR? Or can it be merged?. \ud83d\udc4a . My understanding after reading the API design guidelines is that we should go with filterStatusCodes(in:0...9):\n\n[...] This guideline implies that if the first argument doesn\u2019t form part of a grammatical phrase, it should have a label.\n. I always thought of 0...9 as an interval (Apple also calls it closed range). To me the function, as is, reads \"filter status code interval 0 to 9\".\n\nBut that's not a strong opinion, I'm ok with what makes more sense to us :wink:. \ud83d\udcaf . Tried on the Demo project using github \"Moya/Moya\" >= 8.0, worked fine for me \ud83d\udc40 \nusing Carthage 0.18.1. Having it as isVerbose internally seems fine. In fact, Carthage does it, but you set this mode by using --verbose not  --isVerbose.. Can this be removed? \ud83e\udd14 We already have that nice Swift -> Moya versions table. > Suppressing export of environment variables DANGER_GITHUB_API_TOKEN fork PR builds\nNot sure why Circle decided to skip this step, but that's what is causing the issue. Got it: I had to enable Pass secrets to builds from forked pull requests in the settings.. > We could do that. However, I think it's important that we reference the repo's who are up to date the most. When developing you want to reference up to date repo's as much as possible.\nAgreed, but I don't think that Moya-JASON is truly outdated at this point. It is using Moya version 8.0.0-beta-4.\nIt's true that Moya-JASONMapper is using 8.0.0-beta-6, but I wouldn't consider this a huge difference.\nMy suggestion is to keep both listed and let whoever needs a JASON mapper decide which one fits their needs.. @scottrhoyt I still have a feeling that an entry in the changelog will fix it \ud83e\udd14 . Closing due to inactivity. Let us know if you still have questions, @EvilNOP :wink:. I'll close this issue since it's been inactive for a while. Feel free to reopen if you still have questions, @kristiyandobrev. @kristiyandobrev I think what you're looking for is what @scottrhoyt suggested:\n\nI might prefer searching for a token parameter to in parameters to url encode and then encode the rest as JSON.\n\nBasically, if you have an endpoint like:\nswift\nenum API {\n    case example(id:String, name:String, lastName: String)\n}\nIn order to make a request to api/resource/:id passing name and lastName as json body, you have to:\n\nEncode id on the url\n\nswift\n    public var path: String {\n        switch self {\n        case .example(let id, _, _):\n            return \"api/resource/\\(id)\"\n        }\n    }\n\nPass name and lastName as parameters\n\nswift\n    public var parameters: [String : Any]? {\n        switch self {\n        case .example(let _, let name, let lastName):\n            return [\"name\": name, \"lastName\": lastName]\n        }\n    }\n\nEncode parameters as json\n\nswift\n    public var parameterEncoding: Moya.ParameterEncoding { \n        switch self {\n        case .example:\n            return JSONEncoding.default \n        }\n   }. @kristiyandobrev were you able to make the request as you wanted? . @scottrhoyt 8.0.1 makes sense to me. Should we open an issue to discuss?. I naively tried to do the release myself but I don't have access to push the new pod version to cocoapods. \n@ashfurrow @AvdLee halp \ud83d\ude48 . @ashfurrow it went smoothly this time, thanks!. Expanding @scottrhoyt response:\n```swift\nenum MobileAPI {\n    case index(page: Int)\n}\nextension MobileAPI : TargetType {\n    public var baseURL: URL { return URL(string: \"http://mobileapi.blah.info\")! }\npublic var path: String {\n    return \"/1/\"\n}\n\npublic var method: Moya.Method {\n    return .get\n}\n\npublic var parameters: [String : Any]? {\n    switch self {\n        case .index(let page): return [\"action\": \"index\", \"page\": page]\n    }\n}\n\npublic var sampleData: Data { return Data() }\n\npublic var task: Task { return .request }\n\npublic var validate: Bool { return true }\n\npublic var parameterEncoding: Moya.ParameterEncoding { return URLEncoding.default }\n\n}\n```\nUsage:\n```swift\n        let mobileAPIProvider = MoyaProvider()\n    mobileAPIProvider.request(.index(page:1)) { result in\n        switch result {\n        case let .success(response):\n            // do something with response\n        case let .failure(error):\n            print(error)\n        }\n    }\n\n```\nThis produces the request you want:\n[\"Moya_Logger: Request: http://mobileapi.blah.info/1/?action=index&page=1\"]\nLet us know if you have more questions :wink:. @andreyfel Moya 8.0.2 was release and should fix your problem. Can you please update and let us know if you still have issues? :wink:. Changes seem good \ud83d\udcaf \nShould we plan a new release or is it too soon?. And it's done \ud83d\ude4c . I think we can keep it as pod 'Moya' (we always want people to be using the latest version, I feel). I still don't have a position on this matter.\nMy first thought was to agree with @scottrhoyt:\n\nI would still lean towards saying that unless Moya gets in the game of deserializing objects, this is the purview of Moya Extentsions. \n\nExtended support for parsing feels a bit outside the scope of Moya, which is nicely pointed in the Readme: \n\nSo the basic idea of Moya is that we want some network abstraction layer that sufficiently encapsulates actually calling Alamofire directly.\n\nOn the other hand, if you check all plugins listed in the Readme, only MoyaSugar is not about JSON serialization:\n\nMoya-ObjectMapper - ObjectMapper bindings for Moya for easier JSON serialization\nMoya-SwiftyJSONMapper - SwiftyJSON bindings for Moya for easier JSON serialization\nMoya-Argo - Argo bindings for Moya for easier JSON serialization\nMoya-ModelMapper - ModelMapper bindings for Moya for easier JSON serialization\nMoya-Gloss - Gloss bindings for Moya for easier JSON serialization\nMoya-JASON - JASON bindings for Moya for easier JSON serialization\nMoya-JASONMapper - JASON bindings for Moya for easier JSON serialization\nMoya-Unbox - Unbox bindings for Moya for easier JSON serialization\nMoyaSugar \u2013 Syntactic sugar for Moya\nMoya-EVReflection - EVReflection bindings for Moya for easier JSON serialization (including subspecs for RxSwift and ReactiveCocoa)\nMoya-Marshal - Marshal bindings for Moya for easier JSON serialization\n\nIs this an indication that we should be giving better support for JSON serialization? Why does everyone feel like they have to build their own? \nThis can be seen as a missing feature, but also as flexibility: parsing can be done in several ways and you can pick the one that fits your app better.. > I love XKCD, and assume people are taking the moment to laugh at this classic.\n@michaelsand Yes, I was honestly laughing at the comic itself, no intention to make fun of your proposal. Apologies if it sounded that way.\n. I think Artsy's Eidolon should give you an idea of how it looks like in a real product. Here is where their API is defined using Moya.. Your ParameterEncoding for .login should be JSONEncoding.default:\n```swift\npublic var parameterEncoding: Moya.ParameterEncoding {\n    return JSONEncoding.default \n}\n```. @vzsg Good question! \nWhat are the most basic (and common) cases that we should cover in this example? We don't have a GET with URL query parameters as well \ud83e\udd14 . @sunshinejr You mean adding just a note on how the POST request would look like if URLEncoding was used instead?. @sunshinejr Doing another request feels more complete \ud83d\udc4d \nAdded a new endpoint to update a user passing the parameters in the URL, let me know what you think (cc. @vzsg). Should be good now \ud83d\ude04 . @abadikaka You can use the NetworkLoggerPlugin to make sure your requests are being sent as expected:\nswift\nself.provider = RxMoyaProvider<API>(endpointClosure: endpointClosure, \n                                    plugins: [NetworkLoggerPlugin(verbose: true)])\nThis will log details about every request :wink:. Hey, would something like this work for you?\nswift\nextension MoyaProvider {\n    class func withDefaultPlugins() -> MoyaProvider<Target> {\n        return MoyaProvider<Target>(plugins: [NetworkLoggerPlugin(verbose: true)])\n    }\n}\nUsage:\nswift\nlet provider = MoyaProvider<MyService>.withDefaultPlugins(). @kemchenj Oh, I see.\nSo, would moving the extension to RxMoyaProvider be enough?\nswift\nextension RxMoyaProvider {\n    class func withDefaultPlugins() -> RxMoyaProvider<Target> {\n        return RxMoyaProvider<Target>(plugins: [NetworkLoggerPlugin(verbose: true)])\n    }\n}\nOr do you need withDefaultPlugin available for both MoyaProvider and RxMoyaProvider?\nNot saying that your changes are good/bad, just trying to understand the use case \ud83d\ude04\n. @ftp27 Hey, I tried the project locally and it seems to work fine \ud83e\udd14 \nThis is the request log in Charles: \nGET /api/v1/services/book HTTP/1.1\nHost    tcars.indev-group.eu\nConnection  keep-alive\nAccept  */*\nUser-Agent  moyaTest/1.0 (eu.indevgroup.moyaTest; build:1; iOS 10.2.0) Alamofire/4.3.0\nAccept-Language en;q=1.0\nAuthorization   Token eb1b505e8634d19a2ece786274bdfbe23925d223\nAccept-Encoding gzip;q=1.0, compress;q=0.5\nThe output from NetworkLoggerPlugin is similar to one you shared (includes the Authorization header).\nDo you think it could be something with wireshark itself?. @ftp27 Ugh, that's weird. Can you confirm the same thing happens with other header fields? Something like:\nswift\nrequest.addValue(\"Token \" + token, forHTTPHeaderField: \"TestHeader\")\nI'm not sure why it would be different, but I'm running out of ideas.. @scottrhoyt Yep, we tried that. I was also able to reproduce the issue of not seeing the Authorization header in Charles, even though I saw it on my first attempt.\nI still think that the header is being sent in the request and not showing up in wireshark/Charles for some reason.. @scottrhoyt Good idea on using https://httpbin.org \ud83d\ude4c \nAs seen in Charles:\n```\nREQUEST CONTAINING AUTHORIZATION\nGET //get HTTP/1.1\nHost    httpbin.org\nConnection  keep-alive\nAccept  /\nUser-Agent  moyaTest/1.0 (eu.indevgroup.moyaTest; build:1; iOS 10.2.0) Alamofire/4.3.0\nAccept-Language en;q=1.0\nAuthorization   Token eb1b505e8634d19a2ece786274bdfbe23925d223\nAccept-Encoding gzip;q=1.0, compress;q=0.5\n```\nAnd response from https://httpbin.org/get\njson\n{\n    \"args\": {},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip;q=1.0, compress;q=0.5\",\n        \"Accept-Language\": \"en;q=1.0\",\n        \"Authorization\": \"Token eb1b505e8634d19a2ece786274bdfbe23925d223\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"moyaTest/1.0 (eu.indevgroup.moyaTest; build:1; iOS 10.2.0) Alamofire/4.3.0\"\n    },\n    \"origin\": \"201.47.197.212\",\n    \"url\": \"https://httpbin.org/get\"\n}\nI could not reproduce the case of not seeing the field in the request but seeing it in the response.. Hey @albertml, if I understood correctly, you want the parameters to be sent as JSON instead of having them in the URL. Is that correct?\nIf so, you should use JSONEncoding.default as your parameterEncoding, e.g.:\nswift\npublic var parameterEncoding: Moya.ParameterEncoding { return JSONEncoding.default }. Hey @shuijinliuxi, can you test if the parameters are valid before making the request? Something like:\nswift\nif (parameterAreValid(key, id: consId) {\n  provider.request ... // Make request here\n}\nelse {\n  //show alert\n}. This was introduced recently in f90429587b92a57d33ed7019fc80b5a082aac7b2.\n@BasThomas Any reason why we'd want to keep them separated in the instructions? \ud83e\udd14 . @scottrhoyt Yea, that may be the case. Just wanted to double check with him because these changes normally come after a PR/issue and maybe there was a discussion we don't remember.. @camcoding You can use ServerTrustPolicyManager from Alamofire:\n```swift\nlet serverTrustPolicies: [String: ServerTrustPolicy] = [\n    \"your host exactly\": .disableEvaluation\n]\nlet manager = Manager(\n    configuration: URLSessionConfiguration.default,\n    serverTrustPolicyManager: ServerTrustPolicyManager(policies: serverTrustPolicies)\n)\nlet provider = MoyaProvider(manager: manager, plugins: [NetworkLoggerPlugin(verbose: true)])\n```\nThe only problem is that ServerTrustPolicyManager doesn't take wildcards in the policies, meaning that you would need to specify the host, which is fine when you're testing locally but won't work for your users.\nFrom ServerTrustPolicyManager source code:\nswift\n    /// Returns the `ServerTrustPolicy` for the given host if applicable.\n    ///\n    /// By default, this method will return the policy that perfectly matches the given host. Subclasses could override\n    /// this method and implement more complex mapping implementations such as wildcards.\n    ///\n    /// - parameter host: The host to use when searching for a matching policy.\n    ///\n    /// - returns: The server trust policy for the given host if found.\n    open func serverTrustPolicy(forHost host: String) -> ServerTrustPolicy? {\n        return policies[host]\n    }\nWhat you can do to disable certificate validation is to subclass ServerTrustPolicyManager and return .disableEvaluation for all hosts:\n```swift\nclass CustomServerTrustPoliceManager : ServerTrustPolicyManager {\n    override func serverTrustPolicy(forHost host: String) -> ServerTrustPolicy? {\n        return .disableEvaluation\n    }\npublic init() {\n    super.init(policies: [:])\n}\n\n}\n```\nand the usage becomes:\n```swift\nlet manager = Manager(\n    configuration: URLSessionConfiguration.default,\n    serverTrustPolicyManager: CustomServerTrustPoliceManager()\n)\nlet provider = MoyaProvider(manager: manager, plugins: [NetworkLoggerPlugin(verbose: true)])\n```\nLet us know if this solves the problem for you :wink:. @camcoding Oh, right. Forgot to mention you also need this in your Info.plist:\n\n. @camcoding I created a simple project using Moya to access a website that uses a self signed certificate: https://github.com/pedrovereza/SelfSignedMoya. \nThere is also a branch that uses RxMoyaProvider: https://github.com/pedrovereza/SelfSignedMoya/tree/rxExample\nBoth use the CustomServerTrustPoliceManager described above, plus the entries in the Info.plist.\nCan you confirm this project works for your endpoints as well?. @ETmanwenhan The error message contains status code 400. This doesn't seem to be a problem with certificates, as the request is being sent and a response is coming back.\nI'd suggest you double check the request you're sending to the server.. @sevrazzmatazz Hey, the usage is actually on the docs (here). Any ideas on how we could make this easier to find? \ud83e\udd14 . @gperdomor I think that when we decide to release 9.0, we will merge the branch with master, so 9.0 will have everything until 8.x, plus the breaking changes for 9.0. Does that make sense?\nEDIT: Oh, think I get what you mean. Have this changes in 9.0 branch so we develop on an up-to-date branch \ud83d\udc4c . @soundbites I think we just need to get #1010 merged and we should be good to go.. @BasThomas The release script first creates a tag and then a release. It takes a while and is still running \ud83d\ude03 \nEdit: https://github.com/Moya/Moya/releases/tag/8.0.3. Not sure if it was intentional, but 23be21483154bfed6b2a851cee8c6eb0ea66212f merged branch 9.0.0-dev into master. If that's correct, we can delete branch 9.0.0-dev \ud83e\udd14 . @BasThomas No worries, #1015 should undo it :wink:. Ok, the changes from #993 are already in master but reverted in #1015, that's why git won't try to apply #993 again. I think we have to merge this as-is an reapply 249e436ab1c32f212a195afbe411fe5234aba81f on 9.0.0-dev. I think we should first deal with #1013 (which is also reverting #993). @AndrewSB can you rebase against 9.0.0-dev and reapply your changes? (See #1017) :wink:. @gperdomor @AndrewSB Hey, I fixed the branch by cherry-picking all changes on top of 9.0.0-dev: https://github.com/Moya/Moya/commits/observable-single-9.0\nWe can:\n1 - Open a new PR from that branch\n2 - Push force to observable-single, meaning everyone will have to delete the branch locally and fetch again (but we keep this PR)\nI'm ok either way \ud83d\ude04 . @BasThomas @AndrewSB @gperdomor @justinmakaila @andreyfel \nHey I created #1020 to avoid more branch issues. Please continue the discussion in that PR and use branch observable-single-9.0 for new additions. I'll delete observable-singleto avoid confusions :wink:. @evermeer Thanks for pointing that out! We'd be happy if you could send us a PR with the fix :wink:. @justinmakaila running pod lib lint shows the warning for me.. @AndrewSB Is it worth adding in the changelog that we bumped the minimum version of RxSwift to 3.3? \ud83e\udd14 . @BasThomas Thanks! \ud83d\udc4d . Doing let _ = is just a way to check if an Optional value is nil or not. I personally prefer != nil because the check is obvious.\nThis is not a strong opinion so I'm ok with whichever we agree to use :wink:. @scottrhoyt I think you're right \ud83e\udd14 \n@AndrewSB Did we miss the extension @scottrhoyt pointed out or is there a reason to keep returning Observable?. @sunshinejr thanks for merging! Also, we're having some issues with the build, check #1039 :wink:. Hey @camcoding, take a look at #980. @scottrhoyt gave some ideas on how to change the baseURL dynamically. @camcoding My first impression was that you could use the basic logic of #980 to achieve what you need, because in #980 the steps are:\n1 - Make a request to a baseURL\n2 - Extract the next baseURL from the response of the first call\n3 - Use the extracted url as baseURL for the second request\nAnd this could go on for several requests.\nFor your scenario, I'm assuming you can first try the local home address (which should fail when the user is remote):\n1 - Make a request to baseURL using the local address\n2 - If the request fail, switch baseURL to the remote address and make the request again\nOnce you know where the user is (home vs remote), you could probably store this information in your app and avoid making two requests every time if they are remote, and just make it once a while to check if they changed location.\nDoes that make sense in your case?. @camcoding Can you  write a custom provider that subclasses RxMoyaProvider  and implement the logic in the custom provider? \ud83e\udd14 \nI'm not too familiar with RxSwift, but if this approach is not too complicated (or impossible), you'd get the logic nicely wrapped in a single place :wink: . Hey @iballan could you provide more details on how you're encoding the parameters in the URL? Are you trying to send parameters in the URL and in the request body as well?\nIt'd be great if you could share some code that illustrates the issue :wink:. @iballan Can you change your implementation of path to be:\nswift\n var path : String {\n        switch self {\n        case .products(let id_category): \n            return \"products\"\n        }\n    }\nand parameterEncoding to:\nswift\nvar parameterEncoding: ParameterEncoding {\n        switch self {\n            case .products:\n                return URLEncoding.default\n            default:\n                return JSONEncoding.default \n        }\n    }\nThese changes will leave your code similar to the example we have in the docs on how to send parameters in the URL when doing a POST request (see .updateUser)\n. Hey @iballan, we recently noticed that the documentation I pointed you to was wrong (we fixed in #1120). \ud83d\ude05 \nCould you try using URLEncoding.queryString instead of default?. I have set up an example on how to send parameters in the URL using POST. Can you try this one out and make sure it works for you? \ud83e\udd14 . I think we can take the deprecation warning in master, as it's not a breaking change. We actually have #1027 to do it :wink:\nI also think that converting to a single scheme is not a breaking change and we should take it in master (which makes me think that we should continue #967 instead).\nThe dependencies update is good, but is it a breaking change? If not, I'd vote for merging into master so we can release it before 9.0. Hey @lizhihui0215 , unfortunately Swift enums do not support inheritance. From the docs, highlight by me:\n\nA class can inherit methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a subclass, and the class it inherits from is known as its superclass. Inheritance is a fundamental behavior that differentiates classes from other types in Swift.\n\nThis answer on StackOverflow that may be helpful. Cool, thanks @BasThomas I'll close the issue :wink: . I tried a few things in branch circle-ci-xcode-8-3. I think bumping Result in Cartfile.resolved is enough for the original error. The status on the branch is that the compiler can't find module Result and I'm not sure why yet \ud83d\ude15 . @AndrewSB Good job! I almost got it right in https://github.com/Moya/Moya/commit/eefcf600139ed8fb787d5c936c0277fc024902ad, but only updated the dependencies I thought were causing the issue \ud83d\ude04 \nAnd I'd say we can skip the unused arguments in the closure. Actually, I was hopping that _, _, printing would do the trick, but it didn't and I'm not sure why \ud83e\udd14 . @AndrewSB Ok, so it seems like printing actually groups all arguments\n\nIn fact, the Any... argument is accessed as printing.2 in the test. I didn't know it was possible and (in the very quick search I did) could not find references about this feature.\nDoesn't fix the problem but at least we know why it worked \ud83d\ude04 \n. > and from what I can infer from the contents of the test, it looks like it was an array, not a tuple (with three elements).\nI think it was a tuple \ud83e\udd14 \nswift\n let stringArray: [String] = printing.2.map { $0 as? String }.flatMap { $0 }\nIsn't printing.2 returning the third argument (the array of Any)?\nBut you're right, if we can find who wrote the test just to confirm the intention it'd be better \ud83d\udc4d . @BenEmdon Awesome! I totally missed the printing: part \ud83d\ude04 \nDo you feel like pushing a commit with this fix on branch fix-carthage-ci-fail? \ud83d\ude09 . Agreed on tagging this as a breaking change\n@juliengdt Good job and thanks for the contribution!. @EvilNOP Thanks for raising the idea \ud83d\ude4c  I've created #1067 with an initial implementation for headers inside TargetType. Feel free to review it and let us know what you think \ud83d\ude09  . Implemented in #1067. Hey @douglastaquary thanks for sharing your solution, this may be useful for others as well!\nCheers from Brazil \ud83d\ude09 . Hey @k8mil, can you check if it works as expected when you change your baseURL to be just https://google.com and path to return /123/somepath?X-ABC-Asd=123?. Hey @k8mil thanks for the detailed explanation and examples \ud83d\udc4d \nI think I have a fix in #1053, care to take a look? \ud83d\ude09 . @BasThomas Feels like a bug fix to me. I think the expectation when path is empty is that the baseURL will be used unchanged (which was not happening).\nDo you feel it's a breaking change? If so, why?. I see, you're saying that someone may be relying on this buggy behavior for something. But I'd say there are probably workarounds to avoid the issue \ud83e\udd14 \nI'd still not call it a breaking change as the API contract has not changed, and the current behavior seems odd and probably is not expected.\n@AndrewSB @sunshinejr thoughts on that?. The CI failure is legit, seems like RxSwiftMoyaProviderTestsneeds a second review \ud83d\ude04 . @sunshinejr @AndrewSB @haritowa I fixed the conflict in the changelog (used Github web interface to do it, that's why the commit message is bad \ud83d\ude15 )\nDoes it make sense to merge this PR into optional-response-thread-param and take the queue renaming (and docs) in #762? \ud83e\udd14 . @jayesh15111988 Yes, let's continue the discussion in #1046 :wink:. @konnorbeard Could you try using 7.0.4 and see if the issue still happens? \ud83e\udd14 . @konnorbeard Hm, that's weird. I know you mentioned you're on Swift 2.3, but can you confirm that 7.0.1 won't work as well because it's targeted as 2.2?. @konnorbeard Did you find a fix for this?. Hey, I think what you need was added in #993. The change is targeted to be released in version 9.0 :wink: . @iOSUser110 We still don't have an estimate for when 9.0 will be released, as we're still including some breaking changes to it.\nWhat you can do is use a fork of the Moya repo with a branch pointing to a3f0c526ddaf9c10b8044e5121f6272e06e31c27. You can then update your dependency to use your fork and branch:\nCocoapods:\nruby\npod 'Moya', :git => 'https://github.com/iOSUser110/Moya.git', :branch => '<your branch>'\nCarthage:\nruby\ngithub \"iOSUser110/Moya\" \"<your branch>\"\nPlease don't point directly to our 9.0.0-dev as this branch is under active development and is being constantly rebased (which will change commit hashes and may be not be always stable). @iOSUser110 First you need to fork Moya repo and fetch it locally. Then run these commands inside your fork of Moya:\ngit checkout -b temp a3f0c52\ngit push origin temp\nThe name of the your branch in this case is temp, feel free to name it as you like. @Moya/contributors Let me know what you think :wink:. @justinmakaila Yea, having it defaulting to nil makes sense to me. I actually tried that at first, but was having some trouble overriding the value in the tests. Probably missed something, will give it another try \ud83d\ude04 . @justinmakaila I think @BasThomas was talking about whether or not we should default headers to nil \ud83d\ude04 \n@BasThomas I think the discussion happened in #861. Great, so I think we all agree having no default is better \ud83d\ude4c . @AndrewSB We configured it to fail on missing changelog entries. I think I made all the updates needed in the docs. Can someone double check? :wink:. We can also think about loosening some danger rules. I feel that the one that causes more confusion is \"missing changelog\", which we could downgrade to warn instead of fail \ud83e\udd14 . Just came across this: https://github.com/probot/stale \ud83e\udd14 . @sunshinejr thanks for taking the time! \u2764\ufe0f . @SD10 That's exactly what I was testing https://github.com/pedrovereza/stale-bot-test/issues/2 \ud83d\ude04. @SD10 I'm ok waiting a bit longer for them to take a look at the PR. But if we decide to change the label, we need to revisit all the ones currently marked by the bot.\n@sunshinejr @AndrewSB @BasThomas thoughts? \ud83d\ude04 . We can try changing the label name and bot config, worst case we'll have to close them manually (which was the original plan anyway) \ud83d\ude04 . I'm up for closing this issue now that the bot is finally working :tada:\nWe originally wanted @MoyaBot to do the job, but I don't think the effort to deploy our own bot is worth it.\n@MoyaBot: nothing personal \u2764\ufe0f . Possibly related: https://github.com/Moya/Moya/issues/437#issuecomment-198780649 and https://github.com/Moya/Moya/issues/478. Releasing 8.0.4 makes sense to me. Not too many changes, but some people may benefit from having the changes compatible with 8.x. Thanks for starting the discussion @sunshinejr \ud83d\ude4c \nI vote for 3.. I think this is a good first step, we can take improvements (if any) in PRs.\nThanks for the work @sunshinejr!. On a side note, dealing with header fields will (hopefully) be easier in 9.0.0 (see #1067) :wink:. Hey @mrfarukturgut , JSONResponseDataFormatter is not part of Moya. We have the function implemented in our Demo app, you'd need to implement the function on yours :wink:. Hey @dannymout, I just created a simple project using Moya and Carthage and it's working fine \ud83e\udd14 \nhttps://github.com/pedrovereza/MoyaCarthage\nCan you setup a demo project that recreates the issue you're facing?. @BasThomas I didn't push the Carthage folder on porpuse, as it contains only build artifacts \ud83d\ude04 . @dannymout I noticed a few things in your project:\n\nThe frameworks for iOS should be under Linked Frameworks and Libraries only, not on Embedded Binaries\nThe script that copies frameworks under Build Phases is missing\nThe actual problem is happening because of the way RxTest is being linked. Linking testing frameworks is a bit different from linking \"normal\" frameworks (see here)\n\nI'd recommend following the steps in the Carthage docs :wink:. @dannymout You don't have to link if you won't use it. The project I created is only linking what's needed for Moya: Alamofire.framework, Moya.framework and Result.framework. @dannymout Awesome, let us know how it goes \ud83c\udf89 . @dannymout were you able to get it to work?. @pete183 Yes, URLEncoding.default will put your parameters in the url :wink:. @sunshinejr Please check #1120 \ud83d\ude05 . @pete183 This is the expected behavior from Alamofire. From URLEncoding docs:\n\nSince there is no published specification for how to encode collection types, the convention of appending [] to the key for array values (foo[]=1&foo[]=2), and appending the key surrounded by square brackets for nested dictionary values (foo[bar]=baz).\n\nIn order to achieve the format you want, you'd have to implement your own ParameterEncoding\n. @devxoul By using ~> 3.0 we are saying we can take anything from 3.0 up until 3.9. The problem here is that our minimal version should be 3.5 now. \nWe would still want to use ~> 3.5, as >= 3.0 means we could take, for example, version 4.0, which would include breaking changes that we may not be ready to take.. @BasThomas @LeonardoCardoso  Yea, just double checked that I have a dummy project that is using RxSwift 3.5 as well.\n@LeonardoCardoso If pod update doesn't solve it for you, could you share the content of your Podfile and Podfile.lock?. Cool topic, thanks for bringing it up @sunshinejr!\nI have a few things I'd like to bring up:\n\nI'm a bit concerned that the base protocol of plugins is empty. I'd rather have a protocol that explictly exposes what it can be used for, or no base protocol at all.\nMaybe as a symptom of the above, all plugins you used as example define different contracts. for instance, what do an EndpointPreparingPluginType and ResponseStubbingPluginType have in common? What's the benefit of having both as Plugin?\nNot sure about the second storing options. Having an array of Plugin would probably force us to know the exact type of plugin before using it, making the Plugin abstraction not so useful.\n\nI think we first need to have a clear vision of what exaclty is a plugin for Moya. Is it something external to the core API, similar to our current PluginType, which deals only with request/response? Or is it something capable of changing the internal behavior of the framework (like EndpointPreparingPluginType and RequestPreparingPluginType)? Or both?. @sunshinejr Last time we rebased 9.0.0-dev with master, which I feel may be easier \ud83e\udd14\n. @sunshinejr Oh I see, let's go ahead and just make a commit fixing the changelog then \ud83d\ude04 . A similar discussion happened in #345.\nCouple of quotes:\nhttps://github.com/Moya/Moya/issues/345#issuecomment-183493154\n\nThe only \"real\" fix for this is to have separate repos but we decided to not go that way in the past since it adds a lot of complexity for 2 extra files.\n\nhttps://github.com/Moya/Moya/issues/345#issuecomment-183494797\n\nwe tried multiple repos but it got out of hand, quickly.\n\nBut I'm interested to hear what kind of dependency problems you're referring to.\n. @Huang-Libo I can see the benefits it would bring for Carthage users, but I still agree with the conclusions from #345: the complexity it would add on maintenance side is too big. (more context in #215 and #169).\n@Moya/contributors Thoughts?\n . Sounds good to me.\nIf we decide to make the change, I think we should make it part of 9.0 (even if it delays the release a bit), since we already included breaking changes in TargetType.. @Dschee We are using milestones to keep track, but I'm not sure of the benefits GitHub Projects would give us (feels more like a kanban thing).\nWe are using branch 9.0.0-dev for breaking changes going out in 9.0, and we basically rebase the changes on top of master from time to time, which will make the merge from 9.0.0-dev to master easier when we decide to release it. PR #1124 was opened just to let more people double check that the rebase was good before pushing it to 9.0.0-dev.\nWe should probably continue this discussion in a separate issue (if needed) so we don't hijack this one \ud83d\ude05 . @SD10 We've had conversations about providing default implementations for common things, but in the end we agreed that, as a rule of thumb, we'd rather have the user explicity define (and understand) the behavior instead of relying on default implementations provided by us.\nMore in https://github.com/Moya/Moya/pull/1067#issuecomment-298128123 and #861 \ud83d\ude09 . @SD10 \n\nIt's a large read but my takes from it are:\nForcing people to implement sampleData makes it harder to get Moya up and running\n sampleData is required prematurely (long before unit tests are written)\n Having sampleData in the TargetType bloats the file, especially with a complex API\n\nI agree with all these points, but I don't think that defaulting sampleData is the best solution. I think that it should be removed from TargetType completely :wink:. I think we could just point to Alamofire docs instead \ud83e\udd14 . @BasThomas @sunshinejr Should this closed in favor of #1153? \ud83e\udd14 . @sunshinejr I Edited your reply to be return .requestData(data) instead of return .requestData() :wink:. Hey @ledikari, this feature is planned to be release on Moya 9.0. See #993 :wink: . @ledikari @jeryRazakarison Yes, you can use the version of Moya that is under development if you'd like. I'd only suggest that you fork the repo and point to your own fork instead of relying on our 9.0.0-dev branch as we can't guarantee it will always be stable :wink:. I think the suggestion from @SD10 is valid:\n\nMaybe add #1126 comment:\nfavor explicitly defined behavior over default implementations\n\nHe also raised a good question on what's our vision regarding responses in general:\n\nCurrently, I wouldn't say Moya is in the business of response handling -- aside from providing a few Moya.Response extensions. But what's the vision for this? Are we for or against this behavior?. @ashfurrow Sorry, I totally missed the response part on the document \ud83d\ude48 . @xavierXing Hey, I have a demo project that shows how to use self-signed certificates with Moya. Let me know if you have any questions :wink:\n\nEdit: You can also find more details in #992 . Hey @jdeanwaite, thanks for taking the time to come back and share the solution. This may be useful to other users \ud83d\udc4d . @leiguang Did you run pod update after changing the Podfile?. Support for Swift 3.0 started on 8.0.0. According to the Changelog, Swift 3.1 started to be supported on 8.0.3. And I don't think we had to make changes for 3.2.. @sunshinejr @BasThomas just made the update for ReactiveMoya \ud83d\udc4d . Ok I think now I got it \ud83d\ude05 . @ashfurrow This PR is already targeting branch 10.0.0-dev \ud83d\ude09 . @sunshinejr @josefdolezal Based on the documentation and on Swift 4 Compatibility it seems safe to specify swiftLanguageVersions = [3,4]\n\nIf we require swift 4 toolchain, can we explicitly use swift 3 to build the library?\n\nFrom the docs I just linked to, it seems like we can:\n\nFor e.g. if Swift language version is set to [3], both Swift 3 and 4 compilers will select '3'\n\nBut I may have missed something \ud83d\ude05 . @sunshinejr @josefdolezal Based on the documentation and on Swift 4 Compatibility it seems safe to specify swiftLanguageVersions = [3,4]\n\nIf we require swift 4 toolchain, can we explicitly use swift 3 to build the library?\n\nFrom the docs I just linked to, it seems like we can:\n\nFor e.g. if Swift language version is set to [3], both Swift 3 and 4 compilers will select '3'\n\nBut I may have missed something \ud83d\ude05 . @bhstrifork Hey, could you clarify which behavior is different now? I can get a hint from the issue title, but I feel a more complete description would be helpful :wink:. @bhstrifork Hey, could you clarify which behavior is different now? I can get a hint from the issue title, but I feel a more complete description would be helpful :wink:. You're correct. Seems like we forgot to update the docs after #508 \ud83d\ude05 . Closing the issue as it seems like @AndrewSB was able to help. \nFeel free to reopen this issue or create a new one if you have more questions, @alfian0 \ud83d\ude09 . Hey @Sepho, thanks for taking the time to contribute to Moya! \ud83c\udf89 \nWhile it's true that, in 9.0, Moya core components are compatible with Swift 4, our RxSwift component is not. We are still waiting on RxSwift 4.0 to be stable (see https://github.com/Moya/Moya/issues/1233#issuecomment-326912247).\nIf we're gonna claim that Moya 9.0 is compatible with Swift 4, we should add a note mentioning that it's doesn't include our rx extension.\nOn a side note, full support for Swift 4 should come in Moya 10 :wink:\n. Actually, turns out there is already a PR making the updates on the version table. I'm closing this one in favor of https://github.com/Moya/Moya/pull/1239.\nThanks again for taking the time, @Sepho \ud83d\ude4f . @AndrewSB Seems like you deleted a block but forgot to remove the end (here). @BasThomas SwiftLint is not configured to check the Demo project, just /Sources and /Tests. @AndrewSB no reason, I think we just never did it \ud83d\ude05 . Also, should we change the target of this PR to 10.0.0-dev as RxSwift 4 is not stable yet?. Also, should we change the target of this PR to 10.0.0-dev as RxSwift 4 is not stable yet?. Seems like the Podfile.lock on the Demo project needs to be updated. > due to the way CircleCI separate everything into isolate stages it makes it pretty difficult to exit early with a success flag (obviously you can drop a failure at any point in time).\n@Sherlouk Have you checked circleci step halt (here)? . @Sherlouk Okay, maybe it's because we're not using Circle 2.0 yet \ud83e\udd14 . I'm a bit concerned on the amount of things this PR wants to achieve \ud83d\ude05 \n@sunshinejr  Do you feel we could create an issue to keep track of all these steps and tackle each one in a sepparate PR? Or are you comfortable making all these changes at once?. It's still not clear to me what are the problems we're trying to fix and how a new branch strategy would help, which leads me to agree with @BasThomas.\n\nHaving everything on master might be a problem in case we want to release a fix before we release a new major version.\n\nI think the problem here will be the same regardless of the branch strategy: apply the fix on two branches. Either on master and development, or master and branch-created-from-release-tag. It's worth noting that we don't have to release things from master, we can use any branch.\n\nLet's say we add new breaking feature and then we figure out that 10.0 contains a really bad bug, we would need to do some git voodoo to make a fix release.\n\nConsidering the scenario where we have master and development, and one of them already has whatever was release on 10.0, that seems easier indeed. But what if we need to patch 9.0? I think we would fall back to creating a branch from a tag.\nAnyway, I think we need to better describe the problems we're trying to fix in order to get to a good solution.. For the record, this seems like a regression: https://github.com/Moya/Moya/pull/1127 had done it already \ud83d\ude05 . The return type of request is a Single, not an Observable. You can either define mapObject as an extension on Single, or use asObservable() to convert the Single to Observable:\nswift\nfunc getData(parameters: [String : Any])  -> Promise<DataModel>{\n        return Promise(resolvers: { (result, error) in\n        networkClientProvider.rx.request(.getData(parameter: parameters))\n            .asObservable()\n            .filterSuccessfulStatusCodes()\n            .mapJSON()\n            .mapObject(type: DataModel.self)\n            .subscribe(onSuccess:{\n                print(\"result = \\($0)\")\n            }, onError: {\n                print(\"error = \\($0)\")\n            })\n            .disposed(by: disposeBag)\n            })\n    }. @BasThomas I tried it locally and it installed 10.0. \ud83e\udd14 \nI feel the issue may be happening because you didn't have your specs repository up to date. So not specifying a version causes CocoaPods to take the latest version it has locally (assuming it was 9.0 in your case). When you run pod update, it also runs pod repo update (note that the output starts with Updating local specs repositories), which could explain how it works after that.\nCan you double check that if you try to setup a new project now it will take 10.0 because the spec repo is updated?. It would've warned if version was specified in the Podfile, like 10.0, ~> 10.0, >= 10.0 etc.\nI specified version 11 just to test:\nruby\npod 'Moya/RxSwift', '~> 11.0'\nOutput of pod install:\n```\n$ pod install\nAnalyzing dependencies\n[!] Unable to satisfy the following requirements:\n\nMoya/RxSwift (~> 11.0) required by Podfile\n\nNone of your spec sources contain a spec satisfying the dependency: Moya/RxSwift (~> 11.0).\nYou have either:\n * out-of-date source repos which you can update with pod repo update or with pod install --repo-update.\n * mistyped the name or version.\n * not added the source repo that hosts the Podspec to your Podfile.\nNote: as of CocoaPods 1.0, pod repo update does not happen on pod install by default.\n```. You summarized the problem nicely:\n\nat this point CocoaPods doesn't know about it\n\nThe safe way is to always specify the version on the Podfile \ud83d\ude05 . @BasThomas The same thing that happened when I tried to use 11.0. The error message from CocoaPods suggests that you run pod repo update or pod install --repo-update. @RiuHDuo The discussion about splitting the project into multiple repos comes back every once in a while. See https://github.com/Moya/Moya/issues/345 and https://github.com/Moya/Moya/issues/1125.\ntl;dr:\n The problem is on Carthage side;\n Spliting into multiple repos makes it easier for users, but adds a lot of complexity on our side. @honbolau As mentioned by @sunshinejr, you can create a custom Plugin to get the full URL. So for an example target:\n```swift\nenum ExampleTarget {\n    case example\n}\nextension ExampleTarget : TargetType {\nvar baseURL: URL { return URL(string:\"https://httpbin.org\")! }\nvar path: String { return \"/get\" }\nvar method: Moya.Method { return .get }\nvar sampleData: Data { return Data() }\nvar task: Task { return .requestParameters(parameters: [\"param1\" : \"value1\",\n                                                        \"param2\" : \"value2\"],\n                                           encoding: URLEncoding.default) }\n\nvar validate: Bool { return true }\nvar headers: [String: String]? { return nil }\n\n}\n```\nA custom plugin that is able to get the full URL would look like this:\nswift\nclass CompleteUrlLoggerPlugin : PluginType {\n    func willSend(_ request: RequestType, target: TargetType) {\n        print(request.request?.url?.absoluteString ?? \"Something is wrong\")\n    }\n}\nThis plugin is printing the url of every request (you may want to add some logic to only handle requests you want to save). Example output:\nhttps://httpbin.org/get?param1=value1&param2=value2\nUsage on your provider:\nswift\nlet provider = MoyaProvider<ExampleTarget>(plugins: [CompleteUrlLoggerPlugin()])\n. On a side note, can we have this in the Vision document?\n\nMoya should make common things easy and uncommon things possible\n. @sunshinejr You may wanna check out branch circle-workflow \ud83d\ude09 . @sunshinejr I pushed a change to rollback parallelism to 1. CircleCI currently does not support parallelism for macOS/iOS, and the build simply doesn't start (your last commit was queued for 5h until I killed it \ud83d\ude04). I faced the same problem when I was playing on the circle-workflow branch \ud83d\ude09 \n\n\nWorth noting that, even though we have 2 jobs that could be run in parallel, we're on the free version of CircleCI and only have one macOS worker, which means the jobs will run sequentially.\nWe can, however, apply for a free Seed plan subscription, which would give us 2 macOS workers:\n\nWhat if I am building open-source?\nWe also offer the Seed plan for macOS open-source projects. Contact us at billing@circleci.com for access. If you are building a bigger open-source project and need more resources, let us know how we can help you!. @sunshinejr They have a note, but on version 1.0, but I couldn't find anything on 2.0. \n\nI wasted almost an hour waiting for my build to start after I tried to change parallelism config. Only worked after I reverted the change \ud83d\ude05 (cc. @orta @ashfurrow). @sunshinejr @SD10 Agree, the addition makes sense! If any of you wanna go ahead and do it, feel free to push to this branch! I probably won't have time to do it until Thursday \ud83d\ude15 . Hey @KompoD I have an example project that downloads and displays images, it may be helpful: https://github.com/pedrovereza/quote. The idea seems interesting, but I think it'd be helpful to have a more detailed usage example.\n\nIn my app I'm faced with a situation where I need to modify a request's parameters asynchronously but not through a request per say. Rather, I just need to access an optional value on some other object that could or could not be nil. So chaining callbacks, promises, or Rx are all useless to me\n\n@SD10 I'm not sure I understood your scenario, can you clarify a bit more? Specially why callbacks and promises are useless and how the AsyncPluginType would help you \ud83e\udd14 \n@pietrocaselani @SD10 since both of you mentioned the RefreshTokenPlugin, any chance you could share how you think the plugin would look like using AsyncPluginType?. Hey @soxjke, we recently updated the dependency in #1668, you can expect a beta release of Moya 12.0 soon \ud83d\ude04 . Thanks @SD10 \u2764\ufe0f \nI feel this issue is solved then. We can revisit the discussion about #1126 / #1502 in a new issue for the first stable release of version 12.\nThanks again everyone for taking the time to discuss the release \ud83d\ude4f . @SD10 can we just recreate development from master? \ud83e\udd14 . @SD10 I meant create a new branch from the top of master and call it development, instead of trying to merge master into development.\nUnless there's anything on development that didn't make it to master yet \ud83d\ude04 . Hey @carlosalexandresmo, can you share a code snippet that recreates the issue you're facing?. I'll close this one as it seems resolved. \n@felixsolorzano if you still have questions, feel free to re-open this issue or create another one!. Hey @anh-ht, I think you'll have to create your own ParameterEncoding. Here is the Alamofire documentation on how to build a custom ParameterEncoding, hope it helps.. Hey @ivensdenner, I don't think it covers the entire issue here, but it seems like your Podfile has unmeetable versions.\nMoya-ObjectMapper has Moya version defined as ~> 11 (see here), meaning it will take from Moya 11.0 up to 12, but not including 12 (so basically it will take up until Moya 11.0.2, which was our last 11.x release). Meaning the highest version of Moya that can be installed is 11.0.2, but your Podfile still requires 12.0.1 \ud83d\ude2c (more in CocoaPods docs)\nSo in order to use Moya-ObjectMapper and Moya 12, Moya-ObjectMapper needs to release a new version supporting Moya 12.\nDoes that make sense?. > It might also fall under the \u201ecommon things are easy, and uncommon things are possible\u201c category.\nI\u2019ve been using Moya for over a year in various projects, and this is the first time I\u2019m running into this.\nI totally agree this falls under that statement. It doesn't seem to be a scenario that is common enough to make it to the TargetType. In fact, this seems to be first issue created for this topic.\n\nThe thing I don\u2019t like about our current implementation is that the decision to follow redirects is now completely independent of any TargetType, so I thought it might make sense to somehow combine this.\n\nTotally agree with you, but I still feel this is a very specific scenario and maybe it's not worth to implement it on TargetType. If we start getting more request from people trying to avoid following redirects based on TargetType then I think it would make sense to work on it.. Hey @kakubei, you can achieve it by interpolating the userId in your path, like this:\n```swift\nvar path: String {\n  switch self {\n    case .get(let userId):\n       return \"/users/(userId)/offers\"\n  }\n}\n```\nWe have a similar example in our docs. See path for .showUser and .updateUser\nAnd yes, you can use .requestPlain if your request doesn't need any other data (such as query params). More here.. > I have it in the request manager from where I call the provider \ud83d\ude22\n@kakubei Is it possible to pass the user id when you're calling the provider? Similar to this:\nswift\nlet provider = MoyaProvider<YourService>()\nprovider.request(.yourTarget(userId))\nIf not, can you share some example code that is similar to your scenario? A snippet of your service enum definition, TargetType and how/where MoyaProvider is being called would be helpful. @kakubei Ok cool, so my suggestion should work:\n```swift\nenum OffersApi {\n    case get(userId: String)\n}\nextension OffersApi: TargetType, SharedHeaders {\n    var baseURL: URL {\n        return URL(string: \"https://api-staging/v2\")!\n    }\nvar path: String {\n    switch self {\n        case .get(let userId):\n            return \"/users/\\(userId)/offers\"\n    }\n}\n\nvar method: Moya.Method {\n    return .get\n}\n\n// Provider call\nlet provider = MoyaProvider()\nlet userId: String = userManager.currentSession?.user.uuid ?? \"\"\nprovider.request(.get(userId: userId)) { [weak self] result in\nswitch result { ...\n```\nDoes that make sense?. If .get is your only target, you can return .requestPlain without a switch/case. Or if you prefer to keep it, you can use case .get: instead of case .get(let userId). Closing this one as it seems solved \ud83d\ude04 . @orafaelreis Can you enable NetworkLoggerPlugin in your provider and share how is the image being sent with your code?. @artbasil I'd like to better understand your use case. \nWhy isn't the baseURL set to www.somehost.com? Have you considered wrapping the custom path creation in functions? Similar to:\n```swift\n    var baseURL: URL { return URL(string:\"http://somehost.com\")! }\nvar path: String {\n    switch self {\n    case .method_a:\n        return standardApiPath(forMethod: \"method_a\")\n    case .method_b:\n        return standardApiPath(forMethod: \"method_b\")\n    case .method_z:\n        return alternativeApiPath(forMethod: \"method_z\")\n    }\n}\n\nprivate func standardApiPath(forMethod method: String) -> String {\n    return \"api/apiversion/\\(method)\"\n}\n\nprivate func alternativeApiPath(forMethod method: String) -> String {\n    return \"alternative/path/\\(method)\"\n}\n\n```. @artbasil I think the change would be ok, as long as it is backwards compatible. Could you send over a PR with the change?\n@Moya/core-team any thoughts or comments?. @artbasil I'd rather have it throw an error. If the user is trying to build a malformed URL, we shouldn't hide the problem. This may be useful \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684ParameterEncoding. @LCBbest In your example, request is an instance of URLRequest. The URLRequest documentation has a section called \"Accessing Request Components\" with all requests fields that you can read.\nI think httpBody is what you're looking for.. Ah sorry, I miss understood what you wanted to print. You want to print the parameters of the Task defined in the TargetType, right?\nIf so, you can get the Task instance from the endpoint:\nswift\nlet task = endpoint.task\nAnd then use the switch block that @sunshinejr mentioned\n. This seems to be a duplicate of #1793. I'll close this one so we can keep the conversation in a single issue \ud83d\ude09 . Hey @SergeyGamayunov you can get around it by adding a new case in your TargetType enum that takes the raw url and use it as baseURL:\n```swift\nenum ExampleTarget {\n    case plainRequest(rawURL: String)\n}\nextension ExampleTarget : TargetType {\n    var baseURL: URL {\n        switch self {\n        case .plainRequest(let rawURL):\n            return URL(string: rawURL)!\n        }\n    }\nvar path: String { return \"\" }\n\nvar method: Moya.Method { return .get }\n\nvar sampleData: Data { return Data() }\n\nvar task: Task { return .requestPlain }\n\nvar validate: Bool { return true }\n\nvar headers: [String: String]? { return nil }\n\n}\n```\nUsage:\nswift\nprovider.request(.plainRequest(rawURL: \"https://httpbin.org/get\")) { result in\n            switch result {\n            case .success(_):\n                print(\"Success\")\n            case let .failure(error):\n                print(error)\n            }\n        }. > * force unwrap base URL for that case. Even if we add check for value presence, we have to return real URL instance\nThe url coming from your webView needs to be valid anyway in order to make a request, right? You can avoid force unwrapping by changing the enum to receive an URL instead of a String and handle the URL creation before passing it to the provider (probably not passing it at all if you can't build an URL from the String you got). \n\n\nbaseURL variable is semantically overloaded: it will return URL that basically is not base URL. We always consider that variable as place where you can expect to see one or two real base URLs.\n\n\nI don't think I understood what you mean. Can you elaborate on that?\n. @SergeyGamayunov Ah, got it!\nAnother option would be to create a TargetType just for this use case, and leave your current TargetType as is. You could then have a different provider for the new TargetType or consider using a MultiTarget provider\nBut I'm afraid these are the only options we currently have \ud83d\ude05 . Hey @LCBbest it is easier to help you out if we keep the conversation in a single issue \ud83d\ude04 \nClosing as duplicate of #1793. No reason, was using Alamofire as a reference\nShould I reorder it back to how it was?\n. Tried this and seems to work fine.\n``` swift\npublic typealias Method = Alamofire.HTTPMethod\nextension Method {\n    public var supportsMultipart: Bool {\n        switch self {\n        case .post,\n             .put,\n             .patch,\n             .connect:\n            return true\n        default:\n            return false\n        }\n    }\n}\n```\nOnly downside I can see here is that it's yet another dependency on Alamofire. But given the discussion in #556, not sure if that's an actual issue.\n. Done \ud83d\ude09 \n. Shouldn't this be \nruby\nif podspec_updated && (!cartfile_updated || !cartfile_resolved_updated)\njust like line 46?. Shouldn't be, as there is a default implementation for each function (here) . To be fair: if we choose to rename the functions, then yes \ud83d\ude04 . Oh, I didn't know about latest. Seems to be a good choice for the xcodebuild call.\nIs there something similar for instruments -w? \nActually: Do we really need the call to Instruments? \ud83e\udd14 . I tried using latest in another branch just for testing, didn't work on Circle CI:\nhttps://circleci.com/gh/Moya/Moya/1191\nDid I miss something?. This should be self.request:wink:. Should this be ~> 1.0 as well? \ud83e\udd14 . Yep! Good catch. The entries in the changelog are incorrect. I think we only need the one under Next.. Done! \ud83d\udc4d . Done! \ud83d\udc4d . Hm, I see that both ways are used in the file \ud83e\udd14  The one I used as reference was this test. We may want to include chore as well \ud83e\udd14 . Would it be better to specify the exact number of days we waited for a response?. I'm ok with reopening, creating a new one would probably be just duplication.. I'm ok going with what we have now. We probably won't get to the optimal number before we see the bot running and judge how useful it's being :wink: . This argument label remains as queue because it's a function from Alamofire :wink:. This argument label remains as queue because it's a function from Alamofire :wink:. done :wink:. I think we need RxSwift to be 3.3 because of #1020 \ud83e\udd14 . The first two entries are meant for 9.0. callbackQueue.async(execute: stub) :wink:. We normally list all Breaking Changes first. Just noticed I left a typo here \ud83d\ude04\nWe should use either The headers used or The headers to be used. I'd write it as [...] that you can start, bind, map, or whatever you want to do. Since .basic and .bearer have the same implementation, maybe it'd be better to do case .basic, .bearer:?. The trailing space feels a bit weird. I'm assuming it's because of the formatting in:\nswift \nrequest.addValue(authorizationType.rawValue + tokenClosure(), forHTTPHeaderField: \"Authorization\")\nIf so, maybe we take the space out of the enum and properly combine AuthorizationType with the tokenClosure when adding the header?. :+1: On moving the discussion to an issue. I think this should be ~> 4.0. Fair enough. I also see that you fixed the operator from => to >= \ud83d\udc4d . You missed the @ when tagging @LeLuckyVint :wink:. Since you're using an xor this still works either way, but you need to negate the expression to know if Readme was modified (it should be !empty) \ud83d\ude09 \n. Same thing here on en_readme_modified ? \"English\" : \"Chinese\": if only English Readme was modified, you should ask for the Chinese change as well (so basically make it \"Chinese\" : \"English\").. I think you meant rake test:tvos here. I think we should avoid making assumptions about user knowledge here. Using As you already know can cause some bad feelings to users who are not aware of what sampleData does/means.\nMore in this post. Same point, I think we should avoid using As you may already know here \ud83d\ude09 . Typo on inmediate \ud83d\ude09 \nAlso, should it be creates instead?. I think the link should be https://github.com/Moya/Moya/pull/1813, it's pointing to pr 1783 right now \ud83d\ude04 . Wait, it should actually point to this pr:\n[#1815](https://github.com/Moya/Moya/pull/1815). ",
    "ealeksandrov": "Valid link will be https://github.com/Moya/Moya/tree/master/docs/Examples\n. Thanks! Looks like we need to update Basic Usage with similar note: https://github.com/Moya/Moya/commit/000662a026faf04953163f615663db7b44be6afe\n. Thanks! Looks like we need to update Basic Usage with similar note: https://github.com/Moya/Moya/commit/000662a026faf04953163f615663db7b44be6afe\n. Should be good to merge now.\n. Hey!\nI don't see any errors in your code. Actually, I even copy-pasted and compiled it.\nCan you give more details?\n. Also added optional parameters example from #468\n. - Sliced reactive extensions docs and examples apart. Docs will still have simple examples.\n- Added pages for ReactiveCocoa and RxSwift examples with the same simple examples.\n- Merged all RxSwift-specific examples into its page.\n. Good idea! Added \"Reactive extensions\", \"Endpoints customisation\" and \"Advanced subclassing and wrapping\" sections.\nNow examples readme looks much better.\n. Thanks! Will continue to dig in :)\n. I got you covered, added this example to PR, commit authorship set to @jimmy0251:)\n. Try this:\n``` swift\npublic enum MyService {\n    case Users(limit: Int?)\n}\nextension MyService: TargetType {\n//...\n    public var parameters: [String: AnyObject]? {\n            switch self {\n            case .Users(let limit):\n                var params: [String : AnyObject] = [:]\n                params[\"limit\"] = limit\n                return params\n            default:\n                return nil\n            }\n        }\n//...\n}\n```\nIn this case params[\"limit\"] = nil will be equal of removing object for key limit.\n. Doesn't matter, method type is defined in separate property\nswift\nextension MyService: TargetType {\n//...\n    public var method: Moya.Method {\n        switch self {\n        case .EmailAuth:\n            return .POST\n        default:\n            return .GET\n        }\n    }\n//...\n}\n. First of all, add default case to each switch and let us know. This should solve your issue, no matter how many cases you actually have.\nThen, you can add http headers in endpointClosure: https://github.com/Moya/Moya/blob/master/docs/Endpoints.md\n. Thanks for PR!\nYour fork is behind of upstream. How about rebasing it on top of latest master?\n. Restarted CI, it is green now.\nPR looks good for me, great work!\n. +100 for removing deprecated RAC support.\nI'm also for removing nsError. We have good docs now and it is really duplicate of existing functionality.\n. We already have updated docs: ErrorTypes.md\nBut I agree maybe it worth additional mention or link in Readme.\n. Good cleanup!\nAbout red CI - let's create separate issue for it? I am seeing the same failure for most test runs recently.\n. Good catch! Can you also make the same update to ReactiveCocoa.md?\n. Awesome, thanks!\n. @xnxin why do you want to store page number in networking layer? This property is more related to data model and can be different in a number of viewcontrollers that all use the same API endpoint.. Will do :)\n. How about \"Use Array instead of Dictionary as JSON root container\"?\n. We already have ReactiveCocoa and RxSwift examples in docs.\nMoved them now to Examples folder as well. And added to Readme, just below \"basic usage\".\n. Good point. Will look into it.\n. ",
    "cousinlam": "In Alamofire page : \"Caching is handled on the system framework level by NSURLCache.\"\nhttps://github.com/Moya/Moya/tree/master/docs : \"You should not have to reference Alamofire directly.\"\nCan I apply NSURLCache in Moya directly ?\n(Thank wattson12)\n. ",
    "freemansion": "I know, this topic is a bit old, but if anyone still looking for \"Moya\" way to take control over http caching (read use plugin), I would recommend to look at my answer here.. I had the same issue recently. I solved it writing Moya plugin.\nIf anyone still interested, below is working code:\n```swift\nprotocol CachePolicyGettable {\n    var cachePolicy: URLRequest.CachePolicy { get }\n}\nfinal class CachePolicyPlugin: PluginType {\n    func prepare(_ request: URLRequest, target: TargetType) -> URLRequest {\n        if let cacheableTarget = target as? CachePolicyGettable {\n            var mutableRequest = request\n            mutableRequest.cachePolicy = cacheableTarget.cachePolicy\n            return mutableRequest\n        }\n        return request\n    }\n}\nextension NetworkApiService: CachePolicyGettable {\n    var cachePolicy: URLRequest.CachePolicy {\n        switch self {\n        case .userProfile:\n            return .returnCacheDataElseLoad\n        default:\n            return .useProtocolCachePolicy\n        }\n    }\n}\n```\nAlso, if you want to specify the way of storing your data (in-memory capacity, disk capacity) according your needs, you have to pass URLCache object when your URLSessionConfiguration has been created. Something like this:\nswift\nlet configuration: URLSessionConfiguration = URLSessionConfiguration.default\nconfiguration.httpAdditionalHeaders = Alamofire.SessionManager.defaultHTTPHeaders\nconfiguration.urlCache = URLCache(memoryCapacity: 10 * 1024 * 1024, diskCapacity: 0, diskPath: nil). ",
    "KimSmitth": "@sunshinejr @ashfurrow @ivanruizscm I have encountered this issue too. But there is no endpointByAddingParameterEncoding method in Moya 10.0.0 anymore. Could you guide me how to do this?\nI need to move my request parameters to my request HTTP body, I am using Moya.endpointClosure too. In my case, the parameters is not JSON, but a dictionary<[String: String]>.. ",
    "pedrofjfmartins": "Cheers \ud83c\udf7b! On in \ud83d\udc4d\n. ",
    "Legoless": "Updated to match the Demo.\n. Done. ;)\n. I created the Endpoint manually, and apparently with old API, this was not required, but with new the default task will always be .requestPlain. Might be a good idea to remove default parameter, since I just wasted 3 hours figuring this out, why it doesn't work. Since task is still called again from the internal code, it can quickly be confusing where this is applied. Issue can be closed. :) Sorry.. I created the Endpoint manually, and apparently with old API, this was not required, but with new the default task will always be .requestPlain. Might be a good idea to remove default parameter, since I just wasted 3 hours figuring this out, why it doesn't work. Since task is still called again from the internal code, it can quickly be confusing where this is applied. Issue can be closed. :) Sorry.. Dynamic, sorry, forgot to add.. ",
    "Matthijn": "Yeah, I can understand that it would be quite a breaking change to move from the current enum structure to using structs. Nice to hear that you like the idea. Love to hear what you have to say when you've taken a closer look. \nAnd yeah, feel free to borrow whatever you like. Maybe a separate project is an idea. But perhaps we can think of something else. \n. @colinta That is a nice approach to the baseUrl. But since it is already part of the enum itself that would be kinda duplicate if you use the enum. \nAlso, In my current implementation the enum does not work anymore. Since with the enum you use generics to determine which enum cases can be passed. E.g: let service = new MoyaService<MyServiceEnum>(); and then service.request(.somethingInTheEnum()).\nIn my Struct based solution there is no generic MoyaService. You just create an instance like: let service = MoyaService(); and then you can pass any TargetType into the .request() method. \n\nYou could make a \"StructMoyaService\" which is not generic and an \"EnumMoyaService\" which is. Where they both inherit from (a non generic) \"MoyaService\" which will contain the bulk of the code which can be shared (which is most). But I don't think that is the way you want to go. \nBut I can't think of any way from the top of my head to support both in an elegant way.\n@sunshinejr Thanks!\n. @watson You could of course use container structs to group certain targets together if you so choose.\n. @AvdLee If you don't add the ReflectiveParameters protocol extension to your Struct you can of course still define your own parameters variable within your struct, fine tuning on how you would like it to behave for that request.\n\nOr maybe you meant that you would like to have some properties within the struct for other uses than generating the parameters then something like a parameterKeys could be introduced. That way you will have something like:\n``` swift\nstruct Foo: TargetType, ReflectiveParameters\n{\n    // The required properties for TargetType\n    let path = \"/foo\"\n    let method = Moya.Method.GET\n    let sampleData = NSData();\n// Defines which properties must be added to the parameters through reflection\nlet parameterKeys = [\"baz\", \"bar\"] // And for example when this is [ ] (default value) all properties will be added.\n\n// Will be added to the parameters\nvar baz: String\nvar bar: String\n\n// Will never be added\nvar bak: Int\n\n}\n```\nInstead of whitelisting blacklisting could be a possibility as wel.\n. I must say I like this solution. Haven't checked into this a while. But this looks promising. \n. ",
    "nilswxa": "Can't wait for something like this to be added to Moya, or to see the project switch to something like this in a new major release. The monolith enum and the scattered stuff never made sense to me either, it just felt... 'bad' and that's a shame, because Moya is really nice and for the rest it actually tries to prevent ugly boilerplate code. I'd love to group relevant (self-containing) endpoint/target structs into .swift source files.\nThe use of Swift reflection is very interesting as well.\nsubscribes to notifications for this issue . :shipit: \n. ",
    "shingt": "Joined! Thanks :)\n. Joined! Thanks :)\n. ",
    "onemanstartup": "If you are using rails. Try start rails with -b 0.0.0.0 like \"rails s -b 0.0.0.0\". Thats way it will be accessible. 999 errors is indeed confusing.\n. If you are using rails. Try start rails with -b 0.0.0.0 like \"rails s -b 0.0.0.0\". Thats way it will be accessible. 999 errors is indeed confusing.\n. @sunshinejr thanks for quick reply. Yeah it helps. The problem though, is why id is not a tuple? I guess it is a language feature, I need to learn a bit more swift :)\n. @sunshinejr got it, thank you very much for explanation!\n. ",
    "remirobert": "@wattson12 it was the problem. Thanks for you help !\n. @wattson12 it was the problem. Thanks for you help !\n. @PhilCai1993 because you need to keep a reference on it.\n. @PhilCai1993 because you need to keep a reference on it.\n. @tomj  because you need to keep a reference on it.\n. @tomj  because you need to keep a reference on it.\n. @colinta Thanks for your answer, makes sens.\nBut how can I execute several request with only 1 provider ?\n. I was also wondering, if I have to change my header, depending of the request, do I have to recreate the Provider ?\n. ",
    "Dwar3xwar": "Thank you @wattson12 !\n. Thank you @wattson12 !\n. ",
    "matteogazzato": "@remirobert can you show a snippet of your solution provided by @wattson12 please?\n. @remirobert can you show a snippet of your solution provided by @wattson12 please?\n. @sunshinejr so simple and so common i didn't think about it...thank's! \n. @sunshinejr so simple and so common i didn't think about it...thank's! \n. @justinmakaila At the moment  and for the server implementation i decided to use this approach\n```\nlet image: UIImage? = images.first!\n    let url = Constants.baseURLAPI + \"/users/(CurrentUser.get().id)\"\n    var currentUserAsJSONDictionary: [String: AnyObject]?\n    try! Realm().write({\n      currentUserAsJSONDictionary = Mapper().toJSON(currentUser!)\n    })\n    let headers: [String: String] = [\n      \"Accept\" : Constants.acceptHTTPHeaderField,\n      \"Accept-Language\" : Constants.acceptLanguageHTTPHeaderField,\n      \"Client-Version\" : Constants.clientVersionHTTPHeaderField,\n      \"If-None-Match\" : \"\",\n      \"If-Modified-Since\" : \"\",\n      \"X-API-Username\" : CurrentUser.get().username,\n      \"X-API-Token\" : UICKeyChainStore.stringForKey(\"token\")]\nAlamofire.upload(.PUT, url, headers: headers, multipartFormData: { (multipartFormData) in\n  if let _image = image {\n    if let imageData = UIImageJPEGRepresentation(_image, 1.0) {\n      multipartFormData.appendBodyPart(data: imageData, name: \"user[profile_picture]\", fileName: \"profile_picture.jpg\", mimeType: \"image/jpg\")\n    }\n  }\n  }, encodingMemoryThreshold: Manager.MultipartFormDataEncodingMemoryThreshold) { (encodingResult) in\n    switch encodingResult {\n    case .Success(let upload, _, _):\n      upload.progress { bytesRead, totalBytesRead, totalBytesExpectedToRead in\n        print(totalBytesRead)\n      }\n      upload.responseJSON(completionHandler: { (response) in\n        do {\n          if response.response?.statusCode == 200 {\n            let responseJSON: AnyObject = response.result.value!\n            let receivedResponseUser: User = Mapper<User>().map(responseJSON)!\n            try! self.realm.write { () -> Void in\n              self.realm.add(receivedResponseUser, update: true)\n            }\n            let url = NSURL(string: receivedResponseUser.profilePictureSmall)\n            self.currentUserImageView.kf_setImageWithURL(url!)\n            self.imagePickerController.dismissViewControllerAnimated(true, completion: nil)\n\n          } else {\n            print(\"************** PHOTO NOT UPDATED **************\")\n\n          }\n        } catch {\n\n        }\n\n      })\n\n    case .Failure(let encodingError):\n      self.imagePickerController.dismissViewControllerAnimated(true, completion: nil)\n      print(encodingError)\n    }\n\n```\nAnd it works well :)\n. ",
    "PhilCai1993": "But why retaining the Provider would solve this problem? \n. But why retaining the Provider would solve this problem? \n. @remirobert What I don't understand is that Why should I keep a reference on it? If I don't, will the provider be released outside the scope(For example, I make the request in viewDidLoad, and don't keep a reference.)? I didn't inspect the implementation of Moya...\n. @remirobert What I don't understand is that Why should I keep a reference on it? If I don't, will the provider be released outside the scope(For example, I make the request in viewDidLoad, and don't keep a reference.)? I didn't inspect the implementation of Moya...\n. ",
    "nkanellopoulos": "@ashfurrow Shouldn't this crash however? It is very hard to trace these kind of bugs.\n. @ashfurrow Shouldn't this crash however? It is very hard to trace these kind of bugs.\n. ",
    "tomj": "I ran into this issue too after following the Basic Setup and not retaining the provider.  Happy to put in a PR to the docs to highlight how you need the retain (as I reckon I might not be the first \ud83d\ude09 ).\nps: great library!  Thanks @ashfurrow \ud83d\ude04 \n. I ran into this issue too after following the Basic Setup and not retaining the provider.  Happy to put in a PR to the docs to highlight how you need the retain (as I reckon I might not be the first \ud83d\ude09 ).\nps: great library!  Thanks @ashfurrow \ud83d\ude04 \n. @remirobert - you bet! \ud83d\ude04 \nI just wanted to point out that the Basic Setup docs don't 100% allude to the fact that you need to keep a reference to the provider, which I'm guessing is what's responsible for (at least some of) the responses to the issue above.\n. @remirobert - you bet! \ud83d\ude04 \nI just wanted to point out that the Basic Setup docs don't 100% allude to the fact that you need to keep a reference to the provider, which I'm guessing is what's responsible for (at least some of) the responses to the issue above.\n. Aaaand I just realised that was exactly the way to go.  Just wanted to make sure there wasn't some nice way I could give a filename to sampleData rather than doing that myself.  I think the escaped JSON string in the README example for sampleData made me wonder whether I had to provide some kind of escaped variant of the data also.\nThanks for your help either way - appreciate it \ud83d\ude03 \n. @ashfurrow hope #603 is up to scratch \ud83d\ude04 \n. Cheers!  Would love to \ud83d\ude04 \n. So it turns out that the RxMoya.Response value comes out of a request as an NSHTTPURLResponse, thus giving access to the HTTP headers:\n(lldb) po (response.response as? NSHTTPURLResponse)?.allHeaderFields\n\u25bf Optional<Dictionary<NSObject, AnyObject>>\n  \u25bf Some : 15 elements\n    \u25bf [0] : 2 elements\n      - .0 : Content-Type\n      - .1 : application/json; charset=utf-8\n...\nwhich is great.  I didn't pick it up as the generated headers for the Moya framework show the RxMoya.Response value as being an NSURLResponse, as was pointed out in #515 .\nThanks either way! \ud83d\ude04 \n. ",
    "domasn": "Apparently I had to also update Cartfile.resolved + left a typo in Cartfile.\nThis fixes both.\n. Not sure why, but Carthage still checks out older version of Moya. /Carthage/Checkouts/Moya/Cartfile is as was before merge.\nCartfile contents:\ngithub \"Moya/Moya\"\nAny clues? Is there some sort of cache? Are there any other places that need to be changed (like semantic version)?\nCan't find anything at their issues.\n. :tada: \n. Like a charm :+1: \n. ",
    "tsohara": "I think its good to do so. I'll fix it.\n. ",
    "tbaranes": "Sure. Moya and Alamofire are installed using CocoaPods, but not using RxSwift, or ReactiveCocoa.\nMoya setup is completely inspired from your project Eidodolon, it's following exactly the same pattern, with some adaptations following the needs of my project.\nI really don't get what could make this errors. I also tried to track them, but I got nothing yet. The only tips I got is that's working well with the version 6.1.3...\n. That's a great idea @sunshinejr. I will try that tomorrow at work and keep you in touch! \n. I retried the v6.2.0 to make sure that the bug was always happening (who knows what's happening during the night...), and sadly, I encountered the same bugs.\nFinally, I tracked the commit which might introduced these issues as suggested by  @sunshinejr. The guilty commit would be fe7d25c: Add endpointByAdding method and refactor others. :smiling_imp: \nBefore this commit, everything is working as expected, but starting at this one, I'm getting these both issues.\nI'm using endpointByAddingHTTPHeaderFields to add the authorisation token in my project, which is the main change fro the commit. I think we can say that the range of research is reduced to the this method :dancer: \nI'm gonna take a deep look at this commit this afternoon if I have enough time. Let's track this down! :tada: \nNot sure if that can help, but here my endpoint closure implementation:\nswift\n    static func endpointsClosure<T where T: TargetType, T: QuizAPIType>()(_ target: T) -> Endpoint<T> {\n        var endpoint: Endpoint<T> = Endpoint<T>(URL: url(target), sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters, parameterEncoding: .JSON)\n        if target.addToken {\n            endpoint = endpoint.endpointByAddingHTTPHeaderFields([\"Authorization\": \"Token \\\"\\(TokenManager().token ?? \"\")\\\"\"])\n        }\n        return endpoint\n    }\n. I think I got it. I will confirm that, if everything ok, I will create a PR.\n. Seems we are not completely done with that one :laughing: \nI reproduced the exactly same bugs, and this time, they are easy to reproduce (now I know why am I getting them :see_no_evil:)\n- Create a provider by using a custom endpoint closure  / resolver\n- In your closure / resolver, do nothing\n- Send a request \nSomething like: \n``` swift\nlet provider = MoyaProvider(endpointClosure: Networking.endpointsClosure(),\n        requestClosure: Networking.endpointResolver(),\n        manager: Networking.defaultAlamofireManager(),\n        plugins: plugins)\n}\nstatic func endpointResolver() -> MoyaProvider.RequestClosure {\n    return { (endpoint, closure) in\n        let request: NSMutableURLRequest = endpoint.urlRequest.mutableCopy() as! NSMutableURLRequest\n        closure(request)\n    }\n}\nstatic func endpointsClosure()(_ target: T) -> Endpoint {\n    var endpoint: Endpoint = Endpoint(URL: url(target), sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters, parameterEncoding: .JSON)\n    }\n    return endpoint\n}\n```\nIn my case, I had an error in my implementation (didn't need a closure / resolver in this context), but I do think that is some bugs case left.\nDon't have the time to go deeper right now, but let me know if I can help!\n. The remaining issues are the same as the first ones but with another implementation:\n- Some requests never come back (Charles, a HTTP tracker, get a response 200), but Moya never call the completion. Apparently, that happens only with the GET method, the POST request is responding well\n- The request duration has increased a lot: 58ms (6.1.3) -> 10s (6.2). These numbers are from Charles\nThe first time, I was getting these issues by using a headers without params (that one was fixed in #420), but I reproduce these case by setting an endpoint / resolver, but without doing nothing in (like in my above example). \nSadly, I don't have time to look for a fix, but let me know if I can help!\n. Think so, I mean, I reproduce it easily in my own project, so it shouldn't be hard to have it with the demo project.\nAnyway, it's not that serious since we can easily has a workaround this time! \n. Sorry for the delay, but I try it again, and there is definitely a bug, when I'm using an endpointClosure, the request makes 10s to come back, without it, it takes 50ms.\nThe endpoint has no parameters, and no headers. It's like an empty endpoint. Here the closure:\nstatic func endpointsClosure<T where T: TargetType, T: QuizAPIType>()(_ target: T) -> Endpoint<T> {\n        var endpoint: Endpoint<T> = Endpoint<T>(URL: url(target),\n                                                sampleResponseClosure: {.NetworkResponse(200, target.sampleData)},\n                                                method: target.method,\n                                                parameters: target.parameters,\n                                                parameterEncoding: .JSON)\n        if target.addAuth {\n            endpoint = endpoint.endpointByAddingHTTPHeaderFields([\"Authorization\": \"Token \\\"\\(UserManager().apiAuth ?? \"\")\\\"\"])\n        }\n        return endpoint\n    }\nWhen initialise my provider without endpoint, it's working as expected:\nstatic func newDefaultNetworking() -> Networking {\n        let provider: APIProvider<QuizAPI> =  APIProvider(manager: Networking.defaultAlamofireManager(), plugins: plugins)\n        return Networking(provider: provider)\n    }\nbut when setting an endpoint, the request is really longer:\nstatic func newDefaultNetworking() -> Networking {\n        let provider: APIProvider<QuizAPI> =  APIProvider(manager: Networking.defaultAlamofireManager(), endpointClosure: Networking.endpointsClosure(), plugins: plugins)\n        return Networking(provider: provider)\n    }\nAfter some more checks, the issue is related to the parameterEncoding, if I removed it from the endpoint, it works well, with it, it's really slower.\n. A workaround: parameterEncoding: target.parameters?.count > 0 ? .JSON : .URL\nI will try to go deeper when I will have more time.\n. Yes, it's working well for all the others request, with or without apiAuth. The only change is that they are taking parameters.\nMoreover, if I don't set parameterEncoding to .JSON, it's working well.\n. Just found my error, I was passing an empty dictionary [:] in parameters instead of nil. Is that normal it takes longer just because I set parameterEncoding to .JSON and passing an empty dictionary?\n. Just edited following your comments. Let me know if you need anything else!\n. Thanks! Loved to join your great project :tada: \n. True, but I prefer not using the ! if that's not mandatory :innocent: \n. If we use unwrappedHeaders, we have to cast the value in String. That's why I make the choice of not using it, but I can change it if you prefer\n. Right, I'm gonna improve that point\n. Nice catch, gonna change this!\n. You are right, just retry, it's working. I probably dreamt this error :see_no_evil: \n. Wuuups, on it.\n. ",
    "fjcaetano": "We have implemented a datasource for our services to paginate the HTTP responses. The datasource receives a \"fetch\" closure that receives an offset and a limit and must return an Observable with the request. Also, we've implemented the subscript method so when an element with index >= count-5 is accessed, we try to load the next page:\n``` swift\nstruct FriendsService {\n  private let dataSource = PaginatedDataSource(limit: 30)\nfunc loadFriends() -> Observable> {\n    dataSource.fetch = { offset, limit in\n      provider.request(.Friends(APIRange(offset, limit)))\n        .mapArray(User.self, rootKey: \"users\")\n    }\nreturn dataSource.load()\n\n}\n}\nstruct PaginatedDataSource {\n  private(set) items = T\n  private let loadMore = PublishSubject>()\nfunc load() -> Observable> {\n    let firstLoad = fetch(0, limit)\n      .doOnNext { [weak self] items in\n        self?.items = items\n      }\n      .map { Range(start: 0, end: $0.count) }\nreturn Observable.of(firstLoad, loadMore).concat()\n\n}\nsubscript(index: Int) -> T {\n    guard let index >= items.count - 5 else { return items[index] }\nfetch(items.count, limit)\n  .subscribeNext { [weak self] items in\n    guard let weakSelf = self else { return }\n\n    let range = Range(start: weakSelf.items.count, end: weakSelf.items.count + items.count\n    weakSelf.items += items\n    weakSelf.loadMore.onNext(range)\n  }\n  .addDisposableTo(disposeBag)\n\n}\nreturn items[index]\n}\n```\nPlease, notice that I've stripped down the code to the relevant parts, if you think this is confusing or something don't add up, please ask me, and I'll try to improve it.\n. Thanks @ashfurrow. This is my test:\n``` swift\nit(\"loads next page\") {\n  var didLoadFirstPage = false\n  var didLoadNextPage = false\n_ = screen.loadFriends()\n    .subscribeNext { _ in\n      if !didLoadFirstPage {\n        let initialCount = screen.dataSource.count\n        screen.dataSource[initialCount - 5]\n    didLoadFirstPage = true\n  }\n  else {\n    didLoadNextPage = true\n  }\n}\n\nexpect(didLoadNextPage).toEventually(beTrue(), timeout: 10)\n}\n```\nTo clarify: the first element the Observable receives is the \"firstLoad\" from the datasource, and the following should be triggered by accessing the last elements from the array.\nWhen we tell Moya to StubImmediately, the Observable only receives one element, causing didLoadNextPage to be false. However, without stubbing or by adding some delay, it does comply to the test and its value is true in the end.\n. Have you tried replacing doOn with do(onError:)?\n. Hey @scottrhoyt, I'm also using a stubbed files approach and also wouldn't like to have these json files in the main bundle to be distributed with the app. Did you manage to add them to the test target without having to change the whole project membership?. @scottrhoyt, typically, when downloading some data and saving it in a device, it is important to know the path in which that data was stored. That's where destinationURL is necessary.\nI solved it trivially, but I believe the solution is something that must be discussed. For starter, Alamofire has two typical response types: DownloadResponse and DataResponse. Naturally, destinationURL is a property of the former. So, if we add destinationURL to the single response type in Moya, that property will be available even when it doesn't make sense to have it. So should it really be in the Response class? I think it does for simplicity of access and solution.\nSecondly, how would one stub such request? Should it even be stubbed? Once again, my approach to this was to add another parameter to the response cases of EndpointSampleResponse representing an optional URL which is interpreted as a possible mocked destination URL:\n``` swift\n/// Used for stubbing responses.\npublic enum EndpointSampleResponse {\n/// The network returned a response, including status code, data, and destination URL of downloaded data.\ncase networkResponse(Int, Data, URL?)\n\n/// The network returned response which can be fully customized.\ncase response(HTTPURLResponse, Data, URL?)\n\n/// The network failed to send the request, or failed to retrieve a response (eg a timeout).\ncase networkError(NSError)\n\n}\n```\nI'll submit a PR right now, but I'd love to get some opinions about these.. If there are no objections to this PR, I can fix the issues Danger raised. DownloadDestination is a closure whose responsibility belongs to the Target. It's scope should be closed to within the Target.\ndestinationURL should be a property of Response because it is likely that that path is required at response time not at request time. Something like this:\nswift\n/// Downloads a URL file and returns its local path\nfunc download(_ url: URL) -> Observable<URL> {\n  return provider.request(.download(url))\n    .map { (response: Response) -> URL in\n      guard let url = response.destinationURL else {\n        throw NSError(code: .noData)\n      }\n      return url    \n  }\n}\n(We're using RxSwift, btw)\nThis could be accomplished by using DownloadDestination if we pass the closure as a stored value of the Target enum, but I think it would be outside the correct scope and would just look wrong.. That may make sense for some cases where you'd like to have the file stored in a specific location known beforehand, but I don't know if it would be the general case. Nevertheless, it would cause the URL construction to be outside of the TargetType responsibilities, which I believe to be incorrect.  Also, what would happen if one passes an invalid URL or a path without write access? Would the request fail after download?\nKeeping DownloadDestination as part of the TargetType and returning the destinationURL with the Response wouldn't keep you from creating a TargetType case that could receive the path in which to store the file, so these aren't exclusive.\nSpeaking of our case, our app downloads a few things from S3 and throws it all in the Documents directory, so it falls under the use case I gave you. As I said, I don't know if this is the general case, but I believe it is one that makes the solution I proposed to be reasonable.. We're using the download task to mimic Apple's On-Demand Resources (we had a bad experience using it), so our app knows which files to download. It is not user-defined. This is our DownloadDestination closure:\n``` swift\nfileprivate func downloadDestination(_ temporaryURL: URL, _ response: HTTPURLResponse) -> (URL, DownloadRequest.DownloadOptions) {\n    let directoryURLs = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)\n    var path = temporaryURL\nif !directoryURLs.isEmpty {\n    path = directoryURLs[0].appendingPathComponent(response.suggestedFilename!)\n}\n\nreturn (path, .removePreviousFile)\n\n}\n``\nAs you can see, we keep the downloaded file name and replace the file if it already exists. We could figure out the name by deconstructing the given URL, if we were required to give thedestinationURL` beforehand, but it is unnecessary in our case.. You are right. When you mentioned the verification to see if the file already exists, it sounded familiar because I knew we already did something like that and, in fact, we do. Except it's on another part of the code.\nSo I've reached an impasse, because we build the destinationURL to check if the file exists, but, in the other hand, our downloader doesn't have that check, because we assume that if the method is called, it must download the file whether or not it exists.\nI guess we could refactor our service layer to include this verification and the URL build.. @xliangTrackVia doesn't scott's suggestion, of providing the destinationURL with the enum, solve it for you?. ",
    "robertofrontado": "Not the behaviour itself, what I'm suggesting is that I want to perform some operations, such map or flatMap, in the same Scheduler (background thread) which I'm subscribing it (subscribeOn). But Moya seems to not to follow the convention declared on RxSwift docs:\n\nIn case observeOn isn't explicitly specified, work will be performed on which ever thread/scheduler elements are generated.\n\nSo the observable do not observe (map, flatmap) in the thread specified when calling subscribeOn\n. @beretis We added this extension, and using it every time we use moya\n```swift\n// Fixed Moya scheduler issue\nextension RxMoyaProvider {\nfunc requestBackground(target: Target) -> Observable<Response> {\n    return request(target).observeOn(SerialDispatchQueueScheduler(globalConcurrentQueueQOS: .Background))\n}\n\n}\n```\nlike provider.requestBackground({{Target}}), so with .observeOn(SerialDispatchQueueScheduler(globalConcurrentQueueQOS: .Background)) we force the Observable chain to perform the api call on background. @kyleYang Are you still running into this issue?. ",
    "VictorAlbertos": "Hi @ashfurrow!\nI think subscribeOn matters (or should do it). Take for example the changed performed in Retrofit 2 (after released beta-2).  \n\nFix: Observable and Single-based execution of requests now behave synchronously (and thus requires subscribeOn() for running in the background). \n\nThey changed this because the library was modifying the thread on which the request was performed. And this responsibility should belong to the users of the library, not the library itself. I think Moya should do the same, because in the end is the user who consumes the observable who will know better in which thread subscribe or observe. \nNevertheless, I think the issue reported by @robertofrontado is related to this, but it is not the problem itself. \nIt seems to me like the underlying request performed by Alamofire is changing the thread to the Main thread, after the callback request is called. But I\u2019m just guessing here. \nAnyway, thanks for this amazing library!\n. That\u2019s the point :)\n\nI'm kind of curious why you would want the callbacks on a separate thread for all requests \u2013 is it a performance issue?\n\nYes, because I usually chain multiple operations after the request -using map or flatmap, like persisting data in disk or whatever. \nBut I\u2019m not asking Moya to behave like that. I mean, _I don\u2019t wanna the callbacks on a separate thread per se, I just want to Moya does not change the thread which I choose when using subscribeOn and ObserveOn_. \nBecause Moya sticks to the Alamofire procedure on threading synchronization (which makes a lot of sense outside the rx world), Moya does not follow the standards of reactive family. \nLike @robertofrontado pointed out before:\n\nIn case observeOn isn't explicitly specified, work will be performed on which ever thread/scheduler elements are generated.\n\nSo, to sum up, I think Moya rx version should not set the thread on which to observe, neither the thread on which to subscribe. Moya should respect in which thread the user choose to be performed the requested, by modifying internally nothing. Moya should not call internally observerOn or subscribeOn (plus Moya should take care of that synchronisation issue related with the fact that Alamofire synchronizes callbacks to the main thread by default).\nBut this is my opinion. And of course, yes, it could potentially break someone\u2019s code. Retrofit broke mine when I upgraded to the last version. But it was for the better, because that way I was able to understand deeper the topic of scheduling. \n. The issue happens in the class RxMoyaProvider.\nObservable starts to work in a background thread. That\u2019s right:\n\nBut after the callback, the actual thread becomes the Main thread:\n\nAnd after that point, every observable operation (flatmap, map, subscribe) will be performed in the main thread, unless I call explicitly obserberOn to observe in a particular thread. \n. I don't think so. \nRx knows nothing about the underlying task executed. Rx just knows that this \"anonymous\" task will be performed in some thread thanks to the configuration made to observable's state using subscribeOn and obserberOn. \nAnd, as the official docs points out, subscribeOn specifies the Scheduler on which an Observable will operate. \nSo, if I subscribeOn in a background thread, and I never specify in what thread the observable should observe, the convention is to observe in the thread specified when calling subscribeOn. But Moya changes that, and it is due to the underlying task of Alamofire -or at least I think that's the problem. \n. I don't see any different. I think it says the same thing. Indeed, you can create an observable with RxSwift and call subscribeOn and you will see that it behaves like already told you. \nThe real problem is that Moya is changing the scheduler in the middle of the task which performs the observable. Like I pointed out before, with the screenshot. \nBut we can wait to see what they have to say about that. Maybe I'm wrong after all ;)\n. Don\u2019t worry :) I can see your point. \nIt\u2019s just that for me I see it from the other side. I\u2019m a user of Moya, and I expect that its tasks would be performed in whatever scheduler I would set calling onSubscriber. I think Moya should give complete freedom to the user, not forcing the scheduler to be the Main thread, just because Alamofire do that. It\u2019s something common for no rx users, but I think most rx people would expect full control over the observable\u2019s threading.    \nThanks anyway!\n. With observeOn I can't change in which scheduler Moya performs its tasks. I just can change it using subscribeOn. In fact, it changes it until the code execution hits the 22 line, when unexpectedly -for me, as a user- Moya changes its scheduler.\n. Hi @bontoJR :)\nIf you think of Moya like a wrapper of Alamofire, it makes sense that Moya returns an observable which by default observe on the Main thread. But we are talking about the rx extension part of Moya, which I don\u2019t see anymore like a wrapper for Alamofire. Instead, I see it just like a rx resource which performed certain task. So if I don\u2019t specify any scheduler, I would expect -just like any other observable, its task will be performed in the same scheduler-thread from where I\u2019m calling it.\nBut that\u2019s only my opinion.\n. Of course!\nWe are (@robertofrontado and me) just finishing the port of this android base project to the iOS ecosystem. It splits the responsibilities into 3 layers. Data, domain and presentation. Every operation performed in the data layer is an i/o operation. The data retrieved from Moya needs to be cached eventually using RxCache (I\u2019ll release the port for iOS next week and I think it will be work almost (xD) perfectly with Moya and ObjectMapper), so the next actions upon the observable chain keep being i/o operations. So it does not make sense to me that Moya, which is a library focused on i/o operations, suddenly changes the current thread to the main thread, especially if I\u2019ve called subscribeOn to ensure that the underlying task -as such the observable operations, will be performed in another thread.\nThis puristic complain has also a practical implication xD\nIn the domain layer resides the base class Presenter. This method schedulers specify the Scheduler on which the observable coming from the data layer (Moya) will operate using an Scheduler of type i/o, and its items emitted will be observed in the UI thread. But only when the observable reaches this point in the chaining operation, not before! And because Moya changes this (I think standard behaviour in rx ecosystem) the scheduling configuration is messed up and now it is required to be called obserbeOn in the data layer in order to prevent this -for me, again- unexpected behaviour. \n. ",
    "hirad": "Thanks for the great response!\nI asked this question because I was trying to keep test code/data completely out of the main code, so anything I suggest may not fit well with the \"encourage testing\" goal.\nMy initial hunch on this was that it has dependency injection written all over it. We need something to provide stubbed data. That can be empty in production, but must be available for tests - therefore, different dependencies.\nKeeping in mind that I haven't actually used Moya yet (so I don't know how this meshes with it), my first idea was this: \n``` swift\nstruct MyAPI {\n    enum Target {\n        case GetUser, GetFiles\n    }\nprivate let target: Target\nprivate let sampleDataProvider: (Target -> NSData)\n\nprivate static func DefaultDataProvider(t: Target) -> NSData {\n    return NSData()\n}\n\ninit(_ aTarget: Target, sampleDataProvider provider: (Target -> NSData) = MyAPI.DefaultDataProvider) {\n    target = aTarget\n    sampleDataProvider = provider\n}\n\n}\nextension MyAPI: TargetType {\n    / These would all switch on self.target /\n    var path: String { ... }\n    var baseURL: NSURL { ... }\n    var parameters: [String: AnyObject]? { ... }\n    var method: Moya.Method { ... }\nvar sampleData: NSData {\n    return sampleDataProvider(self.target)\n}\n\n}\nlet target = MyAPI(.GetUser)\nlet testTarget = MyAPI(.GetUser, sampleDataProvider: / a closure that actually returns stubbed data /)\n```\nIt's using a struct just because the sampleDataProvider needs to get stored somewhere. That's a drawback, along with the fact that, in tests, every instance of an API target needs to get its own sampleDataProvider at init.\nReading through the docs more (including the \"Advanced Use\" section on Providers), it seems to me that this kind of behaviour belongs in the provider itself (as opposed to the TargetType). We're already injecting all sorts of stuff in there - custom endpoint mapping, request mapping, etc. The provider could also take something like a sampleDataProvider and default it to return an empty NSData in production, but in tests, the user can provide their own sampleDataProvider.\nI think with this all the test code can stay in tests, and the production code doesn't need to know about any stubbed responses.\nThoughts? Am I off my rockers?\n. @leonereveel: I just needed multipart upload and started using your fork. \nOnce I changed my TargetType to conform to MultipartTargetType, I had to change all my existing references to request to include progress: nil parameter because of the ambiguity.\nI tried experimenting with a slightly different API that I think is simpler. What do you guys think?\n. Agreed!\n. This part is a little iffy to me. What happens if the parameter encoding wasn't .URL? Then the value in params here will be malformed. I'm not sure what'd be the best way to handle encoding of additional parameters in a multipart upload.\nOne option might be wrapping Alamofire's ParameterEncoding and providing our own encoding option for multipart? \nIn any case, I think decoding the already-encoded value is problematic. We have access to all the raw values anyway (through target.parameters or better yet self.endpoint(target).parameters). I think we should use that directly.\n. ",
    "pakmans": "Ok, I tried something like this: https://github.com/Moya/Moya/issues/403#issuecomment-182465029\nand yes, the parameters are converted to JSON and used as the http body.\nThe thing is that I need to send a json body AND request parameters (as url query string).\nDo you have any suggestions on how to achieve this?\nAm I doing something fundamentally wrong that I'm the only one doing this?\n. ",
    "m00sey": "I stumbled across this issue trying to do something similar, we have an API where there are 'additional' params (sort, number of results to return etc) that are not part of the 'body'.\nSo we needed both URL parameter encoding for the query string, and a json body on the POST request.\nHere is my solution for using the ParameterEncoding.CUSTOM, once I take a look at the Moya docs and find a good place for an example, I'll put in a pull request.\nDefine a typealias that adheres to Custom Encoding:\nswift\ntypealias MyAPICallCustomEncoding = (URLRequestConvertible, [String:AnyObject]?) -> (NSMutableURLRequest, NSError?)\nCreate a closure that implements Custom Encoding\n``` swift\nlet MyAPICallCustomEncodingClosure: MyAPICallCustomEncoding = { request, data in\n    let sort = NSURLQueryItem(name: \"sort\", value: \"distance\")\n    var req = request.URLRequest as NSMutableURLRequest\nguard var components = NSURLComponents(string: req.URL!.absoluteString)\nelse {\n    // even though this is an error, Alamofire ignores the returned error.\n    return (req, nil)\n}\n//Create our query string params\ncomponents.queryItems = [sort]\nreq.URL = components.URL\n\n//Add our JSON body\ndo {\n    let json = try NSJSONSerialization.dataWithJSONObject(data!, options: .PrettyPrinted)\n    req.setValue(\"application/json; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n    req.HTTPBody = json\n} catch {\n    return (req, nil)\n}\nreturn (req, nil)\n\n}\n```\nAdd the custom encoding to your API:\nswift\nextension AuthedApi: TargetType {\n    var path: String {\n        case .MyAPICall:\n            return \"/api/search\"\n    }\n    var parameterEncoding: Moya.ParameterEncoding {\n        switch self {\n        case .MyAPICall:\n            return ParameterEncoding.Custom(MyAPICallCustomEncodingClosure)\n    }\n}\nAs always, your milage may vary.\n. I stumbled across this issue trying to do something similar, we have an API where there are 'additional' params (sort, number of results to return etc) that are not part of the 'body'.\nSo we needed both URL parameter encoding for the query string, and a json body on the POST request.\nHere is my solution for using the ParameterEncoding.CUSTOM, once I take a look at the Moya docs and find a good place for an example, I'll put in a pull request.\nDefine a typealias that adheres to Custom Encoding:\nswift\ntypealias MyAPICallCustomEncoding = (URLRequestConvertible, [String:AnyObject]?) -> (NSMutableURLRequest, NSError?)\nCreate a closure that implements Custom Encoding\n``` swift\nlet MyAPICallCustomEncodingClosure: MyAPICallCustomEncoding = { request, data in\n    let sort = NSURLQueryItem(name: \"sort\", value: \"distance\")\n    var req = request.URLRequest as NSMutableURLRequest\nguard var components = NSURLComponents(string: req.URL!.absoluteString)\nelse {\n    // even though this is an error, Alamofire ignores the returned error.\n    return (req, nil)\n}\n//Create our query string params\ncomponents.queryItems = [sort]\nreq.URL = components.URL\n\n//Add our JSON body\ndo {\n    let json = try NSJSONSerialization.dataWithJSONObject(data!, options: .PrettyPrinted)\n    req.setValue(\"application/json; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n    req.HTTPBody = json\n} catch {\n    return (req, nil)\n}\nreturn (req, nil)\n\n}\n```\nAdd the custom encoding to your API:\nswift\nextension AuthedApi: TargetType {\n    var path: String {\n        case .MyAPICall:\n            return \"/api/search\"\n    }\n    var parameterEncoding: Moya.ParameterEncoding {\n        switch self {\n        case .MyAPICall:\n            return ParameterEncoding.Custom(MyAPICallCustomEncodingClosure)\n    }\n}\nAs always, your milage may vary.\n. ",
    "jakemarsh": "@Dschee I have the exact same problem and tried your suggestion and unfortunately ended up with the same error.\n. Huge thanks @justinmakaila and company, here's what finally got me fixed up on this one:\n- Cleared DerivedData\n- Deleted Carthage's build and checkouts folders\n- Deleted Cartfile.resolved\n- Ran 'carthage update --platform iOS --no-use-binaries\nI'm sure only part of that is required to fix the issue, (probably that last --no-use-binaries option was the real fix, but building all of this takes forever so I wanted to be on a completely clean state just in case).\nI too am still somewhat of a Carthage novice, but my best guess is the release binary it was downloading (by default) for one of Moya's dependencies was incompatible, so specifying  --no-use-binaries and re-building everything from source fixed it up. Just a guess though. \n. ",
    "eridbardhaj": "@jasl Is this still working? I am asking because I cannot create a MoyaProvider instance without a specified target. \n. ",
    "alskipp": "Wasn't sure whether to open a new issue, or add to this one? I'm experiencing trouble trying to build the dependencies with Carthage too, but a different error:\nxcodebuild timed out while trying to read Rx.xcworkspace \ud83d\ude2d\n\nXcode 7.3, Carthage 0.15.2 \n(Using: carthage update --platform iOS --no-use-binaries)\n. Perhaps I'm misunderstanding how to set up the project, but I'm just trying to build the dependencies for Moya itself, using the Moya Cartfile. Was hoping to contribute towards Moya, but fell at the first hurdle \ud83d\ude02\n. @justinmakaila, yep pretty much (just forked Moya).\n. @justinmakaila I've been trying to open the Moya.xcodeproj, am I about to have a \u201cD\u2019oh!\u201d moment?\n. D\u2019oh! So the correct way of getting started is to run pod install in the Demo folder then make any changes in the Demo/Demo.xcworkspace?\n. @justinmakaila, thanks for the suggestion. Just tried clearing the cache, but still no joy (same inexplicable error) : (\nPerhaps things will settle down a bit once a few more people have battle tested Xcode 7.3/Swift 2.2 and the next version of Carthage is released? In the meantime, I'm going to retrain as a carpenter \u2013 a craft that can be indulged in without fear that your tools are conspiring against you! : )\n. ",
    "mistdon": "carthage version 0.17.2\nXcode     version 10.11.6\nWhen I run carthage update --platform iOS --no-use-binaries, I got the error :xcodebuild timed out while trying to read CoreDataLogger.xcodeproj \ud83d\ude2d.\n. ",
    "segiddins": "Yeah, you just need to have GH creds in .netrc\n. ",
    "lowell": "Oh yay! Thanks!\n. Sorry about the accidental closure. Misunderstood what 'Close' meant in a third-party GitHub client. Was just trying to close the issue view. \ud83d\ude33 \n. ",
    "freak4pc": "Thanks @sunshinejr! \nHow would that look? I need to map from one Response to a new Response and pass that? Could you help with some sample code? \n. Perfect @sunshinejr  ! That's exactly what I tried to do and started doing but thanks for refining that. \nIs there any way to do that globally? meaning, for every request? because this data structure (data->results->actual array) is global to the entire API I'm using. \nAlso thanks for your attempt to assit @aschuch ! :] \n\n. Perfect! Thank you! :] \nIs there a Moya slack channel or something of sorts or all questions should be filed here? I'm sure more  questions will pop as I start digging deeper into this. \n. So another question I had is , Is there a way to merge two maps together ? \ne.g. , I'm mapping something likes this \njson\n    {\"thumbnail\": \n        {\"path\": \"http://some.path.to/file\", \n         \"extension\": \"jpg\"}\n   }\nRight now in my Mappable I'm doing\nswift\ntry thumbPath   = map.from(\"thumbnail.path\")\nbut I would like thumbPath to include both thumbnail.path and thumbnail.extension, concatenated together. Any way to merge those? \n. Sorry about the incorrect branch here ;) It auto-selected and I missed it. @sunshinejr \nedit: was sure a close & open of the PR would trigger a rebuild. \ud83e\udd14 . All green. Do we want a Changelog entry for this ? @sunshinejr . That was my thought as well. Thanks ! . First time i'm seeing CircleCI and can't say it feels very reliable thus far \ud83e\udd14 . Seems like you can just add a post hook to manually clear the cache. But still super annoying: https://circleci.com/docs/1.0/how-cache-works/#clearing-cache. Yeah that makes total sense, since I imagine the entire project reuses some of the same caches/machines? I guess we can \"wait the pain out\" until 9.0.0 is out next month, right? :) . I already have a branch for this :) \nPR coming soon. . PR Landed at #1229 . Oh yikes, I made a booboo. Ignore this :) \nwalk of shame. Updated the Changelog and also did a \"Build without Cache\" for good luck \ud83c\udf40 . Thanks for the review! @SD10 \nI'll wait for CI to clear and @sunshinejr to review this and feel free to merge whenever \ud83d\udc4d . By the way this \"cache\" issue is probably the fault of scripts/bootstrap-if-needed.sh .... Reviewing now as well, have a couple of notes. I'm all good. Fire at will! \ud83d\udca3 !. Regarding rebasing - since this is just CHANGELOG you can just copy it from master and apply your changes over it. . @sunshinejr I would strongly suggest moving all the let thing = try something(x) { } else { throwError } to a separate tryOrThrow method similar to RxSwift, if you know that one. I think it would really clean up that code. As @SD10 suggested it has became a bit monstrously sized :-P Don't mind making the PR if you'd be interested. . @ufosky sorry I kinda got confused with the specific castOrThrow etc. This will need a bit more though. Anyways, this PR \"as it is\" should be good to Go IMO. @sunshinejr care to merge? . Just chiming in - I'm not entirely sure of the use case for splitting to develop and master. From my experience it makes thing relatively harder to maintain. Is there a specific problem we already ran to that we're trying to solve, or is this just a precaution ? . I definitely think this should be static, but ... \nWe need to consider there might be some people who actually count on this side-effect by now (which is wrong, but is the current behavior). So if we make this change, it would be a breaking change for some people. \nThe worst part is some people won't necessarily notice it would break their codebase since its a silent fix. \nNot sure how common this scenario is, but its definitely worth considering.. If this would be written from scratch today I would probably opt for a singleton style var, but since this is already a relatively mature codebase and the added value to this change would be minimal, I don\u2019t think it\u2019s necessary.\nWe could have a purely additive change where we add a \u2018default\u2019 computed static var, and whoever wants can use either, possibly. . @zhongwuzw What problem does this PR solve, except for the \"pure\" aspect of that Concrete class not necessarily needing Target? There might be other developers who count on expecting Endpoints of certain Targets as inputs of classes, etc. Seems like a bit of a breaking change for no real benefit, unless I'm missing out. \nI believe the original author of that class would be @ashfurrow - if you have a few seconds to say what you think about this, and what was the original reasoning behind using a Generic here, that might be helpful :) . Seems the issue is some flaky tests and not necessarily the move to v2 here \ud83e\udd14 \nI'll confirm on my end as well.. Why would it \"think\" it needs to build on 3.2.0 \ud83e\udd14 That's the strange question here. > This PR is a work-in-progress because we can probably parallelize Danger runs, Carthage builds, and the build_example task. I just want to validate that things work as-is first.\nPS you probably won't be able to - Circle CI only gives Parallelism of 1 for macOS containers on OSS it seems (at least thats how it is on RxSwiftCommunity). I'm just making a quick attempt here to see if it's possible to drop the script if the build itself passes and the caching already takes care of the \"if needed\" part. Will revert if not helpful.. @ashfurrow Got any idea regarding that error? Not seeing it locally . I\u2019ll take a look a tad later :) in the midst of a Magic: The Gathering office tournament ! \ud83e\udd13 \nAs a side note, Carthage is just a nightmare for CI (especially the debugging portion of it) \ud83d\ude25\ud83d\ude25\ud83d\ude25. 2018-02-28 08:27:41.195 carthage[8462:42175] *** NSForwarding: warning: object 0x7f9c6fe469a0 of class '_TtCC13ReactiveSwift4Lock10UnfairLock' does not implement methodSignatureForSelector: -- trouble ahead\nUnrecognized selector -[_TtCC13ReactiveSwift4Lock10UnfairLock length]\nWhat \ud83e\udd37\u200d\u2642\ufe0f \ud83d\ude31 . Okay @ashfurrow and others, first passing test: https://circleci.com/gh/Moya/Moya/2454\nI rebased and dropped the commits related to changing tests as these seems unrelated. Also, I'd really love to clean the v2 YAML since the translator doesn't do the best job IMO, so lets not merge this yet.. Raw string containment tests are the just the best... @sunshinejr , any thoughts? \n\n. @ashfurrow Regarding your note on v2 - I think the main problem is that iOS builds don't need that level of abstraction. I feel like it takes away, more than it adds (especially if you're on an OSS container so workflows are useless basically). Yeah that\u2019s what I thought - wasn\u2019t sure if you were ok with lower casing the entire thing :) cool, I\u2019ll try to wrap this up today. . Ok, everything looks good on my end, and we even got bootstrap-if-needed working \ud83c\udf89 \ud83c\udf89 \nI cleaned up the Circle YAML file to create a readable file, but more than that, a readable CI run. Meaning, I've split things into more steps instead of squishing test commands together, while providing proper naming for each of the CI steps. \ud83d\udcaf \nI also squashed everything to make things nice and reviewable. \ud83e\udd13 \nWould love your reviews @ashfurrow @sunshinejr \ud83d\ude04 . Also noticed this - any reason I wouldn't have write access here? Or its owners only for master merge? \n\n. @SD10 Yup looks good now. Would still appreciate another review or two from yourself and one of the other people in @Moya/contributors before this goes up. Thanks !. Thanks :) Will wait for more reviews/feedback and merge by end of day regardless.. @pedrovereza Should be G2G!. I understand the intent of the original author but I disagree on it. \nI prefer using a heavily-tested dependency such as Alamofire than to diverge Moya into two smaller dependencies. Especially as I don't anticipate it'll bring any performance benefit whatsoever to use URLSession without any dependencies (as Alamofire does that, and does it well) \nMy 2 cents.. Is there a 11 -> 12 Major-Major CHANGELOG? Or a Migration Guide? Is one needed? . Didn\u2019t review this yet - but why are your removing SwiftLint from the test target ? . > from my practice, we are usually disabling the Swiftlint for the test target.\nI think it's not correct to bring in personal intents / habits into an open-source projects. When so many people touch this code base, the only way to make a unified coding-style is to have a proper lint tool. \nThe questions that needs asking are:\n1. Is that line of code actually too long? \n2. If not, is it happening a ton of times? \n3. If it does, maybe a .swiftlint.yml specific to the test target would work.\nRemoving it altogether seems wrong to me.. I don't mind removing this, I just saw a line saying \n\"Moved tests to Moya.xcodeproj.\" so wasn't sure if you usually include this sort of stuff there.\nShould I move it to the bottom of breaking or get rid of it completely ? . Sounds good to me ! \ud83d\udc4d . It was never there AFAIK. I think we need to import Foundation regardless of OS here.. Also didn't know the tests run on Xcode 9 / iOS 11 :) Haven't tried this locally. Will do a quick test and push a fix for this.. LOL, perfect error. . UIKit isn't imported where that code lived before. So this makes no sense \ud83e\udd14 . OK, Could reproduce this locally so should be green now \ud83e\udd1e \nUIKit wasn't imported in the other file, but RxCocoa was which sort of takes care of that ;) . Yeah that sort of is implicated in the \"CG\" prefix :) . By the way this is an even more interesting thing to know: \nhttps://developer.apple.com/documentation/coregraphics/cgfloat/nativetype. I actually had fatalError there and changed it to fail \"on the last minute\". I actually think both are fine but i'll change :). Fair enough ;) . > How do we approach this problem? It depends if the parameters should be part of the body (e.g. POST, PUT), or part of the query string (e.g. GET)\nYou could change to part of the URL, but query string is actually the more correct term IMO. Should be set up , and perhaps would be nicer to just do \n\nLet's say we have a MyService service conforming to TargetType:. I would change to something like\nWhen we want to perform a multipart request with a request body, we have to override the task property,  create a MultiPartFormatData for each of our parts and them return a .uploadMultiPart task with the appended parts. . nit: \nperform a multipart\nparameters in the request body\nthem => then. Minor nit - I would use a guard here and return early. Mind breaking this up to logical portions with some newlines? (before the switch, before and after the notifyPlugins, etc) \n\nIt's a bit hard to chew down this way. You should be able to do do .asyncAfter(deadline: .now() + delay) { IIRC. This would read better as \nswift\nguard !token.isCancelled else { \n    self.cancelCompletion(completion, target: target)\n    return\n}\nIMO. If it's commented out, just remove it :) . Really great ideas here ! Super nice work @SD10 .. Adding a TODO is always good :) But if your PR is WIP and you remember to fix this later than its fine :) . Good catch !. It might not be necessary :) I didn't dig into it, it was just there in the v1 so I moved it as is. \nDon't mind making a separate PR to get rid of it if that's needed ! . I would flip the order of this entire file TBH. \nResponse, AccessTokenPlugin, and only then 3rd party extensions. nit: I think the line break here is unintentional. Aside from this LGTM.. ",
    "kokhong20": "I think using the same function with default parameter is better. If introduce another function like \nrequestWithQueue is quite weird and might have duplicate code too.\nI have added the test case but only able to test whether callback is at main thread as dispatch_get_current_queue is deprecated. should be good enough.\n. Ok. I have make another function.\n. Ya, that is a better approach! \ud83d\udc4d\n. ",
    "nuudles": "What do you think about also performing the stubRequest in the specified queue? Getting it off of the main thread would be helpful for me for some of my requests, which include dynamically generating thumbnails of images.\n. ",
    "sybarite": "@ashfurrow It would be great to have this feature in a non breaking way in the current release @kokhong20 has worked a good enough backwards compatible solution.\n@kokhong20 Can you please resolve merge issues to get this PR merged in the current release? @ashfurrow If he does not respond should I open up another PR with a backwards compatible implementation and can we start the process of merging it to the main repo?\n. ",
    "mlvhub": "Hello, I'm actually having this exact same issue, I even get it by copying and pasting @rmuhamedgaliev's code snippet.\nHow did you actually solve it?\nI'm using Carthage to manage my dependencies. I've also used Cocoapods before, and this didn't happen.\nHere is my Cartfile:\ngithub \"ReactiveX/RxSwift\" ~> 2.0\ngithub \"Moya/Moya\"\ngithub \"sunshinejr/Moya-ModelMapper\"\n. Thanks for your reply, yeah, it usually says what's missing for it to conform to the protocol, but in this case there is no arrow.\nThis is a wild guess, but I think there may be something wrong with the generated frameworks, I've seen something like this before, and it usually means that the 'TargetType' from the RxMoya framework, is different from the 'TargetType' in the Moya framework. \nI guess I'll make a fork and start looking around into the project's configuration.\nIf I don't have any luck (I'm new to Carthage), I'll guess I'll continue using Cocoapods for now.\nThanks!\n. Yeah, I think that's the reason, by command-clicking the TargetType in the endpoint, I can see it under the Moya framework, but in the ViewController, the TargetType is inside RxMoya.\nThe endpoint now looks like:\n``` swift\nimport Foundation\nimport RxMoya\nenum Auth {\n    case Login(email: String, password: String)\n    case Logout()\n}\nextension Auth: RxMoya.TargetType {\nvar baseURL: NSURL { return NSURL(string: \"http://localhost/api\")! }\n\nvar path: String {\n    switch self {\n    case .Login(_, _):\n        return \"/users\"\n    case .Logout(_):\n        return \"/users\"\n    }\n}\n\nvar method: RxMoya.Method {\n    switch self {\n    case .Login(_, _):\n        return .POST\n    case .Logout(_):\n        return .DELETE\n    }\n}\n\nvar parameters: [String: AnyObject]? {\n    switch self {\n    case .Login(let email, let password):\n        return [\"email\": email, \"password\": password]\n    case .Logout(_):\n        return nil\n    }\n}\n\nvar sampleData: NSData {\n    switch self {\n    case .Login(_, _):\n        return \"\".dataUsingEncoding(NSUTF8StringEncoding)!\n    case .Logout(_):\n        return \"\".dataUsingEncoding(NSUTF8StringEncoding)!\n    }\n}\n\n}\nprivate extension String {\n    var URLEscapedString: String {\n        return self.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLHostAllowedCharacterSet())!\n    }\n}\n```\n. The issue is all the source files are included in both Moya and RxMoya targets, usually, you'd only include RxSwift specific files inside the RxMoya target, and then you specify Moya as a RxMoya dependency.\nThis way you'd import both frameworks, but as it is right now, you should only use RxMoya, and you must not include Moya otherwise you'll get that error. I'm okay with the way it is right now, but it should be worth mentioning that with Carthage you should only use one. \nI'm surprised as well that this hasn't turn up before. I usually look for the project's documentation at first, so it might be helpful to add this into some sort of notes regarding to Carthage usage, I also look into the project's issues, open and close, and then SO.\n. Yeah, there are some changes, I already tried to do it in a fork, but got some weird errors when using it in another project through Carthage.\nYou don't really need another repo, you can just remove the source files from the RxMoya target, add the Moya target as a dependency inside RxMoya, and then you just import Moya whenever needed.\nThis was working for me inside the Moya project, it was building correctly, but as I mentioned above, I couldn't use it succesfully, and I'm not sure how these changes will affect the Cocoapods setup.\n. I see, nice. Sure, let me know when it's up and I'll give it a try.\n. feel free to close for now, I'll reopen if I get it again.\n. ",
    "morgz": "I currently check oauth credentials in the requestClosure and would appreciate the ability to bubble out an error back out.\n. I currently check oauth credentials in the requestClosure and would appreciate the ability to bubble out an error back out.\n. I've also ran into this issue. I've done a auth check in a requestClosure and found myself wanting to throw my own ErrorType. One way around this is to check for conditions that might throw errors beforehand by wrapping the request like is shown here\nAlthough, if you need to add a header to the http request then you can't do everything by wrapping the Request, and still have to alter the headers in the requestClosure, which may have errors which you'll want to bubble down...\n. I've also ran into this issue. I've done a auth check in a requestClosure and found myself wanting to throw my own ErrorType. One way around this is to check for conditions that might throw errors beforehand by wrapping the request like is shown here\nAlthough, if you need to add a header to the http request then you can't do everything by wrapping the Request, and still have to alter the headers in the requestClosure, which may have errors which you'll want to bubble down...\n. Just a follow up. I've found an OK workaround for this:\nIn my request closure I am putting my own ErrorType into the underlyingError like so:\nswift\nlet error = Moya.Error.Underlying(ErrorController.LocalError.NoCurrentUser as NSError)\ndone(Result.Failure(error))\nThen by wrapping the request I am checking for the existence of the ErrorType, casting it, and throwing it. \n``` swift\nfunc authenticatedRequest(token:AuthenticatedRemoteService) -> Observable {\n    return Observable.create {[unowned self] observer in\n\n        self.authenticatedRemoteService\n            .request(token)\n            .filterSuccessfulStatusCodes()\n            .subscribe(\n                onNext:{ response in\n                    observer.onNext(response)\n                },\n                onError: { error in\n\n                    // If the underlying error is one of our own types. Then throw it as an Error Type.\n                    if case Moya.Error.Underlying(let error) = error {\n                        if (error as ErrorType) is ErrorController.LocalError {\n                            observer.onError(error)\n                            return\n                        }\n                    }\n\n                    observer.onError(error)\n                }, onCompleted: {\n                    observer.onCompleted()\n                }, onDisposed: nil)\n            .addDisposableTo(self.disposeBag)\n\n        return NopDisposable.instance\n    }\n}\n\n```\nNot ideal but it seems to work.\n. Just a follow up. I've found an OK workaround for this:\nIn my request closure I am putting my own ErrorType into the underlyingError like so:\nswift\nlet error = Moya.Error.Underlying(ErrorController.LocalError.NoCurrentUser as NSError)\ndone(Result.Failure(error))\nThen by wrapping the request I am checking for the existence of the ErrorType, casting it, and throwing it. \n``` swift\nfunc authenticatedRequest(token:AuthenticatedRemoteService) -> Observable {\n    return Observable.create {[unowned self] observer in\n\n        self.authenticatedRemoteService\n            .request(token)\n            .filterSuccessfulStatusCodes()\n            .subscribe(\n                onNext:{ response in\n                    observer.onNext(response)\n                },\n                onError: { error in\n\n                    // If the underlying error is one of our own types. Then throw it as an Error Type.\n                    if case Moya.Error.Underlying(let error) = error {\n                        if (error as ErrorType) is ErrorController.LocalError {\n                            observer.onError(error)\n                            return\n                        }\n                    }\n\n                    observer.onError(error)\n                }, onCompleted: {\n                    observer.onCompleted()\n                }, onDisposed: nil)\n            .addDisposableTo(self.disposeBag)\n\n        return NopDisposable.instance\n    }\n}\n\n```\nNot ideal but it seems to work.\n. ",
    "jimmy0251": "@esttorhe Actually I want to send JSON Array. I guess I have to go with .Custom parameter encoding. \n. Here's my solution for sending JSON array to server. Suggestions are welcome as I'm new to Moya.\nDefine JsonArrayEncoding closure:\n``` swift\nlet JsonArrayEncodingClosure: (URLRequestConvertible, [String:AnyObject]?) -> (NSMutableURLRequest, NSError?) = { request, data in\n    var req = request.URLRequest as NSMutableURLRequest\ndo {\n    let json = try NSJSONSerialization.dataWithJSONObject(data![\"jsonArray\"]!, options: NSJSONWritingOptions.PrettyPrinted)\n    req.setValue(\"application/json; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n    req.HTTPBody = json\n} catch {\n    return (req, nil)\n}\nreturn (req, nil)\n\n}\n```\nConfigure target :\n``` swift\n  var parameters: [String:AnyObject]? {\n        switch self {\n        case .SomeAPI:\n            return [\"jsonArray\": [\"Yes\", \"What\", \"Abc\"]]\n        default:\n            return nil\n        }\n    }\nvar parameterEncoding: Moya.ParameterEncoding {\n    switch self {\n    case .SomeAPI:\n        return ParameterEncoding.Custom(JsonArrayEncodingClosure)\n    default:\n        return ParameterEncoding.JSON\n    }\n}\n\n```\n. Thanks a lot @ealeksandrov and @ashfurrow for adding it to examples. I think we should close the issue now.\n. Charles works fine for me with Moya without any additional configuration. Please make sure you've not excluded domain from logging.\n. ",
    "vytis": "Encountered the same problem and had maybe an obvious question - where should I put var parameterEncoding: Moya.ParameterEncoding ? It is not part of the TargetType protocol, so adding it to my endpoints struct does nothing.\nUntil now, I was making my own Endpoint in endpointClosure, but it seems a bit too complicated to simply have different parameter encoding.\n. I thought I was missing something, thanks for clarification!\n. ",
    "tdouglas1313": "Has anyone figured out how to do this with swift 3.0?\n. ParameterEncoding is no longer an enum its a protocol. would you still like me to open an issue? \n. Thanks I did't see that.\n. Here is an UNTESTED example that at least compiles.\n``` swift\nextention MyService: TargetType {\n...\n  var parameters: [String:AnyObject]? {\n        switch self {\n        case .SomeAPI:\n            return [\"jsonArray\": [\"Yes\", \"What\", \"Abc\"]]\n        default:\n            return nil\n        }\n    }\nvar parameterEncoding: Moya.ParameterEncoding {\n        switch self {\n        case .patient_Notifications_Create_Endpoint:\n            return JsonArrayEncoding.default\n        default:\n            return JSONEncoding.default\n        }\n    }\n...\n}\nstruct JsonArrayEncoding: Moya.ParameterEncoding {\n    public static var `default`: JsonArrayEncoding { return JsonArrayEncoding() }\n\n\n    /// Creates a URL request by encoding parameters and applying them onto an existing request.\n    ///\n    /// - parameter urlRequest: The request to have parameters applied.\n    /// - parameter parameters: The parameters to apply.\n    ///\n    /// - throws: An `AFError.parameterEncodingFailed` error if encoding fails.\n    ///\n    /// - returns: The encoded request.\n    public func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n        var req = try urlRequest.asURLRequest()\n        let json = try JSONSerialization.data(withJSONObject: parameters![\"jsonArray\"]!, options: JSONSerialization.WritingOptions.prettyPrinted)\n        req.setValue(\"application/json; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n        req.httpBody = json\n        return req\n    }\n\n}\n\n```\n. Thank you for referring me to that. It may be beneficial to add /3.0 to the end of the title because there is discussion about more than just 2.3.\n. ",
    "nguyentrai2011": "In my case, it work with below code:\nswift\npublic var parameterEncoding: ParameterEncoding {\n    switch self {\n    case .submitForm:\n        return PropertyListEncoding.default\n    default:\n        return URLEncoding.default\n    }\n}\nupdate: \nLater, my way isn't worked, i think bcz have some change in server. So now the way of @tdouglas1313 worked for me.. @BasThomas thanks, i got it\nIn my case, i call request_1, but this not response, i continue call request_2, so i want canceled request_1 (mean only 1 request available at the same time). Do we have any property or method to do that?. @bestwnh i think this way not make sense in search function. Before i call request_2, i check is there any request at this time, if have, i'll canceled all.. @bestwnh i got it, thanks. I ask to make sure did Moya support or not this feature because i see we have Manager(type: Alamofire.SessionManager) in MoyaProvider.. i think the way of @bestwnh is good & easy for me now thanks all. ",
    "masthanl": "Hai ,My Json dict is as follows\nAfter decoding of Json, How to get this details in a single tableview ,any one help me \nHow can i create json module also\nthanks!\n[{\"StudentID\":2451,\"ClassID\":49,\"SectionID\":404,\"Total\":75.0,\"Percentage\":62.5,\"Result\":\"PASS\",\"RankGrade\":\"D\",\"subjectmarks\":[{\"SubjectID\":158,\"SubjectCode\":\"TAM\",\"SubjectName\":\"TAMIL\",\"Mark\":4.5},{\"SubjectID\":159,\"SubjectCode\":\"ENG\",\"SubjectName\":\"ENGLISH\",\"Mark\":8.5},{\"SubjectID\":160,\"SubjectCode\":\"HIN\",\"SubjectName\":\"HINDI\",\"Mark\":15.0},{\"SubjectID\":161,\"SubjectCode\":\"MAT\",\"SubjectName\":\"MATHS\",\"Mark\":12.5},{\"SubjectID\":165,\"SubjectCode\":\"SCE\",\"SubjectName\":\"SCEINCE\",\"Mark\":17.0},{\"SubjectID\":166,\"SubjectCode\":\"SOC\",\"SubjectName\":\"SOCIAL SCIENCE\",\"Mark\":17.5}],... }]. ",
    "SeRG1k17": "@masthanl Is this a question for the Moya library?. @yar1vn Check AccessTokenPlugin. @sunshinejr Thanks for the answer, but I think it's a little different from what I'd like. That is, you propose to manually process all pictures (manually cache them).\nThe version with the mapping is convenient, but it's just an asynchronous download.\nIt seems this is the simplest option:\nswift\nAlamofire.request(url).responseImage { response in //...\n//Set imageView.image = responseImage. @sunshinejr Thanks for the answer, but I think it's a little different from what I'd like. That is, you propose to manually process all pictures (manually cache them).\nThe version with the mapping is convenient, but it's just an asynchronous download.\nIt seems this is the simplest option:\nswift\nAlamofire.request(url).responseImage { response in //...\n//Set imageView.image = responseImage. @sunshinejr  Why tokenClosure, not tokenClosure: (TargetType) -> String\nI have two 2+ accessTokens for different endPoints and 3 types:\nbasic, bearer and custom - \"token\"\nI think AccessTokenPlugin good only for static accessToken.\n```swift\npublic enum CustomAthorizationType {\ncase none\ncase basic// = \"Basic\"\ncase bearer// = \"Bearer\"\ncase custom(String)\n\nvar value: String {\n    switch self {\n    case .none: return \"\"\n    case .basic, .bearer: return String(describing: self).capitalized\n    case .custom(let custom): return custom\n    }\n}\n\n}\n```\n```swift\n    static var plugins: [PluginType] {\n        return [\n            CustomAccessTokenPlugin(tokenClosure: { target -> String in\n                switch target {\n                case Target.request(let data):\n                    guard\n                        let bytes = try? HMAC(key: encryptingKey, variant: .sha1).authenticate(data.bytes),\n                        let encrypted = bytes.toBase64() else { return \"\" }\n                return encrypted\n\n            case Target.login:\n                guard let loginData = String(format: \"%@:%@\", appClientUsername, appClientPassword).data(using: .utf8)\n                    else { return \"\" }\n\n                return loginData.base64EncodedString()\n            default: return \"\"\n            }\n        }),\n        NetworkLoggerPlugin(verbose: true, cURL: true)]\n}\n\n``\nIs the encapsulation broken in this way?\nI can try to extend the plugin and make a pull request.. @sunshinejr @SD10  I do not really want to create two separate providers. Without this, there will be a violation of code cleanliness?\nAlso i have two different baseURL, and its my solution:\n//EndPoints.swift\n```swift\n    enum BaseURL {\n        case azure(EndPoints)\n        case cloudapp(EndPoints)\n    static func type(for endpoint: EndPoints) -> BaseURL {\n        switch endpoint {\n        case .request: return .cloudapp(endpoint)\n        case .login: return .azure(endpoint)\n        }\n    }\n\n    var url: URL {\n\n        var url: String!\n        switch self {\n        case .azure: url = \"https://\"\n        case .cloudapp: url = \"http://t\"\n        }\n\n        return URL(string: url)!\n    }\n}\n\npublic var urlType: BaseURL { return BaseURL.type(for: self) }\npublic var baseURL: URL { return urlType.url }\n\n//...\n``\nIts possible create this as generic.\nI think we can make this plugin more convenient, so that the headers are not static.\n. @SD10 \nI think that most of the decoder settings are related to specifying the date format for the date. Of course, we can create an object before this, set the property and pass the object to the function, but it's so much simpler and shorter:\nswift\n//it`s ((JSONDecoder) -> ())? = nil\ntry filteredResponse.map(Class.self, using: { $0.dateDecodingStrategy = .formatted(customFormatter) })\n. I am new to the topic of creating and contribute in the side of the library(frameworks). This project contains a lot of dependencies on other frameworks(Alamofire, Result, etc.) , what do I need to do to correctly compile and test Moya?. @SD10 My pull request contains a lot less changes then #1521. And it can be the subpart of that request. \nAlthough, having looked at it, I had some doubts. @sunshinejr @SD10 Also I see two completely different approaches to improvement:\n1) Add token property to protocol.\n```swift\npublic protocol AccessTokenAuthorizable {\n/// Represents the authorization header to use for requests.\nvar authorizationType: AuthorizationType { get }\nvar token: String? { get }\n\n}\nThen, remove init from plugin and get token in prepare(_:target:) like as:swift\nlet token = authorizable.token\n2) Rework init closure as:swift\n    public init(tokenClosure: @escaping (TargetType) -> String) {\n        self.tokenClosure = tokenClosure\n    }\nThen get token in  prepare(_:target:) like as:swift\nlet token = tokenClosure(target)\n**OR**\nRework plugin protocol, add associatedtype:swift\npublic protocol PluginType {\nassociatedtype Target: TargetType\n\n/// Called to modify a request before sending.\nfunc prepare(_ request: URLRequest, target: Target) -> URLRequest\n\n//...\npublic struct AccessTokenPlugin: PluginType {//...}\n}\n``\nThis will not receive in closure a protocol object, but a specific type.\nHowever, this change will require updating the code of all the plug-ins.. @SD10 I will try to do everything necessary today. @SD10 I think it's ready. Sorry for the delay, very busy now.. @SD10 I merged it. Its correct?. @SD10 I need make rebase from Moya/development to my/development. Right?\nAnd add all my changes again?\n. @ashfurrow Thanks a lot. I will try to help develop this project. A few new ideas are already on the way :). @SD10 I created a test project, but everything works correctly there. Can there be a problem in a specific request?. @SD10 \nTypical creation of own manager is described in #743 \nIf dont use manager.startRequestsImmediately = false\nThis causes the problems described above. We increment the counter twice.\nI think, it is a bug. @SD10 I think, now I know how reproduce it in example project:). @larsschwegmann Just incorrect number of request and responses. @SD10, @ashfurrow @sunshinejr Off-topic. I found another improvement. For example: we need a different timout for each request. Sure we need our manager. However, a typical timer change is described in #743. And in the last comment the author put forward a hypothesis. On adding one more case to the enumeration.\nI believe we should reconsider some of the typical concepts that most developers face. After all, using closures is not always elegant.. @ashfurrow @SD10 @sunshinejr  I need case for Encodable body and parameters as queryString.\nBecause \"api/endpoint?username=(name)\" in path property not working due to encoding. And even if it worked, the solution is very bad, i think.\nswift\n    case requestJSONEncodable(Encodable)\n    case requestParameters(parameters: [String: Any], encoding: ParameterEncoding)\n    case requestCompositeData(bodyData: Data, urlParameters: [String: Any])\n    case requestCompositeParameters(bodyParameters: [String: Any], bodyEncoding: ParameterEncoding, urlParameters: [String: Any])\nNone of them allow us to use Encodable + [String: Any] as url parameters. Sure i can use:\nswift\n    public var task: Task {\n        switch self {\n        case let .setGlucoseThresholds(_, glucoseThresholds):\n            let encoded = try! JSONEncoder().encode(glucoseThresholds)\n            return .requestCompositeData(bodyData: encoded, urlParameters: parameters)\n        }\n    }\nBut I do not think this is a good decision. Because, this is not the place where we need to encode Encodable to data.\nUpdate my proposal case:\nswift\ncase requestJSONEncodable(Encodable, urlParameters: [String: Any]). @SD10 I want to not replace, but add a case. An example made me do a forced unwrapping data of meaning. Moreover, it is not possible to handler an error here.. @sunshinejr See above, friend \ud83d\ude03 . @sunshinejr Oh sorry. I did not notice. Yes, in fact, this is the same thing that you wrote above.. @SD10 I can do that. But this seems like a \"crutch\".\n```swift\n    public var baseURL: URL {\n    var url = \"https://example.com\"\n\n    switch self {\n    case .custom(let value): url += \"?value=value\"\n    default: break\n    }\n    return URL(string: url)!\n}\n\n```\n. @sunnyleeyun You can\u2019t use dynamic formatting in path variable.. @sunnyleeyun Sure you can use dynamic formatting, but it incorrect encoding for task. @kaleemozitech  Please take a look at my answer #1629\nThis is what you need? If yes, I think it can be closed.\nAlso, you can create the model implement Encodable protocol. Then,  you can use .requestJSONEncodable(Encodable) case in Task. Don\u2019t forgot handle do/catch here. And statuscode filtering before mapping. @wongzigii \nYou can use another case:\n```swift\ntypealias Parameters = [String: Any]\n//...\n    public var task: Task {\n        switch self {\n        case .login: return .requestParameters(parameters: parameters, encoding: URLEncoding.default)\n        }\n    }\n//Manually created property\nvar parameters: Parameters {\n    switch self {\n    case let .login(username: name, password: pass): return [\"username\": name, \"password\": pass]\n    default: return [:]\n}\n\n//...\n}\n```\nCould you please explain the duplicates in more detail?. ",
    "bitomule": "But parameters is for POST parameters no? I need optional GET parameters.\n. You're right. I'm going to try that way. Thanks!\n. @kevin5396 I'm finally using another method for those api calls\n. Those methods also do image and files uploading so I just ended using pure alamofire\n. @aschuch nop, it's not fixed. Moya needs to handle 204 no-content responses\n. Ok, I've managed to handle empty responses. It was my fault, I was filtering status codes but no content comes with a 204 that was reported as error. Changed filter and now works.\n. ",
    "vfunc": "I have same question \uff0c are you fix up\uff1f\n. i'm wrong.  if moya  Response: Received empty network. You can check your network,then check ParameterEncoding. \n. ",
    "kevinkwl": "Same here :(\n. @bitomule Did you use ~.mapJson()~ or something like that?\nAfter I removed it and manually convert it to json in the handler(process error response), it worked.\n. Same problem with my App.\nTurns out that if the response is empty, .mapJson() will cause this error.\n. @ashfurrow Maybe a silence option to prevent the error from throwing out but rather just return a nil ?\n. ",
    "spxrogers": ":tada: :smile: \n. awesome! sounds good, thanks for the invite @ashfurrow :grin: \n. a PR would be awesome @mattfxyz :) \n. yep! @orta \n. right, i found it too which why i thought it quite funky. \ni'll inspect the --no-clean output as well as clean the pod cache. \n. @petester42 yep, i am.\nso: https://github.com/Alamofire/Alamofire/blob/master/Source/Request.swift#L577-L600 \n... line 577 in AF only compiles StreamRequest if the os is not watch, explaining why the lint fails when compiling the watchOS platform :| \ni guess this begs the question on how Moya isn't encountering this as well since it similarly supports watchOS\n. @ashfurrow funny. AF didn't introduce this type until version 4 and i had no issues updating to support Moya 7, so likely not broken for so long :) \ni'll get a PR working and make sure nothing breaks, hopefully not!\n. AF did \ud83d\ude43 \nhttps://github.com/Alamofire/Alamofire/blob/e8bca7e40a861327366c5ccba42a688d17ec482a/Source/ParameterEncoding.swift#L30-L40 \n. completely agree with you on that. \ud83d\udc4d \n. ",
    "samirGuerdah": "Very strange. I am using Moya in a sample way ( Just a target with an endpoint to add additional headers). I Will look what i am doing wrong and give you feedback very soon. Thanks\n. Hello,\nSorry for the retarded response. Finally it was a misuse in my side. No problem to use Moya with Charles proxy. Closing...\n. Where are you declaring the let BetFairProvider = ... ? Can you show the code of the BetFairService ? \nPS: I think that this question is not related to a Moya issue. You can ask those questions in http://stackoverflow.com/ for example.\n. I don't think that it's Moya witch causes this. Moya is a network abstraction layer that encapsulates calling Alamofire directly, if your request works with Alamofire, it should work work with Moya.\nDid you try the same request with an Http client ? ( postman, Paw, ...) \n. @rcholic Can you please compare the request details between an Http client and using Moya ( by using Charles proxy for example) ? I think that your code is the correct way to send a multipart data (Perhaps Moya or Alamofire are not setting correctly the content types). \n. your problem can be related to the issue #580\n. ",
    "VivienGiraud": "Yeah that would be awesome to have request printed such as:\ncurl -X GET blablabla\n. Hi,\nThanks for you help.\nSeams that case Albums(ids: [String]) doesn't works.\n\n. @colinta Yeah but I will not be able anymore to pass Array, right?\n. @colinta But the array is passed through the path\n. Hi, Sorry for the delay, I came back to this issue but I switch to Swift 3.\nSo now I'm stuck with a Cannot call value of non-function type '((String) -> String)!' On .componentsJoined(\",\")\nAny idea?\n:/ \n. Ok, I found it, it's:\n(embedded as AnyObject).componentsJoined(by: \",\")\nLet me check that it works correctly and I come back here.\n. It seems to work :)\nThanks guys!\n@aehlke Yeah I have the %2C  even adding removingPercentEncoding to (embedded as AnyObject).componentsJoined(by: \",\") does not works :/\n. Yeah, that's what I did :)\nThanks!\n. Not sure to understand what you mean :/\nCan you explain it with code please?\n. Sorry but we had to delay the use of Moya to one sprint in September due to bugs in our app.\nBe sure that I will update this one once checked ! ;)\n. Hi,\nWe had couple of troubles with our app (nothing related to Moya).\nWe had to put aside our project so I can't update it unfortunately :/. Any update ?. ",
    "vishal91": "@sunshinejr \n``` swift\nextension RunnrService: TargetType {\npublic var baseURL: NSURL { return NSURL(string: \"https://api.myservice.com\") }\npublic var path: String {\n    switch self {\n    case .CustomerSignup://\n        return \"auth/customer_signup\"\n    case .SignupVerifyOTP://\n        return \"\"\n    case .ExistingCustomer://\n        return \"\"\n    case .SigninOTP://\n        return \"\"\n    case .Signin://\n        return \"\"\n    case .ResendOTP://\n        return \"\"\n    }\n}\n\npublic var method: Moya.Method {\n    switch self {\n    case .CustomerSignup,\n         .SignupVerifyOTP,\n         .ExistingCustomer,\n         .SigninOTP,\n         .Signin:\n        return .POST\n    case .Services,\n         .AppVersion:\n        return .GET\n    }\n}\n\npublic var parameter: [String:AnyObject]? {\n    switch self {\n    case .Something:\n        return nil\n    case .CustomerSignup(let phoneNo, let referelCode):\n        return [\"phoneNo\":phoneNo,\"referelCode\":referelCode]\n    default:\n        return nil\n    }\n}\n\npublic var sampleData: NSData {\n        return \"Half measures are as bad as nothing at all.\".dataUsingEncoding(NSUTF8StringEncoding)!\n}\n\npublic func url(route: TargetType) -> String {\n    return route.baseURL.URLByAppendingPathComponent(route.path).absoluteString\n}\n\n}\n```\n. @sunshinejr : ok ..Thanks .. Will wait for reply\n. @sunshinejr Basically i have removed some cases .. Don't wanna show . But i have encountered all the cases . Don't know where the problem is coming. And how we have secure tokens and refresh token .Moya does that ? How to pass header to endpoint. If this bug gets resolved \n. Added default to all the 'switch' . Same error.\n'    public var baseURL: NSURL { return NSURL(string: \"https://api.myservice.com\")! }' its optional , is it ok\n. @colinta : Thanks a lot @sunshinejr Issue solved parameter_s_ s was missing :(\n. @sunshinejr : Its weird. It works fine if i don't add Firebase/Core and Firebase/Messaging pods to the project. . @sunshinejr Thanks a lot. . is encoded as : %3ForderBy=priority+asc%3F%7B%5Cwhere%5C:%7B%5CisApproved%5C:true,%5CcategoryId%5C:2%7D%7D . ",
    "asasdasasd": "@ashfurrow \nwhat does the example mean \"// Take 1 to make sure we only invoke the API once.\"\nis it mean after online = true then only one API will be invoked or  after offline time all the ignored API will be invoke?. @ashfurrow  thanks a lot , my previously thought is totally wrong. such a small detail contains so much information.\nreally admire you\n. @mrachid  have you solve the issue at last? . @rlam3  retrywhen operator can handle this  . @rlam3 \nI dont know what's your scenario, so I will say my first:\nI don't know when access token will be expired, backend judge it ,so when some network request found that  access token is expired, I should request backend to refresh access token. and if other request found access token is expired at the same time, they should wait, and all request should retry when the new access token come back. the refresh token request should be only invoked once.\nhere is my solution : \n```swift\n static func request(target: API) -> Observable {\n        return self.provider.request(target).retry(1)\n            .observeOn(ConcurrentDispatchQueueScheduler.init(qos: .default))\n            .flatMap { (response) -> Observable in\n            if (the access token expired) {\n                throw TokenError.TokenExpired\n            } else{\n                return Observable.just(response)\n            }\n\n        }.retryWhen({ (error: Observable<TokenError>)  in\n            error.flatMap{ error -> Observable<()> in\n                switch error {\n                case .TokenExpired:\n\n                    return RefreshTokenObservable.shareReplay(1).flatMap({ (result) -> Observable<()> in\n                        switch result {\n\n                        case .RefreshSuccess:\n                            return Observable.just(\"\").asObservable().map{_ in return () }\n\n                        case .RefreshFailure:\n                            DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {\n                                // here is logout \n                            })\n                            throw error\n                        }\n\n                    })\n                }\n            }\n        })\n\n```\n I don't know if this is all right for you, but works for me. and I know this is not the  elegant code, anyone can review? \n@pietbrauer @sunshinejr @ashfurrow \ud83d\ude4f . thanks for your response \nactually I have a scenary that I have an accesstoken and I don't know when it expired, backend will tell me that, and at that time I should refresh accesstoken and retry the request\nnow I know how to handle each response , \n  like this  https://github.com/artsy/eidolon/blob/1c746f9a9c6420cda9f691468783fee67376e8b1/Kiosk/App/Networking/Networking.swift#L22-L31\nbut how to retry the request \nhere is my code \n```Swift\nstatic func request(target: API) -> Observable {\n        let actualRequest = provider.request(target)\n        return self.provider.request(target).flatMapLatest { (response) -> Observable in\n            let responseModel = ResponseModel(data:response.data)\n        if responseModel.code == -405 {\n            let refreshToken = User.shared?.refreshToken\n            self.provider.request(.refreshToken(refresh: refreshToken!)).flatMap({ response -> Observable<String> in\n               return Observable.just(\"\")\n\n            }).shareReplay(1).subscribe(onNext: { refreshToken in\n              // here I get a new token, how to retry the actualRequest , or how to start a new network request with the target \n            }, onError: { (error) in\n\n            },onCompleted: { _ in\n\n            })\n\n        }\n\n            return Observable.just(response)\n    }\n}\n\n```.  @sunshinejr  any examples or Demoes?. @sunshinejr  retryWhen is only called when an error occurs, but I just want to retry when the responseModel.code == -405.. @SD10 \nI use swift 3.0, can I use the latest version?. @SD10  upgrade failed, thanks for your docs \n. ",
    "Paldom": "Thanks @ashfurrow! I missed the ErrorType in .Underlying. \n. I can make a pull request about this, only I'm not comfortable with casting error to NSError in Response.swift which should be done:\n/// Maps data received from the signal into a JSON object.\n    func mapJSON() throws -> AnyObject {\n        do {\n            return try NSJSONSerialization.JSONObjectWithData(data, options: .AllowFragments)\n        } catch {\n            throw Error.Underlying(error as NSError)\n        }\n    }\nAs I see it won't be a problem, are you ok with that?\n. In fact it needs casting when .Underlying have NSError. Bit confusing, but found an explanation here:\n\nFirst of all, everything is surrounded in a do/catch block since JSONObjectWithData:options: may throw an error. If you\u2019re familiar with Objective-C, you\u2019ll notice that we don\u2019t pass in an NSError pointer here \u2013 instead, JSONObjectWithData is marked with throws, meaning it may throw an error. The error that we catch (which is called error by default) replaces the NSError pointer from Objective-C.\n. Sure, I've added the following:\nChanges Moya.Error.Underlying to have NSError instead of ErrorType.\n. It's a pleasure :)\n. \n",
    "nhnam": "Awesome !\n. ",
    "leonereveel": "Thank you @ashfurrow! I'm closing this PR and will submit a new one based on master branch. I need to make these changes on 6.4.0 tag because I'm using this in production \u00af(\u30c4)/\u00af.\nI'm happy that you liked the code, I tried most not change your current codebase to not affect other functions. I'll be happy to contribute more because I'm using this library a lot and need some features that it's not covered yet like: progress on all calls (download and upload) and caching support.\nI'm looking forward the screenhero pair!\n. Thank you @ashfurrow! I'm closing this PR and will submit a new one based on master branch. I need to make these changes on 6.4.0 tag because I'm using this in production \u00af(\u30c4)/\u00af.\nI'm happy that you liked the code, I tried most not change your current codebase to not affect other functions. I'll be happy to contribute more because I'm using this library a lot and need some features that it's not covered yet like: progress on all calls (download and upload) and caching support.\nI'm looking forward the screenhero pair!\n. Hey @ashfurrow! I improved the API a little bit. I created a ProgressResponse and added some filter methods to get the response and the result. I created a new method called requestWithProgress to not collide with actual request method. After all this work I thought: What do not make some more changes and add progress to all HTTP calls? What do you think?\n. Hey @ashfurrow! I improved the API a little bit. I created a ProgressResponse and added some filter methods to get the response and the result. I created a new method called requestWithProgress to not collide with actual request method. After all this work I thought: What do not make some more changes and add progress to all HTTP calls? What do you think?\n. Cool guys! Let me know if you need any contribution. @hirad The way you did works very well and make things more simple. I'll try it out here.\n. Cool guys! Let me know if you need any contribution. @hirad The way you did works very well and make things more simple. I'll try it out here.\n. @AndrewSB I need to do some tests, which I will have time next week. Community review and merge.\n. @AndrewSB I need to do some tests, which I will have time next week. Community review and merge.\n. I merged from master and improved the code a little bit. Can anyone help me to test it? @colinta?\n. I merged from master and improved the code a little bit. Can anyone help me to test it? @colinta?\n. Thank you for your contribution @colinta. I have only two questions for you. I'm a little concerned about this code here:\n``` swift\ninternal struct CancellableWrapper: Cancellable {\n    internal var innerCancellable: CancellableToken? = nil\nprivate var isCancelled = false\n\ninternal func cancel() {\n    innerCancellable?.cancel()\n}\n\n}\n```\nI check if this cancellable was canceled before starts uploading (line 421). \n1) As far as I know, all struct values are passed by value (https://developer.apple.com/swift/blog/?id=10). Event if I get this value and changed it, my closure won't \"see\" the change.\n2) I didn't see in any place that cancel() method will change the variable isCancelled to true.\nBTW, I already merged your PR. =)\n. Thank you for your contribution @colinta. I have only two questions for you. I'm a little concerned about this code here:\n``` swift\ninternal struct CancellableWrapper: Cancellable {\n    internal var innerCancellable: CancellableToken? = nil\nprivate var isCancelled = false\n\ninternal func cancel() {\n    innerCancellable?.cancel()\n}\n\n}\n```\nI check if this cancellable was canceled before starts uploading (line 421). \n1) As far as I know, all struct values are passed by value (https://developer.apple.com/swift/blog/?id=10). Event if I get this value and changed it, my closure won't \"see\" the change.\n2) I didn't see in any place that cancel() method will change the variable isCancelled to true.\nBTW, I already merged your PR. =)\n. I need to do that because the request is not returned immediately. Alamofire builds the multi-part on background and returns the request, where I set the innerCancellable, that why it's different.\n. I need to do that because the request is not returned immediately. Alamofire builds the multi-part on background and returns the request, where I set the innerCancellable, that why it's different.\n. If define CancellableWrapper as class, this shouldn't be a problem. The object will be returned as reference and the innerCancellable property will be updated after Alamofire builds the multipart. The cancel method on that class should set isCancelled to true event if innnerCancellable was not set yet.\n. If define CancellableWrapper as class, this shouldn't be a problem. The object will be returned as reference and the innerCancellable property will be updated after Alamofire builds the multipart. The cancel method on that class should set isCancelled to true event if innnerCancellable was not set yet.\n. Good solution @colinta!  \ud83d\udc4d \nI'm looking forward to see everything merge into master branch (upload and this refactoring). I'm glad to see that this discussion solved another possible bug.\n. Good solution @colinta!  \ud83d\udc4d \nI'm looking forward to see everything merge into master branch (upload and this refactoring). I'm glad to see that this discussion solved another possible bug.\n. @ashfurrow @colinta  If you need any help to document this, let me know. I can do that this weekend.\n. @ashfurrow @colinta  If you need any help to document this, let me know. I can do that this weekend.\n. I tried that @ashfurrow and it override user's implementation. One of my commits was only to remove the extension.\n. I tried that @ashfurrow and it override user's implementation. One of my commits was only to remove the extension.\n. Fixed multipart-parameters encoding. I didn't know that this must be encoded differently.\n. Fixed multipart-parameters encoding. I didn't know that this must be encoded differently.\n. Agreed!\n. @hirad I merged your pull request and added the parameter encoding using Alamofire's URL encoding. I don't think we need to support other encoding types on multipart form.\nHey @ashfurrow! @hirad added RxCocoa support. =)\n. ",
    "futantan": "question 1\nrefer to this article Basic\nswift\nenum MyService {\n    case Zen\n    case ShowUser(id: Int)\n    case CreateUser(firstName: String, lastName: String)\n}\nquestion 2\nYou can split it into more providers(TargetType).  But it just works fine in this way.\nDoes this works for you?\n. ",
    "MoyaBot": "\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo Changelog entries made\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nBig PR\n\n\n\nSwiftLint found issues\\n\\n#### Warnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 397 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 398 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 379 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 400 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 247 | Lines should not have trailing whitespace. |\n| Moya.swift | 252 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 259 | Lines should not have trailing whitespace. |\n| Moya.swift | 261 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 275 | Lines should not have trailing whitespace. |\n| Moya.swift | 287 | Lines should not have trailing whitespace. |\n| Moya.swift | 297 | Lines should not have trailing whitespace. |\n| Moya.swift | 299 | Lines should not have trailing whitespace. |\n| Moya.swift | 302 | Lines should not have trailing whitespace. |\n| Moya.swift | 378 | Lines should not have trailing whitespace. |\n| Moya.swift | 382 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 404 | Lines should not have trailing whitespace. |\n| Moya.swift | 410 | Lines should not have trailing whitespace. |\n| Moya.swift | 417 | Lines should not have trailing whitespace. |\n| Moya.swift | 431 | Lines should not have trailing whitespace. |\n| Moya.swift | 433 | Lines should not have trailing whitespace. |\n| Moya.swift | 435 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 445 | Lines should not have trailing whitespace. |\n| Moya.swift | 533 | Lines should not have trailing whitespace. |\n| Moya.swift | 545 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 547 | File should contain 400 lines or less: currently contains 547 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 249 | Prefer checking isEmpty over comparing count to zero. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Well done.\n      \n\n\n\n\n:white_check_mark:\nNo Changelog entries made\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Yay.\n      \n\n\n\n\n:white_check_mark:\nNo Changelog entries made\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Well done.\n      \n\n\n\n\n:white_check_mark:\nNo Changelog entries made\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo Changelog entries made\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Good on 'ya.\n      \n\n\n\n\n:white_check_mark:\nNo Changelog entries made\n\n\n\nSwiftLint found issues\\n\\n#### Warnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 405 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 406 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 387 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 408 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 251 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 260 | Lines should not have trailing whitespace. |\n| Moya.swift | 267 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 277 | Lines should not have trailing whitespace. |\n| Moya.swift | 283 | Lines should not have trailing whitespace. |\n| Moya.swift | 295 | Lines should not have trailing whitespace. |\n| Moya.swift | 305 | Lines should not have trailing whitespace. |\n| Moya.swift | 307 | Lines should not have trailing whitespace. |\n| Moya.swift | 310 | Lines should not have trailing whitespace. |\n| Moya.swift | 386 | Lines should not have trailing whitespace. |\n| Moya.swift | 390 | Lines should not have trailing whitespace. |\n| Moya.swift | 402 | Lines should not have trailing whitespace. |\n| Moya.swift | 412 | Lines should not have trailing whitespace. |\n| Moya.swift | 418 | Lines should not have trailing whitespace. |\n| Moya.swift | 425 | Lines should not have trailing whitespace. |\n| Moya.swift | 439 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 443 | Lines should not have trailing whitespace. |\n| Moya.swift | 449 | Lines should not have trailing whitespace. |\n| Moya.swift | 453 | Lines should not have trailing whitespace. |\n| Moya.swift | 541 | Lines should not have trailing whitespace. |\n| Moya.swift | 553 | Lines should not have trailing whitespace. |\n| Moya.swift | 428 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 555 | File should contain 400 lines or less: currently contains 555 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 405 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 406 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 387 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 408 | Force unwrapping should be avoided. |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 180 | Lines should not have trailing whitespace. |\n| Moya.swift | 251 | Lines should not have trailing whitespace. |\n| Moya.swift | 256 | Lines should not have trailing whitespace. |\n| Moya.swift | 260 | Lines should not have trailing whitespace. |\n| Moya.swift | 267 | Lines should not have trailing whitespace. |\n| Moya.swift | 269 | Lines should not have trailing whitespace. |\n| Moya.swift | 277 | Lines should not have trailing whitespace. |\n| Moya.swift | 283 | Lines should not have trailing whitespace. |\n| Moya.swift | 295 | Lines should not have trailing whitespace. |\n| Moya.swift | 305 | Lines should not have trailing whitespace. |\n| Moya.swift | 307 | Lines should not have trailing whitespace. |\n| Moya.swift | 310 | Lines should not have trailing whitespace. |\n| Moya.swift | 386 | Lines should not have trailing whitespace. |\n| Moya.swift | 390 | Lines should not have trailing whitespace. |\n| Moya.swift | 402 | Lines should not have trailing whitespace. |\n| Moya.swift | 412 | Lines should not have trailing whitespace. |\n| Moya.swift | 418 | Lines should not have trailing whitespace. |\n| Moya.swift | 425 | Lines should not have trailing whitespace. |\n| Moya.swift | 439 | Lines should not have trailing whitespace. |\n| Moya.swift | 441 | Lines should not have trailing whitespace. |\n| Moya.swift | 443 | Lines should not have trailing whitespace. |\n| Moya.swift | 449 | Lines should not have trailing whitespace. |\n| Moya.swift | 453 | Lines should not have trailing whitespace. |\n| Moya.swift | 541 | Lines should not have trailing whitespace. |\n| Moya.swift | 553 | Lines should not have trailing whitespace. |\n| Moya.swift | 428 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 555 | File should contain 400 lines or less: currently contains 555 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 253 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 253 | Prefer checking isEmpty over comparing count to zero. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo Changelog entries made\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNo Changelog entries made\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo Changelog entries made\n\n\n\nSwiftLint found issues\\n\\n#### Warnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 355 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 356 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 338 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 358 | Force unwrapping should be avoided. |\n| Moya.swift | 182 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 54 lines |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 337 | Lines should not have trailing whitespace. |\n| Moya.swift | 352 | Lines should not have trailing whitespace. |\n| Moya.swift | 362 | Lines should not have trailing whitespace. |\n| Moya.swift | 375 | Lines should not have trailing whitespace. |\n| Moya.swift | 388 | Lines should not have trailing whitespace. |\n| Moya.swift | 413 | Lines should not have trailing whitespace. |\n| Moya.swift | 414 | Lines should not have trailing whitespace. |\n| Moya.swift | 485 | Lines should not have trailing whitespace. |\n| Moya.swift | 497 | Lines should not have trailing whitespace. |\n| Moya.swift | 237 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 399 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 182 | Function should have complexity 10 or less: currently complexity equals 11 |\n| Moya.swift | 499 | File should contain 400 lines or less: currently contains 499 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 355 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 356 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 338 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 358 | Force unwrapping should be avoided. |\n| Moya.swift | 182 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 54 lines |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 337 | Lines should not have trailing whitespace. |\n| Moya.swift | 352 | Lines should not have trailing whitespace. |\n| Moya.swift | 362 | Lines should not have trailing whitespace. |\n| Moya.swift | 375 | Lines should not have trailing whitespace. |\n| Moya.swift | 388 | Lines should not have trailing whitespace. |\n| Moya.swift | 413 | Lines should not have trailing whitespace. |\n| Moya.swift | 414 | Lines should not have trailing whitespace. |\n| Moya.swift | 485 | Lines should not have trailing whitespace. |\n| Moya.swift | 497 | Lines should not have trailing whitespace. |\n| Moya.swift | 237 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 399 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 182 | Function should have complexity 10 or less: currently complexity equals 11 |\n| Moya.swift | 499 | File should contain 400 lines or less: currently contains 499 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 355 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 356 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 338 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 358 | Force unwrapping should be avoided. |\n| Moya.swift | 182 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 54 lines |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 337 | Lines should not have trailing whitespace. |\n| Moya.swift | 352 | Lines should not have trailing whitespace. |\n| Moya.swift | 362 | Lines should not have trailing whitespace. |\n| Moya.swift | 375 | Lines should not have trailing whitespace. |\n| Moya.swift | 388 | Lines should not have trailing whitespace. |\n| Moya.swift | 413 | Lines should not have trailing whitespace. |\n| Moya.swift | 414 | Lines should not have trailing whitespace. |\n| Moya.swift | 485 | Lines should not have trailing whitespace. |\n| Moya.swift | 497 | Lines should not have trailing whitespace. |\n| Moya.swift | 237 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 399 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 182 | Function should have complexity 10 or less: currently complexity equals 11 |\n| Moya.swift | 499 | File should contain 400 lines or less: currently contains 499 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\n| Moya.swift | 355 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 356 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 338 | Colons should be next to the identifier when specifying a type. |\n| Moya.swift | 358 | Force unwrapping should be avoided. |\n| Moya.swift | 182 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 54 lines |\n| Moya.swift | 14 | Lines should not have trailing whitespace. |\n| Moya.swift | 20 | Lines should not have trailing whitespace. |\n| Moya.swift | 24 | Lines should not have trailing whitespace. |\n| Moya.swift | 48 | Lines should not have trailing whitespace. |\n| Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Moya.swift | 105 | Lines should not have trailing whitespace. |\n| Moya.swift | 109 | Lines should not have trailing whitespace. |\n| Moya.swift | 337 | Lines should not have trailing whitespace. |\n| Moya.swift | 352 | Lines should not have trailing whitespace. |\n| Moya.swift | 362 | Lines should not have trailing whitespace. |\n| Moya.swift | 375 | Lines should not have trailing whitespace. |\n| Moya.swift | 388 | Lines should not have trailing whitespace. |\n| Moya.swift | 413 | Lines should not have trailing whitespace. |\n| Moya.swift | 414 | Lines should not have trailing whitespace. |\n| Moya.swift | 485 | Lines should not have trailing whitespace. |\n| Moya.swift | 497 | Lines should not have trailing whitespace. |\n| Moya.swift | 237 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 399 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 182 | Function should have complexity 10 or less: currently complexity equals 11 |\n| Moya.swift | 499 | File should contain 400 lines or less: currently contains 499 |\n| Moya+ReactiveCocoa.swift | 72 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 83 | Lines should not have trailing whitespace. |\n| Moya+ReactiveCocoa.swift | 89 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 48 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya+RxSwift.swift | 46 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 58 | Lines should not have trailing whitespace. |\n| Moya+RxSwift.swift | 63 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 71 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Observable+Moya.swift | 55 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 58 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 64 | Lines should not have trailing whitespace. |\n| Observable+Moya.swift | 67 | Lines should not have trailing whitespace. |\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 233 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 233 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 233 | Prefer checking isEmpty over comparing count to zero. |\n| Moya.swift | 233 | Prefer checking isEmpty over comparing count to zero. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNo Changelog entries made\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\\n\\n#### Warnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 182 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 54 lines |\n| Moya.swift | 237 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 400 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 182 | Function should have complexity 10 or less: currently complexity equals 11 |\n| Moya.swift | 500 | File should contain 400 lines or less: currently contains 500 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 182 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 54 lines |\n| Moya.swift | 237 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 400 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 182 | Function should have complexity 10 or less: currently complexity equals 11 |\n| Moya.swift | 500 | File should contain 400 lines or less: currently contains 500 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 182 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 54 lines |\n| Moya.swift | 237 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 400 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 182 | Function should have complexity 10 or less: currently complexity equals 11 |\n| Moya.swift | 500 | File should contain 400 lines or less: currently contains 500 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Congrats.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\nSwiftLint found issues\\n\\n#### Warnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n  Generated by :no_entry_sign: danger\n\n. \n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Congrats.\n      \n\n\n\n\n:white_check_mark:\nPR is classed as Work in Progress\n\n\n\nSwiftLint found issues\\n\\n#### Warnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Moya.swift | 395 | Opening braces should be preceded by a single space and on the same line as the declaration. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 390 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 395 | There should be no space before and one after any comma. |\n| Moya.swift | 188 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 59 lines |\n| Moya.swift | 390 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 395 | Return arrow and return type should be separated by a single space or on a separate line. |\n| Moya.swift | 389 | Lines should not have trailing whitespace. |\n| Moya.swift | 394 | Lines should not have trailing whitespace. |\n| Moya.swift | 420 | Else and catch should be on the same line, one space after the previous declaration. |\n| Moya.swift | 188 | Function should have complexity 10 or less: currently complexity equals 14 |\n| Moya.swift | 520 | File should contain 400 lines or less: currently contains 520 |\n| Observable+Moya.swift | 62 | Force unwrapping should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nBig PR\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Yay.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          3 Warnings\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n:warning:\nBig PR\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Yay.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Nice work.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\nSwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\nSwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          :white_check_mark: Congrats.\n      \n\n\n\n\n:white_check_mark:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          3 Warnings\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n:warning:\nBig PR\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\nSwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNo Changelog entries made\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 97 | Force tries should be avoided. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Congrats.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Well done.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. |\n| Moya.swift | 28 | Limit vertical whitespace to a single empty line. Currently 2. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. |\n| Moya.swift | 28 | Limit vertical whitespace to a single empty line. Currently 2. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. |\n| Moya.swift | 28 | Limit vertical whitespace to a single empty line. Currently 2. |\n\n  Generated by :no_entry_sign: danger\n\n. \n  0 Errors\n  1 Warning: The <code>Cartfile</code> or <...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nViewController.swift | 114 | Unused parameter \"action\" in a closure should be replaced with . \nViewController.swift | 10 | Lines should not have trailing whitespace. \nViewController.swift | 14 | Lines should not have trailing whitespace. \nViewController.swift | 24 | Lines should not have trailing whitespace. \nViewController.swift | 49 | Lines should not have trailing whitespace. \nViewController.swift | 53 | Lines should not have trailing whitespace. \nViewController.swift | 61 | Lines should not have trailing whitespace. \nViewController.swift | 68 | Lines should not have trailing whitespace. \nViewController.swift | 70 | Lines should not have trailing whitespace. \nViewController.swift | 76 | Lines should not have trailing whitespace. \nViewController.swift | 85 | Lines should not have trailing whitespace. \nViewController.swift | 90 | Lines should not have trailing whitespace. \nViewController.swift | 101 | Lines should not have trailing whitespace. \nViewController.swift | 109 | Lines should not have trailing whitespace. \nViewController.swift | 133 | Lines should not have trailing whitespace. \nViewController.swift | 116 | Unused parameter \"action\" in a closure should be replaced with . \nViewController.swift | 9 | Lines should not have trailing whitespace. \nViewController.swift | 12 | Lines should not have trailing whitespace. \nViewController.swift | 16 | Lines should not have trailing whitespace. \nViewController.swift | 19 | Lines should not have trailing whitespace. \nViewController.swift | 26 | Lines should not have trailing whitespace. \nViewController.swift | 28 | Lines should not have trailing whitespace. \nViewController.swift | 43 | Lines should not have trailing whitespace. \nViewController.swift | 51 | Lines should not have trailing whitespace. \nViewController.swift | 55 | Lines should not have trailing whitespace. \nViewController.swift | 63 | Lines should not have trailing whitespace. \nViewController.swift | 70 | Lines should not have trailing whitespace. \nViewController.swift | 72 | Lines should not have trailing whitespace. \nViewController.swift | 78 | Lines should not have trailing whitespace. \nViewController.swift | 87 | Lines should not have trailing whitespace. \nViewController.swift | 92 | Lines should not have trailing whitespace. \nViewController.swift | 103 | Lines should not have trailing whitespace. \nViewController.swift | 105 | Lines should not have trailing whitespace. \nViewController.swift | 107 | Lines should not have trailing whitespace. \nViewController.swift | 111 | Lines should not have trailing whitespace. \nViewController.swift | 114 | Lines should not have trailing whitespace. \nViewController.swift | 127 | Lines should not have trailing whitespace. \nViewController.swift | 131 | Lines should not have trailing whitespace. \nViewController.swift | 135 | Lines should not have trailing whitespace. \nViewController.swift | 137 | Lines should not have trailing whitespace. \nViewController.swift | 141 | Lines should not have trailing whitespace. \nMoyaProvider.swift | 96 | Function should have 5 parameters or less: it currently has 6 \nReactiveSwiftMoyaProvider.swift | 49 | Function should have 5 parameters or less: it currently has 6 \nMoyaProviderSpec.swift | 463 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 745 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 748 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 754 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 758 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 762 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 767 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 772 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 779 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 783 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 787 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 794 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 799 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 802 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 806 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 811 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 818 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 822 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 826 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 833 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 483 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 500 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 840 | File should contain 400 lines or less: currently contains 840 \nReactiveSwiftMoyaProviderTests.swift | 72 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 159 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 65 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 66 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 67 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 68 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 152 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 153 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 154 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 155 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxSwiftMoyaProviderTests.swift | 166 | Prefer != nil over let _ = \nTestHelpers.swift | 148 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 8 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 498 lines \nTestHelpers.swift | 149 | Variable name should start with a lowercase character: 'DefaultDownloadDestination' \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>Cartfile</code> or <...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nViewController.swift | 114 | Unused parameter \"action\" in a closure should be replaced with . \nViewController.swift | 10 | Lines should not have trailing whitespace. \nViewController.swift | 14 | Lines should not have trailing whitespace. \nViewController.swift | 24 | Lines should not have trailing whitespace. \nViewController.swift | 49 | Lines should not have trailing whitespace. \nViewController.swift | 53 | Lines should not have trailing whitespace. \nViewController.swift | 61 | Lines should not have trailing whitespace. \nViewController.swift | 68 | Lines should not have trailing whitespace. \nViewController.swift | 70 | Lines should not have trailing whitespace. \nViewController.swift | 76 | Lines should not have trailing whitespace. \nViewController.swift | 85 | Lines should not have trailing whitespace. \nViewController.swift | 90 | Lines should not have trailing whitespace. \nViewController.swift | 101 | Lines should not have trailing whitespace. \nViewController.swift | 109 | Lines should not have trailing whitespace. \nViewController.swift | 133 | Lines should not have trailing whitespace. \nViewController.swift | 116 | Unused parameter \"action\" in a closure should be replaced with . \nViewController.swift | 9 | Lines should not have trailing whitespace. \nViewController.swift | 12 | Lines should not have trailing whitespace. \nViewController.swift | 16 | Lines should not have trailing whitespace. \nViewController.swift | 19 | Lines should not have trailing whitespace. \nViewController.swift | 26 | Lines should not have trailing whitespace. \nViewController.swift | 28 | Lines should not have trailing whitespace. \nViewController.swift | 43 | Lines should not have trailing whitespace. \nViewController.swift | 51 | Lines should not have trailing whitespace. \nViewController.swift | 55 | Lines should not have trailing whitespace. \nViewController.swift | 63 | Lines should not have trailing whitespace. \nViewController.swift | 70 | Lines should not have trailing whitespace. \nViewController.swift | 72 | Lines should not have trailing whitespace. \nViewController.swift | 78 | Lines should not have trailing whitespace. \nViewController.swift | 87 | Lines should not have trailing whitespace. \nViewController.swift | 92 | Lines should not have trailing whitespace. \nViewController.swift | 103 | Lines should not have trailing whitespace. \nViewController.swift | 105 | Lines should not have trailing whitespace. \nViewController.swift | 107 | Lines should not have trailing whitespace. \nViewController.swift | 111 | Lines should not have trailing whitespace. \nViewController.swift | 114 | Lines should not have trailing whitespace. \nViewController.swift | 127 | Lines should not have trailing whitespace. \nViewController.swift | 131 | Lines should not have trailing whitespace. \nViewController.swift | 135 | Lines should not have trailing whitespace. \nViewController.swift | 137 | Lines should not have trailing whitespace. \nViewController.swift | 141 | Lines should not have trailing whitespace. \nMoyaProvider.swift | 96 | Function should have 5 parameters or less: it currently has 6 \nReactiveSwiftMoyaProvider.swift | 49 | Function should have 5 parameters or less: it currently has 6 \nMoyaProviderSpec.swift | 463 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 745 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 748 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 754 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 758 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 762 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 767 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 772 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 779 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 783 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 787 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 794 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 799 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 802 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 806 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 811 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 818 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 822 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 826 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 833 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 483 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 500 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 840 | File should contain 400 lines or less: currently contains 840 \nReactiveSwiftMoyaProviderTests.swift | 72 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 159 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 65 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 66 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 67 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 68 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 152 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 153 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 154 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 155 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxSwiftMoyaProviderTests.swift | 166 | Prefer != nil over let _ = \nTestHelpers.swift | 148 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 8 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 498 lines \nTestHelpers.swift | 149 | Variable name should start with a lowercase character: 'DefaultDownloadDestination' \n\n  Generated by :no_entry_sign: Danger\n\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. |\n| Moya.swift | 28 | Limit vertical whitespace to a single empty line. Currently 2. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. |\n| Moya.swift | 28 | Limit vertical whitespace to a single empty line. Currently 2. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Yay.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\nSwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. |\n| Moya.swift | 28 | Limit vertical whitespace to a single empty line. Currently 2. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. |\n| Moya.swift | 28 | Limit vertical whitespace to a single empty line. Currently 2. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Yay.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Good on 'ya.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| Endpoint.swift | 110 | Lines should not have trailing whitespace. |\n| Response.swift | 23 | Lines should not have trailing whitespace. |\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          :white_check_mark: Jolly good show.\n      \n\n\n\n\n:white_check_mark:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n:white_check_mark:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n<tr>\n  <td>:warning:</td>\n  <td data-sticky=\"true\">Consider adding supporting documentation to this change. Documentation can be found in the <code>docs</code> directory.</td>\n</tr>\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMultiTarget.swift | 5 | Lines should not have trailing whitespace. \nMultiTarget.swift | 9 | Lines should not have trailing whitespace. \nMultiTarget.swift | 13 | Lines should not have trailing whitespace. \nMultiTarget.swift | 17 | Lines should not have trailing whitespace. \nMultiTarget.swift | 21 | Lines should not have trailing whitespace. \nMultiTarget.swift | 25 | Lines should not have trailing whitespace. \nMultiTarget.swift | 29 | Lines should not have trailing whitespace. \nMultiTarget.swift | 33 | Lines should not have trailing whitespace. \nMultiTarget.swift | 37 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMultiTarget.swift | 5 | Lines should not have trailing whitespace. \nMultiTarget.swift | 9 | Lines should not have trailing whitespace. \nMultiTarget.swift | 13 | Lines should not have trailing whitespace. \nMultiTarget.swift | 17 | Lines should not have trailing whitespace. \nMultiTarget.swift | 21 | Lines should not have trailing whitespace. \nMultiTarget.swift | 25 | Lines should not have trailing whitespace. \nMultiTarget.swift | 29 | Lines should not have trailing whitespace. \nMultiTarget.swift | 33 | Lines should not have trailing whitespace. \nMultiTarget.swift | 37 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNo Changelog entries made\n\n\n\nSwiftLint found issues\\n\\n#### Warnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoya.swift | 182 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 54 lines \nMoya.swift | 41 | Limit vertical whitespace to a single empty line. Currently 2. \nMoya.swift | 417 | Limit vertical whitespace to a single empty line. Currently 2. \nMoya.swift | 530 | File should contain 400 lines or less: currently contains 530 \nMoya.swift | 530 | Files should have a single trailing newline. \nMoya.swift | 237 | Else and catch should be on the same line, one space after the previous declaration. \nMoya.swift | 402 | Else and catch should be on the same line, one space after the previous declaration. \nMoya.swift | 182 | Function should have complexity 10 or less: currently complexity equals 11 \nMoya.swift | 149 | Shorthand syntactic sugar should be used, i.e. [Int] instead of Array \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoya+Internal.swift | 111 | Prefer -> Void over -> (). \nMoya+Internal.swift | 210 | Prefer -> Void over -> (). \nMoya.swift | 5 | Prefer -> Void over -> (). \nMoya.swift | 96 | Prefer -> Void over -> (). \nNetworkActivityPlugin.swift | 12 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoya+Internal.swift | 111 | Prefer -> Void over -> (). \nMoya+Internal.swift | 210 | Prefer -> Void over -> (). \nMoya.swift | 5 | Prefer -> Void over -> (). \nMoya.swift | 96 | Prefer -> Void over -> (). \nNetworkActivityPlugin.swift | 12 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoya+Internal.swift | 111 | Prefer -> Void over -> (). \nMoya+Internal.swift | 210 | Prefer -> Void over -> (). \nMoya.swift | 5 | Prefer -> Void over -> (). \nMoya.swift | 96 | Prefer -> Void over -> (). \nNetworkActivityPlugin.swift | 12 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nBig PR\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nBig PR\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nBig PR\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 30 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 31 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 32 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 33 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 34 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 58 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 59 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 60 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 61 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 62 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 12 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 13 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 14 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 15 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 16 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 11 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 12 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 13 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 14 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 15 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 30 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 31 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 32 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 33 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 34 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 58 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 59 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 60 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 61 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider.swift | 62 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 12 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 13 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 14 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 15 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProvider.swift | 16 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 11 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 12 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 13 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 14 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxMoyaProvider.swift | 15 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAdded or removed library files require the Carthage Xcode project to be updated.\n\n\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nBig PR\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 113 | Prefer != nil over let _ = \nEndpoint.swift | 114 | Prefer != nil over let _ = \nMoyaProvider+Internal.swift | 238 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n<tr>\n  <td>:warning:</td>\n  <td data-sticky=\"true\">Big PR</td>\n</tr>\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. \nEndpoint.swift | 31 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 32 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 33 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 34 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nEndpoint.swift | 35 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya.swift | 28 | Limit vertical whitespace to a single empty line. Currently 2. \nMoya.swift | 59 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya.swift | 60 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya.swift | 61 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya.swift | 62 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya.swift | 63 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya.swift | 55 | Shorthand syntactic sugar should be used, i.e. [Int] instead of Array \nMoya.swift | 5 | Prefer -> Void over -> (). \nMoya.swift | 97 | Prefer -> Void over -> (). \nNetworkActivityPlugin.swift | 12 | Prefer -> Void over -> (). \nMoya+Internal.swift | 102 | Prefer -> Void over -> (). \nMoya+Internal.swift | 198 | Prefer -> Void over -> (). \nMoya+ReactiveCocoa.swift | 12 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+ReactiveCocoa.swift | 13 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+ReactiveCocoa.swift | 14 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+ReactiveCocoa.swift | 15 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+ReactiveCocoa.swift | 16 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+RxSwift.swift | 11 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+RxSwift.swift | 12 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+RxSwift.swift | 13 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+RxSwift.swift | 14 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoya+RxSwift.swift | 15 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe podspec was updated, but there were no changes in either the Cartfile nor Cartfile.resolved. Did you forget updating Cartfile or Cartfile.resolved?\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 113 | Prefer != nil over let _ = \nEndpoint.swift | 114 | Prefer != nil over let _ = \nMoyaProvider+Internal.swift | 238 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 113 | Prefer != nil over let _ = \nEndpoint.swift | 114 | Prefer != nil over let _ = \nMoyaProvider+Internal.swift | 238 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAdded or removed library files require the Carthage Xcode project to be updated.\n\n\n\n\n\n\n\n\n          3 Warnings\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n:warning:\nBig PR\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 113 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nEndpoint.swift | 114 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProvider+Internal.swift | 166 | Variable name should be between 3 and 40 characters long: 'to' \nMoyaProvider+Internal.swift | 168 | Variable name should be between 3 and 40 characters long: 'to' \nMoyaProvider+Internal.swift | 170 | Variable name should be between 3 and 40 characters long: 'to' \nMoyaProvider+Internal.swift | 208 | Variable name should be between 3 and 40 characters long: 'to' \nMoyaProvider+Internal.swift | 238 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 113 | Prefer != nil over let _ = \nEndpoint.swift | 114 | Prefer != nil over let _ = \nMoyaProvider+Internal.swift | 238 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 113 | Prefer != nil over let _ = \nEndpoint.swift | 114 | Prefer != nil over let _ = \nMoyaProvider+Internal.swift | 238 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nAny changes to library code need a summary in the Changelog.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 113 | Prefer != nil over let _ = \nEndpoint.swift | 114 | Prefer != nil over let _ = \nMoyaProvider+Internal.swift | 238 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 79 | Unused parameter \"target\" in a closure should be replaced with . \nMoyaProviderSpec.swift | 93 | Unused parameter \"target\" in a closure should be replaced with . \nMoyaProviderSpec.swift | 10 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 401 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 526 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 532 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 617 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 623 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 638 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 707 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 711 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 751 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 9 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 497 lines \nMoyaProviderSpec.swift | 14 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 17 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 24 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 44 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 51 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 55 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 58 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 83 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 87 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 90 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 97 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 101 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 104 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 108 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 111 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 119 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 123 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 126 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 134 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 138 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 185 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 373 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 377 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 440 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 443 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 451 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 460 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 464 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 470 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 483 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 487 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 500 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 504 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 507 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 514 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 634 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 643 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 647 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 649 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 666 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 669 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 675 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 687 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 689 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 696 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 700 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 704 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 709 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 716 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 718 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 720 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 724 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 730 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 737 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 740 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 746 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 749 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 755 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 759 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 763 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 768 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 770 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 773 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 780 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 784 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 788 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 795 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 800 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 803 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 807 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 812 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 819 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 823 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 827 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 834 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 114 | Prefer -> Void over -> (). \nMoyaProviderSpec.swift | 129 | Prefer -> Void over -> (). \nMoyaProviderSpec.swift | 258 | Prefer -> Void over -> (). \nMoyaProviderSpec.swift | 201 | Opening braces should be preceded by a single space and on the same line as the declaration. \nMoyaProviderSpec.swift | 672 | Opening braces should be preceded by a single space and on the same line as the declaration. \nMoyaProviderSpec.swift | 484 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 501 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 841 | File should contain 400 lines or less: currently contains 841 \nReactiveSwiftMoyaProviderTests.swift | 45 | Unused parameter \"error\" in a closure should be replaced with _. \nReactiveSwiftMoyaProviderTests.swift | 12 | Force unwrapping should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 121 | Force unwrapping should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 213 | Force unwrapping should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 11 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 136 lines \nReactiveSwiftMoyaProviderTests.swift | 243 | Limit vertical whitespace to a single empty line. Currently 2. \nReactiveSwiftMoyaProviderTests.swift | 22 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 25 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 32 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 40 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 43 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 48 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 72 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 102 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 106 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 112 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 119 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 123 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 126 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 133 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 139 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 144 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 149 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 159 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 164 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 168 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 171 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 174 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 180 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 209 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 246 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 65 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 66 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 67 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 68 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 152 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 153 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 154 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 155 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxSwiftMoyaProviderTests.swift | 100 | Force unwrapping should be avoided. \nRxSwiftMoyaProviderTests.swift | 135 | Force unwrapping should be avoided. \nRxSwiftMoyaProviderTests.swift | 11 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 128 lines \nRxSwiftMoyaProviderTests.swift | 130 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 133 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 139 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 143 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 148 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 151 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 155 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 160 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 168 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 172 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 176 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 184 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 189 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 193 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 198 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 203 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 211 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 215 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 219 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 227 | Lines should not have trailing whitespace. \nRxSwiftMoyaProviderTests.swift | 108 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nRxSwiftMoyaProviderTests.swift | 109 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTestHelpers.swift | 6 | Force unwrapping should be avoided. \nTestHelpers.swift | 16 | Force unwrapping should be avoided. \nTestHelpers.swift | 45 | Force unwrapping should be avoided. \nTestHelpers.swift | 47 | Force unwrapping should be avoided. \nTestHelpers.swift | 64 | Force unwrapping should be avoided. \nTestHelpers.swift | 94 | Force unwrapping should be avoided. \nTestHelpers.swift | 104 | Force unwrapping should be avoided. \nTestHelpers.swift | 153 | Force unwrapping should be avoided. \nTestHelpers.swift | 153 | Force unwrapping should be avoided. \nTestHelpers.swift | 148 | Limit vertical whitespace to a single empty line. Currently 2. \nTestHelpers.swift | 25 | Lines should not have trailing whitespace. \nTestHelpers.swift | 29 | Lines should not have trailing whitespace. \nTestHelpers.swift | 41 | Lines should not have trailing whitespace. \nTestHelpers.swift | 75 | Lines should not have trailing whitespace. \nTestHelpers.swift | 86 | Lines should not have trailing whitespace. \nTestHelpers.swift | 90 | Lines should not have trailing whitespace. \nTestHelpers.swift | 138 | Lines should not have trailing whitespace. \nTestHelpers.swift | 155 | Lines should not have trailing whitespace. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 662 | Force casts should be avoided. \nMoyaProviderSpec.swift | 9 | Function should have complexity 10 or less: currently complexity equals 34 \nMoyaProviderSpec.swift | 8 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 498 lines \nReactiveSwiftMoyaProviderTests.swift | 135 | Force casts should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 130 | Force tries should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 135 | Force tries should be avoided. \nTestHelpers.swift | 149 | Variable name should start with a lowercase character: 'DefaultDownloadDestination' \n\n  Generated by :no_entry_sign: Danger\n\n. \n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n\n\n  Generated by :no_entry_sign: danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 79 | Unused parameter \"target\" in a closure should be replaced with . \nMoyaProviderSpec.swift | 93 | Unused parameter \"target\" in a closure should be replaced with . \nMoyaProviderSpec.swift | 10 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 401 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 526 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 532 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 617 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 623 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 638 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 707 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 711 | Force unwrapping should be avoided. \nMoyaProviderSpec.swift | 9 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 446 lines \nMoyaProviderSpec.swift | 14 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 17 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 24 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 44 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 51 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 55 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 58 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 83 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 87 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 90 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 97 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 101 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 104 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 108 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 111 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 119 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 123 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 126 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 134 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 138 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 185 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 373 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 377 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 440 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 443 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 451 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 460 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 464 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 470 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 483 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 487 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 500 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 504 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 507 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 514 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 634 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 643 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 647 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 649 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 666 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 669 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 675 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 687 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 689 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 696 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 700 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 704 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 709 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 716 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 718 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 720 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 724 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 730 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 737 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 740 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 114 | Prefer -> Void over -> (). \nMoyaProviderSpec.swift | 129 | Prefer -> Void over -> (). \nMoyaProviderSpec.swift | 258 | Prefer -> Void over -> (). \nMoyaProviderSpec.swift | 201 | Opening braces should be preceded by a single space and on the same line as the declaration. \nMoyaProviderSpec.swift | 672 | Opening braces should be preceded by a single space and on the same line as the declaration. \nMoyaProviderSpec.swift | 484 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 501 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 747 | File should contain 400 lines or less: currently contains 747 \nReactiveSwiftMoyaProviderTests.swift | 45 | Unused parameter \"error\" in a closure should be replaced with _. \nReactiveSwiftMoyaProviderTests.swift | 12 | Force unwrapping should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 121 | Force unwrapping should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 213 | Force unwrapping should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 11 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 136 lines \nReactiveSwiftMoyaProviderTests.swift | 243 | Limit vertical whitespace to a single empty line. Currently 2. \nReactiveSwiftMoyaProviderTests.swift | 22 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 25 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 32 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 40 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 43 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 48 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 102 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 106 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 112 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 119 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 123 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 126 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 133 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 139 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 144 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 149 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 159 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 164 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 168 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 171 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 174 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 180 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 209 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 246 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 65 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 66 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 67 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 68 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 152 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 153 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 154 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 155 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 662 | Force casts should be avoided. \nMoyaProviderSpec.swift | 9 | Function should have complexity 10 or less: currently complexity equals 34 \nMoyaProviderSpec.swift | 8 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 447 lines \nReactiveSwiftMoyaProviderTests.swift | 135 | Force casts should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 130 | Force tries should be avoided. \nReactiveSwiftMoyaProviderTests.swift | 135 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>Cartfile</code> or <...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nError+MoyaSpec.swift | 4 | Function should have complexity 10 or less: currently complexity equals 19 \nError+MoyaSpec.swift | 55 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 28 | Force unwrapping should be avoided. \nMoyaProviderIntegrationTests.swift | 32 | Force unwrapping should be avoided. \nMoyaProviderIntegrationTests.swift | 36 | Force unwrapping should be avoided. \nMoyaProviderIntegrationTests.swift | 23 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 143 lines \nMoyaProviderIntegrationTests.swift | 17 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 26 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 31 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 35 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 39 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 41 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 45 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 53 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 65 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 68 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 81 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 95 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 100 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 107 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 110 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 114 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 115 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 121 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 125 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 133 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 140 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 143 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 151 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 163 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 168 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 177 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 182 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 185 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 193 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 198 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 202 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 218 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 234 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 240 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 252 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 255 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 268 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Defaults.swift | 42 | Force unwrapping should be avoided. \nMoyaProvider+Defaults.swift | 44 | Force unwrapping should be avoided. \nMoyaProvider+Defaults.swift | 40 | Lines should not have trailing whitespace. \nMoyaProvider+Defaults.swift | 43 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Big PR, try to keep changes sm...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nBig PR, try to keep changes smaller if you can\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nViewController.swift | 114 | Unused parameter \"action\" in a closure should be replaced with . \nViewController.swift | 10 | Lines should not have trailing whitespace. \nViewController.swift | 14 | Lines should not have trailing whitespace. \nViewController.swift | 24 | Lines should not have trailing whitespace. \nViewController.swift | 49 | Lines should not have trailing whitespace. \nViewController.swift | 53 | Lines should not have trailing whitespace. \nViewController.swift | 61 | Lines should not have trailing whitespace. \nViewController.swift | 68 | Lines should not have trailing whitespace. \nViewController.swift | 70 | Lines should not have trailing whitespace. \nViewController.swift | 76 | Lines should not have trailing whitespace. \nViewController.swift | 85 | Lines should not have trailing whitespace. \nViewController.swift | 90 | Lines should not have trailing whitespace. \nViewController.swift | 101 | Lines should not have trailing whitespace. \nViewController.swift | 109 | Lines should not have trailing whitespace. \nViewController.swift | 133 | Lines should not have trailing whitespace. \nViewController.swift | 116 | Unused parameter \"action\" in a closure should be replaced with . \nViewController.swift | 9 | Lines should not have trailing whitespace. \nViewController.swift | 12 | Lines should not have trailing whitespace. \nViewController.swift | 16 | Lines should not have trailing whitespace. \nViewController.swift | 19 | Lines should not have trailing whitespace. \nViewController.swift | 26 | Lines should not have trailing whitespace. \nViewController.swift | 28 | Lines should not have trailing whitespace. \nViewController.swift | 43 | Lines should not have trailing whitespace. \nViewController.swift | 51 | Lines should not have trailing whitespace. \nViewController.swift | 55 | Lines should not have trailing whitespace. \nViewController.swift | 63 | Lines should not have trailing whitespace. \nViewController.swift | 70 | Lines should not have trailing whitespace. \nViewController.swift | 72 | Lines should not have trailing whitespace. \nViewController.swift | 78 | Lines should not have trailing whitespace. \nViewController.swift | 87 | Lines should not have trailing whitespace. \nViewController.swift | 92 | Lines should not have trailing whitespace. \nViewController.swift | 103 | Lines should not have trailing whitespace. \nViewController.swift | 105 | Lines should not have trailing whitespace. \nViewController.swift | 107 | Lines should not have trailing whitespace. \nViewController.swift | 111 | Lines should not have trailing whitespace. \nViewController.swift | 114 | Lines should not have trailing whitespace. \nViewController.swift | 127 | Lines should not have trailing whitespace. \nViewController.swift | 131 | Lines should not have trailing whitespace. \nViewController.swift | 135 | Lines should not have trailing whitespace. \nViewController.swift | 137 | Lines should not have trailing whitespace. \nViewController.swift | 141 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 35 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 91 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 101 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 105 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 483 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 500 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nMoyaProviderSpec.swift | 769 | File should contain 400 lines or less: currently contains 769 \nReactiveSwiftMoyaProviderTests.swift | 65 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 66 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 67 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 68 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 152 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 153 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 154 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nReactiveSwiftMoyaProviderTests.swift | 155 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nRxSwiftMoyaProviderTests.swift | 180 | Prefer != nil over let _ = \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 8 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 462 lines \nObservable+MoyaSpec.swift | 7 | Function name should start with a lowercase character: 'ImageJPEGRepresentation(::)' \nObservable+MoyaSpec.swift | 11 | Function name should start with a lowercase character: 'ImageJPEGRepresentation(::)' \nSignalProducer+MoyaSpec.swift | 7 | Function name should start with a lowercase character: 'ImageJPEGRepresentation(::)' \nSignalProducer+MoyaSpec.swift | 11 | Function name should start with a lowercase character: 'ImageJPEGRepresentation(::)' \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  4 Warnings: PR is classed as Work in Progr...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          4 Warnings\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 285 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>Cartfile</code> or <...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderIntegrationTests.swift | 35 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 39 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 91 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 101 | Lines should not have trailing whitespace. \nMoyaProviderIntegrationTests.swift | 105 | Lines should not have trailing whitespace. \nReactiveSwiftMoyaProviderTests.swift | 189 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Big PR, try to keep changes sm...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nBig PR, try to keep changes smaller if you can\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nGiphyAPI.swift | 11 | Force unwrapping should be avoided. \nGiphyAPI.swift | 34 | Force unwrapping should be avoided. \nGiphyAPI.swift | 44 | Force unwrapping should be avoided. \nGitHubAPI.swift | 22 | Force unwrapping should be avoided. \nGitHubAPI.swift | 33 | Force unwrapping should be avoided. \nGitHubAPI.swift | 72 | Force unwrapping should be avoided. \nGitHubAPI.swift | 74 | Force unwrapping should be avoided. \nGitHubAPI.swift | 76 | Force unwrapping should be avoided. \nGitHubAPI.swift | 88 | MARK comment should be in valid format. \nGitHubAPI.swift | 99 | Files should have a single trailing newline. \nGitHubUserContentAPI.swift | 11 | Force unwrapping should be avoided. \nGitHubUserContentAPI.swift | 45 | Force unwrapping should be avoided. \nGitHubUserContentAPI.swift | 43 | Lines should not have trailing whitespace. \nGitHubUserContentAPI.swift | 47 | Lines should not have trailing whitespace. \nGitHubUserContentAPI.swift | 50 | Files should have a single trailing newline. \nMoyaProvider+Internal.swift | 94 | Function should have 5 parameters or less: it currently has 7 \nMoyaProviderSpec.swift | 833 | File should contain 400 lines or less: currently contains 833 \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nGiphyAPI.swift | 4 | Variable name should start with a lowercase character: 'GiphyProvider' \nGitHubAPI.swift | 16 | Variable name should start with a lowercase character: 'GitHubProvider' \nGitHubUserContentAPI.swift | 4 | Variable name should start with a lowercase character: 'GitHubUserContentProvider' \nGitHubUserContentAPI.swift | 41 | Variable name should start with a lowercase character: 'DefaultDownloadDestination' \nMoyaProviderSpec.swift | 8 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 493 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  4 Warnings: PR is classed as Work in Progr...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          4 Warnings\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 103 | TODOs should be avoided (Add exception handling here). \nMoyaProvider+Internal.swift | 111 | TODOs should be avoided (Add exception handling here). \nMoyaProvider+Internal.swift | 120 | TODOs should be avoided (Add exception handling here). \nMoyaProvider+Internal.swift | 129 | TODOs should be avoided (Add exception handling here). \nMoyaProvider+Internal.swift | 139 | TODOs should be avoided (Add exception handling here). \nMoyaProvider+Internal.swift | 159 | TODOs should be avoided (Add exception handling here). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Big PR, try to keep changes sm...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nBig PR, try to keep changes smaller if you can\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Big PR, try to keep changes sm...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nBig PR, try to keep changes smaller if you can\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider.swift | 98 | Function should have 5 parameters or less: it currently has 6 \nReactiveSwiftMoyaProvider.swift | 49 | Function should have 5 parameters or less: it currently has 6 \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider.swift | 98 | Function should have 5 parameters or less: it currently has 6 \nReactiveSwiftMoyaProvider.swift | 49 | Function should have 5 parameters or less: it currently has 6 \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Big PR, try to keep changes sm...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nBig PR, try to keep changes smaller if you can\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nGiphyAPI.swift | 11 | Force unwrapping should be avoided. \nGiphyAPI.swift | 42 | Force unwrapping should be avoided. \nGiphyAPI.swift | 52 | Force unwrapping should be avoided. \nGitHubAPI.swift | 22 | Force unwrapping should be avoided. \nGitHubAPI.swift | 33 | Force unwrapping should be avoided. \nGitHubAPI.swift | 72 | Force unwrapping should be avoided. \nGitHubAPI.swift | 74 | Force unwrapping should be avoided. \nGitHubAPI.swift | 76 | Force unwrapping should be avoided. \nGitHubAPI.swift | 88 | MARK comment should be in valid format. \nGitHubAPI.swift | 99 | Files should have a single trailing newline. \nGitHubUserContentAPI.swift | 11 | Force unwrapping should be avoided. \nGitHubUserContentAPI.swift | 54 | Force unwrapping should be avoided. \nGitHubUserContentAPI.swift | 52 | Lines should not have trailing whitespace. \nGitHubUserContentAPI.swift | 56 | Lines should not have trailing whitespace. \nGitHubUserContentAPI.swift | 59 | Files should have a single trailing newline. \nMoyaProvider.swift | 102 | Function should have 5 parameters or less: it currently has 6 \nMoyaProviderSpec.swift | 863 | File should contain 400 lines or less: currently contains 863 \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nGiphyAPI.swift | 4 | Variable name should start with a lowercase character: 'GiphyProvider' \nGitHubAPI.swift | 16 | Variable name should start with a lowercase character: 'GitHubProvider' \nGitHubUserContentAPI.swift | 4 | Variable name should start with a lowercase character: 'GitHubUserContentProvider' \nGitHubUserContentAPI.swift | 50 | Variable name should start with a lowercase character: 'DefaultDownloadDestination' \nMoyaProviderSpec.swift | 8 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 513 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The library files were changed...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+ReactiveSpec.swift | 288 | Prefer != nil over let _ = \nMoyaProvider+ReactiveSpec.swift | 60 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider+ReactiveSpec.swift | 61 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider+ReactiveSpec.swift | 62 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider+ReactiveSpec.swift | 63 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider+ReactiveSpec.swift | 152 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider+ReactiveSpec.swift | 153 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider+ReactiveSpec.swift | 154 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider+ReactiveSpec.swift | 155 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nMoyaProvider+RxSpec.swift | 179 | Prefer != nil over let _ = \nMoyaProviderSpec.swift | 862 | File should contain 400 lines or less: currently contains 862 \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 7 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 513 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSingle+Response.swift | 9 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestHelpers.swift | 3 | Limit vertical whitespace to a single empty line. Currently 2. \nSingle+MoyaSpec.swift | 258 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 768 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 770 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 774 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 780 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 787 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 790 | Lines should not have trailing whitespace. \nMoyaProviderSpec.swift | 892 | File should contain 400 lines or less: currently contains 892 \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 7 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 530 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 94 | Function should have 5 parameters or less: it currently has 7 \nMoyaProviderSpec.swift | 862 | File should contain 400 lines or less: currently contains 862 \nTestHelpers.swift | 3 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 7 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 510 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 212 | Function should have complexity 10 or less: currently complexity equals 14 \nMoyaProvider+Internal.swift | 94 | Function should have 5 parameters or less: it currently has 7 \nMoyaProviderSpec.swift | 737 | Opening braces should be preceded by a single space and on the same line as the declaration. \nMoyaProviderSpec.swift | 769 | Opening braces should be preceded by a single space and on the same line as the declaration. \nMoyaProviderSpec.swift | 868 | File should contain 400 lines or less: currently contains 868 \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 7 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 516 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 950 | File should contain 400 lines or less: currently contains 950 \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 7 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 571 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPackage.swift | 9 | Collection literals should not have trailing commas. \nPackage.swift | 15 | Collection literals should not have trailing commas. \nPackage.swift | 32 | Collection literals should not have trailing commas. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPackage.swift | 9 | Collection literals should not have trailing commas. \nPackage.swift | 15 | Collection literals should not have trailing commas. \nPackage.swift | 32 | Collection literals should not have trailing commas. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAccessTokenPlugin.swift | 69 | Lines should not have trailing whitespace. \nAccessTokenPlugin.swift | 74 | Lines should not have trailing whitespace. \nAccessTokenPlugin.swift | 77 | Lines should not have trailing whitespace. \nAccessTokenPlugin.swift | 81 | Lines should not have trailing whitespace. \nAccessTokenPlugin.swift | 84 | Lines should not have trailing whitespace. \nAccessTokenPluginSpec.swift | 49 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 910 | File should contain 400 lines or less: currently contains 910 \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 7 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 543 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 918 | File should contain 400 lines or less: currently contains 918 \nTestHelpers.swift | 55 | Operators should be surrounded by a single whitespace when defining them. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderSpec.swift | 7 | Type body should span 350 lines or less excluding comments and whitespace: currently spans 549 lines \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Big PR, try to keep changes sm...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nBig PR, try to keep changes smaller if you can\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Rx.swift | 39 | Lines should not have trailing whitespace. \nMoyaProvider+Rx.swift | 44 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The library files were changed...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: PR is classed as Work in Progr...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Consider adding supporting doc...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 204 | Function should have complexity 10 or less: currently complexity equals 14 \nMoyaProvider+Internal.swift | 93 | Function should have 5 parameters or less: it currently has 7 \nTask.swift | 11 | Lines should not have trailing whitespace. \nEndpointSpec.swift | 132 | Lines should not have trailing whitespace. \nEndpointSpec.swift | 154 | Lines should not have trailing whitespace. \nEndpointSpec.swift | 160 | Lines should not have trailing whitespace. \nEndpointSpec.swift | 164 | Lines should not have trailing whitespace. \nEndpointSpec.swift | 171 | Lines should not have trailing whitespace. \nAnyEncodable.swift | 12 | Lines should not have trailing whitespace. \nAnyEncodable.swift | 16 | Lines should not have trailing whitespace. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpoint.swift | 81 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nViewController.swift | 116 | Unused parameter \"action\" in a closure should be replaced with _. \nViewController.swift | 9 | Lines should not have trailing whitespace. \nViewController.swift | 12 | Lines should not have trailing whitespace. \nViewController.swift | 16 | Lines should not have trailing whitespace. \nViewController.swift | 19 | Lines should not have trailing whitespace. \nViewController.swift | 26 | Lines should not have trailing whitespace. \nViewController.swift | 28 | Lines should not have trailing whitespace. \nViewController.swift | 43 | Lines should not have trailing whitespace. \nViewController.swift | 51 | Lines should not have trailing whitespace. \nViewController.swift | 55 | Lines should not have trailing whitespace. \nViewController.swift | 63 | Lines should not have trailing whitespace. \nViewController.swift | 70 | Lines should not have trailing whitespace. \nViewController.swift | 72 | Lines should not have trailing whitespace. \nViewController.swift | 78 | Lines should not have trailing whitespace. \nViewController.swift | 87 | Lines should not have trailing whitespace. \nViewController.swift | 92 | Lines should not have trailing whitespace. \nViewController.swift | 103 | Lines should not have trailing whitespace. \nViewController.swift | 105 | Lines should not have trailing whitespace. \nViewController.swift | 107 | Lines should not have trailing whitespace. \nViewController.swift | 111 | Lines should not have trailing whitespace. \nViewController.swift | 114 | Lines should not have trailing whitespace. \nViewController.swift | 127 | Lines should not have trailing whitespace. \nViewController.swift | 131 | Lines should not have trailing whitespace. \nViewController.swift | 135 | Lines should not have trailing whitespace. \nViewController.swift | 137 | Lines should not have trailing whitespace. \nViewController.swift | 141 | Lines should not have trailing whitespace. \nMultiMoyaProvider.swift | 15 | Lines should not have trailing whitespace. \nMultiMoyaProvider.swift | 17 | Lines should not have trailing whitespace. \nMultiMoyaProvider.swift | 25 | Lines should not have trailing whitespace. \nMultiMoyaProvider.swift | 34 | Lines should not have trailing whitespace. \nMultiMoyaProvider.swift | 35 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nObservable+MoyaSpec.swift | 6 | Type body should span 200 lines or less excluding comments and whitespace: currently spans 229 lines \nSignalProducer+MoyaSpec.swift | 10 | Type body should span 200 lines or less excluding comments and whitespace: currently spans 213 lines \nSingle+MoyaSpec.swift | 6 | Type body should span 200 lines or less excluding comments and whitespace: currently spans 217 lines \nTestHelpers.swift | 55 | Operators should be surrounded by a single whitespace when defining them. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 204 | Function should have complexity 10 or less: currently complexity equals 14 \nMoyaProvider+Internal.swift | 93 | Function should have 5 parameters or less: it currently has 7 \nTargetType.swift | 5 | Lines should not have trailing whitespace. \nEndpointSpec.swift | 268 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nEndpointSpec.swift | 269 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTestHelpers.swift | 55 | Operators should be surrounded by a single whitespace when defining them. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 204 | Function should have complexity 10 or less: currently complexity equals 14 \nMoyaProvider+Internal.swift | 93 | Function should have 5 parameters or less: it currently has 7 \nEndpointSpec.swift | 268 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nEndpointSpec.swift | 269 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>podspec</code> was u...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe podspec was updated, but there were no changes in either the Cartfile nor Cartfile.resolved. Did you forget updating Cartfile or Cartfile.resolved?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPackage.swift | 44 | Lines should not have trailing whitespace. \nPackage.swift | 9 | Collection literals should not have trailing commas. \nPackage.swift | 15 | Collection literals should not have trailing commas. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: PR is classed as Work in Progr...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Big PR, try to keep changes sm...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nBig PR, try to keep changes smaller if you can\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nObservable+MoyaSpec.swift | 6 | Type body should span 200 lines or less excluding comments and whitespace: currently spans 318 lines \nObservable+MoyaSpec.swift | 492 | File should contain 400 lines or less: currently contains 492 \nSignalProducer+MoyaSpec.swift | 10 | Type body should span 200 lines or less excluding comments and whitespace: currently spans 302 lines \nSignalProducer+MoyaSpec.swift | 474 | File should contain 400 lines or less: currently contains 474 \nSingle+MoyaSpec.swift | 6 | Type body should span 200 lines or less excluding comments and whitespace: currently spans 306 lines \nSingle+MoyaSpec.swift | 484 | File should contain 400 lines or less: currently contains 484 \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEndpointSpec.swift | 274 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nEndpointSpec.swift | 275 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestHelpers.swift | 55 | Operators should be surrounded by a single whitespace when defining them. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestHelpers.swift | 55 | Operators should be surrounded by a single whitespace when defining them. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>podspec</code> was u...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe podspec was updated, but there were no changes in either the Cartfile nor Cartfile.resolved. Did you forget updating Cartfile or Cartfile.resolved?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>Cartfile</code> or <...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: PR is classed as Work in Progr...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: PR is classed as Work in Progr...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPackage.swift | 44 | Lines should not have trailing whitespace. \nPackage.swift | 9 | Collection literals should not have trailing commas. \nPackage.swift | 15 | Collection literals should not have trailing commas. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: The <code>podspec</code> was u...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nThe podspec was updated, but there were no changes in either the Cartfile nor Cartfile.resolved. Did you forget updating Cartfile or Cartfile.resolved?\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>Cartfile</code> or <...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: The <code>podspec</code> was u...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nThe podspec was updated, but there were no changes in either the Cartfile nor Cartfile.resolved. Did you forget updating Cartfile or Cartfile.resolved?\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nObservable+Response.swift | 62 | Lines should not have trailing whitespace. \nObservable+Response.swift | 72 | Lines should not have trailing whitespace. \nSingle+Response.swift | 62 | Lines should not have trailing whitespace. \nSingle+Response.swift | 72 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  3 Warnings: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          3 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nObservable+Response.swift | 62 | Lines should not have trailing whitespace. \nObservable+Response.swift | 72 | Lines should not have trailing whitespace. \nSingle+Response.swift | 62 | Lines should not have trailing whitespace. \nSingle+Response.swift | 72 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the English docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the Chinese docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAccessTokenPlugin.swift | 80 | Lines should not have trailing whitespace. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  3 Warnings: Any changes to library code sh...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          3 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: The <code>Cartfile</code> or <...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the Chinese docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Consider adding supporting doc...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe podspec was updated, but there were no changes in either the Cartfile nor Cartfile.resolved. Did you forget updating Cartfile or Cartfile.resolved?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the Chinese docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  3 Warnings: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          3 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe podspec was updated, but there were no changes in either the Cartfile nor Cartfile.resolved. Did you forget updating Cartfile or Cartfile.resolved?\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProviderIntegrationTests.swift | 22 | Function should have complexity 10 or less: currently complexity equals 12 \nMoyaProviderIntegrationTests.swift | 27 | Force unwrapping should be avoided. \nMoyaProviderIntegrationTests.swift | 31 | Force unwrapping should be avoided. \nMoyaProviderIntegrationTests.swift | 35 | Force unwrapping should be avoided. \nMoyaProviderIntegrationTests.swift | 39 | Force unwrapping should be avoided. \nMoyaProviderIntegrationTests.swift | 22 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 196 lines \nNetworkLoggerPluginSpec.swift | 31 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 40 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 75 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 75 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 86 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 86 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 97 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 97 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 130 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 132 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 148 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 166 | Force unwrapping should be avoided. \nNetworkLoggerPluginSpec.swift | 8 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 70 lines \nTestHelpers.swift | 17 | Force unwrapping should be avoided. \nTestHelpers.swift | 38 | Force unwrapping should be avoided. \nTestHelpers.swift | 40 | Force unwrapping should be avoided. \nTestHelpers.swift | 79 | Force unwrapping should be avoided. \nTestHelpers.swift | 116 | Force unwrapping should be avoided. \nTestHelpers.swift | 118 | Force unwrapping should be avoided. \nTestHelpers.swift | 142 | Force unwrapping should be avoided. \nTestHelpers.swift | 205 | Force unwrapping should be avoided. \nTestHelpers.swift | 221 | Force unwrapping should be avoided. \nTestHelpers.swift | 221 | Force unwrapping should be avoided. \nTestHelpers.swift | 235 | Force unwrapping should be avoided. \nTestHelpers.swift | 235 | Force unwrapping should be avoided. \nTestHelpers.swift | 245 | Force unwrapping should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.089 (11.223) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 10.986 (11.133) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.401 (11.516) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 12.925 (13.072) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.241 (11.453) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.846 (11.975) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.325 (11.453) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 13.326 (13.466) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.740 (11.849) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the English docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.364 (11.601) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.471 (11.642) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.763 (11.934) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Consider <strong>also</strong>...\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nConsider also updating the English docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n:warning:\nThe Moya.podspec was updated, but there were no changes in Cartfile, Cartfile.resolved, Package.swift and Package.resolved.\nDid you forget to update Cartfile, Cartfile.resolved, Package.swift and Package.resolved?\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.231 (11.391) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.453 (11.623) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.947 (12.095) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>podspec</code> was u...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe podspec was updated, but there were no changes in either the Cartfile nor Cartfile.resolved. Did you forget updating Cartfile or Cartfile.resolved?\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.279 (11.417) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.197 (11.344) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 12.111 (12.232) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  3 Warnings: Any changes to library code sh...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          3 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 363 | Force unwrapping should be avoided. \nMoyaProvider+Internal.swift | 246 | Function should have complexity 10 or less: currently complexity equals 15 \nMoyaProvider+Internal.swift | 315 | Limit vertical whitespace to a single empty line. Currently 2. \nMoyaProvider+Internal.swift | 8 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 14 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 20 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 26 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 227 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 230 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 233 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 236 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 241 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 317 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 327 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 332 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 343 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 350 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 353 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 361 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 368 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 380 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 388 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 394 | Lines should not have trailing whitespace. \nMoyaProvider+Internal.swift | 121 | Function should have 5 parameters or less: it currently has 7 \nMoyaProvider+Internal.swift | 407 | File should contain 400 lines or less: currently contains 407 \nMoyaProvider.swift | 128 | Lines should not have trailing whitespace. \nMoyaProvider.swift | 102 | Function should have 5 parameters or less: it currently has 6 \nTargetType.swift | 26 | Lines should not have trailing whitespace. \nTargetType.swift | 28 | Lines should not have trailing whitespace. \nTargetType.swift | 36 | Lines should not have trailing whitespace. \nTargetType.swift | 40 | Lines should not have trailing whitespace. \nURL+Moya.swift | 192 | Function body should span 50 lines or less excluding comments and whitespace: currently spans 56 lines \nURL+Moya.swift | 21 | Lines should not have trailing whitespace. \nURL+Moya.swift | 25 | Lines should not have trailing whitespace. \nURL+Moya.swift | 28 | Lines should not have trailing whitespace. \nURL+Moya.swift | 34 | Lines should not have trailing whitespace. \nURL+Moya.swift | 44 | Lines should not have trailing whitespace. \nURL+Moya.swift | 47 | Lines should not have trailing whitespace. \nURL+Moya.swift | 55 | Lines should not have trailing whitespace. \nURL+Moya.swift | 58 | Lines should not have trailing whitespace. \nURL+Moya.swift | 67 | Lines should not have trailing whitespace. \nURL+Moya.swift | 71 | Lines should not have trailing whitespace. \nURL+Moya.swift | 76 | Lines should not have trailing whitespace. \nURL+Moya.swift | 81 | Lines should not have trailing whitespace. \nURL+Moya.swift | 87 | Lines should not have trailing whitespace. \nURL+Moya.swift | 90 | Lines should not have trailing whitespace. \nURL+Moya.swift | 93 | Lines should not have trailing whitespace. \nURL+Moya.swift | 97 | Lines should not have trailing whitespace. \nURL+Moya.swift | 102 | Lines should not have trailing whitespace. \nURL+Moya.swift | 111 | Lines should not have trailing whitespace. \nURL+Moya.swift | 118 | Lines should not have trailing whitespace. \nURL+Moya.swift | 125 | Lines should not have trailing whitespace. \nURL+Moya.swift | 128 | Lines should not have trailing whitespace. \nURL+Moya.swift | 133 | Lines should not have trailing whitespace. \nURL+Moya.swift | 135 | Lines should not have trailing whitespace. \nURL+Moya.swift | 147 | Lines should not have trailing whitespace. \nURL+Moya.swift | 158 | Lines should not have trailing whitespace. \nURL+Moya.swift | 161 | Lines should not have trailing whitespace. \nURL+Moya.swift | 165 | Lines should not have trailing whitespace. \nURL+Moya.swift | 171 | Lines should not have trailing whitespace. \nURL+Moya.swift | 189 | Lines should not have trailing whitespace. \nURL+Moya.swift | 191 | Lines should not have trailing whitespace. \nURL+Moya.swift | 195 | Lines should not have trailing whitespace. \nURL+Moya.swift | 198 | Lines should not have trailing whitespace. \nURL+Moya.swift | 203 | Lines should not have trailing whitespace. \nURL+Moya.swift | 206 | Lines should not have trailing whitespace. \nURL+Moya.swift | 211 | Lines should not have trailing whitespace. \nURL+Moya.swift | 217 | Lines should not have trailing whitespace. \nURL+Moya.swift | 219 | Lines should not have trailing whitespace. \nURL+Moya.swift | 224 | Lines should not have trailing whitespace. \nURL+Moya.swift | 251 | Lines should not have trailing whitespace. \nURL+Moya.swift | 257 | Lines should not have trailing whitespace. \nURL+Moya.swift | 260 | Lines should not have trailing whitespace. \nURL+Moya.swift | 272 | Files should have a single trailing newline. \nURL+Moya.swift | 80 | Shorthand syntactic sugar should be used, i.e. [Int] instead of Array \nURL+Moya.swift | 83 | Shorthand syntactic sugar should be used, i.e. [Int] instead of Array \nURL+Moya.swift | 88 | Shorthand syntactic sugar should be used, i.e. [Int] instead of Array \nURL+Moya.swift | 103 | Shorthand syntactic sugar should be used, i.e. [Int] instead of Array \nURL+Moya.swift | 108 | Shorthand syntactic sugar should be used, i.e. [Int] instead of Array \nURL+Moya.swift | 109 | Shorthand syntactic sugar should be used, i.e. [Int] instead of Array \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMoyaProvider+Internal.swift | 16 | Force casts should be avoided. \nMoyaProvider+Internal.swift | 17 | Force casts should be avoided. \nMoyaProvider+Internal.swift | 18 | Force casts should be avoided. \nURL+Moya.swift | 140 | Prefer checking isEmpty over comparing count to zero. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.401 (11.543) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.345 (11.511) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.962 (12.073) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Consider adding supporting doc...\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nThe Cartfile.resolved was updated, but there were no changes in Moya.podspec, Cartfile, Package.swift and Package.resolved.\nDid you forget to update Moya.podspec, Cartfile, Package.swift and Package.resolved?\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.535 (11.654) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.294 (11.425) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.792 (11.914) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.353 (11.477) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.397 (11.568) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.796 (11.887) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the Chinese docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.393 (11.536) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.381 (11.563) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 12.027 (12.150) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.753 (11.901) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.389 (11.551) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 12.279 (12.412) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.363 (11.503) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.514 (11.668) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.307 (11.409) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the Chinese docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.311 (11.452) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.291 (11.436) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 13.030 (13.151) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>Moya.podspec</code> ...\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Moya.podspec was updated, but there were no changes in Cartfile, Cartfile.resolved, Package.swift and Package.resolved.\nDid you forget to update Cartfile, Cartfile.resolved, Package.swift and Package.resolved?\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.664 (11.804) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.309 (11.465) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.546 (11.683) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>Moya.podspec</code> ...\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Moya.podspec was updated, but there were no changes in Cartfile, Cartfile.resolved, Package.swift and Package.resolved.\nDid you forget to update Cartfile, Cartfile.resolved, Package.swift and Package.resolved?\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.846 (11.995) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.043 (11.172) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.292 (11.398) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the English README. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.237 (11.464) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.337 (11.510) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.651 (11.817) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.277 (11.405) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.327 (11.487) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.853 (11.996) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider <strong>also</strong>...\n  3 Messages: iOS: Executed 253 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider also updating the English docs. For Chinese translations, request the modified file(s) to be added to the list here for someone else to translate, if you can\u2019t do so yourself.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.297 (11.445) seconds\n\n\n:book:\ntvOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.238 (11.395) seconds\n\n\n:book:\nmacOS: Executed 253 tests, with 0 failures (0 unexpected) in 11.706 (11.823) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: The <code>Moya.podspec</code> ...\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nThe Moya.podspec was updated, but there were no changes in Cartfile, Cartfile.resolved, Package.swift and Package.resolved.\nDid you forget to update Cartfile, Cartfile.resolved, Package.swift and Package.resolved?\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.546 (11.666) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.136 (11.306) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.318 (11.429) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.318 (11.479) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.274 (11.414) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.340 (11.455) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nThe library files were changed, but the tests remained unmodified. Consider updating or adding to the tests to match the library changes.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.507 (11.634) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.194 (11.342) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.750 (11.870) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  3 Messages: iOS: Executed 276 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 276 tests, with 0 failures (0 unexpected) in 11.742 (11.891) seconds\n\n\n:book:\ntvOS: Executed 276 tests, with 0 failures (0 unexpected) in 10.989 (11.131) seconds\n\n\n:book:\nmacOS: Executed 276 tests, with 0 failures (0 unexpected) in 12.203 (12.319) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.480 (11.607) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.097 (11.269) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.532 (11.644) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.364 (11.502) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.063 (11.189) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.413 (11.540) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  2 Warnings: Any changes to library code sh...\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          2 Warnings\n      \n\n\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.281 (11.434) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.195 (11.421) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.313 (11.453) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  4 Warnings: PR is classed as Work in Progr...\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          4 Warnings\n      \n\n\n\n\n:warning:\nPR is classed as Work in Progress\n\n\n:warning:\nAny changes to library code should be reflected in the Changelog. Please consider adding a note there and adhere to the Changelog Guidelines.\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n:warning:\nMoya.podspec, Cartfile and Cartfile.resolved were updated, but there were no changes in Package.swift and Package.resolved.\nDid you forget to update Package.swift and Package.resolved?\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.476 (11.670) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.082 (11.246) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.573 (11.730) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 254 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.275 (11.421) seconds\n\n\n:book:\ntvOS: Executed 254 tests, with 0 failures (0 unexpected) in 10.996 (11.143) seconds\n\n\n:book:\nmacOS: Executed 254 tests, with 0 failures (0 unexpected) in 11.075 (11.184) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: Consider adding supporting doc...\n  3 Messages: iOS: Executed 278 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nConsider adding supporting documentation to this change. Documentation can be found in the docs directory.\n\n\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 278 tests, with 0 failures (0 unexpected) in 13.202 (13.354) seconds\n\n\n:book:\ntvOS: Executed 278 tests, with 0 failures (0 unexpected) in 13.140 (13.299) seconds\n\n\n:book:\nmacOS: Executed 278 tests, with 0 failures (0 unexpected) in 13.575 (13.700) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  3 Messages: iOS: Executed 278 tests, with ...\n  0 Markdowns\n\n\n\n\n\n\n          3 Messages\n      \n\n\n\n\n:book:\niOS: Executed 278 tests, with 0 failures (0 unexpected) in 13.325 (13.483) seconds\n\n\n:book:\ntvOS: Executed 278 tests, with 0 failures (0 unexpected) in 13.065 (13.207) seconds\n\n\n:book:\nmacOS: Executed 278 tests, with 0 failures (0 unexpected) in 15.028 (15.138) seconds\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. ",
    "Ryan0520": "OK,I will try~\n. Moya_Logger: [16/05/2016 10:30:51] Request: <NSMutableURLRequest: 0x7fc7facbeb60> { URL: http://124.172.184.216:8080/open_api/api/?sign=f93404972addb2b806a7bcb5adbaa8c3&app_id=123 }\nMoya_Logger: [16/05/2016 10:30:51] Request Headers: [\"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\"]\nMoya_Logger: [16/05/2016 10:30:51] HTTP Request Method: POST\nMoya_Logger: [16/05/2016 10:30:51] Request Body: access_token=37921b0595da0c02166464bd7538e075fc8c6154&params=&service=contacts.list\nMoya_Logger: [16/05/2016 10:30:52] Response: <NSHTTPURLResponse: 0x7fc7fd022280> { URL: http://124.172.184.216:8080/open_api/api/?sign=f93404972addb2b806a7bcb5adbaa8c3&app_id=123 } { status code: 404, headers {\n    Connection = \"keep-alive\";\n    \"Content-Encoding\" = gzip;\n    \"Content-Type\" = \"text/html\";\n    Date = \"Mon, 16 May 2016 02:26:48 GMT\";\n    Server = \"nginx/1.4.6 (Ubuntu)\";\n    \"Transfer-Encoding\" = Identity;\n} }\n<html>\n<head><title>404 Not Found</title></head>\n<body bgcolor=\"white\">\n<center><h1>404 Not Found</h1></center>\n<hr><center>nginx/1.4.6 (Ubuntu)</center>\n</body>\n</html>\n.Success(Status Code: 404, Data Length: 177)\n. 404 Not Found is not come form my service,and when I use Alamofire buy default POST method,it is work. But it doesn't work in Moya! And, I don't know how to change the code.\n. I solve the problem, the result is my url is wrong, and I wonder know, why I set my URL is http://192.168.172.243/public_gateway/web/index.php?r=api&sign=c672431482bf5063f5d33a8654aecb41&app_id=123 ,but when I look the request Request: <NSMutableURLRequest: 0x7fa9485e9600> { URL: http://192.168.172.243/public_gateway/web/index.php/?r=api&sign=c672431482bf5063f5d33a8654aecb41&app_id=123 } It will insert / to index.php/?,and My orginal URL is index.php? not index.php/?, so it show 404 not found. I solve the problem to use\n```\nlet endpointClosure = { (target: GitHub) -> Endpoint in\n    let url = \"http://192.168.172.243/public_gateway/web/index.php?r=api&sign=c672431482bf5063f5d33a8654aecb41&app_id=123\"\nreturn Endpoint(URL: url,\n                sampleResponseClosure: {.NetworkResponse(200, target.sampleData)},\n                method: target.method,\n                parameters: target.parameters,\n                parameterEncoding: Moya.ParameterEncoding.JSON)\n\n}\nlet GitHubProvider = MoyaProvider(endpointClosure: endpointClosure,\n                                          plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)])\n```\nAnd It work!\n. If my URL is http://192.168.172.243/public_open_api/api?sign=c672431482bf5063f5d33a8654aecb41&app_id=123, my baseURL is http://192.168.172.243/public_open_api/api?, the sign and app_id is change by parameters, how I change the code in MyTargetType?\n. Thanks very much, I solve the problem by do `let oauthEndpointClosure = { (target: OAuth) -> Endpoint in\n```\nlet baseURLString = target.baseURL.absoluteString\nlet dict = target.parameters?[\"params\"]\nvar sign = \"\"\nif let dict = dict as? [String : AnyObject] {\n    sign = signWithParamters(dict)\n}\nlet url = baseURLString + \"sign=\" + sign + \"&app_id=123\"\nreturn Endpoint(URL: url,\n                sampleResponseClosure: {.NetworkResponse(200, target.sampleData)},\n                method: target.method,\n                parameters: target.parameters,\n                parameterEncoding: Moya.ParameterEncoding.JSON)\n```\n}\nlet OAuthAPI = MoyaProvider(endpointClosure: oauthEndpointClosure,\n                                    plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)])` It's work~ But I wonder know, Can I use the ObjectMapper to change the data to JSON object? \n. OK, thanks your adive!\n. ",
    "squarefrog": "Thinking about this, this could be achieved by overriding the endpointClosure for the Provider. However, on reflection it does seem like a code smell. Doing it this way would rely on a user reading through the documentation to know they have to provide this custom endpoint when setting up the Provider.\nAt least with the code above it is obvious that this parameter is required. I'll close this issue \ud83d\ude04\n. ",
    "iwheelbuy": "Release server was 404... My bad...\n. ",
    "nickolayl": "Yes. Sure. We will upload our app in a private repo and give you access as we do think that the code should be seen as a whole and not as a except from the context.\nIn short we have chain of two requests (rxswift). The first one goes to HTTP and works well, the subsequent one calls HTTPS youtube API and fails with the symptoms I described above.\nIt is reproduced on iOS 9 only. iOS 8 seems to not having this issue.\nFor App Transport Security the following settings are applied:\n<key>NSAppTransportSecurity</key>\n<dict>\n  <key>NSAllowsArbitraryLoads</key>\n      <true/>\n</dict>\n. Hey Ash. Just sent you the code that reproduces the issue. We just broke our heads searching for the cause of the issue but still no luck.\nPlease check you e-mail.\n. 1. Device: any iPhone physical (not simulator) device\n2. wifi connection - excellent. Internet connection 10Mbps (i.e. good)\n3. Server logs. As you could see there are two requests sent in a row. The first one is to our server and it's 200OK. The next one HTTPS sent to youtube. We cannot get youtube server logs.\n4. The important thing - if you will allow ~5+ seconds to pass after the moment you unlocked device and until the moment you pull to refresh for the news - everything will work ok. Also the second pull-to-refresh works ok.\n. Ash, sorry what's the \"PR\"? Possible resolution?\n. @ashfurrow please re-open the issue. This issue still exists in the latest version of Moya.\nAsked on StackOverflow\nhttp://stackoverflow.com/questions/38900522/ios-https-get-empty-response-from-server-after-the-app-returns-back-from-the-l\n. Don't know. Need to check. Who can check fast?\n. ",
    "khoitruongminh": "Hi @iSame7, can you share the code for better explaining?\n. ",
    "sebbean": "GET is meant as simply a request to a URL. Thus URL encoding is the only real thing that makes sense.\nI'd try switching over to POST.\n. ",
    "awclives": "Got it.  Thank you.\n. ",
    "kyleYang": "I use a file ,but the all no in some class\n``` swift\nlet endpointClosure = { (target: USRequestAPI) -> Endpoint in\nlet url = target.baseURL.absoluteString+target.path\nlet headers = [\"access_token\":\"6ae51080ce36493f813a1d8ed073fb36\"] //userid  = 61\n\nlet endpoint: Endpoint<USRequestAPI> = Endpoint<USRequestAPI>(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters,parameterEncoding:parameterEncoding(target),httpHeaderFields:headers)\n\n// Sign all non-authenticating requests\nreturn endpoint\n\n}\nfunc parameterEncoding(target: USRequestAPI) -> Moya.ParameterEncoding {\n    switch target {\n        default:\n        return .JSON\n    }\n}\nlet USProvider = RxMoyaProvider(endpointClosure: endpointClosure, plugins: [NetworkLoggerPlugin()])\n```\nI use e RxMoyaProvider extension\n``` swift\n    public func requestNoResponseMapper(token: Target) -> Observable {\n    // Creates an observable that starts a request each time it's subscribed to.\n    return Observable.create { [weak self] observer in\n        let cancellableToken = self?.request(token) { result in\n            switch result {\n            case let .Success(response):\n                var validate : String?\n\n                do {\n                    validate = try self?.validateResponse(response)\n                }catch{\n                    observer.onError(error)\n                }\n\n                if let _ = validate {\n                    observer.onError(USError.ResponseValidate(validate!))\n                    return\n                }\n\n                observer.onCompleted()\n\n                break\n            case let .Failure(error):\n                observer.onError(USError.NetworkError(error.nsError.localizedDescription))\n            }\n        }\n\n        return AnonymousDisposable {\n            cancellableToken?.cancel()\n        }\n    }\n}\n\n```\nSo ,every time I use \n``` swift\n  let checkModel : Observable = USProvider.requestObjectMapper(.CheckPortfolio(version : version))\n    checkModel.subscribeNext { (checkModel) in\n\n\n        self.saveCheckModel(checkModel)\n\n\n    }.addDisposableTo(disposeBag)\n\n    checkModel.subscribeError { (error) in\n\n\n    }.addDisposableTo(disposeBag)\n\n```\nto get the data.\nIn the console , I can find two log\n\u001b[fg0,255,0;\u001b[bg;2016-06-07 09:34:55 [Info] [main] [NetworkLogger.swift:32] willSendRequest(_:target:) > Optional(<NSMutableURLRequest: 0x7fa46c2ba820> { URL: http://192.168.40.203:8000/webull-app-center/api/portfolios/check?version=4396 })\u001b[;\n\u001b[fg0,255,0;\u001b[bg;2016-06-07 09:34:55 [Info] [main] [NetworkLogger.swift:32] willSendRequest(_:target:) > Optional(<NSMutableURLRequest: 0x7fa46c182600> { URL: http://192.168.40.203:8000/webull-app-center/api/portfolios/check?version=4396 })\u001b[;\nIn the requestNoResponseMapper, I can receive two .Success response\nAlthough the log print will send request twice ,but when I subscribeNext, the only call once. \nBut if the request failed ,the Moya like to try to send request  many time (maybe 6 times)\n. @ashfurrow hello\npublic func request in a method in Moya's Moya+RxSwift \n``` swift\npublic func request(token: Target) -> Observable {\n// Creates an observable that starts a request each time it's subscribed to.\nreturn Observable.create { [weak self] observer in\nlet cancellableToken = self?.request(token) { result in\n    switch result {\n    case let .Success(response):\n        observer.onNext(response)\n        observer.onCompleted()\n        break\n        case let .Failure(error):\n            observer.onError(error)\n        }\n    }\n\n    return AnonymousDisposable {\n        cancellableToken?.cancel()\n    }\n}\n\n}\n```\nbut is use some extension by myself to parse the response, like \n``` swift\n public func requestObjectMapper(token: Target) -> Observable {\n    // Creates an observable that starts a request each time it's subscribed to.\n    return Observable.create { [weak self] observer in\n        let cancellableToken = self?.request(token) { result in\n            switch result {\n            case let .Success(response):\n                var validate : String?\n\n                do {\n                    validate = try self?.validateResponse(response)\n                }catch{\n                    observer.onError(error)\n                }\n\n                if let _ = validate {\n                    observer.onError(USError.ResponseValidate(validate!))\n                    return\n                }\n\n                do{\n                    let object : T = try response.mapObject()\n                    observer.onNext(object)\n                    observer.onCompleted()\n                }catch{\n                    observer.onError(error)\n                }\n\n                break\n            case let .Failure(error):\n                observer.onError(USError.NetworkError(error.nsError.localizedDescription))\n            }\n        }\n\n        return AnonymousDisposable {\n            cancellableToken?.cancel()\n        }\n    }\n}\n\n```\nIt's only parse response use the ObjectMapper \n. ",
    "litt1e-p": "thanks!\n. ",
    "Gurpartap": "Perhaps, something like this could work:\n`` swift\nenum APIProvider {\n    // returns an array of objects withapiPath` in each.\n    / Example: [\n        {\n            \"title\": \"Followers\",\n            \"apiPath\": \"/people_components/{userUUID}/followers\", \n        },\n        {\n            \"title\": \"Following\",\n            \"apiPath\": \"/people_components/{userUUID}/following\"\n        },\n        {\n            \"title\": \"Blocked\",\n            \"apiPath\": \"/people_components/{userUUID}/blocked\"\n        }\n    ] /\n    case PeopleComponents\ncase People(apiPath: String, userUUID: String)\n\n}\nextension APIProvider: TargetType {\n    var baseURL: NSURL { return NSURL(string: \"http://localhost:3000\")! }\nvar path: String {\n    switch self {\n\n    case let .PeopleComponents:\n        return \"/people_components\"\n\n    case let .People(apiPath, userUUID):\n        return apiPath.stringByReplacingOccurrencesOfString(\"{userUUID}\", withString: \"\\(userUUID)\")\n\n}\n\n}\n// ...\n```\n. ",
    "dropski": "my bad, there should by NSData instead of NSObject, please close the issue. Sorry.\n. ",
    "brentleyjones": "\nRxSwift: ??\n\nWith ReactiveX/RxSwift@9b1583f2e365ef78d250be278ca5838076b58095 RxSwift supports Swift 2.3. It doesn't have the correct build flag.\n. I highly recommend a Swift 2.3 build, even as a version bump, before going to Swift 3. Alamofire had breaking changes so without this people won't be able to use pre-Swift 3 on Xcode 8. I know I'll be using Xcode 8 and Swift 2.3 for a while after the release.\n. ",
    "aaroncrespo": "Another thing to think about is if it makes sense to skip 2.3 and go straight to 3.0 or how to support 3 versions. The #if swift() tests don't work so well when swift 3.0 is in the mix. \n. Looks like Alamofire is about to cut a 3.5.0 release which will have both swift 2.2 and swift 2.3 support. Then Moya.spec can point to that.\nhttps://github.com/Alamofire/Alamofire/milestone/27\nI think this is the  dependency to push a release supporting 2.3\n. Looks like the length of the diff is causing my comments to be misplaced. . One thing I found missing that is a nice to have is that the Test Scheme is not set in the Library's Scheme as a Test Target. \u2318 + U will build the library and run the tests with the Library selected if it is set. Otherwise the test scheme will need to be selected for \u2318 + U to work.\nI also think code coverage is turned off (not sure this is tracked).. I think anyone on a more recent version of Xcode will see prompts to update their project settings.. what do you think about pulling this out into a versioned bash script? \ncalling with $(SRCROOT)/scripts/copy_frameworks.sh. diff\n+               LastSwiftUpdateCheck = 0730;. diff\n+           shellScript = \"#!/bin/sh\\n\\ncase \\\"$PLATFORM_NAME\\\" in\\n    macosx) plat=Mac;;\\n    iphone*) plat=iOS;;\\n    watch*) plat=watchOS;;\\n    appletv*) plat=tvOS;;\\n    *) echo \\\"error: Unknown PLATFORM_NAME: $PLATFORM_NAME\\\"; exit 1;;\\nesac\\n\\nfor (( n = 0; n < SCRIPT_INPUT_FILE_COUNT; n++ )); do\\n    VAR=SCRIPT_INPUT_FILE_$n\\n    framework=$(basename \\\"${!VAR}\\\")\\n    export SCRIPT_INPUT_FILE_$n=\\\"$SRCROOT\\\"/Carthage/Build/$plat/\\\"$framework\\\"\\ndone\\n\\n/usr/local/bin/carthage copy-frameworks || exit\\n\\nfor (( n = 0; n < SCRIPT_INPUT_FILE_COUNT; n++ )); do\\n    VAR=SCRIPT_INPUT_FILE_$n\\n    source=${!VAR}.dSYM\\n    dest=${BUILT_PRODUCTS_DIR}/$(basename \\\"$source\\\")\\n    ditto \\\"$source\\\" \\\"$dest\\\" || exit\\ndone\";. Interested to hear more about the tool you used to generate a project like this.... ",
    "iiiyu": "I also met the same problem, @Ravichandrane can you tell me is how to solve.\n. @Ravichandrane  Thanks for your reply.\nMoyaProvider is work.\nBut RxMoyaProvider response is NSURLResponse. \nSo I don't use RxMoyaProvider. \nThanks again.\n. ",
    "Ravichandrane": "@iiiyu On your success you just need to do that : \nswift\nif let httpResponse = value.response as? NSHTTPURLResponse {\n   debugPrint(httpResponse.allHeaderFields)\n}\n. ",
    "IgorBelyayev": "What is the way to do this with reactive extensions?. ",
    "DeepMissea": "'dispatch_semaphore' is a better one, I'll pull a request later.\n. Return previous requests is better, but is that the things Moya should do? I think it's the data-model's job. And we should not confuse the data-model with the service-model. this is my opinion.... OK\uff0cit seems a good idea ~. I think SingleURLTarget is useless. but the TargetType default extension is a good change.. ",
    "lucasp90": "@ashfurrow: Sorry, I forgot to mention it. That was my first attempt, and it also sends false there.\nI've tried to make the request via postman and it succeeded with the proper value. Maybe the specification of the request helps to detect if it's a server error or Moya's configuration one.\n. @ashfurrow I'm detecting it on the client side. The parameter is being sent as 0 or 1 but I guess I'm missing to track the real request body being sent to the server. I'll try to use that plugin and see what happens\n. @jasl I've tried to do what you've said and got the same result.\nI've finally managed to save the value by sending the value as a string: \"true\" or \"false\", but I'm not really sure what's causing the boolean to fail.\nswift\n  public var parameters: [String: AnyObject]? {\n    switch self {\n   ...\n    case .Foo(_, let data1, let data2, let data3, bool data4):\n      return [\n        \"data1\": data1,\n        \"data2\": data2,\n        \"data3\": data3,\n        \"somethingBool\": \"\\(data4)\"\n      ]\n    default:\n      return nil\n    }\n  }\n. Oh, sorry! I thought I'd answered after my issue was detected! \nI think my question has been properly answered :)\nWould it be a good idea to add examples about passing different parameter types to an endpoint?\n. I think that's a good place for them.\n. Yeah, of course!! \ud83d\udc4d \n. I find the Realm template really useful.\n. I agree with @devxoul, templates are helpful for newcomer contributors.\n. I agree with @devxoul, templates are helpful for newcomer contributors.\n. Great! Didn't know about it. Fixed it \ud83d\udc4d\n. ",
    "at-daonguyen": "hope this help https://gist.github.com/at-daonv/af317a2c41c6336810ab48c0d90f323d\n. ",
    "jefflovejapan": "No sweat! I was having issues building master, so I followed this recommendation and branched from 6.5.0 (where it worked), but I saw that there were some changes to Moya.request in master, so figured it was better to apply the patch in both places there even though I couldn't get it to build locally.\n. I see that there are now two failing tests, here and here. Since these appear to be the opposite of the desired behavior in #531 it might make sense to remove them.\n. @colinta No you're right, this was an oversight on my part. Thanks for fixing!\n. ",
    "solidfox": "Sorry about the late response to an incredibly quick response! This does indeed look like it's the way to do it. Just the answer I was looking for, many thanks! \n. ",
    "mbuchetics": "carthage update --platform iOS\n. Seems to be working fine with Moya 7.0 and RxSwift 2.6. Looks like the problem was with RxSwift 2.5.0 and is fixed. Thanks for your help!\n. @BasThomas why do you \"really need a [String: Any] for parameters.\"? I see that it's the case right now (and also with Alamofire) but you could implement a new ParameterEncoding that takes a Data object instead of [String: Any] as its input. \nI really think that the built-inEncodable and Decodable protocols are the way to go forward.. I like your approach with the enum. \nAnother approach would be to keep the parameters as is and add an additional data property on TargetType. A new ParameterEncoding, let's call it DataEncoding could take the data and simply set it as HTTPBody whereas other encodings could behave the same way they are doing right now.\nThis would not break any existing code.\nBut I wouldn't worry to much about breaking existing apps if the migration is simple and easy to do. There were changes of this scope before (ParameterEncoding, task).. You are correct with the added complexity.\nHowever, I don't think yo necessarily need to split it up between the two options. There could be a case where you would want both, the parameters and the data, e.g. if you have a request that needs both, a URL query string and a HTTP body. So far, it always required workarounds such as https://github.com/Moya/Moya/issues/314\nThe ParameterEncoding could decide whether it uses parameters, data or both. \nBut as I said before, I also like your enum solution.. I think the combination of URL query parameters and an Encodable would also\nbe useful.\nNot sure if those rather obscure variants should be in the enum or if there\nis a better way to handle those.\nOn 23 June 2017 at 16:16:49, Cihat G\u00fcnd\u00fcz (notifications@github.com) wrote:\n\nHere's an idea on how we could cover the one case with url params and body\ndata with my approach:\nenum RequestData {\n    case jsonEncodable(encodable: Encodable)\n    case parameterEncoding(parameters: [String: Any], parameterEncoding: ParameterEncoding)\n    case urlAndBodyParameterEncoding(urlParameter: [String: Any], bodyParameters: [String: Any], bodyEncoding: ParameterEncoding)\n}\nThe case urlAndBodyParameterEncoding would specify both URL parameters\nand body parameters. The body parameter encoding can be further\nspecified (so people can choose between JSONEncoding, PropertyListEncoding\nor any of their custom encoding).\nI think this is a better approach than to expect a return type of\n[RequestData].\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/1135#issuecomment-310677003, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAM6_XeB_Z613PyljaFNBJQ8uSkY13LOks5sG8jRgaJpZM4OCUcf\n.\n. I agree that it would make sense to have this supported via Alamofire and I am surprised that there is no discussion of this over there already. \nWhy do you think that Swift 4 has a long way to go? I think the new feature are all defined and most of them implemented, so I'd rather see them supported in Moya sooner than later. The transition to Swift 4 will be a lot quicker than with Swift 3.. \n",
    "ikesyo": "See https://github.com/ReactiveX/RxSwift/issues/793#issuecomment-232515707.\n. #445 is a Swift's binary compatibilty issue, so that is not related to this.\n. ",
    "alexdoloz": "Thanks for answer @ashfurrow. I don't know how to implement this in Moya but I would suggest this interface for end user:\npublic func request(target: Target, progressClosure: ((progress: NSProgress) -> Void)? = nil, completion: Moya.Completion) -> Cancellable. Probably this interface won't break current code (not sure how it will work with trailing closure syntax though).\n. Hello again, guys! Thank you for all your hard work implementing this feature. However, i tried to integrate it into application and noticed it doesn't work as I expect. For some reason, bytesExpected is always -1, therefore progress is always 1.0. \nProgress: ProgressResponse(totalBytes: 21654, bytesExpected: -1, response: nil)\nDo you have any ideas about it?\n. Okay, I figure out what happened. Server doesn't return Content-Length header. I tested other resources and progress works fine (provided these servers return Content-Length). So it was my mistake, no need to create new issue :)\n. ",
    "sendyhalim": "@ashfurrow Yep, I found out the build was broken while building with Carthage, then I dig deeper to find out. Pull request on RxSwift that bumps osx version to 10.10\nhttps://github.com/ReactiveX/RxSwift/pull/774\nI think we could explicitly set RxSwift version to 2.5.x on Moya's Cartfile?  \nEdit\nEven if we set RxSwift version to 2.5.x, sooner or later we would need to support swift 3 and need to upgrade RxSwift.\n. @ashfurrow Cool \ud83c\udf7b !\n. Sure, that's better! \ud83d\ude04 \n. ",
    "bryanbartow": "Now gives me this error:\nCannot convert value of type '(ICanHazProvider) -> Endpoint<ICanHazProvider>' to expected argument type '_ -> Endpoint<_>'\nMy endpoint looks like this:\n``` Swift\nlet endpointClosure = { (target: ICanHazProvider) -> Endpoint in\nlet url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString\nvar encoding: Moya.ParameterEncoding = .JSON\nswitch target.method {\n  case .GET:\n    encoding = .URL\n  default:\n    encoding = .JSON\n  }\nlet endpoint: Endpoint = Endpoint(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters, parameterEncoding: encoding)\nreturn endpoint\n}\n```\n. I should clarify a bit: Error is on the next line:\nSwift\nhazAPI = MoyaProvider<ICanHazProvider>(endpointClosure: endpointClosure, requestClosure: requestClosure)\n. @ashfurrow Is this a known issue or are we all doing something wrong? Any help would be greatly appreciated.\n. @ashfurrow Well, as I was preparing the example project, I realized that if I omit the variable type declarations in the closure it seems to compile and work fine. So I changed\n``` Swift\nlet requestClosure = { (endpoint: Moya.Endpoint, done: Result -> Void) in\n  let request = endpoint.urlRequest.mutableCopy() as! NSMutableURLRequest\nif let token = self.getToken() {\n    request.setValue(token, forHTTPHeaderField: \"token\")\n  }\nreturn done(.Success(request))\n}\n```\nto\n``` Swift\nlet requestClosure: MoyaProvider.RequestClosure = { endpoint, done in\n  let request = endpoint.urlRequest.mutableCopy() as! NSMutableURLRequest\nif let token = self.getToken() {\n    request.setValue(token, forHTTPHeaderField: \"token\")\n  }\ndone(.Success(request))\n}\n```\n. @sunshinejr Changing my code to your suggestion yields the error in my original post in this issue:\nUnable to infer closure return type in current context\n. @ashfurrow @sunshinejr I'm starting to wonder if this has something to do with the Result library, which I'm using elsewhere in my project...\n. @BasThomas I would think so. Not sure about everyone else, but my issue has been resolved and I'm the original reporter ;)\n. Just a heads up, I'm using 8.0 Beta 2 in a framework project I'm working on and this is giving me fits. Using @RamwiseMatt solution in my endpoint closure:\n``` Swift\nlet endpointClosure = { (target: RebatesProvider) -> Endpoint in\n  let url = target.baseURL.appendingPathComponent(target.path).absoluteString\n  var encoding: Moya.ParameterEncoding = JSONEncoding()\nswitch target.method {\n    case .GET:\n      encoding = URLEncoding()\n    default:\n      encoding = JSONEncoding()\n  }\nlet endpoint: Endpoint = Endpoint(URL: url, sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters, parameterEncoding: encoding)\nreturn endpoint\n}\n```\ngives me the following compiler errors:\nUndefined symbols for architecture x86_64:\n  \"type metadata for Alamofire.URLEncoding\", referenced from:\n      function signature specialization <Arg[0] = Owned To Guaranteed> of OffersKit.Rebates.(init () -> OffersKit.Rebates).(closure #1) in Rebates.o\n  \"type metadata for Alamofire.JSONEncoding\", referenced from:\n      function signature specialization <Arg[0] = Owned To Guaranteed> of OffersKit.Rebates.(init () -> OffersKit.Rebates).(closure #1) in Rebates.o\n  \"protocol witness table for Alamofire.URLEncoding : Alamofire.ParameterEncoding in Alamofire\", referenced from:\n      function signature specialization <Arg[0] = Owned To Guaranteed> of OffersKit.Rebates.(init () -> OffersKit.Rebates).(closure #1) in Rebates.o\n  \"protocol witness table for Alamofire.JSONEncoding : Alamofire.ParameterEncoding in Alamofire\", referenced from:\n      function signature specialization <Arg[0] = Owned To Guaranteed> of OffersKit.Rebates.(init () -> OffersKit.Rebates).(closure #1) in Rebates.o\n  \"static Alamofire.URLEncoding.default.getter : Alamofire.URLEncoding\", referenced from:\n      function signature specialization <Arg[0] = Owned To Guaranteed> of OffersKit.Rebates.(init () -> OffersKit.Rebates).(closure #1) in Rebates.o\n  \"static Alamofire.JSONEncoding.default.getter : Alamofire.JSONEncoding\", referenced from:\n      function signature specialization <Arg[0] = Owned To Guaranteed> of OffersKit.Rebates.(init () -> OffersKit.Rebates).(closure #1) in Rebates.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nCommenting out my endpoint closure and removing it from the provider initializer causes everything to work just fine.\n. @sunshinejr Although I believe you had renamed the method cases in master by the time this came up, pod specs only allow you to point to releases and the 8.0.0 beta 2 tag/release still had uppercase cases. Either way, I don't think that's the issue.\n@marcelofabri I'll give that a shot.\n. ",
    "dccarmo": "Having a related issue. \nIf I have this:\n``` swift\nprivate let authenticatedRequestClosure =  {\n    (endpoint: Endpoint, done: MoyaProvider.RequestResultClosure) in\n    let request = endpoint.urlRequest\nGlobalOAuth.authenticateRequest(request, completion: {\n    result in\n    switch result {\n    case .Success(let signedInRequest):\n        done(Result<NSURLRequest, Moya.Error>.Success(signedInRequest))\n\n    case .Failure(let error):\n        done(Result<NSURLRequest, Moya.Error>.Failure(.Underlying(error)))\n    }\n})\n\n}\n```\nIt gives me:\n\nBut if I have this:\n``` swift\nprivate let authenticatedRequestClosure =  {\n    (endpoint: Endpoint, done: Result -> Void) in\n    let request = endpoint.urlRequest\nGlobalOAuth.authenticateRequest(request, completion: {\n    result in\n    switch result {\n    case .Success(let signedInRequest):\n        done(Result<NSURLRequest, Moya.Error>.Success(signedInRequest))\n\n    case .Failure(let error):\n        done(Result<NSURLRequest, Moya.Error>.Failure(.Underlying(error)))\n    }\n})\n\n}\n```\nIt gives me:\n\n. @sunshinejr omitting the Result type did the trick, thanks!\n. ",
    "kamil-tomaszewski": "I think I'm lost too with the same error for endpointClosure. I'm out of ideas :(\n\nUPDATE:\nI've tried to use this in the Demo.xcworkspace project and it also fails with the exact same reason:\nswift\n let endpointClosure: MoyaProvider.EndpointClosure = { (target: GitHub) -> Endpoint<GitHub> in\n            let url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString\n            let endpoint: Endpoint<GitHub> = Endpoint<GitHub>(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n            return endpoint.endpointByAddingHTTPHeaderFields([\"APP_NAME\": \"MY_AWESOME_APP\"])\n        }\n. So - the issue is really weird.\nIf you do:\n``` swift\nlet endpointClosure = { (target: GitHub) -> Endpoint in\n            let url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString\n            let endpoint: Endpoint = Endpoint(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n            return endpoint\n        }\n_ = MoyaProvider(endpointClosure: endpointClosure)\n```\nEverything is peachy.\nIf you pass all the parameters, even if you copy them from the default implementation of init it gets the above result. So:\n1. The issue isn't with endpointClosure.\n2. Issue is with Xcode? compiler? I have no idea and unfortunately after being stuck for one day with this I don't have more time to dig deeper\n. ",
    "zhaoyunyi": "@ashfurrow  thanks let endpointClosure: MoyaProvider.EndpointClosure can slove it, but \nMoyaProvider.RequestClosure  can not \n. How/where to set the HTTP JSON body...this code is unusefule\n. not any status code return, this request is failed\n. why get this error , i use OC call swift function\uff0cis this reason? swift project is fine.\n. I solve it , it is my mistake . \nswift\nclass xxx: NSObject {\n    let disposeBag = DisposeBag()\nxxxx\n}\nwill get this error\nuse static or shareInstance\n. use of undeclared type RxMoyaProvider...the same problem,how to slove\n. waiting for answer \uff0cthank \n. you are right , i check my Podfile and modify it.\nuse this can slove it\nruby\npod \"Moya/RxSwift\", :git => \"https://github.com/Moya/Moya\", :branch => \"swift-3.0\"\n. why is that  \"platform :ios, '8.0' \", moya 8.0.4 beta only support for IOS 9?. #782 I get it , i hope soon ,thanks . how to slove the empty network ?. no problem, can close this question @BasThomas . ```swift\nwildListViewModel.loading\n    .subscribe(onNext: { [weak self] (items: ResultArray) in\n    if let strongSelf = self {\n        if items.code == ResultAPICode.success.rawValue {\n            if let datas = items.data {\n            }\n        }\n    }\n}\n\n}, onError: { [weak self] (error: Error) in\n    // when i close network, have no error return this\n}, onCompleted: { [weak self] in\n    //when i close network, have no error return this either\n}, onDisposed: nil)\n.addDisposableTo(disposeBag)\n. @BasThomas thank for you help. yes, you are right, it is my mistake with my Reactive implementation . but i can get error again after my onError . I have some problem for   Reactive implementation, can you help me?swift\nrequest(strongSelf.userId , strongSelf.pageSize, strongSelf.pageNo)\n    .subscribe(onNext: { (items: ResultArray) in\n        if items.code == ResultAPICode.success.rawValue {\n            strongSelf.loading.onNext(items)\n        }, onError: { (error) in\n            self?.loading.onError(error) // there netError will return over agin , but can not sent this error to loading, \n        }, onCompleted: {\n    }, onDisposed: nil)\n.addDisposableTo(strongSelf.disposeBag)\n```. \nDo you have the same problem?. \n\n\n. ",
    "pixyzehn": "I've joined the organization. Thank you for your invitation. I've checked out your guidelines and its details. I'd like to involve the Moya in some form or other because I use it in my project.\n. ",
    "leoneparise": "Good design! Now we have support for download and upload with progress. \ud83d\udc4d  Great work!\n. So, do you want to catch and ignore the error?\n. Can you provide a sample using Alamofire and Moya so we can know what's happening?\nI saw that you return the same [NSData] array on parameters and you shouldn't do that. Here is an example of how to make a form with multipart-data:\nswift\nenum SomeAPI {\n  case CreatePost(message:String, coordinate:CLLocationCoordinate2D,\n        contentType:Post.ContentType, contentFile:NSURL)\n}\n``` swift\nextension SomeAPI: TargetType {\nvar path:String {\n    switch self {\n    case .CreatePost: return \"/posts\"\n    }\n  }\nvar method: Moya.Method {\n    switch self {\n    case .CreatePost: return .POST\n    }\n  }\nvar parameters: [String: AnyObject]? {\n    switch self {\n    case .CreatePost(let message, let coordinate, let contentType, _):\n      return [\n        \"message\": message,\n        \"lat\": coodrintate.latitude,\n        \"lon\": coodrintate.longitude,\n        \"type\": contentType.rawValue     \n      ]\n    }\n  }\nvar multipartBody: [MultipartFormData]? {\n    switch self {\n    case .CreatePost(, , let contentType, let contentFile):\n      switch contentType {\n      case .Image:\n          return [MultipartFormData(provider: .File(contentFile), name: \"files\", mimeType:\"image/jpeg\", fileName: \"photo.jpg\")]\n      case .Video:\n          return [MultipartFormData(provider: .File(contentFile), name: \"files\", mimeType:\"video/mp4\", fileName: \"video.mp4\")]\n      }\n    }\n  }\n}\n```\nThis sample will post a form with lat, lon, message, type and files properties. I'm using a File multipart but you can use NSData directly. \nAll your text inputs should be on parameters property as string and data on multipartBody (Moya will take care of the rest).\nBTW, I started the multipart upload implementation inside Moya. Today the code is much better than the first version, thanks to our great community :)\nThe lack of documentation is my fault too, I didn't have time to document this new feature and now I'm waiting for version 8.0 to document it properly (because it breaks our current API). For now, use this example to make your implementation and post here any question.\n. @rcholic Yes! only NSData should be on multipartBody everything else should be on parameters.\n. @rcholic Tell me if it's working now so I can close the Issue. :)\n. @mattfxyz Is it fixed? I saw that PR #581 was merged.\n. I'm documenting this feature but for next version (8.0), which changed a lot from version 7.0. You can use my comment on this issue https://github.com/Moya/Moya/issues/572 to guide you implementation. \n. .File can be used only with NSURL and .Data with NSData. You need to convert your UIImage to NSData to build the Multipart.\nTry this:\nswift\nvar multipartBody: [MultipartFormData]? {\n        switch self {\n        case .ChangeProfileImage(_, let profileImage, _):\n            guard let data = UIImageJPEGRepresentation(profileImage, 1.0) else { return nil }\n            return [MultipartFormData(provider: .Data(data), name: \"files\", mimeType:\"image/jpeg\", fileName: \"photo.jpg\")] \n        default:\n            return nil\n        }\n    }\n}\n. multipartBody param is an array of NSData. You can return the array pointing to the same name form parameter. That will be parsed by the server as an image array.\n. Use .subscribe(onError: { error in ... }). But it's not a good solution. Once the observable receives an error it unsubscribes.. Yes. The task is cancelled when observable is disposed.. For Version 8.0, uploads are done with task parameter. multipartBody was deprecated.. It's strange that your server is not accepting a PDF but it's accepting images. Can you do the same test with Alamofire directly?. We already have a ProgressResponse\n```swift\npublic struct ProgressResponse {\n    public let response: Response?\n    public let progressObject: Progress?\npublic init(progress: Progress? = nil, response: Response? = nil) {\n    self.progressObject = progress\n    self.response = response\n}\n\npublic var progress: Double {\n    return progressObject?.fractionCompleted ?? 1.0\n}\n\npublic var completed: Bool {\n    return progress == 1.0 && response != nil\n}\n\n}\n```\na method called requestWithProgress for both reactive extensions and two Observable operators to filter progress and response.\n```swift\nextension ObservableType where E == ProgressResponse {\n    /*\n     Filter completed progress response and maps to actual response\n     - returns: response associated with ProgressResponse object\n     /\n    public func filterCompleted() -> Observable {\n        return self\n            .filter { $0.completed }\n            .flatMap { progress -> Observable in\n                // Just a formatlity to satisfy the compiler (completed progresses have responses).\n                switch progress.response {\n                case .some(let response): return .just(response)\n                case .none: return .empty()\n                }\n            }\n    }\n/**\n Filter progress events of current ProgressResponse\n - returns: observable of progress events\n */\npublic func filterProgress() -> Observable<Double> {\n    return self.filter { !$0.completed }.map { $0.progress }\n}\n\n}\n```\nI don't think this PR will add anything that our current implementation is not handling.. No problem @scottrhoyt! Yeah, we can change the method names like progress and response to be more readable. But, in my head, this PR only adds complexity. A progress closure inside a observable? I can't agree with that.\nCurrently it is possible to track progress with method requestWithProgress. I'm closing this one.. This idea is really good! But there are some required properties like baseURL, path, parameters and method that must be included on all targets.\nParameters like sampleData, task and parameterEncoding, as @scottrhoyt pointed,  we should provide defaults if the Target doesn't implement them. That will make Moya much more flexible and easy to learn.. ",
    "simonxcheng": "Yes. Thanks.\n. ",
    "vzsg": "I don't think there's enough common ground to abstract AlamoFire (one request -> one response pattern) and Firebase (one subscription -> 0..N events in a stream), at least not on Moya's level. \nMoving the abstraction up a layer works nice though: RxSwift is great for mapping both variants into streams. (I use it all the time.)\n. I have mixed feelings about using a guard here.\nSure, under any other circumstance, forcing is a bad smell; but here it's a direct consequence of how NSMutableCopying works. As such, it cannot actually fail.\n. That's a nice catch. (It would be pretty nice if this was a public extension, or Moya called the closure with a mutable URLRequest in the first place.)\nAlso the NSMutableURLRequest documentation states that NSURLSession and co. all use mutableCopy internally. I'd trust the system.\nIs that okay if I go with the \"add a comment\" route?\n. I don't know about being idiomatic, but you could try this approach:\n``` swift\nvar sampleData: NSData {\n    let name: String\nswitch self {\ncase .Search:\n    name = \"sample_search\"\n    break\n}\n\nguard let path = NSBundle.mainBundle().pathForResource(name, ofType: \"json\"),\n    data = NSData(contentsOfFile: path) else {\n        return NSData()\n}\n\nreturn data\n\n}\n```\nProvided you have a file named sample_search.json in your bundle.\n. You can't put a Date into the parameter dictionary directly. JSONSerialization only handles primitive types, so you have to convert your Date into a String or an Int first.\n(Sidenote: without your explicit conversion, it would be pretty ambiguous how to represent a date.)\n. Does your server expect a multipart upload or a simple POST where the body is the PDF data? (Your code does the multipart version.)\nAre you getting any useful or technical messages in the server's response?. One thing is crystal clear: you cannot synchronously return something that will arrive in the future. (Not to mention that using side-effects to sneak out values from RX is malpractice by itself.)\nThe setupRx function should be rewritten to take callbacks or return an Observable, and your bridging code should make use of the resolve/reject blocks you get from the framework. This seems to be related.. Why not both?. Use NSNull() to fill that entry in your dictionary.. ",
    "jcampbell05": "@vzsg yeah currently thats what we are doing.\n. CocoaPods 0.39.0\nXcode 7.3\nMoya 7.0\n. ",
    "jjaybrown": "@ashfurrow how do you get hold of a sticker?\n. any update on this being released?\n. ",
    "kanishkatn": "Thanks a lot for the quick response @AvdLee . That solved my problem. \nBut, I am getting this error while invoking the Service. \n\nAm I doing something wrong here?\nI am declaring the provider like this \nlet BetFairProvider = MoyaProvider<BetFairService>(plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)])\n. Yes, I did. It was due to an error in my code. Thanks for the help :)\n. ``` ruby\nUncomment this line to define a global platform for your project\nplatform :ios, '9.0'\ntarget 'BetMe' do\n  # Comment this line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n# Pods for BetMe\n  pod 'Firebase/Core'\n  pod 'Firebase/Database'\n  pod 'Firebase/Auth'\n  pod 'SideMenu'\n  pod 'TGLStackedViewController', '~> 2.0'\n  pod 'Moya/RxSwift'\n  pod 'Moya/ReactiveCocoa'\n  pod 'SwiftyJSON'\n  pod 'GMStepper'\n  pod 'YUTableView-Swift', :git=> 'https://github.com/ujell/YUTableView-Swift.git', :branch => 'Swift3'\n  pod 'SwiftDate'\n  pod 'ScrollableGraphView'\n  pod 'FoldingCell'\n  pod 'STCollapseTableView'\n  pod 'DLRadioButton', '~> 1.4'\n  pod 'PageMenu'\n  pod 'LiquidFloatingActionButton'\n  pod 'SnapKit', '~> 3.0'\n  target 'BetMeTests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\ntarget 'BetMeUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\nend\n```\n. It did. Thanks a lot :)\n. ",
    "rcholic": "@samirGuerdah \nIt may not be Moya that causes this error code 413, but my code of using Moya may cause this, because the multipart form data is a relatively new feature in Moya and there has not been much tutorial or documentation on how to use it.\nI have tried Alamofire, PostMan in Chrome browser, and they all work until I came to try Moya\n. @colinta \nMy understanding is the \"name\": \"images\" is for specifying the field name in the form data to be \"images\", and this field is parsed by my remote REST api for uploading the images associated to this field. The field name fileName is for the image name with an extension: photo.jpg (see the code in my original post).\nYou said the imagesDataArr in my parameter dictObj would be included for the http request going out to the API, that made me think maybe I should have deleted the field imagesDataArr after creating the MultipartFormData object. \nThanks! - will report back if removing imagesDataArr works for me.\n. My code above works fine if I don't upload images when doing the POST request with the API, but it does not work with uploading images same time. I've confirmed my remote REST API works fine by using PostMan in Chrome browser. \nThe errors I see from uploading images and posting input texts same time are because of the other fields being undefined. \nFor example, my input text fields are title and content. These two input fields contain the correct string value when I do NOT upload images same time, however, these two fields turn out to be undefined when uploading images.\nThis made me think if I should also include my text inputs in the form data generated in the var multipartBody: [MultipartFormData]? block:\n``` swift\n// current code\nvar multipartBody: [MultipartFormData]? {\n  switch self {\n  case .CreateObj(let dictObj):\n    guard let imagesDataArr = dictObj[\"imagesDataArr\"] as? [NSData] else { return[] }\nvar formData: [MultipartFormData] = imagesDataArr.map{MultipartFormData(provider: .Data($0), name: \"images\", mimeType: \"image/jpeg\", fileName: \"photo.jpg\")}\nreturn formData\n\ndefault:\n    return []\n  }\n}\n```\nIf so, how should I convert my text input string to form data here? I've tried the following:\nswift\nfor (key, val) in questionDictObj {\n  formData.append(MultipartFormData(provider: .Data(String(val).dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!), name: key)) // does not work! the field's value is still undefined at the remote API\n}\nI don't see any examples for casting text input string values to MultipartFormData type. Anyone knows?  How come the text input fields disappeared when they are POSTed together with images for uploading?\n. @leoneparise , below is my code in using Alamofire, my original post includes my Moya code:\n``` swift\nAlamofire.upload(.POST, targetURL, headers: headers, multipartFormData: { (multipartFormData) -> Void in\nfor (key, val) in questionObj {\n    print(\"iterating key-val: (key): (val) in question JSON\")\n    multipartFormData.appendBodyPart(data: String(val).dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!, name: key)\n  }\nfor i in 0..<self.selectedImageData.count {\n    let img = self.selectedImageData[i] // array of NSData from UIImage\n    multipartFormData.appendBodyPart(data: img, name: \"images\", fileName: \"file(i).png\", mimeType: \"image/png\")\n  }\n}, encodingCompletion: { (encodingResult) -> Void in\n    switch encodingResult {\n    case .Success(let upload, , ):\n      upload.responseJSON(completionHandler: { (response) -> Void in\n        print(\"successful response: (response)\")\n      })\ncase .Failure(let error):\n  print(\"in encoding completion, error: \\(error)\")\n}\n\n})\n```\nSo your example basically suggest that I should not include the images for uploading in the paramaters return, but rather should return images only in the multipartBody? Thanks\n. @leoneparise thanks so much with my wholeheart! Your help solved my problem completely! I'm closing it now :)\n. ",
    "mattfaluotico": "I did some digging, it looks like by setting the mimeType to \"\", Moya tells Alamofire that it's a file type, adding it to the files section of the multipart/form-data request. \nI'm happy to provide a fix. \n. This change never made it into Swift 2.3 or 2.2. Are there plans to release an update or can I merge into the release branch?  @Moya/contributors should we make another 2.2/2.3 release?  This means that MultipartForm is still broken before 3.0\n. I have a fix in my fork. Can we create a new release branch? . What branch? Should I just make a new 2.3 one on Moya/Moya? . I created a release-7.0.4 branch and opened a PR to merge the changes into it. . @ashfurrow Looks like cocoapods is aware of new version but there isn't a release for it. I can release it if you want.\nBut I pointed my podfile at the release-7.0.4 branch and everything is working as planned! . @ashfurrow Release created and our podfile update! . @ashfurrow Release created and our podfile update! I'll close the issue. . ",
    "mwawrusch": "To add more info: The request gets signed but I still get 403 errors. \n. So I figured it out. Here is working code:\n```\nstatic let requestClosure = { (endpoint: Endpoint, closure: RequestResultClosure) -> Void in\nvar request = endpoint.urlRequest.mutableCopy() as! NSMutableURLRequest\n\nlet date = NSDate.aws_clockSkewFixedDate().aws_stringValue(AWSDateISO8601DateFormat2)\n\nrequest.addValue(date,forHTTPHeaderField: \"X-Amz-Date\")\n\nlet credentialsProvider = AuthAWSCognitoService.sharedInstance.credentialsProvider!\n\nlet awsEndpoint = AWSEndpoint(region: AWSRegionType.USEast1,\n                              service: AWSServiceType.APIGateway,\n                              URL: NSURL(string:\"https://.......\")!)\n\n\n// Refresh credentials\ncredentialsProvider.credentials().continueWithBlock {(task: AWSTask!) -> AnyObject? in\n\n\n    let signer = AWSSignatureV4Signer(credentialsProvider: credentialsProvider,\n        endpoint: awsEndpoint)\n\n    //_configuration.baseURL = _configuration.endpoint.URL;\n\n    let task = signer.interceptRequest(request)\n    task.continueWithBlock {(task: AWSTask!) -> AnyObject? in\n\n\n\n        closure(.Success(request))\n        return nil\n    }\n\n\n    return nil\n}\n\n}\n```\n. ",
    "stevenbedrick": "This is an extremely timely issue, as I found this issue just now while searching for some documentation on this very feature! One question: in the demo directory tree, there is a sample implementation of the Giphy API that appears to demonstrate how to use the multipart-form-upload features. Does anybody know if the code in this demo is accurate according to the final API? If so, that might be a good place to start with formal documentation.\n. ",
    "rlam3": "@colinta Is there a reason for you guys to choose FutureKit over PromiseKit? \n. @colinta the source code seems to be missing. Please update? Thanks!\n. @justinmakaila Would love to your take on how to implement Moya with an authentication of using JWT. But prior to firing off each request back to the server, the token is to be checked, and if expired, the token should be refreshed prior to firing off the next request. I know this has something to do with promises, but I'm sure where I can some how do a callback wrapper per request with moya. \nLooking at the OAuth approach, I cannot seem to see the connection between how to refresh a token prior to firing off the next request. \n1. What is the difference between requestClosure and endpointClosure when we create a MoyaProvider instance?\nI've been trying to follow the Authentication.md documentation from Moya but still have a few question that I need to clear up.\n1. Is YourAPI the Target for which we have to seperate Authentication Target and another one for GET/POST a resource Target? Or Do we keep it as one cohesive structure and use the same provider for authentication / fetch resource?\n2. YourAwesomeOauthProvider... Is this a seperate Provider/Library I have to get for JWT to work or is it another instance of from MoyaProvider? \n3. At the let provider = MoyaProvider line, is this now being wrapped by requestClosure? where it now knows \nswift\nlet requestClosure = { (endpoint: Endpoint<YourAPI>, done: NSURLRequest -> Void) in\n    let request = endpoint.urlRequest \n    YourAwesomeOAuthProvider.signRequest(request, completion: { signedRequest in\n      // The OAuth provider can make its own network calls to sign your request.\n      // However, you *must* call `done()` with the signed so that Moya can\n      // actually send it!\n      done(signedRequest)\n    })\n}\nlet provider = MoyaProvider(requestClosure: requestClosure) <<< So is every request with this provider wrapped with request closure to check for token expiration?\nWould greatly appreciate it if you could point me to how to refresh an access token prior to firing off another request. \nThanks!\n. @ashfurrow Would love to see more on authentication documentation using OAuth/JWT and how to store and mange tokens to be integrated with Moya. \nBecause checking if a token is expired and updating the token prior to firing off an authenticated request is a synchronous task. I would like to see a proper way for authenticated requests to be organized with the use of keychain libraries like Locksmith.swift to manage tokens. \nThanks!\n. @ashfurrow thanks for the pointers to the authentication/oauth posts. I'm still a bit stuck on the point on how to actually get moya refresh an access token prior to firing off another authenticated request. \nI've been poking around the following code from eidolon and ello...\nhttps://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/Networking.swift\nhttps://github.com/ello/ello-ios/blob/master/Sources/Networking/ElloProvider.swift\nI see some similarities but also many diffferences. For instance, they are using a state machine to deal with authenticated requests. But how is eidolon checking if the token is expired and updating the access_token on the client side?\nI saw the following piece of code, but this doesn't require the user credentials to return the token...\nhttps://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/Networking.swift#L51-L83\nHow is the access_token refreshed? Many Thanks!\n. @ashfurrow Is XAppTokenRequest different from a normal acess_token? I'm a bit confused here. Or is XAppTokenRequest supposed to request back a new JWT? \n. @sunshinejr What if we need moya with rxswift and swift 3.0? \nWhat is the rxswift for moya?\n. @BasThomas Thanks! \n. @pietbrauer if it is async, what happens when the request is fired before the token is refreshed? Shouldn't this be a synchronous process where the token refresh must take place first? Thanks! . @pietrocaselani \nYou mean to handle the token in this requestClosure? \nReference: https://github.com/artsy/eidolon/blob/master/Kiosk/App/Networking/Networking.swift\nswift\n// (Endpoint<Target>, NSURLRequest -> Void) -> Void\n    static func endpointResolver<T>() -> MoyaProvider<T>.RequestClosure where T: TargetType {\n        return { (endpoint, closure) in\n            var request = endpoint.urlRequest!\n            request.httpShouldHandleCookies = false\n            closure(.success(request))\n        }\n    }. @pietrocaselani  Thanks! Which version of Moya are you using? It seems like I'm getting a bunch of errors when handling the request.\n\n. Hmm... I'm definitely doing something wrong here. Refesh seems to be looping back on itself... Any ideas on how to get out of my loop? Thanks! \n```swift\n//\n//  Networking.swift\n//  moyaJWTLogin\n//\n//\nimport Foundation\nimport Moya\nimport Result\nimport RxSwift\nimport JWTDecode\nclass OnlineProvider: MoyaProvider where Target: TargetType {\nfileprivate let online: Observable<Bool>\nfileprivate let provider: MoyaProvider<Target>\n\ninit(\n    endpointClosure: @escaping MoyaProvider<Target>.EndpointClosure = MoyaProvider.defaultEndpointMapping,\n    requestClosure: @escaping MoyaProvider<Target>.RequestClosure = MoyaProvider.defaultRequestMapping,\n    stubClosure: @escaping MoyaProvider<Target>.StubClosure = MoyaProvider.neverStub,\n    manager: Manager = MoyaProvider<Target>.defaultAlamofireManager(),\n    plugins: [PluginType] = [],\n    online: Observable<Bool> = connectedToInternetOrStubbing()) {\n\n    self.online = online\n    self.provider = MoyaProvider(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, manager: manager, plugins: plugins)\n\n    super.init(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, manager: manager, plugins: plugins)\n}\n\nfunc request(_ token: Target) -> Observable<Moya.Response> {\n    let actualRequest = provider.rx.request(token)\n\n//        let actualRequest = self.request(token)\n        return online\n            //            .ignore(value: false)  // Wait until we're online\n            .take(1)        // Take 1 to make sure we only invoke the API once.\n            .flatMap { _ in // Turn the online state into a network request\n                return actualRequest\n        }\n    }\n}\nprotocol NetworkingType {\n    associatedtype T: TargetType\n    var provider: OnlineProvider { get }\n}\nstruct Networking: NetworkingType {\ntypealias T = JWTAPI\nvar provider: OnlineProvider<JWTAPI>\n\n}\nextension NetworkingType {\nfunc smartTokenClosure(_ token: JWTAPI) -> String {\n    switch token {\n    case .authenticateUser:\n        return \"\"\n    default:\n        return AuthUser.get(.access_token) as! String\n    }\n}\n\n}\n// Static methods\nextension NetworkingType {\nstatic var plugins: [PluginType] {\n\n//        let authPlugin = AccessTokenPlugin(tokenClosure: smartTokenClosure(self.T) )\n        let authPlugin = AccessTokenPlugin(tokenClosure: AuthUser.get(.access_token) as! String)\n    return [\n        NetworkLoggerPlugin(verbose:true),\n        authPlugin\n    ]\n}\n\nstatic var refreshTokenPlugins: [PluginType] {\n    let authPlugin = AccessTokenPlugin(tokenClosure: AuthUser.get(.refresh_token) as! String)\n\n    return [\n        NetworkLoggerPlugin(verbose:true),\n        authPlugin\n    ]\n\n}\n\n// (Endpoint<Target>, NSURLRequest -> Void) -> Void\nstatic func endpointResolver<T>() -> MoyaProvider<T>.RequestClosure where T: TargetType {\n    return { (endpoint, closure) in\n\n        var request = try! endpoint.urlRequest()\n        request.httpShouldHandleCookies = false\n        let disposeBag = DisposeBag()\n\n        let s_jwt = SmartAccessToken()\n        if s_jwt.isExpiredOrExpiringSoon{\n            let authProvider = Networking.refreshTokenDefaultNetworking()\n            authProvider.request(.refreshAccessToken())\n                .filterSuccessfulStatusCodes()\n                .map(to: UserAuthenticationTokens.self)\n                .subscribe{ event in\n                    switch event{\n                    case .next(let object):\n                        AuthUser.save([\n                            .access_token : object.access_token,\n                            .refresh_token: object.refresh_token\n                        ])\n                        closure(.success(request))\n                    case .error(let error):\n                        print(\"\\(error.localizedDescription)\")\n\n//                            closure(.failure(error))\n                        default: break\n                        }\n                }.disposed(by: disposeBag)\n        }else{\n            closure(.success(request))\n            return\n        }\n    }\n}\n\nstatic func unauthenticatedDefaultNetworking() -> Networking {\n\n    print(\"Entering.... Unauth Default Networking\")\n    return Networking(provider: OnlineProvider<JWTAPI>())\n}\n\nstatic func refreshTokenDefaultNetworking() -> Networking {\n\n    print(\"Entering.... refreshTokenDefaultNetworking\")\n    return Networking(provider: OnlineProvider<JWTAPI>(\n\n//            plugins: refreshTokenPlugins\n            requestClosure: self.endpointResolver()\n        ))\n    }\n// FIXME: During production... Network Logger should be turned off?\n\nstatic func newDefaultNetworking() -> Networking {\n    print(\"Entering.... New Default Networking\")\n    return Networking(provider: OnlineProvider<JWTAPI>(\n        requestClosure: self.endpointResolver(),\n        plugins: self.plugins\n    ))\n}\n\n//    static func newStubbingNetworking() -> Networking {\n//        return Networking(provider: OnlineProvider(\n//            endpointClosure: MoyaProvider.defaultEndpointMapping,\n//            stubClosure: MoyaProvider.immediatelyStub,\n//            plugins:[NetworkLoggerPlugin(verbose:true)],\n//            online: .just(false)))\n//    }\nstatic func APIKeysBasedStubBehaviour<T>(_: T) -> Moya.StubBehavior {\n    return .immediate\n}\n\n}\nfileprivate extension Networking{\nfunc RequiresAuthenticationRequest() -> Observable<String> {\n\n    let njwt_string = AuthUser.get(.access_token) as! String\n\n//        guard let jwt: JWT = try! decode(jwt: njwt_string) else {\n//\n//        }\n    return .just(njwt_string)\n\n//        return .just(AuthUser.get(.access_token))\n//\n//        // If access token is valid\n//        if AuthManager.shared.expiredAccessToken == false{\n//            return .just(jwt)\n//        }else{\n//\n//            // Refresh access token\n//            return request(.refreshAccessToken())\n//                .filterSuccessfulStatusCodes()\n//                .map(RefrehedAccessToken.self)\n//                .do(onNext: {\n//                    print(\"Saved new access token\")\n//                    $0.save()\n//                }).map{ (token) -> String in\n//                    // Get new access token that was just saved\n//                    return AuthManager.shared.accessToken!\n//            }\n//        }\n}\n\n}\n// \"Public\" interfaces\nextension Networking {\nfunc request(_ token: JWTAPI) -> Observable<Moya.Response> {\n    let actualRequest = provider.rx.request(token)\n    return actualRequest.asObservable()\n\n//        return flatMap{ _ in actualRequest }\n//        return self.RequiresAuthenticationRequest().flatMap{ _ in actualRequest}\n}\n\n}\n//\n//private func newProvider(plugins: [PluginType]) -> OnlineProvider {\n//    return OnlineProvider(plugins: plugins)\n//}\n```\nhttps://github.com/rlam3/moyajwtlogin\nI have also included a repo for this. Please have a look and let me know how I can make authentication and refresh work better. \nI know there are literally so many ways to approach this and it seems like I have been trying to tackle this at so many different angles. Would really appreciate if you could give me some insight as to how to make this better. Thanks! \nAuthentication works fine. It is only the refreshing token which loops back on itself indefinitely.... @AndrewSB I think my question should be... Did you wrap your provider within networking struct?\nI'm trying to understand what is going on here with your protocol\n``` swift\nprotocol NetworkingType {\n    associatedtype T: TargetType, ProxyAPIType\n    var provider: OnlineProvider { get }\n}\nstruct Networking: NetworkingType {\n    typealias T = ProxyAPI\n    let provider: OnlineProvider\n}\n```\nWhere does TargetType and ProxyAPIType come from? \nMy ultimate goal is to move from MoyaProvider to RxMoyaProvider for all my queries to the backend server if possible. In order for me to do this what would be the best way to structure my wrapper around my provider to be used?  Thanks! \nReally appreciate your help! \n.  @AndrewSB Thanks! And is this code valid for swift 3 because i think they deprecated typealias for associatedtype?\nI'm not sure if your OAuthtokens have expirations. But how have you been handling the expirations  of your tokens and retrieve a new one using the same wrapper provider? ... I'm using a singleton keychain to hold onto my tokens. I'm thinking of moving my token validation into my requestClosure to validate expiration of token and retrieve a new one from there with the same RxProvider. But I'm not sure how to structure my provider in such a way that I am able to do it. Was wondering if you had any input on this issue or ran into it yourself. Thanks! \nReference:\nhttps://www.natashatherobot.com/swift-protocols-with-associated-types/\n. @AndrewSB If OAuthTokenRequest is dependent on CSRFTokenRequest. Would zip still work? Or should it be be my proposed way of chain blocking? Would love your feedback on this. Thanks! . Thanks! This was helpful. But I guess most requests should by default be .request right? . @BasThomas Thanks! . @sunshinejr \nIs the following way not the accepted way to initialize the endpoint anymore? \n```swift\n        let endpoint: Endpoint = Endpoint(\n            URL: target.baseURL.appendingPathComponent(target.path).absoluteString,\n            sampleResponseClosure: {.networkResponse(200, target.sampleData)},\n            method: target.method,\n            parameters: target.parameters,\n            parameterEncoding: target.parameterEncoding\n        )\n```. @sunshinejr Thanks! I took a look at this previously. \nBut I'm still a bit confused... For example... I see the XAuth.json and I see .XAuth in API enum but I only see 1 test being done in APISpec... \nI don't see it being tested for authentication.... Or maybe I'm looking at the wrong place? \n. @leoneparise so when it unsubscribes, i handle the error out of the chain? \n@jonlambert I'm looking for: when it fails during filtersuccessfulstatus code it would stop and error out and stop mapping continuing the chain. . @BasThomas Thanks for the pointer!\nIs there a proper way to use collection view / table view with moya? \nI've been trying to map my provider.request. I'm firing my request inside viewDidLoad then mapping  and subscribing to object and setting it back into var feedObjects: [FeedObject] via self.feedObject\n```swift\n...viewDidLoad\nprovider.request(.myRequest)\n.map...\n.subscribe{ (event) in\nswitch event{\ncase .next(let object):\n    self.feedObjects = let object.feeds\n}\ncase .error(let error):\n    print(\"(error.localizedDescription...)\")\ndefault\n    break // <<< It keeps breaking out\n}\n...numberOfItemsInSection\nreturn self.feedObjects.count // <<< Always finds nil... even though the request works...\n```. @AndrewSB Thanks for the pointer, but I'm confused as to why my numberOfItemsInSection is reading nil when it is mapped correctly.... Or does it mean that when I use RxSwift I'm not able to use the standard collectionview function/libraries? . This looks great. But how would one handle the access token when it is expired in the request? Would there be a way for us to set a specific url to refresh the token? . @douglastaquary Was wondering what your workaround was. Thanks! . @douglastaquary I didn't use AuthPlugin yet. However I would suggest that you use the pass parameters in the headers. There is a method where we can add the parameters into the header. My problem revolves more around how do I refresh an expired jwt token per request which I was hoping I could learn something from your implementation. hahaha.. @asasdasasd do you have an example? Thanks! . @AndrewSB \nI've also included my app: https://github.com/rlam3/moyajwtlogin\n```swift\nclass MoyaAPIClosures{\n///\nstatic let endpointClosure = { (target: JWTAPI) -> Endpoint<JWTAPI> in\n\n    print(\"Endpoint Closure Config\")\n\n    var defaultEndpoint:Endpoint<JWTAPI> = MoyaProvider.defaultEndpointMapping(for: target)\n\n    switch target{\n    default:\n        return defaultEndpoint\n    }\n}\n\n}\n```\n. @AndrewSB \nI've also included my app: https://github.com/rlam3/moyajwtlogin\n```swift\nclass MoyaAPIClosures{\n///\nstatic let endpointClosure = { (target: JWTAPI) -> Endpoint<JWTAPI> in\n\n    print(\"Endpoint Closure Config\")\n\n    var defaultEndpoint:Endpoint<JWTAPI> = MoyaProvider.defaultEndpointMapping(for: target)\n\n    switch target{\n    default:\n        return defaultEndpoint\n    }\n}\n\n}\n```\n. ",
    "loryhuz": "Here is an example of implementation I did with PromiseKit, the first is Moya native, the second is a promise which wrap the native call. Of course you don't need the first request is you only use Promises, this is for example:\nswift\n    /// Load Place object fullfilled by Google Place API Details response\n    ///\n    /// - Parameter query: placeID, id of the place to be loaded\n    static func getPlace(\n        placeID: String,\n        success successCallBack: @escaping (Place) -> Void,\n        error errorCallback: @escaping (_ error: Moya.Error) -> Void\n        ) {\n        self.request(\n            target: .placeDetails(placeID: placeID),\n            success: { response in\n                do {\n                    let place = try response.mapObject(Place.self)\n                    successCallBack(place)\n                } catch {\n                    errorCallback(.jsonMapping(response))\n                }\n            }) { error in\n                errorCallback(error)\n        }\n    }\n    static func getPlace(placeID: String) -> Promise<Place> {\n        return Promise { fulfill, reject in\n            self.getPlace(\n                placeID: placeID, success: { place in\n                    _ = fulfill(place)\n                }, error: { error in\n                    _ = reject(error)\n            })\n        }\n    }\nThen in your code, you can use PromiseKit as usual:\nswift\nGooglePlacesProvider.getPlace(placeID: \"placeId\").then { place in\n    // Do something\n}\n. @ashfurrow I didn't test yet because back-end developers of this API made it possible to have expand parameter as POST parameter.\nI never used Custom ParameterEncoding, but by reading your example, it's fit perfectly what I needed, I see how I could implement that.\nYou can close the issue, thanks for the tips !\n. ",
    "hiragram": "I'm using v7.0.0\n. I found the answer by myself.\nI had to pass stubClosure and return .Immediate to perform endpointClosure.\nIf needed, I will update Basic.md and create pull request.\n. Are there any commits that buildable with Xcode8GM?\nI am trying to build Moya using Carthage, but some errors appear and build fails.\nI forked Moya to my account and modify RxSwift dependency branch to \"master\" in Cartfile.\n/Users/hiragram/Development/proj/Carthage/Checkouts/Moya/Source/Moya+Internal.swift:178:36: error: argument labels '(resource:, to:)' do not match any available overloads\n/Users/hiragram/Development/proj/Carthage/Checkouts/Moya/Source/Moya+Internal.swift:194:13: error: value of type 'Request' has no member 'progress'\n/Users/hiragram/Development/proj/Carthage/Checkouts/Moya/Source/Moya+Internal.swift:209:22: error: cannot call value of non-function type 'HTTPURLResponse?'\n            .response(queue: queue) { (_, response: HTTPURLResponse?, data: Data?, error: NSError?) -> () in\nIt looks like dependency to Alamofire causes this error but I can't find what I should do.\nI am working on my new personal iOS app project and going to start with Swift3 so anyone can help me? or Moya with Swift3 won't be available for a while?\n. ",
    "DenisLaboureyras": "OK thanks for the comment! I will track also this issue :)\nWe're trying to redo the migration from master since this morning, but we have many errors...\n. I'm in holidays for 2 weeks, so I don't have any issue :).\nIf it's ok for you, you can close the issue, I will test it at the end of the month, and keep you posted if there's a problem.\n. ",
    "charlag": "Excuse me, I may be wrong, but why Xcode version in CircleCI is set to \"7.3.1\"? Tests fail because of that I suppose. Looks like they support Xcode 8 already https://circleci.com/blog/xcode-8-0-beta-support-for-ios-builds/\n. 2.3 could be awesome. I don't think there will be much support for 3.0 until the middle of October and Moya is one if my 'blockers' (I still love it!).\n. We should also update README, docs and example, right? Don't mind updating TODO?\n. Actually, CircleCI supports Xcode 8 as well\nhttps://circleci.com/blog/xcode-8-0-beta-support-for-ios-builds/\n. Ah, sorry, didn't read it properly.\n. Thank you a lot, you did a huge work out there.\nI've got a question. Is there a particular reason why 'swift-3' branch has  s.ios.deployment_target = '9.0' ? \n. ",
    "marcelofabri": "I think we should have a Swift 2.3 release \ud83d\udcaf \n. @ashfurrow You probably want to bump Alamofire version to 3.5.0 in the podspec as well \ud83d\udcaa \n(that PR only bumps in Cartfile)\n. It should prompt you to migrate if SWIFT_VERSION is not set on the project (which #621 set).\n. It seems it's working with CocoaPods, but apparently (at least one) breaking change got in: https://github.com/Moya/Moya/blob/7.0.1/Source/Target.swift#L10\n. @ashfurrow I think all of them got in, since there are no commits to master after the tag \ud83d\ude2c \n\n. All good from what I've seen \ud83d\udc4d \ud83c\udf89 \n. The podspec needs to be updated as well\n. There's also a table in README now: https://github.com/Moya/Moya#moya-version-vs-swift-version\n. @bryanbartow I got the same error of yours, and in the same context (a podspec that depends on Moya). What I did was to add Alamofire directly on the podspec. However, this is weird because we didn't have this issue on previous Moya versions \ud83e\udd14 \n. My main issue with staying in beta is that the main reason seems to the optional subspecs dependencies and that only Moya 8 is compatible with Swift 3 - which is out for a while. I don't like the idea of \"being stuck\" because of RxSwift/RAC as none of those are dependencies of my project.\nI know it's unfair, but just tried to expose my concern as others might have the same feeling.\nI opened this issue to check if they were any other blockers and how I could help \ud83d\ude0a \nAlso, since we're here, it seems that there're a lot of changes since beta 2. Could we have a new beta? \ud83d\ude05 \n. Thanks for the update, Ash! \ud83d\udcaf \n. What version of CocoaPods are you using? Be sure to use 1.1.0 as it contains some fixes for setting Swift version.\n. ",
    "perlguy99": "I had tried that.   If you omit the ?, then you get an error which says:\nEnum case 'Some' not found in type 'Error'\n. ",
    "Unihilator": "I used already this solution with Custom parameter encoding. But It did not resolve a problem. \n``` swift\nlet AuthURLEncodingclosure: AuthEncoding = { request, data in\n    var queryParameters: [NSURLQueryItem] = []\n    for (key, value) in Session.authParameters() {\n        let queryParameter = NSURLQueryItem(name: key, value: value)\n        queryParameters.append(queryParameter)\n    }\nif let data = data {\n    for (key, value) in data {\n        let queryParameter = NSURLQueryItem(name: key, value: \"\\(value)\")\n        queryParameters.append(queryParameter)\n    }\n}\nvar req = request.URLRequest as NSMutableURLRequest\n\nguard var components = NSURLComponents(string: req.URL!.absoluteString) else {\n    return (req, nil)\n}\n\ncomponents.queryItems = queryParameters\nreq.URL = components.URL\n\nreturn (req, nil)\n\n}\n```\nThe problem is when I print req from last string - it is percent encoded(param1==%5B%2215%22,%20%22418%22)\n. Thanks @ashfurrow ! Sorry for late response. We postpone this issue and will change api. \nIt's bad expirience to use that kind of request parameters. \nAnd yes - I've try kind of string for the parameters. I generate it in a string messy way. \nThis does not work. Waiting for api changes \ud83d\ude04 \n. ",
    "swabzz": "Hello leoneparise,\nThanks for quick reply.\nStill i am stuck in uploading image to server using Moya. \nHere is my code. Give me some solution please .. \n``` swift\nenum SomeAPI {\n  case ChangeProfileImage(guideid: String, profileImage: UIImage, remove_pic_id: String)\n}\nextension SomeAPI: TargetType {\nvar path:String {\n    switch self {\n    case .ChangeProfileImage: return \"/posts\"\n    }\n  }\nvar method: Moya.Method {\n    switch self {\n    case .ChangeProfileImage: return .POST\n    }\n  }\nvar parameters: [String: AnyObject]? {\n    switch self {\n     case .ChangeProfileImage(let guideid, let remove_pic_id, _):\n            let values = [\"guide_id\": guideid, \"remove_pic_id\": remove_pic_id]\n            return values\n    }\n  }\nvar multipartBody: [MultipartFormData]? {\n        switch self {\n        case .ChangeProfileImage(, let profileImage, ):\n            return [MultipartFormData(provider: .File(profileImage), name: \"files\", mimeType:\"image/jpeg\", fileName: \"photo.jpg\")]  //HERE IS ERRO: ARGUMENT PASSED TO CALL THAT TAKES NO ARGUMENTS\n        default:\n            return []\n        }\n    }\n    }\n  }\n}\nplease help me to upload image. Thanks in advance\n```\n. \n. Thanks for reply. i have implemented code you have given but i am still getting same error of argument passed to call that takes no arguments.\nI am sorry i giving trouble to you but just stuck in that passing parameters things.\nI have imported Alamofire to resolve undifined identifier error of \"MultipartFormData\"\nMy imports are as \nswift\nimport Moya\nimport RxSwift\nimport Moya_ObjectMapper\nimport ObjectMapper\nimport Alamofire\nSee the error below. Please correct me what i am missing??\n\nThanks in advance\n. Installing Moya using pod command\nruby\npod 'Moya'\nI hope it installing latest version of Moya\n. I tried manually to install latest version like\npod 'Moya', '7.0.0'\nbut in that case is produce another error while installing pod like \n[!] Unable to satisfy the following requirements:\n- Moya (= 7.0.0) required by Podfile\n- Moya (= 7.0.0) required by Podfile\n- Moya (~> 6.0.0) required by Moya-ObjectMapper/Core (1.1.2)\n. Another error \n[!] Unable to satisfy the following requirements:\n- Moya-ObjectMapper/RxSwift (= 1.1.2) required by Podfile\n- Moya-ObjectMapper/RxSwift (= 1.1.2) required by Podfile\nSpecs satisfying the Moya-ObjectMapper/RxSwift (= 1.1.2) dependency were found, but they required a higher minimum deployment target.\nSpecs satisfying the Moya-ObjectMapper/RxSwift (= 1.1.2) dependency were found, but they required a higher minimum deployment target.\n. ``` ruby\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\nuse_frameworks!\npod 'ALCameraViewController'\npod 'Google/SignIn'\npod 'FBSDKCoreKit'\npod 'FBSDKShareKit'\npod 'FBSDKLoginKit'\npod 'Locksmith'\npod 'LicensesViewController', '~> 0.5.0'\npod 'SwiftyTimer'\npod 'SwiftyJSON'\npod 'SwiftLocation', '~> 1.0'\npod 'SwiftyUserDefaults'\npod 'TPKeyboardAvoiding'\npod 'SDWebImage', '~> 3.7'\npod 'SnapKit', '~> 0.15.0'\npod 'R.swift'\npod 'RxCache', '~> 0.1.2'\npod 'OkDataSources'\npod 'OkDataSources/RxSwift'\npod 'SwiftGen'\npod 'Alamofire', '~> 3.1.0'\npod 'Google/CloudMessaging'\npod 'GoogleMaps'\npod 'GooglePlaces'\npod 'PKHUD'\npod 'Swinject', '~> 1.0'\npod 'RxSwift',    '~> 2.0'\npod 'ObjectMapper', '~> 1.1.0'\npod 'Moya', '~> 7.0.0'\npod 'Moya/RxSwift'\npod 'Moya-ObjectMapper', '1.3.1'\npod 'Moya-ObjectMapper/RxSwift', '~> 1.3'\n. ruby\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '8.0'\nuse_frameworks!\npod 'ALCameraViewController'\npod 'Google/SignIn'\npod 'FBSDKCoreKit'\npod 'FBSDKShareKit'\npod 'FBSDKLoginKit'\npod 'Locksmith'\npod 'LicensesViewController', '~> 0.5.0'\npod 'SwiftyTimer'\npod 'SwiftyJSON'\npod 'SwiftLocation', '~> 1.0'\npod 'SwiftyUserDefaults'\npod 'TPKeyboardAvoiding'\npod 'SDWebImage', '~> 3.7'\npod 'SnapKit', '~> 0.15.0'\npod 'R.swift'\npod 'RxCache', '~> 0.1.2'\npod 'OkDataSources'\npod 'OkDataSources/RxSwift'\npod 'SwiftGen'\npod 'Alamofire', '~> 3.1.0'\npod 'Google/CloudMessaging'\npod 'GoogleMaps'\npod 'GooglePlaces'\npod 'PKHUD'\npod 'Swinject', '~> 1.0'\npod 'RxSwift',    '~> 2.0'\npod 'ObjectMapper', '~> 1.1.0'\npod 'Moya', '~> 7.0.0'\npod 'Moya/RxSwift'\npod 'Moya-ObjectMapper', '1.3.1'\npod 'Moya-ObjectMapper/RxSwift', '~> 1.3'\n```\n. Awesome Guys!!\nYou are best. Its Working fine now,  Thanks For helping me.\nOne last question please\nHow to upload multiple images??\n. Awesome Guys!!\nYou are best. Its Working fine now,  Thanks For helping me.\nOne last question please\nHow to upload multiple images??\n. Any solution for uploading multiple images??\n. Any solution for uploading multiple images??\n. Hi,\nme to have same issue, it was working before in previous version. Pleas suggest where i am wrong in implementation??\n. Hi,\nme to have same issue, it was working before in previous version. Pleas suggest where i am wrong in implementation??\n. Any example please ?. Any example please ?. Working Thanks. Working Thanks. ",
    "riksof-zzlalani": "Hi\nI'm using Moya for handling communication between my swift application and api, I'm able to post and get data but unable to post file to api server, following is my code\n``` swift\nenum TestApi {\n  ...\n  case PostTest(obj: [String: AnyObject])\n  ...\n}\nextension TestApi: TargetType {\nvar baseURL: NSURL {\n    switch self {\n    case .PostTest:\n      return NSURL(string: \"http://192.168.9.121:3000\")!\n    }\n  }\nvar path: String {\n    switch self {\n    case .PostTest:\n      return \"/api/file\"\n    }\n  }\nvar method: Moya.Method {\n    switch self {\n    case .PostTest:\n      return .POST\n    }\n  }\nvar parameters: [String: AnyObject]? {\n    switch self {\n    case .PostTest(let obj):\n      return [\"image\": obj[\"image\"]!]\n    }\n  }\nvar sampleData: NSData {\n    return \"\".dataUsingEncoding(NSUTF8StringEncoding)!\n  }\nvar multipartBody: [MultipartFormData]? {\n    switch self {\n    case .PostTest(let multipartData):\n  guard let image = multipartData[\"image\"] as? [NSData] else { return[] }\n\n  let formData: [MultipartFormData] = image.map{MultipartFormData(provider: .Data($0), name: \"images\", mimeType: \"image/jpeg\", fileName: \"photo.jpg\")}\n  return formData\n\n\ndefault:\n  return []\n}\n\n}\n}\n```\nand following is the way I called\nswift\nreturn testApiProvider.request(.PostTest(obj: _file)).debug().mapJSON().map({ JSON -> EKResponse? in\n  return Mapper<EKResponse>().map(JSON)\n})\nI dont receive no response and no hit was sent to the api server \n. @sunshinejr exactly that was the issue, \nThankyou Sir\n. ok the issue was with my the endpoint construction, I had to stringByRemovingPercentEncoding my url that was encoding my ? character in url\n. ",
    "Michael-Maher-BBN": "@swabzz can you please provide me Task code for your provider file ??. ",
    "edwardvalentini": "it seems like there are still a couple of build errors in Moya+Internal and NetworkLoggerPlugin\n. Travis supports Xcode 8.  I've been using it on another project.   We can switch to Travis, maybe ?\n. Same exact issue i had with travis CI last night when I tested Moya there \u2026  iOS tests passed but macOS tests were failing\u2026 locally it was all working though\n. this looks great!\n. Oh no - alamofire deprecated the Int64 variants for the progress handlers\n. I'm working on a PR for this right now. \n. even though 7.0.0 was released recently - does it make sense to move to 8.0.0 as @orta suggests?\n. I'm testing #618 #613 #608 on my own fork and everything seems to be working smoothly \ud83d\udc4d \n. When I run on my local machine all tests pass too -- I'm currently trying on travis and tests fail however \n. i believe it should be \noutput(request.debugDescription, separator, terminator)\nto match with the method signature for print. but even that is giving errors\u2026 I\u2019ve been trying to debug it but  Im not sure if the handling of variadic parameters has changed in swift3\u2026 or if its a bug in Xcode8\u2026 \n\nOn Sep 8, 2016, at 1:28 PM, Andrew Breckenridge notifications@github.com wrote:\nIn Source/Plugins/NetworkLoggerPlugin.swift https://github.com/Moya/Moya/pull/608#discussion_r78082606:\n\n@@ -25,14 +25,15 @@ public final class NetworkLoggerPlugin: PluginType {\npublic func willSendRequest(_ request: RequestType, target: TargetType) {\n     if let request = request as? CustomDebugStringConvertible , cURL {\n-            output(request.debugDescription)\n  @sunshinejr https://github.com/sunshinejr can you explain this line? It's causing an error for me. Is it a typo?\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/Moya/Moya/pull/608/files/3e19a97dd45833f625df9f62208b0519f1da2ae1..ee96e1b44a939e0229b43e5c88d74562def93a1c#r78082606, or mute the thread https://github.com/notifications/unsubscribe-auth/ABf5_q9CR_DJOb7IloiP2isaIhukSf_7ks5qoG_cgaJpZM4J4GFh.\n. \n",
    "Babbz75": "@ashfurrow This may not be the right thread to ask but I'm a little confused on how to retrieve the auth token from the response headers and was hoping you'd be able to help me understand how to access it?\n. Awww thank you! My problem was I had to cast response.response as? NSHTTPURLResponse before it allowed me to use the .allHeaderFields[\"...\"] function on it\n. Found out what I was doing wrong, I needed to specify JSONEndoding() as my parameterEncoding on my endpointClosure. ",
    "iOSUser110": "NOt getting the proper answer here . please reply . If I pass parameter as JSONEncoding getting response as Response: Received empty network response for login.\"  (Request Body: {\\\"email\\\":\\\"test@gmail.in\\\",\\\"device_id\\\":\\\"gddhshfs\\\",\\\"password\\\":\\\"123456\\\",\\\"device_type\\\":\\\"1\\\"}\"])  And \nIf I pass parameter as URLEncoding , still getting responce as  Received empty network response for login.\nwhat is wrong ?. can you please let me know how to add APIKEY to header ? \nlet WebServiceProvider =  MoyaProvider(plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)])\nI have created like this, created ApiManager as in your demo\nServer side is working proper as i tested it on rest client.. For Reactive/Rx Moya I have to use whole swift coding in Reactive. Right ?\nOr can  I use  Reactive/Rx Moya in normal swift  ?. When the version will be available? Till then any temporary workaround for this ?. hey, waiting for your reply..its an urgent ..cant remove the library support. Want to stuck to your library . Its very efficient. For now if you can give any workaround. Hey thanks a lot, \none doubt here , what is  \"your branch\" , here what is expected ? . Thanks a lot. Able to fix the issue using this solution. Now this change is availbe with latest version.\nBut not able to update the latest one.\nI removed and types again the Moya in podfile.Still it is taking the local version\nHow to remove this local version . @sunshinejr\nResolved  \ud83d\udc4d \nThanks .... i want to construct a request with these parameters. When I tried to make Input JSON as \n{\n  \"id\" : \"101\"\n  \"name\" : \u201cTest\u201d\n  \"desc\" : \u201cTest\u201d\n  \"statusList\u201d : [\n    {  \"id\" : \"1\" , \"status\": \u201cHigh\u201d},\n    {  \"id\" : \"2\" , \"status\": \u201clow\u201d},\n    { \"id\" : \"3\" , \"status\": \u201cmedium\u201d}\n  ]\n}\nI wrote Code on swift as \nlet dict1:[String,Any] =\n         [\n            \"id\":  \u201c1\u201d\n            \"status\":\"High\"\n        ] \nlet dict2:[String,Any] =\n            [\n                \"id\u201d:\u201d2\u201d,\n                \"status\":\"Low\"\n                ]\nlet dict3:[String,Any] =\n            [\n                \"id\u201d:\u201d3\u201d,\n                \"status\":\"Medium\"\n                ]\nlet inputParam =\n [\n \"id\" : \"101\"\n  \"name\" : \u201cTest\u201d\n  \"desc\" : \u201cTest\u201d\n  \"statusList\u201d : [ dict1,dict2,dict3 ]\n]\nOn PHP side getting as below : \nArray => 1Array\n(\n    [statusList] => Array\n        (\n            [0] => Array\n                (\n                    [id] => \u201c1\u201d\n                )\n        [1] => Array\n            (\n                [status] =>  \u201cHigh\u201d\n            )\n\n        [2] => Array\n            (\n                [id] => \u201c2\u201d\n            )\n\n        [3] => Array\n            (\n                [status] => \u201cLow\u201d\n            )\n\n        [4] => Array\n            (\n                [id] =>   \u201c3\u201d\n            )\n\n        [5] => Array\n            (\n                [status] => \u201cMedium\u201d\n            )\n\n    )\n\n[id] => \u201c101 \u201d\n[name] => \u201cTest \u201d\n[desc] => \u201c Test\u201d\n\n)\nBUt it should not treat dictionary element as array element , \nIt should be like  as\n       [0] => Array\n            (\n                [id] => \u201c1\u201d\n                [status] =>  \u201cHigh\u201d\n            )\n        [1] => Array\n            (\n                [id] => \u201c2\u201d\n                [status] =>  \u201cLow\u201d\n            )\n\n        [2] => Array\n            (\n                 [id] => \u201c3\u201d\n                [status] =>  \u201cMedium\u201d\n            )\n\n. I shared the code written in swift, And i have not written any other different thing for paramters , just used moya framework as demo shared by Moya. so what would be the workaround ?. \n(Workaround from app side). @alcarvalho ya, I am using URLEncoding. \nas in above screenshot,\nWhen i am trying to call service from controller\nWhen i have added                 case .underlying(let nsError,let response):\nthis\n. waiting for your reply. Sorry got the solution, It was my mistake.. ",
    "bestwnh": "Please provide more code like how you make the request and more info about the request(address, header, method and so on). Because we can't make sure the issue is cause by your app-side or server-side.. This is another question. I reply it in https://github.com/Moya/Moya/issues/1021.. Is there anyone can help with this? Which file I should look into?. @scottrhoyt I created a pull request to fix this issue. Your tips really save my time.. change from\nswift\nlet WebServiceProvider = MoyaProvider(plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)])\nto\nswift\nlet endpointClosure = { (target: ShopperPlusAPI) -> Endpoint<ShopperPlusAPI> in\n    let headers = [] // change this as you need\n    let defaultEndpoint = MoyaProvider.defaultEndpointMapping(for: target)\n    return defaultEndpoint\n        .adding(newHTTPHeaderFields: headers)\n}\nlet WebServiceProvider = MoyaProvider(endpointClosure: SPProvider.endpointClosure, plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)])\n. @nguyentrai2011 You could store the request_1 like\nswift\nlet request_1 = MoyaRequestXXXXX\nthen before you call request_2 call, just call request_1.cancel(). \nYou also can add the request into an array. Then before you make new request, just use requestArray.forEach({ $0.cancel() }).. @BasThomas Is the SessionManager can make a better solution for this situation?. Could you provide an api sample?. I don't think Moya can build on Linux, even the Alamofire can't build yet. https://github.com/Alamofire/Alamofire/issues/1935. Because there is no official network request framework for swift in Linux yet. The swift server-side group still not coding anything yet.. Just my own opinion: I don't think it's an extensions for Moya, it's just a library Compatible with Moya. I don't think it's a right place for it. But good work anyway.. \u6709\u6ca1\u6709sample code\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\uff0c\u8fd8\u6709crash log\u3002\u8fd8\u6709\u4f60\u7528\u7684Moya\u662f\u4ec0\u4e48\u7248\u672c\u3002. @SD10 Sorry I'm late.\nhttps://github.com/Moya/Moya/pull/1586\nhttps://github.com/Moya/Moya/pull/1587. @SD10 I would try to completed more Chinese documents if I got some time. But maybe not so soon. If you thought some of them are urgent. Just tag me and I would complete them ASAP.. ",
    "mdubs": "For anyone that is confused about what happened to the release with this change in it, see the referenced PR #594 for the discussion about what is happening\n. For anyone that is confused about what happened to the release with this change in it, see the referenced PR #594 for the discussion about what is happening\n. ",
    "filograno": "Well done! \ud83d\udc4d \n. You need to create only one Service that manages all endpoints. To better understand how to use Moya see the documentation at:https://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md\nIf you have further question write here!\n. ",
    "RyogaK": "@ashfurrow Hi, I'm investigating this issue for also me.\nThere is release-7.0.1 branch, and also there is 7.0.1 tag. However, that tag is tagged at the same commit which is tagged name specified as 7.0.0. \nThat branch is working in Swift2.3, I know. Perhaps, is that tag your mistake? if so, I want you to tag 7.0.1 on release-7.0.1 branch.\nThanks.\n. ",
    "MacroYau": "@ashfurrow Looks good after updating to 7.0.2. Thanks the team for your quick response!\n. ",
    "gordoneliel": "Hi @ashfurrow, I tried using the above but it doesn't seem to work as Moya/RxSwift is pointing to this branch of RxSwift (~> 3.0.0-beta.1). Is there any temporary solution to this?\n. @BasThomas The RxSwift branch\n\n. ",
    "tpesce": "No worries, I know you are all working hard on the recent Swift/Xcode changes.\nIf I had to guess, it looks like the migration changes to the Moya project file weren't included in the commit with the other Swift 2.3 updates #(2fc967f).\n. I've mostly got a PR together; just finishing up some testing. Expect to see it within a few hours.\n. This is fixed with #636.\n. I believe so, though I am not sure what to make of the CI failures.\nIn my iOS project that is using RxMoya via Carthage, Xcode 8 and Swift 2.3, the changes in this PR fix the Carthage compilation errors and my project builds and runs correctly.\n. Updated to 7.0.3, and everything is working. Thanks again!\nI'll close #629.\n. The OS X 10.0 issue is the same thing I ran into with #636, but I didn't include OS target change with my other changes because I wasn't clear on the overall impact to the project.\nFor this issue, could the problem be an incompatibility between the version of RxSwift that you specify in your Cartfile (~> 2.0) and the one that Moya specifies (~> 2.6)? I ask because I created a sample OS X project, created a Cartfile with just Moya (~> 7.0), and after making the same changed you did to update the Moya OS X target to 10.0 my build was successful with:\ncarthage build --platform mac\n. ",
    "fbeeper": "Hi there!\nFirst of all, thanks for all your work on Moya! It is a great framework!\nWhile getting acquainted with the library, I saw there have been a few recurring issues about the testing documentation. I thought I may take a step to help.\nI was able to write this article.\nSince I'm not that well versed in testing myself, I didn't dare to write it as documentation. So I ended with this informal article. Nevertheless, if you give me some feedback on the technical part, I will be very happy to rewrite it more formally as documentation. \nI'm mostly concerned about:\n Are the examples too simplistic? Did in on purpose, but I might have gone too far.\n I am positive the sample I made for the \"Integration Testing\" it is quite poor. But I had limited time over the weekend.. Great! Will definitely do it in the next few days!. It took me more than a month rather than days... but made it in the end! Cheers!. Thanks for your kind comments, patience, and feedback. I really appreciate your attention to detail!\nI tried my best at incorporating your notes, including a rewrite of the stubClosure section because I really agreed with @SD10's comment about it. This way is more detailed and formal. \nHope I didn't introduce more typos \ud83d\ude0a. ",
    "isatria": "So what should i do to fix that ? @BasThomas \n. ",
    "Dominionys": "Hi,\npod 'Moya', '~> 7.0.0'\npod install\nUsing Moya (7.0.2) \nDrop to 6.5.0 working\nO_o\n. No,\npod 'Moya', '~> 7.0.0'\npod update\nInstalling Moya 7.0.2 (was 6.5.0)\n. @sunshinejr thx.\n. @BasThomas yep, thx for answer :)\n. ",
    "v-ken": "README needs to be updated...\n\n. ",
    "devxoul": "@ashfurrow Sounds interesting, thanks!\n. Totally agreed with @BasThomas. Some users don't know how to use code blocks. We can add some examples in issue/PR templates. For example:\n\n### What you did:\n```swift\nfunc example() {\n  thisCodeWillBeFormatted(in: .swift)\n}\n```\n### What you expected:\nblah blah\n\n. And... #689\n. Thank you guys \ud83d\udc4d\n. How about providing a way to customize target's url? I had implemented similarly in https://github.com/devxoul/MoyaSugar/pull/6 to send a request with URL path.\nWhat we have to do is just adding a defaultURL to let users return the default urls when overriding url property. There's no need to create another protocols. It's similar to 'convention over configuration'.\n```swift\nenum MyTarget {\n  case url(URL)\nvar url: URL {\n    switch self {\n    case .url(let url):\n      return url\ndefault:\n  return self.defaultURL // we have to provide default url implementation\n}\n\n}\n}\n``\n. +1 for 3.docs/Communityordocs/Projects` seems great :tada:. @SD10 It looks interesting. I think I can do it :). @sunshinejr, oh yeah I'm currently working on it. I'll make a pull request in this week :). #1335 :tada:. I think we should keep this issue open because...\n\nthere could be another pull request in different idea.\nthis issue is not yet completely finished.\n\nAlso this is will be automatically closed if #1335 is merged.. Hmm I have no idea why GitHub didn't close this issue automatically when #1335 is merged \ud83e\udd14 \n. Ah, that makes sense!. How about >= 3.0?. I think I can merge this by myself because it's so trivial \ud83d\ude1b. I think I can merge this by myself because it's so trivial \ud83d\ude1b. Sure! #1306. Is there any reason that Moya have no .swift-version file?. Is there any reason that Moya have no .swift-version file?. @pedrovereza, not sure. Please change the base branch before being merged if needed :). @pedrovereza, not sure. Please change the base branch before being merged if needed :). @pedrovereza Updated Package.swift :). @pedrovereza Updated Package.swift :). @BasThomas, thanks! I just rebased 10.0.0-dev branch and force-pushed.. @sunshinejr Just for making it sure: did you mean httpBody instead of htmlBody?. @sunshinejr Thanks for quick review!\n\n[Decodable] is also a decodable so we do not have to write an extra function to deal with an array.\nI brought interfaces from RxCodable, but I can change it if you think it would be better. BTW, you mean decoder, not an encoder right? \ud83d\ude03\nThat makes sense.\n\n\nI updated existing commits :)\n. @sunshinejr Thanks for quick review!\n\n[Decodable] is also a decodable so we do not have to write an extra function to deal with an array.\nI brought interfaces from RxCodable, but I can change it if you think it would be better. BTW, you mean decoder, not an encoder right? \ud83d\ude03\nThat makes sense.\n\n\nI updated existing commits :)\n. I like that interface. It looks much better :+1: By the way, how about removing the parameter name to? Because, we're using such like mapData() or mapString() over mapToData() and mapToString(). English is not my first language but map something seems to be more fluent to me than map to something.\ndiff\n- foo.map(to: Issue.self, atKeyPath: \"data\", using: myDecoder)\n+ foo.map(Issue.self, atKeyPath: \"data\", using: myDecoder)\n@sunshinejr, Hmm, there are several issues on linting issues:\n\nQuick spec is a single class and a single method, so it can easily exceed 200 lines. How about removing this check from the test code?\nThe 55th line of TestHelpers.swift is not included in this pull request. I think we should fix this in another pull request to keep this pr tidy. How do you think?. I like that interface. It looks much better :+1: By the way, how about removing the parameter name to? Because, we're using such like mapData() or mapString() over mapToData() and mapToString(). English is not my first language but map something seems to be more fluent to me than map to something.\n\ndiff\n- foo.map(to: Issue.self, atKeyPath: \"data\", using: myDecoder)\n+ foo.map(Issue.self, atKeyPath: \"data\", using: myDecoder)\n@sunshinejr, Hmm, there are several issues on linting issues:\n\nQuick spec is a single class and a single method, so it can easily exceed 200 lines. How about removing this check from the test code?\nThe 55th line of TestHelpers.swift is not included in this pull request. I think we should fix this in another pull request to keep this pr tidy. How do you think?. If we remove the type parameter, method chaining will not work properly because the compiler cannot infer return types without an explicit type annotation.. If we remove the type parameter, method chaining will not work properly because the compiler cannot infer return types without an explicit type annotation.. @sunshinejr, could you help me with this? Several files are missing from the project after rebasing.\n\n\n. @sunshinejr, could you help me with this? Several files are missing from the project after rebasing.\n\n. @sunshinejr @SD10 thanks for quick support! I rebased 10.0.0-dev branch again and added some test code for json arrays.. @sunshinejr @SD10 thanks for quick support! I rebased 10.0.0-dev branch again and added some test code for json arrays.. @sunshinejr @AndrewSB Thanks for your reviews! I just updated my commits :). @sunshinejr @AndrewSB Thanks for your reviews! I just updated my commits :). Updated ErrorTypes.md and Changelog.md :). Updated ErrorTypes.md and Changelog.md :). Thanks for giving me the opportunity to contribute \ud83c\udf89 . Thanks for giving me the opportunity to contribute \ud83c\udf89 . It looks interesting. I never knew that there was such a nestedContainer. Actually the key idea of this implementation is really simple: \"to create an intermediate model\". It may improve the performance of large json response and even we may replace the implementation of mapString with Decodable mapping in the future.. +1 for good first issue. help wanted doesn't look like a starter task.. @sunshinejr Sure!. @sunshinejr sure! Did it :). We have both RxSwift and ReactiveSwift extensions:\n\nObservable\nSingle\nSignalProducer\n\nCould you please write a test for SignalProducer?. I thought that ~> 4.0 doesn't contain 4.0.0-beta.0 because 4.0.0-beta.0 is lower than 4.0.0. Let me check it again with a new project :). Podfile\nruby\npod 'RxSwift', '4.0.0-beta.0'\npod 'Moya', :git => 'https://github.com/devxoul/Moya.git', :branch => 'rxswift4-version'\npod 'Moya/RxSwift', :git => 'https://github.com/devxoul/Moya.git', :branch => 'rxswift4-version'\nResult\n```\n[!] Unable to satisfy the following requirements:\n\nRxSwift (= 4.0.0-beta.0) required by Podfile\nRxSwift (~> 4.0) required by Moya/RxSwift (9.0.0)\n``\n. Yeah, I'm always confused with=>and>=\ud83d\ude05. Sure! Added.. Great!. It would be tough becauseMoyaError.objectMappinghas an associated valueErrorwhich is not an Equatable. I ended up with usingif-case-let` instead.\n\nswift\nif case let MoyaError.objectMapping(nestedError, _)? = receivedError {\n    expect(nestedError).to(beAKindOf(DecodingError.self))\n} else {\n    fail(\"expected <MoyaError.objectMapping>, got <\\(String(describing: receivedError))>\")\n}. Ah, didn't know that. Fixed!. This code will be merged into a single if-case-let statement :). That makes sense!. Thanks!. Why do we need a key for integer?. Oh didn't know that. It would be great!. That's a great idea.. Ohh that's right. It is not a beta anymore. I just updated to use ~> :). ",
    "juliengdt": "@BasThomas I talked about dependencies into podspec not into podfile: you can't specify url and branch into podspec, that's why a betatag could be cool for beta ones\n. @ashfurrow I'm not sure but if:\n- A need B version 1.0\n- In my Podfile I put\n  - A\n  - B version 2.0\nThere is no pod conflict ? \ud83d\udcad \n. resolved yes\n. You completely right ! Sorry for this question, can be closed \n. You completely right ! Sorry for this question, can be closed \n. Ahoy, Ok i'll try to look at AF and if possible do the change \ud83d\udc4d Thanks for your reply. ... and is \"downcasted\" to a simple URLResponse ... \nhttps://github.com/Moya/Moya/blob/master/Sources/Moya/MoyaProvider.swift#L151\nThe PR will be short i think \ud83d\udc4d . Ahoy everyone\nThis enhancement/issue can be close no ?\n\ud83d\udc4b . Woops, sorry. No Breaking Change, just me who did the work in a bad way (half in fact).\nSeems to be good, i'll have a look in hour for update. Thank you @ashfurrow , that's a honor to be part of Moya. \n\ud83d\udc4d\nCheers From France . Using github.io website generator, or even jekyll can be a good solution for a brief and good website !\nEDIT: Jekyll with Github. Even without Jekyll. A good start could be to check the Github Pages, which can use easily the markdown doc in the repo.\nSource: Github Pages. ",
    "aphorisme": "Hey,\nI\u2019m sorry but I\u2019ve stopped using Moya.  : /. In fact I\u2019ve stopped using Swift\u2026 for the next months until some standardized package manager appears.  ; )\n\nAm 10.11.2016 um 14:13 schrieb Bas Broek notifications@github.com:\nIs this issue still present in the latest release, @aphorisme https://github.com/aphorisme?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/Moya/Moya/issues/642#issuecomment-259686598, or mute the thread https://github.com/notifications/unsubscribe-auth/AFVH-NQCX_zSfJ_y4ojLjUHCaWkjAE6aks5q8xiBgaJpZM4J-46N.\n. \n",
    "Henawey": "Yes, I do it with Custom RequestClosure and add string with structure I want I know this is not a good practice but solve the problem :)\n. ",
    "leizh007": "I set it to iOS9.0\n. IPHONEOS_DEPLOYMENT_TARGET = 9.0;\n. solved, thank you. I set the target in project build setting. I forgot to change the platform setting in pod file:\nplatform :ios, '8.0'\n. ",
    "marcusficner": "Hi @sunshinejr! Alright, I've committed a pull request \u270c\ud83c\udffc \n. Oh sure, much better. Thanks!\n. ",
    "Viniciuscarvalho": "@ashfurrow this task requires expanding the use of different classes? Or use more RxSwift and others?\n. @ashfurrow There are some files that are not being found for example Moya + Internal.swift, is giving 404 error.\n. Update these statements, https://github.com/Moya/Moya/blob/master/docs/ReactiveCocoa.md or that are in the readme? @ashfurrow \n. @ashfurrow I made a change in the ReadMe for Active installation equal to podfile Demo project. \ud83d\udc4d  #693 \n. ",
    "wangguangfeng": "Swift 3 support is still a work-in-progress: #608.\n. 7.0.1 is the last version that is compatible with Xcode 7 / Swift 2.2. Moya 7.0.2 is compatible with Xcode 8 running Swift 2.3. #631 \n. I found the 8.0-beta version is compatible with iOS  9.0 and Swift 3. but which version is compatible with iOS  8.0 and Swift 3 ?\n. COOL\n. ",
    "12207480": "thank you\n. ",
    "Tynox": "Thanks. Waiting the new release.\n. It works!.\nThanks!\n. I've got the same error of \"RxCocoa Building error\". \n. I've got the same error of \"RxCocoa Building error\". \n. @AndrewSB   I just tested a new project which has a Cartfile with only github \"ReactiveX/RxSwift\" ~> 3.0. Everything works fine.  And I tested a new project with only github \"Moya/Moya\" \"8.0.0-beta.2\". I got this error:\nThe following build commands failed:\n    Ld /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Intermediates/Rx.build/Release-iphoneos/RxCocoa-iOS.build/Objects-normal/arm64/RxCocoa normal arm64\n    Ld /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Intermediates/Rx.build/Release-iphoneos/RxCocoa-iOS.build/Objects-normal/armv7/RxCocoa normal armv7\n    CreateUniversalBinary /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Products/Release-iphoneos/RxCocoa.framework/RxCocoa normal armv7\\ arm64\n    GenerateDSYMFile /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Products/Release-iphoneos/RxCocoa.framework.dSYM /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Products/Release-iphoneos/RxCocoa.framework/RxCocoa\n. @AndrewSB   I just tested a new project which has a Cartfile with only github \"ReactiveX/RxSwift\" ~> 3.0. Everything works fine.  And I tested a new project with only github \"Moya/Moya\" \"8.0.0-beta.2\". I got this error:\nThe following build commands failed:\n    Ld /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Intermediates/Rx.build/Release-iphoneos/RxCocoa-iOS.build/Objects-normal/arm64/RxCocoa normal arm64\n    Ld /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Intermediates/Rx.build/Release-iphoneos/RxCocoa-iOS.build/Objects-normal/armv7/RxCocoa normal armv7\n    CreateUniversalBinary /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Products/Release-iphoneos/RxCocoa.framework/RxCocoa normal armv7\\ arm64\n    GenerateDSYMFile /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Products/Release-iphoneos/RxCocoa.framework.dSYM /Users/Alan/Library/Developer/Xcode/DerivedData/Rx-fruannoazmfefrheaohcpygimphr/Build/Products/Release-iphoneos/RxCocoa.framework/RxCocoa\n. Cleared derived data. Still got this error.\n. Cleared derived data. Still got this error.\n. It seems 8.0.1 fixed the problem. No more error occurs.. ",
    "wongzigii": "@ashfurrow ah, I have no idea why the test is failed.\n. I just open https://github.com/Moya/Moya/pull/674,\nThis pull request has been deleted, unfortunately.\n. @ashfurrow Would you like to rebuild it manually?\n. Seems like Circle is complaining about RxSwift. I saw error: assigning non-escaping parameter 'selector' to an @escaping closure in this build.\n. I've notice Moya is ignoring Carthage.resolve and Carthage.parivate. Should we move them back?\n. > Not having the resolved file means that if we specify ~> 2.2 then when someone builds Moya they will always get the most recent 2.2.x version without us having to run carthage update to update the resolved file.\nPartly, that is what ~> use for version requirement compatibility in Cartfile, since Carthage's compatibility is determined according to Semantic Versioning.\nIMO, Carthage.resolve file is supplementary which describes the versions of Moya's dependencies.\nImagine this scenario: You saw Moya released a new version with patch, so  bumped your project to a new stage. However, some dependencies of Moya have new commits. (And this is why we should avoid using github \"SOME_DEP\" \"master/branch\" or github \"SOME_DEP\" \"https://github.com/XXX.git\" unless you indeed need it.)  You saw errors and ticketed an issue. Unfortunately, we don't exactly know why you are facing those errors, for the reason that our dependencies are totally different.\nFYI: cartfileresolved\nCorrect me if I am wrong. :)\n. Circle CI timeout: pod install took more than 10 minutes \ud83d\ude22 \n. Relevant issues are travis-ci/travis-ci#6422 and travis-ci/travis-ci#6675 and travis-ci/travis-ci#6251. Seems like this is an issue not only in Circle CI, but also Travis CI, which the output of failure is something identical.\n. No,  #737 does not make Carthage update dependencies properly, Cartfile.resolved should be updated together with Cartfile while running carthage update --no-build. \n. I'll update Cartfile.resolved with carthage update later, to keep dependencies to be same at this time, since this was a 10-days-ago commit.\n. @AndrewSB  carthage update\n. Great. I don't see any different. What does your Cartfile.resolved looks like now? Shouldn't this file be updated ? :)\n. Yes, you're right. This file only affects carthage bootstrap.\n. @SeRG1k17  Good to know! Thanks. @SeRG1k17 \nUsing a manually parameters sounds like a good idea at first glance. \nHowever, if I need to insert a random key, eg( I need to append a key-value [\"t\": randomString(length: 5)]) to each request's parameter, this causes that the headers generated another random key when accessing the computed property paramters.\nHere is my code snippet:\n````swift\n    //Manually created property\n    var parameters: [String: Any] {\n        var param = [:]\n        switch self {\n        case let .login(username: name, password: pass):\n               param = [\"username\": name, \"password\": pass]\n        default: \n               param = [:]\n    // Add a random key for per request\n    param[\"t\"] = randomString(length: 5)\n    return param\n}\n\nvar headers: [String: String]? {\n    // accessing self.parameter will generate a new random key!!!!\n    let myGatewayHeader = generateHeaderFromParameters(self.parameters)\n    return myGatewayHeader\n}\n\n````\nDo you have any suggestions?\n. ",
    "RamwiseMatt": "Any word on a fix for this? It is unclear to me at this point how to properly encode requests.\nEdit: It seems that using URLEncoding() and JSONEncoding() instead of Moya.ParameterEncoding.URL and Moya.ParameterEncoding.JSON does the trick, for now at least.\nAs in:\nswift\npublic var encoding: Moya.ParameterEncoding {\n    if self.method == .GET || self.method == .HEAD {\n        return URLEncoding()\n    }\n    else {\n        return JSONEncoding()\n    }\n}\n. ",
    "KelvinJin": "Updated the error type to include the corresponding url(path) and updated the change log as well. I would want to test the error case but have no idea where to start. Ideally I should create a new TargetType with some faulty url or by sending some faulty parameters. (by using some wired characters?) Right now we only have Github available.\nBTW: tests passed locally. (rake test) Maybe I should revert the Podfile.lock file?\n. @ashfurrow \nI just realise there's a struct called ObjectIdentifier which can help us get the unique identifier for AnyObject (it's different from hashValue property). And this brings up another question, since the hashValue property would be the same even when the URLRequest has different httpMethod as shown below.\nSwift\nlet path = \"www.google.com\"\nlet url = URL(string: path)!\nvar request1 = URLRequest(url: url)\nrequest1.httpMethod = \"GET\"\nlet request2 = URLRequest(url: url)\nrequest2.httpMethod = \"POST\"\nrequest1.hashValue // -506241750264670446\nrequest2.hashValue // -506241750264670446\nAnd the current implementation in the requestNormal function seems to treat the two requests the same as long as the have the same hashValue (as the key of the dictionary). Would this be a problem? \nI only had some experience developing web apps and I remembered you can use the same url endpoint with different methods to do different things such as GET & DELETE.... I could be wrong.\n. Hmm, I would say I never trust compiler error \ud83d\ude1b ... It looks like ConversationComplete has two associated values which both only accept String not String? while you're passing self.appointmentData?.uuid and nil to them. Try change the type from String to String??\n. Hmm, I would say I never trust compiler error \ud83d\ude1b ... It looks like ConversationComplete has two associated values which both only accept String not String? while you're passing self.appointmentData?.uuid and nil to them. Try change the type from String to String??\n. ",
    "SerhiiPrime": "Also have this problem. I tried to set custom SessionManager with RequestRetrier that was introduced in Alamofire 4, but implementation of RequestRetrier protocol not invokes.\n. ",
    "jeryRazakarison": "Edit: moved my comment in a new issue\nI opened a new issue concerning the request retrier, and will try to do a pull request with this functionality.\nOf course you can still try and use this reference https://github.com/Moya/Moya/blob/master/docs/Examples/SubclassingProvider.md, but It would cause less surprise, if the Alamofire's requestRetrier worked transparently.\n. Yes, I will do that tomorrow. I tested it and it works well :)\n. I thought it was a good idea, because the first author of issue #700 spoke about cache policy problems specifically.\nThe requestRetrier issue was introduced later by DanteCore, but his question and my answer (and PR) don't help the initial author.\n. I thought it was a good idea, because the first author of issue #700 spoke about cache policy problems specifically.\nThe requestRetrier issue was introduced later by DanteCore, but his question and my answer (and PR) don't help the initial author.\n. Yes, since this enhancement is only needed in specific cases, maybe it should not belong to the Basic Usage documentation.\nLooking at the TargetType protocol, it will be pretty self-explanatory. What do you propose? Do we put a sample code in the issues instead?\n. Yeah, you're right, I'm adding in a few hours the new option in the demo app, and in a new file Advanced.md.\nShould I also add the change in the Changolog.md?\n. Hi, can you explain me what I can do to satisfy codecov/patch and codecov/project?\n. @ledikari In my case, I use the 9.0.0-dev branch, and no problem for now, it is very stable. (And you have access to the error body:) ). Yes, this is totally right. I have made the changes.\n. ",
    "gregkerzhner": "Here is a PR: https://github.com/Moya/Moya/pull/717\nOne thing is that I ended up using an NSHTTPURLResponse not a plain NSURLResponse because those don't have status codes, let me know if you have thoughts on another direction here though.\nAlso, if we make this change we probably need to update the documentation, which I can do also do if you want.\n. ",
    "stale[bot]": "This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 37 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 37 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for 59 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 37 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 37 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 37 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been auto-closed because there hasn't been any activity for at least 21 days. However, we really appreciate your contribution, so thank you for that! \ud83d\ude4f Also, feel free to open a new issue if you still experience this problem \ud83d\udc4d.\n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. \n. ",
    "lolgear": "@petester42 but there are ReactiveSwift and RxSwift in some targets. ( import RxSwift or import ReactiveSwift statements ) \nHow do you build them in case of carthage update.\nAs I know, you can not tell carthage update about dependencies. It will download them and put in one pile. Only hosted app can make dependencies.\nIf your target has a dependency, it should make tricks with them to be carthage-compatible.\n( As I mentioned above, ReactiveSwift or RxSwift )\nSo, how do you specify an 'optional' dependency from ReactiveSwift and from RxSwift for carthage update?\n. @AndrewSB thank you for swift reaction! \nNot sure, it is a fat pull request. \nHowever, you use compiler directives to determine building choice. That's sound good.\nHowever, Moya, as I understand, uses Alamofire under the hood ( dependency ).\nAlso there are several Moya versions - ReactiveMoya ( + ReactiveSwift ) and RxMoya ( RxSwift ).\nSo different version of Moya uses different set of dependencies.\nSumming up my knowledge:\nMoya has core that uses Alamofire.\nReactiveMoya uses Moya and ReactiveSwift.\nRxMoya uses Moya and RxSwift.\nStrange for Carthage.\nCarthage idiom is 'module without dependencies'. All dependencies are linked together in your app ( final point ).\nSo, how do you make your scheme for Carthage?\nReactiveMoya: ReactiveSwift + Moya\nMoya: Core + Alamofire\nRxMoya: RxSwift + Moya\nCocoapods could solve this dependency tree in a several lines. \nCarthage can not. ( My knowledge ).\n. @petester42 @AndrewSB and also Moya uses Carthage/Build/ in Framework Search Paths. It's clear now, thanks!\n. @BasThomas \n@BasThomas \nFor example:\nhttps://github.com/Moya/Moya/pull/563 MoyaBot helps in checking PR.\nhttps://github.com/MoyaBot\n. @BasThomas thanks!\n. ",
    "madhavisolanki": "@scottrhoyt \nChanging the hierarchy of code actually solves this problem. But I am not sure if it will break something.\nClass : MoyaProvider+Internal.swift\n  ```swift\n    func sendUploadMultipart(_ target: Target, request: URLRequest, queue: DispatchQueue?, multipartBody: [MultipartFormData], progress: Moya.ProgressBlock? = nil, completion: @escaping Moya.Completion) -> CancellableWrapper {\n        let cancellable = CancellableWrapper()\n    let multipartFormData: (RequestMultipartFormData) -> Void = { form in\n        if let parameters = target.parameters {\n            parameters\n                .flatMap { key, value in multipartQueryComponents(key, value) }\n                .forEach { key, value in\n                    if let data = value.data(using: .utf8, allowLossyConversion: false) {\n                        form.append(data, withName: key)\n                    }\n            }\n        }\n\n        for bodyPart in multipartBody {\n            switch bodyPart.provider {\n            case .data(let data):\n                self.append(data: data, bodyPart: bodyPart, to: form)\n            case .file(let url):\n                self.append(fileURL: url, bodyPart: bodyPart, to: form)\n            case .stream(let stream, let length):\n                self.append(stream: stream, length: length, bodyPart: bodyPart, to: form)\n            }\n        }\n    }\n\n    manager.upload(multipartFormData: multipartFormData, with: request) { result in\n        switch result {\n        case .success(let alamoRequest, _, _):\n            if cancellable.isCancelled {\n                self.cancelCompletion(completion, target: target)\n                return\n            }\n            cancellable.innerCancellable = self.sendAlamofireRequest(alamoRequest, target: target, queue: queue, progress: progress, completion: completion)\n        case .failure(let error):\n            completion(.failure(MoyaError.underlying(error as NSError)))\n        }\n    }\n\n    return cancellable\n}\n\n```. @scottrhoyt \nChanging the hierarchy of code actually solves this problem. But I am not sure if it will break something.\nClass : MoyaProvider+Internal.swift\n  ```swift\n    func sendUploadMultipart(_ target: Target, request: URLRequest, queue: DispatchQueue?, multipartBody: [MultipartFormData], progress: Moya.ProgressBlock? = nil, completion: @escaping Moya.Completion) -> CancellableWrapper {\n        let cancellable = CancellableWrapper()\n    let multipartFormData: (RequestMultipartFormData) -> Void = { form in\n        if let parameters = target.parameters {\n            parameters\n                .flatMap { key, value in multipartQueryComponents(key, value) }\n                .forEach { key, value in\n                    if let data = value.data(using: .utf8, allowLossyConversion: false) {\n                        form.append(data, withName: key)\n                    }\n            }\n        }\n\n        for bodyPart in multipartBody {\n            switch bodyPart.provider {\n            case .data(let data):\n                self.append(data: data, bodyPart: bodyPart, to: form)\n            case .file(let url):\n                self.append(fileURL: url, bodyPart: bodyPart, to: form)\n            case .stream(let stream, let length):\n                self.append(stream: stream, length: length, bodyPart: bodyPart, to: form)\n            }\n        }\n    }\n\n    manager.upload(multipartFormData: multipartFormData, with: request) { result in\n        switch result {\n        case .success(let alamoRequest, _, _):\n            if cancellable.isCancelled {\n                self.cancelCompletion(completion, target: target)\n                return\n            }\n            cancellable.innerCancellable = self.sendAlamofireRequest(alamoRequest, target: target, queue: queue, progress: progress, completion: completion)\n        case .failure(let error):\n            completion(.failure(MoyaError.underlying(error as NSError)))\n        }\n    }\n\n    return cancellable\n}\n\n. With above changes you need to also change in Alamofire Parameter encoding. Since its sorted alphabetically\n private func query(_ parameters: [String: Any]) -> String {\n        var components: [(String, String)] = []\n    for key in parameters.keys.sorted(by: <) {\n        if key == \"key\" {\n            let value = parameters[key]!\n            components += queryComponents(fromKey: key, value: value)\n            break\n        }\n    }\n\n    for key in parameters.keys.sorted(by: <) {\n        if key != \"key\" {\n            let value = parameters[key]!\n            components += queryComponents(fromKey: key, value: value)\n        }\n    }\n    return components.map { \"\\($0)=\\($1)\" }.joined(separator: \"&\")\n}\n\n. With above changes you need to also change in Alamofire Parameter encoding. Since its sorted alphabetically\n private func query(_ parameters: [String: Any]) -> String {\n        var components: [(String, String)] = []\n    for key in parameters.keys.sorted(by: <) {\n        if key == \"key\" {\n            let value = parameters[key]!\n            components += queryComponents(fromKey: key, value: value)\n            break\n        }\n    }\n\n    for key in parameters.keys.sorted(by: <) {\n        if key != \"key\" {\n            let value = parameters[key]!\n            components += queryComponents(fromKey: key, value: value)\n        }\n    }\n    return components.map { \"\\($0)=\\($1)\" }.joined(separator: \"&\")\n}\n\n```. ",
    "zhigang1992": "wow,  sweet. \nRight on... Thank you.. \ud83d\ude04 \n\ud83c\udf7b \n. ",
    "wilddylan": "After your comment, i tried to read source code of Moya. sampleData will be used as the default EndPoint:\nswift\nendpointClosure: @escaping EndpointClosure = MoyaProvider.DefaultEndpointMapping\nAnd\nswift\nEndpoint(URL: url, sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\nI think: sampleData should be cached response as you say: \" I'll store this JSON as files and read them from disk when asked to\", Why not change the var sampleData: Data to var cachePolicy: Moya.cachePolicy, cache expired date is read from response like that: Cache-Control: max-age=3600, must-revalidate; Expires: Fri, 30 Oct 2016 14:19:41 GMT.\nIt's simple for developer to use Moya with cache control.\n. Return cached response when without network. Also as you say.  Let's talking about it. \n. Nooooo, i recommand use this:\nobjc\ntypedef NS_ENUM(NSUInteger, NSURLRequestCachePolicy)\n{\n    NSURLRequestUseProtocolCachePolicy = 0,\n    NSURLRequestReloadIgnoringLocalCacheData = 1,\n    NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4, // Unimplemented\n    NSURLRequestReloadIgnoringCacheData = NSURLRequestReloadIgnoringLocalCacheData,\n    NSURLRequestReturnCacheDataElseLoad = 2,\n    NSURLRequestReturnCacheDataDontLoad = 3,\n    NSURLRequestReloadRevalidatingCacheData = 5, // Unimplemented\n};\nWith header fields like Cache-Control: max-age=3600, must-revalidate; Expires: Fri, 30 Oct 2016 14:19:41 GMT, request cache-control is my original opinion.\n------Edit-------\nI think, request cache-control is useful.. Hey, sometimes, write a plug-in class for validate ip list and check it before request is better. But if you want to do what you mind, just create an array in any Singleton that contain all your ips, and then, in your own TargetType enum extension, return the current ip address from Singleton to baseURL. Next step, Make a request created with MoyaProvider, change the current ip in your Singleton when get .failure(error). Loop this step, set a flag when get .success(Response), just for break the loop.\n. support swift 3\nruby\npod 'Moya', \"~>8.0.0-beta.2\"\nI was used it. \n. Examples:\nruby\npod 'Moya'\nthat means: ignore this framework's version, latest release version.\nruby\npod 'Moya', '0.9'\nthat means: only get version 0.9 \nruby\npod 'Moya', '>0.1'\nthat means: any version bigger than version 0.1 which can be used.\nruby\npod 'Moya', '>=0.1'\nthat means: any bigger version or equal version which can be used.\nruby\npod 'Moya', '<0.1'\nthat means: any version less-than version 0.1 which can be used.\nruby\npod 'Moya', '<=0.1'\nthat means: less-than or equal version 0.1 which can be used.\nruby\npod 'Moya', '\u301c>0.1.2'\nthat means: from version 0.1.2 to 0.2, but not contain version 0.2, this is a Range of version.  >= 0.1.2 and <0.2.0.\nand also, you  can use\nruby\npod 'Moya', :head\nwill get the latest version, but it's risky. or get from branch\nruby\npod 'Moya', :git => 'https://github.com/Moya/Moya.git', :branch => 'dev'\nand you also can do this:\nruby\npod 'Moya', :configurations => ['Release', 'App Store']\nonly for appoint build configuration.\nYou also can download Moya to local, and use \nruby\npod 'Moya', :path => '~/Documents/Moya'\nControl source code by your self.\nSo, your question, Why install with \nruby\npod 'Moya', \"8.0.0-beta.2\"\nwill get some error, because Version 8.0.0-beta.2 not support swift 3, but 8.0.0-beta.3 support. so use\nruby\npod 'Moya', \"~>8.0.0-beta.2\"\nwill get version 8.0.0-beta.3.\nverify it:\nCreate a new xcode project, and in Podfile:\nruby\npod 'Moya', \"8.0.0-beta.2\"\nand run pod install, you will get 8.0.0-beta.2, and than, change it to:\nruby\npod 'Moya', \"~>8.0.0-beta.2\"\nand run pod update, you will get Installing Moya 8.0.0-beta.3 (was 8.0.0-beta.2) on your ssh screen.\n. ",
    "shivayogic": "@BasThomas Even after changing to .custom still I am facing the same issue\n. @sunshinejr Thank you for the information. Looking into documentation I have few questions\nCan I add httpBody in endPointCloser? If so, is it the right way of doing it rather creating custom parameterEncoding? How can I add httpBody in the EndpointCloser\n. @sunshinejr Thank you. The reason for asking is I have to set url parameter as well as httpbody. The way I am looking is endpoint will have 2 arguments, one for url parameter and another is the httpbody. From #431 I can understand that Moya is supporting either httpbody or url parameter. Both cannot be accomplished.  The way I am looking is, url parameter can be set as it is by the Moya and the other parameter to the endpoint can be be added to httpBody in endpointCloser. Hope this is fine. Also I would like to know how to set the httpBody in the endpoint closer?\nThanks a lot\n. I am stuck,. Any help appreciated. \n. Resolved my self by using custom endpointClosure. For the POST method Moya treats it as BODY. In order to send both url parameter and Body parameter to the endpoint, for parameter return the body to be used and for the url parameters you can add the to url in endpoint closure.\n. Can some one help me on how to test without Nimble?\n. @scottrhoyt \nThank you for the reply. I have solved the issue myself. It was a mistake on using do operator. After replacing with subscribe it is working fine.. ",
    "benpackard": "Thanks Ash - still feels slightly fishy to have to provide a URL that should never be used, plus a fallback (NSURL()) that returns a known fatal error. What would the ramifications be of making baseURL optional, I wonder? Likely a can of worms, I guess?\n. Thanks Ash - still feels slightly fishy to have to provide a URL that should never be used, plus a fallback (NSURL()) that returns a known fatal error. What would the ramifications be of making baseURL optional, I wonder? Likely a can of worms, I guess?\n. I think that's the right call. In my own example, if I don't have a URL string I'm debating whether to throw my own fatal error, let Moya do so, or output a warning and use example.com and it makes sense that I get to determine that.\nI guess the Basic Usage page is where the ! first raises an eyebrow but I think that page does a nice succinct job of explaining setup and it probably wouldn't be a good idea to add it there.\n. I think that's the right call. In my own example, if I don't have a URL string I'm debating whether to throw my own fatal error, let Moya do so, or output a warning and use example.com and it makes sense that I get to determine that.\nI guess the Basic Usage page is where the ! first raises an eyebrow but I think that page does a nice succinct job of explaining setup and it probably wouldn't be a good idea to add it there.\n. ",
    "russbishop": "Would you mind filing a radar and including the logs, xcactivity, etc? We are very interested in resolving these issues. \n. ",
    "dylan": "I'm currently getting some sort of cyclical dependency bug (I think) from Carthage when I do. It just keeps fetching RxSwift perpetually.\n. Using my fork until the PR is merged, it does fix the issue.\n. ",
    "tuyendv2": "I have applied that solution with no luck. Here is the URL in the console: https://www.googleapis.com/blogger/v3/blogs/2093381839762195747/comments?fields=items,nextPageToken&status[]=live&status[]=spam. Don't know why the [] happen right after the status parameter. They should not be there.\nHere is target's parameters:\nswift\ncase .CommentList:\n    var parameters = [String: Any]()\n    parameters[\"status\"] = [\"emptied\", \"live\", \"pending\", \"spam\"]\n    parameters[\"fields\"] = \"items,nextPageToken\"\n    return parameters\nP/S: I am using Moya 8.0.0-beta.2\n. Here is the link to documentation of Google Blogger\nhttps://developers.google.com/blogger/docs/3.0/reference/comments/list\n. ",
    "garrefa": "I have a similar issue.\nThe doc gives this example:\nswift\nlet requestClosure = { (endpoint: Endpoint<ArtistsAPI>, done: MoyaProvider.RequestResultClosure) in\n    let request = endpoint.urlRequest\n    done(.success(request))\n}\nBut Xcode will complain that:\nbash\nMember 'success' in 'Result<URLRequest, Error>' produces result of type 'Result<T, Error>', but context expects 'Result<URLRequest, Error>'\nHow to fix that?\n. ",
    "peterwarbo": "Anyone?\n. What do you mean how I'm getting the value?\nI'm just doing this:\nswift\ndo {\n    let about = try moyaResponse.mapString()\n} catch {\n    print(error)\n}\n. ",
    "brijonesie": "Thank you marcelfabri and wilddylan.   I updated CocoaPods and I used the podfile syntac that WildDylan suggested and everythings working.   Thank you!.\n. Thank you marcelfabri and wilddylan.   I updated CocoaPods and I used the podfile syntac that WildDylan suggested and everythings working.   Thank you!.\n. ",
    "loplopLover": "You can set it like as:\n``` swift\nimport Foundation\nimport Alamofire\nclass DefaultAlamofireManager: Alamofire.SessionManager {\n    static let sharedManager: DefaultAlamofireManager = {\n        let configuration = URLSessionConfiguration.default\n        configuration.httpAdditionalHeaders = Alamofire.SessionManager.defaultHTTPHeaders\n        configuration.timeoutIntervalForRequest = 20 // as seconds, you can set your request timeout\n        configuration.timeoutIntervalForResource = 20 // as seconds, you can set your resource timeout\n        configuration.requestCachePolicy = .useProtocolCachePolicy\n        return DefaultAlamofireManager(configuration: configuration)\n    }()  \n}\n```\nand you should put DefaultAlamofireManager into the your provider like this:\nswift\nlet Provider = MoyaProvider<GithubAPI>(endpointClosure: endpointClosure,\n        manager: DefaultAlamofireManager.sharedManager,\n        plugins: [NetworkActivityPlugin(networkActivityClosure: networkActivityClosure)])\n. ",
    "mrdaios": "@AndrewSB how To Target special setup?\ntks. @AndrewSB how To Target special setup?\ntks. ```swift\npublic enum GitHub {\n    case zen\n    case userProfile(String)\n    case userRepositories(String)\n    case requestSomeThings\n}\n```\nGithub.requestSomeThings   may take a while, how to set timeout for this.\n@AndrewSB  tks.. ```swift\npublic enum GitHub {\n    case zen\n    case userProfile(String)\n    case userRepositories(String)\n    case requestSomeThings\n}\n```\nGithub.requestSomeThings   may take a while, how to set timeout for this.\n@AndrewSB  tks.. yes\u3002. yes\u3002. ",
    "Blackjacx": "Oh that would be interesting for me too since I'd like to avoid reference Alamofire directly. Oh nice idea!!!! I just could create a PhoneNumberType with a failing initializer. No need for a Library - in my case at least... I think that answers my question ;-). OK that works, but at the low level of my description method in my custom response object I don't (want to) have the provider available. Isn't it more correct that when I log the request I fire to the network it shows me all request headers that are fired with it? . It would be a pleasure for me ;-). One more question about my approach. Is it possible to solve this by reimplementing Endpoint.urlRequest and include the Alamofire manager.session.configuration.httpAdditionalHeaders  in the requests allHTTPHeaderFields. The problem here is that I have no access to the provider in that scope. Do you have another Idea? . Hey @sunshinejr ,\nI tried the request closure but couldn't figure out how to get back to the target from an endpoint. I also realised that my approach isn't that optimal. What I really need is to react on a certain error code (409 - Conflict), perform a refresh request to get the newest object I try to change and then retry the original changing request. I'll try to do that centrally for every request in the network layer where I do my error handling.\nSo you may close this issue.\nPS: Cool would be to explain how to extract the target from an endpoint (since this was my initial question) before closing this issue. This would be important when using the request closure and you need to switch on your TargetType there.. ",
    "raphaelcruzeiro": "I'm trying a naive implementation for this:\n``` swift\npublic typealias AuthenticationBlock = (_ done: () -> Void) -> Void\npublic enum Error: Swift.Error {\n    case missingAuthenticationBlock\n    case invalidCredentials\n}\npublic class RxAuthenticatedMoyaProvider: RxMoyaProvider where Target: Moya.TargetType {\nprivate let disposeBag = DisposeBag()\n\npublic var authenticationBlock: AuthenticationBlock?\n\npublic init(endpointClosure: @escaping MoyaProvider<Target>.EndpointClosure = MoyaProvider.DefaultEndpointMapping,\n            requestClosure: @escaping MoyaProvider<Target>.RequestClosure = MoyaProvider.DefaultRequestMapping,\n            stubClosure: @escaping MoyaProvider<Target>.StubClosure = MoyaProvider.NeverStub,\n            manager: Manager = Alamofire.SessionManager.default,\n            plugins: [PluginType] = []) {\n\n    super.init(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, manager: manager, plugins: plugins)\n}\n\npublic override func request(_ token: Target) -> Observable<Response> {\n    return _request(token)\n}\n\nprivate func _request(_ token: Target, isSecondTryAfterAuth: Bool = false) -> Observable<Response> {\n    return super.request(token)\n        .flatMap { [unowned self] response -> Observable<Response> in\n            if response.statusCode == 401 || response.statusCode == 403 { // We need to authenticate\n\n                if isSecondTryAfterAuth { // Server is still asking for authentication. Give up\n                    return Observable<Response>.error(Error.invalidCredentials)\n                }\n\n                guard let authenticationBlock = self.authenticationBlock else {\n                    throw Error.missingAuthenticationBlock\n                }\n\n                return Observable.create { observer in\n                    authenticationBlock {\n                        self._request(token, isSecondTryAfterAuth: true)\n                            .subscribe { event in\n                                observer.on(event)\n                            }\n                            .addDisposableTo(self.disposeBag)\n                    }\n\n                    return Disposables.create()\n                }\n\n\n            } else {\n                return Observable.just(response)\n            }\n    }\n}\n\n}\n```\nI'm gonna document here the results for anyone who might stumble upon this in the future.\nPS: @ashfurrow Am I on the right track here?\n. @ashfurrow I think it would be nice to add a FAQ (or maybe a cookbook). This would definitely make it easier for people that are considering using Moya to see what it can do and how they might make it fit their requirements.\n. ",
    "mrachid": "Hello\nI begin with Moya and RxSwift, i have a same problem like you, i want to know where i can add /make my request for refresh token?  And i don't understand the callback AuthenticationBlock.\nAnd i want to know something, how i can change de header autorisation for the second try after auth\nThanks guy's. Hello\nI begin with Moya and RxSwift, i have a same problem like you, i want to know where i can add /make my request for refresh token?  And i don't understand the callback AuthenticationBlock.\nAnd i want to know something, how i can change de header autorisation for the second try after auth\nThanks guy's. Thanks for your help @sunshinejr !!\nMY CONTROLLER\n```Swift\n//Get User info action button\n@IBAction func requestUser(_ sender: UIButton) {\n    getUser().subscribe(onNext: { (user) in\n        print(user)\n    }, onError: { (error) in\n        print(\"ERROR SECOND TRY \", error)\n    }, onCompleted: { \n        print(\"Completed\")\n    }) { \n        print(\"Disposed\")\n    }.addDisposableTo(disposeBag)\n}\n\n//Get user with fail token for simulate error request for to do my refresh token request and retry my old request\nfunc getUser() -> Observable<User?>  {\n    let providerUser = myRxProvider<UserEndPoints>(plugins: [AccessTokenPlugin(token: \"FailToken\")])\n\n    //I don't understand why i need to implemente the callback\n    providerUser.authenticationBlock = { (_ done: () -> Void) -> Void in\n        print(\"DONE\")\n        done()\n    }\n\n    let response = providerUser.request(.ReadCurrent()).mapObjectOptional(type: User.self)\n    return response\n}\n\n/ AUTHENTIFICATION PROVIDER #744 \nI implemente the issue #744 i don't understand the callback first and how and where i need to make my refresh request for after execute my old request /\npublic typealias AuthenticationBlock = (_ done: () -> Void) -> Void\n\npublic enum Error: Swift.Error {\n    case missingAuthenticationBlock\n    case invalidCredentials\n}\n\n\npublic class myRxProvider<Target>: RxMoyaProvider<Target> where Target: TargetType {\n\n    private let disposeBag = DisposeBag()\n    public var authenticationBlock: AuthenticationBlock?\n\n    public override init(endpointClosure: @escaping EndpointClosure = MoyaProvider.defaultEndpointMapping,\n                     requestClosure: @escaping RequestClosure = MoyaProvider.defaultRequestMapping,\n                     stubClosure: @escaping StubClosure = MoyaProvider.neverStub,\n                     manager: Manager = MoyaProvider<Target>.defaultAlamofireManager(),\n                     plugins: [PluginType] = [],\n                     trackInflights: Bool = false) {\n\n        super.init(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, manager: manager, plugins: plugins, trackInflights: trackInflights)\n    }\n\n    public override func request(_ token: Target) -> Observable<Response> {\n        return _request(token)\n    }\n\n    private func _request(_ token: Target, isSecondTryAfterAuth: Bool = false) -> Observable<Response> {\n        return super.request(token)\n            .flatMap { [unowned self] response -> Observable<Response> in\n\n                //check the response status code if error make a refresh token\n                if response.statusCode == 401 || response.statusCode == 403 {\n\n                    //Check if me second try fail return error and move to login view\n                    if isSecondTryAfterAuth {\n                        return Observable<Response>.error(Error.invalidCredentials)\n                    }\n\n                    //Need to make a request for resfresh my token and after i have my response,\n                    //change my header authorisation token to my old request and execute old request\n                    self.refreshTokenAction().subscribe(onNext: { (refreshToken) in\n                        print(resfreshToken)\n                        //Here after i have my new token, change header autorisation and add new token\n                        //into the header\n                        //try the old request with new header\n                    }, onError: { (error) in\n                        print(\"ERROR REFRESH\", error)\n                    }, onCompleted: {\n                        print(\"completed\")\n                    }, onDisposed: {\n                        print(\"disposed\")\n                    })\n\n                    //I don't understand the callback ...\n                    guard let authenticationBlock = self.authenticationBlock else {\n                        throw Error.missingAuthenticationBlock\n                    }\n\n                    //i think is here where my old request is execute\n                    return Observable.create { observer in\n                        authenticationBlock {\n                            self._request(token, isSecondTryAfterAuth: true)\n                                .subscribe { event in\n                                    switch event {\n                                    case .next(let element):\n                                        print(\"test element\", element)\n                                    case .error(let error):\n                                        observer.on(event)\n                                    case .completed:\n                                        print(\"test completed\")\n                                    }\n                                }.addDisposableTo(self.disposeBag)\n                        }\n                        return Disposables.create()\n                    }\n                } else {\n                    return Observable.just(response)\n                }\n        }\n    }\n\n\n    //Refresh token request\n    //We suppose the params is valid\n    func refreshTokenAction() -> Observable<Token?> {\n        let providerToken = myRxProvider<TokenEndPoints>()\n        providerToken.authenticationBlock = { (_ done: () -> Void) -> Void in\n            print(\"TOKEN IS REFRESH\")\n        }\n\n        let response = providerToken.request(.Update(refreshToken: \"Riox8RWVm8lmxxxMaMLF4PMz65MMZp4_oaq5_sjEK8c=\")).mapObjectOptional(type: Token.self)\n        return response\n\n    }\n}\n\n```\nI hope you can help me, if you don't understand something, i can tell you more for understand. @sunshinejr or someone else, if you have any exemple with refresh token and retry old request after the refresh you can show me thanks you so much. @AndrewSB \nI read the issue but i don't understand all, if you have any idea for help me in my code, this will be great!! \ni take look to #748 i need more time for understand, i'm just begin with RxSwift And Moya. Well i don't solve my issue @sunshinejr @AndrewSB any idea?. ```Swift\npublic class myRxMoyaProvider: RxMoyaProvider where Target: TargetType {\nprivate let disposeBag = DisposeBag()\nprivate var refreshToken = \"\"\nprivate var authenticationBlock = { (_ done: () -> Void) -> Void in\n    print(\"Execute refresh and after retry\")\n    done()\n}\n\npublic override init(endpointClosure: @escaping EndpointClosure = MoyaProvider.defaultEndpointMapping,\n                     requestClosure: @escaping RequestClosure = MoyaProvider.defaultRequestMapping,\n                     stubClosure: @escaping StubClosure = MoyaProvider.neverStub,\n                     manager: Manager = MoyaProvider<Target>.defaultAlamofireManager(),\n                     plugins: [PluginType] = [],\n                     trackInflights: Bool = false) {\n\n    if let dictionary = Locksmith.loadDataForUserAccount(userAccount: \"myKeychain\") {\n        if let value = dictionary[\"refresh_token\"] {\n            refreshToken = value as! String\n        }\n    }\n\n    super.init(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, manager: manager, plugins: plugins, trackInflights: trackInflights)\n}\n\npublic override func request(_ token: Target) -> Observable<Response> {\n    return _request(token)\n}\n\nprivate func _request(_ token: Target, isSecondTryAfterAuth: Bool = false) -> Observable<Response> {\n    return super.request(token)\n        .flatMap { [unowned self] response -> Observable<Response> in\n            if response.statusCode == 401 || response.statusCode == 403 {\n                if isSecondTryAfterAuth {\n                    try? Locksmith.deleteDataForUserAccount(userAccount: \"myKeychain\")\n                    return Observable<Response>.error(Error.invalidCredentials)\n                }\n                if !self.refreshToken.isEmpty {\n                    return Observable.create { observer in\n                        self.authenticationBlock {\n                            let providerToken = myRxMoyaProvider<TokenEndPoints>()\n                            providerToken._request(.Update(refreshToken: self.refreshToken), isSecondTryAfterAuth: false).mapObjectOptional(type: Token.self)\n                                .bind(onNext: { (newToken) in\n                                    do {\n                                        let param = [\"refresh_token\": newToken?.refreshToken, \"access_token\": newToken?.accessToken, \"scope\": newToken?.scope, \"token_type\": newToken?.tokenType]\n                                        try Locksmith.updateData(data: param, forUserAccount: \"myKeychain\")\n                                    } catch let error {\n                                        print(\"ERROR SAVE TOKEN INTO KEYCHAIN : \", error)\n                                    }\n                                    self._request(token, isSecondTryAfterAuth: true).subscribe{ event in\n                                        observer.on(event)\n                                    }\n                                })\n                        }\n                        return Disposables.create()\n                    }\n                } else {\n                    return Observable<Response>.error(Error.invalidCredentials)\n                }\n            }\n            else {\n                return Observable.just(response)\n            }\n        }.retry(1)\n}\n\n```\nI hope this code can help you, i don't know if is the best practice with moya and rx to or elegant code but it's resolve my issue\n@rlam3. ",
    "pietrocaselani": "So guys, I made a simple wrapper around the TVDB API using Moya. The TVDB api uses JWT token, and the token expires after 24 hours.\nI implemented the authentication/refresh logic using the requestClosure from MoyaProvider and AccessTokenPlugin, already provided by Moya.\nI don't know if it's the best way to do this. I only did it in the requestClosure because it's asynchronous, if Alamofire allowed us to do synchronous requests, then I think that it's possible to implement this using Moya Plugins, very likely to OkHTTP interceptors\nYou can see the code here. @rlam3 The link that @ashfurrow just posted it is exactly how I implemented. https://github.com/Moya/Moya/blob/master/docs/Authentication.md#oauth\nIf the token is invalid/absent, I request the token, and then, on the completion closure from the token  request I call the requestClosure. This way, the requests keep awaiting until there is a valid token.. @ashfurrow thanks for that link! I was aware of AccessTokenPlugin, it's a great plugin \ud83d\ude1d \nBut I had never seen the part about OAuth\n\n\"Signing\" a network request with OAuth can itself sometimes require network requests be performed first, so signing a request for Moya is an asynchronous process.\n\nIt's exactly what I did \ud83d\ude4c . @rlam3 Yep!\nThe code looks like that:\n```swift\n// (Endpoint, NSURLRequest -> Void) -> Void\nstatic func endpointResolver() -> MoyaProvider.RequestClosure where T: TargetType {\n    return { (endpoint, closure) in\n        let request = endpoint.urlRequest!\n        request.httpShouldHandleCookies = false\n    if (tokenIsOK) {\n        // Token is valid, so just resume the request and let AccessTokenPlugin set the Authentication header\n        closure(.success(request))\n        return\n    }\n    // authenticationProvider is a MoyaProvider<Authentication> for example\n    authenticationProvider.request(.refreshToken(params)) { result in\n        switch result {\n            case .success(let response):\n                self.token = response.mapJSON()[\"token\"]\n                closure(.success(request)) // This line will \"resume\" the actual request, and then you can use AccessTokenPlugin to set the Authentication header\n            case .failure(let error):\n                closure(.failure(error)) //something went terrible wrong! Request will not be performed\n        }\n    }\n}\n\n}\n``. @rlam3 I am using Moya 10.\nSorry, I actually didn't run the previously code. But I think that theendpoint.urlRequest` returns an Optional or throws some error, so you will need to use guard or try?, something like that.\nYou can look at my real implementation here. @rlam3 probably the the requestClosure is been executed for the refresh token request too. \nYou need to skip the authentication/refresh logic when you are making the request to refresh the token, otherwise will enter in a loop.. This issue seems to have been forgotten... sorry about that!\n@ducbm051291  do you still need some help?\nThis problem appear again here and we talked about it here too\nMaybe should we close this in favor of other issues? If we search for refresh on Moya's issues, there are a lot of related issues, about refreshing token, retrying request if auth fails and some like that.. @user6724161 \nYou could encapsulate all providers and token logic in your API Client class, like this:\n```swift\npublic final class MoviesAPIClient {\n    public lazy var movies: MoyaProvider = createProvider(forTarget: Movies.self)\n    public lazy var authentication: MoyaProvider = createProvider(forTarget: Authentication.self)\nprivate var token: String = \"\"\n\nprivate func isTokenValid() -> Bool {\n    // check expiration date\n    return true\n}\n\nfunc createProvider<T: TargetType>(forTarget target: T.Type) -> MoyaProvider<T> {\n    let endpointClosure = createEndpointClosure(forTarget: target)\n    let requestClosure = createRequestClosure(forTarget: target)\n\n    return MoyaProvider<T>(requestClosure: requestClosure)\n}\n\nprivate func createRequestClosure<T: TargetType>(forTarget target: T.Type) -> MoyaProvider<T>.RequestClosure {\n    let requestClosure = { [unowned self] (endpoint: Endpoint, done: @escaping MoyaProvider.RequestResultClosure) in\n        guard let request = try? endpoint.urlRequest() else {\n            done(.failure(MoyaError.requestMapping(endpoint.url)))\n            return\n        }\n\n        if (self.isTokenValid) {\n            done(.success(request))\n            return\n        }\n\n        let target = Authentication.accessToken(code: self.oauthCode,\n                               clientId: self.clientId,\n                               clientSecret: self.clientSecret,\n                               redirectURL: self.redirectURL,\n                                grantType: \"authorization_code\")\n\n        self.authentication.request(target) { result in\n            switch result {\n                case .success(let response):\n                    self.token = response.mapJSON()[\"token\"]\n                    done(.success(request))\n                case .failure(let error):\n                    done(.failure(error)\n                }\n            }\n        }\n    }\n\n    return requestClosure\n}\n\n}\n```\nThis is a pseudo version from this code. @pedrovereza\nThere is more issues related to this, and this one it's getting preety old... should we maybe close this, and redirect the conversation to a central place?. Hi @zichenJack \nI think you can just implement the parameters and parametersEncoding from TargetType protocol. See this documentation.. Hi @zichenJack \nI think you can just implement the parameters and parametersEncoding from TargetType protocol. See this documentation.. I manage to fetch and refresh the token using the requestClosure from MoyaProvider. \nSee this link for code example. I am using Carlos to cache responses. There is an example of how to add Moya support in this issue\nIt's similar to Andrew's idea. . I will work on this!. PR is open. Let me know if there is any problems.. Hi @Puvih \nUsing Moya 9.0.0 you can do like this\nswift\nprovider.rx.request(.zen).mapJSON().subscribe(onSuccess: { json in\n    print(json) // json can be an [[String: AnyObject]] or [String: AnyObject]\n}) { error in\n    print(error)\n}.disposed(by: disposeBag)\nMoya adds methods like mapJSON, mapImage and mapString on Response class\nIn this example, I believe mapString is best, because zen endpoint returns just a string.. Hi @Puvih \nUsing Moya 9.0.0 you can do like this\nswift\nprovider.rx.request(.zen).mapJSON().subscribe(onSuccess: { json in\n    print(json) // json can be an [[String: AnyObject]] or [String: AnyObject]\n}) { error in\n    print(error)\n}.disposed(by: disposeBag)\nMoya adds methods like mapJSON, mapImage and mapString on Response class\nIn this example, I believe mapString is best, because zen endpoint returns just a string.. Is there a way to run the CI again?. Is there a way to run the CI again?. Hey guys! I made a wrapper on TVDB API, and the API uses JWT token. This token expires after 24 hours. I managed to do the authentication and refresh the token automatically.\nYou can see more details here. Yes, Moya and Alamofire supports HTTPS requests.\nAre you facing any issues doing HTTPS request?\nIf you have problems with certificates you can look at this example\nLet us know if you need any help.. > Can we use four spaces for indentation instead of a tab? That would keep it in line with our current code samples.\n@BasThomas Sure! I will change to spaces, sorry about that.\n\nI'm just wondering if we could maybe add a bit of text explaining to the user what we're doing instead of solely giving them a code snippet.\nI also think the document would be better if it didn't discuss refreshing and solely focused on provider composition.\n\n@SD10 I tried to do very likely to the old example, but yes, I agree with you that the example may lost the point that is composition.\nAbout the Closes, I think that will works correctly after the PR gets merged.. Guys, I updated the PR!\nLet me know if I need to change or update something!. What kind of parameters do you want to send? Query parameters?\nYou could look at this document and maybe use the endpointClosure or requestClosure.\nLet us know if you need any help.. @ivangodfather please, see the issue #744 \nYou don't need to extend MoyaProvider to do this.\nLet us know if you need any help.. @ivangodfather I think that the best way to do this is using the requestClosure You can look a example here.\nUsing this approach, you will check if your token is still valid, if it's valid, just execute the done closure. If isn't valid, make the refresh token request, and them, execute the done closure.. Hi @Mridul56 \nThere is some other issues about retrying requests when auth fails. Please, take a look at\nHow to add extension to retry with OAuth?\nSuclass MoyaProvider for token refreshing\nCreating a PluginType to handle request reauthentication\nCan I re-throw Moya error or how to process errors of several async requests\n[Help] OAuth2 Authentication using Moya\nLet us know if you need any help.. Hi @eyrdor \nI assume you are trying to do a POST HTTP request, is that correct?\nDid you try return Task.requestData(string.data(using: .utf8) on the task parameter?\nJust a reminder that data(using) returns a optional (Data?)\nLet us know if you need any help.. Hi @sandeepbol !\nI implemented the authentication/refresh token using the requestClosure from MoyaProvider. You can see an example here.\nLet me know if you need any more help!. Hi @oluckyman \nMaybe this will help you.\nInstead of setting the Authorization header inside the requestClosure, you could just save the token on a property for example, and then use the AccessTokenPlugin to set the header.\nTake a look at this file, where I request and save the token, using the requestClosure https://github.com/pietrocaselani/Trakt-Swift/blob/master/Trakt/TraktTokenInterceptor.swift\nAnd here I use the AceessTokenPlugin to set the header  https://github.com/pietrocaselani/Trakt-Swift/blob/master/Trakt/Trakt.swift\nLet me know if this solve your problem or if you need any further help.. @oluckyman something like this should work. I didn't test this code, but it's based on the code I posted before.\n```swift\nclass MyAPIClient {\n    private var token: String?\nprivate func isTokenValid() -> Bool {\n    return token != nil\n}\n\nfunc createMoyaProvider<T: TargetType>(target: T.Type) -> MoyaProvider<T> {\n    let requestClosure = makeRequestClosure(target: target)\n\n    let accessTokenPlugin = AccessTokenPlugin(tokenClosure: self.token ?? \"\"))\n\n    let plugins = [accessTokenPlugin]\n\n    return MoyaProvider<T>(requestClosure: requestClosure, plugins: plugins)\n}\n\nprivate func makeRequestClosure<T: TargetType>(target: T.Type) -> MoyaProvider<T>.RequestClosure {\n    let requestClosure = { (endpoint: Endpoint, done: @escaping MoyaProvider.RequestResultClosure) in\n        do {\n            var request = try endpoint.urlRequest()\n\n            if isTokenValid() {\n                done(.success(request))\n            } else {\n                Auth.auth().currentUser?.getIDToken { newToken, error in\n                    self.token = newToken\n                    done(.success(request))\n                }\n            }\n        } catch {\n            done(.failure(MoyaError.requestMapping(error.localizedDescription)))\n        }\n    }\n\n    return requestClosure\n}\n\n}\n``. > \"I do not want to request token if it is not needed for request. And inrequestClosure` I have no way to check if the endpoint public or not.\"\nYou only need to request a new token when the token is expired. You will still have to check if the token is valid (is expired or not) in every request, inside the requestClosure, but you don't have to request a new token every single time.. @oluckyman I think if you implement the protocol AccessTokenAuthorizable on your target type and then use the AccessTokenPlugin, you will get what you want.\nExample:\n```swift\nenum MyAPIEndpoint {\n    case somePublicEndpoint\n    case somePrivateEndpoint\n}\nextension MyAPIEndpoint: TargetType, AccessTokenAuthorizable {\n    // implement baseURL, path, method, task...\nvar authorizationType: AuthorizationType {\n    switch self {\n        case .somePublicEndpoint: return .none\n        case .somePrivateEndpoint: return .bearer // or .basic\n    }\n}\n\n}\n``\nThenAccessTokenPluginwill check theAuthorizationType` and add the header or not.. Hi @sathishvgs \nThis is a pretty common issue here, so please, take a look at this answer.\nLet us know if this solves your problem or if you need more help.. @SD10 I think this would be a great addition to Moya!\nI already can see RefreshTokenPlugin working with this!\nAnd looking at Moya internals, more specific, the method MoyaProvider.requestNormal, I think would be possible to add this without too much effort.. @pedrovereza I am not sure that we could provide a RefreshTokenPlugin implementation direct from Moya. I only mentioned because I implemented a refresh token logic using the RequestClosure API because it's async, and there is no (good) way to do a sync request. So, if we provide a plugin type API that supports async code, would be great for these situations\n```swift\n/// Closure that decides if and what request should be performed.\npublic typealias RequestResultClosure = (Result) -> Void\n/// Closure that resolves an Endpoint into a RequestResult.\npublic typealias RequestClosure = (Endpoint, @escaping RequestResultClosure) -> Void\n``. No updates here?\nI was thinking about open a PR implementing this, but I am not sure if I should wait for Moya 12 release before. \nWhat do you think?. @SD10 sorry, what did you try to do using theRequestClosure?\nIf you are talking about the refresh token login, you can look my implementation ofRequestClosure` here and here too.. @SD10 Thanks! And yes, I agree that is unfriendly and definitely should never be a public API, but it solved my problem.\nMy \"inspiration\" was OkHTTP interceptors and authenticator.. Hi @ZZHHAANNGG \nI like to \"map\" errors as a state, so I probably would do something like this\n```swift\nenum ViewState {\n    case purchased(model: PurshadedModel)\n    case purchaseFailed(error: Error)\n}\nObservable.combineLatest(Para1, Para2) {a, b in\n    return (a, b)\n}.flatMap { (arg) -> Observable in\n    let (startDateStr, endDateStr) = arg\n    let target = ATarget() //Creates Moya target type\n    self.provider.rx.request(target)\n}.map { response -> ViewState\n    let model = // map response into PurshadedModel\n    return ViewState.purchased(model)\n}.catchError { error -> Observable in\n    return ViewState.purchaseFailed(error)\n}.subscribe(onNext { viewState in\n    //Binds viewState which can be a purchased or an error into the view\n}).disposed(by: bag)\n```\nbut if you still want to use the BehaviorRelay, I would recommend something like this\n```swift\nObservable.combineLatest(Para1, Para2){a, b in\n    return (a, b)\n}.flatMap{ (arg) -> Observable in\nlet (startDateStr, endDateStr) = arg\nreturn Observable.just(ATarget)\n\n}.flatMap{ unowned self -> Observable in\n    return self.provider.rx.request(target as! PurchaseTarget)\n}.subscribe{ event in\n    switch event {\n    case .success(let response):\n// Give the data to a BehaviorRelay\n        self.result.accept(purchaseModel)\ncase .error(let error):\n\n// Give the data to a BehaviorRelay                          \n        self.errors.accept(Error)\n    }\n}.disposed(by: self.rx.disposeBag)\n// now you can subscribe into self.result and self.errors\n```\nNote that I didn't test this code in Xcode.. > \"is when the provider returns an error, seems like the stream is terminated\"\nThis is the correct and expected behavior. If any unhandled error occurs in the stream, the stream is terminated. And I believe the same will happen if you \"publish\" an error to the subject, so that is why I recommended to handle and map an error a view state.. @ZZHHAANNGG  any updates?\nOtherwise, since this is a duplicate issue (see here), we probably should close this issue too!. Yes!\nYou can use your own JSON Encoder, just use the Task .requestCustomJSONEncodable.\nLet us know if need any more help.. @felixsolorzano Sorry, I thought you would like to encode, but you want to decode a JSON, my bad!\nFor that, you can use the map function like this:\nswift\nlet decoder = JSONDecoder()\ndecoder.keyDecodingStrategy = .convertFromSnakeCase\nmoyaProvider.rx.request(.target).map(SomeDecodableStruct.self, using: decoder)\n. There is an example in the docs, you can see here. Hi @multinerd \nSo... I think that is easier to implement this using Rx, but I made a \"pseudo/fake\" code trying to reproduce the same behavior without Rx.\n```swift\nenum ConnectionType {\n    case wifi\n    case mobile\n}\nenum ConnectionStatus {\n    case offline\n    case online(type: ConnectionType)\n}\nprotocol ConnectivityObserver {\n    func connectionChanged(status: ConnectionStatus)\n}\nclass FakeCancellable: Cancellable {\n    var isCancelled: Bool = false\nfunc cancel() {}\n\n}\nfinal class OnlineProvider where Target: Moya.TargetType : ConnectivityObserver {\n    private let provider: MoyaProvider\nprivate var lastRequestTarget: Target?\nprivate var lastRequestCompletion: Moya.Completion?\nprivate var lastRequestCancellable: Cancellable?\n\nprivate var connectionStatus: ConnectionStatus\n\ninit(endpointClosure: @escaping MoyaProvider<Target>.EndpointClosure = MoyaProvider.defaultEndpointMapping,\n     requestClosure: @escaping MoyaProvider<Target>.RequestClosure = MoyaProvider.defaultRequestMapping,\n     stubClosure: @escaping MoyaProvider<Target>.StubClosure = MoyaProvider.neverStub,\n     manager: Manager = MoyaProvider<Target>.defaultAlamofireManager(),\n     plugins: [PluginType] = [],\n     trackInflights: Bool = false) {\n         self.connectionStatus = .offline\n         self.provider = MoyaProvider(endpointClosure: endpointClosure, requestClosure: requestClosure, stubClosure: stubClosure, manager: manager, plugins: plugins, trackInflights: trackInflights)\n     }\n\nfunc request(_ target: Target, completion: @escaping Moya.Completion) -> Cancellable {\n    if connectionStatus == .online {\n        //We are online! So lets perform the request\n        return provider.request(target, completion)\n    }\n\n    //We are offline :( Lets keep the references to perform the request after...\n    self.lastRequestTarget = target\n    self.lastRequestCompletion = completion\n\n    //Returns a cancellable that does nothing!\n    return FakeCancellable()\n}\n\nfunc connectionChanged(status: ConnectionStatus) {\n    self.connectionStatus = status\n\n    //You should handle those optionals!\n    lastRequestCancellable = provider.request(lastRequestTarget!, lastRequestCompletion!)\n}\n\n//If you want to cancel the request, you should call this method, or expose the `lastRequestCancellable` to the outside world!\nfunc cancel() {\n    lastRequestCancellable?.cancel()\n}\n\n}\n``\nYou need to implement the protocolConnectivityObserver` using a reachability, I think alamofire has something to do this.\nAgain... this is a pseudo code, I didn't test it, is just to give you an idea about the implementation. But I really think that using Rx is a better approach.. Hi @irilattada \nI don't actually know what the trackInflights. This code is just a example and you can find more info about it in here. Hi @dagad \nPlease take a look at those docs to see if help your case.\n Authentication.md\n AuthPlugin.md. Hi @beraybentesen \nThis is a common issue around here, so could you please take a look at those results to see if help your case?\nI believe you will find your answer on https://github.com/Moya/Moya/issues/744. Hi @user6724161 \nI see that you are not using AccessTokenPlugin, I may have forgotten to add this on the other issue.\nI made a small but fully functional project now. Please take a look at TVDBClient https://github.com/pietrocaselani/Moya-RefreshToken-Example. ",
    "ducbm051291": "Moya has changed much, I can't now apply those code above, anyone can help pls ^^ . ",
    "slavasemeniuk": "I think that Alamofire's SessionManager has the elegant way to implement refreshing token and retrying request. And since MoyaProvider get SessionManager's instance on init we can use that approach with Moya\nhttps://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#adapting-and-retrying-requests\n. I'm not sure that Moya provides such a functionality. But you still can use Moya together with PromiseKit to achieve the behaviour described above.. swift   \nfunc request(_ target: Target) -> Promise<Response> {\n        return Promise<Response> { seal in\n            self.request(target, callbackQueue: .main, progress: nil, completion: { result in\n                switch result {\n                case let .success(response):\n                    seal.fulfill(response)\n                case let .failure(error):\n                    seal.reject(error)\n                }\n            })\n        }\n    }\nAnd now you can use it: \nswift \nwhen(fulfilled: userProvider.request(.get), postsProvider.request(.get)). ",
    "user6724161": "@pietrocaselani \nI'm trying to follow your solution, but I'm confused as to where to implement it.\nHere is my Moya provider class:\n```swift\nimport Foundation\nimport Moya\nenum ApiService {\n    case signIn(email: String, password: String)\n    case like(id: Int, type: String)\n}\nextension ApiService: TargetType, AccessTokenAuthorizable {\n    var authorizationType: AuthorizationType {\n        switch self {\n        case .signIn(, ):\n            return .basic\n        case .like(, ):\n            return .bearer\n        }\n    }\nvar baseURL: URL {\n    return URL(string: Constants.apiUrl)!\n}\n\nvar path: String {\n    switch self {\n        case .signIn(_, _):\n            return \"user/signin\"\n        case .like(_, _):\n            return \"message/like\"\n    }\n}\n\nvar method: Moya.Method {\n    switch self {\n        case .signIn, .like:\n            return .post\n    }\n}\n\nvar task: Task {\n    switch self {\n        case let .signIn(email, password):\n            return .requestParameters(parameters: [\"email\": email, \"password\": password], encoding: JSONEncoding.default)\n        case let .like(id, type):\n            return .requestParameters(parameters: [\"messageId\": id, \"type\": type], encoding: JSONEncoding.default)\n    }\n}\n\nvar sampleData: Data {\n    return Data()\n}\n\nvar headers: [String: String]? {\n    return [\"Content-type\": \"application/json\"]\n}\n\n}\nprivate extension String {\n    var urlEscaped: String {\n        return addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!\n    }\nvar utf8Encoded: Data {\n    return data(using: .utf8)!\n}\n\n}\n```\nWhere does your code, below, fit into my code?\n```swift\n// (Endpoint, NSURLRequest -> Void) -> Void\nstatic func endpointResolver() -> MoyaProvider.RequestClosure where T: TargetType {\n    return { (endpoint, closure) in\n        let request = endpoint.urlRequest!\n        request.httpShouldHandleCookies = false\n    if (tokenIsOK) {\n        // Token is valid, so just resume the request and let AccessTokenPlugin set the Authentication header\n        closure(.success(request))\n        return\n    }\n    // authenticationProvider is a MoyaProvider<Authentication> for example\n    authenticationProvider.request(.refreshToken(params)) { result in\n        switch result {\n            case .success(let response):\n                self.token = response.mapJSON()[\"token\"]\n                closure(.success(request)) // This line will \"resume\" the actual request, and then you can use AccessTokenPlugin to set the Authentication header\n            case .failure(let error):\n                closure(.failure(error)) //something went terrible wrong! Request will not be performed\n        }\n    }\n}\n\n}\n```\nLink to my StackOverflow question:\nhttps://stackoverflow.com/questions/54936080/refreshing-auth-token-with-moya. @pedrovereza \nThanks for the quick reply! Two questions.\n(1) I call let provider = MoyaProvider<ApiService>() many times, at the top of each controller I use it in. Is this how I should be using it?\nAnd (2), if I call the above line multiple times in my code, as I am, how can I use @pietrocaselani code without having to write the func endpointResolver function in each of the controllers I call the provider?\nI'm all a bit confused as I'm new to all of this, so please bear with me.. ",
    "aksswami": "Just wanted to thanks @AndrewSB for detailed explanation and @rlam3 for all the questions I wanted to ask. \ud83d\ude09 \nReading above discussion gave me more understanding on how to use Moya in real world scenarios. Thanks again!. Sure, I will try to make a PR against apple's repo in a day or two.. @BasThomas I have create a PR Moya Swift compat. But I am getting error in ./check Moya step. Not able to get much information from the error logs also. I have added comment for asking some help from Swift Compat team. . ",
    "ened": "@ashfurrow , thank you very much, that solves it for me.\nRegarding the documentation, it's actually clear once read carefully. \nMy nitpick would be to link the section about sampleData (in https://github.com/Moya/Moya/blob/master/docs/Targets.md) to https://github.com/Moya/Moya/blob/master/docs/Endpoints.md#from-target-to-endpoint, and to highlight the note about unit tests there for easier readability. \nMoya is super powerful. Thank you all.\n. @BasThomas no time at the moment, still busy in project work. Should be able to help in 1~2 weeks.\n. Should this meanwhile be fixed in Moya (and renamed to MoyaError)?. ",
    "mobilestar0223": "Hello, Andrew.\nThanks for your advice.\nBut it doesn't work for me also. I updated RxSwift from master repo again and also update Moya.\nBut same error occurred.\nI don't know this is because RxSwift or Moya.\nThanks.\n. Hello, Andrew.\nThanks for your advice.\nBut it doesn't work for me also. I updated RxSwift from master repo again and also update Moya.\nBut same error occurred.\nI don't know this is because RxSwift or Moya.\nThanks.\n. I have deleted whole derived data.\nAlso checkout Moya from master.\nStill get same error.\n. I have deleted whole derived data.\nAlso checkout Moya from master.\nStill get same error.\n. ",
    "austinlouden": "@AndrewSB Your example seems more clear to me, I can update. I think adding other Task types may be too complex for Basic.md, but I don't have a strong preference either way.\n. @AndrewSB Your example seems more clear to me, I can update. I think adding other Task types may be too complex for Basic.md, but I don't have a strong preference either way.\n. ",
    "nikolasburk": "Thanks so much for the immediate help, using pod 'Moya', '8.0.0-beta.4' indeed fixed the issue! \ud83d\ude4f\n. Thanks so much for the immediate help, using pod 'Moya', '8.0.0-beta.4' indeed fixed the issue! \ud83d\ude4f\n. pretty sure I already did (unless I missed something?!)\n\n. pretty sure I already did (unless I missed something?!)\n\n. ",
    "crpr": "I'm having the exact same issue with beta.6. I'm having the exact same issue with beta.6. ",
    "davidecastello": "This is actually the default cache policy in iOS when using an URLRequest, which is used by Alamofire at a lower level.\nIf you want to change this behavior while using Moya and see the \"real\" response to your request, you just need to:\n\nDefine requestClosure, where you can modify the request before it's given to Alamofire to hit the network. Here you can change the URLRequest cache policy.\nswift\nlet requestClosure = { (endpoint: Endpoint<YourTarget>, done: MoyaProvider.RequestResultClosure) in\n  var request: URLRequest = endpoint.urlRequest!\n  // this is the important line\n  request.cachePolicy = .reloadIgnoringCacheData\n  done(.success(request))\n}\nDefine the MoyaProvider using this parameter:\nswift\nlet provider = MoyaProvider<YourTarget>(requestClosure: requestClosure)\nAnd you're done!\nYou can still define the MoyaProvider using both requestClosure and endpointClosure:\nswift\nlet provider = MoyaProvider<YourTarget>(endpointClosure: endpointClosure, requestClosure: requestClosure)\nHope this helps someone! . \n",
    "patrikqvarnstrom": "@davidecastello lifesaver! Great stuff. ",
    "bchrobot": ":smile:. Thank you \ud83e\udd17. I believe you can just pass the baseURL in as a parameter to your target\nFileFetchTarget.swift:\n```swift\npublic enum FileFetchTarget {\n    case getFile(baseURL: String, filePath: String)\n}\nextension FileFetchTarget: TargetType {\n    public var baseURL: URL {\n        switch self {\n        case .getFile(let baseURL, _):\n            return URL(string: baseURL)!\n        }\n    }\npublic var path: String {\n    switch self {\n    case .getFile(_, let filePath):\n        return filePath\n    }\n}\n\n...\n\n}\n```\nCalling it in project:\nswift\nlet fileFetchProvider = MoyaProvider<FileFetchTarget>()\nfileFetchProvider.request(.getFile(baseURL: \"https://store.foo.com\", filePath: \"/tiny.zip\")) { result in\n    process(result)\n}. +1 for 3 and for docs/Community \ud83d\ude03 . Also closes #1128 ?. Also closes #1128 ?. Whoops, didn't see #1343 \ud83d\ude14. Whoops, didn't see #1343 \ud83d\ude14. That is a good point. I am inclined to drop the default parameters. There is no benefit to allowing atKeyPath to be left off as there is already a mapString method that takes no parameters.\n. Using a default of nil would allow the mapString methods to be refactored as one method, but I don't think that adds much value.\n. I will take another look at combining them. At first pass I wasn't happy with the nested guard statements and didn't immediately see a cleaner way of handling it.\n. Yeah, I had also been unsure about that one. Keeping the naming consistent makes sense\n. ",
    "Ernest-su": "no, it says Error Domain=NSCocoaErrorDomain Code=262 \"The file couldn\u2019t be opened because the specified URL type isn\u2019t supported.\"\nI print the url, it append a \"/\" \n```swift\nenum DownloadService {\n    case download(baseURL: String,path: String)\n}\nextension DownloadService:TargetType{\nvar baseURL : URL{\n    switch self {\n    case .download(let baseURL,_):\n        return URL(string:baseURL)!\n\n    }\n\n}\n\n\nvar path:String{\n    switch self {\n    case .download(_,let path):\n        return path\n    }\n\n}\n\nvar method: Moya.Method {\n    switch self {\n    case .download:\n        return .get\n\n    }\n\n}\n\n\nvar parameters: [String:Any]?{\n    switch self {\n    case .download:\n        return nil\n    }\n}\n\nvar sampleData:Data{\n    switch self {\n        default:\n        return \"default data\".utf8EncodedData\n    }\n}\n\nvar task:Task{\n    switch self {\n    case .download:\n        return .download(DownloadType.request(DefaultDownloadDestination))\n\n    }\n}\n\n}\nprivate let DefaultDownloadDestination: DownloadDestination = { temporaryURL, response in\n     print(\"url = (response.url)\") //I pass baseURL with \"http://aaa.bbb.ccc\",path with empty string \"\" but here it prints \"http://aaa.bbb.ccc/\"\n      return   (URL(string: NSHomeDirectory()+\"/Documents/\"+response.url!.absoluteString.md5())!, [.removePreviousFile])\n}\n// MARK: - Helpers\nprivate extension String {\n    var urlEscapedString: String {\n        return self.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!\n    }\nvar utf8EncodedData: Data {\n    return self.data(using: .utf8)!\n}\n\n}\n```. @AndrewSB I'm a beginner from android, still  not very familiar with ios stuff. ",
    "lulee007": "if your urls have  path component in them, just try split the whole url into two parts, like this: \nsplit http://www.abc.com/apath/bpath/cpath with a=> http://www.abc.com/apath/bpath/ and b=> cpath,and a put in baseUrl,b put in path\n```swift\n...\nextension FileService:TargetType{\nvar baseURL : URL{\n    switch self {\n    case .download(let url):\n        var newUrl = url.characters.split(separator: \"/\").map{String($0)}\n        newUrl.removeLast()\n        return URL(string: newUrl.joined(separator: \"/\"))!\n    default:\n        return URL(string:\"http://other.com\")!\n}\n\n\nvar path:String{\n    switch self {\n    case.download(let url):\n        let newUrl = url.characters.split(separator: \"/\")\n        return \"\\(String(newUrl.last!))\"\n\n}\n\n...\n```. ",
    "happybobo": "https://github.com/Moya/Moya/pull/608#issuecomment-247292895 @sunshinejr had said Because both Alamofire and RxSwift have iOS 9.0 as a minimum deployment target., But now Alamofire and RxSwift Support iOS 8.0 again; iOS 8 is still 9% of the market share!\n. \ud83d\udc4dSo cool!!!  You are so great!  Cheers!\n. ",
    "ufosky": "I see Alamofire latest version is 4.2.0. Why this use 4.1.0.. @BasThomas It isn't a breaking change, since in this code if jsonObject is not an array or dictionary, it causes a crash, so it's a bug.\njsonData = try JSONSerialization.data(withJSONObject: jsonObject). Maybe we can check the value at a key path is string ,int,bool or null,then convert it to data,this way may support URL ,Date or other Decodable types.. I update the code to support all Decodable types, and modify the test cases follow your advices.. @SD10 Should bump the next release version before add change log entries.. Do we need a method likes below, it returns nil if the keyPath is not present in the response data, just like the method decodeIfPresent(_:forKey:) in protocol KeyedDecodingContainerProtocol:\nswift\nfunc mapIfPresent<D: Decodable>(_ type: D.Type, atKeyPath keyPath: String? = nil, using decoder: JSONDecoder = JSONDecoder()) throws -> D?. @sunshinejr I don't find the correct way to use rebasing. Can I cherry pick the commits into master?. Is there any tryOrThrow implementation in Moya?. But this way only get url from baseURL & path, if some parameters in the url, like http://www.example.com/path?param1=test, only get result http://www.example.com/path. I use this code currently:\nif let request = try? MoyaProvider.defaultEndpointMapping(for: target).urlRequest(),\n  let url = request.url {\n  let key = url.absoluteString\n  return key\n}. Hi, @ZHDeveloper, are you ensure the response data is utf8 encoded.. Because the base value types cannot serialize to json data, so I wrap the value to a Dictionary, then serialize the Dictionary to Data. So when decode the data, the result should be unwrapped.. ",
    "GTMYang": "Thanks!. I'm using 8.0.0-beta.5. Can you tell me how to use requestClosure? Thanks. CompileSwiftSources normal arm64 com.apple.xcode.tools.swift.compiler\n    cd /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods\n    export DEVELOPER_DIR=/Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer\n    export PATH=\"/Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    export SDKROOT=/Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.0.sdk\n    /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc -incremental -module-name SQLite -Onone -enforce-exclusivity=checked -D COCOAPODS -sdk /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.0.sdk -target arm64-apple-ios8.0 -g -module-cache-path /Users/luoyang/Library/Developer/Xcode/DerivedData/ModuleCache -Xfrontend -serialize-debugging-options -embed-bitcode-marker -enable-testing -index-store-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Index/DataStore -swift-version 3 -I /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -I /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/CocoaPods/iphoneos -F /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -c -j4 /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/AggregateFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Blob.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Collation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CoreFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CustomFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Expression.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Foundation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS4.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS5.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Helpers.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Operators.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Query.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/RTree.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Schema.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Setter.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Statement.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Value.swift -output-file-map /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/SQLite.swift-OutputFileMap.json -parseable-output -serialize-diagnostics -emit-dependencies -emit-module -emit-module-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/SQLite.swiftmodule -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-generated-files.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-own-target-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/all-product-headers.yaml -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-project-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift/include -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Private -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Public -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources/arm64 -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources -Xcc -DPOD_CONFIGURATION_DEBUG=1 -Xcc -DDEBUG=1 -Xcc -DCOCOAPODS=1 -emit-objc-header -emit-objc-header-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/SQLite-Swift.h -import-underlying-module -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/unextended-module-overlay.yaml -Xcc -working-directory/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods\nCompileSwift normal arm64 /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/AggregateFunctions.swift\n    cd /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods\n    /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c -primary-file /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/AggregateFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Blob.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Collation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CoreFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CustomFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Expression.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Foundation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS4.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS5.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Helpers.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Operators.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Query.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/RTree.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Schema.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Setter.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Statement.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Value.swift -target arm64-apple-ios8.0 -Xllvm -aarch64-use-tbi -enable-objc-interop -sdk /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.0.sdk -I /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -I /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/CocoaPods/iphoneos -F /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -enable-testing -g -import-underlying-module -module-cache-path /Users/luoyang/Library/Developer/Xcode/DerivedData/ModuleCache -swift-version 3 -enforce-exclusivity=checked -D COCOAPODS -serialize-debugging-options -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-generated-files.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-own-target-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/all-product-headers.yaml -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-project-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift/include -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Private -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Public -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources/arm64 -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources -Xcc -DPOD_CONFIGURATION_DEBUG=1 -Xcc -DDEBUG=1 -Xcc -DCOCOAPODS=1 -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/unextended-module-overlay.yaml -Xcc -working-directory/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods -emit-module-doc-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/AggregateFunctions~partial.swiftdoc -serialize-diagnostics-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/AggregateFunctions.dia -Onone -module-name SQLite -emit-module-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/AggregateFunctions~partial.swiftmodule -emit-dependencies-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/AggregateFunctions.d -emit-reference-dependencies-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/AggregateFunctions.swiftdeps -o /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/AggregateFunctions.o -embed-bitcode-marker -index-store-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Index/DataStore -index-system-modules\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:10: note: while building module 'Darwin' imported from /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:\ninclude      / Needed for the definition of va_list /\n     ^\n\n:1:9: note: in file included from :1:\nimport \"sys/cdefs.h\"\n    ^\n\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sys/cdefs.h:587:10: error: 'sys/_symbol_aliasing.h' file not found\ninclude \n     ^\n\n:1:9: note: in file included from :1:\nimport \"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h\"\n    ^\n\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:10: error: could not build module 'Darwin'\ninclude      / Needed for the definition of va_list /\n     ^\n\n/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift:32:8: error: could not build Objective-C module 'CSQLite'\nimport CSQLite\n       ^\nCompileSwift normal arm64 /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Blob.swift\n    cd /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods\n    /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/AggregateFunctions.swift -primary-file /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Blob.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Collation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CoreFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CustomFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Expression.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Foundation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS4.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS5.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Helpers.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Operators.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Query.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/RTree.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Schema.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Setter.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Statement.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Value.swift -target arm64-apple-ios8.0 -Xllvm -aarch64-use-tbi -enable-objc-interop -sdk /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.0.sdk -I /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -I /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/CocoaPods/iphoneos -F /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -enable-testing -g -import-underlying-module -module-cache-path /Users/luoyang/Library/Developer/Xcode/DerivedData/ModuleCache -swift-version 3 -enforce-exclusivity=checked -D COCOAPODS -serialize-debugging-options -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-generated-files.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-own-target-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/all-product-headers.yaml -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-project-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift/include -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Private -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Public -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources/arm64 -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources -Xcc -DPOD_CONFIGURATION_DEBUG=1 -Xcc -DDEBUG=1 -Xcc -DCOCOAPODS=1 -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/unextended-module-overlay.yaml -Xcc -working-directory/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods -emit-module-doc-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Blob~partial.swiftdoc -serialize-diagnostics-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Blob.dia -Onone -module-name SQLite -emit-module-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Blob~partial.swiftmodule -emit-dependencies-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Blob.d -emit-reference-dependencies-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Blob.swiftdeps -o /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Blob.o -embed-bitcode-marker -index-store-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Index/DataStore -index-system-modules\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:10: note: while building module 'Darwin' imported from /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:\ninclude      / Needed for the definition of va_list /\n     ^\n\n:1:9: note: in file included from :1:\nimport \"sys/cdefs.h\"\n    ^\n\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sys/cdefs.h:587:10: error: 'sys/_symbol_aliasing.h' file not found\ninclude \n     ^\n\n:1:9: note: in file included from :1:\nimport \"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h\"\n    ^\n\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:10: error: could not build module 'Darwin'\ninclude      / Needed for the definition of va_list /\n     ^\n\n/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift:32:8: error: could not build Objective-C module 'CSQLite'\nimport CSQLite\n       ^\nCompileSwift normal arm64 /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Collation.swift\n    cd /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods\n    /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/AggregateFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Blob.swift -primary-file /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Collation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CoreFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CustomFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Expression.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Foundation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS4.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS5.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Helpers.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Operators.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Query.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/RTree.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Schema.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Setter.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Statement.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Value.swift -target arm64-apple-ios8.0 -Xllvm -aarch64-use-tbi -enable-objc-interop -sdk /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.0.sdk -I /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -I /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/CocoaPods/iphoneos -F /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -enable-testing -g -import-underlying-module -module-cache-path /Users/luoyang/Library/Developer/Xcode/DerivedData/ModuleCache -swift-version 3 -enforce-exclusivity=checked -D COCOAPODS -serialize-debugging-options -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-generated-files.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-own-target-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/all-product-headers.yaml -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-project-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift/include -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Private -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Public -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources/arm64 -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources -Xcc -DPOD_CONFIGURATION_DEBUG=1 -Xcc -DDEBUG=1 -Xcc -DCOCOAPODS=1 -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/unextended-module-overlay.yaml -Xcc -working-directory/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods -emit-module-doc-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Collation~partial.swiftdoc -serialize-diagnostics-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Collation.dia -Onone -module-name SQLite -emit-module-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Collation~partial.swiftmodule -emit-dependencies-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Collation.d -emit-reference-dependencies-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Collation.swiftdeps -o /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Collation.o -embed-bitcode-marker -index-store-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Index/DataStore -index-system-modules\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:10: note: while building module 'Darwin' imported from /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:\ninclude      / Needed for the definition of va_list /\n     ^\n\n:1:9: note: in file included from :1:\nimport \"sys/cdefs.h\"\n    ^\n\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sys/cdefs.h:587:10: error: 'sys/_symbol_aliasing.h' file not found\ninclude \n     ^\n\n:1:9: note: in file included from :1:\nimport \"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h\"\n    ^\n\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:10: error: could not build module 'Darwin'\ninclude      / Needed for the definition of va_list /\n     ^\n\n/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift:32:8: error: could not build Objective-C module 'CSQLite'\nimport CSQLite\n       ^\nCompileSwift normal arm64 /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift\n    cd /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods\n    /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/AggregateFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Blob.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Collation.swift -primary-file /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CoreFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/CustomFunctions.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Expression.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Foundation.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS4.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/FTS5.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Helpers.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Operators.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Query.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Extensions/RTree.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Schema.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Typed/Setter.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Statement.swift /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Value.swift -target arm64-apple-ios8.0 -Xllvm -aarch64-use-tbi -enable-objc-interop -sdk /Users/luoyang/Downloads/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.0.sdk -I /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -I /Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/CocoaPods/iphoneos -F /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift -enable-testing -g -import-underlying-module -module-cache-path /Users/luoyang/Library/Developer/Xcode/DerivedData/ModuleCache -swift-version 3 -enforce-exclusivity=checked -D COCOAPODS -serialize-debugging-options -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-generated-files.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-own-target-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/all-product-headers.yaml -Xcc -iquote -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/SQLite-project-headers.hmap -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Products/Debug-iphoneos/SQLite.swift/include -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Private -Xcc -I/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/Headers/Public -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources/arm64 -Xcc -I/Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/DerivedSources -Xcc -DPOD_CONFIGURATION_DEBUG=1 -Xcc -DDEBUG=1 -Xcc -DCOCOAPODS=1 -Xcc -ivfsoverlay -Xcc /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/unextended-module-overlay.yaml -Xcc -working-directory/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods -emit-module-doc-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Connection~partial.swiftdoc -serialize-diagnostics-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Connection.dia -Onone -module-name SQLite -emit-module-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Connection~partial.swiftmodule -emit-dependencies-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Connection.d -emit-reference-dependencies-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Connection.swiftdeps -o /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Build/Intermediates.noindex/Pods.build/Debug-iphoneos/SQLite.swift.build/Objects-normal/arm64/Connection.o -embed-bitcode-marker -index-store-path /Users/luoyang/Library/Developer/Xcode/DerivedData/Olliix-hhcydkvnvnavetcbofimvgbggqgl/Index/DataStore -index-system-modules\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:10: note: while building module 'Darwin' imported from /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:\ninclude      / Needed for the definition of va_list /\n     ^\n\n:1:9: note: in file included from :1:\nimport \"sys/cdefs.h\"\n    ^\n\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sys/cdefs.h:587:10: error: 'sys/_symbol_aliasing.h' file not found\ninclude \n     ^\n\n:1:9: note: in file included from :1:\nimport \"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h\"\n    ^\n\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/sqlite3.h:35:10: error: could not build module 'Darwin'\ninclude      / Needed for the definition of va_list /\n     ^\n\n/Users/luoyang/Documents/\u516c\u53f8\u9879\u76ee/Olliix/Code/branches/dev_v1.1/Olliix/Pods/SQLite.swift/Sources/SQLite/Core/Connection.swift:32:8: error: could not build Objective-C module 'CSQLite'\nimport CSQLite\n       ^. ",
    "Dharin-shah": "Hey @ashfurrow do you mind helping me out on this?. Nope, That I cannot parse it since it does not seem like json to me. json\n{\n  \"message\": \"422 Unprocessable Entity\",\n  \"errors\": {\n    \"otp_code\": [\n      \"The selected otp code is invalid.\"\n    ]\n}\nThis is what i get in Postman and here's my mapping code\n```swift\nstruct ResponseErrorModel : Mappable{\n    var message: String?\n    var statusCode : Int?\n    var errors : String?\nmutating func mapping(map: Map) {\n    message <- map[\"message\"]\n    statusCode <- map[\"status_code\"]\n    errors <- (map[\"errors\"], LfArrayStringTransform())\n}\n\ninit?(map: Map) {\n}\n\ninit(){}\n\n}\n```. As I have commented out before that the value I get while transformation prints something like this\nOptional({\n    email =     (\n        \"The email has already been taken.\"\n    );\n    \"mobile_number\" =     (\n        \"The mobile number has already been taken.\"\n    );\n})\n```swift\nopen class LfArrayStringTransform : TransformType {\n    public typealias Object = String\n    public typealias JSON = [[String]]\npublic init() {}\n\nopen func transformFromJSON(_ value : Any?) -> String?{\n/* This Prints\n\nOptional({\n    email =     (\n        \"The email has already been taken.\"\n    );\n    \"mobile_number\" =     (\n        \"The mobile number has already been taken.\"\n    );\n})\n*/ \n print(value)\n    do{\n        let jsonData = try JSONSerialization.data(withJSONObject: value, options: []) as? [AnyHashable : Any]\n        print(jsonData) // this is nil\n    }catch{\n    }\n\n/Goes in there (obvious it was , silly me)/\n        if let someValue = value as? Any{\n    }\n    /* Not Going in Here */\n    if let arrayValue = value as? [[String]]{\n        return arrayValue.flatMap({ (value) -> String in\n           return value.joined(separator: \", \")\n        }).joined(separator: \", \")\n    }\n    return nil\n}\n\nopen func transformToJSON(_ value: String?) -> [[String]]? {\n    return nil\n}\n\n}\n. Yup. After doing custom transformation, as i wrote down above. The value I am getting in the parameter i.e. of **Any?** type prints this. So how do i transform this value into a dictionary or json. JSONSerialization fails.json\n{\n  \"message\": \"422 Unprocessable Entity\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ],\n    \"mobile_number\" : [\n      \"The mobile number has already been taken.\"\n    ]\n}\nThis is the actual value for the request in postman. (The same request I am doing in my app ) Just go for the semantics here.. True but then considering the actual json, it shouldnt fail, should it? (The Casting I mean). True but then considering the actual json, it shouldnt fail, should it? (The Casting I mean). Yeah I just tried that and it indeed failed.. Yeah I just tried that and it indeed failed.. So do i have to convert the string json first into data??\nBecause i did that as wellswift\nopen func transformFromJSON(_ value : Any?) -> String?{\n        print(String(describing: value))\n        let stringData = String(data: value as! Data, encoding: String.Encoding.utf8)\n        print(stringData)\nreturn nil\n    }\n```\nBut it gives me runtime exception. So do i have to convert the string json first into data??\nBecause i did that as well\nswift\nopen func transformFromJSON(_ value : Any?) -> String?{\n        print(String(describing: value))\n        let stringData = String(data: value as! Data, encoding: String.Encoding.utf8)\n        print(stringData)\nreturn nil\n    }\nBut it gives me runtime exception. Hey @BasThomas  Thanks a lot, I did all of that you said before And I realised a lot later the problem is not with Moya so I apologise for that.\nBTW I solved it by casting it to a dictionary [AnyHashable : Any] directly.\nThank you so much for your time. Much Appreciated.. Hey @BasThomas  Thanks a lot, I did all of that you said before And I realised a lot later the problem is not with Moya so I apologise for that.\nBTW I solved it by casting it to a dictionary [AnyHashable : Any] directly.\nThank you so much for your time. Much Appreciated.. ",
    "manas-chaudhari": "Thanks a lot.\nPerhaps deserialization is difficult to integrate because of the enum structure. It seems doable if we use protocols with associated types for Request & Response. \nFor example:\n```swift\nprotocol Api {\n    associatedtype Result\n    associatedtype Request\nstatic func parameters(request: Request) -> [String: Any]?\nstatic func parse(data: Data) -> Result?\n\n}\nextension Api {\n    static func call(request: Request) -> Result? {\n        let params = parameters(request: request)\n        // Invoke api get result\n        return parse(data: Data())\n    }\n}\nextension Api where Result: ModelProtocol {\n    internal static func parse(data: Data) -> Result? {\n        return Result.init(data: data)\n    }\n}\n```\nWith this, Api can be declared using a struct\nswift\nstruct AuctionInfo: Api {\n    typealias Request = Int\n    typealias Result = Auction\n}\nAre there any plans to add support for deserialization?. Structs conforming to TargetType, should work in my case.\nIf I go ahead with this, will I need to create a different provider instance for every type of api call OR could there be a better approach?\n. Thanks @AndrewSB, I will mostly go ahead with creating a Networking layer. \nHowever, I strongly feel that a network abstraction library is incomplete without any support for deserialization. We can take inspiration from other platforms. For example, Retrofit for Java/Android really makes networking seamless.. Regarding dependency with JSON parsing, wouldn't it be possible to create a new Parser protocol in Moya for parsing data to any object? \nConsumers can then create these parsers using any JSON/XML parsing library. These parsers could be registered when creating MoyaProvider. This way, deserialization can be implemented without Moya having to depend on any JSON library.\nDecodableTargetType approach is great. It will definitely hide the JSON format from API consumer. But user will still need to cast it to the correct model type, right?\n```swift\nenum MyApi: DecodableTargetType {\n    ...\n    func decode() -> Observable {\n        ...\n    }\n}\nprovider.request(.me).decode() // returns Observable\n        .mapTo(User.self)      // <- Can this be eliminated?\n``\nAm I missing something here?. I think it cannot be eliminated without usingassociatedType. If we changeModelTypeto anassociatedType, the decode function can return the desiredObservable`.\n```swift\nprotocol DecodableTargetType: Moya.TargetType {\n    associatedType ModelType: SomeJSONDecodableProtocolConformance\n}\nenum MyAPI: DecodableTargetType {\n  ...\n    typealias ModelType = String\nfunc decoded(response: Response) -> Observable<ModelType> { // This works\n  // parse things and return the correct modelType\n}\n\n...\n}\n```\nHowever, this takes us back to the initial discussion with @scottrhoyt. One DecodableTargetType conformance can return only specific type of Model. We could go ahead by creating a struct for every network api.\nBut then, the next problem is that a different MoyaProvider instance is required for different api calls. This is undesirable as any setup (like custom endpoint closure, etc.) would be required for every api invocation. \nCan we build a MoyaProvider variant which does not have a generic <Target> parameter?\nFrom what I understood, the Target generic parameter is used to have static checks in request(target: Target). We should be able to move the class level generic parameter to the request function. This would allow using the same MoyaProvider for different types that conform to TargetType.\n. @justinmakaila @AndrewSB Thank you for your inputs. I will be going ahead with creating a wrapper over MoyaProvider.. Yes, I am interested in getting this added to Moya. Let me summarize the points.\nCurrent implementation of MoyaProvider has a template variable <Target> at the class level. Because of this, one instance of MoyaProvider can work with only one type of target. \nUsing MultiTarget, we have created a wrapper so that a single instance can be used for different inner TargetTypes. This works when there are no associated types involved in enums.\nIn order to extend Moya's functionality, it is sometimes necessary to use associated types by extending the TargetType protocol. One use case is to abstract deserialization, so that MoyaProvider can return an Observable<ModelType>, where ModelType is the associatedtype. This has been discussed in https://github.com/Moya/Moya/issues/823#issuecomment-265458718.\nThe idea is to build a MoyaProvider variant which does not have any template variable at the class level, but instead at the request method level. \nfunc request<T: TargetType>(request: T, completion: Moya.Completion)\nThis would allow basic usage and also allow Moya consumers to add extensions like:\nfunc requestDecoded<T: DecodableTargetType>(request: T, completion: (_ result: Result<T.ResultType, Moya.Error>) -> ())\nor simply\nfunc requestDecoded<T: DecodableTargetType>(request: T) -> Observable<T.ResultType>\nI don't have access to reopen the issue. @AndrewSB Can you do this?. Yes, I would love to implement this. Amending the docs is a good idea. I'll first update one of the examples doc assuming that this MoyaProvider exists. \nIn the above example, DecodableTargetType extends TargetType.\nswift\nprotocol DecodableTargetType: Moya.TargetType {\n    associatedType ResultType: SomeJSONDecodableProtocolConformance\n}\nPerhaps a specific example would help.\n```swift\nenum UserApi : DecodableTargetType {\n    case get(id: Int)\n    case update(id: Int, name: String)\n    ...\nvar baseURL: URL { ... }\nvar path: String { switch self ... }\nvar method: Moya.Method { ... }\n\ntypealias ResultType = UserModel\n\n}\n```\nTo invoke the api\n```swift\nlet user = provider.request(UserApi.get(id: 1)) \n// The type for user is Observable\nlet user: Observable = provider.request(UserApi.get(id: 1))\n// This doesn't compile. Thus, you get a compile time check for ensuring the right type\n```\nThus, the generic parameter UserApi is implicitly derived from the Api instance provided. The return type is also implicitly derived from the Api instance provided. The beauty of this is that the return type changes (implicitly) based on the argument that you pass to the function.\nIn case of provider.request(.me).map(UserModel.init), this will fail at runtime if an incorrect model is passed.\nI hope this makes it clear. The content for the updated doc would also be on these lines.. My opinion is that if the end-user prefers strong types over grouping, he should have that choice.\nEarlier, I was expecting MultiMoyaProvider implementation to get complicated, hence I wanted this to be included in the core.\nHowever, I tried to implement this and it has turned out to be very simple. Thus, with respect to implementation, I am fine with building it as an extension.\nswift \nclass MultiMoyaProvider: MoyaProvider<MultiTarget> { }\nThe key deliverable here is the documentation. My only concern now is whether an extension which contains only documentation makes sense.. I felt this would be useful when I was trying to use structs instead of an enum for TargetType. For sharing implementations of few methods like baseUrl between the structs, I was planning to create a hierarchy of structs using inheritance, where parent struct will conform the TargetURLType protocol.\nHowever, this approach felt too rigid. Because, the way the TargetType gets broken directly impacts on what can and can't be shared. I needed a flexible approach.\nI took a protocol oriented approach by creating intermediate empty protocols and adding extension functions to them.\n```swift\nprotocol GithubUrl { }\nextension GithubUrl {\n    var baseURL: URL { return URL(string: \"https://raw.githubusercontent.com\")! }\n}\nstruct EventsApi: TargetType, GithubUrl {\n    var path: String { return \"events\" }\n}\n```\nUltimately, the decomposition didn't feel like the right approach for this usecase.. ",
    "jaymutzafi": "Awesome! . ",
    "xnxin": "@ashfurrow But I must change page number value every time when i used it, Any better idea? May be use struct to do this ,I'll try. OK\uff0cnow I solve this problem.\nfirst, I define a offsetModel mapping from server data,\n```swift\nfinal class OffsetModel {\n    var total: Int = 0\n    var pageSize: Int = 0\n    var pageNum: Int = 0\n    var startRow: Int = 0\n    var endRow: Int = 0\n    var pages: Int = 0\nvar elements: [T] = [T]()\n\n}\nand I define a endPoint to add offset parameters,\nlike thisswift\nlet pageSize = 20\nextension XXXProvider {\nstatic func offsetEndpointClosure(_ target: Target, page: Int, pageSize: Int = pageSize) -> Endpoint<Target> {\n\n    let url = target.baseURL.appendingPathComponent(target.path).absoluteString\n    var params:[String: Any] = target.parameters ?? [:]\n    params[\"startPage\"] = page\n    params[\"pageNum\"] = pageSize\n\n    return Endpoint(url: url,\n                    sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n                    method:target.method,\n                    parameters:params).adding(newHTTPHeaderFields: target.headers)\n}\n\n}\nfinally, define a class to accept a target and modelType to automatic mapping,\nlike thisswift\nclass PaginationViewModel where Target: XXXTargetType, T: Mappable {\n//MARK: -\n//MARK: outlet && variables\nlet refreshTrigger = PublishSubject<Void>()\nlet loadmoreTrigger = PublishSubject<Void>()\n\nlet hasMore = Variable<Bool>(false)\nlet loading = Variable<Bool>(false)\nlet elements = Variable<[T]>([])\nlet currentPage = Variable<Int?>(nil)\nlet offsetModel = Variable<OffsetModel<T>?>(nil)\n\nlet error = PublishSubject<Swift.Error>()\n\nfileprivate let disposeBag = DisposeBag()\n//MARK: -\n//MARK: life cycle\n\ninit(_ target: Target) {\n\n    let refreshProvider = loading.asObservable()\n        .sample(refreshTrigger)\n        .flatMapLatest { loading\n            -> Observable<XXXProvider<Target>> in\n\n            guard loading == false else {\n                return Observable.empty()\n            }\n\n            let provider = XXXProvider<Target>(endpointClosure: { target in\n                return XXXProvider<Target>.offsetEndpointClosure(target, page: 1)\n            })\n            return Observable.just(provider)\n    }\n\n    let loadmoreProvider = Observable\n        .combineLatest(loading.asObservable(),\n                       hasMore.asObservable(),\n                       currentPage.asObservable()) { $0 }\n        .sample(loadmoreTrigger)\n        .flatMapLatest { (loading, hasMore, currentPage)\n            -> Observable<XXXProvider<Target>> in\n\n            if let page = currentPage, !loading && hasMore {\n\n                let provider = XXXProvider<Target>(endpointClosure: { target in\n                    return XXXProvider<Target>.offsetEndpointClosure(target, page: page)\n                })\n                return Observable.just(provider)\n            }\n            return Observable.empty()\n    }\n\n    let provider = Observable\n        .of(refreshProvider, loadmoreProvider)\n        .merge()\n        .shareReplay(1)\n\n    let response = provider\n        .flatMapLatest { provider -> Observable<Response> in\n\n\n            return provider.request(target)\n                .do(onError: { [weak self] error in\n                    self?.error.onNext(error)\n                }).catchError { _ in Observable.empty() }\n        }.shareReplay(1)\n\n    Observable\n        .of(\n            provider.map { _ in true },\n            response.map { _ in false },\n            error.map { _ in false }\n        )\n        .merge()\n        .bindTo(loading)\n        .addDisposableTo(disposeBag)\n\n    Observable\n        .combineLatest(provider, response, elements.asObservable())\n        { endPoint, response, elements -> [T] in\n\n            do {\n                let ofModel:OffsetModel<T> = try response.mapObject()\n                return ofModel.pageNum == 1 ? ofModel.elements : elements + ofModel.elements\n            } catch {\n                throw APPError.jsonDecoded\n            }\n        }\n        .debug()\n        .sample(response)\n        .bindTo(elements)\n        .addDisposableTo(disposeBag)\n\n    response\n        .withLatestFrom(provider) {\n            do {\n                let ofModel:OffsetModel<T> = try $0.0.mapObject()\n                return ofModel.pageNum\n            } catch {\n                throw APPError.jsonDecoded\n            }\n        }\n        .debug()\n        .bindTo(currentPage)\n        .addDisposableTo(disposeBag)\n\n    response\n        .map {\n            do {\n                return try $0.mapObject()\n            } catch {\n                throw APPError.jsonDecoded\n            }\n        }.bindTo(offsetModel)\n        .addDisposableTo(disposeBag)\n\n    response\n        .map {\n            do {\n                let of:OffsetModel<T> = try $0.mapObject()\n                return of.pageNum * of.pageSize < of.total\n            } catch {\n                throw APPError.jsonDecoded\n            }\n        }\n        .bindTo(hasMore)\n        .addDisposableTo(disposeBag)\n}\n\n}\n```\nusge:\nswift\nvar viewModel: PaginationViewModel<XXXAPI, CommentModel> = PaginationViewModel(.comments(merchantID: \"54\"))\nbind for view\n```swift\n     rx.sentMessage(#selector(UIViewController.viewWillAppear(_:)))\n            .map { _ in () }\n            .bindTo(viewModel.refreshTrigger)\n            .addDisposableTo(disposeBag)\n    viewModel.elements.asDriver()\n        .debug()\n        .drive(tableView.rx.items(cellIdentifier: \"CommentViewCell\")){ _, model, cell in\n            guard let cell = cell as? CommentViewCell else {\n                return\n            }\n\n            cell.nameLabel.text = model.name\n            cell.timeStampLabel.text = model.createTime?.string(format: \"yyyy-MM-dd\")\n            cell.commentLabel.text = model.content\n            cell.avatarImageView.image = #imageLiteral(resourceName: \"logo\")\n            cell.startView.rating = NSDecimalNumber(decimal: model.grage).floatValue\n\n            guard let avatarURL = model.avatarImageURL else {\n                return\n            }\n            cell.avatarImageView.sd_setImage(with: avatarURL, placeholderImage: #imageLiteral(resourceName: \"logo\"))\n        }\n        .addDisposableTo(disposeBag)\n\n    viewModel.loading.asDriver()\n        .drive(activityIndicator.rx.isAnimating)\n        .addDisposableTo(disposeBag)\n\n```\nIf there has any better idea ,plz tell me, thanks.. ",
    "nahung89": "Sure! Here is it.\n\ngithub \"Alamofire/Alamofire\" \"4.2.0\"\ngithub \"Moya/Moya\" \"3.0.0\"\ngithub \"Hearst-DD/ObjectMapper\" \"2.2.1\"\ngithub \"SwiftyJSON/SwiftyJSON\" \"3.1.3\"\ngithub \"realm/realm-cocoa\" \"v2.1.1\"\n\n. UPDATE: 12/12\nI remove others framework and keep Moya only:\n\ngithub \"Moya/Moya\"\n\nAfter running Carthage turns out another error:\n\n$ carthage update --platform iOS\n Fetching Moya\n Fetching RxSwift\n Fetching Alamofire\n Fetching Result\n Checking out Alamofire at \"3.5.1\"\n Checking out Result at \"2.1.3\"\n Checking out ReactiveCocoa at \"v4.2.2\"\n Checking out RxSwift at \"2.6.1\"\n Checking out Moya at \"7.0.4\"\n xcodebuild output can be found in /var/folders/1n/81b947wj2_12d0s_xnps_ptw0000gn/T/carthage-xcodebuild.hgN728.log\n*** Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\nA shell task (/usr/bin/xcrun xcodebuild -project /Users/nah/Data/Projects/My/Carthage/Checkouts/Moya/Demo/Pods/Pods.xcodeproj CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES -list) failed with exit code 74:\nxcodebuild: error: Unable to read project 'Pods.xcodeproj' from folder '/Users/nah/Data/Projects/My/Carthage/Checkouts/Moya/Demo/Pods'.\n  Reason: Project /Users/nah/Data/Projects/My/Carthage/Checkouts/Moya/Demo/Pods/Pods.xcodeproj cannot be opened because it is missing its project.pbxproj file.\n. It doesn't work. Let me will try other way to use Moya first. Hope this bug will be fixed soon. :D \n$ carthage update --platform iOS\n Fetching Moya\n Fetching RxSwift\n Fetching Alamofire\n Fetching Result\n Checking out Alamofire at \"4.2.0\"\n Checking out Result at \"3.1.0\"\n Checking out ReactiveSwift at \"1.0.0-alpha.3\"\n Downloading RxSwift.framework binary at \"Graham\"\n Checking out Moya at \"8.0.0-beta.5\"\n xcodebuild output can be found in /var/folders/1n/81b947wj2_12d0s_xnps_ptw0000gn/T/carthage-xcodebuild.MApVEr.log\n*** Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\nA shell task (/usr/bin/xcrun xcodebuild -project /Users/nah/Data/Projects/My/Carthage/Checkouts/Moya/Demo/Pods/Pods.xcodeproj CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES -list) failed with exit code 74:\nxcodebuild: error: Unable to read project 'Pods.xcodeproj' from folder '/Users/nah/Data/Projects/My/Carthage/Checkouts/Moya/Demo/Pods'.\n  Reason: Project /Users/nah/Data/Projects/My/Carthage/Checkouts/Moya/Demo/Pods/Pods.xcodeproj cannot be opened because it is missing its project.pbxproj file.\n\nCartfile\n\ngithub \"Moya/Moya\" >= 8.0\n\nCartfile.resolved\n\ngithub \"Alamofire/Alamofire\" \"4.2.0\"\ngithub \"antitypical/Result\" \"3.1.0\"\ngithub \"ReactiveX/RxSwift\" \"3.0.1\"\ngithub \"ReactiveCocoa/ReactiveSwift\" \"1.0.0-alpha.3\"\ngithub \"Moya/Moya\" \"8.0.0-beta.5\". One more question, why do we need to import Demo project into Carthage configuration? As I see the error log, XCode can not build it while Pod.xcodeproj is missing.. Still get the problem. I remove cache by this command line\n$ rm -rf ~/Library/Caches/org.carthage.CarthageKit\n. @AndrewSB I'm using XCode 8.0, Carthage 0.18.1, Swift 3.0.  . AndrewSB: After doing few steps, the problem is gone now. Hope this could help other users. :)\n1. Update XCode to 8.2 (8C38)\n2. Remove Carthage cache:  $ rm -rf ~/Library/Caches/org.carthage.CarthageKit\n3. From project folder, remove Carthage/Build and Carthage/Checkouts\n4. Add github \"Moya/Moya\" >= 8.0\n5. Rebuild carthage: $ carthage update --platform iOS\n\nCartfile:\n\ngithub \"Moya/Moya\" >= 8.0\ngithub \"Alamofire/Alamofire\"\ngithub \"SwiftyJSON/SwiftyJSON\"\ngithub \"realm/realm-cocoa\"\ngithub \"Hearst-DD/ObjectMapper\"\n\nConsole log: \n\n Fetching ObjectMapper\n Fetching realm-cocoa\n Fetching SwiftyJSON\n Fetching Alamofire\n Fetching Moya\n Fetching RxSwift\n Fetching Result\n Checking out Alamofire at \"4.2.0\"\n Checking out ObjectMapper at \"2.2.2\"\n Downloading realm-cocoa.framework binary at \"v2.1.1\"\n Checking out Result at \"3.1.0\"\n Checking out ReactiveSwift at \"1.0.0-alpha.3\"\n Downloading RxSwift.framework binary at \"Graham\"\n Checking out Moya at \"8.0.0-beta.5\"\n Downloading SwiftyJSON.framework binary at \"3.1.3\"\n xcodebuild output can be found in /var/folders/1n/81b947wj2_12d0s_xnps_ptw0000gn/T/carthage-xcodebuild.BfYI4k.log\n Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\n Building scheme \"ObjectMapper-iOS\" in ObjectMapper.xcworkspace\n Building scheme \"Result-iOS\" in Result.xcodeproj\n Building scheme \"ReactiveSwift-iOS\" in ReactiveSwift.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/nah/Data/Projects/Aries/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/nah/Data/Projects/Aries/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/nah/Data/Projects/Aries/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/nah/Data/Projects/Aries/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n Building scheme \"ReactiveMoya iOS\" in Moya.xcodeproj\n Building scheme \"Moya iOS\" in Moya.xcodeproj\n*** Building scheme \"RxMoya iOS\" in Moya.xcodeproj. \n",
    "lxkbest": "\u53d1\u73b0\u5728\u79bb\u5f00\u63a7\u5236\u5668\u4e4b\u540e \u6570\u636e\u624d\u8fd4\u56de\uff0c\u8fd9\u65f6 self = nil \u6240\u6709\u60f3\u95ee\u95eedeinit \u662f\u5426\u6709\u53d6\u6d88\u7684\u65b9\u6cd5\uff1f. How do I cancel the current controller in controller deinit all requests\n. ",
    "xiangyu-sun": "\u7528\u4e86RX\u7684\u8bdd \u4e0d\u7528\u7ba1. \u7528\u4e86RX\u7684\u8bdd \u4e0d\u7528\u7ba1. ",
    "gongyucheng": "@xiangyu-sun  what do you mean please?Can you say more details? how to use it when i pop viewcontroller. @xiangyu-sun  what do you mean please?Can you say more details? how to use it when i pop viewcontroller. ",
    "jonlambert": "@BasThomas \nThanks for your quick reply! NetworkLogger doesn't really add anything extra info - in fact at the moment it's not showing any request at all. \nI'm using Moya/Swift ~> 8.0.0-beta.4 - should I give the latest version a go?\n. @BasThomas ah, now I remember why I'm tied to this version: I'm pairing Moya with Moya-SwiftyJSONMapper which specifies beta.4. Thanks @BasThomas but I've just updated, no luck I'm afraid! Still getting the same issues. Is my parameters property specified correctly?. @BasThomas ah that was a mistake when I tidied it up! It's specified as GET in the actual file. I'll edit the file attached accordingly.. @AndrewSB Yep - problem occurs both with and without the subscription being added to a DisposeBag.. @justinmakaila I've had this issue sporadically too, just this time (luckily or unluckily?) it's consistently failing so I can examine it further.\n@scottrhoyt I will certainly try and put together a repro tomorrow (I'm on UK time at the moment). I expect accurately reproducing the server's behaviour might be a bit difficult if it's a server quirk throwing Moya off - but I'll give it a go nonetheless. \nThat's a great point about the JSONEncoding. I'll look into that now!\n@AndrewSB I've tested that with a 5 second delay to no avail unfortunately. Still the same timeout. \ud83d\ude15. @scottrhoyt Just tried your suggestion this morning - that fixed it! \nswift\nlet endpoint = Endpoint<ToshiAPI>(\n    url: url,\n    sampleResponseClosure: {.networkResponse(200, target.sampleData)},\n    method: target.method,\n    parameters: target.parameters,\n    parameterEncoding: target.method == .get ? URLEncoding.default : JSONEncoding.default\n)\nLooks like there's an issue with Alamofire timing out when sending GET requests using Alamofire with JSON in the body: https://github.com/Alamofire/Alamofire/issues/1530, https://github.com/Alamofire/Alamofire/issues/1819\nIf you guys think this use case is common enough then this conditional is fine; perhaps I could add a pointer in the documentation though. \nOtherwise I'd be happy to discuss other ways of handling this automatically when using JSONEncoding \ud83d\udc4d (Although perhaps that's an issue for Alamofire itself)\nThank you so much everyone for your help! . If you get a reproducible error @justinmakaila I'd be interested in following along. I have a feeling this isn't the same bug as the sporadical timeout. . Reopening issue - it worked in the instance above but I'm getting the same error using it elsewhere in the code. Looks like a similar scenario to @justinmakaila.. @scottrhoyt There's no output from the logging plugin when I make the request - I'll attempt to reproduce the issue as soon as I can! . @scottrhoyt\nI have attempted to reproduce the issue, the repository can be found here: https://github.com/jonlambert/MoyaIssue844. Alternatively if you want to have the subscription remain there's .catchError|.catchErrorJustReturn to handle the error before it disposes. For example:\n```swift\nprovider.request(.token(,))\n  .filterSuccessfulStatusCodes()\n  .catchError() { error -> Observable in\n    // do something to return a new Observable, retry etc.\n// ...or pass it along if it's not recoverable\nthrow error\n\n}\n  .mapObject(type: MyObjectMap.self)\n  .subscribe(onNext:{ object in\n// do something with mapped object\n\n})\n```. ",
    "bidadh": "@jonlambert I had similar issue. tried curl command with same result.\nthere's been 2 issues:\n\nadding -d {} to the curl command because of empty dictionary in the parameters rather than nil which makes the request post instead of get\nadding -H \"Accept-Encoding: gzip;q=1.0, compress;q=0.5\" in the headers\n\nI changed the code that @justinmakaila provided a little bit and it worked for me:\n```swift\n        let endpointClosure = { (target: GitHub) -> Endpoint in\n            let defaultEndpoint = MoyaProvider.defaultEndpointMapping(for: target)\n            return defaultEndpoint.adding(newHTTPHeaderFields: [\"Accept-Encoding\": \"application/json\"])\n        }\n        provider = RxMoyaProvider(\n                endpointClosure:  endpointClosure,\n                requestClosure: MoyaProvider.defaultRequestMapping,\n                stubClosure: MoyaProvider.neverStub,\n                manager: RxMoyaProvider.defaultAlamofireManager(),\n                plugins: [NetworkLoggerPlugin(cURL: true)],\n                trackInflights: true\n        )\n```\nAlso if your request is get then make sure to return nil for the parameters like this:\nswift\npublic var parameters: [String : Any]? { return nil }\nobviously you can add switch case for different entries. ",
    "kamwysoc": "Ok, thanks for that complete answer! . @pedrovereza \nThanks for your response.\nI've created a sample repo with the test code. Just clone and run it.\nhttps://github.com/k8mil/MoyaBaseURL\nBelow you can see, screen from Charles with 3 options:\nFirst\nrequest was performed with Alamofire using \nURL(string: \"https://google.com/123/somepath?X-ABC-Asd=123\")!\nSecond\nrequest was performed using MoyaProvider with\nbaseURL = \"https://google.com/123/somepath?X-ABC-Asd=123\" \nThird\nrequest was performed using MoyaProvider with\nbaseURL = \"https://google.com and path = \"/123/somepath?X-ABC-Asd=123\"\n\nAnd only Alamofire produces that what I want to achieve :)\nImportant thing is that I'm using Moya in my project and the consuming my backend API with Moya is really great and works perfectly, but I have some case that I have to use the URL(which is not related with backedAPI) that I received from some service and I shouldn't modify that URL. Unfortunately, as you can see in the Second and Thrid example the URL is modified by removing/changing the ? char.\n. Thanks @pedrovereza !\nI've tested it and it works fine.\nSo, now I wait till it will be merged with master \ud83d\udc4d  :). According to this: \nhttps://stackoverflow.com/questions/14551194/how-are-parameters-sent-in-an-http-post-request\nIt seems to be specially designed for POST. . @sunshinejr \nThanks for pointing that. However, finally I'll stay with default way, so my POSTplace the parameters into request body. :) . ",
    "liliah": "So I've found a workaround for this issue. I added an empty string after the authorization parameter and it worked!\nswift\nlet endpointClosure = { (target: MyTarget) -> Endpoint<MyTarget> in\n        let defaultEndpoint = MoyaProvider<MyTarget>.defaultEndpointMapping(target)\n        switch target{\n        case .event:\n        return defaultEndpoint.adding(newHTTPHeaderFields: [\"authorization \": \"Token token=\\(access_token)\"])\n        default:\n            return defaultEndpoint\n        }\n    }\nIf there is a better way to do it let me know!\nThanks.. The workaround that I posted before is actually working. I contacted the API's developer and said about this issue but he told me that it's working normally on Postman and on the Android client so I don't know what exacly caused it. You can close the issue and thanks!. ",
    "mihailstumkins": "I've encountered this issue using AccessTokenAuthorizable, by removing it and using endpointClosure with \"Authorization \" string instead of \"Authorization\" it worked. ",
    "EvilNOP": "8.0.0-beta.6. @bjarkehs Oh, I forget this, thx so much.. ",
    "SaketGupte1mg": "Thanks @scottrhoyt @ashfurrow . This is indeed a great idea. @ashfurrow your implementation is really elegant. Planning to implement it in the same way\n. ",
    "petripartanen": "Thanks for the encouraging feedback. Didn't notice the tests before CircleCI complained. Working on the requested improvements.. codecov/patch coverage looks intimidating and i'm slightly tempted to write a test or two just to bump it up but doubt if the tests would provide any real value here.. In my opinion we can close the issue and consider it completed. The following is bikeshedding and of little importance. \nHaving the following behaviours for Moya.Error and enforcing them using unit tests wouldn't be completely nonsense.\n\nMoya.Error enumaration cases should return non-nil errorDescription.\nEnumeration cases that have associated error, for example .underlying(Swift.Error), should include associatedError.errorDescription in the returned errorDescription.\n\nAs for test implementation I would like it to guide the programmer to the relevant test cases either by 1) failing tests and / or by 2) compiler error when a new error enumeration case is added. If these requirements are not met the test cases go unnoticed too easily.\n1) I couldn't think of easy way to test future enumeration cases as Swift doesn't have convenient way to enumerate enums. I don't want to add static let allValues = [.imageMapping, ...] only for tests.\n2) Compiler error could be archived by using switch statement, something along lines:\n```swift\ndescribe(\"error description\") {\n    it(\"should return description\") {\n        expectNonNilErrorDescriptionFor(error: .imageMapping(response))\n        ...\n        expectNonNilErrorDescriptionFor(error: .underlying(NSError.init()))\n    }\n}\nfileprivate func expectNonNilErrorDescriptionFor(error: Moya.Error) {\n    switch error {\n    case .imageMapping,\n         .jsonMapping,\n         ....\n         .requestMapping:\n        expect(error.errorDescription).to(beNil())\n    }\n}\n```\nAbove implementation is not satisfying as it fills goals only partially. The implementation does guide programmer to relevant file by triggering compiler error and requires adding a new case to the switch but there's no guarantee that the programmer would remember to add a new call to expectNonNilErrorDescriptionFor in it(\"should return description\").\nSumma summarum: couldn't figure out meaningful test cases with elegant and future-proof implementation that didn't require further modifying Moya.Error enum.. ",
    "dannymout": "@scottrhoyt Well, I eventually figured this out, but if you can get this feature added, it would be useful.. Figured it out, didn't look in the right place in the docs.. @BasThomas Sure I'll update the docs.. @scottrhoyt If you don't mind answering, how would I use NetworkLoggingPlugin to do what I need to do?. @scottrhoyt @gperdomor Perfect. Didn't know that is how it worked, thanks.. @Moya/contributors Issue #1001 also discusses the difficulty of finding the docs on stub closures. I'm going to close this.. @hartbit  Were you not able to find the docs? It's pretty clear on how to stub the requests.\nWhen you create an instance of the MoyaProvider, add stubClosure:.\nlet provider = MoyaProvider<MyTarget>(stubClosure: MoyaProvider.immediatelyStub)\nIt might be a good idea to make finding these things easier.. I forgot about declaring the enum.. @gmoalvarez No, I need to return an array, but the variable will only let me return a dictionary object. For example, look at the input that the GitHub API needs: https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue. @BasThomas Well, if I use JSONEncoding for ParameterEncoding, wouldn't the parameters be sent as JSON? Maybe, I'm incorrect.. @gmoalvarez Awesome, but just to make sure, if I'm just using dictionary objects rather than an array, can I use JSONEncoding?. @pedrovereza I set up this project: https://github.com/dannymout/MoyaCrash, it crashes on my computer.. @pedrovereza Followed all that, and I get the same error.\nIs RxTest a Moya dependency, or can I just not link it at all.. I didn't know I could go that barebones. That should fix everything. @pedrovereza . @pedrovereza Yes and thank you, should've closed this sooner, been busy with WWDC.. I'll work on this. Sorry, didn't know that. @BasThomas . ",
    "sadiq81": "Some discussion on the problem http://stackoverflow.com/questions/41433337/observable-returned-from-function-never-sends-onnext/41474121#41474121. Some discussion on the problem http://stackoverflow.com/questions/41433337/observable-returned-from-function-never-sends-onnext/41474121#41474121. Sure, how?. I think that would be the expected behavior, i produced the provider inside a method since i only needed it once. I can see someone else also doing the same thing.. ",
    "bjarkehs": "That would require having ReactiveMoya and RxMoya being located at those location and not in Moya/Moya.. While I think it could be nice that you don't automatically build Rx and ReactiveSwift extensions out-of-the-box with Carthage, then I believe the issues can be mitigated in other ways. \nOne way could be caching Carthage/Build and/or Carthage/Checkout. \nBut another way entirely could be to run it with carthage boostrap --no-build, which would postpone building to when the project is being compiled. I'm not entirely sure how well this option works with Moya, since I haven't personally tried it too much. I did some tests with it earlier today, but failed to get it to compile on CI.. You can change the used ParameterEncoding. An idea could be to create a ParameterEncoding like:\n```swift\npublic struct TokenEncoding: ParameterEncoding {\n    public let token: String\n    private let urlEncoding = URLEncoding(destination: .methodDependent)\ninit(token: String) {\n    self.token = token\n}\n\npublic func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n    // use URLEncoding to encoding parameters\n    // use something like URLEncoding's implementation to add token to URL.\n    // URLEncoding can be found here: https://github.com/Alamofire/Alamofire/blob/master/Source/ParameterEncoding.swift#L70\n}\n\n}\n```\nThis does require that token stays the same I guess. Another way could have it pull out token from passed parameters and then treat the token parameter in a special way. Mind you all of this code has not been tested in any way.. Am I missing something or could the same be achieved with:\n(Slightly modified example)\nswift\nextension MyService: TargetType {\n    ...\n    var path: String {\n        return \"endpoint/xxx\"\n    }\n    ...\n}\nI mean it really depends on your TargetType. If you have associated value with your enum, then you can grab it just like in the Basic Example. You're welcome.. Have a look at parameters in Basic example, and then use URLEncoding for ParameterEncoding.\nSo:\n```swift\nvar parameters: [String: Any] {\n    switch self {\n    case .login(let person):\n        return [\"action\": \"person.signIn\", \"username\": person.login]\n    ...\n    }\n}\nvar parameterEncoding: ParameterEncoding {\n    return URLEncoding()\n}\n```. Actually, sorry. Just reread the question. And you should instead have a look at #909 . @edvmorango I just realized something. #909 deals with the problem of having both body and url parameters. So if you only have data in the URL, and nothing in the body, then actually my first response was more correct.\nswift\nvar parameterEncoding: ParameterEncoding {\n    return URLEncoding(destination: .queryString) // Puts all supplied parameters in the URL.\n}. According to this https://github.com/Moya/Moya/blob/master/Moya.podspec#L25 it uses Alamofire 4.2. Are you sure your issue is not in your Podfile or Xcode configuration?. I think the issue is that path is added to the URL, and since it's a path and not a parameter it wont be put in the parameters, i.e. after ?.\nThis is a slightly hacky way of handling it, but you'll have to handle everything in parameters.\nAnd @scottrhoyt beat me to the punch.. I guess we don't rely on functionality from 4.1, or 4.2 of Alamofire. Or 3.1 for RxSwift. Else I'd suggest making the dependencies: \"Alamofire\", \"~> 4.2\" and \"RxSwift\", \"~> 3.1\". All documentation should still be available at corresponding tag: https://github.com/Moya/Moya/tree/7.0.4. I was not busy labelling @BasThomas \ud83d\ude09 . Yeah, I just realized this when reading your PR. And I was just about to write it, so this time you beat me to it.. Which version of Moya are you using? Could you provide the whole file? Which line produces Use of undeclared type 'foo'? Have you been able to reproduce in a completely new project?. Just realized I made this from the wrong account. Oh well.\nSorry about the very slow response. The commit hash is: 4512a2a4bc8019cf006434378ac6a0640f34f35f\nIt seems that @volodg is also relying on this behaviour in Moya 8.x from how I interpret their response in https://github.com/Moya/Moya/pull/1294#issuecomment-331320987\nI think this was a, potentially unintended, behaviour that people ended up relying on. I do think that the new behaviour is easier to reason about, and you don't end up with potential reference cycles as easily.\nI think this issue can just be closed.. Just realized I made this from the wrong account. Oh well.\nSorry about the very slow response. The commit hash is: 4512a2a4bc8019cf006434378ac6a0640f34f35f\nIt seems that @volodg is also relying on this behaviour in Moya 8.x from how I interpret their response in https://github.com/Moya/Moya/pull/1294#issuecomment-331320987\nI think this was a, potentially unintended, behaviour that people ended up relying on. I do think that the new behaviour is easier to reason about, and you don't end up with potential reference cycles as easily.\nI think this issue can just be closed.. Thanks guys. I'll take a look at all the feedback and make a new and hopefully improved version later today \ud83d\udc4d . I have now reworded it and added more about other extensions such as filtering and mapJSON. I don't know if it makes sense to write about mapString and mapImage. Maybe mention them? I am just worried that the document can very easily become out of sync.. I have now reworded it and added more about other extensions such as filtering and mapJSON. I don't know if it makes sense to write about mapString and mapImage. Maybe mention them? I am just worried that the document can very easily become out of sync.. I\u2019m glad you like it \ud83d\udc4d. Yeah it can. And yes it should've been \"users\". I changed the path sorta last minute.\nHere's something to try in playground:\n```swift\nimport UIKit\nstruct User: Decodable {\n    let firstName: String\n    let lastName: String\n    let updated: Date\n}\nlet json = \"\"\"\n    { \"firstName\": \"James\", \"lastName\": \"Potter\", \"updated\": 1507709926 }\n    \"\"\".data(using: .utf8)!\nlet decoder = JSONDecoder()\ndecoder.dateDecodingStrategy = .secondsSince1970\nlet user = try! decoder.decode(User.self, from: json)\nprint(user)\n```. I think it's because I read the first line of Basic.md and then basically assumed that's how it's written. I can definitely be more factual. I'll have a look at how some of the other documentation is worded.. ",
    "kristiyandobrev": "@pedrovereza I just came to a similar issue again, so I consider re-openning the issue again, since I am uncertain if it's possible to make for example POST or PUT request to api/resource/:id and   pass a json body out of the box, without any additional implementation, as it was suggested above. . @pedrovereza I just came to a similar issue again, so I consider re-openning the issue again, since I am uncertain if it's possible to make for example POST or PUT request to api/resource/:id and   pass a json body out of the box, without any additional implementation, as it was suggested above. . Yes. Thanks for the help . . Yes. Thanks for the help . . ",
    "Dhvl-Golakiya": "Hi,\nThe issue is fixed.\nI'm sending an image in the multipart body instead of task.\nSolution is:\n```swift\n var task : Task {\n        switch self {\n        case .Test(_, let image):\n        let imageData = UIImageJPEGRepresentation(image, 1.0)\n        let formData: [MultipartFormData] = [MultipartFormData(provider: .data(imageData!), name: \"image\", fileName: \"photo.jpg\", mimeType: \"image/jpeg\")]\n        return .upload(UploadType.multipart(formData))\n    default:\n        return .request\n    }\n}\n\n```\nThanks. ",
    "edvmorango": "Ok @bjarkehs, thank you, i'll try this solution.. Thank you again, @bjarkehs, the #909 fits perfectly for my the actual problem, but i'll try this other method in other situations.. So, i resolved using the endPoint constructor\n```swift\nlet urlSolver = { (target: GithubAPI) -> Endpoint in\n    let url = target.baseURL.absoluteString.appending(target.path)\n    return Endpoint(url:  url, sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n}\nlet rxProvider = RxMoyaProvider(endpointClosure: urlSolver)\n```. @YkmLo, that is the code I used to solve this problem one year ago.\nGithubAPI:\npublic var path: String {\n        switch self {\n        case .repository(let page): return \"search/repositories?q=language:Swift&sort=stars&page=\\(page)\"\n        case .pullRequest(let repository):return \"repos/\\(repository.owner.login)/\\(repository.name)/pulls\"   \n        case .user(let username) :  return \"users/\\(username)\"\n        case .prIssues(let repository,  let state) : return \"search/issues?q=repo:\\(repository.owner.login)/\\(repository.name)+is:pr+is:\\(state)\"\n        }        \n    }\n    public var parameterEncoding: Moya.ParameterEncoding{ return URLEncoding.default }\nGithubAPIManager:\nlet urlSolver = { (target: GithubAPI) -> Endpoint<GithubAPI> in\n        let url = target.baseURL.absoluteString.appending(target.path)\n        return Endpoint(url:  url, sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n    }\nI used a different URLEncoding but I don't think that is the reason. The urlSolver will override the default endpoint builder method, I suppose that default urlSolver parses : to . . I think if you debug  this method you will find an answer.\n. ",
    "pluckq": "Yes, server should expect multipart, as i said images uploading working fine.\nI getting status code 400 with message no file here, maybe i should use some other method? \nThank you for response. thank you but no, already doing same. Ok, sorry, it was my fault, wrong field name. Thank you all for response, everything work.. ",
    "Tolriq": "@scottrhoyt Thanks for confirming I'm not mad :)\nAbout storing the provider, this is what I do for the normal behavior of this singleton, then use a subject to push updates and things to listeners, classic Rx things.\nBut this is when already connected to a known host. \nThis function and another are made for discovering of the hosts and testing. So it's more temporary things I'd like to avoid to increase complexity of client to avoid requesting a provider then calling the function. \nNot sure #905 would fix the issue, it sounds like I would at least receive the error but I'll try as soon as I can.\nIs there a workaround to force the provider to not be deallocated ? \nI use cocoapods, if you have a quick hint at how to migrate to master with it :). Thanks will test all that tomorrow.. Ok so tested and yes Master does behave more normally for that use case.\nI have not tested long time provider retention but at least for the time between the return of the func and the call it now always correctly fire the request and return a result.\nThanks for the help and the working solution :)\nIs there an estimate about a public release date ?. ",
    "gunterhager": "Thanks a lot for the hint. I must have overlooked that feature. I've created a plugin that modifies the timeouts according to the target, works like a charm. Thanks again!. ",
    "abadikaka": "@vzsg Thank you so much sir.. Your solution using completion block is worked. Now i could get result in my obj-c bridging... @BasThomas  Hi thanks for the reply, i was trying the extension but somehow it couldnt installed with my pod, seems conflicted with other pod libraries... Thank you for the solution, will try it to learn it too.\n@sunshinejr Great, thank you so much Lukasz, your solution made my day.. Anyway i was the one who email you and read ur blog.. But i curious, cant we just made all of variable become String ? or need to be match with the type of web service's variable given to us ?\n. @sunshinejr Okay. Thank you so much bro. Btw between mapObject and mapArray which is better ? or actually both do the same thing ?. @sunshinejr  okay got it. Thank you Lukasz !. Thanks @pedrovereza  !.. Yes my body request somehow is not correct... and the parameters encoding i need use JSONEncoding but it need to be set in the endpointclosure.. Thank you it very helps me. Done, solved by myself by edit the url endpoint.... @Ank49 cool man.. sorry just read it.. My approach little bit different. I edit the urlendpoint something like this\n```\n//setting the header\n        let endpointClosure = { (target: API) -> Endpoint in\n            let url = target.baseURL.appendingPathComponent(target.path).absoluteString.removingPercentEncoding!\n            let defaultEndpoint = Endpoint(URL: url, sampleResponseClosure: {.networkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n            return defaultEndpoint.adding(httpHeaderFields: [\"Accept\": \"application/json\", \"Content-Type\" : \"application/json\", \"Authorization\" : token!, \"X-Fingi-Signature\":authSign], parameterEncoding: JSONEncoding.default)\n        }\n```. ",
    "madnik": "@scottrhoyt 's answer make sense to me. \n\ndecomposition of TargetType would only be truly valuable if the separate protocols were useful for something other than being inherited by TargetType.\n\nYes. I agree with that. I will rethink about this. \n@leoneparise I think proposed approach still make those properties required. But I agree that specifications becomes loose as @scottrhoyt  pointed out. That something we need to address if we decompose. \nThanks for the arguments with facts contributors. . ",
    "camcoding": "I found a solution/work-a-round by adding a headers property to my TargetType extension and then returning an endpointClosure when initializing my provider.\nI still think the CredentialsPlugin should have a configurable option to support base64 encoded login credentials.. Yes, according to my Info.plist file I should be bypassing ATS completely:\n<dict>\n    <key>NSAppTransportSecurity</key>\n    <dict>\n        <key>NSAllowsLocalNetworking</key>\n        <true/>\n        <key>NSAllowsArbitraryLoads</key>\n        <true/>\n        </dict>\n       ....... more here. @pedrovereza  - No luck... I'm still getting the exact same error message.  \n```swift\nprovider = RxMoyaProvider(endpointClosure: endpointClosure, manager: DefaultAlamofireManager.sharedInstance, plugins: [NetworkLoggerPlugin(verbose:true)])\nclass DefaultAlamofireManager: Alamofire.SessionManager {\n    static let sharedInstance: DefaultAlamofireManager = {\n        let configuration = URLSessionConfiguration.default\n        configuration.httpAdditionalHeaders = Alamofire.SessionManager.defaultHTTPHeaders\n        configuration.timeoutIntervalForRequest = 20 // as seconds, you can set your request timeout\n        configuration.timeoutIntervalForResource = 20 // as seconds, you can set your resource timeout\n        configuration.requestCachePolicy = .useProtocolCachePolicy\n    return DefaultAlamofireManager(configuration: configuration, serverTrustPolicyManager: CustomServerTrustPoliceManager())\n}()\n\n}\nclass CustomServerTrustPoliceManager : ServerTrustPolicyManager {\n    override func serverTrustPolicy(forHost host: String) -> ServerTrustPolicy? {\n        return .disableEvaluation\n    }\n    public init() {\n        super.init(policies: [:])\n    }\n}\n```. @pedrovereza - Thanks.  I already had that in my Info.plist but I'm still getting the same error...  If I hit the same https rest service from a browser I get the typical \"this is not a trusted SSL certificate\" warning message.  Even the error message coming from Moya states:  \"Would you like to connect to the server anyway\".  Here's the full error logging message again:\n\n(Error Domain=NSURLErrorDomain Code=-1200 \"An SSL error has occurred and a secure connection to the server cannot be made.\" UserInfo={_kCFStreamErrorCodeKey=-9806, NSLocalizedRecoverySuggestion=Would you like to connect to the server anyway?, NSUnderlyingError=0x60800005bd50 {Error Domain=kCFErrorDomainCFNetwork Code=-1200 \"(null)\" UserInfo={_kCFStreamPropertySSLClientCertificateState=0, _kCFNetworkCFStreamSSLErrorOriginalValue=-9806, _kCFStreamErrorDomainKey=3, _kCFStreamErrorCodeKey=-9806}}, NSLocalizedDescription=An SSL error has occurred and a secure connection to the server cannot be made.\n\n. Bump...  Nobody on stackoverflow or alamofire have a solution...  Is there a framework that supports self signed SSL certs?  I need something ASAP. @pedrovereza - you are awesome!  Thank you for the reference project...  I merged parts of your project with mine and it's now working.  The only thing that looked different than any of my previous attempts was your CustomServerTrustPolicyManager class implementation (specifically the override func serverTrustPolicy and having it always return .disableEvaluation).  Thanks again!. Thank you @pedrovereza.  That #980 does resemble something similar to what I'm trying to accomplish but it's only a portion of what I'm after - but I'll work through it and see if I can come up with a decent solution.\nIdeally I'd like to give Moya 2 URL's - the first one would be primary and the other secondary/backup.  If the primary call fails, the secondary would be executed.  These URL's point to the exact same server so everything on the backend is identical - the URL's differ if the user is local/home versus remote.. @pedrovereza Yep - that's exactly what I'm after - just trying to figure out how to do that Moya-style :-)  \nThere are many areas of my code where I invoke network calls so I'm trying to figure out a way to abstract the logic away from the code calling the API and have the RxMoyaProvider execute the primary/secondary call \"behind the scenes\".   For instance, here's a typical call:\nswift        \nMyAPI.sharedInstance.provider.request(MyProvider.Programs)\n            .subscribe(onNext: { (response) -> Void in\n                self.parsePrograms(response: response)\n                //   print(response)\n            }, onError: { (error) -> Void in\n                print(error)\n            }).addDisposableTo(bag)\nI suppose I could capture the error, alter the baseURL of the provider, and re-execute the request but I'd have to copy/paste that logic all over the place.. ",
    "yar1vn": "I had to create a custom plugin to support basic auth. I might do a pull request to add this to Moya when I have time:\n```swift\nstruct BasicAuthenticationPlugin: PluginType {\n    let key: String\nfunc prepare(_ request: URLRequest, target: TargetType) -> URLRequest {\n    let encodedKey = key.utf8Encoded.base64EncodedString(options: [])\n    var request = request\n    request.addValue(\"Basic \" + encodedKey, forHTTPHeaderField: \"Authorization\")\n    return request\n}\n\n}\n. I had to create a custom plugin to support basic auth. I might do a pull request to add this to Moya when I have time:swift\nstruct BasicAuthenticationPlugin: PluginType {\n    let key: String\nfunc prepare(_ request: URLRequest, target: TargetType) -> URLRequest {\n    let encodedKey = key.utf8Encoded.base64EncodedString(options: [])\n    var request = request\n    request.addValue(\"Basic \" + encodedKey, forHTTPHeaderField: \"Authorization\")\n    return request\n}\n\n}\n``. @sunshinejr seems like a good idea.\nNot sure what would be the use case fornone(lowercase in Swift 3). Also I only see the implementation for Bearer inAccessTokenAuth`.\nAnyway you seem to have implemented most of it in your comment so feel free to go ahead and include this code wherever it makes more sense. \nWe (currently) don't have a need for OAuth in our project, and I'm also using SugarMoya -> httpHeaderFields property to add Basic Auth instead of a plugin.\nNote: SugarMoya has a really nice wrapper for Moya by using Route. You might want to consider adding it to Moya.. @sunshinejr seems like a good idea.\nNot sure what would be the use case for none (lowercase in Swift 3). Also I only see the implementation for Bearer in AccessTokenAuth.\nAnyway you seem to have implemented most of it in your comment so feel free to go ahead and include this code wherever it makes more sense. \nWe (currently) don't have a need for OAuth in our project, and I'm also using SugarMoya -> httpHeaderFields property to add Basic Auth instead of a plugin.\nNote: SugarMoya has a really nice wrapper for Moya by using Route. You might want to consider adding it to Moya.. @SD10 that explain why I couldn't see the implementation for OAuth. I thought I was looking at the wrong file.\nAs I mentioned, we are currently not using OAuth so I don't have any code from my project to contribute besides Basic Authentication. AccessTokenPlugin only implementers Bearer so I'm not sure it makes sense to add OAuth on top of Basic Authorization.. @SD10 that explain why I couldn't see the implementation for OAuth. I thought I was looking at the wrong file.\nAs I mentioned, we are currently not using OAuth so I don't have any code from my project to contribute besides Basic Authentication. AccessTokenPlugin only implementers Bearer so I'm not sure it makes sense to add OAuth on top of Basic Authorization.. @SD10 I'm definitely not an expert in OAuth - but the implementation is a lot more complicated than just adding another field to the http header. There are entire frameworks that handle OAuth. \n. @SD10 I'm definitely not an expert in OAuth - but the implementation is a lot more complicated than just adding another field to the http header. There are entire frameworks that handle OAuth. \n. Let's do it. How do I setup an environment where I can build and run tests?. Let's do it. How do I setup an environment where I can build and run tests?. Great. I'll find time as soon as I can take a break. Got a tight deadline on a new app \ud83d\ude42. Great. I'll find time as soon as I can take a break. Got a tight deadline on a new app \ud83d\ude42. Great. I'll find time as soon as I can take a break. Got a tight deadline on a new app \ud83d\ude42. Hmm, I wouldn't have time this week while I'm at work. Possibly on the weekend but I wouldn't want to be the one blocking anything \ud83d\ude33. Hmm, I wouldn't have time this week while I'm at work. Possibly on the weekend but I wouldn't want to be the one blocking anything \ud83d\ude33. @sunshinejr, Just saw your comment - thanks for understanding! I'm overwhelmed at the moment but once things cool down I'll definitely come back and contribute.. ",
    "chrisjrex": "OK yes. i read my pod error incorrectly. This is the error I had. But if i check the install after removing my requirement for 4.3.0 then i see 4.2 is used\n```\n[!] Unable to satisfy the following requirements:\n\nAlamofire (= 4.3.0) required by Podfile\nAlamofire (~> 3.0) required by Moya/Core (6.1.2)\n```\n\nBut any reason why the latest version of Xcode would complain about the syntax without having config.build_settings['SWIFT_VERSION'] = '3' set?\nI may need to move my question over to Alamofire. ",
    "migue1s": "I've continued testing it, the problem is in the current provider wrapper. requestWithProgress doesn't always behave reliably. \nswift\nfunc requestWithProgress(_ token: Target, progressHandler: @escaping (Double)->Void) -> Observable<Response> {\n    let response: Observable<Response> = Observable.create { [weak self] observer in\n      let cancellableToken = self?.request(target, queue: nil, progress: { (progressResponse: ProgressResponse) in\n        progressHandler(progressResponse.progress)\n      }, completion: { result in\n        switch result {\n        case let .success(response):\n          observer.onNext(response)\n          observer.onCompleted()\n        case let .failure(error):\n          observer.onError(error)\n        }\n      })\n      return Disposables.create {\n        cancellableToken.cancel()\n      }\n    }\n    return response\n  }\nAlthough this is a less than ideal implementation due to the callback instead of remaining in the rx world, it will work correctly when reporting the progress and will not hang. I recommend rechecking the logic in the scan and progress block under the original implementation as I suspect the problem lies there.. ",
    "vaunus": "Can confirm we are also seeing problems with this. The progress callback seems to hang as @migue1s has reported and I've also noticed that a subsequent .do(onNext after a filterCompleted in the chain is called twice sometimes.\nI am using a similar fix for RxMoya for the time being based on @migue1s solution above. Thanks!\n```swift\nextension RxMoyaProvider where Target : TargetType {\npublic func requestWithProgressFixed(_ target: Target, progressHandler: @escaping (Double)->Void) -> Observable<Response> {\n\n    let response: Observable<Response> = Observable.create {\n        [weak self] observer in\n\n        let cancellableToken = self?.request(target, queue: nil, progress: { (progressResponse: ProgressResponse) in\n            progressHandler(progressResponse.progress)\n        }, completion: {\n            result in\n\n            switch result {\n            case let .success(response):\n                observer.onNext(response)\n                observer.onCompleted()\n            case let .failure(error):\n                observer.onError(error)\n            }\n        })\n        return Disposables.create {\n            cancellableToken?.cancel()\n        }\n    }\n    return response\n}\n\n}\n```\n. ",
    "andreyfel": "Thank you guys for the quick reaction! It resolved issue with Moya, but I still have the same issue with Moya-ObjectMapper. Opened an issue there https://github.com/ivanbruel/Moya-ObjectMapper/issues/45. I think it would be better to create new Provider, like RxSingleMoyaProvider to make this change non-breaking. In this way we will support both Observable and Single. And it will be easier to migrate to the Single.. ",
    "mikesanderson": "How it would work with ReactiveSwift and RxSwift was a question, and while it seems like a classic case for lenses, looking more closely I wasn't able to come up with a way to implement them for this enum-associated-type-completion approach. \nI agree looking again the API is more complex than it should be. The wrapper solution of course occurred to me also, but it's unsatisfying, little more then inviting people to make wrapper layer to go the last mile. Notably, they're not connected to enum cases in any way except that they use them--definitely better than nothing, but not up to the rest of Moya standard for organization. \nHowever, taking another look now a better solution occurred to me: I had been resisting using Any -- really resisting, because I thought it would defeat the purpose. In addition, as said before, a generic function return of T can't return a specific type, since that would break the API contract (although if the only use of T is for the return type it technically should be allowed, but the compiler has enough problems with generics already I'm not complaining). \nBut there's nothing to prevent a generic function from immediately casting anAny as? T which gets exactly the same safety, and a lot better API.\nThe parse function in TargetTypeWithParser, stripped to essentials: \nswift\n//In Target : TargetTypeWithParser\npublic func parse(_ response: Moya.Response) throws -> Any  {\n    switch self {\n    case .zen(_):\n        return GitHub.parseString(from: response)\n    case .userProfile(_, _):\n        return GitHub.parseDictionary(from: response)\n    case .userRepositories(_, _):\n        return GitHub.parseNSArray(from: response)\n    }\n}\nAnd in extension MoyaProvider where Target: TargetTypeWithParser:\nswift\nfunc parseAndComplete<T>(with target: Target, from response: Moya.Response, completion: (Result<T, MoyaError>) -> Void) {\n    do {\n        guard let parsed = try target.parse(response) as? T else {\n            throw MoyaError.stringMapping(response) //Error approximate for demonstration\n        }\n        completion(Result(value: parsed))\n    } catch let error as MoyaError {\n        completion(Result(error: error))\n    } catch {\n        completion(Result(error: MoyaError.underlying(error)))\n    }\n} \nIt should be trivial to use the same parser create an equivalent method/s for a lens for a SignalProvider<Moya.Response, MoyaError> to SignalProvider<T, MoyaError>, or have a typed signal response, etc. . Actually I realize one drawback is you could call the MoyaProvider function with a completion block that took a result of any type-- the compiler wouldn't enforce the type. I don't like that it's possible to use the API incorrectly, but you would get the string mapping error above on casting, and maybe an AssertionFailure() for development there would be worthwhile. \nIt's possible this could be addressed with a Swft equivalent of Objective C class object but more research is required. Regardless, this still additive change would bring better completion blocks.\n. It does appear with enum the only way to get the compile-time type safety is to include the completion block in the associated type, which I think is worth it but as you noted among other issues is incompatible with the reactive versions. I'll look into the best way to position it outside the core project. \nI investigated the equivalent of Objective C class object, which is bridged to Swift as AnyClass.Type, and so would be used as Any.Type. Unfortunately this didn't work (image to include playground output):\n\nEven though it has got String.Type by the time it's passed to the generic function, the compiler apparently can't match that to the closure parameter of String. (The same happened when passing a matching instance returned from Any.) Something maybe worth taking up within Swift itself.\nSo in @scottrhoyt 's formulation 1, 2,  it seems 1 is at a dead end. For 2, I actually have a lighter approach that uses generic functions that meets that goal exactly. It leaves out the TargetType entirely -- which you I think would consider a plus -- so I'll open a new issue for that. Cheers. \n. \nThe idea is to take Moya the last mile, so clients don't have to do parsing in their completion blocks at the call site. I think @pedrovereza 's comment that's what nearly all the extensions do reflects that. In this generic solution, since there's no way through Swift's type system to have enums vend closures returning different types, the call site still needs to know which parser to use. Putting the parser in the function signature removes one concern from the completion.\n(This is obviously less of a concern for the reactive variations that use lenses throughout their entire structure. Of course it could be moved up for them as well.)\nAs @scottrhoyt said allowing extensions to standardize their own interfaces would be a benefit and allow better integration. Because of generics this needs to be done carefully, as the generic function parameters func request(TargetType, (Response) -> T, completion (T) -> Void)don't hold up when passed a generic function--legitimately, because all type information is gone. Typing the completion block only sometimes fixes this. \nActually, browsing through the extensions it seems like all of them work by requiring T to conform to some protocol -able for the library, usually init(_ json: JSON)? Assuming the compiler could be instructed what the type is, it would be possible to have a protocol  init(from response: Moya.Response) throws and put the requirement in the generic function constraint. \nHowever, maybe it's my experience parsing terrible JSON but I would be against creating the expectation that JSON parsing can be accomplished automatically from endpoint-magic-object. There's a gap between endpointJSON and model, that clients need to be explicitly and consciously bridge. The place to do that is the TargetType, but that was a dead end for enums. \nIn the case of completion blocks it makes sense that the knowledge of how to get the response into the app domain should have been made as part of the call. Baking the option to provide a parser of choice -- an option, because this would be able to live alongside the existing method and immediately use into it -- would make Moya more end-to-end by covering the final distance. \n. You know, I'm going to follow the \"Contributing\" guidelines in the readme.md, assume positive intent, and give @AndrewSB as well as the people who reacted with \"laugh\" the benefit of the doubt. I love XKCD, and assume people are taking the moment to laugh at this classic. \nBut I would invite you to think about how it could come across to post that comic in this context. I've put a lot of thought and a lot of time on this proposal because I think it would improve Moya, a project I've watched for a long time now, that I think is ingenious and greatly respect. \nI'm happy to continue to respond to any substantive comments about the idea of adding the MoyaProvider generic function. \n. Sure, comic about a guy making a proposal was just an off note to drop in this context, no big deal.  \nWhile the generic function is being mulled, since I did browse through the extensions I noticed that no one is using the Result method dematerialize() throws -> T. The switch statement usually makes more sense, but when the success case immediately starts a do-try-catch block it could be much cleaner. \nI'm looking at this also in the example in the Demo ViewController func downloadRepositories(_ username: String) here. Reacting to this in particular was part of what I was trying to improve with this and the earlier #948 proposal.   \nIt current looks like:\nswift \n    func downloadRepositories(_ username: String) {\n         GitHubProvider.request(.userRepositories(username)) { result in\n            switch result {\n            case let .success(response):\n                do {\n                    if let json = try response.mapJSON() as? NSArray {\n                        // Presumably, you'd parse the JSON into a model object. This is just a demo, so we'll keep it as-is.\n                        self.repos = json\n                    } else {\n                        self.showAlert(\"GitHub Fetch\", message: \"Unable to fetch from GitHub\")\n                    }\n                } catch {\n                    self.showAlert(\"GitHub Fetch\", message: \"Unable to fetch from GitHub\")\n                }\n                self.tableView.reloadData()\n            case let .failure(error):\n                guard let error = error as? CustomStringConvertible else {\n                    break\n                }\n                self.showAlert(\"GitHub Fetch\", message: error.description)\n            }\n        }\n}\nWith dematerialize() it can come to: \nswift \n    func downloadRepositories(_ username: String) {\n        GitHubProvider.request(.userRepositories(username)) { result in\n            do {\n                let response = try result.dematerialize()\n                let value = try response.mapNSArray() \n                self.repos = value\n                self.tableView.reloadData()\n            } catch {\n                let printableError = error as? CustomStringConvertible\n                let errorMessage = printableError?.description ?? \"Unable to fetch from GitHub\"\n                self.showAlert(\"GitHub Fetch\", message: errorMessage)\n            }\n        }\n    }\nAs nice as do-try-catch setup as I've seen (not an end in itself, but still) and the smooth handling of error message with fallback it makes possible is a nice bonus.   \nBut the mapNSArray() function as an extension of Response doesn't currently exist. There could be a guard statement in the do block, but you would have to throw from the do block, and now what error type do you use, etc. \nI'm thinking it should be in the Demo GitHub file.  All it does is cast the response from mapping to Any. (Although it's just file organization at this point, as I mentioned in #948 and above I think the knowledge of how to parse the response is deeply tied to the endpoint/TargetType anyway.) Another option would be to name the function mapGitHubRepos() to emphasize the view controller is passing all responsibility for how to parse this endpoint, and also because there are different ways to parse to the same type.  \nIt would also accomplish much of what I was trying to without touching the core project, so could shelve the generic function for now until there are reasons to do the parsing before returning result to the completion. If the information about what parser to use has to live at the call site anyway, getting it done in one line this way is just as compact.\nThoughts? (words preferred ;) . @AndrewSB no big deal, thanks for mentioning that. \n@colinta \nI really like the formulation \"it is a way to inform Moya how it can get out of the way of our application.\"\n@justinmakaila Somewhat out of order: \n\nFWIW, my perspective is that of a ReactiveMoya user. \n\nYes, it is apparent Reactive/RX doesn't get as much out of this, since if going from A to Z and Moya gets you from A to Y, it would make sense immediately apply a lens for Y to Z--in a functional reactive app it just seems more natural. It's the traditional completion block approach (I'm going to keep calling them completion blocks) that makes having to do parsing at the call site a violation of separation of concerns, and currently users are on their own, why it's noted there are so many extensions for it. Of course if parity is needed it's completely possible.   \n\nOne implementation suggestion is to provide serialization closures,\n\nAs far as providing Moya a function that takes a response that Moya then invokes, if that closure still needs\u00a0to know about parsing logic and about view-controller completion logic, it's just moving code around. There is a way around this, in the (brief)  #948 I outlined a technique with enum that accomplishes what I set out to do, let the TargetType switch to pick the parser, but at a cost that the completion closure must be added as an associated type. It puts this complex requirements on users and the syntax looks bad also. \n\nAs OP mentioned, wouldn't it be possible to just extend the Response type to provide custom mapping functions to transform to custom types?\nTaking on @colinta's challenge for a dissenting opinion\n\nThis is an even fully-formed than my example. If this is the way we land, we should definitely put a more elegant demo in there, with a parser defined in the demo project, probably in GitHub.swift. \nI have reservations about telling people this much in an extension. There's that MyAPIResponse class tucked in there. AuthenticateError is free-floating. It calls other functions in the extension.    And actually my expectation is the parser could have some settings, like debugging options. Of course a response extension could have/refer those as well (today I learned extensions can add static var but if it's a static var might as well put it on some other static settings object.)\nStill,  moving the parser to a parameter would allow the block to swich on result if it wanted to. It would emphasize the parsing is something that is not this class's responsibility, emphasizing that Moya can handle it end-to-end. \n. @colinta  Yeah I'm in the awkward position of not being sold on the necessity of my own proposal, since well-formed extensions on Response get the job done. Regardless some of the Demo examples could be a lot cleaner, especially downloadRepositories \nI should mention my reason for being enthusiastic about this:  I implemented this generic pass-parser approach for handling completions and it was a lifesaver. This was when I worked at an agency, a client was gonna be the next facebook so the app had a lot of API calls. This was before Moya existed, and I had each call made in its own function, a network wrapper. But on the completion, all of the network calls went through one generic completion block, which really was a lifesaver when their dysfunctional API kept breaking and we needed to start logging/scrutinizing everything. \nAnyway, after that when Moya I saw that this handled most of the other steps more elegantly, and with the addition of generic completion blocks could wrap the entire networking layer end-to-end.  \nBut yeah, there are other ways to accomplish that goal. So it feels like a glaring omission to drop the raw response into the call site, probably a view controller--but generics are trouble, and this is coming down to really accomplishing that much. \n@scottrhoyt Yeah limitations generics in Swift is the way to describe it. I ended up going down the rabbit hole of covariance. Not fun. The rabbit can't even live in a rabbit hole-- it has to live in a generic burrow. \n@justinmakaila That wrapped provider looks good for another layer of safety. I feel like the integration with TargetType is so close, and was looking at solutions with hashable identifier; will keep investigating. \nI'm going to go ahead and submit the pull request to clean up those completion blocks in the Demo, adding a extension Response for mapping to NSArray. If this is recognized as a best practice might as well put it in a demo. \nI'm also going to put some of the various loose threads into a pod for an extension, including some extensions on MoyaProvider that might be useful depending on what trade-offs best meet various use-cases. \nThanks for the great feedback everyone-- not the end, but still. . Hey, I think this is great. Thanks @ashfurrow and @orta for founding this and staying involved. \nI think the Project Goals list could be easier to grasp by adjusting the order, grouping the goals starting with \"provide...\" together and ordering in a progression from requests to responses to customization and extension. I went ahead and committed the edit-- easier to show the result than describe it. Let me know. \n@orta the no caps / full stops gets me to, but I can't think of a solution that doesn't look worse. I think each has an implicit \"Moya will...\" or \"First goal is to...\" and that makes it work the way it is. . ",
    "sprynmr": "I should have thought to look there. \ud83e\udd26\u200d\u2642\ufe0f Thanks @pedrovereza. I'll close this in a bit if I don't have follow-up thoughts.. Interesting. So I guess worst case scenario you make a handful of APIs and redefine the base path, etc, in each. Which really could be a shared function somewhere. Not too bad.. Yeah I like the idea @scottrhoyt. Looks like it didn't make the cut though. I'm considering if I can use protocol extensions for now.. Solid. Exactly what I was thinking.. ",
    "aufflick": "Ah - it's only a compiler error in Swift 3.1. Swift 3.0 seems to only apply the @unavailable outside the file.. ",
    "hartbit": "Since Swift 3.1 is supposed to be backwards compatible with Swift 3.0, I think the Swift dev team will be interested by this: @DougGregor @jckarter. @DougGregor This is still happening on Xcode 8.3 Beta 2 and with the latest 3.1 Toolchain (2017-02-07).. ",
    "jckarter": "This sounds like a bug fix to me, but I'll raise it with the core team.. There was a fix that attempted to emulate the 3.0 behavior and emit warnings in this case:\nhttps://github.com/apple/swift/commit/9489f10ce1feb60e9fb0a32857a273a22420253b\nIt's recent enough that it may not have made it into 8.3 beta 1. Do you still see the error in 8.3 beta 2, or in a Swift 3.1 snapshot toolchain from swift.org?. The availability fixits should still appear. Let us know if they don't. The only change should have been to tighten up the checking of availability on typealiases.. ",
    "DougGregor": "The Swift 3.0 compatibility fix @jckarter referred to was first introduced in Xcode 8.3 beta 2.. ",
    "sandeepbol": "I am trying to convert my Project from Swift 2.3 to Swift 3 in Xcode 8.3 beta 2. What should be done here to fix this issue. If I try to rename Error to MoyaError, Xcode cribs that I file is locked to changes. Still new to Swift and this migration is getting little painful. Any help is appreciated.\nThanks.. Thanks a lot guys! Long live open source and open source lovers!! :). Guys, which objectmapper to use for swift 2.2? I am using swiftyjson to parse my json response. Every library seem to have been updated to swift 3. Guess its time to stop being lazy and move on to swift 3 :(\nThought it might be related to this thread as didn't want open a new one.. Thanks a lot @sunshinejr for help. That did the trick. Actually an unrelated question:\nHow is \nreturn endpoint.adding(newParameterEncoding: JSONEncoding.default)\ndifferent from\ndefining parameterEncoding like this\nswift\n    public var parameterEncoding: ParameterEncoding {\n        switch self {\n        case .login, .enrollUser, .resetPassword, .choosePassword:\n            return JSONEncoding.default\n        default:\n            return URLEncoding.default\n        }\n    }\nThe latter worked for me with Wrap library.. Thanks @SD10 for your answer, in that case how should I modify my declaration\nswift\nlet service = MoyaProvider<APIService>(endpointClosure: endpointClosure, plugins: [NetworkLoggerPlugin(verbose: true)]). Thanks @SD10, I guess you are suggesting I do the following \nswift\nlet service = MoyaProvider<APIService<Int>>(endpointClosure: endpointClosure, plugins: [NetworkLoggerPlugin(verbose: true)])\nThe bigger problem is I am using Moya in my SDK. The calls will be made outside the SDK. For example enrollRequest will be a struct from client app and can have variable number of parameters. Then I use Wrap to parse struct to my query parameters. So if I let my APIService to take any struct as an argument, I don't have to keep EnrollmentRequest model in my SDK. That's why I was exploring if there was a way to use generics in Moya. \nThanks a lot for your replies. I am sorry if it is too basic.\n. Thanks a lot @SD10 . That seems pretty clean. I will implement this approach.. @pietrocaselani Many thanks buddy. Thanks for the direction \ud83d\udc4d . Suppose in viewwillAppear(), we fetch data from endpoint. User can return to viewcontroller by pressing a tab button (say). If I keep hitting tab button then I keep hitting the endpoint with mostly no new data arriving. . Suppose in viewwillAppear(), we fetch data from endpoint. User can return to viewcontroller by pressing a tab button (say). If I keep hitting tab button then I keep hitting the endpoint with mostly no new data arriving. . Moya (Alamofire) is felicitating the API requests here right? So either Moya or Alamofire should have this feature?. Moya (Alamofire) is felicitating the API requests here right? So either Moya or Alamofire should have this feature?. Thanks @BasThomas @SD10 for your replies. Its definitely not throttling that I am looking for. Now if I make a request over and over (I mean if a user decides to press a particular button just hoping to see some change in data like tap-tap-tap-tap-...), we will be downloading the same data over and over without much change, thus making device do a lot of unnecessary fetching. I talked about a very extreme scenario but navigating back and forth between screens will fetch same data on return. So I was wondering if it should be in Moya but you guys seem to be in consensus that it is client specific and I will accept it :) \nMany thanks again (y). Thanks @BasThomas @SD10 for your replies. Its definitely not throttling that I am looking for. Now if I make a request over and over (I mean if a user decides to press a particular button just hoping to see some change in data like tap-tap-tap-tap-...), we will be downloading the same data over and over without much change, thus making device do a lot of unnecessary fetching. I talked about a very extreme scenario but navigating back and forth between screens will fetch same data on return. So I was wondering if it should be in Moya but you guys seem to be in consensus that it is client specific and I will accept it :) \nMany thanks again (y). ",
    "alec-c4": "@scottrhoyt no, I didn't. But I've enabled verbose logging with\nlet provider = MoyaProvider<CosmoZoo>(plugins: [NetworkLoggerPlugin(verbose: true)])\nand I see no extra-data in requests\n[\"Moya_Logger: [09/02/2017 23:55:22] Request: http://localhost:3000/api/v1/authentication/get_otp\"]\n[\"Moya_Logger: [09/02/2017 23:55:22] Request Headers: [\\\"Content-Type\\\": \\\"application/json\\\"]\"]\n[\"Moya_Logger: [09/02/2017 23:55:22] HTTP Request Method: POST\"]\n[\"Moya_Logger: [09/02/2017 23:55:22] Request Body: {\\\"msisdn\\\":\\\"+79268891632\\\"}\"]\n[\"Moya_Logger: [09/02/2017 23:55:22] Request: http://localhost:3000/api/v1/authentication/validate_otp\"]\n[\"Moya_Logger: [09/02/2017 23:55:22] Request Headers: [\\\"Content-Type\\\": \\\"application/json\\\"]\"]\n[\"Moya_Logger: [09/02/2017 23:55:22] HTTP Request Method: POST\"]\n[\"Moya_Logger: [09/02/2017 23:55:22] Request Body: {\\\"msisdn\\\":\\\"+79268891632\\\",\\\"code\\\":\\\"123456\\\"}\"]\n[\"Moya_Logger: [09/02/2017 23:55:22] Response: <NSHTTPURLResponse: 0x618000029340> { URL: http://localhost:3000/api/v1/authentication/get_otp } { status code: 200, headers {\\n    \\\"Cache-Control\\\" = \\\"max-age=0, private, must-revalidate\\\";\\n    \\\"Content-Type\\\" = \\\"application/json; charset=utf-8\\\";\\n    Etag = \\\"W/\\\\\\\"a29ee2b15c494311c52521766e44af56\\\\\\\"\\\";\\n    \\\"Transfer-Encoding\\\" = Identity;\\n    \\\"X-Content-Type-Options\\\" = nosniff;\\n    \\\"X-Frame-Options\\\" = SAMEORIGIN;\\n    \\\"X-Request-Id\\\" = \\\"e7be499e-de9d-45e4-be0a-0e6e15e87776\\\";\\n    \\\"X-Runtime\\\" = \\\"0.006129\\\";\\n    \\\"X-XSS-Protection\\\" = \\\"1; mode=block\\\";\\n} }\"]\n[\"{\\\"status\\\":\\\"ok\\\"}\"]\n2017-02-09 23:55:22.716 pets[36820:2364194] get OTP\n[\"Moya_Logger: [09/02/2017 23:55:22] Response: <NSHTTPURLResponse: 0x600000436f60> { URL: http://localhost:3000/api/v1/authentication/validate_otp } { status code: 200, headers {\\n    \\\"Cache-Control\\\" = \\\"max-age=0, private, must-revalidate\\\";\\n    \\\"Content-Type\\\" = \\\"application/json; charset=utf-8\\\";\\n    Etag = \\\"W/\\\\\\\"a1805b363176810b2a252dad4cd073da\\\\\\\"\\\";\\n    \\\"Transfer-Encoding\\\" = Identity;\\n    \\\"X-Content-Type-Options\\\" = nosniff;\\n    \\\"X-Frame-Options\\\" = SAMEORIGIN;\\n    \\\"X-Request-Id\\\" = \\\"ac98af24-0f3b-40b1-b6fb-8881b1f315a3\\\";\\n    \\\"X-Runtime\\\" = \\\"0.010393\\\";\\n    \\\"X-XSS-Protection\\\" = \\\"1; mode=block\\\";\\n} }\"]\n[\"{\\\"status\\\":\\\"authenticated\\\"}\"]\n2017-02-09 23:55:22.718 pets[36820:2364194] validate OTP\nLooks strange\n. @scottrhoyt I think it isn't server issue, because on \ncurl -X \"POST\" \"http://localhost:3000/api/v1/authentication/get_otp?msisdn=%2B79268891632\"\nI see no extra data\nParameters: {\"msisdn\"=>\"+79268891632\"}. huh, you're right - the problem was in parameterEncoding type :) thanks a lot! \nBut, is it correct for JSONEncoding to add data? As I see in Alamofire documentation \n```\nlet parameters: Parameters = [\n    \"foo\": [1,2,3],\n    \"bar\": [\n        \"baz\": \"qux\"\n    ]\n]\n// Both calls are equivalent\nAlamofire.request(\"https://httpbin.org/post\", method: .post, parameters: parameters, encoding: JSONEncoding.default)\nAlamofire.request(\"https://httpbin.org/post\", method: .post, parameters: parameters, encoding: JSONEncoding(options: []))\n// HTTP body: {\"foo\": [1, 2, 3], \"bar\": {\"baz\": \"qux\"}}\n```\nthere are no extra-data in request. nothing special on backend, I just rendering params from mobile app for testing. There it is if you know ruby syntax:\ndef get_otp\n    Rails.logger.info(\"--- msisdn: #{params[:msisdn]}\")\n    render json: {status: 'ok'}\n  end\nbut I'll try to perform requests with alamofire. but you're right - I send\ncurl -X \"POST\" \"http://localhost:3000/api/v1/authentication/get_otp\" \\\n     -H \"Content-Type: application/json; charset=utf-8\" \\\n     -d $'{\n  \"msisdn\": \"+79268891532\"\n}'\nand see in logs\nStarted POST \"/api/v1/authentication/get_otp\" for 127.0.0.1 at 2017-02-10 01:01:23 +0300\nProcessing by Api::V1::AuthenticationController#get_otp as HTML\n  Parameters: {\"msisdn\"=>\"+79268891532\", \"authentication\"=>{\"msisdn\"=>\"+79268891532\"}}\n--- msisdn: +79268891532\nCompleted 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms)\nI'll do extra-check on backend! Thanks a lot!. ",
    "moonorblue": "Thanks ! @scottrhoyt . The helper function in the PR is what I need !\nHowever, I look at the code at https://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md\nthat says\nswift\ncase .showAccounts:\n            // Provided you have a file named accounts.json in your bundle.\n            guard let path = Bundle.main.path(forResource: \"accounts\", ofType: \"json\"),\n                let data = Data(base64Encoded: path) else {\n                    return Data()\n            }\n            return data\n        }\nWill it return the Data of the file ?\nSince it pass a path (e.g. \\xxx\\xxx\\xxx\\accounts.json) into Data(base64Encoded: ),\nwhich the input should be some Base-64 encoded String or Base-64, UTF-8 encoded Data. Many thanks @scottrhoyt  ;). ",
    "kemchenj": "@pedrovereza \nI've try this way in the beginning. But when you code like this:\nswift\nlet rxProvider = RxMoyaProvider<MyService>.withDefaultPlugins()\nrxProvider's type is MoyaProvider<MyService>, not RxMoyaProvider<MyService>, so I use Self as the type return in withDefaultPlugins method. @pedrofjfmartins \nYes, I need withDefaultPlugin available for both MoyaProvider and RxMoyaProvider. @sunshinejr \nUnfortunately, I just delete my fork few week ago, cause I thought this PR won't be accept. It seems like I can't commit for this PR anymore. So maybe you need to open a new PR, just close this one.\n\ud83e\udd14Actually I think there is really not need to subclass MoyaProvider. Instead of make init required, maybe just make MoyaProvider final.\nThen let MoyaProvider conform to ReactiveCompatible and ReactiveExtensionsProvider, then we could change our code like this:\n```swift\nlet provider = MoyaProvider()\n// RxSwift\nprovider.rx.request(target)\n// ReactiveCocoa\nprovider.reactive.request(target)\n```\nFor me, I think this is a better design. It will be more consistent, cause if someone use rx or reactive in code, it means it will get a Observerble. And make Reactive more like an ability, which is more Swifty and POP. Also the performance will be better.. ",
    "yanghui-gao": "Has been resolved But I met a new problem again Forgive me, I am a little shrimp only half a year work experience My question is when I will \"responsetor\" into \"Moya. Response\" throw an error\n```swift\nextension Observable{\n    private func resultFormJson(jsondata:JSON,classType:T.Type) -> T?{\n        return T(json:jsondata)\n    }\n    func mapResponseToArray(type:T.Type) -> Observable<[T]>{\n        return map{ responsetor in\n        guard let response = responsetor as? Moya.Response else{\n\n            throw VendingMachineError.ConversionError //Problems thrown in here\n        }\n\n        let json = JSON.init(data: response.data)\n\n        if let code = json[\"resultcode\"].int{\n            if code == 200 {\n                var objects = [T]()\n                let arr = json[\"result\"].array\n                if let array = arr{\n                    for object in array{\n                        if let obj = self.resultFormJson(jsondata: object, classType: type){\n                            objects.append(obj)\n                        }\n                    }\n                    return objects\n                }else{\n                    throw VendingMachineError.ParseError\n                }\n            }else{\n                throw VendingMachineError.insufficientFunds(coinsNeeded: code)\n            }\n        }else{\n            throw VendingMachineError.ParseError\n        }\n    }\n}\n\n}\n.swift\nimport Foundation\nimport RxSwift\nimport Moya\nclass TestVM {\n    let apiProvider = RxMoyaProvider()\n    let backDate = Variable<[FoodTestModel]>([])\n    let request = Variable(\"\")\n    let disposeBag = DisposeBag()\ninit(){\n\n    let request = self.request.asObservable().map{ city in\n\n       return self.apiProvider.request(.upload(cityname: city))\n\n    }.shareReplay(1)\n\n     let response = request.mapResponseToArray(type: FoodTestModel.self).shareReplay(1)\n\n\n    response\n        .asObservable()\n        .subscribe(onNext: { result in\n\n            self.backDate.value = result\n\n        }, onError: {error in\n\n            print(error)\n\n        }).addDisposableTo(disposeBag)\n}\n\n}\n.swift\nclass ViewController: UIViewController {\nvar testvm:TestVM?\n\noverride func viewWillAppear(_ animated: Bool) {\n    testvm = TestVM()\n    testvm?.request.value = \"London\"\n}\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    self.bulidVm()\n\n//        let apiProvider = RxMoyaProvider()\n//        apiProvider\n//            .request(.upload(cityname: \"London\"))\n//            .subscribe{event in\n//                switch event{\n//                case .next(let data):\n//                    let json = JSON.init(data: data.data)\n//                    print(json)\n//                case .error(let error):\n//                    print(error)\n//                default:\n//                    break\n//                }\n//        }.addDisposableTo(disposeBag)\n}\n\nfunc bulidVm(){\n\n    self.testvm?.backDate.asObservable().subscribe(onNext: { result in\n\n        print(result)\n\n    }).addDisposableTo(disposeBag)\n}\n\n```. ",
    "ftp27": "@scottrhoyt \nThis is all libraries in test project:\n- Alamofire (4.3.0)\n  - Moya (8.0.2):\n    - Moya/Core (= 8.0.2)\n  - Moya-ObjectMapper/Core (2.3.1):\n    - Moya (~> 8.0)\n    - ObjectMapper (~> 2.2)\n  - Moya-ObjectMapper/RxSwift (2.3.1):\n    - Moya-ObjectMapper/Core\n    - Moya/RxSwift\n    - RxSwift (~> 3.1)\n  - Moya/Core (8.0.2):\n    - Alamofire (~> 4.1)\n    - Result (~> 3.0)\n  - Moya/RxSwift (8.0.2):\n    - Moya/Core\n    - RxSwift (~> 3.0)\n  - ObjectMapper (2.2.2)\n  - Result (3.1.0)\n  - RxSwift (3.2.0)\nI shown wireshark dump of my request and server nothing to do with that.\nWhat is the difference between endpoint and request closures? I put all code with Moya in topic. @scottrhoyt. Sure. That link to git repo with my test project\nhttps://github.com/ftp27/testMoya. Hello @pedrovereza. I installed Charles and run the project. I have got this request headers:\nGET /api/v1/services/book/ HTTP/1.1\nHost    tcars.indev-group.eu\nAccept  */*\nAccept-Encoding gzip;q=1.0, compress;q=0.5\nAccept-Language ru-RU;q=1.0, en-RU;q=0.9\nConnection  keep-alive\nUser-Agent  moyaTest/1.0 (eu.indevgroup.moyaTest; build:1; iOS 10.2.0) Alamofire/4.3.0\nMay be with something wrong with my Pods? \nI cleared all pods and installed them again, but it doesn't help\nrm -rf \"${HOME}/Library/Caches/CocoaPods\"\nrm -rf \"`pwd`/Pods/\"\npod update. @pedrovereza Wow\nGET /api/v1/services/book/ HTTP/1.1\nHost    tcars.indev-group.eu\nUser-Agent  moyaTest/1.0 (eu.indevgroup.moyaTest; build:1; iOS 10.2.0) Alamofire/4.3.0\nAccept  */*\nAccept-Encoding gzip;q=1.0, compress;q=0.5\nAccept-Language ru-RU;q=1.0, en-RU;q=0.9\nConnection  keep-alive\nTestHeader  Token eb1b505e8634d19a2ece786274bdfbe23925d223\nWith code\nswift\n        var request = request\n        request.addValue(\"Token \" + token, forHTTPHeaderField: \"Authorization\")\n        request.addValue(\"Token \" + token, forHTTPHeaderField: \"TestHeader\")\n        return request. Very weired. Http headers look right with httpbin.\nGET /get HTTP/1.1\nHost    httpbin.org\nUser-Agent  moyaTest/1.0 (eu.indevgroup.moyaTest; build:1; iOS 10.2.0) Alamofire/4.3.0\nAuthorization   Token eb1b505e8634d19a2ece786274bdfbe23925d223\nAccept  */*\nAccept-Encoding gzip;q=1.0, compress;q=0.5\nAccept-Language ru-RU;q=1.0, en-RU;q=0.9\nConnection  keep-alive\nTestHeader  Token eb1b505e8634d19a2ece786274bdfbe23925d223\n. Some time ago I stated to catch 301 codes in Charles to URL with closing '/'. I changed path and GET request  was starting to send with Authorization header. Thanks to all for the help. ",
    "xliangTrackVia": "@fjcaetano I am currently running into this exact scenario within our application. I need a destination URL, or some mechanism, to retrieve the Data instance from the downloaded request. Currently, the Moya.Response object for a download operation returns nil for Response.data. I believe this is because the extension does not set the Data value on response complete:\nswift\n// In Moya+Alamofire.swift\nextension DownloadRequest: Requestable {\n    internal func response(queue: DispatchQueue?, completionHandler: @escaping RequestableCompletion) -> Self {\n        return response(queue: queue) { handler  in\n            // *** Return nil data here even though the handler has a reference to the destination URL\n            completionHandler(handler.response, handler.request, nil, handler.error)\n        }\n    }\n}\nI am not sure when this PR will be approved, but it is certainly something that our application can use. Thanks again for tackling this!. @fjcaetano I am currently running into this exact scenario within our application. I need a destination URL, or some mechanism, to retrieve the Data instance from the downloaded request. Currently, the Moya.Response object for a download operation returns nil for Response.data. I believe this is because the extension does not set the Data value on response complete:\nswift\n// In Moya+Alamofire.swift\nextension DownloadRequest: Requestable {\n    internal func response(queue: DispatchQueue?, completionHandler: @escaping RequestableCompletion) -> Self {\n        return response(queue: queue) { handler  in\n            // *** Return nil data here even though the handler has a reference to the destination URL\n            completionHandler(handler.response, handler.request, nil, handler.error)\n        }\n    }\n}\nI am not sure when this PR will be approved, but it is certainly something that our application can use. Thanks again for tackling this!. ",
    "sedwo": "Hi @xliangTrackVia , Did you ever solve this?\n@sunshinejr This would be a very useful feature, especially for dynamic file types when you don't know what extension you're downloading until it's in process.\nCould a custom endpointClosure help to solve this?. ",
    "Pomanks": "Would you mind telling us how you did solve it ? \ud83d\ude0f\nI'm having the exact same issue when sending the request but haven't found a way to fix it yet.. \ud83d\ude14\nThanks in advance! \ud83d\ude09. Found it right after asking.. \ud83d\ude05\nSo for those of you who're looking for the answer, I solve it by using NSURLComponents like that :\nlet urlComponents = NSURLComponents(string: \"http://you/base/url/route\")!\nurlComponents.path = \"/your/path\"\nurlComponents.query = \"your/query\"\nDo not add the question mark ('?') inside your query, it'll be added automatically !\nAnd then you just build your url this way : \nlet url = urlComponents.url!\nEnjoy ! \ud83d\udc4d\ud83c\udffb. Thanks for sharing! Your approach is much more neat and simple ! \nNever saw this mentioned anywhere, kind of awkward, not known enough maybe... ",
    "albertml": "hey @pedrovereza , my parameters will never be like this also?\nreturn [\"notification\": [\"title\": \"asdfasdfasdf\", \"body\": \"jlgjkl\", \"badge\": \"3\"], \"to\": \"receiverTokenHere\"]\nIm already changed it to JSONEncoding.default but still gets this on log:\nnotification%5Bbody%5D=asdfasdf&notification%5Btitle%5D=Albert%20send%20you%20message&notification%5Bbadge%5D=3&to=receiverTokenHere\"]. hey @pedrovereza, yeah you are right... I forgot to call the parameter encoding that's why it is happen... its working now. thanks. I'm sorry... the code I posted was already fixed... just need to replace MoyaProvder to RxMoyaProvider. ",
    "shuijinliuxi": "@pedrovereza  I am doing this at the moment, tks.. ",
    "mrtj": "@scottrhoyt thank you for the suggestions. Based on your suggestion in (2.) I actually debugged how Moya processes the response and found that the response data actually arrives from Alamofire to the level of Moya and it is Moya that shades the data. More exactly the second case in the switch in convertResponseToResult simple ignores the data in Alamofire response before converting it to an error result. Could this be the place where we could add the data to the result?. ",
    "gperdomor": "Conclusion, in 9.0 will be possible get the response from the error? I need that :D. Solved in #993 so this can be closed. @scottrhoyt mmmm, i will try the first approach (because i don't know the servers urls), but i don't like the idea of passing the parameter over more than 50 endpoints xD. I will try also with a singleton class to store the url\n. I wanna build a Rest Client (matrix.org) for matrix protocol (matrix.org), so i can have my own matrix server and you have another matrix server, so we can install my app but i wanna stablish connection with my server and you with yours... So, in the login page, the users needs typing their url servers...\nOther use case can be a GitlabCE client for example, one app, which connect to multiple gitlab servers, but the app don't know that servers. DynamicTarget not conform TargetType protocol because of let baseUrl: URL. @scottrhoyt My bad, init was missing xD... Apparently it works, would you consider adding this functionality to the framework natively? Singleton works too, but protocol approach seems to be better, but having a SubTarget Protocol implies that we need to update that protocols if Moya changes the TargetTypeprotocol. @scottrhoyt thanks... I will keep the issue open for a few days to see if anyone come up with other solution :D. @scottrhoyt it's possible override the sampleData of a Target to implement this only in a test target?. Mmmm... this seems overkilling xD... I need implement a TargetType for each endpoint?... Can you provide a link to one of your tests?.\nBTW, i tried the protocol extension before asking but no works. I think using OHHTTPStubsis a better way, the only thing i need to do is a stub call, before each request:\nswift\nstub(condition: isHost(\"domain.com\")) { _ in\n    let obj = fixtureJSON(\"FIXTURE KEY\") \n    return OHHTTPStubsResponse(jsonObject: obj, statusCode: 200, headers: nil)\n}. I have a Session target with three endpoints, login, tokenRefresh and logout, how can i mix this session target with the test target to test a success and error response for each endpoint, how they work together? i don't see that. @scottrhoyt check  #993 please, i add the response to MoyaError.underyling. @yanamura3 this was solved in #993 :D. @dannymout in Xcode console log. @BasThomas Done! \ud83d\udc4d . DON'T MERGE YET... I forgot test the Demo, i don't know if runs or not... But i can't do it now... i will do it tonight. @scottrhoyt I update the docs and integration tests... The Demo works without changes. But this PR is target to 9.0.0 branch, not to master, so everything in Next section is obviously referent to 9.0.0, at least for me. can we merge this?... I propose create a milestone for the 9.0.0. @jorgelp94 you can use a endpoint closure. Check Endpoints.md\n\nYou can add parameters or HTTP header fields in this closure. For example, we may wish to set our application name in the HTTP header fields for server-side analytics.\n\nswift\nlet endpointClosure = { (target: MyTarget) -> Endpoint<MyTarget> in\n    let defaultEndpoint = MoyaProvider.defaultEndpointMapping(for: target)\n    return defaultEndpoint.adding(newHTTPHeaderFields: [\"APP_NAME\": \"MY_AWESOME_APP\"])\n}\nlet provider = MoyaProvider<GitHub>(endpointClosure: endpointClosure)\nIn your case you need use RxMoyaProvider instead MoyaProvider. @jorgelp94 you can use a endpoint closure. Check Endpoints.md\n\nYou can add parameters or HTTP header fields in this closure. For example, we may wish to set our application name in the HTTP header fields for server-side analytics.\n\nswift\nlet endpointClosure = { (target: MyTarget) -> Endpoint<MyTarget> in\n    let defaultEndpoint = MoyaProvider.defaultEndpointMapping(for: target)\n    return defaultEndpoint.adding(newHTTPHeaderFields: [\"APP_NAME\": \"MY_AWESOME_APP\"])\n}\nlet provider = MoyaProvider<GitHub>(endpointClosure: endpointClosure)\nIn your case you need use RxMoyaProvider instead MoyaProvider. also, this changes needs to be integrated in 9.0.0 branch.... Yes... On the other hand, do that, reduce the possibility of conflicts, we don't know how many PR will merge to master or 9.0.0, but eventually this could produce more conflicts depending on how many breaking changes was introduced in 9.0.0\n. no, you not need create a provider for each request... You need only one provider :D... . @AndrewSB please rebase. #993 is still reverted in this PR. Option 1 is more cleaner i guess. Thanks @pedrovereza. In #978 you can see some ideas to have dynamic urls... I made a quick poc with the subtarget protocol and the dynamic provider... Maybe we can integrate that functionality in 9.0.0... WDYT?. @BasThomas theoretically not much, the purpose is the same, but in this case i converted manually, without script.\nAlso i updated the dependencies for better compatibility with Swift 3.1 and remove some deprecation warnings... Demo was updated too.\nThis PR is target to 9.0.0. Closed in favor of #967 . honestly, i'm not sure... But i can update to this to prevent any possible error... Let me know what you think\nswift\ncase let (.some(response), _, .some(error)):\n            let response = Moya.Response(statusCode: response.statusCode, data: data ?? Data(), request: request, response: response)\n            let error = MoyaError.underlying(error, response)\n            return .failure(error)\ncase let (_, _, .some(error)):\n            let error = MoyaError.underlying(error, nil)\n            return .failure(error). Updated :D. ",
    "nikans": "Personally, I think that base url should not be a part of the target, it prevents configuration injection. That should be the task of some network service, that builds a provider instance. \nWe probably should make an alternative DynamicTarget type.. Thanks, guys. How come it had not been there for 8 versions xD . ",
    "hydra1983": "\nlet baseURL: URL should satisfy a protocol requirement of var baseURL: { get }. I used it in such a way here.\n(there are some small mistakes in my example like baseUrl instead of baseURL that you will need to fix, but the concept works)\n\n@scottrhoyt The link is broken :(. ",
    "jessearmand": "Also as shown in the Danger, I'm not sure whether it's a good idea to update the changelog every time there's a change. \nBecause the CHANGELOG.md is updated for each  tagged version, not on every pull request. So, I don't know what to do here.. @scottrhoyt Thanks for clarification. I updated the changelog.. To provide a default value of an optional of [String: Any], you could use an empty dictionary [:] instead of NSNull.\nOn 12 Mar 2017, 4:27 PM +0800, Philip Engberg notifications@github.com, wrote:\n\nThanks @vzsg (https://github.com/vzsg). But I'm curious as to why you need to use some old NSObject subclass in a Swift dictionary, when we have optionals?\nAlso, what is the easiest way of constructing the parameters dictionary then? Let's say I have an object\nstruct LineupPlayer { let id: Int let user : _User? }\ndoing the following\nextension LineupPlayer : ParameterRepresentation { var representation: [String : Any] { return [\"id\": id, \"user\": user?.representation ?? NSNull()] }\nresults in a compile error Generic parameter 'T' could not be inferred, since the nil-coalescing operator tries to operate on two different types.\nHow would you recommend to do this?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub (https://github.com/Moya/Moya/issues/1007#issuecomment-285930025), or mute the thread (https://github.com/notifications/unsubscribe-auth/AAEG8NlI1Fm4caHS0IJX5UTbZzpr285kks5rk6yLgaJpZM4MaS-O).\n\n. Why don't you do it as the following? Also, what is the type of representation? Is it the same as LineupPlayer representation?\n```swift\n/// What is the expected type of user?.representation\nextension LineupPlayer : ParameterRepresentation {\n    var representation: [String : Any] {\n        return [\"id\": id, \"user\": user?.representation as? [String: Any] ?? [:]]\n    }\n}\n```. Alright, understood. It compiles, but there's an error? or a warning? \nIf it's a warning I don't think that is an issue since that is what you're doing, coercing [String: Any] to Any and using NSNull as a default, which is a different type from [String: Any].. ",
    "Arcovv": "Hi, @scottrhoyt thanks for your answer. Change my TargetType to a struct is much better.\nI will try this method, thanks!. ",
    "iShawnWang": "I just create a whole new project to reproduce this issue, here it is, feel free to run to see this problem. ",
    "hugweb-zz": "Hi @iShawnWang !\nTry to override public init and it should work \ud83d\ude09. ",
    "lucas34": "Currently, Moya 10.0.1 is prebuilt with Swift version 4.0.2. But latest Swift version is 4.0.3. So it won't be compatible. \nShould we re-build with the latest Swift and replace the current prebuilt framework attached to the release ? \nSide effect is, all the current users will see \"incompatible\" when they bootstrap Carthage until they update their Swift version even though they didn't change anything on their side.\nOr, We can also leave it like this and build the frameworks with the latest Swift version available at the time we do the release.\nBy the way, I think we should add a line in the release notes like \"Prebuilt frameworks are now included for Swift X.X.X\". Like some projects does. I saw some tickets related to incompatible versions. This short line in the release note may help them to understand the problem.. Currently, Moya 10.0.1 is prebuilt with Swift version 4.0.2. But latest Swift version is 4.0.3. So it won't be compatible. \nShould we re-build with the latest Swift and replace the current prebuilt framework attached to the release ? \nSide effect is, all the current users will see \"incompatible\" when they bootstrap Carthage until they update their Swift version even though they didn't change anything on their side.\nOr, We can also leave it like this and build the frameworks with the latest Swift version available at the time we do the release.\nBy the way, I think we should add a line in the release notes like \"Prebuilt frameworks are now included for Swift X.X.X\". Like some projects does. I saw some tickets related to incompatible versions. This short line in the release note may help them to understand the problem.. Sure, I removed the merge commit. The error \"Incompatible Swift version\" should be fixed by using Moya 10.0.1. I built the frameworks with the latest swift \"4.0.2 (swiftlang-900.0.69.2 clang-900.0.38)\". Package.Resolved has not been updated. It's still pointing to 2.0.1.\nShould run 'swift package update'\nI created a PR #1531 for this. I built the framework for carthage and I updated the release to add the zip.. Moya's Cartfile specify dependencies to RxSwift and ReactiveSwift. Regardless you need it or not. I don't know if Carthage allows you to specify multiple Cartfiles.. Hi,\nIt's already done.\nhttps://github.com/Moya/Moya/issues/1468\nhttps://github.com/Moya/Moya/pull/1470\nBut not released yet If I not mistaken. Should be part of the next release.. Also updated the change log as breaking changes.. You are right. I was wondering if I should update only the .resolved files. There is no issue as keeping ~> 4.0 in both Podspec and cartfile. \nThis PR is mostly to give the latest released version of the dependency at this date when using \ncarthage bootstrap or swift package resolve. I tried to test the script with a PR targeting the new branch but it seems to get the DangerFile from master branch. Because the text warning reported is no longer there in the new branch. \n  . I created this PR https://github.com/Moya/Moya/pull/1537 targeting Moya:enhancement/dangerfile\nMoya-bot reported:\nThe Cartfile or Cartfile.resolved was updated, but there were no changes in the podspec. Did you forget updating the podspec?\nThis warning is no longer there in the Dangerfile for the branch Moya:enhancement/dangerfile.. The branch is on my local fork so I cannot make a PR with this branch as target. It will create locally on mine.\nSo the best I can do is, I create a branch on Moya repo with the changes above. Then since it's on the main Moya repo we can easily create PR for the different use cases.\nIf I not mistaken as member I can create a branch on Moya repo. Never tried before.. I pushed in Moya with a new branch enhancement/dangerfile \nhttps://github.com/Moya/Moya/tree/enhancement/dangerfile\nAnd I created a PR from my repo to Moya to test https://github.com/Moya/Moya/pull/1537\nClosing this PR now. we can merge from enhancement/dangerfile directly. Not sure about this issue,\nCould you please provide more information such as:\n- The command that you ran\n- Carthage Version\n- Xcode Version\nAnd also, can you please run your command with --verbose ?\nI just made a quick test with only github \"Moya/Moya\" ~> 10.0 in a cartfile. Running carthage bootstrap works just fine. My Cartfile is resolved with those dependencies:\nCartfile.resolved\ngithub \"Alamofire/Alamofire\" \"4.6.0\"\ngithub \"Moya/Moya\" \"10.0.1\"\ngithub \"ReactiveCocoa/ReactiveSwift\" \"2.0.1\"\ngithub \"ReactiveX/RxSwift\" \"4.1.1\"\ngithub \"antitypical/Result\" \"3.2.4\". I uninstalled Swiftlint and I'm still able to fetch Moya (10.0.1 and 11.0) properly with Carthage.. Issue only applicable if you fetch the project with pod\nPodspec\n\"Result\", \"~> 3.0\"\n````\nCartfile\ngithub \"antitypical/Result\" ~> 3.1\n```\nBoth should point to the same version.\nUpdating Result should not bring any issue since it's already working if you fetch the project with Carthage. Will resolve Result with  for 3.2.4. Same if you are using SPM.. I think this sentence is missing the '.' at the end. Can you add Breaking Change  and the pull request id at the end ?. ",
    "yanamura": "@scottrhoyt  Thanks for comments!\nYou are right, if someone handling responseValidationFailed, my change will be a breaking change..\n\nIt is technically a breaking change, though. If someone wrote code that looks for the a AFError. responseValidationFailed embedded in a MoyaError.underyling, their code will break with this update. Worse, it would probably be silent--no compiler error.\n\nI think my approach is not best solution ( just patch solution ).\nIt's may be better to solve #975 next major version.. ",
    "ETmanwenhan": "@pedrovereza \nInstantiate Manager, but it's still wrong. How to do?\n\n2017-11-17 17:26:51.968639+0800 yiyue[59453:3754730] CredStore - copyIdentPrefs - Error copying Identity cred. Error=-25300, query={\nclass = idnt;\nlabl = \"https://app200.yiban1314.com:443/\";\n\"r_Ref\" = 1;\n}\nMoya_Logger: [17/11/2017 17:26:52] Response: Received empty network response for MsgRule(\"2\").\nunderlying(Alamofire.AFError.responseValidationFailed(Alamofire.AFError.ResponseValidationFailureReason.unacceptableStatusCode(400)), Optional(Status Code: 400, Data Length: 238))\n\n```swift\nfunc msgRule() {\n    // \u786e\u4fdd\u9879\u76ee\u5df2\u7ecf\u6210\u529f\u5bfc\u5165\u4e86cert.cer\u8bc1\u4e66\u6587\u4ef6\n    let pathToCert = Bundle.main.path(forResource: \"server\", ofType: \"cer\")\n    let localCertificate = NSData(contentsOfFile: pathToCert!)\n    let certificates = [SecCertificateCreateWithData(nil, localCertificate!)!]\n\n    let serverTrustPolicy = ServerTrustPolicy.pinCertificates(\n        certificates: certificates,\n        validateCertificateChain: false,\n        validateHost: false\n    )\n    let serverTrustPolicies = [\"app200.yiban1314.com\" : serverTrustPolicy]\n    let serverTrustPolicyManager = ServerTrustPolicyManager(policies: serverTrustPolicies)\n\n    let manager = Manager(\n        configuration: URLSessionConfiguration.default,\n        serverTrustPolicyManager: serverTrustPolicyManager\n    )\n\n\n    let rxProvider = MoyaProvider<UserAPI>(manager: manager,\n                                           plugins: [NetworkLoggerPlugin(verbose: true)])\n    rxProvider.rx.request(.MsgRule(to_user_id:\"2\"))\n        .debug()\n        .mapJSON()\n        .subscribe { event in\n\n            switch event {\n            case let .success(response):\n                debugPrint(response)\n                break\n            case let .error(error):\n                print(error)\n                break\n            }\n    }\n\n```. @SD10 \nI tried to change the rxProvider to a global variable, but I still had the same error message. What should I do?\n```swift\nclass TestMoya: NSObject {\nstatic let shared = TestMoya()\nvar rxProvider : MoyaProvider!\n// Moya + RxSwift \n    func test() {\nlet disposeBag = DisposeBag()\n    rxProvider = MoyaProvider<UserAPI>()\n    rxProvider.rx.request(.userRepositories(\"ashfurrow\"), callbackQueue: DispatchQueue.main).subscribe { event in\n\n        switch event {\n        case let .success(response):\n            debugPrint(response)\n            break\n        case let .error(error):\n            print(error)\n            break\n        }\n\n    }.disposed(by: disposeBag)\n\n}\n}\n```\n. @SD10 \nI found out why, because the call to release the resources resulted.  \n\n.disposed (by: disposeBag)\n\n```swift\n//let disposeBag = DisposeBag()\n    rxProvider = MoyaProvider<UserAPI>()\n    rxProvider.rx.request(.userRepositories(\"ashfurrow\"), callbackQueue: DispatchQueue.main).subscribe { event in\n\n        switch event {\n        case let .success(response):\n            debugPrint(response)\n            break\n        case let .error(error):\n            print(error)\n            break\n        }\n\n    }//.disposed(by: disposeBag)\n\n```. @SD10 \nHow to release the resources for the MoyaProvider?. @SD10\nMoya doesn't need a developer to handle it manually, right? thank you. @SD10 \nWill that request the web multiple times? Is there a way to avoid it?. I found out why: dynamic parameter problems\nHow do I solve the dynamicParams problem?\nswift\nlet dynamicParams = [\"timestamp\": \"xxxx\"]\n. @BasThomas \nwhy error. Response? Request = nil?How can I get the request value?\n```swift\nfunc process(_ result: Result, target: TargetType) -> Result {\n    switch result {\n    case .failure(let error):\n\n        if let request = error.response?.request, let cache = URLCache.cachedResponse(request) {\n            let cachedResponse = Response(request: request, cache: cache)\n            return Result(cachedResponse, failWith: error)\n        }\n\n    default:\n        break\n    }\n\n    return result\n}\n\n```. @AndrewSB \nI think this method can be used to handle caching\nswift\n/// Called to modify a result before completion\n    func process(_ result: Result<Moya.Response, MoyaError>, target: TargetType) -> Result<Moya.Response, MoyaError>. When using the following method to request a network, appears Simplified Chinese Encode error, how do you set the encoding format for the request parameters.\n\nuploadCompositeMultipart. @BasThomas \nDoes RequestMultipartFormData create a default object to solve the problem?. This is my solution.\n\n```swift\n/// \u5c06params \u8bbe\u7f6e\u5230\u8bf7\u6c42body\uff0c\u907f\u514d\u4e2d\u6587\u4e71\u7801\n    ///\n    /// - Parameter params: \u53c2\u6570\n    /// - Returns: MultipartFormData\u4e0a\u4f20\u6570\u636e\u6570\u7ec4\n    func bodyParts(_ params: Dictionary) -> [MultipartFormData] {\n    var datas = [MultipartFormData]()\n\n    for (key, value) in params {\n\n        if let str = value as? String {\n            let v = str.data(using: .utf8)!\n            datas.append(MultipartFormData(provider: .data(v), name: key))\n        }else if let intValue = value as? Int {\n            let v = String(intValue).data(using: .utf8)!\n            datas.append(MultipartFormData(provider: .data(v), name: key))\n        }else if let doubleValue = value as? Double {\n            let v = String(doubleValue).data(using: .utf8)!\n            datas.append(MultipartFormData(provider: .data(v), name: key))\n        }else if let floatValue = value as? Float {\n            let v = String(floatValue).data(using: .utf8)!\n            datas.append(MultipartFormData(provider: .data(v), name: key))\n        }\n    }\n    return datas\n}\n\n```. This is my solution, please help me check whether it is correct, thank you!\n```swift\nimport Moya\nimport Result\n/// URLCache \u63d2\u4ef6\nclass CachePlugin: PluginType {\nvar req: URLRequest?\n\nfunc prepare(_ request: URLRequest, target: TargetType) -> URLRequest {\n    req = request\n    return URLCache.configureRequest(request)\n}\n\nfunc didReceive(_ result: Result<Response, MoyaError>, target: TargetType) {\n\n    switch result {\n    case .success(let resp):\n\n        if let request = req, let response = resp.response {\n            let cache = CachedURLResponse(response: response, data: resp.data)\n            URLCache.shared.storeCachedResponse(cache, for: request)\n        }\n        break\n    default:\n        break\n    }\n}\n\nfunc process(_ result: Result<Response, MoyaError>, target: TargetType) -> Result<Response, MoyaError> {\n\n    switch result {\n    case .failure(let error):\n\n        //Logger.log(msg: target)\n        //Logger.log(msg: req)\n        if let request = req, let cache = URLCache.cachedResponse(request) {\n            let cachedResponse = Response(request: request, cache: cache)\n            return Result(cachedResponse, failWith: error)\n        }\n    default:\n        break\n    }\n\n    return result\n}\n\n}\n```. ",
    "pepasflo": "I know this has been closed for a while, but I just wanted to say how happy I was to update my pods and find this little gem!  Thanks so much!. ",
    "sevrazzmatazz": "Aha! That was the missing part from my code. It would be great if this is reflected in the docs, especially here:\nhttps://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md. ",
    "YkmLo": "Hi, I have a problem similar to this. In iOS 9.3, \":\" is not changed to \"%3A\" but to \".\"\nI tried using URLEncoding.queryString but no luck. Any solution?. ",
    "JosselinOudry": "@dannymout For absolute beginners who haven't read all the docs yet, I would expect to see documentation about stubs in the Basic section. This is especially important as the Basic doc talks about sampleData and how great Moya helps you doing unit testing.\nThanks for making Moya!. ",
    "jassadakorn": "What if i try to use provider like this ?\nlet provider = MoyaProvider<Target>(endpointClosure: defaultEndpointClosure, stubClosure: MoyaProvider.immediatelyStub). ",
    "rdlester": "As someone currently trying to figure this out, I agree that it should be in the Basics section.\nAlso, while the Provider docs make it clear how to \"stub\" the requests, it doesn't make it clear what that the requests are stubbed with. sampleData is not mentioned anywhere on the page except as part of the default endpoint closure. It'd be nice to explicitly state the connection to prevent confusion. It'd also make that page show up in searches for sampleData.\nThanks!. ",
    "jorgelp94": "@gperdomor thanks! I'll look into it. ",
    "dirk68-fu": "If just found the answer to my questions in Alamofire's documentation. The solution is quite simple and I hope that this thread will be usefull to other users having a similar problem:\nInstead of returning URLEncoding.default I have to do the following to make it work:\nswift\n   var parameterEncoding: ParameterEncoding {\n        switch self {\n        case .addAttachment:\n            return URLEncoding(destination: .queryString)\n        }\n    }. ",
    "soundbites": "Any ETA on the 8.0.3 release? We're currently using the Xcode beta because the 3.1 compiler is a whole-lot faster then the 3.0 one.. ",
    "levibostian": "Leaving this here as reference in case others would find it useful. I was able to use the comments on this issue to help me with my problem of sending the value nil as a parameter value in my network request body. \nMoya version: 12.0.1\nSwift version: 4.2\n```swift\nstruct Contact {\n    let name: String \n    let email: String?\n} \n/**\n API requires body of JSON to be in format: \n  {\n    \"contacts\": [\n        {\"name\": \"Name Here\", \"email\": nil},\n        {\"name\": \"Other Name\", \"email\": \"other@yo.com\"}\n    ]\n  }\nIt requires nil to be used if the email field does not exist locally.\n*/\nlet contacts: [Contact] = getContacts()\nvar contactsRequest = \n    [String: Any]\n\nfor contact in contacts {\n    contactsRequest.append([\n        \"name\": contact.name,\n        \"email\": (contact.email ?? NSNull()) as Any\n    ])\n}\nlet parameters = [\"contacts\": contactsRequest]\n// Use parameters in TargetType for Moya request body. \n```\nAfter checking the my Moya network log, the request sent to the API is indeed: \n{\n    \"contacts\": [\n        {\"name\": \"Name Here\", \"email\": nil},\n        {\"name\": \"Other Name\", \"email\": \"other@yo.com\"}\n    ]\n}\nWhere nil is sent in the request for the \"email\" parameter. . Have you ever used any of the Moya plugins before? That's how I do OAuth with Moya and it's much easier to use then what you have above. \nThere is a provided plugin Moya has for you to use just for this purpose. ",
    "PMExtra": "Swift\nTimer.every(5.0.seconds) {\n    _ = RxMoyaProvider<MyAPI>().request(.heartbeat).subscribe()\n}\nIs this right? I don't care the response or error. I just want to send a request periodically.. @AndrewSB Thank you much. I think I made a conceptual mistake. The request is retain by subscription instead of provider.\nAnd I think the Finite sequence does not need to addDisposeBag, they will auto dispose while receiving .completed or .error message.\nI have no problem now, thanks you all.. ",
    "damienrambout": "It would probably be a breaking change since request(_ token: Target) would now return a Single<Response> (instead of Observable<Response>).\nOtherwise, I think Single is pretty much the same as a regular Observable.. ",
    "jianghongyu00": "```ruby\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, \u20199.0\u2019\nuse_frameworks!\ntarget 'BeautifulApp' do\n    pod 'Alamofire',    '~>4.0.0'\n    pod 'Moya\u2019,     \u2018~>8.0.0-beta.1'\nend\n```. After removing Alamofire \uff0ccan run\uff0cthank you\uff01. ",
    "gmoalvarez": "I am not sure if this helps track it down but I just encountered this error as well. If I make too many simultaneous network requests they all fail. For example if I try to fetch a bunch of data at once:\n```swift\nprovider.request(.target1).mapJSON(). map { data in \n...\n}\nprovider.request(.target2).mapJSON(). map { data in \n...\n}\nprovider.request(.target3).mapJSON(). map { data in \n...\n}\n```\nThis seems to not work for some reason. Not sure if it is related to your issue.. Yup I think you are right. That is pretty much what I have been doing but I still have the issue of identifying which changes were made offline and save them somehow to send to the server once a connection has been established. \nMaybe, in your example above, on\nsaveDataToNetwork(newA)\nif there is an error, I can either:\n\nSave the request itself to retry once a network has been established\nor\nSave the primary key and type of Realm object and have some kind of background process that goes through the list of entities that need updating.\n\nDo any of those approaches sound reasonable?. Yup that is pretty much what I was thinking of doing. Thank you for all of your suggestions. It was very helpful.. Are you trying to send an array instead of a dictionary in a request. If so, please see:\nhttps://github.com/Moya/Moya/issues/1060#issuecomment-296194926\nand let us know if that helps.. Hello I am not sure I am understanding your question completely but are you asking how to convert a dictionary to an array?\nIf so, for example:\nlet dictionary = [ \"a\" : \"hello\", \"b\": \"how are you\"]\nlet arrayOfValues = Array( dictionary.values.map { $0 })\nThat should work.\nIf I misunderstood can you please clarify? Maybe with an example of your data?. O I think I understand. You will need to modify the request then. Looking at the example in the Moya docs for Request Mapping:\nhttps://github.com/Moya/Moya/blob/master/docs/Endpoints.md#request-mapping\n```swift\nlet requestClosure = { (endpoint: Endpoint, done: MoyaProvider.RequestResultClosure) in\n    var request = endpoint.urlRequest\n// Modify the request however you like.\nrequest.httpBody = Array( endpoint.parameters.values.map { $0 }) //convert to array here!\ndone(.success(request))\n\n}\nlet provider = MoyaProvider(requestClosure: requestClosure)\n```. If not, you can follow this tutorial:\nhttps://github.com/Moya/Moya/blob/master/docs/Examples/ArrayAsRootContainer.md\nI haven't used array as a root container before but it sounds straightforward since you are customizing the request anyway.. I did look through the closed issues and found this discussion:\nhttps://github.com/Moya/Moya/issues/948\nand this which is related\nhttps://github.com/Moya/Moya/issues/950\nI guess I am mainly looking for advice/best practices.\nI am thinking for now it might be best to just create wrapper functions for each target to encapsulate the json parsing, as @scottrhoyt recommends in the first link.\nSo maybe something like:\n```swift\nclass MyClient {\n  let provider: Networking\ninit(provider: Networking) {\n    self.provider = provider\n  }\nfunc getSomeTarget(parameters: SomeParams?) -> Observable< [Entity] > {\n    return provider\n        .request(.someTarget())\n        .take(1)\n        .filterSuccessfulStatusCodes()\n        .retry(2)\n        .mapJSON()\n        .map { (data) -> [Entity]  in\n          guard let json = data as? JSONDictionary else { return [] }\n          guard let value = json[\"Value\"] as? [JSONDictionary] else { return [] }\n          let entities = Mapper().mapArray(JSONArray: value) ?? []\n          return entities\n        }\n        .do(onNext: { records in\n          //update record in database\n          _ = repository.save(entities)\n        })\n  }\nfunc getSomeOtherTarget() ...etc.\n}\n```. Hello @sunshinejr thank you for your reply. I ended up creating a wrapper and it has been working well so far. I did also end up borrowing some of the great ideas from the Kiosk implementation and modifying it for my project. Thank you :). ",
    "iballan": "@pedrovereza i have updated the comment above. I think if the method is POST, the query parameters are not added to the URL even if the URLEncoding.queryString is returned in the ParameterEncoding. Right ?. @pedrovereza I have tried exactly what in the example you have mentioned, The parameters are not added at all to the request.\n[\"Moya_Logger: [28/03/2017 19:47:25] Request: http://myservice/products\", \"Moya_Logger: [28/03/2017 19:47:25]]\nRequest Headers: [ \\\"Content-Type\\\": \\\"application/x-www-form-urlencoded; charset=utf-8\\\"]\"\n\"Moya_Logger: [28/03/2017 19:47:25] HTTP Request Method: POST\"]\n[\"Moya_Logger: [28/03/2017 19:47:25] Response: <NSHTTPURLResponse: 0x7a82a150> { URL: http://myservice/products } \n{ status code: 404, headers {\\n    \\\"Cache-Control\\\" = \\\"no-cache\\\";\\n    \\\"Content-Length\\\" = 216;\\n    \\\"Content-Type\\\" = \\\"application/json; charset=utf-8\\\";\\n    Date = \\\"Tue, 28 Mar 2017 16:47:18 GMT\\\";\\n    Expires = \\\"-1\\\";\\n    Pragma = \\\"no-cache\\\";\\n    Server = \\\"Microsoft-IIS/8.5\\\";\\n    \\\"X-AspNet-Version\\\" = \\\"4.0.30319\\\";\\n    \\\"X-Powered-By\\\" = \\\"ASP.NET\\\";\\n} }\"]\nStatus Code: 404, Data Length: 216\n. @avicks the query is not added at all still to the url. I think it has something to do with the method type \"Post\". btw, i put debug point inside the function you have written and used it. the break point is never reached \nI changed the request type to \"Get\", and the query was added correctly. but I need to change it to post to work correctly \nalso i have tested code with Alamofire and it works:\nSwift\n      let url = \"\\(Constants.MyService)products?id_category=30\"\n        Alamofire.request(url, method: .post)\n            .responseData { response in\n                print(response.request as Any)  // original URL request\n                print(response.response as Any) // URL response\n                print(response.result.value as Any)   // result of response serialization\n        }. @avicks \n@pedrovereza\nthe problem is instead of getting this as \nURL: \"http://myWebSErvice/products?id_category=30\"\nI get this:  %3F\nURL: \"http://myWebSErvice/products%3Fid_category=30\"\nand when the \"?\" becomes \"%3F\" , the webservice throws error this  \"A potentially dangerous Request.Path value was detected from the client (?).\"\nWhat i want is only to send the request with ? not with %3F. @pedrovereza Thank you so much for your help.\nHowever, It is still not working :( \nYou may check my Question, i already used URLEncoding.queryString\nI tried 2 ways:\nFirst: setting the query manually:\nswift\n   var path : String {\n        switch self {\n        case .products(let id_category): \n            return \"products?id_category=\\(id_category)\"\n        }\n    }\nFail: because ? was encoded into %3F. which caused webservice 400 error.\nSecond: As you mentioned URLEncoding.queryString\n```swift\n   var path : String {\n        switch self {\n        case .products: \n            return \"products\"\n        }\n    }\n    var parameterEncoding: ParameterEncoding {\n        switch self {\n            case .products:\n                //return MyURLEncoding.queryString\n                return URLEncoding.queryString\n            default:\n                return JSONEncoding.default \n        }\n    }\nvar parameters : [String : Any]? {\n        switch self {\n        // here I tried to add them for Testing purpose, i tried with and without them\n        case .products(let id_category):\n            var params: [String: Any] = [:]\n            params[\"id_category\"] = id_category\n            return params\n        default:\n            return nil\n        }\n    }\n```\nFail: Not adding the parameter at all.\nWhat made me think that it is Moya's issue, when I use Alamofire as I mentioned above the URL is encoded correctly and did not change ? to %3F.\nNow in my code I used both Moya (because i already started with it and it is a really overhead work to roll back from it) and Alamofire (to get the POST requests' url query working correctly) \ud83d\udc4e \n. @dmitrykurochka  I use Alamofire directly for functions that has & in Post methods's url. @dmitrykurochka \nYes, I guess the whole problem was because I used the same function, without the last parameter:\nparameterEncoding: target.parameterEncoding\nby adding it to the endpoint constructor now it works. @sunshinejr I have tested it but the url is send empty without the parameters. what can be the issue with this ?. ",
    "avicks": "@iballan try this, I recently had the same issues and solved them by using the following (I forget where, but there was another issue raised in Moya where I cobbled together this answer, wish I could give that author credit):\n```swift\nvar parameterEncoding : Moya.ParameterEncoding {\n  switch self {\n  case .feedback:\n     return TokenURLEncoding.default\n  default:\n     return URLEncoding.default\n  }\n\n}\n/// Used to append the Token to requests which require it.\n/// Don't attempt to do this in the path variable, as our server can't handle % encoding..\nstruct TokenURLEncoding: Moya.ParameterEncoding {\npublic static var default: TokenURLEncoding { return TokenURLEncoding() }\n/// Creates a URL request by encoding parameters and applying them onto an existing request.\n   ///\n   /// - parameter urlRequest: The request to have parameters applied.\n   /// - parameter parameters: The parameters to apply.\n   ///\n   /// - throws: An AFError.parameterEncodingFailed error if encoding fails.\n   ///\n   /// - returns: The encoded request.\n   public func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n  var req = try urlRequest.asURLRequest()\n\n  // first coerce a mutable URL out of the urlRequest\n  // next, get the components of the request\n  // finally, get our token\n  guard let request = (req as NSURLRequest).mutableCopy() as? NSMutableURLRequest,\n        let components = NSURLComponents(string: request.url!.absoluteString),\n        let token = LinesSession().token else {\n\n     // Handle the error\n     return req\n  }\n\n  let json = try JSONSerialization.data(withJSONObject: parameters!,\n                                        options: JSONSerialization.WritingOptions.prettyPrinted)\n\n  let tokenQueryItem = NSURLQueryItem(name: \"token\", value: token)\n  components.queryItems = [tokenQueryItem as URLQueryItem]\n\n  req.setValue(\"application/json; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n  req.url = components.url\n  req.httpBody = json\n\n  return req\n\n}\n}\n. @iballan The query isn't added?  \nI'm using that encoding I posted to append my query item to the URL, making a POST request, and getting success.  \nWould you mind elaborating on the structure behind your call?. ",
    "chivalrousbob": "Hi everybody, today is my first time to use Moya \"it is really great library\", in fact I got the same problem when i use path with  this received character \"?\" I decided to update in the Moya even is not recommended and I'm happy to share my solution with you.\nthe only thing I've done is to update inside this file MoyaProvider+Defaults.swift.\nupdate this function : \n```swift\n private final class func url(for target: Target) -> URL {\n        if target.path.isEmpty {\n            return target.baseURL\n        }\n    return target.baseURL.appendingPathComponent(target.path)\n}\n\n```\nwith this \ud83d\udc4d \n```swift\nprivate final class func url(for target: Target) -> URL {\n        if target.path.isEmpty {\n            return target.baseURL\n        }\n    let urlComponents = NSURLComponents(url: target.baseURL, resolvingAgainstBaseURL: true)!\n    let charset = CharacterSet(charactersIn: \"?\")\n    if target.path.rangeOfCharacter(from: charset) != nil {\n        let index = target.path.characters.index(of: \"?\")\n        if let index = index {\n            let path = target.path.substring(to: target.path.characters.index(before: index))\n            let query = target.path.substring(from: target.path.characters.index(after: index))\n            urlComponents.path = path\n            urlComponents.query = query\n        }\n    }\n    else{\n        urlComponents.path = target.path\n    }\n\n    return urlComponents.url!\n}\n\n```\n I hope it will help :). Hi everybody, today is my first time to use Moya \"it is really great library\", in fact I got the same problem when i use path with  this received character \"?\" I decided to update in the Moya even is not recommended and I'm happy to share my solution with you.\nthe only thing I've done is to update inside this file MoyaProvider+Defaults.swift.\nupdate this function : \n```swift\n private final class func url(for target: Target) -> URL {\n        if target.path.isEmpty {\n            return target.baseURL\n        }\n    return target.baseURL.appendingPathComponent(target.path)\n}\n\n```\nwith this \ud83d\udc4d \n```swift\nprivate final class func url(for target: Target) -> URL {\n        if target.path.isEmpty {\n            return target.baseURL\n        }\n    let urlComponents = NSURLComponents(url: target.baseURL, resolvingAgainstBaseURL: true)!\n    let charset = CharacterSet(charactersIn: \"?\")\n    if target.path.rangeOfCharacter(from: charset) != nil {\n        let index = target.path.characters.index(of: \"?\")\n        if let index = index {\n            let path = target.path.substring(to: target.path.characters.index(before: index))\n            let query = target.path.substring(from: target.path.characters.index(after: index))\n            urlComponents.path = path\n            urlComponents.query = query\n        }\n    }\n    else{\n        urlComponents.path = target.path\n    }\n\n    return urlComponents.url!\n}\n\n```\n I hope it will help :). hi @jx2359 I updated my code you can check agin it will work with the other url also. hi @jx2359 I updated my code you can check agin it will work with the other url also. ",
    "jx2359": "I've tried the above modification but it doesn't work with my other url paths without \"?\". So with a slight modification this works for me now\n```swift\nprivate final class func url(for target: Target) -> URL {\n        if target.path.isEmpty {\n            return target.baseURL\n        }\n    let urlComponents = NSURLComponents(url: target.baseURL, resolvingAgainstBaseURL: true)!\n    let index = target.path.characters.index(of: \"?\")\n    if let index = index {\n        let path = target.path.substring(to: index)\n        let query = target.path.substring(from: target.path.characters.index(after: index))\n        urlComponents.path = path\n        urlComponents.query = query\n\n        return urlComponents.url!\n    } else {\n        return target.baseURL.appendingPathComponent(target.path)\n    }\n}\n\n```\n. hi @chivalrousbob, I tried your code again but I got an exception at the last line when the url has no parameters in the path. \nI forgot to add that in my previous comment I've also modified the line where \"path\" is generated. target.path.substring(to: target.path.characters.index(before: index)) returns the path with the last character removed, and it results in a 404 response.. ",
    "bawn": "I have same issues.. ",
    "AnupamKatiyar": "@iballan  You have to write custom endpoints like this:\nprint(\"baseURL:(target.baseURL)\\n path:(target.path)\")\nlet url = target.baseURL.absoluteString + target.path\nprint(\"url:(url)\")\n//http://XXXX/api/xlogin.ashx?action=xulogin\n//This method will escape special characters\n//let url = target.baseURL.appendingPathComponent(target.path).absoluteString\n//http://XXXX/api/xlogin.ashx%3Faction=xulogin\nlet endpoint = Endpoint(\n    url: url,\n    sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n    method: target.method,\n    parameters: target.parameters,\n    parameterEncoding: target.parameterEncoding\n)\n//Set up your header information\nreturn endpoint.adding(newHTTPHeaderFields: [:]). ",
    "dmitrykurochka": "@iballan Did you find any solutions? Have the same problem. @iballan Did you find any solutions? Have the same problem. @iballan Looks like I have found solution. You should use own Endpoint and url stay correct without changing from '?' to '%3F'\n This my real method that works for this situation\nlet authPlugin = AccessTokenPlugin(token: token)\n    let provider = RxMoyaProvider<Service>(endpointClosure: {target in\n      return Endpoint(\n        url: \"\\(target.baseURL)\\(target.path)\",\n        sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n        method: target.method,\n        parameters: target.parameters,\n        parameterEncoding: target.parameterEncoding\n      )\n    }, plugins: [authPlugin])\n. @iballan Looks like I have found solution. You should use own Endpoint and url stay correct without changing from '?' to '%3F'\n This my real method that works for this situation\nlet authPlugin = AccessTokenPlugin(token: token)\n    let provider = RxMoyaProvider<Service>(endpointClosure: {target in\n      return Endpoint(\n        url: \"\\(target.baseURL)\\(target.path)\",\n        sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n        method: target.method,\n        parameters: target.parameters,\n        parameterEncoding: target.parameterEncoding\n      )\n    }, plugins: [authPlugin])\n. ",
    "noizar": "try use this\n```swift\nvar baseURL: URL{\n        switch self {\n        case .chagePassword(,,let token):\n             return URL(string: \"base_url?token=(token)\")!\n        default:\n            return URL(string: \"base_url\")!\n        }\n    }\nvar path:String{\n        switch self {\n        case .chagePassword:\n            return \"/api/update-password\"\n        }\n    }\n```\nand  url request  will like this \"base_url/api/update-password?token=\"114149814189\". ",
    "mayuur": "@noizar your solution works! but how? I am curious.. ",
    "williampenna": "For me it didn't get yet.\nThe difference is that I'm using .get\nBut the problem still happens, it converts the \"?\" to \"%3F\". ",
    "WangShunYang": "@iballan  i have same problem ,can you send me a example how to save this problem? thx . @noizar  it works for me . ",
    "lizhihui0215": "Thx @pedrovereza if there is a way to extended the MoyaError with mine custom error. ",
    "LarsJK": "Thanks guys! Love how you run open source projects \u2764\ufe0f. ",
    "balancin": "so sad =( i really was excited with this feature in my mind lol So.. I will use that on xcode, thanks !. ",
    "JoeFerrucci": "@BasThomas Yep! Perfect \ud83d\udc4c\ud83c\udffc. ",
    "BenEmdon": "This change doesn't affect any functionality. Does something still need to be added to the changelog?. Saw this PR had been sitting here for a bit, so I tried to see if I could help out.\nCurrently the syntax looks like this:\nswift\nplugin = NetworkLoggerPlugin(verbose: true, output: { printing in\n  let stringArray: [String] = printing.2.map { $0 as? String }.flatMap { $0 }\n  ...\n})\nTo reach the same functionality this will work:\nswift \nplugin = NetworkLoggerPlugin(verbose: true, output: { (_, _, printing: Any...) in\n  let stringArray: [String] = printing.map { $0 as? String }.flatMap { $0 }\n  ...\n})\nHope this helps!. @pedrovereza sure!. I like the idea of 3! \ud83d\ude4c . ",
    "douglastaquary": "@rlam3 This implementation does not work. Do you have any idea how I can send these parameters in the body of the request as json with Moya? On my implementation the parameters are nil. :(\nThe function prepare() is not called. Any suggestion?. @rlam3 I think that know  what you're talking about.. My first implementation was like this. But also not work. : / This method where we can add the parameters into the header can to work also to pass json in body of request?\nAre you have any code for show me?. \nI solved the problem in the simplest and obvious way I think. I only implemented Moya's default code. After a long time trying to implement in other ways, I realized that this is the most simple and objective way. As we speak here in Brazil: Moya is Top! \ud83c\udf89 \nI updated the Moya version of 8.0.0-beta.3 to 8.0.3 and\n```swift\nenum MyAPI {\n    case xAuth(username: String, password: String)\n}\nvar parameters: [String: Any]? {\n        switch self {\n        case .xAuth(let username, let password):\n            return [\"username\": username as AnyObject,\n                    \"password\": password as AnyObject]\n        default:\n            return nil\n        }\n    }\nvar parameterEncoding: Moya.ParameterEncoding {\n    switch self {\n    case .xAuth:\n        return JSONEncoding.default\n    default:\n        return URLEncoding.default\n    }\n}\n\nlet provider =  RxMoyaProvider(plugins: [NetworkLoggerPlugin(verbose: true)])\n```\nThe result is this json with username and password in the request body. \ud83c\udf7a \njson\n{ \n  \"username\": \"me\",\n  \"password\": \"1234\"\n}\nVery easy! \ud83d\udc4f \n . ",
    "haritowa": "@AndrewSB yeah, sorry, 2am is not best time to create issue descriptions \ud83d\ude05 I'll try again:\nAs far as i know, by default Alamofire invokes all callbacks on Main queue, but you can customize this behavior via queue parameter. Moya expose this parameter, but RxMoyaProvider don't. As a result, we can't avoid Main thread.\nOnly self.request invocation can be customized via subscribeOn, but completion handler will be invoked on Main thread. To avoid future computation on main thread we can observe chain on another Scheduler, but we can't bypass main thread callback and unnecessary dispatches.\nI look through https://github.com/Moya/Moya/pull/762 Are you sure that pass scheduler(instead of Queue) is the best idea? I believe this is not Rx-side work, and we should just pass queue to this method. I don't understand why you are propose to capture queue on provider creation (RxMoyaProvider<GitHub>(queue: DispatchQueue.global(.utility))) instead of pass it on each observable creation(this method)\nI propose:\n- Add optional queue parameter to provider creation\n- Add optional queue parameter to this method\nAnd for RxSwiftProgress ReactiveProvider ReactiveProvider with progress. Ok, I'll do it tomorrow, sorry for scheduling PR on weekends :). I'll fix lint issues later, when there will be no other reason to reject PR(case code can change during PR :)). > I think it would be smart to implement some more tests as well though. Are you familiar with testing in ReactiveSwift/RxSwift?\nYep, for some degree, but only with RxTest/RxBlocking(that means I can't write ReactiveSwift tests w/o future investigation). I'll cover this commit functionality(check callback queue) within the next few days. As far as I remember, you can't get queue from a scheduler. In addition, you can't pass any Scheduler as a callback queue provider for Alamofire. It's not private, it's internal. You can implement scheduler in whatever way you want: you should just adopt one protocol, which has nothing common with GCD. So, for instance, we need scheduler which stick with one thread, we can't get it's queue 'case it doesn't use any. There is sync and async versions for main scheduler(and again, we are talking about Schedulers, provided out of the box), but Alamofire wouldn't respect this distinction.\nAs I said earlier: we don't use this queue for any Rx-related work, we just pass to non-rx world. We don't even guarantee, that each element will be emitted on this scheduler(because we has dependency on Alamofire implementation). If user really want to use scheduler - he can just observeOn it any rx-chain he want, but he can't avoid dispatching to main queue for now. \nAnyway, I remember about tests and moving queue to MoyaProvider :). Hmm, any clue why tests failed? I can't even open log. By the way, i added tests for MoyaProvider RxMoyaProvider and moved queue to MoyaProvider. Deprecate approach doesn't work as i expected(swift can't choose proper overload). @AndrewSB Oh i see, i was afraid you just give up on this PR :) Ok, i'll update changelog. @AndrewSB It's ok, I'm busy on weekdays too :). @AndrewSB Aaaaand... it's done :). @sunshinejr I took this name from original request method, but I'm agree, callbackQueue would be much better(I believe \"queue\" parameter name misleading even in request method). @BasThomas Yep, I think so. In method context queue is less confusing, but still does not provide any clue about its mission. I prefer slightly more verbose callbackQueue. Just use params instead of embedding em on your own. Maybe we should, I'm not sure 'case for some reason, queue wasn't in init. \nBy the way, maybe we should create second init(return previous init, w\\o queue and deprecate it? If anyone has reactive providers subclasses with overridden init - their code would not compile, sounds bad). Sorry, i'm afraid you didn't get me. You are right, old init calls will not break after edit(case queue param is optional), but any RxSwift/ReactiveSwift provider descendants overridden init will not compile, until user remove override. Let me show you what i'm talking about:\nThis is Moya in current state with two user created provider descendants\n\nThis is Moya state, after adding queue param(note that new param has default value)\n\nAnd finally that is was i proposed in previous commit\n\nAdding queue param to MoyaProvider will do even more mess, if we will stick to replace instead of deprecation. If we can choose between shift breaking change to major upgrade or generate boilerplate with deprecating init - i prefer first approach :)\nSo we still want to add queue param to original MoyaProvider? Seems like another place for tests :). ",
    "myafer": "I can\u2018t run other projects on my iPhone before and alert build success. When I try to use \u2019carthage update\u2018 (but update failure) and build the Moya Framework. Then I run my project. Then it alert this(also in the moya demo) : \n\n. ",
    "jayesh15111988": "I see this has already been raised in https://github.com/Moya/Moya/issues/1046. Should I just close this issue then?. ",
    "amaurydavid": "Nvm, I found some inspiration from https://github.com/Moya/Moya/issues/909 and created a custom encoding.\n```swift\nstruct MultipleEncoding : ParameterEncoding {\nvar urlParameters: [String]?\n\ninit(urlParameters:[String]) {\n    self.urlParameters = urlParameters\n}\n\nfunc encode(_ urlRequest: Alamofire.URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n    guard let parameters = parameters else { return urlRequest as! URLRequest }\n\n    //Encode URL Params\n    var filteredParams: [String: Any] = [:]\n\n    parameters.filter({ (key,value) in\n        return urlParameters?.contains(key) ?? false\n    }).forEach {\n        filteredParams[$0.0] = $0.1\n    }\n\n    let partiallyEncodedRequest = try URLEncoding.queryString.encode(urlRequest, with: filteredParams)\n\n    //Encode JSON\n    filteredParams = parameters.minus(dict: filteredParams)\n    return try JSONEncoding.default.encode(partiallyEncodedRequest, with: filteredParams)\n}\n\n}\n```\nThat's not very generic but I someone has the same issue, here is something to start with :)\n. I no longer have access to that code but by the look of it, the minus function was just building a new dictionary with only entries that should be json encoded. Kinda the opposite of the filter above.\n. I've got an issue with the validation test failing because the TargetType's validationType default implementation overrides the value given when defining the StructAPI's validationType. \nSome help here would be appreciated ^^. Yep that's what I did: \nwith a default to nil it tells me it gets nil, \nwith a default to successAndRedirectionCodes it tells me it gets Optional(Moya.ValidationType.successAndRedirectionCodes)\nSo whatever the value I set in the StructAPI, It only takes the default value.. I just checked by implementing Equatable for ValidationType, and expect(target.validationType!) == ValidationType.successCodes\nresults in a Fatal error: Unexpectedly found nil while unwrapping an Optional value with nilbeing the default. It looks like the String(describing:) irrelevant here :/. @SD10 Here is my Equatable implementation, I think it's pretty straightforward\n```\nextension ValidationType : Equatable {\npublic static func ==(lhs: ValidationType, rhs: ValidationType) -> Bool {\n    switch (lhs,rhs) {\n    case (.successCodes,.successCodes),\n         (.successAndRedirectionCodes, .successAndRedirectionCodes):\n        return true\n    case (.customCodes(let c1), .customCodes(let c2)):\n        return c1 == c2\n    default:\n        return false\n    }\n}\n\n}\nAnd my updated test (not used to writing test so there must be a better way):\nit(\"uses correct validate\") {\n    if let type = target.validationType {\n        expect(type) == ValidationType.successCodes\n    } else {\n        expect(false).to(beTrue())\n    }\n }\n```\nStill fails when using nil as the validationType default value though :/. The issue here is that is doesn't even execute the switch statement because the validationType is nil. Hello @sunshinejr , unfortunately I won't be able to work on it this week but I think most of the work is done.\nThere is still this issue with the default value not being overriden in tests, as I'm not able to fix this, my last though was to simply remove the default value and see what's going on.\nAfter fixing this and editing the migration doc I think it would be done with this PR.. Hello @sunshinejr , unfortunately I won't be able to work on it this week but I think most of the work is done.\nThere is still this issue with the default value not being overriden in tests, as I'm not able to fix this, my last though was to simply remove the default value and see what's going on.\nAfter fixing this and editing the migration doc I think it would be done with this PR.. I like the idea of stripping down the stub configuration to only a specific target type and its 2 properties.\nIf the intention is great, I don't think it is easy enough to use for every stubbing use cases.\nAs I see it, there are 2 main usages of request stubbing: creating unit tests, and having a placeholder content for a soon-to-be-live route of our favorite API.\nFor the first case, this solution is functionnal: just replace TargetType by TestTargetType in the mock target, implement the 2 new properties, and if needed, also replace MultiTarget by MultiTestTarget. Nothing more to be done to support stubbing.\nAs of the second case, it's more a boilerplate. Let's say you start with a target without stub, and you want to support a new route that will be released soon:\n- replace TargetType by TestTargetType\n- implement the 2 new properties\n- replace MultiTarget by MultiTestTarget if needed\nAnd then, when the API is live, you'll have to remove the stubbing code:\n- replace TestTargetType by TargetType\n- remove the 2 old properties\n- replace MultiTestTarget by MultiTarget if needed\nFinally, repeat again when a new route comes up.\nIt's ok to do all that for one route, but after having to change types twice we'll consider just using TestTargetType and MultiTestTarget permanently to avoid changing types everytime. Or you will juste forget to change the types.\nMoreover, if you are a new dev on the project, you will try to make as few changes as possibles, and changing types can be too much a worry.\nSo great solution for unit tests, not so great for temporary stubbing.\nSpeaking of temporary stubbing, could you consider making the sampleResponse being Optional? It would prevent having to return Data() for a route using StubBehavior.never. Or even better to me: merging those 2 properties by having the Data as associated value of the StubBehavior (as proposed on #1754 ).. Initially I had a .none case, but then I struggled with the ValidationType's statusCodes property: I didn't want it to return an empty array because if used wrongly it would cause Alamofire to error on every status code, so it would have to turn it into an optional. \nSecondly, in MoyaProvider+Internal It would meant much more \"complex\" code than a single line for both 3 methods with a case let to match the .none, an unwrapping of the newly optional statusCode property, and poor factorization capability because of the Alamofire's validation function being duplicated in DataRequest and DownloadRequest ( i.e 2 similar functions except for the generic type parameter).\nAs I see it, the nil version wins in term of code complexity. As for the usage, I admit being neutral.. Not sure how this is supposed to work as it cause a build error.\nIf I'm not mistaken, map would call the validate func for every statusCode, that's not what we want. Also, we have to specifically call the validate(statusCode:) func because there are others validate func using another first parameter name.\nBut yeah, It would be great to find a way to get rid of the force unwrap while keeping the code that simple (though as the nil test is performed before using it it won't cause a crash). 1. Wouldn't it be better to put this in a migration_10_to_11.md instead?\n2. Will do.. ",
    "hardikamal": "@amaurydavid  parameter.minus is not working. And can you help out on how to use this?. ",
    "geraldeersteling": "Hi @sunshinejr, no problem.\nI had already worked my problem out by overriding the delegate's taskDidReceiveChallenge closure of the default Alamofire SessionManager. I wrapped the closure in a lazy var which makes it only execute once (as that is more logical for pinning in this case/context).\nThe above looks like:\nswift\nclass SomeNetworkingClass {\n    /// Configures AlamoFire for our certificate pinning;\n    /// subsequent calls will (and should) not execute this code again\n    lazy var configureAlamofireForSSL: Void = {\n        /* < Handle the certificate pinning here > */\n    }()\n}\nNow calling let _ = SomeNetworkingClass().configureAlamofireForSSL sets up SSL for the default manager. After this I could just assign the Sessionmanager.default to the MoyaProvider and it works as expected.\n\nI don't think there's an easier way of doing this, much less find a generic way to implement this in Moya. \ud83d\ude04 \n. ",
    "konnorbeard": "@AndrewSB sorry I wasn't clear - I've updated my original issue to better explain what I'm seeing and what my question is. . @pedrovereza just tried, same issue . @pedrovereza @sunshinejr sorry for my inactivity. The errors ended up being swift/xcode version related. The fix ended up being using swift 2.3 with xcode 8.0 - nothing on your guys end. Thanks for your suggestions and time on this. . ",
    "alexruperez": "@AndrewSB NetClient is another network abstraction layer, by default it uses URLSession behind but also has an implementation using Alamofire in a subspec. It has syntactic sugar, async/synch execution, interceptors... Maybe someone wants to use the power of the NetRequest builder pattern to build the request and after all launch the request using Moya, that's this pull request being.\nI have pending improve the readme, we are starting the launch. Pull request would be greatly appreciated!\nThanks for your support. \ud83d\ude03. Thanks @sunshinejr! \ud83d\ude03 . ",
    "Zeeker": "It's not really a big thing, right now I have to do this:\nswift\nEndpointSampleResponse.networkError(MyError.someError as NSError)\nIf EndpointSampleResponse would receive a Swift.Error directly I could avoid the as NSError cast and instead do this:\nswift\nEndpointSampleResponse.networkError(MyError.someError)\nSince NSError implements Swift.Error this would also allow passing NSError instances in addition to \"normal\" Swift.Error instance.. ",
    "phimage": "Thank you all to review my PR and for the hard-work\n\nto make sure it is all working well\n\nTo achieve this I make a new PR about multipart part upload ;). There is no test about upload progress, only download progress \nBut I made an unit test on httpbin and we receive progress info\nhttps://github.com/phimage/Moya/commit/765113a198d3058235a2197b9c5f9757cdc72aa5. Yes I will do it\nI have 3 commits, maybe 3 or 2 PR to do, and all about \"progress\", so potentially a lot of conflicts if I do not make it one after another.\nFirst one is #1232, I must convert it for 9.0.0-dev. Ok I can redo my commits for 9.0.0-dev \nand use my fork until release\nPS: Any reason to not have swiftlint in build phase of xcode targets. I think I have added some trailing whitespaces. Changelog updated. Need to merge my commit into one to keep git history clean or this is good for you?. I see one think about multipart data\nMoyaProvider.performRequest could do execute an fatalError\nIf I provide an empty array of multipart data. A test maybe could be done. @sunshinejr \nI simplify the test by removing all the check on returned data by httpbin\nI think another PR could be done later with some tests,\nwhich upload some objects and check the result provided by httpbin. The Decodable type is not mandatory as parameter of the function\nYou could specify it on object result type\n```swift\nlet response = Response(statusCode: 200, data: data)\nlet receivedObject: Issue = try response.mapObject(atKeyPath: \"issue\", decoder: decoder)\n```\nMaybe it's easier for reactivate programming but for standard behaviour I thinks removing it will be the best solution event if the apple function is decode<T>(_ type: T.Type, from data: Data)\nWith reactive programming the code will be something like this\nswift\nlet single = response.asSingle()\nvar receivedObject: Issue?\n_ = single.mapObject(atKeyPath: \"issue\", decoder: decoder).subscribe(onSuccess: { (object: Issue) in\n      receivedObject = object\n})\nfor event , .subscribe { (event: (SingleEvent<Issue>)) in\n. We can add it to prevent behaviour change. Not a Nimble expert, so I do not find any sequence containNil predicate ( I try to call contain or containElementSatisfying)\nI keep all progress objects into this array\nswift\nvar progressObjects: [Progress?] = []\nthen I test like this\nswift\n expect(progressObjects.filter{$0 != nil}.count) == 5\nor if I test only the last\nswift\nexpect(progressObjects.last).toNot(beNil()). yes I test with first target only, mac os, my bad\nfixed. Line removed\nI just let atom remove the useless space in changelog (two lines). I can remove all code about \"progress\" but the test I think must be elsewhere\nJust a test (or many tests in one separated file) about doing an upload with multipart data. \nI see anything else to simplify. . Httpbin.org return a beautiful JSON output with all the form data that I post. (no stub)\nSo I check that all multipart data I post, are in the JSON response.\nI check that the content uploaded is exact ie. same string, have a file\nYes, separated tests could be done.\nAnd/Or Maybe a func to check all multipart data\nswift\nfunc expect(multipartData: [MultipartFormData] , in response: Response). ",
    "mpsnp": "@iOSUser110 this is Alamofire issue (not issue actually...) but it generates such body:\n...\nstatusList[][id]=1&\nstatusList[][status]=High&\nstatusList[][id]=2&\nstatusList[][status]= Low&\nstatusList[][id]=3&\nstatusList[][status]= Medium \nIn other words: it composes an array without indexes, that's why PHP or whatever cannot decode it in right way.. ",
    "jawwad": "Whohoo!!! \ud83c\udf89  So what did I win? \ud83d\ude01 . ",
    "longshihua": "@alcarvalho and @pedrovereza ,thanks guys.. ",
    "KumariOS": "@iOSUser110, how did you solve this problem?\n. @iOSUser110, how did you solve this problem?\n. ",
    "alsingr": "I resolve it by catching any exception or error in completion closure. ",
    "ZHDeveloper": "@sunshinejr thanks, I think I get it. i change encoded,then resolve it~. ",
    "rgkobashi": "As @sunshinejr mention, you can test the .sampleData like they do on the link that he provided. However if what you are looking is to test your RequestManager, NetworkManager or whatever you are using to encapsulate your request you can check this.. ",
    "ChengOuyang": "Resolve by custom encoding that conforms to the ParameterEncoding protocol.. ",
    "asulta": "I'm sorry but i don't have enough time atm to create a demo :(\nAnyway, NetworkLoggerPlugin is logging this: \n[\"Moya_Logger: [30/05/2017 22:21:23] Request: http://api.supersecretendpoint.com/exhibitions\", \"Moya_Logger: [30/05/2017 22:21:23] Request Headers: [:]\", \"Moya_Logger: [30/05/2017 22:21:23] HTTP Request Method: GET\"]\n[\"Moya_Logger: [30/05/2017 22:22:07] Response:  { URL: http://api.supersecretendpoint.com/exhibitions } { status code: 200, headers {\\n    Connection = \\\"Keep-Alive\\\";\\n    \\\"Content-Type\\\" = \\\"application/json; charset=utf-8\\\";\\n    Date = \\\"Tue, 30 May 2017 20:21:50 GMT\\\";\\n    \\\"Keep-Alive\\\" = \\\"timeout=5, max=100\\\";\\n    Server = Apache;\\n    \\\"Transfer-Encoding\\\" = Identity;\\n    \\\"X-Powered-By\\\" = \\\"PHP/5.3.29, PleskLin\\\";\\n} }\"]\nI have this issue also on version 8.0.3\nWhen i perform the request with plain alamofire and postman, i get the correct response with \"title\" and \"text\" parameters.\nThe request is a get and the json is valid.\nThis is my request service\n```swift\nimport Moya\nimport SwiftyJSON\nimport Result\nclass RequestsService {\nstatic let manager = RequestsService()\n\nvar provider: MoyaProvider<RequestsEnum>\n\ninit() {\n    let endpoint = { (target: RequestsEnum) -> Endpoint<RequestsEnum> in\n        return Endpoint<RequestsEnum>(\n            url: target.baseURL.appendingPathComponent(target.path).absoluteString,\n            sampleResponseClosure: {.networkResponse(2000, target.sampleData)},\n            method: target.method,\n            parameters: target.parameters\n        )\n    }\n\n    self.provider = MoyaProvider(endpointClosure: endpoint, plugins: [NetworkLoggerPlugin()], trackInflights: true)\n}\n\nfunc performRequests(callback: @escaping () -> Void) {\n    let requests: [RequestsEnum] = [.getExhibitions]\n\n    for request in requests {\n        RequestsService.manager.provider.request(\n            request,\n            completion: { result in\n                self.defaultHandler(type: request, result: result, callback: callback)\n            })\n    }\n}\n\nfunc defaultHandler(type: RequestsEnum, result: Result<Response, MoyaError>, callback: () -> Void) {\n    switch result {\n    case let .success(response):\n        let json = JSON(data: response.data)\n        switch type {\n        case .getExhibitions:\n            let exhibitions = json.arrayValue.map({ json in Exhibition(json: json) })\n            print(exhibitions)\n            break\n        }\n    case let .failure(error):\n        print(\"request error: \", error)\n        break\n    }\n}\n\n}\nenum RequestsEnum {\n    case getExhibitions\n}\n```\nAnd this is my request service specification\nswift\nextension RequestsEnum: TargetType {\n    var baseURL: URL {\n        return URL(string: ConfigService.endpoint)!\n    }\n    var path: String {\n        switch self {\n        case .getExhibitions:\n            return \"/exhibitions\n        }\n    }\n    var method: Moya.Method {\n        return .get\n    }\n    var parameters: [String: Any]? {\n        return nil\n    }\n    var parameterEncoding: ParameterEncoding {\n        return JSONEncoding.default\n    }\n    var sampleData: Data {\n        return Data()\n    }\n    var task: Task {\n        return .request\n    }\n}\nI don't know if it's useful, but somehow, sometimes the request works correctly\nThanks again. Looks like I have a problem with the responseData method of Alamofire, it doesn't return those 2 attributes... \nThe responseJSON is working fine though\nSorry for the waste of time.. ",
    "m3rLin0WoRK": "Nobody can help me?\n. Nobody can help me?\n. Thank you :) . Thank you :) . ",
    "pete183": "@BasThomas The parameterEncoding is \n\nURLEncoding.default\n\n@haritowa The server needs the access token and limits to be in the url. Would using params allow for this?. @pedrovereza @haritowa Thanks for the help, it works now!. @sunshinejr Does Moya have an easy way to send two parameters one in the URL and one in the body using a POST request?. @sunshinejr \nI think something like this would work:\n```swift\npublic var parameters: [String: Any]? {\n    var params:[String: Any] = [:]\n    params[\"query\"] = [\"access_token\":getAccessToken()]\n    params[\"body\"] = [\"user_name\":\"Pete\"]\nreturn params\n\n}\npublic var parameterEncoding: ParameterEncoding {\n    return CompositeEncoding()\n}\nstruct CompositeEncoding: ParameterEncoding {\npublic func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n    guard let parameters = parameters else {\n        return try urlRequest.asURLRequest()\n    }\n\n    let queryParameters = (parameters[\"query\"] as? Parameters)\n    let queryRequest = try URLEncoding(destination: .queryString).encode(urlRequest, with: queryParameters)\n\n    if let body = parameters[\"body\"] {\n        let bodyParameters = (body as! Parameters)\n        var bodyRequest = try JSONEncoding().encode(urlRequest, with: bodyParameters)\n\n        bodyRequest.url = queryRequest.url\n        return bodyRequest\n    } else {\n        return queryRequest\n    }\n}\n\n}\n```. During the next couple of days I'll have a look into this!. @sunshinejr \nThere's an issue when you want to provide an array of parameters in a url like this:\n/user/17?access_token=8312961fdgdgfmwe3r4f&fields=account_id,photo\nIt actually gives you:\n/user/17?access_token=8312961fdgdgfmwe3r4f&fields%5B%5D=account_id&fields%5B%5D=photo\nHere is the swift code for loading the parameters into the url query:\nswift\nparams[ParamKeys.query] = [\"fields\": [\"account_id\", \"photo\"], \"access_token\":getAccessToken()]. @BasThomas \nWhen implementing this url param\n[\"fields\": \"[\\\"account_id\\\", \\\"photo\\\"]\", \"access_token\":getAccessToken()]\nIt gives me this:\n/user/17?access_token=2db2sdfnkjnefw334819fa&fields=%5B%22account_id%22%2C%20%22photo%22%5D\nRather than:\n/user/17?access_token=2db2sdfnkjnefw334819fa&fields=account_id,photo\n. @pedrovereza \nIs it possible to tell URLEncoding to stop encoding a comma?\nI've got the url to this at the moment:\n```\n/user/7?access_token=60323354sgnsldjnfs85a&fields=account_id%2Cphoto\n````\nAnd I need\n```\n/user/7?access_token=60323354sgnsldjnfs85a&fields=account_id,photo\n````. @AkhilDad \nIn the end I wrote a custom composite encoding. This allows for , to not be encoded. Within Moya, you will then need to choose this custom encoding: \nswift\n/// parameterEncoding: ParameterEncoding\n/// - OAuth: URLEncoding.default\n/// - Default: CompositeEncoding\npublic var parameterEncoding: ParameterEncoding {\n    switch self {\n        case .OAuth:\n            return URLEncoding.default\n        default:\n            return CompositeEncoding()\n    }\n}\n```swift\npublic struct CompositeEncoding: ParameterEncoding {\npublic func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n    guard let parameters = parameters else {\n        return try urlRequest.asURLRequest()\n    }\n\n    let queryParameters = (parameters[ParamKeys.query] as? Parameters)\n\n    var queryRequest = try URLEncoding(destination: .queryString).encode(urlRequest, with: queryParameters)\n\n    if let body = parameters[ParamKeys.httpBody] {\n        let bodyParameters = (body as? Parameters)\n        var bodyRequest = try URLEncoding().encode(urlRequest, with: bodyParameters)\n        //var bodyRequest = try JSONEncoding().encode(urlRequest, with: bodyParameters)\n        bodyRequest.setValue(\"application/x-www-form-urlencoded\", forHTTPHeaderField: \"Content-Type\")\n        bodyRequest.url = queryRequest.url\n\n        return bodyRequest\n    } else {\n        return queryRequest\n    }\n}\n\n}\n// MARK: URLEncoding\n/// Creates a url-encoded query string to be set as or appended to any existing URL query string or set as the HTTP\n/// body of the URL request. Whether the query string is set or appended to any existing URL query string or set as\n/// the HTTP body depends on the destination of the encoding.\n///\n/// The Content-Type HTTP header field of an encoded request with HTTP body is set to\n/// application/x-www-form-urlencoded; charset=utf-8. Since there is no published specification for how to encode\n/// collection types, the convention of appending [] to the key for array values (foo[]=1&foo[]=2), and appending\n/// the key surrounded by square brackets for nested dictionary values (foo[bar]=baz).\npublic struct URLEncoding: ParameterEncoding {\n// MARK: Helper Types\n/// Defines whether the url-encoded query string is applied to the existing query string or HTTP body of the\n/// resulting URL request.\n///\n/// - methodDependent: Applies encoded query string result to existing query string for `GET`, `HEAD` and `DELETE`\n///                    requests and sets as the HTTP body for requests with any other HTTP method.\n/// - queryString:     Sets or appends encoded query string result to existing query string.\n/// - httpBody:        Sets encoded query string result as the HTTP body of the URL request.\npublic enum Destination {\n    case methodDependent, queryString, httpBody\n}\n\n// MARK: Properties\n/// Returns a default `URLEncoding` instance.\npublic static var `default`: URLEncoding { return URLEncoding() }\n\n/// Returns a `URLEncoding` instance with a `.methodDependent` destination.\npublic static var methodDependent: URLEncoding { return URLEncoding() }\n\n/// Returns a `URLEncoding` instance with a `.queryString` destination.\npublic static var queryString: URLEncoding { return URLEncoding(destination: .queryString) }\n\n/// Returns a `URLEncoding` instance with an `.httpBody` destination.\npublic static var httpBody: URLEncoding { return URLEncoding(destination: .httpBody) }\n\n/// The destination defining where the encoded query string is to be applied to the URL request.\npublic let destination: Destination\n\n// MARK: Initialization\n/// Creates a `URLEncoding` instance using the specified destination.\n///\n/// - parameter destination: The destination defining where the encoded query string is to be applied.\n///\n/// - returns: The new `URLEncoding` instance.\npublic init(destination: Destination = .methodDependent) {\n    self.destination = destination\n}\n\n// MARK: Encoding\n/// Creates a URL request by encoding parameters and applying them onto an existing request.\n///\n/// - parameter urlRequest: The request to have parameters applied.\n/// - parameter parameters: The parameters to apply.\n///\n/// - throws: An `Error` if the encoding process encounters an error.\n///\n/// - returns: The encoded request.\npublic func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n    var urlRequest = try urlRequest.asURLRequest()\n\n    guard let parameters = parameters else { return urlRequest }\n\n    if let method = HTTPMethod(rawValue: urlRequest.httpMethod ?? \"GET\"), encodesParametersInURL(with: method) {\n        guard let url = urlRequest.url else {\n            throw AFError.parameterEncodingFailed(reason: .missingURL)\n        }\n\n        if var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false), !parameters.isEmpty {\n            let percentEncodedQuery = (urlComponents.percentEncodedQuery.map { $0 + \"&\" } ?? \"\") + query(parameters)\n            urlComponents.percentEncodedQuery = percentEncodedQuery\n            urlRequest.url = urlComponents.url\n        }\n    } else {\n        if urlRequest.value(forHTTPHeaderField: \"Content-Type\") == nil {\n            urlRequest.setValue(\"application/x-www-form-urlencoded; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n        }\n\n        urlRequest.httpBody = query(parameters).data(using: .utf8, allowLossyConversion: false)\n    }\n\n    return urlRequest\n}\n\n/// Creates percent-escaped, URL encoded query string components from the given key-value pair using recursion.\n///\n/// - parameter key:   The key of the query component.\n/// - parameter value: The value of the query component.\n///\n/// - returns: The percent-escaped, URL encoded query string components.\npublic func queryComponents(fromKey key: String, value: Any) -> [(String, String)] {\n    var components: [(String, String)] = []\n\n    if let dictionary = value as? [String: Any] {\n        for (nestedKey, value) in dictionary {\n            components += queryComponents(fromKey: \"\\(key)[\\(nestedKey)]\", value: value)\n        }\n    } else if let array = value as? [Any] {\n        for value in array {\n            components += queryComponents(fromKey: \"\\(key)[]\", value: value)\n        }\n    } else if let value = value as? NSNumber {\n        if value.isBool {\n            components.append((escape(key), escape((value.boolValue ? \"1\" : \"0\"))))\n        } else {\n            components.append((escape(key), escape(\"\\(value)\")))\n        }\n    } else if let bool = value as? Bool {\n        components.append((escape(key), escape((bool ? \"1\" : \"0\"))))\n    } else {\n        components.append((escape(key), escape(\"\\(value)\")))\n    }\n\n    return components\n}\n\n/// Returns a percent-escaped string following RFC 3986 for a query string key or value.\n///\n/// RFC 3986 states that the following characters are \"reserved\" characters.\n///\n/// - General Delimiters: \":\", \"#\", \"[\", \"]\", \"@\", \"?\", \"/\"\n/// - Sub-Delimiters: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n///\n/// In RFC 3986 - Section 3.4, it states that the \"?\" and \"/\" characters should not be escaped to allow\n/// query strings to include a URL. Therefore, all \"reserved\" characters with the exception of \"?\" and \"/\"\n/// should be percent-escaped in the query string.\n///\n/// - parameter string: The string to be percent-escaped.\n///\n/// - returns: The percent-escaped string.\npublic func escape(_ string: String) -> String {\n    let generalDelimitersToEncode = \":#[]@\" // does not include \"?\" or \"/\" due to RFC 3986 - Section 3.4\n    let subDelimitersToEncode = \"!$&'()*+;=\"\n\n    var allowedCharacterSet = CharacterSet.urlQueryAllowed\n    allowedCharacterSet.remove(charactersIn: \"\\(generalDelimitersToEncode)\\(subDelimitersToEncode)\")\n\n    var escaped = \"\"\n\n    //==========================================================================================================\n    //\n    //  Batching is required for escaping due to an internal bug in iOS 8.1 and 8.2. Encoding more than a few\n    //  hundred Chinese characters causes various malloc error crashes. To avoid this issue until iOS 8 is no\n    //  longer supported, batching MUST be used for encoding. This introduces roughly a 20% overhead. For more\n    //  info, please refer to:\n    //\n    //      - https://github.com/Alamofire/Alamofire/issues/206\n    //\n    //==========================================================================================================\n    if #available(iOS 8.3, *) {\n        escaped = string.addingPercentEncoding(withAllowedCharacters: allowedCharacterSet) ?? string\n    } else {\n        let batchSize = 50\n        var index = string.startIndex\n\n        while index != string.endIndex {\n            let startIndex = index\n            let endIndex = string.index(index, offsetBy: batchSize, limitedBy: string.endIndex) ?? string.endIndex\n            let range = startIndex..<endIndex\n\n            let substring = string.substring(with: range)\n\n            escaped += substring.addingPercentEncoding(withAllowedCharacters: allowedCharacterSet) ?? substring\n\n            index = endIndex\n        }\n    }\n\n    return escaped\n}\n\nprivate func query(_ parameters: [String: Any]) -> String {\n    var components: [(String, String)] = []\n\n    for key in parameters.keys.sorted(by: <) {\n        let value = parameters[key]!\n        components += queryComponents(fromKey: key, value: value)\n    }\n    #if swift(>=4.0)\n        return components.map { \"\\($0.0)=\\($0.1)\" }.joined(separator: \"&\")\n    #else\n        return components.map { \"\\($0)=\\($1)\" }.joined(separator: \"&\")\n    #endif\n}\n\nprivate func encodesParametersInURL(with method: HTTPMethod) -> Bool {\n    switch destination {\n    case .queryString:\n        return true\n    case .httpBody:\n        return false\n    default:\n        break\n    }\n\n    switch method {\n    case .get, .head, .delete:\n        return true\n    default:\n        return false\n    }\n}\n\n}\nextension NSNumber {\n    fileprivate var isBool: Bool { return CFBooleanGetTypeID() == CFGetTypeID(self) }\n}\n```. @AkhilDad This is to send it as a path, it's just that in Alamofire, they call it parameter encoding. If you give me a sample of the path which you would like to send data too, I could create it.. ",
    "AkhilDad": "@pete183 Have you got to solve the issue?. @pete183 I don't want to add params, I want to send it as path, as this is the next url coming in my pagination which I can append after my base path. @pete183 So the problem was in headers I was getting next and previous urls sub path which I should append after base path\nex http://www.basepath.com/apis/v1  is base path\nand next and previous path comes like questions/?page=2&topic=xyz\nNow I need to append this after base url so I was trying to append this path /v3/questions/?page=2&topic=xyz but due to encoding I ended up with unwanted encoded characters for = and others\nI have finally solved it using\n```swift\npublic var baseURL: URL {\n        switch self {\n        case .whenPath(let nextUrl):\n            return URL(string: self.appSettingsService.networkConfig.baseUrl+nextUrl)!\n         default:\n            return URL(string: self.appSettingsService.networkConfig.baseUrl)!\n        }\n    }\n```. ",
    "HimmaHorde": "I was given a strange url  \"https://www.XXX.net/buildAction.do?mbGetIndexJson&city=370200\"\n\"/buildAction.do?mbGetIndexJson\" -> path . The path contain '?'  \n. @SD10 I know how to avoid this problem.\nIf  don't change the method\uff0cI must put \"https://www.XXX.net/buildAction.do?mbGetIndexJson\" as baseUrl. There is no 'path', there is no sense to use moya for network.\nSo I put forward this problem. @SD10 @BasThomas  a sample  Demo demo. @SD10  Good idea\uff0cthanks. ",
    "LeonardoCardoso": "That's weird. So this is my scenario: I have both Xcode and Xcode-beta on my Mac. After updating Xcode to 8.3.3, it failed to work, but after a pod update it worked. Sorry for this false positive and thanks for the fast response. I'm closing the issue.. ",
    "Huang-Libo": "@BasThomas \n@pedrofjfmartins \nYES, you are right, stabilization is one of the most important things in our work.\nI just said reduce dependency problem, forgive me, the statement is not exact, it's my fault, what I want to say is that separate repo can make dependency simple. For example, separate repo can reduce  Carthage's built time, and each submodule would have their specific demo, maybe this is more convenient for user.\nYou can have a look at https://github.com/danielgindi/Charts/issues/1756 .\n@petester42 How do you think about this ?\n. ",
    "minuscorp": "@SD10 I completely agree with your proposal of adding a separate protocol that we can extend from our TargetType to provide the sampleData and other testing behavior. In production (mainly with heavy data exchange applications), provide those, for example, json files into the application and adding MB of useless code is a heavy drawback... For now I have to provide a Data() default to sampleData to avoid this, but I want to test it as well.... So... If I understand correctly from that issue, the problem was that the provider was not getting deallocated in 8.X but now in 10.X it is. But I think that in my case is actually impossible that the provider is getting deallocated, as you can see, activity in my example above, is part of a singleton that instantiates the corresponding service at the first moment it is called. How can it be released and how's this the expected behavior, if this is the case, we cannot rely on Protocol Extensions that instantiate the services under-demand. I can understand that the Provider gets deallocated after a request is finished and no more references are linked to it, but during a request, that the resource itself gets deallocated... I don't think it is a proper management... there're no risks in retain cycles because requests from Moya don't perform side-effects as they're defined.. I will test making the computed property a computed closure that generates the provider, but I don't know if this is the desired behavior... Now it would be necessary to call it as follows:\nswift\nSessionManager.shared.service.activity().activity(withId: 1449319201383, source: .internet)\nwhich in my opinion is an anti-Swift pattern, cannot understand how the Provider is being released during a network call.... But with that approach, protocol extensions are no longer usable, which comes handy when having 10 different targets in the application.... I understand the approach, not so pretty to use that hacky way, but I suppose I have not choice. Now is late night in Europe so I'll try this tomorrow.\nAbout the behavior, I think that I do not agree on your use case... Normally the user is responsible of disposing any resources that might be running, this is an standard approach that is defined by the promises. You can either reject or resolve it. ReactiveX adds another tool for controlling all the resources by the disposable management, in that case, logging out as you pointed, will be enough to dispose any ongoing network request.\nWhat do you think?. I opened #1558 for the discussion.\nAbout the issue itself, I wasn't able to change my Provider yet, so if you want, we can keep this open until I get it fixed by my side and can confirm that is actually the root of the issue. \ud83d\ude04 . I confirm that this is due the behavior being implemented in later versions of Moya. I close this but I'd like to continue the discussion in the other issue, about the behavior itself.\nThank you all!!. I've formalized a somehow, IMHO, super hacky solution that could be applied to any observable in the RxSwift environment. It is the retaining<T>(_ value: T) operator. Not sure if this is the issue where I should introduce this solution, but maybe this could be an option to consider, letting in the hands of the developer to retain a certain object during the lifetime of an Observable:\n```swift\nprivate class RetainToken : ObservableConvertibleType, Disposable {\n    private let _source: Observable\n    private var _retain: V!\ninit(source: Observable<E>, value: V) {\n    _source = source\n    _retain = value\n}\n\nfunc dispose() {\n    self._retain = nil\n}\n\nfunc asObservable() -> Observable<E> {\n    return _source\n}\n\ndeinit {\n    self._retain = nil\n}\n\n}\npublic extension ObservableType {\n    public func retaining(_ value: T) -> Observable {\n        return Observable.using({\n            return RetainToken(source: self.asObservable(), value: value)\n        }) { (t: RetainToken) -> Observable in\n            return t.asObservable()\n        }\n    }\n}\npublic extension PrimitiveSequence where TraitType == SingleTrait {\n    public func retaining(_ value: T) -> Single {\n        return Single.using({\n            return RetainToken(source: self.asObservable(), value: value)\n        }, primitiveSequenceFactory: { (t: RetainToken) -> Single in\n            return t.asObservable().asSingle()\n        })\n    }\n}\n``\nThe idea is mostly based on the [ActivityIndicator](https://github.com/ReactiveX/RxSwift/blob/master/RxExample/RxExample/Services/ActivityIndicator.swift) proposed in theRxSwift's repo. This operator makes sure that the object is referenced by a strong reference during the whole lifetime of theObservablein which this is applied.. I'd like to invite the Moya community to go through this and maybe find a solution that fits everyone's needs. Keep up the great work!. The only think I disagree is that how can be theObservablecontract broken when wrapping theMoyaProvider, thing that would be easily patched by strongly referencing self in [here](https://github.com/Moya/Moya/blob/7c599570c2a60079dfefcc27fc67cb303feb48e1/Sources/RxMoya/MoyaProvider%2BRx.swift#L31). Are there any supports on me opening a PR changing the referencing cycle to a strong reference on theReactiveandRxextensions of the library? \ud83d\ude04 . I've read the discussions, so I think that the issue is how Moya is interpreting the contracts established by Rx and ReactiveSwift, an Observable, a Signal, a SignalProducer a Promise or any other implementation of the Rx contract, where its lifetime should've always be able to be **observed**. I cannot have an Observable that, after subscribing, neither disposed, next, error nor complete events are received and thus, having a zombie Observable, not dead, not alive.\nI'm with the team that the behavior should be consistent between Rx and ReactiveSwift, so retaining the Provider is key to respect those contracts. \ud83d\ude80 . Yeah, that's why I introduced the.retainingoperator above. That retains any object chosen by the developer along the lifetime of the observable. Just expanding the reasoning to that the finishing the observable without any event is not the correct approach, but I understand the reasons of why this is happening, but I really think that this is something that should be fixed, as it is not a correct Rx nor ReactiveSwift behavior. Thank you for the feedback!! . Missclick! \ud83d\ude05. You either skip to retain the return value of the function (i.e.,let _ = provider.rx.....) or retain it in a local variable in the scope of the function, but it seems that you won't do anything with that constant, which is a Disposable btw (i.e., let disposable = provider.rx....).\nThat being said, theDisposableshould always be returned in aRxfunction to allow the developer to control the lifetime of theObservable`.. ",
    "Dobryninios": "Agree with Thomas! . ",
    "jzau": "@pedrovereza I think URLRequestConvertible should be marked as open instead of internal to custom parameterEncoding.\nOr if is there any other elegant way to custom parameterEncoding?. ",
    "BasantAshraf": "it works! Thanx a million for your fast response. ",
    "stevenkitter": "me too and .queryString is useless . ",
    "lforme": "cool. ",
    "shenxiewei": "@BasantAshraf Hi,I have a same question. Can you paste the code?. @BasantAshraf yes, I solved the problem!. ",
    "ranayahya": "Hi @BasThomas  Yes i am not using Moya.. ",
    "XavierDK": "Thank you @sunshinejr! It's exactly what I was searching about.. ",
    "skparticles": "Thanks @sunshinejr . I got swift 2.3 closure Tag 7.0.4\n```.swift\n//Old Code with NSURLRequest Swift 2.2\nlet requestClosure = { (endpoint: Endpoint, closure: (NSURLRequest -> ())) in\n        let urlRequest: NSMutableURLRequest = NSMutableURLRequest(URL: endpoint.urlRequest.URL!, cachePolicy: endpoint.urlRequest.cachePolicy, timeoutInterval: endpoint.urlRequest.timeoutInterval)\n    closure(urlRequest)\n}\n\n//New Code with RequestResultClosure Swift 2.3   Repository Tag 7.0.4\nlet requestClosure = { endpoint, closure in\n        let urlRequest: NSMutableURLRequest = NSMutableURLRequest(URL: endpoint.urlRequest.URL!, cachePolicy: endpoint.urlRequest.cachePolicy, timeoutInterval: endpoint.urlRequest.timeoutInterval)\n    closure(.Success(urlRequest)\n}\n\n```. ",
    "syegin": "Btw, It'is a similar issue with #1066\n@sunshinejr, it seems we can't add parameters directly to multipartformdata array just because it's a let constant. But we can generate a new multipart array adding endpoint's parameters with an array extension or a function. Maybe this:\n```swift\nprivate extension Array where Element == MultipartFormData {\nfunc appendParameters(_ parameters: [String:Any]?) -> [MultipartFormData] {\n    var formData = self\n    if let parameters = parameters {\n        parameters\n            .flatMap { key, value in multipartQueryComponents(key, value) }\n            .forEach { key, value in\n                if let data = value.data(using: .utf8, allowLossyConversion: false) {\n                    formData.append(MultipartFormData.init(provider: .data(data), name: key))\n                }\n        }\n    }\n    return formData\n}\n\n}\n```\nAnd our function call turns to this: \nswift\ncancellableToken.innerCancellable = self.sendUploadMultipart(target, request: preparedRequest, queue: queue, multipartBody: multipartBody.appendParameters(endpoint.parameters), progress: progress, completion: networkCompletion)\nAnd finally we need to delete the part that adding target.parameters in sendUploadMultipart function. I've also tested it and worked in my project. I can make these changes you wish, no problem. Thanks for this great library btw :). ",
    "ercancelik": "Thank you very much. It helps \ud83d\udc4d . ",
    "codwam": "Is this merge? I have the same problem.. @sunshinejr \nHope you add it soon\ud83c\udf7a. ```swift\nenum Router {\n    case test(account: String, image: UIImage?)\n}\nextension Router: TargetType {\n        case .test(let account, let _):\n            return [\"account\": account]\n}\nvar task: Task {\n    switch self {\n    case .test:\n        // Is this right?\n        if let multipartBody = self.multipartBody, multipartBody.count > 0 {\n            return .upload(UploadType.multipart(multipartBody))\n        }\n        return .request\n    default:\n        return .request\n    }\n}\nvar multipartBody: [MultipartFormData]? {\n    switch self {\n    case .test(_, let image):\n        guard let uploadImage = image else {\n            return nil\n        }\n        guard let cardFrontImageData = UIImageJPEGRepresentation(uploadImage, 0.5) else {\n            return nil\n        }\n        let imageData = MultipartFormData(provider: .data(cardFrontImageData), name: \"serviceImg\", fileName: \"photo.jpg\", mimeType:\"image/jpeg\")\n        return [imageData]\n    }\n}\n```\nIf the image is nil, the server response 'the current request is not a multipart request'?. I have an error with the 'Router test', the image is 'UIImage' optional.\nAnd the  method is 'post'.\nI use charles watch the request 'Content-type' is not 'multipartdata'(Actual it's 'formdata'?), so it's error. If it's no image, the request 'Content-Type' would be below\nRequest Headers: [\"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\"]\nAnd the server arise error.\nWhat I mean is in 'MoyaProvider+Internal.swift' line 89:\ncase .upload(.multipart(let multipartBody)):\n                    guard !multipartBody.isEmpty && target.method.supportsMultipart else {\n                        fatalError(\"\\(target) is not a multipart upload target.\")\n                    }\nIs this must be MultipartFormData's count > 0?. @sunshinejr\nI didn't think of ' Data() ', Thanks. ",
    "josefdolezal": "Yeah, you are right, it's not very transparent.. Any ideas how to demonstrate functionality? Maybe dummy PR based on this branch?. Is this issue back in the game with Moya v10?. Hey @pedrovereza, thank you for the feedback! I tried my best to match the dependencies version in package manifest changes. However, it looks like I missed the Result framework.\nI can change the version back to 3.0 (same as CocoaPods) now and then update all PMs in separate PR, what do you think? The 3.2 version is however required by ReactiveSwift.. Hey @pedrovereza, thank you for the feedback! I tried my best to match the dependencies version in package manifest changes. However, it looks like I missed the Result framework.\nI can change the version back to 3.0 (same as CocoaPods) now and then update all PMs in separate PR, what do you think? The 3.2 version is however required by ReactiveSwift.. Hey @sunshinejr! Sorry for the delay, I was out for a few last days. I updated the package manifest to use same dependencies versions as CocoaPods and updated the Readme for SPM.\nI also tried to find more informations about swiftLanguageVersions, however from the docs, I am not sure how exactly it works. If we require swift 4 toolchain, can we explicitly use swift 3 to build the library?. Hey @sunshinejr! Sorry for the delay, I was out for a few last days. I updated the package manifest to use same dependencies versions as CocoaPods and updated the Readme for SPM.\nI also tried to find more informations about swiftLanguageVersions, however from the docs, I am not sure how exactly it works. If we require swift 4 toolchain, can we explicitly use swift 3 to build the library?. Ok seems reasonable! I have updated the manifest with support for Swift 3. Thank you all for your help with this one! \ud83c\udf89. Ok seems reasonable! I have updated the manifest with support for Swift 3. Thank you all for your help with this one! \ud83c\udf89. I guess we can change it to .exact, however it would kill the possibility of package updating using swift package update, right? The exact versions are defined in Package.resolved, which is equivalent to Carthage.resolved.. ",
    "T1ASH": "Thank you for your work on this, however I'm having issues getting it to work. I looked through this thread hoping to figure it out, but unfortunately I've come up empty. Is there an example or documentation on how to get .requestData to work in my Task? . ",
    "fenixsolorzano": "\nI have just integrated my fork into the project where I'm using the Encodable type.\nHere's how my target now looks:\n```swift\nimport Foundation\nimport Moya\nenum MyTarget {\n    case createUser(CreateUserRequest)\n    case signIn(SignInRequest)\n}\n// MARK: - TargetType Protocol Implementation\nextension MyTarget: TargetType {\n    var baseURL: URL {\n        return URL(string: \"https://example.com/api/v1/\")!\n    }\nvar path: String {\n    switch self {\n    case .createUser:\n        return \"user\"\n\n    case .signIn:\n        return \"session\"\n    }\n}\n\nvar method: Moya.Method {\n    return .post\n}\n\nvar sampleData: Data {\n    return Data()\n}\n\nvar task: Task {\n    switch self {\n    case .createUser(let createUserRequest):\n        let requestData = encode(createUserRequest)\n        return .request(.data(requestData))\n\n    case .signIn(let signInRequest):\n        let requestData = encode(signInRequest)\n        return .request(.data(requestData))\n    }\n}\n\n}\n// MARK: - Helper Methods\nextension Tm5Target {\n    private func encode(_ encodable: T) -> Data {\n        do {\n            return try JSONEncoder().encode(encodable)\n        } catch {\n            fatalError(\"Could not encode '(type(of: encodable))' using JSONEncoder. Error: (error)\")\n        }\n    }\n}\n```\nIt builds fine and I think it should work (haven't tested yet). But this is how the usage might look now. Just to have something to review.\n\nHow can I use the encode extension? Was it added to the library or should I simple add it myself?\n. > I have just integrated my fork into the project where I'm using the Encodable type.\n\nHere's how my target now looks:\n```swift\nimport Foundation\nimport Moya\nenum MyTarget {\n    case createUser(CreateUserRequest)\n    case signIn(SignInRequest)\n}\n// MARK: - TargetType Protocol Implementation\nextension MyTarget: TargetType {\n    var baseURL: URL {\n        return URL(string: \"https://example.com/api/v1/\")!\n    }\nvar path: String {\n    switch self {\n    case .createUser:\n        return \"user\"\n\n    case .signIn:\n        return \"session\"\n    }\n}\n\nvar method: Moya.Method {\n    return .post\n}\n\nvar sampleData: Data {\n    return Data()\n}\n\nvar task: Task {\n    switch self {\n    case .createUser(let createUserRequest):\n        let requestData = encode(createUserRequest)\n        return .request(.data(requestData))\n\n    case .signIn(let signInRequest):\n        let requestData = encode(signInRequest)\n        return .request(.data(requestData))\n    }\n}\n\n}\n// MARK: - Helper Methods\nextension Tm5Target {\n    private func encode(_ encodable: T) -> Data {\n        do {\n            return try JSONEncoder().encode(encodable)\n        } catch {\n            fatalError(\"Could not encode '(type(of: encodable))' using JSONEncoder. Error: (error)\")\n        }\n    }\n}\n```\nIt builds fine and I think it should work (haven't tested yet). But this is how the usage might look now. Just to have something to review.\n\nHow can I use the encode extension? Was it added to the library or should I simple add it myself?\n. Do you have an example of how to use it? @pietrocaselani . Do you have an example of how to use it? @pietrocaselani . I see, thanks @pietrocaselani. I see, thanks @pietrocaselani. ",
    "lovesomeone": "sorry for wrong description for the question  \nin the documentation  i saw the code\nextension MultiMoyaProvider {\n    func requestDecoded\n    ..........\n}\nlet provider = MultiMoyaProvider()\nprovider.requestDecoded(UserApi.get(id: 1)) { result in\n.......\n}\ni want to know  MultiMoyaProvider implementation in this case .\nthank you for reply\n. that's what i want  . thank you very much ! Thank you for your contribution\uff01. thank you  for  replay\u3002    oh  that\u2019s disappointment \u3002can i kown  when moya support swift4   \u3002 do you have plan\uff0c. ok  I will try to use swift3.2 .  thank you for you help!. @sunshinejr. I think it's ok to have it in my repository first \u3002 if it help then we can make merge\n@all    I really love this project and thank you very much for all of  your contribution\u3002 Hope Moya becomes  better \u3002\nBy the way \uff0c when I learn this project  \uff0cI  think the documents are not well organized\uff0cespecially   docs /README.md . I'm glad to be invited\u3002Yes  ,I like this project . I\u2018m very happy that I can be one of contributors\uff01. oh  I will update the doc  . Since we have a National Day\uff08from 10.1- 10.8 \uff09\uff0cit 's a long holiday \u3002I didn't focus on the project.    @BasThomas @stephencelis @steam @shanev  hi    Do I need to  click on \"merge pull request\" button\uff08show below\uff09 \nor wait for someone else to check the branch then make merge ?\n\n. Hey  @AndrewSB  .   Because I  never used rebase on github\uff0ccan you tell me how to do it.  Or can someone help to delete c9981ee and rebase. Thank you!. OK. I get it  .  Thank you \uff01. hi \nthis is an example .hope this will help you\n```\nclass TestObject:NSObject {\n    var id = 0\n    var name = \"\"\nfunc toDictionary() -> [String:Any] {\n    return [\"id\":id,\"name\":name]\n}\n\n}\nfunc test()  {\n        var objArr = TestObject\n        for i in 0...3 {\n            var ob = TestObject()\n            ob.id = i\n            ob.name = \"test(i)\"\n            objArr.append(ob)\n        }\n        var resulst = objArr.map { $0.toDictionary() }\n        let data = try! JSONSerialization.data(withJSONObject: resulst, options: [])\n        // apply this data to request.httpBody\n        // request.httpBody = data\n        let string = String(data: data, encoding: String.Encoding.utf8)\n        print(string)\n}\n\n```\n. @ninasaveljeva    Hi   I think you can wrap or extension  SCLAlertView . \nFirst  Just add a static var  ,such as static var isReadyShowAlert = false   .\nSecond  When you call  SCLAlertView().showError(\"Error\", subTitle: message)    you should replace it with   if !SCLAlertView.isReadyShowAlert {\n       SCLAlertView().showError(\"Error\", subTitle: message)\n       SCLAlertView.isReadyShowAlert = true\n    }   . \nThe last   you should set \"isReadyShowAlert\" to false  when you cancel or close your Alert View. So you should also  extension SCLAlertView to achieve it.. because description is the same\u3002so Translation is the same. Ok  you're right . It may be ambiguous.   I'll update it \u3002Keep them  separate\u3002. ",
    "MrAsterisco": "Ok, @sunshinejr , I see your point\nI've made some changes to allow an arbitrary and optional function to be passed to the constructor that can perform any kind of operation on the httpBody.\nIf nothing is passed, the behaviour is to fallback to your implementation.\nThe optional function takes the original Data object to let the client handle different types of encoding or anything that's not a string.. Ok, done!. I'm sorry: what's your indentation style? This is what I see on Xcode: I don't see nothing wrong with indentation.\n\n. Hi @sunshinejr ,\nFirst of all, thanks for your help.\nI've also asked this question on StackOverflow and they came out with a solution very similar to yours (even if, I think that yours is more elegant).\nThe thing that I don't like of this solution is that I have to declare an Observable (maybe a Variable) in each ViewController that I manually change and which triggers the refresh on each ViewModel. \nIdeally, I would expect to have some sort of wrapper that joins the RxMoyaProvider with the resulting Observable and exposes a method (something like redo() or request() once again) that does exactly the same thing, but behind the scenes.\nWhat do you think?. Ok, I see the challenge here. Well, let's close this for now. When I'll have some spare time I'll try to push a new branch with some ideas; then we'll be able to discuss if they works and should be merged or not.. Uhm, all right. I'm still thinking of it as a bug, just on the RxSwift's side. Anyway, I'm going to update the documentation asap. Thanks for the explanation!. Ok, I've tried to adapt the sentence to the other two files and removed it from the previous one. Actually, in Providers.md there was already a phrase telling about the same thing, but I've improved it to make it more explicit.\nLet me know what you think!. Yes, you're right. I think your fix looks good.. Ok, so just to confirm: we need to move the very same sentence to both Providers.md and Basic.md, right?. ",
    "ledikari": "@sunshinejr tried your code, but errorResponse.response is nil\nswift\ndo {\n     let errorResponse = error as? Moya.MoyaError\n     if let body = try errorResponse?.response?.mapJSON(){\n          print(body)\n     }\n} catch {\n     print(error)\n}. @jeryRazakarison thats an interesting option. I will try to do it.\n@sunshinejr any idea on when Moya 9.0 will be released?\nedit:\n@jeryRazakarison i tried 9 but i see changes. Like what happened to .filterSuccessfulStatusCodes() .mapObject(type: Balance.self) .mapJSON() and .request() ? they all dissapeared. ",
    "dimohamdy": "any update. ",
    "zichenJack": "sorry , I was write return nil in parameters , so Xcode show me code never executed. I saw doc say the param write in task , . ",
    "abeintopalo": "@sunshinejr hi, just created a pull request: https://github.com/Moya/Moya/pull/1169\nPlease, verify it. . ",
    "pandaApe": "Saved my day\uff01 Thx. ",
    "Marcopohlo": "First of all, thank you for your answer, I really appreciate it. \nYes, the project is using ReactiveCocoa everywhere, but I'm quite new to that, but I felt making classic closures out of SignalProducers was not the best idea. So thank you for clarification on that. \nWill try to implement composition and will post PR when ready and good.\nAlso I may bother you with a few questions here and there, if that's okay.\nThank you for now :) \nEdit: Although I've successfully managed to get that piece of code working, I was actually creating new SignalProducer and returning that one in next step. So I've figured that this approach wasn't the best one. . ",
    "yuliagaranok": "Hi there,\nMy teammates found one more solution to the problem of refreshing session token of Auth0 with RxSwift and Moya\nWe wrote it using pure RxSwift approach and we return a classic error in case of fail. Hope it will help!. @SD10 @pietrocaselani my teammate found an easy way to refresh session token of Auth0 with RxSwift and Moya basing on all opened and closed issues about token refresh. \nHope it may also help someone to cope with it. . ",
    "dindonkey": "Hi guys,\nI'm trying to test a more complex situation with Drivers :P \nIt's based on Drivers example here https://github.com/ReactiveX/RxSwift/blob/master/RxExample/RxExample-iOSTests/RxExample_iOSTests.swift \nHere's my view model:\n```swift\nclass JokesViewModel {\nlet jokes: Driver<[Joke]>\n\ninit(\n    refreshDriver: Driver<Void>,\n    jokesProvider: RxMoyaProvider<JokesService>\n    ) {\n\n    jokes = refreshDriver\n        .flatMapLatest { _ in\n            return jokesProvider\n                .request(.random(numJokes: 5))\n                .mapArray(type: Joke.self, keyPath: \"value\")\n                .asDriver(onErrorJustReturn:[])\n                .debug(\"DEBUG!! random call\")\n    }\n    .debug(\"DEBUG!! jokes\")\n}\n\n}\n```\nAnd here's my test:\n```swift\nclass ChuckNorrisJokesMVVMTests: XCTestCase {\noverride func setUp() {\n    super.setUp()\n}\n\nfunc testJokes() {\n    let scheduler = TestScheduler(initialClock: 0)\n\n    driveOnScheduler(scheduler) {\n\n        let refreshDriver = scheduler\n            .createHotObservable([next(0, ())])\n            .asDriver(onErrorJustReturn: ())\n\n        let provider = RxMoyaProvider<JokesService>(stubClosure: MoyaProvider.immediatelyStub)\n        let viewModel = JokesViewModel(refreshDriver: refreshDriver, jokesProvider:provider)\n\n        let recordedJokes = scheduler.record(source: viewModel.jokes)\n\n        scheduler.start()\n\n        XCTAssertEqual(2, recordedJokes.events.count)\n    }\n\n}\n\n}\nextension TestScheduler {\n    func record(source: O) -> TestableObserver {\n        let observer = self.createObserver(O.E.self)\n        let disposable = source.asObservable().bind(to: observer)\n        self.scheduleAt(100000) {\n            disposable.dispose()\n        }\n        return observer\n    }\n}\n```\nWhen I run the test, I can see in debug outputs that the driver is subscribed but no items are coming from the moya service:\n\n2017-07-24 17:28:38.784: DEBUG!! jokes -> subscribed\n2017-07-24 17:28:38.791: DEBUG!! random call -> subscribed\n2017-07-24 17:28:38.797: DEBUG!! jokes -> isDisposed\n2017-07-24 17:28:38.797: DEBUG!! random call -> isDisposed\n\nIf I run the application, everything is working and I get data from the request, so it seems something related to the test thread or test scheduler.... Help! :). Hi guys,\nI'm trying to test a more complex situation with Drivers :P \nIt's based on Drivers example here https://github.com/ReactiveX/RxSwift/blob/master/RxExample/RxExample-iOSTests/RxExample_iOSTests.swift \nHere's my view model:\n```swift\nclass JokesViewModel {\nlet jokes: Driver<[Joke]>\n\ninit(\n    refreshDriver: Driver<Void>,\n    jokesProvider: RxMoyaProvider<JokesService>\n    ) {\n\n    jokes = refreshDriver\n        .flatMapLatest { _ in\n            return jokesProvider\n                .request(.random(numJokes: 5))\n                .mapArray(type: Joke.self, keyPath: \"value\")\n                .asDriver(onErrorJustReturn:[])\n                .debug(\"DEBUG!! random call\")\n    }\n    .debug(\"DEBUG!! jokes\")\n}\n\n}\n```\nAnd here's my test:\n```swift\nclass ChuckNorrisJokesMVVMTests: XCTestCase {\noverride func setUp() {\n    super.setUp()\n}\n\nfunc testJokes() {\n    let scheduler = TestScheduler(initialClock: 0)\n\n    driveOnScheduler(scheduler) {\n\n        let refreshDriver = scheduler\n            .createHotObservable([next(0, ())])\n            .asDriver(onErrorJustReturn: ())\n\n        let provider = RxMoyaProvider<JokesService>(stubClosure: MoyaProvider.immediatelyStub)\n        let viewModel = JokesViewModel(refreshDriver: refreshDriver, jokesProvider:provider)\n\n        let recordedJokes = scheduler.record(source: viewModel.jokes)\n\n        scheduler.start()\n\n        XCTAssertEqual(2, recordedJokes.events.count)\n    }\n\n}\n\n}\nextension TestScheduler {\n    func record(source: O) -> TestableObserver {\n        let observer = self.createObserver(O.E.self)\n        let disposable = source.asObservable().bind(to: observer)\n        self.scheduleAt(100000) {\n            disposable.dispose()\n        }\n        return observer\n    }\n}\n```\nWhen I run the test, I can see in debug outputs that the driver is subscribed but no items are coming from the moya service:\n\n2017-07-24 17:28:38.784: DEBUG!! jokes -> subscribed\n2017-07-24 17:28:38.791: DEBUG!! random call -> subscribed\n2017-07-24 17:28:38.797: DEBUG!! jokes -> isDisposed\n2017-07-24 17:28:38.797: DEBUG!! random call -> isDisposed\n\nIf I run the application, everything is working and I get data from the request, so it seems something related to the test thread or test scheduler.... Help! :). ",
    "larryonoff": "@sunshinejr I wanted to do PR. I'm sure that it should be very easy PR. But I didn't find quickly how to configure the project dependencies for contributing. Could anyone please assist? Is it just one Carthage command?. @SD10 thank you!. created PR #1185. They only thing that worries me that some people won't be able to migrate to ReactiveSwift 2.0 quickly since there're some breaking changes, so as the new Moya.. @BasThomas done. @sunshinejr should I rebase my branch to 9.0.0-alpha.1 ?. @sunshinejr rebased.. @ashfurrow thank you!. @BasThomas in some way it's. ReactiveSwift 2.0 has some breaking changes. This will require some changes for Moya/ReactiveSwift users.. I have some issues on one of my projects. That fixed by updating to ReactiveSwift 2.0 and ReactiveCocoa 6.0 (that requires  ReactiveSwift 2.0).. We can do Moya/ReactiveSwift2, but it looks weird.. What about updating and in case of request for ReactiveSwift <2 we'll make some kind of Moya/ReactiveSwift_1.. It maybe easier for me to use Moya from master for now :). @SD10 this's what I'm thinking about now. Do you know if it has many issues?. Thank you all. I'll close the issue and will use 9.0 beta.. @sunshinejr  sure!. @SD10 hah! thanks!\nI see that sampleData usually Data().... @SD10 hah! thanks!\nI see that sampleData usually Data().... Will try to do PR tomorrow. done in #1470 . Sorry! Someone was quicker than I.. @sd10 sure! Better in this PR or separate ?. Some linter errors fixed in a separate PR #1473. Closed separate PR with linter fixes and made the change in the current only. @sunshinejr Just rebased PR to development branch.. @sunshinejr done. hope that according guidelines.\nI'm thinking about making ReactiveMoya as something separate from main Moya project. So that we're able updating it independently.. What about disabling some linter rules specifically for spec files?. Microya is a great name, but I think that more recognizable name is MicroMoya or MoyaMicro.. @sunshinejr ReactiveSwift 5.0 depends on Result 4.1. \nReactiveSwift 5.0 and Result 4.1 both add Swift 5.0 and Xcode 10.2.. @sunshinejr done. @sunshinejr \n\nI see that the project doesn't want to build tests due to Alamofire update... Interestingly enough it seems like they've made a breaking change without a major update \ud83e\udd14\n\nI'm not sure, but it was without update.. @sunshinejr I have fixed it in the current branch. Please review. done :). ",
    "wz1383691": "thank you. cash log display moya is cash. \u4ee3\u7801\u5c31\u662f\u6b63\u5e38\u7684\u8bf7\u6c42\uff0c\u6211\u76f4\u63a5\u8fd0\u884c\u5728\u624b\u673a\u4e0a\u5c31\u6ca1\u6709\u95ee\u9898\uff0c\u7136\u540e\u6253\u5305\u4e0a\u4f20appstore\uff0c\u7528testflight\u4e0b\u8f7d\u4e0b\u6765\u5c31\u4f1a\u5d29\u6e83\uff0c\u4e0b\u9762\u662f\u5d29\u6e83\u65e5\u5fd7\nswift\n*7  Moya\n_TFC4Moya12MoyaProvider13requestNormalfTx5queueGSqCSo13DispatchQueue_8progressGSqFVS_16ProgressResponseT__10completionFGO6Result6ResultCS_8ResponseOS_9MoyaError_T__PS_11Cancellable_ + 132\n8   Moya\n_TFC4Moya12MoyaProvider7requestfTx5queueGSqCSo13DispatchQueue_8progressGSqFVS_16ProgressResponseT__10completionFGO6Result6ResultCS_8ResponseOS_9MoyaError_T__PS_11Cancellable_ + 176\n9   Moya\n_TFC4Moya12MoyaProvider7requestfTx10completionFGO6Result6ResultCS_8ResponseOS_9MoyaError_T__PS_11Cancellable_ + 112*\nmoya\u5f53\u65f6\u7528pod\u5b89\u88c5\u7684\u65f6\u5019\u6ca1\u6709\u6307\u5b9a\u7248\u672c\uff0c. \u8bf7\u6c42\u65f6\u7684\u90e8\u5206\u4ee3\u7801\n```swift\nlet endpointClosure = { (target: ApiManager) -> Endpoint in\nswitch target{\ncase .noticelist,.noticeDetail:\n    let url = noticeUrl\n    return Endpoint(url: url, sampleResponseClosure: {.networkResponse(200, target.sampleData)},\n                    method: target.method,\n                    parameters: target.parameters)\n\ndefault :\n    let url = defauleUrl + target.path\n    return Endpoint(url: url, sampleResponseClosure: {.networkResponse(200, target.sampleData)},\n                    method: target.method,\n                    parameters: target.parameters\n        ).adding(newParameters:appendedParams)\n}\n\n}\nlet provider = RxMoyaProvider(endpointClosure: endpointClosure,manager:manager,plugins: [NetWorkLog(),NetWorkLoading()])\n. @sunshinejr thankyour for your Prompt\uff0cmoya version:swift\n - Moya/RxSwift (8.0.5):\n    - Moya/Core\n    - RxSwift (~> 3.0)\nswift version:3.0. NetworkLog:swift\nimport Foundation\nimport Result\nimport Moya\nimport Log\n/// Logs network activity (outgoing requests and incoming responses).\npublic final class NetWorkLog: PluginType {\n    fileprivate let loggerId = \"Moya_Logger\"\n    fileprivate let dateFormatString = \"dd/MM/yyyy HH:mm:ss\"\n    fileprivate let dateFormatter = DateFormatter()\n    fileprivate let separator = \", \"\n    fileprivate let terminator = \"\\n\"\n    fileprivate let cURLTerminator = \"\\\\n\"\n    fileprivate let responseDataFormatter: ((Data) -> (Data))?\n/// If true, also logs response body data.\npublic let isVerbose: Bool\npublic let cURL: Bool\n\nfileprivate let Log = SingletonLogger.sharedManager;\n\npublic init(verbose: Bool = false, cURL: Bool = false, responseDataFormatter: ((Data) -> (Data))? = nil) {\n    self.cURL = cURL\n    self.isVerbose = verbose\n    self.responseDataFormatter = responseDataFormatter\n}\n\nfunc reversedPrint(_ separator: String, terminator: String, items: Any...) {\n\n//        for item in items {\n////            Log.debug(item, separator: separator, terminator: terminator)\n//        }\n    }\npublic func willSend(_ request: RequestType, target: TargetType) {\n\n    if let request = request as? CustomDebugStringConvertible, cURL {\n        reversedPrint(separator, terminator: terminator, items: request.debugDescription)\n        return\n    }\n    outputItems(logNetworkRequest(request.request as URLRequest?))\n}\n\npublic func didReceive(_ result: Result<Moya.Response, MoyaError>, target: TargetType) {\n\n    if case .success(let response) = result {\n        outputItems(logNetworkResponse(response.response, data: response.data, target: target))\n    } else {\n        outputItems(logNetworkResponse(nil, data: nil, target: target))\n    }\n}\n\nfileprivate func outputItems(_ items: [String]) {\n    if isVerbose {\n        items.forEach { reversedPrint(separator, terminator: terminator, items: $0) }\n    } else {\n        reversedPrint(separator, terminator: terminator, items: items)\n    }\n}\n\n}\nprivate extension NetWorkLog {\nvar date: String {\n    dateFormatter.dateFormat = dateFormatString\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    return dateFormatter.string(from: Date())\n}\n\nfunc format(_ loggerId: String, date: String, identifier: String, message: String) -> String {\n    return \"\\(loggerId): [\\(date)] \\(identifier): \\(message)\"\n}\n\nfunc logNetworkRequest(_ request: URLRequest?) -> [String] {\n\n    var output = [String]()\n\n    output += [format(loggerId, date: date, identifier: \"Request\", message: request?.description ?? \"(invalid request)\")]\n\n    if let headers = request?.allHTTPHeaderFields {\n        output += [format(loggerId, date: date, identifier: \"Request Headers\", message: headers.description)]\n    }\n\n    if let bodyStream = request?.httpBodyStream {\n        output += [format(loggerId, date: date, identifier: \"Request Body Stream\", message: bodyStream.description)]\n    }\n\n    if let httpMethod = request?.httpMethod {\n        output += [format(loggerId, date: date, identifier: \"HTTP Request Method\", message: httpMethod)]\n    }\n\n    if let body = request?.httpBody, let stringOutput = String(data: body, encoding: .utf8), isVerbose {\n        output += [format(loggerId, date: date, identifier: \"Request Body\", message: stringOutput)]\n    }\n\n    return output\n}\n\nfunc logNetworkResponse(_ response: URLResponse?, data: Data?, target: TargetType) -> [String] {\n    guard let response = response else {\n\n//            NProgressHUD.dismiss()\n            NotificationCenter.default.post(name: NSNotification.Name.init(NONETWORK_NOTIFITY), object: nil)\n            return [format(loggerId, date: date, identifier: \"Response\", message: \"Received empty network response for (target).\")]\n        }\n    var output = [String]()\n\n    output += [format(loggerId, date: date, identifier: \"Response\", message: response.description)]\n\n    if let data = data, let stringData = String(data: responseDataFormatter?(data) ?? data, encoding: String.Encoding.utf8), isVerbose {\n        output += [stringData]\n    }\n\n    return output\n}\n\n}\n```\nNetWorkLoading\n```swift\nimport Foundation\nimport Moya\nimport Result\nimport SVProgressHUD\npublic final class NetWorkLoading: PluginType {\npublic func willSend(_ request: RequestType, target: TargetType){\n\n//         NProgressHUD.show()\n    }\n/// Called after a response has been received, but before the MoyaProvider has invoked its completion handler.\npublic func didReceive(_ result: Result<Moya.Response, MoyaError>, target: TargetType){\n\n//        NProgressHUD.dismiss()\n    }\n}\n```. @sunshinejr . ",
    "plam4u": "Hey @sunshinejr. This is what I did as well - Do a Google Search and see where is it coming from. I found the same 2 sources. The weird thing is that I don't use neither of them. \nI was debugging step by step and after jumping through this line of Alamofire the log message appeared. I didn't find the log message in the source code of Alamofire. \nAnother thing that I've tried is to use Alamofire directly to load the exact same endpoint request and I didn't see any log messages.\nIt's a mystery to me. For now, I stopped the integration of Moya in the project until I resolve that since it's worrying me and my manager is very strict with warnings and error log messages or warning log messages.\nThank you for looking into that :)\nMy guess is that since this is something new, it will pass sometime till somebody else asks or resolves the issue.. ",
    "alfian0": "Yes, I have try with Apiary data but not working as expeted, Error always call at . underlying not at statusCode, any reference for error type like hard error (that come from swift NSError / CFError type) and soft error that return Http status code. Oke no problem @SD10, thanks for the response. I just want to know why it call underlying but when I requested through by Alamofire error return Http error code \ud83d\ude38 . @AndrewSB thanks for solution, but when I set disposeBag to nil, I got error \n\nNil cannot be assigned to type 'DisposeBag'\n\nI change\ndisposeBag = nil\nto\ndisposeBag = DisposeBag()\nand now it working, thanks. @AndrewSB thanks for solution, but when I set disposeBag to nil, I got error \n\nNil cannot be assigned to type 'DisposeBag'\n\nI change\ndisposeBag = nil\nto\ndisposeBag = DisposeBag()\nand now it working, thanks. UPDATE\nwe can use .takeUntil(rx.methodInvoked(#selector(viewWillDisappear(_:)))) to handle disposable :) . UPDATE\nwe can use .takeUntil(rx.methodInvoked(#selector(viewWillDisappear(_:)))) to handle disposable :) . Oh I see, good ...thanks @AndrewSB . Ha ha, yes it's dumb question. I just forgot to use T, my existing code use ObjectMapper and I need change to Decodable. Its working now\n\nthis is my old implementation\n\nthanks @sunshinejr \n. ",
    "blwinters": "For reference, here is what I had to do to get the status code. Not sure if there is a more convenient way of doing this:\n```\nextension MoyaError {\n/// Returns the status code of the underlying AFError, if that is the type of the MoyaError\n  var unacceptableStatusCode: Int? {\n    if case let .underlying(uError, _) = self,\n      let afError = uError as? AFError,\n      case let .responseValidationFailed(reason) = afError,\n      case let .unacceptableStatusCode(statusCode) = reason {\n      return statusCode\n    } else {\n      return nil\n    }\n  }\n}\n```. ",
    "xavierXing": "@sunshinejr  @pedrovereza\nThank you very much for your help. I have read the open direct mouth and tried to customize the manager and let the manager be the parameter of Moya, but it is not useful. Is my func wrong? Thank you again for helping me!!\nCould you tell me the two person's instant messaging, for example, WeChat or something?\n. @sunshinejr  OK this is my code \n```Swift\nvar baseLink: String = \"http://api.news18a.com/\"\nenum MoyaNewsCar {\n  case hotSpot,video,live,business,evaluating,shopping,newCar,useCar,calture,travel,technology,market\n}\nextension MoyaNewsCar: TargetType {\nvar baseURL: URL {\n    return URL(string: baseLink)!\n}\nvar path: String {\n      return \"init.php\"\n  }\nvar method: Moya.Method {\n      return .get\n  }\nvar parameters: [String: Any]? {\n    switch self {\n    case .hotSpot:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"index_new\"\n      ]\n    case .video:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"vedio\",\n        \"a\": \"focus\"\n      ]\n    case .live:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"vedio\",\n        \"a\": \"new_live\"\n      ]\n    case .business: \n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"industry\"\n      ]\n    case .evaluating:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"evaluation\"\n      ]\n    case .shopping:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"guide\"\n      ]\n    case .newCar:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"newCar\"\n      ]\n    case .useCar:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"useCar\"\n      ]\n    case .calture:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"culture\"\n      ]\n    case .travel:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"travel\"\n      ]\n    case .technology:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"technology\"\n      ]\n    case .market:\n      return [\n        \"m\": \"ina_app\",\n        \"c\": \"index\",\n        \"a\": \"storylist\",\n        \"storyType\": \"market\"\n      ]\n    }\n}\nvar parameterEncoding: ParameterEncoding {\n    return URLEncoding.default\n  }\nvar sampleData: Data {\n    return \"{}\".data(using: String.Encoding.utf8)!\n  }\nvar task: Task {\n    return .request\n  }\n/// \u662f\u5426\u6267\u884cAlamofire\u9a8c\u8bc1\u3002\u9ed8\u8ba4\u4e3a\"false\"\n  var validate: Bool {\n    return true\n  }\n}\nclass NewsNetServer: NSObject {\nvar netWorkDataType: MoyaNewsCar! = .hotSpot\npublic func moyaGetData(type: MoyaNewsCar, success: @escaping ( result : NSDictionary) -> (),failed: @escaping ( error : String) -> ()) -> Void {\n    MoyaNewsCarProvider.request(type) { (result) in\n      do {\n        let response = try result.dematerialize()\n        let value = try response.mapNSDictionary()\n        success(value)\n      } catch {\n        let errorPrint = error as CustomStringConvertible\n        let errorMessage = errorPrint.description\n        failed(errorMessage)\n      }\n    }\n  }\n}\n//MARK: - Private Method -\nextension NewsNetServer {\n}\nextension Moya.Response {\n  func mapNSDictionary() throws -> NSDictionary {\n    let any = try self.mapJSON()\n    guard let dictionary = any as? NSDictionary else {\n      throw MoyaError.jsonMapping(self)\n    }\n    return dictionary\n  }\nfunc mapNSArray() throws -> NSArray {\n    let any = try self.mapJSON()\n    guard let array = any as? NSArray else {\n      throw MoyaError.jsonMapping(self)\n    }\n    return array\n  }\n}\nlet MoyaNewsCarProvider = MoyaProvider(endpointClosure: endpointClosure ,plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)])\nlet endpointClosure = { (target: MoyaNewsCar) -> Endpoint in\n  let defaultEndpoint = MoyaProvider.defaultEndpointMapping(for: target)\n  return defaultEndpoint.adding(newHTTPHeaderFields: [\"VersionCode\": \"201\"])\n}\nprivate func JSONResponseDataFormatter(_ data: Data) -> Data {\n  do {\n    let dataAsJSON = try JSONSerialization.jsonObject(with: data)\n    let prettyData = try JSONSerialization.data(withJSONObject: dataAsJSON, options: .prettyPrinted)\n    return prettyData\n  } catch {\n    return data\n  }\n}\n```\n. ",
    "xumoyan": "thanks,i resolves the problem.. sorry,the development process did not encounter such a crash.the new company wants me to fix the crash in the crash,which is part of it.. i'm sorry, i didn't make it clear.Our project will collect crash information for centralized processing, which is one of the crash logs.i don't know whether it is a crash in the debugging process or a crash that occurs during the customer's use.so i didn't have the console output.now to check the information about the breakpoint, trouble you thank you.. ",
    "yangcaimu": "@sunshinejr Sure, I'll try.. Thanks :]. @shwetachitlangia Please fill in the appropriate title, help others quickly understand your problem. :]. @shwetachitlangia The above code snippet provides insufficient information. Or you can request third-party public services (for example: https://httpbin.org), see the test will appear the same problem? In order to troubleshoot the problem.\n  . ",
    "panjiulong": "I have the same question \uff0chave you fix it ?. @ SD10  @jdisho  Thanks!. ",
    "WeiRuJian": "you can set a good success:\n```swift\n// MARK: - Set the request to the head\nlet myEndpointClosure = { (target: RequestAPI) -> Endpoint in\nprint(\"baseURL:\\(target.baseURL)\\n path:\\(target.path)\")\n\n\nlet url = target.baseURL.absoluteString + target.path\n\nprint(\"url:\\(url)\")\n//http://XXXX/api/xlogin.ashx?action=xulogin\n\n\n//This method will escape special characters\n//let url = target.baseURL.appendingPathComponent(target.path).absoluteString\n//http://XXXX/api/xlogin.ashx%3Faction=xulogin\n\n\nlet endpoint = Endpoint<RequestAPI>(\n    url: url,\n    sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n    method: target.method,\n    parameters: target.parameters,\n    parameterEncoding: target.parameterEncoding\n)\n\n//Set up your header information\nreturn endpoint.adding(newHTTPHeaderFields: [:])\n\n}\nlet LoginProvider = RxMoyaProvider(endpointClosure: myEndpointClosure)\n. you can set a good success:swift\n// MARK: - Set the request to the head\nlet myEndpointClosure = { (target: RequestAPI) -> Endpoint in\nprint(\"baseURL:\\(target.baseURL)\\n path:\\(target.path)\")\n\n\nlet url = target.baseURL.absoluteString + target.path\n\nprint(\"url:\\(url)\")\n//http://XXXX/api/xlogin.ashx?action=xulogin\n\n\n//This method will escape special characters\n//let url = target.baseURL.appendingPathComponent(target.path).absoluteString\n//http://XXXX/api/xlogin.ashx%3Faction=xulogin\n\n\nlet endpoint = Endpoint<RequestAPI>(\n    url: url,\n    sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n    method: target.method,\n    parameters: target.parameters,\n    parameterEncoding: target.parameterEncoding\n)\n\n//Set up your header information\nreturn endpoint.adding(newHTTPHeaderFields: [:])\n\n}\nlet LoginProvider = RxMoyaProvider(endpointClosure: myEndpointClosure)\n. you can set a good success:swift\n// MARK: - Set the request to the head\nlet myEndpointClosure = { (target: RequestAPI) -> Endpoint in\nprint(\"baseURL:\\(target.baseURL)\\n path:\\(target.path)\")\n\n\nlet url = target.baseURL.absoluteString + target.path\n\nprint(\"url:\\(url)\")\n//http://XXXX/api/xlogin.ashx?action=xulogin\n\n\n//This method will escape special characters\n//let url = target.baseURL.appendingPathComponent(target.path).absoluteString\n//http://XXXX/api/xlogin.ashx%3Faction=xulogin\n\n\nlet endpoint = Endpoint<RequestAPI>(\n    url: url,\n    sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n    method: target.method,\n    parameters: target.parameters,\n    parameterEncoding: target.parameterEncoding\n)\n\n//Set up your header information\nreturn endpoint.adding(newHTTPHeaderFields: [:])\n\n}\nlet LoginProvider = RxMoyaProvider(endpointClosure: myEndpointClosure)\n. uploadMultipart([multipartFormData])  Xcode hint MultipartFormData to expected element type' MultipartFormData ' \nOr is it because I uploaded the picture array? Can you give me a correct example of uploading an image array? Thank you very much. Thank you very much, Sir. When did I forget import Alamofire.\ud83d\ude02. Thank you very much, Sir. When did I forget import Alamofire.\ud83d\ude02.\n//MARK: - \u8bbe\u7f6e\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4\nfileprivate var requestTimeOut: Double = 15\n//MARK: - endpointClosure\nfileprivate let myEndpointClosure = { (target: NetworkApi) -> Endpoint in\n    let url = target.baseURL.absoluteString + target.path\nlet endpoint = Endpoint(url: url,\n                        sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n                        method: target.method,\n                        task: target.task,\n                        httpHeaderFields: target.headers)\n\n\n// \u4fee\u6539\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4\nswitch target {\n\n    /// \u4e0a\u4f2060s\u8d85\u65f6\ncase .DocTransCoding,\n     .ImgTransCoding:\n\n    requestTimeOut = 60.0\n\ndefault:\n    requestTimeOut = 15\n}\n\nreturn endpoint\n\n}\n//MARK: - requestClosure\nfileprivate let myRequestClosure = { (endpoint: Endpoint, done: @escaping MoyaProvider.RequestResultClosure) in\ndo {\n    var request = try endpoint.urlRequest()\n    request.httpShouldHandleCookies = false\n    request.timeoutInterval = requestTimeOut\n\n\n    done(.success(request))\n} catch {\n\n    done(.failure(MoyaError.underlying(error, nil)))\n}\n\n}\n.\n//MARK: - \u8bbe\u7f6e\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4\nfileprivate var requestTimeOut: Double = 15\n//MARK: - endpointClosure\nfileprivate let myEndpointClosure = { (target: NetworkApi) -> Endpoint in\n    let url = target.baseURL.absoluteString + target.path\nlet endpoint = Endpoint(url: url,\n                        sampleResponseClosure: { .networkResponse(200, target.sampleData) },\n                        method: target.method,\n                        task: target.task,\n                        httpHeaderFields: target.headers)\n\n\n// \u4fee\u6539\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4\nswitch target {\n\n    /// \u4e0a\u4f2060s\u8d85\u65f6\ncase .DocTransCoding,\n     .ImgTransCoding:\n\n    requestTimeOut = 60.0\n\ndefault:\n    requestTimeOut = 15\n}\n\nreturn endpoint\n\n}\n//MARK: - requestClosure\nfileprivate let myRequestClosure = { (endpoint: Endpoint, done: @escaping MoyaProvider.RequestResultClosure) in\ndo {\n    var request = try endpoint.urlRequest()\n    request.httpShouldHandleCookies = false\n    request.timeoutInterval = requestTimeOut\n\n\n    done(.success(request))\n} catch {\n\n    done(.failure(MoyaError.underlying(error, nil)))\n}\n\n}\n```\n. OK\uff0cCan achieve the desired effect\uff1f. OK\uff0cCan achieve the desired effect\uff1f. ",
    "ZhuZijun": "public extension URL \n{ \n ...\n self = URL.init(string: target.baseURL.absoluteString + target.path)!  \n}. public extension URL \n{ \n ...\n self = URL.init(string: target.baseURL.absoluteString + target.path)!  \n}. ",
    "ondev": "@SD10 I don't find any document, after my research, I think can support,  because the request returned task is a cancelable object.  like NSURLSession, can make mutil-requests on a single instance. `target 'xxx' do\n# Pods for xxx\n  pod 'SwiftProtobuf', '~> 0.9.903'\n  pod 'CoreStore', '~> 4.0'         \n  pod 'XCGLogger', '~> 5.0.1'       \n  pod 'Moya/RxSwift'             \n  pod 'CryptoSwift'                 \n  pod 'SwiftyJSON'                \n  pod 'ObjectMapper'              \n  pod 'KeychainAccess'            \n  pod 'SwiftyUserDefaults'         \nend`\n. `target 'xxx' do\n# Pods for xxx\n  pod 'SwiftProtobuf', '~> 0.9.903'\n  pod 'CoreStore', '~> 4.0'         \n  pod 'XCGLogger', '~> 5.0.1'       \n  pod 'Moya/RxSwift'             \n  pod 'CryptoSwift'                 \n  pod 'SwiftyJSON'                \n  pod 'ObjectMapper'              \n  pod 'KeychainAccess'            \n  pod 'SwiftyUserDefaults'         \nend`\n. I try to use Moya with RxSwift as the document: https://github.com/Moya/Moya/blob/master/docs/RxSwift.md\nprovider have no rx property,\nonly use the RxMoyaProvider,  the document is not update?. I try to use Moya with RxSwift as the document: https://github.com/Moya/Moya/blob/master/docs/RxSwift.md\nprovider have no rx property,\nonly use the RxMoyaProvider,  the document is not update?. \nIn the pod folder Moya/RxSwift , have no  MoyaProvider+Rx.swift\nVery strange.. I got it,  this is Moya version 8.0.5 version. MoyaProvider+Rx.swift is in version 9.0. Moya v9.0.0 is support the swift4, but its dependence RxSwift is v3.3,  not support swift4,  I to fix this problem?. Moya v9.0.0 is support the swift4, but its dependence RxSwift is v3.3,  not support swift4,  I to fix this problem?. ",
    "edopelawi": "Wait - upon further inspection, it turns out I used JSONEncoding for the target's parameterEncoding, where it supposed to have no JSON parameter. Changing it to URLEncoding fixes this issue.\nApologies for the rubber-ducking, stay awesome dear Moya team!. ",
    "i-schuetz": "Update: I forgot to add the path to the copy-frameworks script. Reset the Carthage setup and downloading Moya (without explicit Alamofire) again (it takes forever...), will write again when I can test it.\nUpdate 2: No it doesn't work only with Moya, will try again adding Alamofire...\nUpdate 3: Ok, I got it working:\n\n\nAdd (only) Moya to Cartfile.\n\n\nAdd the frameworks of Moya and dependencies to \"Linked frameworks and libraries\".\n\n\nAdd the paths to Moya and dependencies frameworks to the copy-frameworks script.. \n\n",
    "aelam": "Thanks guys!! Will read more details . Thanks for your reply!!\nendpointClosureand requestClosure are easy to append headers but hard to append parameters \nIf I want to insert a group of default parameters \nTake platform=app1, appVersion=1.0 as an example. \nIf it's GET I will append to the end of URL, if it's POST I need encode the parameter.  the ParameterEncode is same as the origin request which set in Target, JSON or urlencode  or anything else\nI've look into Moya a lot of times \nSeems I have to override the Endpoint methods to append them \nIf I have to override the Endpoint, I have to give up Moya\nDo you have any ideas? \n``swift\nextension Endpoint {\n    /// Returns theEndpointconverted to aURLRequestif valid. Returnsnil` otherwise.\n    public var urlRequest: URLRequest? {\n        guard let requestURL = Foundation.URL(string: url) else { return nil }\n    var request = URLRequest(url: requestURL)\n    request.httpMethod = method.rawValue\n    request.allHTTPHeaderFields = httpHeaderFields\n\n    switch task {\n    case .requestPlain, .uploadFile, .uploadMultipart, .downloadDestination:\n        return request\n    case .requestData(let data):\n        request.httpBody = data\n        return request\n    case let .requestParameters(parameters, parameterEncoding):\n        return try? parameterEncoding.encode(request, with: parameters)\n    case let .uploadCompositeMultipart(_, urlParameters):\n        return try? URLEncoding(destination: .queryString).encode(request, with: urlParameters)\n    case let .downloadParameters(parameters, parameterEncoding, _):\n        return try? parameterEncoding.encode(request, with: parameters)\n    case let .requestCompositeData(bodyData: bodyData, urlParameters: urlParameters):\n        request.httpBody = bodyData\n        return try? URLEncoding(destination: .queryString).encode(request, with: urlParameters)\n    case let .requestCompositeParameters(bodyParameters: bodyParameters, bodyEncoding: bodyParameterEncoding, urlParameters: urlParameters):\n        if bodyParameterEncoding is URLEncoding { fatalError(\"URLEncoding is disallowed as bodyEncoding.\") }\n        guard let bodyfulRequest = try? bodyParameterEncoding.encode(request, with: bodyParameters) else { return nil }\n        return try? URLEncoding(destination: .queryString).encode(bodyfulRequest, with: urlParameters)\n    }\n}\n\n}\n```. ",
    "evyasafm": "Add to Podfile: \npod 'Moya/RxSwift'. Add to the Podfile:\npod 'Moya/RxSwift'. ",
    "riyanpratama": "I switched to Moya 8.0.2 that support with ReactiveSwift 1.0.0, so here is my Cartfile\ngithub \"skywinder/ActionSheetPicker-3.0\" \"2.2.0\"\ngithub \"Alamofire/Alamofire\" \"4.3.0\"\ngithub \"Ekhoo/Device\" \"2.0.1\"\ngithub \"hackiftekhar/IQKeyboardManager\" \"v4.0.8\"\ngithub \"auth0/JWTDecode.swift\" \"2.0.0\"\ngithub \"marmelroy/Localize-Swift\" \"1.7.1\"\ngithub \"Hearst-DD/ObjectMapper\" \"2.2.2\"\ngithub \"antitypical/Result\" \"3.1.0\"\ngithub \"ReactiveX/RxSwift\" \"3.2.0\"\ngithub \"rs/SDWebImage\" \"3.8.2\"\ngithub \"SVProgressHUD/SVProgressHUD\" \"2.1.2\"\ngithub \"SnapKit/SnapKit\" \"3.1.1\"\ngithub \"TTTAttributedLabel/TTTAttributedLabel\" \"2.0.0\"\ngithub \"kasketis/netfox\" \"01c8a05f3a376180691c7fc61e76eae49ed9ac1f\"\ngithub \"RxSwiftCommunity/Action\" \"2.2.1\"\ngithub \"ReactiveCocoa/ReactiveSwift\" \"1.0.0\"\ngithub \"Moya/Moya\" \"8.0.2\"\nBut when I install it, I got \nMyProject/Carthage/Checkouts/Moya/Sources/Moya/MoyaAvailability.swift:42:64: error: 'Error' has been renamed to 'MoyaError': Moya.Error has been renamed to MoyaError in version 8.0.0. ",
    "swordjoy": "@sunshinejr It work well, thanks!. ",
    "khuong291": "Thanks, it works for me \ud83d\udc4d . ",
    "jayvenn": "Hi @sunshinejr, I happen to need an example of this quite badly. Is there any example out there that you've seen which can help?\nIf yes, that would be awesome!. Hi @SD10 ,\nThank you for your reply!\nThe following was what I was looking for:\nswift\ndo {\n    try moyaResponse.filterSuccessfulStatusCodes()\n    let data = try moyaResponse.mapJSON()\n}\ncatch {\n    // show an error to your user\n}\nI am not sure about the recommended approach for error catching in this case. \nI want to print out the error description but the error object doesn't contain an error description property.\nI.e:\nError = 401\nError Description = \"Unauthorized \u2013 You are not authorized to this action\"\nMy server returns me something like this which falls into the error in the catch:\njson\n{\n    \"errors\": [\n        {\n            \"status\": 401,\n            \"title\": \"A confirmation email was sent to your account at '%{email}'. You must follow the instructions in the email before your account can be activated\",\n            \"detail\": \"\",\n            \"source\": \"\"\n        }\n    ]\n}\nAny recommended approach for printing out error description would be great!\nThanks.\n. @AndrewSB Thanks for your response!\nHowever, it isn't exactly what I was looking for.\nThe problem I am facing from using:\nswift\ndo {\n    try moyaResponse.filterSuccessfulStatusCodes()\n    let data = try moyaResponse.mapJSON()\n    print(data)\n} catch {\n    print(error)\n}\nIs that the error caught does not contain the error description.\nThe catching of the error prints something like this:\nstatusCode(Status Code: 401, Data Length: 106)\nI then try to retrieve the JSON from moyaResponse.data.\nHowever, it only gave me:\nstatusCode(Status Code: 401, Data Length: 106)\nWhen I was expecting the following to return (from testing with Postman):\njson\n{\n    \"errors\": [\n        {\n            \"status\": 401,\n            \"title\": \"A confirmation email was sent to your account at '%{email}'. You must follow the instructions in the email before your account can be activated\",\n            \"detail\": \"\",\n            \"source\": \"\"\n        }\n    ]\n}\nThis way, I can get the error message from the title key and do something with it.\nBasically, I want is to get the JSON to get the error message.\n. UPDATE\nTurned out this was what I was looking for:\nswift\nswitch result {\ncase let .success(moyaResponse):\n    do {\n        try moyaResponse.filterSuccessfulStatusCodes()\n        let data = try moyaResponse.mapJSON()\n    } catch {\n        if let error = error as? MoyaError {\n            do {\n                let body = try error.response?.mapJSON()\n            } catch {\n                print(error)\n            }\n        }\n    }\ncase let .failure(error):\n    // TODO: handle the error == best. comment. ever.\n    break\n}\nIt isn't the cleanest, but the body was what I was looking for :)\nThank you @SD10  and @AndrewSB for your help!. ",
    "danwey": "pod 'Moya/RxSwift' \n\n. I won't specify the 'moya/rxswift' version.. pod 'Moya/Moya', :git => 'https://github.com/Moya/Moya.git', :branch => '9.0.0-dev'\npod 'RxSwift', :git => 'https://github.com/ReactiveX/RxSwift.git', :branch => 'swift4.0'\nCan do it.   \uff1a\uff09thank you.. ",
    "jdeanwaite": "After much hassle in google, I realized my endpointsClosure has to correctly create the endpoint via the default endpoint function on the RxMoyaProvider class and then add headers to it. My previous solution was essentially ignoring what Moya would have set as a default by not using that method.\n```swift\nlet endpointsClosure = { (target: Target) -> Endpoint in\n        var endpoint = AuthenticatedAPIProvider.defaultEndpointMapping(for: target)\n    if let accessToken = Session.instance.mToken?.accessToken {\n        endpoint = endpoint.adding(newHTTPHeaderFields: [\"Authorization\": \"Bearer \\(accessToken)\"])\n    }\n\n    return endpoint\n}\n\n```. After much hassle in google, I realized my endpointsClosure has to correctly create the endpoint via the default endpoint function on the RxMoyaProvider class and then add headers to it. My previous solution was essentially ignoring what Moya would have set as a default by not using that method.\n```swift\nlet endpointsClosure = { (target: Target) -> Endpoint in\n        var endpoint = AuthenticatedAPIProvider.defaultEndpointMapping(for: target)\n    if let accessToken = Session.instance.mToken?.accessToken {\n        endpoint = endpoint.adding(newHTTPHeaderFields: [\"Authorization\": \"Bearer \\(accessToken)\"])\n    }\n\n    return endpoint\n}\n\n```. ",
    "aninhakrieger": ":'(. ",
    "linbx08": "Wait for the day is long, hope Moya support for Swift 4 with RxSwift the truth will become soon .. Ah Fantastic! Thanks a lot. Very thankful to you. In the new version, Moya instead of subscribing to a Single with the three methods use to respond to notifications from an Observable (onNext, onError, and onCompleted), so that we only need use two methods to subscribe(onSuccess, onError).Ah Fantastic! Sadly, we need to upgrades the code. hi, This is a breaking change Moya 9.0.0 default parameters from Endpoint will be removed. \nhttps://github.com/Moya/Moya/issues/1247\nSee the Moya task method\ncase requestParameters(parameters: [String: Any], encoding: ParameterEncoding)\nhope can help you. ",
    "neoD1": "Thank you !!! Will keep you posted , if something comes up.. ",
    "karbhasin": "@sunshinejr tried fetching Moya from  \"10.0.0-dev\" branch using Carthage, but couldn't get Moya in ios Build. Also when will it be available in Release?\nerror - Build Failed\n    Task failed with exit code 65:\n    /usr/bin/xcrun xcodebuild -workspace /Users/xxxx/Desktop/project/Carthage/Checkouts/RxSwift/Rx.xcworkspace -scheme RxBlocking-iOS -configuration Release -derivedDataPath /Users/xxxx/Library/Caches/org.carthage.CarthageKit/DerivedData/RxSwift/4.0.0-alpha.1 -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES clean build (launched in /Users/xxx/Desktop/ProjectName/Carthage/Checkouts/RxSwift)\n. @yangcaimu Facing exactly the same issue. Sending the following POST request - \nRequest: http://XXXXXX/YYYY/UUUIIUIIUIUIUIUIU\nMoya_Logger: [15/01/2018 16:10:08] Request Headers: [\"Content-Type\": \"application/json\", \"correlationId\": \"876578658769389283kjhgf\"]\nMoya_Logger: [15/01/2018 16:10:08] HTTP Request Method: POST\nMoya_Logger: [15/01/2018 16:10:08] Request Body: {\"password\":\"password\",\"email\":\"shshs@sd.com\"}..\nChecked with server team, as per their logs, they are getting method type as \"ST\" instead of POST.\nAS per Server Logs - \n\"o.s.web.servlet.DispatcherServlet - DispatcherServlet with name \u2018dispatcherServlet\u2019 processing ST request for [/YYYY/UUUIIUIIUIUIUIUIU]\". ",
    "leiguang": "Sorry I still don't know the correct practice, my podfile is as follows:\n```\npod 'Alamofire',   '~> 4.5'\npod 'RxSwift',     '~> 4.0.0-beta.0'\npod 'RxCocoa',     '~> 4.0.0-beta.0'\npod 'Moya',        '~> 9.0'\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\n```\nAnd the error messge is : \n[!] There are multiple dependencies with different sources for Moya in Podfile:\n- Moya (~> 9.0)\n- Moya/RxSwift (from https://github.com/Moya/Moya.git, branch 10.0.0-dev)\nHow to modify it? thanks. Sorry I still don't know the correct practice, my podfile is as follows:\n```\npod 'Alamofire',   '~> 4.5'\npod 'RxSwift',     '~> 4.0.0-beta.0'\npod 'RxCocoa',     '~> 4.0.0-beta.0'\npod 'Moya',        '~> 9.0'\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'\n```\nAnd the error messge is : \n[!] There are multiple dependencies with different sources for Moya in Podfile:\n- Moya (~> 9.0)\n- Moya/RxSwift (from https://github.com/Moya/Moya.git, branch 10.0.0-dev)\nHow to modify it? thanks. After pod update, it prompts\uff1a\n[!] There are multiple dependencies with different sources for Moya in Podfile:\n- Moya (~> 9.0)\n- Moya/RxSwift (from https://github.com/Moya/Moya.git, branch 10.0.0-dev) @pedrovereza . After pod update, it prompts\uff1a\n[!] There are multiple dependencies with different sources for Moya in Podfile:\n- Moya (~> 9.0)\n- Moya/RxSwift (from https://github.com/Moya/Moya.git, branch 10.0.0-dev) @pedrovereza . Thank you, it is now working properly like this:\npod 'RxSwift',     \u20184.0.0-alpha.1\u2019\npod 'RxCocoa',     \u20184.0.0-alpha.1\u2019\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'. Thank you, it is now working properly like this:\npod 'RxSwift',     \u20184.0.0-alpha.1\u2019\npod 'RxCocoa',     \u20184.0.0-alpha.1\u2019\npod 'Moya/RxSwift', :git => 'https://github.com/Moya/Moya.git', :branch => '10.0.0-dev'. ",
    "karthikdash": "I think the issue #1208 was with the dependency of ReactiveSwift. The user was enforcing a lower version.\nI am not sure what addition @BasThomas wanted.. I think the issue #1208 was with the dependency of ReactiveSwift. The user was enforcing a lower version.\nI am not sure what addition @BasThomas wanted.. Thank you for your support everyone! Looking forward to contribute :). ",
    "cvhong": "Hi, I think I encountered similar problem when upgrade from 8 -> 11,  task never getting call when I  trying to debug.\n// MyAPI_TargetType.swift\n public var task: Task {\n        return .requestPlain\n    }\n// API_Provider.swift\nvar endPoint = Endpoint(url: url, sampleResponseClosure: {.networkResponse(200, target.sampleData)},\n                                method: target.method, task: Task.requestParameters(parameters: target.parameters!,\n                                                                                    encoding: target.parameterEncoding), httpHeaderFields: httpHeader)\n. ",
    "zallanx": "Hey @sunshinejr, thanks for following up.\nI think what occurred was that, while a Moya request was running, the app crashed due to another unrelated issue. However, when viewing the trace (specifically, this was via Sentry), it was unable to capture the crash issue further down the trace stack, and therefore only indicated it was Moya.\nLet me know if this is helpful. \nMoya is working great for me \ud83d\udc4d. ",
    "evermeer": "Please publish 10.0 as soon as possible. I have a cocoapod with a dependency on Moya and RxSwift and I'm not able to publish my Swift 4 version. \nhttps://github.com/evermeer/EVReflection/issues/236 and https://github.com/evermeer/EVReflection/issues/238 and \nhttps://github.com/evermeer/EVReflection/issues/241 and https://github.com/evermeer/EVReflection/issues/242. ",
    "arjunnaha": "This is exactly what I am doing, as all my endpoints use .basic. Does that mean I can just use:\nswift\n    var authorizationType: AuthorizationType {\n        return .basic\n    }\nSure can do @sunshinejr!. No problems! First OSS contribution \ud83d\ude0a. Sure! I'll try and get that PR done today. . Would someone be able to merge at #1274.\nCheers.. I sure did! You have to create the Observable at the start:\nswift\nfunc login() -> Observable<Void> {\n   return Observable.create { observer in\n        provider.rx.request(.auth)\n            .filter(statusCode: 200)\n            .mapJSON()\n            .subscribe(onSuccess: { json in\n                observer.onCompleted()\n            }) { error in\n                print(\"Error code: \", error.code)\n            }\n            .disposed(by: disposeBag)\n    }\n}\nTo complete the Observable, you can call different functions on the observer, observer.onCompleted().. I've done this:\nswift\nswitch error as! MoyaError {\n case .statusCode:\n    print(\"statusCode\")\n}\n but getting the error Use of undeclared type 'MoyaError'. Am I casting it correctly?. That might have been why!! Thanks.\nNote to self: if you want to use anything Moya, you have to actually import Moya first!. Perfect! Thanks for your help.. ",
    "YanisSOTO": "Hello @SD10 , thank's for your answer ! I'm not using ModelMapper, but this is coming from Freddy. So i'll refer to it. Sorry and thank's again. :) . Hello @SD10 , thank's for your answer ! I'm not using ModelMapper, but this is coming from Freddy. So i'll refer to it. Sorry and thank's again. :) . ",
    "bhstrifork": "Forgot to add usage example of the service.. Forgot to add usage example of the service.. Yeah, I should've been clearer.\nIn Moya 8.x I could use the UserService as shown above, and it would not get deallocated. Now in Moya 9.0 it is deallocated immediately, meaning my request either doesn't fire, or I never receive the response in my subscription. I was trying to find the issue discussing this already in Moya 8, but I can't seem to find it.\nSo basically I would like to have a function call as follows:\nswift\nfunc login() {\n  let userService = UserService(provider: MoyaProvider<MyAPI>())\n  userService.performLogin(username: \"foo\", password: \"bar\")\n    .subscribe(onSuccess: {...}, onError: {...}\n}\nAnd then maybe have it call a completion or similar. Or even just forward the request like this:\nswift\nfunc login() -> Single<String?> {\n  let userService = UserService(provider: MoyaProvider<MyAPI>())\n  return userService.performLogin(username: \"foo\", password: \"bar\")\n}\nSo the caller doesn't have to care about the UserService.\nDoes this clarify things?. Yeah, I should've been clearer.\nIn Moya 8.x I could use the UserService as shown above, and it would not get deallocated. Now in Moya 9.0 it is deallocated immediately, meaning my request either doesn't fire, or I never receive the response in my subscription. I was trying to find the issue discussing this already in Moya 8, but I can't seem to find it.\nSo basically I would like to have a function call as follows:\nswift\nfunc login() {\n  let userService = UserService(provider: MoyaProvider<MyAPI>())\n  userService.performLogin(username: \"foo\", password: \"bar\")\n    .subscribe(onSuccess: {...}, onError: {...}\n}\nAnd then maybe have it call a completion or similar. Or even just forward the request like this:\nswift\nfunc login() -> Single<String?> {\n  let userService = UserService(provider: MoyaProvider<MyAPI>())\n  return userService.performLogin(username: \"foo\", password: \"bar\")\n}\nSo the caller doesn't have to care about the UserService.\nDoes this clarify things?. So, I was thinking about this last night and I realized that I actually don't keep a reference to the provider as stated is required in the docs. Like you also point out. I am familiar with ARC though. I guess a way to simplify the example is to simply remove UserService from the equation.\nMoya 8.x let's me do the following:\nswift\nfunc login() -> Observable<String?> {\n  let provider = RxMoyaProvider<MyAPI>()\n  return provider.request(.login(username: username, password: password))\n            .performMapping()\n}\nIt could be that this is a bug in Moya 8.x, but I do recall an issue talking about this being a use case.. So, I was thinking about this last night and I realized that I actually don't keep a reference to the provider as stated is required in the docs. Like you also point out. I am familiar with ARC though. I guess a way to simplify the example is to simply remove UserService from the equation.\nMoya 8.x let's me do the following:\nswift\nfunc login() -> Observable<String?> {\n  let provider = RxMoyaProvider<MyAPI>()\n  return provider.request(.login(username: username, password: password))\n            .performMapping()\n}\nIt could be that this is a bug in Moya 8.x, but I do recall an issue talking about this being a use case.. Anyway, I think this is non-obvious behaviour anyway. So I'll find a way to work around it on my end.. Anyway, I think this is non-obvious behaviour anyway. So I'll find a way to work around it on my end.. ",
    "ICCanche": "Thanks for answering, I'm using version 8.0.3. ",
    "disquad": "Hello @BasThomas, thank you for your answer. Is it good idea pass token each service method? There is authentication plugin, can we modernise it for different token types?. @BasThomas thanks for the suggestion, I will try! This is my first experience to make pull request \ud83d\ude42. @SD10 @BasThomas I edited some logic. Please review the code when you have time, thank you.. Yeh, I agree. Would be better if I will use optional binding for url, and then continue other logic? I will edit at evening \ud83d\udc4d\ud83c\udffb. Hello @SD10 , thank you for help. I will make some fixes at evening \ud83d\udc4d . Hello guys, you suggested nice ideas. Can I try to implement case with argumented enum or additional plugins?. Guys, what you think about combination of optional name for token and initialization with token key? If you need to use prefix, you can add specific name, otherwise you will use default names like access_token or Authorization.\n```swift\ninit(tokenClosure: ..., parameterName: ... = \"access_token\", headerName: ... = \"Authorization\") { ... }\npublic enum AuthorizationType: String {\n    case none\n    case header(name: String?) // -> Authorization: \n    case parameter(name: String?) // -> access_token=\n}\n```\ninspired by @sunshinejr and @SD10 suggestions\n. ",
    "pccole": "@SD10 Was the Migration Guide removed? I just inherited a project that was using Moya 8.0, I've updated to 11 and I do not see the parameters computed property being hit.\nAny help?\nThanks!. @SD10 Thank you. ",
    "xavierLowmiller": "Yes, but it'll still be presented as a .success case in the MoyaProvider.request() completion handler.\nIf my TargetType has validation enabled, a real network request with status code 500 will hit the .failure case.\nI guess I'll just duplicate the status code validation in my endpointClosure.... Yes, but it'll still be presented as a .success case in the MoyaProvider.request() completion handler.\nIf my TargetType has validation enabled, a real network request with status code 500 will hit the .failure case.\nI guess I'll just duplicate the status code validation in my endpointClosure.... I know I'm a little late to the game, but does Solution 1 work for anybody in the current Moya version? \nCurrently, Moya happily ignores my sampleData override in the testing target.... I know I'm a little late to the game, but does Solution 1 work for anybody in the current Moya version? \nCurrently, Moya happily ignores my sampleData override in the testing target.... Hey, thanks for the quick response!\nI\u2019ll probably do something like the comment you mentioned until your pull request lands (hopefully in 13.0).\nPity, because solution 1 would be really elegant.\nSent with GitHawk. Hey, thanks for the quick response!\nI\u2019ll probably do something like the comment you mentioned until your pull request lands (hopefully in 13.0).\nPity, because solution 1 would be really elegant.\nSent with GitHawk. Will this release with 12.0? Sooner maybe?. Will this release with 12.0? Sooner maybe?. Thanks for answering this!\nWe ended up setting the taskWillPerformHTTPRedirection closure on MoyaProvider.manager.delegate that conditionally follows redirects based on the URL's path.\nWhat I was hoping for would be a shouldFollowRedirect or something as an extension on TargetType, similar to the optional validationType.\nI'm willing to look into this. Would you be interested in a Pull Request?. It might also fall under the \u201ecommon things are easy, and uncommon things are possible\u201c category.\nI\u2019ve been using Moya for over a year in various projects, and this is the first time I\u2019m running into this.\nThe thing I don\u2019t like about our current implementation is that the decision to follow redirects is now completely independent of any TargetType, so I thought it might make sense to somehow combine this.. I think we're on the same page here. Let's close this.. ",
    "mac10688": "I saw in the podfile that Moya is targeted with path to the parent directory. I opened that project and got it to build but still no luck with the Demo project.. i'm using master version of Moya and xcode 8.3.3. I'll blow away the repo and re-clone. I think I know. I opened xcodeproj, instead of xcworkspace. I remember going over that learning pods but I switched to carthage. I'm still new and I overlooked that. Thanks for replying!. ",
    "maross": "I still have problems to run Moya examples, Demo folder is changed to Examples, but there is no Podifile. Can someone help me? Thanks. ",
    "uditha2233": "Hi @BasThomas The endpoint is the url of the API function and the param is just a string value.\nparam =  encriptedKey + \".\" + encriptedData. And the headers are like below \nlet headers: HTTPHeaders = [\n            \"nonce\": iv,\n            \"alg\": \"2\"\n        ]\nI need to send this param string to the API. But I can't send this param as a key-value pair because the API function doesn't accept any key-value pairs. It needs only a single string value. \nSo my requirement is to send a value to the API without a key. Sorry for my bad English. But I hope you understand my question. . Hi @AndrewSB , I have solved my issue. Thanks for your support. :). ",
    "matthewweldon": "@SD10 Yes, I added associated values for things like session, location, locale. So when I'm building a parameter dictionary I can grab them as needed.\nA protocol would still have tons of code reuse, no? Implementing that protocol on each targetType means I will be putting some get code in each targetType that could be stored in a single place instead. \nI currently have a sessionManager instance and a location manager instance outside of the targetType, the associated values call those singletons to get things like sessionToken or currentLocation. This is so that I can avoid having things like NSLocation, and NSUserDefaults code in my TargetType, which is a relatively a clean API reference.\nI could make a struct for the parameters and shared associated values. My TargetTypes will then use that SharedParameter struct. Seemed like an extra layer.\nI've attached a reduced version of my targetType definition so you can see what my current structure is.\n\n. Gotcha, thanks, I will tinker.. ",
    "ffittschen": "Similar to @AndrewSB, after working on #1393 I also ended up creating an async version with RxSwift by using an EndpointClosure etc. and ended up not using the AccessTokenPlugin. \nBut I'd really like to use it! My solution kinda feels hacky and I'd like to abstract the authentication out into some piece of code, as the AccessTokenPlugin, because my EndpointClosure violates the single responsibility and the interface segregation, because it basically is a general purpose solution.\nSo looking at the proposed solutions above, I think that 1 and 3 are not scalable. On the one hand I like proposal 2, because it enables complete freedom, on the other hand I think that complete freedom again enables a general purpose solution. When I created #1393 I looked for \"official\" resources or best practices of header authentication. For named authentication methods we should not change the current implementation, as the RFCs of Basic Authentication or Bearer Authentication are quite explicit, that it should look like the current implementation. But as those two are not the only ones 1 2, we should create a structure that allows to conform to custom authentication methods too. Especially, because not every API (as in my case in #1393) has correctly implemented authentication and might look for arbitrary headers.\nApart from that, using access tokens as parameter is considered as NOT OK by owasp: https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Sensitive_information_in_HTTP_requests\nRegarding proposal 5: I don't think that we should create a general header / parameter plugin, because those should be specified in the TargetType extension, right?. Sorry for the late response..\nI like the idea, but I wouldn't remove the .none case in favor of an optional. And in your prefix computed property, you are mixing the header field and the token prefix. The RFC conform header is always Authorization, and the RFC conform token prefix is Bearer, Basic etc. based on the HTTP authentication scheme. I would say, that we should make the RFC conform usage as easy as possible and if customizations are necessary, it is ok to require some additional parameters.\nSince there is no RFC (that I know of) that describes how parameter based authentication should look like, there are a lot of different ways: GitHub and Bitbucket require a access_token=TOKEN parameter, and GitLab requires a private_token=TOKEN parameter, so the parameter name should be customizable as well. \nLooking at the naming of the security scheme of the OpenAPI specification by swagger, I came up with the following idea in which the http case would be the RFC conform implementation and the apiKey is a fully customizable option:\n```swift\n/// HTTP authentication scheme (https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml)\nenum AuthenticationScheme {\n    case basic\n    case bearer\nvar tokenPrefix: String {\n    switch self {\n    case .basic:\n        return \"Basic\"\n    case .bearer:\n        return \"Bearer\"\n    }\n}\n\n}\nenum AuthenticationPlacement {\n    case header\n    case queryParameter\n}\nenum AuthenticationType {\n    case none\n    case http(scheme: AuthenticationScheme)\n    case apiKey(name: String, placement: AuthenticationPlacement)\nvar placement: AuthenticationPlacement? {\n    switch self {\n    case .none:\n        return nil\n    case .http:\n        return .header\n    case .apiKey(_, let placement):\n        return placement\n    }\n}\n\nvar header: String? {\n    switch self {\n    case .http:\n        return \"Authorization\"\n    case .apiKey(let name, let placement) where placement == .header:\n        return name\n    default:\n        return nil\n    }\n}\n\nvar queryParameter: String? {\n    guard case .apiKey(let name, let placement) = self, placement == .queryParameter else {\n        return nil\n    }\n\n    return name\n}\n\n}\nprotocol Authenticatable {\n    var authenticationType: AuthenticationType { get }\n}\n```\nExample usage:\n```swift\nenum YourAPI: Authenticatable {\n    case targetDoesNotNeedAuth\n    case targetThatNeedsBearerAuth\n    case targetThatNeedsBasicAuth\n    case targetThatNeedsCustomParameterAuth\n    case targetThatNeedsCustomHeaderAuth\nvar authenticationType: AuthenticationType {\n    switch self {\n    case .targetDoesNotNeedAuth:\n        return .none\n    case .targetThatNeedsBearerAuth:\n        return .http(scheme: .bearer)\n    case .targetThatNeedsBasicAuth:\n        return .http(scheme: .basic)\n    case .targetThatNeedsCustomParameterAuth:\n        return .apiKey(name: \"access_token\", placement: .queryParameter)\n    case .targetThatNeedsCustomHeaderAuth:\n        return .apiKey(name: \"X-Access-Token\", placement: .header)\n    }\n}\n\n}\n```\nThe only thing that didn't make it into this proposal is the the case: Authentication with custom header and token prefix. But by adding the prefix to the tokenClosure this case would be feasible as well. Sorry for the late response..\nI like the idea, but I wouldn't remove the .none case in favor of an optional. And in your prefix computed property, you are mixing the header field and the token prefix. The RFC conform header is always Authorization, and the RFC conform token prefix is Bearer, Basic etc. based on the HTTP authentication scheme. I would say, that we should make the RFC conform usage as easy as possible and if customizations are necessary, it is ok to require some additional parameters.\nSince there is no RFC (that I know of) that describes how parameter based authentication should look like, there are a lot of different ways: GitHub and Bitbucket require a access_token=TOKEN parameter, and GitLab requires a private_token=TOKEN parameter, so the parameter name should be customizable as well. \nLooking at the naming of the security scheme of the OpenAPI specification by swagger, I came up with the following idea in which the http case would be the RFC conform implementation and the apiKey is a fully customizable option:\n```swift\n/// HTTP authentication scheme (https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml)\nenum AuthenticationScheme {\n    case basic\n    case bearer\nvar tokenPrefix: String {\n    switch self {\n    case .basic:\n        return \"Basic\"\n    case .bearer:\n        return \"Bearer\"\n    }\n}\n\n}\nenum AuthenticationPlacement {\n    case header\n    case queryParameter\n}\nenum AuthenticationType {\n    case none\n    case http(scheme: AuthenticationScheme)\n    case apiKey(name: String, placement: AuthenticationPlacement)\nvar placement: AuthenticationPlacement? {\n    switch self {\n    case .none:\n        return nil\n    case .http:\n        return .header\n    case .apiKey(_, let placement):\n        return placement\n    }\n}\n\nvar header: String? {\n    switch self {\n    case .http:\n        return \"Authorization\"\n    case .apiKey(let name, let placement) where placement == .header:\n        return name\n    default:\n        return nil\n    }\n}\n\nvar queryParameter: String? {\n    guard case .apiKey(let name, let placement) = self, placement == .queryParameter else {\n        return nil\n    }\n\n    return name\n}\n\n}\nprotocol Authenticatable {\n    var authenticationType: AuthenticationType { get }\n}\n```\nExample usage:\n```swift\nenum YourAPI: Authenticatable {\n    case targetDoesNotNeedAuth\n    case targetThatNeedsBearerAuth\n    case targetThatNeedsBasicAuth\n    case targetThatNeedsCustomParameterAuth\n    case targetThatNeedsCustomHeaderAuth\nvar authenticationType: AuthenticationType {\n    switch self {\n    case .targetDoesNotNeedAuth:\n        return .none\n    case .targetThatNeedsBearerAuth:\n        return .http(scheme: .bearer)\n    case .targetThatNeedsBasicAuth:\n        return .http(scheme: .basic)\n    case .targetThatNeedsCustomParameterAuth:\n        return .apiKey(name: \"access_token\", placement: .queryParameter)\n    case .targetThatNeedsCustomHeaderAuth:\n        return .apiKey(name: \"X-Access-Token\", placement: .header)\n    }\n}\n\n}\n```\nThe only thing that didn't make it into this proposal is the the case: Authentication with custom header and token prefix. But by adding the prefix to the tokenClosure this case would be feasible as well. Additionally, every time I'm giving the AccessTokenPlugin a new chance and I use RxSwift for my networking code, I get stuck when I need to provide a tokenClosure, so I fall back to using a plain endpoint closure again. Since the project board says Improving AccessTokenPlugin / plugins in general do you think this should be addressed as well?. @sunshinejr I started working on the PR you mentioned in https://github.com/Moya/Moya/issues/1283#issuecomment-352852287 during the holidays. \nShall I finish it today or do you want to do a proper \"Improve plugins in general\" as mentioned on the project board after releasing 11.0?\n/cc @SD10 . ",
    "ethi1989": "@SD10 so,where is the examples? I need help to archive add \"token\" to parameters, thank you!. ",
    "Sherlouk": "@sunshinejr Assign this one to me, gives me an excuse to look into Circle \ud83d\ude05. Sorry yea I'm just staring blankly trying to work out whether Circle is just being slow to spin up, or I've done something wrong \ud83e\udd14 \nMore likely the latter, but I don't know \ud83d\ude02 . Pushing a new commit was enough to get Circle running again, couple stupid mistakes later (shebang and file permissions) it's managed to get past that stage.\nNext steps is to make sure I can stop a build from continuing but with a successful code!. @sunshinejr So noticing two things immediately, due to the way CircleCI separate everything into isolate stages it makes it pretty difficult to exit early with a success flag (obviously you can drop a failure at any point in time).\nThe other thing is that Circle don't provide an easy way to get a range of commits, only the current commit. This in theory works for things like this pull request where it's running every commit, but in the instance where a user pushed up x commits and then creates a pull request where they only update a doc - it would only check the changes on the latest commit.\nThe second point is easier to fix with a few extra commands in order to work out the range of commits based on the branch, and diffing against master rather than solely on a given commit. Though honestly I'm not sure how to deal with the first one.\nObviously failing is an easy solution, but that would be a royal pain in the ~self censorship~ as you'd always have to find out why it failed. Another possible solution is to define a env variable \"trivial_changes\" and if that's found you just skip all the build stages (kind of messy, easy to make mistakes with future changes).\nMaybe this wasn't the card to learn Circle with \ud83d\ude02 \nWilling to take advice at this point?. @pedrovereza Yeah! I think I saw that exact post in fact, but unfortunately when I did it was saying that the command circleci did not exist!\nSee this build: https://circleci.com/gh/Moya/Moya/1898?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link. You may be right about the Circle 2.0 stuff! @sunshinejr if you wanna give it a go and just see if it works then great -- The script is fairly simple from that point.\nShall we close this PR and move discussion back to #1286 until we know the situation?. ",
    "yeskunall": "I found this article that shows how to skip CI builds if changes are in a certain directory by combining git hooks with a .ciignore (or any name) file. The only problem is that git hooks are local and are not copied over when a repo is cloned or forked, so I've hit a dead-end there \ud83d\ude13\nI'm still looking for a way to achieve this in CircleCI tho \ud83d\ude05. Thanks @SD10! \ud83d\ude01. Sorry, I knew I would make the mistake of requesting this to be merged into master.. Oops, looks like it's okay to have this merged into master. LMK if I'm wrong, and I'll open one to have it merged into the development branch instead!. All right, ping me if I need to change anything \ud83d\ude01. No, no, completely agreed. I kinda had the feeling this would be brought up right after I made the PR \ud83d\ude4a\nI will update the PR now. I love the use of the XOR operator too! Intent could not be clearer!. ",
    "Sue2015": "Have u solved this issue? I came across the same issue~. ",
    "TheCodeor": "@wz1383691 \u73b0\u5728\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u5417\uff0c\u6211\u65b0\u9879\u76ee\u60f3\u7528\u8fd9\u4e2a\uff0c\u770b\u89c1\u4f60\u7684\u95ee\u9898\u6709\u70b9\u6015\uff01\u4f60\u5728release\u73af\u5883\u5148\u8bd5\u4e86\u5417\uff1f. ",
    "volodg": "@AndrewSB\n1. Created Observable/Single should guarantee callback calling\n2. Before request was storing reference to provider, so this changes incompatible with legacy code\n3. rxRequestWithProgress is holding the strong reference, why it is ok for this method and bad for similar one: request, be consistent.\n4. It is normal when closure holds required info for call\n5. In my source code, I am creating separate provider with different parameters for each request, so it will be quite complicated task to write holding logic for such scenario to avoid leaks. @AndrewSB how to handle the disposed case when no callback is called?. @AndrewSB \nthis example:\n```Swift\n    let singleStream = Observable\n      .interval(1, scheduler: MainScheduler.instance)\n      .timeout(1, scheduler: MainScheduler.instance)\n      .asSingle()\n      .do(onNext: { _ in\n      print(\"onNext\")\n    }, onError: { _ in\n      print(\"onError\")\n    }, onSubscribe: {\n      print(\"onSubscribe\")\n    }, onSubscribed: {\n      print(\"onSubscribed\")\n    }, onDispose: {\n      print(\"onDispose\")\n    })\nsingleStream.subscribe().dispose()\n\nprints:\nonSubscribe\nonSubscribed\nonDispose\n. @pedrovereza Can be it approved & merged now?. This solution contains a bug, example:Swift\n    var stream = Observable.create { observer in\n      return Disposables.create {\n      }\n    }\nstream.subscribe(onError: { _ in\n  print(\"doOnError\")\n}, onCompleted: {\n  print(\"doOnCompleted\")\n}, onDispose: {\n  print(\"doOnDispose\")\n})\n\n```\nNo callback is called !!! Observable should not be silent. If you are saying it is disposed when self is nil, call  onDispose callback. @AndrewSB \nthis example:\n```Swift\n    let singleStream = Observable\n      .interval(1, scheduler: MainScheduler.instance)\n      .timeout(1, scheduler: MainScheduler.instance)\n      .asSingle()\n      .do(onNext: { _ in\n      print(\"onNext\")\n    }, onError: { _ in\n      print(\"onError\")\n    }, onSubscribe: {\n      print(\"onSubscribe\")\n    }, onSubscribed: {\n      print(\"onSubscribed\")\n    }, onDispose: {\n      print(\"onDispose\")\n    })\nsingleStream.subscribe().dispose()\n\nprints:\nonSubscribe\nonSubscribed\nonDispose\n```\nSo onDispose at least should be called, please fix. ",
    "jimUpdate": "by the way , env: \npod 'Moya','8.0.5'\n  pod 'RxSwift', '3.6.1'\n. ",
    "nmccann": "I ended up improving this by introducing my own plugin as well as my own protocol that targets could conform to:\n```swift\nstruct SessionCredentials {\n  let username: String\n  let password: String\n}\nprotocol SessionAuthorizable: AccessTokenAuthorizable {\n  var credentials: SessionCredentials? { get } //If you never mix authenticated and non-authenticated endpoints in your targets, you could make credentials non-nullable\n}\nprivate extension SessionAuthorizable {\n  func authorization() -> String? {\n//Convert credentials to a Base64 encoded string, prefixed with \"Basic\"\n  }\n}\nclass SessionPlugin: PluginType {\n  public func prepare(_ request: URLRequest, target: TargetType) -> URLRequest {\n    guard let authorizable = target as? SessionAuthorizable, let value = authorizable.authorization() else {\n        return request\n    }\nvar request = request\nrequest.addValue(value, forHTTPHeaderField: \"Authorization\")\nreturn request\n\n}\n}\n```\n```swift\nenum LoginService {\n  case login(username: String, password: String)\n}\nextension LoginService: SessionAuthorizable {\n  var authorizationType: AuthorizationType {\n    switch self {\n    case .login:\n      return .basic\n    }\n  }\nvar credentials: SessionCredentials? {\n    switch self {\n    case .login(let username, let password):\n      return SessionCredentials(username: username, password: password)\n    }\n  }\n}\n```\nI chose to build on AccessTokenAuthorizable and it's AuthorizationType enum - alternately you could introduce your own or get rid of it entirely if you only have one supported authentication type.. ",
    "dehlen": "Thank you very much. Your effort is much appreciated on my side :) I'll close this issue since my problem is solved this way.. ",
    "adimango": "Hey @sunshinejr, yes it works!\nThank You.. A big thank you for all your work @sunshinejr and @ashfurrow.\nThe app is still basic but the next release is in progress.. \ud83d\ude03 \nI'll be happy to support/contribute.. ",
    "armandsLa": "Thanks. ",
    "Nikolaev": "Thank you for reply @sunshinejr !\nEventually i decide to implement my own uploader of multipart data using URLSession.\nSubclassing SessionManager is not good idea because in that case my code will have dependency on Alamofire future changes. That will increase cost of code maintance.\nAnd I can't force backend developers to change the type of authentification (sadly). \nSo, own implementation is the best solution for me.\nAnyway I still use Moya for all the other network requests. Moya is very good! I like the way it works and the way it progress!. ",
    "msalmanST": "Thanks for your quick response.\nAs per https://github.com/CocoaPods/CocoaPods/pull/6811 are you guys thinking to give any such support in coming future ?\nEdit: Sorry I mean to point https://github.com/CocoaPods/CocoaPods/issues/6899. Thanks for your quick response.\nAs per https://github.com/CocoaPods/CocoaPods/pull/6811 are you guys thinking to give any such support in coming future ?\nEdit: Sorry I mean to point https://github.com/CocoaPods/CocoaPods/issues/6899. ",
    "msalman": "@BasThomas Any guidelines for me after the release of cocoapod version 1.5 beta . ",
    "xiaoyaogaojian": "I'm a Chinese. English documents always took me longer time to read and sometimes, because of my poor English, even make me misunderstand something. So I think having the Chinese documents is helpful to make this project more accessible to Chinese-speaking developers and, in turn,  could attract more contributors to improve this project including keep the Chinese documents up-to-date.. ",
    "marcomorain": "@Sherlouk @sunshinejr you can put the string [ci skip] into the commit message to skip CI builds - does that do what you need?. ",
    "afonsograca": "Hi,\nI was trying to give this a go, but it seems that this requires more changes than first thought. Since Encodable doesn't conform to itself, when trying to encode\nswift\nJSONEncoder().encode(encodable)\nWe get the following error Cannot invoke 'encode' with an argument list of type '((Encodable))' because it needs a concrete type to conform to the protocol.\nThis could be solved by defining making the Task enum generic, but this would involve a major breaking change, which in my opinion is not worth it. Encoding can be done prior to the request call. . @SD10 damn, only saw your message now. I totally missed the open PR.\nI ended type erasing the protocol and from the tests I've done it seems to work. I opened a PR, but given that there's already an open PR regarding this, please disregard mine. \nAll in all, this was a good brain teaser :D haven't had to use type erasure in a while.\nKeep up the good work!. My rationale behind this addition was something along the lines of \"hey, just in case you're wondering you can stub your requests\". So beginners tinkering with for the first time don't have to go looking for specific sections in the documentation.\nMaybe going into more depth regarding stubbing, could be done, as @SD10 suggested, in a Stubbing.md. There we could explain the different options of stubbing, the default argument, etc. \nI can do that write up.. ",
    "LeLuckyVint": "@sunshinejr i have a problem with associated value that confirms protocol Equatable.\nWhen I want to create Data using JSONEncoder with associated value Xcode I have en error\n\nThis is described in this thread. @SD10 can you look into it, please. I have all tests passed on my local machine, but CI is failing and the errors are confusing. ",
    "AYastrebov": "@sunshinejr ok, I'll do it this week. ",
    "wieweb": "@SD10 I see your point. But when using requestParameters ContentType get set correctly.\nI did expect the same behaviour on requestData.\nMaybe we can combine this issue with #1325. Something like requestEncodable(encodable:jsonEncoder:) with correct ContentType headers ;-)\n. ",
    "narlei": "@sunshinejr  I created a PR here https://github.com/Moya/Moya/pull/1332\nThank you!. @sunshinejr  I created a PR here https://github.com/Moya/Moya/pull/1332\nThank you!. @ashfurrow thank's for the invite. Accepted just now! It's a pleasure be a part of Moya project.. @ashfurrow thank's for the invite. Accepted just now! It's a pleasure be a part of Moya project.. Done, thank you for your tip.. ",
    "uddinr": "please ignore this, the issue was related to incorrect json format. ",
    "IgorNiko83": "mapImage() failed parse image request which have destination, so - may be can help.\n```\npublic extension Response {\nfunc mapImage(token: Moya.TargetType) throws -> UIImage {\n    var image: UIImage?\n    switch token.task {\n    case let .downloadDestination(downloadDestination):\n        if let httpResponse = response, let url = httpResponse.url {\n            let fileUrl = downloadDestination(url, httpResponse).destinationURL\n            if let data = try? Data(contentsOf: fileUrl) {\n                image = UIImage(data: data)\n            }\n        }\n    case let .downloadParameters(_, _, downloadDestination):\n        if let httpResponse = response, let url = httpResponse.url {\n            let fileUrl = downloadDestination(url, httpResponse).destinationURL\n            if let data = try? Data(contentsOf: fileUrl) {\n                image = UIImage(data: data)\n            }\n        }\n    default:\n        image = try? mapImage()\n    }\n\n    guard let result = image else {\n        throw MoyaError.imageMapping(self)\n    }\n\n    return result\n}\n\n}\n```\nusage\nfunc requestOptionalImage(_ token: Target) -> Observable<UIImage?> {\n        return self.rx.request(token)\n            .asObservable()\n            .filterSuccessfulStatusCodes()\n            .map({ try $0.mapImage(token: token) })\n            .catchError { error in\n                return Observable.error(self.mapError(error))\n        }\n    }. mapImage() failed parse image request which have destination, so - may be can help.\n```\npublic extension Response {\nfunc mapImage(token: Moya.TargetType) throws -> UIImage {\n    var image: UIImage?\n    switch token.task {\n    case let .downloadDestination(downloadDestination):\n        if let httpResponse = response, let url = httpResponse.url {\n            let fileUrl = downloadDestination(url, httpResponse).destinationURL\n            if let data = try? Data(contentsOf: fileUrl) {\n                image = UIImage(data: data)\n            }\n        }\n    case let .downloadParameters(_, _, downloadDestination):\n        if let httpResponse = response, let url = httpResponse.url {\n            let fileUrl = downloadDestination(url, httpResponse).destinationURL\n            if let data = try? Data(contentsOf: fileUrl) {\n                image = UIImage(data: data)\n            }\n        }\n    default:\n        image = try? mapImage()\n    }\n\n    guard let result = image else {\n        throw MoyaError.imageMapping(self)\n    }\n\n    return result\n}\n\n}\n```\nusage\nfunc requestOptionalImage(_ token: Target) -> Observable<UIImage?> {\n        return self.rx.request(token)\n            .asObservable()\n            .filterSuccessfulStatusCodes()\n            .map({ try $0.mapImage(token: token) })\n            .catchError { error in\n                return Observable.error(self.mapError(error))\n        }\n    }. ",
    "ninasaveljeva": "Thanks for quick response.\nI've tried that before and once again now. Same thing. Installed 8.0.5 but could not convert to current swift syntax :( Ask to change e.g \n```\npublic struct AccessTokenPlugin: PluginType {\n/// The access token to be applied in the header.\npublic let token: String\n\nprivate var authVal: String {\n    return \"Bearer \" + token\n}\n\n```\nto \n```\npublic struct AccessTokenPlugin: PluginType {\n/// The access token to be applied in the header.\npublic let token: String\n\nfileprivate var authVal: String {\n        return \"Bearer \" + token\n    }\n. Thanks for quick response.\nI've tried that before and once again now. Same thing. Installed 8.0.5 but could not convert to current swift syntax :( Ask to change e.g\npublic struct AccessTokenPlugin: PluginType {\n/// The access token to be applied in the header.\npublic let token: String\n\nprivate var authVal: String {\n    return \"Bearer \" + token\n}\n\n```\nto \n```\npublic struct AccessTokenPlugin: PluginType {\n/// The access token to be applied in the header.\npublic let token: String\n\nfileprivate var authVal: String {\n        return \"Bearer \" + token\n    }\n``. Ended up by renewing Xcode to 9.0 and install Moya 9.0. Ended up by renewing Xcode to 9.0 and install Moya 9.0. @SD10  If i add throw inside .request handling i've got a complaint about using throw in non-throwing function:Invalid conversion from throwing function of type '(_) throws -> ()' to non-throwing function type 'Completion' (aka '(Result) -> ()')`. Thanks, guys. Sounds good. I'll try you decisions :)\n. ",
    "mazz": "Hi @SD10 thanks for the prompt response. I changed the .request to .requestPlain and that fixed my compile error but at runtime now I'm getting back 400 and 500 errors from the server calls that would return 200 before.. @SD10  yeah I understand what is going on. I'll have to refactor task a bit to segment between the various calls that have parameters and the ones that do not. I was lazily bunching them all together with a catch-all .request Thanks for the help! Is there a little example snippet somewhere where .requestParameters is used? Will help me get up and running.. ",
    "weakish": "1409 has been merged..",
    "0111b": "Thank you all for the review. As far of now I see these action items:\n1. Add more comments to the source to describe solved problem and implementation details\n2. Cover new code with unit tests\n3. Implement some performance  tests\nWill work on this on the weekend. Is there any guidance for writing tests?\n@ashfurrow actually I do not test yet on big responses. It is preliminary update.. It is requirements of the CodingKey protocol:\n\nThe value to use in an integer-indexed collection (e.g. an int-keyed dictionary).\nRequired.. stayed from the original code, describes data intention. Agreed that it can be removed. \n",
    "RockyAo": "@sunshinejr Thanks for answer, that's worked .. ",
    "vincentSuwenliang": "@BasThomas  Thanks for your reply. I have go through the tutorial, followed the instructions, but when upload image using uploadCompositeMultipart failed. Previously using the old version of Moya using var parameters: [String:Any]? { } + var task: Task {} succeed.   . @BasThomas now i have 1. var params =  [String:Any]() params[\"uuid\"] = uuid params[\"token\"] = token  2. let imageFormData = MultipartFormData(provider: .data(asset), name: \"photo\", fileName: photoName, mimeType: \"image/jpg\")  i just tried transform dict to data using let paramsData = NSKeyedArchiver.archivedData(withRootObject: params)  let paramsFormData = MultipartFormData(provider: .data(paramsData), name: \"description\")  and then return .uploadMultipart([imageFormData, paramsFormData])  but still get the same error 404. Do you have any clues? thanks for your help. @BasThomas Oh sorry, now get 500 error. i think the backend do not handle the \"description\" key. But in the old version, I could just using dictionary +  data   way to upload image + params. @BasThomas in my case,  i have almost 10 parameters with the image,  and there are int and bool type that need to transform to data type . And need to transfrom every parameter to data type seems would be more tedious than previous params dict + data way.. @sunshinejr  Yeah, understand and thanks for your work. Previously,  using var parameters: [String:Any]? { } + var task: Task {} also seems a little bit weird.  And sorry that i'm not clear what could i do, you mean create a PR without submitting any codes?. ",
    "hamada147": "I see. No your documentation is really good. It was my mistake for not checking the release notes before using the new version.. I know, it's a really bad practice specially if the request take a long period of time. But, I have to use it. Anyway I'm trying it right now.. Unfortunately that didn't work.. because of API bad design. I need to get some data from request#1 then use these data for request#2 then use that data for the final request#3.. @SD10 I was doing it this way and became way too messy. I will look into Promise and get back to you.. @SD10  I looked into it and I did a small test and this will work really good but since I'm using the Notification Center a lot in my project. I decided to go with that. So the request would work in Asynchronies manner but only send the request after it receives the response from the previous request and so on. . @SD10 you can mark it as closed ;) . ",
    "mwapptest": "I am using Xcode 9.0, swift 4.0. and cocoapod. My pod file mentioned pod 'Moya' but when I start with pod install it always downloaded 'Using Moya (8.0.3)', how can I update to latest moya 9.0?. it works now, thanks @Lixyss  & @SD10 . ",
    "Aaslte": "Oh I see. ",
    "tosbaha": "@SD10 on line }.flatMap { token -> Observable<Token> in\n@sunshinejr I added  .flatMap { i -> Single<Token> in and .catchError {  error  -> Single<Token> in didn't make any difference. I think there is a typo somewhere that I can't see.\n. Thanks @Mazorati for trying to help. I have solved this issue couple of days ago and your issue notification helped to remember this issue again. For anyone interested, I have managed to solve the issue both with Single and Observable My error was the parameter of retryWhen which nobody caught the error :\\  \nPS: I believe that just like NetworkStack, this project may also benefit from authentication and authorization handler. \n```swift\n// With Single\nextension PrimitiveSequence where TraitType == SingleTrait, ElementType == Response {\n    /// Tries to refresh auth token on 401 errors and retry the request.\n    /// If the refresh fails, the signal errors.\n    public func retryWithAuthIfNeeded() ->  Single {\n        return self.retryWhen{ (e: Observable) in\n            Observable.zip(e, Observable.range(start: 1, count: 3), resultSelector: { $1 })\n                .flatMap { i in\n                    return provider.rx.request(.refresh(token: \"abc\"))\n                        .filterSuccessfulStatusAndRedirectCodes()\n                        .map(Token.self)\n                        .catchError {  error  in\n                            if case MoyaError.statusCode(let response) = error  {\n                                if response.statusCode == 401 {\n                                    // Logout\n                                    do {\n                                        try User.logOut()\n                                    } catch _ {\n                                        logger.warning(\"Failed to logout\")\n                                    }\n                                }\n                            }\n                            return Single.error(error)\n                        }.flatMap { token -> Single in\n                            do {\n                                try token.saveInRealm()\n                            } catch let e {\n                                logger.warning(\"Failed to save access token\")\n                                return Single.error(e)\n                            }\n                            return Single.just(token)\n                    }\n            }\n        }\n    }\n}\n// With Observable just like linked example.\npublic extension ObservableType where E == Response {\n    /// Tries to refresh auth token on 401 errors and retry the request.\n    /// If the refresh fails, the signal errors.\n    public func retryWithAuthIfNeeded() ->  Observable {\n        return self.retryWhen{ (e: Observable) in\n            Observable.zip(e, Observable.range(start: 1, count: 3), resultSelector: { $1 })\n                .flatMap { i in\n                    return provider.rx.request(.refresh(token: \"abc\"))\n                        .filterSuccessfulStatusAndRedirectCodes()\n                        .asObservable()\n                        .map(Token.self)\n                        .catchError {  error  in\n                            if case MoyaError.statusCode(let response) = error  {\n                                if response.statusCode == 401 {\n                                    // Logout\n                                    do {\n                                        try User.logOut()\n                                    } catch _ {\n                                        logger.warning(\"Failed to logout\")\n                                    }\n                                }\n                            }\n                            return Observable.error(error)\n                        }.flatMap { token -> Observable in\n                            do {\n                                try token.saveInRealm()\n                            } catch let e {\n                                logger.warning(\"Failed to save access token\")\n                                return Observable.error(e)\n                            }\n                            return Observable.just(token)\n                    }\n            }\n        }\n    }\n}\n``. @Mazorati I am not super confident about RxSwift. However according to my understanding, it gives us better control for each try. For example you can checki` and act differently. For first try do this, second try do that etc. I think at the end of the day, you prefer whatever works for you.. @AndrewSB I am sorry to say this, but I don't think opening a new issue will help. I am sure I will sound like ungrateful by writing this. I opened this issue 16 days ago. I am not so much familiar with RxSwift and Moya. I tried to make it work but couldn't. However none of the contributors of this repo looked at it thoroughly. It took me 4 days to solve by myself. I am sure they would find out my error or suggest best practices if they did. Again I sound ungrateful for by complaining on OSS repo. I know everybody is busy with their job and other daily stuff but I don't think that opening a new issue on the same subject will result in different output. It looks like you are focusing more on trivial things like fixing typo on a README, or decreasing amount of days for stale-bot. I don't see the point of decreasing days of stale-bot. I follow most of the contributors and their projects. I am really grateful for what you all share. I love for example Ash Furrow's contributions and his positive attitude. However, not everything works as in theory. I opened two issues on similar subject and I really don't believe that I will get a solution on third.. @AndrewSB I am sorry to say this, but I don't think opening a new issue will help. I am sure I will sound like ungrateful by writing this. I opened this issue 16 days ago. I am not so much familiar with RxSwift and Moya. I tried to make it work but couldn't. However none of the contributors of this repo looked at it thoroughly. It took me 4 days to solve by myself. I am sure they would find out my error or suggest best practices if they did. Again I sound ungrateful for by complaining on OSS repo. I know everybody is busy with their job and other daily stuff but I don't think that opening a new issue on the same subject will result in different output. It looks like you are focusing more on trivial things like fixing typo on a README, or decreasing amount of days for stale-bot. I don't see the point of decreasing days of stale-bot. I follow most of the contributors and their projects. I am really grateful for what you all share. I love for example Ash Furrow's contributions and his positive attitude. However, not everything works as in theory. I opened two issues on similar subject and I really don't believe that I will get a solution on third.. @Blackjacx \n\nPS: Cool would be to explain how to extract the target from an endpoint (since this was my initial question) before closing this issue. This would be important when using the request closure and you need to switch on your TargetType there.\n\nAFAIK, you can't extract target from Endpoint in requestClosure. Since requestClosure is called with\nswift\n requestClosure(endpoint, performNetworking)\nOnly thing you can do is try to identify Target by checking url, method, parameters etc of Endpoint which may lead to code smell. I think better solution is adding Target as parameter to  requestClosure You can also try to use EndpointClosure in which you have access to Target\n. ",
    "Mazorati": "this works for me:\n```swift\nimport Foundation\nimport RxSwift\nimport Moya\nimport XCGLogger\nextension PrimitiveSequence where TraitType == SingleTrait, ElementType == Response {\n    public func retryWithAuthIfNeeded() -> Single {\n        return retryWhen { e in\n            Observable.zip(e, Observable.range(start: 1, count: 3),\n                           resultSelector: { $1 })\n                .flatMap { i -> PrimitiveSequence in\n                    var _xAppToken = XAppToken()\n                    return DataProvider.rx\n                        .request(.refreshToken(token: _xAppToken.refreshToken!))\n                        .filterSuccessfulStatusCodes()\n                        .mapObject(Access.self)\n                        .catchError { error in\n                            if case MoyaError.statusCode(let response) = error  {\n                                if response.statusCode == 401 {\n                                    // Logout\n                                }\n                            }\n                            return Single.error(error)\n                        }.flatMap({ access -> PrimitiveSequence in\n                            XCGLogger.default.debug(access.accessToken)\n                            XCGLogger.default.debug(access.refreshToken)\n                        return Single.just(access)\n                    })\n        }\n    }\n}\n\n}\n. @tosbaha but i don't understand why do we use Observable.zip(e, Observable.range(start: 1, count: 3) here? Method .retry(3) is the same?. @rlam3 wrong return type after mapping. Use https://github.com/ivanbruel/Moya-ObjectMapper. @rlam3 wrong return type after mapping. Use https://github.com/ivanbruel/Moya-ObjectMapper. @AndrewSB thank you for your comment. It subscribes both fromLocal and fromNetwork and take first signal then - unsubscribe.\nREQUEST trainerPhoto(\"82910179ae1df8a8ae1e0e1f50180a47\")\n2018-01-11 20:08:48.559: photo -> subscribed\n2018-01-11 20:08:48.560: photo -> Event next(, {400, 400})\n2018-01-11 20:08:48.561: photo -> isDisposed\n2018-01-11 20:08:48.572549+0300 myapp[8118:1875217] Task <65DA3953-20E8-4EBA-8848-303E10F240D6>.<3> finished with error - code: -999\n2018-01-11 20:08:48.573236+0300 myapp[8118:1875202] Task <65DA3953-20E8-4EBA-8848-303E10F240D6>.<3> HTTP load failed (error code: 12 [1:12])\n```\n. ",
    "rsardek": "The above settings presumes that the app uses Moya and RxSwift. \nWhat if a project:\n- has the same use-case as @asasdasasd  ( make an authenticated call with a token -> server responds token has expired -> refresh the token making an intermediate call -> and only after that make the original request again )\n- but doesn't use RxSwift\nHow can I handle such case? . ",
    "Vict0rS": "Pull Request is here #1410.. Changelog and tests are updated.. It seems like there are some network connection inconsistencies. When I run tests locally they appear to pass or fail at random. The failing test requires to upload image in 5 seconds so definitely looks like network connection inconsistency.\n\n. I experience the same issue when running tests in version from master, so it doesn't seem like my fault. I guess we either need to increase wait time for this test or rerun tests a couple of times until they pass.. Was happy to help :). Sounds like a good idea to me. I pushed the change.. ",
    "ranhsd": "Hi @sunshinejr \nThanks for your quick response.\nIt\u2019s really what I meant. I need to know when I can set the plugin to the provider. Because the first time that I create the provider and the user is not logged in I don\u2019t really have the token I need to set the plugin on the provider only when I really have it (after user logged in and access token returns from the server) but I already initiate the provider before with the plugin. I need to find a way to recreate the provider again but this time to send the access token to the plugin \nIf you need more info please let me know\nThanks,\nRan. Hi @sunshinejr \nit looks better. The question is if the tokenClosure will be executed in each api call ? \nThanks!\nRan.. @sunshinejr Thank you very much!!. Hi @SD10 wow it's amazing. The implementation is exactly what I wanted. They even use the same name :) \nBTW - it's the first time I see it. \nThanks!. ",
    "kavanbrandon": "@sunshinejr authPlugin doesn't seem to work when using <MultiTarget> like below. Is there a way to implement that? Seems strange because NetworkLoggerPlugin works fine using <MultiTarget>\nswift\nlet tokenClosure: () -> String = {\n    return Keychain.getToken() // here you can specify how to retrieve a token\n}\nlet authPlugin = AccessTokenPlugin(tokenClosure: tokenClosure)\nlet provider = MoyaProvider<MultiTarget>(plugins: [authPlugin]). @sunshinejr Thanks!. ",
    "fatbunboy": "@sunshinejr \nHi, it is having an error when I follow your sample code.\nXcode Error: \"Function produces expected type 'String'; did you mean to call it with '()'?\"\nCould you advise this issue, please?\nlet tokenClosure: () -> String = {\n    return Keychain.getToken()\n}\nlet authPlugin = AccessTokenPlugin(tokenClosure: tokenClosure)\nXcode version: 9.4.1 . @sunshinejr \nHi, it is having an error when I follow your sample code.\nXcode Error: \"Function produces expected type 'String'; did you mean to call it with '()'?\"\nCould you advise this issue, please?\nlet tokenClosure: () -> String = {\n    return Keychain.getToken()\n}\nlet authPlugin = AccessTokenPlugin(tokenClosure: tokenClosure)\nXcode version: 9.4.1 . @sunshinejr \nI finally solved this issue by using code below, hope it could help who are facing the same\nvar tokenClosure: String {\n    return Keychain.getToken()\n}\nlet authPlugin = AccessTokenPlugin(tokenClosure: tokenClosure). @sunshinejr \nI finally solved this issue by using code below, hope it could help who are facing the same\nvar tokenClosure: String {\n    return Keychain.getToken()\n}\nlet authPlugin = AccessTokenPlugin(tokenClosure: tokenClosure). ",
    "jgongo": "Yes, exactly that. Sorry for the noise! And congratulations for this great framework!. The idea would be to substitute BackendError with a generic inheriting from Decodable, so you can invoke that property/method passing the type of the error response and get the error returned by the server. It would be similar to the map method, where you pass the Decodable type to use when decoding the success response as a parameter.. The idea would be to substitute BackendError with a generic inheriting from Decodable, so you can invoke that property/method passing the type of the error response and get the error returned by the server. It would be similar to the map method, where you pass the Decodable type to use when decoding the success response as a parameter.. ",
    "spookyvision": "ok, will do!. it seems I cannot create a new PR with this one open, so closing it. First time doing this, hope I did things right :). @AndrewSB I rebased onto master as requested by @sunshinejr - my commits are actually far less. Might have messed up there. Should I start from scratch and cherrypick them?. ",
    "GG526": "I can't find Moya in the Checkouts folder. ",
    "edulpn": "carthage update --no-use-binaries will generate RxMoya.framework, but I'm not being able to use RxMoyaProvider, Xcode gives me:\n\n. My bad, I wasn't aware that Moya  10.0.0 extinguishes RxMoyaProvider and goes the MoyaProvider.rx way (see here). Kind of found a way around...\nI created a new folder somewhere else on my computer, created a new Cartfile, and added only github \"Moya/Moya\". Ran carthage update --platform iOS and it built with SUCCESS. I will try to just drag the generated frameworks from the new test folder to my project and see if it works.\nI know this might have to be something weird with Carthage and not Moya (or it's submodules), so I'll probably try to ask there, but I'm pretty sure this shouldn't happen, as Carthage just checks code out from git repos and build them and is not aware of the \"surrounding environment\". Maybe I bumped into some weird cache issue?\nAnyways, hope this, at least can help someone else.. More details:\nIt all looks to gravitate around both Moya and RxSwift, not ReactiveSwift, being installed through Carthage. Suppressing either one from the Cartfile will result in successful build (which I think happens because Moya already has RxSwift as a submodule to make RxMoya work).\nI'm good as long as both are already installed and working as intended, but this might impact someone else in some weird way.\n. ",
    "starkite": "thank you so much.\nit's works for me!. @pietrocaselani \nthanks for your suggestion.\nit's works for me now!. ",
    "JohnTheBastard": "Moya-ObjectMapper only has two source files that I needed, so I just moved them into my project and removed the framework. That did fix the runtime issue and allow me to removed the Rx frameworks from the project, but I still don't know a way to build ReactiveMoya without also building Rx.. Okay, good to know. Thanks. (It may be worth mentioning in the documentation.). Sure, I'll try to put up a PR in the next few days.. Is there anything else I need to do for this to be merged? (I don't have write access, so can't do it myself.). Got it, no problem. Thanks!. Glad to help!. ",
    "canny09": "@SD10 \nI write all the user requests in a file, like this:\n```swift\n// UserNetServer.swift\nlet userProvider = RxMoyaProvider(plugins: [networkActivity, RequestLoadingPlugin()]) // provider\nclass UserNetServer {\nclass func register(account: String, password: String) -> Observable<ResponseResult> {\n    return requestWithTarget(.register(account: account, passwd: password)).retry(2)\n}\n\n... // omit others like obve\n// ResponseResult is a enum\n// enum ResponseResult {\n//    case successful(response: Response)\n//    case failed\n//}\n    private class func requestWithTarget(_ target: User) -> Observable {\n        let secondScheduler = ConcurrentDispatchQueueScheduler(queue: DispatchQueue.global())\n        return\n            userProvider.request(target).mapJSON().map { json -> ResponseResult in\n                let jsonDict = json as! [String : Any]\n                print(\"path: (target.path) jsonDict: (jsonDict)\")\n                if let response = Response.deserialize(from: jsonDict) {\n                    guard let _ = response.code else {\n                        return .failed\n                    }\n                    return .successful(response: response)\n                }else {\n                    return .failed\n                }\n            }.asObservable().observeOn(secondScheduler)\n    }\n}\nthen the code for request in \"viewModel\",swift\n// RegisterViewModel.swift\nlet accountAndPassword = Driver.combineLatest(registerInput.accountInput, registerInput.passwordInput) { ($0, $1)}\n// the \"registerResult\" subscribed by viewController\nregisterResult = registerInput.registerTap.withLatestFrom(accountAndPassword).flatMap {\n    UserNetServer.register(account: $0, password: $1).asDriver(onErrorJustReturn: .failed)\n    }.map { (responseResult) in\n       switch responseResult {\n       case let .successful(response):\n            return response\n       case .failed:\n            return nil\n     }\n}\nfinally, the code in viewController:swift\n// RegisterViewController\nregisterOutput.registerResult.drive(onNext: { response in\n            if let code = response?.code {\n                switch code {\n                case .success:\n                    //...\n                case .accountExist:\n                    //...\n                default:\n                    //...\n                }\n                return\n            }\n        }).disposed(by: disposeBag)\n```\nThat is my request code, may be too much, but I think may be can give you more information. \u2639\ufe0f\nThanks for replying!. @SD10 \nI write all the user requests in a file, like this:\n```swift\n// UserNetServer.swift\nlet userProvider = RxMoyaProvider(plugins: [networkActivity, RequestLoadingPlugin()]) // provider\nclass UserNetServer {\nclass func register(account: String, password: String) -> Observable<ResponseResult> {\n    return requestWithTarget(.register(account: account, passwd: password)).retry(2)\n}\n\n... // omit others like obve\n// ResponseResult is a enum\n// enum ResponseResult {\n//    case successful(response: Response)\n//    case failed\n//}\n    private class func requestWithTarget(_ target: User) -> Observable {\n        let secondScheduler = ConcurrentDispatchQueueScheduler(queue: DispatchQueue.global())\n        return\n            userProvider.request(target).mapJSON().map { json -> ResponseResult in\n                let jsonDict = json as! [String : Any]\n                print(\"path: (target.path) jsonDict: (jsonDict)\")\n                if let response = Response.deserialize(from: jsonDict) {\n                    guard let _ = response.code else {\n                        return .failed\n                    }\n                    return .successful(response: response)\n                }else {\n                    return .failed\n                }\n            }.asObservable().observeOn(secondScheduler)\n    }\n}\nthen the code for request in \"viewModel\",swift\n// RegisterViewModel.swift\nlet accountAndPassword = Driver.combineLatest(registerInput.accountInput, registerInput.passwordInput) { ($0, $1)}\n// the \"registerResult\" subscribed by viewController\nregisterResult = registerInput.registerTap.withLatestFrom(accountAndPassword).flatMap {\n    UserNetServer.register(account: $0, password: $1).asDriver(onErrorJustReturn: .failed)\n    }.map { (responseResult) in\n       switch responseResult {\n       case let .successful(response):\n            return response\n       case .failed:\n            return nil\n     }\n}\nfinally, the code in viewController:swift\n// RegisterViewController\nregisterOutput.registerResult.drive(onNext: { response in\n            if let code = response?.code {\n                switch code {\n                case .success:\n                    //...\n                case .accountExist:\n                    //...\n                default:\n                    //...\n                }\n                return\n            }\n        }).disposed(by: disposeBag)\n```\nThat is my request code, may be too much, but I think may be can give you more information. \u2639\ufe0f\nThanks for replying!. @SD10 em..sorry.. may be has some problems in my code. The response is struct:\nswift\nstruct Response: HandyJSON {\n    var code: ResponseCode? // an enum of our custom response code\n    var message: String?\n    var data: Any?\n}\n. @SD10 em..sorry.. may be has some problems in my code. The response is struct:\nswift\nstruct Response: HandyJSON {\n    var code: ResponseCode? // an enum of our custom response code\n    var message: String?\n    var data: Any?\n}\n. @sunshinejr \nHey. Thanks for comment.\nI add the default NetworkLoggerPlugin in provider, and then log like this:\nconsole\n\"Moya_Logger: [18/01/2018 00:27:40] HTTP Request Method: PUT\"]\n[\"Moya_Logger: [18/01/2018 00:27:40] Response: <NSHTTPURLResponse: 0x17403d820> { URL: http://xxx.xxx.xxx.xxx/shop/api/v1/shop/decorations/buy?ids%5B%5D=127&ids%5B%5D=135 } \n{ status code: 400, headers \n{Connection = close;\n\"Content-Type\" = \"application/json;charset=UTF-8\";    \nDate = \"Wed, 17 Jan 2018 16:27:40 GMT\";   \n\"Transfer-Encoding\" = Identity;   \n\"X-Application-Context\" = \"gateway-service:default:8899\";\n} \n}]\nError: [\"status\": 400, \"exception\": org.springframework.web.bind.MissingServletRequestParameterException, \n\"message\": Required List parameter 'ids' is not present, \n\"timestamp\": 1516206460196, \n\"path\": /api/v1/shop/decorations/buy, \n\"error\": Bad Request]\nIt looks like Moya encode the parameter to ids[]=127, but own server not parse it. So, how do remove the []character? just like ids=127&ids=135?. @sunshinejr \nHey. Thanks for comment.\nI add the default NetworkLoggerPlugin in provider, and then log like this:\nconsole\n\"Moya_Logger: [18/01/2018 00:27:40] HTTP Request Method: PUT\"]\n[\"Moya_Logger: [18/01/2018 00:27:40] Response: <NSHTTPURLResponse: 0x17403d820> { URL: http://xxx.xxx.xxx.xxx/shop/api/v1/shop/decorations/buy?ids%5B%5D=127&ids%5B%5D=135 } \n{ status code: 400, headers \n{Connection = close;\n\"Content-Type\" = \"application/json;charset=UTF-8\";    \nDate = \"Wed, 17 Jan 2018 16:27:40 GMT\";   \n\"Transfer-Encoding\" = Identity;   \n\"X-Application-Context\" = \"gateway-service:default:8899\";\n} \n}]\nError: [\"status\": 400, \"exception\": org.springframework.web.bind.MissingServletRequestParameterException, \n\"message\": Required List parameter 'ids' is not present, \n\"timestamp\": 1516206460196, \n\"path\": /api/v1/shop/decorations/buy, \n\"error\": Bad Request]\nIt looks like Moya encode the parameter to ids[]=127, but own server not parse it. So, how do remove the []character? just like ids=127&ids=135?. @sunshinejr \nThanks. After reading the source code of URLEncoding, I write(just copy and modify simply the source code -_-) a custom encoding URLQueryArrayEncoding, the code is follow:\n```swift\n// QueryArrayEncoding.swift\nimport Foundation\nimport Alamofire\nimport CoreFoundation\nextension NSNumber {\n    fileprivate var isBool: Bool { return CFBooleanGetTypeID() == CFGetTypeID(self) }\n}\nstruct QueryArrayEncoding: ParameterEncoding {\npublic static var `default`: QueryArrayEncoding { return QueryArrayEncoding() }\n\nfunc encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n    var request = try urlRequest.asURLRequest()\n\n    guard let parameters = parameters else {return request}\n\n    guard let url = request.url else {\n        throw AFError.parameterEncodingFailed(reason: .missingURL)\n    }\n\n    if var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false), !parameters.isEmpty {\n        let percentEncodedQuery = (urlComponents.percentEncodedQuery.map { $0 + \"&\" } ?? \"\") + query(parameters)\n        urlComponents.percentEncodedQuery = percentEncodedQuery\n        request.url = urlComponents.url\n    }\n    return request\n}\n\nprivate func query(_ parameters: [String: Any]) -> String {\n    var components: [(String, String)] = []\n\n    for key in parameters.keys.sorted(by: <) {\n        let value = parameters[key]!\n        components += queryComponents(fromKey: key, value: value)\n    }\n    return components.map { \"\\($0)=\\($1)\" }.joined(separator: \"&\")\n}\n\nprivate func queryComponents(fromKey key: String, value: Any) -> [(String, String)] {\n    var components: [(String, String)] = []\n\n    if let array = value as? [Any] {\n        for value in array {\n            components += queryComponents(fromKey: key, value: value)\n        }\n    } else if let value = value as? NSNumber {\n        if value.isBool {\n            components.append((key, value.boolValue ? \"1\" : \"0\"))\n        } else {\n            components.append((key, \"\\(value)\"))\n        }\n    } else {\n        components.append((key, \"\\(value)\"))\n    }\n    return components\n}\n\n}\nIt works for me now. But I think there are more elegant solutions. \ud83d\ude14. @sunshinejr \nThanks. After reading the source code of ``URLEncoding``, I write``(just copy and modify simply the source code -_-)`` a custom encoding ``URLQueryArrayEncoding``, the code is follow:swift\n// QueryArrayEncoding.swift\nimport Foundation\nimport Alamofire\nimport CoreFoundation\nextension NSNumber {\n    fileprivate var isBool: Bool { return CFBooleanGetTypeID() == CFGetTypeID(self) }\n}\nstruct QueryArrayEncoding: ParameterEncoding {\npublic static var `default`: QueryArrayEncoding { return QueryArrayEncoding() }\n\nfunc encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n    var request = try urlRequest.asURLRequest()\n\n    guard let parameters = parameters else {return request}\n\n    guard let url = request.url else {\n        throw AFError.parameterEncodingFailed(reason: .missingURL)\n    }\n\n    if var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false), !parameters.isEmpty {\n        let percentEncodedQuery = (urlComponents.percentEncodedQuery.map { $0 + \"&\" } ?? \"\") + query(parameters)\n        urlComponents.percentEncodedQuery = percentEncodedQuery\n        request.url = urlComponents.url\n    }\n    return request\n}\n\nprivate func query(_ parameters: [String: Any]) -> String {\n    var components: [(String, String)] = []\n\n    for key in parameters.keys.sorted(by: <) {\n        let value = parameters[key]!\n        components += queryComponents(fromKey: key, value: value)\n    }\n    return components.map { \"\\($0)=\\($1)\" }.joined(separator: \"&\")\n}\n\nprivate func queryComponents(fromKey key: String, value: Any) -> [(String, String)] {\n    var components: [(String, String)] = []\n\n    if let array = value as? [Any] {\n        for value in array {\n            components += queryComponents(fromKey: key, value: value)\n        }\n    } else if let value = value as? NSNumber {\n        if value.isBool {\n            components.append((key, value.boolValue ? \"1\" : \"0\"))\n        } else {\n            components.append((key, \"\\(value)\"))\n        }\n    } else {\n        components.append((key, \"\\(value)\"))\n    }\n    return components\n}\n\n}\nIt works for me now. But I think there are more elegant solutions. \ud83d\ude14. @sunshinejr \nThanks. After reading the source code of ``URLEncoding``, I write``(just copy and modify simply the source code -_-)`` a custom encoding ``URLQueryArrayEncoding``, the code is follow:swift\n// QueryArrayEncoding.swift\nimport Foundation\nimport Alamofire\nimport CoreFoundation\nextension NSNumber {\n    fileprivate var isBool: Bool { return CFBooleanGetTypeID() == CFGetTypeID(self) }\n}\nstruct QueryArrayEncoding: ParameterEncoding {\npublic static var `default`: QueryArrayEncoding { return QueryArrayEncoding() }\n\nfunc encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {\n    var request = try urlRequest.asURLRequest()\n\n    guard let parameters = parameters else {return request}\n\n    guard let url = request.url else {\n        throw AFError.parameterEncodingFailed(reason: .missingURL)\n    }\n\n    if var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false), !parameters.isEmpty {\n        let percentEncodedQuery = (urlComponents.percentEncodedQuery.map { $0 + \"&\" } ?? \"\") + query(parameters)\n        urlComponents.percentEncodedQuery = percentEncodedQuery\n        request.url = urlComponents.url\n    }\n    return request\n}\n\nprivate func query(_ parameters: [String: Any]) -> String {\n    var components: [(String, String)] = []\n\n    for key in parameters.keys.sorted(by: <) {\n        let value = parameters[key]!\n        components += queryComponents(fromKey: key, value: value)\n    }\n    return components.map { \"\\($0)=\\($1)\" }.joined(separator: \"&\")\n}\n\nprivate func queryComponents(fromKey key: String, value: Any) -> [(String, String)] {\n    var components: [(String, String)] = []\n\n    if let array = value as? [Any] {\n        for value in array {\n            components += queryComponents(fromKey: key, value: value)\n        }\n    } else if let value = value as? NSNumber {\n        if value.isBool {\n            components.append((key, value.boolValue ? \"1\" : \"0\"))\n        } else {\n            components.append((key, \"\\(value)\"))\n        }\n    } else {\n        components.append((key, \"\\(value)\"))\n    }\n    return components\n}\n\n}\n`\nIt works for me now. But I think there are more elegant solutions. \ud83d\ude14. @kdawgwilk Hi !  I used the code you provided, but it doesn't work. The request callback doesn't invoke, and the main thread seems like be locked.. @sunshinejr \n\ud83d\ude05 I pod the Moya bypod 'Moya/RxSwift', '~> 11.0', just update today.\n\ud83d\ude05 Sorry, my mistake. The method isRxSwift``..\n\ud83d\ude05 I use the HandyJSON for mapping json to model\nMaybe I should open the issue in RxSwift \ud83d\ude05. @sunshinejr \n\ud83d\ude05 I pod the Moya by pod 'Moya/RxSwift', '~> 11.0' , just update today.\n\ud83d\ude05 Sorry, my mistake. The method is RxSwift..\n\ud83d\ude05 I use the HandyJSON for mapping json to model\nMaybe I should open the issue in RxSwift \ud83d\ude05. ",
    "JianweiWangs": "It works as usual!. @AndrewSB thanks. ",
    "heyjas0n": "I think we are running into the same issue except we are using a MultiTarget provider. Running out of ideas, it seems like the Authorization header never gets added. Any ideas?\n```swift\nlet requestClosure = { (endpoint: Endpoint, done: @escaping MoyaProvider.RequestResultClosure) in\n            var request: URLRequest?\n        var accessToken: String\n        accessToken = persistentData.getAccessToken()!\n\n        do {\n            request = try endpoint.urlRequest()\n        } catch {\n        }\n\n        accessTokenProvider.getToken().subscribe(onNext: {accessToken in\n            endpoint.adding(newHTTPHeaderFields: [\"Authorization\": \"Bearer \\(accessToken)\"])\n        }, onDisposed: {\n                done(.success(request!))\n        }).disposed(by: disposeBag)\n\n    }\n\n```. ",
    "ivanmkc": "Sorry for the delayed reply. I had to add this hack at the end of the TargetType.parameters code:\n//Sign endpoints\n        if let currentSession = AuthenticationService.sharedInstance.session.value\n        {\n            switch self {\n            case .LoginByEmail:\n                break\n            default:\n                optionalParameters[\"u\"] = currentSession.id\n                optionalParameters[\"t\"] = currentSession.token\n            }\n        }. I think I see what happened. It used to add this to the body, but now it adds it to the headers (which seems to be the correct way). You can keep the issue closed.. ",
    "evgeny-sureev": "First SwiftLint error is Cyclomatic Complexity Violation, it is unavoidable in switches for enums with many cases.. This would be best variant, but Swift doesn't support defaults for enum associated values yet.\n. @Istered done.. I think I was too fast with last commit. Feel free to revert it.. @sunshinejr I think adding new case to Task, as I did earlier, is better.. Ok, now we have two cases.. Do you have an idea how to fix cyclomatic complexity warning? Other warnings are not a result of this pull request.. Maybe add '// swiftlint:disable:next cyclomatic_complexity'?. Store subscription and dispose it:\nswift\nlet download = progress.subscribe(...)\n// later\ndownload.dispose(). ",
    "Istered": "@sunshinejr It will work as long as functions and cases have different names.. @sunshinejr Yes, it won't work even though parameter list is different, but still there's only one case you need to handle with switch.\nSo instead of this:\n```swift\nswitch task {\n    ....\n     /// These are two different cases to handle Encodable in this PR\n    case let .requestJSONEncodable(encodable):\n     ///\ncase let .requestCustomJSONEncodable(encodable, encoder):\n ///\n....\n\n}\nYou would write only this:swift\nswitch task {\n    ....\n     /// \n    case let .requestCustomJSONEncodable(encodable, encoder):\n     ///\n    ....\n}\n```. @SD10 @sunshinejr \nMaybe it's just me, but I don't see any problems with that since implicit member expressions work with static functions the same way as with enum cases.\nWhat really confuses me are these two lines doing absolutely the same:\nswift\nreturn .requestJSONEncodable(...)\nreturn .requestCustomJSONEncodable(..., JSONEncoder())\nBut I agree with you, guys, it would be better to have only one case. However, the problem is that you can't specify default value for cases as it was mentioned above and also it will be a breaking change if you replace requestJSONEncodable(_) with requestJSONEncodable(_, _), right?. ",
    "oks": "Sure, will do \u2764\ufe0f\nOn Thu, Nov 9, 2017 at 2:27 AM Pedro Vereza notifications@github.com\nwrote:\n\nHey @oks https://github.com/oks, thanks for fixing it!\nCould you also apply the same fix on our chinese version of this doc\nhttps://github.com/Moya/Moya/blob/master/docs_CN/Targets.md? \ud83d\ude4f\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/pull/1452#issuecomment-343007549, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABPaVucQZop4nzIwsNvuKjAuBvBG7ZPEks5s0kb-gaJpZM4QXNhd\n.\n-- \nOksana Kovalchuk\nIOS Developer at ANODA\n. \n",
    "lengocgiang": "@AndrewSB \ud83d\udc4d  thanks you . ",
    "ReverseScale": "Hey @BasThomas \n```ruby\nUncomment the next line to define a global platform for your project\nplatform :ios, '9.0'\ntarget 'podsMoyaDemo' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n  pod 'Moya/RxSwift'\n# Pods for podsMoyaDemo\ntarget 'podsMoyaDemoTests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\ntarget 'podsMoyaDemoUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\nend\n![](http://og1yl0w9z.bkt.clouddn.com/17-11-10/30654586.jpg)bash\nAnalyzing dependencies\nDownloading dependencies\nInstalling Alamofire (4.5.1)\nInstalling Moya (9.0.0)\nInstalling Result (3.2.4)\nInstalling RxSwift (3.6.1)\nGenerating Pods project\nIntegrating client project\n. \ud83d\udc4c,Thank you very much for your answer\ud83d\ude00. Can I add the parameters to achieve, but is there a way not use requestParameters to implement changes?swift\n/// The parameters to be encoded in the request.\n    var parameters: [String: Any]? { get }\n```. OK\uff0cI write an extension on the Task enum and I have realized the function\uff0cthanks very much!. o,I close it down. ",
    "Mikelulu": "try 'pod update '. ",
    "shwetachitlangia": "How can this be fixed?.  When I try using carthage update --platform iOS --no-use-binaries, I get this error.\n Fetching Result\n Fetching Alamofire\n Fetching ReactiveSwift\n Fetching RxSwift\n Checking out RxSwift at \"4.0.0\"\n Checking out Result at \"3.2.4\"\n Checking out ReactiveSwift at \"2.0.1\"\n Checking out Alamofire at \"4.5.1\"\n Checking out Moya at \"10.0.0\"\n xcodebuild output can be found in /var/folders/dc/2x74h7m55790qbk5j04sp1hxnhbmwk/T/carthage-xcodebuild.gx8Faa.log\n Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\n Building scheme \"Result-iOS\" in Result.xcodeproj\n Building scheme \"ReactiveSwift-iOS\" in ReactiveSwift.xcworkspace\n Building scheme \"RxBlocking-iOS\" in Rx.xcworkspace\n Building scheme \"RxCocoa-iOS\" in Rx.xcworkspace\n Building scheme \"RxTests-iOS\" in Rx.xcworkspace\n Building scheme \"RxSwift-iOS\" in Rx.xcworkspace\n Building scheme \"Moya\" in Moya.xcodeproj\nBuild Failed\n    Task failed with exit code 65:\n    /usr/bin/xcrun xcodebuild -project /Users/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme Moya -configuration Release -derivedDataPath /Users/schitlangia/Library/Caches/org.carthage.CarthageKit/DerivedData/9.1_9B55/Moya/10.0.0 -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath ./ SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO (launched in /Users/Carthage/Checkouts/Moya)\nThis usually indicates that project itself failed to compile. Please check the xcodebuild log for more details: /var/folders/dc/2x74h7m55790qbk5j04sp1hxnhbmwk/T/carthage-xcodebuild.gx8Faa.log. @zhongwuzw Sorry, I am unable to track packets using Wireshark. But i rewrote the same api call with Alamofire and tested with same conditions, it works.\nThe issue seems to be with the First POST operation of the app.\nThe first GET operations works just fine.\n  . Can this code help? \nDoesn't seem like a code issue as we are calling the same API again and it works.\nCannot share an example project as we have secured services.\n```swift\n//-------------------------------------------------------------------------\n// Login APIs - Login user\n//-------------------------------------------------------------------------\nimport Moya\nlet loginProvider = NetworkUtility.getMoyaProvider(LoginAPI.self)\npublic enum LoginAPI {\n    case loginUser([String: Any])\n    case forgotPasswordOTP(String)\n    case resetPassword([String: Any])\n}\nextension LoginAPI: TargetType {\npublic var baseURL: URL { return URL(string: ConfigData.shared.getURL(forKey: DefaultsKeys.baseURL))! }\n\npublic var path: String {\n    switch self {\n    case .loginUser:\n        return ConfigData.shared.getURL(forKey: DefaultsKeys.login)\n    case .resetPassword:\n        return ConfigData.shared.getURL(forKey: DefaultsKeys.resetPassword)\n    case .forgotPasswordOTP:\n        return ConfigData.shared.getURL(forKey: DefaultsKeys.forgotPasswordOTP)\n    }\n}\n\npublic var method: Moya.Method {\n    switch self {\n    case .loginUser:\n        return .post\n    case .resetPassword, .forgotPasswordOTP:\n        return .put\n    }\n}\n\npublic var task: Task {\n    switch self {\n\n    case .loginUser(let bodyParameters),\n          //UserLogin dictionaryRepresentation is used for this\n         .resetPassword(let bodyParameters):\n        return .requestCompositeParameters(bodyParameters: bodyParameters,\n                                           bodyEncoding: JSONEncoding.default,\n                                           urlParameters: [:])\n    case .forgotPasswordOTP(let email):\n        return .requestCompositeParameters(bodyParameters: [User.Keys.email: email],\n                                           bodyEncoding: JSONEncoding.default,\n                                           urlParameters: [:])\n    }\n}\n\npublic var headers: [String: String]? {\n    return NetworkUtility.getHeaders()\n}\n\npublic var sampleData: Data {\n    var data: Data! = nil\n    switch self {\n    case .loginUser:\n        data = NetworkUtility.loadJSON(jsonName: \"3.33.4Success\")\n    case .resetPassword:\n        data = NetworkUtility.loadJSON(jsonName: \"ResetPassword\")\n    case .forgotPasswordOTP:\n        data = NetworkUtility.loadJSON(jsonName: \"VerifyUser\")\n    }\n    return data\n}\n\n}\n```. @sunshinejr I can have a call with you. I can reproduce it. But don't have access to server logs.\nMy skype id is chitstcs.. @SD10 we have started facing this issue from 10.0.0. @SD10 we have started facing this issue from 10.0.0. @AndrewSB Yes, did not face it with 9.x. \nThe issue doesnot happen with every POST request. \nIf we hit one GET followed by a POST request, the POST fails with 405.. @aloco So, the issue is \"POST\" becomes \"ST\" and \"DELETE\" becomes \"LETE\". \nThe first two chars are truncated making it an invalid HTTP method. \nCan anyone know the possible reason for this?. These are the server logs -\nWARN 1885 --- [o-8081-exec-453] o.s.web.servlet.PageNotFound             : Request method 'ST' not supported. @SD10 Yes, the Services team is using Spring Boot.. Any update when this will be resolved?. ",
    "Nitner0C": "Build Failed\n    Task failed with exit code 65:\n    /usr/bin/xcrun xcodebuild -project /Users/corentin/Documents/work/squarebreak/ofs-public-app/Workspace/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme Moya -configuration Release -derivedDataPath /Users/corentin/Library/Caches/org.carthage.CarthageKit/DerivedData/9.1_9B55/Moya/10.0.0 -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath ./ SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO (launched in /Users/corentin/Documents/work/squarebreak/ofs-public-app/Workspace/Carthage/Checkouts/Moya)\nThis usually indicates that project itself failed to compile. Please check the xcodebuild log for more details: /var/folders/8q/qt85tzgd0jv5700x2m94b5vm0000gn/T/carthage-xcodebuild.uUXpyU.log\ncarthage-xcodebuild.uUXpyU.log\n. To those who have this issue, as a quick fix you can remove the swift lint in the build phase of the Carthage/Checkouts/Moya/Moya.xcodeproj of the 3 targets and run carthage build --plateform iOS. ",
    "lalkrishna": "I got this error.\n***Building scheme \"RxMoya\" in Moya.xcodeproj\nBuild Failed\n    Task failed with exit code 65:\n    /usr/bin/xcrun xcodebuild -project /../Carthage/Checkouts/Moya/Moya.xcodeproj -scheme RxMoya -configuration Release -derivedDataPath //Library/Caches/org.carthage.CarthageKit/DerivedData/9.1_9B55/Moya/10.0.0 -sdk watchos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath ./ SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO (launched in /../Carthage/Checkouts/Moya). ",
    "CocoaPriest": "This is happening again with today's release of Swift 4.1. Removing the swift lint in the build phase did help.\nMind re-opening this, @sunshinejr @BasThomas  ?. @sunshinejr I'm using the script to create static frameworks (like this one) but basically it consists of\ncarthage update \"$@\" --no-build --no-use-binaries\nand\ncarthage build \"$@\" --platform ios --no-use-binaries\nAnd I see just a \"regular\" compile failure:\n*** Building scheme \"Moya\" in Moya.xcodeproj\nBuild Failed\n    Task failed with exit code 65:\n    /usr/bin/xcrun xcodebuild -project /Users/kostik/dev/x/Carthage/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme Moya -configuration Release -derivedDataPath /Users/kostik/Library/Caches/org.carthage.CarthageKit/DerivedData/9.3_9E145/Moya/11.0.1 -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/6p/_g9k66g13sb8_xzsv3stb07w0000gn/T/Moya SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO STRIP_INSTALLED_PRODUCT=NO (launched in /Users/kostik/dev/x/Carthage/Carthage/Checkouts/Moya)\nLogs are full of lint warnings & errors. This is Moya 11.0.1.\nBtw, the same happens if you just try to compile the example project in Xcode. Same lint issues.. @sunshinejr thanks! Will test it (but not until the day after tomorrow). @sunshinejr remove_swiftlint_buildphase works like a charm. @sunshinejr just checked it, swiftlint-fix works for me as well.. ",
    "cisclub": "@BasThomas I thought we were trying to do something like this\nhttps://github.com/alliamin/Chinkolo/blob/master/scripts/update-readme-with-latest-pod-version.sh. @BasThomas Yes read it. Actually this is the part I was talking about specifically \ud83d\ude04 \nI mean instead of updating Readme manually.. Sure, Will open the PR once the script is more ready.\nThanks BasThomas.. ",
    "bweickert": "Awesome! Thank you very much @SD10! That was the issue.. ",
    "huaqixue": "@BasThomas  I can't request a GET Request with requestPlain Task ,and without httpBody. @BasThomas I was updated the TargetType. I was solve the question.Change the URLRequest's httpBody to nil in the requestClosure. . ",
    "RiuHDuo": "Finally, i find it conflict to reactive cocoa 7.0\nthis is may Cartfile\ngithub \"danielgindi/Charts\" ~> 3.0.4\n github \"ViccAlexander/Chameleon\"\n github \"hackiftekhar/IQKeyboardManager\"\n github \"jdg/MBProgressHUD\" ~> 1.0.0\n github \"SwiftyJSON/SwiftyJSON\"\n github \"ninjaprox/NVActivityIndicatorView\"\n github \"lkzhao/Hero\"\n github \"ReactiveCocoa/ReactiveObjC\"  \"3.0.0\"\n github \"patchthecode/JTAppleCalendar\" ~> 7.1.2\n github \"robbiehanson/CocoaAsyncSocket\" \"master\"\ngithub \"Moya/Moya\" ~> 10.0\ngithub \"ReactiveCocoa/ReactiveCocoa\" ~> 7.0\ngithub \"ReactiveCocoa/ReactiveSwift\" ~> 3.0.0\n. i don't wanna use any moya rx or reactive extension. i just use stander moya framework.. I hope you should make 2 projects. One is stander Moya and the other is Rx/ReactiveCocoa Extension like PromiseKit and PromiseKit Extensions. And i will not be clone some project i never use like Rx series frameworks or Reactive series frameworks. Finally, i find the solution.\nSet the version of every framework in Cartfile.resolved file manually.\ngithub \"Alamofire/Alamofire\" \"4.5.1\"\ngithub \"Moya/Moya\" \"10.0.0\"\ngithub \"ReactiveCocoa/ReactiveCocoa\" \"7.0.0\"\ngithub \"ReactiveCocoa/ReactiveSwift\" \"3.0.0\"\ngithub \"ReactiveX/RxSwift\" \"3.6.1\"\ngithub \"SwiftyJSON/SwiftyJSON\" \"4.0.0\"\ngithub \"ViccAlexander/Chameleon\" \"2.2.0\"\ngithub \"antitypical/Result\" \"3.2.4\"\ngithub \"danielgindi/Charts\" \"v3.0.4\"\ngithub \"hackiftekhar/IQKeyboardManager\" \"v5.0.6\"\ngithub \"jdg/MBProgressHUD\" \"1.1.0\"\ngithub \"ninjaprox/NVActivityIndicatorView\" \"4.0.0\"\ngithub \"tadija/AEXML\"  \"4.1.0\"\nAnd run \ncarthage bootstrap. @SD10  Do Encryption in plug in. . ",
    "robfeldmann": "@SebastianBoldt I just noticed this same bug using Moya 11.0.2 and found this auto-closed issue. Did you by chance find a solution or work-around that you'd be willing to share?. ",
    "SebastianBoldt": "@robfeldmann I solved it by not using the basic-auth plugin and adding the auth header properties directly into the header fields inside the endpoint closure. . ",
    "mozeryansky": "I installed 10.0.1 and didn't see this issue.. I deleted my Pods folder and ran pod update and everything is fine now. I don't know what happened.. ",
    "MartinPape": "Many thanks!. ",
    "yalvinz": "i love you. ",
    "dtomicAZ": "@sunshinejr awesome, response.request did the trick, thank you.. @AndrewSB Thank you for info.\nI found another solution, to dismiss error messages in applicationWillEnterForeground.\nI am using RMessage lib for showing message alert, so this was one line of code:\nRMessage.dismissActiveNotification(). @BasThomas It is little complicated to share this code.\nThis is my login method:\nfunc signIn(email: String, password: String, success: @escaping (Token) -> (), failure: @escaping (AppError) -> ())\n  {\n    App.rest.request(.signIn(email: email, password: password)) { (result) in\n      self.jsonWorker.handleJsonObject(result: result, success: success, failure: failure)\n    }\n  }\nApp.rest is Moya provider:\ncase signIn(email: String, password: String).. etc.\nIt's just POST request on server API for login, which requires email and password.\nServer returns me this:\nHTTP/1.1 401 Unauthorized\nCache-Control: no-cache\nPragma: no-cache\nContent-Type: application/json; charset=utf-8\nExpires: -1\nWWW-Authenticate: Negotiate\nWWW-Authenticate: NTLM\nDate: Thu, 15 Feb 2018 07:43:55 GMT\nConnection: close\nContent-Length: 51\nAfter that iOS fires two more same requests.\nI tried same request using \"native\" URLRequest and URLSession, without Moya, and same thing happens. So it is something on iOS level, not Moya.\nBut I am using Moya and I am interested is there some way to prevent multiple request without changing status code on server side different than 401.\nAndroid and Postman don't have this issue/feature, no repeating requests on same server.\nbtw. If I change status code on server to e.g. 403, than requests is not repeating.\nI came to this issue first time in my 5 years of development of iOS mobile apps.\n. ",
    "biboran": "Hi @SD10! Thanks for a quick response!\nBasically the problem that I ran into was that requests authorization stopped working (the header was not appended). I didn't even know about the existence of casting behavior but in 8.0.2 it didn't interfere with designated business logic of AccessTokenPlugin in my case because I never adopted AccessTokenAuthorizable. Isn't it logical to assume that AccessTokenPlugin will authorize your requests by default if it doesn't declare an authorization strategy mechanism in the ctor?\n\nplugins are applied through the Moya provider, which can accept multi targets and not all targets are AccessTokenAuthorizable.\n\nCould you please elaborate on that? Do you mean that one TargetType supplied for MoyaProvider can address different resources which may or may not require different type of authorization heading?\n. @SD10 right, so users of the plugin must declare their intention through AccessTokenAuthorizable somewhere if they choose to use AccessTokenPlugin. It seems that class casting is not a good solution in this case (imho in any case).\nGoing back to my original suggestion: if changing AccessTokenPlugin is not something potent for the upcoming Moya release, I think assert() will suffice but there are definitely better ways to implement AccessTokenPlugin without hiddenly breaking TargetType contract.. ",
    "volkanbicer": "Hi @AndrewSB, I have same problem and I wanna  have requests succeed after the app has been backgrounded. Do you have any idea how to accomplish this.. ",
    "gligorkot": "Hey @SD10, just wanted to chime in as an outsider as I've been using Moya since v7.0 and love it. I think this would really be a worthwhile change. I've been reading through the issues and I believe this would address #1126 so I thought I'd link it here as well, but correct me if I'm wrong?\nOne thing I wanted to add, I am big on unit testing my frameworks and have been writing tests for the network layer for a while, so having the stubs really makes this easy; however if it was possible to only include the stubs and TestTargetType in the UnitTest package this would be awesome! Wasn't sure if this was your intention so I thought I'd add it.\nHappy to provide help on this matter and jump more into the open source waters.. Hi @BasThomas thanks for the quick reply. Easy for the structs I need to decode, and I've done that already. I was more interested for when I use the same structs as Codable and I need to send them back to the server and they're not encoded in snake case.. Hi @BasThomas thanks for the quick reply. Easy for the structs I need to decode, and I've done that already. I was more interested for when I use the same structs as Codable and I need to send them back to the server and they're not encoded in snake case.. Ahhh found it... I need to use requestCustomJSONEncodable(Encodable, encoder: JSONEncoder)\nI feel silly not seeing that earlier!. Ahhh found it... I need to use requestCustomJSONEncodable(Encodable, encoder: JSONEncoder)\nI feel silly not seeing that earlier!. @SD10 was really hoping #1502 would make it into this release. All good though, any plans to keep iterating on that solution?. ",
    "zhongwuzw": "I agree @SD10 's thoughts, we can add a sharedAlamofireManager var, and add some explain about 1 to 1 relation for the default currently, and add the usage of sharedAlamofireManager if people prefer just one shared manager.. @SD10 , Aside Endpoint, Generics would increase build time. In this situation of Endpoint, we need two steps, one is to find wether we need generics in Endpoint in some situations(by now, I can not found, maybe it has but rarely), another step is to investigate that how we can handle this in these situations.\n@sunshinejr , yep, I love clean code\ud83d\ude0a, if we just need in rarely situations, I think we should remove it, because it leads to many useless code, build time, and increase executable size because specialization if we not need generics at all. . @SD10 , \ud83d\udcaf I'll updated Chinese docs after you updated the English docs.. Can you capture the packet when you request Post first time? Provide it can found the issue more specifically if you provide HTTP content.. @karbhasin , strange behavior, maybe the only solution is to get requests raw packet from client-side and server-side, then compare them to find the issue.. @shwetachitlangia I think only two reasons, one is iOS network system bug? because the http method like get\u3001post.. appended on  packet by system automatically . Another reason is server-side, truncated first two bytes when handle http. So as I said as before, only method to figure out is to catch network packets.\n\n. The project don't have Podfile, maybe have been switch to carthage.. ",
    "rainedAllNight": "I have two questions;\nthe first is \"Extensions may not contain stored properties\"\nand the second is\npublic init(_ target: TargetType) {\n        self = MultiTarget.target(target)\n    }\nthe target still need provide baseURL and header . I think you misunderstood me. Thank you anyway. Perhaps an optional attribute is required for the protocol. ",
    "fengerxixi": "@sunshinejr @SD10 ,thanks a lot. I update Moya to 10.0.2 and  it woks really well.. ",
    "gb-6k-house": "I didn't face this issue in Swift 3.2 and  Moya 8.0.5 , just when i update to Swift 4.0, i have this problem.\n@AndrewSB . I used CocoaPods.  It was seems building successful with Moya 10.0.1 now, and  well  done when  i change to use Moya 9.0 again .  Something wrong  with CocoaPods installing  I guess . However, thanks all @AndrewSB @SD10 . ",
    "richgabrielli": "My $0.02: \"...2014-present..\" is a great fixit and forget it solution. . Thanks @ashfurrow! I am very new to GitHub. My local repository now says \"This branch is 1 commit behind Moya:master.\" This has happened on another project that I forked and pulled. I have tried everything except the correct process to get in sync. Do you have any ideas? Thanks!. Thanks @BasThomas. Do I delete current fork? Should I never fork? . @BasThomas Thanks! So for a workflow starting with a new project:\n- Fork repository\n- Modify and submit PR\n- Once accepted: delete fork and then clone\nEdit: Tried to get started...Easier said than done. Can you give an assist on the actual process from Github and/or terminal?\nFor example: I had all my 3 of my repositories on GitHub synced to the main master repository and they all stated that they were even. Now one of the three is 2 commits behind. What do I do?\n\n. PERFECT!!!! Thanks @ashfurrow @SD10 and @BasThomas. I think I got it.\nThe biggest thing (I think) is that I was missing was the \"git push origin master\" as the last step to get my local branch synced up to the my repository on the GitHub website! \nYou all were very welcoming and patient with some pretty basic issues I was having. I look forward to being more active!. Last thing: could you expand on the last part:\n\n. Thanks @ashfurrow! That makes perfect sense. I do the same on my local Xcode Swift projects with Git. I have my \"master\" and then I branch to a \"new-dev\" branch, make my additions / updates and then merge it to \"master\". Last question (I promise)...\nWhat happens when I sync masters, branch my dev repository to my local PC and make changes that take some time, merge my local to my remote master and am ready to make a PR. However, in that span the master project has had some changes. Do I need to resync or can I do a PR and you will sort it out with skill and a bit of magic? :) . ",
    "Rashesh-Bosamiya": "@SD10 , Yes mobileNumber is a String type.\n  . @BasThomas, Error is coming from server. Server is not able to get parameters, that I am sending.\nI tested the same thing in Postman.\nThe need is sending Parameter is raw.\nSee the Postman screenshot.\nIn short, I want to send Parameter as raw.\n\n. Following is my TargetType code.\n```\nenum MyServerAPI {\n    case login(email:String,password:String)\n    case register(firstName:String,email:String,password:String,mobileNumber:String)\n    case forgotPassword(email:String)\n    case checkUniqueEmail(email:String)\n}\nextension MyServerAPI : TargetType {\nvar parameters : [String:Any]? {\n    switch self {\n    case .login(let email, let password):\n        return [\"user_email\":email,\n                \"user_password\":password]\n    case .register(let firstName, let email, let password, let mobileNumber):\n        return [\"user_fname\":firstName,\n         \"user_email\":email,\n         \"user_password\":password,\n         \"user_mobile_no\":mobileNumber]\n    case .forgotPassword(let email):\n        return [\"user_email\":email]\n    case .checkUniqueEmail(let email):\n        return [\"user_email\":email]\n    }\n}\n\nvar parameterEncoding : Moya.ParameterEncoding {\n    return URLEncoding.httpBody\n}\n\nvar baseURL: URL {\n    return URL(string: \"http://someURL.com/page/\")!\n}\n\nvar path: String {\n    switch self {\n    case .login:\n        return \"web_user_login\"\n    case .register:\n        return \"web_add_user\"\n    case .forgotPassword:\n        return \"web_user_forgot_password\"\n    case .checkUniqueEmail:\n        return \"web_check_user_email\"\n    }\n}\n\nvar method: Moya.Method {\n    return .get\n}\n\nvar sampleData: Data {\n    return Data()\n}\n\nvar task: Task {\n    return .requestPlain\n}\n\nvar headers: [String : String]? {\n    return [\"Content-Type\":\"application/json\"]\n}\n\n}\n``` \nPlease correct, If anything seems wrong.\nI just read Migration Guide document. But I am using Moya for the first time, so little bit confused.\nCan you correct this code according to Migration Guide?. Thank you very much \ud83d\ude03. Thanks!. ",
    "LipYoung": "@BasThomas Thanks your invite.but i dnot konw how to fix it.so sorry.What is right url?. @BasThomas I see it, and read sunshinejr's content.Thank you again.Good job.. ",
    "Jeroenbb94": "We did use the generic on our project but just as @ashfurrow mentioned, we don't know the reason anymore. The migration from 10 to 11 was easily done and our unit test still work without changing them.. Is it? It's only added functionality. It doesn't break any existing functionality \ud83e\udd14 . Thx, I'll adjust it. ",
    "strikernani": "Hi All,\nI was getting same issue.I have updated Moya version to the 10.0.1(it was 8.0.3).\nAt the first time I got issue with the headers in the target type.\nI added the headers\npublic var headers: [String : String]? {\n        let assigned: [String: String] = [\"Content-Type\": \"application/json\"]\n        return assigned\n    }\nAfter that I got the issue with public var task: Task\nIn 8.0.3 Task Extension has only .request upload\nIn 10.0.3 `case requestPlain\n/// A requests body set with data.\ncase requestData(Data)\n\n/// A request body set with `Encodable` type\ncase requestJSONEncodable(Encodable)\n\n/// A requests body set with encoded parameters.\ncase requestParameters(parameters: [String: Any], encoding: ParameterEncoding)`\n\nSo compare to both in 8.0.3 version  request is handling entire .get and .post\nIn 10.0.3 version \n`case requestPlain\n/// A requests body set with data.\ncase requestData(Data)\n\n/// A request body set with `Encodable` type\ncase requestJSONEncodable(Encodable)\n\n/// A requests body set with encoded parameters.\n**case requestParameters(parameters: [String: Any], encoding: ParameterEncoding)**`\n\nNow the final result is \nMy Task extension is \n` public var task: Task {\n\nparameters coming from the extension\n\n    if parameters?.count != nil\n    {\n        return .requestParameters(parameters: parameters!, encoding: JSONEncoding.default)\n    }else{\n        return .requestPlain\n\n    }\n}`\n\n` public var parameters: [String: Any]? {\n        switch self {\n    case .getData(_ , let dicParams):\n        return dicParams\n    case .postLoginDetails(_, let dicParams):\n        return dicParams\n\n}`\nHope it will be helpful Thanks..\n. @Dschee  Thanks...\nI have three type of services in the same project.\nQuery Params and Path Params as GET\nPOST data with body.\n\nI have written code like this in the Task it is absolutely working fine with the 10.0.1 version of Moya.\nHere is my code.\n\n` public var task: Task {\n    switch self {\n    case .getInboxMessages(_):\n        return .requestCompositeData(bodyData: Data(), urlParameters: parameters!)\n    case .getMembersList(_, _):\n        return .requestCompositeData(bodyData: Data(), urlParameters: parameters!)\n\n    default:\n\n        if parameters?.count != nil\n        {\n            return .requestParameters(parameters: parameters!, encoding: JSONEncoding.default)\n        }else{\n            return .requestPlain\n\n        }\n\n    }\n\n\n}`\n\n@SD10  May I know the above logic is perfect or anything wrong.Now I am getting my results perfectly, However I need to check my entire project... \n--  :relieved:. 'ST' means...? it should be 'POST' right?\nCan u pls share your code how you are sending data.\nWhich version are you using..?. ",
    "wongwenlei": "I also encountered the same problem. After deleting the unused case in enum, the problem is solved. I don't know why.. I also encountered the same problem. After deleting the unused case in enum, the problem is solved. I don't know why.. The same problem I encountered, how do you solve it?. The same problem I encountered, how do you solve it?. ",
    "NarenLK": "Get the certificate by  SecCertificateCreateWithData. Then use  ServerTrustPolicy.pinCertificates to validate the server trust. The server trust is considered valid if one of the pinned certificates match one of the server certificates. Finally return the Manager object. ",
    "avitruk": "@AndrewSB yeah, you are right! I didn't retain the provider. I searched the entire Internet in search of an answer and missed this little moment. my mistake... Now it works like a charm! Thank you for the help.. ",
    "moerter": "I get the same error.\nXcode: 9.2\nCarthage: 0.27.0\nRunning carthage update says\n\n\"Incompatible Swift version - framework was built with 4.0.2 (swiftlang-900.0.69.2 clang-900.0.38) and the local version is 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2).\"\n\nRunning carthage update --platform iOS --no-use-binaries --verbose:\n```\n*** Building scheme \"Moya\" in Moya.xcodeproj\nThe following build commands failed:\n    PhaseScriptExecution Swiftlint /Users/xyz/Library/Caches/org.carthage.CarthageKit/DerivedData/9.2_9C40b/Moya/10.0.1/Build/Intermediates.noindex/ArchiveIntermediates/Moya/IntermediateBuildFilesPath/Moya.build/Release-iphoneos/Moya.build/Script-46AE31F21F86DDC6004E4236.sh\n(1 failure)\nBuild Failed\n    Task failed with exit code 65:\n    /usr/bin/xcrun xcodebuild -project /Users/xyz/Projects/xyz/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme Moya -configuration Release -derivedDataPath /Users/xyz/Library/Caches/org.carthage.CarthageKit/DerivedData/9.2_9C40b/Moya/10.0.1 -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/dm/0d2chvhn6s57mkvwzhbdgc240000gq/T/Moya SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO (launched in /Users/xyz/Projects/xyz/Carthage/Checkouts/Moya)\n```\nCartfile.resolved\ngithub \"Alamofire/Alamofire\" \"4.6.0\"\ngithub \"Moya/Moya\" \"10.0.1\"\ngithub \"ReactiveCocoa/ReactiveSwift\" \"2.0.1\"\ngithub \"ReactiveX/RxSwift\" \"4.1.1\"\ngithub \"antitypical/Result\" \"3.2.4\"\nSOLUTION:\nInstalling SwiftLint  and linking it solved the problem and Moya build succeeded\nbrew install swiftlint\nbrew link swiftlint. I get the same error.\nXcode: 9.2\nCarthage: 0.27.0\nRunning carthage update says\n\n\"Incompatible Swift version - framework was built with 4.0.2 (swiftlang-900.0.69.2 clang-900.0.38) and the local version is 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2).\"\n\nRunning carthage update --platform iOS --no-use-binaries --verbose:\n```\n*** Building scheme \"Moya\" in Moya.xcodeproj\nThe following build commands failed:\n    PhaseScriptExecution Swiftlint /Users/xyz/Library/Caches/org.carthage.CarthageKit/DerivedData/9.2_9C40b/Moya/10.0.1/Build/Intermediates.noindex/ArchiveIntermediates/Moya/IntermediateBuildFilesPath/Moya.build/Release-iphoneos/Moya.build/Script-46AE31F21F86DDC6004E4236.sh\n(1 failure)\nBuild Failed\n    Task failed with exit code 65:\n    /usr/bin/xcrun xcodebuild -project /Users/xyz/Projects/xyz/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme Moya -configuration Release -derivedDataPath /Users/xyz/Library/Caches/org.carthage.CarthageKit/DerivedData/9.2_9C40b/Moya/10.0.1 -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/dm/0d2chvhn6s57mkvwzhbdgc240000gq/T/Moya SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO (launched in /Users/xyz/Projects/xyz/Carthage/Checkouts/Moya)\n```\nCartfile.resolved\ngithub \"Alamofire/Alamofire\" \"4.6.0\"\ngithub \"Moya/Moya\" \"10.0.1\"\ngithub \"ReactiveCocoa/ReactiveSwift\" \"2.0.1\"\ngithub \"ReactiveX/RxSwift\" \"4.1.1\"\ngithub \"antitypical/Result\" \"3.2.4\"\nSOLUTION:\nInstalling SwiftLint  and linking it solved the problem and Moya build succeeded\nbrew install swiftlint\nbrew link swiftlint. ",
    "zerozheng": "@Mazorati do you solve this problem?. @SD10 I define a new member variable which is used to hold the provider in the whole life cycle.\nself.provider = provider\nbut it does't work. @SD10 thanks for your reply!\nbelow is the code:\n```swift\nimport UIKit\nimport RxSwift\nimport RxCocoa\nimport Moya\nclass MyController: UIViewController {\nvar bag = DisposeBag()\n\nvar contentType: Type? = nil {\n    didSet{\n        self.loadData()\n    }\n}\n\nvar provider: AnyObject? = nil\n\n}\nprivate extension MyController {\nfunc loadData() {\n\n    self.bag = DisposeBag()\n\n    let provider = MoyaProvider<MainUrl>()\n    self.provider = provider\n    provider.rx.request(MainUrl.banner, callbackQueue: DispatchQueue.main)\n        .mapJSON()\n        .filterData { (data: [String:Any]) -> [Model] in\n            //transform data\n        }\n        .subscribe(onSuccess: { (result) in\n            //something to do with result\n        }, onError: { (error) in\n            //something to do with error\n        })\n        .disposed(by: self.bag)\n}\n\n}\n```\nUsing a variable to hold the provider. It does not work. I think the provider may be deallocated when give a new provider to self.provider self.provider = provider in the loadData() function.\nAfter that, an array, providers, is used to hold all of the providers created. Unfortunately, it doesn't work too. --!\n```swift\nimport UIKit\nimport RxSwift\nimport RxCocoa\nimport Moya\nclass MyController: UIViewController {\nvar bag = DisposeBag()\n\nvar contentType: Type? = nil {\n    didSet{\n        self.loadData()\n    }\n}\n\nvar providers: [AnyObject] = []\n\n}\nprivate extension MyController {\nfunc loadData() {\n\n    self.bag = DisposeBag()\n\n    let provider = MoyaProvider<MainUrl>()\n    self.providers.append(provider)\n    provider.rx.request(MainUrl.banner, callbackQueue: DispatchQueue.main)\n        .mapJSON()\n        .filterData { (data: [String:Any]) -> [Model] in\n            //transform data\n        }\n        .subscribe(onSuccess: { (result) in\n            //something to do with result\n        }, onError: { (error) in\n            //something to do with error\n        })\n        .disposed(by: self.bag)\n}\n\n}\n```. ",
    "CoolHandLuke88": "@dangthaison91 This saved my day. I was trying to use .uploadFile(URL) with latest Moya, but to no avail with url parameters and uploadFile. Thank you for this. much appreciated.. ",
    "esam091": "\nAlso, to have a non-hacky solution to this one, creating your own method that does not release resources whenever request didn't complete is pretty straight-forward.\n\n@sunshinejr would there be any drawbacks in doing this? From what I understand after reading this thread, this seems to be more of a design concern rather than a retain cycle bug.\nInstead of making another self-retaining method in the reactive extension, what's your opinion on making the provider a global variable?. @AndrewSB I was thinking storing them in the global scope, but Eidolon gives me a good idea of storing them in each view controllers, thanks.. My quick guess, it's because the provider is deallocated before/while you're doing network request. To fix this, you either need to make the provider a property of the Input struct, or make it available globally(I don't know whether this is a good idea though).\nIf you're coming from Moya 8/9, this is a change that breaks the old behaviour, which took me some time to realise when migrating my project from Swift 3.2 to Swift 4. You can learn more in #1558 . Can you post your updated code so I can see what's wrong with it?. Simply do it like this\n```swift\npublic class PromotionViewController: UIViewController {\n  // Retain the provider here, network requests will work as long as the view controller is still alive\n  let provider = POINTProvider.rxProvider()\nfunc viewDidLoad() {\n    provider.rx.request(...).disposed(by: disposeBag)\n  }\n}\n```\nIn your last implementation, you stored the provider in a local variable in viewDidLoad method, which will be deallocated when viewDidLoad finishes executing.. Looking at your code comment, the contents of d indeed looks like a string.\nswift\n// {\"d\":\"{\\\"serverStatus\\\":\\\"1\\\",\\\"returnValue\\\":null,\\\"errorMsg\\\":\\\"Not a new user.\\\"}\"}\nIt should look like this instead:\nswift\n// {\"d\":{\"serverStatus\":\"1\",\"returnValue\":null,\"errorMsg\":\"Not a new user.\"}}\nCan you paste the actual response from server just to be sure?. ",
    "goktugaral": "Hi all,\nI've just read the discussion. I've just started to adopt RxSwift & Moya. I try to learn basic concepts and want to use a Network class. I created static func, and the request all works well with Moya but I have a warning which is \"Result of the call to 'subscribe' is unused\". What might be the reason for it?\nA little digging, I added the disposeBag at the end but if I do this, my request doesn't work.\nSo I guess I have to use disposeBag to prevent memory leaks but how?\nCould you show me the path? :)\n\n. @jdisho \nNothing, just \"Status Code: 200, Data Length: 286\". @jdisho I have just started to explore your project and puooww what the heck!! Thank you very much for widening my world. :)\n@BasThomas thank you for your consideration and kind response. Of course, I bear :) I just wanted to mention about my suffering.. ",
    "jdisho": "\nmy request doesn't work\n\nWhat message do you get in console? @goktugaral . Hey @SD10, thanks for your reply \ud83d\ude04\nI can use try? but I like more do{ ... } catch { ... }for being more expressive and doing more while catching the error. \nRegarding to the question, why I need this method?\nSuppose that I want to fetch something from an API. I want to return nil if  the object from response is not mapped, otherwise return the object and with mapOptional I can do it.\nI didn't submit the ReactiveSwift version of mapOptional because of my lack of experience in there, but if it is approved for RxSwift, definitely I will implement the ReactiveSwift version.. Valid argument. \nI just wanted to generalise the errors while returning nil. \nIn my opinion it is useful if you don't care about the errors and just return nil.\nIf this approach is against Moya core principles, you can close it. \ud83d\ude0a. @hemant3370 This shouldn\u2019t be an RxMoya problem. \nBut, what do you get when you do this?\nswift\ncomb.subscribe { event in \n  print(event)\n}\nSent with GitHawk. @anhpt681995 500 indicates that the server encountered something unexpected. Probably the data  in httpBody is not as the server expects.. You use this in Moya\nswift \nlet userIdData = Data(bytes: &userId, count: MemoryLayout.size(ofValue: userId))\nand this in Alamofire, which means that you are creating utf8 encoded Data from String\nswift \nlet userIdData = userId.string.data(using: String.Encoding.utf8) ?? Data()\nTry using the same thing in Moya @anhpt681995 .. Sure thing! . Have a look at my OSS https://github.com/jdisho/Papr/tree/papr-moya-version, I am using RxMoya v.11 there.\nBtw, you have also check Community projects for examples @goktugaral . You misunderstood my suggestion @SD10, probably I am not explaining it well \ud83d\ude04\nWhat I am suggesting is to have a Moya-Lite version with no dependencies on Alamofire and Result, with the same project goals and covering basic networking cases like exchanging data with some endpoints using CRUD methods and working only with Codable objects.\nI don't have anything against Moya's usability, it is easy, understandable, concise and as you mentioned, well focused. I am concerned about the dependencies it introduces when installing it, Alamofire and Result in some cases.\nBefore embedding a framework to any project, I make sure that I will use its functionalities as much as possible. For example, I have worked in many projects where only a small networking provider (a wrapper around URLSession with less than 500 lines of code) to request data from some endpoints and decode them, was enough for the whole networking part and using Alamofire just for that is not necessary.\nThe same thing is also when it comes to Moya.. I am not saying to get rid of Alamofire and change the core part of Moya. \nI am suggesting to create another OSS as a lightweight version of Moya, just as a wrapper around URLSession supporting some common and basic networking tasks. Just requesting data with parameters or with an Encodable object and decoding the response. Similar to this.\nThoughts? @BasThomas . When it comes to projects were 40-50 endpoint have to be implemented and some of them have different Tasks to do(requesting with parameters, encodable object to body, uploading, downloading), I will use Moya because it is easier to use, offers less coupling. At this case I don\u2019t care about the dependency size. @BasThomas\nI see the dependency size as a problem when it comes to projects that does not require much networking. \ud83d\ude15 \nSent with GitHawk. Right @BasThomas , the \"overhead\" of Moya in not necessary in smaller projects, that's why I am suggesting to have a light version of it, with the same interface, as a wrapper around URLSession \ud83d\ude04. Thanks for your opinions \ud83d\ude0a @BasThomas @SD10 \nWhat do other @Moya/contributors think?. @Pawlo1501  I don't think that Moya has any function to parse the HTML strings (@SD10 correct me if I am wrong).\nBtw, with the suggestion from @kaleemozitech you can only map the entire response as string.. All baseURLs have the same endpoints? @panjiulong . Like this? @SD10 \nswift \nprotocol BaseUrlRepresentable {\n      var baseULR1: URL {get}\n      var baseULR2: URL {get}\n      ...\n}\nand then \nswift\nextension GithubAPI: TargetType, BaseUrlRepresentable {\n      ....\n}. I think this is not related to Moya @mcichecki . \nHowever, try doing this: \n- Remove the Carthage folder\n- Run carthage update\n- Clean build folder\n- Run the project again. Are you installing Moya/ReactiveSwift @stfnhdr  ?. Code LGTM, but Danger failed. . ",
    "LucianoPAlmeida": "For sure @SD10 :))\nI just start running some tests to see how it works, let's see if I can put this to run there \ud83d\ude06 \n. I think I can try to make this one on this weekend :)) \nLet's see if we can make this run \ud83d\ude0a \n. @SD10 \nTotally agree, this was just more of a convenience API, to provide options for those who prefer to use Range instead. Me personally I prefer use ranges, for example, 200..<300 instead of 200...299 \ud83d\ude02\nAnd since it is very simple to add, I did it. I send it more as a proposal, thought will be cool :)) \n@BasThomas Forwarded :)) . Should CI be running now? \ud83d\ude02. Hey @sunshinejr I felt the same way when I find out about it, I always amazed at these things on the  Swift :)) . @SD10 For sure man, is working now, just a few more adjustments and I'll remove the WIP and it's gonna be good to go \ud83d\udc4d . Just requesting review from everyone involved on #1559 :))\n. @sunshinejr I'll search for a way to output the platform name on the report :)). @SD10 I removed the ignore ld warnings lines because @BasThomas asked me what kind warnings were being shown then I disable so he can take a look :))\nI probably going back working on that this weekend . Moving back it to WIP for some tests :)) . I think it is good for review now guys @SD10 @sunshinejr @BasThomas :)) \n. @SD10 I'm not sure, thought was a danger thing since the texts are Xcode summaries from previous passing pushs. I can take a look on that :)). @SD10 I deleted the comment and I already had removed sticky_summary option :)) I think it should be working after sticky_summary being removed. But let's see what happens now. . @SD10 Remove the stick_summary and deleting the comment seems to be nice now \ud83d\udc4d . @SD10 Any assignee yet? I think I can help with that :)) . Hey @sunshinejr :)\nI remember adding that step on #1767, and I think CI passes at the time (not sure). It is only failing on lint? Maybe we can do a test and running pod lib lint --skip-tests --verbose to have a better output of the error? . Hey @sunshinejr :)\nI remember adding that step on #1767, and I think CI passes at the time (not sure). It is only failing on lint? Maybe we can do a test and running pod lib lint --skip-tests --verbose to have a better output of the error? . Sure :)). @sunshinejr  Sure :)) . Nope \ud83e\udd23\nNow that this is working I will adjust those things :))  . I'm not sure if it's important to show ld linker warnings, and since there are some of them in the builds I just skip them :))\nMaybe I can try to fix them in this and remove this \ud83d\ude0a . I'm not sure but even if it's not needed is good to have separation :) . @BasThomas The ld: warnings of the project seems to have something to do with the libraries that are imported via Carthage. Maybe I'm missing something but as far as I could understand the libraries have to set the target\u2019s \u201cRequire Only App-Extension-Safe API\u201d build setting to Yes. If you don\u2019t, Xcode reminds you to do so by displaying the warning \u201clinking against dylib not safe for use in application extensions\u201d. You can see more here\nBecause of that I just Ignore them :))\n. @BasThomas Nice idea, I can change it :)). I can remove this so you can see the logs :)) I'll ping you then . This is just curiosity, there is a reason for all moya equal tests use expect(value) == instead of .to(equal(value))? . ",
    "kdawgwilk": "Is there a way that this could be added to Moya as a plugin?. I saw this line in the examples and wondered if the blocking could happen through a plugin\nswift\nlet gitHubProvider = MoyaProvider<GitHub>(plugins: [NetworkLoggerPlugin(verbose: true, responseDataFormatter: JSONResponseDataFormatter)]). Plugin wouldn't work cause the API still requires callbacks to pass the data back. I did think about that possibility and I would like to add that in the future.  I understand if this isn't something that would be wanted in Moya so for my small rough project I can stick with my extension.  I did find that when running the CLI tool that I needed to change one line or the semaphore would block everything from running:\nswift\nrequest(target, callbackQueue: .global(qos: .background)) { (result: Result) in. ",
    "juniorgarcia": "Well, It seems that this is a job for a PluginType.\nI created a implementation of PluginType and processed it inside the didReceive:result:target function.\nWorked like a charm!\nIs that's the more appropriate way to solve this, this thread can be closed.. Well, It seems that this is a job for a PluginType.\nI created a implementation of PluginType and processed it inside the didReceive:result:target function.\nWorked like a charm!\nIs that's the more appropriate way to solve this, this thread can be closed.. Sure! Here's how I'm doing with SwiftyJSON:\n```swift\nimport Moya\nimport Result\nimport SwiftyJSON\nclass ResponseProcessorPlugin: PluginType {\n    func didReceive(_ result: Result, target: TargetType) {\n        switch(result) {\n        case .success(let response):\n            // Here I can validate and perform arbitrary logic\n            guard let jsonResponse = try? JSON(data: response.data) else { return }\n            let meta = jsonResponse[\"meta\"]\n        if let errorCode = meta[\"error\"].int {\n            let errorMessage = meta[\"message\"].stringValue\n            print(\"Error code: \\(errorCode)'. Message: \\(errorMessage)\")\n        }\n    case .failure(let error):\n        print(error.errorDescription ?? \"No description provided\")\n    }\n}\n\n}\n// Here I configure my provider\nlet provider = MoyaProvider(plugins: [ResponseProcessorPlugin()])\n```\nHope it helps.\nBTW Moya is awesome!. Sure! Here's how I'm doing with SwiftyJSON:\n```swift\nimport Moya\nimport Result\nimport SwiftyJSON\nclass ResponseProcessorPlugin: PluginType {\n    func didReceive(_ result: Result, target: TargetType) {\n        switch(result) {\n        case .success(let response):\n            // Here I can validate and perform arbitrary logic\n            guard let jsonResponse = try? JSON(data: response.data) else { return }\n            let meta = jsonResponse[\"meta\"]\n        if let errorCode = meta[\"error\"].int {\n            let errorMessage = meta[\"message\"].stringValue\n            print(\"Error code: \\(errorCode)'. Message: \\(errorMessage)\")\n        }\n    case .failure(let error):\n        print(error.errorDescription ?? \"No description provided\")\n    }\n}\n\n}\n// Here I configure my provider\nlet provider = MoyaProvider(plugins: [ResponseProcessorPlugin()])\n```\nHope it helps.\nBTW Moya is awesome!. ",
    "kimdv": "@SD10 the changes should be added now \ud83d\ude80 . Maybe I should add #1559 in this PR too?. Hi!\nThe first thing that popped to my mind was Codable.\nI don't know if this already is on the roadmap for Alamofire 5. \nI was thinking on an api that accepts a Codable object as parameter, so it will be easier to send json. \nSomething like this maybe?\n```swift\nstruct Post: Codable {\u00a0}\nlet newPost = Post()\nAlamofire.request(\"https://httpbin.org/post\", method: .post, parameters: newPost)\n```\nWhat do you think?? \ud83d\ude04 . https://github.com/apple/swift-source-compat-suite/pull/148. It seems that the build failed\nhttps://ci.swift.org/view/Source%20Compatibility/job/swift-master-source-compat-suite/1339/console\nBut what I can read, it is Moya passes, right? . ",
    "jhrasco": "Hi @SD10 Thank you for a quick response. I'm migrating from version 10.0.2 to 11.. @SD10 Thanks. Yes, I'm subclassing and your proposed solution,ProviderSubclass.defaultRequestMapping, works. Thank you.. ",
    "mkkroliks": "Yes! It works, thanks a lot @sunshinejr.. ",
    "eyrdor": "Hi @pietrocaselani \nYes, that is correct.\nYes, I did that, and unwrapped the data before before passing it to \nswift\nTask.requestData(...). Hi @sunshinejr,\n---------REQUEST----------\n\u25bf \"url\"\n  \u25bf url : Optional<URL>\n    \u25bf some : \"url\"\n  - cachePolicy : 0\n  - timeoutInterval : 60.0\n  - mainDocumentURL : nil\n  - networkServiceType : __ObjC.NSURLRequest.NetworkServiceType\n  - allowsCellularAccess : true\n  \u25bf httpMethod : Optional<String>\n    - some : \"POST\"\n  \u25bf allHTTPHeaderFields : Optional<Dictionary<String, String>>\n    \u25bf some : 5 elements\n      \u25bf 0 : 2 elements\n        - key : \"Content-Type\"\n        - value : \"application/json\"\n  \u25bf httpBody : Optional<Data>\n    \u25bf some : 13 bytes\n      - count : 13\n      \u25bf pointer : 0x0000604000636930\n        - pointerValue : 105828000688432\n      \u25bf bytes : 13 elements\n        - 0 : 109\n        - 1 : 111\n        - 2 : 121\n        - 3 : 97\n        - 4 : 64\n        - 5 : 109\n        - 6 : 111\n        - 7 : 121\n        - 8 : 97\n        - 9 : 46\n        - 10 : 99\n        - 11 : 111\n        - 12 : 109\n  - httpBodyStream : nil\n  - httpShouldHandleCookies : true\n  - httpShouldUsePipelining : false\n------------END----------------------\n--------RESPONSE------------\nMoya_Logger: [09/02/2018 16:25:07] Request: \"url\"\nMoya_Logger: [09/02/2018 16:25:07] Request Headers: [\"Content-Type\": \"application/json\"]\nMoya_Logger: [09/02/2018 16:25:07] HTTP Request Method: POST\nMoya_Logger: [09/02/2018 16:25:07] Request Body: moya@moya.com\n2018-02-09 16:25:07.374081-0500 ... [Common] _BSMachError: port bb03; (os/kern) invalid capability (0x14) \"Unable to insert COPY_SEND\"\n2018-02-09 16:25:07.417772-0500 ... [] nw_proxy_resolver_create_parsed_array PAC evaluation error: kCFErrorDomainCFNetwork: 308\nMoya_Logger: [09/02/2018 16:25:07] Response: <NSHTTPURLResponse: 0x60000062e720> { URL: \"url\" } { Status Code: 400, Headers {\n    \"Cache-Control\" =     (\n        \"no-cache\"\n    );\n    \"Content-Length\" =     (\n        10\n    );\n    \"Content-Type\" =     (\n        \"application/json; charset=utf-8\"\n    );\n    Date =     (\n        \"Fri, 09 Feb 2018 21:25:07 GMT\"\n    );\n    Expires =     (\n        \"-1\"\n    );\n    Pragma =     (\n        \"no-cache\"\n    );\n} }\nBadRequest\n-----------END----------------------\nSince I have control of the server, i checked on that end and no data was coming through.. @sunshinejr  just tried that. That didn't work either.. Closing this issue as it doesn't seem to be a associated directly with, or caused by moya.. ",
    "melfynr": "I had a similar issue.  I had to embed quotes into the data:\n\"\\\"\\(myPayload)\\\"\".data(using: .utf8). ",
    "sasojadrovski": "Hey @SD10,\nThank you very much for the prompt reply!\nNo, I do not have a custom endpointClosure nor any plugins. I am intentionally using the default MoyaProvider (wanted to eliminate anything that might modify the headers).\nI have also tried restarting and reseting the simulator and I have also built and run the application on a device. Unfortunately that did not resolve the issue.. Hey @sunshinejr,\nThanks for getting back to me regarding this issue/question. \nYes, I also thought that this must be somehow related to Swift, but what was bothering me was that the code from the first example worked fine for Moya 10. \nMaybe changing the snippet to something like:\nswift\nvar headers: [String: String]? {\n  var httpHeaders: [String: String] = [:]\n  httpHeaders[\"deviceid\"] = SecureStorage.shared.uniqueDeviceId\n  httpHeaders[\"useragent\"] = \"iPhone\"\n  httpHeaders[\"authorization\"] = SecureStorage.shared.tokenWithBearer\n  return httpHeaders\n}\nwould overcome this issue. However, utilizing Moya's AccessTokenAuthorizable protocol for handling authorization is a much better approach than the one mentioned above, so this issue can be closed for now :)\nThank you very much for discussing this and trying to figure out an answer. I really appreciate it. Keep up the great work! \ud83d\udc4d \nBest Regards,\nSasho . ",
    "Tritium7": "Hello guys! Sorry for the late answer I was off from work for a week or two.\nSo finally we figured out what was the issue:\nIt was a silly mistake, the URL address contained a 'http:' protocoll instead of 'https:' . The funny part is, that everything worked as intended, except the POST requests. \nFinally we discovered the missing 's' letter after we used Wireshark and analyzed the packets. It was an overkill compared to the typo problem, but yes we continuously overlooked the address and since the error message from the server wasn't clear I ended up here.\nThanks the quick response to the issue, the problem wasn't on your side!\n. ",
    "kou0117": "@sunshinejr \nThank you so much for your reply.\nSo when I want to send image as jpeg and a, b, c as JSON, the code below is fine?\n```swift\nimport UIKit\nimport Moya\nimport SwiftyJSON\npublic var task: Task {\n    switch self {\n    case .uploadImage(let image, let a, let b, let c):\n        let data = UIImageJPEGRepresentation(image, 0.5)!\n        let Data = MultipartFormData(provider: .data(data), name: \"files\", fileName: \"txImage.jpg\", mimeType: \"image/jpeg\")\n        let parameters: [String: Any] = [\"a\": a, \"b\": b, \"c\": c]\n        let json = JSONSerialization.data(withJSONObject: parameters, options: options)\n\n        let multipartData = [Data, json]\n        return .uploadMultipart(multipartData)\n    }\n}\n\n```\nI would appreciate if you may reply.. @sunshinejr \nI understand it.\nThank you for your help!. ",
    "jshier": "I forgot to mention I have a GitHub project board for Alamofire 5, so feel free to take a look and track progress as well as currently intended features.\n@AndrewSB I'm currently prototyping a core rewrite of Alamofire that uses a single serial queue for all internal activities, including the URLSessionDelegate and *TaskDelegate. This has made threading much simpler and enabled some extra features (actual per-task errors for pinning failures), and should make Alamofire more scalable, since we wouldn't be creating so many queues all the time. I plan to make it a passable parameter. Once that's done, we'll do some profiling to see where we could benefit from separate queues (like request creation (now async) and response parsing) and go from there.\n@kimdv That's something we'd like, but Encodable doesn't really map to request parameters very well. We're open to ideas though.. ",
    "volatilegg": "Hi, I got the same issue as @zerozheng, moyaProvider got disposed, however when I was tracing the bug in MoyaProvider+Rx.swift by adding print methods\n```swift\npublic func request(_ token: Base.Target, callbackQueue: DispatchQueue? = nil) -> Single {\n        return Single.create { [weak base] single in\n            print(\"rx provider base (base)\")\n            print(\"rx provider (self)\")\n            let cancellableToken = base?.request(token, callbackQueue: callbackQueue, progress: nil) { result in\n                switch result {\n                case let .success(response):\n                    print(response.description)\n                    single(.success(response))\n                case let .failure(error):\n                    single(.error(error))\n                }\n            }\n        return Disposables.create {\n            cancellableToken?.cancel()\n        }\n    }\n}\n\n```\nIt suddenly works without changing anything from my codebase. The issue came back when you remove the print methods. . ",
    "aemoe": "@zerozheng  Hi, I resolved this problem.\nDon't need make the provider to a global var.\nOnly make the disposeBag to a global var then will run.. ",
    "BuildBuilt": "@esam091 .. Thank you for your response.\nYes, I have upgrade from Swift 3.2 to Swift 4 it was working fine like you said in Moya previous version\nbut after upgrading to this working it stop working.\nIt like you said it seems like no call was made out and never received response back.\nI will try with you solution first and will let you know.. @esam091 .. Its still not working I don't know why do you have any suggestion or what should be modify in my code ? \nThank you.. @esam091  I have tried 2 implementation :\nIn which first implementation work fine can I can retrieved data.\nBut in the second implementation when it reached ' .mapServiceObject(PromotionResponse.self)'\nand ran into .flatmap it just skip that part, I don't know whether my 'mapServiceObject' is wrong or not.\nYou can check my 'mapServiceObject' in my first post.\nThank you so much.\nFirst :\n```\npublic class PromotionViewController: UIViewController {\nlet promotions = [\"try\"]\n\nlet disposeBag = DisposeBag()\n\nvar viewModel: PromotionViewModel!\n\n@IBOutlet weak var tableView: UITableView!\n\nvar viewDidAppearTrigger = PublishSubject<Void>()\n\noverride public func viewDidLoad() {\n    super.viewDidLoad()\n    self.setupView()\n\n    let Provider = POINTProvider<PromotionService>.rxProvider()\n\n    Provider.rx.request(.getPromotion)\n        .asObservable()\n        .mapObject(PromotionResponse.self)\n        .subscribe { event -> Void in\n            switch event {\n            case .next(let repos):\n                print(repos.dictionaryRepresentation())\n                break\n                //self.repos = repos\n            case .error(let error):\n                print(error)\n            default: break\n            }\n        }.disposed(by: disposeBag)\n\n```\nSecond :\n```\nclass PromotionViewModel {\nstruct Input {\n    let viewDidAppearTrigger: Driver<Void>\n}\n\nlet isLoading = ActivityIndicator()\n\nvar onRequestPromotion: Driver<Result<PromotionResponse,ServiceError>>!\n\ninit(input: Input) {\n\n    onRequestPromotion = input.viewDidAppearTrigger\n        .flatMapLatest({ [unowned self] (_) in\n            let provider = POINTProvider<PromotionService>.rxProvider()\n        return provider.rx\n            .request(.getPromotion)\n            .asObservable()\n            .trackActivity(self.isLoading)\n            .mapServiceObject(PromotionResponse.self)\n            .flatMap({ (response) in\n                switch response {\n                case .success(let response):\n                    //return response\n                    return Driver.just(.success(response))\n                case .failure(let error):\n                    return Driver.just(.failure(error))\n                }\n            })\n        })\n\n}\n\n```\nThis is my PromotionResponse class\n```\npublic class PromotionResponse: BaseResponse {\nprivate struct SerializationKeys {\n    static let promotions = \"promotions\"\n}\n\n// MARK: Properties\npublic var promotions: [Promotions]?\n\npublic required init?(map: Map){\n    super.init(map: map)\n}\n\npublic override func mapping(map: Map) {\n    super.mapping(map: map)\n    promotions <- map[SerializationKeys.promotions]\n}\n\npublic override func dictionaryRepresentation() -> [String: Any] {\n    var dictionary: [String: Any] = [:]\n    if let value = promotions { dictionary[SerializationKeys.promotions] = value.map { $0.dictionaryRepresentation() } }\n    return dictionary\n}\n\n}\n```\n        . @SD10 .. Thank for your response.\nCould you please suggest me on how to do it ?\nI have tried various way but not working yet.. @esam091 @SD10 .. Thank you for your suggestion.\nI have tried as you suggested and it seems to be working fine now.\nThank you so much for your help and I will test it again and let you know whether it works fine or not.\nReally thank you both.. ",
    "hemant3370": "@BasThomas I want to hit 4 different API endpoints and get a callback only when all 4 are completed.. @BasThomas  case .next(let element) never gets called.. ",
    "anhpt681995": "@jdisho Thanks for your respond. Yes, as you pointed out, 500 indicates that the server encountered an unexpected condition which prevented it from fulfilling the request. However, with the same url, parameters, HTTP method ... when I make a request with Alamofire it worked. So I think the problem is not at the server. Maybe I did something wrong with Moya but I didn't know where I was wrong.. @jdisho Thanks for your respond. Yes, as you pointed out, 500 indicates that the server encountered an unexpected condition which prevented it from fulfilling the request. However, with the same url, parameters, HTTP method ... when I make a request with Alamofire it worked. So I think the problem is not at the server. Maybe I did something wrong with Moya but I didn't know where I was wrong.. @jdisho Well spotted, however, I tried it, but it still doesn't work. It's still 500 :(\nThanks for have a look at it.. @jdisho Well spotted, however, I tried it, but it still doesn't work. It's still 500 :(\nThanks for have a look at it.. ",
    "oluckyman": "Awesome! \nLooking forward to see it merged into master. Hi @pietrocaselani I'm pretty new in iOS development, so your code is too complex for me. As I understood, you're getting token from response and save it in a property.\nIn my case token is requested from Firebase Auth module asynchronously . And to be sure that the token is valid I have to retrieve it right before request. . @SD10 that's good idea. This way moya api layer will assume that the token always exists and valid and I can use AccessTokenPlugin.\nDo I understand right, that I have to implement a wrapper around moya api? That wrapper should decide if the resource is public or not and if it's public then just call moya api, and if not then request token, wait for token and call moya api after that.\nProbably that wrapper could reuse AccessTokenAuthorizable extension  to not duplicate public/non-public routes definition.\n@pietrocaselani \nThank you! But in my case token could be invalid even if it exists. It can be expired. So the only way to be sure that it's valid is to request it before any non-public request.\nYour code snippet still could work for me. I'll just assume that token is always invalid.\nBut it brings us where we started: I do not want to request token if it is not needed for request. And in requestClosure I have no way to check if the endpoint is public or not.. @pietrocaselani True. I understand. But still, how to deal with public endpoints which do not require Authorization header at all?. @pietrocaselani this is how I tried to do it initially. The problem was that AccessTokenPlugin assumes that token is stored as a property, but in my case I have to do async call to get token before request.\nSeems like requestClosure (as you described above) does not work together with AccessTokenPlugin. Because requestClosure have no access to TargetType and AccessTokenPlugin unable do async request. \n@sunshinejr I thought there will be out-of-the-box solution, since my use case is pretty common. Thanks for explanation! Now I understand, that I'll need a wrapper around moya . ",
    "larsschwegmann": "@SeRG1k17 How did you resolve this? I am experiencing the same issue.... ",
    "niojk": "@BasThomas  It works, thanks a lot. ",
    "peril-moya[bot]": "Hey @SD10,\n  We think the following documentation may be helpful in resolving your question:\n\nGetting Started with Moya \n\nYou can find the rest of Moya's English documentation here.\n  We also have Chinese versions of the documentation here.\n  You can see our in source documentation at moya.github.io. \n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@m3g0byt3 Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@mykoma Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@varun989 Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@lexorus Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@jianstm Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@maxxx777 Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@simonrice Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@khoren93 Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@dpoggi Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. \n<!--\n  0 failure: \n  0 warning: \n1 markdown notices\n  DangerID: danger-id-peril;\n-->\n@f-meloni Thanks a lot for contributing to Moya! We've invited you to join \n  the Moya GitHub organization \u2013 no pressure to accept! If you'd like more \n  information on what that means, check out our contributor guidelines and\n  feel free to reach out to @Moya/core-team with any questions.\n\n  Generated by :no_entry_sign: dangerJS\n\n. ",
    "NSMyself": "I tried both versions (11.0.2 and xcode_9.3)  but I'm experiencing more errors in its dependencies.\nmodule compiled with Swift 4.0.3 cannot be imported in Swift 3.3: /Users/nsmyself/moya/Carthage/Checkouts/Moya/Carthage/Build/iOS/RxSwift.framework/Modules/RxSwift.swiftmodule/arm.swiftmodule\nHere's the log:\n\n\u279c  moya carthage update --platform iOS\n Fetching Result\n Fetching RxSwift\n Fetching ReactiveSwift\n Fetching Alamofire\n Checking out Alamofire at \"4.7.1\"\n Checking out Result at \"3.2.4\"\n Checking out ReactiveSwift at \"3.1.0\"\n Downloading RxSwift.framework binary at \"Spread.2\"\n Checking out Moya at \"11.0.2\"\n xcodebuild output can be found in /var/folders/14/_k0vb8rx1w16j43wvkcg949r0000gn/T/carthage-xcodebuild.Gc7aGU.log\n Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\n Building scheme \"Result-iOS\" in Result.xcodeproj\n2018-04-10 14:28:05.167 xcodebuild[86765:9894907]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.167 xcodebuild[86765:9894907]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.170 xcodebuild[86765:9894907]  iPhoneSupport: Unable to mount DeveloperDiskImage on (null) (Error Domain=com.apple.dtdevicekit Code=601 \"Could not find platform\" UserInfo={NSLocalizedDescription=Could not find platform})\n2018-04-10 14:28:05.279 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.292 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.308 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.547 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.559 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.570 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.878 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.893 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:05.908 xcodebuild[86765:9894905] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n Building scheme \"ReactiveSwift-iOS\" in ReactiveSwift.xcworkspace\n--- xcodebuild: WARNING: Unable to open project file '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift-UIExamples.playground' in workspace '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift-UIExamples.playground' in workspace '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n2018-04-10 14:28:36.902 xcodebuild[86930:9896277]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:36.903 xcodebuild[86930:9896277]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:36.905 xcodebuild[86930:9896277]  iPhoneSupport: Unable to mount DeveloperDiskImage on (null) (Error Domain=com.apple.dtdevicekit Code=601 \"Could not find platform\" UserInfo={NSLocalizedDescription=Could not find platform})\n2018-04-10 14:28:37.013 xcodebuild[86930:9896147] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:37.029 xcodebuild[86930:9896147] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:37.048 xcodebuild[86930:9896147] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:37.263 xcodebuild[86930:9896147] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:37.275 xcodebuild[86930:9896147] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:28:37.288 xcodebuild[86930:9896147] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n--- xcodebuild: WARNING: Unable to open project file '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift-UIExamples.playground' in workspace '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n2018-04-10 14:29:01.023 xcodebuild[87041:9896817]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:01.024 xcodebuild[87041:9896817]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:01.028 xcodebuild[87041:9896817]  iPhoneSupport: Unable to mount DeveloperDiskImage on (null) (Error Domain=com.apple.dtdevicekit Code=601 \"Could not find platform\" UserInfo={NSLocalizedDescription=Could not find platform})\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:17: warning: redeclaration of associated type 'Error' from protocol 'SignalProducerConvertible' is better expressed as a 'where' clause on the protocol\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:24: warning: redundant conformance constraint 'Self.Error': 'Error'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Disposable.swift:162:25: warning: 'flatMap' is deprecated: Please use compactMap(:) for the case where closure returns an optional value\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:33:9: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:34:9: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:135:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:136:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:199:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:200:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:154:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:155:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:114:15: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:115:15: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:17: warning: redeclaration of associated type 'Error' from protocol 'SignalProducerConvertible' is better expressed as a 'where' clause on the protocol\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:24: warning: redundant conformance constraint 'Self.Error': 'Error'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Disposable.swift:162:25: warning: 'flatMap' is deprecated: Please use compactMap(:) for the case where closure returns an optional value\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:33:9: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:34:9: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:135:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:136:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:199:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:200:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:154:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:155:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:114:15: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:115:15: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:17: warning: redeclaration of associated type 'Error' from protocol 'SignalProducerConvertible' is better expressed as a 'where' clause on the protocol\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:24: warning: redundant conformance constraint 'Self.Error': 'Error'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Disposable.swift:162:25: warning: 'flatMap' is deprecated: Please use compactMap(:) for the case where closure returns an optional value\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:33:9: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:34:9: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:135:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:136:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:199:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:200:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:154:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:155:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:114:15: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:115:15: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:17: warning: redeclaration of associated type 'Error' from protocol 'SignalProducerConvertible' is better expressed as a 'where' clause on the protocol\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:24: warning: redundant conformance constraint 'Self.Error': 'Error'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Disposable.swift:162:25: warning: 'flatMap' is deprecated: Please use compactMap(:) for the case where closure returns an optional value\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:33:9: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:34:9: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:135:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:136:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:199:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:200:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:154:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:155:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:114:15: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:115:15: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:17: warning: redeclaration of associated type 'Error' from protocol 'SignalProducerConvertible' is better expressed as a 'where' clause on the protocol\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:24: warning: redundant conformance constraint 'Self.Error': 'Error'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Disposable.swift:162:25: warning: 'flatMap' is deprecated: Please use compactMap(_:) for the case where closure returns an optional value\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:33:9: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:34:9: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:135:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:136:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:199:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:200:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:154:10: warning: 'deinitialize()' is deprecated--- xcodebuild: WARNING: Unable to open project file '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift-UIExamples.playground' in workspace '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n--- xcodebuild: WARNING: Unable to open project file '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.playground' in workspace '/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace'.\n Building scheme \"RxMoya\" in Moya.xcodeproj\n2018-04-10 14:29:42.084 xcodebuild[87202:9898610]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.084 xcodebuild[87202:9898610]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.087 xcodebuild[87202:9898610]  iPhoneSupport: Unable to mount DeveloperDiskImage on (null) (Error Domain=com.apple.dtdevicekit Code=601 \"Could not find platform\" UserInfo={NSLocalizedDescription=Could not find platform})\n2018-04-10 14:29:42.193 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.209 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.227 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.243 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.259 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n BUILD FAILED \nThe following build commands failed:\n  CompileSwift normal armv7\n  CompileSwiftSources normal armv7 com.apple.xcode.tools.swift.compiler\n  CompileSwiftSources normal arm64 com.apple.xcode.tools.swift.compiler\n  CompileSwift normal arm64\n(4 failures)\n: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:155:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:114:15: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:115:15: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:17: warning: redeclaration of associated type 'Error' from protocol 'SignalProducerConvertible' is better expressed as a 'where' clause on the protocol\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:24: warning: redundant conformance constraint 'Self.Error': 'Error'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Disposable.swift:162:25: warning: 'flatMap' is deprecated: Please use compactMap(:) for the case where closure returns an optional value\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:33:9: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:34:9: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:135:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:136:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:199:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:200:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:154:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:155:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:114:15: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:115:15: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:17: warning: redeclaration of associated type 'Error' from protocol 'SignalProducerConvertible' is better expressed as a 'where' clause on the protocol\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:24: warning: redundant conformance constraint 'Self.Error': 'Error'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Disposable.swift:162:25: warning: 'flatMap' is deprecated: Please use compactMap(:) for the case where closure returns an optional value\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:33:9: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:34:9: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:135:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:136:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:199:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:200:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:154:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:155:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:114:15: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:115:15: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:17: warning: redeclaration of associated type 'Error' from protocol 'SignalProducerConvertible' is better expressed as a 'where' clause on the protocol\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/UnidirectionalBinding.swift:25:24: warning: redundant conformance constraint 'Self.Error': 'Error'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Disposable.swift:162:25: warning: 'flatMap' is deprecated: Please use compactMap(_:) for the case where closure returns an optional value\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/SignalProducer.swift:1960:81: warning: 'ReversedRandomAccessCollection' is deprecated: renamed to 'ReversedCollection'\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:33:9: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:34:9: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:135:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:136:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:199:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:200:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:154:10: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Atomic.swift:155:10: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:114:15: warning: 'deinitialize()' is deprecated: the default argument to deinitialize(count:) has been removed, please specify the count explicitly\n/Users/nsmyself/moya/Carthage/Checkouts/ReactiveSwift/Sources/Scheduler.swift:115:15: warning: 'deallocate(capacity:)' is deprecated: Swift currently only supports freeing entire heap blocks, use deallocate() instead\n/Users/nsmyself/moya/Carthage/Checkouts/Moya/Sources/RxMoya/Single+Response.swift:2:8: error: module compiled with Swift 4.0.3 cannot be imported in Swift 3.3: /Users/nsmyself/moya/Carthage/Checkouts/Moya/Carthage/Build/iOS/RxSwift.framework/Modules/RxSwift.swiftmodule/arm.swiftmodule\n/Users/nsmyself/moya/Carthage/Checkouts/Moya/Sources/RxMoya/Single+Response.swift:2:8: error: module compiled with Swift 4.0.3 cannot be imported in Swift 3.3: /Users/nsmyself/moya/Carthage/Checkouts/Moya/Carthage/Build/iOS/RxSwift.framework/Modules/RxSwift.swiftmodule/arm64.swiftmodule\nA shell task (/usr/bin/xcrun xcodebuild -project /Users/nsmyself/moya/Carthage/Checkouts/Moya/Moya.xcodeproj -scheme RxMoya -configuration Release -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES clean build) failed with exit code 65:\n2018-04-10 14:29:42.084 xcodebuild[87202:9898610]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.084 xcodebuild[87202:9898610]  DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.087 xcodebuild[87202:9898610]  iPhoneSupport: Unable to mount DeveloperDiskImage on (null) (Error Domain=com.apple.dtdevicekit Code=601 \"Could not find platform\" UserInfo={NSLocalizedDescription=Could not find platform})\n2018-04-10 14:29:42.193 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.209 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.227 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.243 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n2018-04-10 14:29:42.259 xcodebuild[87202:9898346] [MT] DTDeviceKit: deviceType from 244d68f158e2bc0485ac2ea5ffa1527afca33323 was NULL\n BUILD FAILED \nThe following build commands failed:\n  CompileSwift normal armv7\n  CompileSwiftSources normal armv7 com.apple.xcode.tools.swift.compiler\n  CompileSwiftSources normal arm64 com.apple.xcode.tools.swift.compiler\n  CompileSwift normal arm64\n(4 failures)\n. Disregard that, using --no-use-binaries fixed it. . \n",
    "mihai8804858": "Oh, I missed that PR. Thank you @SD10. I'm closing this.. ",
    "mossby": "It was something completely unrelated to my (in retrospect) droolings of a madman above. I'm a close minded fool and was blinded by what I conceptualized \"imageMapping\" to mean. Sorry for the waste of time my Moya friends!. ",
    "alanyjw": "@SD10 Not exactly.\nWhat I meant was to change the initializer to include a outputFormat parameter:\nswift\npublic init(verbose: Bool = false,\n            cURL: Bool = false,\n            output: ((_ separator: String, _ terminator: String, _ items: Any...) -> Void)? = nil,\n            outputFormat: ((_ loggerId: String, date: String, identifier: String, message: String) -> String)? = nil,\n            requestDataFormatter: ((Data) -> (String))? = nil,\n            responseDataFormatter: ((Data) -> (Data))? = nil) {\n        self.cURL = cURL\n        self.isVerbose = verbose\n        self.output = output ?? NetworkLoggerPlugin.reversedPrint\n        self.outputFormat = outputFormat ?? NetworkLoggerPlugin.printFormatter\n        self.requestDataFormatter = requestDataFormatter\n        self.responseDataFormatter = responseDataFormatter\n    }\nWhere the fallback implementation will be what it is in the codebase:\nswift\nfileprivate extension NetworkLoggerPlugin {\n    static func printFormatter(_ loggerId: String, date: String, identifier: String, message: String) -> String {\n        return \"\\(loggerId): [\\(date)] \\(identifier): \\(message)\"\n    }\n}\nLet me know if this sounds reasonable and I'll submit a PR \ud83d\ude04 . @SD10 Could the build failure be flakey? It looks unrelated to this change and the two build failures are happening at different steps.. @SD10 @sunshinejr I've made the changes based on the suggestions. The build seems to be failing for unrelated reasons again \ud83e\udd14 . @sunshinejr When is the release cutoff date? I'll see if I could work towards that date.. @SD10 Are you thinking of a Formatter object that is responsible for both output and outputFormat?\n@sunshinejr If both of you are keen on the separate Formatter object, then I guess there wouldn't be a need for the refactor you are proposing?. ",
    "honbolau": "@sunshinejr  I just want to save the full URL to the database in the following way.\nhttp://xxxx.com/view/cg/cargo/cargoAreaAvgPriceDate?areaId=0&releaseDate=2018-04-12\nBut I can't get the parameters in this method.\nI'm using rxSwift now, what should I do with plugin?. @pedrovereza Thank you, but I can't get the cache data from the database immediately when I send the network request.. ",
    "zenghaojim33": "Hello guys I'm new to Moya and I'm dealing with the same problem as this.  I have a token stored in local and whenever I make a post request I put the token in the header. If fail, request the token and try again.  Currently I'm using retryWhen in RxSwift for every post request (which I think not elegant).  I've already read #1536 and this issue but I can't find anything related to retrying logic ,or did I miss   somthing?  How did end up with this problem?   \nThanks.. Thank you! I will give it a try\n\n\u5728 2018\u5e745\u670830\u65e5\uff0c\u4e0a\u53483:34\uff0cRomain Vermot notifications@github.com \u5199\u9053\uff1a\n@zenghaojim33 https://github.com/zenghaojim33 I edited the request function in the AuthenticatedNetworking extension:\nextension AuthenticatedNetworking {\nfunc request(_ target: MyAuthenticatedAPI) -> Observable {\n      let actualRequest = self.provider.request(target)\n      if !ApplicationManager.shared.tokenIsExpiredOrExpiringSoon() {\n          return actualRequest\n      }\n      return self.provider.request(MyAuthenticatedAPI.refreshToken(refreshToken: ApplicationManager.shared.refreshToken))\n          .map({ $0.token() }) // To check the status and to parse the response\n          .asObservable()\n          .flatMap() { (result) -> Observable in\n              switch result {\n              case .success:\n                  return actualRequest\n              case .failure:\n                  // TODO: Handle refresh token error\n                  // A request that uses \"TackActivity\" is blocked when this function return Observable.never()\n                  return actualRequest\n                  // return Observable.never()\n              }\n          }\n  }\n}\nI hope that will help you :-)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/Moya/Moya/issues/1643#issuecomment-392914404, or mute the thread https://github.com/notifications/unsubscribe-auth/AIcC1HpiGHnmf_vC9vihzABUO-OVSW8Pks5t3aLagaJpZM4TaJn3.\n\n\n. ",
    "vermotr": "@zenghaojim33 I edited the request function in the AuthenticatedNetworking extension: \n```swift\nextension AuthenticatedNetworking {\nfunc request(_ target: MyAuthenticatedAPI) -> Observable<Moya.Response> {\n    let actualRequest = self.provider.request(target)\n    if !ApplicationManager.shared.tokenIsExpiredOrExpiringSoon() {\n        return actualRequest\n    }\n    return self.provider.request(MyAuthenticatedAPI.refreshToken(refreshToken: ApplicationManager.shared.refreshToken))\n        .map({ $0.token() }) // To check the status and to parse the response\n        .asObservable()\n        .flatMap() { (result) -> Observable<Response> in\n            switch result {\n            case .success:\n                return actualRequest\n            case .failure:\n                // TODO: Handle refresh token error\n                // A request that uses \"TackActivity\" is blocked when this function return Observable.never()\n                return actualRequest\n                // return Observable.never()\n            }\n        }\n}\n\n}\n```\nI hope that will help you :-). ",
    "kaleemozitech": "Yes Path and JSON Body work together. @sunnyleeyun this is how exactly \nvar path: String {\n        switch self {\n        case let .cities(str:str):\n            return \"/home/cities/\\(str)\"\n        default:\n           return \"/home\"\n}\n}\ni am not taking about query string URL encoding \ni am talking about appending var in URL path. @sunnyleeyun did you get success. here is one more answer \nhttps://github.com/Moya/Moya/issues/909. here is one more Answer if you want to use Both JSON and URL Encoding\nhttps://github.com/Moya/Moya/issues/1059. @sunnyleeyun i am also facing one issue(https://github.com/Moya/Moya/issues/1653) for URL Encoded and JSON Encoded parameters and i tried to use requestCompositeParameters but failed then uploadCompositeMultipart worked perfectly \n        let avatarObj = MultipartFormData(provider: .data(data), name: \"avatar\", fileName: \"avatar.jpg\", mimeType: \"image/jpg\")\n        let nameObj = MultipartFormData(provider: .data(name.data(using: .utf8)!), name: \"name\")\n        let genderObj = MultipartFormData(provider: .data(\"\\(gender)\".data(using: .utf8)!), name: \"gender\")\n        let date_of_birthObj = MultipartFormData(provider: .data(date_of_birth.data(using: .utf8)!), name: \"date_of_birth\")\n        let cityObj = MultipartFormData(provider: .data(\"\\(city)\".data(using: .utf8)!), name: \"city\")\n        let addressObj = MultipartFormData(provider: .data(address.data(using: .utf8)!), name: \"address\")\n        //  let blog_notification_status = MultipartFormData(provider: .data(name.data(using: .utf8)!), name: \"name\")\n        let feeObj = MultipartFormData(provider: .data(\"\\(fee)\".data(using: .utf8)!), name: \"fee\")\n        let servicesObj = MultipartFormData(provider: .data(services.data(using: .utf8)!), name: \"services\")\n        let bioObj = MultipartFormData(provider: .data(bio.data(using: .utf8)!), name: \"bio\")\n        let educationObj = MultipartFormData(provider: .data(education.data(using: .utf8)!), name: \"education\")\n        let specialitiesObj = MultipartFormData(provider: .data(\"\\(specialities)\".data(using: .utf8)!), name: \"specialities[]\")\n        let twitterObj = MultipartFormData(provider: .data(twitter.data(using: .utf8)!), name: \"twitter\")\n        let websiteObj = MultipartFormData(provider: .data(website.data(using: .utf8)!), name: \"website\")\n        let facebookObj = MultipartFormData(provider: .data(facebook.data(using: .utf8)!), name: \"facebook\")\n        let google_plusObj = MultipartFormData(provider: .data(google_plus.data(using: .utf8)!), name: \"google_plus\")\n        let linked_inObj = MultipartFormData(provider: .data(linked_in.data(using: .utf8)!), name: \"linked_in\")\n\n        let multipartData = [avatarObj, nameObj, genderObj, date_of_birthObj, cityObj, addressObj, feeObj, servicesObj, bioObj, educationObj,specialitiesObj, twitterObj, websiteObj, facebookObj, google_plusObj, linked_inObj]\n\n//            return .uploadMultipart(multipartData)\n        return .uploadCompositeMultipart(multipartData, urlParameters: [\"_method\" : \"put\"])`\n\n. @SeRG1k17 #1629 did not solved the issue of passing JSON (Created from Some Model)\ni am talking about\nswift\ncase .youCase:\n  return .requestParameters(parameters: myJSONobject, encoding: URLEncoding.queryString). @SD10  thanks . you can use\nswift  \n case let .success(moyaResponse):\n                moyaResponse.mapString(). and i got succeeded using Multipart With Parameters \nlet multipartData = [ name, gender, date_of_birth, city, address, servicesObj]\n            return .uploadCompositeMultipart(multipartData, urlParameters: [\"_method\" : \"put\"])\nbut still there is issue with \nreturn .requestCompositeParameters(bodyParameters: [\"city\" : 1], bodyEncoding: JSONEncoding.default , urlParameters: [\"_method\" : \"put\"]). ",
    "sunnyleeyun": "@SeRG1k17 I don't think it's the same. The path I meant was not \"query string\".\n@kaleemozitech How exactly?. @sunshinejr Yes, I'd like url as https://url.to/path/MEMBER_ID , but what do you mean \"Probably, though, you would need to make an encoding of your path by yourself.\" I supposed I'm doing things half right. Is there any example I could take as an example?. @SeRG1k17 It's possible to use return \"Cart/\\(memberid)\" at the path target, so I supposed this means we can use dynamic formatting in path variable, but perhaps not combining with dynamic task target.. @kaleemozitech  Thanks for your reply. Can you take a look at my question above? Cause it seems that I did exactly as you said at the very beginning. However, it wasn't working. Perhaps there's something I missed or went wrong which I didn't recognized. . ",
    "gobetti": "Hi @sunshinejr , thanks for the fast and kind answer!\nIf subclassing is still considered a good practice after RxMoyaProvider got deprecated, then I'm all for it. An example may help, but I can anticipate that currently there is a single method in MoyaProvider handling all StubBehavior cases and I'd like to override only the delayed one (the one where a scheduler will make sense since there's timing embedded). This method has the following signature:\nswift\nopen override func stubRequest(_ target: Target, request: URLRequest, callbackQueue: DispatchQueue?, completion: @escaping Moya.Completion, endpoint: Endpoint, stubBehavior: Moya.StubBehavior) -> CancellableToken\nInternally, it does this:\nlet callbackQueue = callbackQueue ?? self.callbackQueue\nHowever notice that callbackQueue is internal in MoyaProvider, so given that I want to keep this code, I need to create another of that property in my subclass.\nAlso, my TestScheduler needs to be injected in my MoyaProvider subclass via its initializer, so that I don't modify the signature of the overridden method. But here again I had problems because I wanted to keep all the same parameter default values, and some won't work at least not in a first naive attempt.\nSo in brief, an example that:\n\nOverrides stubRequest by replacing the code for one of the stub behaviors\nExposes a new initializer with an additional parameter, while keeping all the same parameter default values from the MoyaProvider subclass\n\nwill definitely be all I need! \ud83d\ude04 \nThank you again!. A bot will close this issue because it\u2019s stale, but it would be nice if we had a final answer before that happens, even if it\u2019s a \u201cnot possible to do\u201d (even though it was said to be people who were able to subclass in order to use TestScheduler). Thanks again!. Hi guys! I'm sorry, but for my purposes, it ended up being a simpler approach to write a new network layer on top of RxCocoa, whereas Moya does it from scratch and provides reactified versions via extensions, making it fully decoupled from RxSwift/RxCocoa - which is a great point, but not something I'm taking benefit from given that I don't want to decouple my project anyway :)\nThanks for your time and attention, and feel free to close this discussion as stale or however fits best for you. If I ever need to dig into this again, I'll surely dedicate some time and contribute!. ",
    "kaleemasad": "Yes exactly right https://github.com/SeRG1k17. ",
    "Pawlo1501": "thanks for response but when i have code like this\nswift\n self.provider.rx.request(.getObjects).debug().map(ObjectsList.self).asObservable().subscribe(\n                onNext: { [weak self] model in\n                    guard let objects = model.list, let firstObject = objects.first else {return}\n                    self?.firstObject.value = firstObject\n                    onNext(objects)\n                },\n                onError: { error in\n                    print(error.localizedDescription)\n            }).disposed(by: self.disposeBag)\n        }\nAnd this \"firstObject\" is a class object with property \"text\" and in this \"text\" sometimes i'm getting this html code . Ok thanks all for your help! . ",
    "liuwin7": "Maybe your server API is no support for the JSON format. It should accept the Form.. ",
    "SimonRice": "Chipping in a little here with the CI build issue, the issue at hand is Carthage attempts to build your project with dependencies without actually checking them out - as a result, Alamofire, Result, etc. is not found given you have no cache for your nice new Xcode 9.3 based CI, so your build fails.  This isn't a problem on the Xcode 9.2 based CI as there's already a valid cache, so the dependencies don't need building (or checking out).\nSlightly further down the build process, a carthage bootstrap phase is run, which checks out the dependencies and once again builds them (therefore, I believe, it's equivalent to carthage checkout && carthage build).  I wonder if this should be moved up the build process and replace the carthage build step.. Fixed by #1656.. ",
    "andy1247008998": "I figured it out myself.\nIn TASK section, \nchange\nreturn .requestParameters(parameters: [\n                \"org.apache.struts.taglib.html.TOKEN\": token,\n                \"userid\": userid,\n                \"password\": password\n                ], encoding: URLEncoding.queryString)\nto\nreturn .requestParameters(parameters: [\n                \"org.apache.struts.taglib.html.TOKEN\": token,\n                \"userid\": userid,\n                \"password\": password\n                ], encoding: URLEncoding.default)\nWhy the encoding here also affects the encoding for baseURL and path?\nAnyway, I will close this issue.. ",
    "snowtema": "Podfile\n```rb\nplatform :ios, '11.0'\nuse_frameworks!\ntarget 'Workout' do\n  # Analytics\n  pod 'Fabric', '~> 1.7.3'\n  pod 'Firebase/Core', '~> 4.9'\n  pod 'Firebase/Messaging', '~> 4.9'\n  pod 'Crashlytics', '~> 3.10.0'\n# Reactive\n  pod 'RxSwift', '~> 4.1.2'\n  pod 'RxCocoa', '~> 4.1.2'\n  pod 'RxDataSources', '~> 3.0.2'\n  pod 'Action'\n  pod 'RxFlow', '~> 1.2.0'\n  pod 'RealmSwift', '~> 3.0.2'\n  # pod 'Moya/RxSwift'\n# Network & parsing\n  pod 'Moya', '~> 11.0'\n  pod 'Unbox', '~> 2.5.0'\n  pod 'Kingfisher'\n# UI\n  pod 'Reusable', '~> 4.0.0'\n  pod 'Hero', '~> 1.1.0'\n# Colors\n  pod 'DynamicColor', '~> 4.0.1'\n  pod 'UIImageColors', '~> 2.0.0'\nend\n```. ",
    "hairui19": "@SD10 Sure i can.. I just thought it was more of my part rather than moya, being careless and all. \nAnyway, so there is a parameter called \"filename\" when creating multiParts in Moya/Alamofire. Just remember to retrieve the file extension locally and assign this extension to the \"filename\" parameter.\nYou can do so via url.lastComponent (or any other way you prefer) to get something like \"random.pdf\" form the file you wish to upload. The \"random\", which comes before the \".\" operator will not have much effect on the returned URL. What really affects the URL is the \".pdf\" extension, which will allow the returned URL to return a \".pdf\" link.  \neg. \"http://myImage-however-the-back-end-names-it.pdf\"\nIt has very rare practical uses though .\nHopefully, it helps (: \n. ",
    "tagirkaz": "I found that this is the Alamofire issue and it will be fixed in Alamofire 5. Here is the link https://github.com/Alamofire/Alamofire/issues/2384. I found that this is the Alamofire issue and it will be fixed in Alamofire 5. Here is the link https://github.com/Alamofire/Alamofire/issues/2384. ",
    "R-U-N": "I fix this by setting optimization to None in Release Tempoary\u3002I hope I can find out what's the problem by my abilty limited me\u3002So wish you can fix it. I fix this by setting optimization to None in Release Tempoary\u3002I hope I can find out what's the problem by my abilty limited me\u3002So wish you can fix it. ",
    "glennposadas": "@SD10 , does that mean users in prod would experience such crash? I experienced that tonight so I went here. Thank you.. @SD10 , does that mean users in prod would experience such crash? I experienced that tonight so I went here. Thank you.. ",
    "LeoQingit": "I meet this issue too. How can I fixed it?. I meet this issue too. How can I fixed it?. just because response contains statusCode 422 then it crashed. just because response contains statusCode 422 then it crashed. excuse me, Its my code issue . sorry. excuse me, Its my code issue . sorry. ",
    "ReflectionMzy": "\n\u5bf9\u4e0d\u8d77\uff0c\u8fd9\u662f\u6211\u7684\u4ee3\u7801\u95ee\u9898\u3002\u62b1\u6b49\n\nhow to solve this problem\uff1f thx. > \u5bf9\u4e0d\u8d77\uff0c\u8fd9\u662f\u6211\u7684\u4ee3\u7801\u95ee\u9898\u3002\u62b1\u6b49\nhow to solve this problem\uff1f thx. ",
    "fredpi": "@SD10 Thanks for your fast reply!\nMaybe I'm taking an odd stance, but for me, setting the cache policy is not the same as real cache handling as discussed in the attached issues. Actually, this plugin is just about associating a cache policy which is already built-in into URLRequest with a Moya target. As such, it doesn't differentiate much from the authentication plugin natively integrated into Moya.\nDo you agree in that the plugin discussed here isn't a \"real\" caching extension with custom logic? If yes, where should one draw the line between what URLRequest configuration plugins should be integrated within Moya and which plugins should be created for each individual project?. @SD10 Only including plugins that are very widely used and / or are very difficult to write makes sense to me as a definition as to what plugins to include \ud83d\udc4d\nThis being said, the CachePolicyPlugin doesn't really fit here. Closing.... ",
    "DavidTomic": "@WeiRujian Thank you for the answer.\nMaybe I can try similar thing using PluginType:\nstruct MyMoyaPlugin: PluginType {\n  func prepare(_ request: URLRequest, target: TargetType) -> URLRequest {\n      if target is upload { // Something like that\n           request.timeoutInterval = 100\n      } else {\n           request.timeoutInterval = 10\n      }\n   }\n}\nWhat do you think, will it work?\n. @WeiRujian I tried above but without success.\nI end up with a solution to initialize two providers with different SessionManagers. One SessionManager has timeout 10s and the second one 120s.\nThe second provider I am using for uploading media files, and the first one for rest.. ",
    "hamdshah": "In the Task you can mention the type of encoding\nhttps://github.com/Moya/Moya/blob/master/Sources/Moya/Task.swift#L19. @ZZHHAANNGG \nIf you can share some more code then it would be helpfull to understand the problem, but from the current sample looks like that \nprovider.rx.request returns Single<Request> while your function return type is Single<[ProductModel]> so you have to map it to the model first.\n. Source:\nhttps://github.com/Moya/Moya/blob/master/Sources/Moya/Task.swift#L19\nExample \nhttps://github.com/Moya/Moya/blob/master/docs/Examples/ParameterEncoding.md. ",
    "ZZHHAANNGG": "Thanks for pointing out the wrong general type issue.. @suhitp  Is there a solution that I can chain the result of API with other operators, such as flatMap?\nBecause I generate a Moya request in the ViewModel, then bind it in View.. @suhitp My code was like that, however, if there is an error occurs and I use bind(to:) in the ViewController, it would crash. Seems the sequence is terminated. So I would like to do pattern matching inside the chain. How can I do that? . The code is in a ViewModel. I have to subscribe the provider inside a flatMap. So, I can bind the result/error BehaviorRelay to the View.\nIs this the correct way?\n```\nself.dummy = Observable.combineLatest(Para1, Para2){a, b in\n            return (a, b)\n            }.flatMap{ (arg) -> Observable in\n            let (startDateStr, endDateStr) = arg\n            return Observable.just(ATarget)\n\n        }.flatMap{ [unowned self](target) -> Observable<Void> in\n\n            self.provider.rx.request(target as! PurchaseTarget)\n                .subscribe{ event in\n                    switch event {\n                    case .success(let response):\n\n// Give the data to a BehaviorRelay\n                            self.result.accept(purchaseModel)\n                    case .error(let error):\n\n// Give the data to a BehaviorRelay                          \n                            self.errors.accept(Error)\n                        }\n                    }.disposed(by: self.rx.disposeBag)\n            return Observable.just()\n    }\n\n```\nAnd then subscribe this dummy observable\nself.dummy.subscribe(onNext:{ _ in}).disposed(by: self.rx.disposeBag). Hi @pietrocaselani \nYour approach is more elegant to handle the errors from the Provider. The reason why I need to subscribe the provider is when the provider returns an error, seems like the stream is terminated and the app would crash. So I do not know whether I can use map for the response and the catchError for the error.. @pietrocaselani  I like your approach better. I was trying to use your approach below. But, I had an issue, if I use two BehaviorReply to separate the data and errors, then I can bind those data to either a UITableview or a UILabel.  For example,\nViewModel.tableviewBehaviorReply.bind(View.tableview...)\nViewModel.errorBehaviorReply.bind(View.errorLabel...)\nHowever, if I wrap the actual data and error in an enum, seems like I have no way to use binding to a UITableView in View.  With that being said, I have to subscribe this Observable,  and extract the data or error and manually set to either a component or a error label. How would you do in this case?\nObservable.combineLatest(Para1, Para2) {a, b in\n    return (a, b)\n}.flatMap { (arg) -> Observable<Response> in\n    let (startDateStr, endDateStr) = arg\n    let target = ATarget() //Creates Moya target type\n    self.provider.rx.request(target)\n}.map { response -> ViewState\n    let model = // map response into PurshadedModel\n    return ViewState.purchased(model)\n}.catchError { error -> Observable<ViewState> in\n    return ViewState.purchaseFailed(error)\n}.subscribe(onNext { viewState in\n    //Binds viewState which can be a purchased or an error into the view\n}).disposed(by: bag). ",
    "simonbromberg": "Oh looks like what I am missing is an .asObservable() in there\u2026 \nRelevant question #1423 \nFIxes the compiler error, but network requests still not working. Code inside the flatMap not being called at all.. And, based on the providers documentation: \n\nAlways remember to retain your providers, as they will get deallocated if you fail to do so. \n\nSo I moved the provider to a stored variable in the class containing the network method, and now calls are going through.\nI have also developed a better understanding of the distinction between Observables and Singles as a result of this investigation.. ",
    "read0nly": "hello,How do I pass this array? just like in Paw.. ",
    "feixue299": "It doesn't look synchronous\n\n. @SD10 thank you. it work for me.. ",
    "QiProject": "This is what lack of my knowledge, thanks to point it me out !\nI didn't get a -999 response since I am using Moya reactive, \n\nThe same reminder applies also to Moya Reactive implementations, but you will not receive any response because the whole Observable will be disposed, releasing any subscription that you may have configured.\n\nit would be nice if I get some info in moya reactive, but well at least I know it :D. ",
    "KompoD": "@BasThomas and @pedrovereza, thanks for your answers! :). ",
    "chyrta": "Hi there, I was the author of the post which Yulia shared here. I got a handy comment from one of the contributors Andrew regarding asynchronicity of the solution. I plan to improve the code to handle such cases, and I will let you know about that.. ",
    "soxjke": "That's great, thank you!. ",
    "m3g0byt3": "Thanks everyone. \nMoya is \ud83d\ude80\ud83d\udd25\u270c\ufe0f, I've really enjoyed using it.. ",
    "suhitp": "@ZZHHAANNGG To handle the response you first need to subscribe to the response coming from the Moya+RxSwift extension API. Please refer to the RxSwift documentation here\nswift\napi.subscribe { (event) in\n         switch event {\n          case .success(let json):\n                 print(\"JSON: \\(json)\")\n          case .error(let error):\n               print(\"Error: \\(error.localizedDescription)\")\n          }\n        }.disposed(by: disposeBag)\nOr by using subscribe(onSuccess:onError:) as follows:\nswift\napi.subscribe(onSuccess: { (json) in\n                print(\"JSON: \\(json)\")\n            },\n            onError: { (error: Error) in\n                print(\"Error: \\(error.localizedDescription)\")\n            }).disposed(by: disposeBag). @ZZHHAANNGG yes you can chain the result with other operators like flatMap, map etc for example\n```swift\n     api.flatMap { (response) -> Single<[User]> in\n                let userList = try response.map([User].self)\n                return Single.just(userList)\n            }\n            .subscribe(onSuccess: { (json) in\n                print(\"JSON: (json)\")\n            },\n            onError: { (error: Error) in\n                print(\"Error: (error.localizedDescription)\")\n            }).disposed(by: disposeBag)      \n```\n. You can use flatMapLatest: flatMapLatest only emits elements from the most recent inner Observable sequence. \nself.searchController.searchBar.rx.text\n            .orEmpty\n            .debounce(0.5, scheduler: MainScheduler.instance)\n            .distinctUntilChanged()\n            .filter { !$0.isEmpty && $0.count > 2 }\n            .flatMapLatest { (query) -> Observable<String> in\n                return network.searchUser(matching: query)\n            }\n            .subscribe(onNext: { users in\n                self.users  = users\n                //update view\n            }).disposed(by: self.disposeBag). Hi @Mahdimm answered your question in stackoverflow post. Also posting here for reference \nMoya returns MoyaError enum in error block which you can handle by extracting the error type using switch on MoyaError and then using statusCode to convert to NetworkError enum\n```swift\n func logInRequest(tokenType: accessTokenTypeEnum, token: String, secondKey: String, client: String) -> Observable {\n            return sharedProvider.rx\n                    .request(WebServiceAPIs.getAccessToken(tokenType: tokenType.rawValue, token: token, secondKey: secondKey, client: client))\n                    .filterSuccessfulStatusCodes()\n                    .catchError({ [weak self] error -> Observable in\n                        guard let strongSelf = self else { return Observable.empty() }\n                        if let moyaError = error as? MoyaError {\n                            let networkError = self?.createNetworkError(from: moyaError)\n                            return Observable.error(networkError)\n                        } else {\n                            return Observable.error(NetworkError.somethingWentWrong(error.localizedDescription))\n                        }\n                    })\n                    .map(LoginModel.self, atKeyPath: nil, using: JSONDecoder(), failsOnEmptyData: true).asObservable()\n        }\n    func createNetworkError(from moyaError: MoyaError) -> NetowrkError {\n        switch moyaError {\n        case .statusCode(let response):\n            return NetworkError.mapError(statusCode: response.statusCode)\n        case .underlying(let error, let response):\n            if let response = response {\n                return NetworkError.mapError(statusCode: response.statusCode)\n            } else {\n                if let nsError = error as? NSError {\n                   return NetworkError.mapError(statusCode: nsError.code)\n                } else {\n                   return NetworkError.notConnectedToInternet\n                }\n            }\n         default:\n              return NetworkError.somethingWentWrong(\"Something went wrong. Please try again.\")\n        }\n    }\n\n```\nYou can create your custom NetworkError enum like below which will map statusCode to custom NetworkError enum value. It will have errorDescription var which will return custom description to show in error view \n```swift\nenum NetworkError: Swift.Error {\n        case unauthorized\n        case serviceNotAvailable\n        case notConnectedToInternet\n        case somethingWentWrong(String)\n    static func mapError(statusCode: Int) -> NetworkError {\n        switch statusCode {\n        case 401:\n            return .unauthorized\n        case 501:\n            return .serviceNotAvailable\n        case -1009:\n            return .notConnectedToInternet\n        default:\n            return .somethingWentWrong(\"Something went wrong. Please try again.\")\n        }\n    }\n\n    var errorDescription: String {\n        switch self {\n        case .unauthorized:\n            return \"Unauthorised response from the server\"\n        case .notConnectedToInternet:\n            return \"Not connected to Internet\"\n        case .serviceNotAvailable:\n            return \"Service is not available. Try later\"\n        case .somethingWentWrong(let errorMessage):\n            return errorMessage\n        }\n    }\n}\n\n```\n. For Reachability you can use NetworkReachabilityManager from Alamofire to listen for the reachability changes and handle the status.\nHere is the documentation for using NetworkReachabilityManager.  It has best practices listed in the document for networking which you can have look.. MoyaProvider request method returns a Cancellable protocol type which has a cancel method. \nswift\nfunc request(_ target: Target,\n                  callbackQueue: DispatchQueue? = .none,\n                  progress: ProgressBlock? = .none,\n                  completion: @escaping Completion) -> Cancellable\nSo you return this Cancellable type from your Network Layer method and call cancel when required.\n. ",
    "HardikDG": "@slavasemeniuk  Yes. I was thinking for the same. Do you have any reference of wrapper which shows Moya with PromiseKit. . Okay. Thanks for the update. It worked with your code snippet. . ",
    "rivera-ernesto": "Having the exact same issues when trying to upload UIImage's data.. I found that it is required to create the MultipartFormData with both a valid fileName and a valid mimeType.. ",
    "SSHuiqin": "Can I ask how you solve this issue? \nI have this problem occasionally. once it happens, i keep receiving empty response until I uninstall my application.... ",
    "phi161": "Thank you for your reply!\nActually the code I posted above does work since in my case multi.target is of type AuthenticationTarget which looks like this:\n```swift\nenum AuthenticationTarget {\n    case login(request: LoginRequest)\n    case user\n}\nextension AuthenticationTarget: TargetType, AccessTokenAuthorizable {\n    //\n}\n```\nmeaning that this check will be fine:\nswift\nguard let authorizable = target as? AccessTokenAuthorizable else { return request }\nHowever I did follow your recommendation and now I'm doing something like this:\nswift\nextension MultiTarget: AccessTokenAuthorizable {\n    public var authorizationType: AuthorizationType {\n        switch self {\n        case .target(AuthenticationTarget.user):\n            return .bearer\n        default:\n            return .none\n        }\n    }\n}\nwhich also works fine.\nFeel free to close this issue, unless you want to discuss it further and modify something else.\nThanks!\n. ",
    "stfnhdr": "@jdisho rebuilding the framework solves this issue, but Moya has dependencies to ReactiveCocoa/ReactiveSwift\" ~> 3.0 which causes build problems for me. . @BasThomas \ngithub \"AFNetworking/AFNetworking\" \"3.2.1\"\ngithub \"Alamofire/Alamofire\" \"4.7.3\"\ngithub \"ReactiveCocoa/ReactiveCocoa\" \"7.2.0\"\ngithub \"ReactiveCocoa/ReactiveSwift\" \"3.1.0\"\ngithub \"ReactiveX/RxSwift\" \"4.2.0\"\ngithub \"SVProgressHUD/SVProgressHUD\" \"2.2.5\"\ngithub \"aloco/SimpleButton\" \"3.0.1\"\ngithub \"antitypical/Result\" \"3.2.4\"\ngithub \"aschuch/StatefulViewController\" \"3.0.1\"\ngithub \"gunterhager/ReactiveCodable\" \"1.1.1\"\ngithub \"jdg/MBProgressHUD\" \"1.1.0\"\ngithub \"jonkykong/SideMenu\" \"83f8e461e103d2caacb328c3050fcbb4980cbc83\"\ngithub \"kishikawakatsumi/KeychainAccess\" \"v3.1.1\"\ngithub \"mbuchetics/DataSource\" \"5.2.0\"\ngithub \"moya/Moya\" \"11.0.2\"\ngithub \"oliverkrakora/DataSource\" \"25535d5adef53a7a476f82e37b332add7993c65b\"\ngithub \"scinfu/SwiftSoup\" \"1.7.2\"\ngithub \"weichsel/ZIPFoundation\" \"0.9.6\"\ngithub \"wokalski/Diff.swift\" \"0.5.3\". ",
    "kamranpirwani": "@SD10 Any thoughts on exact date? I'm awaiting this as well, wondering where to hold off on Swift 4.2 Upgrade. Any updates on timelines for release?. ",
    "DmitryPR": "I managed to workaround this by removing the Moya/ReactiveSwift subspec and link ReactiveSwift separately and include the reactive code in a private extension. Please be aware of this issue.. ",
    "YuStephen": "i have used Plugin to solve it. ",
    "bishalg": "It has been a month that Swift 4.2 been released and iOS 12 already has more than iOS 11's market share. In the fast moving world of iOS, library like Moya deserver to be more active.. ",
    "lixiang1994": "Thanks. ",
    "dobox-stylers": "Sorry, the problem was that my custom key ended with a \\n character, so the provider excluded it.. ",
    "marvin-yorke": "try declaring encoder as private top-level constant\n```swift\nprivate let snakeEncoder: JSONEncoder = {\n    let encoder = JSONEncoder()\n    encoder.keyEncodingStrategy = .convertToSnakeCase\n    return encoder\n}()\nenum MyTarget: Moya.TargetType {\n    ...\nvar task: Task {\n    switch self {\n    case .update(user):\n        return .requestCustomJSONEncodable(user, encoder: snakeEncoder) // encoder declared on the top level\n    ...\n    }\n}\n\n...\n\n}\n```. ",
    "MrShiY": "Thank you.. ",
    "lexorus": "Should I also update .circleci/config.yml's xcode version?\nyml\nmacos:\n  xcode: '10.0.0'. It seems like the circleci is using cached dependencies that are compiled with older version of swift. Hopefully disabling the cache builds and forcing carthage to rebuild dependencies with new swift version will solve the problem.\nI'll bring the option back once the issue will be solved.. @SD10 \n\n@lexorus Looks like CI is still failing. That aside, I definitely think we should keep the cached builds. There used to be a rebuild without cache option on Circle CI but I'm not sure where it went now that we switched to Circle CI 2.0 \ud83e\udd14\n\nI disabled the cache only to force the build machine to rebuild the dependencies. After that I reverted the changes, but the cache is now updated and rebuilt with the new specified Xcode.\nAbout the Crunchyroll, we are not using Moya in Crunchyroll, but we are using some abstraction around it in our other product, VRV. And may consider migration of the CR to that abstraction some day.. @freak4pc There was some warnings related to the file length in test files, if I remember correctly. This is not really a good check for the tests. Adding swiftlint disable comments in testing files also isn't a really good solution. And, from my practice, we are usually disabling the Swiftlint for the test target.\nBut, I can propose another solution for this if you really want to persist the checks. I guess we can try to add different .swiftlint.yml config file for test target, and specify it in the build phases.\nI'm also open for any other solutions.. @freak4pc This wasn't a personal intent. More like a fast possible fix. I'll recheck that and come with an update. Thanks for the feedback. Can you please also review the other changes?. @SD10 @freak4pc Reverted the change in .swiftlint.yml as you requested. I'm ok if we'll take care of this in a separate PR.. The CI failed:\n** BUILD INTERRUPTED **\nToo long with no output (exceeded 10m0s)\nWould be nice if somebody with permissions will Rerun workflow. ",
    "initGalen": "me too, XCTest can not use. ",
    "r3econ": "Thanks for the help!. ",
    "cruisediary": "Please review this PR \ud83d\ude04 . @SD10 because #1740 Support Swift 4.2 with Xcode 10 below targets\n- Moya\n- Basic\n- Multi-target\nso after I change the version to 4.2 of MoyaTests target from 4.0 then test build failed on Moya:development branch \ud83d\ude04 . LGTM \ud83c\udfc4 . ",
    "multinerd": "@SD10 Im trying to mimic the kiosk app implementation of OnlineProvider<Target>, im wondering if that can be done without RxSwift. If so, how would i implement request(_ token: Taget) -> Single<Moya.Response>. Im waiting for a response. I guess im not getting a response.... ",
    "irilattada": "hi @pietrocaselani what is trackInflights?\nwhen should I pass true or false\ncan't find documentation about it yet.. ",
    "maxxx777": "I added some setting for check spelling like \"en-US\" language and ignoring acronyms, numbers and some words. Also, lint and check spelling will run only if doc files modified.\nIf those are not necessary changes please let me know, I will revert them.. @SD10 I just wanted to clarify what would you suggest to change in MR? \nNot sure if it's possible to collapse/expand warnings on github page with danger-prose currently.. ",
    "WenzheFan": "how to use \uff01\nold code  no use ,new code how to use. ",
    "mxp7064": "Thank you so much! Could you also please tell me what's the best way to cancel requests? I've been looking at different question threads about that but they are all for RxMoya or ReactiveMoya. I am using the usual Moya.. Thank you!. ",
    "anh-ht": "@pedrovereza thanks. :). ",
    "TarekSalama": "Well I'm using it in a singleton so there is no way it could be deallocated.. ",
    "gityubj": "Please Merge Pull Request Right now!!!. ",
    "zgjff": "platform :ios, '10.0'\ntarget '' do\n  use_frameworks!\npod 'Moya/ReactiveSwift'\nI also encountered this problem.. Use this method  before fix.\npod 'Moya/ReactiveSwift', '~> 11.0.2'\npod 'ReactiveCocoa', '~> 7.0.1'. @SD10  it solved, thanks. ",
    "Limon-O-O": "The platform of the target Example (iOS 10.0) is not compatible with Moya/RxSwift (12.0.0), which does not support ios.. ",
    "UNIQUEXJ": "\n[!] The platform of the target Mine (iOS 10.1) is not compatible with Moya/RxSwift (12.0.0), which does not support ios.\n\nplatform :ios, '10.1'\nuse_frameworks!\ntarget 'SwiftProject' do \n  pod 'Moya/RxSwift'\nend. > Reopening because this is still broken when downloading from CocoaPods. Installing locally works for me now. Don't think I can fix this tonight\nthanks. ",
    "andre991": "Moya 12 is Not working with watchos 4.3 for me. Any solutions??\n\n. Moya 12 is Not working with watchos 4.3 for me. Any solutions??\n\n. > @andre991 Hey there,\n\n\nMake sure you are using Moya version 12.0.1\nTry deleting your derived data folder and rebuild\nMake sure your deployment target is set to 3.0 in your project\n\n\nHi @SD10, me and @LucianoPAlmeida managed to identify the error, it is in the dependencies in the podspec of MoyaObjectMapper. I'll create a PR there in their github to fix this problem. Thank you.. > @andre991 Hey there,\n\n\nMake sure you are using Moya version 12.0.1\nTry deleting your derived data folder and rebuild\nMake sure your deployment target is set to 3.0 in your project\n\n\nHi @SD10, me and @LucianoPAlmeida managed to identify the error, it is in the dependencies in the podspec of MoyaObjectMapper. I'll create a PR there in their github to fix this problem. Thank you.. ",
    "cwalo": "LGTM \ud83d\udc4d\ud83c\udffb. ",
    "lordcodes": "Thanks, will have a look when I get a chance.\nI'm just using my own version right now rather than using filterCompleted,\nso at least have an alternative for the time being.\nAppreciate the links!\nOn Tue, 27 Nov 2018, 23:28 Andrew Breckenridge <notifications@github.com\nwrote:\n\nThere's some history behind the implementation in the PR that stemmed from\n1094 https://github.com/Moya/Moya/issues/1094, I'd recommend taking a\nlook there to understand how filterCompleted / completed /\nrequestWithProgress evolved\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Moya/Moya/issues/1771#issuecomment-442258228, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AKy1k-0D3e10TD_SRQhiuR2N5F6eng4Fks5uzcqggaJpZM4Yo-nK\n.\n. \n",
    "ryancrunchi": "I don't know what the state of this issue now, but I have tested that when a download is not complete, progressResponse.response is nil. Once the download is complete, progressResponse.response is not nil.\nMaybe we could rely on this to filter the completed state of the download.. ",
    "ivensdenner": "Oh, I see. I didn't know that ~> doesn't include the next major version. I think this is the problem :).\nSo I'll have to wait a new version of Moya-ObjectMapper to update Moya.\nThanks for the help @pedrovereza :). ",
    "kakubei": "Thank @pedrovereza the problem is I don't have the user object in the Moya api model. I have it in the request manager from where I call the provider \ud83d\ude22 \nOtherwise it would be straightforward as you pointed out \ud83d\ude04 . Thanks for the reply @SD10 . @pedrovereza Yes, absolutely, that's what I was trying to achieve!\n```swift\nenum OffersApi {\n    case get(userId: String)\n}\nextension OffersApi: TargetType, SharedHeaders {\n    var baseURL: URL {\n        return URL(string: baseURL)!\n    }\nvar path: String {\n    return \"users/\"\n}\n\nvar method: Moya.Method {\n    return .get\n}\n\n// Provider call\nlet provider = MoyaProvider()\nlet userId: String = userManager.currentSession?.user.uuid ?? \"\"\nprovider.request(.get(userId: \"(userId)/offers\")) { [weak self] result in\nswitch result { ...\n```. Of course! How silly of me \ud83d\ude2d. I didn't have my head on straight. Makes perfect sense. Sorry about that \ud83d\ude16.\nThanks a lot for your time!\nIf I may indulge your patience for just one more minute, is it possible to remove the userId from the Task whilst keeping the switch/case?\n```swift\nenum OffersApi {\n    case get(userId: String)\n}\nvar task: Task {\n        switch self {\n        case .get(let userId):\n            return .requestPlain\n        }\n    }\n```. Quite so. Maybe I need a break :) Thanks again for your time. \nCheers. . ",
    "andmix": "i install Moya in my Podspec ,like this:\ns.subspec 'Base' do |ss|\n        ss.source_files = 'XXXXX'\n        ss.dependency 'Moya'. it is ok now, it is a cache bug because of xcode. ",
    "simonzwicker": "My description was not added so here again:\nmy SampleData return a Data() and after adding a struct as Codable the compileError appears: Cannot invoke initializer for type 'Data' with no arguments\nif I add a return \"sample\".data(using: .utf8)! it says: Cannot convert return expression of type 'Data' to return type 'Data'\nWhat can I do?. I use Xcode Version 10.1 (10B61) and Moya 11.0.2. Problem solved, I delete the Codable from Project and create it new and it works, but this was a serious bug.. ",
    "MichaelPei": "I'm not master, but I guess Task.uploadCompositeMultipart maybe what you need.. ",
    "hyuni": "@BasThomas thanx.\nThe answer has already been applied\nbut a lot of similar api. How can I remove duplicates?\nswift\nswitch self {\n  case .API_some1, .API_some3:\n    print(self)\n  case .API_some2(let dictionary), .API_some4(let dictionary), \n           ...\n           ...\n           .API_some_n(let dictionary)\n:\n   print(self, dictionary)\n}\nI tried the following but it failed.\n```swift\nswitch self {\n  case .API_some1, .API_some3:\n    print(self)\ndefault:\n    guard case _ (let dict) = self else {\n        return\n    }\n   // or\n    guard case let (dict) = self, dict is [String: Any] else {\n        return\n    } \nreturn .requestParameters(parameters: dict, encoding: .httpBody)\n}\n```. @basThomas thanx.. ",
    "dpoggi": "Happy to pick this back up. I'll be in touch this evening.. Updated with a solution that accomplishes what the PR originally set out to do with a smaller diff and less convoluted code.\nAPI-wise, to the best of my knowledge, this is purely additive. If there's anything now that anyone feels should have comments with links to the docs on error bridging, let me know, I've got 'em on deck.. @sunshinejr should be all set. Thanks for the feedback! \ud83d\ude04 . With Swift's current implementation of error bridging, this is the same as writing return errorUserInfo[NSLocalizedDescriptionKey]. Since errorDescription is declared as an optional String?, this line could be changed to that to clarify its intent and eliminate possible future issues from Swift implementation changes?. I can totally get behind leaving it internal. Its purpose is a lot less about providing convenient error \"unwrapping\" and a lot more about being a right(-ish?) way to express the mapping to Error? for each enum case.\nHypothetical (agreeing with the point): if one or a number of Moya's consumers needed to unwrap many different underlying Errors in many different ways, and were seeking out or looking to build conveniences for doing so...\n\nThey'd need conveniences that operate on a lot more than just MoyaError\nmoyaError.underlyingError would be a moot point compared to the far more generic and not-that-much-longer (error as NSError).userInfo[NSUnderlyingErrorKey] as? Error. \n",
    "artbasil": "@pedrovereza sorry for not being clear in my post.\nI have some existing project with some existing API implementation based on some third party framework. And we would like to migrate to the Moya.\nWe have some code already used regular API and the alternative API. And it should be just easy as switch one framework to another. But the existing implementation rely on the possibility to use relative paths. Your framework does not support that feature. I've provided the possible solution. Which is not making conflict with the existing functionality.. There only thing which is needed to think about is error behavior. As this function returns optional. And needs to be unwrapped.\nself = URL(string: target.path, relativeTo: target.baseURL) ?? target.baseURL \nas a possible solution.. That was my first idea. But this method doesn't trow.. ",
    "sea516": "just help mingios translate Chinese to English.\nhow to send an array as a parameter instead of a dictionary when request.. > This may be useful \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684ParameterEncoding\nI believe this is exactly what mingios want. ",
    "LCBbest": "Can anyone help me?\n. Hello, I mean, when making a network request, just like getting the address of the network request, get the parameters of the network request and print them out. In the following method\nswift\nlet requestTimeoutClosure = { (endpoint: Endpoint, done: @escaping MoyaProvider<NetWorkService>.RequestResultClosure) in\n    guard var request = try? endpoint.urlRequest() else { return }\n    request.timeoutInterval = 120  \n    //print(request.allHTTPHeaderFields)\n    print(request.url)//like this,Can you print parameters in this\n    done(.success(request))\n}. httpBody can not print parameters. if request.httpBody != nil {\n    print(String(data: request.httpBody!, encoding: String.Encoding.utf8) ?? \"\")\n}. ",
    "dagad": "Thanks you for reply @sunshinejr @pietrocaselani. i used AccessTokenPlugin. ",
    "olivinesguerra": "Hi Thanks for replying. My problem is, after I followed the instructions, Its seems that Moya does'nt see alamofire. after I import alamofire inside moya. it goes fine but it creates another error which is IOS version since some of them are set to 8.0. After I set all of them to 8.0, it creates another bug which is connected to moya is only available to 10.00. Sorry i have to revert to cocoapod dependent framework, so I don't have any screenshot.. ",
    "SergeyGamayunov": "Thanks, @pedrovereza \nIt's pretty straightforward and obvious way to workaround with plainURL and it's exactly that I wanted to avoid. \nI see two issues in that solution: \n\nforce unwrap base URL for that case. Even if we add check for value presence, we have to return real URL instance\nbaseURL variable is semantically overloaded: it will return URL that basically is not base URL. We always consider that variable as place where you can expect to see one or two real base URLs.\n\n. Well, I didn't claim that your solution won't work, it certainly will, and I'll probably use it. It's just some reasoning about it.\n\nI don't think I understood what you mean. Can you elaborate on that?\n\nWhen you construct Targets via Moya you always know, that baseURL will return you a... you know, base URL - the first and mostly constant part of ALL your URLs. And during debugging you can look up for this variable (\"I need to know what baseURL I have here\") and you will be confused cause it will equal to some real URL with parameters and probably huge token. Of course, you will figure out after a while, that you have this one specific case in TargetType enum, that destroys logic of Moya in this particular situation. . YES! It looks much better. MultiTarget provider is great option by the way - it seems I overlooked it. \nNow I can have a several TargetTypes enums - for local request, for plainURL and for many other goals, and all of them in one provider.\nThank you very much!. ",
    "yazumoto": "This is just a problem of restarting xcode.\nXcode is annoying every time... Old style IDE.... ",
    "marco-palumbo": "Thanks for the reply @sunshinejr, when I was trying to make an example project I did find out where the problem was: I messed up with the imports. The strange thing is that in a file I did import RxMoya but the compiler didn't give me the 'No such module' error, so in some ways that has caused the more cryptic error I've reported. Sorry for opening the issue.. Thanks for the reply @sunshinejr, when I was trying to make an example project I did find out where the problem was: I messed up with the imports. The strange thing is that in a file I did import RxMoya but the compiler didn't give me the 'No such module' error, so in some ways that has caused the more cryptic error I've reported. Sorry for opening the issue.. ",
    "wwdc14": "@sunshinejr Thank you very much for your answer, how Moya implements multiple API simultaneous requests\uff1f. Ok, thank you for your answer.. ",
    "vlainvaldez": "```\n            var multipartData = MultipartFormData\n            let jsonType = try? JSONEncoder().encode(params)\n            let formData = MultipartFormData(provider: .data(jsonType!), name: \"identity\")\n            multipartData.append(formData)\n        return .uploadMultipart(multipartData)\n\n```\nheres what I did and it works!! thanks man!! @sunshinejr . ",
    "wakaryry": "It's a partial-update api, we use patch method to update info into server.\nMy api case:\nswift\ncase changeInfo(nickname: String?, email: String?, sex: Int?, sign: String?, intro: String?, phone: String?, identity: Int?, university: Int?, province: Int?, city: Int?, area: Int?)\nTask:\nswift\ncase .changeInfo(let nickname, let email, let sex, let sign, let intro, let phone, let identity, let university, let province, let city, let area):\n                var paras: [String:Any] = [\"province\": province ?? NSNull(), \"city\": city ?? NSNull(), \"area\": area ?? NSNull()]\n                // when nil, do not pass it\n                paras[\"email\"] = email\n                paras[\"sign\"] = sign\n                paras[\"phone\"] = phone\n                paras[\"university\"] = university\n                paras[\"identity\"] = identity\n                paras[\"intro\"] = intro\n                paras[\"nickname\"] = nickname\n                paras[\"sex\"] = sex\n                return .requestParameters(parameters: paras, encoding: URLEncoding.default)\nI want to pass province/city/area even when it's nil. But I can not get a nil in server, it's str.\nHere is what I get in server(request.data):\nPython\n<QueryDict: {'area': ['<null>'], 'city': ['<null>'], 'identity': ['2'], 'intro': [''], 'nickname': ['HelloKitty'], 'province': ['13'], 'sex': ['2']}>\nIt raises error:\njson\n{\n  \"area\" : [\n    \"type error\u3002expect for primary key\uff0cbut get str\u3002\"\n  ],\n  \"city\" : [\n    \"type error\u3002expect for primary key\uff0cbut get str\u3002\"\n  ]\n}\nThe province/area/city is a primary key related field, it could be a primary key (Mine is Int type) or null. \nThanks for any help.\n. In my web api test( not for the same api):\nI could pass null value into params, patch params:\napi | cccc\ncategory | null\ncategory_info | null\ncontent | gfsdg sgfdsg sgf\nfull_category_info | null\ntitle | ccc\ntype | 1\nAnd the received request.data will be:\nPython\n{'id': 0, 'title': 'ccc', 'content': 'gfsdg sgfdsg sgf ', 'category_info': None, 'full_category_info': None, 'category': None, 'type': 1, 'api': 'cccc'}\nThe validated data will be:\nPython\nOrderedDict([('title', 'ccc'), ('content', 'gfsdg sgfdsg sgf'), ('category', None), ('creator', <User: superAdmin>), ('type', 1), ('api', 'cccc')])\n. @sunshinejr The same error. It's treated as a str type, not None.\nTask:\nswift\nvar paras: [String:Any] = [\"province\":province ?? None(), \"city\": city ?? None(), \"area\": area ?? None()]\n                // when nil, do not pass it\n                paras[\"email\"] = email\n                paras[\"sign\"] = sign\n                paras[\"phone\"] = phone\n                paras[\"university\"] = university\n                paras[\"identity\"] = identity\n                paras[\"intro\"] = intro?.count ?? 0 == 0 ? NSNull() : intro\n                paras[\"nickname\"] = nickname\n                paras[\"sex\"] = sex\n                return .requestParameters(parameters: paras, encoding: URLEncoding.default)\nThe data received by server:\nPython\n<QueryDict: {'area': ['None'], 'city': ['None'], 'identity': ['2'], 'intro': [''], 'nickname': ['Hello'], 'province': ['1'], 'sex': ['2']}>\nThanks.\n. @sunshinejr Thanks for your help. I changed the params encoding into JSONEncoding, then NSNull() works. \nswift\nvar paras:[String:Any] = [:]\nparas[\"identity\"] = NSNull()\nreturn .requestParameters(parameters: paras, encoding: JSONEncoding.default)\nThen I could get in server(request.data):\npython\n{'identity': None}\nWhen using URLEncoding, I got everything str. It's OK for non-null value.\nWhen need to pass a null-value param, JSONEncoding is OK.\n. ",
    "a2": "Could definitely make this a struct?\n. ",
    "gustavogervasio": "I liked the idea. \n. It is better \ud83d\udc4d \n. @ashfurrow the test didn't pass\n\u274c  /Users/distiller/Moya/Source/Moya+Defaults.swift:6:15: initializer for conditional binding must have Optional type, not 'NSURL'\nguard let url = target.baseURL.URLByAppendingPathComponent(target.path),\n          ^\nDo you known why?\n. It is not work, because URLByAppendingPathComponent return a NSURL?\n. Yes. But do you like to use this?\nI don't like use \"?\".\nIn this case i prefer:\n```\n        if let url = target.baseURL.URLByAppendingPathComponent(target.path) {\n            if let stringURL = url.absoluteString {\n                return Endpoint(URL: url!, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)\n            }\n        }\n        fatalError(\"(target) url is not valid\")\n```\nWhat do you think?\n. It is true.\n. ",
    "forceunwrap": "Of course not, sorry. Fixed the typo.\n. There you go :)\n. Done \ud83d\udc4d \n. ",
    "bart-g": "correctly. ",
    "Coeur": "That would be a shame for RxSwift. I suggest you reconsider supporting Swift 4.. ",
    "Zaccc123": "sounds good, I have updated it.. done! \ud83d\ude04 . ",
    "jane-austin": "why this assignment? . ",
    "devSC": "oh, i mistake. . yes, i will open a new PR.. yes, you are right, i have already push a new commit.. ",
    "Snoops": "Oh my bad, I didn't see it at the top. Will fix this. Thank you.. "
}