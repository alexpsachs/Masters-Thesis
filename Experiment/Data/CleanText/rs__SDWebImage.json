{
    "rs": "Fixed, thanks!\n. Fixed in http://github.com/rs/SDWebImage/commit/d2dc4cbbac3b141f9f74cadab293696593dfa680\n. To clear the entire cache use this (mem+disk):\nSDImageCache *imageCache = [SDImageCache sharedImageCache];\n[imageCache clearDisk];\n[imageCache clearDisk];\nTo disable the cache, it's not possible as of today. I will add some more control over the cache in future release like the ability to set a max capacity in complement to the current expiration based cache eviction.\n. Done in last revision using notifications. See http://github.com/rs/SDWebImage/commit/3f2f360ee20702b70e88d18ac7c5a02ebd11d932\n. You should use common HTTP cache busting technique where the image URL change whenever then image's content change. For instance you can put the image timestamp in the query-string of the image URL. This way you will invalidate the cache of SDWebImage as well as all intermediate caches. You would also be able to set long living HTTP cacheability to you image in order to benefit from intermediate proxy caches.\n. 3.0 provides a progress block to easily add progress indicator. See the demo project for an example.\n. Thanks a lot for your contrib\n. Fixed in https://github.com/rs/SDWebImage/commit/44fd72843bf7667b6843d47e76a93b03c36e030c\nDo you confirm it fix this issue?\n. Thanks for you feedback. Would you have a simple way to reproduce this?\n. With the default imageView of a TableViewCell, you need to use a placeholder image, otherwise the cell will init without the image view (title aligned to the left border with no margin for the image) and wont be refreshed once image is finish downloading.\n. @mystcolor thanks for this patch. Just a question: why don't you allow to add urls to prefetch instead of requireing to set the full list each times? If several places in a code needs prefetching, they may clash at some point do you think?\n. You explanation make perfect sense.\n. Fixed by #32\n. Nice addition, thx for your contrib\n. Do you reproduce this issue with recent version of SDWebImage?\n. Maybe fixed by #29. If not, please reopen.\n. Merged, thx\n. Could you give a use case where this problem happen to help me understand what this patch fix please?\n. Ok, got it. Thx for the explanation.\n. One additional question: why do you need cacheDelegates? Seems that cacheURLs alone would be sufficient to check for cancelation of the request. I don't see where the content of cacheDelegates is useful in your patch.\n. It's merge with some minor cosmetic changes. Thanks for your contrib\n. Some kind of retina support have been added. If the URL contains @2x before the extension, the scale will be set to 2.0. The library won't request @2x automatically for performance reason though.\n. This patch have to be tested with an iOS 3.0 to validate it doesn't break compat. If it doesn't, I'd be happy to merge it.\n. If I understand correctly, the initial pull request of @adamjernst isn't enough, we need to force decoding in a block or operation right? @mystcolor: do you plan on making a pull request with your performance enhancement?\n. Or just edit the title of this one so we keep all the context.\n. @mystcolor I added #ifdef to your patch so we can test the feature. I stress tested an iPhone 3G with and without it, and the responsiveness improvement is really noticeable.\nThanks a lot for this patch.\n. Sorry, I don't understand your question\n. Do you have an example of code using SDWebImage that reproduce this issue? Screenshot of the issue would help as well.\n. What about:\n- (void)webImageManager:(SDWebImageManager *)imageManager didFinishWithImage:(UIImage *)image;\n. For general HTTP on-disk caching, please see my other lib: http://github.com/rs/SDURLCache\n. SDURLCache replaces the framework provided cache. This allows NSURLConnection to work with persistent caching out of the box. This way, UIWebView and all other components using NSURLConnection will automatically benefits from SDURLCache's store.\nThe cache provided by ASIHTTPRequest does only work with ASIHTTPRequest, which is a complete re-implementation of NSURLConnection using the low level Core Foundation APIs. Only code that specifically use ASIHTTPRequest will benefits from their cache implementation. I don't fill right with this approach, but it's a question of choice.\n. Are you using update to date master branch?\n. If I put your URL into a example app, I can't reproduce. Here is my diff: https://gist.github.com/rs/4981195\n. @bamlhs does @project707 answered you question?\n. Remove all the imgv and setFrame stuff, you dont need it. Only keep the third line and ensure background.png is of the same size as the image you're loading with setImageWithURL.\n. Yes, it's already fixed, see 9e2d414c2849be94767e3f9755620dc8c26178b2\n. You'll have to remove all retain/(auto)release I guess. But isn't it a bit early to use ARC?\n. What about _weak references issues with iOS4?\n. It's on purpose. With your change, you will cache the image twice, and SDWebImage is a better caching system for images than SDURLCache.\n. - it caches the decoded response as an image on disk\n- it caches the decoded image representation in memory, this prevents duplicated storage of the cached data (one time as HTTP response and a second time as image representation)\n- it decodes the image in a separated thread to prevent slowing down the main run loop\n- it provides facilities to download the images asynchronously without disturbing the main run loop\n- it provides categories to easily integrate it in your workflow (just a line of code)\n. Thx\n. I guess NSCache is a good candidate for this yes.\n. This have been fixed in e9d43e443a11b68fc0d09e7633674333bd88e760\n. Please try to enable the new decoder optimization by adding this to your pch:\n```\ndefine ENABLE_SDWEBIMAGE_DECODER\n```\nTell me if it's any better.\n. You may use -fno-objc-arc compiler flag for the lib. I don't want to break compat with non-ARC code.\n. I guess it may interest some users of SDWebImage. If you can provide a sufficiently isolated code to handle this without affecting other parts of the lib I would be happy to merge it.\n. Thanks a lot Adam.\n. Reformatted a bit and pulled. thanks!\n. fixed by 3074f55de2894c0c90ee70bfacee9e32062550c4\n. Do you have a stack trace ?\n. This is to allow compilation with old SDK (<4.0). This is certainly no longer needed but it doesn't hurt I guess.\n. The runtime condition is for when compile for 4.0+ and run it on 3.x\n. > #if __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_4_0 ==> compile time check, the code will not be executed on device running on 3.x [\u2026]\nI think you may be wrong here: if the code is compiled with 4.0+ SDK, it can still be executed on devices running 3.0 depending on deployment version setting. On those devices, the UIDevice's isMultitaskingSupported selector won't be defined and calling it without runtime check will lead to a crash.\n. Ok, I'm interested by the result of your test. In the meantime, I keep the code that way. Thanks.\n. I saw this blog post. I don't totaly agree with it but this is subjective feeling. Anyways, I think it's not the role of a low level library to decide which version of iOS your app will support. Its role is to make sure it will do all the extra-work to ensure it will complet its task in all circonstances. It's why I don't rush on ARC, blocks and GCD for this project as ROI isn't evident.\n. You mean in term of performance or ease of use? Because in term of perf, I'm not convinced it would change anything actually. If you implement GCD, I would be interested by a comparative bench to see if my feelings were right :)\n. The provided URLs are expired.\n. On the other side, if the URL is properly formatted, this will double escape it.\n. Are your sure the source URL of both images are the same?\n. Do you have a sample code that reproduce the issue?\n. I would need the whole project to be able to compile and reproduce.\n. Not your whole source, only a sample project that reproduce the issue\n. Pulled with some refactoring\n. Fixed by 30b9534294d427b17d4e4e2d149827fe71b690ae\n. The SDWebImageDownloadStartNotification notification is only sent when an actual download is started. I guess the loading you're seeing is about the downloading of the prefetched image (the next one?).\n. SDWebImage doesn't limit the number of concurrent download. I guess it's the code that manage your slide show which prefetch the next image (and only the next one) each time the user slide to a new image.\n. Does it leak?\n. Please ensure the delegate property is correctly set to nil in the dealloc of the delegated object.\n. Image URLs should be unique to its content and change when the content is updated. SDWebImage doesn't implement HTTP cache refresh mechanisms. Once a URL is cached, the origin URL isn't refreshed until the image is cached.\n. Looks like a bug in Xcode, does it still happen in Xcode 4.3?\n. Did you follow the installation instructions of the readme?\n. Does this still happen with the very last version of the library?\n. Please provide a sample project that reproduce the issue so I can investigate\n. Fixed in 3.0\n. Did you import UIImageView+WebCache.h?\n. ok fine\n. Could you attach a sample code that reproduce the issue please?\n. good catch, thx\n. Good article, I'll add it to the README\n. Nice catch. How come that compiler didn't catch that?\n. Do you have a symbolicated stack trace?\n. yes\n. thx\n. You have to close other projects or duplicate the sdwebimage project for each project including it.\nOn 14 ao\u00fbt 2012, at 02:57, \"hussain-sohaib\" notifications@github.com<mailto:notifications@github.com> wrote:\nHi,\nI am having problem Can not load file SDWebImage.xcode.Project because it is open in some other workspace.\nHow can i solve this problem?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/85#issuecomment-7713309.\n. Please use the new .framework distribution (see README)\n. thx\n. thx\n. maybe you both added .m files in your project and setup as static lib?\n. Should be safe yes. We may add some compiler flags to ignore this warning.\n. master includes those flags\n. Thx for the fix.\n. I think this will just hide the problem which is \u2013 I guess \u2013 a multi-threading issue. If you can afford having ios 5 deployement target, I highly recommend to switch to SDWebImage (3.0-beta branch).\n. This pull request should fix that: https://github.com/rs/SDWebImage/pull/92\nI will merge it ASAP.\n. It should handle redirects by default, but I have to admit that never tested.\n. That's surprising:\nhttps://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/URLLoadingSystem/Articles/RequestChanges.html#//apple_ref/doc/uid/TP40009506-SW1\n\"If the delegate doesn't implement connection:willSendRequest:redirectResponse:, all canonical changes and server redirects are allowed.\"\n. You can use SDImageCache's removeImageForKey: with the absolute image URL to clear as key. This will clear the image from memory and disk. We could easily add a similar method to only clear the memory cache though.\n. Why would it be more efficient? Please elaborate.\n. What would happen if several views request the same image with different cache keys? Would the lib have download/cache them twice?\n. This solution looks too manual to me. I would prefer a LRU cache eviction mechanism with either max byte or max last use time global limits (per item may be too complexe and unecessary).\nThought?\n. Having two cache keys for the same item \u2014 one for memory cache and the other for disk cache \u2014 is a bit counter intuitive and may lead to misusage.\nBTW, why don't you simply clear the whole memory cache when you clause a table view? I used to do that and it works well.\n. How is it more efficient to maintain this dict on the sdwebimage side than in your view (back to your initial efficiency answer) :)\n. Sorry about that but I just don't want to add complexity in this lib if it's not needed. If you have a patch i'd be happy to look at it.\n. SDWebImage ignore all HTTP headers and force caching of images. This is by design.\n. There is no predicate on what might or might not be a valid image. This decision is left to the library user.\n. Thanks a lot for your contrib.\n. You must add the ImageIO framework. I've updated the readme to tell about it.\nOn 11 mai 2012, at 15:04, \"Stelian Iancu\" reply@reply.github.com wrote:\n\nHi,\nI have a project which uses ARC and I've added the SDWebImage source directly to it. After pulling the latest changes, it complains in SDWebImageDownloader, in connection:didReceiveData:\nCGImageSourceUpdateData(imageSource, (CFDataRef)imageData, totalSize == expectedSize);\nthe fix, as suggested by Xcode, is this:\nCGImageSourceUpdateData(imageSource, (__bridge CFDataRef)imageData, totalSize == expectedSize);\nHowever I'm not sure if this will work now in non-ARC environments.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/116\n. You're right, I read too fast.\n. Just import the UIImageView+WebCache category, all UIImageView will gain a new setImageWithURL: method. That's as simple as that.\n. There's a category for UIButton as well.\n. You mean, you want a separate setBackgroundImageWithURL: method?\n. Please tell me if it works for you\n. Sorry I don't understand your issue, could you please be more specific?\n. You may use [SDWebManager cacheKeyFilter] to add timing variable component to the cache keys of those URLs.\n\nhttp://hackemist.com/SDWebImage/doc/Classes/SDWebImageManager.html#//api/name/cacheKeyFilter\n. No, this is an optional step. How to you #import the library?\n. I guess the space between < and SDWebImage is a typo not present in your code?\n. What do you get if you type this command in the root of your source tree (where your project file is located):\ngrep -H USER_HEADER_SEARCH_PATHS *.xcodeproj/project.pbxproj\n. Do you have space in the path to your app or in your app project name?\n. The readme is wrong, \"User Header Search Paths\" should be \"Header Search Paths\". Move paths there and it should work.\n. Do you have some code to pull?\n. Please, see #125\n. So reopen\n. You initial .h not found is certainly related to #125.\nNow the .a not found may be due to either a setup error or an xcode broken cache. You may try clean the project, delete build data, quite xcode and try again.\n. I recently turned warnings as error flag. I don't think this issue is related to other complains, but I'll fix this one ASAP.\n. Does it fix?\n. Please use new .framework distribe (see README)\n. Please use new .framework (see README)\n. That's odd, you may try to clean bulid, restart xcode et retry. Adding CoreImage should definitely fix those errors.\n. Good idea\n. As SDWebImage has been designed to work with UI* objects, it's true that it assumes it's called from the main thread. It's not that it's forbidden to call from background thread, it's just that it's not well tested.\n. That's a very good idea. I'll pull it with some cosmetic changes ASAP.\nThanks\n. Merged in 0bce0b99bc6dac2199d314b5b5b067555e81c00f\n. This is due to this line:\ndownloader.userInfo = info; // TOFIX: here we overload previous userInfo\nI think the comment explains itself :)\n. Please tell me if this commit fixes your issue\n. Does the no_user.png image exist and show correctly if you replace the image URL by a failing URL?\n. I don't really see what would be the issue. Maybe a trace of the HTTP traffic may help.\n. Please provide a sample project reproducing the issue then reopen.\n. Wouldn't a @synchronized() block fix the issue?\n. Would you have a sample project that reproduce the issue? I'd like to understand what happen.\n. Ok I think I start to understand. What about removing the objects from the arrays before to notify delegates?\n. Actually I think it will become required\n. Could you try the discussed change and tell me if it fix your use-case?\n. If we move the [downloadDelegates removeObjectAtIndex:uidx]; before the delegate notification, who would retain it?\n. Ok got it. Does it fix?\n. Depends on which side you are :)\n. Merged, thx again\n. done\n. Fixed in 3.0\n. This is already fixed in the master branch.\n. Done in the master branch (imageFromMemoryCacheForKey:)\n. I guess this will break apps that doesn't have high res assets.\n. SDWebImage is ARC complient. Do you ger an error or something?\n. Pulled thx\n. fixed in 3.0\n. Merged\n. Do you define a placeholder image?\nAre you in sync with the master branch?\n. Do you get the same issue with 3.0-beta branch?\n. This is on purpose, otherwise you would have to wait for download of a lot of undisplayed image in case of fast scrolling. I don't really understand the problem it could generate.\n. I still don't understand the problem as if the download takes too long, it will just be cancelled before the completion. Result will thus be ignored, which is what you want as the cell is no longer displayed.\n. You're welcome\n. Fixed in the 3.0\n. There is no method named download:didFailWithError: in SDWebImage, are your sure this method isn't in your code?\n. Maybe try to force the call in the main thread.\n. Should be fixed in 3.0. Please reopen if not.\n. Please, check the SDImageCacheType parameter passed in the completion block (new in 3.0)\n. Thx for the fix. Would you mind to resubmit with indentation fixed please?\n. Pulled\n. Thx\n. You have to #import it:\n``` objective-c\nimport \n``\n. You may pass user/pass as part of the URL like this:http://user:password@domain.com/path/to/protected/image.jpg.NSURLConnection` does already handle different authentication challenges by itself.\n. Ok so we can allow custom header without reimplementing basic auth.\n. It's released when the connection is completed.\n. The README has been updated\n. Yes it is. Last version adds a second parameter to the success block telling if the image was already cached or not.\n. You have to either change the URL by adding some versionning to it or manually clean the URL from the cache.\n. No\n. The 3.0-beta branch let you implement this every easily. Please see the demo app in this branch.\n. Fixed in 3.0\n. It's an UIImageView category, so it doesn't matter where you use it :)\n. FIxed by removing MKAnnotationView+WebCache.h from podspec, should be added as optional component.\n. You now have the \"progress\" block in 3.0\n. Well done. Thx\n. Should be fixed in 3.0\n. Maybe a bug regarding categories. I check this ASAP.\n. Please make sure the -ObjC flag is set as follow:\nOpen the \"Build Settings\" tab, in the \"Linking\" section, locate the \"Other Linker Flags\" setting and add the \"-ObjC\" flag:\n\n. This lib assumes your images has unique URLs and never change. If your images are dynamic, you may add a serial to your image URLs.\n. Did you use the new .framework?\n. Ok, I understand. I'll do the change in the project build rules.\n. The second parameter has been added recently. It's true when the image has been retrieved from the cache and false if it has been downloaded from the source URL.\n. Last commit should fix this\n. Do you reproduce with the example app ?\n. @JaviSoto what about this?\n. I did, see https://github.com/rs/SDWebImage/commit/0c1dd3c857fcf4d704baaed0d0619c0ea3dd07ac\nI reverted it because of bad perf. See https://github.com/rs/SDWebImage/pull/227\n. Could you please try to add some @synchronized block around method contents of imageCache:didFindImage:forKey:userInfo: and cancelForDelegate: and tell me if it still happen?\n. You may have cancels that happen at the same time. Could you try to add some @synchronized block around method contents of imageCache:didFindImage:forKey:userInfo: and cancelForDelegate: and tell me if it still happen?\n. Fixed in master\n. It will be easier in the version 2.0 SDWebImage which will use blocks instead of delegates.\n. Fixed in 3.0-beta branch\n. Last commit ?\n. Please try this one: https://github.com/downloads/rs/SDWebImage/SDWebImage-2.7.3.framework.zip\n. It's a framework, just drop it in your project and it will work. The missing MKAnnotationView+WebCache is on purpose as I don't want to force everyone to link against MapKit. You'll have to copy .h/.m files manually into your project to use this category.\nFor info, the static lib in the .framework is in Versions/A/SDWebImage:\n$ file Versions/A/SDWebImage \nVersions/A/SDWebImage: Mach-O universal binary with 3 architectures\nVersions/A/SDWebImage (for architecture armv7): current ar archive random library\nVersions/A/SDWebImage (for architecture cputype (12) cpusubtype (11)):  current ar archive random library\nVersions/A/SDWebImage (for architecture i386):  current ar archive random library\n. So redownload the zip file at https://github.com/rs/SDWebImage, it will contain the fix\n. The best solution for the moment is to ignore this error. It doesn't prevent anything from working correctly. Lots of contributors tried to get rid of this warning with no success so far.\n. Please provide a sample project reproducing the issue then reopen.\n. Please confirm it fixed the issue for you\n. Good catch, thx\n. NSURLConnection is asynchronous by nature. It will actually run it's own thread to monitor the connection state (\u00e0 la libev) and will never block the main thread.\nCreating your own separate thread to schedule an NSURLConnection is just a wast of CPU and memory.\nWhat makes you think I'm blocking the main thread here is that I'm forcing the scheduling of the NSURLConnection from the main thread by surrounding it with a dispatch_async(dispatch_get_main_queue()). This may be not necessary here, but the reason behind this is to ensure NSURLConnection will call your delegate methods in a living thread. It's a common bug to schedule NSURLConnection in a thread which is cleaned before NSURLConnection call the delegate, leading to missed delegate messages. The OS generally runs the NSOperation in a separate thread, but you can't predict if it will nor when the thread will be killed. Its far more secure to force the main thread here, and wont block the main thread as \u2013 again \u2013 scheduling an NSURLConnection isn't expensive.\n. Could you please post your backtrace for the barrierQueue crash?\n. Interesting, xcode 4.5 (upgrad to 4.5.2 in progress) doesn't let me use strong for this property because dispatch_queue_t isn't an objc object.  As dispatch_queue_t is reference counted, I don't understand why you get a crash. Do you have a backtrace or something?\n. About libev, I didn't meant NSURLConnection has any relation with it, just that it use the same patterns. But as your comment suggests, you're pretty aware of that.\nConcerning delegate that affect the main runloop, I did notice this, and I have pending commits intended to fix this.\nAbout handling my own NSThread with a runloop, I still don't think it's necessary if all expensive tasks (thrown by NSURLConnection delegate) are handled in a GCD queue. SDWebImage max concurrent connections should never be set higher than 10 or maybe less, especially over 3G where you're limited in term of concurrent connections (I even have plans to handle this limit automatically regarding cnx type). \nI also prefer the GCD approach because 1/ it doesn't require its own runloop and 2/ thread creation/cleaning is managed by the OS. If you think my conclusions are wrong, I'd be happy to reconsider my thought.\n. Regarding dispatch_release, I think I shouldn't declare the property with assign under iOS 6 as with ARC it would fail to retain queue. It currently work though \u2013 I guess because I'm setting the ivar directly in the init and because ARC assumes dispatch_queue_create() should be retained. If I try to set the property to strong, Xcode will complain with:\nProperty with 'retain (or strong)' attribute must be of object type\nI'm not sure what to do :)\n. Either remove MKAnnotationView+WebCache or link your project with MapKit framework\n. Which branch are you using?\n. Please update the files, this branch is moving fast and your issue has been fixed yesterday :)\n. - SDWebImageRetryFailed: By default, when an URL fail to be downloaded, the URL is blacklisted so the library won't keep trying. This flag disable this blacklisting.\n- SDWebImageLowPriority: By default, image downloads are started during UI interactions, this flags disable this feature, leading to delayed download on UIScrollView deceleration for instance.\n- SDWebImageCacheMemoryOnly: This disables on disk caching\n- SDWebImageProgressiveDownload: This enable progressive download, the image is displayed progressively during download as a browser would do. By default, the image is only displayed once completely downloaded.\n. This is a way to create bit field values. See http://en.wikipedia.org/wiki/Bit_field for more info.\n. My email is in the LICENSE file\n. Dups #204\n. That's not really possible as by using the redirected URL as cache key, you won't be able to guess the key on the next hit, so you would have to hit the server each time to get the redirection. This would vanish the purpose of this library.\nUsing HTTP redirects for images is generally a bad idea. Facebook does that only as an easy API for their user, but they don't use those kind of URL internally.\n. I just added an activity indicator to the demo app, I can't reproduce. Please send the demo project modified so it reproduce the issue.\n. Good news :)\n. Please provide a sample code reproducing the issue then reopen.\n. Does the delay happen for already cached images or only for uncached image?\n. This lib is meant to do exactly that, so I guess there is an implementation issue. Are you using reusable cells?\n. Do you get the same issue with the example app ?\n. Thx a lot, I'll merge this today.\nRegarding decompression perf, how do you explain the improvement?\n. Problem is that with this code we still get the following kind of error:\n<Error>: CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 24 bits/pixel; 3-component color space; kCGImageAlphaNone; 320 bytes/row.\n. This would add an alpha layer on images which don't have one.\n. All your commits are already merged in the 3.0-beta branch.\n. Thx\n. If your project is using ARC, you should have no issue. Please check the \"Objective-C Automatic Reference Counting\" is set to \"Yes\" in your app \"Build Settings\"\n. Please tell me if it's ok for you\n. What is you app's minimum deployment target?\n. Please upgrade to SDWebImage 3.0 and set you minimum deployment target to 5.0.\n. The 6f198abd1b2c129ae104b70cea485a495fc773f7 commit adds the ability to define headers to be sent with each image download request. Here is a usage example:\nobjective-c\n[SDWebImageManager.sharedManager.imageDownloader setValue:@\"the-token\"\n                                       forHTTPHeaderField:@\"AuthToken\"];\nPlease reopen if this doesn't fix you issue.\n. You can call [SDWebImageCache.sharedImageCache clearDisk] every 4 days\n. Did you copy the .framework or just the .h/.m files ?\n. So its normal you have to use #import \"file.h\" syntax.\nTo fix the error, either link MapKit framework or remove the MK category.\n. SDWebImage assumes that images for a given URL never change. If the image change, you'll have to add something to the URL.\n. should be fixed\n. Fixed\n. It goes back to main thread only to call the block with the decoded image. Everything else is done in a background thread. What is the problem exactly?\n. If you don't do anything in the called block, it won't affect your main thread responsivity. I force the main thread because most of the time, people use UIKit to update the UI, and UIKit isn't thread safe.\n. Please provide a sample project reproducing the issue then reopen.\n. Yes it is. I don't want to force everybody to link against MapKit to use SDWebImage.\n. First commit cherry-picked, please open another pull request for the second one.\n. And thx BTW :)\n. Why don't you call [SDWebImageManager.sharedManager.imageCache clearMemory] ?\n. SDWebImageManager can be a singleton but you can get your own instance if you want. If all instances share the same SDImageCache is shared among them it may not be what you would expect either.\n. Please upgrade to SDWebImage 3.0.\n. I don't use CocoaPod but pull requests are welcome.\n. It's a false positive but yes, using wself will fix  the warning.\n. SDWebImage sends an Accept header with \"image/*\". Your server should check for this header and decide to never redirect to a non image destination (i.e.: return a 404 error instead).\n. Yes you have to copy it by hand. I don't want to force everyone to link against MapKit when using SDWebImage.\n. What is your stack trace ?\n. So it's a kill from the OS? It doesn't happen in the simulator right?\n. please provide a sample project reproducing the issue\n. Please reopen when you give more info.\n. Fixed\n. If you copy the files, you should use #import UIImageView+WebCache.h instead of #import <SDWebImage/UIImageView+WebCache.h>\n. You could try this:\n``` objective-c\n@interface SDImageCache (private)\n- (NSString )cachePathForKey:(NSString )key\n@end\nNSString key = imageURLToCheck.absoluteString;\nNSString cachedImageFilePath = [SDWebImageManager.sharedManager.imageCache cachePathForKey:key];\nBOOL onDisk = [NSFileManager.defaultManager fileExistsAtPath:cachedImageFilePath];\n```\n. In the case the image is reused (in UITableViewCell for instance), you would see the reused cell's image then the new one. I guess it's better to see the placeholder instead isn't it?\n. I check it at the same time, but disk acces isn't instant so waiting for the disk answer you may shortly see the placeholder. To prevent this, we can:\n- keep the previous image, in case of cell reuse you'd get the previous image for a fraction of a second\n- nil the image, you would then get a blank flash\nI don't see any of those solutions as an improvement :)\n. This is fixed in the master branch\n. They have been removed since we moved to NSCache. NSCache doesn't provide this kind of information, and since it's blackbox, we have no way to compute it. I'll update the doc.\n. Could you please point the URL talking about those methods? I can't find it.\n. Fixed\n. Are you linking against AFNetworking for instance? There's a conflicting category on both projects. You have to keep only one of them.\n. Are you using SDWebImage 3.0? Looks like you're using 2.x.\n. The stack trace tells it. Try upgrading the framework to 3.0, it should fix your issue.\n. Please upgrade xcode\n. Categories are loaded even if you don't import them. #import is just for the compiler to know those new methodes exist. If you link your binary with two conflicting categories, the result is unexpected (or highly expected to crash :).\n. Could you please split your two comits in two separated pull requests?\n. Sure\n. Check alpha blending over your image and other stuff happening in your cell.\nWhen the image is loaded, setNeedsLayout is called on the cell. If you have heavy stuff happening there, you may consider refactoring.\n. Please upgrade to master and reopen if you still get bad scrolling performance.\n. See SDWebImageCacheMemoryOnly\n. @NachoSoto: ebd63a88c116ac7acfbeded5c84d0fffa2443438 allows any kind of custom transformation to be done without having to add it into SDWebImage's code base.\n. Please provide a sample project reproducing the error.\n. You're server answers with 406 error when Accept: header is image/*. The message says:\nNotAcceptableError: Server accepts: application/json,text/plain,application/octet-stream\nIf I remove the Accept header, the URL returns a Content-Type: image/png. On the same URL, a HEAD with no Accept header returns an application/json content type.\nLooks like a kind of server configuration mess %)\n. If your server returns image/jpeg, what's the problem?\n. Has it's a block, you can use the scope.\n. Just use them in the completion block, they will be automatically captured by the block and retained until the block is released.\n. Good catch\n. I don't see related error message. Please reopen if you have more details.\n. Update to master then use:\n[SDWebImageManager.sharedManager.imageDownloader setValue:@\"Your custom user-agent here\"\n                                       forHTTPHeaderField:@\"User-Agent\"];\n. Please provide a sample project reproducing the issue and reopen.\n. Are you using the latest version of the code from the master branch?\n. Try reverting 12196f4de69268dc994ba3d5bc04a11568177520\n. Fixed by de19c24241628c79235e6938e485b1f4c70673d9\n. I now get a lot of CGBitmapContextCreate errors:\nFeb  8 02:31:07 elijah dailymotion-devel[55348] <Error>: CGBitmapContextCreate: unsupported parameter combination: 0 integer bits/component; 0 bits/pixel; 0-component color space; kCGImageAlphaNone; 0 bytes/row.\n. It's already reverted. Thx for trying ;)\n. Thanks for you contrib. Did you mesured the gain? Current implementation cancels operations for cells as soon as they are outside of the viewport. We thus should only have already running operations and operations for visible cells in the queue. In this circumstances, LIFO queue may not be of any help in my understanding.\nThoughts?\n. If you do a custom implementation, you should handle the canceling of the download as soon as another URL (or nil) is set on the same control. No request is always better than well ordered requests :)\n. The UIImageView category uses SDWebImageManager as well. Maybe I missed something in your use-case, but what prevents you from canceling previous operations on views reused when scrolled out?\n. Sorry but I'm really not comfortable adding a complete re-implementation of NSOperationQueue.\n. Your TableViewDemo111ViewController doesn't implement the required method tableView:numberOfRowsInSection: for the UITableViewDataSource protocol. This error has nothing to do with SDWebImage so I close this issue.\n. Try subclassing UITableViewController instead of UIViewController or setup your controller as the delegate/dataSource of your tableviewobj proj.\nYou may have better answers from stackoverflow though :)\n. The tableview is automatically handled by UITableViewController using the tableView property. You should remove your tableviewobj property.\n. Please provide some more details then reopen.\n. The downloadImageWithURL:options:progress:completed: method returns a cancelable SDWebImageOperation object.\n. Good catch.\nIt wasn't much of an issue anyway as cache-in was prevented by connection:willCacheResponse: in SDWebImageDownloaderOperation. We save an unnecessary cache lookup though.\n. Interlaced PNG aren't supported for the moment.\n. finding why it doesn't work? :)\n. We create a partially downloaded image as soon as we get sufficient data to determine the final image dimensions (i.e.: once image header is downloaded).\n. Isn't it what we're already doing?\n\nCreate the CFData object for accumulating the image data.\n\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L163\n\nCreate an incremental image source by calling the function CGImageSourceCreateIncremental.\n\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L196\n\nAdd image data to the CFData object.\n\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L185\n\nCall the function CGImageSourceUpdateData, passing the CFData object and a Boolean value (bool data type) that specifies whether the data parameter contains the entire image, or just partial image data. In any case, the data parameter must contain all the image file data accumulated up to that point.\n\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L197\n\nIf you have accumulated enough image data, create an image by calling CGImageSourceCreateImageAtIndex, draw the partial image, and then release it.\n\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L215\n\nCheck to see if you have all the data for an image by calling the function CGImageSourceGetStatusAtIndex. If the image is complete, this function returns kCGImageStatusComplete. If the image is not complete, repeat steps 3 and 4 until it is.\n\nHere we just create a simple UIImage with the downloaded data. Keep in mind we have to handle progressive mode disabled:\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L278\n\nRelease the incremental image source.\n\nWe re-create incremental image source object at each iteration. It's maybe not ideal but I tried not to, and it didn't fix the issue.\n. Imagine usage in a UITableViewCell when the cell is being reused. Not setting the image to nil when no placeholder is provided would result to showing the former image of the reused cell while loading the new one.\n. Yes it's already fix. Why don't you upgrade?\n. First two points are so because the code pre-dates multi-tasking support in iOS. We should clearly change the notification name and perform a background task, you're 100% right.\nThe last point is perfectly valid as well. Would you consider a pull request?\n. Nice catch!\n. Sorry to say that, but it's a very bad idea to perform sync IO operations on the main thread. This results in choppy scrolling of table views when images are read from disk.\n. When you block the main thread, what does your app show while the image is loading?\n. Did you try not to set a placeholder, and assign the image value of the imageView with the placeholder from the progress block?\n. Thanks for updating stackoverflow.\nBTW it's @rs not @sb ;)\n. The only way I see this could happen is if your image server is not longer reachable. You may try to pass the SDWebImageRetryFailed option to instruct SDWebImage not to perform negative caching.\nPlease reopen the issue if you think this doesn't solve your issue.\n. Are you up-to-date with the master branch?\n. Could you past the @property definition for your operation property please?\n. This is what happen we you use assign to store an object reference :)\nYou should use weak here.\n. Good idea, I'll take a look at it.\n. GIF support is only in the master branch for the moment and is still experimental.\n. It have been done months ago.\n. Are you using the master branch or a tag?\n. Which version is it?\n. Try the demo app, it contains \u00e0 gif in the first row.\n. If the image is cached on disk, sync access would lock the calling thread. Calling thread have great chance to be the main one. I would then get issues opened telling my lib is killing scrolling perf\u2026 :)\n. Accessing the disk synchronously is \"unsafe\" if done from the main thread.\n. No because \"disk\" IO access duration are unpredictable, especially if you're queuing a lot of them at the same time. In clear, if you read a file synchronously on the main storage from the main thread, it may block your app or at least make it sluggish.\n. Do you have a use-case to illustrate?\n. In my brain, this would block the main thread exactly as if you where calling the sync code directly from the main thread. The only difference is that you block it doing nothing, waiting for another thread to wait for the IO response. Net result is same result but more memory :D \n. You still have the issue if wait is turned YES. Additionally, why isn't the wait BOOL returned as a param of the block? If wait is modified after the block is called, you may have serious race conditions :)\nAnyways, I still don't see how this kind of usage would help app reactivity.\n. The issue is the fact that if the wait happen to be true, you'll block the main thread. Blocking the main thread is in no circumstances a non-issue.\nThe race condition I'm talking about is if the code calling your block is changing the wait pointer AFTER having called the said block. In this case, you have no guaranty that this change happen before or after your code actually read the wait variable.\n. You may want to use the SDWebImageRetryFailed option.\n. For some reason, requests are performed regardless of the response cacheability when this option is passed. Any idea?\n. Ok got it, the problem is located in SDWebImageDownloaderOperation's connection:willCacheResponse:. You should test your modifications before requesting for pulling ;)\n. Ok so I've got a working commit. But this option is real performance killer:\n1. You'll get images twice in disk & memory caches in two representationa (image and HTTP cacheable response)\n2. On cache-hit, the image will be loaded and displayed from the SDWebImage cache first and then re-loaded from the source NSData returned by NSURLCache, and finally re-extracted, re-decoded and re-cached in the SDWebImage cache.\nThe 2. is a big issue. A workaround to prevent re-decoding and re-caching of a full cache-hit (in both SDWebImage cache and NSURLCache) must be found in order for me to consider merging.\n. I've pushed fixes for this pull in a separate branch for you to test it. If you try the example app with the flag on each image, you will notice a very choppy scrolling, even in the simulator.\n. I found some workarounds and thus merge this pull request.\n. I'll think about it, but in case of an uncacheable 302, the network will be hit on each load, regardless of the cache status. That's a pretty bad situation.\n. I removed the disk cache dup protection waiting for a better idea.\n. Good catch\n. The message says you need to link against SystemConfiguration.framework. It says it's an AFNetworking dependency. None of those lines are related to SDWebImage.\n. Is it better if you link against SystemConfiguration.framework?\n. Maybe a category conflict. AFNetworking added an UIImageView category that mimic SDWebImage with the same name. You'll have to choose one of them.\n. So it should be in the following condition:\n``` objective-c\nif OS_OBJECT_USE_OBJC\n```\nright?\n. Please see http://hackemist.com/SDWebImage/doc/Protocols/SDWebImageManagerDelegate.html#//api/name/imageManager:transformDownloadedImage:withURL:\n. You have to implement the SDWebImageManagerDelegate protocol and then set it as the shared manager's delegate like this:\nobjective-c\nSDWebImageManager.sharedManager.delegate = self;\n. With this patch, the file is still cached without the @2x. Did I miss something?\n. As I said, I don't see a complete solution in this patch as  the image won't be cached on disk with the @2x indicator.\n. So it doesn't work out of the box. Without the filter, it will respect the scaling on cache-in and won't on cache-hit.\n. Maybe yes.\nI don't think @2x notation is really compatible with the SDWebImage use case. To use this notation, you would have to tell SDWebImage to try to add the @2x suffix to URLs at loading when screen scale is 2x and to fallback to original URL in case of 404 response. During cache-in, it would have to keep the @2x and cache queries should always try to load the @2x cache key first and fallback to the normal cache key in case misses. This would have an impact on the overall performance.\nI have personally no use-case where this workflow would be needed. I always test the screen scale up front and always ask SDWebImage to load the hi-res image URLs in case of retina display. Hi-res images are loaded at 1x scale but are resized by the containing UIImageView, which lead to the exact same result (considering the UIImageView size is half the size of the hi-res image).\n. But why would you need the UIImage scale to be different than 1?\n. In the transform delegate, as long as you output the same number of pixels as in the input, everything will be fine :)\n. This is not true if the containing UIImageView is at the size of the non retina image. If you load an UIImage of 20x20 pixels with a scale=1 in a UIImageView sized at 10x10, the result on a retina display will be exactly the same as if you loaded the same image with a scale of 2.\nThe only difference I know between an UIImage with a scale of 2 and the same UIImage with a scale of 1 is if you call sizeToFit on the containing UIImageView.\n. Please elaborate.\n. Did you read this: https://github.com/rs/SDWebImage#handle-image-refresh ?\n. I added it two days ago :)\n. Which version did you have ?\n. See the readme. The lib turned v3.0 with a complete rewrite and drop of < iOS 5 support.\nThere is a 2.0 branch if you need backward compat, but the migration to 3.0 is worth the effort in term of stability and performance.\n. The podspec says:\nruby\ns.subspec 'MapKit' do |mk|\n  mk.source_files = 'SDWebImage/MKAnnotationView+WebCache.*'\n  mk.framework = 'MapKit'\nend\nMaybe there's something wrong with cocoapod.\n. It's not needed until you install the MKAnnotationView+WebCache category.\n. You don't need to import to get an error. The file is compiled with your app if you add it to your project in xcode.\nRemove the category from xcode and you'll get ride of the errors.\n. It does the cancel and the nilling of the image for you. That's the main purpose of this category :)\n. Don't you have a custom resize inset set on the UIImage?\n. Images are stored in the provided Caches directory. Are you sure the SDWebImage cache was the problem pointed by Apple?\n. I extensively use SDWebImage since 2009 with an update approved 2 weeks ago and I never got this kind of return from Apple.\n. Pull request?\n. Good catch. Pull request?\n. SDWebImage introduced those methods in 2009 and is the main purpose of the library. I agree it would have been a good idea to prefix them in the first place, but changing the name of those methods now would break backward compatibility.\n. Pull requests are accepted :)\n. Are you using ARC?\n. Merged, thx\n. It's ok, you can close\n. Awesome idea. Doesn't QuartzCore framework need to be added to the podspec?\n. For this pull request to be merged, please rebase it on the master and add the quartzcore framework to the podspec.\n. LRU is on the TODO list. It would require a separate database as updating modification date of the file on each hit would kill the perf.\n. Send setNeedsLayout to the cell in the completion block.\n. I'm ok to merge it if you rebase it on the master.\n. Thanks to you :)\n. Thank you for you contrib. Could you please fix the indentation so I can merge it?\n. Agreed, it was an error to assume everybody wanted to be called back on the main thread.\n. Awesome! Could you just reformat the code to match to project coding style please? (brackets on their own lines)\n. no pb, thanks for the great work\n. What about:\nobjective-c\nBOOL isAnimatedGIF = image.images != nil;\n. This category isn't limited to UIImages coming from SDWebImage (we should add prefix to the methods BTW). An animated UIImage doesn't mean it was coming from GIF format :)\n. It's the thought that counts ;)\n. Oups I only read the first commit sorry :)\n. I wouldn't say no :)\n. Hum, github merge is dumb\u2026\n. Could you please point me to the part of the doc that is telling this?\n. Ok thx, I'll fix that\n. It's fixed in the master\n. It's on purpose. Your change wouldn't clean by modification date either, but by \"access time\". It would also hurt performance.\n. It would be a kind of LRU eviction but with a major issue: the memory cache would conflict with it. Most frequently accessed images will have more chances to be loaded early in the memory cache. If you update the file modification time on first load and then clean by age, chances are that you will clean a mix of most accessed files together with very old files because of that.\nOne solution would be to update the file modification date each time an image is accessed either from disk cache or from memory cache, but this would hurt performance a lot.\nI guess the best solution for LRU is a separated db file.\n. +1\n. Would be nice to keep it in DEBUG macro conditions.\n. See this thread: https://twitter.com/0xced/status/332252283758845953\nBetter solution soon.\n. Why?\n. Does it work better if you replace \nobjective-c\n     id operation = blockOperation;\nby:\nobjective-c\n    __weak SDWebImageDownloaderOperation *operation = blockOperation;\n. Does this helps ?\nI can't find a way to reproduce the issue. I'm shooting in the dark.\n. Please see #466\n. Fixed typo in the URL, thx for the notice.\n. Because self has been nilled before the download completion.\n. Actually it's perfectly common situation. The magic of the weak ref make it automatically cancel image downloads  when you quickly scroll a tableview for instance\n. I guess you directly added sdwebimage source files to your project. You thus need to add new sources files under the WebP group of the SDWebImage project. Do not forget to fetch the new submodule of the project as well.\n. You need to import those files as well:\n\nMake sure you typed the following commands in the SDWebImage repository:\n$ git submodule init\n$ git submodule update\nYou may also use the \u2014recursive option at clone time.\nIf none of this worked, tell me more about the way you installed SDWebImage into you project.\n. You certainly miss the path to the libwebp src directory in your Header Search Path build setting.\n. Github download doesn't fetch submodules. You may want to use git clone with --recursive option instead.\nI definitely have to find a better solution to embed webp library\u2026 ideas are welcome.\n. Are you sure this is the good one? I don't see the submodule arg nor the source files pattern.\n. Last commit should fix your issue by disabling webp support by default.\n. Did you fetch the submodule?\n. The completion block is thus called even if self is nil and before the image is actually assigned to the self's image property.\n. Does it happen with 3.4 as well ?\n. Ensure that you are in the main thread before assigning the image to your view.\n. pull request?\n. Should be fixed by last commit. Please reopen if not\n. I use NSCache which handle the memory cleaning by iteself. I guess it tend to clean the caches when another app is running in the foreground and need some memory.\n. Do not use the \"download\" feature of github, it doesn't fetch submodules. You should either download the complied framework or git clone the repo. An even easier solution is to use CocoaPods.\n. In UITableView, if you use the provided categories, non visible cells will be cancelled if not already downloaded when the exit the viewport.\n. It's a bit odd to add an option to SDWebImageManager which is only used by some of its callers.\n. Problem is for people who hit the Github's \"Download\" button. When downloaded that way, submodule aren't fetched and the .gitmodules file is missing.\n. Try to add the --recursive option\n. merged\n. thx\n. Thx\n. Does it help?\n. I guess so, but the subOperation should be released when the combined operation is deallocated.\nI will reinstall ios 5 simulator to experiment on this bug.\n. Looks like its a kind of bug in the NSURLConnection's cancel method under iOS 5. If you remove the call to cancel on self.connection in SDWebImageDownloaderOperation, you won't get dead threads (but will no longer cancel transfers).\n. This may be a good lead:\n\nIf you want to cancel a connection, and if this connection is the sole run loop source, it may happen that the run loop does not return anymore, since it will only do so until after it has processed an event, or if the timeout expired.\nSending cancel will not queue an event to the run loop! Thus, if the timeout is set to infinitive the while loop above will never check the flag _runLoopDone. The result is, the thread will never finish - eventhough the connection is finished.\nIn order to properly cancel a NSURLConnection and also exit its connection thread - issued from any other thread, simply define a method whose body sets the flag to YES and sends the cancel message to the connection and invoke this method on the connection thread, e.g.:\n[self performSelector:@selector(cancelConnection) onThread:_connectionThread withObject:nil waitUntilDone:NO];\nThis will evantually cause the run loop to return with result code YES, meaning it finished processing the event, namely the message cancelConnection which in turn set the flag and canceled the connection.\n. Replacing the CFRunLoopRun() by CFRunLoopRunInMode(kCFRunLoopDefaultMode, 10, false); seems to fix the issue. If the thread is dead, it will be clean after a maximum of 10 seconds. I guess using a lower value will break the connection if the server doesn't respond fast enough.\n. I can't find one for the moment. I'm no longer supporting iOS 5 in my apps so I can't spend too much time on this issue. \n. Merged, thx\n. Please try with the master\n. Please try the master.\n. 3.4 tagged\n. I don't see why this would fix a perf issue (which perf issue BTW?). Please provide more info.\n. If we add them we'll have to maintain them. I'm not sure we can do that.\n. I can't reproduce. Which version are you using? Did you test with the up to date master branch?\n. You're right, I didn't add 64bit support correctly.\n. Pull requests are welcome\n. This was to fix a dead thread issue under ios5 (only). Maybe we could add a condition on the OS version, and use a simple CFRunLoopRun for iOS6+.\n. ## start\n\nCauses the connection to begin loading data, if it has not already.\n- (void)start\nDiscussion\nCalling this method is necessary only if you create a connection with the initWithRequest:delegate:startImmediately: method and provide NO for the startImmediately parameter. If you don\u2019t schedule the connection in a run loop or an operation queue before calling this method, the connection is scheduled in the current run loop in the default mode.\n. @joshuafeldman: did you try to manually schedule the connection to see if it fix both issues?\n. The current runloop in the context of an NSOperation is the runloop of the NSOperation's thread. That's exactly what we want, isn't it?\n. If the current runloop doesn't exist, it is created on the fly, see: https://developer.apple.com/library/ios/documentation/cocoa/reference/foundation/Classes/NSRunLoop_Class/Reference/Reference.html#//apple_ref/occ/clm/NSRunLoop/currentRunLoop\nI'm pretty sure the start is scheduling the connection in the right runloop. The AFNetwork code is just unnecessary.\nI don't get the while loop you're talking about. CFRunLoopRun is already a while loop. If you exit this loop it means events are no longer scheduled in the event loop. A while around this would just create an infinite loop.\nThe unscheduleFromRunLoop is also unnecessary in our case. See the doc:\n\nIt is not necessary to unschedule a connection after it has finished.\n. You have a runloop as soon as you ask for it, you don't need to run it to have it. The start method is calling the scheduleInRunLoop method on the default runloop which is the current thread runloop. The current runloop doesn't vanish from one line of code to the next. If you call scheduleInRunLoop before start, it will change nothing. Please test it, you will see it doesn't fix or break anything.\n\nThe magic number for iOS 5 is a workaround a bug in iOS 5's NSURLConnection. I personally no longer support iOS 5 in my apps, so I'm not affected. If you find a better workaround, tell me and I'll merge it.\n. If the NSURLConnection wasn't schedule in the runloop, the NSOperation wouldn't receive any of it's delegate callbacks and it would never work. Is it the problem you are experiencing?\n. This commit will fix 1. About 2. I'm not sure as I can't reproduce. Anyways, I'm wouldn't bet on the runloop scheduling as a culprit for this one.\n. Just skip the first step, it's already what sdwebimage does for you with its uiimageview category.\n. Only local rules\n. Yes\n. I think I'll make two targets, with default one excluding libwebp\n. Would be nice to make this a filter. Something like this:\n``` objective-c\nSDWebImageManager.sharedManager.imageDownloader.headersFilter  = ^BOOL(NSURL url, NSDictionnary headers) \n{\n    if (![url.host isEqual:@\"foo.bar.com\"])\n    {\n        NSMutableDictionary mutableHeaders = [headers mutableCopy];\n        [mutableHeaders removeObjectWithKey:@\"Authorization\"];\n        headers = mutableHeaders;\n    }\nreturn headers;\n\n};\n``\n. awesome, thx\n. I don't see the point\n. +1 for doc\n. I'm ok with this change. Pull request?\n. Maybe, 4xx response shouldn't be cached though.\n. Maybe we should make it an option. You may or may not prefer your own placeholder instead of service's one in case of 404 error.\n. Thx\n. It has been merged\n. SDWebImage cache images is using NSCache. It is discardable memory. See Apple documentation: https://developer.apple.com/library/ios/documentation/cocoa/reference/NSCache_Class/Reference/Reference.html\n. Yes, it's caching\n. We could play with thetotalCostLimitofNSCacheto implement a maximum used memory barrier.\n. I guess you have to set the cost of each entry at insertion time otherwise it can't work.\n. A lot of apps are usingSDWebImage` caching a lot of images with no memory issue. You may have better chances searching for a leak in the rest of your app yes :)\n. @harishkashyap could you please provide a PR?\n. would implementing the mem cache without nscache fix the issue in you opinion?\n. My understanding is that most people here see a leak where it is just cached images. Memory caching of images used to be a big deal to get 60fps on old hardware. It's certainly less the case today, and maybe disk only caching can be enough for some use cases.\n. @harishkashyap can you send a pull request? @mallorypaine if you disable decompression, does it fix your issue without disabling memory caching?\n. If you follow the code path carefully you should never pass on this line. Under normal circumstances, the we provide the cache layer with both UIImage object and it's on-disk original representation. \n. Ok I can see it in this scenario. We may think about using PNG representation for this use case then.\n. I see a design issue here. You are coupling two unrelated classes. The download operation may not be used by the SDWebImageManager and more specifically not with the shared instance.\n. The key filter block should be passed to the downloader.\n. I don't understand how you want the library to guess the image scale. It's not because your screen is retina that all remote images should be treated as scale=2.\n. I think the good way should be to add a parameter on setImageWithURL\u2026 to manually specify the image scale. Only your app can guess it and it's a per image setting.\nAnyway, most of the time you don't really care about the image scale if you are using one of the UIViewContentModeScale* content mode.\n. @dzenbot it should be a per image parameter. Global property on SDWebImageManager may only change the default.\n. Why not but it's not very \"elegant\" nor future proof. Apple always use values for scaling. Apple may introduce more scalings in the future thus I would prefer to follow the Apple direction and add a scale: parameter.\nWe may also store the scaling information within the cache by using @x notation in cache filenames when scale != 1.\n. The library is meant to be used with cache busting, it ignores HTTP caching rules and cache as much content as possible by full URL (param included) with FIFO cache eviction. The SDWebImageRefreshCached option is for people not using cache busted URLs and wanting HTTP cache headers to be respected.\n. I'm ok for an option or a detection. Could you submit a pull request please?\n. Good idea. Could you please extend it to all supported category please?\nAdditionally, the direct change of the image property should reset this property.\n. I'm not very confortable with method swizzling in this kind of project. KVO could work but maybe it's too much of a burden for such edge case. What do you think?\n. Ok, that's not really an option in term of ease of use. I guess we'll have to live with the fact that you can get imageURL property out of sync with the actual image content. A note in the property description should be enough.\n. Sounds good! Last thing before the merge, could you please add returns before all open brackets in order to comply with the project's coding style?\n. Why not?\n. Nice addition. Could you add a return before the open bracket in order to comply with the coding style of the project please? I'll merge it then.\n. Already done\n. I guess there's a cronjob somewhere, I never had to push anything on cocoapods.\n. I'm not a cocoapod user, that's why I don't really carefully update it. Would be nice if it could be handled automatically using a hook.\n. Awesome but I'm not confortable with the idea to impose a dependency on the AssetsLibrary framework for everybody. Would it be possible to have this code isolated into a specific class/category with the ability to activate it at compile time?\n. Nice addition thx. Could you please just add a returns after opening braces in order to comply with the project's code style?\n. You're right, the thread property is never set. @erikcharlebois : could you please create another pull request to fix that?\n. I did some refactoring and merged it. Please have a last check.\n. I will have a look at it as soon as I have a minute.\n. Please rebase your pull request and I'll merge it.\n. Why are you changing the libwebp submodule?\n. You need to git clone the project with its submodule: git clone --recursive\u2026\nDo not use the \"download source code\" feature of Github as it doesn't retrieve project dependencies for you. You may also disable WebP by linking the demo project with \"SDWebImage\" target instead of \"SDWebImage+WebP\".\n. If image view is reused like in a table view cell for exemple, this commit will make previous image to be shown while the new one is downloading.\n. Why don't you use SDWebImageRetryFailed option?\n. What if you don't want the callback to be scheduled in the main runloop? Runloop selection is to be done in the callback.\n. Ok my bad, I'll merge\n. Could you please rebase on the master so I can merge it automatically?\n. Why don't you use the SDWebImageDownloaderLIFOExecutionOrder downloader option?\n. It is necessary otherwise you would get a ghost of the previous image during download when the image object is reused with no placeholder set.\n. If not already set, it would just put a nil into an already nil property. I don't really understand the issue.\n. @Mazyod is right, we don't try to parallelize a computation on CPU cores but to limit the number of concurrent network connections in order to be a good citizen regarding other parts of the application that may require network as well. On some networks like 3G, the number of concurrent connexion are quite limited, hence this low default.\n. Your assumption about how containsObject: works isn't true. You don't need to maintain same ref of an NSURL for a URL to match a member of this array.\nSee Apple doc:\n\nThis method determines whether anObject is present in the array by sending an isEqual: message to each of the array\u2019s objects (and passing anObject as the parameter to each isEqual: message).\n. Could you add a comment in the body of the condition then?\n. Why don't you use the options parameter to pass this option?\n. Definitely\n. Ok to not add URL as failed in case of timeout. I will accept a pull request for this.\n. Only permanent errors should be added to failed URLs by default. You may add an option to treat temporary errors like timeout as failures if you want though.\n. A library shouldn't change a global macro like NSLog.\n. You're right, nevermind\n. That's exactly that.\n. Yes I would love to. I'm very busy on non obj-c projects those times, that's why I don't contribute that much other than accepting trivial pull requests.\n. Ok lets try this\n. Sounds good\n. @matej and @lavoy: as the biggest contributors, do you wanna join the party?\n. @lavoy great news, thx.\n. Please make another pull req\n. Yes why not if it doesn't break the API and/or impact the performance.\n. Problem is that it couples the downloader and the cache components. Downloader may be used without caching or with a specific cache instance other that the shared instance.\n. The else if (self.finishedCount == self.requestedCount) looks ok, but I'm wondering about the weak ref changed to strong ref. Could you please elaborate on this @robertmryan?\n. Looks good\n. I think timeouts should be added.\n. @bpoplauschi agreed.\n. Why do we change the whole API and add so much burden just to add a param to the callback?\n\nI would be more comfortable by keeping the lib clean of deprecated code and just make the backward incompatible change in a major release. It won't break dependent apps as they won't compile and force devs to update their code.\nWe may carefully document this change to help people migrate their code easily.\n. What about breaking it now and say the next release is a major? I really don't like the idea to change method names semantic just because we introduce a change in the rest of the method's prototype.\n. At least, if you really need to do that, don't change the semantic and add a prefix to the category methods (i.e.: sd_setImageWithURL\u2026). That would fix a conflict with AFNetworking UIImage category who copied our method names and would be more future proof.\n. That's better. We now have to make sure we clean those deprecated methods in the next major otherwise it will still conflict with AFNetworking. This should then fix #350.\n. Yes\n. I personally like the change. It will certainly easier to maintain and less error prone.\n. Yes\n. Unit tests are more than welcome.\nAbout demo including source file, could you explain why?\n. Yes\n. Done\nOn Nov 2, 2014, at 12:57 PM, Bogdan Poplauschi notifications@github.com<mailto:notifications@github.com> wrote:\n@rshttps://github.com/rs could you login with your GitHub account to https://travis-ci.org/rs/SDWebImage and enable Travis CI? I have already create a .travis.yml file and it should work.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/773#issuecomment-61423246.\n. I initially tried to have dispatch_sync whenever possible as async delays the processing and slows down the display of images.\n. Let go with async. We'll see if we get complaints :)\n. Yes, the whole sync dance is about not delaying the cache check so UI doesn't have a chance to redraw. We may find a better way.\n. Looks good\n. Agreed\n. Remove the SD_WEBP flag\n. That's definitely too big if you want a fast loading on a mobile.\n. Depends on what your are doing with the image. You should have compressed image that match as most as possible its display size in pixels.\n. I'll fix that ASAP, thanks for the heads up.\n. Done\n. Welcome!\n. Ok for me\n. Looks awesome!\nCould you please:\n- Fix space indentation issues you introduced (empty lines with spaces, see diff)\n- Check that queryLocalAssetStoreWithLocalAssetIdentifier:\u2026 is available and add a specific error explaining which category must have been missing during compilation\n- Add some inline comments in SDWebImageCache and SDWebImageManager everywhere you are doing to AL specific stuff\n- Provide an extension with AL support in the podspec and as an additional Xcode target\n@bpoplauschi, @matej, @lavoy: what are you guys opinion on this PR?\n. I think it's great feature. I'm just wondering if it work though. I always though iPhone filesystem was mounted in noatime for performance optimizaiton but I must be wrong.\nDid you verify that the access time is updated on each access on the device?\n. +1 for the general idea of replacing the GIF support by an external library. Based on your comment I would also prefer FLAnimatedImage.\n. Can you look at the failing unit test please?\n. Could you please explain why this is necessary?\n. Could you send a pull request please?\n. Thx\n. I agree, the right fix is to implement an LRU cache. I don't have the bandwidth to do that right know, but if someone want to send a PR, I have the feeling that a lot of people would be grateful.\nIn the meantime I'm gonna accept this PR as it is a good meantime tradeoff. Could you please remove the part of the PR that belongs to anothers?\n. Now you miss the part that actually use that stuff :)\n. This call to setNeedsLayout is mostly useful when you use the default table view cells with no placeholder image or when the placeholder image is of a different ratio than the final image.\nIf you don't set a placeholder image on a default cell, the cell lays out sub views like title without any room for the image at all. Thus when SDWebImage finish the loading of the image, the image is set on the image property of the cell's image view, but nothing is displayed because changing this property on the UIImage of default cell doesn't trigger a layout refresh.\nI wanted this library to be very easy to integrate, and most of the first feedbacks were that the library wasn't working because of this issue.\n. What's the issue then?\n. Was introduced in https://github.com/rs/SDWebImage/commit/ba71333e17e18ecdef26574963150e3bd3591fca from PR #114\nWas about handling of progressive download. Maybe it no longer relevant.\n. Looks great. In the migration draft, I don\u2019t see the differrence between the 3 and 4 case. Isn\u2019t it confusing?\n. Fixed.\n. Invitation sent.. Done. You should be good to go.. About the transfer, I got no replies from you guys in the email thread.. I was expecting a reply to my last email. Please stop using my dailymotion email.. Transfer done.. Won't those name changes make it harder for users to upgrade without a clear benefit?. I'm not sure to understand the need for multiple repos. Can't you have all the components in the same one? Maintaining multiple repos for libraries that depend on each other can be tedious. Any feature that will span on multiple components will require some gymnastic with multiple commits and dependency conditions.. Invitation sent.. done. This code will crash if cacheKeyFilter isn't defined\n. You leave an empty condition, I guess it's an error isn't it?\n. This was part of another PR right?\n. This chunk was part of another PR right?\n. ",
    "orff": "I am seeing this same bug.  Here is my monkey-hack that works for my current project:\nhttp://gist.github.com/506649\nThis is not a suggested -real- solution, just a start on where / how to patch\n. ",
    "jocull": "I just wanted to verify that this is correct. I appears to me that you need to run the commands like this to clean and clear both memory and disk (notice _clear vs. _clean):\nSDImageCache *imageCache = [SDImageCache sharedImageCache];\n[imageCache clearMemory];\n[imageCache clearDisk];\n[imageCache cleanDisk];\n. ",
    "chrischenyc": "high five!\nmany thanks!!!!!!\n. in version 3.5, i can't find this [SDWebImageDownloader setAuthorizationHeaderWithUsername:auth_token password:@\"\"];\nmy question is how to deal with basic authentication?\n. ",
    "kevinrenskers": "Or alternatively, could the cache get some sort of time-out? After a day in the cache, always get the latest version of the image.\n. For now I've solved my problem by putting ?uid={news_id} after the image url.\n. ",
    "DavidBoyes": "I forked this awhile ago to do it, I haven't used it since but just updated it to the latest version if you want to check it out.\n. Hey,\nDid you download it from my fork?  Here is a link to the file on my fork which contains UIProgressView\nhttps://github.com/DavidBoyes/SDWebImage/blob/master/UIImageView+WebCache.m\nCheers\n. Are you sure you have downloaded the source code from my fork and not the packages? Check the file I linked above and make sure it is the same as the one you have. I haven't actually used this since I updated it.\n. I just tried it out and it worked fine.\n```\nUIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 200, 200)];\n[imageView setImageWithURL:[NSURL URLWithString:@\"http://apisuk.com/Bees/wp-content/uploads/2010/10/banyan-tree.jpg\"]];\n[self.view addSubview:imageView];\n[imageView release];\n```\n. Is it possible that the image is already cached, as the progress view won't show if it doesn't have to download it.  Try a different image. Or just copy and paste the code I gave above into your viewDidLoad to test it out.\n. I just put up a copy of a test project which works for me.  Besides using viewDidLoad I tested it with IBOutlet and it worked fine.\nDownload it here:\nhttps://github.com/DavidBoyes/SDWebImageView-Example\n. Just thought I'd note that I have updated my fork to the latest source of SDWebImage.\n. ",
    "ssowy": "Great! I'll try it out!\nSent from my iPad\nOn May 11, 2011, at 5:02 PM, DavidBoyesreply@reply.github.com wrote:\n\nI forked this awhile ago to do it, I haven't used it since but just updated it to the latest version if you want to check it out.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/6#comment_1136544\n. Hi David,\n\nI just imported the latest version in.  I don't see any reference to UIProgressView.  Any tips on how to show the progress while downloading?  Am I using the wrong fork?\nThanks.\nSherwin\n. Oops! You're right - I didn't download it from the fork.  Will try it now.\n Funny thing is, I realized that my app is now using AsyncImage and not\nSDWebImage anymore.  Hahaha!\nThanks!\nSherwin\nOn Sun, Jul 10, 2011 at 6:33 PM, DavidBoyes \nreply@reply.github.comwrote:\n\nHey,\nDid you download it from my fork?  Here is a link to the file on my fork\nwhich contains UIProgressView\nhttps://github.com/DavidBoyes/SDWebImage/blob/master/UIImageView+WebCache.m\nCheers\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/6#issuecomment-1541385\n. I just tried your fork now, but I'm not getting any progress view.  All I did was use an ImageView, and called setImageWithURL.  I'm loading the images correctly, but I don't see any progress view.\n. The way I'm implementing it is that the UIImageView is defined in my .h file, as an IBOutlet:\n\nIBOutlet UIImageView *photoImg1;\nAnd then in my .m, I do this:\nNSURL *imageURL = [[NSURL alloc] initWithString:_text];\n[photoImg1 setImageWithURL:imageURL];\nphotoImg1.contentMode = UIViewContentModeScaleAspectFit;\nphotoImg1.layer.cornerRadius = 5;\nphotoImg1.layer.masksToBounds = YES;\n[photoImg1.layer setBorderColor:[[UIColor whiteColor] CGColor]];\n[photoImg1.layer setBorderWidth: 2.0];\nSo when I run it, the image loads fine, but I don't see a progressview.  Do you see something that I don't?\nthanks for your help, BTW.\nSherwin\n. Ok. I'll try it out. Thanks!\nSent from my iPhone\nOn Jul 10, 2011, at 7:42 PM, DavidBoyesreply@reply.github.com wrote:\n\nIs it possible that the image is already cached, as the progress view won't show if it doesn't have to download it.  Try a different image. Or just copy and paste the code I gave above into your viewDidLoad to test it out.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/6#issuecomment-1541553\n. I put it in my viewDidLoad and the image appeared without any progress bar or anything.  I have absolutely no idea what's wrong.\n\nI also put NSLog() on updateProgressView of UIImageView+Webcache.m, and it's not being called.\nSherwin\n. Thanks.  Your code works fine, so I'll use it to figure out what is wrong with mine.\nThank you again for your help!\nSherwin\n. Gah.  I still can't get it to work.  Somehow, somewhere in my existing code is stopping - (void)imageDownloader:(SDWebImageDownloader )downloader didReceiveData:(NSData )data from actually being called in SDWebImageManager.m.  That's why the progressView never gets notified or updated at all.\nSherwin\n. I don't know what happened but I just put an NSLog in SDWebImageDownloader.m and it suddenly started working.  I guess I should have done a Clean build - it might have been still using the original version of SDWebImage.\nThanks!\n. ",
    "SleepyBrett": "This is a great fork, I'd love to see it integrated as an option, also an option for using a simple activity monitor view in it's stead.  So you could chose if you want the placeholder, the progress bar or the spinner.\n. ",
    "markrickert": "Love this fork too... and a UIActivityIndicatorView would be better for some instances I use this class for... like loading in a small image into a UITableViewCell. But for larger images that load full-screen, the progress indicator is fantastic.\n+1 for integration of this fork into the main repos as an option.\n. @benxiong Fork it, add the feature and send a pull request! That's the beauty of open source software! \n. > But isn't it a bit early to use ARC?\nI'm using ARC for all my new projects - not converting old ones yet though. I think that with the iOS 5 GM and the ability to use ARC to compile and target to pre-iOS5 devices makes it a great opportunity to learn the new procedures and even submit applications using ARC now.\nJust my 2\u00a2\n. I like this, but do we want to remove ALL objects? Is there a way to remote just everything but the most recently cached n objects?\n. ",
    "jamztang": "Original credits to @DavidBoyes, I've created a branch \"report_progress\" that can let us customize the loading indicator when it's needed.\nThe changes doesn't contains any UI elements (which is not necessary for some apps), but using NSNotification to let others knows the progress of which imageView or buttons download state.\nhttps://github.com/mystcolor/SDWebImage/commit/51f6b278260fa6fd86471cb1ffbb0c3d4343b88d\nThe following is an example of how you add indicator to an imageView, the best of this is you can customize as you needed.\n```\n    [[NSNotificationCenter defaultCenter] addObserverForName:SDWebImageManagerProgressDidUpdateNotification\n                                                      object:nil     // Listen to all objects\n                                                       queue:nil     // Use the queue that the notification was posted. Now should be the main queue\n                                                  usingBlock:^(NSNotification *note) {\n                                                  // Get the posted object, which we are only interested in the UIImageView and the UIButton\n                                                  id object = [note object];\n\n                                                  // UIImageView and UIButton is both subclass of UIView, this is a simple condition for that.\n                                                  if ([object isKindOfClass:[UIView class]]) {\n                                                      UIImageView *imageView = object;\n\n                                                      // Create a tag for identifying the progress view so we can always find the right \n                                                      // progress view and prevent adding duplicate progress view to our imageViews\n                                                      // You can use UIActivityIndicator, UIProgressView or any UIView subclasses as you like\n                                                      JPProgressView *progressView = (JPProgressView *)[imageView viewWithTag:919];\n\n                                                      if ( ! progressView) {\n                                                          CGRect progressViewFrame = CGRectMake(0, CGRectGetHeight(imageView.bounds) - 3, CGRectGetWidth(imageView.bounds), 2);\n                                                          progressView = [[JPProgressView alloc] initWithFrame:progressViewFrame\n                                                                          ];\n\n                                                          progressView.tag = 919;\n                                                          progressView.progress = 0;\n                                                          [imageView addSubview:progressView];\n                                                          [progressView release];\n                                                      }\n                                                      progressView.progress = [[[note userInfo] objectForKey:SDWebImageManagerProgressNotificationInfoProgressKey] floatValue];\n\n                                                      // Configure the complete and initial state, 0 = initializing, 1 = finished.\n                                                      if (progressView.progress == 1 || progressView.progress == 0) {\n                                                          progressView.hidden = YES;\n                                                      } else {\n                                                          progressView.hidden = NO;\n                                                      }\n                                                  }\n                                              }];\n\n```\n. Have implemented a class called SDWebImagePrefetcher.\nCreate an NSArray of NSURL and start prefetching with \n- [SDWebImagePrefetcher startPrefetchingWithList:]\nThis class will schedule the download the URL one by one (in lowPriority mode), and failed downloads will be skipped at this moment. Because it's using SDWebImageManager, duplicated requests should already be nicely handled.\nhttps://github.com/mystcolor/SDWebImage/commit/d38d4b11b9194407350295bf4a3262d61bdec98e\nPlease comment if it's useful to you guys.\n. @rs The decision is mainly because I think that those scheduled prefetching should felt free to be discard and let higher priority jobs to do first. For example you scheduled some images out side of the screen in viewController1, then user switch to viewController2, the prefetcher should be mainly focused on viewController2's schedules. \nAt the moment I code SDWebImagePrefetcher, setting the whole list again just simply makes things clear enough and prevent ending up with situation that hugh list is awaiting for download.\nFor what you'd want to do, maybe there's really a need for a prepending or appending method for that. Should I instead expose the _prefetchList to be a property and let us decide how we want to add for scheduling? \n. Putting initWithData in background thread may not really help a lot. UIImage does extra lazy initialization, it does expensive decoding on display or drawing. To really help performance we need to have a background thread to draw it out after download or loaded from disk. Have a look at this branch, it does improves overall smoothness. It may not be polish or simplified enough at this moment but once it's done I'd be happy to make a pull request.\nhttps://github.com/mystcolor/SDWebImage/tree/SDWebImageDecoder\n. Interesting, sounds like that's a possible optimization for iOS 4.0 or above. Would you mind fix the link for me please?\n. Nice and detailed article! It mentions that if we want to cache images using initWithContentOfFile, that flag is necessary but only available in iOS 4. For a lightweight image displaying optimization, I think the correct color format is really the key to achieve better performance. \nSomeone in stackoverflow mentioned the how to create an image with the correct the color format, and I also fixed a common context error by using CGColorSpaceCreateDeviceRGB() when creating the bitmap context.\nPretty pleased with the actual performance enhanced (very noticeable in my testing with an iPod touch 2G, is a few times smoother).\nI think one thing we can try to look at is to simply the decoding logic into SDImageCache and use the cache in queue for image decoding, then we can eliminate the need of creating yet another NSOperationQueue and shared instance to do the expensive decoding procedure.\n. @rs @adamjernst, my pleasure. Please comment on any improvements that can be made.\nhttps://github.com/rs/SDWebImage/pull/33\n. I've try to look into injecting the decoding logic in SDImageCache, but looks like would require a quite bit of refactoring on both SDWebImageManager and SDImageCache. Split it out with SDWebImageDecoder seems to be safest solution at this moment. Maybe I'm missing any simple solution?\n. @Shukuyen, I'm guessing you would need to have a central place to call SDWebImageManager to download the image, which will probably be your viewController, and like @rs suggested above, you'd then will be able to notify both imageViews to do their job.\nHowever I am not sure how to do it if the view got more than one set of those imageViews, so more than one image will be downloaded and how can the viewController properly distinguish between them? \n. @benhoyt Yeah sure! It'd be useful to me.\n. Create an NSArray of NSURLs and kick start prefetching with \n- [SDWebImagePrefetcher startPrefetchingWithList:]\nThis class will schedule and download the URL one by one (in lowPriority mode), and failed downloads will be skipped at this moment. Because it's using SDWebImageManager, duplicated requests should already be nicely handled.\n. https://github.com/rs/SDWebImage/pull/32\n. How about turning off ARC for specific file?\nhttp://stackoverflow.com/questions/6646052/how-can-i-disable-arc-for-a-single-file-in-a-project\n. You are probably using default styles to configure your UITableViewCell and setting the imageView inside.\nThat imageView is dynamically adjusted based on the thumbnail size, while your placeholder image is not the same size with your remote image, you will encounter this problem.\nYou should consider to use a large enough placeholder image, or you can create your own UIImageView with fixed size and add to the cell.\nPlease let me know if this fixes your problem @truehybridx.\n. That could be tricky. Actually I've already implemented the URL checking solution like @adamjernst 's suggestion, which you can have a look at following commit.\nhttps://github.com/mystcolor/SDWebImage/commit/a5f9bb9d3bd91910c42dc17f95963fe7742d0fb6\nHowever, that's breaks multiple fetching of images using a single delegate object. (For example using SDWebImagePrefetcher or delegating the SDWebImageManagerDelegate to your viewController, the images arrives in unpredictable sequences, and the following logic isn't able to know whether that delegate is interested on the last response only or all responses, and discarded all responses not equal to the expected URL.\n// The disk query returned, but sometimes it was an older request for this delegate which is supposed to be cancelled. \n // We compare the URL and the key and see if it was the actual request.\n if ( ! [[[urls objectAtIndex:idx] absoluteString] isEqualToString:key]) {\n     return;\n }\nSo the main objective is to let SDWebImageManager to know whether the delegate only interested on the last response or all responses, we've to come up a solution for this use case.\nUsing NSNotificationCenter instead of the delegation pattern could probably solve this problem (which requires a huge refactoring), but I am sure @rs originally has reason to use delegation at the first point and needed to be take consider of, and I am thinking if there's any other  ways to do.\n. ",
    "ralfjagger": "Hi,\nthank you for the fix. This is looking right to me :-)\nRalf\n. ",
    "0m15": "Sorry for late.\nThe way I've used it:\n1) I have a custom UITableViewCell (derived from ABTableViewCell that uses drawRect method to draw cells more fast;\n2) in tableView:(UITableView )aTableView cellForRowAtIndexPath:(NSIndexPath )indexPath I do:\n    UIImageView *myImageView = [[UIImageView alloc] init];\n    [myImageView setImageWithURL:anURL placeHodlerImage:placeHolderImage];\n3) Now, when I launch my app, first cells are not displaying images until I a) scroll down, b) scroll up back\u00ec\n4) I temporary solved this issue by performing selector setNeedsDisplay:\n[cell performSelectorOnMainThread:@selector(setNeedsDisplay) withObject:nil waitUntilDone:NO];\n. Yeah.\nSorry fot late. Placing a placeholder image make it works properly.\n. ",
    "thillerson": "Zimok, my bet is that you're not providing a placeholderImage. I see the same issue until I provide a placeholderImage. That's probably a better user experience anyway, although there may be exceptions...\n. One thing I've just noticed is that if the placeholder image and the final image are not the same dimensions, the loaded image will retain the dimensions of the placeholder until something else makes it redraw.\n. ",
    "tylerhall": "I also can confirm the image wasn't being displayed until the table was scrolled. But, like the previous poster said, adding a placeholder image fixed it.\nOn May 24, 2011, at 10:54 PM, thillersonreply@reply.github.com wrote:\n\nZimok, my bet is that you're not providing a placeholderImage. I see the same issue until I provide a placeholderImage. That's probably a better user experience anyway, although there may be exceptions...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/9#comment_1233081\n. \n",
    "thiagoperes": "Im getting the same issue as thillerson, could you provide a solution for that?\n. ",
    "gerardp": "\"One thing I've just noticed is that if the placeholder image and the final image are not the same dimensions, the loaded image will retain the dimensions of the placeholder until something else makes it redraw.\"\nI have the same problem!!\nAnybody has the solution?\n. ",
    "Hackmodford": "I can confirm the need for a placeholder image to fix this bug.\n. Could you be more specific for a noob?\nI'm using the cell.imageView... are you saying I should create my own custom image view on my custom cell that occupies the same area and set that one?\n. I can only get it to work correctly when using a custom image view I cannot use the default image view of the tableviewcell even if I set its content mode via code\n. Okay... that makes perfect sense.\nThank you very much!\n. Why was the pull request closed? Was it added to the project? (Sorry I'm quite new to GitHub and how it works)\n. -(void)webImageManager:(SDWebImageManager )imageManager didFailWithError:(NSError )error {\n    [[self viewWithTag:1001] removeFromSuperview]\n    self.alpha = 1.0; \n}\nThis line should be added to the UIImageView+WebCache.m so that if the image fails to download the activity indicator goes away ;)\n. Doesn't this request need to be updated in light of the NSBlocks implementation?\n. I tried to simplify the code even further. I was able to load an image if I gave it a URL to a picture on amazon. However my code is trying to load an image from an ftp server\n[self.customImageView setImageWithURL:[NSURL URLWithString:@\"ftp://www.posmanage.com/mapicture/14756.jpg\"] placeholderImage:nil];\nSo it seems to be related to an ftp issue.\n. I added a symbolic breakpoint \"objc_exception_throw\"\nWhen I do this the breakpoint goes to line 118 of SDWebImageDownloader.m\nThis issue only arises when I use  ftp://  instead of http://\n. The version I have that currently works doesn't have lines 116-136 in the sdwebimagedownloader.m\n. That fixed the issue thankyou ;)\n. It's right on the code page (main page for this)\nJust scroll down and there's a simple example of how to use this with the uitableviewcellforrowatindexpath method.\n. I am receiving this error also. The previous solution didn't work for me.\n. I have learned 2 things.\nFirst change the option to SDWebImageRetryFailed to attempt to redownload the image every time. Then the completed block will always be called...\nHowever for my purposes (activityindicator over uiimage) I went with this method instead\n[self.customImageView setImageWithURL:imageURL\n                             placeholderImage:nil\n                                      options:nil\n                                     progress:^(NSUInteger receivedSize, long long expectedSize) { [self.activityIndicator startAnimating]; }\n                                    completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) { [self.activityIndicator stopAnimating]; }];\n. ",
    "martingjaldbaek": "I just had this issue but fixed it without the need for a placeholder image. Setting the correct contentMode (in my case aspect fill) does the trick. Here's the kicker - I spent an hour trying to make this work to no effect because I was accidentally setting the image on cell.imageView (a native property of UITableViewCell apparently) rather than cell.myCustomImageView, which happened to occupy the same space. It turns out I was setting the contentMode on one of them (via Interface Builder), but actually loading the image in the other, and thus getting the wrong behavior. I hope this helps somebody.\n. ",
    "JacobSyndeo": "I'm completely new to this library (and fairly new to iOS development in general), but I'm encountering a problem with the solution of supplying a placeholder image.\nMy current code is:\n[cell.imageView setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@\"http://music.bronynet.com/retrieve_artwork.php?artist_id=%@\", cellValue.artistID]] andResize:CGSizeMake(80, 80) withContentMode:UIViewContentModeScaleAspectFit];\nwhich automatically scales down any rectangular images to fit within the 80x80px dimensions of the table cell image.  This code, however, doesn't show the images unless I scroll down and then back to the top, which redraws the cells.\nSo while editing this code to use a placeholder image instead, I noticed that there was no method in SDWebImage to include a placeholder image AND scale down the results coming in from the web, which leaves me with this:\n[cell.imageView setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@\"http://music.bronynet.com/retrieve_artwork.php?artist_id=%@\", cellValue.artistID]] placeholderImage:[UIImage imageNamed:@\"artistPlaceholder.png\"]]\nThis code works, but it will \"squish\" any rectangular images when they first load in.  And after they're loaded, if I scroll down and then back up to the top (to redraw the cells), the rectangular images will display at the correct aspect ratio, but they're WIDER than 80px now, and push the label text off to the side.\nIs there any way to aspect-fit the rectangular images into 80x80px AND use a placeholder image (so that it can auto-update the images)?\n. ",
    "hcamatthew": "I'm getting this same problem: Images will not load until I have started scrolling down the Table View.  Once I come back to the cells after scrolling the Image will finally show up.  Any fixes for why this is happening to me?\n. I'm getting this problem as well, I am not getting the Images until I start scrolling the TableView.  What should I be doing so that the placeholder image gets replaced by the Image from the API?\n. ",
    "vinayakparmar92": "same\n. Just assign a placeholder image properly..I suggest it  should be a loading icon image..Then it will work properly\n. ",
    "hilalbaig": "Assign a placeholder image properly.. issue with me was with wrong image extension that doesn't match with each other i.e. placeholder.jpeg and palceholder@2x.jpg \n. ",
    "rodrigoruiz": "I'm seeing the same problem and not even using SDWebImage (I'm using my own setImageFromLocalURL:).\nDid anyone manage to solve this issue?\n. ",
    "JPROFFICIAL": "Although this issue is closed, I had found the same exact issues as the people above, and was unable to use a placeholderImg because I was using the SDWebImageManager.sharedManager().downloadImageWithURL call.\nI was making the UIImageView.image = nil in cellReuse, and calling setNeedsLayout - layoutIfNeeded after the image loaded using that block.\nThe solution for me was: In the parameters of the above downloadImageWithURL call  -> add SDWebImageOptions.AvoidAutoSetImage to the options parameter. \nNow all of the images load as expected.\nHope this helps someone! Thx so much to the team at SDWebImage for this great lib.\n. @bpoplauschi Im referring back to this post because I have been time-profiling the app and came to this. This is the main line thats causing the scrolling to drop frames (As far as I can tell). Not sure if this is happening because of the size of the images (each are from 1 - 1.5 mb)? I read a closed issue on here regarding bigger image sizes, but am not sure if this would apply.\nThanks for your response! Fantastic framework.\n\n. @bpoplauschi I really appreciate the quick response time, thanks alot. What would you recommend for getting the image sizes smaller? Is this something that can be done by a SDWebImg function? possibly caching them smaller?\n. Thanks alot both of you!! Big ups on the lib its fantastic.\n. After two days of pulling my hair out believing it was an issue with UIImageView (why?), I can add to this discussion that SDWebImageManager.sharedManager().downloadImageWithURL does not always complete as well. The SDWebImageDownloader.sharedDownloader does work everytime though.\n. I spent three days of development trying to figure out why my image was not setting after it loaded using the SDCompletionBlock. After tried and true testing - Calling a setNeedsLayout - layoutIfNeeded - even manually updating the ReusableHeaderView for my collectionView using a layout context; @tylerjames answer did the trick. Unsure if this is an xCode bug or if this is by design, but changing my sublayer work (cornerRadius - contentMode) from my cellForRow to layoutSubviews did the trick. Thanks for a helpful thread guys. PS. SDWebImg is a rockstar.\n. ",
    "habibghantous": "hello, i am using SDWebImage in a collectionView, but i am getting the first batch of thumbs correctly, and when i scroll down the thumbs are empty for some reason here my code:\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let imageIndex = indexPath.row\n    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! PhotoCell\n    DispatchQueue.global(qos: .userInitiated).async {\n        DataManager.sharedInstance.getThumbUrlAt(categoryIndex: self.categoryIndex, imageIndex: imageIndex) {\n            image in\n            DispatchQueue.main.async {\n                if let loadedImageCell = collectionView.cellForItem(at: indexPath) as? PhotoCell {\n                    loadedImageCell.imageView.sd_setImage(with: URL(string: image), placeholderImage: UIImage(named: \"placeholder.png\"))\n\n                    cell.layoutIfNeeded()\n                }\n            }\n        }\n    }\n    cell.imageView.layer.cornerRadius = 6\n    cell.imageView.layer.masksToBounds = true\n\n    cell.layer.shadowColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.5).cgColor\n    cell.layer.shadowOpacity = 0.5\n    cell.layer.shadowRadius = 3\n    cell.layer.shadowOffset = CGSize(width: 0, height: 0)\n    cell.layer.shadowPath = UIBezierPath(roundedRect: cell.bounds, cornerRadius: 6).cgPath\n\n    return cell\n}.\n",
    "dreampiggy": "Your code seems contains two async operation, which means when the cell is reused, it can not be set to a correct state immediately.\nRemember that cellFotItem will be called each time you scroll and you should reset all the correct state for that cell(Because it be resued from another cell instance and the state is not sync with the current item). So it's better to keep the data model firstlly in your viewController or viewModel, then just use sd_setImage. sd_setImage will immediately reset the image to placeholder and then check cache or downloader, which keep the correct state.. Seems long time passed. ALAsset is not long supoort from iOS 8. And our SDWebImage 5.x has already drop the iOS 7 support. Maybe we can add PHAsset support in 5.x or by a seperate Pods. Thansks for all of you who is interested about this issue. We can create a new PR for PHAsset request :). Please use SDWebImageOptions with SDWebImageProgressiveDownload on and check the result.\nThe enhanced standard interlaced support(sometime it called progressive for JPEG format) is in #1987(will be in 4.1.1) . The image will look like mosaic and then become more and more clear. Such as this one:\n\nThe current version (I don't know when this code exist but I'm sure it's from 3.7.x to current master branch) also support the common interlaced png loading. It will look like baseline scan with a step for multiple times.\n\nFor other normal png images, you can also use that SDWebImageProgressiveDownload, it will just use the built-in baseline scan. On 4.1.1 it will keep unfinished part transparent. In previous version it will keep unfinished part with a grey background. Check: #1899 for details.\n\nPlease know that interlaced png need you create it with special png format and will cause more space but baseline png it's png fomat built-in default behavior. You can grab some interlaced png files and try the demo with that URL. \nAlso, different image format (jpeg,gif also support progressive download) may have different behaviour on that progressive download because it's was processed by Apple's ImageIO framework. WebP images also have progressive download but it only support baseline progress for static WebP images.. The test interlaced png image is here (From YYImage):\ninterlaced.png\n. This is available in 4.1.2(In fact is 4.1.1. But this version contains a bug. So we recommend to use 4.1.2). Please have a try.. It seems that this code is out of date. -[UIImage initWithData:] now can correctlly handler the EXIF orientation tag. It's no need to create another UIImage instance again. Maybe in the earily iOS version it doesn't. But now, above iOS 8, it works.\nSee the test for that: https://github.com/recurser/exif-orientation-examples\nI'd suggest to remove this code to make ImageIO coder more clear and performent.. @n13 \ud83d\ude05 It's surprised that you're still subscribe to this issue.\nHere is the test result of 8 EXIF orientation tag. It shows all correct and UIImage.imageOrientation is set automatically. If we parse EXIF orientation tag wrong, these 8 images will show in different orientation.\nScreenshot:\n\n\n\n. However, this only works for the NSDataa rg initialize method. If we use CGImage to create UIImage. The image orientation is lost. But since EXIF orientation tag is mostlly only availble on JPEG images. So it's OK now. Other image foramt like WebP EXIF orientation is a little hard to implement and most image tools does not correctly process it, So we currently do not process as well in 5.x(maybe later, not really important)\nSee this test:\n\n. @n13 So maybe I'll change this in SD 5.x(5 years passed since your PR)...But, does anyone have a iOS 7 device to test if we can also change this extra calculation of EXIF orientation on iOS 7 so that maybe we can also merge this change into 4.x ? \ud83d\ude05 . @bpoplauschi \ud83d\ude05I'll create a PR and merge this into 5.x. But however, whether or not to change this also in 4.x branch should be checked later (Because 4.x still support iOS 7, we may need to see if iOS 7 support this automatically EXIF orientation handle or not). This PR is about using ETag to identify the same resource. However, this can be done using SDWebImageRefreshCached.\nSDWebImageRefreshCached will actually use NSURLRequestUseProtocolCachePolicy. Which is powered by NSURLSession now. It will check all of standard HTTP cache control information. Including:\n\nHTTP Cache Control (max-age, only-if-cached, etc)\nHTTP ETag (If-Match, If-None-Match, etc)\n\nSo, actually, if you want to request to the server to response the HTTP standard cache control, you can enable that option now.\nMaybe this option is not availble in the time you create this PR...(4 yeas later \ud83d\ude05) But now it should works.\nIf you want to implement more complicated feature beyond the HTTP standard, welcome to try #2278 feature in 5.x. It allow you to specify custom cache which used by our framework.\nThanks for your contribution. So I just close now. ;). This API should be deprecated and it's not a good design.\nMaybe your use case is that: if the memory or disk cache contains the image, show that instead of placeholder! else, firstly show the placeholder, then download from the network and replace the placeholder!. But this can be done by Core Animation's composition without this strange API.\nIf we can ensure all the process happend during the same runloop, even if you provide a placeholder and call imageView.image = placeholder\nand then we query the cache synchronously, call imageView.image = image,\nthe actually rendering will only show the last image because the previous setImage will be ignored by Core Animation.\nOf couse, if memory & disk cache missed. The placeholder will be rendering, and the network start, once finished, the imageView will trigger imageView.image = networkImage.\nSo, I think, all you need to do, it's a SDWebImageOptions for hint that the cache query should be synchronously, but not such a strange API. SD 4.3 introduce SDImageCacheQueryDiskSync and so this can be done easily. The current API will be marked deprecated and removed in 5.x.\n. @zapjonny The diskImageExistsWithKey: has been removed during 4.x. Through I think that it's a bad idea. I didn't experienced that time but the reason to do that may be that SD 3.x expose the ioQueue to the user, so if user call from ioQueue with a dispatch_sync, the dead lock occur. However, this issue should be not happend now because we do not expose this queue.\nSo I put back the sync version API diskImageDataExistsWithKey: in SD 4.3.0, see #2190. The 4.3.0 version will be released in the end of January in plan :). @lehelmedves See the #2020. The comments here show the solution.\nFor 4.x, you can only use headersFilter property in SDWebImageDownloader. You can use a switch case or some extra information for the URL, to decide which of url should be appending the addtional headers.\nFor 5.x, you should use requestModifier property in SDWebImageDownloader.  It gives you a NSURLRequest and you can modify anything then return the new one. Besides the central control in SDWebImageDownloader property, it also has one context option named SDWebImageContextDownloadRequestModifier, to allow you to specify request modifier for each of image request. So you can directlly set the header during sd_setImageWithURL:. It seems that this code is out of date. -[UIImage initWithData:] now can correctlly handler the EXIF orientation tag. It's no need to create another UIImage instance again. Maybe in the earily iOS version it doesn't. But now, above iOS 8, it works.\nSee the test for that: https://github.com/recurser/exif-orientation-examples  (Just copy the image urls, uncomment that calculation of image EXIF orientation and run)\nI'd suggest to remove this code to make ImageIO coder more clear and performent.. Looks great. A weak map to keep the reference to the UIImage instance without touch the reference count. I will consider add this feature later.. This PR is merged by #2228. Thanks for your suggestion :). To answer this question, you should considerate the runLoop as well. UIKit(Core Animation) will do rendering composition during the same runloop, so if you call these:\nobjective-c\nimageView.image = image1;\nsleep(1);\nimageView.image = image2;\nis different from\nobjective-c\nimageView.image = image1;\ndispatch_async(dispatch_get_global_queue(0, 0), ^{\n    sleep(1);\n    dispatch_async(dispatch_get_main_queue(), ^{\n        imageView.image = image2;\n    });\n});\nThe second one will trigger a flash because image1 will be rendered and then image2 will be rendered after 1 second. \nBut the first one will just show image2 after 1 second, the image1 is ignored by UIKit &Core Animation (this may has impact on frame rate because of blocking the main queue).\nSo, next, what cases do you need ? If you want to keep the current image for non-reused imageView, use SDWebImageDelayPlaceholder instead.\nIf you want to use it for reused imageView (tableViewCell/collectionViewCell), current implementation will force to query the memory-disk cache. So this is adoptable for normal use case.(You'll never disable memory cache when you decide to use this method, right ?). For advanced control on reused-imageView caching, you need to implement it yourself.. If you think that disk cache is important(means if the disk cache contains the image, load it, don't care about blocking main queue!), use SDWebImageQueryDiskSync options with the normal public API(sd_setImageWithURL:) can solve this issue. If you find that disk read time is large, you can also try using NSDataReadingMappedIfSafe in diskCacheReadingOptions, this will use mmap instead of fread for NSData\nIf you think that you need keep a high frame rate and do not want disk cache produce a flashing (Because disk cache is really fast compared to network, but really slow compared to memory), you can just disable disk cache use SDWebImageCacheMemoryOnly. Or you can create a animation after the image is set to reduce this visual effect.. #2175 Merged. Consider using SDWebImageQueryDiskSync instead.. Firstly, could you please try the lastest version and see if this still represent ?\n@dirtyhenry  This code seems changed to add a queue dispatch to ensure thread-safe, see : https://github.com/rs/SDWebImage/blob/4.2.3/SDWebImage/SDWebImageDownloader.m#L245-L252\nAnd I want to point it out that GCD is a thread-pool. If the GCD thread pool hit the max thread count(currently is 66 on iOS, 64 + main thread + diapatch thread), then a new queue enter will cause a dead lock. So maybe this is unavoidable if your application contains so much threads. (Note not each queue use a thread, when you call dispatch_get_global_queue, you may share a thread with another queue. Only some specify usage such dispatch_queue_create and keep a thread-local variable may actually use a standalone thread).. @mayqiyue Maybe we should drop that usage of using dispatch_queue, for mutable array, a dispatch_semaphore or other lock is enough and will not cause some queue problem.. @skyline75489 Actually, why we must use a dispatch_barrier_sync ? This process just need to remove the URL from a NSMutableArary, isn't ? Use GCD as a lock is a wrong design and I don't know why current code always do like this. (Because the issue I mentioned, GCD is a thead-pool and may reach the limit and cause dead-lock, it's not a silver bullet)\nI suggest to use a lock (I use dispatch_semaphore because it not so CPU-consuming like spinLock and have a balance of performance) instead. I create one PR #2184 for this.. #2184 Merged. Now we use a lock instead of relay on the queue to ensure thread-safe. This may solve the issue.\nI guess the issue is that sometimes the completionBlock on NSOperation return the barrier queue used in downloader, so this cause a deadlock.\n\nThe exact execution context for your completion block is not guaranteed but is typically a secondary thread.. This is actually what SDK author should do. They can use -[SDImageCache initWithNamespace:] to specify a special name space just for their cache, but not directlly use the shared cache :). This one is misunderstading to most of use case. If you need to use with 304 status code. You should use SDWebImageDownloaderUseNSURLCache options. Or you should use SDWebImageRefreshCached.\n\nWe default use NSURLRequestReloadIgnoringLocalCacheData, and we do not do any extra logic. That means even the server response a ETag, we do cache that in NSURLCache level. So even if you specify If-Modified-Since or If-Match-Noneand server response a 304 code. We have no way to find the cache files. So that this use case can't work.\nIf you provide SDWebImageDownloaderUseNSURLCache. NSURLSession will handler all of this for us. Actually, if the Last-Modified-Date not reach. NSURLSession will directlly callback a data cached by file system without any network request. So you can get the call immediately.\nCurrently we directlly cancel the request when the status code is 304 and do not call any completion block. This is not work as you want(We have no place to find the cache if this case hit). So we drop this behavior and actually pass the response like valid status code.. emmm...Why can we have a priority queue and limit the size of concurrent download operation. When the cell reuse, we do not acutally cancel the download operation, just cancel the process to set the image. More clearly, we just mark the download operation not to call the completionBlock but keep on going.\nIf we seperate the download completionBlock from download itself, we can keep the download go on without and also compatible with cell reuse. We can just use another private block or context to save the data to the cache(Maybe not memory cache, disk cache only) and when next time the same URL request came, we can retrive the response directlly from the cache to avoid this issue. And this can also solve the issue when reuse cell the progress state is cleared(The progress state is kept in private block or context).\nWe can add a new config in SDWebImageDownloader. But seems this is not a big issue now. Maybe in 5.x I'll try to add one :). In 5.x, we now have that private context which can be passed from top level module to the bottom and back called SDWebImageContext, so maybe it\u2019s possibe to implement this feature from the architecture.\nWe can flag a mutable value context, if the value set to disable cancel, when the cell reuse and trigger a cancel for download operation, the network will not be cancelled and continue. When download finish, process normal logic including writing to cache, but this time check that value again, if still cancelled, not trigger a final set image block and completion block. Next time you request the same URL, the cache will be hited and return a image immediatelly.\nHowever, because this change the pipeline of we process download, cache, and manage view category, the solution may be considered carefully. If I have some time I can try a naive approach and let other contributors review. I thin it\u2019s useful to keep this feature request continue.. Changing the task from the current DataTask to DownloadTask is far more complicated. Because we have progressive download, which need the actual partial bytes in memory to decode bitmap. However, DownloadTask is file path based API (only tell you the progress but not partial bytes data). So if we want to use resume data, it\u2019s hard (But still a possible way, if we separate normal download && progressive download)\nMy solution is to not change the download logic, keep using DataTask, but do a extra management for manager-view category-downloader. These 3 module need to communicate about whether current image request is un-cancellable. It\u2019s much simpler and directly aim to the target. But this naive approach need to consider how to solve the possible explosive un-cancellable task fill the network request queue.\nNote now 5.x using many design on framework customization, my approach can be not API breaking. So this one does not need to add 5.x milestone to delay our release date. Once we have time to talk this again, we can make this feature available in a minor version release.. @zhongwuzw What you say it\u2019s just DownloadTask. Apple already done for you. It\u2019s suspendable and resumable. No need to do it yourself.\nBut the reason why we choose DataTask contains many aspects (progressive download, HTTP Status code, etc). Changing this is also evil.\nMy idea is directly aim to solve this user\u2019s request: Don\u2019t cancel download when cell resuing. And whether to keep downloading is a image-request-level control (But not any config in the SDWebImaegDownloadConfig level. So it's not menas like that suspend when cell disappear, resume when cell appear for reuse, which is really a big thing to do. These two aspects are really different.. Yes. My idea is quite simple: Since what they want, can be translated into:\n\nwhen I trigger another sd_setImageWithURL:, don't cancel the previous download network request, instead, keep it downloading, but don't do a actual image refresh and completionBlock callback.\n\nSo I think this detailed feature request is more clear to think for a solution. User who want this behavior should provide a extra options like SDWebImageAvoidCancelCurrentLoad. Then, we can do our logic to solve this. Such as avoid trigger a cancel on SDWebImageCombinedOperation at the View Category entry point here (I think this logic is specified for cell-reusing use case, now we can let user control), and also need to remove the previous completionBlockassociated to previous URL (actually the SDWebImageDownloadToken object), etc. \nIn my naive idea, I think this feature should related to both View Category, Downloader, Manager 3 modules. However, previouslly in 4.x, we have no communication way between different module (we have only a SDWebImageOptions enum...Suck Objective-C). But now we can use context for communication. So it's why I think maybe this feature can be done with current framework architecture.. What is actually the previous requests would block the new request this one ? If you means the HTTPMaximumConnectionsPerHost, I remember you told that it's not a case we as a framework should solve or assume.\nIt just like you write your own code, using SDWebImageDownloader downloadImageWithURL:. I think people can have option to not cancel previous network request. You can not assume user always need to bind the UI and network request. For example, some page contains image and we want to cache it even if view poped, to speed up next enter. And we have public API sd_cancelCurrentImageLoad for user to manual cancel current loaded request. So it's not strange if they want to keep downloading even this cell is reused for another URL.\nAnd this is also compatible for our designed addHandlersForProgress:completed: solution. Which will re-use the one URL loading for multiple associated callbacks. If the cell reusing cause the actual call step like this:\n\nrequest URL1 -> Cell reuse (maybe scroll down) -> request URL2 -> Cell reuse (maybe scroll up) -> request URL1. \n\nEven if the URL1 is not finished, the last one can still enjoy the first submitted request without canceling and receive callback from that operation. And if URL1 is finished, the last one will hit our cache and immeditally get the image.. For user who still face this problem. Unset your exception breakpoints with that __cxa_throw and only keep objc_exception. This C++ exception will handlered by Image/IO framework and this will not cause any problem. Just a error log will print. \n. Thread-safe issue. Other queue call the aceess methods like -[SDWebImageDownloader setValue:forHTTPHeaderField:] when the current queue use the getter to access the HTTP headers. See #2204 . Fixed by #2204. Available in SD 4.3.0. NSProgress API is supported by #2172. This will be available in 4.3.0 version :) . Fixed via our refactory code to use ImageIO to keep image orientation to EXIF data. PR: #1991. Fixed via our refactory code to use ImageIO to keep image orientation to EXIF data. PR: #1991. @bassrock @twilly86 @mythodeia  If anyone who is still interested in using sd_setImageWithURL on the WKInterfaceImage, maybe it's time to see #2331. Which share the same codebase as UIKit's implementation, match the nearest behavior of all your iOS usage for SDWebImage framework :). #2331 is merged. This feature will be availble in 5.x as well as 4.4.0 :). @hccgk  See wiki: How-To-Use. You have multiple solutions to solve your use case depends on what you want.\nNetwork only ? Cache only ? Or both\nFor network download, using -[SDWebImageDownloader downloadImageWithURL:] method.\nFor cache only, using -[SDImageCache queryCacheOperationForKey:] method.\nFor both, using -[SDWebImageManager loadImageWithURL:] method.\nSynchronized or Asynchronized ?\nAll of the above are asynchronized method. It's recommaned to do so to avoid blocking main queue for your application.\nIf you're already in the background queue or have need for synchronized version. Try these:\nFor network download, there are no official API. However, you can use DispatchGroup API with group enter, group leave, wait your async block finished and return back to target queue(Mostly are main queue). You can also download the data by yourself, then using our decoder -[SDWebImageCoder decodedImageWithData:] method to decode NSData to UIImage.\nFor cache only, using -[SDImageCache imageFromCacheForKey:], imageFromMemoryCacheForKey:, imageFromDiskCacheForKey: method.\nFor both,  there are no official API. However, you can use DispatchGroup API to transfer the async version to sync version like the network download one.. @MrNiceMrGood This is not a bug for SDWebImage. This issue is related to animation, UIView.transition is a animator and will trigger the animation applied to the view itself. But however, you capture one image instance in the block (called image1) when it current showing on cell1. When you scroll down, cell1 is resued and should be reset for showing image2, but the animtor will still use image1 to render it. You should try to fix it by updating the image as well or stop animation.\nAnd the case that @drakon worried(a disk query and download query at the same time), this can not happend because we call sd_cancelImageLoadOperationWithKey before any request. So there should not have such a situation to let the download image replace your disk cache image.. For all the users who still subscribe on this:\nThis progressive-JPEG(compared to baseline-JPEG, these two image format is not actually the same) is supported via Image / IO framework. Previously (up to 4.1.0) it does not feed the JPEG data to decoder and just grab partial image. So this will not work for progressive-JPEG(In fact, this looks a bug). It was fixed in 4.1.2 and should work. You can try your progresive-JPEG(attension again, this is not the same format as baseline-JPEG) with SDWebImageProgressiveDownload option.\nAlso, if you decide to use third-part JPEG decoding library which may help you provide more suitable decoding, you can wait 4.2 version to release(which supports custom coder) and use this Concorde-Coder-Demo. This is a bug. We should keep the strong reference before that dispatch_main_async_safe so that the image instance may not dealloc.. #2178 Merged. Wait for 4.3.0 release :). Your Application ouf of memory. Because when creating CGBitmapContext, it need to malloc memory buffer with bytePerRow(pixelWidth * bytePerPixel, ARGB means 4bytes) * pixelHeight bytes in memory.\nIf the CGBitmapContext create failed, we will only return nil and do dothing, no crash there. If you prefetch multiple large images, it recommend to use a custom manager which disable 'shouldDecompressImage'.\nIn 5.x, we may also add 'shouldDecompressImage' into 'SDWebImageOptions' to control single image request behavior.. Use SDWebImageExternalCustomManager in View category, this can provide a SDWebImageMangaer instance, which retain a SDImageCache with your custom cache path.\nBut in 5.x. We will introduce a SDWebImageContext which may be useful for your proposal. You can specify more information instead of just a enum of SDWebImageOptions(This is acutally the suck of Objective-C, Swift can associate objects to enum)\nAnd we will introduce a Transformer for each View category, which maybe you can cache different transformed image to cache. Through current delegate in SDWebImageManager can achieve this. This can be used for further usage... In 5.x, you can use a id<SDWebImageTransformer> to transform the image to another image. We also provide some basic common transformer such as rounded corner, resize, rotation, CIFilter based transformer. See #2219 for more detail information. @damienrambout I read your use case. In 5.x, you can pass a id< SDWebImageTransformer> to cache query method. Which will apply the transformer on the image, and then cache the resized image to disk.\nAnd if you need context ? Here it is, you can now implement your cache system using SDWebImageCache protocol. There is a context arg which pass from the top-level API (UIView category, sd_setImageWithURL:), to bottom-level API. Like the football design. See #2278  :). I think this should be treated as a \"feature\". If you really want to ensure the completion block is called after the disk image cache saved, save the image manually using -[SDImageCache storeImage:forKey:completion:] after the completion block called.\nIf you think that you need the original image data and want to save the disk cache processing happend in a background queue without any extra cost, see that SDWebImageInternalSetImageGroupKey in 'UIView+WebCache'. This may solve something :). OHHTTPStubs Not works for NSCachedURLResponse. See their code here. It seems a bug and you should report issue for the author. They should also provide a correct cache algorithm according to HTTP standard using NSURLProtocolClient\nThis SDWebImageRefreshCached works for the real server response if your server response the correct headers.\nThe support header is actually implemented by Apple's URLSession. I've test these works:\n\nLast-Modified\nExpires\nETag\n\nYou can also run our demo, change the MasterViewController.m's code options into SDWebImageRefreshCached and check that the completion block is called once from the SDImageCache(Or set a breakpoint on the code to call completion block with nil). @johnboiles Current 4.x, SDImageCache contains a method called addReadOnlyCachePath:. To add the folder that SDImageCache will query secondlly after the original image cache path failed. However, your image's file name should be exact what SDImageCache using for cache key. It now using a MD5 of image cache key.\nIn 5.x, we introduce a more powerfull API additionalCachePathBlock. Which we pass the image cache key for you, you return a file path in the block, and we use that file path to query disk again. This can solve this issue.\nAnd, we also support custom memory cache & disk cache in #2282 . You can create your own disk cache implementation add add a preload feature for your own business.\nIf you still have issue about it, feel free to reopen it :). You can use SVGKit to create a custom decoder, and then you can add that coder to SDWebImageCodersManager. Then just start using, really easy.\nTo know how to build a custom coder, see Custom Coder. @SergeyDevUA @sashkasashkin  Since we have the coder plugins, it's not hard to write one by yourself. The protocol is not hard to implement.\nBut anyway, if you still prefer to use a out-of-box SVG support. I can spend little time to write one by using third-party library support.\nAt first, I suggest to use SVGKit to build the coder plugin because when I search github, it contains the most stars. However, after I run the demo project and found that this repo is really ancient. And it contains bug don't render alpha-channel SVG well. So I'm hesitated to use this framework.\nThen I found that there is one repo SwiftSVG with more than 1000 stars. I will try that. Note since this is s Swift framework, user who only use Objective-C code should use the Swift-Objective-C bridging way, this may increase their binary size because of Swift's runtime library.. UPDATE\nAfter I create another demo code, I found that SwiftSVG is buggy as well. When using the official demo code to render this SVG: https://upload.wikimedia.org/wikipedia/commons/1/14/Mahuri.svg, the application die and result a 100% CPU nearlly 10 seconds. I don't think it's good enough for production. \ud83d\ude25 \nSo let me try some other choice, or I can firstly show your demo framework using SVGKit. At least it will not die when loading complicated SVG files.. ### SVGKit\n@SergeyDevUA @sashkasashkin I create one simple wrapper framework SDWebImageSVGCoder using SVGKit, please have a try and provide some feedback. The Podfile may looks like this\npod 'SDWebImageSVGCoder`, :git => 'https://github.com/dreampiggy/SDWebImageSVGCoder.git', :branch => 'master'\npod 'SVGKit', :git => 'https://github.com/SVGKit/SVGKit.git', :branch => '2.x'\n\nSwiftSVG\nIf you still want to use SwiftSVG this library for actual SVG parsing, you can also try this one SDWebImageSVGCoder-Swift. But during my test, this one performance is really bad for some complicated SVG images. Use with cautious.. @SergeyDevUA @sashkasashkin Any feedback ?\nCurrently that SDWebImageSVGCoder only decode the SVG images to the bitmap image (fixed size), it's not a vector format to allow you to resize it into any size without losing the detail.\nIf you use the SVGKFastImageView or SVGKLayeredImageView to support vector images and resizing, maybe I can also update to provide a demo.\n\nI add support for SVGKImageView, yoiu can check the SDWebImageSVGCoder Usage and run the demo.\nobjectivec\nSVGKImageView *imageView; // can be either `SVGKLayeredImageView` or `SVGKFastImageView`\nimageView.contentMode = UIViewContentModeScaleAspectFill;\nimageView.sd_adjustContentMode = YES; // make `contentMode` works\n[imageView sd_setImageWithURL:url];. Using a semaphore to force transform a async function to sync one is a bad idea. And our most async function is called in main queue. Maybe a better solution is to create one sync version with the same feature. Can you create it by yourself ?. @bluesky0109 Oh, I forgot that GCD group. This will work because that this will not acutally block main queue. It will push current call queue(this case is main queue) to the GCD thread pool, and wait for that blocks in group to completed. After completed, it call dispatch_group_leave and GCD pop the call queue to go on execute. So this will not cause dead-lock like a lock or semaphore.\n\nThis function schedules a notification block to be submitted to the specified queue when all blocks associated with the dispatch group have completed. If the group is empty (no block objects are associated with the dispatch group), the notification block object is submitted immediately.. This API is available in v4.4.2. See https://github.com/rs/SDWebImage/releases/tag/4.4.2. @fabiosoft SDMemoryCache only store the UIImage instance in the memory, no any image data is kept in the memory. So you can not get any image data in the memory.\n\nIf you need to save the original image data in the memory , consider to use Custom Cache feature in the 5.x to write your own. You may need to implement the protocol method storeImage:imageData:cacheType:completion: to write image data to the memory cache as well.. Already available in 5.x via #2261\nSDWebImageCombinedOperation.downloadOperation.response.allHeaderFileds. Use necessary force cast during this chain propery call.. This code...Seems does not make any sence. I also found the original commit is ba71333\nIf the image is actually partial, which means the height of progressive image is smaller than the full image, we should draw it on a full height bitmap and keep the left space transparent. However, Image/IO already process this, the CGImageSourceCreateImageAtIndex will always contains transparent space for unfinished progressive image. So no need to draw again.\nOnly WebP coder need this because libwebp always return the partial height image, so we must draw it on a full height bitmap context.\nI'd suggest to remove this code in SDWebImageImageIOCoder and use the common SDWebImageAvoidDecodeImage logic to process in 5.x.. OK....I found the original blog about this strange code. See https://cocoaintheshell.whine.fr/2011/05/progressive-images-download-imageio/\nIt seems that on the earily version of Image/IO, the behavior does not match the current behavior. If the image is not PNG, it will return the actual partial height of total images(like what I talk above). So if you directlly use that image(which height is smaller than the actual height), you will see the stretch version of partial images depends on your imageView's content mode.\nHowever, In my test, iOS 8+ above Image/IO always return the full height images, with the transparent (Or white if you do not support alpha channel) space filling the unfinished height. It works well. See my test about this partialImageRef JPEG image during progressive decoding (lldb debug print):\n\nThe original full image is https://s3.amazonaws.com/fast-image-cache/demo-images/FICDDemoImage001.jpg . You can see the both partial image or full image height is the same 766.\nSo I think, maybe now we can remove that hack code. Because duplicated force decode may impact performance, and may cause the image distortion. We should avoid force decode same image multiple times.. @devshen @bpoplauschi I create the PR about this, see #2303 . Fix by #2303 . Sorry to bother, but I think maybe you misunderstand the SDWebImageDelayPlaceholder options? It means if the download failed, then to set your placeholder(the default behavior is to set the placeholder before any thing happed). And this change will break current behavior (previous version will keep your UIImageView.image until the download finished and not set it to nil).\nSDWebImageDelayPlaceholder will set the placeholder on UIView+WebCache.m:71, it will use the placeholder image you provided after the download finished. I read your description and think the reason here is that you use the reused placeholder image to use sd. When you called sd_setImageWithURL:placeholderImage, it's the placeholder to current cell, but after scrolling and reuse happend, the placeholder is not what you need. You should fix it by your logic such as reset your current placeholder in completion block. Or to think whether SDWebImageDelayPlaceholder is suitable to do what you expect.. @waynezxcv For the 2, you can now provide a DispatchGroup and manurally use dispatch_after and then call dispatch_leave to end the set image process. This may also delay your completion block time. But this is more suitable.\nFor the 1, currently we unify all the view category using UIView+WebCache. Including: UIImageView, UIButton, FLAnimatedImageView, SDAnimatedImageView(5.x), NSImageView, NSButton, MKAnnotationView. But this CALayer+WebCache will be seperated to another implementation which keep this not unite and may out of sync during refactory.\nIf you really want to do something, I suggest to create a abstract protocol such as SDWebImageSettable, which allow UIView or NSView and CALayer to adopt this protocol, then we just use the same implementation by abstracting. This is more adoptable. So currently this implementation need to be considered carefully.. This is actually solved by current implementation(SD 4.x) because SDWebImageDownloadOperation keep a callbacks array. Each callback will be called.\nWhen you call two equal urls at the sametime for -[SDWebImageManager loadImageWithURL:], this will behave as you want.\n\nSDWebImagePrefetcher -> SDWebImageManager -> Create Operation -> Add Callbacks\nSDWebImagePrefetcher -> SDWebImageManager -> Reused Operation from 1 -> Add Callbacks\nOperation finished -> 1 called -> 2 called -> Dealloc. Maybe in 4.x we have no ways to change (Since SDWebImageOptions is a Objective-C enum, which can only represent bool value :))\n\nIn 5.x, we can. See #2266 . In 5.x, you can use SDWebImageContextImageScaleFactor to specify the scale factor you desired. It works from View Category, Downloader, Cache and Coder. So this PR can be closed now. Wait for 5.0.0 release. :). @mingyue1991 This is interesting...I don't know why we add two MemoryWarning Notification, but it seems actually unnecessary.\nFor NSCache, maybe only Apple knows its behavior. In 5.x we decide to allow user to custom SDImageCache's memory cache and disk cache using two protocols. You can embed your faviorate cache like YYCache or some others to use that instead. Our SDImageCache will be a wrapper to call the memory cache and disk cache.. #2153 merged. @bpoplauschi Now we relay on NSURLSession to use NSURLCache and handle all this 304 not modify response. If this happen, NSURLSession will callback you a valid NSData from NSURLCache. So we can correctly handle that SDWebImageRefreshCached options from 4.2.x\nSo maybe this PR can be closed.. Anyway, thanks for your idea about the implementation of this feature. This can be reference by people who don't use NSURLSession (Such as build something from the CFNetwork level).\nSo we just close now. ;). OK...I found the reason. The thing Apple docs says is correct:\n\nIn iOS 8 and later, and macOS 10.10 and later, NSURLCache is thread safe.\nAlthough NSURLCache instance methods can safely be called from multiple execution contexts at the same time, be aware that methods like cachedResponseForRequest: and storeCachedResponse:forRequest: have an unavoidable race condition when attempting to read or write responses for the same request.\n\nI try to decompile the CFNetwork framework(NSURLCache class is placed in CFNetwork but not Foundation). But it looks seems safe except that the value stored in r14 from _CFURLCacheCopyResponseForRequest. If this address becomes a dangling pointer, then the crash will appear.\nIf you try to call this method in URLSessionDelegateQueue while downloading, you may face the race condition while URLSession internal use another queue (not your delegate queue, sadly) to save the cache. It will crash because that _internal address may be released.\nSo, the best way to avoid this crash it's NOT to call that two method during URLSessionDelegate method. We need another approach to obey current behavior. Or I think, we can just remove that code and let SDWebImageRefreshCached call twice completion block with image whenever it hit the cache or not because it's more logical (I don't know why we need this twice call, maybe NSURLConnection historical reason). This change will also keep HTTP cache control according to the Apple's doc [NSURLSession's cache policy]. \ud83e\udd14 . The decompiled pseudo code is here:\nc\nvoid * -[NSURLCache cachedResponseForRequest:](void * self, void * _cmd, void * arg2) {\n    rdx = arg2;\n    rdi = self;\n    if (rdx != 0x0) {\n            rax = rdi->_internal;\n            if (rax != 0x0) {\n                    r14 = _CFURLCacheCopyResponseForRequest(rax->_cacheRef, [rdx _CFURLRequest], rdx, *_OBJC_IVAR_$_NSURLCacheInternal._cacheRef);\n                    if (r14 != 0x0) {\n                            rbx = _CFCachedURLResponseGetNSCachedURLResponse(r14);\n                            if (rbx != 0x0) {\n                                    rax = [rbx retain]; // dead here!\n                                    [rax autorelease]; // here\n                                    [rbx _reestablishInternalCFCachedURLResponse:r14]; // and here\n                            }\n                            else {\n                                    rax = objc_getClass(\"NSCachedURLResponse\");\n                                    if (rax == 0x0) {\n                                            rax = _faultInFoundation(\"NSCachedURLResponse\");\n                                    }\n                                    rbx = [[[rax alloc] _initWithCFCachedURLResponse:r14] autorelease];\n                            }\n                            CFRelease(r14);\n                    }\n                    else {\n                            rbx = 0x0;\n                    }\n            }\n            else {\n                    rbx = 0x0;\n            }\n    }\n    else {\n            rbx = 0x0;\n            _NSLog(@\"called cachedResponseForRequest: with nil request\");\n    }\n    rax = rbx;\n    return rax;\n}\nc\nvoid -[NSCachedURLResponse _reestablishInternalCFCachedURLResponse:](void * self, void * _cmd, struct _CFCachedURLResponse * arg2) {\n    r14 = arg2;\n    rbx = self;\n    rax = rbx->_internal;\n    if ((rax != 0x0) && (rax->_cachedURLResponse == 0x0)) {\n            if (r14 != 0x0) {\n                    CFRetain(r14);\n                    rax = rbx->_internal;\n            }\n            rax->_cachedURLResponse = r14;\n    }\n    return;\n}. Well...Thing is not so simple. Some user point that there are still crash in cachedResponseForRequest: #2156 . So I try to figure out the actual reason. I find that this should be safe accroding to the decompiled code above. But the crash log seems only about iOS 9. So I guess this crash is the iOS version realated. I try to compare the CFNetwork decompiled code from iOS 9 & iOS 10 & iOS 11, the different show the reason:\niOS 11:\nc\nint _CFCachedURLResponseGetNSCachedURLResponse(int arg0) {\n    rdi = arg0;\n    if (rdi != 0x0) {\n            rbx = *(rdi + 0x10);\n            _os_nospin_lock_lock(rbx + 0x50); // Good, a lock with OSSpinLock\n            rbx = [[*(rbx + 0x60) retain] autorelease]; // grab the ivar and autorelease\n            (*__NtlmCreateClientResponse)(__NSConcreteStackBlock); // seems a NTLM HTTP Auth support ? but this is not related to this issue\n    }\n    else {\n            rbx = 0x0;\n    }\n    rax = rbx;\n    return rax;\n}\niOS 9 & iOS 10:\nc\nint _CFCachedURLResponseGetNSCachedURLResponse(int arg0) {\n    rdi = arg0;\n    rax = 0x0;\n    if (rdi != 0x0) {\n            rax = *(rdi + 0x10); // grab the ivar without lock\n            rax = *(rax + 0x60);\n    }\n    return rax;\n}\nIt seems that NSCachedURLResponse is created using CFCachedURLResponseRef , the collee code is nearly the same in both iOS version, use a global _CFURLCacheCopyResponseForRequest to grab the CFCachedURLResponse, and the crash stacktrace seems never show this, so it's safe.\nIn iOS 11, there is a global lock _os_nospin_lock_lock call, to ensure that the create process is thread-safe. However, in iOS 9 & 10, there contains nothing lock, just grab the ivar and return back to the callee. So if different queue call on a same NSURLCache instance with the same request(For example, call same URL on the shared URLCache), this ivar will be in a really danger situation because the retain and autorelease call is not protected by the lock.\nSo what can we do ? To say, our SDWebImageDownloader design can ensure the same URL will not be downloaded twice. But we can not to protect this situation at all. For example, if the user outside code call the cachedResponseForRequest: on shared cache with the same URL(may be not the direct call, load UIWebView page with the same URL may also trigger this). We can not do anything lock inside our framework to protect this.. This issue is not active for long time and may because of old version's issue. Feel free to reopen it if you're still interested in this issue.. Fixed in current SD 4.x release. You can check it here:\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloader.m#L197. This should be fixed in SD 4.0. In 4.0 we call the completion block in main thread.(https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L534)\nAnd also, it should be fixed in 3.8.2.(https://github.com/rs/SDWebImage/blob/3.8.2/SDWebImage/SDWebImageDownloaderOperation.m#L407)\nI checkout the 3.7.6 version and agree that there may be a race condition when you enter the block and prepare to call the block, but another thread cancel the task(which will call self.completedBlock = nil;) \nThe relative code is here: https://github.com/rs/SDWebImage/blob/3.7.6/SDWebImage/SDWebImageDownloaderOperation.m#L244\nThis fix will work on 3.7.6 version because the block is retrieved in advance and will not be affected by that self.completedBlock = nil;(block property attribute is copy). But since we released 3.7.6, maybe someone could checkout 3.7.6 tag and create an bug fix release?. Need we release a patch release based on 3.7.6 such as 3.7.7 ? To do this, we need a extra branch such as 3.7.x-compat checked out from 3.7.6 tag and merge the fix pull request(I create one here) to that branch and finally add an new 3.7.7 tag because 3.8.x drop the iOS 5-6 support. (Oh great the backwards compatibility \ud83d\ude1e ). ~~What about this this options SDWebImageScaleDownLargeImages, when set this on, will scale down large images (memory size < kDestImageSizeMB).~~\nI misunderstand this issue. LCR is a image type which is a special compressed format of PNG and JPEG images. It can be processed on UIKit level but not Image/IO level. So our create decoded image background will fail.\nWe already add that args now in SD 4.2, and you can provide a custom decoder for this which adopt the SDWebImageCoder protocol. Check the data file signature to detect that it's a LCR format, and then just directlly call +[UIImage imageWithData:] to return a UIImage instance instead. This may solve your issue.\nIn SD 5.0, you can provide different options for each image request but not based on the cache or downloader level(Which is a global option). So maybe that time you can just use the options for some specify images format like this. So this issue can be closed now. Feel free to reopen this if you still have issue.. In 5.x, you can use the prefetcher token to cancel a URL list of requests. See #2191  So this PR can be closed.. This procedure has been moved to SDWebImageDownloadOperation. Please update the commit or I can provide a fix for this.. This is nearly the same fix logic for canvas size issue and disposal method support as #1952\nFor disposal method support, we should create an CGContext before the iteration start. And then clear the canvas after the current frame draw completed if disposal method is background.\nYou implementation use UIGraphicsBeginImageContextWithOptions and UIRectFill this is UIKit specify and may be slower than Core Graphics call, we should use CGBitmapContextCreate and CGContextClearRect for better performance and macOS support. \nAdditionaly, there are two more issue in Animated WebP decoding, including duration per frame and Animated WebP loop count. You can check #1951 for more details.. @skyline75489 See #2256. Which we can introduce a abstract layer for current downloader and implement this. I've test that works and this does not need another serial of manager's API changes. But also provide a custom way to totally use a new downloader. Seems this PR is already done by SDWebImage 5.0 with SDWebImagePhotosPlugin. Which is a plugin to support Photos Library with the same API without any extra change from code.\nTo load photos library image, you can use PHAsset or localAssetIdentifier to query the image.\n```swift\n// Assign loader plugin\nSDWebImageManager.defaultImageLoader = SDWebImagePhotosLoader.shared\n// Load image\nlet asset: PHAsset\nlet photosUrl = NSURL.sd_URL(with: asset)\nimageView.sd_setImage(with: photosUrl) // This use shared manager to load\n// Or, you can create a stand-alone manager, to avoid impact shared manager\nlet manager = SDWebImageManager(cache: SDImageCache.shared, loader: SDWebImagePhotosLoader.shared)\nimageView.sd_setImage(with: photosUrl, placeholderImage: nil, context: [.customManager: manager])\n```\nAnyway, thanks for this original feature requrest :). Well, ImageIO will just grab some meta infomation about image but not decode or decompress if you just call CGImageSourceCreateWithData. Decoding and decompressing only happen when create an CGImageRef from CGImageSourceRef. So for many animated images like GIF which the decoding time is the bottleneck, you can create CGImageSourceRef at first and then decode it while rendering to increase performance. I found that FLAnimatedImageView use this method to get high performance. And ImageIO is also useful if you want to build an image encoder or convertor (like YYImageCoder).\nBut for this situation, I think there are no difference between +[UIImage imageWithData:] and CGImageSourceCreateWithData then call CGImageSourceCreateImageAtIndex. Actually +[UIImage imageWithData:] will do this automatically(this UIKit function will call [UIImage(UIImagePrivate) _initWithData:preserveScale:cache:] and CGImageSourceCreateWithData then CGImageSourceCreateImageAtIndex)\nIf you find this is really time-performance, you can add more infomation here and i'd like to check. And I think if you prefer high speed, use mmap instead of that CGImageSourceCreateWithData or CGImageSourceCreateWithURL is a great solution, but it's harder and will take more time to implement.. Well. After some experience and a little decompile check. I see the difference. In fact, there are no more magic between ImageIO two methods and [UIImage imageWithData].\n\nCGImageSourceCreateWithData:\nIf the NSData is created without any options. It will use fread to actully read the image data to memory and wait for decoding. (Attention, the decoding process is not happend only if you set UIImage to an UIImageView on the window).\nBut, if you specify NSDataReadingMappedIfSafe. It shuold behave nearly the same with CGImageSourceCreateWithURL\nAlso, If you specify kCGImageSourceShouldCache with YES(on today's 64bit iPhone device is also the default value) , then it should behave nearly the same like [UIImage imageWithData:].\nCGImageSourceCreateWithURL:  \nThis one use mmap to just mapping the image data. So the application used memory will not increased (Well. mmap happended by virtual memory :D). It's faster than fread, obviously.\n[UIImage imageWithData:]:  \nThis one will acutally call that CGImageSourceCreateWithData always with kCGImageSourceShouldCache and grab the CGImage instance to UIImage._imageRef ivar. It's a high level API with easier interface and automatically grab the EXIF to image orientation. If you pass the NSData with NSDataReadingMappedIfSafe. There is not big difference between CGImageSourceCreateWithURL.\nThis one also obey that not decoding only if you set on UIImageView.\n[UIImage imageNamed:]:\nThis one may be really common and all of us know it contains a global cache for that decoded bitmap. It will not be pruned only if memory warning. (This cache is not the same one as kCGImageSourceShouldCache). \nThis one will decode the image immediately even if you do not set it on a UIImageView.\nSo it is only recommaned to use for little icon and it may be the fastest one.\n. A little piece of pseudocode. Attention that Image I/O public C interface is just a wrapper to that IIOImage C++ implementation(Interestring...)\n\nCGImageSourceCreateWithData:\n```cpp\nIIOImageSource::IIOImageSource(__CFData const arg0, IIODictionary arg1) {\n    // some init code\n    IIOImageSource::setup(arg0);\n    if (r12 != 0x0) {\n            IIOImageSource::extractOptions(rbx);\n    }\n    (rbx + 0x10) = _CGImageReadCreateWithData((rbx + 0x8), r15, 0x1);\n    rax = _gIIODebugFlags;\n    if (((int8_t )(rax + 0x2) & 0x8) != 0x0) {\n            rax = _ImageIO_saveImageData(\"imageData\", r15);\n    }\n    return rax;\n}\nvoid _CGImageReadCreateWithData(int arg0, int arg1, int arg2) {\n    r15 = arg2;\n    r12 = arg1;\n    r14 = arg0;\n    if (r12 != 0x0) {\n            rbx = operator new(0x130);\n            IIOImageRead::IIOImageRead(rbx, r12, 0x1);\n            *(rbx + 0x10) = r14;\n            rdi = rbx;\n            CGImageReadRefCreateWith_ImageRead(rdi);\n    }\n    return;\n}\n```\nCGImageSourceCreateWithURL: \n``cpp\nIIOImageSource::IIOImageSource(__CFURL const* arg0, IIODictionary* arg1) {\n    // This method check many IO status and then call _CGImageReadCreateWithURL`\n    if (rbx != 0x0) {\n            (r12 + 0x10) = _CGImageReadCreateWithURL((r12 + 0x8), rbx, 0x1, r14 & 0xff);\n            CFRelease(rbx);\n    }\n    //...\n}\nint _CGImageReadCreateWithURL(int arg0, int arg1, int arg2, int arg3) {\n    // some check code\nloc_15b8b7:\n    var_440 = rbx;\n    var_431 = var_431 & r13;\n    if (var_431 != 0x0) {\n            rbx = _CFDataCreateWithMappedFile(r12, var_430, var_4D8); // This one\n            r13 = operator new(0x130);\n            rax = rbx;\n            if (rbx != 0x0) {\n                    rbx = rax;\n                    IIOImageRead::IIOImageRead(r13, rbx, 0x5, 0x1);\n                    CFRelease(rbx);\n            }\n    }\n    // some other code\n}\n``. So...For suggestion. Maybe we can just create NSData with thatNSDataReadingMappedIfSafeinstead of change these code(Since this is friendly to memory). A more easier and simple way. Also this is experimental and I think a option for user is better. Any idea ? . @bpoplauschi It seems have the same performance behavior. We can make a test with different NSDataReadOptions later. But for now I think we can keep the PR here. . Well...From my test, thatNSDataReadOptionsoptions can enhance a little performance enhancement. And there are still difference between this with Image/IO'sCGImageSourceCreateWithURL. But since Image/IO can not support WebP or any other image format with the custom coder. Maybe we can not simply replace current implementation besed onNSData` + Decoder way.\nHowever, in 5.x I introduce the custom cache in #2195 , which allow user to provide their own implementation of SDDiskCache protocol. I think we can adopt this feature into that custom cache and provide a optional way to use. Since custom cache does not cause API breaking. I'll mark this into future tag.\nAnd after 5.0 release, I can help to integrate this optional Image/IO disk cache (Maybe at that time, we can create a SDImageIODiskCache : NSObject <SDDiskCache> with the custom cache solution. ;). @bpoplauschi Yes. In SDWebImage 5.x, you can totally customize you image cache, by implement the protocol SDImageCache.\nFor example, you can implement the queryImageForKey:options:context:completion: method, and use Image/IO's source API CGImageSourceCreateWithURL, instead of using our built-in logic method  SDImageCacheDecodeImageData.\nAnd, from my previous comment and disassemble result, CGImageSourceCreateWithURL does nothing than [NSData dataWithContentsOfURL:url options:NSDataReadingMappedIfSafe error:nil] -> CGImageSourceCreateWithData in current iOS implementation. Because Image/IO source need to get the original image data to parse the metadata (image resolution, bitmap info, etc). So I recommend to use SDImageCacheConfig.diskReadingOptions for the same effect.\nBu anyway, you can choose any of them, I guess they are more proper way, instead of change the  implemenetation currently.. Merged with #2043 . from SD 4.2, we provide custom coder plugin. The SDWebGIFCoder offer the previous version's GIF decoding using [UIImage animatedImageWithDuration:]. But it's not enable by default. To make FL work without extra cost.\nIf you nees both UIImageView or FL works for GIF, you can add that coder and that may work.... Could you please try the lastest version ? Could you provide the leak information but not allocation information. This screenshot does not show any useful information. (memery usage != memory leak)\nOr if you use custom downloader instance, manually call invalidateAndCancel on the URLSession instance if you do not need it.. This issue is not active for long time and may because of old version's issue. Feel free to reopen it if you're still interested in this issue.. Merged with #2043. If you are always using a fixed size UIImageView, and use any scaled contentMode, whatever scale is OK because you always scale :)\nBut, if you use a UIImage and call [UIView sizeToFit]. Then issue come.\nFor example, if your device scale is @2x. There is a image(100x100px). If you specify it's a @1x image. Then sizeToFit will cause imageView to 100x100pt.\nBut if you specify it's a @2x image. Then sizeToFit will cause imageView size to 50x50pt.\nThere are also many other impact, such as Core Animation. If you specify the wrong scale, the animation will looks strange. So we should better try to get the original image scale from URL or file path name :)\n  . Maybe in 4.x we have no ways to change (Since SDWebImageOptions is a Objective-C enum, which can only represent bool value :))\nIn 5.x, we can. See #2266 . In 5.x, you can use SDWebImageContextImageScaleFactor to specify the scale factor you desired. It works from View Category, Downloader, Cache and Coder. So this PR can be closed now. Wait for 5.0.0 release. :). This is because SD 4.0 put the decode task to FLAnimatedImageView, but it only need imageData as NSData but not UIImage instance, so we drop that entire GIF decoding and only grab the first frame to create UIImage for compatibility. So when you store image with GIF and then retrieve from cache, the UIImage will be static GIF because we only decode first frame, but the imageData is raw GIF data.. This behavior is now (from 4.2) controlled by yourself through your custom coder configuration. If you add SDWebImageGIFCoder, then the image is a UIAnimatedImage which keep all the frames in memory and can be cached  (However, keep attention to the memory usage because ALL frames are in memory). If you do not add that, just the first frame is cached.\nIn SD 5.x, you can use animated GIF through a SDAnimatedImage class and SDAnimatedImageView. And you can also cache it in memory for safe without huge memory consuming for big GIF.. This sync version API called -[SDImageCache diskImageDataExistsWithKey:] will come back in 5.0 :) Maybe you can use that instead for check.\nCurrently, you can write a category to support this. Or if you only care about the image but not a bool of whether it exists, you can use the sync version API -[SDImageCache imageFromCacheForKey:] to grab the image and check it.\n```objective-c\n@implementation SDImageCache (SDAdapter)\n\n\n(BOOL)sda_diskImageExistsWithKey:(NSString *)key\n{\n    BOOL exists = NO;\n// this is an exception to access the filemanager on another queue than ioQueue, but we are using the shared instance\n// from apple docs on NSFileManager: The methods of the shared NSFileManager object can be called from multiple threads safely.\nexists = [[NSFileManager defaultManager] fileExistsAtPath:[self defaultCachePathForKey:key]];\n// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name\n// checking the key with and without the extension\nif (!exists) {\n    exists = [[NSFileManager defaultManager] fileExistsAtPath:[[self defaultCachePathForKey:key] stringByDeletingPathExtension]];\n}\nreturn exists;\n}\n\n\n@end\n``. Do you consider usingshouldDownloadImageForURL:delegate method inSDWebImageManager` currentlly ?\nOr if not, we can simply add one option to SDWebImageOptions. See #2186. #2186 Merged. Availble on SD 4.3.0. @kokuyoku82 Acutally I agree with you. If you use podspec and run pod install Cocoapods will set  that PODS_ROOT. But is there any difference between use SRCROOT and PODS_ROOT in your case?. @kokuyoku82 This will not cause any issue. Since SD use submodule to manage FLAnimatedImage dependency. You can always install the this two dependency at the sametime in your Podfile. See this demo project: AnimatedWebPDemo\n\nMaybe it's because SD do not use Cocoapods to maintain itself. It just use submodule here. So we can keep SRCROOT. . Duplicated for #1301. So now we close it. If you find the solution in #1301 not suitable for this issue, feel free to reopen this and maybe we can try to add a new SDWebImageOption for this use case(This use case looks really rare).. This may be related to #1968 and have been fixed with #1978 . If you'd like, you can try to cherry pick that commit or just fork and modify your source files in SDWebImageDownloaderOperation.m:377 on SD4.0.\nFrom:\nobjectivec\nCFRelease(imageSource);\nTo:\nobjectivec\nif (imageSource) {\n    CFRelease(imageSource);\n}. Crash Log: (SDWebImge 4.1)\n```\nFatal Exception: NSInvalidArgumentException\n*** -[__NSPlaceholderArray initWithObjects:count:]: attempt to insert nil object from objects[0]\n+[UIImage(GIF) sd_animatedGIFWithData:]\n0  CoreFoundation                 0x1882c2fe0 exceptionPreprocess\n1  libobjc.A.dylib                0x186d24538 objc_exception_throw\n2  CoreFoundation                 0x1881a42d8 -[__NSPlaceholderArray initWithObjects:count:]\n3  CoreFoundation                 0x1881b0030 +[NSArray arrayWithObjects:count:]\n4  News                           0x1012e90dc +[UIImage(GIF) sd_animatedGIFWithData:] (UIImage+GIF.m:48)\n5  News                           0x1012e9210 +[UIImage(MultiFormat) sd_imageWithData:] (UIImage+MultiFormat.m:28)\n6  News                           0x1012e3f50 -[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:] (SDWebImageDownloaderOperation.m:428)\n7  News                           0x1012e1704 -[SDWebImageDownloader URLSession:task:didCompleteWithError:] (SDWebImageDownloader.m:324)\n8  CFNetwork                      0x188a9bad4 __51-[NSURLSession delegate_task:didCompleteWithError:]_block_invoke.185\n9  Foundation                     0x188d92854 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK\n10 Foundation                     0x188cd77b0 -[NSBlockOperation main]\n11 Foundation                     0x188cc7b68 -[__NSOperationInternal _start:]\n12 Foundation                     0x188d94bf0 __NSOQSchedule_f\n13 libdispatch.dylib              0x18717a9a0 _dispatch_client_callout\n14 libdispatch.dylib              0x187188ad4 _dispatch_queue_serial_drain\n15 libdispatch.dylib              0x18717e2cc _dispatch_queue_invoke\n16 libdispatch.dylib              0x18718aa50 _dispatch_root_queue_drain\n17 libdispatch.dylib              0x18718a7d0 _dispatch_worker_thread3\n18 libsystem_pthread.dylib        0x187383100 _pthread_wqthread\n19 libsystem_pthread.dylib        0x187382cac start_wqthread\n``. Fixed via #1991. Wait for iOS11 SDK final release and to check the usage of HEIF image format. After that we can consider this feature. \ud83d\ude2a . Interestring,CGBitmapContextCreateuse the first param to provide the output bitmap vector if you want low-level bitmap operation(such as low-level blur effect, transform, encoding). But here I find thatdestBitmapDatais not been used on later procedure. So maybe it's useless and this will cause memory leak here because you only callCGContextRelease(destContext)to free CGContext but forget to callfree(destBitmapData)` to free bitmap before the total function return.\nIf you do not need low-level bitmap operation, just do what Apple Doc says: Pass NULL if you want this function to allocate memory for the bitmap. This frees you from managing your own memory, which reduces memory leak issues. \nThe code may look like this:\n```objectivec\ndestContext = CGBitmapContextCreate(NULL,\n                                    destResolution.width,\n                                    destResolution.height,\n                                    kBitsPerComponent,\n                                    bytesPerRow,\n                                    colorspaceRef,\n                                    kCGBitmapByteOrderDefault|kCGImageAlphaNoneSkipLast);\nif (!destContext) {\n    return image;\n}\n```. \n\n\nI try the Demo (tweak the DetailViewController.m and use this test code), when using Instruments, it show that there is exactly memory leak(for this TestImageLarge.jpg, it will leak nearly 50MB memory each time)\nobjectivec\n- (void)configureView\n{\n    if (self.imageURL) {\n        NSString * testImagePath = @\"/tmp/TestImageLarge.jpg\"; // I put that image from Test project to my temp folder\n        UIImage *image = [UIImage imageWithContentsOfFile:testImagePath];\n        UIImage *decodedImage = [UIImage decodedAndScaledDownImageWithImage:image];\n        self.imageView.image = decodedImage;\n    }\n}. @bpoplauschi SD 4.1.1 now use that NSData to compare the response data with cache data, If the data is same it will never call twice. Previously we use a little hack code to detect whether the image data is from NSURLCache or download from the server, but it's not really accurate. I think this one is better.. @SimonCY Sorry. This is a bug introduced during SD4.1 and will be fixed in SD4.1.1. Maybe we can go further ? I recently refactory the entire decoding process in SDWebImage. I provide an Protocol to let user to provide any decode method. You can set it on SDImageCache or SDWebImageDownloader.\nFor your usage, you can write your decoder like these.\n```objectivec\n@interface DecryptCoder : NSObject \n@end\n@implementation DecryptCoder\n\n(UIImage )decompressedImageWithImage:(UIImage )image data:(NSData __autoreleasing  _Nullable )data format:(SDImageFormat)format shouldScaleDown:(BOOL)shouldScaleDown {\n    data = [[SomeEntryptData alloc] init];\n    UIImage newImage = someDecompressMethod(image);\n    return newImage;\n}\n\n@end\n```\nThen you can set it to SDWebImage to use it. For global use(which will effect all the [UIImageView sd_setImageWithURL:]), you can just set it on the shared instance.\nobjectivec\n[[SDImageCache sharedCache] setImageCoder:[[DecryptCoder alloc] init]];\n[[SDWebImageDownloader sharedDownloader] setImageCoder:[[DecryptCoder alloc] init]];\nYou can view #1991 and check the code to discuss.. Which of Swift version your project build? I tried Swift 3 with SDWebImage/GIF and it works well.. So....Actually I think current design is correct. Most of the property using in View Category is tied to UIView. So if your custom instance even is not a UIView subclass(Such as a NSObject or whatever something), most logic in UIView+WebCache.m for this instance is really useless. (You don't need setNeedsLayout, image indicator, image transition and many other feature we add).\nSo, why don't use just use -[SDWebImageManager loadImageWithURL:] ? Our UIView+WebCache acutally is just call this in the implementation with some custom logic. So I think for your case, you can build from this level. And in 5.x we also provide the same context arg acrossing the View Category to Manager. You can build same complicated logic in yours.. @piercifani The commit 2f892f9 has already in the master branch. So when the 4.1.1 release, it will be right there.. @VidhyaJain Please use 4.1.2 patch version instead of 4.1.1. We forgot a bug in 4.1.1 and fixed in 4.1.2(only contains fix and no extra feature changes). Because your modifiedImageKey isn't follow the scale format. See SDScaledImageForKey. You should have either @2x. or @3x. to preserve the scale.\nWe do not reserve the scale factor to disk data, just use the key to determine it, so you need to ensure your provided key also follow this design. This may be changed in the future by redesign the implementation.\nAnd also, I don't know whether SD 3.x has some extra logic for this. You can also try to upgrade to SD 4.x and have a check. Maybe in 4.x we have no ways to change (Since SDWebImageOptions is a Objective-C enum, which can only represent bool value :))\nIn 5.x, we can. See #2266 . In 5.x, you can use SDWebImageContextImageScaleFactor to specify the scale factor you desired. It works from View Category, Downloader, Cache and Coder. So this PR can be closed now. Wait for 5.0.0 release. :). If you prefer to solve it , try set config.shouldDecompressImages to sharedImageCache\nobjectivec\n[SDImageCache sharedImageCache].config.shouldDecompressImages = NO;\nI found an related code in SDImageCache.m:350 and I will check it. I think our WebP decoder is already decompressed(decoded) and is usless to decompress again. After that I can go back and to response for this issue.\nobjectivec\nif (self.config.shouldDecompressImages) {\n    image = [UIImage decodedImageWithImage:image];\n}. @Whirlwind Maybe this is what you prefer? #1983 . Could you please provide more information about this issue. Since you does not fllow the template(including SD ver, Xcode ver, Platform ver, etc).\nI checked the SD master branch code, there are no obvious leak. (That colorspaceRef is retrived by CGImage or created with CFAutorelease). If you provide more details, we can find the reason here.. But actually FLAnimatedImage podspec set deployment_target \n to 6.0: https://github.com/Flipboard/FLAnimatedImage/blob/master/FLAnimatedImage.podspec#L20\nAnd I also tried a project with deployment target 7.0 and intergrated well. If you still have issue, maybe you should try create an pull request to FLAnimatedImage ? . @walkline During 5.x refactor. I think this PR should be more polished. I change your [NSFileManager createFileAtPath:contents:attributes] to -[NSData writeToFile:options:error:]. This has two reasons:\n\nNSFileManager's createFileAtPath: is used just for old code compatibility and will not trigger any delegate methods, so it's useless for custom NSFileManager at all.\nAnd also, NSFileManager's createFileAtPath: can only grab underlying POSIX errno, but NSData can grab errors defined in NSCocoaErrorDomain, which is better for user to check.\n\nActually, I dislike the way to just through out POSIX errno to user. It's too underlying and we should use Cocoa error to provide more useful information(Actually, NSData's write error also provide a underlying POSIX error in its userInfo).\nAnd I also change some ways such as that extra IO queue check. I seperate the public API and internal API, so internal API will dispatch on the IO queue and also all public API should be IO-safe.\n\nI add this in disk cache refactory branch #2148. And also fix the test to mock IO failed.\n  . @walkline  Now, after some consideration. Could you please provide your use case why you need to handler the error for storing image ?\nI think in most cases, we do not need to care about error on a top level image cache. If you need to handler this, you shuold try to use a FILE-IO based API but not image.\nAfter some search and compare to all the same project like use using cache. Kingfisher's Cache and YYWebImage's Cache. They all avoid the error information.\nI guess that the question maybe that storeImage is based on memory cache AND disk cache these two process. So what of this error means ? The memory cache error(Out of memory) ? Or disk cache error(IO failed) ? This may cause more problem.\nAnd also, because this change is a break-API change. So maybe we should considerate the pain and gain. I don't get the actual advantage from this. If you need to check whether the disk image store success, use the sync version API - (BOOL)diskImageDataExistsWithKey:(nullable NSString *)key to grab. If you need to check whether the memory image store success, use the sync version API - (nullable UIImage *)imageFromMemoryCacheForKey:(nullable NSString *)key instead.\nAs your previously changes that you wrap a POSIX errno. So this means even if you want to get the detail error code in some cases, You can just grab the POSIX errno directly. And for file/directory related error like remove directory failed, your custom NSFileManager's delegate methods like fileManager:shouldProceedAfterError:removingItemAtURL: will be called and you can get the error information. So now I can't see the real benefit from this change. \nMaybe we should revert that change for the NSError* and only keep the custom file manager part. (This after refactory will be stored in SDImageCacheConfig instead of init method, because it's more flexible than just add args again and again)\n. And recently, I decide to refacotor the current SDImageCache by seperate two protocol SDMemoryCache and SDDiskCache. This can allow some advanced user like you to provide a total custom class for memory cache and disk cache. You can use whatever you like such as YYCache to provide more custom and complex feature and maybe higher performance.\nHowever, your change to allow a NSError* for each API make thing hard and not easy to integrate custom memory cache or disk cache. The protocol without any error is simple and easy to maintain. But if you put error back, the horror will occur.\nMemory Cache Protocol:\n```objective-c\n@protocol SDMemoryCache \n/**\n Returns the value associated with a given key.\n@param key An object identifying the value. If nil, just return nil.\n @return The value associated with key, or nil if no value is associated with key.\n */\n- (nullable id)objectForKey:(id)key;\n/**\n Sets the value of the specified key in the cache (0 cost).\n@param object The object to be stored in the cache. If nil, it calls removeObjectForKey:.\n @param key    The key with which to associate the value. If nil, this method has no effect.\n @discussion Unlike an NSMutableDictionary object, a cache does not copy the key\n objects that are put into it.\n */\n- (void)setObject:(nullable id)object forKey:(id)key;\n/**\n Sets the value of the specified key in the cache, and associates the key-value\n pair with the specified cost.\n@param object The object to store in the cache. If nil, it calls removeObjectForKey.\n @param key    The key with which to associate the value. If nil, this method has no effect.\n @param cost   The cost with which to associate the key-value pair.\n @discussion Unlike an NSMutableDictionary object, a cache does not copy the key\n objects that are put into it.\n */\n- (void)setObject:(nullable id)object forKey:(id)key cost:(NSUInteger)cost;\n/**\n Removes the value of the specified key in the cache.\n@param key The key identifying the value to be removed. If nil, this method has no effect.\n */\n- (void)removeObjectForKey:(id)key;\n/*\n Empties the cache immediately.\n /\n- (void)removeAllObjects;\n/**\n The maximum number of objects the cache should hold.\n@discussion The default value is NSUIntegerMax, which means no limit.\n This is not a strict limit\u2014if the cache goes over the limit, some objects in the\n cache could be evicted later in backgound thread.\n */\n- (NSUInteger)countLimit;\n- (void)setCountLimit:(NSUInteger)countLimit;\n/**\n The maximum total cost that the cache can hold before it starts evicting objects.\n@discussion The default value is NSUIntegerMax, which means no limit.\n This is not a strict limit\u2014if the cache goes over the limit, some objects in the\n cache could be evicted later in backgound thread.\n */\n- (NSUInteger)costLimit;\n- (void)setCostLimit:(NSUInteger)costLimit;\n@end\n```. Disk Cache Protocol:\n```objective-c\n@protocol SDDiskCache \n/**\n Create a new cache based on the specified path.\n@param cachePath Full path of a directory in which the cache will write data.\n Once initialized you should not read and write to this directory.\n@return A new cache object, or nil if an error occurs.\n@warning If the cache instance for the specified path already exists in memory,\n this method will return it directly, instead of creating a new instance.\n /\n- (nullable instancetype)initWithCachePath:(NSString )cachePath;\n/**\n Returns a boolean value that indicates whether a given key is in cache.\n This method may blocks the calling thread until file read finished.\n@param key A string identifying the data. If nil, just return NO.\n @return Whether the key is in cache.\n /\n- (BOOL)containsDataForKey:(NSString )key;\n/**\n Returns the data associated with a given key.\n This method may blocks the calling thread until file read finished.\n@param key A string identifying the data. If nil, just return nil.\n @return The value associated with key, or nil if no value is associated with key.\n /\n- (nullable NSData )dataForKey:(NSString *)key;\n/**\n Sets the value of the specified key in the cache.\n This method may blocks the calling thread until file write finished.\n@param data The data to be stored in the cache.\n @param key    The key with which to associate the value. If nil, this method has no effect.\n /\n- (void)setData:(nullable NSData )data forKey:(NSString *)key;\n/**\n Removes the value of the specified key in the cache.\n This method may blocks the calling thread until file delete finished.\n@param key The key identifying the value to be removed. If nil, this method has no effect.\n /\n- (void)removeDataForKey:(NSString )key;\n/*\n Empties the cache.\n This method may blocks the calling thread until file delete finished.\n /\n- (void)removeAllData;\n/**\n The cache path for key\n@param key A string identifying the value\n @return The cache path for key. Or nil if the key can not associate to a path\n /\n- (nullable NSString )cachePathForKey:(NSString *)key;\n/**\n Returns the number of data in this cache.\n This method may blocks the calling thread until file read finished.\n@return The total data count.\n */\n- (NSInteger)totalCount;\n/**\n Returns the total size (in bytes) of data in this cache.\n This method may blocks the calling thread until file read finished.\n@return The total data size in bytes.\n */\n- (NSInteger)totalSize;\n/**\n The maximum expiry time of data in cache.\n@discussion The default value is DBL_MAX, which means no limit.\n This is not a strict limit \u2014 if data goes over the limit, the data could\n be evicted later in background queue.\n */\n- (NSTimeInterval)ageLimit;\n- (void)setAgeLimit:(NSTimeInterval)ageLimit;\n/**\n The maximum number of data the cache should hold.\n@discussion The default value is NSUIntegerMax, which means no limit.\n This is not a strict limit\u2014if the cache goes over the limit, some data in the\n cache could be evicted later in backgound thread.\n */\n- (NSUInteger)countLimit;\n- (void)setCountLimit:(NSUInteger)countLimit;\n/**\n The maximum total size that the cache can hold before it starts evicting data.\n@discussion The default value is NSUIntegerMax, which means no limit.\n This is not a strict limit \u2014 if the cache goes over the limit, some data in the\n cache could be evicted later in background queue.\n */\n- (NSUInteger)sizeLimit;\n- (void)setSizeLimit:(NSUInteger)sizeLimit;\n@optional\n/**\n Custom file manager. Use this file manager instead of default file manager instead.\n@note If your custom disk cache does not use NSFileManager such as POSIX API. Ignore this\n@param fileManager fileManager\n /\n- (void)setFileManager:(NSFileManager )fileManager;\n@end\n```. #1987 Refactor code here, also change that [self.imageData copy] to ensure immutable object\n\nMoved to #2040. @yutiandesan @piercifani Just use SDWebImageOptions without SDWebImageProgressiveDownload (also, it's not set unless you provide). Fixed via #2040.\nBecause we need to release 4.1.1 soon, that WebP progressive download feature will be available in 4.2.0 since it's not really urgent for most people.. I create an PR for your commit (Since you create an PR to your own fork but not SD's repo \ud83d\ude05 )\n2047. GIF does not support EXIF orientation. So this is a little strange (Since it should always show orientationUp)\nYou can try to provide a demo or to post a issue to FLAnimatedImage proejct. Please try our latest SDWebImage 4.x version and to see if this issue still occur.. This issue is not active for long time and may because of old version's issue. Feel free to reopen it if you're still interested in this issue.. @bpoplauschi  @welsonxue  Can be considered. \nUPDATE:\nI changed my mind. This should be considered to be set for individual image request, instead of all global controls. Our application most images are using foce decode feature to keep frame rate smooth. However, there may be some rare case we should disable this for some huge images to avoid memory issue. We have to create another SDWebImageDownloader instance keeping the options for this. It's too wired.\nSince most of user may choose to use the force decode feature, I think make this as a option mask in OK. Put that into context arg which keep the both request-level and cache/downloader-level is a little misunderstanding and too complicated. It's no need to provide a default value, since if user really need something to get global control, they can use their own category such as tt_setImageWithURL:xxx, which can just append or delete that options mask to get global control. But however, put the shouldDecompressImages property into SDImageCache or SDWebImageDownloader level will make this impossible to implement this design.\nI create a PR for this. See #2283. Since this is a API-break change, should be marked in 5.x\n\nBut it's not so easy to move this options into SDWebImageOptions. Because Objective-C bitcast mask can only represent a BOOL value, there is no way to specify that use decompress only for this request, others disable because BOOL can't contains a default value.\nSo If we change to use SDWebImageOptions, we will have to remove that property in cache & downloader as well. (Because we can not have a default value as above). This change will break current behavior and many users should change their code to always specify a extra options in sd_setImageWithURL:. (Quite few people keep decompressImages enabled all the time in their application)\nIf we put a BOOL value in the context arguments in SD 5.x. Does this acceptable ? Like this:\nobjective-c\nFOUNDATION_EXPORT SDWebImageContextOption _Nonnull const SDWebImageContextDecompressImages;\nThen you need to specify a NSNumber value, if you do not specify, use downloader or cache's built-in property instead. Which keep the current behavior and allow you to override the value for individual image request.. @welsonxue Hi. This feature has been merged in 5.x.\nYou can now use SDWebImageAvoidDecodeImage to specify that current image request should not use the force decode feature. There is no central control property any more.\nHowever, if you need this, you can do this by creating your own category instead.\n```objective-c\n@interface UIImageView (MyCategory)\n\n(void)my_setImageWithURL:(NSURL )url placeholderImage:(UIImage )image options:(SDWebImageOptions)options;\n\n@end\n@implementation UIImageView (MyCategory)\n\n(void)my_setImageWithURL:(NSURL )url placeholderImage:(UIImage )image options:(SDWebImageOptions)options {\n    if (global_disable_force_decode) {\n        options |= SDWebImageAvoidDecodeImage;\n    }\n    [self sd_setImageWithURL:url placeholderImage:image options:options];\n}\n\n@end\n``. Fixed in #1952. From the stack trace, it seems that yourUIResponderinstance hold an associate object ofNSMutableDictionary. And it also hold an block withSDWebImageManagerinstance or method in. And I think maybe you use self allocedSDWebImageManager` but not the shared instance.\nAlso, looks at \n```\n0  libobjc.A.dylib                0x1888cd7f4 objc_object::release() + 8\n1  libobjc.A.dylib                0x1888aef00 object_cxxDestructFromClass(objc_object, objc_class) + 148\n2  libobjc.A.dylib                0x1888bc334 objc_destructInstance + 92\n3  libobjc.A.dylib                0x1888bc398 object_dispose + 28\n4  [APPNAME]                0x100172e04 __destroy_helper_block_.99 (SDWebImageManager.m)\n5  libsystem_blocks.dylib         0x188d5ba68 _Block_release + 160\n```\nThis may be some issue relate inside that block hold by NSMutableDictionary. While destroying the block, it called SDWebImageManager to destroy it block(maybe here is cancelBlock property).But inside cancel block property, it capture your some instance have been released during that procedure(Maybe the NSMutableDictionary). So finnaly this will get an released object to receive dealloc message and meet runtime objc_object::release() assert and it will called abort() to kill your app.\nSo, maybe this issue is not related to SD inner. Please check your application code and find the whether there is an retain cycle or block-retain cycle inside your application. Or maybe you should provide more details. Thanks.. Maybe this crash is related to the cancel method in SDWebImageManager. I found the comments here:\n// TODO: this is a temporary fix to #809.\n        // Until we can figure the exact cause of the crash, going with the ivar instead of the setter\n//        self.cancelBlock = nil;\nI think it's a thread-safe problem when two threads call cancel and setCancelBlock:. If you override the property with custom getter/setter, you should take care of that nonatomic behavior. Previously the hack fix code is not always safe. A better and easy solution is to add a lock since this is just a property but not some mutable collection.. I provide a potential fix. Please look at #2048. . Any reason that you use the manually alloc SDWebImageDownloader but not the shared instance?\nIf you really really want to use the self alloc SDWebImageDownloader, currently you can only use KVC or runtime method to get the session property(:D). maybe we need a new method to just call invalidateAndCancel to break retain cycle.. @dourgulf Currently we do not have an public API to invalid the SDWebImageDownloader.session property. So currently you need KVC or runtime hack to get that property and call the invalidate function.\nobjectivec\n    SDWebImageDownloader *downloader = [[SDWebImageDownloader alloc] init];\n    NSURLSession *session = [downloader valueForKey:@\"session\"];\n    if ([session isKindOfClass:[NSURLSession class]]) {\n        [session invalidateAndCancel];\n    }\nIf this propose is adopted by some users, we can add an API such as - (void)invalidateSessionCancelingTasks:(BOOL)cancelPendingTasks. And it's welcomed to provide an pull request related to this feature.. Well...A long time passed but seems no one create a PR. So I create one \ud83d\ude02 #2116 . #2116 Merged. So you can use that invalidateSessionAndCancel: API to invalidate session and break retain cycle.. By reading the decoder from YYImage and SDWebImage , I found that for single frame animated WebP, the libwebp's WebPBitstreamFeatures.height and width is the images' actual size. But for multiple frame images, this will return the current frame canvas size(but not image size, which can be smaller than total image size). This will make the final UIImage array contains different size, cause UIImageView render bug(The UIKit doc specify \"All images included in the animated image should share the same size and scale.\"). We should useWebPDemuxGetI to get the actual image size.\nLooks at this animated webp image (actual size is 100x100), but the rendered animated images array (via none blend mode) used for +[UIImage animatedImageWithImages:duration:] show the wrong size.\n. The YYImageCoder code reference :YYImage\nThis image size is correct:\n. There is an simple fix(which first create UIImage through CGImageCreate from WebPData. Then draw this UIImage to an new CGBitmapContext with actual size(not just the canvas size).\n\nThe simple fix fork is here: SDWebImage\nConsider a higher performance(because create CGBitmapContext waste extra time), maybe we can modify the RGBA vector transform to do these. I found that YYImage use the vImage_Buffer and add an vImage_CGAffineTransform to do this vector transform(refer here). I will try this solution for performance later.. Also, I found that the animated WebP dipose method(see here) is not support, currently is assume that all frames use the background disposal.\nBy sharing a blend canvas while decoding multiple frame animated webp image, we could do disposal and blend correctly(not relay on that last image).. PR is here: #1952 . Because +[UIImage animatedImageWithImages:duration:] just use the average duration for each frame, which is not the animated WebP standard. Animated WebP can has different duration per frame. Therefore, we should divide the total duration and add image item multiple times to solve this issue. The code like this:\nobjective-c\nNSArray<UIImage *> *)images;\nNSUInteger count = images.count;\nint durations[count];\nint const gcd = gcdArray(count, durations);\nNSMutableArray<UIImage *> *animatedImages = [NSMutableArray arrayWithCapacity:count];\n[images enumerateObjectsUsingBlock:^(UIImage * _Nonnull image, NSUInteger idx, BOOL * _Nonnull stop) {\n    int duration = durations[idx];\n    int repeatCount = duration / gcd;\n    for (int i = 0; i < repeatCount; ++i) {\n        [animatedImages addObject:image];\n    }\n}];. @bpoplauschi Maybe I can use that Demo project(https://github.com/dreampiggy/AnimatedWebPDemo) with the lastest SD repo and add more WebP images to test.\nThis fix logic about 1. 2. 3. is nearly the same as  #1694.\nThe last one(5. support duration per frame), it use the simple gcd number of each frame duration and add current frame for multiple times because that UIKit suck at +[UIImage animatedImageWithImages:duration:]. I search the GitHub and found one use the same method for GIF decoding(https://github.com/mayoff/uiimage-from-animated-gif/blob/master/uiimage-from-animated-gif/UIImage%2BanimatedGIF.m). But i'd check it more carefully.. Yeah, interesting issue. I try that demo project(I tweaked it with just 20 urls and add an simple log completion block to check because it may show the procedure clearly) and use Instruments to check. On iOS 10.3, it does not cause memory leak. All the 20 NSURLSessionTask instances dealloc by order after that task complete.\n\nBut on that iOS 9.0 simulator, 20 NSURLSessionTask instances do not dealloc after the completion block called. So all the NSURLSesionTask releated instance still alive(Whatever instance it created such as CFNetwork and Foundation). Yes, it leaked.\n\nBut I can't simply find the reason why this cause memory leak(there are no retain cycle in SDWebImagePrefetcher), and SD does not use any OS version specify API of NSURLSession. It may related to the NSURLSession internal changes. If someone can help with this and find the reason, please provide the information, thanks \ud83d\ude15 . Well, regardless of the usage, it's actually a memory leak issue even if I load just 20 urls which responsed 404 on the 10.1.x and lower(?). For most situation,this will not cause big problems because for each 404 url the leak is just less than 100KB. But if someone can find the reason and solve this, it will make the library become stronger and more stable. \ud83d\ude00 . @bpoplauschi Agreed. If only someone can find out the reason and better provide a fix. \ud83d\ude00 . Found the reason. If your URLSession delegate response to the URLSession:dataTask:willCacheResponse:completionHandler:, but you do not call the completionHandler. Then the memory leak below iOS 10.\n\nWe fix this in #2197. So that demo will not cause memory leak again.. Fixed by #2197. In 4.3.0 release.. @christopherhwood Implemented in 5.x. You can use an extra arguments for our UIImage+ForceDecode category, as well as that SDWebImageCoderHelper methods.\nobjective-c\nUIImage *largeImage;\n// UIImage category\nUIImage *scaledDownImage = [largeImage sd_decodedAndScaledDownImageWithImage:image limitBytes:1024*1024*10];\n// Or this coder helper method\nUIImage *scaledDownImage = [SDWebImageCoderHelper decodedAndScaledDownImageWithImage:image limitBytes:1024*1024*10];. YES. This is known issue. According to git log, it break this behavior to 4.0 (on Previous version, UIButton will set placeholder image even if the url is nil in advance).\nThe related PR is here: #1790 #1721\nMaybe we should ask someone to check or revisit this behaviour ?. Fixed via #2043 in 4.1.1. I create a PR to fix this issue: #1978. @bpoplauschi I'd love to. My company and personal's iOS app have an widely usage of SDWebInage and recently have updated to SD 4.0. I'm also interested in this open source project.. @bpoplauschi @rs I'm glad to join in and would like to contribute to this project. \ud83d\ude04 . @rs Hi, Olivier Poitrey. Are you busying now ? Cound you please add me to the CocoaPods Trunk. I found that I could not upload the spec files to CocoaPods because I'm not in the owner list of SDWebImage project. Currently @bpoplauschi is not online for a while, so we could not release a new version. \ud83d\ude05 \nMy trunk email: lizhuoli1126@126.com, name: DreamPiggy\nYou can do this through pod trunk add-owner in command line.\nHope that this will not bother you. Thanks. \ud83d\ude03 . #1860 . Maybe a custom timeout value beside waitForExpectationsWithCommonTimeout which use the const kAsyncTestTimeout is better ?. @bpoplauschi I fixed it.\nAfter runnning some WebP tests, I found most cases the CGContextDrawImage context draw image is smaller than the raw bitmap image created by CGImageCreate. This is related to the colorSpace and byte alignment. So we prefer to use all the WebP images (single static or animated) to draw on an CGBitmapContext and retrieve it.\nThe previous version use CGImageCreate for single static WebP images, which will consume more memory. If you set shouldDecompressImages to YES, it would enter +[UIImage decodedImageWithImage:] and then call CGContextDrawImage to get an smaller one. But if you set to NO, it will use the bigger one. This maybe not the same behavior as its description. \ud83d\ude15 . The demo screenshot(GIF) is here : \n\nYou can also try that in This demo project AnimatedWebPDemo since SD's Demo project can not directly run on Device or launched without Debug, which shows dyld: Library not loaded: @rpath/SDWebImage.framework/SDWebImage. (Is that a bug?). Pull request is here:  #1987. Merged via #1991.. This PR also refactor some code and use that global export function SDCGColorSpaceGetDeviceRGB in #1985 . So please merge that first and notify me to avoid conflicts.. WTF that the iPhone simulator contains rendering bug(which shows wrong bitmap buffer after clear cache and reload). But it works great on the device. (This consume nearly 3 hours to debug since I think it's an multi-thread bug). \nMoreover, is that Xcode version (I tried 8.3.x) issue or the project issue that the Demo project can't install on the device(Launch will exit because dyld: Library not loaded: @rpath/SDWebImage.framework/SDWebImage). ?. Added test test16ThatProgressiveWebPWorks for static single WebP progressive download. The huge decoding code in SDWebImageDownloadOperation is really ugly and not suitable for further maintain. So I decide to move all this suck into SDWebImageDecoder.m and create an actual SDWebImageDecoder class to maintain the decoder process.\nCurrently, our decoding code is seperate into UIImage+WebP, UIImage+GIF. We can further refactor code and put all this to SDWebImageDecoder and keep the original method implement just call that decode function. But currently it's not suitable to more extra code here, I will create another PR after I finished.\nAlso, I planned to enhance our encoder in sd_imageData and sd_imageDataAsFormat. Currently we just have the UIImagePNGRepresentation and UIImageJPEGRepresentation..But since we have ImageIO, we have libwebp, I decide to create another class called SDWebImageEncoder and to encoder UIImage to ImageIO format(including TIFF, GIF for single frame) and WebP format. But this may consume more time, please wait(In fact, recently I just contribe image-decoding related PR) \ud83d\ude03 . @skyline75489 This PR is completed and focus on the progressive decoding on WebP. It has refactored some of code to make it more easy to maintain. The later refactor progress I described above will be submitted with an new PR with that encoder feature in.. @bpoplauschi Sounds great. Catch up with more and more format with single project is not a good idea. Maybe we can open the image decoding procedure to public and let to replace our converter NSData to UIImage. So that you can do many decoding plugins. And this can introduce most complicated usage(such as custom compress level, image validate, image blend/blur or whatever).\nWe have already an SDWebImageManagerDelegate to introduce some procedure here. Such as -[SDWebImageManagerDelegate imageManager:transformDownloadedImage:withURL:]. I think it's a great place to put such as -[SDWebImageManagerDelegate imageManager:decodeDownloadedData:withURL:]. And I can change the refactored SDWebImageDecoder to impletment that protocol.\nobjectivec\n/**\n * Allows to decode the data immediately after it has been downloaded and just before to cache it on disk and memory.\n * NOTE: This method is called from a global queue in order to not to block the main thread.\n *\n * @param imageManager The current `SDWebImageManager`\n * @param data The downloaded data\n * @param imageURL The url of the image to decode\n *\n * @return The decoded image object.\n */\n- (nullable UIImage *)imageManager:(nonnull SDWebImageManager *)imageManager decodeFromDownloadedData:(nullable NSData *)data withURL:(nullable NSURL *)imageURL;\nAnd we could also have an delegate in SDImageCache because we currently use our built-in encoding/decoding to read/write from disk. So provide a delegate to SDImageChache to let you also custom the cache progress. Maybe even automatically bridge that delegate method set to SDWebImageManager to SDImageChache (you see, the data, imageURL can be used through disk data and the key in SDImageChache, so the decoding process can be equal)\nI'm glad to see this happen \ud83d\udc4d . Moved to #1991 \n\n@bpoplauschi I rencently do refactor and think of the possibility to import decoding plugins. And this is what I achieved so far. To be simplicity, I move some decoding codes but keep all the public APIs and behaviour not change. I move our decode UIImage+XXX category code to id<SDWebImageCoder> and provide an property to SDImageCache and SDWebImgaeDownload  that can set by user.\nThe protocol API can make it more flexible, and you can even combine two or more decoder to one (use switch case with image format to dispatch decoder procedure). Like our built-in decoder here:\nSDWebImageDecoder. Even you can grab some other project's decoder and write an simple bridge. (For example, you can even use YYImage's YYDecoder to decode image download through SD)\nIf you'd like to check, you can check my fork repo branch:feature_refactor_decoding_with_plugin\nThere are two test case(test08ThatCustomDecoderWorksForImageCache and test09ThatCustomDeoderWorksForImageDownload) to show how to use custom decoder : SDWebImageDecoderTests\nBecause it's a big change, I will make it as future feature and create more detailed documents. I think this can make our implemtation clean and pluginable. We can even seperate the Decoder to such as SDWebImage-WebPDecoder project and set it by simple two lines. Then you can replace the entire decoding and encoding process.\nobjectivec\n[[SDImageCache sharedCache] setImageCoder:[[XXXDecoder alloc] init]];\n[[SDWebImageDownloader sharedDownloader] setImageCoder:[[XXXDecoder alloc] init]];\nAny idea about the things and possible limitation and further discussion  is welcome. Or I can create an issue or PR to discuss ?. Merged via our refactory code. PR: #1991. The defination of SDWebImageCoder\n```objectivec\n// The is the image coder protocol to provide custom image decoding/encoding\n// All the method are called inside a dispatch queue and do not block main thread\n@protocol SDWebImageCoder \n@optional\n/**\n Decode the image data to image.\n@param data The image data to be decoded\n @param format The recognized image format\n @return The decoded image from data\n /\n- (nullable UIImage )decodedImageWithData:(nullable NSData *)data format:(SDImageFormat)format;\n/**\n Incremental(Progressive) decode the image data to image.\n@param data The image data has been downloaded so far\n @param format The recognized image format\n @param finished Whether the download has finished\n @warning because incremental decoding need keep the data inside, we will alloc a new instance for each download operation to avoid conflicts\n @return The decoded image from data\n /\n- (nullable UIImage )incrementalDecodedImageWithData:(nullable NSData *)data format:(SDImageFormat)format finished:(BOOL)finished;\n/**\n Decompress the image with original image and image data\n@param image The original image to be decompressed\n @param data The pointer to original image data. The pointer itself is nonnull but image data can be null. This data will set to cache later. If you do not need to modify data at the sametime, ignore this param.\n @param format The recognized image format\n @param shouldScaleDown return YES if SDWebImageScaleDownLargeImages was set, otherwise return NO\n @return The decompressed image\n /\n- (nullable UIImage )decompressedImageWithImage:(nullable UIImage *)image data:(NSData * _Nullable * _Nonnull)data format:(SDImageFormat)format shouldScaleDown:(BOOL)shouldScaleDown;\n/**\n Encode the image to image data\n@param image The image to be encoded\n @param format The image format to encode, you should note SDImageFormatUndefined format is also  possible\n @return The encoded image data\n /\n- (nullable NSData )encodedDataWithImage:(nullable UIImage *)image format:(SDImageFormat)format;\n@end\n```. The demo to build an decoding plugin with other plugins:\n``objectivec\n// Your plugin decoding class which implementsSDWebImageCoder` protocol\n@interface MyImageDecoder : NSObject \n- (UIImage )decodedImageWithData:(NSData )data format:(SDImageFormat)format;\n@end\n@implementation MyImageDecoder\n- (UIImage )decodedImageWithData:(NSData )data format:(SDImageFormat)format {\n    UIImage *image;\n    switch (format) {\n        case SDImageFormatGIF:\n            image = [self myFunctionToDecodeGIF:data];\n            break;\n        default:\n            image = [[SDWebImageDecoder sharedCoder] decodedImageWithData:data format:format];\n            break;\n    }\nreturn image;\n\n}\n\n(UIImage )myFunctionToDecodeGIF:(NSData )data {\n    //...\n}\n@end\n``. @bpoplauschi Don't worry. We have more extra time to fix the test. I changed back thatpropertiesOfData` to reduce complexity. For most case, EXIF metadata is used with that image orientation and UIImage contains this one. So we can currently use that instead of preserve all the EXIF metadata.\n\nMoreover, for progressive decoder, it decode using inner context(such as CGImageSource, WebPIDecoder) and should not share between different decode process. Through we can add a extra context arg to let user provide this. But I think it's really ugly and too more complexity since you should manage a shared instance with different context and save different state.\nSo I choose to just add a new progressiveCoder property for each SDWebImageDownloadOperation. And grab the currently responsed coder class, to create a operation-based new instance. This is what I do in previous implementation. If you have any other idea about this, we can discuss here. \ud83d\ude04 . @bpoplauschi The renaming looks good(well, more Objective-C style). Also also, could you please  help me to also change some doc comments about methods since I think some of them may be misunderstanding or contain grammar mistakes :D. @bpoplauschi Because previous version our progressive decoding also available for GIF(Image IO is natively support GIF). It will decode the first frame for GIF. You can check 4.x version to check.\nI think we not drop the GIF normal decoding, we just grab the first frame because we need FLAnimateImage to maintain the animating...If you think this code is strange, maybe we should copy that incremental decoding code from ImageIO coder to GIF coder? Or try to merge the single GIF coder into ImageIO coder.. @bpoplauschi In fact. Since our ImageIO coder also just create the first frame through [UIImage imageWithData]. I think merge the GIF coder to ImageIO coder is better...(If you'd like, I can do this). @bpoplauschi OK. I can check the changes more carefully later.(Good effeciency)\nAnd attention, because I add image orientation(#2034) detector during this refactored Image IO coder. And also that progressive WebP decoder(#1987). So that some PRs marked for 4.2.0 can be close. I need a little more time to check and close them.. @bpoplauschi Seems force push to my fork branch with your squashed commit solve the strange PR status \ud83d\ude05 .. Reproduced. +1. Maybe I found the reason. I don't know why but in SD 4.1, we change the NSURLRequestCachePolicy for download operation from NSURLRequestReloadIgnoringLocalCacheData to NSURLRequestReturnCacheDataDontLoad when the SDWebImageRefreshCached. This means if the NSURLCache can not find local cache, it will do not perform any HTTP request and directly failed. So finally NSURLSessionDelegate may get that \"resource unavailable\" error and call the top level block.\nThe code is here:\n4.1: https://github.com/rs/SDWebImage/blob/4.1.0/SDWebImage/SDWebImageDownloader.m#L172\n4.0: https://github.com/rs/SDWebImage/blob/4.0.0/SDWebImage/SDWebImageDownloader.m#L156\nThe related PR is #1737 \nThis is actually a break change and I think the meaning what SDWebImageRefreshCached specify is not NSURLRequestReturnCacheDataDontLoad. Maybe we should change back to NSURLRequestReloadIgnoringLocalCacheData and follow that Call completion block with nil image/imageData if the image was read from NSURLCache, we need to filter that UIImage and NSData if we retrive the cache from NSURLCache.. @bpoplauschi  Sorry to bother because I do not use that SDWebImageDownloaderIgnoreCachedResponse options in my iOS application. After I check the commit history but still do not understand what's this option means. If I choose to use NSURLCache instead of SDImageCache, I means to set NSURLRequestUseProtocolCachePolicy right ? But this option seems to set back that NSURLRequestReloadIgnoringLocalCacheData. It's this really useful ?(You can just do not set any and this is the default behavior). Or may this means the description Call completion block with nil image/imageData if the image was read from NSURLCache\nSo maybe the code below can specify that behavior(but I think it's really strange and please do not use this if I'm something wrong):\n```objectivec\n// In order to prevent from potential duplicate caching (NSURLCache + SDImageCache) we disable the cache for image requests if told otherwise\nNSURLRequestCachePolicy cachePolicy = NSURLRequestReloadIgnoringLocalCacheData;\nif (options & SDWebImageDownloaderUseNSURLCache) {\n    cachePolicy = NSURLRequestUseProtocolCachePolicy;\n}\nNSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url cachePolicy:cachePolicy timeoutInterval:timeoutInterval];\nif (options & SDWebImageDownloaderUseNSURLCache && options & SDWebImageDownloaderIgnoreCachedResponse) {\n    NSCachedURLResponse *response = [sself.sessionConfiguration.URLCache cachedResponseForRequest:request];\n    // Check if the response can be read from NSURLCache, call completion block with nil\n    if (response) {\n        completedBlock(nil, nil, nil ,YES);\n    }\n}\n```. Ok again. I found that hack in here in 4.0: https://github.com/rs/SDWebImage/blob/4.0.0/SDWebImage/SDWebImageDownloaderOperation.m#L426\n4.1 remove that code, which means even you set that SDWebImageDownloaderIgnoreCachedResponse, you will not get called with nil image and imageData. Maybe we should check like the above code and directly call completion with nil. (But in fact, what's this behavior means?)\nOr we can deprecate that strange option if it's really no usage?. @bpoplauschi Agreed with that strange SDWebImageDownloaderIgnoreCachedResponse. I don't know what that can be used for. If you like to detect whether the URL has been cached with NSURLCache but not SDImageCache, directly use -[NSURLCache cachedResponseForRequest] is enough and this do not need any SD part to provide. Maybe we should mark this options as deprecated and do not use that (I dislike that hack and according the comments there \"Note: responseFromCached is set to NO inside willCacheResponse:. This method doesn't get called for large images or images behind authentication\" there maybe other bugs)...\nBy the way, If you still want the backward compatibility, I think the code I showed may be correct acoording to the document(which only specify Call completion block with nil image/imageData if the image was read from NSURLCache but not any HTTP cache-control information. The previous implementation(check the HTTP Response cache-control and then call nil at block) is too far away from this). And that change does not affect what SDWebImageRefreshCached work. If SDWebImageRefreshCached set, do not set that SDWebImageDownloaderIgnoreCachedResponse and it will behave the same as before.\nMoreover, even even you need HTTP Response cache-control to call that nil block. You just need to place this logic into URLSession:dataTask:didReceiveResponse:completionHandler:. You have the HTTP response now and check the cache-control header or status code. Then call the nil block and return NSURLSessionResponseCancel. Do not waste that user's cellular data to download the actual image data and hack...Itn's it?\nThere may be 3 different solution. So we can choose one and use that. My personal is that deprecated one because I think there are quite few user and it should be the best one for further maintain.. @bpoplauschi I reviewed and approved that changes. Should it be merged now ?. ~~@bpoplauschi So, we decide to do nothing toward that SDWebImageDownloaderIgnoreCachedResponse. In 4.1 we removed that hack code to call the completion block with nil, therefore the SDWebImageDownloaderIgnoreCachedResponse is totally unused. Maybe we should deprecate that option in 4.2. But I Agree with this temp fix to 4.1.1.~~\n~~Moreover, the comments in SDWebImageDownloadOperation:L373, do we need to remove that ?~~\n@bpoplauschi  \nI think we should just keep that SDWebImageDownloaderIgnoreCachedResponse do what it doc says. But since this option is useless for common case, we  do not need that in download operation to check whether the data is from cache(cause crash because of race condition). We just check before any actual request start. This will not trigger any write to NSURLCache so can avoid that crash.\n\nApple Doc:\nAlthough NSURLCache instance methods can safely be called from multiple execution contexts at the same time, be aware that methods like cachedResponseForRequest: and storeCachedResponse:forRequest: have an unavoidable race condition when attempting to read or write responses for the same request.\n\nAlso, I add two tests about SDWebImageRefreshCached and SDWebImageDownloaderIgnoreCachedResponse. I pick all your commits and create another PR #2031 . @bpoplauschi Any update about this PR ? Should it merge now or wait for 4.1.1 milestone ? I found someone ask for the issue #1993 and maybe merge this to master can let those user apply this changes more easy(For example, their own SD fork or private repo).. Your worry about this case will not happens in SD 4.0. I check the code, for each URL, we will actually create only one NSOperation. But it can hold an array of callbacks for each progress block and completion block which passed by sd_setImageWithURL:.\nFor example, the code you provided will create an shared NSOpeartion op for actual download.\nUIImageViewA's completion block blockA will cause op.callbacks[0] = blockA (In fact, we have progress block and completion block so the array item is an tuple like {\"complete\": complete_block, \"progress\": progress_block}, but we keep things simple here).\nUIImageViewB's completion block blockB will cause op.callbacks[1] = blockB.\nWhen op received cancel call, it will check whether the op.callbacks.count > 0 and only if it's empty, it cancel the internal NSURLSessionTask. So the example code above will not cause bugs.\nYou can check the code here : https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L111 . Sadly it seems that old version SD 3.8.x do not have any consideration for this edge case. It just cancel the NSURLSessionTask whenever it received cancel call. So it may cause the bug you show.\nYou can see the code here:\nhttps://github.com/rs/SDWebImage/blob/3.8.2/SDWebImage/SDWebImageDownloaderOperation.m#189. Since you main application have import the SDWebImage. But as a framework, you do not know whether it need SDWebImage/WebP. This case is that your framework's behavior is depends on the main application which is not the most common case we concentrate on. For this, I don't think introduce such an interface is useful. I think you can create an global configuration interface just for your main application like this:\n```objectivec\n//Your framework's configuration class\nstatic BOOL kSDWebImageHasWebPSupport = false;\n\n(void)setSDWebImageHasWebP:(BOOL)hasWebP {\n    kSDWebImageHasWebPSupport = hasWebP;\n}\n```\n\nAnd your main application set this configuration at launch time or someother time your prefer.. Oh, maybe a better solution here. Since we define all the .h contents into that SD_WEBP macro and in unbrella header file. So you can use __has_include to detect whether that header files has included.\n```objectivec\nif __has_include()\ndefine kSDWebImageHasWebP YES\nelse\ndefine kSDWebImageHasWebP NO\nendif\n```\nThis can be used in this situation.. @iwill SDWebImage obey the semver. Which means if we want to remove an public interface(Such as that UIImage+WebP.h), we must upgrade the major version here(From SDWebImage 4.1 -> SDWebImage 5.0). Currently we have many things to do on 4.x and may avoid any break changes. You can also write the version in your podfile to ensure only SD4.x.\npod 'SDWebImage', '~>4.1.0' // which means 4.1.x is allowed but not 4.2 or 5.x. ```\n6 XXXXX 0x1004f92a4 -[SDWebImageDownloader URLSession:dataTask:didReceiveData:] (SDWebImageDownloader.m:304)\n-------------------->\n7 XXXXXX 0x101300b78 -[_priv_NBSLensAllMethodsDlgt_urlSess nbs_URLSession:dataTask:didReceiveData:]\n<--------------------Swizzle here ? We(even NSURLSession itself) do not have this method\n8 CFNetwork 0x183108a20 __67-[NSURLSession delegate_dataTask:didReceiveData:completionHandler:]_block_invoke.242\n``. The first crash is because of thatNSAllocateMemoryPagesalloc memory too large but current free memory is low. This happened on+ [UIImage imageWithData:]and maybe we could not do something to solve this because it's UIKit private method. The best choice is to setSDWebImageScaleDownLargeImagesor to check other memory issue(for example, is there something memory leak or whether the image bitmap is too large). The second oneCFReleaserelease an CFObject that has been released. But I search that file in SD 4.1. There are only two ways to callCFReleasedirectly. Each of that is protected by check the CFObject first. We have one that do not protected in the previous version(See #1947 ) Are you sure you're using the SD 4.1 version ?. @joshuafeldman It seems that there is an non-thread safe issue to that NSMutableDataself.imageData. When you called-[NSURLSessionTask cancel], it may not immediately stop any later call to the URLSession delegate. So there may be an race condition because URLSession delegate queue set theself.imageData=xxxbut SD operation queue setself.imageData=nil`.\nFrom the apple doc:\n\nA task may, under some circumstances, send messages to its delegate before the cancelation is acknowledged.\n\nMaybe an simple solution is to make all the modify operation in the same queue(for example, put these in the SD's barrierQueue which is previously used for callbackBlocks). I check the code and there are 3 modify process to that imageData property.\n```objectivec\n//line:231\nself.imageData = nil;\n//line:270\nself.imageData = [[NSMutableData alloc] initWithCapacity:expected];\n//line:441\n[self.imageData setData:UIImagePNGRepresentation(image)];\n```\n\nUpdate: Instead of add that dispatch_barrier_sync in any access(getter and setter) position, it's simple to just make that self.imageData=nil happend in the NSURLSession delegate queue. I update the PR and hope someone can review it.. And also, all the process that read the image data should be called with copy to get an const NSData because this modification may happen whenever other method call read the data(See that +[UIImage imageWithData:] crash above)...I can later provide an fix to solve this.. It should on 4.1.1 but current we do not have an possible release date. \n@bpoplauschi Maybe we can review this PR and try to merge this to master branch(since this is a crash fix). Fixed via #2011 and will be released in 4.1.1. Fixed in #1985. Will release in 4.1.1 version.\nCurrently 4.1.0 version it does not use autoreleasepool, but it use an shared canvas to draw image on. So will do not need create an CGBitmapContext each loop like 3.7.6. This can also reduce memory usage. You can have a try on 4.1.0 first.\nIf you still have this issue or you do not want to update to 4.0 version. Try to pick that commit and have an try. If many users meat this, we may considerate to release an 3.7.7 patch version.. @zhangninghao \n\nPlease fill in the detailed description of the issue (full output of any stack trace, compiler error, ...) and the steps to reproduce the issue.\n\nAnd also that something wrong happened, please provide detail information or stack trace for crash.. Reproduced. Seems an Bug (Or that the fact we do not have an sd_backgroundImageURLForState: method.). @coolboy-ccp\n\nPlease fill in the detailed description of the issue (full output of any stack trace, compiler error, ...) and the steps to reproduce the issue.\n\nAnd maybe sd_setImageWithURL:completed: ?. https://github.com/Flipboard/FLAnimatedImage/blob/master/FLAnimatedImage/FLAnimatedImage.m#L239\nIf you create FLAnimatedImage with GIF data, acually it do not retain the UIImage instance for each frame and keep it in the memory. It just check whether the image is valid and only save the first frame to use as poster image. The other CGImageRef and UIImage instances will be released after each loop end(Also, there is an autorelease pool to reduce memory peak). So I can't figure out why gain the memory will happen. If you can provide more detail information (How you use GIF data with FLAniamtedImage and how the memory increased) I can try to reproduce the issue.. @seanLee Sorry, do you mean set animatedImage to FLAnimatedImageView instance ? This step you have that FLAnimatedImage instance. So the issue is why FLAnimatedImageView render consume a lot of memory. In fact, this may related to FLAnimatedImage, we can not fix that in SD side. Maybe you should consider to create an issue to FLAnimatedImage issues ?. Currently we do not have such macro to detect version. If you want to write an library that supports both 3.7.x and 4.0. Maybe curently the only solution is to use runtime dynamic invoke such as this tricky code:\nobjective-c\n- (id<WXImageOperationProtocol>)downloadImageWithURL:(NSString *)url imageFrame:(CGRect)imageFrame userInfo:(NSDictionary *)userInfo completed:(void(^)(UIImage *image,  NSError *error, BOOL finished))completedBlock\n{\n    SEL loadImageWithURL = NSSelectorFromString(@\"loadImageWithURL:options:progress:completed:\");\n    SEL downloadImageWithURL = NSSelectorFromString(@\"downloadImageWithURL:options:progress:completed:\");\n    if ([[SDWebImageManager sharedManager] respondsToSelector:loadImageWithURL]) {\n        return (id<WXImageOperationProtocol>)objc_msgSend([SDWebImageManager sharedManager], loadImageWithURL, [NSURL URLWithString:url], 0, ^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {}, ^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {\n            if (completedBlock) {\n                completedBlock(image, error, finished);\n            }\n        });\n    } else {\n        return (id<WXImageOperationProtocol>)objc_msgSend([SDWebImageManager sharedManager], downloadImageWithURL, [NSURL URLWithString:url], 0, ^(NSInteger receivedSize, NSInteger expectedSize) {}, ^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n            if (completedBlock) {\n                completedBlock(image, error, finished);\n            }\n        });\n    }\n}\nAlso, since 4.0, SD changed many methods and this compatibility layer maybe hard to implement. You'd better consider to provide an special branch or tag just for SD3.7.x and keep another branch or tag for SD4.0.. @songxing10000 objc_msgSend is Objective-C runtime method. You should import \"objc/message.h\"...\nAnd I advice that this trick may be fail if we change the method selector in the future(But this is an break change so may be happened only in SD5.0). You should either follow up the SD changes or to create an branch for each SD major release(3.7.x branch use that downloadImageWithURL and 4.x use that loadImageWithURL). If you meet some other different method selector between 3.7.x and 4.x, you should also do this things.. You are misunderstanding by that decode word. This should be named decompress or decode before rendering. This shouldDecodeImage method is used for that UIImage+ForceDecode category.\nUIImage is just an wrapper to CGImage. When you use that +[UIImage imageWithData:] to create an UIImage instance, the image data will not decode to image bitmap immediately(You won't see any memory increate when you call this method). Instead, the underneath CGImage instance is just created with Image/IO which keep an reference to the image data. It will be decoded the first time UIImageView rendering(You can learn this behavior from other references and I will not talk detail implementation here). \nBut sometimes we need to decompressed first before UIImageView rendering. This is an feature that may help you increase frame rate(because the rendering process do not need extra decoding CPU usage) but this also means you need extra memory before you set UIImage to UIImageView. So we have that UIImage+ForceDecode category.\nFor historic reason, the ForceDecode process happend for any images. But there seems some bugs related to alpha PNG. So then we drop the process for alpha image and only decompress non-alpha images. You can also set shouldDecompressImages to NO to disable this feature totally.. For network, It just use NSURLSession based API. So actually it use CFNetwork's SSL implementation. You can check CFNetwork's open source code to learn.\nhttps://opensource.apple.com/source/CFNetwork/\nAnd ,the SSL crypto algorithm is placed into Security framework. Maybe you can check here to learn.\nhttps://opensource.apple.com/source/Security/. Other Linker Flags is just right on Xcode -> Project -> Build Settings -> Linking -> Other Linker Flags:\n\nOr simple: Go to Build Settings, use Command + F to search \"Other Linker Flag\". This is also the preferred way for search things in the massive Build Setting.. Added this image into the tutorial.. First. A delegate do not need to subclass SDWebImageManager. You can use all the class which just conform the SDWebImageManagerDelegate protocol.\nobjectivec\n@interface MyObject : NSObject <SDWebImageManagerDelegate>\n@end\nSo you can just place that cornerRadius or some property as configuration in your own class and implement the delegate method.. For this use case. Maybe you can try to create an delegate manager which hold multiple NSObject<SDWebImageDownloadDelegate instance. And set this delegate manager to SDWebImageManager.sharedManager.delegate. Then, when the delegate manager receive any method call, dispatch it to all the delegates item and choose one to return. The returned one will be cached (Like the naive code here). This can simulate multi-delegate design pattern.\nCan this achieve your goal ?. Since this not the common case (Download one image and cache for multiple format), I think you could try yourself to find a better solution. Maybe you can just directly call -[SDImageCache storeImage:imageData:forKey:toDisk:completion:] in the delegate manager before method return to save all the delegate returned images to SD's cache.\nMoreover, I think this should not be an issue but more like some business logic or usage, maybe it's not suitable to discuss on repo issues. \ud83d\ude34 . @Josscii  Hey. I'm creating a related new feature request. #2115 \nPreviouly our category methods are hard-coded to use shared image manager. But now I provide a way to pass your custom manager even for these category methods. So you can set different manager for different imageView without override global one. \nSo that you can create each manager for each type of your transform. Then call the specify one to use. Can this solve your problem ? . @Josscii I see. Kiingfisher use the benefit from Swift's struct. However in Objective-C, we need to create instance instead (The best way is to create different subclass for specify transform and set delegate to manager itself or provide a block property because it can be reused).\nIn my opion, actually we can do the same things like those, but looks more complicated. Because these two framework's have a different design pattern and kingfisher do not have such a historic limit.\nI add this pull request because I need to seperate cache path for different image request. But I do not want to directly use SDWebImageManager API to build from scratch.\nAnd now I can do this without writing extra code:\n```objectivec\nNSURL url1, url2;\nUIImageView imageView1, imageView2;\nSDImageCache cache1 = [[SDImageCache alloc] initWithNamespace:@\"cachePath1\"];\nSDImageCache cache2 = [[SDImageCache alloc] initWithNamespace:@\"cachePath2\"];\nSDWebImageDownloader downloader = [SDWebImageDownloader sharedDownloader];\nSDWebImageManager manager1 = [[SDWebImageManager alloc] initWithCache:cache1 downloader:downloader];\nMySDWebImageManager manager2 = [[MySDWebImageManager alloc] initWithCache:cache2 downloader:downloader];\nmanager1.delegate = self; // is a delegate instead of block, so in the imageManager:transformDownloadedImage:withURL:, you need a switch case to check manager instance, and then return the different transformed image\nmanager2.delegate = manager2; // or better, if the manager transform can be resued, create a subclass. With hard-coded method implementation or a new property block to provide transformer\nmanager2.transformBlock = ^UIImage (UIImage image, NSURL url){ // some logic... };\n[imageView1 sd_internalSetImageWithURL:url1 placeholderImage:nil options:0 operationKey:nil setImageBlock:nil progress:nil completed:nil context:@{SDWebImageInternalCustomManagerKey : manager1}]; // Sadly, Objective-C don't have optional arguments to omit :)\n[imageView2 sd_internalSetImageWithURL:url2 placeholderImage:nil options:0 operationKey:nil setImageBlock:nil progress:nil completed:nil context:@{SDWebImageInternalCustomManagerKey : manager2}];\n```\nAnd also, in SD4.2, we introduce a SDWebImageCoder to build your custom coder. The methods are called from global queue so you can just directly use SDImageCahce to cache whatever you want for whatever times for single download image.. @Josscii No...Actually you just download once. Because next time you request it from whatever API(except directly call SDWebImageDownloader), it would be created from SDImageCache. It's a memory-disk cache :)\nAnd as I told above, if you are Creative enough. You can directly call SDImageCahce API to save that transformed image to cache anytime. For example, in the delegate methods call. It's a little trick but maybe sometimes we have to use that.. @sainttail See #2219 and 5.x branch...\nI'm doing some documents related stuff. And maybe I need to ask the @bpoplauschi to release 5.0.0-beta soon. It takes too long time.. @Josscii See 5.0 feature Image Transformer. It's what you expect for Kingfisher-like Processor. It allow you to chain the pipeline transformer. It works for cache & manager level. It provide many built-in image process util categories.\nThe 5.0 beta release is delayed because of many issue (personnel issue, code issue, communicate issue as well). I hope it can be released before Jully. But it all depends.. @Josscii Seems a bug. I'll fix now. The image cache key should be used when you specify a custom transformer. UIImage+GIF.h now only contain the 1st frame image in SD 4.0. So please do not use this to decode GIF images.\nIf you prefer to use the 3.7.x version. Maybe you should change back the scale by yourself:\nobjectivec\nUIImage *gifImage; // Which created by that UIImage+GIF\nSDScaledImageForKey(nil, gifImage);\nSDWebImageCompat will set all the images frame scale to 1 if key is nil and maybe this can help you.. ~~SDWebImageManager does not support custom HTTP Header. So please use SDWebImageDownloader and use -[SDWebImageDownloader setValue:forHTTPHeaderField:] to set this HTTP Header and -[SDWebImageDownloader downloadImageWithURL:options:progress:completed:] to download.~~\nIt's OK to use the sharedDownloader, maybe it's the issue related to your request(for example, wrong token) and your image server. The Basic HTTP Authorization Header looks like this: Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==. Maybe the token is invalid? Please first check that completion block about error information. Also, you can use some HTTP debug tools(like Charles) to grab the HTTP request, response to find the issue. And, if the image server is hosted by yourself or your company, you can also ask them for help.\nMoreover, SDWebImageDownloader provide two properties username and password to support basic HTTP Authorization, maybe it can also be helpful.. You use Alamofire's Alamofire.JSONEncoding.default.encode to encode your request. So the HTTP Request is different from SDWebImage's request.  (And this is why I suggest to use some HTTP debug tools because you can check the difference right in your hand)\nAlamofire will set Content-Type=application/json and put the parameters in HTTP body. But SDWebImageDownloader will set Content-Type=image/png and put parameters in HTTP URL Query. You should check what actually your image server support and use the right format.\nCheck Alamofire's JSONEncoding: https://github.com/Alamofire/Alamofire/blob/c8a4d3a910bcfd53b9b855463495b8200ca80fd6/Source/ParameterEncoding.swift#L309\nIf you also need to JSONEncoding to encode your image request, you can write a little more code like the code above. Or if you really need HTTP Body in the request, you can use alamofire to download (In most case, SDWebImage does not need to set HTTP Body, so SDWebImageDownloader do not expose that as a public API). To identify the network issue, the best way is to check the actual HTTP request and response. If you do not want to try some HTTP debug tools like Charles, you need to grap code to check. You can set an breakpoint at this line: https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L68 and print the request all informations(including HTTP URL, HTTP HeaderFileds and HTTP Body).\nThen use the NSURLSession code you provide above and set an breakpoint to check the same information. Compare these two and find the differences.. @nazmulkp Maybe the built-in HTTP Header will cause your image server respond 500 ? I found that SDWebImageDownloader set Accept=image/webp,image/*;q=0.8 when WebP enable and Accept=image/*;q=0.8 when disable as default. When you do not have any other solution, you can set that header filed to nil to remove or use that powerful headersFilter property to filter the HTTP Headers.\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloader.m#L80. The URL you provide is OK on our demo project(Simply change the URL in MasterViewController.m and run). In fact, SD use NSURL to constuct from the NSString. Please check the issue again, thanks.. xcodebuild clean build -workspace SDWebImage.xcworkspace -scheme 'SDWebImage iOS static' -sdk iphoneos -configuration Release\nOr to run Archive command in Xcode for that SDWebImage iOS static scheme.. Any idea about using SDWebImageDownloaderHeadersFilterBlock in SDWebImageDownload.sharedDownloader ? \nAnd also , change this OPEN API will break all current users' code, please consider carefully or find another way to approche this feature.. @BlueVirusX If you need all information about HTTP response, I think it's not recommended to use SDWebImageDownloader because it's made for out-of-the-box and focus on common usage for image downloading but not an full-stack network framework.\nInstead, you can use NSURLSession or some network framework like AFNetworking for HTTP request, in the completion block , use that UIImage+MultiFormat category method or FLAnimatedImage(For GIF) to decode NSData to UIImage, add you can easily grab HTTP Reponse header then use this information in your business logic. \nIf our users want more and more complicated information like statusCode, redirect URL(since HTTP supports redirect), MIME Type. All this API design will fail again. I think this should be an further discussion, any idea? \ud83d\ude03 . @BlueVirusX I think your use case is adoptable, but since this use case is really rare(I think it's more like a network stack process but not image itself). I think we can provide a way for this by not change too more public API. See my solution.\nFirst, for your use case set different header values for each reques, you can done this by provide a SDWebImageExternalAddtionalHeadersKey in UIView+WebCache actegory. The value of this key is a NSDictionary<NSString*,NSString*>. \nThen, this value is passed to SDWebImageDownloader. We need introduce a same context arguments to pass it and let downloader create a acutal NSURLRequest with it. Then all things done.\n\nSecond, for your use case need the returned headers from the response, this means we should have a way to grab the NSURLResponse. However, this one should be not considerate to available in UIView category. Because we have image cache, what if your image is from the memory or disk cache but not download from network ? I think your business logic should take more effort to implement this. For example, write your own code using SDWebImageDownloader to do this stuff.\nBut since we have a SDWebImageDownloadToken, I can make the NSURLResponse accessible from the token after you call downloadImageWithURL:, this could make it more easy to implement :)\n\nI can write a PR to show how to finish this approach.\n. @BlueVirusX See #2166. @BlueVirusX We can add that SDWebImageDownloadToken to the SDWebImageCombinedOperation, but the question is that :\nobjective-c\n- (id <SDWebImageOperation>)loadImageWithURL:(nullable NSURL *)url\n                                     options:(SDWebImageOptions)options\n                                    progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                                   completed:(nullable SDInternalCompletionBlock)completedBlock\n                                     context:(nullable SDWebImageContext *)context;\nThis return type is id<SDWebImageOperation> but not SDWebImageCombinedOperation. So if you really want to do this stuff, you may write some trick code using KVC to acess the internal property:\nobjective-c\n[imageView sd_internalSetImageWithURL:[NSURL URLWithString:self.objects[indexPath.row]] placeholderImage:placeholderImage options:0 operationKey:nil setImageBlock:nil progress:nil completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n    if (!error && cacheType == SDImageCacheTypeNone) {\n        NSObject<SDWebImageOperation> *operation = [imageView sd_imageLoadOperationForKey:NSStringFromClass([imageView class])];\n        SDWebImageDownloadToken *token = [operation valueForKey:@\"downloadToken\"];\n        NSURLResponse *response = token.response;\n        if ([response isKindOfClass:[NSHTTPURLResponse class]]) {\n            NSDictionary *headers = ((NSHTTPURLResponse *)response).allHeaderFields;\n            NSLog(@\"%@\", headers);\n        }\n    }\n} context:@{SDWebImageExternalAddtionalHTTPHeadersKey: @{@\"foo\" : @\"bar\"}}];\nMaybe you can write a wrapper to do this. If you think this is not suitable. Maybe we shuold change the publc API by make SDWebImageCombinedOperation class open and change the return type.. Well. After some consideration, I think we should break the API and change the return type. This change should at lease in 5.x. The reason why to change this is blow here :\nOur previous API -[SDWebImageManager loadImageWithURL:options:progress:completed:] describe that\n\n@return Returns an NSObject conforming to SDWebImageOperation. Should be an instance of SDWebImageDownloaderOperation\n\nSo this is adoptable and may not break current usage(Just the API). And I think, return a simple SDWebImageOperation protocol instance is really useless. User can not do anything except cancel the operation. We can make it open to the user to provide more custom advanced usage(Including your HTTP headers usage).\nCompared to Kingfisher's same API KingfisherManager.retrieveImage, I think we should basically add two property, one is NSOperation *cacheOperation, the other is SDWebImageDownloadToken *downloadToken. Some advanced feature can be implementation and make it more user-customizable.\nAll the other properties should be hidden because it rely on the complex internal logic. I think now you can do something easy with it :). #2261 Merged. Which introduce the request modifier and expose the cache/download operation protocol, which allow you to grab back the response. So this PR can be closed. Thanks for your contribution and hard-work ;). Duplicated for #1993 . Added in 4d99ca6 and 05dfa6c. Will be available in 4.1.1. I found that code coverage is only exist on Test scheme. But not that framework scheme like SDWebImage iOS. Is that also affected by Xcode 9 's change?\nTest.scheme\n<TestAction\n      buildConfiguration = \"Debug\"\n      selectedDebuggerIdentifier = \"Xcode.DebuggerFoundation.Debugger.LLDB\"\n      selectedLauncherIdentifier = \"Xcode.DebuggerFoundation.Launcher.LLDB\"\n      shouldUseLaunchSchemeArgsEnv = \"YES\"\n      codeCoverageEnabled = \"YES\">\n</TestAction>. Duplicated issue related to imageData multithreads crash : #1998 PR: #2011 . UIImagePNGRepresentation and UIImageJPEGRepresentation will erase your EXIF information when convert UIImage(with non-up orientation) to NSData. It seems that an UIKit's bug but Apple adopt this behavior from the beginning.\nNeed some work to copy the EXIF metadata to that NSData. Please wait.... Strange. That decodedAndScaledDownImageWithImage will not decoded alpha images and set non-alpha channel for CGBitmapContext. But then they use UIImagePNGRepresentation ? Maybe it's for better performance. What I need is to copy the EXIF information and copy to the data. But this may have some issue about different image format. I try to figure this.. I provide a fix. Which drop the usage of that UIImagePNGRepresentation and encode UIImage to NSData with ImageIO. It will copy all the EXIF, JFIF metadata and provide cross-platform(not just iOS/watchOS) compatibility.\nBecause that image decoding code has been refactored during that #1987. So I pick those commits.\nThe related PR is here: #2034. Another way to fix. We now drop that behavior to modify this original image data \ud83d\ude05 . We just scale down the UIImage to reduce memory usage and we fix the image orientation issue in our lib. The image data will not be cached  into memory and will be released after completion block. If you prefer to add some extra compress, you can grab the image data by yourself and do it.\nKeep this issue here. If someone think that modify the original data is also important. We can set back this behavior.. @bpoplauschi If we need to modify the original image data. We need to modify the data pointer as well. We can use that encodedDataWithImage since it now keep the EXIF information from UIImage.imageOrientation .\nAny way. Do you think this auto-modify original data behavior should be combined with an option key(perhaps other users may use this and they do not need modify original data) ?. @bpoplauschi Forgot this one. We need to modify that data pointer as well. I pick up a commit.\nWell...And, maybe Is a little hurry to ready for 4.2.0 release ? :). You are right, this is a bug that the second time you load withrefreshCached will receive an error. related issue is here: #1993. And the Fix is in master branch.. @bpoplauschi Well. Glad to see you back. \ud83d\ude04 \nI merged some commits in 4.1.1 milestone. And I tested some fix through a fork private repo in my company's product which is used by really huge number of people in China. I also hope that we can land 4.1.1 soon.. @bpoplauschi There are two more last commits before 4.1.1. One is #2032. It's about the #1994 created by you. It fixed the bug in #1993 but also break the previous behavior about SDWebImageRefreshCached flag:\n\nIf a cached image is refreshed, the completion block is called once with the cached image and again with the final image.\n\nand also the function with SDWebImageDownloaderIgnoreCachedResponse flag.\nAfter this commit. SDWebImageRefreshCached will always call completion block twice(assume it's has been cached by SDImageCache) because we do not check whether the image is refreshed. But if we want to obey what it says, we can't simply roll back all the code to 4.0 because it will cause #1623 crash because of the NSURLCache race condition. I find the reason and place in that #1623 comments. So I think we can just try another way to obey the previous behavior. And I provide one in #2032. \nI hope these description can let you know why I create that PR and one related PR #2033 (I close it because previously I think we can just remove that logic. But after consideration, I think we should not change behavior in a patch version update. Isn't it?). @bpoplauschi Another is that header issue #1983. I think it's not hard but since you say you will review that, I leave it here.. @bpoplauschi Moreover. You may notice that I pick some changes in #1987 to a new #2040 and add the last into a new milestone. Because I think this feature it's not really urgent and I do some code refactor in this PR. For cautious, I think 4.1.1 may not pick the changes and we can let it be prepared for next release. (Also, there are some other image decoding related PR and I think we can put them together).. @bpoplauschi  Almost all done. Maybe there is one last crash #1941. I do not meet this crash in product(Maybe it's can be reproduced by that image prefetcher?). But I find it may be another thread-safe issue and I try a fix at #2048\nBut since I saw previously there are some issues related to this thread-safe issue, I do not know whether this can really cause the situation I suggest or not. I just analyse from logic and it's hard to debug since it's an thread-safe issue...If you're cautious about that, just leave it at 4.2.0 milestone(or maybe 4.1.2 somehow \ud83d\ude04). @bpoplauschi Agreed.. @bpoplauschi Well. I can delete these fork branch one by one. But since you prefer to delete yourself, I add you to my fork branch(Although It's a little strange...). I've removed some unused branch(I usually do not delete them :) ). @bpoplauschi All PRs for 4.1.1 checked. I add 2 more commits for little fix and protect. Please check those and then we can release another patch.. @bpoplauschi Good.. After consideration. I think we should not change the behavior in a patch release. So I will close this PR and choose #2032 to be merged. If someone have other idea or any question, you can reopen and comment here.. Closed due to our refacor ImageIO coder will keep image orientation (decoding and encoding).\nBut there is one behavior change compared to 4.1. Previously, when use SDWebImageScaleDownLargeImages. After scale down the image. We use UIImagePNGRepresentation to recreate an data from the scaled down image and set it to imagedata callback. I think this behavior is a little strange since it's useless in most cases and modifying original data from network is not seems correct.(And in fact, if you ignore the image data, it will be release after the completion block with no extra memory issue).\nIf someone think we should keep this behavior to modify the image data as well. We can reopen a PR and change back this one.. Check your objective-c bridge header and add #import <SDWebImage/SDWebImage.h> into this file.\nIf you do not have this header file, try to Add File->Objective-C files, Xcode will pop up and ask you to create one.\nCheck here to learn use Objective-C code with Swift code.. set shouldDecompressImages to NO for SDWebImageDownloader.sharedDownloader. This is used for decoding the image from data to bitmap before rendering in tableview to increase a little frame rate. But it will cost more memory.. This image format check will fail for that HEIC format(Am I right ? Neither HEIF nor HEVC). We currently not support that image format here. But if it's not really hard to support that , we can have a try.\nCould you please provide one HEIC image data here(let us download) and to check that magic bytes(The first byte) ?. @PengfeiWang666 Start with iOS 11, HEIC is a implementation of that HEIF. This is natively support by CGImage framework and transparentlly supporet all above level such as UIKit interface(Learn this: https://devstreaming-cdn.apple.com/videos/wwdc/2017/511tj33587vdhds/511/511_working_with_heif_and_hevc.pdf). When you call [UIImage imageWithData:] with an HEIC image file, it can sucessfully be decoded and produce an UIImage. So infact, SDWebImage natively support this format in previous version.\nBut now, we just do not have that imageFormat enum. So I can add one and update the related things.(For example, our Image IO coder mark canDecodFromFormat with a switch case. Ready for SD 4.2.) \nAttension, you can download and decoding HEIC in previous release with no issues. Only need your device run iOS 11. Duplicated for #1993 . We have merge the fix commit to master. Maybe we should release 4.1.1 soon.. Duplicated for #1998......Fixed in master branch. Maybe we can release 4.1.1 in October. Any contributor's idea? @bpoplauschi @iwill.. First. Please follow our issue template guide and provide more information such as SD Version.\nMoreover, could you please find the code which print that NSLog?  I check the current master branch and do not find any related log.. Maybe this is that SDWebImageRefreshCached options bug. It will use NSURLRequestReturnCacheDataDontLoad so that if you load the same URL twice, a error from NSURLSession will provided. This bug has been fixed in 4.1.2(4.1.1 is not recommended to use) and please try again.. Please use our issue template and provide the information about SD Version, OS Version and others.\nThis issue is about header files. Try check whether you have import that SDWebImageManager.h or that SDWebImage.h umbrella header.. @HTOne This method selector has been renamed during 4.0. You can check that SDWebImage-4.0-Migration-guide and do migration.. This method has been removed since SD 4.0. Try to learn SDWebImage-4.0-Migration-guide.md. There is one issue. Our sd_internalSetImageWithURL:placeholderImage:options:operationKey:setImageBlock:progress:completed:] call that setImageBlock block and completed block in main queue. This means this is an implicated order guarantee that the completed happend after setImageBlock. So you can retrive the image from imageView in completed block.\nSo, if we simply change that setImageBlock which create FLAnimatedImage in a global queue. This will break this test testFLAnimatedImageViewSetImageWithURL.\nexpect(imageView.animatedImage).toNot.beNil();\nBecause this main queue check will happend before that setImageBlock set FLAnimatedImage into imageView. So this maybe a problem. I will not simply remove this check code and leave here for further discussion.. @bpoplauschi Done. I'm carefully refactoring this code. (Since there are maybe something race behavior and race condition). If you think the behavior is changed from previous version, I can check it.. After some consideration, I advice that we should add SD_GIF macro. Why to add this ? Consider this use case:\nUser's Podfile:\nruby\npod 'SDWebImage/Core',\npod 'FLAnimatedImage',\nThis time we don't have that FLAnimatedImageView+WebCache.h/m files(And even with GIF subspec, maybe the user forget to import this category). When the user call sd_setImageWithURL: on a FLAnimatedImageView. What will happen ? The setImageBlock will happend on global queue(Even our user does not realize this). Then UIKit will complain about this and bite our user :)\nAlso, use that NSClassFromString is not always a good idea since it does not contain any compiler protect if things change. With that macro, we can safely import header files. (Currently it just support iOS but not tvOS & watchOS & macOS).\nMoreover, besides this change, I write some comments about a way to enable full GIF on all UIImageView instance(including FLAnimateImageView) since now we can add custom decoder. For all three cases, you can achieve each of them:\n\nSupport GIF only on FLAnimatedimageView instance(Recommended):\n    Coders: @[ImageIOCder]\n    Podfile: With SDWebImage/GIF subspec\nSupport GIF on all UIImageView instance:\n    Coders: @[ImageIOCoder, GIFCoder]\n    Podfile: Any\nDo not support any GIF(Just one frame):\n    Coders: @[ImageIOCoder]\n    Podfile: Without SDWebImage/GIF subspec\n\nAnd also, even on tvOS & watchOS, user can decide to add GIF support. Previously we could only support GIF on iOS(need FLAnimatedImage) and macOS(NSImage native support).. Also, for GIF performance without FLAnimatedImage, things is now different from the old history. Now we have coders. User can add some compression or frame extraction algorithm to reduce memory usage and enhance performance through custom coders.\nMore importantly, since coder is a class but not category, we can also add some property config like maximumDecodingBytes or maximumImageSize to our built-in SDWebGIFCoder. User can also eaily subclass our coders to create their own. If our user could find a better solution about GIF decoding and we easily can accept their idea and merge back to upstream.\nCurrently we should keep our default coders to @[ImageIOCder]. But maybe someday we can change it to @[ImageIOCoder, GIFCoder] if we could solve that performance issue.. @bpoplauschi\n1. Oh I forget that macro define in our xcode project. Can you help me to add this to this branch because maybe you're more familiar to our project setting. As for naming I just call it SD_GIF because the subspec called GIF. Simce this define is not exposed to our user. If you like, you can call it SD_GIF_FL or something more readable. This is not a big thing \ud83d\ude00 \n2. Well, I mean we can merge user's contribution about our built-in coders. For GIF, maybe I can check and provide some review or idea. :). @bpoplauschi If we add a option in our sd_setInternal API. Well it do not need any extra macro. But I don't suggest that warm block design. As for me, I will add a new arg called options which is a NSDictionary. And there are maybe a option key called SDWebImageInternalSeImageInGlobalQueueKey...Then we check that to specify target queue.\nSorry to bother but I'll check it tomorrow. Maybe we should make more discussion. If you agree with this proposal, maybe I can pick this commit without that GIF macro to create a new one based on new API.. Maybe we should square these commits. If you think this is well enough (Test && Something little things like comments grammar). You can ready to merge :) . @bpoplauschi It's better to merge it to master soon. And I may need a little more time(less than one day) to review other changes marked 4.1.1 milestone again. After that I think a patch version is more suitable.. If you use the legacy 3.7.x version. Please upgrade to 3.7.6 or 3.8.2.\nBut because we do not maintain any version before 4.x ever, it's strongly recommended to upgrade to 4.x version (currently latest versionis 4.1.2 and fix lots of crash). Following SDWebImage 4.0 Migration Guide to start.. @bpoplauschi Well. I don't mean any crash. And I think this will not cause a crash because it's looks safe with only one writer and multiple reader. I mean this may cause some issue in logic. For example, when the writer submit a block, this will be delay but currently all the readers can get the wrong result. It's not really safe to use one writer and multiple readers in multi-thread environment, in practice. Only all read is actually safe...Expect it's really performance-sensitive.\nAnd I suggest, for one writer and multiple readers, it's not recommended to use dispatch_barrier_async for writter and dispatch_sync for reader. This will cause a dead-lock in some cases(This is because of GCD Thread Pool limit of 64 threads, I can tell more detail information later since it's midnight in my local timezone \ud83d\ude34 ). We should use pthread_rwlock.  You can try this demo project about reader-writer thread safe. Try set that reader: writer greater than 3:1 and you will trigger dead-lock for GCD. \nDemo : https://github.com/dreampiggy/ThreadSafeTest\n. Oh...maybe this is related to that #803 ? A dead-lock ? Maybe I can try to investigate later.. @bpoplauschi https://stackoverflow.com/questions/15150308/workaround-on-the-threads-limit-in-grand-central-dispatch\nGCD use a thread pool to manage the threads to manager your block submits to the queue. But it has a max threads limits in global. For some cases like this approach to read-write-lock. It will trigger the max limits of threads and no more thread can be created. So that GCD will notice that system resouce is exhausted. And write all that threads to end and dispatch the newly block. But the all threads can not release the resource. Then a dead-lock will occur.\nSo how to trigger this case ? Currently I found that if you can use dispatch_sync with more than 64 times (This will simulate a situation that alll 64 threads is locked and wait for resource). meanwhile there is a barrier used dispatch_async(This will simulate a situation that a new GCD resource may be available) . Then this will cause a dead lock.\nobjective-c\n- (void)testAll {\n    int loop = 30; // if loop * read > 64, the dead lock may occur. Higher loop will have a high rate \n    int write = 1;\n    int read = 3;\n    dispatch_queue_t barrierQueue = dispatch_queue_create(\"barrier\", DISPATCH_QUEUE_CONCURRENT);\n    dispatch_queue_t concurrentQueue = dispatch_queue_create(\"concurrent\", DISPATCH_QUEUE_CONCURRENT);\n    for (int i = 0; i < loop; i++) { // why to place in a loop is to simulate a random add read/write block because GCD will execute the block immediately\n        for (int j = 0; j < write; j++) { // writer\n            dispatch_async(barrierQueue, ^{\n                dispatch_barrier_async(concurrentQueue, ^{\n                    NSLog(@\"%@\", @\"write\");\n                });\n            });\n        }\n        for (int k = 0; k < read; k++) { // reader\n            dispatch_async(barrierQueue, ^{\n                dispatch_sync(concurrentQueue, ^{\n                    NSLog(@\"%@\", @\"read\");\n                });\n            });\n        }\n    }\n}\nWhen the dead-lock occur. All the GCD thread stacktrace will stay at libsystem_kernel.dylib__ulock_wait:. And they wait for GCD thread pool manager to release this lock(But sadly, no new resouce avaiable and they wait forever).\n\nSo, it's not recommend to use GCD to approach that read-write-lock synchronization algorithm. A better solution is to use pthread_rwlock. This is a more safe way to do this.. Now, look at our code:\n-[SDWebImageDownloaderOperation cancel:] is that reader. It can be called from -[SDWebImageDownloader cancel:]. This is a concurrent enviroment.\n-[SDWebImageDownloaderOperation reset] is that writer. It can also be called from SDWebImageDownloader. And this is also a concurrent enviroment.\nThis situation is normally OK. But in a really rare case\uff08for example, user call cancel manually in concurrency and user use prefetcher and manager concurrently with many same URLs at the same time) . This can cause a dead-lock. I personally not face this situation, but #803 may be a case that match this dead-lock. I advice to switch from that barrier queue in SDWebIamgeDownloadOperation  to pthread_rwlock. This can keep the read-write-lock performance and may solve this problem.. @bpoplauschi Need more investigation about this one. I prefer to use pthread_rwlock instead of barrier_queue. But since the case is really rare(hit the 64 threads limit), we can keep the current solution. Close now. :). Closed due to that UIImage+GIF has been changed with previous animation support. And then it will not cause nil since it check UIImage instance in each loop.. My mistake. This change looks good. Since only valid URL will be parsed and check pathExtension, otherwise fallback to only the MD5 of string without any suffix.\n\n~~~Well. For this https://maps.googleapis.com/maps/api/staticmap?center=48.8566,2.3522&format=png&maptype=roadmap&scale=2&size=375x200&zoom=15~~~\n~~~[NSURL pathExtension] will return an empty string \"\". But then it will fallback to [NSString pathExtension]. So this is not a good test case. Any other cases that will benefit from this change ?~~~. @thechaudharysab Could you please more detail information or maybe a demo project since this looks strange. Our demo project work well with that completion block.(It's a tableView with reused cells. Which is nearly the same case as you provide). I think it's because the image instance is dealloc because we do not keep a strong reference for UIView instance. Since you create a temp imageView instance during a loop, this could happen.. @bpoplauschi I'm a little late. But thanks for your review with this comments. \ud83d\ude03 . @bpoplauschi I have a idea. That this GIF image encoding processing can let it work for creating Animated Images for whatever images on macOS. Such as Animated WebP. I found that HCImage+BPG have already use this idea. (What I previously not even take awareness on, but suddentely get the inspiration \ud83d\ude04 )\nTherefore, I think I can try to achieve this feature. Since now we have aniamted GIF and WebP. I think I should make this process more universal and abstract because there is no difference if you have a array of imageRef with its frameDuration. I can make two new Helper function (in our current SDWebImageCoder.h) to decoding animated images and encoding animated images for all platform without copy and paste code again and again. Just refactor code. The interface may looks:\n```objective-c\n/**\n Return animated image with images array which applyed the durtaion for each frame fix and used for UIAnimatedImage for UIKit or NSImage for AppKit\n The reason we need this fix is that UIAnimatedImage does not support setting duration for each frame(Thanskfully NSImage can achive this, but we can provide the same abstract interface)\n It just use the average duration by dividing the total duration, so we need this fix to keep animated images work\n@param images The original images array\n @param durations The durations array for each image, the count must be equal to images array\n @return The animated image\n /\nFOUNDATION_EXPORT UIImage * SDAnimatedImageCreateWithImagesAndDurations(NSArray images, int const * const durations);\n/**\n Return the original images array which un-applyed the duration for each frame fix and output durations\n This is the reversed method for SDAnimatedImageCreateWithImagesAndDurations\n@param animatedImage The applyed fix animated UIImage with images array or animated NSImage\n @param durations The pointer to the durations array output\n @return The un-applyed images array\n /\nFOUNDATION_EXPORT NSArray SDCreateImagesAndDurationsFromAnimatedImage(UIImage * animatedImage, int * const durations);\n```\nOr do you have a some better idea ? This API looks a little ugly because we need a array of \\<Image, Duration> pair(Or tuple in Swift). Maybe create an new class called SDImageFrame which have two properties image(or imageRef), duration is better ?\n```objective-c\n@interface SDWebImageFrame\n@property (nonatomic, strong) CGImageRef imageRef; // current frame's imageRef\n@property (nonatomic, assign) int duration; // current frame's duration, in milliseconds\n@property (nonatomic, strong) NSDictionary property; // current frame's extra information, such as thumbnail, meta information.\n// I think this can help not need to subclass and down-side cast to get extra information in their own decoder\n@end\n// then we can change the interface to this ...\nFOUNDATION_EXPORT UIImage * SDAnimatedImageCreateWithFrames(NSArray );\nFOUNDATION_EXPORT NSArray SDCreateFramesFromAnimatedImage(UIImage * animatedImage);\n```\n. @bpoplauschi Sorry that GIF encoding method compile failed on macOS. I'm fixing it. Another PR is prepared. \ud83d\ude22 . @bpoplauschi This bug was found during that original progressive webp encoding's PR. I test with iPhone device it works fine. So I think this may be a iPhone simulator bug. But accidentally I try progressive webp decoding on macOS. It also trigger this bug. So I finally find a tricky way to fix it(looks good) and submit a bug report to WebP community. \ud83d\ude2b . @bpoplauschi Please check the new commit in #2047. https://github.com/rs/SDWebImage/pull/2047/commits. Strange that test failed. I'm checking...Do Not Merge. Place a autoreleasepool into that loop will that some of  C struct pinter released. The generated WebP file is not valid at all. Strange. So keep it here. I'll close this PR :). @lastcc Yes. To scale down image for Image/IO supported format(JPEG, PNG, GIF and so on, without WebP), we can use Image/IO's API CGImageDestinationAddImageFromSource and change kCGImagePropertyPixelWidth properties to scale down the image format. But our built-in coder has previously a decoding and decompressing logic so we just keep it.\nIf you need this , you can try our 4.2.0 and above version ,which support custom coder and you can build your own.. Actually, [UIImage imageWithData:] do nothing without just leave a placeholder to indicate that this image bitmap is not ready. When you se this kind of UIImage toUIImageView`. It will try to decoding immediately and your memory usage will increase.\nBut SDWebImage its most case is to directlly set image on UIImageView and we do not want this decoding happended on main queue to block UI. So we introduce shouldDecompress option, which will decompress image on the background queue before set image. So you will see the memory increase.\nSDWebImageScaleDownLargeImages is based on shouldDecompress and will try to scale the large resolution image (only JPEG format) to small resolution image. (But this code seems not update to the latest iOS devices :) ). Yes. Known behavior since that FLAnimatedImageView need the raw NSData to play GIF but not UIImage. So the first time you download that image from network and we have NSData to feed FLAnimatedImageView. Then, if we grab the cache from disk, the data is nil and we could only show the first frame UIImage.\nCurrently 4.1.x seems have no choice to solve this issue. Maybe we should try another way to fix this.(Such as make a wrapper to that FLAnimatedImage since it's not subclass from UIImage ?) Currently I recommaned to disable this option and set a limit on cache size through SDImageCacheConfig.\nOn our developing 4.2 version, we can now support all UIImaegView with GIF as well through custom coders. This may solve this issue because if we have no data, we can feed FLAnimatedImageView with UIAnimatedImage. But I think it's not good enough because it lose the performance benefit from FLAnimatedImage itself.\nKeep this issue on until we can find better solution.. If you're still in concern about this issue, try to see #2140 about our implementation which replace the FLAnimatedImage by our own SDAnimatedImage, which is a UIImage subclass and can cached into memory. \ud83d\ude00 . It seems that #2181 use a tricky way(Associatd object to bind FLAnimatedImage to the UIImage) to store in memory cache. That also solve this problem.\nTo tell the truth, FLAnimatedImage have some limitation on animated image rendering. So in 5.x we'll use our SDAnimatedImageView instead. The FL category may still be provided by some other ways (Like seperate that subspec to another repo). Any idea about this ? For carthage, do we have some ways to config build target like Cocoapods' subspec behavior ? Must we create seperate scheme for different subspec ?\nIn fact, this will be more problems: What can I do if I just want Core && WebP subspec using carthage. Considerate all the subspec, there will be3(subspec count)! == 6 combination. Which is really tricky. . It seems that SDWebImage 5.x does not really need FLAnimatedImage for animated image rendering. And I've remove the tricky code specify for FL, see #2162. Then can we seperate FLAnimatedImage into a different project(Create a different pod) ? I think this can make the library more easy to maintain and avoid carthage import the FLAnimatedImage as well.\nFor WebP, this seems you can do this by undefine the SD_WEBP by override GCC_PREPROCESSOR_DEFINITIONS using Carthage's XCODE_XCCONFIG_FILE\nFor MapKit, this seems we should do more stuff for this, currently just keep for discussion. Does a Cartfile with that git \"https://chromium.googlesource.com/webm/libwebp\" \"v0.6.0\" successfully work ? Carthage build will automatically download the git repo of libwebp and build ? But there are no any xcproject. For dedicated WebP repo, from current coder architecture, it's possible because each image format decoder are separated like a plugin. We can just move all WebP code into a dedicated repo.\nMapKit support is quite simple, I guess the most of reason some user want to build without MapKit, it's because of App Store review (I'm doubt of that). See ReactiveCocoa and the reason they create ReactiveMapKit. \nhttps://github.com/ReactiveCocoa/ReactiveCocoa/pull/3524\nhttps://github.com/ReactiveCocoa/ReactiveCocoa/issues/3521\nI'm typing on mobile and going to sleep now...The reply may take longer...\ud83d\ude05. Well...Mistake \ud83d\ude05 . @bpoplauschi \n\nupdate our demo to include one HEIC image (maybe even a test)\n\nBad news. iPhone simulator does not support HEIC decoding or encoding :) We should ask Apple to add this. (Or maybe we can something to make macOS 10.13 env to test this ? Travis-CI ? )\n\nfind a way so that SDWebImageImageIOCoder returns false for canDecodeData if the OS doesn't support it, so that it somehow pops up to the user of the library\n\nAs I say, we need write something code like that if (@available(iOS 11, macOS 10.13) && [self MacOriPhoneCPUIsA10FusionAbove]) to allow encoding. I'm also confused about this limit :)\nIn fact, I think we just add this for convenience. But we can create a actually coder through custom coder's repo. This HEIF decoding also provide a open-source impl: https://github.com/nokiatech/heif. If someone really need this to support all platform, it can be used. @bpoplauschi Well. I means I wound not add kUTTypeHEIF to sd_UTTypeFromSDImageFormat. This returned type will be used for that ImageIOCoder's encodedDataWithImage to let Image/IO encode to target format. So for decoding, it will automaticlly adjust. But for encoding, it would not encode to the HEIF format. Currently our encoding is rare used. (Only when call -[UIImage(MultiFormat) sd_imageDataAsFormat:]  and that shouldScaleDown in ImageIOCoder).\nOr I pick one suggestion. For sd_imageDataAsFormat which is called from our user. We do not check and just use that format. For shouldScaleDown, we filter that HEIC's format since it's already smaller compared to PNG/JPEG. @bpoplauschi Last question, HEIC format will fallthrough during sd_UTTypeFromSDImageFormat and finally is kUTTypePNG, so this will cause our ImageIOCoder encode UIImage to PNG format but not HEIC format :)\nBut now I found it's really easy to detect HEIC compatibility without tricky code. So this time maybe we can do it as we like.. @bpoplauschi I means my first commit :). I do not add any case to that sd_UTTypeFromSDImageFormat so it will become kUTTypePNG.\nIf our ImageIO coder received canEncodeToFormat and return YES for SDImageFormatHEIC, then encodedDataWithImage will try to encode target UIImage with PNG format. This not sounds really good as we expected. This encoding method can be called from user. I prefer to return nil if we can't encode this instead of return a PNG image data.. @bpoplauschi No. If user set encoding format set HEIC. But the target device or system does not support this format, then return nil. This is more reasonable to avoid wrong logic.. Well. I found that Apple does not care about this file container type and brand. If you create HEIF image with HEVC codec and set brand to mif1 but not heic. This can also be decoded by Image/IO. \nThis behavior seems not obey what it says (HEVC-codedc based image should called HEIC but not HEIF, which is for any other codec). But since this case is not really common, currently I think we do not need to add one SDImageFormatHEIF because it's not fully supported by iOS.\nThe reference is here: http://nokiatech.github.io/heif/technical.html\nAnd also, different brand have different file magic code. I should also add these 3 one. Including ftypheix(Extended) ftyphevc(Animated, But we just grab the first one), ftyphevx(Animated Extended) to that detector.\nAnd, please not hurry to release 4.2.0 version :). A little more code \ud83d\ude05  Most code is just move from one place to another. Maybe you can review them through commits.. @bpoplauschi You just relaesed 4.2.0 ? :) Wait...Even you do not merge this soon, please fix that iOS 8 API about kCGImagePropertyOrientation because our minmum deployment target is still iOS 7.\nAnyway, I think this is not a break change because it's a continue work after that coder refactor. Previously I move some code in that SDWebImagCoder global C function , which is not really good if you want to build your own coder. And since this changes only affect the build-in coder(The changes is not so different, just move code :) ). So I advice to add this one to 4.2.0 milestone. \nIf we released this with that old SDWebImageCoder functions, I think it's not really easy to build your own one, isn't it \ud83d\ude05 . @bpoplauschi kCGImagePropertyOrientationUp this is iOS 8 above API. Previously it's just a NSInteger number, but we missed that during refactor and change it to the enum. So this is the problem.\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageImageIOCoder.m#L521-L587. This fix: https://github.com/dreampiggy/SDWebImage/blob/8f25f677dbd0a58747e6aca995ab276b31c3c61a/SDWebImage/SDWebImageCoderHelper.m#L179-L249. @bpoplauschi This one: https://github.com/rs/SDWebImage/pull/2085. @bpoplauschi I can change this to not break API since 4.2.0. Just leave previous C global function in SDWebImageCoder and move the new helper function to that SDWebImageCoderHelper class :). Could I mark this to 4.2.1 milestone ? (Also, @Pearapps may need this helper function to make their coder works better from #2084 ).. @bpoplauschi Done. Revert the changes which breaking the public API. All new helper function is available in that SDWebImageCoderHelper class.. I think you should add this by your own category. This SDWebPImage is not UIImage subclass. So this is not usefull for SDWebImage main procedure. You can build this from custom SDWebImageWebPCoder\nIf you really think that the original WebP frame is important. You can even convert back this GCD patch by using that + [SDWebImageCoderHelper frameFromAnimatedImage:]. Or to create a new one. This is a category so maybe it's not a good place to put that UIImage un-related things :). Anyway. What about this methods ? https://github.com/dreampiggy/SDWebImage/blob/feature_refactor_and_animated_webp_macOS/SDWebImage/SDWebImageCoderHelper.h#L30-L48\nAnd maybe a class more universal, like this one:\nhttps://github.com/dreampiggy/SDWebImage/blob/feature_refactor_and_animated_webp_macOS/SDWebImage/SDWebImageFrame.h. @Pearapps I'm trying to make that commit to 4.2.1 milestone. Since that commit does not catch up the 4.2.0 release. :). @Pearapps That commit has merged into master and release 4.2.1. For your usage, please try to call + (NSArray<SDWebImageFrame *> * _Nullable)framesFromAnimatedImage:(UIImage * _Nullable)animatedImage on the UIImage which returned by WebP or GIF coder. Just grab the actually frames without previous greatest common divisor duration patch(This will return nil for non-animated image) \ud83d\ude04 . @Pearapps Is your use case have WebP process for custom UIImage subclass ? You can even build your own coder by subclassing SDWebImageWebPCoder. And override the decodedImageWithData method. This is more useable if you have custom UIImageView subclass with animation support (Like FLAniamtedImageView)\nobjectivec\n- (UIImage *)decodedImageWithData:(NSData *)data {\n    UIImage *webpImage = [super decodedImageWithData:data];\n    NSArray<SDWebImageFrame *> *frames = [SDWebImageCoderHelper framesFromAnimatedImage:webpImage];\n    // Maybe you have your custom UIImageView subclass with custom UIImage subclass to allow performent animated renderinig\n    MyOwnAnimatedImage *image = [self transformFrameToAniamtedImage:frames];\n    return image;\n}. @Pearapps Yeah. SDWebImage is focused on UIImage's category and for that sd_setImageWithURL: method, we must call back a UIImage (or subclass) instance or this should be treated as an error.\nIf you do not want an UIImage at all, you can try to totally custom coder to perform this. This coder plugin can bypass all SD procedure. You can use your imagination to do so.. Exception: XML parsing failure\nThis may because that EXIF metadata is not valid format. Maybe you should try to repairt this images' EXIF metadata.\nFor client, I think this method is not marked throwable but Image/IO did this. You can temporary add a @try and @catch to avoid this.\n\n. Duplicated for #919 #943. This is a debug only exception when you set All Exception: __cxa_throw in C++. Image/IO will handler this exception and will not cause any problem. You can unmark __cxa_throw and keep objc_exception when you debug. \nThis is also happend during AVPlayer framework, just ignore this one.\n\n. Well. I talk about this in previous PR. This new public API is currently useless for SDWebImage framework itself. Because inner procedure do not need this framesWithData: method during image downloading, decoding and caching. So it should be treated as own user's own business logic. So I advice not to merge this into master.\nIn fact, you can easily build this custom coder. Just create your own category or subclass.  You can try these code:\n```objectivec\n@class SDWebImageFrame;\n@interface SDWebImageWebPCoder (FrameProcess)\n\n(nullable NSArray  )framesWithData:(nullable NSData )data;\n\n@end\n@implementation SDWebImageWebPCoder (FrameProcess)\n\n(NSArray )framesWithData:(NSData )data {\n    UIImage *animatedImage = [self decodedImageWithData:data];\n    if (!animatedImage) {\n        return nil;\n    }\n    return [SDWebImageCoderHelper framesFromAnimatedImage:animatedImage];\n}\n\n@end\n```\nFor a framework design, we should not add every method to allow user hook or something. Different users may have different use cases. If one function can be easily processed and not a common requirement, it's not recommaned to add to master repo. Because after that, this will marked as a public API and then you should obey semver to maintain it during a framework further development.. @Pearapps ? You mean framesFromAnimatedImage: ? This unapply the gcd frame patch for the UIImage. See the description:\n```\n/**\n Return frames array from an animated image.\n For UIKit, this will unapply the patch for the description above and then create frames array. This will also work for normal animated UIImage.\n For AppKit, NSImage does not support animates other than GIF. This will try to decode the GIF imageRep and then create frames array.\n@param animatedImage A animated image. If it's not animated, return nil\n @return The frames array\n */\n```\nIn fact, these two methods are reverse process. They are provided to help user do custom animated image decoding / encoding.. Maybe that document comments is a little misunderstanding? Need to add extra documents or wiki for this. \ud83d\ude05 . HEIF and HEIC is not the same, it a proper subset. HEIC is one type of HEIF image which use HEVC codec. So the HEIF image use AVCI codec does not represent HEIC image and can not be decode by Apple's iOS 11 software/hardware decoder (maybe future someday). Learn here: http://nokiatech.github.io/heif/technical.html\nThe comments there just a tip and the value for that is the same as what AVFileTypeHEIC constant value.\nIf you'd like just fix some comments, it OK :) We do not want to add dependency to AVFoundation right now. So we just define that constant here.\nIf you mean to add AVFileTypeHEIF. We should also add one new SDImageFormat SDImageFormatHEIF to represent all the heif format.. After a real device test, the previous comments is totally right. iPhone 6 with iOS 11 also define this constant in AVFoundation as well. There is no that and A9 above CPU(iPhone 7 above models) limit. But it just means that if you try to encode a CGImage with these two kUTType, CGImageSouceCreate will return nil. \nSo using AVFileTypeHEIC on iPhone 7 below with iOS 11 will not cause any dyld error. We do not need to modify that comments.\nAVFileTypeHEIC: \"public.heic\"\nAVFileTypeHEIF: \"public.heif\". Maybe this is true. This code was changed during last 4.2.0 refactor which increase the GIF performance by moving set-image-block to global queue. But at that time we didn't find this internal changes to queue order.(We dispatch that queue instead of check current thread) This should be changed to this:\nobjectivec\nif (shouldUseGlobalQueue) {\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n        [sself sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock];\n        dispatch_main_async_safe(callCompletedBlockClojure);\n    });\n} else {\n    dispatch_main_async_safe(^{\n        [sself sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock];\n        dispatch_main_async_safe(callCompletedBlockClojure);\n    });\n}\nMaybe I can create a more common macro such as dispatch_queue_async_safe(queue, block) which check dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL) is equal to queue's label (This means whether queue is current queue) and then just immediately call that block instead of dispatch_async to submit it to next run loop. @pmiaskiewicz Please have a look at this #2093. @yichengchen Are you using the latest 4.2.2 version? And could you please create another issue and provide a little demo. I think maybe we enter something wrong with last performance enhancement about #2047 . ```\n\npo error.localizedDescription\nThe operation couldn\u2019t be completed. (NSURLErrorDomain error 404.)\n```\n\nYou should replace that :80, use http://ibwp6w.natappfree.cc/realty/image/20171103/150969678804800005.jpg instead\nOr to contact to that image server provider to identify the issue.(I think it's Web backend proxy's issue since the request header is actually valid). > contact to that image server provider to identify the issue.(I think it's Web backend proxy's issue since the request header is actually valid)\nThis is not what a bug or something. The request has sent to your server, but it respond 404. You can check the difference in request between two clients using Charles or Wireshark(Network Debuggin tool) and find the reason.. Our iOS & watch & tvOS &macOS demo both add SDWebImage.framework to link binary with libraries but do not copy that framework to application bundle. So this will not run on real device because it's a dynamic framwork(not linked to binary itself) and will not be able to run if you do not debug in iPhone simulator. \ud83d\ude05 \nSo that I add this and allow run on real device and iPhone simualtor without debugging. @mqzkim Reproduced. This is because of a bug that will cause set-image block to schedule on next runloop instead of call immediately. So that automatically set-image block will then call setNeedsLayout. If this happend during one runloop (which means we call that block without dipatch_async to add to end of main queue), then your override layoutSubViews will not called by UIKit. But if we put this to the end of main queue. UIKit will recognize this as a new draw call and then call your layoutSubviews. Your layoutSubviews will trigger a new sd_setImageWithURL. So finally this will cause infinity loop. You can try to debug and see this:\n\nBut for UICollectionViewCell only ? Interestring, this may be something related to UIKit update cycle algorithm and we can't change.\nThe related bug is here: #2092 , it exist during SD4.2.0 ~ SD4.2.1. It has been fixed on the master branch via #2093. But currently we do not release this. You can try to modify your Podfile to point to the master branch and retest(be sure to run pod update and reinstall demo app to clear image cache). I tested it and now it's OK.\nruby\npod 'SDWebImage',  git:'git@github.com:rs/SDWebImage.git', :branch => 'master'. @bpoplauschi Any plan to release another patch version for 4.2 :) ?. Can not reproduce. What's your usage or a demo project ?\nAnd please fill the template about information , or maybe we could not provide more help for this.. @bpoplauschi This 64 bytes is not about OS Architecture. It's about Image format(ARGB). I tested that if you pass 0 or create CGImage with Image/IO, it's all 64-Bytes Aligned.\nAnd, as I say, maybe we do not need to do this since we can pass 0 here. This value can be automaticlly calculated by Core Graphics. You should only calculate yourself if you provide custom decode array.(See that Apple docs descriptions about CGImageCreate). OK. Try your demo and it looks the same as that screenshot.\nI think our FLAnimatedImageView intergrate is something wrong. After our performance enhancement changes, this will cause UIKit render in seperate draw call and have a blink.\nLet's see the logic, assume you have downloaded a GIF and save to disk cache.\nWhen click reloadData, all things begin:\nStep 1: SD will setImage with a placeholder, but default is nil, so it then trigger [setImage:nil] and [setAnimatedImage:nil]. This is a immediately call without any async wait or queue switch.\n\nStep 2: SD fetch the data from disk cache(async function), and create a FLAnimatedImage from global queue, then dispatch to main queue and trigger [setAnimatedImage:gifImage] and [setImage:nil].\n\nThis looks normally OK, unless you call something to force UIKit draw call. For example, [CALayer setNeedsDisplay:]. This will trigger UIKit(Core Animation) to render immediately. Step 1 here, image is a nil and so it will clear anything. And then Step 2, GIF image is set, it then draw the first frame. So finally there will be a blink. See this code in FLAniamtedImageView.\n\nPreviously, it all happend into main queue(whatever setPlaceHolder with nil, or setImageWith gifImage). So UIKit(Core Animatition) is smart enough and will not actually render between these two call (But actually, I don't know more about this draw call logic. These two set image will not on same run loop because load disk cache is async function, so these must be a little time wait). If you comments that line:128 [self.layer setNeedsDisplay];, this should not blink. But this is a bad idea maybe not follow what FLAnimatedImageView designed usage.\nMaybe we should find a way to avoid this. For example, if setPlaceholder with nil, do not immediately trigger [setAnimatedImage:nil] ? Any idea about this one ?\nIf we can't find a way to avoid this, maybe it's time to roll back code \ud83d\ude22 \n. @yichengchen Any way to fix this ? Maybe we should disable that config shouldUseGlobalQueue to NO by default. Or we can give that options to users. ?\nThis will not blinking when you scroll and cell reusing, but only for reloadData. In fact, I think some user may prefer that frame rate enhancement to this disadvantage.. I think we have no way to fix this by current design. I'll explain the reason.\nThis Blinking is just two rendering state of that imageView.\n\nAfter you call sd_setImageWithURL: without SDWebImageDelayPlaceholder, it trigger self.image = placeholder(Your example placeholder is nil), and UIKit are trying to clear all the content of that UIImageView\nAfter we get the image and data, we call setImageBlock. Then it trigger self.image = cacheImage\n\nUIKit have a rendering cycle. It means that UIKit will commit all your changes to specify view during the same run loop together, and rendering to screen. So, if these two process is on same runloop, it will only show the last state. If not, it will show twice(looks like a Blinking).\nSo, why previous version not Blinkiing ? Because we put all function call into Sync on main queue to make sure same runloop. Looks at the code here:\n```objectivec\n- (nullable NSOperation )queryCacheOperationForKey:(nullable NSString )key done:(nullable SDCacheQueryCompletedBlock)doneBlock {\n// ...not related\n    // First check the in-memory cache...\n    UIImage image = [self imageFromMemoryCacheForKey:key];\n    if (image) {\n        NSData diskData = nil;\n        if (image.images) {\n            diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n        }\n        if (doneBlock) {\n            doneBlock(image, diskData, SDImageCacheTypeMemory);\n        }\n        return nil; // return here\n    }\n// ...not related\n}\n\n(nullable NSData )diskImageDataBySearchingAllPathsForKey:(nullable NSString )key {\n    NSString defaultPath = [self defaultCachePathForKey:key];\n    NSData data = [NSData dataWithContentsOfFile:defaultPath options:self.config.diskCacheReadingOptions error:nil];\n    if (data) {\n        return data;\n    }\n//...not related\n}\n```\n\nWhen a image is cached into memory, we load disk cache synchronously by [NSData dataWithContentsOfFile:]. So that actually, all these code are on main queue. So finally it trigger the setImageBlock. UIKit mark these two state and only rendering the last one because they are in the same runloop.\nBut after that FLAnimatedImageView perfermance enhancement, we change that setImageBlock from main queue to a global queue. This will make a queue switch and mark it to next runloop to run. So the two states will all be rendered. It will have a fast Blinking, one for placeholder(Your example is nil, means clear color), one for finally image.. The reason why we try to optimise that setImageBlock for FLAnimatedImageView is that we need FLAnimatedImage to feed it for GIF image. But it's not a subclass of UIImage. So it will not be able to cached in our memory cache since our memory cache is just allow <NSString, UIImage> pair. When you cell with FLAniamtedView reused, we need to create a new FLAniamtedImage instance each time. You can check that FLAniamtedImage code to find that the create cost is not really small. All that create time is happended into main queue, means it reduce your cell scroll frame rate.\nWe want to enhance that performance issue through dispatch the setImageBlock to global queue to avoid it block main queue and increase the frame rate. But sadly, as I talked above, it's could not be solved because it's by design. We should give up this enhancement way. I think we could just firstly disable that shouldUseGlobalQueue. Leave it as a customable value for our FLAniamtedImageView+WebCache category or a new SDWebImageOptions(I preferred the last).\nThen, we can consider some other way to reduce that extra FLAniamtedImage cost on main queue. I think these direction can be taken, but all of these need a lot of work to do, this will not be marked 4.x, but can leave here for further discussion:\n\nKeep that setImageBlock happened on main queue if not GIF image. But find a way to avoid that visual Blinking, such as fake the first frame for GIF. When global queue FLAniamtedImage created, set it to begin animating.\nFind a way to wrap that FLAniamtedImage to UIImage, such as a new subclass from UIImage with a property point to it.\nChange our API to allow non-UIImage instance to cache into image, and change setImageBlock with that non-UIImage instance. Maybe a new args like context or something.. For that idea 1, here is a demo code, we do not want to block main queue to reduce frame rate, so maybe we can fake the first image and dispatch to global queue to create FLAnimatedImage, then set it back to avoid visual Blinking:\n\nobjectivec\nif (imageFormat == SDImageFormatGIF) {\n   weakSelf.image = image;\n   dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n       FLAnimatedImage *animatedImage = [FLAnimatedImage animatedImageWithGIFData:imageData];\n       dispatch_main_async_safe(^{\n           weakSelf.animatedImage = animatedImage;\n       });\n   });\n} else {\n   weakSelf.image = image;\n   weakSelf.animatedImage = nil;\n}. @osbornZ See the total #2106. I've remove that setImageBlock in global way, just use a dispatch_group to manage queue order, so this demo code is not accurate. That way can ensure both queue order(completion block after setImage block) and global queue dispatch(to generate FLAnimatedImage). Fixed and PR merged via #2106. Emm......A little naive implementation for that code. Because that completion block is called in main queue and is eariler than self.animatedImage = animatedImage. So that test testFLAnimatedImageViewSetImageWithURL failed.\nMaybe we need a powerful tool for queue organization, such as dispatch_group. We need compltion block called after that setImageBlock. But we should not dispatch the setImageBlock to global queue. So the code may looks like this:\n```objectivec\n// FLAnimatedImageView+WebCache\ndispatch_group_t group = dispatch_group_create(); // create a dispatch group\nif (imageFormat == SDImageFormatGIF) {\n   // Firstly set the static poster image to avoid flashing\n   weakSelf.image = image;\n   dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n       // Secondly create FLAnimatedImage in global queue because it's time consuming, then set it back\n       FLAnimatedImage *animatedImage = [FLAnimatedImage animatedImageWithGIFData:imageData];\n       dispatch_main_async_safe(^{\n           weakSelf.animatedImage = animatedImage;\n           dispatch_group_leave(group); // leave\n       });\n   });\n} else {\n   weakSelf.image = image;\n   weakSelf.animatedImage = nil;\n   dispatch_group_leave(group); // leave\n}\n// context:@{SDWebImageInternalSetImageInGlobalQueueKey : group};\n```\nChanges for UIView+WebCahce\nobjectivec\n// this key have a `dispatch_group_t` group from `FLAnimatedImageView+WebCache`\nif ([context valueForKey:SDWebImageInternalSetImageInGlobalQueueKey]) {\n    dispatch_group_t group = [context valueForKey:SDWebImageInternalSetImageInGlobalQueueKey];\n    dispatch_group_enter(group); // group enter\n    dispatch_main_async_safe(^{\n        [sself sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock];\n    });\n    dispatch_group_notify(group, dispatch_get_main_queue(), ^{\n        dispatch_main_async_safe(callCompletedBlockClojure);\n    });\n    return;\n} else {\n    dispatch_main_async_safe(^{\n        [sself sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock];\n        callCompletedBlockClojure();\n    });\n}\n. @bpoplauschi Do you have time recently ? Maybe we can review these changes.. This PR seems kept for long time, I test it (FLAnimatedImage+GIF, FLAnimatedImage+PNG) with both tableView reload/ tableView cell reuse. All of them seems OK. So currently just merge it. If someone find bug related to this, please tell me. :). You could not acess even in Objective-C...Well, unless you use KVC or Runtime methods.\nWhat's your use case to acess that ioQueue? its should be used internal but not public.. Well...You do not want to save image into memory? Just data ? (I wonder why to do so)\nstoreImageDataToDisk:forKey have a checkIfQueueIsIOQueue check...But I do not know why it just log something but not assert so that you can still play with any dispatch queue by ignoring that log. But you'd better not use this.\nSDImageCache is not a common mem-disk cache from its design. But for disk cache, you can just use that NSFileManager API with defaultCachePathForKey to save any NSData to disk. There is no real difference between directly call. Can this solve your problem?\nOr, if you do not have any other ways. Try to use KVC in swift value(forKey:) to acess that one. Attention this is internal property so it can be changed at any update version.(Though I think this may not change in near future)\n. Don't know the reason. It's a error log from Apple's close-source JPEG decoder (Not libjpeg). Its all handled by Image/IO framework and we could not do anything. Could you please provide that image or view that with third-party image viewer ?. Counld you please provide the full stacktrace for us to analysis this issue ?\nI think maybe it's about some race condition that the prefetchURLs property has been changed when loadImageWithURL completion called. Do you call cancel outisde main queue ?\nMaybe a better solution to avoid this is to retain the NSURL instead of just subscript index from array anytime.\n```objectivec\nNSURL currentURL = self.prefetchURLs[index];\n[self.manager loadImageWithURL:currentURL options:self.options progress:nil completed:^(UIImage image, NSData data, NSError error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n        if (!finished) return;\n        self.finishedCount++;\n    if (image) {\n        if (self.progressBlock) {\n            self.progressBlock(self.finishedCount,(self.prefetchURLs).count);\n        }\n    }\n    else {\n        if (self.progressBlock) {\n            self.progressBlock(self.finishedCount,(self.prefetchURLs).count);\n        }\n        // Add last failed\n        self.skippedCount++;\n    }\n    if ([self.delegate respondsToSelector:@selector(imagePrefetcher:didPrefetchURL:finishedCount:totalCount:)]) {\n        [self.delegate imagePrefetcher:self\n                        didPrefetchURL:currentURL\n                         finishedCount:self.finishedCount\n                            totalCount:self.prefetchURLs.count\n         ];\n    }\n\n//other code\n}];\n``. @lolgear Maybe not.NSArrayalready retain yourNSURLinstance. So a copy will not work for any lifecycle improvement. So just capture is OK :). @lolgear I see. TheloadImageWithURLcompletion block is always called on main queue (current implementation, but no doc point this out). So if you try acess thatprefetchURLsproperties outside main queue by calling eitherprefetchURLsorcancelPrefetching, there may be a multi-thread race condition.. @lolgear The fix I provided #2111 will use atomic lock to ensure multi-thread-safe and retain theNSURLin advance to avoid that prepared urls changes andNSArrayout of bounds. Maybe a better way is welcomed, but this fix seemssimple and crude:). @lolgear \ud83d\ude05 You can useprefetcherQueueto ensure all the operation happened on main queue to avoid this. (Don't worry, network request is always happended on background queue using NSURLSession)...But I think a better way is to wait for a new patch version release.. @bpoplauschi Any plan to review the patches for 4.2.3 ? :). Merged. Wait for 4.2.3 release :). Merged...Tested it with a background queue by 100 requestes and seems OK. Attention that currently thread-safe is rely on thatSDWebImageManagercompletion block called on main queue(serial of cause) to modify some int value likerequestedCount. And all outside acesss are placed into@synchronized`. Maybe we should refactor this to provide a more solid solution. :). There seems no way to avoid this.\nFor image format, which is also called image container format, is a compression algorithm to encode raw image bitmap data to smaller data. So when you load a image into memory, it should be decompressed and increase memory.\nThe ImageIO_PNG_Data and ImageIO_jpeg_Data is memory used by Image/IO framework and holded by CGImage. But this can not directly used for UIImageView rendering because CALayer need rasterized bitmap. So it need be rasterized when CA rendering and use more memory to save that. It's the CG raster data.\nSD's shouldDecompressImages is used to directlly decompress CGImage create by Image/IO to rasterized bitmap in advance(before you set UIImage to UIImageView and let CALayer render). It can increase frame rate because the decompress procedure is under background queue. But this will increase memory because rasterized bitmap is larger that Image/IO's used memory.\nIf you really care about memory usage, try to reduce image size(this is a bad way in some cases). You can use SDWebImageScaleDownLargeImages or you can do this from custom coder from SD 4.2 :). Hi. Could you please attach some stack trace for us to analysis ? (Maybe from your app's crash log or some third-party services like Fabric). This looks like a multi-thread issue. That SDOperationsDictionary should have a lock or make acesss into the same queue.\nDoes the previous version SDWebImage also have this crash ? And also about the crash ratio ?(50,000 per week seems really big). @itatawy Well...We can fix it soon by make all the acess(read and write) to that SDOperationsDictionary thread-safe. Maybe in next patch version 4.2.3. I'll create a pull request later.. @itatawy The patch version may be released in a week. If you are really hurry and can ensure that the earily version crash ratio is lower, you can have a try.\nOr if you need hot fix, you can try to swizzle that method using Objective-C runtime(really not encouraged, but it's a way). You can check the #2114 for the fix. :). Wait...I have a question. Do you call any UIView+WebCache/UIView+WebCacheOperation methods from background queue ? If all the operattion happended on main queue. There should not have any multi-thread problem.. Fixed via #2132 . To say, from the UIView+WebCache and UIView+WebCacheOperation design, all the methods should be called on main queue. So this multi-thread problem is really strange. I need some more time to find out where the acess from different queue come from. :(. The reason I found, it that our user use the UIView+WebCache(including sd_setImageWithURL: and so on) category from non-main queue. In my opinion this should called from main queue. But our source code implementation and git log show that it ALLOW be called from any queue(No docs related ?). So we should also considerate thread-safe for these methods.\nTherefore, we should add this protect to avoid thread-safe problem. I don't know the time from then on we drop the protect, but it can be sure that from SD 4.0 there contains the thread-safe problem. . Change that info key with external suffix to emphasize that this can be used externally.. This can be sure have no issue. So merge it. @bpoplauschi Do you have extra time to review any other pr for patch release ? :). Please use cacheKeyFilter property in SDWebImageManager instead of this. It's more suitable and more easy to use.\nAnd this completion block should be called. Don't you get something error in log ?. If you can ensure this bug exist, then It seems that our logic is wrong in some cases. Your fix can work but it may cover up the internal reason.\nURLOperations is an array of operations. Each operations, when it be canceled or finished, it will removed from that array. See line 212 and line 243.\nCould you please provide more information about what the case you use will  trigger this BUG ? Maybe we should review the logic more carefully and find a better way to fix this :) . @JoshJacobAtHanson Thanks for your enthusiasm. And I can also review the current implementation later. I hope that we can find something related and solve this issue.. @JoshJacobAtHanson  Well. I'm come back again. \ud83d\ude05 After your decription, I'm doubting the actual reason for this.\nFirstly, your decription that canceled operations were sometimes returned here is the designed behavior. SDWebImageOperation is reused for multiple callbacks, each callbacks is represented by a token.\nSo if you call cancel: on a operation with the token, it will remove the current token, and check if callbacks array is empty, then actually cancel the operation. In this cases, sometimes you may get the same operation at that function call because the callbacks array is not empty.\nBut question is: This resulted in a growing callbackBlocks array for the operation that was never going to finish, this should not happended. Because if the operation is reused, then we just add new token to that operation. So, if the call to add and cancel is equal, this will be no problems.\nI think that this is a little hard to reproduce. If you can find a way to make it reproducable, maybe I can try to help with it \ud83d\udc4d . #2177 may provide fix for the runningOperations array. This happended when you scroll a big collection view really fast and the image are all in disk cache. If the query cache opertaion completion called duraing the cell disappear and trigger a cancel(This is for cell reuse), the race condition may occur and that operation may keep their and leaked.\nNow we do not use that cancelBlock design. We keep a weak reference to the manger instance and let manager to cancel. This can ensure the cancel to the operation have only one entry. Previouslly, the cancel may from cancelBlock or cancel method, this two entrys may not share the same lock.. Seems this enhancement need more research. Currently do not merge it. Please provide more information in our issue template. Such as system version, framework version. Or we can not help with it. You can reopen this issue when you finishing this, thanks.. 3.8.x use NSURLSession instead of NSURLConnection. Your url seems have a untrusted SSL certificate. And for SSL certificate, the behavior is changed between NSURLConnection and NSURLSession because it block all untrusted SSL certificates.\nSo you should try to handle that either by using SDWebImageAllowInvalidSSLCertificates or provide custom SSL trust chain in -[URLSession:didReceiveChallenge:completionHandler:](Maybe you can currently do this through custom SDWebImageDownloadOperation). LGTM...Merged ;). It has been fixed in SD 4.1.1(But I suggest update above 4.1.2 because 4.1.1 contains a serious bug), see: https://github.com/rs/SDWebImage/releases#4.1.1 . It seems a design issue(bug). This code logic is not changed from SD 4.0. I guess retain the previous operation can help to check if current operation has done and do some logic in previous version SD(perhaps 3.x). But current implementation do not expose any public interface to get that operation, just keep in a NSMutableDictionary and keep alive with the UIView instance. This cost unnecessary memory.\nAnd also, this code should not relay on that implementation of operations dictionary, so I suggest to keep the weakself and strongself, just add one sd_removeImageLoadOperationWithKey, to avoid later someone break things during refactory :)\nMaybe we should fix this, could you please provide a PR ?\n@Thememont . Fixed via #2132 . What's your use case ? (The description say that you only use SDImageCache, but not SDWebImage UIView category or manager ?). Maybe a sample line of code can make it more suitable for check the reason.\nAnd, could you please provide more information, such as image url sample, a demo project to reproduce is better.. @nikhilchaurasia What's that vertical bar actually ? Can this be reproduced by any demo project ?\nOr if can not, could you please use Xcode's View Debug to see the view hierarchy, or can you try to use FLEX to check whether the imageView(which appear a vertical bar)'s image contains some visual effect ?. \ud83d\ude05 This looks a little tricky performance enhancement and may break some user's usage because you modify that imageData, which is designed to be the original image data without any postprocessing.. @Silence-GitHub  See #2245. If you are facing the issue of WebP decoding speed from disk cache. You can considerate to encode the image to another format such like JPEG or PNG when storing to disk cache.. There is some reason related to this question, and I want spend some more time to talk about it.\n\nThe WebP UIImage animation duration for each frame may be wrong\n\nSDWebImage from 4.1 fix the duration per frame bug in animated WebP. It use a calculation of GCD to each frame duration and repeat the UIImage several times and finally call [UIImage animatedImageWithImages:duration:]. See #1951 and #1952.\nBut to tell the truth, [UIImage animatedImageWithImages:duration:] method will keep all the instance into memory, this is suitable for small animted WebP images and have a really fast render performance. But when you decide to show many big animted WebP images, this may cause OOM.\nYYImage, use another way to solve this issue. It create a UIImage subclass YYImage class, keep the image source into that instance. For Image/IO supported format, is CGImageSource. For WebP, is WebPDemuxer. And it also have one specify animted imageView YYAnimatedImageView. When you set a UIImage instance on it, it just show as normal UIImageView. But when you set a YYImage on it, it will use a CADisplay to render your image for each frame. It firstly decode, and then produce a CGImage through the inner image source when current frame's duration time reached.\nYYImage's way can keep that only single frame instance alive at the sametime. So can reduce large memory usage for animted images. But it also cost extra CPU usage, because of that implementation, it need to re-decoding each frame everytime even you just leave your App without doing anything(For our application, it cause 50% CPU usage on a tableView showing 10 animted WebP cells). This is a time-space balance.. So, why SDWebImage currently use this implementation ? This may because of that SDWebImage historical design usage. It forcus on Simple and Category-friendly use case. So we do not need to including extra UIImageView subclass to showing the animated images.\nBut why we now have that FLAnimatedImageView ? This is because a huge refactory during 4.0 in #1575. We include FLAnimatedImage to support GIF rendering. Sadly, FLAnimatedImage does not do something like YYImage, it does not subclass from UIImage. And it just support GIF, but not general enough to support other animted image format such as APNG, WebP.\nMaybe we can do another big refactor, to provide the same way like YYImage to support big animated images rendering. We need a new class SDAnimatedImageView and SDImage to do this. But this may cause a lot of time and we need contributers to support this feature. If someone need this, we can add a feature-request to future milestone. \ud83d\udc4d . And also, for your last question:\n\nHow can I get image data and decode animated WebP only first frame ?\n\nSDWebImage 4.2 introduce coder plugins. Which you can implement your own image decoder and encoder, see https://github.com/rs/SDWebImage/tree/4.2.0.\nSo for your case, you can just write a coder to produce a UIImage subclass instance like YYImage. Which just contains the first frame and keep that WebPDemuxer inside to decode other frames when you need.\nIn fact, since all our image decoding/encoding methods have been exposed as custom coders, you can even write a wrapper to use SDWebImage instead of YYWebImage to play with YYImage. (Sounds interesting ?). You just need to write a new category for YYAnimatedImageView, write a custom coder to directly call YYImageCoder methods, then combine them up :)\nIf you still have question about how to do this, I can write a demo provided for you \ud83d\ude05 . If you're still interested in this issue, try to see #2140. We introduce a YYAnimatedImageView like new image view SDAnimatedImgeView and SDAnimatedImage, which also take benefit from our custom coder plugins and integrate with all our lib (cache, manager, downloader, category). \nYou have the choice to use normal UIImageView+UIAnimtedImage(small images, low CPU & high memory) or SDAnimatedImageView+SDAnimatedImage(big images, high CPU & low memory) by the same interface.. @Silence-GitHub  We add a SDWebImageDecodeFirstFrameOnly options in 5.x branch. Currently our build-in coder always try to decode animated images if the original data is a animated format. You can try using image.images.firstObject to grab the first frame only. But in 4.x it seems that we can not break the current API to add a extra information to indicate that the custom coder SHOULD decode first frame only. :)\nFor more information, see #2140 . :) I'll create a SDWebImage+YYImage CococaPods with SDWebImage 5.x dependency after #2140 merged (And also, we move our current GIF subspec to another SDWebImage+FLAnimatedImage Cocoapods). You can directlly use YYAnimatedImageView+WebCache category to load animated image conjunction SDWebImage and YYImage. All the API looks the same as UIImageView+WebCache\nThis is done by mark YYImage to adopt SDAnimatedImage protocol. This is also how our SDAnimatedImageView works(You can use SDAnimatedImageView separately). And you can even feed YYImage to SDAnimatedImageView because it conform SDAnimatedImage protocol. Hope this sounds good for you.. #2140 Merged. If who are interested in that New Animated Image Solution for iOS & macOS with custom coder support. You can try 5.x branch or wait for 5.0.0-beta release. @Thememont Thanks. And also I found that -[UIImageView(WebCache) sd_setAnimationImagesWithURLs:] also have one sd_setImageLoadOperation without the remove method. Could you please check that ?\nFor unit tests, don't worry, we have CI-test to check this.. @Thememont Well...This is a problem. And this problem it's not simple, think that you provide 100 animated image urls and 99 success, but 1 failed. Should we always keep that operations array?\nI think this design is a little tricky. Coundn't we have a better implementation for this situation ?\nI found that the SDWebImageOperation instance is retained by SDWebImageManager's runningOperations property.\nobjective-c\n//SDWebImageManager line 142:\n    @synchronized (self.runningOperations) {\n        [self.runningOperations addObject:operation];\n    }\nSo this operation instance will never released only that SDWebImageManger remove that from the runningOperations. Why should we also keep a strong retain into that UIView instance through a NSMutableDictionary(which copy for key, retain for value) ? Can we replace that with a NSMaptable (which copy for key, weak for value) ?. @Thememont I create a PR about this, please have a check: #2132 . Fixed via #2131.. @Thememont What about this one ? It's this change always work in some race condition ?\nAnd I think that UIView+WebCacheOperation should not exposed to public API. It's actually a private API for SDWebImage internal usage. User should not set some other thing manually outside the framework itself :(. Well. For that - [UIImageView sd_setAnimationImagesWithURLs:] methods, it use a NSArray to store operations. But this is also tricky because for each UIImageView instance, we only keep the current download operations. So we do not need to retain that operations array. Instead, I prefer to use a weak Array - NSPointerArray to store them. If one operation is removed from SDWebImageManager.runningOperaions, it will be dealloced immediately and do not need any manually removing from UIImageView category.. @Thememont Yes. I don't know why previous version it needs these methods because I'm only familiar with current 4.x implementation. But from current description, we should remove the operation after the image loading finished(Don't say that you need to keep these, it not accessable outside after you setting it ;) ), so this implementation is more suiable for this work.. @AaronV5V5 \nThe first one is a HEIC image(file signature 6674 7970 6865 6963 - ftypheic)\nThe second one is a PNG image(file signature 8950 4e47 0d0a 1a0a - \u2030PNG....)\nSo, for HEIC images, it needs iOS 11 on real device (not simulator) or macOS 10.13, check your system requirement or customer firmware version.\nThe second one should be loaded, and it works on our demo project, you can try again and better provide more information with some screenshot or console log.\n. For iOS 11 and macOS 10.13 above, all HEIC images is natively supported by Apple's framework and you do not need do anything. And also, you can use NSData+ImageContentType to check the image foramt.\nIf you still really strongly hope to support HEIC images on lower firmware version, you need to write your own HEIC image decoder. Because it need extra library(nokia-heif to grap HEVC bitstream, and use codedc such as FFmpeg, openHEVC because HEIC image based on HEVC video codec format), it's a really huge work, so we do not provide HEIC decoder through our framework, you can write your own HEIC coder and embed with our custom coder plugin.\nTo learn how to use SDWebImage through custom coder plugin, see : https://github.com/rs/SDWebImage/releases/tag/4.2.0 and the documents in SDWebImageCoder. You can also learn some demo such as SDWebImageBPGCoder.. To say, it's better to write a wiki or some detailed documents to show how to write a custom coder plugin. But it needs a lot of time and currently I have no enough time. Maybe I need to provide one later \ud83d\ude05 . HEIC support on lower firmware is a huge work, and it need expert on multimedia decoding. It's far away from common iOS development, so it's better to let expert to do their work. My company's multimedia team write a cross-platform HEIC decoder from the scratch(use C and NEON assembly language with a simplified ffmpeg) and it takes nearly 2 months. If later someone opened source a easily-integrated library, we can try to make a wrapper.. @AaronV5V5 It's the best solution for this currently. When you use image picker to let user grab images, you should try to encode it to common image format such as PNG, JPEG and even WebP(now SD support WebP encoding :D). Then upload to the server. Or you can ask your server to do a post-transform when the image format is not supported by client.(FFmpeg's command line tools can do this work).\nMy company now use HEIC only for rare case because it's not really common and our decoder is in experiment. We upload the user provided image through WebP. Hope this can also be helpful for you.. This is a log when you call - [NSURLSessionTask cancel], it's really normal when you reload cell and the cell instance is reused(to clear previous image loading).\nIf you want to disable these log, see : https://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-logs#. :) If you really need to specify size through image itself but not the UI design max height. You should try to reload tableViewCell in completion block in sd_setImageWithURL. You don't need to resize UIImage(actually you can), you just need to change the UIImageView's frame and the correct contentMode.\nIn the most cases, we set the imageView size to a fixed size(according to UI design), and then set image to it. Let image itself scale or clip.\nIf you want to keep the imageView acutally fit the image size(sometimes this may happened), just grap the UIImage.size and update the imageView's frame. Then trigger a reloadData. @LululuSir HEIF is available on iOS 11(not simluator), macOS 10.13. Why currently we do not add this check is because in most cases, SDWebImageImageIOCoder is the last one in coders manager, which is the base coder. So even you return NO, this can have no help for image decoding.\nBut to say, if you move ImageIO coder to have a higher priority, and you have custom HEIC coder(really ? looks great, could you please provide this ?), this may be a problem. This version check seems work but not really good(hard-code). Maybe we can find another more common case like that thing on canEncodedToHEIC. See #2146. Merged by #2146. @LululuSir This check is easy to write and you can check it yourself outside our framework.\nAnd to say, this behavior is based on current system requirement and may chaned in the future. So I think it's not suitable to expose public or add any logic related to this.. To say, this is a really huge work. And I've left many non-important stuff to do such as update the documentations. So this may take a few time to merge into SD 5.x branch \ud83c\udfc1 \nI leave this into PR to let other people know the progress and better provide some review for this. If you have some idea whether about the implementation or about the advice, about new feature related to SDAnimatedImage and SDAnimatedImageView, please leave a comment here ! \u2764\ufe0f \nCurrently it passed all the test and looks well on our Demo project for iOS and macOS. But this may contains bugs in some race cases. So if you find one, report it. \ud83d\ude04 \nTo run this demo and see the code, just clone my fork repo's branch. And run the demo:\nbash\ngit clone -b refactor_coder_animation https://github.com/dreampiggy/SDWebImage.git\ncd SDWebImage/Tests/\npod install\nopen ../SDWebImage.xcworkspace/\nYou can change back the demo image view class from SDAnimatedImageView to FLAnimatedImageView to see the difference on performance and other behavior.. One thing I want to point out. I think that for small animated images(less than 800 * 600, 50 frames), UIAnimtedImage is the best choice to render it, it's fast, CPU-friendly and really robust because it's UIKit's public API.\nBut for large animated images, we need to keep balance about CPU and memory. So this time we should use this way - Rendering with decoding at the sametime. This is really common tech used in many other image lib such as YYImage and FLAnimatedImage.\nI don't want to do something like YYImage to force user use its YYAnimatedImageView because it may break your image view's class inheritance. (Which means if you use do not use their image view, you have no choice to display animated images). So I decide to keep our decoding to provide both of these two choice to our user.\nIf you call sd_setImageWithURL: on a SDAnimatedImageView class, our coder will directly use SDAnimatedImage(backward to normal decoding if failed). If you use normal UIImageView class, our coder will create UIAnimatedImage. And more over, if you set a SDAnimatedImage on a normal UIImageView, set a UIAnimatedImage on SDAnimatedImageView, it also works well. All of these work transparently and have no extra cost. So this is really easy to use for user, and can keep both two ways performent depends on your requirement. \ud83d\udc4d . @mythodeia @skyline75489 @bpoplauschi . # Current break change\nSDWebImageCoder.h\n\nSDCGColorSpaceGetDeviceRGB(), MOVED to +[SDWebImageCoderHelper colorSpaceGetDeviceRGB] \nSDCGImageRefContainsAlpha(), MOVED to +[SDWebImageCoderHelper imageRefContainsAlpha:]\ndecodedImageWithData: REPLACED with decodedImageWithData:options:\nencodedDataWithImage:format: REPLACED with encodedDataWithImage:format:options\ninit method from SDWebImageProgressiveCoder CHANGED to initIncrementalWithOptions:\nincrementalDecodedImageWithData:finished REPLACED with updateIncrementalData:finished and incrementalDecodedImageWithOptions:\n\nOther changes discussion\n\nAdd SDWebImageDecodeFirstFrameOnly to SDWebImageOptions\nSee the reason above, if we do not have this value, all the image will be decoded to animated, this may cause some problems. For example, if you want to use SDAnimatedImageView with GIF(SDAnimatedImage), but do not want use UIImageView with GIF(UIAnimatedImage), you have no way to do this because our SDWebImageGIFCoder handler these two cases in one coder\nRemove decompressedImage:data:options in SDWebImageCoder.\nThis does not break API because it's a protocol method and now we don't use. Why I remove this is because that the force decoding process is no different between all the custom coder, this waste extra time for user who write custom coder(just copy paste code). And also, the decodedAndScaledDown has been moved from ImageIOCoder to SDWebImageCoderHelper, so this protocol method is not used at all.\n. # Suggest change for SDK version and Xcode version(Currently not change)\n\nXcode 8.0 and above\niOS 8.0+ / macOS 10.10+ / tvOS 9.0+(not change) / watchOS 2.0+(not change)\nReason\nI want to import APNG support for build-in coder. This is introduced during iOS 8+ and macOS 10.10+ into Image/IO framework and it;s gradually adopted by many social media app such as LINE, instagram, imgur. (And Safari 8, Chrome 59 also support this kind of animated image format).  And other image library has already support it by default such as YYImage .\nSince iOS 7 support is really not the main minimum version of current iOS develop industry. After we update the minimum deployment to iOS 8, we can also have these benefits:\n\nCGImagePropertyOrientation: which can be used in imageOrientationFromEXIFOrientation: and imageOrientationFromEXIFOrientation instead that hard-code number\nAdd APNG coder which is nearly the same as GIF coder(many I can use a subclass) but need kCGImagePropertyAPNGDelayTime, kCGImagePropertyAPNGLoopCount, kCGImagePropertyAPNGUnclampedDelayTime constant.\nWe can specify our download operation priority through NSURLSessionTask.priority\nWe can have the ability to use Background Transfer Service in NSURLSession instead of current application background task(This can also be used on watchOS)\nWe can use storeCachedResponse:forDataTask to directlly store NSURLcache. This is more suitable for our SDWebImageDownloaderIgnoreCachedResponse this crazy options. (Currently not all response was cached into NSURLCache even the image data is same, when you provide SDWebImageRefreshCached, you'll sometimes re-download the same image data everytime. See our demo with that joy.gif, even the server reponse a Cache-Control)\nWe can replace our trick SD_MAC define macro, with the build-in TARGET_OS_OSX from Xcode 8(This macro is not available in Xcode 7 because its defined on TargetCondition.h from iOS 10 Developer SDK)\n\n\nDone. See #2147. @skyline75489 If majority people agree that iOS 7 support is not the limit of their application and the features listed above is really important(For me, the APNG build-in support is the one I prefer), I want to make another PR to upgrade the minimum development target after this PR merged. \u2764\ufe0f \nWe will keep support for 4.x for a short term until we finally release 5.x, like 3.x branch and 2.x branch, to fix some emergency bug(but no new feature will be introduced). For now, the performance looks good compared to another image framework YYImage, which has been optimizied for animated image rendering(The author is expert in image). See the screenshot (up (right simulator) is SDAnimatedImageView, down (left simulator) is YYAnimatedImageView)\nMy aim is not to get the BEST score on performance, but to make it more suitable and more easy to integrate with our framework, including cache, manager, custom coder(YYImage does not contains custom coder, and it does not support macOS/tvOS). I think this PR can achieve this. For further feature and optimization, we can make it a long term goal and welcome you to do this work :)\n\n. This PR contains too much changes which is not related to the image decoder/encoder. I seperete thsee changes into different PRs to make it more clear. After them merged, I'll rebase the 5.x branch and make it more easy to check.\nThe separated PRs are #2147(Merged!) #2151(Merged!) #2152(Merged!) #2162(Merged!) #2189(Merged!). ### Progressive Animated Image Decoding (GIF)\nI introduce the progressive animated image decoding for SDAnimatedImageView and SDAnimatedImage. Which means you can see the incremental loading and playing animated GIFimages during download. Like what you see in Chrome browser. (The animating stop at unfinished frame, and start animating after the new frames available).\nI want to introduce this into UIImageView. However we can't because that UIImaegView will always restart animating after you call setImage:, so this will cause flashing at first frame. See UIImageView.startAnimating()\nSee this demo video to show this feaute:\nSDAnimatedImageView-Progressive.mov.zip\nThrough I implement this for GIF coder only, because libwebp currently does not support progressive decoding on Animated WebP. Another PR including APNG coder may also implement this feature and user can impelement their own for new image format.. \ud83d\ude05 More and more code. I write the tests about SDAnimatedImage, SDAnimatedImageView and SDAnimatedImageView+WebCache to ensure basic function.\nCodecov seems mixed thing up and show the decrease of coverage when I move the code around. (For example, that scaleDownLargeImages from ImageIOCoder to CoderHelper). So I write 10 more tests to increase the code coverage. But since SDAnimatedImageView is a View-based class so it's not easy to simulate the correct life cycle(For example, 'setHidden:,willMoveToWindow:`), but I do my best to make this testable.. Well...Still no one review.\nDue to the 5.x milestone, I'll check this again and then merge it into 5.x branch today. Since this PR need some base knowledge about the image decoding, animated image rendering and macOS development. I'll undertake this feature's function and future maintain. If someone find bugs about this new SDAnimatedImageView, please just fire a bug :). Merged :)\nThis may be the biggest changes in 5.x...Take so long time.\nFor current FLAnimatedImage+WebCache. We will remove that after the 5.x final realease. The beta version may contains it to allow a easy to migrate for early adopters.. \ud83d\ude05 Well, here is my though about that two questions.\n\nI think we need to rename one of the SDAnimatedImage protocol and SDAnimatedImage class. This is confusing. Maybe the compiler can deal with this, but people do not :)\n\nActually. Only Swift does not support Interface and Protocol to be the same name. However, Objective-C does. This is the different between this two language. Since our framework implementation is Objective-C, it should follow Objecitive-C world. (This does not means we are not friendly to Swift user. We should use the correct way to polish Swift API, but not fight for our Objective-C users. See #2250)\nFor API naming, we should always use the Correct one, instead of simply copy Swift API naming to Objective-C API. Here is the official API design guidelines for each language from Apple & Swift.org.\nAbout Objective-C Protocol naming\nAcording to the Objective-C Code Naming Basics. When a Protocol represent the abstract class of a Interface, they should have the same name. When a Protocol represent the ability of some function, they should have the name with the ability. Such as something like NSCopying, NSSecureCoding\n\nMost protocols group related methods that aren\u2019t associated with any class in particular. This type of protocol should be named so that the protocol won\u2019t be confused with a class. A common convention is to use a gerund (\u201c...ing\u201d) form:\n\nCode | Commentary\n-- | --\nNSLocking | Good.\nNSLock | Poor (seems like a name for a class).\n\nSome protocols group a number of unrelated methods (rather than create several separate small protocols). These protocols tend to be associated with a class that is the principal expression of the protocol. In these cases, the convention is to give the protocol the same name as the class.\n\nAn example of this sort of protocol is the NSObject protocol. This protocol groups methods that you can use to query any object about its position in the class hierarchy, to make it invoke specific methods, and to increment or decrement its reference count. Because the NSObject class provides the primary expression of these methods, the protocol is named after the class.\nAbout Swift Protocol naming\nAccording to Swift API Design Guidelines, Swift also have the similar design. Except that Swift language syntax does not allow you to name the same class name & protocol name.\n\nProtocols that describe what something is should read as nouns (e.g. Collection).\nProtocols that describe a capability should be named using the suffixes able, ible, or ing (e.g. Equatable, ProgressReporting).\n\nAbout our naming\nHere let us talk about the design for ourself. There are 3 protocols related to this feature.\n\nSDAnimatedImageProvider <NSObject>\nSDWebImageAnimatedCoder <SDWebImageCoder, SDAnimatedImageProvider>\nSDAnimatedImage <SDAnimatedImageProvider>\n\nSDAnimatedImageProvider is not represent an abstract class, it's about the function to provide the animated image frame information. So this should folllow the design guide 1. This why it named Provider (well, you can also call SDAnimatedImageProviding, but this design referenced from Apple's framework such as TVTopShelfProvider & NSTouchBarProvider, both of two are new API but not kept for historical reason). \nSDWebImageAnimatedCoder is represent an animated image custom coder entity, but not ability. So this should follow the design guide 2. I name it follow our previous protocol design such as SDWebImageCoder.\nSDAnimatedImage is represent the abstract class SDAnimatedImage, and it add  required initializer, same methods only used for SDAnimatedImage class (Like preloadAllFrames) and does not about animated image frame information. So this should follow the design guide 2. I named it the same name as class. It should not named any Provider or Animatable.\nSwift and Objective-C coding style is different.  So Objective-C APIs that feel right in Objective-C will not always feel right in Swift. This is why Swift compiler will always suffix the Protocol which the name is same as Interface name..I think this one is OK and Swift user can also easily create their own class to adopt it.\n\nisn't there an issue with SDAnimatedImageView implementing sd_setImageWithURL... methods, since it is an UIImageView which already implements those methods in our older categories.\n\nActually...None. Since SDAnimatedImageView subclass of UIImageView/NSImageView. It inherents the category method. However, unlike normal UIImageView, we should always pass a extra context arg @{SDWebImageAnimatedImageClass : [SDAnimatedImageView class]}. So I think seperate these two into to different files can make it clear. But anyway, the header files seems duplicated, maybe we need just create a .m implementation file ? :). @bpoplauschi The documentation I'll update later after all the things done. Because there are still little works to do about some PRs.\nI'v create the Wiki page for SDWebImage and update it during 4.x. I think we can update the detail information there.. \ud83d\ude05To say, I'd like to talk to someone about implementation and design for code because maybe I enjoy programming. GitHub comments seems too heavy sometimes and it's not easy to communicate in time. What about using something like a slack group ? Then we can talk it easilier...(Though there are till timezone gap between us, but can reduce the conversation delay). This method has been renamed to sd_setShowActivityIndicatorView: since SD 4.0 and it works well on our demo project. Please try to check your use case(Did you call UIKit methods in background queue ?). SDWebImageDecoder this class is not available in SD 4.2.x(see https://github.com/rs/SDWebImage/releases/tag/4.2.0), I remember this is a file used in 4.1.x and replaced with UIImage+ForceDecode.\nI always profile and analyze the current master branch ,it shows no warning(only 1 from libwebp dependency), so could you please provide the commit-id or tag for the project you tested ?\n\n. This seems a new feature from Clang Static Analyzer, see: http://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20161017/174651.html\nThis means for the number object(including NSNumber, CFNumber, OSNumber), you should write as these code-style instead of nil check for normal object(if (a) {// ... }\nobjective-c\nNSNumber *number = @(1);\nif (number) {\n    //warning\n}\nif (number != nil) {\n    //good\n}\nSince it's from Clang Static Analyzer but not Xcode itself's contraband, it looks persuasive, I'll replace the one used in our project. (Sadly, I run analyze from project will not show this warning, but for new project it shows, a little strange).\nBut for SDWebImageDecoder.h, there is no this file in whole project, so I don't know where it comes from. Could you please try to clean your cocoapods cache and retest ?. #2143 You can review this one and add a +1 so I'll merge this :). #2143 Merged ;). This issue is not active for long time and may because of old version's issue. Feel free to reopen it if you're still interested in this issue.. This should match the version 3.7.6. But if CocoaPods say \"they required a higher minimum deployment target.\", check your minimum target version(iOS 5 & tvOS 9)\nhttps://github.com/rs/SDWebImage/blob/3.7.6/SDWebImage.podspec. It's 2018 now, so we upgrade to 10(macOS) + 8(iOS). Merged :)\n  . Merged. This is actual a separate component of image decoding and have no conflict with current codebase. I test with iOS & macOS image and it works.. @bpoplauschi Yes..Nearlly the same for the UIAnimatedImage based animated code. However, current 5.x APNGCoder supports SDWebImageAnimatedCoder for advanced animated image rendering.\nYou're right, maybe dependency management is better than current subspec management. But however, I think why we need another cocoapods may because that feature (Like WebP coder, or MapKit) need another dependency which is no need for Core Lib.\nSince APNG support is done by Apple from Image/IO framework, which is already the main dependency for SDWebImage. It contains the same dependency level as GIF coder. I think separating WebP coder and FLAnimatedImage to another cococapods is more important than APNG or GIF :)\nFor current that SDWebImageAPNGCoder. Maybe the best way is to close it or mark it as deprecated.. NSProgress based API seems good. For most use case from myself. I usually pass a NSProgress * and then use KVO to observe its totalUnitCount and completedUnitCount property. This is adopted by many framework such as AFNetworking's API. Sometimes I think it's no usage to callback the progress instance again and again.\nHowever, this change looks will break most user's code and Core API because that progress block is used crossing UIView Category, manager, downloader, download operation. Previously I want to make 5.x easier to migrate version for 4.x user. (We'd better not break API which seems no gains)\nFor most cases, we use NSProgress to play with image loading progress on UI. Then user can use KVO or some awesome one-way binding framework such as ReactiveCocoa to update the progress. But For downloader, NSProgress seems not so convenience as UIView category. Could we provide a property to make it just like a convenience method instead and inner implementation is based on the block ?\nFor example, we add a new category property for UIView+WebCache:\n```objective-c\n@interface UIView (WebCache)\n\n(nullable NSURL *)sd_imageURL;\n(nullable NSProgress *)sd_imageProgress;\n\n@end\n@implementation UIView (WebCache)\n\n(void)sd_internalSetImageWithURL:(nullable NSURL )url\n                  placeholderImage:(nullable UIImage )placeholder\n                           options:(SDWebImageOptions)options\n                      operationKey:(nullable NSString )operationKey\n                     setImageBlock:(nullable SDSetImageBlock)setImageBlock\n                          progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                         completed:(nullable SDExternalCompletionBlock)completedBlock\n                           context:(nullable NSDictionary )context {\n    SDWebImageDownloaderProgressBlock combinedProgressBlock = ^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {\n            NSProgress progress = objc_getAssociatedObject(self, @selector(sd_imageProgress));\n            if (!progress) {\n                progress = [NSProgress progressWithTotalUnitCount:expectedSize];\n                objc_setAssociatedObject(self, @selector(sd_imageProgress), progress, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n            }\n            progress.completedUnitCount = receivedSize;\n            if (progressBlock) {\n                progressBlock(receivedSize, expectedSize, targetURL);\n            }\n    }\n    /// original logic, blabla\n    id  operation = [manager loadImageWithURL:url options:options progress:combinedProgressBlock completed:^(UIImage image, NSData data, NSError error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL);\n}\n\n@end\n```\n. @skyline75489 That's just a demo code. If you want to observe the progress before you call sd_setImageWithURL:, just use a lazy initialized category property is OK. What about this:\n```objective-c\n@interface UIView (WebCache)\n@property (nonatomic, strong, null_resettable) NSProgress *sd_imageProgress;\n@end\n@implementation UIView (WebCache)\n\n\n(NSProgress )sd_imageProgress {\n    NSProgress progress = objc_getAssociatedObject(self, @selector(sd_imageProgress));\n    if (!progress) {\n        progress = [[NSProgress alloc] init];\n        self.sd_imageProgress = progress;\n    }\n    return progress;\n}\n\n\n(void)setSd_imageProgress:(NSProgress *)sd_imageProgress {\n    objc_setAssociatedObject(self, @selector(sd_imageProgress), sd_imageProgress, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n\n@end\n// Then, just set the progress property \n- (void)sd_internalSetImageWithURL:(nullable NSURL )url\n                  placeholderImage:(nullable UIImage )placeholder\n                           options:(SDWebImageOptions)options\n                      operationKey:(nullable NSString )operationKey\n                     setImageBlock:(nullable SDSetImageBlock)setImageBlock\n                          progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                         completed:(nullable SDExternalCompletionBlock)completedBlock\n                           context:(nullable NSDictionary )context {\n    SDWebImageDownloaderProgressBlock combinedProgressBlock = ^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {\n            self.progress.totalUnitCount = expectedSize;\n            self.progress.completedUnitCount = receivedSize;\n            if (progressBlock) {\n                progressBlock(receivedSize, expectedSize, targetURL);\n            }\n    }\n}\n// usage demo\n- (void)viewDidLoad {\n    [self.imageView.sd_imageProgress addObserver:self forKeyPath:NSStringFromSelector(@selector(fractionCompleted)) options:NSKeyValueObservingOptionNew context:NULL];\n    [self.imageView sd_setImageWithURL:@\"http://test.jpeg\"];\n}\n// raw KVO. It's better to use KVOController. Or create a one-way binding using ReactiveCocoa(Maybe 3 line code).\n- (void)observeValueForKeyPath:(NSString )keyPath ofObject:(id)object change:(NSDictionary )change context:(void *)context\n{\n    if ([keyPath isEqualToString:NSStringFromSelector(@selector(fractionCompleted))]) {\n        float progress = [change[NSKeyValueChangeNewKey] floatValue];\n        dispatch_main_async_safe(^{\n            [self.progressView setProgress:progress animated:YES];\n        });\n    } else {\n        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];\n    }\n}\n// or use KVOController\n- (void)viewDidLoad {\n    [self.KVOController observe:self.imageView.sd_imageProgress keyPath:@\"fractionCompleted\" options:NSKeyValueObservingOptionNew block:^(id  _Nullable observer, id  _Nonnull object, NSDictionary * _Nonnull change) {\n        float progress = [change[NSKeyValueChangeNewKey] floatValue];\n        dispatch_main_async_safe(^{\n            [self.progressView setProgress:progress animated:YES];\n        });\n    }];\n    [self.imageView sd_setImageWithURL:@\"http://test.jpeg\"];\n}\n``\n  . \ud83d\ude05 What about this approach ? I think this can make the API easy to use with basic usage(Most cases you do not needNSProgress, don't you? You just grab thetotalUnitCountandcompletedUnitCount`, which already in the progress block arguments)\nand also available for advanced usage(like KVO and progress combination such as a progress tree with addChild:withPendingUnitCount:). The most case, it will not break such more APIs...\n  . This PR actually do 3 things:\n\nMove maxMemoryCost & maxMemoryCountLimit from SDImageCache property to SDImageCacheConfig property, deprecate the old API\nAdd sync version API diskImageDataExistsWithKey (Which exist in SD 3.x, but now with a more proper implementation which will not cause issue)\nAdd a diskCacheWritingOptions, which already on 5.x branch\n\nI wonder this maxMemoryCost & maxMemoryCountLimit change seems not really useful for current 4.x user. Maybe I shuold put this into 5.x branch :)\nBut the sync version API and diskCacheWritingOptions are really good things for some of user(including me) to use. I leave this here to allow more comments. @mythodeia It seems to be. Althrough I think we could release a minior version 4.3.x with some new APIs to make it easier to migrate to 5.x. But user seems have no strong demand to this...Althrough I have and I write one for SDImageCache category :). @mythodeia Actually the biggest change is in #2140 and not merged. But that PR changes too much, I'll seperate some of part into seperate PR to make it more clear.. # Current break change (Need change code)\nSDImageCache.h\n\nmaxMemoryCost MOVED to SDImageCacheConfig.maxMemoryCost\nmaxMemoryCountLimit, MOVED to SDImageCacheConfig.maxMemoryCount. This seems not really useful if we want to make it easier to migrate from 4.x to 5.x. So I decide to directly remove that API instead of a deprecation in 4.3.x and removal in 5.x.. # Current break change (Need change code)\n\nUIImage+MultiFormat.h\n\nsd_imageLoopCount, MOVED to UIImage(WebCache) sd_imageLoopCount\n\nUIImage+ForceDecode.h\n\ndecodedImageWithImage:, REPLACED with +[UIImage(ForceDecode) sd_decodedImageWithImage:]\ndecodedAndScaledDownImageWithImage: REPLACED with +[UIImage(ForceDecode) sd_decodedAndScaledDownImageWithImage:]\n\nUIImage+GIF.h\n\n-[UIImage(GIF) isGIF], REPLACED with -[UIImage(WebCache) sd_isAnimated]\n\nNSImage+WebCache.h\n\nRENAMED to NSImage+Addtions.h\n-[NSImage(WebCache) isGIF], REPLACED with -[UIImage(WebCache) sd_isAnimated]\n\nAlready Deprecated and Remove\nUIImage+WebP.h\n\n-[UIImage(WebP) sd_webpLoopCount], REPLACED with -[UIImage(WebCache) sd_imageLoopCount]\n\nSDWebImageDownloaderOperation.h\n\nshouldUseCredentialStorage REMOVED\n\nUIImageView+WebCache.h\n\nsd_setImageWithPreviousCachedImageWithURL:placeholderImage:options:progress:completed REMOVED. \ud83d\ude05 It seems that we do not follow the Correct standard, but the De facto standard. Could you please provide on GIF without that Loop Count extension ?(To see current popular browsers, appliations' behavior)\n\nSee here about that GIF loop count behavior:\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=592735\nThis also happened for WebP, such as the code in SDWebImageWebPCoder.m:\n\nWebP standard says 0 duration is used for canvas updating but not showing image, but actually Chrome and other implementations set it to 100ms if duration is lower or equal than 10ms\nSome animated WebP images also created without duration, we should keep compatibility\n  . What about this test GIF. The loop count value is 2, but Chrome seems show animation 3 times, Safari for Mac & Safari for iOS show 2 times...Our lib show 2 times \ud83d\ude05 \n\n\n. It seems another cross-browser compatibility issue, like APNG loop count :)\nMy blog point this out (Chinese): http://dreampiggy.com/2017/03/06/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E5%8A%A8%E6%80%81%E5%9B%BE%E6%A0%BC%E5%BC%8F%E5%AF%B9%E6%AF%94%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/. And I want to point out that since we support custom coder, you do not need to wait for SD new version release. Just subclass SDWebImageGIFCoder and override that method for your behavior.\n```objective-c\n@interface MySDWebImageGIFCoder : SDWebImageGIFCoder\n@end\n@implementation MySDWebImageGIFCoder\n\n(UIImage )decodedImageWithData:(NSData )data {\n    // copy the code\n    // override the loop count calculation\n    return image;\n}\n\n@end\n// Our GIF coder not add to default coders array in 4.x version(But in 5.x we will because of SDAnimatedImageView)\n[[SDWebImageCodersManager sharedInstance] addCoder:[MySDWebImageGIFCoder sharedCoder]];\n``\n  . In my opinion, I don't agree the design about thatAnimation count=loop count` + 1, this will cause a big issue:\nHow should I loop a image with only once ?\nFor GIF, you can leave without any loop information, so the GIF animation plays once.\nBut however, what about other image format designed ? See WebP's bug:\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=649264\nDue to Google change the behavior to make it the same as GIF, you CAN NOT create a animated webp with only 1 loop count. Because WebP standard says if you not specify loop count, loop infinity. So this will cause problem.(That bug was introduced in Chrome 49, fixed in Chrome 59, good)\nSo, I agree the behavior that GIF without loop count should play once, whether we should plus 1 to loop count is under consideration. If most of broswer and other lib adopt this behavior, we follow.\n. \ud83d\ude1e Previously, there is a crash related to the NSURLCache because we store the image data on URLSession delegate method during SD4.0~SD.4.1. See #1623.\nSo we place the cachedResponseForRequest call before any request start to avoid URLSession internal call something related to the cache and cause thread-safe problem. However, your crash seeems that this effort still contains some race condition. How many ratio does this crash happend ? (To see if the ratio can smaller than the previous solution)\nApple docs says:\n\nAlthough NSURLCache instance methods can safely be called from multiple execution contexts at the same time, be aware that methods like cachedResponseForRequest: and storeCachedResponse:forRequest: have an unavoidable race condition when attempting to read or write responses for the same request.\n\n. If we have no choice, maybe we should add a global lock(!) to ensure all the acess to [NSURLCache sharedURLCache] are synchonized but not just operation instance itself. This will dramatically impact the performance. Maybe we should take more concern.. @DarkoDamjanovic It should be a really small ratio. The acess to [NSURLCache sharedURLCache] is only happened in start method. This means that the thread-safe problem is not caused by SDWebImageDownloladerOperation itself. But it's because any other call in our library (and even not our library).\nFor example, your viewDidLoad call [[NSURLCache sharedURLCache] cachedResponseForRequest:self.request]; with the same request(Acutally, with the same URL because I decompiled the CFNetwork and see it just use a global std::map to store memory cache).\nThen this may cause the crash, really unavoidable.\nFor now, our library would not download the same URL again because of we reuse the operation. So  even different SDWebImageDownloladerOperation instance will not trigger this issue. Maybe we need more time to find the solution\nSee :https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloader.m#L242-L258\n  . @DarkoDamjanovic Could you please more information about how you use SDWebImage ?\nFor example: \n+ did you use self alloced instance other than shared manager, shared downloader ?\n+ did you use custom SDWebImageDownloaderOperationInterface class ?\n+ did you use SDWebImageDownloaderOperation without downloader(which means use the unowned session and directly call start) ?\nMaybe these information can help me to identify the acutal cause of the issue.\n. See #2157. @DarkoDamjanovic This may be a good advice. Since NSURLSessionConfiguration contains the URLCache property. Maybe we can then bind each SDWebImageDownloader a non-shared NSURLCache.\nThis may help this issue, but this also has a potential disadvantage. If user create their own SDWebImageDownloader, they can not get the already cached response from other downloader instance and will re-download. But this looks acceptable, I'll try one and build my applications for local test.\n  . We should wait to see if there are further crash report. I think this may be a bug on iOS 9 & iOS 10's CFNetwork framework. See the anaylsis in #1623.\nWe can add a simple lock to ensure the acess in our framework is safe. See #2174\nBut this may not solve this issue totally when outside other code try to read or write cached response on sharedURLCache :)\nIf you can sure iOS 11 and above also contains this crash, fell free to reopen this. Thanks :). Are you sure you're using 3.7.6 version? This may return a UIAnimatedImage and you can check -[UIImage images] array to get the count.. Just check image.images.count != 0 and you're done.. @lemarian See these API docs:\nhttps://developer.apple.com/documentation/uikit/uiimage/1624149-animatedimagewithimages\nhttps://developer.apple.com/documentation/uikit/uiimage/1624155-duration\nhttps://developer.apple.com/documentation/uikit/uiimage/1624117-images. Don't really catch up with your custom use case. You can try to decoding the image with raw Data and do this. Or to find someother specify imageView such as FLAnimatedImageView to do something after one loop finished. I don't think you can do this on base UIImageView without private API.\nOur SDWebImage 5.x introduce a like SDAnimatedImageView and provide a property currentLoopCount which you can use KVO on it. But this need time to release(Maybe March in 2018). So maybe you should try the other solution currently.. @lemarian Well...Seems I'm not catup up with the idea at that time.\nIf you need to switch to another view after the current gif play finished. First solution, you setup a NSTimer or something to record the time. Then use UIImage.duration to get the total duration the image will play in each loop. So now you can switch to another view after the total duration time passed. The disadvantage of this solution is that the timer must be accurate or there may be some synchronizing issue.\nThe second solution, using a special imageView which support a callback after animated image play finished. For UIImageView with UIAnimatedImage, use KVO to observe the animating property. When that change to false, switch to another view. However, since this property only be changed after the image loop count finished. You may need to attention that imageView's animationRepeatCount should be larger than 0 (Or the default 0 will loop forever and animating property never changed to NO).\nFor FLAnimatedImageView, use loopCompletionBlock.\nFor SDAnimatedImageView from our 5.x branch, use KVO on animating(Means all loop finished and image stop animating) or currentLoopCount (Means current loop finished and will begin next loop) depend on your use case. This change's disadvantage is large than the fix. Use #2174 instead.. To say. I already know this, your change will cause FLAnimatedImageView logic failed. Because some trick logic(Such as request disk cache synchronized) is checked with image.images != nil \ud83d\ude05 .\nSee https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDImageCache.m#L378-L380\nThis behavior will be totally removed during SD 5.x because we introduce a new UIImage/UIImageView subclass SDAnimatedImage/SDAnimatedImageView to do this. But currently we have no good way to avoid it(without modify any header files).\n  . And to say, what's the problem for using _UIAnimatedImage for UIButton ? I tested it and it works as normal static UIImage.. @ikesyo I'm working fine. Simply add a UIButton subview on our demo. And UIButton's imageView also support animation on WebP (GIF only show first frame) :\n```objective-c\n@interface MyCustomTableViewCell : UITableViewCell\n@property (nonatomic, strong) UILabel customTextLabel;\n@property (nonatomic, strong) FLAnimatedImageView customImageView;\n@property (nonatomic, strong) UIButton *customButton;\n@end\n//initWithStyle:reuseIdentifier\n_customButton = [[UIButton alloc] initWithFrame:CGRectMake(300.0, 2.0, 60.0, 40.0)];\n[self.contentView addSubview:_customButton];\n//tableView:cellForRowAtIndexPath:\n[cell.customButton sd_setImageWithURL:[NSURL URLWithString:self.objects[indexPath.row]] forState:UIControlStateNormal placeholderImage:placeholderImage options:0];\n```\n\nCould you provide your use case ? Maybe it's not the issue related to _UIAnimatedImage because I think it's UIKit's native methods and it should work as normal UIImageView\n  . @ikesyo Could you please provide a demo ? I think this maybe something related to rare case but not _UIAnimatedImage itself because I have a UIButton showing animated images in my application...\nAnd even maybe it's a UIKit bug, but we need more information about this. Currently I can not reproduce this :(\n  . @ikesyo If we counld not find someway to avoid this, maybe I can pick some 5.x code to 4.x branch. Which disable that tricky logic for FLAnimatedImage and make SDWebImageIOCoder works without any animated image.\nSee #2162\n  . Fixed by #2162. \ud83d\ude05 You're a little hurry. Maybe we could release 5.0-beta after we finish some change for 5.x branch and after basic 4.3.x release. I think it should take at least one month.\nBut if you'd like, you can try 5.x branch through git repo in your CocoaPods or Carthage, but it may contains bug and you should take care :). LGTM. But I'm wondering this is a API-break change(Options and Non-optional is different case for Swift). Anyway, I advice to merge this to 4.3 but not 5.x. @Baichenghui @skyline75489 @mythodeia  Any idea ?. @skyline75489 Any reason ?. @AaronZhang2015 This nullability change is correct. For Objective-C, this will not break API, but for Swift, this may break API(actually you can not pass it an nil because that the runtime assert will trigger, but this is not a compile protect and will be useless in the release env). So we should merge this into 5.x.\nDon't worry, 5.x seems to be not a big API-break change and it's easy to migrate(Unlike 3.x->4.x). Thanks for you contribution :). Well. After some consideration, I think we should break the API and change the return type. This change should at lease in 5.x. The reason why to change this is shown here :\nOur previous API -[SDWebImageManager loadImageWithURL:options:progress:completed:] describe that\n\n@return Returns an NSObject conforming to SDWebImageOperation. Should be an instance of SDWebImageDownloaderOperation\n\nSo this is adoptable and may not break current usage(Just the API). And I think, return a simple SDWebImageOperation protocol instance is really useless. User can not do anything except cancel the operation. We can make it open to the user to provide more custom advanced usage(Including that grab the NSURLResponse, check HTTP headers and more).\nCompared to Kingfisher's same API KingfisherManager.retrieveImage, I think this design is not a bad design and this is not hard to maintain in the future. We should basically add two property, one is NSOperation *cacheOperation, the other is SDWebImageDownloadToken *downloadToken. Some advanced feature can be implementation and make it more user-customizable.\nAll the other properties should be hidden because it rely on the complex internal logic. I think now user can do something awesome feature with it :). # Current break change (Need change code)\nSDWebImageManager.h\n\n-[SDWebImageManager loadImageWithURL:options:progress:completed:] return type id<SDWebImageOperation> CHANGED TO SDWebImageCombinedOperation *  (Actually this do not need change code because SDWebImageCombinedOperation conform to SDWebImageOperation and the document also mean the return type is SDWebImageCombinedOperation)\n\nSDWebImageDownloadToken\n\nurl CHANGE TO readonly (Previous design is wrong, this value should not be modified outisde)\ndownloadOperationCancelToken CHANGE TO readonly (Previous design is wrong, this value should not be modified outisde). @skyline75489 You can use a id<SDWebImageOperation>. But if we add more and more property already internal on this. For example, we need downloadToken now to allow user grab the download NSURLResponse, which means we should add this to the abstact protocol again and again so maybe this is really tied to that actual class. And this is not a protocol to let user provide unlike SDWebImageDownloadOperationInterface, it just like a public interface but not which allow user to implement\n\nFor the download which bridge the cache and downloader together, I don't think this design will be totally change in the future (that will be a really huge change). So a request to load image must contains two process: cache request and download request. The operation for  cache request is a NSOperation and the download request is SDWebImageDownloadToken. I think these two is useful for use which need know the context but not just have a ability to cancel\nThis  design is adopted from Kingfisher too. I think this design is not a bad design.. @skyline75489 I seperate the context arg part to another PR #2189. For whether we should introduce this addtional headers feature and expose the SDWebImageCombinedOperation, we can make further discussion. \nBut that context is usefull for the #2140 because I need to provide a SDWebImageContextAnimatedImageClass with to allow the cache and downloader to create a UIImage<SDAnimatedImage> instance instead of normal UIImage instance. Because our SDAnimatedImage is a protocol which can let user implement their own (Such as YYImage, which can conform to SDAnimatedImage :)). So we can not use a simple SDWebImageOptions enum to solve this problem.\nAnd also, some user ask to allow custom scale factor because of that our SDImageScaleForKey is really tricky and hard-coded. They can provide their desired scale with a CGFloat. This can not be solved by SDWebImageOptions either. And maybe more issue about this. So we need that context arg and merged now.. Maybe this feature we need more time to allow extensibility. Currently it can only apply the HTTP Headers. However, for NSURLRequest, there maybe be more than just HTTP Headers, for example, the timeoutInterval, HTTPMethod and more.\nWe can introduc a more common usage like request modifier or something. We send the original request for download to the user, user can use mutableCopy and modify to return their own request.. @BlueVirusX @skyline75489 This PR was replaced by #2261 . Which provide a more common use case and abstract implementation to keep extensibility. This is because that we actually use libwebp 0.6.0, you can check that git submodule tag is 0.6.0.\nBut our podspec did not add the version limit to libwebp, for the podfile you provide, it will fallback into libwebp 0.5.0.\nWebPSafeFree is not public API in 0.6.0(I check, from 0.5.0), replaced by WebPFree, so this is why you compile failed.\nMaybe you should ask iOS-WebP to update their dependency, and we can also add the version to point it need libwebp >= 0.5.0. I found that if you specify iOS-WebP with git tag:  0.5.0, it can compile success :) \nThe latest tag is 0.5.0, but 0.5.0 podspec file does not update to CocoaPods Trunk(it shows the old version 0.4.0), it's that something wrong ?\nhttps://cocoapods.org/?q=iOs-webp. #2169 merged. We specify libwebp ~> 0.5. If you still use iOS-WebP below 0.5, please upgrate to the 0.5 version. If you cann't install(Currently I find that the spec file has not been uploaded to CocoaPods Trunk), use the following syntax:\nruby\npod 'iOS-WebP', :git => 'git@github.com:seanooi/iOS-WebP.git', :tag => '0.5'. SDWebImage 4.x submodule's libwebp is already 0.6.0. So this may because of that iOS-WebP's dependency is too low.\nIt shows ~> 0.5.0, which means it will match the 0.5.99999. So this will cause the issue. You should try to ask  iOS-WebP to upgrade the dependency.\nIf you write this in Podfile, you can not install because of conflict dependency\nruby\n  pod 'SDWebImage/Core', '4.2.3'\n  pod 'SDWebImage/WebP', '4.2.3'\n  pod 'iOS-WebP', :git => 'git@github.com:seanooi/iOS-WebP.git', :tag => '0.5'\n  pod 'libwebp', '0.6.0'\n\nAnd, the WebPFree is the Public API in libwebp 0.6.0, but WebPSafeFree is Private API. (Maybe in 0.5.0 it is public API too, but we use 0.6.0 now), so this is not the problem cause the issue. Emmm...But I think, we should also point it out that SDWebImage/WebP 's dependency is libwebp ~> 0.6.0, I update the dependency but not change code because it already correct.. Merged by #2169. @OceanHorn We currently support libwebp from 0.5.0 ~ 0.6.x, so the version limit should be ~> 0.5 but not ~> 0.5.0 or ~> 0.6.0\nAnd also, try to contect iOS-WebP's maintainer to upload the spec files to CocoaPods Trunk. Or you can only use :git => xxx, :tag => 0.5. @bpoplauschi  @ShaharHD Hi, I saw you two are the CocoaPods trunk owners for libwebp. Google has already release the v0.6.1 version, see here. Could you please also update this version ?\nMany libraries including SDWebImage in CocoaPods depends on this pod now and I hope maybe we can get update with the original repo's release. Maybe we should find a better way to automatically update the spec as soon as the new version release. :). @bpoplauschi \ud83d\ude05 Well. Can libwebp 0.6.1 works now ? I lose the opportunity to join your conversation.. Use -[SDWebImagePrefetcher prefetchURLs:progress:completed:] instead is the better choice.\nUse dispatch_group seems will work, but SDWebImageRefreshCached this options is a little misunderstanding. It will make your completion block called 1 or 2 times. The first one is from SDImageCache, the second one may be called if the downloaded image data not equal to cached data. So it's not recommend to do this :). SD Version ? master branch ? Or did you keep the crash log or stack trace ?. After I introduce this NSProgress property, the problem above can be solved easily in really simple code:\n```objective-c\nNSArray urls; // url array\nNSArray imageViews; // imageView array, same count\nNSProgress *rootProgress = [NSProgress progressWithTotalUnitCount:imageViews.count];\n__weak typeof(self) wself = self;\n[self.KVOController observe:rootProgress keyPath:NSStringFromSelector(@selector(fractionCompleted)) options:NSKeyValueObservingOptionNew block:^(id  _Nullable observer, id  _Nonnull object, NSDictionary * _Nonnull change) {\n    __strong typeof(wself) self = wself;\n    double progress = [change[NSKeyValueChangeNewKey] doubleValue];\n    dispatch_main_async_safe(^{ // progress value updated in background queue\n        [self.progressView setProgress:progress animated:YES]; // update UI\n    });\n}];\n[imageViews enumerateObjectsUsingBlock:^(UIImageView * _Nonnull imageView, NSUInteger idx, BOOL * _Nonnull stop) {\n    [rootProgress addChild:imageView.sd_imageProgress withPendingUnitCount:1]; // construct progress tree\n    [imageView sd_setImageWithURL:urls[idx]];\n}];\n```. @mythodeia \ud83d\ude05 Any idea to say? Only approve review make me feel a little worried.. @skyline75489 So maybe we can use this instead of #2150 to add the NSProgress API ?\nI create this because of my personal usage and the reference from AFNetworking :) So I think this is more adoptable and can be release in 4.x branch instead of 5.x. I think we need at least monthes to land 5.x.... And also, do we also need to add cancel support on NSProgress ? We can specify a cancellationHandler to do this. Really easy :). ~~@mythodeia @skyline75489 Update to support cancel call on the NSProgress. This can be used for better compatibility through different UIView subclass (UIImageView, UIButton's cancel method are different, but this one just grab the operation instance itself and use cancellationHandler, always correct)~~\nWell...I think current we could not add a cancel, because this is permanent. You can no reset to initial state to the NSProgress except creating a new one, but this will cause KVO failed. So this will not work for cell reuse. User who need this without cell resue can easily write one by calling sd_cancelCurrentImageLoad\nIf you're considering using the pause instead and use resume, however, this resume method is iOS 9 API. Currently we may not add this. It seems that Apple create this class for progress report but not a common progress manager :). Thanks for your reply. I'm trying to figure out the memory usage issue. It seems that we may have some issue in history about macOS. We'll try to fix them and make our library work for as may platform as we can.. Too tell the truth, I advise all the user enable the shouldDecompressImage, this is not what that comments means and are misunderstanding. Maybe I should change the comments there to make it clear.\nThis options means that we will try to decode the image on the context in the background queue after we download or query finish. This can avoid UIKit/AppKit to decode the image in the main queue after you set the image to imageView. And this can dramatically increase the frame rate. About the memory usage, these two it's nearly equal because UIKit/AppKit decode the image in main queue also need to hold the memory, we just make this in advance and dispatch it on a background queue to avoid blocking main queue.\nIf you try to profile the memory by Instuments, you will find that CG Raster Image Data(enable shouldDecompressImage) >= CG Raster Image Data + PNG/JPEG Imag Data(disable shouldDecompressImage). But the value is nearly equal. Only if you do not want to use the image for rendering (For example, image editor application which) recommend to disable it.. It seems that we have some memory leak issue in -[SDWebImageManager runningOperations]. When all the image was cached and download finished, this NSMutableArray should be empty, right? But by running your demo, I found that the array is not empty. There must be some of bug. I think I should review that logic again and find a better way to avoid this. I don't know whehter this can solve your issue but this may help. (The high memory usage may point to the image cache and Core Animation, which seems right because it's designed to kept in memory\uff09\n\nTo say, I think the cancelBlockand weak-strong to break retain cycle is really dangerous. :). @mohacs Could you please try to use that PR to test if this issue still exist ?\nruby\npod 'SDWebImage', :git => 'git@github.com:dreampiggy/SDWebImage.git', :branch => 'fix_running_operation_leak'. @mohacs My mistake, use my PR's fork repo :)\nruby\npod 'SDWebImage', :git => 'git@github.com:dreampiggy/SDWebImage.git', :branch => 'fix_running_operation_leak'. Can you use Instuments and use Allocations to check what instance contains the memory ? And could you please check that if your image contains WebP or GIF images(this may consume more memory)\nI assume that ths memory is consumed by SDImageCache's memory NSCache. Because macOS unlike iOS, do not have a UIApplicationDidReceiveMemoryWarningNotification to clear the cache when memory warning. You need to clear it youself or use the maxMemoryCost in SDImageCacheConfig to limit the max cache size.. @mohacs  SDImageCache.shared().getSize() return the disk cache size but not memory usage. Only if you call clearDiskOnCompletion will remove the disk cache. This is not related to the memory \ud83d\ude05 \nYou say I do not see any problem on allocations. So...What was that acutally take your memory ? Isn't UIImage instace ?\nI think maybe UIKit/AppKit's decoded data(CG Raster Data) stored not in UIImage or CGImage instance level, it managed on the view(acutally layer or context) level. So if the view instance dealloc, the decoded rasterized data dealloc. Even the NSImage instance is alive and kepted in the SDImageCache, the consumed memory is lower because it's a compressed format(takes less memory) which does not contains the decoded data.\nIf you specify the shouldDecompress, we will create a new image by rendering it on a context in advance, this may force the decoded data stored in CGImage level, so that this will cause more memory (But this benefit the frame rate because UIKit/AppKit will not decode it during rendering) So even the view instance dealloc, the decoded data store in CGImage instance will not dealloc. This may explain the phenomenon you faced.\nPreviously I'm not aware of this difference between decompress, this looks like a of trade-off between memory and efficiency. I will check whether this match the UIKit/AppKit behavior with some demo. To say, the original idea about decompress comes from FastImageCache, and be adopted widely by many image frameworks such as YYImage or Kingfisher.\nCould you please again use Kingfisher and enable this decompress by using .backgroundDecode in KingfisherOptionsInfoItem(SD enable this behavior by default, where Kingfisher not) to check if this memory usage can also happend ?. After some research, it seems that the Core Animation on iOS follow the behavior I describe. And I'm sure the memory consume is the NSImage instance stored in NSCache used in SDImageCache. After you clear the memory cache, the all memory decreased to the initial state.\niOS seems cache the decoded JPEG data into Core Animation's zone instead of CGImage itself if you rendering it without decompress. So once the view dealloc, the Core Animation will release the data. So even SDImageCache keep the UIImage instance, the memory cost is lower.\nThe memory graph after one JPEG image rendered(without decompress):\n\nHowever, on macOS, it seems that Core Animation does not do this, the decoded JPEG data stored in CGImage level(Image IO's zone) whatever you use decompress or not. So if we keep the image in SDImageCache, it keep the memory contains the decode data even after the view dealloc\nThe memory graph on macOS after one JPEG image rendered(without decompress):\n\nSo, I think you should mark the proper countLimit or totalCostLimit to allow NSCache release the memory automatically, or you can manually remove cache if the current memory is high. Maybe we could not do more stuff to this because I think this memory improvement should be handled by user and we cound not change AppKit behavior to match UIKit behavior.\nBut maybe someday, we will introduce some advanced cache algorithm like LRU-cache into our SDImageCache, this may remove the unused image instance if you do not need. So at that time it may decrease the memory usage in your use case.. @mohacs This is actually the difference between UIImageView and NSImageView handler for the CGImage. UIImageView store the internal CG raster data(decoded bitmap) to view instance level(once view dealloc, theh memory released). However NSImageView does not and store the internal CG raster data to CGImage level(once NSImage dealloc,  theh memory released). So althrough both of two cases, the UIImage or NSImage instance is alive if you do not clear cache, the memory usage is different.. @skyline75489 @mythodeia What about this one ?\nI find the operation array will not reset to empty after you scroll the tableView fast even all the images are cached. There keeps a leak. You can check this by open the demo, scroll and click View Memory Graph. So I try to fix this. The previous solution using cancelBlock looks work but it's dangerous because it all keeps the strong reference. Using a weak-strong and the weak reference to the manger instance is more safe than this implementation and actually solve the problem. @skyline75489 Maybe we can. Add it. It's just a wrapper to keep a weak reference to the SDWebImageDownloaderOperation. And call the cancel: instead. (And I fix a issue that the SDWebImageDownloaderOperationInterface does not contains cancel: declaration, this will cause issue currently) :)\nAnd also, the previous design to allow readwrite on downloadOperationCancelToken is wrong. We use addHandlersForProgress:completed to generate a token, so each token is seperate and shoult not allow modify during lifetime. The same as url property.\nHowever, due to the semver we can not change this on 4.x. But on 5.x I'll change this. In #2166 I change this and open the SDWebImageCombinedOperaion to public API to allow user check the information. And that can also be benefit from the replacing of current cancelBlock's design.. @mythodeia Of couse. Currently we will periodly sync the master branch to 5.x branch and resolve the conflict. I'll do this after merge it. :)\nBut 5.x branch should not merge to master because it contains the API-break change. But If you find something not API-break and want it also available in 4.x, just cherry-pick and create a new PR.. \ud83d\ude05 It looks like the idea we want to improve the performance for FLAnimatedImageView is totally wrong. Maybe we should totally roll back to the original implementation...\nAnyway, I will check this issue and maybe find a way to fix it(maybe not :)). In tomorrow.\nAnother word, this FLAnimatedImageView will be moved into a seperate Pod, we will try our own SDAnimatedImageView, which is a UIImageView/NSImageView subclass. And we use a SDAnimatedImage which is a UIImage/NSImage subclass to work with the memory cache. See #2140 . Could you please provide some code to do this fade animation as your description ? A demo project is more welcomed :). If I can't fix this issue, maybe we should do a really trick logic: Bind UIImage an assciated object FLAnimatedImage and store it in the memory cache, but this will consume more memory and that's why I do not want to do this during SD 4.2.3. But anyway, this is the last choice :). Well...Why you call sd_setImage again in the completion block ? You'd better use AvoidAutoSetImageand manurally set the image during the animation block to do a transition.\nOh, maybe this is because the completion block does not contains the NSData. I don't like current designed solution. For animation, maybe we can do more beyond this, let user provide a SDWebImageTransition instance to do this stuff instead of hack and hack again.\nAnyway, I can use the last choice by associated object to store FLAnimatedImage into memory. See #2181. You try this branch to see whether can solve your ploblem.\nruby\npod 'SDWebImage/GIF', :git => 'git@github.com:dreampiggy/SDWebImage.git', :branch => 'trick_code_fix_FLAnimatedImageView_fade'\n. @JEKos  :) Use the both of two with the git repo\nruby\npod 'SDWebImage', :git => 'git@github.com:dreampiggy/SDWebImage.git', :branch => 'trick_code_fix_FLAnimatedImageView_fade'\npod 'SDWebImage/GIF', :git => 'git@github.com:dreampiggy/SDWebImage.git', :branch => 'trick_code_fix_FLAnimatedImageView_fade'. @JEKos Network issue ? or you can clone the repo and use :file to this :)\nbash\ngit clone -b trick_code_fix_FLAnimatedImageView_fade git@github.com:dreampiggy/SDWebImage.git\nruby\npod 'SDWebImage', :path => 'path/to/that/git/repo'. @JEKos Whatever demo or actual product application contains this problem, test it with this branch code, just build and run.. Maybe you should give up this way... FLAnimatedImageView is a third-part lib we integrated. And this will be removed in the 5.x so we maybe we will not take more time on it\nBut I create a new feature called Image Transition. You just need to use that instead for basic transition animation. This can avoid you to call something trick code sd_setImageWithURL: again in your completion block.\nSee #2182, you can run our demo to check the effect. @JEKos See the demo there. The MasterViewController.m's cellForRowAtIndexPath: method. It's easy like UIKit's transition(with:) methods.\nIf you don't know about Objective-C, just use as normal:\nswift\nlet transition = SDWebImageTransition.init()\ntransition.duration = 0.5\ntransition.animationOptions = [.transitionCrossDissolve]\ncell.imageView.sd_setImage(with: URL(string: img[indexPath.item]), placeholderImage: nil, transition:transition, progress: nil, completed: nil) \nCurrently API seems not really convenient. But we will use class property to make the generated interface more easy to use in 5.x(Because it needs Xcode 8, but now our current Xcode min version is Xcode 7.3, suck). @JEKos animationOptions. @JEKos That branch does not contains the trick_code_fix_FLAnimatedImageView_fade code, which should benefit(a lot) the frame rate because now we do not need to query the disk cache each time your cell reuse. (Crazy ? But that how previous version so far works). After one of this be merged, you can try again. @JEKos You can now use the syntax sugar on transition using class property.\nswift\nlet transition = SDWebImageTransition.fade\ntransition.duration = 0.5\ncell.imageViewDisplay.sd_setImage(with: URL(string: img[indexPath.item]), placeholderImage: nil, transition:transition, progress: nil, completed: nil). @JEKos Try again with the feature_image_transition, the tricky code for FLAnimatedImage is merged. You may get little performance enhancement for it.. #2182 Merged. Through maybe you can still use your previous code to do transition(the fix for FL may force it work like UIImageView). But we strongly recommand to use the new image transition feature.. Travis-CI seems down :) Just merge this, a obvious bug. @JEKos What about this ? I think it can avoid some tricky code to use fade animtion. And it's transparent to work with FLAnimatedImageView without hacking. (But I think that hack may be a way to solve any further potential problems, I'm tired of this \ud83d\ude34 ). @mythodeia I think some of user may love this feature. Currently the syntax looks not so convenient like Swift. But we can use the class property (Xcode 8 from) to make it more easy to use. Because for macOS the implementation may be little hard to write... This can make it more flexible to change.\n```objective-c\n@interface SDWebImageTransition (Conveniences)\n@property (nonatomic, class, readonly, nonnull) SDWebImageTransition fadeTransition;\n@property (nonatomic, class, readonly, nonnull) SDWebImageTransition flipUpTransition;\n@end\n```\nThe generated Swift interface \nswift\nextension SDWebImageTransition {\n    open class var fade: SDWebImageTransition { get }\n    open class var flipUp: SDWebImageTransition { get }\n}. @mythodeia Firstly I'll try to implement the macOS support using NSAnimationContext API. After this merged this into master branch, I can try merge master to 5.x and add the convenience category as well...But it seems that I spend too much time on this recently and my BOSS is worried about me :). @mythodeia @skyline75489  macOS support done (Using NSAnimationContext, this is not powerful like UIView.transition, but it's enough for basic usage. I also provide a prepares block to allow user render the initial state before the animation start. This can make it easy to use such as\nobjective-c\ntransition.prepares = ^(__kindof UIView * _Nonnull view, UIImage * _Nullable image, NSData * _Nullable imageData, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n    view.alpha = 0; // many context args :)\n};\ntransition.animations = ^(__kindof UIView * _Nonnull view, UIImage * _Nullable image) {\n    view.alpha = 1;\n};\nAnd also, I found a interesting category which support a toll-free implementation of NSView.transitionWithView and NSView.animateWithDuration in react-native-macos. But it seems this it's much more complicated for this usage. Anyway, maybe one day we can use this for some advanced feature, just keep this link for backlog :). @mythodeia @skyline75489 Thankfully that clang have a macro to detect whether class property is available. I can introduce the convenience method in 4.x but not 5.x. And this works for iOS & tvOS & macOS.\nswift\nlet transition = SDWebImageTransition.fade\ntransition.duration = 0.5\ncell.imageViewDisplay.sd_setImage(with: URL(string: img[indexPath.item]), placeholderImage: nil, transition:transition, progress: nil, completed: nil)\nReview again to check whether there are something wrong or typo. Then we can merge it now (Travis-CI seems suck during these days, but it actually passed) :). @mythodeia @skyline75489 @JEKos Any consideration about new arg in Core-API ?\nI think maybe my decision to add a extra transition arg to UIView Category's sd_setImageWithURL: is a wrong design.\nThe most cases we use transition is to let the animation in cell looks smooth. So maybe this is not related to a simple request for specify the URL. But about the view instance itself behavior. And if your cell imageView need the same transition, you don't need to pass the transition again.\nI think, maybe , place the SDWebImageTransition into UIView+WebCache, associated with the view instance is better. And this make that our Core API clean. And if we need custom  instasnce for seperate request, in 5.x branch I decide to add one more context arg to all API, this can make the Core API not so hard-coded.\n```objective-c\n@interface UIView (WebCache)\n// The image transition when the load image finished. If you specify nil, do not do transitioon\n@property (nonatomic, strong, nullable) SDWebImageTransition *sd_imageTransition;\n@end\n```\n\nDone. If some user really want to specify transition for a image load request level instead of UIView instance level. Maybe on 5.x we can introduce a new option in context arg to allow you pass on SDWebImageTransition instance. But currently just keep things simple. :). @skyline75489 There is a duration property here and will be used for animates block. The convenience method is just for easy usage(You just use that instead of create a instance yourself, and work for macOS), so it use a class property which does not support any arguments to pass :)\nBut anyway, I add a default value 0.5s to the duration...This seems the a proper duration for normal transition.\nobjective-c\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.duration = 0.5;\n    }\n    return self;\n}. @skyline75489 Actually we have some macOS users. I introduce this because this is easy to integrate and have no bad effect on current Core API (Or I'll not consider to change). I think this can be useful unless you receive from the feature request from user. I'm also considering a better way in the future to support CALayer+WebCache in #1511 (But this maybe a big change to our current design and maybe not add).\nMany feature maybe we do not use, but since SD become more porpular cross the platform(iOS/macOS/tvOS/watchOS). I think we should always provide some convenient API for the specify platform instead of just focus on iOS.. @skyline75489 Maybe. Apple says that is not guaranteed but is typically a secondary thread. But I think we should not relay on the implementation. Using lock can avoid this issue whatever queue is called.\nActually,  we use lock in SDWebImageManager to access runningOperations by @synchonized, which is actually a SpinLock. Semahore can have a balance on performance and CPU usage. Maybe we can also change that if need (Need profile).\nBut whatever, use GCD just for a NSMutableDictionary is a bad idea. It's only recommaned for some complicated logic associated to queue (Such as URLSession delegate).. @skyline75489  Maybe use @synchronized is enough for common use case :) I find that our lib does not use it at all. OK... @skyline75489 Yes. This is a refactoring. Not most people are interested in this and they can use their own way to add indicator as normal.\nBut this can totally replace that 5 public APIs like a ghost in the UIView+WebCache header. Which seems really trick, ugly and only for iOS user which tied to UIActivityIndicatorView. Instead of totally remove that, I think provide a better and extensible API is the better way because maybe some simple application can use this build-in one instead of creating their custom view. (SD actually have many users creating simple application like this :))\nobjective-c\n- (void)sd_setShowActivityIndicatorView:(BOOL)show;\n- (void)sd_setIndicatorStyle:(UIActivityIndicatorViewStyle)style;\n- (BOOL)sd_showActivityIndicatorView;\n- (void)sd_addActivityIndicator;\n- (void)sd_removeActivityIndicator;. # Current break change (Need change code)\nUIView+WebCache.h\n\nsd_setShowActivityIndicatorView: REMOVED, use sd_imageIndicator with SDWebImageActivityIndicator instead.\nsd_setIndicatorStyle: REMOVED,  use sd_imageIndicator with SDWebImageActivityIndicator instead.\nsd_showActivityIndicatorView REMOVED, use sd_imageIndicator with SDWebImageActivityIndicator instead.\nsd_addActivityIndicator REMOVED, use sd_imageIndicator with SDWebImageActivityIndicator instead.\nsd_removeActivityIndicator REMOVED, use sd_imageIndicator with SDWebImageActivityIndicator instead.. Are you using SD 3.7.6 version? This version is too old and maybe we does not maintain. Could please try to upgrate to the latest version or at least using the 3.8.x version to check if this issue happend ? I do not face this issue in 4.x release.. # Current break change\n\nUIView+WebCache.h\n\nSDWebImageInternalSetImageGroupKey RENAMED to SDWebImageContextSetImageGroup\nSDWebImageExternalCustomManagerKey RENAMED to SDWebImageContextCustomManager. # Current break change (Need change code)\n\nUIView+WebCache.h\n\n-[UIView sd_internalSetImageWithURL:placeholderImage:options:operationKey:setImageBlock:progress:completed:] CHANGED to -[UIView sd_internalSetImageWithURL:placeholderImage:options:context:setImageBlock:progress:completed:].\nThe biggest changes is that the completion block type from SDExternalCompletionBlock to SDInternalCompletionBlock. Which allow advanced user to get more information of image loading process.\nIf you previously using operationKey arg, use SDWebImageContextSetImageOperationKey in context option instead. \n-[UIView sd_internalSetImageWithURL:placeholderImage:options:operationKey:setImageBlock:progress:completed:context:] REMOVED. Use -[UIView sd_internalSetImageWithURL:placeholderImage:options:context:setImageBlock:progress:completed:] instead.. @Baichenghui Actually. Current SDImageCacheOptions is designed like SDWebImageDownloadOptions. Which is subset of SDWebImageOptions and only concentrate on the options that cache need. And context as its description, it hold Anything that a Objective-C enum can not hold. So maybe in the most cases, we need to provide these two args at the same time. (Well, Swift's enum can hold object. Good Objective-C) \ud83d\ude2a\n\nFor the new created class or protoco, for example, SDWebImageCoder protocol, it use its own options instead of SDWebImageOptions. So it can make it as a independent module. However, since Cache & Downloader is a little tied to Manager to works with the full function. I think maybe we can not easily seperate it, especially the query op for cache and the download op for downloader.\nSo in #2195. I introduce 3 protocols, SDDiskCache, SDMemoryCache and SDWebImageCache. The first two are non-business logic related. Which only concentrate on common cache usage and you can use it as a independent module as well. So that we can simply to move all the cache management code into this two class. However, due to communicate with manager, another SDWebImageCache protocol is designed to be business logic related to handle all WebCache options and context logic. For example, the Image Transformer function , or SDAnimatedImage animated image class logic. These function are quite useful for many users.\nIf you have a better idea to keep these function availble, as well as the code clean, maybe we can discuss and refactor it. \ud83d\ude05 (Actually, expect that SDAnimatedImage and Image Transformer PRs. Most of other 5.x PRs are about refactory).\n. @bpoplauschi And also, that #2195 refactor cache will revert #1898 because I think this changes will cause most of cache API break. But it does not useful for most of common users. Because I agree that Cache is designed to be clean at any time, you don't need to handle every error. If cache failed, it should treated as cache does not exist as well. The more detailed description is on that PR's description, we can talk there.\n2195 Provide the function to disk cache function. I comment there to show how I create a SDDiskCache which provide a error handler to keep the original error information. So this does not cause any API break. (Especially our current cachePath API, which is really misunderstanding and not compatible for SDDiskCache design). @sunbohong Well. This should be a broken API for the Swift user. But if we keep two of these API, the API will be really misunderstanding.\nFor example, the current 4.x implementation, means each prefetcher can only hold one URL list when you can prefetchURLs:. If you call prefetchURLs second time, we just cancel the all previous URLs and prefetch the new URL list again. However, this 5.x changes will separate each time the URLs you provide. Use the token to cancel previous request, or call cancelPrefetching to cancel all.\nAssume we have both of these two API, prefetchURLs: and addPrefetchURLs:. See the example code:\n```objective-c\nurls1 = @[@\"http://foo1.bar\", @\"http://foo2.bar\"];\nurls2 = @[@\"http://foo2.bar\", @\"http://foo3.bar\"];\nurls3 = @[@\"http://foo4.bar\"]\n[prefetcher prefetchURLs:urls1];\ntoken = [prefetcher addPrefetchURLs:urls2];\n[token cancel];\n// Question: What remain request are in the prefetcher ? \n// [http://foo1.bar] ? or [http://foo1.bar, http://foo3.bar]\n// More serious problem, this code\n[prefetcher prefetchURLs:urls1];\n[token prefetcher addPrefetchURLs:urls2];\n[prefetcher prefetchURLs:urls3];\n// Question: What remain request are in the prefetcher ? \n// [http://foo4.bar] ? or [http://foo2.bar\", http://foo3.bar\", http://foo4.bar\"]\n```\nThis question is hard to answer and will be different depend on user's usage. You can not assume what user actually want as a framework.\nSince we change this in 5.x. So API break change is acceptable. If you just need the current behavior. You can call cancelPrefetching each time before you call prefetchURLs. # Current break change (Need change code)\nSDWebImagePrefetcher.h\n\n-[SDWebImagePrefetcher prefetchURLs:] return type change from void to SDWebImagePrefetchToken *.\n-[SDWebImagePrefetcher prefetchURLs:progress:completed:] return type change from void to SDWebImagePrefetchToken *.\nprefetcherQueue property RENAMED to delegateQueue.\nmaxConcurrentDownloads property REMOVED, use SDWebImageManager.downloader 's config instead.. UIButton only support UIImage's built-in animated images. By default, we do not add GIF coder(FLAnimatedImage is one library which does not use UIImage's built-in animated images) . You should add this manually and start using.\n\nobjective-c\n// in AppDelegate or somewhere, once is enough\n[[SDWebImageCodersManager sharedManager] addCoder:[SDWebImageGIFCoder sharedCoder]];. I just close this issue because there are already some solution here and lack of response. Feel free to reopen it if you still facing this issue \ud83d\ude03 . @joshinn Repro rate 100% ? Are you sure ? Could you please provide a demo that can trigger this crash ?. @joshinn I try the demo is works without any crash on the iPhone Simulator, but crash on the real device(I tested on iPhone 7 iOS 10.3.3, not sure what if on iOS 11). This is a little strange. \nI think maybe this is because the stack overflow(The stack address reach the limit) ? I see the stack reach to 2600+ call, like this question.\nThe change between 4.2.2 and 4.2.3 is that I put the call to self.prefetchURLs[index] to a temp object NSURL *currentURL. Anything else does not changed. See the diff\nThis is used to avoid the thread-safe issue because of that prefetchURLs is a mutable array . However, This may be something bad if a recursion which contains thousands level because currentURL is a temp object, so its pointer needs to be pushed to the stack, this need extra address on stack. However, if I use self, only self pointer to be pushed on the stack(However, this still contains issue, what if I call the recursion to million times ?) . Maybe this is the reason. Anyway, let me find something useful or I have to revert the changes.\n\n. It seems that iPhone simulator can also crash if I increase the repeat count to 1000.\n\nMaybe I get the idea. Previously we use a dispatch_async call to call next prefetcher, this will deliver the call to the queue again, so the call stack will not keep. However, if we change that to dispatch_async_safe, it will turn to a normal function call. If the prefetchQueue is main queue which the same as completionBlock from the manager, this cause recursion. Maybe I need to revert that instead.\nMoreover, Our SDWebImagePrefetcher is during refacotring in 5.x. And we drop the recursion call design to let SDWebImageManager manage the concurrent request. To learn more, see #2191 . @joshinn See #2196. I test it that the issue is fixed.. #2196 Merged. Wait for 4.3.0 release.. Please fill the issue template or we could not provide any help. At least about platform , OS version, library version and the issue description.. From the stacktrace SDWebImageDownloaderOperation.m:227, it seems the code is not SD 4.2.0 and above version. There is a thread-safe issue previously in SDWebImageDownloaderOperation, see #2011 #1998 . You can update to the lastest version and check again. So now I just close the issue. Feel free to reopen it if you still have the issue.. # Current break change (Need change code)\nSDImageCache.h\n\nSDCacheQueryCompletedBlock RENAMED to SDImageCacheQueryCompletedBlock. @skyline75489 Well. The SDImageCache.defaultCacheConfig itself is a global static config object. Means if you modify , all the default config will be affected. However, for specify cache instance crearted by a config object, furtuher changes to that config should not affect the current alive cache object. For example, you modify the global cache object, all the cache instance's behavior previouslly created before your modification should not be changed.\n\nSuppose these code:\n```objective-c\nSDImageCacheConfig myConfig = [SDImageCacheConfig new];\nmyConfig.diskCacheClass = [MyDiskCache class];\nmyConfig.shouldCacheImagesInMemory = NO;\n// Set as default cache config\nSDImageCacheConfig.defaultCacheConfig = myConfig;\nSDImageCache cache1 = [SDImageCache sharedCache];\n// Global shared cache\n// Except cache1.diskCacheClass == MyDiskCache, cache1.shouldCacheImagesInMemory = NO\nmyConfig.diskCacheClass = nil; // back to SDDiskCache\nmyConfig.shouldCacheImagesInMemory = YES;\nSDImageCache *cache2 = [[SDImageCache alloc] initWithNamespace:@\"cache2\" diskCacheDirectory:path config:config];\n// stand-alone cache\n// Except cache2.diskCacheClass == SDDiskCache, cache2.shouldCacheImagesInMemory = YES\n// Now, what about shared cache ? It should not be affect by myConfig changes, or it must face non-sync issue.\n// Because we already specify that we use MyDiskCache to shared cache and maybe we already query some images(Which not stored in memory because shouldCacheImagesInMemory is NO). It should not change\n// So this is why we use copy, or these expect will fail\nexpect(cache1.config.diskCacheClass).equal([MyDiskCache class]);\nexpect(cache1.config.shouldCacheImagesInMemory).equal(NO);\n```\nThis is the common design for configuration object. See NSURLSession.configuration.\n\nOn iOS 9 and OS X 10.11, NSURLSession objects store a copy of the NSURLSessionConfiguration object passed to their initializers, such that a session\u2019s configuration is immutable after initialization. Any further changes to mutable properties on the configuration object passed to a session\u2019s initializer or the value returned from a session\u2019s configuration property do not affect the behavior of that session.\nOn previous versions of iOS and macOS, there is a bug in the implementation, whereby NSURLSession objects instead store a reference to configuration objects passed to their initializers. This allows the behavior of a session to be further configured after initialization by modifying the configuration object passed to a session\u2019s initializer or the value returned from a session\u2019s configuration property.\n\nSo, we should keep a copy of the config instead of a strong reference to avoid multiple cache accidentlly change the behavior. The only difference is that we support some property to be dynamic change. For example, like maxCacheAge, you can change the value after cache initialized. (The opposite one, memoryCacheClass and diskCacheClass does not support dynamic change). However,  configuration object passed to a cache's initialize should be treated as immutable. If you need modify one cache instance's config which support dynamic change. Modify the config's property after the cache instance created.. @skyline75489 Actually. That defaultCacheConfig and copy behave more like CloudKit this design.\nCKOperationGroup.defaultConfiguration // Like our global level defaultCacheConfig\nCKOperation.configuration // Like our cache instance level config\nIf we don't suppot dynamic changes totally, the behavior will match NSURLSession's design. But I see some of code supposes to change the cache config dynamically ? (Is that a designed behavior or just because of 4.x's implementation issues ?). Since we support custom disk cache. If some one have their own usage, such as handle file error. They can override the proper method their own.\n```objective-c\n@interface MyDiskCache : SDDiskCache\n@property (nonatomic, strong) MyErrorHandler *errorHandler;\n@end\n@implementation MyDiskCache\n- (void)setData:(NSData )data forKey:(NSString )key {\n    [super setData:data forKey:key];\n    NSError *error = [NSError errorWithDomain:NSPOSIXErrorDomain code:errno userInfo:nil]; // Grab the POSIX error\n    self.errorHandler.error = error;\n}\n@end\n// Or, just override without super method\n@implementation MyDiskCache\n- (void)setData:(NSData )data forKey:(NSString )key {\n    // get cache Path for image key\n    NSString cachePathForKey = [self cachePathForKey:key];\n    // transform to NSUrl\n    NSURL fileURL = [NSURL fileURLWithPath:cachePathForKey];\nNSError *error;\n[data writeToURL:fileURL options:self.config.diskCacheWritingOptions error:&error];\nself.errorHandler.error = error;\n\n}\n@end\n``. Well. At the beginning I think thatSDDiskCacheandSDMemoryCacheis enough for every user who need advanced feature. But I miss one reality that some hack logic (UsingSDImageCacheOptions) is already exist onSDImageCacheinstance itself. Especially for thatqueryCacheOperationForKey:options:context` method.\nThis is only useful for SDWebImageManager currentlly and behave different with other's API. It may become more and more non-related to image cache, but like a Glue code tied with SDWebImageManager. We'd better provide a way to change.\nAnd also, I found that some image loading cache system (including LKImageKit, YYCache, FastImageCache) use their own way of cache, such as mutiple caches (query from multiple source, store into a priority cache),  non memory-disk cache (like SQLite or something). Maybe we need a extra abstact layer to make it more customable and ready for future maintain (Seperate image cache code to manager-oriented-code).\nSo I create another protocol SDWebImageCache, represent the basic CRUD op for cache. See the code about it.. @skyline75489 The cache path API changes part has been moved to #2276 . So we can merge it easily since this PR contains too much things.. The custom web cache protoocl (SDWebImageCache & SDWebImageCachesManager) changes part has been moved to #2278 . So we can merge it easily since this PR contains too much things.. Please fill the issue template. We need the information about OS version, Library version, Xcode version to check the issue.\nThis code to post notification in SD 4.2.3 is a weakSelf. So maybe it will not cause not the issue. @mythodeia Yes. The first attempt does not solve the problem. We should not do any time-consuming task in the URLSession delegate call because the queue is shared crossing different operations.\nSo, we should call the completion block asynchronizedly after the image decoded finished. The URLSession delegate methods return as fast as possible to let another operation process their stuff.. I don't know whether this one should be marked to 4.3.0 milestone or not. The changes works in the demo and notably reduce the visual download timing if I have 10 WebP images. But maybe this performance enhancement need more consideration, we can keep future milestone(in 4.3.x).. After some consideration, I remove that performance enhancement to cache the image if progressive decoding finished. Why not to cache it is because these reasons:\n\nSome decode options are not always the same during progressive decoding and normal decoding. For example, we do not treat SDWebImageDownloaderScaleDownLargeImages.\nProgressive decoding will not trigger a completion block. It just for setImage, so should be as fast as possible. So we can not arbitrary put all decoding options also available in progressive decoding, for example, that SDWebImageDownloaderScaleDownLargeImages may consume more time and in 5.x, more options like SDWebImageCoderDecodeFirstFrameOnly or SDWebImageDownloaderPreloadAllFrames will also contains performance impact if we always done this when new data available.\nIt's hard to distinguish the image through progressive decoding or normal decoding if we cache the image. And also, some imageView like UIImageView or SDAnimatedImageView(in 5.x) will ignore same instance call twice for setImage:. If we just cache that, this may cause problem that the state was not updated after completionBlock.\n\nSo, from these consideration, I revert the changes for that caching decodedImage during progressive decoding. We always create new image when all download finished.. Long time passed and no one reviews :). I check this seems reduce the time for download when dispatch decoding stuff on special queue. So I just merge now and see this on 4.3.1. . \ud83d\ude05 @bpoplauschi  Sorry to bother. Today when I try the SDWebImageProgressiveJPEGDemo, I found a issue may related to this change.\nI guess, this changes, for most of cases, will have the benefit for image download && decoding speed. Because different operation don't need to wait other operation to finish the decoding process.\nHowever, since this separate the image download queue && image decoding queue, which means, if decoding speed is much slower than the download speed, then this will cause a bad effect.\nThe reason that cause this issue, because of the network callback ratio. URLSessionQueue is the delegate queue calling your URLSession:dataTask:didReceiveData:. From current behavior, if new data is downloaded from network, when this delegate method return, URLSession will immediatlly callback again with the new data. And also, until this delegate method return, even new network data is available for URLSession, there is no chance to let URLSession to callback your delegate method again, because you block the delegate queue.\nWhich means, if we put the decoding process into the delegate queue, the actual callback speed from URLSesson, will be slower than when we separate the network && decoding process. It's not hard to think of because decoding in delegate queue will block it, make next callback been delayed. So, let's consider this test experiement between these two cases.\nA experiment in logic\nNetwork speed: 100KB/s\nImage Data Size: 1000KB\nDecoding time: 100KB/s (assume decoding speed is really slow)\n\nSingle delegate queue:\n\ntimestamp(s) | total data(KB) | decoding time(s) | downloaded data during decoding(KB)\n--- | --- | --- | ---\n0 | 0 | 0 | 0\n1 | 100 | 1 | 100\n2 | 200 | 2 | 200\n3 | 300 | NA | 0 (blocking delegate queue)\n4 | 400 | 4 | 400\n5 | 500 | NA | 0\n6 | 600 | NA | 0\n7 | 700 | NA | 0\n8 | 800 | 8 | 800 (actually is 1000-800=200)\n9 | 900 | NA | 0\n10 | 1000 | NA | 0\n12 | 1000 | NA | 0\n13 | 1000 | NA | 0\n14 | 1000 | NA | 0\n15 | 1000 | NA | 0\n16 | 1000 | NA | 0\n17 | 1000 | 10 | 0\n18 | 1000 | NA | 0\n... | ... | ... | ...\n27 | 1000 | NA | 0 (finish)\nFinally duration for download and decoding: 10 + 17 = 27, refresh image times: 5\n\nSeparate two queues:\n\ntimestamp(s) | total data(KB) | decoding time(s) | downloaded data during decoding(KB)\n--- | --- | --- | ---\n0 | 0 | 0 | 0\n1 | 100 | 1 | 0 (async, always 0)\n2 | 200 | 2 | 0\n3 | 300 | 3 | 0\n4 | 400 | 4 | 0\n5 | 500 | 5 | 0\n6 | 600 | 6 | 0\n7 | 700 | 7 | 0\n8 | 800 | 8 | 0\n9 | 900 | 9 | 0\n10 | 1000 | 10 | 0\n11 | 1000 | NA | 0 (still decoding)\n... | ... | ... | ...\n55 | 1000 | NA | 0 (finish)\nFinally duration for download and decoding: max(10, 1+2+3+4+5+6+7+8+9+10) = 55s, refresh image times: 10\nSo this may cause problem, if your image decoding speed is not fast enough and use separate queues. Because that you have to wait all image decoding finished and trigger a final image refresh and callback, even all the image data has already been downloaded.\nSolution\nI think the root case that may cause this overhead, it's because we don't have a minimum callback frequency, to limit the frequently callback of progressive decoding and progressBlock. We just do callback based on URLSession delegate call frequency. If we can limit it, for example, only when 10% new data is available, we can start a new progressive decoding and callback the progressblock, then this issue can be controlled.\nSo, I think we can add a feature, called minimumProgressPercent or minimumProgressCallbackPercent. It's a double value between 0-1. For example, if the user specify the value to 0.1, which means, if the current downloaded data percent - previous downloaded data percent < 0.1, we will earily return on URLSession:dataTask:didReceiveData: delegate method. Only update the image data, but not do any progressive decoding or progress callback. User can avoid too frequently callbacks and some bad effect on performance.\n. Duplicated for #803 and fixed in #2184. It will be released in 4.3.0 on Wednesday. \ud83d\ude05 So...I just close this issue.\nI can translate this for the non-Chinese speaker, this issue is about that:\n\nThe application which binary contains WebCache was rejected by Apple during App Store submitting.\n\nBut however, our company's application using SDWebImage very well. So I don't know anything about this. However, since it's soleved, just close it.. I'm not familiar with Firebase's cloud service. Does that means you should pass addtional HTTP Headers or something like HTTP Authorization ? See headersFilter or HTTP Authorization\nOr you can provide the documentation for Firebase service to let I know the concept.. @Ankish  Well. I see. It seems that FirebaseUI framework create their category with SDWebImage. It works for normal UIImageView but not for FLAnimatedImageView. This may not works because they use sd_imageWithData, which just present a UIImage but not FLAnimatedImage which is need by FLAnimatedImageView.\nIf you still want to use GIF with FLAnimateImageView and FirebaseUI. You should check their issue which contains a custom category to suppor this.\nIf you do not need to use GIF with FLAnimateImageView but want GIF works for all UIImageView like 3.7.6 version to work with FirebaseUI, you should add the GIF coder, see GIF coder. @bpoplauschi @skyline75489 @mythodeia It seems that the 4.3.0 milestones are cleared. I update the changelog to mark all the changes ordered by the module.\nDo you still have something to append or to wait ? Or maybe we can update the spec files and release the 4.3.0 version soon.. 4.3.0 released :). The completion block is captured into SDWebImageManager and will be only removed after the load progress finished (Cache fetched or network finished). So if you use any self in the completionBlock, the self instance's dealloc may be later than you expected. (Because only after network finished, Manager's strong reference to completionBlock removed, completionBlock's strong reference to self removed so your VC dealloc. If you don't understand this, learn AutomaticReferenceCounting)\nIf you do not want this instance keep alive during network, just mark it to weak self. For Objective-C, use this:\nobjective-c\n__weak typeof(self) wself = self;\n[self.imageView sd_setImageWithURL:url completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n    wself.imageView.image = image;\n}];\nOr use the weak self in Swift:\nswift\nself.imageView.sd_setImage(with: url, completed: { [weak self] (image, error, cacheType, imageURL) in\n    self?.imageView.image = image\n})\nActually, I think this question should add to common problems :). Added Handle self capture in completion block in the common problems.\nThis is not a issue or bug for SDWebImage because it's about Objective-C/Swift 's memory management. Some iOS developer may be not familiar with this. We should provide the correct way to do this :). @bpoplauschi :) Welcome back.. The image data is a compressed format but not raw bitmap data. See Wiki-Image file formats. So your comparation between UIImage and NSData can not specify the result.\nFrom current implementation, SDImageCache itself does not add or modify the image data from the network. But excepted only one case when using SDWebImageScaleDownLargeImages and the image is actually scaled down. However this case is really misunderstanding and will be deprecated in 5.x.. The View Category including UIImage+WebCache, UIView+WebCache or some other categories support cell resue in the implementation. The behavior is not so magic and it's all in the source code (However, seems there are no detail documentation for this)\n\n\nWhen you call sd_setImageWithURL:, whatever you provide a valid url or nil, we will firstly set the placeholder(Or nil, which means will clear the current rendered image) to the current imageView's image before any cache or network request. Then the placeholder argument is totally unused, unless you specify SDWebImageDelayPlaceholder. See the code here\n\n\nIf the image fetched in memory cache, the callback from manager is synchronously and is dispatched to the main queue if need(If you already call sd_setImageWithURL: in the main queue, there is no queue disaptch and just like a normal function call). So it will immediately set the result image to override the placeholder. In the set image process, we will call setNeedsLayout to mark the view it's ready for rendering. UIKit draw all the views during the same runloop(No asynchronous or queue dispatch) depended on view's first state and last state but not the intermediate state. The state we set the placeholder(or nil) at the beginning will be totally ignored and not even rendering to cause a flashing. If you do not understand this behavior, see Understanding UIKit Rendering\n\n\nIf the image fetched in disk cache, the callback is asynchronously and dispatched from the cache queue to the main queue. So the placeholder (or nil) will be rendered with a little short time(depend on the IO speed and decoding time. Maybe like a flashing). And then replaced by the final image. See the code here\n\n\nIf the image fetched from network, the callback is asynchronously and dispatched from the downloader session queue to the main queue. So the placeholder (or nil) will be rendered with a long time(depend on the Network speed and decoding time). And then replcaed by the final image. This behavior is nearlly the same as disk cache except the duration for placeholder rendering.(Network speed is far more slower than disk cache)\n\n\nIf you use SDWebImageDelayPlaceholder, we will use the placeholder as target image after the fetch finished if the image is nil.  For normal process, the placeholder is just used in the beginning of sd_setImageWithURL.. So actually, for most of usage. All you need to do to work with cell reuse in UITableView, UICollectionView on iOS (NSTableView, NSCollectionViewon macOS) is quite simple, just use:\n\n\nobjective-c\n[cell.imageView sd_setImageWithURL:url placeholder:[UIImage imageNamed:@\"placeholder\"]];\nHowever, there are some options to control the detailed behavior using for View Category such as SDWebImageDelayPlaceholder, SDWebImageAvoidAutoSetImage. And If you need any transition animation for cell reuse, you can try Image Transition.. We have a wiki page here. So I add this into the Common Problems - Handle cell reusing for view category. We do not need to modify that documentation, which is for basic and simple usage.\nAnd also, thansk for your feedback about this question :). First, when you submit the issue, please keep and provide the issue template about the framework version, platform version(iOS ? macOS ? version ?), and Xcode version. Or we could not help to find the potential solution.\nAnd, maybe you're using a old version of libwebp and compile as a static library by yourself. SDWebImage from 4.x only supports libwebp 0.5.0 or higher. \nYou can try two solution, the recommend one is using CocoaPods with libwebp and enable WebP subspec in SDWebImage.\nIf you are using manually build framework or carthage, just make sure to not change any project configuration before you compile the libwebp framework. First of all, you should not use WebP.framework and WebPDecoder.framework at the same time because this will cause symbol conflict.\nNext, you should not use the use the \"Precompiled WebP framework for iOS\" from libwebp's download page as well. Because that is a custom cut framework but not the code we used (Only contains the basic API in encode.h and decode.h but not something we need like mux.h and demux.h, you can see how Google generate this precompiled framework). The headers files and dylib are different from the source code in their original repo or GitHub mirror\nYou should try to compile that to iOS or macOS by yourself to produce a libwebp.framework, and drag that instead into the project. See WebP-building.\nOr if you use CocoaPods as package manager, you can use cocoapods spec to automatically generate the build config, see libwebp. Carthage does not have this feature because it tied to the Xcode project.. @BakaYang I means that iosbuild.sh does not define the WANT_MUX & WANT_DEMUX to let animated WebP decoding/encoding works. And so those header files or sources files does not been compiled. You can check their makefile and configure file\nWe need mux.h and demux.h to do animated WebP decoding & encoding. So you should customize the build script here with configure --enable-libwebpmux --enable_libwebpdemux\nIf you're not famillar with makefile or shell script, you can learn here.\n. Use readOnlyCachePath. Attention you should put the Assets folder in project folder but not .xcassets format(Xcode will compress it into a assets.car and could not load by disk cache) \nOur documentation in Wiki Page does not contains this feature, because this maybe advanced usage.. @HaileApp You can always get the Swift interface through Xcode's Generated Interface. The Swift interface is open func addReadOnlyCachePath(_ path: String) in SDImageCache. For the 1st case, you can Use -[SDWebImageManagerDelegate imageManager:transformDownloadedImage:withURL:] to do  custom resizing for your case if you find the image size is larger than excepted. This will also affect the cache in memory and disk.. @kushaseum  You can do with the delegate methods to resize if need(Such as for specify URL, for size which larger than the limit). The image resizing code you can get reference from nshipster and use whatever framework you want. Actually, the Objective-C interface is no difference with Swift code and you can just read as well :)\n```swift\nclass ViewController: UIViewController, SDWebImageManagerDelegate {\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    SDWebImageManager.shared().delegate = self\n    SDWebImageManager.shared().loadImage(with: URL(string: \"http://foo/large.png\"), options: [], progress: nil) { (image, data, error, cacheType, finished, url) in\n        // Do something\n    }\n}\n\nfunc imageManager(_ imageManager: SDWebImageManager, transformDownloadedImage image: UIImage?, with imageURL: URL?) -> UIImage? {\n    guard let image = image, let imageURL = imageURL else {\n        return nil\n    }\n    if (imageURL.lastPathComponent == \"large\" && (image.size.width > 1000 || image.size.width > 1000)) {\n        let targetSize = CGSize(width: 1000, height: 1000)\n        UIGraphicsBeginImageContextWithOptions(image.size, !SDCGImageRefContainsAlpha(image.cgImage), image.scale)\n        image.draw(in: CGRect(origin: .zero, size: targetSize))\n\n        let scaledImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        return scaledImage\n    } else {\n        return image\n    }\n}\n\n}\n``. My mistake. Change theimage.sizetotargetSize` in UIGraphicsBeginImageContext.\nThis is just a demo code to scale the image without keep aspect fit. You should try to use something match your usage. For example, keep the aspect ratio based on your requirement. If you don't know how to write one, learn from the web page nshipster I provide or find something useful category like UIImage-Additions.\nIn SD 5.x maybe I can add something common usage for image in SDWebImageCoderHelper to make it easier to user to write their coder or do transforming. But because this it's more like a util so user can still use their own way to do image processing.. clearDiskOnCompletion will remove all the disk cache whatever the files outdated or not.\ndeleteOldFilesWithCompletionBlock will be called when your application entering the background  to remove the outdated files.\nSo for your cases, you should just use clearDiskOnCompletion. @mikemike396 deleteOldFilesWithCompletionBlock will be called each time your application entering the background(iOS & tvOS). It based on file's last modified date and file size to remove the out-dated files. For non-outdated files, the removal will ordered by file's last modified date and do until we below down the limit maxCacheSize in SDImageCacheConfig.\nclearDiskOnCompletion will not automatically been called until you manually do this. It just arbitrarily remove all the files under the cache path.. What does this means ? It's just a lock. Must ensure the other threads are blocked until the lock released. I don't know what about this \"There are some notsmooth frames\". Is this cause any performance issue ?\nHowever, if you do not add lock, there is thread-safe issue and will cause crash if you call the methods including View Category, Manager, Downloader from arbitrary thread.. I see the stacktrace. There is no 'dispatch_barrier_sync' in SD 4.3.0. We use a 'dispatch_semaphore' to lock it to ensure thread-safe. You can try to upgrade to the new version and have a try.\nSo I just close now. Feel free if the crash occur again.. I'll check this issue later. We introduce a performance improvements for FLAnimatedImageView to bind FLAnimatedImage to UIImage with associated object, so that we can store it into memory cache. This strategy may have some race condition.\nIt's better to provide a demo which can reproduce this issue to let us identify the problem. Thanks for report.. @liakhandrii I checked your demo usage. This is designed behavior now due to the change to improve the performance and maybe we decided to not change back. Let me tell the reason for you.\nFor histrocal reason, we always query the disk cache when the image is an animated image format. Which means for UIAnimatedImage created by -[UIImage animatedImageWithImages:duration:], we always query the disk cache even the image instance is in memory cache. The response arg in completionBlock may looks like image != nil, data != nil, cacheType = memory.\nHowever, This is not a designed behavior but we used to adopt this. This is a trick to solve the problem that FLAnimatedImage need the data. But this will impact the performance for normal usage which does not need any data and extra disk IO. (Such as Animated WebP images, which is UIAnimatedImage but we do not need any data). And more importantly, for static UIImage, we always do not query disk cache and return the data args with nil. These two behavior are quite different and may cause far more misunderstanding.\nIn SD 4.3.0, we change this. So, if you really need the data, you should now pass a extra options SDWebImageQueryDataWhenInMemory. \nobjective-c\n    /**\n     * By default, we do not query disk data when the image is cached in memory. This mask can force to query disk data at the same time.\n     * This flag is recommend to be used with `SDWebImageQueryDiskSync` to ensure the image is loaded in the same runloop.\n     */\n    SDWebImageQueryDataWhenInMemory = 1 << 13,\nI mark this into the usage in wiki page. Thanks for your feedback.. And one more thing. That sd_imageData() method is an API to encode the UIImage into NSData. It actually call our GIF coder to use Image/IO to do GIF encoding. So most cases you do not need this because this encoding need time and the produced data may not equal to the original data from the network. It's for user who need to upload image to the server or store their own image to the cache \ud83d\ude05 \n\nWell. Through this may not be associate to your issue. I found that using SDWebImageQueryDataWhenInMemory will cause the response cache type always be disk. This may not a designed behavior. We'll fix this in 4.3.1.. I see your updated demo again. Your call is like so\nswift\nSDWebImageManager.shared().loadImage(with: url, options: [.cacheMemoryOnly, .queryDataWhenInMemory], progress: nil, completed: { (loadedImage, data, error, cacheType, success, _)\nIf you using cacheMemoryOnly, this means when the download finished, we will not store the image data to disk cache and just let the data dealloc. Only the UIImage instace kept in SDImageCache. So this is also a designed behavior. This options is a little misunderstanding from its naming. This does not means we will query memory cache only but about the logic after image downloaded\nFor now and future implementation (at least in 5.x. Or this will be a big change from the scratch). Memory cache only keep the UIImage instance but not NSData. So when you need the data, you should always prefer disk cache.\nThrough in 5.x, we introduce a SDAnimatedImage which you can obtain the data again through its property. You should not relay on this because it can be changed by other class which adopt SDAnimatedImageProtocol.. It seems that this issue is more about usage now. And the question is over. So I'll close this to keep the tracklog more clearly.\nIf you still have some questions about this, feel free to reopen it :). @YasinZhou Do you mean this case ?\n1. UIImageView request -> www.foo.bar/1.gif -> Download and cache to memory/disk cache\n2. FLAnimatedImageView request -> www.foo.bar/1.gif -> Memory cache hit, return image without data and sd_FLAnimatedImage\nIf so, please reply and I'll give some reason and consideration to this. @YasinZhou I see..\nTo fix this issue, we maybe have two choice. But firstly I want to say something about previous version (I remember is 4.0.0-4.2.0) SD and FLAnimatedImage.\nFLAnimatedImage's biggest disadvantage is that it's not a subclass of UIImage, but a NSObject. This means we can not store it into image cache. Because our image cache's memory cache only store the UIImage instance, but not any NSData or FLAnimatedImage. Our image cache's disk cache only store NSData. I don't think we need to change this because this will cause many issues.\nSo what we do in previous version SD for FLAnimatedImage. It's using a tricky logic. It's the following one:\n\nIf memory cache hit, and the UIImage.images is not nil, everytime we query memory cache, we will call -[NSData dataWithContentOfFIle:] synchronically to query the disk :). So if you query multiple GIF images, your main queu may be blocked and frame rate may drop during scrolling\nIf memory cache miss, then query the disk cache in global queue and callback NSData.\n\nSince most cases, you only display GIF images on FLAnimatedImage but not UIImageView if you decide to use that GIF subspec. To fix the performance for this, we change it to current implementation. Which means we will bind a sd_FLAnimatedImage into UIImage to image cache.. So now, let's talk about this case:\n\nUIImageView request -> www.foo.bar/1.gif -> Download and cache to memory/disk cache\n\nAfter this step, actually we do not know any information about the image in the cache to specify that it's a GIF image. Because if you use UIImageView to request, it's been treated as static image and may be redrawn during shouldDecompressImage. Any information in image instance itself has been lost.\nSince we don't know that image original source is an  Animated GIF. There maybe hard to produce some logic for cache. If you think you can always store the full animated images into memory. However, this will cause extra CPU/Memory usage, and most common case's performance will be reduced.\nFirst choice\nI can give a solution (Not so great). If you know your images is animated GIF, and your current image request using UIImaegView. Manually create FLAnimatedImgage instance and bind sd_FLAnimatedImage  to the image in completion block. Then the image in the cache should works for latter FLAnimatedImageView image request.\nOr more brute force, call -[SDImageCache removeImageFromMemoryForKey:] before your FLAnimatedImaegeView image request start. This can avoid the normal static image cache been hit.\nSecond choice\nIf you think the previous version's behavior is adoptable (Query disk synchronically which may reduce framerate). I can introduce the options for this in #2162 . When you use SDWebImageQueryMemoryData & SDWebImageQueryMemoryDataSync, you can get the previous SD's behavior.. @YasinZhou Well...SDWebImageQueryDataWhenInMemory may cause JPEG/PNG images also query the disk data. (Though this one is asynchronized, not block main queue). But I think not all people need this. So now it does not become the default options. \nYou can consider to write another convenience method such as sda_setImageWithURL: which provide this one as a default option....And if your image URL is standard (Such like that all GIF images will contains abc.gif suffix). You can also add some logic check there to avoid impact JPEG/PNG images.\nAnd In 5.x, we will move FL to another repo and use our own solution for animated image/imageView. See #2140 . Which may solve many issue about FL to integrate with SDWebImage's Core feature. It's welcomed to try that ;). For disk cache performance, are you using WebP images ? If so, see #2245 . @rpstro02  You can pass a UIAnimatedImage created by -[UIImage animatedImageWithImages:duration:]. Which can be shown correctlly. You can call -[UIImage sd_animatedGIFWithData:] to create one.\nHowever, since FLAnimatedImage is not a UIImage subclass, you can not pass one to do placeholder. This will be fixed into 5.x release because we drop out that FLAnimatedImage subspec and introduce own SDAnimatedImage, which is a UIImage subclass.\nFor now, just use some other way like using UIAnimatedImage, or set the placeholder yourself before calling sd_setImageWithURL: with SDWebImageDelayPlaceholder \ud83d\ude05 . @rpstro02 Maybe a better way. We can expose the associate object in FLAnimatedImage+WebCache. Then you can create a new FLAnimatedImage, bind this to your UIImage placeholder and call the sd_setImageWithURL:.\nIn 4.3.0 we introduce this to fix some issue and \"store\" the FLAnimatedImage into memory cache. But it's read-only because at that time I think it's should be a advacend feature and user should avoid touching this. Now I think it's time to open the ability to set that property.\nSee #2220 . This is also a big feature because we need many image process code. Through I reference some from third party library and this should work. There may be some race condition or bugs. I just firstlly publish this PR to make furture development.\nAnyone contains idea about image transfomer can also comment here. Such as your use case about transforming. So we can have a clear aim to go on ;). # Current break change (Need change code)\nSDWebImageManager.h\n\nimageManager:transformDownloadedImage:forKey: delegate method REMOVED, use transformer property instead.. \ud83d\ude05 Seems no one review this...\n\nThis PR can be split two parts. The first part is the interface and protocol for SDWebImageTransformer, which allow user to transform current UIImage to another UIImage. The cacheKey is provided for the context of current image. This is useful, for example, you want to apply a corner radius effect for download image, but do not want to process the image each time you query from disk cache, which may decrease the performance. So we store it into disk cache based on a rule to generate actual cache key from the transformerKey.\nThe second part is the UIImage+Transform category, which provide some common image processing util and the code is from popular lib such as UIImageAddtions and YYCategory. We just make it more easy to use and add macOS support. There are tests for keeping these method work.\nTo keep the 5.x milestone at date, maybe this PR should be merged in weeks. Any idea ? @mythodeia @skyline75489 . @skyline75489 Well...Why we need this because maybe we can make it easy to use for common usage and normal user. I think our library can aim to easy-to-use for beginning user(Actually most user are these type :)), but also allow advanced user to customize.\nThese code actually are reference from other image process lib such as UIImage-Additions, if user need more feature, just build their own by calling third-part lib, it's really simple and easy (unlike that custom coder which need expert experience), so we don't need to change the API again and again.\nBut anyway, if you think some of these built-in common transformer's API can be polished, you can comment here.. @skyline75489 These UIImage+Transform category are designed to be exposed to the user. Especially the beginner user who may need common image processing(Well, static image only). So this combined with transfomer are both public APIs but not private APIs for ourselves.\nWhy to introduce this may because of our friend Kingfisher - processors, which provide some build-in transformer, as well as the Kingfisher - UIImage extensions which called by transformer.\nI think this design is not bad. Because since you decide to provide some transformer, you need write the image processing code. These code it's a non-business related stuff and based on objective usage, which means everyone can write the same code when implement it (like you write a sorting algorithm). So we can move the code into category and provide the common function to let user use out of box. We will never do any business-related transformer or category, these should be done by user using custom transformer.. @skyline75489 I found that all our previous category does not follow the prefix naming, such as UIImage+WebCache, NSData+ImageContentType. Only the category method itself does with sd prefix (Greate...no conflict)...So I just follow. Actually maybe we should do this :)\nAnd, for Objective-C, the same category name acually does not cause problem, the category naming is just a identifier which will be erased during runtime. Only the same method name does, which will replace one of the same name method during runtime. See stackoverflow  or blog(chinese). @skyline75489 I move those two UIColor+Addtions and NSBezierPath+Addtions category into the implementation files and change the category name. This can avoid any name conflict and maybe these two method can be hidden from the public API.\nFor that UIImage+Transform.h category naming, I think it's adoptable and I search the cococapods, there are no same naming category. Since Objective-C category name does not do anything, if user have meet some category naming (not method name) warning, they can just ignore it. Or they can using the full path header like #import <SDWebImage/UIImage+Transform.h> and mark with -Weverything around.\n\nOr maybe it's a time to tidy up the un-standard category naming in our library ? But I think maybe this cost is much than the gain.. Merged. Since this can be a independent component between manager. We can maintain this without change so much core API.. Hi. @balkarov \nFor SDWebImage 4.x(I'm not sure whether this exist in 3.x), you can use headersFilter in SDWebImageDownloader. If you need to specify only some specify URLs from View Category to use addtional headers, many you need write some switch case or check code.\nobjective-c\nSDWebImageManager.sharedManager.imageDownloader.headersFilter = ^SDHTTPHeadersDictionary * _Nullable(NSURL * _Nullable url, SDHTTPHeadersDictionary * _Nullable headers) {\n    if ([url.path isEqualToString:@\"auth\"]) {\n        SDHTTPHeadersMutableDictionary *authHeaders = [headers mutableCopy];\n        [authHeaders setValue:@\"foo\" forKey:@\"Authorization\"];\n        return [authHeaders copy];\n    } else {\n        return headers;\n    }\n};\nIf you are using standard HTTP user & password authorization, you can simply use username and password property in SDWebImageDownloader.\nBut however, in SD 5.x, we introduce a context option to allow directlly pass the HTTP header fileds from View Category(When you call sd_setImageWithURL:placeholderImage:options:progress:completed:context: API). So you do not need a central manager to filter the HTTP headers. See #2166. And we can introduce this feature(HTTP headers only but not HTTP response) into 4.x if more peopel really need this feature.. @balkarov \n4.x all View Category API(sd_setImageWithURL: I means, not repeated) using the shared manager. So if you set headersFilter on SDWebImageManager.sharedManager.imageDownloader. This will work. You can carefully filter the specify URLs need this headers to not impact others.\n\nThat context arg is available on 5.x. Currently 4.x that only UIView+WebCache's API sd_internalSetImageWithURL:placeholderImage:options:operationKey:setImageBlock:progress:completed:context(So many args....) contains the equal things.\nCurrently in 4.x we does not have this HTTP headers feature. However, if many user really want feature, we can add one(5.x may be released in April but 4.3.1 maybe Febrary end). We can add one called SDWebImageExternalAddtionalHTTPHeaders in 4.x and by simply pass the headers to downloader. Currently there are two context options naming with internal or external so we follow the current naming. However, in 5.x, that context arg will be available through all View Category API(sd_setImageWithURL: I means) and the naming will be changed with a context prefix and use Swift string enum for easy usage(Then this one should be naming to SDWebImageContextAddtionalHTTPHeaders).. @balkarov I check and 3.8.2 also contains this headersFilter property. If you do not want to upgrade now, you can use that instead. :). @balkarov All View Category APIs finally call downloader's downloadImageWithURL if the cache retrieve failed and start to download. So this should work. Or....Maybe bugs :). @balkarov Historical reason(I start to maintain from 4.x). That setValues:forHTTPHeaderField: are static way to add the default value for headers for all requests.\nHowever, since many people need some logic code to check before apply the headers for URLs (Not all URLs need this default headers) . So then they introduce the headersFilter :). I just close this issue because there are already some solution here and lack of response. Feel free to reopen it if you still facing this issue \ud83d\ude03 . @Steven4294  Our lib is aim to be open and for common usage. So if you need new image format support, see Custom Coder Support and write your own decoder for this GIF-Video format :). @Steven4294 I check the description about that gifv. It's just a acutal H264 codec video format which store in a MP4 container(You can rename the .gifv to .mp4 and play it). This is more like a video decoding. So I suggest you to directlly use video player to play it, such as AVPlayerViewController\nIf you still want to treat this as a image fomat and using with SDWebImage, you need to write a custom coder, you can use Apple's AVFoundation, VideoToolbox or ffmpeg to support this by grabbing each frame and duration, then use the animatedImageWithFrames: to assemble a final animated UIImage/NSImage instance. (To say, I'm not agree with this way because why they create gifv as a MP4 video  is because of the memory usage and performance, but now we revert back. Whatever, it decided on you...)\nIf many other people also need this use case, you write it and share that with a CocoaPods for other people :). To see the correct result for GIF rendering, checkout this branch and run macOS demo and see the rendering for the first doggy GIF. Here is the video showing the demo\nBefore (Wrong):\nmacOS-wrong-GIF-rendering.mov.zip\nAfter (Correct):\nmacOS-GIF-rendering.mov.zip. These block always need retain self. Just replace that _ with self.. Though seems no any issue related to this, I can change this to keep no warnings.. Fixed by #2225 . The stack strace seems related to Core Animation internal issue. Is that caused by any behavior in SDWebImage ? I'm a little confused.\nI think it's better to fire a radar or bug report to Apple first and check whether this is a bug in Core Animation.. The same issue on developer forum: https://forums.developer.apple.com/thread/94163. I agree that is a bug because even you simply use -[UIImage drawInRect:], there may be a rare rate to crash only on iOS 11.2.x, really suck. Hope for a workaround from Apple :). @piercifani Actually this will not solve that problem. \ud83d\ude1e  This is iOS 11.2~11.3 bug. I've fired a radar to Apple.\nWhen you using -[UIImage imageWithData:] to load some special image or you're in the low memory situation, or any case that case the internal bitmap buffer to nil. Then it will cause a immediately crash. However, previous iOS version only cause the imageView become transparent.\nIf you disable SDWebImage's force decode feature, it may reduce the memory usage because the image stored in cache may not been decoded. (Just store the original image data in JPEG/PNG format, until imageView rendering it). This may ease this crash rate. However, not the true solution to avoid it.\nTo know the reason, just check CGImageIssueDemo.. @lianleven This bug has already been fixed in iOS 12. I've receive the response from Apple developer team and test it. But however, iOS 11.4 still contains this problem. The best solution, it's to limit your application memory usage. \nFor example, you can just use @available to disable force decode feature or limit a low number of SDImageCache.maxMemoryCost. There are many ways to limit the size of memory usage for image displaying.\n\n. @swapnil-vuclip  No flicker, means to sync load. Since this will decode on main queue, UIKit will not run into another runloop to acutally render your placeholder(or nil to clear). You can consider using SDWebImageQueryDiskSync to sync load,  though this may decrease the frame rate. See description there :)\nMore over, actually that clear memory cache when entering background not so accurate. We only clear memory when memory warning and remove outdated disk cache when entering background. If your application has already suspend and stay in background, then user open more Apps and a memory warning trigger, only this time your application become active, then receive the memory warning and clear the memory cache to avoid your application be killed with a high priority. This is different from that we clear memory cache each time you entering the background :)\nAlso, there are another option. We can keep a global weak NSMapTable for all image instance.(Do not impact the retain count to increase memory usage.) So when memory warning, even the NSCache was purged, your UIImageView.image is alive, so we can get this as from memory cache to allow rendering. And then sync back this alive image to NSCache again.\nThis performance enhancement is scheduled to be done in 5.x, but if user really need this, we can put back in 4.x. You're welcome :). @swapnil-vuclip The only difference between JPEG and WebP is the decoding time. In general, WebP decoding spend 5x time slower than JPEG(Real device on ARM64 platform, not iPhone Simulator).\nSo, I can provide some advice for this. One simple solution is to provide a transition animation when you load the image from disk cache. This can avoid those visual effect. Maybe some cases you can try this to \"solve the problem\".\nFor other solution, such as use mmap (Through diskReadingOptions) to speed up query disk speed; This can not solve this problem from the stractch because the image instance is not in memory at all for your case.\nMaybe in 5.x I can introduce a cache-serializer to allow you save the modified data instead of original data. Then you can just encode the WebP images to JPEG images after download. This can speed up the decoding speed.\nHowever, since you load the image from disk, there must be duration unlike memory cache, this is un-avoidable :). You should import \"UIView+WebCache.h\" when using Objective-C. Or import the umbrella headers.\nSince many user argue for this \"cache serializer\" feature and it's not API-breaking. I'm considering add this into 4.x in patch version..... @swapnil-vuclip See #2245. If you are facing the issue of WebP decoding speed from disk cache. You can considerate to encode the image to another format such like JPEG or PNG when storing to disk cache.. As soon as those 4.3.3 milstone merged. Maybe this weekend.. @swapnil-vuclip \ud83d\ude05 There is no magic way to solve this. Because your application was killed or anyway that cause your memory cache invalid. You now have to query disk cache. However, query disk cache need time to first load NSData into memory, then need time to decode it into a UIImage to render on UIImageView. You can not remove this cost because it's the objective facts cost. But can only decrease the time duration for those two cases.\nFor disk data time, you can use NSDataReadingMappedIfSafe on SDImageCache.shared.cacheConfig.diskReadingOptions. This will use mmap instead of fread and maybe enhance the performance.\nFor decoding time, WebP decoding spend 5x time than JPEG, so I create that PR to allow user to convert the original WebP data from the server to JPEG format and store to cache. Then you just need to decoding JPEG from disk cache.\nIf this duration still not face your limit, you have to find other ways to reduce this visual effect. For example, you can provide placeholder image, add indicator, using view transition...and so on.\nFor that view transition, it was designed to use after download because most time we do not need any transition for image from disk cache. We have one SDWebImageForceTransition to force enable transition, but I think this is not what you need :). If you want this config applied for all the view category request, set the config to [SDImageCache sharedCache]. And then just use sd_setImageWithURL:\nIf not(only apppied for current batch of image request), you should now use a little tricky way by using the API in UIView+WebCache, there is a context arg and you can pass a new SDWebImageManager instance.\nThough this looks suck. In 5.x we will introduce this context arg to all view category because of SDWebImageOptions is a Objective-C enum, and it's just a NSUInteger which unlike the one in Swift that you can bind associate object on it... :)\nobjective-c\nSDImageCache *imgCache = [[SDImageCache alloc] init];\nimgCache.config.diskCacheReadingOptions = NSDataReadingMappedIfSafe;\nSDWebImageManager *manager = [[SDWebImageManager alloc] initWithCache:imgCache downloader:SDWebImageDownloader.sharedDownloader];\nimageView.sd_imageTransition = SDWebImageTransition.fadeTransition;\n[imageView sd_internalSetImageWithURL:imgUrl placeholderImage:nil options:SDWebImageRetryFailed|SDWebImageRefreshCached operationKey:nil setImageBlock:nil progress:nil completed:nil context:@{SDWebImageExternalCustomManagerKey : manager}];. #2245 Merged and 4.3.3 released. @swapnil-vuclip See the documents there:\nobjective-c\n SDWebImageManager.sharedManager.cacheKeyFilter = ^NSData * _Nullable(UIImage * _Nonnull image, NSData * _Nullable data, NSURL * _Nullable imageURL) {\n    SDImageFormat format = [NSData sd_imageFormatForImageData:data];\n    switch (format) {\n        case SDImageFormatWebP:\n            return image.images ? data : nil; // return nil means let `SDImageCache` to automatically choose the data, currently implementation is based on alpha channel, PNG for alpha channel image and JPEG for non-alpha channel image\n        default:\n            return data;\n    }\n };. @mzgreat521 It seems that NSURLSessionTaskPriorityHigh symbol not defined when you just link Foundation.framework in iOS 8 system. Though the Apple's Doc says this defined. You have to link CFNetwork.framework as well and before Foundation.framework \ud83d\udc7c \nI also find that this seems a bug in iOS 8 when enable optimized build. See radar\nI think we should remove that priority code and provide a quick fix version. :(. See this #2231. @mzgreat521 You can quick fix by import CFNetwork.framework in your main Application. We as a framework actually only link to the framework we need to avoid increasing the dyld time(application launch time).\nSince this is a bug caused by Apple and fixed in iOS 9, we just define that symbol inside our framework instead of adding CFNetwork to our dependency. However, if your min-target-deployment version is iOS 8 and want to use NSURLSessionTaskPriority symbol as well, you'd better import CFNetwork instead of doing like that.. @mzgreat521 @mythodeia 4.3.2 released. You can try pod update or carthage update.. This define is in implementation and only affect our own framework. So if you still want to use that NSURLSessionTaskPriorityHigh on iOS 8 in your main Application project. You have to link CFNetwork.framework (Or do the same thing like this) :). Animated WebP is just a UIAnimatedImage when using with FLAnimatedImageView, it's not their class FLAnimatedImage so they just call super method to let UIImageView maintain the animation and they does not do anything in their own implementation. That's why their own loopCompletionBlock not work.  You can request feature for FLAnimatedImage repo.\nCurrent there is no good way to KVO one loop finished for UIImageView. If your image just loop once, you can specify 1 for animationRepeatCount and KVO animating property on UIImaegView, there is the only way for build-in property.\nMoreover, In 5.x we have SDAnimatedImageView and we will move FLAnimatedImageView+WebCache into another third-party cocoapods instead of our official repo. SDAnimatedImageView need a SDAnimatedImage protocol instance which is a subclass of UIImage/NSImage and support custom coder, the animated image can be GIF, APNG, Animated WebP images or even from your own custom coder support format. It supports you to KVO two property currentLoopCount and animating to know the context\nThis can solve these problem because it's written by ourself instead of buld-in imageView class from Apple. See more in #2140 . @bembem1011 That's Apple's API design issue.\nIf you use a UIImage create by -[UIImage animatedImageWithImages:duration:](This acutall class is UIAnimatedImage). Then set this UIAnimatedImage to UIImageView. It loops forever(really strange but UIKit adopt this behavior) :)\nIf you want to control the loop count. You should write this code instead:\nobjective-c\nself.imageView.image = image.images.firstObject; // This will cause the animation stop at the first frame. You can also use lastObject if you need to stop at last frame.\nself.imageView.animationRepeatCount = image.sd_imageLoopCount; // Sepcify animation loop count, for your case it should be 1\nself.imageView.animationDuration = image.duration;\nself.imageView.animationImages = image.images;\n[self.imageView startAnimating];\nThen, add KVO on self.imageView.animating, you will get KVO called after that loop count finished.\nobjective-c\n[self.KVOController observe:self.imageView keyPath:NSStringFromSelector(@selector(animating)) options:NSKeyValueChangeNewKey block:^(id  _Nullable observer, id  _Nonnull object, NSDictionary<NSString *,id> * _Nonnull change) {\n    BOOL animating = [object boolValue];\n    if (!animating) {\n        // Means loop finished. Do something \n    }\n}];. The release date maybe April, but maybe there is a beta version first(5.0-beta), and we should fix some bugs or wait for any other important API-break changes.\nThe 5.x may not break something like 4.x. For the core API like sd_setImageWithURL, nothing changed. So feel free to update :)\nThe biggest changes are mostlly on advanced feature like custom coder(The protocol may change a bit), custom transformer(Use a id<SDWebImageTransformer> instead of delegate method), custom cache(No big API change). The changes are all here in 5.x milestone. You're not using ARC and dispatch object for Objective-C. Check you Xcode version and compiler config. \nDispatch Object like dispatch_queue_t in Objective-C is actually NSObject<OS_dispatch_queue> *, So it should use as strong property since it's a object but not value type.\nYou can check whether your compiler preprocessor define OS_OBJECT_HAVE_OBJC_SUPPORT and OS_OBJECT_USE_OBJC. When the completionBlock in SDWebImageManager.sharedManager.loadImageWithURL called, the cache sync to disk operation is not finished becuase it's an async operation. Current behavior does not wait the store to disk operation finished and then call your completionBlock. We just callback as soon as the image is valid.\nThere is also a discussion about this, see #1301.\nIf your business logic is relay on the store to disk operation finished. You can try using SDWebImageCacheMemoryOnly and manually call image cache to store it after the completion block called.. @KiritoBeater Sorry for that I misunderstanding your question. For that failedURLs case, actually current implementation is tied to the internal process. In 5.x we change this to allow custom delegate method to decide whether the Error should be marked as failed. And maybe we can also expose the ability to remove that failedURLs list.. Maybe we can add this feature to 4.x branch since this will not cause API-break. But there maybe some other issue to be considered such like whether we should also allow ADD a custom URL to blacklist but only allow REMOVAL ?) I will check this later again and maybe provide a PR. And if you have some usage about this, you can comment here.. @bembem1011 We can't simply  store the decoded webp image like you say, it contains many bad effect.\nWhen you decide to store the decoded webp image, actually you means to ENCODE the UIImage again and store the data. Right ? However, since many of our feature may relay on the original image data(For example, scale down or our transformer feature in 5.x)\nAnd there are also a question, show this behavior only applied for WebP images ? What about GIF, APNG, BPG and so many other image format ? (We support custom coder to enhance your feature)\nSo, maybe currently we could not change this behavior. If you're really considered to use this behavior, you can try using Custom Download Operation. @bembem1011. Actually, I means you can just return the encoded from UIImage to data's NSData instance in SDWebImageDownloadOperation's completionBlock instead of the downloaded data from server. So then the manager will use this NSData instead.\nThis maybe a bad idea in some cases when you may need the original data from your server but not the one you encode again from a decoded image. Another way it to use completionBlock and dispatch on global queue to encode again and then store the NSData by your own, so you don't need to custom download operation.\nMaybe there is other better way to solve this problem such as provding a delegate method or extra abstract layer to allow user to return a modified version NSData before acually store it to disk(Like Kingfisher's CacheSerializer, but without that NSData to UIImage func because we already use Custom Coder for this case). But currently in 4.x it seems we can not change too much for this. I'll mark this as a feature request to see if any better idea is provided.. @bembem1011 See #2245. If you are facing the issue of WebP decoding speed from disk cache. You can considerate to encode the image to another format such like JPEG or PNG when storing to disk cache.. @bembem1011 FLAnimatedImage is currently hardcoded to play GIF only. And since it's a third-party lib, we have no control or ability to modify it.\nIn 5.x we'll introduce a totally replacement for FLAnimatedImage and move current FLAnimatedImageView+WebCache code to another Cocoapods. And we also allow you to choose to use the original way (UIAnimatedImage from UIKit) way to play animated image.\nTo learn more, see #2140 . @bembem1011  #2245 Merged and 4.3.3 released. Weird. Could you please set a breakpoint at this line of code for static WebP and code for animated WebP to see whether the image instance available ? You can use Xcode's build-in view button when your mouse pointer move to the UIImage variable to preview the image.\nIf not, are you using some debuger options specify for debug running ? See Run Scheme -> Debug -> Arguments Passed On Launch & Environments Variables\n. @filipealva Could you please set a breakpoint at \"Downloaded image has 0 pixels\" error line. Then using lldb check the URL request and paste  the image URL here. . SDWebImageDownloaderOptions.lowPriority just means to use NSURLSessionTaskPriorityLow in NSURLSessionTask. No other effect will take.\nThis is not related to the cache options because it's just a hint for URLSession in downloading.  SDWebImageDownloaderUseNSURLCache means to use NSURLRequestUseProtocolCachePolicy instead of NSURLRequestReloadIgnoringLocalCacheData, just download from the original source.\nIf you want to use SDImageCache, you should not use SDWebImageDownloader, you should use SDWebImageManager, which is a bridge between cache and downloader. . Please provide more information such as your iOS platform version, SDWebImage version and some crash log. Or maybe we can not do much help for this :). Maybe this is OOM during the background decoding. Can you try disable all shouldDecompress in cache, manager and download operation. After that then check the same image request, will this OOM occur ?. @janardhanmupparaju  @BlessNeo Have you ever try to downgrade to previous version to check when does this high memory consuming begin ? If you can provide more information, we can find the reason more easily.. Looks good. We will merge master branch to 5.x branch periodically. So I just close this PR.. OK :). @mythodeia The default value is nil, means there is no different with current version performance.\nIf you decide to provide a modified data instead of the original server data, this block is dipatched on global queue. In general, WebP decoding time is 5x slower than Apple's JPEG decoding time. So this can decrease the querying disk cache time.. @YasinZhou  So..? Could you please tell me why you do this \ud83d\ude15 \nencode the image which is already decoded from WebP into WebP format again ?\nIf you need to convert WebP data into another format like JPEG, you should use image imageAsFormat:SDImageFormatJPEG. The input NSData is already the original WebP data from the network...Isn't it ?. @YasinZhou See here about the demo usage.\nThis feature is introduced since WebP encoding/decoding is much slower than JPEG/PNG images. So if the original image data from network is WebP. You can consider to provide another data for this image. Which means you can encode the image instance into JPEG data. So then we will use that JPEG data to store disk cache. When you later retrive the image data from disk again (Such as memory cache invalid) You don't need to decode WebP again. Just decode JPEG format, which is faster.\nBut however, you should know that convert from different image type may lose quality, for example, JPEG does not support alpha channel, but WebP does. So you'd better to check it before encoding to JPEG/PNG. Another way, it's pass nil to let SDImageCache do this.. What SD version did you use ? And could you please provide the repro rate ? (100% ? Not possible...)\nThis SDWebImageInternalSetImageGroupKey is used only for FLAnimatedImageView+WebCache. And the implementation call dispatch_group_enter at the beginning. So it should be balanced.. @LululuSir What about using a atomic immutable array for normal method, only addCoder: & removeCoder: create a new mutable coders instead ? That mutableCoders design looks a little tricky and keep a dispatch queue for thread-safe is overcome...\nFor most cases you use, the GET methods call is far more frequent than that Modify method (Actually, for our application we do not call any modification method after the first application launch). So keeping a immutable object can avoid extra cost. We just need to mutable copy the immutable object, modify and call SET method again for addCoder: & removeCoder:.\nFor immutable object, this property should be marked as atomic, because we may call GET and SET at the same time. But this does not need any queue to do extra guard, remember for simple GET/SET method, atomic is the best choice.\n```objective-c\n// Interface\n/\n All coders in coders manager. The coders array is a priority queue, which means the later added coder will have the highest priority\n /\n@property (atomic, copy, readwrite, nullable) NSArray> coders;\n// Implementation\n- (void)addCoder:(id)coder {\n    if (![coder conformsToProtocol:@protocol(SDWebImageCoder)]) {\n        return;\n    }\n    NSMutableArray> *mutablecoders = [self.coders mutableCopy];\n    if (!mutablecoders) {\n        mutablecoders = [NSMutableArray array];\n    }\n    [mutablecoders addObject:coder];\n    self.coders = [mutablecoders copy];\n}\n\n(void)removeCoder:(id)coder {\n    if (![coder conformsToProtocol:@protocol(SDWebImageCoder)]) {\n        return;\n    }\n    NSMutableArray> *mutablecoders = [self.coders mutableCopy];\n    [mutablecoders removeObject:coder];\n    self.coders = [mutablecoders copy];\n}\n``. @bpoplauschi @LululuSir \ud83d\ude05 Well. I miss one thing. Just mark immutable NSArraycodersasatomicmay be non-thread safe in this case.\nIf two threads calladdCoder:with two different coders. There may be a possibility that each of two threads get the original coder array firstly, and they both modify to add their coder, then set to theself.coders`. The final result will contains only  one of the two.\n\n```objective-c\n// Time begin\n<--- Thread 2 here\nNSMutableArray> *mutablecoders = [self.coders mutableCopy];\nif (!mutablecoders) {\n    mutablecoders = [NSMutableArray array];\n}\n<--- Thread 1 here, mutableCoders = @[]\n[mutablecoders addObject:coder];\n// Time pass\n<--- Thread 2 here, mutable coders is nil, then it create empty array @[]\nif (!mutablecoders) {\n    mutablecoders = [NSMutableArray array];\n}\n[mutablecoders addObject:coder];\nself.coders = [mutablecoders copy];\n<--- Thread 1 here, mutableCoders = @[coder1], self.coders is @[coder1]\n// Time pass\nself.coders = [mutablecoders copy];\n<--- Thread 2 here, mutableCoders = @[coder2], self.coders is @[coder2]\n```\nSo actually, we need a lock to guard during GET and SET process instead of just marking atomic. It may looks like our downloader's code here. I can create a PR for this.. I'll provide a fix in 4.x.\nThis decompressedImageWithImage:data:options is totally removed in 5.x because the fact that force decode a image is not related to image format, so it's not part of custom coder to provide a implementation. Instead, we use +[SDWebImageCoderHelper decodedImageWithImage:] or [SDWebImageCoderHelper decodedAndScaledDownImageWithImage:limitSize:] to do this force decode process. It's thread-safe.. @LululuSir See #2274. Done by #2274....Which use a lock to guard thread-safe for this coders manager. ;). # Current break change for Swift user (So far)\nNSData+ImageContentType\n\nsd_UTTypeFromSDImageFormat return CFString instead of Unmanaged<CFString>\n\nUIButton+WebCache\n\nsd_currentImageURL() changed to sd_currentImageURL\n\nNSButton+WebCache\n\nsd_currentImageURL() changed to sd_currentImageURL\nsd_currentAlternateImageURL() changed to sd_currentAlternateImageURL\n\nSDWebImageManager\n\nshared() changed to shared\nisRunning() changed to isRunning\nimageCache changed from nullable to nonnull\nimageDownloader changed from nullable to nonnull\n\nSDWebImageDownloader\n\nshared() changed to shared\nsetOperationClass available for Swift user\nsetSuspended(_:) changed to isSuspended property\n\nSDWebImageCodersManager\n\nsharedInstance() changed to shared\n\nSDWebImageImageIOCoder\n\nshared() changed to shared\n\nSDWebImageGIFCoder\n\nshared() changed to shared\n\nSDWebImageWebPCoder\n\nshared() changed to shared. @bpoplauschi I think the future PR which create public API expose to Swift user should follow the rules above. Maybe we can later create a contributor guideline for this ?. @haipengzhang What's your usage? I try the demo project in our repo and the WebP animated image render is correct. When the cell scroll our of screen and re-enter, everything works well.\n\nCould you please provide a demo or code snippet that can reproduce this issue ? And for that latest, do you means the 4.3.3 version ? Please provide more information, thanks :). Could you please provide more detail information about the memory warning. \nFor example, what size of Animated WebP images are you loading ? \nDid you try disable shouldDecompressImages when loading images ?\nWhen did the memory warning notification fired, means does this fired during decoding or the cell reusing and rendering ?. @lzylzy1991 @PrakashMaharjan @shaktiprakash099 Are all of you using Animated WebP in collection view ? But it seems that during 4.2.x -> 4.3.x there is no change on SDWebImageWebPCoder. Could you please provide a demo that can trigger this OOM issue. @PadmaPreethi  Hi. Could you please try to downgrade to the 4.3.0 version. Which I guess that #2228 may related to the memory warning behavior from 4.3.0 -> 4.3.3 all PRs. \nAnd all of you, could you please provide any demo to simulate this use case about OOM ? The basic usage seems can not repduce this.\nOr could you please set a break point on the memory warning in your own project, then try using Xcode's Memory Graph Debugger to check who retain the UIImage instance (SDImageCache or some other thing) ?. @PadmaPreethi Hi, could you please check that whether these UIImage instance is still alive and retained by SDImageCache, or more specific, in NSCache or SDMemoryCache (from 4.3.1) ? You can use that visual debugger to check by filtering the the name and address.\nIf so, you should specify a lower limit in maxMemoryCost and maxMemoryCountLimit. The defaults value are both 0, means no limit at all. (But when the memory warning occur, we will clear the memory cache)\nAnd here is a little more description about what CG raster data means. The CG raster data is just the rendered data represent UIImage, which can be directlly displayed without any extra cost in UIImageView. The opposite one is the normal UIImage which just directlly from the Image/IO or method like -[UIImage imageWithData:], which is in undecompressed format and must be copied by Core Animation before the UIImageView actual rendering it. (You may see some CA::Render::copy_image method call, which is what it need to transform the original data to CG raster data)\nWhen you enable showDecompressImage options in SDImageCache, SDWebImageDownloader, we will try to do this stuff just in background queue to avoid this copy happened on main queue later to reduce frame rate. However, this may consume more memory. It's a trade-off. If you do not want this behavior or your memory is limit, you can try to disable it.. @PadmaPreethi If you do not want to lose the quality of image (Such as scale down pixels), the answer is NO. The original UIImage's contains memory bytes is a compressed format, but because the hardware GPU can only render bitmap, which is just a vector of pixels, so the CG raster data memory cost for specify image, is a FIXED size. You can only decide when to decompress it and consume the memory.\nBut if your collection view or table view contains little images, you can disable showDecompressImage, which may reduce memory if some of UIImage is not rendering (It stay on SDMemoryCache in a uncompressed format). We could make this as a optional value in SDWebImageOptions, however, base on the historical reason, we put the value in the cache and downloader instance level.\nBut if you really want to do so and do not want to affect the global cache config, you can provide a custom manager to use for specify view category, See SDWebImageExternalCustomManagerKey. That CG raster data is kept in UIImage, acutlly CGImage's internal data, See your visual debugger's screenshot...If Core Animation render you UIImage on a UIImageView, it automatically create that data and it kept alive...\n. @PadmaPreethi All these screenshot in visual debugger are designed behavior if you enable shouldDecompressImage. But since we add a memory warning action to clear the memory cache, normally this should not cause crash. Or could you please provide the last crash log when the OOM occur ?\nIf you want to limit the memory cost, you can consider these solution.\n\nDisable shouldDecompressImage\nTry using SDWebImageScaleDownLargeImages, or do your own by using imageManager:transformDownloadedImage:withURL:\nLimit the maxMemoryCost and maxMemoryCountLimit\nConsider let your server response the small pixel image or non-alpha image, because the memory data is only related to resolution and channels.\nMaybe you can only disable memory cache using shouldCacheImagesInMemory if you want to render too many images at the same time.. Wait...Are you using animated images ? If so, maybe we should talk this from the beginning... @PadmaPreethi This can be accomplish in 5.x using the custom memory cache in #2195 . We does not consider to add support to 4.x because this may cause some API-changes.\n\nHowever, I understand your use case, currently just directly access the internal memory cache property and set a delegate :)\nobjective-c\nSDImageCache *imageCache;\nNSCache *memCache = [imageCache valueForKey:@\"memCache\"];\nif (![memCache isKindOfClass:[NSCache class]]) {\n    return;\n}\nmemCache.delegate = self; . > the memory was taken about 200mb \nThis is the App Process memory. If the other process like Render server process, occupy too much memory, the Jetsam is still be triggered and your App get killed.\nAnd, the memory warning is always dispatched on the main queue, so if you're alloacting large memory in the global queue outside the main queue, your app may already been killed before you receive memory warning... \ud83d\ude25 \nYou can using Xcode, to check the Free Memory in memory footprint tabs, but not only about App Process.\nYou can also using Instruments, which have a Allocation template, to check all the memory footprint used by your App. When your app is terminated, you can check all persistent object which occupy the large memory.. > \n\nCould you take a look this screen?\n\nThis is a designed behavior.\nYou must loading Animated WebP. And maybe your animated webp resolution is too large (260MB, assume RGBA8888, the pixel count is 68,157,440, nearly like a 8255x8255 pixels). It\u2019s really not recommaned to load such an image. It\u2019s better to let your inage server to do a thumb and scale before loading.\nFor that CGBitmapContext RAM usage. The animated webp, must keeping a canvas the same size as plaeceholder (in iOS, it\u2019s the CGContext) to draw frames, it\u2019s WebP standard. Maybe there are no better way to avoid this.. Actually, I\u2019ve done one feature, to support the Thumb Decoding, which means even the original image is 100000x100000 pixels, the decoder can decode a scaled pixel width. It\u2019s supported by the Image IO(Apple built-in, JPEG/PNG/HEIF only) and WebP(using libwebp). See #2560\nHowever, many other decoder can not support this, and it need some more APIs in 5.0, I don\u2019t know whether it\u2019s suitable or not to add to our milestone.\nI can create one MR later to let you have a try.. @nvduc2910 The size of WebP files does not count anything. Maybe you're not famaliar with What is Image Bitmap (The array contains pixels, which is used for Low-level API and Hardware to render), and what is Compressed Image Format( Like JPEG/PNG/WebP). You can have a check in https://en.wikipedia.org/wiki/Image_file_formats and https://en.wikipedia.org/wiki/Bitmap\nA image bitmap memory usage = bytes per pixel * pixel count, it does not related to what the compressed image format (WebP or something) size. So if you're using image with alpha (4 channels), the bytes usage = 4 * pixel count, only related to the resolution.\nCould you please have a check or show me some of your images to load ? I remember the SDImageCache have a limit for bitmap image cached in memory (SDImageCacheConfig.maxMemoryCost, it's a pixel count in 4.x but bytes size in 5.x), if the limit is hitted, the image should be purged to free up memory.. Since you use FLAAnimatedImage, but without our FLAnimatedImageView+WebCache ?\nIf you need the extra information keep in UIImage or CGImage class itself without that decompress, just set the shouldDecompressImage to NO. You can find this option's decription in the comments.\nIf you still want to keep the decompress feature, you can consider using the advanced API in UIView+WebCache, the sd_internalSetImage(with:placeholderImage:options:operationKey:setImageBlock:progress:completed, which provide a NSData arg to allow you grab the data. For normal UIImageView, you can just pass setImageBlock and operationKey to nil.\nIf all of these can not solve your problem, maybe you can consider to custom download operation by subclassing SDWebImageDownloadOperation(Maybe you need Objective-C) and modify that decompress logic.\nThough you see that hack logic about Do not force decoding animated GIFs and WebPs. This is totally wrong but kept for historical reason and locking by sem-version for 4.x. This logic will be changed in 5.x, but in 4.x, we maybe not change this too much.\nTo say, if you are using FLAnimatedImageView in 4.x, it's strongly recommend to use that FLAnimatedImageView+WebCache, or maybe you can create your own category by referencing the code there, because it solve some problem by a little tricky logic.. @OneSman7 I can reply  your questions one by one.\nFLAnimatedImageView+WebCache keeping whole GIF in memory:\nThis is not correct. This category just ignore the UIImage args itself from the completion block. It use an associate object binding FLAnimatedImage instance to feed FLAnimatedImageView. See the code there\nSo actually, there are only one NSData, one cover image from the decoder, and one cover image from the FLAnimatedImage itself keeping in the memory (3 memory-consuming instance). Since  cover image is consider to less memory consuming compared to all frames for GIF, this should not decrease the performance.\nBut there are one exception, since one cover image from the decoder is control by the user, and if you enable GIF Coder, the return image instance will actually be a UIAnimatedImage and consume more memory. If your application does not need any GIF rendering on normal UIImageView, consider to disable that GIF coder.\nYou say that decompress logic will change in 5.x. Can you please tell what will be changed?\nActually, the logic will be changed to just seperate the image format decoding and the draw into bitmap logic, currently one method decompressedImageWithImage: data: options: in SDWebImageCoder will be removed. For the draw into bitmap and scale down logic, we move the code into SDWebImageCoderHelper. For each UIImage which is already drawn on bitmap, there is a flag sd_isDecoded to mark it to avoid secondary process.\nMore information about animated image rendering on 5.x\nIn 5.x, we will drop the code and dependency on FLAnimatedImage this third-party library. We create the own solution from the scratch by introducing two class: SDAnimatedImage : UIImage and SDAnimatedImageView : UIImageView, which is both the subclass of UIKit class. Its design is based on the CALayer and CADisplayLink, supports custom coder, supports KVO on properties, supports macOS, and more. And we leave the control to you to use this class instead or UIImageView itself. You can even pass SDAnimatedImage on UIImageView, or UIImage on SDAnimatedImageView and it works.\nFor FLAnimatedImageView+WebCache, these code will move to another cocoapods project called SDWebImage+FLAnimatedImage to maintain. Our official project will focus on that animated image solution above. To learn more, see #2140 \n. NO. But If you want to implement this, you can consider using these function together to build your own.\n\nCache Serializer\nCustom Coder\nCustom Download Operation. Actually these 3 options can control all the behavior you need, though it's a little confused. Here I list the result by combining these 3 options. More clear.\n\nOptions | Memory hit data | Memory miss data\n-- | -- | --\n0 | nil | async\nQueryDataSync (invalid) | nil | async\nQueryDiskSync | nil | sync\nQueryDiskSync + QueryDataSync (invalid) | nil | sync\nQueryDataWhenInMemory | async | async\nQueryDataWhenInMemory + QueryDataSync | sync | async\nQueryDataWhenInMemory + QueryDiskSync | async | sync\nQueryDataWhenInMemory + QueryDataSync + QueryDiskSync | sync | sync\n. @skyline75489 \ud83d\ude05 Well...That SDImageCacheQueryDiskSyncWhenNotInMemory is quite wired, if I can rename these options again, I will change these into 3 options:\nSDImageCacheQueryMemoryData\nSDImageCacheQueryMemoryDataSync\nSDImageCacheQueryDiskDataSync\nBut this...Actually already become the public API, so maybe we can not do something with the old one. Or should we mark this to 5.x and totally change this ? \ud83d\ude15 \n\nMaybe a more tricky way, in 4.x we name this new option to SDImageCacheQueryDataSyncWhenInMemory, in 5.x we replace these with the options above :). It seems this options is no need in 4.x currently. I've changed the correspond behavior in #2195 to allow user provide cacheType instead of options. So this PR can be closed, or until someone still in 4.x and have usage for this.. # Current break change (Need change code)\nSDWebImageManager.h\n\n-[SDWebImageManager initWithCache:downloader:] REPLACED with -[SDWebImageManager initWithCache:loader:]\nimageDownloader property REPLCAED with imageLoader.. @skyline75489 :) Most changes is because of some unnessary changes from the early days of 5.x. I can rebase it to the 5.x after that #2278 merged. There should be only less than 10 files get effected.\n\nAnd because of that id<SDWebImageLoader> changes, this will be API break. Though we can currently not consider Photos Library. The architecture for image loader protocol should be kept, to let 5.x future get function of this, instead of another major version release.. @skyline75489 Done...I just remove all the unnecessary changes, only keep the basic design for custom loader protocol.\nThe Photos Library loader implementation can be create into another PR. I just keep in my temp branch to wait for this been merged.. This because I change that our complicated decoding logic, from SDWebImageDownloadOperation, into a global method called SDWebImageLoaderDecodeImageData() & SDWebImageLoaderDecodeProgressiveImageData(), this is useful for user who write custom loader to just care about download, but not image processsing. Or we have to copy & paste this code anywhere into the manager. (This is what this PR about)\nHowever, I can't done this to pass the test, because I need to wait for #2283 . That global method does not pass a extra shouldDecompressImages BOOL value, but should grab the information from SDWebImageOptions.\nAnd also, this can be polished to wait for #2280, which can be used to generate the correct cacheKey from NSURL(Currently, I just use URL.absoluteString), with the context arg SDWebImageCacheKeyFilter.\nSo, currently just ignore this PR. I'll polish this after some dependent PR merged \ud83d\ude05 . A question. Am I considered too much to introduce two protocol methods for custom image loader ?\nobjective-c\ntypedef void(^SDWebImageLoaderCompletedBlock)(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, BOOL finished);\ntypedef void(^SDWebImageLoaderDataCompletedBlock)(NSData * _Nullable data, NSError * _Nullable error, BOOL finished);\n\nloadImageWithURL:options:context:progress:completed:\nloadImageDataWithURL:options:context:progress:completed:\n\nPreviously I think the second one is useful to integrate for some common network downloader which does not need to concentrate about image decoding, processing or something to callback the image arg. Just give us the correct NSData. So you can directlly using something like AFNetworking or Alamofire.\nHowever, after some consideration, since we can abstract the common logic for image decoding like that SDWebImageLoaderDecodeImageData() or SDWebImageLoaderDecodeProgressiveImageData(). If user use the second API, they can also easilly get the same result for the first API. Just start a global queue, call that helper function, then you can get the image arg. So easy......\nMaybe just leave the first one is enough ? (Actually the first one which need UIImage arg can be helpful for some SDKs which already give UIImage but not NSData for you. Like Photos framework's requestImageForAsset:targetSize:contentMode:options:resultHandler:). @mythodeia @skyline75489 @bpoplauschi  For that Photos framework loader, I create a demo CocoaPods and move the code there. You can see that about the way to write a custom image loader.\nProject:\nSDWebImage-Photos\nJust pod install and run, this actually using the latest branch of this PR. It's recommend to run it on your real device because you can check large Photos library images from your iOS device.\nPS:\nActually...This is just a test demo and I'm not satisfied with the naming (naming a CocoaPods with -, will cause the headers become like this #import <SDWebImage_Photos/SDWebImagePhotosLoader.h>...\nMaybe I can create another project called just SDWebImagePhotosLoader or something. Anyway, it just small thing \ud83d\ude05 . Done\n\nSolving conflict and will rebase to small commits...Wait :). @bpoplauschi Correct. I create it just for a demo and show for you. And I find that naming is wired if you add - or + (+ is fobbiend in CocoaPods).\nMaybe we'd better naming it like SDWebImagePhotosFramework or just SDWebImagePhotos. And I can transfer that if we finish it. Don't be hurry :)\nAnd also, it seems we should also create a SDWebImageFLAnimatedImageBridge or something. I'm not quite good at naming. Maybe it's up to you \ud83d\ude05 . @bpoplauschi \n```shell\n\u279c  GitHub git:(master) \u2717 pod lib create SDWebImage+PhotosFramework\n[!] The Pod name cannot contain plusses.\nUsage:\n$ pod lib create NAME\n\n  Creates a scaffold for the development of a new Pod named `NAME` according to\n  the CocoaPods best practices. If a `TEMPLATE_URL`, pointing to a git repo\n  containing a compatible template, is specified, it will be used in place of the\n  default one.\n\nOptions:\n--template-url=URL   The URL of the git repo containing a compatible template\n--silent             Show nothing\n--verbose            Show more debugging information\n--no-ansi            Show output without ANSI codes\n--help               Show help banner of specified command\n\n```\nAnd here is the code showing the reason: CocoaPods/CocoaPods\nThe reason may belong to the issue that the build script will parse the path wrong if you have + in Pod name...So why I try that - instead. However, this will also cause your Pod headers files become _(underscore). Maybe the best naming is using CamelCase.... @bpoplauschi The SDImageLoadersManager and the correspond SDImageCachesManager, are the multiple loader/cache system useful for people, who want multiple cache source, or multiple loader. See the wiki loaders-manager.\nFor example, you want to support both Network image URL, file path URL, as well as Photos URL for UIImageView loading. You can bind multiple loaders into the loaders manager, and set as SDWebImageManager.defaultLoader. So that it can be really useful for wide usage.\nAs compatible reason (See that SDWebImageManager.m comment), the default cache & manager are just SDImageCache.sharedImageCache && SDWebImageDownloader.sharedDownloader, to keep the most compatible behavior from 4.x to 5.x. So this is why diagrams  dependency not hanlde these class (But there are test cases cover these classes' function).. @Lee827 \nWell. Based on current implementation (4.x), I can tell the usage about your question :)\n\nYou can set maxCacheAge to NSIntegerMax to mean no expiration date. (set 0 or negative will cause the disk cache been removed immediatelly when you call deleteOldFilesWithCompletionBlock)\nYou can set maxCacheSize to 0 to means no cache size limit.. Well. It's not recommend to synchronous download on main queue. :)\n\nMaybe you means to prefetch the image before it actual been used. You should better check SDWebImagePrefetcher. Which allow you to provide a list of URLs to fetch and cache on image cache.\nIn fact, SDWebImagePrefetcher use the SDWebImageManager, which already handle the management between cache and downloader. You don't need to write yourself.. Could you please provide more information about your use case ? This description is a little inaccuracy.\nIf you mean when you using UIImageView with UITableViewCell, when the cell reused, all the previous request will be cancelled. And so NSURLSession will produce a error identify that the task is cancelled.\nIf you mean that all your image requests can not finish, even for single UIImageView, maybe you sohuld check that error information or your network config, such as App Transport Security. @vinayakpal So. Does that means you receive a cancelled error when you scroll, the cell is disappear and reused ? It's a designed behavior to let the SDWebImage's View category work with the UITalbViewCell and UICollectionViewCell reusing mechanism.. @GRGBISHOW  SD 4.2.1 seems be a deprecated release which contains a serious bug. If you're careful about the upgrade, you should at least use 4.2.2, see 4.2.2 release log and #2092. @bpoplauschi Well...This seems merged into master. Why not add it to a new 4.3.4 milestone ?\nThis seems to be a API changes for Swift user only (Objective-C not effected). But however, it's a bug and if the user use it correctlly, they must use a if let expression to guard it. So will not break user's code. I advice to add to 4.3.4 milestone.. # Current break change (Need change code)\nSDWebImageManager.h\n\n-[SDWebImageManager loadImageWithURL:options:progress:completed:] return type id<SDWebImageOperation> CHANGED TO SDWebImageCombinedOperation *. Actually this does not break API because SDWebImageCombinedOperation conform to SDWebImageOperation protocol\n\nSDWebImageDownloader.h\n\nheadersFilter REMOVED, use requestModifier instead\n-[SDWebImgeDownloader cancel:] REMOVED, use -[SDWebImageDownloadToken cancel] instead\n\nSDWebImageDownloadOperation.h\n\nexpectedSize REMOVED, use response.expectedContentLength instead.. Demo usage about request modifier and also the way to check HTTP Response from View Category. One code cover all usage :)\n\nobjective-c\nSDWebImageDownloaderRequestModifierBlock requestModifier = ^NSURLRequest *(NSURLRequest * request) {\n    NSMutableURLRequest *mutableRequest = [request mutableCopy];\n    [mutableRequest setValue:@\"Bar\" forHTTPHeaderField:@\"Foo\"];\n    return [mutableRequest copy];\n};\n[imageView sd_setImageWithURL:url placeholderImage:nil options:0 context:@{SDWebImageContextDownloadRequestModifier : requestModifier} progress:nil completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n    SDWebImageCombinedOperation *operation = [imageView sd_imageLoadOperationForKey:NSStringFromClass([imageView class])];\n    if (![operation isKindOfClass:[SDWebImageCombinedOperation class]]) {\n        return;\n    }\n    SDWebImageDownloadToken *downloadToken = operation.downloadOperation;\n    if (![downloadToken isKindOfClass:[SDWebImageDownloadToken class]]) {\n        return;\n    }\n    NSURLResponse *response = downloadToken.response;\n    NSLog(@\"response : %@\", response);\n}];. @BlueVirusX @skyline75489 What about this one ? With more abstract layer of request level modification, and that SDWebImageCombinedOperation contains only two protocol properties but not class properties, I think it's both extensible and make it useful for the advanced usage.. @BlueVirusX @bpoplauschi @skyline75489  Hi. After some experiment using this from Swift, I think this SDWebImageContextDownloadRequestModifier which hold a SDWebImageDownloaderRequestModifierBlock(which is a Objective-C block) will cause a serious big problem. The reason is here:\nIn Objective-C, block is a NSObject(which contains a isa pointer). So we can easily store it into NSDictionary. However, in Swift, the bridge of block representation called closure, which is a function and it's not a NSObject when mapping to Objective-C. And also, you can not store a closure easilly in Swift's Dictionary which use Any as their value type.\nFor current API, if the Swift user want to provide a request modifier, they should use this code with @convention(block) but not Swift's native closure.\nswift\ntypealias SDWebImageDownloaderRequestModifierSwiftBlock = (@convention(block) (URLRequest) -> URLRequest?)\nlet requestModifier: SDWebImageDownloaderRequestModifierSwiftBlock! = { request in\n    return request\n}\nSDWebImageManager.shared.loadImage(with: URL(string: \"http://foo/large.png\"), options: [], context: [.downloadRequestModifier : requestModifier], progress: nil) { (image, data, error, cacheType, finished, url) in\n    print(\"OK\")\n    // Do something\n}\nIf you want to use closure without @convention(block), a runtime BAD_ACCESS will occur because the Objective-C block converted from Swift side will result a invalid address (0x00000000), but block itself is not nil (This behavior is quite strange, it seems Swift compiler store Swift closure as actually a _SwiftValue from LLDB). So you should always do not pass native Swift closure into Dictionary value without that @convention(block). @BlueVirusX @bpoplauschi @skyline75489  And a more serious problem. If you want to get the context back and grab the block value stored in Dictionary with Any value type. The hell process of Swift compiler surfaced.\nSince Objective-C block implementation is based on C struct, such as __NSMallocBlock__. It's not a native Swift closure. Swift compiler will bridge it into a private __Objc.XXXXBlock type. What it does is using the unsafe API unsafeBitCast to cast that struct to a automatically generate closure(block) type with @convention mark. However, you can't use this __Objc with your own code. Thanks to Apple :)\nFor user-level code such as  store a Objective-C block in Dictionary<SDWebImageContext, Any>, you should do a trick your own to solve this problem. See the code to get back that downloadRequestModifier block by Swift correctly.\nswift\n// The context arg from some protocol method such as custom cache or loader in 5.x\nlet context: [SDWebImageContextOption : Any] = [.downloadRequestModifier : someRequestModifier]\nif let requestModifier = context[.downloadRequestModifier] {\n    // Since Objective-C block using in `NSDictionary` is called with Block copy, it's actually a pointer to`__NSMallocBlock__` struct kepping in heap. So we could only use a raw pointer to unsafeBitCast)\n    let blockPtr = UnsafeRawPointer(Unmanaged<AnyObject>.passUnretained(requestModifier as AnyObject).toOpaque())\n    let requestModifier = unsafeBitCast(blockPtr, to: SDWebImageDownloaderRequestModifierSwiftBlock.self)\n    let request = URLRequest(url: URL(string: \"http://foo/large.png\")!)\n    let modifiedRequest = requestModifier(request)\n    print(modifiedRequest)\n}\nWell. Though you may say that it's rare to check the context your own. However, we will introduce custom cache and custom downloader feature. Which allow user to provide a implementation using protocols. This context arg will be passed anywhere in that protocols. If we keep this API design, Swift user may feel really hard to provide a custom cache or downloader. I really do not want to see this beucase I think our framework should kept both availble for Objective-C user and Swift user as well.. @BlueVirusX @bpoplauschi @skyline75489 \nSo there are maybe two choice to use to solve this problem.\nSolve Swift API with mixed Objective-C & Swift codebase\nThe first one, we keep this API design to store a Objective-C block in context option. And add docuementation, or something to notify user to always do the correct things above to provide and grab back the block in context option. However, since that unsafeBitcast is really dangerous, we may need something like helper method (Process the block inside).\nBut this is not easy because the way to do this need a Swift project but not Objective-C side. We maybe need a totally new project like ReactiveObjCBridge, which supports both Objective-C and Swift mixed code, then write a helper method in Swift and let Swift user to import both SDWebImage and SDWebImageSwiftBridge.\nChange API by using a Object instead of Objective-C block\nAnother simple way, we change the API design. We does not use Objective-C block stored as value in context. We create a instance for this, which can store the original block. For example, such like this:\n```objective-c\n@interface SDWebImageDownloaderRequestModifier : NSObject\n@property (nonatomic, copy, nonnull, readonly) SDWebImageDownloaderRequestModifierBlock block;\n\n(nonnull instancetype)modifierWithBlock:(nonnull SDWebImageDownloaderRequestModifierBlock)block;\n\n@end\n```\nThen, for Swift user, they can use this with a object instead of that unsafeBitCast trick. For Objective-C user, this may need a little more code to create a object firstlly instead of directlly use a block.\nI also check Kingfisher-Modify a request before sending. Their implementation is more generate. It provide a protocol for the request modifier. So maybe we can also adopt that design like this.\n```objective-c\n// Protocol for request modifier\n@protocol SDWebImageDownloaderRequestModifier \n\n(nullable NSURLRequest )modifiedRequestWithRequest:(nonnull NSURLRequest )request;\n\n@end\n// we can keep that block private, and adopt this protocol\n@interface SDWebImageDownloaderRequestModifier : NSObject \n\n(nonnull instancetype)modifierWithBlock:(nonnull SDWebImageDownloaderRequestModifierBlock)block;\n\n@end\n// Implementation\n@implementation SDWebImageDownloaderRequestModifier\n\n(NSURLRequest )modifiedRequestWithRequest:(NSURLRequest )request {\n    if (self.block) {\n        return self.block(request);\n    }\n    return nil;\n}\n\n@end\n```\nThings to considerate\nSince we're not landing 5.x, there are still time to change. If we already pulish this design as public API. We'll have no way to change until upgrade to another major release. So it should be considerated carefully.\nMy personal preferred solution is the second one to use a protocol or interface hold that block object. Because the cost is quite small than the first one. (The first one's gain is much smaller than the effort).\nIf someone has a better idea and questions about this annoyed problem, please comments here :). @mythodeia \ud83d\ude05 Any idea about this ? Is there some issues about the exposition of SDWebImageCombinedOperation and that SDWebImageDownloaderRequestModifier protocol design ?. So I'll merge it. Since there are still one PR which may depend on it.\nIf some of changes is not adoptable, maybe I can revert it after all things done. 5.0.0-beta does not ensure API-stability. But most of changes cause API break between 5.0.0-beta to 5.0.0 final release should be considered carefully.. @bpoplauschi \ud83d\ude05OK. It seems this PR stay too long times. And it's based on previous on #2166. So I think if there are no any pending issue, we can merge it and continue the left one. So that maybe we can release 5.0.0-beta in April (Well...The milestone date for 5.0.0 already passed). @bpoplauschi Can be done. But because Downloader need some private properties from DownloadToken (For example, that @property (weak) SDWebImageDownloader * is inside the class category) Maybe we have to define a internal headers inside SDWebImageDownloader.m. So why I previously do not do this. Just because of lazy...\n```objective-c\n// SDWebImageDownloader.m\n// internal property headers\n@interface SDWebImageDownloadToken ()\n@property (nonatomic, weak) SDWebImageDownloader *downloader;\n@end\n```. @pdfdroid Hi.\nDo you means that something like data encryption/decryption for the data which the original data should represent an image, but after some encryption algorithm like Base64 / zlib ? For this question, we built-in image coder does not do this stuff. But you can try to using Custom Coder to provide a custom encryption/decryption process before you actuall grab the oringial image data.\nIf you means that \"whether does SDWebImage's coder support image encoding ?\" -- Which means given a UIImage, process a NSData representation, the answer is YES. All the build-in coder format are supported to encode to data. You can use encodedDataWithImage: to encode image to data.\nThe build-in coder support image encoding format can list here:\n+ Image/IO coder\n  + PNG, JPEG and any format that Image/IO framework supports like HEIC\n+ GIF coder\n  + GIF only, support animated GIF or static GIF as well. Animated GIF need the UIimage instance from SDWebImage itself or using our Coder Helper to create with frames.\n+ WebP coder\n  + WebP only, support animated WebP or static WebP as well. Like GIF. # Current break change (Need change code)\nSDWebImageDownloader.h\n\nshouldDecompressImages MOVED to SDWebImageDownloaderConfig.shouldDecompressImages\nmaxConcurrentDownloads MOVED to SDWebImageDownloaderConfig.maxConcurrentDownloads\ndownloadTimeout MOVED to SDWebImageDownloaderConfig.downloadTimeout\noperationClass MOVED to SDWebImageDownloaderConfig.operationClass\nexecutionOrder MOVED to SDWebImageDownloaderConfig.executionOrder\nurlCredential MOVED to SDWebImageDownloaderConfig.urlCredential\nusername MOVED to SDWebImageDownloaderConfig.username\npassword MOVED to SDWebImageDownloaderConfig.password\n-[SDWebImageDownloader initWithSessionConfiguration:] REMOVED, use -[SDWebImageDownloader initWithConfig:] with session configuration instead.\n-[SDWebImageDownloader createNewSessionWithConfiguration:] REMOVED, use -[SDWebImageDownloader initWithConfig:] with new session configuration instead. To modify shared downloader configuration, provide custom SDWebImageDownloaderConfig.defaultDownloaderConfig before it created.\n\nSDWebImageDownloadOperation.h\n\nSDWebImageDownloadOperationInterface protocol RENAMED to SDWebImageDownloadOperation. (SDWebImageDownloadOperationProtocol for Swift). @bpoplauschi Well. Actually, the pending two PRs about #2278 #2256 's design, pass the raw SDWebImageOptions to allow user to pick up the useful information about options.\n\nThis PR I just add new options due to the previous historical design. But I think maybe this is useful, because we can clear that something only availbe for downloader and cache, but not for something else like view category or manager level.\nAnd to say, there are actually something not superset. For example, SDWebImageDownloaderOptions have two options, SDWebImageDownloaderUseNSURLCache & SDWebImageDownloaderIgnoreCachedResponse. Which are not the same one as SDWebImageOptions. Though SDWebImageRefreshCached will both use these two together, but they can also be used separately \ud83d\ude15 . @bpoplauschi \ud83d\ude05About the SDWebImage prefix. I think we can talk about this again. I reply the information in the #2140. I think the name that SDWebImageDownloadOperationInterface is quite Counter-intuitive. Objective-C's interface always represent the class in other language like Java or C++. Objective-C's protocol represent the interface in Java. So naming this will confuse some people. It's more adoptable to let Swift compiler to name it with Protocol suffix and produce SDWebImageDownloadOperationProtocol\nThis SDWebImageDownloadOperation Protocol is actually the abstract class, but not describe something ability, so it should not named Downloadable.. \ud83d\ude05 You're correct. This seems a documentation issue. We'll update and fix it. Thanks for your report.. Fixed in 0f36f97. Well...It seems that move the directory around will cause many MR conflict. I'll only move the WebP, GIF, MapKit subspec into sub directory. Keep the Core directory flat.. @mythodeia Because I arrange all files into 4 sub directory Core, GIF, WebP and MapKit. This will cause many conflicts if later commits modify it...So I decide to modify it to only move the GIF, WebP and MapKit files. \ud83d\ude05 . @mythodeia Update it. I revert the file movement related commits, rebase again and update this one. \ud83d\ude05 . Well..Actually this will not cause API-break. I'll process it later after other things done :). I can just totally reset this PR and cherry pick the useful commit.\nThis PR seems actually don't need you to write any code. Just about modify Podfile, provide a modulemap files is OK.... @bpoplauschi  OK...Now I only move the MapKit & WebP files into the sub directory. All others files keep there :)\nYou can now using #import <SDWebImage/SDWebImage.h> instead of massive headers for Objective-C user. Well, previous version can also something like this, but by using the CocoaPods's generated headers #import <SDWebImage/SDWebImage_Core_MapKit_WebP_Umbrealla_header.h>, which is quite wired...We now using the custom modulemap files to specify the umbrella headers.\nYou can also using the New Xcode syntax @import SDWebImage; in Objective-C (It's also supported in 4.x. However, not all people know this)\nThis PR does not affect anything for Swift user. Swift user should always using import SDWebImage to import our framework. Forget to remove that duplicated WebP headers in SDWebImage.h. Done. For each module, it should have only one umbrella headers. In that umbrella headers, you should import all of headers for publich APIs.\nI add the thing like #if __has_include(<SDWebImage/UIImage+WebP.h>) to only include the valid headers if need. You can not using #if SD_MAC, #if SD_WEBP in umbrella headers. See the reason I list above.....\nAnd I've also test with demo project, which can import the correct headers well.. That because it using clang - Sub Module. Which allow your to using somelike\n@import SDWebImage.GIF.\nHowever, this is not compatible for CocoaPods like CocoaPods subspec. We'd better keep the current design as simple. \nAnd maybe another approach ? Like define the sub module, but share the same umbrella headers ?\n\n\ud83d\ude05 . Also this PR also fix the current implementation for scale factor on macOS.\nIt's really confused for some developer from iOS side(like me \ud83d\ude05) about image scale factor on macOS. This is because that the design from UIKit & AppKit is really different on UIImage/NSImage.\nThe NSImage by default will always use backingScaleFactor(like UIScreen.mainScreen.scale) to identify image scale. Which means if you're on a Retina MacBook. Even the image itself does not contains any scale information, such as the image data from the network. NSImage's method like initWithData: & initWithCGImage:size will always use 2x of your image (!). If you're on a Non-retina MacBook, the scale factor is always 1x.\nBut however, UIKit does the opposite way, UIImage's initializer method will always use 1x if you don't provide scale factor whatever your iPhone has Retina display or not. So it means take we should make the responsibility to let these two behavior match. The best way to do is creating a helper method to let NSImage to match UIImage. So I add them into NSImage+Addtions.\nAfther this helper method was introduced, now we can get the same behavior cross-platform. See the screen shot about the test. The previous implementation will cause all image scale factor to be 2x and the image have the same size:\n\nhttp://localhost:8000/50x50.jpg\nhttp://localhost:8000/50x50@2x.jpg\nhttp://localhost:8000/APNG-cube.png\nhttp://localhost:8000/APNG-cube@2x.png\n\n. ### Current API break change\n- None\nMerged due to this can be partial of the image coder refactory and this does not break any current API.. Agreed. This code exist before I start maintain from 4.x :)\nActually, you can see that downloader use a dispatch_semaphore to lock the mutable array.\nIf you're interested in this, you can run a benchmark based on these two and welcome to create a PR for this.. @hulizhen Actually...That [self.runningOperations removeObjectsInArray:copiedOperations]; code is unnecessary there. Just kept and forgot to remove during the refactory from 4.2. (After that we use a weak reference to manager instance and call remove, instead of retain a cancel block).\nSo actually, we can use two dispatch_semaphore instead of this @synchonzied. It's no need to use a recursive lock here like mutex. I've comment there and you can try to replace and test it.. @wangjufan That #2340 merged. Will be availble in 4.3.4 now. You can try to upgrade later.. Since a project last 4 years. There are not always the best practice for its implementation.\nThe first one, about DISPATCH_QUEUE_PRIORITY_HIGH. There are only two entry for this usage (or maybe you are checking a out-dated version ? ). One is the custom image transformer feature, and another is the cache serializer.\nBoth of these two are used as optional, So that means if you don't provide one, there is no cost for this.\nSince image transformer is about image processing (Most of it work is vertex calculation); The cache serializer is about image encoding (vertex calculation too). They are all happended on the memory and cost CPU. Which it's not so time-consuming like network request. So I think we set QoS to High is OK.\nIf you're really care about the performance. In 5.x, you can totally create your own implementation besed on #2256.. About that SDWebImageDownloadOperation design, it's from the history of NSURLConnection. Unlike NSURLSession, which handle the queued request, priority, and many things about performance and battery by framework. NSURLConnection need you to manage the operation yourself, add to NSRunloop and do many stuff things. So we have that downloadQueue to maintain. We migrate it from 3.8.x, but however, the design to seperate a downloader and download operation is kept. All the actual download logic is in SDWebImageDownloadOperation.\nBut however, since we also support a SDWebImageDownloaderExecutionOrder, which let you to choose to use FIFO or LIFO. This can not be done by NSURLSession's simply usage, unless you create the NSOperationQueue yourself to manage it.\nMore importantly, we support user to custom DownloadOperation class. So if you simply remove the downloadOperationQueue and put the logic back into downloader. What can we done for this feature? This is also a question.\nIf you think you can create a better implementation which provide a better performance but also keep the current all functions. Feel free to create a PR about it. :)\n. @XiaoYiS \nCan you open your simulator's sandbox to check the actual cache size ? (You can check it on ~/Application/Library/Caches/default/com.hackemist.SDWebImageCache.default/, which represent the sharedImageCache)\nAnd also, are you sure you're get the correct size without losing the precision ? Be careful that NSUInteger division will clip to 0 if the actual size is 1024 * 1024 - 1.. @XiaoYiS You write some code to manually check that folder size firstly. And you can also dump you sandbox folder of real device (Through Xcode -> Devices -> Right Click App -> Download Container), check whehther that /Caches/default/com.hackemist.SDWebImageCache.default folder is actual empty or not.\nThis API just using NSFileManager's API, nother special for simulator or read device. If you find something strange, you can reply here.. @XiaoYiS See the code here: SDImageCache. It's now hard-coded a prefix string com.hackemist.SDWebImageCache.. It should not contains any other string instead. So maybe someone swizzle your code about SDWebImage or you're using a modified version of SDWebImage. You can check it again :)\nIn 5.x, we add a config to allow customize the prefix instead of hard-coded. Maybe at that time you don't need this.... ...If you're using a modified version of SDWebImage, you should try to find your own way to solve this. You can using NSFileManager to manually remove the cache folder. You can check cache folder from the modified version of SDWebImage, or something other way. Could you please provide the information about what SDWebImage version and libwebp version do you use ? And the install way (CocoaPods ? Carthage ? Manual ?). @bpoplauschi I found it. I'm trying to also provide a function for macOS. Because NSImage may lost EXIF orientation if you call that -[NSImage initWithCGImage:size]. And there are no way to keep this from our current implementation . So the code for ImageIO's progressive JPEG loading may cause we lose the orientation on macOS only. Here is the code\nI'm creating a category like UIKit's -[NSImage initWithCGImage:scale:orientation: and write some code to make it function. Maybe finish in hours. Please wait \ud83d\ude05 \n\nDone. I add one -[NSImage initWithCGImage:scale:orientation:], which you can specify a image orientation for specify CGImga (Since CGImage itself does not store any image orientation information). When the orientation is not UP EXIF orientation. We will firstly rotate it to correct orientation using +[SDWebImageCoderHelper imageRefCreateDecoded:orientation:]. Actually. The deisgn about orientation between UIKit/AppKit is quite different. For UIImage, the imageOrientation is a property when using rendering in UIImageView. Which means the UIImage does not care about how to render, just keep the information such as CGImage, imageOrientation. Only you draw UIImage on the screen(UIImageView), it can show the correct result with EXIF orientation. So this -[UIImage initWithCGImage:scale:orientation] actually do nothing except setting up the property value. It takes nearly 0 cost.\nHowever, for AppKit's NSImage, it controls how to rendering image. Which means NSImageView itself does not know more about NSImage rendering result. It just control the layout for NSImage (orientation is included). NSImage use its imageRep to rendering it and pass the content to NSImageView's layer. So this is why there are no such as imageOrientation property (I guess this may be historical issue back to the day Apple does not have Core Graphics). If we want to provide a CGImage with some EXIF orientation, we can only create another rotated CGImage(!), which means using a bitmap context to draw it with the correct transform.\nSo I have to make these two design patterns works for our framework. Since we can't change AppKit's  NSImageView behavior, we should adopt this design to create the transformed CGImage firstly. That -[NSImage initWithCGImage:scale:orientation:] should be used as a convenience method(First create a transformed CGImage and then call the super one). There is a bitmap context drawing cost unlike UIImage method.. @bpoplauschi  Hi...Recently I borrow a iOS 7 Real device and test this MR again.\nThe test result is that iOS 7 can correctly parse the image EXIF orientation as well. Which means to get the correct orientation from image data, just call +[UIImage imageWithData:] is OK. No need to calculate the EXIF again and again. This can enhance the performance.\nThe test result screenshot is here:\n\nSo I device to merge this change in 4.x as well. Since it's not a API-break change.. @mythodeia See this one. I think maybe this is a bug and we can help 4.x as well. But if you're cautious about it. I can try only modify 5.x branch and wait for later merge back.. Well. Since if you decompressImages, the produced UIImage's memory usage will move from ImageIO to Core Animation. This can sometimes help reducing the application used memory. The most advantage fot this it's that it can increase the frame rate. The only disadvantage of this is this will increase the download time because we need decode it in the background, and may cause memory issue if you cache too many decompressed image into SDImageCache. The detailed description about this options can be found in the comments in header files.\nSo I just merge this firstlly in 4.x, and pull to merge it into 5.x as well. \n\n\n. @Cone1989 Em..What about your First or Last means.\nThis alpha information is from the CGContext by UIView. It's actually a Premultiplied BGRA-8888 format. We just use the same alpha information as it.. Previous version using RGB888 for non-alpha images. And it does not support alpha channel images, so no any information about Alpha because that shouldDecodeImage method already return NO for that.. So why I calll it BUG because force decoding feature is also available for alpha images. This bug is introduced via 4cfb12c refactory.\niOS system support rendering alpha information can be checked by that documentation. You can use any support alpha information in the list there. But however, using the differnt alpha from the current context may cause a little performance impact. So why we use the default one from rendering context.. @LiuDeng  \ud83d\ude05There will be more and more options in SDImageCahceOptions...\nWe can done this in 4.x. But I want to know that is this feature really necessary for you ? How does the image in cache come from ? If the image is from our SDWebImageManger and download from network, it should has already beeen decompressed or scaled down..... @LiuDeng So...If you already have some disk files contains big images, why not directlly scale down it before you query the disk ? I means to preprocess it before your application using them.\nCurrently SDWebImageScaleDownLargeImages implementation is not works well for most common cases, which just useful if your images is huge (actually your resolution should be large than 15728640 pixels, nearly 4000x4000). So maybe even I introduce this feature, this may not solve your problem.\nThe best practice for network large images, in 4.x you should use imageManager:transformDownloadedImage:withURL: to custom scale down the images if need. (In 5.x you can use our built-in transformer instead). For disk large images, preprocess the images before you load it, but not load the large images into memory and consume CPU to scale it down. This may be bad on performance and we'll not sync back the disk images again. (Which means each time your memory cache miss, you may query disk and scale it down again). See #2281\nAnyway, I can create a PR for this. You can try pick that branch and test your application firstly. If you find it useful, we can merge it in 4.3.4.. @LiuDeng Just decompress the original large images to reduce memory usage, without effect the image resolution, like the force decode(shouldDecompressImages) feature. But SDWebImageScaleDownLargeImages will using tiles (some small part of images, like CATiledLayer) to decompress to avoid memory leap.\nIf you need to resize the image to lower resolution, you should use image transformer featuer. In 4.x you can use imageManager:transformDownloadedImage:withURL: with some image trransfom third party library, like UIImage-Additions or YYCategories\nIn 5.x, we introduce common built-in image transformer and category. See SDWebImageTransformer and UIImage+Transform and #2219 \nPS: Actually I'm not satisfied with that naming...Maybe we should hide the detailed decompress implementation without that SDWebImageScaleDownLargeImages options.. @LiuDeng Yes you can . But attention if you Scale down (I think your means is resize down resolution) in completion block, you should remember that completion block from manager or view category are always called from main queue. So this process may block your main queue. We recommend to use a global queue to do this since image resizing may take many time to complete but not O(1) operation.\n4.x's imageManager:transformDownloadedImage:withURL: will dispatch a global queue to let you do transform, 5.x's tranformer always process on a global queue.. @chiahsien Seems the current implementation, that imageManager:transformDownloadedImage:withURL: delegate not forbid progressive image loading. So you can do some image processing during progressive image loading as you like.\nHowever, since progressive image loading will callback your completion multiple times depend on network speed, it may become really performance-related task. So take care of your image process code (Use high-performance code and keep thread-safe, like UIImage+YYAdd or our 5.x implementation UIImage+Transform).\nAnother solution, you can try to create a custom image decoder for your desired image format. Firstlly you check the image resolution (using CGImageSourceCopyProperties and check kCGImagePropertyPixelWidth). Then if it's large enough, using the awesome Image/IO API CGImageSourceCreateThumbnailAtIndex with your desired size at the beginning of image decoding, without output a large bitmap and consume memory. This may be really helpful if your image are not in your own server and always really larger than your screen size or render imageView size.\nOr if you can, try let your own image server to pre-scale down the image, before it send back to the client. This can also reduce the bandwidth for downloading.. @bpoplauschi Can we share and edit the 5.0 migration guide firstly on the wiki page here. To allow quicklly modification and check ? After all finished, we can copy that and paste on the Git repo.\nBecause each time you edit and push a new commit will cause CI to build, and there must be many changes before the final version migration guide finished... \ud83d\ude05 \n\nI'm checking API-diff for the master/5.x branch. And I'll update the wiki page to modify it. After all we finish, we can copy that wiki page to repo again.. @bpoplauschi I use objc-diff to generate the API-diff from current master with 5.x. It looks great and more clear. I upload it to you (And you can also download that command line tool, build the SDWebImage.framework for two branches and try yourself.)\nSince we will move all FLAnimatedImage related code to another repo. This one I'll check at the last with another PR to remove it.\napi-diff.zip\n. @bpoplauschi I update the migration guide on wiki page. With all changes for API-breaking I checked. And also a little introduce for the 5.0 brand new feature.\nThe last chapter is the Full API Diff link. We can place that apidiff.html && apidiff.css, into the git repo folder SDWebImage/Docs/Diff/5.0/apidiff.html, to allow user check that instead if they really want to know the detail changes.. @bpoplauschi I guess maybe we just need to list the API breaking (Which need change code) changes in that Migration guide. The new Added API don't need to be list there. Then we should also provide the full api diff as well in the repo to let user know the detail changes.\nWhy to do, because our hand-written changes also provide a replacement advice for user. For example, when user see this change:\nSDImageCache\n\nshouldDecompressImages removed. Use SDImageCacheAvoidDecodeImage in cache options instead\n\nThey can immediately know how to change their code to migration this. Because some API change replacement may not so obvious from the full api diff page. Another example, is SDWebImageManagerDelegate, which was removed because we use a better SDImageTransformer API instead. Which is not so obvious to find in diff compared to that hand-written one. \ud83d\ude05 . @bpoplauschi Migration guide Wiki updated. Could you please update the latest one ? (I'm not a native English seaker, which may contains other grammar mistake, could you please also check and fix that ?) \ud83d\ude05 . @bpoplauschi No anything block. I approve this. Maybe we can later update the wiki and README.md and CHANGELog.md if we find something to change. But anway, no extra big modification on the Code level is needed for this beta release.. # Current break change (Need change code)\nSDImageCache.h\n\naddReadOnlyCachePath: RMOVED, use additionalCachePathBlock instead.\ncachePathForKey:inPath: REMOVED, use cachePathForKey: with NSString's path API instead.\ndefaultCachePathForKey: REMOVED, use cachePathForKey: instead.. Since this PR is part of #2195 and is approved there. So merge it now. We will finally merge that big PR with some small parts.. # Current break change (Need change code)\n\nSDWebImageManager.h\n\nimageCache property type changed from SDImageCache * to id<SDWebImageCache>. The default value does not change.\n-[SDWebImageManager initWithCache:downloader:] 's cache arg type changed from SDImageCache * to id<SDWebImageCache>. \n-[SDWebImageManager saveImageToCache:forURL:] REMOVED. Use -[id<SDWebImageCache> storeImage:imageData:forKey:cacheType:completion:] (or -[SDImageCache storeImage:forKey:toDisk:completion:] if you use default cache class) with cacheKeyForURL: instead.\n-[SDWebImageManager diskImageExistsForURL:completion: REMOVED. Use -[id<SDWebImageCache> containsImageForKey:cacheType:completion:] (or -[SDImageCache diskImageExistsWithKey:completion:] if you use default cache class) with cacheKeyForURL: instead.\n-[SDWebImageManager cachedImageExistsForURL:completion REMOVED. Use -[id<SDWebImageCache> containsImageForKey:cacheType:completion:] (or -[SDImageCache diskImageExistsWithKey:completion:] and -[SDImageCache imageFromMemoryCacheForKey:] if you use default cache class) with cacheKeyForURL: instead.. That 3 APIs in SDWebImageManager tie our current cache implementation to manager. Since we support custom web cache implementation. We can now only expose cacheKeyForURL: to let user get the cache key, and call the correspond protocol methods instead.\n\nFor example, you can easily find the replacement for 4.x. This is the best practice to use :\n```objective-c\n// Input\nNSURL url;\nUIImage image;\n// Previous\nBOOL diskExist = [SDWebImageManager.sharedManager diskImageExistsForURL:url completion:nil];\nBOOL cacheExist = [SDWebImageManager.sharedManager cachedImageExistsForURL:url completion:nil];\n[SDWebImageManager.sharedManager saveImageToCache:image forURL:url];\n// Now\nNSString *cacheKey = [SDWebImageManager.sharedManager cacheKeyForURL:url];\nBOOL diskExist = [SDWebImageManager.sharedManager.imageCache containsImageForKey:cacheKey cacheType: SDImageCacheTypeDisk  completion:nil];\nBOOL cacheExist = [SDWebImageManager.sharedManager.imageCache containsImageForKey:cacheKey cacheType: SDImageCacheTypeAll  completion:nil];\n[SDWebImageManager.sharedManager.imageCache storeImage:image imageData:nil forKey:cacheKey cacheType:SDImageCacheTypeAll completion:nil];\n```\nNote, if you choose to use SDImageCache as web cache class (by default), you can also cast id<SDWebImageCache> to SDImageCache * and continue to use like 4.x. But it's not recommend because since it's a protocol, it can be implement by other class such as built-in SDWebImageCachesManager, which provide the support for multiple-caches system.. Done\n\nI'll fix the conflict soon. \ud83d\ude05 \nSometimes we name this class only by the historical design...This SDWebImageCache protocol is used for and only for SDWebImageManager bridge. But not a common cache protocol. So I just name it with Web to specify this behavior. You should not use this protocol in any other places...\nBut I can rename this SDWebImageCache Protocol to SDImageCache Protrocol, and the correspond SDImageCachesManager.\nActually....Sometimes there are no distinct boundaries between Web and Non-Web. For example. Our SDWebImageTransition should related to Web. Because it only used for View Category, which load the image from URL.\nHowever, current SDWebImageCoder protocol related class, including SDWebImageCoderHelper. It can be also renamed without that Web...I can talk this later in that PR. (Though this will cause huge changes from 4.x.). ...I'll merge the changes again about that renaming (You're always fast..) \ud83d\ude05 . @bpoplauschi See #2292 about the renaming for this protocol.\nActually, I'm not encouraged to change everything without that Web prefix. Because many of class just works. Change its name will make it hard for 4.x user to migrate...\nFrom the beginning I want to make 5.x not hard to migrate from 4.x, So I only change some advanced feature's API. Leave the Core API stable. But it seems the change lists become more and more long. \ud83d\ude02 . And actually no one can consider all things for the code or feature. If you find something need to change, comment there and I'll check and maybe modify it. No need to be hurry to merge...\nI'm subscribing GitHub event using a push notification service, so I'll normally response in less than hours. Don't need to wait for long time.. FLAnimatedImage will be totally removed in 5.x, replcaed with our native implementation solution for animated image, see #2140.\nBut this issue is a little confused. This issue seems only happend on Swift Carthage package manager, Cocoapods can automatically handle this dependency issue since we add FLAnimatedImage as a dependency in Podspec.\nI think we can check firstly and try to fix the carthage integration for 4.x Swift user.. @intoxicated Any suggestion to solve this ?\nIf we just simply add a Cartfile in the root path. Contains this:\ngithub \"Flipboard/FLAnimatedImage\" ~> 1.0\nHowever, after carthage build, this will also cause issue, because we create a git submodule in the /Vender/FLAnimatedImage folder. And the SDWebImage.xcodeproj also add these FLAnimatedImage files into the target source files...This means the FLAnimatedImage files download from Carthage is no use with it. And if you add FLAnimatedImage.framework with SDWebImage.framework to your Xcode project at the sametime, there are duplicate symbol.\nThe best way it to using Cocoapods with this case. Add FLAnimatedImage & SDWebImage/GIF subspec together, so there are no duplicate symbol. You can always using Carthage & Cocoapods at the sametime.. Or, could you please help us polish the SDWebImageFLPlugin repo. This will be availble in 5.x because 5.x SD move all the FL-related files into another repo, not in the main repo. If people who need briding between these two framework, they can use that instead.. # Current break change (Need change code)\nSDWebImageManager.h\n\ncacheKeyFilter property type CHANGED to id<SDWebImageCacheKeyFilter>, use the -[SDWebImageCacheKeyFilter cacheKeyFilterWithBlock:] instead.\ncacheSerializer property type CHANGED to id<SDWebImageCacheSerializer>, use the -[SDWebImageCacheSerializer cacheSerializerWithBlock:] instead.. @bpoplauschi Any idea about this one ? 4.x branch \ud83d\ude05 . I'll merge back into 5.x...That custom web cache protocol PR need to handle this options as well. # Current break change (Need change code)\n\nSDImageCache.h\n\n-[SDImageCache initWithNamespace:diskCacheDirectory:config:] has become the designed initializer.. For people who need extra information such as NSError in file operation, they can use this feature to control the detail behavior for disk cache. For example, they can override the proper method their own.\n\n```objective-c\n@interface MyDiskCache : SDDiskCache\n@property (nonatomic, strong) MyErrorHandler *errorHandler;\n@end\n@implementation MyDiskCache\n- (void)setData:(NSData )data forKey:(NSString )key {\n    [super setData:data forKey:key];\n    NSError *error = [NSError errorWithDomain:NSPOSIXErrorDomain code:errno userInfo:nil]; // Grab the POSIX error\n    self.errorHandler.error = error;\n}\n@end\n// Or, just override without super method\n@implementation MyDiskCache\n- (void)setData:(NSData )data forKey:(NSString )key {\n    // get cache Path for image key\n    NSString cachePathForKey = [self cachePathForKey:key];\n    // transform to NSUrl\n    NSURL fileURL = [NSURL fileURLWithPath:cachePathForKey];\nNSError *error;\n[data writeToURL:fileURL options:self.config.diskCacheWritingOptions error:&error];\nself.errorHandler.error = error;\n\n}\n@end\n```. ...You run too fast :) . # Current break change (Need change code)\nSDImageCacheConfig.h\n\nshouldDecompressImages REMOVED. Use  SDImageCacheAvoidDecodeImage in cache options instead.\n\nSDWebImageDownloader.h\n\nshouldDecompressImages REMOVED. Use SDWebImageDownloaderAvoidDecodeImage in downloader options instead.\n\nSDWebImageDownloadOperation.h\n\nshouldDecompressImages REMOVED. Use SDWebImageDownloaderAvoidDecodeImage in downloader options instead.. For WebView resource load, typically there are two ways.\n\nThe first one is using file:// schema. This means you can store the image into disk cache, and let UIWebView's HTML use something like <img src='file://local/file/url/path'>. If the local file path exist, webview will correctly render the disk image.\nHowever, since this is only useful for the static resources (Always the static local file path) but not dynamic resources (You download the image from network and save to disk path). You may need something called JSBridge to support using JavaScript get the correct file URL without hard-code. When the web page need to render some images, it call your defined native-side JSBridge, such as 'mySchema://localImage?url=xxxx'. Then you just response it with the correct file://xxxxx string to JavaScript-side. And then JavaScript can reload the <img> tag with the correct file:// schema.\nThe second one, which is also the recommend way, it's using NSURLProtocol to control all the resource loading process for UIWebView. Or using WKURLSchemeHandler for WKWebView. You need to identify that the URLRequest is about image, and response the local file cached image as fast as possible.\nYou can also check some blogs about these, such as this.\nSince this topic is not related to SDWebImage framework usage, I just show the reference about it. Hope this can be helpful for you.. Maybe from the small changes to the large changes ?\nI recommend the order to be #2280 -> #2282 -> #2278 -> #2256.\nThat #2265 is not a API break change, just a project enhancement feature, which may contains only directory level arrangement and may cause many conflict if been merged first. So should be processed in the last... I'll transfer that repo to SDWebImage organization soon, and move current all code to that repo and get dependency update (It's midnight in my timezone, I'll do this hours later :)). @bpoplauschi Deprecated is enough. And I will update it to add one dependency, to avoid SDWebImage 5.x user accidentally import that:\ns.dependency 'SDWebImage', '< 5.0'. @bpoplauschi So fast. I'll check and collect the issue for 5.x beta version later.\nThe 4.x branch still need something change to be maintained, until the final 5.0 release.. @bpoplauschi I can try 5.0.0-beta later in my small App later. And try to find the issues in 5.x.. @bpoplauschi The unit test drop, based of previous 4.x test coverage is wrong. It contains the Test code itself, they should be ignored. The actual coverage should become nearly 70%.\n5.x introduce many feature, I try to add many test for the big features like Animated Image, Image Transformer and customization. But however, some test which relay on the UI-test like image indicator is hard to test, but I can try to add about it soon.. @bpoplauschi What about the state now ?\nShould we still wait for @rs to transfer the repo to SDWebImage organization ?\nOr we can first release 5.0.0, later do a transfer. GitHub will automcatilly redirect the URL or git repo to from the old one to the new one. And seems changing the source in the Podspec or Carthage files does not cause any API breaking to effect semversion.. @rs  I'm sorry. Maybe I misunderstand the meanning of that last mail ? I think we've already end up a consolution that we'll follow these thing. So I'm wondering if that you're busy recently so didn't reply to the final email.\n\nthe license will remain MIT, I think it's the best license for open source and we will stick to it\nwe have preserved the copyright (if no mistake slipped in any of the files) and we will continue to use this one\nyour name is the only name in the Author section, as you are the creator. We are just Collaborators. Let's keep that as well\nI have made you owner of the SDWebImage organization - I thought you were already, sorry, my bad\nI think all the people on this email can commit to keeping clear your role as author\n\nAnyway, I reply it with email now.. @zhongwuzw Any extra idea about these things above, to transfer this repo into our SDWebImage organization ?. @IljaDaderko Seems a strange behavior from my mind. Could you please open a issue about this, provide a demo project or code to show the issue and let me investigate ? This issue is about 5.0.0 release check list used by the contributors.. OS version ? If >= iOS 11.2, seems Apple's bug...See #2226 \nFor what actual shouldDecompressImages & scaleDownlargeImages means, see #2273 \nThe advantage of force decode, means we can decode the image before UIImageView actual rendering it, in the background queue. If you don't do this, Core Animation will try to decode it during rendering on the main queue and reduce the frame rate.\nThe disadvantage is that during the force decode process, we need another CGBitmapContext and draw images. This process will cause a temporary  memory peak. But this will drop down to a lower value if the decoding process finished...Only if the image resolution is large, or the concurrent decoding images count become large, the memory peak will cause OOM. (But mostly, a 500x500 images only consume 7MB, a new CGBitmapContext may contains the same memory like this. Only if you have more than 50 images to be decoding at the same time may cause the OOM)\nThis is a banlance between Time & Space. For most cases we enable this feature to keep frame rate. Only if you're loading something big images, you should consider to disable this.. This seems the same issue as #1816, it's closed but seems not fix this from the root case.\nI wonder this is because of NSOperation's finished & executing KVO value issue. It should works with no thread-safe issue because it's Foundation method.\nHowever, our cancelInternal method will also call this finished & executing. Maybe there will cause issue if sometimes done & cancenlInternal called at the sametime on different threads ? Like another really rare thread-safe problem. \nBut seems iOS 7 maintain consume much more effort. Maybe I can check this if I have spare time.. There is no such line of code in SDWebImageDownloaderOperation.m:229. Are you sure you're using the correct version of SDWebImage ?\nThe 4.2.3 version this line should be 219. @dennisxu1014 Each of latest the patch release should be considered stable, unless some serious bug occur (Which we may list in the change log).\nSo it means you can choose like 4.1.x -> 4.1.2; 4.2.x -> 4.2.3; 4.3.x -> 4.3.3\nWe follow Semantic Versioning.. This seems no break change because we have no such an SDWebImageError code information. All the error information are error with the SDWebImageErrorDomain. But since some Objective-C user use our framework not as a mudolar framework and import that SDWebImageCompat, they may face the header include issue since this now a new header.\nHowever, in #2265 , we will recommend all the Objective-C user to use these instead of massive headers.\n```objective-c\nimport \n// Or\n@import SDWebImage;\n```. Maybe some image decoding/encoding related class can also be renmaed. But I wonder does this changes's gain is much more than the gain ?\nAnyway, here is the suggestion I think can be renamed without that SDWebImage prefix to simple SDImage prefix.\nRecommend to change (Not widely used by user in 4.x)\n\nSDWebImageCoderHelper Class -> SDImageCoderHelper (Actualy this class is really independent, only include SDWebImageCompat.h, even without that SDWebImageDefine.h)\nSDWebImageFrame Class -> SDImageFrame (Really independent too)\n\nCarefuly considered to change (May be widely used by user in 4.x), it's recommend to keep current naming.\n\nSDWebImageCoder Protocol -> SDImageCoder\nSDWebImageProgressiveCoder Protocol -> SDProgressiveImageCoder\nSDWebImageAnimatedCoder Protocol -> SDAnimatedImageCoder\n\nSDWebImageCodersManagerClass  -> SDImageCodersManager\n\n\nSDWebImageImageIOCoder Class -> SDImageIOImageCoder (Not recommend, SDWebImage here means the Image/IO coder is provided by SDWebImage framework. Like the meaning it's maintained by SDWebImage's maintainer)\n\nSDWebImageGIFCoder Class -> SDGIFImageCoder (Same as above)\nSDWebImageWebPCoder Class -> SDWebPImageCoder (Same as above)\nSDWebImageAPNGCoder Class -> SDAPNGImageCoder (Same as above). I'm not recommend to change SDWebImageManager and many classes in the list above. This class are all the really common Core API. Change this will cause 4.x user really hard to migration. And the naming it's good with Web.\n\nOur framework is create aim to Asynchronous image downloader with cache support as a UIImageView category. And SDWebImage it's the framework's naming. It's no need to change unless the naming cause misunderstanding.\nI suggest to change something not really in common usage, and it's pure with non-network, non-photos or non-anything about Loading. To use that SD/SDImage without SDWebImage prefix.\nFor exmaple, SDWebImageTransformer is about Loading, because it's used by manager to transform downloaded image into another format. And cache also using this. So it's not so Pure.\nOnly something like SDWebImageCoderHelper, which does not contains any business about Loading, and it's about image, so can be renamed to SDImageCoderHelper. Some of changes actually are unnecessary, and more like a Philosophical problem.\nThe SDWebImage prefix not always means This is a class about Web & Image, come on. Some of class or headers is about  This is the file using in SDWebImage framework, and represent the common thing used in framework. For example, SDWebImageCompat, SDWebImageError, SDWebImageOptions.\nAnd, SDWebImageContext is created aim to hold anything that SDWebImageOptions can not hold. This is because of lack of Objective-C enum which can not bind Object. It does not means that context is for Web only. This two is about the options & context works hole through our Core API. And this is why they are always combined together. And we can not store all things into that context dictioinary because this API is't not easy to use (bitmask is easier). It seems that there are no pending feature PR about 5.x ? So maybe it's time to talk about this naming. And maybe we can soon release 5.0.0 beta \ud83d\ude42 \nI recentlly write a keynote about the architecture of SDWebImage. So I'm now a little agree with the naming issue.\nBut to say, I'm not agreed to renaming all classes in our framework, which cause unlimited changes. I'will renaming some class introduced from 5.x new feature.\nI'd suggest to renaming these class, which will cause some API break, but not so much. Most of this is about image process/encoding/decoding so it's better to remove web suffix. These are all the components in the architecture of 5.x which should related to Base Module (See below)\n\nSDWebImageTransformer -> SDImageTransformer. This one contains a cacheKey arg, but not related to URL, so it's adoptable to rename it.\nSDWebImageFrame -> SDImageFrame\nSDWebImageCoderHelper -> SDImageCoderHelper\nSDWebImageCoder protocol -> SDImageCoder\nSDWebImageProgressiveCoder protocol -> SDProgressiveImageCoder\nSDWebImageAnimatedCoder protocol -> SDAnimatedImageCoder\nSDWebImageCodersManager -> SDImageCodersManager\nSDWebImageImageIOCoder -> SDImageIOCoder\nSDWebImageGIFCoder -> SDImageGIFCoder\nSDWebImageWebPCoder -> SDImageWebPCoder\nSDWebImageAPNGCoder -> SDImageAPNGCoder\n\nHowever, I'm really not recommend to rename SDWebImageManager, or SDWebImageDownloader, which will cause huge API break change for most of user since this is Top-level API. And it more or less related to the Web because the basic function of these class is to download image from network. Photos framework support is 5.x new feature (Even it not in the main repo of SDWebImage) and I guess the user who need this feature is nearlly less than 1% \ud83d\ude05 \nThe reason also available for some other class. If the class contains any information about SDWebImageManager, NSURL, which should not be renamed. Like these:\n+ SDWebImageCacheKeyFilter: Contains NSURL. And it's about image cache's cache key, so the WebImageCache prefix is not so unbearable... \n. @bpoplauschi That compatibility_alias is not magic solution. Especially when you use something like type check, @class, @protocol, isKindOfClass:. They all fail because there are only one SDImageManager class in the runtime. It just a typedef. This will cause many potential problems.\n\nI think, that manager is designed as a bridge to cache & downloader. In 5.x we support custom loader protocol. But actually the usage for that loader protocol is about Custom Network , Third-party Cloud service. For example, our company using Cronet instead of NSURLSession for most of network request. Which build on the top of Socket API and supoprt cross-platform usage. Though we have custom download operation, but that SDWebImageDownloadOperation is hard to modify because it tied to NSURLSession stack.\nI guess maybe for most user, that SDWebImageLoader protocol is just SDWebImageDownloader protocol. So keeping the Web make sense...After I create that PR, I realize that we can adopt the #1970 feature into that protocol. But this is not the main propose of that custom loader protocol created for.... SDWebImageCacheSerializer, SDWebImageCacheKeyFilter are all created only for SDWebImageManager. It's just a wrapper of the original block in manager property, to solve Swift API issue described in #2261. You can check that to know why I have to use this wrapped object instead a simple block.\nSo I think, since this is tied with manager. We should keep these 3 have the same naming, that SDCacheKeyFilter does not make any sense. The function of this is \n\nprovide a mapping between NSURL to download and CacheKey to store to cache. So it's all about WebCache and URL loading. \n\nSo I suggest this class should contains Web prefix. But not just SD. SDWebImageContext is introduced by #2189 . It's a enhancement for SDWebImageOptions to store any object that enum can not hold. It behaves like the arrow in that architecture picture above. Which passed from top-level API, to the bottom base module. So SDWebImageOptions & SDWebImageContext should contains the same naming.\nThese two are both about the SDWebImage framework level configuration, they are not a single class related to image or not. (Contains many config). So I suggest to keep SDWebImage prefix to specify that.. @bpoplauschi Well...Another consideration from me about this renaming. \nI have a idea in my mind which I want to see in the future version of SD. See the architecture picture again. Since we now seperate the top-level API between the base module. And base module only depend on system framework such as Image/IO, Core Image. And it does not import any header other than SDWebImageCompat.h. Maybe we can do this further?\nLike YYImage and YYWebImage, what about put all the image processing/decoding/encoding code, into another framework (CocoaPods Pods) called SDImage. We can move all the current files like SDImageCoder, SDAnimatedImage/SDAnimatedImageView, Image Categories to that repo. Then the SDWebImage framework depend on that repo.\nSo the naming issue is need to re-considerate. After that SD may represent multiple repos, so that SDWebImageOptions, SDWebImageContext, SDWebImageError is valid enough because SDImage may also contains their error, options. Naming it without SDWebImage prefix will not make it clear on the contrary...  :)\nThis can be done even in 5.x because current there are no deep dependency hell between top-level and base module. But I wonder if this one really useful or should we do this in 5.x or future.... @bpoplauschi I can create a demo repo represent this. I think seperate the image part to another framework is easy, and can clear the dependency for our framework (No longer need WebP subspec or something related to image foramt). And make it useful for user who may only need Image part but not Web/Cache part.\nThis can also end up the naming discussion... Because if we adopt this architecture change to let SDWebImage depend on SDImage, SD will not only represent Web/Cache. So we may need SDWebImage prefix to indicate that this class is only availble for Web/Cache.\nSee SDImage's Repo. \ud83d\ude05 Any idea about this now ? @mythodeia @skyline75489 \nAnd I wonder if this suitable to move all the image related code into another repo SDImage ? Make SDWebImage itself depend on that repo ? It's this suitable ? What do you think ( Althrough maybe you're not develop iOS platform application. But this seems a common problem about software architecture)  @rs \nMy personal future imagination of SDWebImage can represent like this. And this is the goal I want to see for our framework.\n\nOut-of-box functionality and fully extensibility.\n\n\n. @bpoplauschi OK...Just a think of this approach. I guess someone may like to use that SDAnimatedImage or custom coder as a module without need of Web-Cache part in their own lib. But since there are no issue talk about this feature...Maybe we can just keep SDWebImage single framework.. @Baichenghui @mythodeia This discussion seems take so long time. I'd like to give up \ud83d\ude05 If someone still think naming is important, well...I can just create a PR. After #2326 merged. All the top checkbox list are finished.\nIs there anything else important to do before we release 5.0.0-beta ? I guess seems we take so long time during 5.x development...If there are no any huge pending issue (Small fix or API break can be adopted between 5.0.0-beta to the final 5.0.0-release), I think maybe we can start to release the beta version.\nAnd, for that current FLAnimatedImage bridge, I create a repo SDWebImageFLPlugin and move the code. After the final 5.0 release, we can remove the code in the main repo. All the further issue-pr transfered to there.. \ud83d\udc4d . \ud83d\ude05 It seems naming is hard. I wonder if I begin to change this, more and more break change will introduce only about naming but not feature or performance...So I think we can leave this later. As for me, fix/feature/performance contains high priority than this...\nI'm finding something design which is contains conflict or lack from our current architecture. Our architecture become more extensible since we have Custom Cache / Custom Memory & Disk Cache / Custom Image Loader now. So some hack or trick logic which is tied to SDImageCache or SDWebImageDownloader's behavior should be polished or provide another better approach.. Reopened. I think maybe we can just naming this to progressiveLoad. Because this name contains two meanings...\nFirst one, it's a hint for image loader to do progressive decoding during image load\nSecond one, it's a hint for image view (Such as SDAnimatedImageView) to do progressive image rendering.\nSo, I think now this name is better. progressive download may not point the 2nd clearly. # Current break change (Need change code)\nSDWebImageManager.h\n\nSDWebImageProgressiveDownload renamed to SDWebImageProgressiveLoad\n\nPS: SDWebImageCombinedOperation is new feature in 5.x, so no break changes.. @avershelaecom Hi, could you please add --verbose to your carthage build command ? And show the output to us, like these:\ncarthage update --version iOS --configuration DEBUG --verbose. \ud83d\ude05 It seems this refacoty cause some issue. I'll fix it later.... @bpoplauschi @mythodeia @skyline75489 Any idea about this ? Most of this is moving code, you can check out two branches to diff the result. Fixed in #2272 :). You are not enable ARC for disaptch object like dispatch_queue_t, which cause our framework not works.\nAnd if you're using CocoaPods, be sure to correctly setup your deployment target version to equal or higher than the min-target version of SDWebImage, for example, in 4.x it should be iOS 7.0+. You can check the CocoaPod documentation\nSee more about this in stackoverflow-does-arc-support-dispatch-queues, or a blog(chinese). You're welcome ;). If you means you need to specify some HTTP headers before image request, using Headers filter or Headers set/get method. These two are the dynamic/static way to specify HTTP headers.\nIf you means to get the HTTP response's header information, this feature is not available in 4.x. But is already done in the 5.x via #2261 . If you need this, you can wait for 5.x release. How can you get access that ioQueue ?\nThis code seems the really old version (3.7.x), which expose the ioQueue to user. But however, this design is totally wrong, we've remove that in 4.x\n\nWell...It seems that function documentation is still kept there. Let me remove that :). @bpoplauschi The fact is...You can not get ioQueue because it's private property inside. Well, we should know this in the implementation, but don't need to describe this on the public method documentations. Which cause user confused because there are no such a ioQueue property. \ud83d\ude00 . @bpoplauschi I'd like to just remove that line of @warning, which is better. (The above already tell that this method is Synchronous).... No break changes since Image Transformer is new feature in 5.x. # Current break change (Need change code)\nSDWebImageFrame.h\n\nSDWebImageFrame class renamed to SDImageFrame\n\nSDWebImageCoderHelper.h\n\nSDWebImageCoderHelper class renamed to SDImageCoderHelper. # Current break change (Need change code)\n\nSDWebImageCoder.h\n\nSDWebImageCoder protocol renamed to SDImageCoder\nSDWebImageProgressiveCoder protocol renamed to SDProgressiveImageCoder\n\nSDWebImageCodersManager.h\n\nSDWebImageCodersManager class renamed to SDImageCodersManager\n\nSDWebImageImageIOCoder.h\n\nSDWebImageImageIOCoder class renamed to SDImageIOCoder\n\nSDWebImageGIFCoder.h\n\nSDWebImageGIFCoder class renamed to SDImageGIFCoder\n\nSDWebImageWebPCoder.h\n\nSDWebImageWebPCoder class renamed to SDImageWebPCoder\n\nPS: SDWebImageAPNGCoder & SDWebImageAnimatedCoder is new feature in 5.x, so no break changes.. Thanks for your contributation.\nIt seems that you're using FLAnimatedImage with SDWebImage. However, we will change in 5.x, which introduce the new solution for animated image called SDAnimatedImage/SDAnimatedImageView. Which are both subclass of UIImage/UIImageView.\nThe current bridge for FLAnimatedImage framework code will move to another CocoaPods called SDWebImageFLBridge, so we may transfer the PR there. If you still need FLAnimatedImage with SD, you need import that Pods as well as SDWebImage itself.\nI'll keep this PR during the transfer. And may consider to merge it after the transfer end. ;). @hg-andy-kim \ud83d\ude05 Seems you're not online recently. To finish v4.3.4 release, I will pick your PR and create a MR again with some changes.\nHowever, current this solution is just a temp solution in SD4.x...Because we have only SDWebImageOptions enum.\nIn 5.x we introduce a Dictionary based SDWebImageContext. Which allow you to pass extra value that SDWebImageOptions can not hold.\nSo in 5.x's FLAnimatedImage plugin, I'll change this into a context options, instead of providing such a property on FLAnimatedImageView level.. @hg-andy-kim See #2323 . @hg-andy-kim That #2323 is merged into master. Thanks for your contributation. So this PR can be closed \ud83d\ude03 . I guess this seems bug from Image/IO.\nIt seems you're using progressive image load feature. And if I set a breakpoint at that line. I see these output:\n\n2018-05-03 23:28:17.922559+0800 SDWebImage iOS Demo[73708:4848777] imageBlockSetCreate:759: *** buffer height mismatch: rect:{0,0,4032,1008}  size:{4032,3024}\n\nHowever, all the information from Image/IO showing the image height is 3024 and filled with transparent color. The current offset Y is 1008.\nThis Workaround for iOS anamorphic image is kept for historical reason. From 5.x this code already been deleted. See #2303.\nI can check it again to test if iOS 7 still need it. (Well, Xcode 9 does not support iOS 7 :)) If need, I will add a if (< iOS 8) { // workaround} condition check. If iOS 7 does not need it, I will delete this code as well as 5.x.. Confirmed...I test with a iOS 7 Real Device iPhone with litte trick in Xcode 9.. \ud83d\ude05 \niOS 7 Image/IO does not have this bug, so this worksaround code can be removed in iOS 7 as well. The demo's progressive decoding for JPEG/PNG images looks well. (No scratch)\nSee the result:\n\nI decide to pick that merge request to 4.x branch as well. So this crash will not happen.. @onato Merged...Wait for 4.3.4 release and no longer Image/IO progressive loading need this workaround.. @ann\nFor iOS, this view transition just use the correspond UIViewAnimationOptions. By default, there are not set with UIViewAnimationOptionAllowUserInteraction, so the user interaction will be disabled during the transition.\nYou can simply add it by append UIViewAnimationOptionAllowUserInteraction to transition.animationOptions. For Swift user using insert(.allowUserInteraction) to OptionSet.\nBut however, maybe we can discuss to add this options as well ? Should we by default to allow user interaction ? If most of people using view transition and want to allow interaction with the touch, we can set it as default options. (You can also disable user interaction by remove this option). @annjawn See #2315. I guess I need to cherry pick for 4.x master branch to fixas well ? Or create a MR fix for 4.x master branch first, they merge back to 5.x ? \ud83d\ude05 . \ud83d\ude05 Anyone who can review this change ? @bpoplauschi @mythodeia . If available, I can also merge this into 4.x because no API changes and it's a bugfix.... @bpoplauschi I'll create a MR later...:). Just merged. Since iOS 7 is still works... \ud83d\ude34 . So, I just merge it. I test it using iPhone 5S (IOS 7) and it works. This can also avoid draw bitmap cause OOM.. So...I just merge this ? @bpoplauschi Any consideration ?. @gukemanbu The current implementation does not hold an instance of manager. It's just keep a weak reference to the manager (Or there will be retain cycle). So this will not cause any issue\nYour implementation, still keep a weak reference of manager. See that weakSelf you use...And to say, constuct a block on heap have more consuming of memory...A weak pointer is enough.\nActually, there are no really difference between implementation. :). \ud83d\ude05 Why we put @interface @implementation into different part. It's because of class declartation order.\nSDWebImageManager's internal property is defined in @interface SDWebImageManager (). But however, our SDWebImageCombinedOperation need access to this internal property. So the @implementation SDWebImageCombinedOperation should be placed below it.\nHowever,  SDWebImageManager need to access SDWebImageCombinedOperation's internal property as well. So @interface SDWebIamgeCombinedOperation () should be placed above it.\nSo, this cause the final code-layout:  @interface SDWebImageCombinedOperation () -> @interface SDWebImageManager () -> @implementation SDWebImageManager -> @implemenatation SDWebImageCombinedOperation :)\nYes, you can using something like dynamic, or category to put them together. But...actually this does not cause any meaning for user or performance, and it's no using for compiler. However, using a block will cause issue and will change the code for compiler. For example, it cause the retain cycle if you're not careful at all. It impact the performance as well.\nSince the reason why we put the @interface @implementation different part is obvious and easy to maintain. I don't think elegant or something is important than these potential problems.. @bpoplauschi This one.. @bpoplauschi This MR is just development during 5.x, but not any feature related to milestone. Like I talk about in that commit. I'll not directly push to branch, instead, create a PR and merge through GitHub. @pddkhanh  Anyone may has their own default options. I think it's not suitable to change all things as default because this may break user's usage. Provide a global default options will also cause many issues. So a simple solution. Write your own convenient category instead.\n```objective-c\n@interface UIImage (MyCategory)\n\n(void)my_setImageWithURL:(NSURL *)url options:(SDWebImageOptions)options;\n\n@end\n@implementation UIImage (MyCategory)\n\n(void)my_setImageWithURL:(NSURL *)url options:(SDWebImageOptions)options {\n    [self sd_setImageWithURL:url options:options | SDWebImageRetryFailed]; // Provide default options\n}\n\n@end\n```\nOr, if you don't want any blocking failed URL feature at all. You can just set the delegate of SDWebImageManager's -[SDWebImageManagerDelegate imageManager:shouldBlockFailedURL:withError:].\nFor example, you can use a simple instance as a delegate object and just return NO. (Sample code using a category to convert delegate-based callback system to block-based system)\nobjective-c\nid<SDWebImageMangerDelegate> obj = [NSObject new];\n[obj respondsToSelector:@selector(imageManager:shouldBlockFailedURL:withError:) withKey:nil usingBlock:^(id receiver, SDWebImageManager * imageManager, NSURL *imageURL, NSError *error) {\n    return NO; // do not blacklist any error\n}];\nSDWebImageManager.sharedManager.delegate = obj;. Well...From current design, that done block will not be retained by SDImageCache, because the queryCacheOperationForKey:options:done: now take a non-escape closure (callback in the stack but not pass to some other variable).\nBut however, in 5.x we support custom cache in #2278. So at that time user-provided cache may retain this block if they like. Using weak can avoid some issue.\nAnd, if the closure is non-escape, does that using weak-strong like current implementation really cause some issues ?. This seems like Apple's Image/IO framework internal issue about JPEG image decoding. Since now our built-in SDWebImageIOCoder only use Image/IO for decoding.\nIs this the reproduce rate is 100% ? What's the url of image ?. @mythodeia @bpoplauschi What about this one ? It seems that FLAnimatedImage does not follow the sem-version (A patch release v1.0.11 introduce the break-API), and our podspec only dependent FLAnimatedImage ~> 1.0, So I guess we should keep compatibility for that API changes.\nMaybe in 5.x, that SDWebImageFLPlugin can point to a higher version and remove the compatible code. @mythodeia I guess it time to release 4.3.4...Seems this patch version spend nearlly a month to develop \ud83d\ude05 \nAny further consideration before releasing ? Or do we need to upgrade the minor version number ? (I find most PRs are about bugfix in the history. Only this one is a new feature, but it's not a really big change). Well. To say, to achieve this goal, current you have 2 different ways to solve it.\n\n\nCreate your custom image coder. You can find the Wiki - custom coder. All you need to do just like a proxy to firstlly decrypt the original image data to the decryped image data. Then secondlly feed the decryped data to our SDWebImageCodersManager(set a flag for data after it been decryped to avoid cycle call) , or some other desired image coder.\n\n\nCreate your custom download operation. You can find the Wiki - custom download operation. You can just create a subclass of SDWebImageDownloadOperation, then override the -[NSURLSessionDataDelegate URLSession:dataTask:didReceiveData:] && - [NSURLSessionTaskDelegate URLSession:task:didCompleteWithError:]. Do your own decrypt process and finally call our image coder. Maybe you need to copy some code from the super class implementation (But anyway, we're open sourced...)\n\n\nIn the 5.x of SDWebImage, you have a third way to solve this. \n\nYou can create your custom image loader totally. Which open all of posibility for you to load the image from the original URL. (Regard of the URL is http or any other schema such as Photos framework URL). You can integrate your own implementation about image downloading and decrypting for advacend user.\n\nHope these advices can help you :). @bpoplauschi Well...Are you busy recently ? I guess we have taken too long time for 5.0 release...Maybe we can get it done before WWDC 2018 ? \ud83d\ude05 . That dispatch_queue_async_safe macro is original from the refactory in UIView+WebCache.m during 4.1~4.3, but now it seems has been removed.\nThis change seems adoptable, but it break current API. So maybe 5.x we can adopt this.. But however, we should use strcmp. The == only check the pointer of the start address of a char *. So it's not accurate. You see the == works only if the C string is string literal in the source code. So the compiler(clang) do some optimization about it. So they share the same address. However, for most other cases, such as get the string from data input or create with mutable char array, this will cause issue.\nRun the code below to see the result.\n```objective-c\nint main(int argc, char argv[]) {\n    @autoreleasepool {\n        const char str1 = \"abc\";\n        NSMutableString nsstr = [NSMutableString string];\n        [nsstr appendString:@\"a\"];\n        [nsstr appendString:@\"bc\"];\n        const char str2 = [[nsstr copy] cStringUsingEncoding:NSASCIIStringEncoding];\n        if (str1 == str2) {\n            printf(\"%s\", \"== equal\");\n        } else {\n            printf(\"%s\", \"== not equal\");\n        }\n    printf(\"\\n\");\n\n    if (strcmp(str1, str2) == 0) {\n        printf(\"%s\", \"strcmp equal\");\n    } else {\n        printf(\"%s\", \"strcmp not equal\");\n    }\n}\n\n}\n```. @zhongwuzw I'll change the base branch to 5.x and merge this..\nFor 4.x compatibility, are you interested in provide a PR about this as well ? Only keep API not breaking and using == instead of strcmp. Merged now. The discussion can be found in #2328 . @bpoplauschi Welcome back! Maybe we can continue 5.x release final stuff soon (Documentations, Migration Guide, API check up).\nThis PR's conversation is here #2328, At frst I also worry about this pointer compare. But after the discussion and I check the libdispatch source code, I agree that this change is adoptable. Because disptach queue's label is a variable stored in C struct (or \"class\" since dispatch object adopt NSObject). So the pointer compare always true for main queue.. Well. If we can using libextobjc to provide a default protocol method implementation. Maybe we can push this architecture more further. But currentlly seems this is too overhead and cause SDWebImage depedent another third-party framework...So I does not using this one. But anyway, here is the demo code about the Best design in my mind.\n```objective-c\n@protocol SDWebImageViewCompatible \n@concrete\n// These properies are concreted a default implementation using associated object\n@property (nonatomic, strong, readonly, nullable) NSURL sd_imageURL;\n@property (nonatomic, strong, null_resettable) NSProgress sd_imageProgress;\n@concrete\n// These methods  are concreted a default implementation to support cancel current load operation\n- (void)sd_setImageLoadOperation:(nullable id)operation forKey:(nullable NSString )key;\n- (void)sd_cancelImageLoadOperationWithKey:(nullable NSString )key;\n@required\n// These method to support display image\n- (void)sd_setNeedsLayout;\n@optional\n// These method to support view transition\n@property (nonatomic, strong, nullable) SDWebImageTransition sd_imageTransition;\n- (void)sd_transitionWithImage:(UIImage )image\n                     imageData:(NSData )imageData\n                 setImageBlock:(SDSetImageBlock)setImageBlock\n                     cacheType:(SDImageCacheType)cacheType\n                      imageURL:(NSURL )imageURL;\n@optional\n// These method to support view indicator\n@property (nonatomic, strong, nullable) id sd_imageIndicator;\n- (void)sd_startImageIndicator;\n- (void)sd_stopImageIndicator;\n@concreate\n// If you implement all the above @required methods or override some @concrete methods to make it suitable for current class.\n// Then you can use this method without any issue :)\n- (void)sd_internalSetImageWithURL:(nullable NSURL )url\n                  placeholderImage:(nullable UIImage )placeholder\n                           options:(SDWebImageOptions)options\n                           context:(nullable SDWebImageContext *)context\n                     setImageBlock:(nullable SDSetImageBlock)setImageBlock\n                          progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                         completed:(nullable SDInternalCompletionBlock)completedBlock;\n@end\n@interface UIView (WebCache) \n@end\n@implementation UIView (WebCache)\n- (void)sd_setNeedsLayout {\n    [self setNeedsLayout];\n}\n@end\n@interface WKInterfaceObject (WebCache) \n@end\n@implementation WKInterfaceObject (WebCache) \n- (void)sd_setNeedsLayout {\n    // Do nothing since WatchKit automatically layout the interface after property upadte\n}\n@end\n@interface CALayer (WebCache) \n@end\n@implementation CALayer (WebCache) \n- (void)sd_setNeedsLayout {\n    [self setNeedsLayout];\n}\n// SDWebImageViewCompatible.m\n@concreteprotocol(SDWebImageViewCompatible)\n// blablabla, the code from current UIView+WebCache.m\n@end\n```. @mythodeia @skyline75489  Seems @bpoplauschi is not online for a long time again \ud83d\ude05 Could you please review this ? I'd like to merge it to 5.x now.\nYou can checkout that branch and run our watchOS demo, to see the result of WKInterfaceImage category support.. So I just merge it. It's interesting that many developers start to use SDWebImage as a image loading solution on watchOS. Many feature in 5.x will be also available for watchOS as well :). Check your HTTP response firstlly. You can use lldb to set breakpoint at this line or using Charles to use HTTP proxy and capture response.\nDoes the server close the connection before the download finished ? What's the HTTP response header ? . This does not cause API breaking...Since the changes only happend on the implementation files.\nBut...Actually seems this change will not provide any benefit except for contributor readability, and at that time I have more things to do. So I just forget this because I guess maybe it's in a relative low priority.... \ud83d\ude05 . @gukemanbu  This refactory, will not be available for 5.x branch. Now master and 5.x are separate and not mergable. If you wish to keep this design, please provide a new PR for 5.x branch as well.. @bpoplauschi The diff is hard..I try to merge one, but however, this are many conflicts, nearlly 20+ files. \ud83d\ude05 \nI suggest to view the diff result, but using git diff and copy the code instead...Especially any changes into SDImageCoderXXX, because they've been renamed and git will recognize it as a new file.. @bpoplauschi You can try simulate to merge #2399 #2409 together...Because these PR change the SDImageCoder and SDWebImageDownloader...So that they will cause a full conflict(a new file marked as green and another file marked as red \ud83d\ude05 ) because of renaming...\nAnyway, I don't mean impossible, but it's just need more time, maybe I can try provide a merge.. @bpoplauschi I merge the lastest master to 5.x in 8b7e88de500dd9c755a2954a930806e1961035d7.  Actually the changes is only about this PR (Another changes which apply to FLAnimatedImage, is already fixed in SDWebImageFLPlugin).\nActually, just some code movement, this PR :). When switching target between different dependency using SDWebImage/GIF, SDWebImage/Core, run Xcode -> Product -> Clean and Xcode -> Product -> Clean Build Folder to clean the folder....\nIt seems a issue cause by Xcode. Our test project also need this trick \ud83d\ude05 . @ngAvaddon Oh...I'm checking that demo now..Seems a interesting issue. The imageData property in SDWebImageDownloadOperation is a NSMutableData. And it should be always keeping in memory now, to allow further decoding process and callback for the completion block.\nUsing NSMutableData here, compared with NSOutputStream, is no difference. Since you always need to append the new availble data to the memory buffer. And using NSMutableData is more easier to use and can easy transfer to NSData using copy, which is need to decoding process (Decoding process should not use a mutable data). OK...I\u2018ll merge it later :). Seems like a OOM issue. The device is out of memory and cause malloc failed. There is no ways to solve this case and just let the application exit. You can try to profile and reduce the memory usage for your application.. @mythodeia This one again :). @mythodeia 4.4.0 version released :)\nNow...Maybe we can focus on 5.x...I'll start to complete the documents for new features. And hope that @bpoplauschi can come back soon.. @master-nevi I try the demo, change the URL into different URl, even change the repeat times to 10000. But however, I can not reproduce this issue \ud83d\ude15 \nAs you say, I check the code there, the only opportunity that this race condition window can occur, it because of these code.\n``objective-c\n// SDWebImageDownloadOperation.m\n[self reset]; // -> should triggerself.finished = YES. And then callNSOperation.completionBlocksynchonized. Then the completionBlock will call[sself.URLOperations removeObjectForKey:url];inSDWebImageDownloader.m` to remove this operation from queue.\n\n(void)setFinished:(BOOL)finished {\n    [self willChangeValueForKey:@\"isFinished\"];\n    _finished = finished;\n    [self didChangeValueForKey:@\"isFinished\"]; // This will call NSOperationQueue.completionBlock, however, it's a async call and on another global queue (Not behave like KVO on this property).\n}\n\n// SDWebImageDownloader\nSDWebImageDownloaderOperation *operation = [self.URLOperations objectForKey:url]; // Get a nonnull operation\n// Then add the new progressBlock & completionBlock, however, this operation is already marked as finished and could not recovery again...\nid downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];\n```\nFrom the theory, this race condition can happen. Maybe we should check that the operation we get is not marked as finished. Only this case we can reuse this operation for download and call for completion. If is already finished, directlly create a new one instead.. @master-nevi See #2346 . @master-nevi Soon, and should before this weekend. After all the issue on https://github.com/rs/SDWebImage/milestone/26 finished.\nThis time because of one emergency issue #2347 so the patch version release for 4.4.0 will be released quickly. \ud83d\ude05 . @master-nevi 4.4.1 released...You can upgrade for this fix right now.. View is view, image is image. UIImageView have its own bounds to identify the actual rendering image's size. Where the UIImage's size property represent the image resolution ( pixel width / scale ).\nI think your problem is that you didn't specify your cell's imageView's frame before loading the image. If you want your imageView's frame to be exact what image resolution, call imageView.size = image.size in the completion block of sd_setImageWithURL:completion:.... @master-nevi Em...What does would also start another download when the previous operation still exists in memory and therefore there still exists an opportunity to call the handlers means ?\nIf the race condition occur, we should treat the previous in-memory operation as another download session, it just over and finished. The new comming request should start a new operation. So finally these two operation's completion will been called separatelly. But no one been omited.\nIt's counter-intuitive that a already finished operation, have their extra logic to contains some completion block, which should exist in the original operation's process. And that pseudo code will cause more public APIs to be introduced. Including image, data, error these information. They are previouslly the internal variable about download operation itself, and the user who use Custom Download Operation  may not even keeping these variable in the memory after they mark finished. I guess maybe this is not a good design.. @master-nevi Your consideration about thread-safe issue on property is adopable. Because the get/set to that finished property is not guarantee on the same queue.\nBut however, in Objective-C world, actually this will not cause issue when the property is using assign for scalar value. Because scalar value like BOOL (typealias to signed char), the property does not actually call any retain, release or runtime method. It just a value type copy (like Swift's struct). So there is no pointer free or memory address access. It always thread-safe about memory.\nThough, this does not mean the top-level business logic is thread-safe. Because of ABA problem or other situation.  But here, since we need to get the current state of finished and the finished state will not reset to NO after it set to YES. So it's OK.\nOnly property like strong, copy that when set/get on the different queue may cause crash, because there may be a race condition that the previous released pointer will been call retain on it from another thread, so it trigger a BAD_ACCESS SIGSEV signal.\nTo learn more, you can even check the Objective-C runtime source code here objc-accessors.mm\nBut anyway, your consideration about this thread-safe is really good. Typically most people does not realize this and just assume anything run on the main queue. \ud83d\udc4dI fixed a lot of thread-safe problems during my maintain time \ud83d\ude05  . Try the lastest version (4.4.0) firstlly. Not the previous release\n\n. @d-date Seems works on the iPhone simulator. Does this cause issue on the real device ? Because libwebp for ARMv64 device using the NEON optimization. Where the iPhone Simulator is x86 device. I guess maybe it's related to this.\nI will find a real device running iOS 12.0 beta firstlly.. @d-date Did you try the 5.x branch for this as well ? It seems I need some time to get a extra test iPhone and upgrade to iOS 12... \ud83d\ude05 . @d-date Conformed seems a bug that because of using the wrong arg in CGImageCreate. However, this seems does not cause issue in the previous iOS release \ud83d\ude05 \nIt also happend on the iPhone Simulator. Sorry that I previous using the 5.x branch for testing but not the master branch. 5.x branch using another bitmapInfo for a little performance consideration, so it does not cause this issue.\nSee #2348. @d-date You can test the master branch now. It should been fixed.. 4.4.1 version release. Anyone here please upgrade if you're using WebP images \ud83d\ude03. Seems like a thread-safe issue, or the memory issue (that memmove C function call failed). I'll check it later.. One way, if you don't want to build some more code about image store & load, you can create a standalone SDImageCache instance with a custom path folder (Which may be a permanent sandbox folder but not cache folder). You can check SDImageCache initilizer to do this.\nThen specify this cache instance to a new SDWebImageManager instance, which will use the standalone cache to query disk.\nLast, using sd_internalSetImageWithURL: on UIImageView with the custom manager using SDWebImageExternalCustomManagerKey key. To load the image from the custom path folder.\nIf you want more control for download & cache & load, you can directlly using SDWebImageDownloader to download the image firstlly, then store to your permanent file path. When you need to display the image, grab the disk path in global queue and using UIImage+MultiFormat.h to decode it, then set it back. You can build your own logic as you want by using the SDWebImage as a toolkit.. This sounds a interesting feature request.\nIn 5.x, we introduce the SDImageLoader protocol, it allows you to custom image loading implementation, instead of using SDWebImageDownloader. I guess you can create a seperate project to allow user to use CloudKit.\nYou can check SDWebImagePhotosPlugin this repo, which provide a custom image loader for Photos Library. I guess you can do the same thing like it.\nOr if I have some spare time, I will check back about this feature request and try to provide one simple implementation. Your application is run out of memory. The image data is a NSMutableData, and it should be called copy before decoding to make sure thread-safe. However, if the image raw data is really huge and your application current is run out of memory. This will cause memory allocation failed. Seems no good solution for this.. Maybe one choice, we can map the in-memory image data to the disk files during download. So it does not triggert a memory peak (where NSMutableData as well as copied one exist at the same time). After all the image data is downloaded, we load the disk data into memory again. Then using the image data to feed the decoder.\nThis can be considered using a thread-hold for image data size. For example, if the image data is larger than 5MB, we store it to disk instead of using NSMutableData in memory.\nBut anyway, this need some works to do it. Keep it here and I'll find a better solution later. @huanghe810229530 Maybe related to progerssive decoding and been fixed by #2475. More same issue like #2620 .. Duplicated for #2347 . And it's already been fixed in 4.4.1 version\nPlease using GitHub issue search before you fire the issue, thanks !. @lohenyumnam Current implementation, the cache expire removeal process is only happened when your application is entering background. It use a long-term background task to check the expired cache data and remove them.\nSo if you do not enter background mode, just keep download and store image, the expired cache data will not been cleaned. If you want to triiger this cache removal process, call deleteOldFilesWithCompletionBlock directly. Seems we finally can release 4.4.2 \ud83d\ude05 Close this issue.. I approve this feature request ! Seems this is useful for people who need detail control for expiration filter.\nThere are some small change to do before we merge this. Can you please check the review status again ? Thanks :)\nIf you have no time to do this, I can provide a help to create a new MR contain this feature as well.... @paulosaure Sorry for late...This change looks good. Another more change request, that clearBy property, seems not follow the type naming SDImageCacheConfigExpireType. Could we change that to diskCacheExpireType, which may be better to indicate that it's only applied to disk cache?\nAnd if you want to keep that By naming, you can rename that \nSDImageCacheConfigExpireTypeAccessDate to SDImageCacheConfigExpireTypeByAccessDate. SDImageCacheConfigExpireTypeModificationDate to SDImageCacheConfigExpireTypeByModificationDate.\nWhich may be more clear and also keep that by word...\nAnd I hope this will not bother you. Why I want to suggest this naming (which I reference from INDateSearchType), because we may want to extend this options further to control clear disk cache behavior. Which may not means clearBySomething. For example, we can later add a enum like SDImageCacheConfigExpireTypeAutomatic, SDImageCacheConfigExpireTypeNone. Which does not cause some API break and naming confusing for our user. \ud83d\ude05 . @paulosaure Looks good now. I'll try to merge this to master after CI passed. :). @paulosaure Merged. I add this to 4.4.2 milestone. We'll need maybe 1 weak to see if there are any other changes or bugfix for 4.4.2. And then we can release it.. @paulosaure Sorry here. Seems we find some bugs about FLAnimatedImage and I create a PR #2374 . But however, this need more time to test. So this cause a delay. \ud83d\ude22 \nIf you're in hurry. We can release that 4.4.2 soon, and fix that FLAnimatedImage issue in the next patch version 4.4.3.. This feature is already added in #2266 for SDWebImage 5.x. Which allow you to provide a extra scale factor arg to specify the target image scale. This will effect all the coders to use that information as scale factor and we will not call create a extra UIImage instance by grabing the previous CGImage and the new scale factor. See more in that PR.\nswift\nimageView.sd_setImage(with: url, placeholderImage: nil, options:[], context: [.imageScaleFactor: 3], progress: nil, completed: nil)\nIn 4.x, seems we do not have a plan to add this feature. However, current you have one solution:\nYou can try to use cache key filter, to remap your remote URL format (like you say https://placekitten.com/{x}/{y}), to a string key that contains the scale factor(like https://placekitten.com/{x}/{y}@3x.jpg). Then the build-in process in 4.x will treat this url as a scaled url and will use 3x for scale factor.\nThis sounds a little trick, but since current we do not have plan to add a entire context arg in 4.x version, there are no something other good way to solve this.. @larsacus 5.x seems take so long time. We have to wait for #2285 to finish.\nAbout current workaround - a more tricky way in 4.x. Since the cacheKeyFilter accept a NSURL instance, which original from the View Category method, you can try to pass extra information on that NSURL instance, for example, using setTemporaryResourceValue:forKey: or using Objective-C associate object, to store you scale factor value into that NSURL...Then in your cacheKeyFilter block, check the asscoiate value about scale factor, and return a modified cache key with @2x. or @3x.. @larsacus 5.0.0-beta now released. Maybe you can try it out with 5.0.0-beta version.\nTo specify you custom scale factor, you can use .scaleFactor context option, we'll not assume anything for the scale based on the url.\nswift\nimageView.sd_setImage(withURL: url, placeholderImage: nil, context: [.scaleFactor: 3]). # Current break change (Need change code)\nSDWebImageDefine.h\n\nSDWebImageCacheMemoryOnly REMOVED. Use SDWebImageContextStoreCacheType option with SDImageCacheTypeMemory instead. . # Current break change (Need change code)\n\nUIImage+GIF.h\n\n+[UIImage sd_animatedGIFWithData:] RENAMED to +[UIImage sd_imageWithGIFData:]. SDWebImage use the standalone NSURLSession instance, which create from NSURLSessionConfiguration.defaultSessionConfiguration. So if you set the Cookie using NSHTTPCookieStorage.sharedHTTPCookieStorage, then these cookie information will be grab during NSURLSession network download.\n\n\nDiscussion for NSURLSessionConfiguration.defaultSessionConfiguration\nThe default session configuration uses a persistent disk-based cache (except when the result is downloaded to a file) and stores credentials in the user\u2019s keychain. It also stores cookies (by default) in the same shared cookie store as the NSURLConnection and NSURLDownload classes.\n\nI guess your problem is that you does not store the Cookie information to the shared cookie storage, or using another session configuration for download. So you can set a breakpoint, or using Charles network debugger, to check why these cookie was lost. This will happen when the system's left space is really low. However, after trigger this error, iOS system will try to collection the all App's cache, System cache and remove them in the order (Like a Jetsam for disk). So next time you call store disk, there may be more space and no error occur.\nThis can not be easilly solve, because it's actually disk space issue. We can just passthrough the error to our developer to let it do something to show this to the end-user. Sounds really strange. We didn't face this issue from our products. Any good to reproduce this ? \ud83d\ude15 . @GaevYuriy SDWebImage store the original image data into your disk cache, not the decompressed one or re-encoded one.  (Until you specify cacheSerializer)\nDid you specify anything transformer for the image display ? Such as this delegate here in 4.x. @GaevYuriy You means, when this strange issue appear, your image instance is from memory cache (SDImageCacheTypeMemory) ? Interesting.\nThe memory cache now just use NSCache, it should not modify the image instance...\nCould you please try to reproduce this issue, and then, set a debug breakpoint, trigger [[SDImageCache sharedImageCache] clearMemory] to remove the memory cache, and let it been retrieved from disk cache to see what happend (Image still occurpted or not ) ?. @GaevYuriy From your stops. It seems that the disk cache image data is already been modified. Because I can ensure that the image decoding process will not change the representation of image.\nSo this time, let's try to figure out the reason. I can give you some steps to check. These step can be done on iPhone simulator to simplify the process.\n\n\nFirstlly,reinstall your apps, remember one URL that can trigger this issue, download the image original data to desktop, named original.jpg.\n\n\nThen, use SDWebImage to load this URL. Then after success, check your apps's sandbox and grab the same image to the desktop. You can find the folder path from lldb by using po NSHomeDirectory() (See here). Then find the cache files in ./Documents/Library/Caches/default/com.hackemist.SDWebImageCache.default from documents folder... Copy the image match the URL into desktop, named cache.jpg.\n\n\nNext, trigger this issue until you see the blut dots. Then, check your app's sandbox again, grab the corrupted image files to desktop, named bug.jpg\n\n\nCheck whether these 3 images are equal. The desired result should be original.jpg == cache.jpg, original.jpg != bug.jpg. If so, we can ensure that the cache files in SDWebImage been modified accidentally.. @GaevYuriy You means each time you fetched the image (from cache or network), you call SDImageCache.storeImage ? This will cause issue because that method will try to encode the UIImage memory representation, to the compressed format image data to write on disk. By dafault, use JPEG for non-alpha image and PNG for alpha image.\nImage encoding, which some iOS developers may not be familiar with, have lossy compression and lossless compression. However, JPEG fomat supports only lossy compression. Which means you encode -> decode again, the image quantity was effected and become worse. The image data is also different from the previous one. So if you repeat this process several time, the final image may be not readable at all.\nThrough PNG supports lossless compression, however doing this may consume much more unuseful process. It's strongly not to do anything like this. (I guess this is a bug in your business code...Since when image downloaded, it was automatically stored to memory/disk cache. Why to store and overwrite the disk image which already exist \ud83d\ude15 )\n. @bpoplauschi This bug, actually happended in real application. But to fix it, it's not so easy.\nIn this PR, I introduce 3 parts of changes to fix it.\nFirst: SDWebImageInternalSetImageGroupConditionBlockKey this block to determine whether to use GCD group.\nSecond: UIImage.sd_imageFormat property, which store the previous decompressed image format information to let FLAnimatedImage+WebCache determine it's a GIF image. (To say, UIImage does not store anything can represent the original data)\nThird: SDImageCache can allow we to query the disk data directly, without generate a UIImage representation.\nIf we just want to fix it, without consider the performance issue, we can drop the GCD group totally. (Ignore that SDWebImageInternalSetImageGroupKey this input at all). But we need the information to decide the image.sd_imageFormat and -[SDImageCache diskDataForKey:] to load NSData from disk cache again to generate FLAnimatedImage.\nAnyway, I can separate this change into small PRs to make it more clear.. @bpoplauschi I seperate some non-FLAnimatedImage related change to #2390 and #2391. After that been merged, I can rebase and create new commit.\nI guess that we need to revert the change from #2047 . So this PR's FLAnimatedImageViewSetImagePolicy feature should not been added. And that SDWebImageInternalSetImageGroupKey can be mark deprecated since it's now useless.\nWe just keep the original implementation from 4.2. People who need the best performance, should enable the cache for FLAnimatedImage, which only decode one time.. @bpoplauschi OK...Since that two preparations were done. I can create another PR which contains only code for FLAnimatedImage+WebCache.. @zhongwuzw Seems that I only care about the increment order of that token.xxcount. Because I assume it's a simple counter. However, when check the last finished status, this may cause some thread-safe problem. Even each individual count is guaranteed to be correct..\nI'll run tests again (See that SDWebImagePrefetcher test which take 20 urls, I can increase that to check) and merge this :). The FLAnimatedImage instance, from 4.2, will bind to the memory cache UIImage using asssociate object, see UIImage+FLAnimatedImage. However, current we have no choice to disable this behavior. Will be added now and be available on v4.4.2\nBut, I'm confused that since we already add a UIApplicationDidReceiveMemoryWarningNotification for memory cache, which should clear all the memory cache immediatelly, until somebody hold a strong reference cause that associated FLAnimatedImage not dealloced. I'm now trying to investigate this behavior between iOS 10 & iOS 11.\nI think something we done for FLAnimatedImage enhancemence is wrong. So I'll revert some change and provide a advanced control for each of thing we done, but not just hide all the detail behind.. @papanton Hi. Have you tried to disable that weak memory cache introduced in #2379 ? You can test your demo with the latest commit of master branch using Cocoapods. . @zhongwuzw I guess that setImageBlock in the previous version may retain the imageView, and will make the imageView alive longer than excepted. However, this setImageBlock retained self(imageView) will finally get released because this is not actually a retain cycle. When image load finished, the sd_setImageLoadOperation: associated operation will be removed. So that the imageView should be dealloced.\nAnd also, if you don't disable FLAnimatedImageView.sd_cacheFLAnimatedImage option, this FLAnimatedImage instance will be stored to memory cache. Which is kept alive until you remove it or memory warning cause it been purged.\nThe insteresting behavior is that One thing that might be creating problems is that the system memory warning never actually gets triggered on iOS 11. Which may be the root case.. @papanton Sorry maybe I miss this issue. The demo you provide seems not works because of that API failed in this url : https://dashboard.stickerpop.co/api/animated. Could you provide a update and I'll check soon ?\njson\n{\"message\":\"Unauthenticated.\"}. @papanton I try the demo. With both iOS 10.3 && iOS 11.2 real device, it can trigger a OOM crash after many GIF images was shown. No difference between iOS 10 && iOS 11.\nIt seems that UIApplicationDidReceiveMemoryWarningNotification not been called when this use case OOM occured. This may because of that this notification is always be sent on the main queue by UIKit. Sometimes the OOM cause by Image/IO decoding process from global queue, so it's too late. Another issue is that if the current runloop is full of Core Animation task (GIF image in FLAnimatedImageView use a CALayer to show frames, which may consume and cause allocation of memory after Core Animation commit) , when the UIKit send the notification to the main queue, the system still run many allocation code for Core Animation and finally cause OOM to be killed. So there is no change to get that notification...\nAnd another interestring issue, related to #2226 . In iOS 11.2~11.4, Apple introduce a bug that will cause crash because of decoding failed during Core Animation commit render. See #2226 and my bug report for Apple. During my test, I found that my iOS real device running iOS 11.2 will get this crash before the OOM crash or memory warning notification. So I guess maybe related to the difference between iOS 11 & iOS 10. Good news, this crash have already been fixed in iOS 12. (But Apple seems not fix this in iOS 11.4 :))\nThe better solution, maybe it's to limit the memory cache's size. You can try set SDImgeCache.maxMemoryCost or SDImageCache.maxMemoryCountLimit to a smaller size which is suitable for the device. (Calculate the number based on device total memory or dynamic change this propery)\nIn #2374, I'll try to provide more detail control about limit the memory usage. For example, you can disable store the FLAnimatedImage to memory cache (Using sd_cacheFLAnimatedImage property), cause it dealloc as soon as imageView dealloc.. @papanton 4.4.2 is out. Could you please read me reply above (I analysis the reason and provide some help), and try the new version ?\nTo summary, you can disable the FLAnimatedImage memory cache by using FLAnimatedImageView.sd_cacheFLAnimatedImage = false, so that the image instance will dealloc immediately (But this may cause frame drop because of disk cache query on the main queue).\nIf you don't mind a short-term empty image during cell reusing, you can call sd_setImage(with: url, options: [.queryDataWhenInMemory]), this will query the disk cache asynchronously\nIf you still want to keep high frame rate without flashing, you'd better keep use cache, but you'd limit the cache size by maxMemoryCost and maxMemoryCount in SDImageCache. This will stop memory cache growth to high value.. @papanton The animated image is a big task to talk about. If you're still care about the animated image solution , you can consider to try Animated Image in 5.0.0-beta. Which will not contains this issue because the we don't need to query disk cache during image display timing.. Correct. This one cause the issue after 5.x refactory for download token. but this seems is a rare reproduce rate and I just meet once. Thanks for provide the fix PR.. @zhongwuzw \ud83d\ude05 I saw you contribue some PRs for SDWebImage, and your skill about the framework development, Objective-C/C language and basic computer science knowledge seems good enough. We're all some people who spend spare time and pay for free to contribute to Open Source project, but we seems lack of new people to develop it further.\nIf you're intereted in it and have the hope, I can ask bpoplauschi to introduce you to the SDWebImage's Collaborator and contribute to the project easier. You can review others' changes, write documentations, check and fire issue and tags, push to branches, etc.\nThis does not means that there are some \"daily tasks, works or missions force you to do\". We just think if you're interested in this project and want to contribute more, this can make it easier.. @zhongwuzw Welcome ;). @zhongwuzw I'm a little wonrdered about this change. Does that we use a Array because of some histroical reason ?\nThe different between NSSet and NSArray for the value, may be that the object isEqual: and hash method. NSSet does not check isEqual: but only use hash instead. Is that the collection previouslly can store a outside object which may subclass and provide a custom implementation of this (Which may not just use the NSObject.hash default implementation which check the memory addrerss)?\nIf not, maybe this change is adoptable. I'm not be opposed to this change, just a little curious about it. \ud83d\ude05 . ......@bpoplauschi This change...Acutally will cause issue. Since SDWebImageCompat.h it's a public header in all files. If user have their own global define for this LOCK(It's not a compatible define like NS_ENUM which should be OK, it's a business code define), this will cause compile failed. (Like some code in our company's codebase).\nI think, it's time now (I'm really amazed that previous version does not have this one) to define a private header which should not expose to any files outside our framework. We can use private_header_files in CocoaPods/(Xcode's private header files) to manage it. Put all the private define or category inside it.\nI can create one for this... :). @bpoplauschi Cocoapods can use that private_header_files in Podspec. Carthage / Xcode manual install way can use Xcode's built-in Target Membership option to change the define to private to avoid this...This seems works well for both of this.... sd_setImageWithURL: will always firstlly reset your current imageView's image to the placeholder (or nil). So if you see sometimes two different cell get the same image. There must be that the URL you provide for different cells actually get the same image.\nCould you please provide a demo, or show some pseudocode, for example, what view (UIImageView?FLAnimatedImageView?UIButton?) you use and how sd_setImageWithURL: was called. So that we can check it more easily.. @x2rider You're using SDWebImageRefreshCached. Which may call your completion block twice (when the cache is refreshed), once from the cache and another from the downloader. (You can check the detailed behavior description about this option). So the logic in your completion block must handle this by checking cacheType. If you don't handle this, you may finally result 2 * 2 == 4 times of final \"Lo Res Image Loaded by....\nI guess maybe this will trigger the problem, for example, during second completion block(from downloader when cache is refreshed). Your current cell already been reused. So that even the image is correct to match the URL, the imageView's cell data does not match the image url first time you call sd_setImageWithURL:\nThe possible logic may like this:\n\nimageView.cellData = cellData1\nimageView.sd_setImageWithURL:(cellData1.url)\nimageView.completionBlock(cellData1.url.image, SDImageCacheTypeDisk) // First time from cache\nimageView.dequeueReusableCellWithIdentifier -> imageView.cellData = cellData2 // Cell reuse\nimageView.completionBlock(cellData1.url.image, SDImageCacheTypeNone) // Second time from downloader\nimageView.image != imageView.cellData.url.image (current cellData is cellData2)\n\nNow you have imageView which showing cellData1.image, even at that time your cell already use cellData2. Maybe this is what you see ? (ImageView.cellData not match the imageView current show image)\nAnd to say, if you don't want to auto-set the image, you should provide SDWebImageAvoidAutoSetImage. Because by default we will trigger [self setNeedsDisplay] after loaded and trigger you imageView be rendered. Which maybe not you want because you have custom logic to set image during completion block. @zhongwuzw This option refactor is already done on 5.x. See #2312 for a full list of 3 combination's behavior.\nThese options actually can be combined and represent 6 cases. So the use case at least need 3 options. I don't think you can use 2 options to represent it...\nWhy so complicated, it's because the SDImageCache root policy: Store UIImage instance into memory cache && Store NSData instance into disk cache. So, when you specify QueryMemoryData, means you need to query disk but not memory.\nActually, FLAnimatedImage+WebCache previouslly behave like QueryMemoryData | QueryMemoryDataSync. Which means: if memory cache hit (UIImage exist), query disk cache synchronously; else, query disk cache asynchronously.  Really trick ah ?. @bpoplauschi Thanks. CI now pass.. @bpoplauschi That SDWebImageFLPlugin seems not finished with current All FL code (Loss some commit after 5.x), and we need write some Readme there. I'll try to move and polish later.... @bpoplauschi I added it. Some small change from #2378 which not synced after that code movemenet.. @skyline75489 \ud83d\ude05 Could you please pull the master branch and merge (or rebase) the code. It seems that one line in comments have been changed and cause conflict. This change can be in 4.4.2.. @bpoplauschi This one now been updated to the latest 5.x. Maybe it's time to merge.. @bpoplauschi This is the first part of that #2374 . @bpoplauschi This is the second part of #2374 . Seems good. Here is also a common question in stackoverflow\nThe previous code seems not cause issue. Since most of that are const CFString and ARC detect it to not release that. But anyway, for common case, convert from const CFString and NSString should use __bridge, since we does not call any CFRelease after we transfer the ownership from ARC to Core Foundation.\nI guess maybe this is something my mistake since some of code was written by me. \ud83d\ude05 . @zhongwuzw Could you please also provide a fix in the master branch, since it's not so difficult. Maybe we can soon release 4.4.2. @bpoplauschi Any suggestion ? This change seems more clear that the previous solution. I guess that #2047 seems a wrong way we try to do something performance enhancement :(. # Current break change (Need change code)\nNSData+ImageContentType.h\n\nsd_UTTypeFromSDImageFormat: RENAMED to sd_UTTypeFromImageFormat: (Objective-C only). @zhongwuzw No. You don't need to subclass SDWebImageDownloaderOperation.\n\nThe comment here is show The best practice is to subclass SDWebImageDownloaderOperation because some of methods like addHandlersForProgress:completed: is hard to implement correctly your own.\nThe only limit for custom class, is that your class's object should be NSOperation<SDWebImageDownloadOperation> (The naming of that protocol changed from SDWebImageDownloadOperationInterface to SDWebImageDownloadOperation, follow Objective-C API guide), that's it.\nSee here wiki about Custom Download Operation\nBut anyway, I think this is just a compatible way of custom download process in 4.x, because at that time the manager is hard-coded tied to SDWebImageDownloader instance. If you want to use your custom network stack, in 5.0 we recommaned to use Custom Loader instead.. @zhongwuzw You're using master branch :)\nI remember in 5.x I've changed all of this SDWebImageDownloadOperation * to NSOperation< SDWebImageDownloadOperation>, you can check that...\nIn master branch, yes there are something like SDWebImageDownloadOperation * in the code. But however, when we want to call something method on SDWebImageDownloadOperation *, we also update the SDWebImageDownloaderInterface method in @required annotation. So runtime crash will not happend if user implement that protocol method. But anyway, seems a ugly coding style because of historical reason.\nIf you want to change it, it's good. But actually, that seems does not cause issue... \ud83d\ude05  The 5.x branch is now far away from master branch, and it's hard to merge (Because of many renaming issue, cause git diff show strange).. @zhongwuzw Seems you're correct. In 5.x I add it as optional and check it before use. See here.\nThough since it's a protocol, you can use any network stack does not use NSURLSession at all (Like my company's app build from Cronet from the scratch). But nearlly 99% Apps use NSURLSession \ud83d\ude05 \nIf you're desired, you can change master branch with that NSOperation< SDWebImageDownloadOperation>, and add that optional dataTask method in SDWebImageDownlaodInterface.. @zhongwuzw Actually, the network tranfer performance seems no big benefit. However, we have many business reason to build from Cronet. The most reason is that Cronet is a C++ implementation, which can build a cross-platform sulotion for network, instead of using NSURLSession (Objective-C) on iOS && HttpUrlConnection (Java) on Android, to write the same logic twice and cause potential issue during sync code. We have some custom feature. For example, sometime we need support HTTP/2 for lower firmware like iOS 8 && Android 4.4 (which built-in framework does not support). And we need some network stack feature like HTTP-DNS, custom encrpt-decrypt, detailed cache control, etc...So maybe this is why some of my company Apps choose this.\nBut, from my personal mind, I don't think it's a good solution for normal apps because it may not have many limitation(some because of China's network environment) faced by us. And this will limit many new feature from framework upgrade, until we implement own. Like Multipath-TCP, waiting for connection, etc.... I need some time to review again...At the beginning I'm doubt of that removeObjectIdenticalTo: changes. However it already been removed...Quite few changes... Afrer I review all the changes...It seems OK \ud83d\ude05 \nA question: Should we always use setValue:forKey: on NSMutableDictionary ? I get this rule from my company beucause of setObject:forKey:'s exception when either key or value == nil.\nI see some changes in this PR, also replace the orignal to setValue:forKey: to setObject:forKey:. But all of them have a previous check of value. But maybe sometime we are not so carefully, so I prefer to use that setValue:forKey:brainlessly...What about you \ud83d\ude15 . @zhongwuzw For the most cases I meet, that setValue:forKey: may not cause problem. Because using a mutable dictionary mostly happend when you want to call a API that contains many args (Most are Log, Server API, etc). So you would create a empty mutable dictionaray and set args wherever some args may be nil. At this time, removeObjectForKey does not cause any issue.  \ud83d\ude05 Anyway, it's about the good coding style.. It seems a OOM issue, during CGContextDrawImage.\nIf you're facing this issue, on low-memory device (such like iPhone 4S/iPhone 5). I suggest to firstlly disable the decompress feature.\nobjective-c\nSDImageCache.sharedImageCache.config.shouldDecompressImage = NO;\nSDWebImageDownloader.sharedDownloader.shouldDecompressImages = NO;\nI've done some research about memory usage during Core Graphics draw image, I have some solution, but they are all have some limits. So currentlly there are no good solution for this memory usage.. It seems a FLAnimatedImageView bug. UIImageView and our decoder always process the EXIF to image orientation correctly.\nCould you please help to provide a demo that can trigger this issue ? Maybe we can figure it out quickly.. @ericeddy After some test and my experiment, I can confirm it's a BUG in FLAnimatedImage third party library itself. I've create a MR to the FLAnimatedImage repo. You can push them to merge it and solve this problem.\nNow I can talk about the reason that cause this problem. At first, you should have basic knowledge of UIView-CALayer, if you don't know them, you should watch Understanding UIKit Rendering before reading the below.\nWhat cause this problem\nFLAnimatedImageView, it's a UIImageView subclass, which manually specify CALayer.contents with the current rendering frame's CGImage. And they use a CADisplayLink as a timer, to refresh current frame, finally produce the visual animation.\nHowever, CALayer itself, contains a private property, called contentsTransform. You can check the private header of CALayer. CALayer will calculate current UIImage.imageOrientation and translate to CGAffineTransform to render the bitmap. Why they to do this it's because it does not actually take rotation on CGImage's bitmap when you create UIImage with -[UIImage imageWithCGImage:scale:orientation:], The both scale and imageOrientation are just hint to the CALayer's property contentsScale and contentsTransform. So that CALayer use the contentsTransform to actually do rotation about the bitmap.\nWhich means, actually, CALayer draw its contents, based on the both public CALayer.transform and private CALayer.contentsTransform two properties.\nSee the screenshot during View Debug and print out the CALayer information. The actually CALayer.contents bitmap show the correct orientation, but the rendering result cause a rotation because the CALayer contains a contentsTransform = CGAffineTransform (0 1.06667; -0.9375 0; 375 0), which is a right-90 degress rotation.\n\nAfter I use KVO to observe this contentsTransform changes, I found that the only write on this property was happend on -[UIImageView setImage:] function call with a non-nil UIImage. The non-nil is really important, when you sepcify nil, the contentsTransform property leave there without reset to identity transform. (Because UIKit assume you don't touch layer.contents and so they don't need to reset the state)\n\nSo now, you may know the reason now. Correct, the previous JPEG image which contains non-Up image orienation will change the conrtentsTransform, but the newly set FLAnimatedImage does not clear that transform, cause the final rotation. I check the current FLAnimatedImage code and finally find the bug. The root case is that -[FLAnimatedImage setAnimatedImage:] does not do the correct thing, to reset the super UIImageView state about image.\nobjective-c\n- (void)setAnimatedImage:(FLAnimatedImage *)animatedImage\n{\n    if (![_animatedImage isEqual:animatedImage]) {\n        if (animatedImage) {\n            // Clear out the image.\n            super.image = nil;   // -> This will not reset `contentsTransform`, not actually \"Clear out the image.\"\n            // Ensure disabled highlighting; it's not supported (see `-setHighlighted:`).\n            super.highlighted = NO;\n           //...\n    }\n}\nSolution\nThe naive solution, it's quite simple, firstlly call super.image = non-nil image and then call super.image = nil. Only one line code and the issue disappear.\n``diff\n--- a/FLAnimatedImage/FLAnimatedImageView.m\n+++ b/FLAnimatedImage/FLAnimatedImageView.m\n@@ -101,6 +101,7 @@\n {\n     if (![_animatedImage isEqual:animatedImage]) {\n         if (animatedImage) {\n+            // ResetcontentsTransformstate\n+            super.image = animatedImage.posterImage;\n             // Clear out the image.\n             super.image = nil;\n             // Ensure disabled highlighting; it's not supported (see-setHighlighted:`).\n``` \nFrom my personal opinion, I think they should always call [super setImage:] during [FLAnimatedImageView setAnimatedImage:]. If you don't call super, you may loss internal consistent behavior during subclass. But anyway, this fix is much simpler.\nCurrent workaround ?\nYes. FLAnimatedImage seems no longer maintained, though I fire the PR, it may take long time to merge in (or may be forever :) ). And it's the why we create our Animated Image solution in SDWebImage 5.0.0-beta.\nFor our FLAnimatedImage+WebCache, the simple way to fix this, it's just use the code above, call super.image = animatedImage.posterImage before super.animatedImage = animatedImage. I will create another PR fix for SDWebImage/GIF subspec.. @ericeddy See #2406. The fix (hack) from ourself to solve the problem :)\nAnd is there anyone who also face this issue ? You can push FLAnimatedImage team (I don't know whether they still maintain that repo or not) to merge the PR. It can solve the bug from the root case, instead of hacking code from our user level.. See 5.x's SDWebImageContextStoreCacheType feauture. You can pass .disk and let it store disk cache only.\nswift\nimageView.sd_setImage(withURL: url, placeholderImage: nil, context: [.storeCacheType: SDImageCacheType.disk])\nIn 4.x, however we have no plan to add this.. For SDWebImagePrefetcher, use the context property with the context option SDWebImageContextStoreCacheType.\nSo, close this issue due the the solution above.. Noop :). We don't need to integrate so much about FLAnimatedImage framework. In 5.x it was totally removed from the main repo. We don't do any hack solution for its behavior. (Like FLAnimatedImage is a subclass of NSObject but not UIImage/NSImage)\nSee Animated Image and why we create our own solution for animated image loading/rendering/decoding instead of FLAnimatedImage.\nAnd, the performance, in most cases, should not enter that disk cache query process. Because we cache the FLAnimatedImage into memory cache. Only the case when the memory cache is unavailable, you need to query disk cache. And also, this behavior can be controlled using SDWebImageQueryDataWhenInMemory, to turn the query into async operation. It's enough.. @zhongwuzw If you don't disable memory cache. The FLAnimatedImage should be stored into memory cache. Only the first time that consume decoding cost by FLAnimatedImage its own implementation.\nAnd you should take care of that predrawingEnabled options. By default is YES, which means FLAnimatedImage will do the same thing, like SDWebImage's decompressedImage to create a bitmap context and draw.\nIf you focus on the performance, just disable this option imageView.sd_predrawingEnabled = NO. We don't want to push a wrong way further. To integrate FLAnimatedImage, we already done many thing which is wrong in API and architecture in 4.x. Current implemenattion, it's actually SDWebImage 4.0-4.2 behavior, with a benefit that we cache the FLAnimatedImage into memory, to avoid further decoding. (You can download SDWebImage 4.0-4.2 to see the behavior)\nWhat's wrong\nThe image decoding, should always belong to the image coder level. But not the View Category level. Though the problem is that FLAnimatedImage is not a UIImage subclass, we can bind associated object, and always query the associated object firstlly for FLAnimatedImageView rendering.\nSo, the correct way to do something like create FLAnimatedImage in global queue, should be creating a seprate custom coder, but not hack in UIView+WebCache.m. It's simple based on the 5.0.0 our architecture change. To avoid this coder affect normal UIImageView, we can use the SDWebImageContext to pass the information from the top-level API to the bottom.\n\nSolution\nI've done a simple implementation, which build a standalone coder for FLAnimatedImage. Which introduce two PRs: \nhttps://github.com/SDWebImage/SDWebImageFLPlugin/pull/2\nhttps://github.com/rs/SDWebImage/pull/2405\nDemo\nBased on the demo project from #2377, I've just update the demo. You can run Instruments to profile to see there are no main queue blocking.\nActually, changes to that original demo are quite simple, update the Podfile and add SDWebImageFLCoder into SDImageCodersManager in AppDelegate.\nruby\n  pod 'SDWebImage', :git => 'https://github.com/dreampiggy/SDWebImage.git', :branch => 'feature_pass_context_to_coder'\n  pod 'SDWebImageFLPlugin', :git => 'https://github.com/dreampiggy/SDWebImageFLPlugin.git', :branch =>\nSD_CrashProject.zip\n. @zhongwuzw My mistake. The 4.1.2 version, see here about FLAnimatedImageView process: FLAnimatedImageView+WebCache\nIf you just want to keep 4.x compatibility, the good solution is not to hack UIView+WebCache, I think you should fork a FLAnimatedImage or create a PR for them, to disable the full iteration for all frames. Only check the first poster frame is enough. This will not cause the performance problem.\n. @zhongwuzw I see. You want to keep a compatible version in 4.x, with also this global queue enhancement.\nSince now our 5.x branch and master branch is totally not mergeable. So add new API does not cause too much problems. I'll add the notify that the changes from 4.4.2 and later, may not considered as API break changes. They should keep as isolation. So this change follow the semver is enough. \nBut I think this similar dispatch group object which support no queue switch is a good way...And, do we need to expose this new SDWebImageGroup class available for public APIs ? What about a private header for this, because we don't want anyone who use this class as a tool and tie their business code to the APIs.\nAlso, is there any better way to solve this problem ? Because I guess the more logic we add for this FLAnimatedImage, the more issue we may face :). Maybe we can merge this, though it's a hack...for 4.x compatble. Because current architecture does not allow us, to get a better implementation to solve the first time FLAnimatedImage initialization performance cost.\nThe implementation in the 5.x already move to SDWebImageFLPlugin, which use a better solution to create a custom coder SDWebImageFLCoder, and solve many of problems like this from the root case.\n@zhongwuzw Could you please rebase or merge the master and solve the conflict ?. @zhongwuzw This SDWebImageGroup class, could mark it as internal ? We do not use this class any more in 5.x. So it's better to hide it without let user touch it at all.\nIf we really want to hack, maybe we can hack it more elegant.... @zhongwuzw For heavy business logic, follow the correct way of customization.\nI know many personal App developers don't have time to build everything about image loading from the scratch, so they just want something out of box. But at the same time, many big company want more and more rare use case for their own. They create feature request which is not compatible for current design, or finally give up and fork SDWebImage or build their own image loadinig framework. This is why we're different from some other image framework like Kingfisher, which only focus on common use case for lightweight.\nSDWebImage 5.x, aim to avoid extra hack of code for many of different use case. So all the PRs from me are aim to reach the goal:\n\nOut-of-box functionality and fully extensibility.\n\nFor out-of-box featire, I look around and get idea from Kingfisher && YYWebImage, LKImageKit and many many other solution, find some common use case which we're lacking\n+ Animated Image Solution: This is a replacement of FLAnimatedImage, the reason can be found there and this PR as well.\n+ Image Transformer: This is because many user want to scale down (Small resolution) some images. And some of them use the wrong way to do transformer in the completion block, which lack of cache support and may contaqins performance cost. It's also get inspired from Kingfisher. \nFor customization, you can use many aspects of this:\n\nCustom Download Operation: If your download operation need some extra logic like Log, Profiler, you should try this.\nCustom Loader: If you don't use NSURLSession for network at all (Our use case), or the image resource is not even the network resource, for exmaple, Photos Kit or third-party cloud service SDK. You should try use this.\nCustom Cache: If you have compliced cache feature request, like Pre-cache, Multiple Cache, LRU-based Cache, you can try custom memory cache or disk cache protocol, even custom cache class itself.\nCustom Coder: If you want to use some new image format and the decoder, or even want some detailed decoding control, you should try use custom loader to provide any image instance from the image data.\n\nFor example, 5.x's SDWebImageFLPlugin use the custom coder, to create a FLAnimatedImage instance during download timing, but not current hack code in the setImageBlock, so that can solve batch of problems such as cache or queue dispatch.. @zhongwuzw Emm...The placeholder check code was updated in the #2441. And the new extra arg in SDSetImageBlock was moved into another PR #2449. You can check that for the result.. FLAnimatedImage is not maintained by Flipboard. So in the 4.x we just fix the important issue, instead of future enhancement for this integration or any new features. SDWebImage in the future, is not designed or recommaned to use with FLAnimatedImage.\nCurrent issue, seems that the render issue, because of the async creation of FLAnimatedImage. Other small issues are not so important and exist at all 4.2~4.4 version. Bug like GCD always retain FLAnimatedImageView. has already been fixed. So no need to discuss.\nTo solve this issue, we have two ways:\n\nMake creation of FLAnimatedImage synchronously: This is what we've done in the SD 4.0~4.2, works well.\nKeep creation of FLAnimatedImage asynchronously, but use some of hack to fix the render issue. This need to replace that simple dispatch_group_wait, because even the runner queue is main queue, GCD will dispatch it and cause the draw call into next runloop.\n\nNote all of changes should not introduce any API break changes. As a patch version release, we should  keep changing not impact current usage.. #2441 is designed to use the minimal changes to fix that the most important issue:\n\nIf I use the FLAnimatedImage on the GIF representation, while sometime the memory cache is cleared, I will see a flash during cell reuse.\n\nThe main issue cause this is that dispatch_group_notify, which will not as I think (My fault) to callback the work block immediatelly, if current runner queue is just main queue. So that PR fix the behavior.\nFor most complicated issue, it's hard to solve them one by one. Current implementation can ensure these behavior.\n\nCell-reusing compatbile (bug in 4.4.2 when memory cache invalid), no flashing\nStore FLAnimatedImage into memory cache (While 4.0-4.2 can not), avoid each time cell-reuse cause decoding\nCore Animation compatible\n\nBut can not fix these behavior due to the architecture.\n\nGIF image url is already been loaded using UIImageView before FLAnimatedImageView hit the same URL, cause fallback normal GIF rendering.\nFLAnimatedImageView call setImage multiple times, it's a BUG of FLAnimatedImage itself, we can not have a better idea to fix it. See https://github.com/Flipboard/FLAnimatedImage/pull/215. LGTM. The image url can be downloaded correctly. So maybe it's no a issue. Can I close this now ?. Don't you try our demo ? As I said, The image url can be downloaded correctly. Maybe it's the issue during you own downloader configuration. You can try some network debugger tools like Charles to identify the issue.\n\n\n. User-Agent it's just a HTTP header.\nFor 4.x, use headersFilter instead.\nFor 5.x, use requestModifier instead.\nWe should not bind complicated business code to a common library. If the user desired to use something, we just provide a abstract protocol or way to let them provide the information.. @zhongwuzw Don't need to add one extra config in SDWebImageDownloadConfig or somewhere. It shuold be one of built-in HTTP headers like Accept-Content-Type. User can use current APIs like setValue:forHTTPHeader: or headersFilter to change or override it. It's not suitable to add any property just for User-Agent this specify headers.. Could you please provide a demo to trigger this issue ? I test with some demo (including the demo in SDWebImage repo), but this does not cause the issue.\nI think maybe you do a secondary cache system in your own business code. So I want to ensure this issue is happend from our library side.. Thanks. @zhongwuzw You can still use the default path as you want. Just keep the old cache folder without any issue. See #2299 \nobjectivec\nSDImageCacheConfig.defaultCacheConfig.namespacePrefix = @\"com.hackemist.SDWebImageCache.\";\nSo I don't think we need to do anything like movement, each time you call init method for SDImageCache. @zhongwuzw This change, should be already in the migration guide. For 4.x user, they should read it before upgrating, because some changes are totally break change, which not designed to be compatible. And some change may also change the semantic of same API naming. For example, the method in SDWebImagePrecher change the concept of prefetch behavior, even the API naming looks the same.. @bpoplauschi I add one chapter about the important behavior changs outside API chanegs in the Migration-Guide-Notable-Behavior-Changes.\nBecause this changes, will been called each time you create SDImageCache instance. However, this does not do anything for 5.x new user.\nIf you still agree that this is big issue and need we do so, this code should not been placed in the SDImageCache itself. Because it's now a wrapper of memory cache / disk cache class. You should place this code into SDDiskCache. And user provided disk  cache implementation may not even expect there are a movement of other things to my own folder. (For example, we try a disk cache implementation based on another hex code other than MD5, this will cause our own disk cache mixed up). @zhongwuzw No. for example we have a custom disk cache implementation, and put new images in that SDImageCache folder. However, we still have SDWebImageCache folder. So, let assume you move the 4.x original folder to our new path, it will override and put something 4.x MD5-based files. \nBut however, our disk cache does not use MD5 hash for key-mapping. It may be a case that a cache key may be hashed to the same value, which should been a cache miss in our hash check, but it accidentilly hit the original files from 4.x folder. Which will cause issue.\n4.x && 5.x's SDDiskCache behavior on naming hashing is the same now. So it's safe to directly move the 4.x folder to 5.x folder for user who use SDDiskCache. But however, for other people does not use the built-in SDDiskCache class, this will cause a mass up of files.. @zhongwuzw If you still need to do a disk cache migration. My consideration is that this code should not been placed into SDImageCache. Since you say If any user changed disk behavior from 4.x to 5.x, I think it's him own responsibility to handle these things.\nFor SDWebImage, by default it always use SDDiskCache, so if the user does not custom any disk cache implementation. This code should be placed into SDDiskCache and it works, right ?\nPut any disk reading & writing code in SDImageCache level is not designed as a good point. The disk operation should happend on the disk cache level.. @zhongwuzw Create a new protocol, just for a compatible method, is overcome. Actually people we use custom disk cache, may not use the default cache prefix because this will cause issue. (Like we use a separate prefix).\nSo, maybe we can reach a consensus , some adddtional changes should be provided:\n+ Aggree that this older path movement feature is adoptable\n+ Use dispatch_once to avoid when multiple cache initialize at the same time cause the duplicate movement.\n+ Move the total code into SDDiskCache.m implementation files. And do some check, like when currentCachePath == \"SDWebImageCache.default\", earily return.\n+ Polish the migration guide and let user who need migration notice this changes. User can decide whether continue to use 4.x cache path or new 5.x cache path.. @codecov-io ...The diff coverage is 83.33%. So why does this cause a test coverage drop.  The changed code is nearly all covered...\ud83d\ude15. Look great. I've read some part of https://opensource.guide/ in last year. But maybe I can check again now.. Merge now ? Or need anythinig important to be append ?. @fschaus Hi. The SDWebImage 5.x, change that global control level shouldDecompress, to the SDWebImageOptions level, which allow you to control each image request instead of a global one (Because some small images, it's no need to trun off that force decode feature, which cause a frame rate drop). See the related PR for this #2283 #1927 \nYou can also find it on the migration guide here : 5.0-Migration-guide. The correspond options, was moved from cache/loader-level , to each image request level.\nYou should now use like this to disable the force decode feature:\nswift\nimageView.sd_setImage(with: url, placeholderImage: nil, options: [.avoidDecodeImage])\nAnd also, could I ask the issue why cause your application out of memory ? Did you setup a maxmium cache size SDImageCacheConfig.maxMemoryCost or maxMemoryCount  to avoid cache too much of image in memory ? Did you try to load animation GIF on normal UIImageView ? (You can disable animation suppoert, by using firstFrameOnly options for each image request, or totally remove SDImageGIFCoder from coders list) . In 4.x, there is a delegate method, for you to do a transformation after image was downloaded, the method is called in the global queue. See imageManager:transformDownloadedImage:withURL:\n```objective-c\nSDWebImageManager *manager = SDWebImageManager.sharedManager;\nmanager.delegate = self;\n\n(nullable UIImage )imageManager:(nonnull SDWebImageManager )imageManager transformDownloadedImage:(nullable UIImage )image withURL:(nullable NSURL )imageURL {\n    CGSize size = CGSizeMake(100, 100);\n    return [image sd_resizedImageWithSize:size]; // Implement your own, such as writing a category on UIImage\n}\n```\n\nIn 5.x, you can simply use SDWebImageResizeTransformer instead, one line code is enough. See Wiki - Image Transformer \nobjective-c\nSDWebImageManager *manager = SDWebImageManager.sharedManager;\nCGSize size = CGSizeMake(100, 100);\nmanager.transformer = [SDImageResizingTransformer transformerWithSize:size scaleMode:0];. By default, SDWebImage's HTTP request, will use a NSURLSessionDataTask to download anything from the URL. It supports any HTTP URL like https://foo/bar/1, if the HTTP response is correct and return a valid HTTP Content-Type. (HTTP response which does not contains Content-Length is adoptable, but this will disable the progressive download feature, so it's better to provide this header in HTTP response)\nI think, you should better try to use a HTTP debugger tool, like Charles to identify the real HTTP requset & response. And if you can provide a more detailed information, like using SDWebImage version, iOS firmware version, demo, is better for us to idenfity and provide the suggestion.. This seems adoptable...We can list some topics here and ask Olivier to add one because this need the repo owner to add :). I remember the topic has a limitation of total count. Can we list the most important top 5 (or more) in all of above ?\nMy personal choice are image,  cache, ios, sdwebimage (This one is interesting...). @zhongwuzw I remember, when I firstlly write that code in late 2017, I test it with a iPhone 5S running iOS 11. Although the CGImageDestinationCopyTypeIdentifiers return the public.heic, the iPhone 5S does not support HEIC encoding. So I replace it with a more accurate check (Because if you can successfuly create CGImageDestination instance, you can encoding it anyway). This cost actually contains no difference on performance, So I think we don't need to change.\nFor CGImageSoucce, because the case that HEIC decoding contains hardware && software codec. All iOS 11 && tvOS 11 && macOS 10.13 device, can decode HEIC, only some of them can use hardware codec. However, Apple does not allow HEIC software encoding on iOS && tvOS. So maybe this is the differece why we can use CGImageSourceCopyTypeIdentifiers but maybe not CGImageDestinationCopyTypeIdentifiers (Though I think this is still a check relay on Apple's implementation)\nSee The comment about HEIC decoding/encoding compatiblity here. Well, the simulator one can be updated now because it's just a bug... \ud83d\ude05 . @zhongwuzw About the CreateWriter_HEIF, maybe you are not familiar with HEIF standard. HEIF just like TIFF, it allows you to extend their coding format (codec). The heic, actually means the current HEIF image, is encoded with HEVC (H265) codec, which is the modern compression standard of HD video. Which means, HEIF can use some other codec, even like AVC (H264) or JPEG.\nApple also distinguish these two on CGImageDestination, which means, when you specify AVFileTypeHEIF, you may get a result of heif image which use JPEG codec, for best compatiblity. So I think we should just follow the same thing to avoid the undefined behavior.. @zhongwuzw Currently Apple does not register public.heif into Image/IO's IIOWritter. They use public.heic only. (However, the Image/IO IIOReader supports both public.heif && public.heic, really frustrating). So the current system, this CGImageDestination will always fail)\nBut however, as I say, we relay too much of current behavior with hard-code. The better check should as the Apple's demo code, even current iOS 11 does not allow you to speicfy AVFileTypeHEIF on CGImageDestination, you can not assume that iOS 12 or future Apple introduce this support.\n. @zhongwuzw Since you're Chinese, you can check this Zhihu site about basic HEIF image format. :). SDWebImageDownloadToken.downloadOperation is a weak reference, you should be carefully to register weak reference on the NSNotification or KVO, which may contains issue because they are not always behave as you assume.\nAnd, from my personal side, does this cause any performance impact on your use case ? In the production profile ? At most of time, we only optimize the thing which contains a higher frequency and low performance.. @zhongwuzw @bpoplauschi  I don't means anything offensive. \ud83d\ude05 I just comment about the PR's changes...(I'm not a serious people as you think :))\nThis code, actually works well till now, and I know it's maybe not so performent as you think. The reason for this, it's Simple and Stable.\nThe token is designed to bind a weak reference of download operation, because the user may store your token into array or somewhere, so it should not hold a strong reference and keep operation alive and not dealloc. Current implementation we register the notification in the init method, which will receive any notification but we filter them in the callback method. Maybe change it using the object arg is better, but register it on the setDownloadOperation: method need addtional consideration. (Unregister previous ivar and register current ivar)\nI agree that there are maybe some code not faster. However, they're easy to maintain and not the bottleneck of framework performance. Changing it into new faster code need extra test to ensure stability and may cause potential issue (I run into this trap many times from my personal code learning to working job). I think we can put it into low priority and focus on something more important. \nThese are just my personal idea. If you can ensure that this change really contributes to the performance and contains no issue, maybe we can take a discussion later.. Finally it's OK...Maybe we can merge now :). By default, SDWebImage use raw NSURLSession and NSURLSessionDataTask for image data download. Some of the network related behavior can be controled by NSURLSessionConfiguration.\nFrom iOS 11, you can try to use waitsforconnectivity, to wait for connection ability when the network disconnect temporarily.\nTo change the default configuration, in 4.x you can use createNewSessionWithConfiguration:. In 5.x you should configue the correct sessionConfiguration in SDWebImageDownloaderConfig.\nAddition, some of options combination from your describe will not work. For example, if you provide .fromCacheOnly, which means we forbid the network request, so you don't need to pass .retryFailed, . continueInBackground.. Please provide the information in the default template, or we could not help with it. See ISSUE_TEMPLATE\nAt least, you must speicfy SD version, Platform, OS version and the step to reproduce this issue.\n. @zhongwuzw I create this fix #2432 and fix other related thing like documents and test. Since the issue was introduced by my PR of #2430, I think I'd better fix it. \ud83d\ude05. @bpoplauschi \ud83d\ude05Seems that libwebp pod trunk owner is not you. Need you try to connect the owner and delete that v1.0.0 version and fix it ?. @bpoplauschi What about pod trunk delete libwebp 1.0.0 ? What's the output ?. \ud83d\ude05 This PR is rebase by me... Because I push changes about that discussion many times but finally decide to revert it.\nI think, if you have some non-related changes, or sometimes you add some lines and then remove them, you can rebase the local history by yourself, then update the remote branch, to make it more readable in git log\nFor most of case, merge is better, but if some contributor commit too many of noise, we can squash and merge it.. This one is more robust. At the first I just consider this case as Renaming from  srcPath to dstPath. Like you rename a folder name in the Finder. So I assume the srcPath and dstPath both two directories are under the same parent directory. But actually they may not.. Maybe I get the reason. It seems that Travis-CI use some low hard-ware machine, which does not supports HEIC encoding. However, on my local MacBook it works :)\nI can temporarily disable encoding check on macOS.. Emmm...Yes we can. This test13ThatHEICWorks actually contribute to code coverage, the increasement are 3 methods: sd_UTTypeFromImageFormat && canDecodeFromHEICFormat && canEncodeToHEICFormat. The other are also covered by JPEG or PNG because we use Image/IO for encoding/decoding, and it's transparent for us (unless Apple's framework contains bug...)\nBut I think it's also a check, to avoid us use some strange API that cause HEIC decoding/encoding faild for some user.. Since this is a test PR, it can increase the code coverage to 5%. I'll merge it because it does not introduce anything on the framework side.\nOne little issue is that I temporarily disable the HEIF encoding compatibility check on Travis-CI for macOS, because of its own issue. However, if future OSX image is available, we can also upgrade and re-enable it.. This test code coverage PR, can increase the 5% of coverage. Since this does not cause any potential issue, I'll merge it... :) . @bpoplauschi @zhongwuzw  I think that this method's implementation, is not correct (Actually I can call it buggy...). It use thsee code to create animationImages.\n```objective-c\n// We know what index objects should be at when they are returned so\n// we will put the object at the index, filling any empty indexes\n// with the image that was returned too \"early\". These images will\n// be overwritten. (does not require additional sorting datastructure)\nwhile ([currentImages count] < idx) {\n    [currentImages addObject:image];\n}\ncurrentImages[idx] = image;\n```\nSo, let assume, that there are 3 urls to be downloaded from network, let see if the download response order is url3 -> url2 -> url1, what will happen\ntime | images | new url\n---- | ---- | ----\n0 | [] | url3\n1 | [url3, url3, url3] | url2\n2 | [url3, url2, url3] | url1\n3 | [url1, url2, url3] | -\nSo, since there are setNeedsLayout and startAnimating call after the images was set, the 2 time that [url3, url2, url3] will animate a wrong sequence...Which is always considered buggy.\nI think we'd better deprecate and remove this API totally. People who need to animate a sequence of URLs, should try to use another way (simple line of code), only after each images was downloaded, it's time to setup your animationImages property and start animation.. This method was already removed from 3.x -> 4.x, See the migration guide for more detailed information here : https://github.com/rs/SDWebImage/blob/master/Docs/SDWebImage-4.0-Migration-guide.md. @zhongwuzw \n\nThat string define, it's marked as internal usage and may be changed in the future, and the PR for this, it's a bugfix for the 4.2.2 changes. So I think it's no need to create another same string define, to just for the compatible code. Use that it's OK\nRemove unnecessary dispatch_group_enter/leave pair, only apply to GIF data.. This is wrong. Because we always call dispatch_group_enter before setImage, for example, the placeholderImage. If the user provide a placeholderImage with GIF (Bind it one FLAnimatedImage), this change will cause a un-balanced of group enter && leave. So we must always call dispatch_group_leave in the setImageBlock.. @intoxicated The dispatch_group_enter is called from the UIView+WebCache, the callee method of sd_internalSetImageWithURL:, this is used to ensure the previous behavior (I don't know whether it's documented or not, but it's a behavior from 4.0). Which means the completionBlock is always called after the image was set. (We now do async operation in the setImageBlock, so need this trick way).\n\nFrom the stack trace, seems that the Dispatch Group create faild. Is this really possible repruducable or have a high reproduce ratio (larger than 0.1% ?). If so, many we need a fix to assume the Dispatch Group is nullable.\nHowever, from Swift API, the DispatchGroup init method is always nonnull. And Apple's implemenattion only callback with the same API here: libdispatch.  Little suck.... @yjh1313 It seems that our test based GIF url: https://www.interntheory.com/img/loading-small.gif\nThis server is down. Maybe we'd better update the test to use another one instead.\nAnother tip: If you want to re-start Travis-CI test, you don't need to Close && Reopen PR. You can directlly go to that Travis-CI test page, click Restart build.\nIf you can not click that button, you can also try to git push --force to your branch with a empty git commit change. (Or use git commit --amend)\n\n. Emmm...Actually the demo url, provided by you, will not get out of limit the max length of file name (Defined as NAME_MAX in syslimit.h). Because the extension name for the url is .jpg, but not something like .jpg%22%2C%22title%22%3A%22%E6%A4%8D%E7%89%A9%E8%94%B7%E8%96%87%E7%8E%AB%E7%91%B0%E8%8A%B1%22%2C%22promot_name%22%3A%22%22%2C%22itemid%22%3A%22546038044448%22%7D&e=cb88dab197bfaa19804f6ec796ca906dab536b88fe6d4475795c7ee661a7ede1&size=640x246\nThis is break-usage changes for current SDWebImage version, because you change the algorithm for generating the disk cache file name, effect all previous version's cache query. It should be considered carefully.\nIn my opinion, the extension name, should not contains all the extra params from URL, for this URL, it should be treated as .jpg . So current file name behavior is correct, and since the extension name will never be larger than 255. So it's OK.. @zhongwuzw The reality, is that we use NSURL.pathExtension to determine the path of url. So it should not contains anything such as that %22%2C%22title%22%3A%22%E6%A4%8D%E7%89%A9%E8%94%B7%E8%96%87%E7%8E%AB%E7%91%B0%E8%8A%B1%22%2C%22promot_name%22%3A%22%22%2C%22itemid%22%3A%22546038044448%22%7D&e=cb88dab197bfaa19804f6ec796ca906dab536b88fe6d4475795c7ee661a7ede1&size=640x246. The extension should only be jpg.\nYou can run a demo to trigger a test. So this is why I wait for @yjh1313 's response about it.\n. That jpgasaaaaaaaaaaaaaaaaaaaajjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjaaaaaaaaaaaaaaaaajjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj is not a valid image file extension...And actually, this assumed use case exist on the theory, but not on the real world business. So I think it's on low priority to do with it.\nIf you still want to fix, current his implementation need to be polished. What we do it's not to hard-code something like 256. We can use the UNIX standard NAME_MAX define macro (in <sys/syslimits.h>) for file name limit. And we don't need to re-calc the MD5. If the extension larger than limit, use total string (but not extension only) for hashing. This keep the capable hash algorithm for other strings.. This is a well-documented behavior. So the user should read the doc and it's no need to change. You should use placeholder image for this use case.\nIf you don't want to auto-set image totally, you should better use SDWebImageAvoidAutoSetImage instead. Then set image by your own in the completion block.. Hi. When fire a issue, you should firstlly fill the template table at the top. You must at least provide the SDWebImage version && Platform && OS Version, and it's better to provide a demo that can reproduce this issue.\nFrom the description, did you setup a maxCacheSize or maxCacheAge ? This is the control for disk cache only (The other two like maxMemoryCost && maxMemoryCount is about memory cache). When you setup these options, it will effect the cache age for expiration for disk image. We check the cache expiation each time when your application enter the background mode.. The refreshCached option, will force we always start to download the image even if we cache it on SDImageCache. We'll use NSURLRequestUseProtocolCachePolicy on the URLSession, and we check the NSCachedURLResponse from the current request, if the cached response represented image, it's equal to the image in the SDImageCache, we ignore the download and callback your completion.\nIt works for some of versions and does not change the code. To investigate this issue, you should try to  use some network debugger tools, like Charles, to get the HTTP response for your image request.\nIf you're sure that the server response you with a new image, but we still use the old one for completion block, we can start to find it out the reason.. @SamboVisal Hi. Thanks for the detailed report. So that I can start to investigate this issue, and the fix may be available in soon (Maybe another 5.0.0-beta3 ?)\nAfter reading you report, I have some other detailed information to know, so could you please also reply me about it, to make it easier for us to find out the reason.\n\nAre the test about Animated ImageView represent SDAnimatedImageView ? Or the FLAnimatedImageView ?\nAre the following test running on iPhone read device, instead of iPhone Simulator ? (iPhone Simulator has some issue for the UIApplicationDidReceiveMemoryWarningNotification, because of the simulator is running on host Mac env)\nCould you please also test the 5.x branch instead of 5.0.0-beta2 release ? (Use pod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git', :branch => '5.x'), and there are one options in SDImageCacheConfig.shouldUseWeakMemoryCache, could you also try to turn it off ? This options is available in SD 4.x, but it's broken on 5.0.0-beta2 release, we fix it on the latest 5.x branch). @fschaus Hi...Today I try to upgrade one Social App in our company, to use latest 5.x branch of SDWebImage. This app also have a feed list, but there are only 10 images per screen.\n\nI test it with Profile (Release Mode) && Debug (Debug Mode) on iPhone X running iOS 11.4, the memory usage is nearly the same, and after entering the background, the memeory usage was also dropped.\nSo, did you try the latest 5.x branch ? Or could you please tell us if there are some extra config for you to use, like anything in the SDImageCacheConfig ?. @fschaus Hi.\nDid you means that the SDWebImage 5.x branch fix the issue ? Or only if you setup some extra config, like SDImageCacheConfig.shouldUseWeakMemoryCache or some other, cause this issue go away ?\nAnother tip: About SDAnimatedImageView, the rendering memory usage will not follow the SDImageCache.maxMemoryCost. Because for image stored in memory cache we check the cache size, by using image.size.height * image.size.width * image.scale * image.scale.\nHowever, that SDAnimatedImageView itself, use a buffer cache of image frames, to keep a balance of CPU(because of decoding when rendering) and memory (because of buffer cache). And by default, it was calculated by considering the current free memory and total memory, so it's normally OK and to consume memory with a safe limit. But you can also setup your own value for each image view.\nSee Animated Image Rendering-maxBufferSize.. So now we can close this issue. Any extra consideration about this ?. @bpoplauschi @zhongwuzw Any consideration about this PR ?\nIt seems not useful and perceivable for most of user. But it will solve some specify issue for the animation class. For exmaple, that SDWebImageFLPlugin may use this custom animation class. However, it may need extra decodingOptions rather than just the scale && imageData. GIF image does not support EXIF tag, it can not contain any EXIF rotation. So what's the problem cause by that commit ?\nSee the standard: https://www.w3.org/Graphics/GIF/spec-gif89a.txt. From 5.0, we end-up many wrong behavior of scale factor.\nNormally, the scale factor is from the url, use that SDImageScaleFactorForKey to determine which scale factor should be used for url cache key.\nIf you need to specify a desired scale, instead of the build-in way, you should pass SDWebImageContextImageScaleFactor (SDWebImageContext.imageScaleFactor for Swift). Then all the image decoding will use that scale factor instead. No any UIScreen.mainScreen.scale was treated, because the scale factor, is part of image property, not part of the device screen.. @daydayfree Are you using the UIBarButtonItem for navigation bar or tab bar ? The frame for your custom view, it's not controlled by yourself. It's controlled by the navigation bar or the tab bar. Your custom view will receive frame change from UIKit internal method.\nActually, many built-in button class contains image from UIKit (Such as UIBarButtonItem, UIButton), will always try to resize your imageView (Note image && imageView is different thing). So if you set a UIImage which size is different from imageView, your imageView will be changed to that size from UIKit internal method. If you want a custom size for imageView, you must set a AutoLayout manually to limit the size, or you have to scale or clip the original image instance to match the size (Not recommend)\nSo, to specify some limit of custom view size in UIBarButtonItem, you should add your AutoLayout constrains. See https://stackoverflow.com/questions/44442573/navigation-bar-rightbaritem-image-button-bug-ios-11. Please fill the issue template instead of removing it. Or we have no concept of this issue.\nAnd you'd better provide a demo url to reproduce this issue.\nI'll close it now, feel free to reopen it with more information.. Please use the English to fire the issue. Because our collaborator are comes from many countries.\nAnd please fill the issue template, instead of totally removing it. Or there is not enough concept to investigate this issue.\nI'll closing this issue. Feel free to reopen it.. Duplicated for #2347 . And it's already been fixed in 4.4.1 version. @bpoplauschi Any idea about this removement ? I can also update this to the migration guide, if this rare use case is used by someone.. Emmm. Why not set it to NSUIntegerMax to disable cache expiration ? This is the old behavior from long time ago. \ud83d\ude05 . @zhongwuzw My fault. Use DBL_MAX. The NSTimeInterval is double.\nNSDate can present any time, but not the UNIX timestamp start time.\nBuy anyway, if this don't change the behavior of current negative value, maybe this is also adoptable.. You can use NSDate.distantFuture.timeIntervalSinceNow to represent the infinity cache expiration time now. And that blog is not relevant to this issue at all. It's bug in iOS firmware, not the Foundation framework of NSDate class. NSDate always use a double to compare to allows older date than 1970-1-1 , like Swift open source version: Date.swift\nI just wonder since we support some diskCacheExpireType, limit the number to not be negative, will this make the API less extensible or not ? But after some consideration, I think that for a cache system expieration, the time are always compared to the current time. Since you can not normally set a creation date/modifitication date/access date in the future time later than now. Maybe specify this value to be possitive or zero is adoptable.. Got it.\nThe current behavior, if you specify a negative value, the disk cache will be expired immediately, which behave the same as the zero value. Since this old behavior is also possible (if you set it to zero) and it's rare that people set this value to negative, I think this one is adoptable.\nI'll merge it, please see the comment.. @zhongwuzw This seems a bug from #2357 . Also happend on the master branch. Maybe we need a PR to fix it as well.\nSee : https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDImageCache.m#L713. @edenman That solution to use dispatch is good. Because that completionBlock property is overrided by your recursive function call.\nAnd I'd like to sugesst you not to use the SDWebImagePrefetcher like that in 4.x. Because of it's not designed to be reusing. You can treat it as a really lightweight helper object and create new instance instead.\nThe design about SDWebImagePrefetcher between 4.x and 5.x is really different. Although the API looks same, but the difference is in the concept level but not what API looks like. See https://github.com/rs/SDWebImage/wiki/5.0-Migration-guide#prefetcher\nIn 4.x, each SDWebImagePrefetcher instance, is't just a one-time usage instance. Which means you'd better create a new instance each time you want to do a new batch prefetch. It's not recommend to use the shared instance.\nEach time you call prefetchURLs:progress:completed:, we will always cancel previous prefetching state, including all pending network, all completionBlock, everything.\n\nIn 5.x, SDWebImagePrefetcher behave more than a shared instance. Which means only if you need different options, context or delegate for prefetching, you need to create a new prefetcher instance. Normally it's recommend to use the shared instance. The design is more like NSURLSession. sharedSession. \nEach time you call prefetchURLs:progress:completed:, we will not cancel anything, and return a token, which represent your input URL list request. Only if you cancel that token, we cancel all the URL request and completionBlock associated to the token.. If you just want to build all the CocoaPods dependency in your Podfile into static library, instead of integrate them with source code. You just need little lines of ruby code and write a CocoaPods plugin. Because Podfile is actually a ruby script and you can inject the CocoaPods method...It's easy and can be found everywhere, such as this repo: https://github.com/leavez/cocoapods-static-swift-framework. No need to change all pods's podspec declaration.\nruby\nmodule Pod\n  class PodTarget\n    def static_framework?\n      return true\n    end\n  end\nend\nThis static_library is most useful for pure Swift library to support static library for Swift. For Objective-C project it seems not so meaningful because you can control whether to use source / static  / dynamic as you want. \ud83d\ude05 . Thanks for this point. It seems that when we have the image frame already in cache, we don't need to query it in the global queue. It's a unused waste. The implementation refers to both YYAnimatedImageView && FLAnimatedImageView, and maybe I lose this performance consideration during I introducing the progressive animation support.\nThis solution is simple and straightforward, but however, maybe I can check the code again, to provide a better solution and do a little code cleanup.\nBecause, that LOCK will become a cost during this high rate display link callback, so I should check and decide whether to put this UIImage *fetchFrame = [animatedImage animatedImageFrameAtIndex:fetchFrameIndex]; code, into the CADisplayLink (main queue), or just put it into the fetch queue block operation. To finally get better performance and keep thread-safe.\n. Seems OK. I'll merge it.. So we also remove the demo usage of static/animated WebP images ? Could we keep the demo Podfile with SDWebImageWebPCoder and continue to show loading WebP images?\nI guess that WebP images, use more widely than any other coder plugins format like APNG/BPG/HEIF. So maybe we can make the demo to show the WebP coder as well.. @bpoplauschi Is that hard to run the demo with SDWebImageWebPCoder ? If so, we can just remove all WebP images in the demo. Just reference the link to that WebP project and provide a demo as well.\nRemoving the WebP in the demo is OK. Maybe because I sometimes use our project demo to profile the UIImageView && SDAnimatedImageView rendering performance. Since WebP supports SDAnimatedImageCoder protocol, it should be checked as well (Now I need to run two demos at the same time). Anyway, put into different repos is OK.. The is because of libwebp source code hosted by Google. They use the relative path to include their headers. So you must specify you User Header Search Path correctly, and let CocoaPods generate the clang module. In 4.x it seems hard to do so.\nHowever, in 5.x, we write the custom module map, so this options does not take effect. And we will move the libwebp into a standalone repo, to create a Xcode project and let it works for all CocoaPods && Carthage user. So this issue will be fixed.. Please fill the issue template instead of removing it...We need to know the basic information to identify the issue. Including SDWebImage version, platform OS version.\nAnd, did you set any configuration in SDImageCacheConfig like maxCacheAge ? Did you load the image with FLAnimatedImageView in 4.x ? It's also recommend to provide a code snippet of your usage or a demo project to reproduce this issue.. Emmm...From the documents, the only public options for CGImageSource level, is kCGImageSourceTypeIdentifierHint, it's used to provide information about the image format. That kCGImageSourceShouldCache is only available in CGImageSourceCreateImageAtIndex && CGImageSourceCopyPropertiesAtIndex API. So it's OK to remove it.\nI've also check that it indeed behavior. The only available options in CGImageSource level, including the follwings...\n\nkCGImageSourceTypeIdentifierHint (Public)\nkCGImageSourceShouldMemoryMap (Private)\nkCGImageSourceRespectHEIFFileOrder (Private)\nkCGImageSourceColorTransformAdobeRGBTosRGB (Private). @bpoplauschi @zhongwuzw  Need some time to consider this issue. This not something only about thread-safe. It's also about the animation rendering race condition.\n\nWhy to use lock instead of GCD to dispatch, it's because lock can actually block main queue immediatelly until the fetch queue write the frame into the cache.\nConsider this case : Current rendering frame is 0, and when next frame duration is reached, we need to render the 1 frame as fast as possible. Assume the thread-safe condition is reached (Query cache in main queue but fetchQueue was writing the 1 frame).\nWhen using block, we will block main queue and let 1 frame sucessfully write to cache, then main queue will be resumed, and get the 1 frame and render it.\nHowever, if we use GCD to dispatch fetchQueue into main queue, the 1 frame will not be in the cache until next runloop. So this will be treated as a cache miss. So the we will not render the 1 frame in this screen refresh (Cause a frame drop). Even worse, this simple change of code will cause a issue that we re-fetch the 1 frame (Because at this time, the fetchFrame is also nil and start fetch 1 frame again)\nSo this need detailed consideration. I'll check it back later.\nPS: Actually this rendering code algorithm is from YYImage, and I also try to ask the author about the usage of lock. It seems consider the same thing. And they have one incremental memory release feature to release the frame cache in the background queue, to reduce lag (See code here). So I guess that may related to this question.. @zhongwuzw \n\nEmm, have no idea where it would block to wait to cache?\n\nBecause whether we decide to query the fetchFrame, is dependent on whether current frame is available just in time. So if we simply remove the LOCK and use GCD to write the frame cache, this check will fail, because by the time the write to the frame cache is finished, the main queue code of check is already been executed.\n\nI think no re-fetch would be appear? fetchQueue only support one operation to run. \n\nThe fetch queue is just a operation queue. Why the code add operationCount == 0 because it base on the assumation that we can write to the cache in time, so one frame render, one check, one query is enough. Using GCD will break this design. But actually, we can create another solution. Such as allow multiple query frame at the same time, but in the operation block add index guard to avoid different operation share the same index. So this means one frame redner, multiple checks and multiple queries. (But this need more code to develop, when I write the code, I choose the simplest one...)\n\nChange dispatch_async(dispatch_get_main_queue() to dispatch_sync(dispatch_get_main_queue(), I think it maybe the same as the original code.\n\nActually this does not. Because dispatch_sync still need to submit your block code into the last of main queue and wait for main queue to execute all previous code until this block been done. Sync just ensure it blocks the operaion queue so that the operation is not been marked finished. However, when using block, it will interrupt the running main queue (what GCD can not) The following code in the lock will immediatelly (nearlly, actually) be executed, don't need to wait for main queue waiting code to be executed. So there are some little difference.\nAnd actually for simple mutable collection access, I suggest to use lock instead of GCD. (GCD is suitable for task runner but not atomic access). Some previous PRs like #2204 show the reason. Because when no thread-safe race condition is apperaed (most of times), the following pair dispatch_semaphore_wait dispatch_semaphore_signal call does not cause performance lost. It just increase/decrease the semaphore count. Only when thread-safe race condition is apperared can block the calling queue. However, GCD will make a queue switch each time you access. And GCD's thread pool is limited to 64 on iOS. No need this extra cost.. Maybe some comments I post is not correct. The lock contains cost, but this simple remove all lock code will cause issue. And I guess the performance ater this PR will not contains visible enhancement. \nI still agree that for simple mutable collection access, I suggest to use lock instead of GCD. (GCD is suitable for task runner but not atomic access). This is the experience I learned in the pass year. You can run this demo project to see why not to use GCD as a lock replacement. \nThreadSafeTest.zip. And for these two approaches. Today I try to run profile about these two approach. For most of cases, they behave some on performance. The lock there does not cause issue.\nHowever, during the test, use the patch version SDAnimatedImageViewNoLock (based on your cid: aeca363ef169c5a5a5cb1bc0ab86bcf01184b12b), have a race ratio that can query the same frame index twice when the decoding speed is low. However, using the original SDAnimatedImageView with lock does not contains this issue.\n\nThe demo I use, which contains the different tests between SDAnimatedImageView && SDAnimatedImageViewNoLock (With this PR's patch) && YYAnimatedImageView). You can try to run it as well. (run pod install after download, and you can also modify the SDImageGIFCoder code to check that assert)\nSDWebImageTest.zip\nRemove lock is OK. But I think, we should ensure this not cause some more issue.\nPS: Actually I don't want to spend more time on it. If you can ensure this is OK, we can merge it now actually. Me && @bpoplauschi are hurried for 5.0.0 official release. I'm spending time to update documentation and tests, and check if there are anything important API break thing to do. Since this is a performance enhancement PR so we can also fix it in the furture 5.x version (No API break). So maybe I'll put it into a low priority.. @zhongwuzw  Does that the autorelease object during thsee GCD block actually increate the memory heap ? Maybe we need some profile result to check this issue. Currentlly there is no any profile result to indicate that adding autoreleasing pool can solve that memory peek and OOM issue. So could you please try this and compare the result to show this issue ?\nAnd I think, the mosts autoreleasing object, was created during the image decoding. So if we can ensure this solve the problem, we just need to add these autoreleasing pool into the decoding method call. (That autoreleasing pool inside storeImage: method is not necessary). @zhongwuzw Autorelease pool is not a really cheap cost. It need to allocate the object to consturct a stack, need TLS creation, etc. So if the block logic does not create too much of autoreleasing object, it's no need to create a local one. Just use the runloop autoreleasing pool and let all objects been released is better.\nI don't means this issue is not solved, I think since this is a performance enhancement, maybe we should take more experience on it. Use a profile result and compare the different result is much better. Which is suitable for framework developement, but not just write code like we assume. (This may because I fell in many traps like this when I was graduate from the college. So I graduatlly relay on the profile result to do performance fix) . @zhongwuzw  we create one queue to one operation is the decision made from 4.2 via #2199 . The aim of that PR is to solve the issue that we decoding each of different images into the same delegate queue, and cause the \"final callback response\" take more times than expected, espcially download multiple WebP images in parallels. It's the root case.\nThat change is actually a double-edged sword. It allows the multiple decodig process happed, for better performance. However, the cost is that this may result a higher rate of memory peak. There is also another issue caused by that PR that we mentioned in #2415 . But it seems hard to answer a final result.\nIf we can not find a final answer for this question. Maybe it's time to add one option in the downloader config. To allow user to decide which one should be used. \ud83d\ude2a . This PR is OK. Maybe we can merge it.\nBut I'm considerating something like to revert that #2199. It's the root case of all \"evil\". Including this and something we talk in #2415.\nBecause for progressive decoding, we do decoding each time new data is available, and for huge images, the decoding speed is much slower than URLSession callback speed. Even when the network download already finished, the decoding queue is full of previous progressive task and cause the final completion logic not been executed until all previous progressive decoding done.\nThere are many solution. For example, seperate the progerssive decoding queue && final full pixel image decoding queue. For progressive, use the URL session queue. For full pixel, use the non-shared queue. Or we can give user a option, to control whether put the decoding queue seperate from URLSession queue. I'll open a issue and try some attempt.. So we now use a seperate schema to build with MapKit ? Like what ReactiveCocoa do with ReactiveMapKit.xcscheme.\nFor CocoaPods user, they still use SDWebImage/MapKit this one but not use another podspec like ReactiveMapKit.podspec) ? I think this is OK because we can take advantage of CocoaPods's subspec feature.\nA little idea, what about change the scheme name from SDMapKitWebImage to SDWebImageMapKit, we are more familiar with suffix naming. And it's the same like the cocoapods's SDWebImage/MapKit spelling... \ud83d\ude04 . Oh. sorry. Maybe I misunderstand the SDMapKitWebImage usage. Does this framework contains both SDWebImage/Core code and SDWebImage/MapKit cod, it's a new framework actually ? User should use either SDWebImage.framework or SDMapKitWebImage.framework but not the both two ?\nI think we'd better do something like ReactiveCocoa. That SDMapKitWebImage.framework add dependency of SDWebImage.framework. People who use MapKit should include both of two. If we don't add depdency, carthage user, for example, who add cartfile with a framework who dependentSDWebImage, will fail to build when your application use a SDMapKitWebImage.framework. \nMaybe it's just behave same like another SDWebImagePhotosPlugin, since the MapKit code only contains one files with a little code(maybe no changes in long future). Only add the MKMapView+WebCache files into the new SDWebImageMapKit scheme and add dependency is better.\nAnother solution (I don't know suitable or not), just move the MapKit code into another repo like plugin. Called SDWebImageMapKitPlugin. The SDWebImage/Core && SDWebImage/MapKit can also be removed. Keep the core framework clean. This can also make it easy for carthage user. (For cocoapods user they need to change podfile). I think maybe we consider too much. We can simplify the problems.\nThe previous behavior before 4.2.0, we do progressive decoding synchronously in URLSession:dataTask:didReceiveData: method. So the progressBlock callback speed is slower than the normal decoding even for the same image URL. But they share the same completionBlock callback time duration.\nIn 4.2.0 we change it, and now the progressBlock callback speed is the same as normal decoding even for the same image url. But the progressive decoding completionBlock callback time duration is larger than the normal decoding (When the image resolution is large).\nPeople who use 4.2.0 and above does not complain about why when using SDWebImageProgressDownloader the progressBlock callback speed is lower than normal. So we can just fix it with #2478.\nIf you two and more our user, agree that for progressive decoding && normal decoding for the same url, the progressBlock callback times should be equal. Then we just need to fix this behavior.\nTo fix it, I think we don't need to hold a global shared operation queue or something. We just need to use NSOperationQueue instead of the dispatch queue. Then ensure you can only do progressive decoding if current operationCount is 1. No any header files should be modified.. See the 3 different solutions' behavior:\nSolutioin(PR) | progress callback ratio for same url | total completion callback duration for same url | progressBlock times equals to image refreshing times | multiple urls effect total callback duration\n--- | --- | --- | --- | ---\nprevious (4.2.0) | progressive < normal | progressive == normal | YES | YES\ncurrent | progressive == normal | progressive > normal (buggy) | NO | NO\n2478  | progressive < normal | progressive == normal | YES | YES for progressive, NO for normal\n2479  | the same as #2478 when avoidConcurrentDecoding; keep current when no options |  - |  - | -\n2483  | progressive == normal | progressive == normal | NO | NO. @zhongwuzw I guess maybe we think over than the current context of problems. Make it too complicated.\nThe SDWebImageDownloadOperation is running on the URLSession, for each URLSesson, they can only run 4 concurrent network downlaod task (See HTTPMaximumConnectionsPerHost).\nSo I don't think add an nother operation queue management component is useful. We just need to find one most suitable behavior (maybe from ourself as well as some other user) for this. Don't need to change too much of architecture.. ? I mean it's no use to manually add any operation queue manager by yourself. What main propose of that change ?\nThis issue is about not oh I want to profile and get the best performance on the progressive decoding. I just mean we should keep a balance and most acceptable behavior of it. If people want detailed control of download && decoding. They can use Custom Download Operation.\nThe decoding is part of download post-process, not a standalone process should be handled globally. If we decide to change everything related to decoding into the global management. We have to break many APIs, including the cache (contains decoding && encoding), the transformer (contains image process code), the image rendering (contains JIT decoding), and so on. I don't think it's good or suitable for solving this problem.\nMaybe I think we shoud collect more idea from our user. Totally revert the code is another backup way, but I just want to ensure whether previous behavior(4.2.0 before) is suitable for most of people.. @stale This one is still a proposal and should be kept.. @stale This one is still a proposal and should be kept.. @stale Refresh.. @stale Refresh.. That SD_MAC check specify for macOS platform, is that need ? I don't think we should keep a seperate implementation for this method acrosing different platforms. And CGImageGetBitsPerPixel is available in macOS since 10.0.\nAnd this method, is that really need to check image.images ? It can solve the problems of UIAnimatedImage, however, for the custom animated class, this does still lose some accurate value, maybe we need extra image.animatedImageFrameCount * (bytesPerFrame). But I think it become more complicated. PS : This may introducing extra cost, because each frame image is created on demand but not keeping in memory.\nBy default we use SDMemoryCache, subclass of NSCache, the cost arg for setObject:forKey:cost: actually is really magic for usage  (I don't think it really works :))\n\nTypically, the obvious cost is the size of the value in bytes. If that information is not readily available, you should not go through the trouble of trying to compute it, as doing so will drive up the cost of using the cache\n. This changes seems contains some issue to talk. So maybe we'd better treate this as future milestone. I can fire some tech detail for this issue.\n\nAnd, is there any roadmap for 5.0.0 release ? If we have no extra commit for semversion changes, maybe we can start the process. Little bugfix or patch can be pick up later after we release the 5.0.0. @zhongwuzw  The PR assume something in implementation detail. While many cases can let UIImage.CGImage be nil, for example, when loading PDF images (not CGImage based, it's CGPDFPage based), or user use the CIFilter transformer to create CIImage based UIImage. This changes break the more common usage.\nI don't think as a common method we should do like this. And this image cost miscalculation is not always useful for our cache system because NSCache will not always use this value (See the documentations). \nIf you think this value is important, we can consider to add a custom way for calculation. For exmaple, we add the block for this, to let you return the cost for image. Like what we've done in 5.x for SDWebImageScaledImageForKey, we support user to pass customScaleFactor for each individual image. This type of design is more suitable for our customizable SDWebImage.. > if users sets totalCostLimit to 300M, actually only cache size up to 300M * 4 = 1.2G\nWhat does this means ? I remember the totalCostLimit is the pixel count, but not what this bitmap vector memory bytes. Did we change the definition meaning of this config ? (Maybe another break change from 4.x -> 5.x ?)\n\nI check here in 4.x, is also the pixel count, but not the bytes size.\nhttps://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/SDImageCache.h#L64-L67. @zhongwuzw Our company's project use the pixels (Someone misunderstad this value but I told them). So if we change to bytes, this changes need to be notified to all of the user via migration guide.\nAnyway, it's a consideration to change. But I'm wondering if this is really important to change. Most of cases, the pixel count is enough, we can assume to use the RGBA8888 (4 bytes per pixel), so we set up the value to bytes / 4.. first he should realize it's the pixels count, the documentation told this, and totalCostLimit is not about the bytes, it's about the cost. You assume it's bytes, but it now what NSCache designed for.\nI don't think it's important to change this behavior. Which need some detailed consideration, and introduce new API because which may add SDAnimatedImage protocol changes. Maybe we'd better start a conversation about this but not simply add to 5.0 milestone.. Duplicated and replaced by #2568 . This introduce too much of related code just for FLAnimatedImage, which is deprecated in 5.x and no long maintained.\nCurrent 4.x keeping use the pixel count, and why FLAnimatedImage consume memory because they store the decoded frame buffer inside FLAnimatedImage level, but not FLAnimatedImageView level. This design means we can not simply solve this problem, unless we create another code path (actually write another implementation which does not use UIView+WebCache, because all we assume their are no extra cache keeping in memory).\nSo I suggest to close it. For user who need animation support , check 5.x for more animation solution. For user who still want to use FLAnimatedImage, they should better try another solution like custom fork-version of FLAnimatedImage, or write their own category on it.. Because the feature PR is only designed to solve that FLAnimatedImage, you using a category property, which is not useful during normal usage.\nI suggest to use a good, and friendly to user solution, instead of manually set that value, we should provide a protocal method, and using subclass. Because the category propoerty will be lost during many image loading process.. > @dreampiggy ? User don't need to set it manually if he don't add associated object. We have default calculation, most of the time, user don't need do anything.\nSo when can you specify this assocaited object? I don't find any appropriate place to set a custom calculation in this design.. > Anytime, before or after image be stored to cache.\nA demo code ? The cache calculation must be seperate from the Image Processing Code. And it's wrong to place it in after the image memory instance already been stored to cache (Which means, setImageBlock is a wrong place because it's already been stored to cache). And for any reason. The change about \"Using memory bytes size to calculate cost function, instead of pixel count\", should not be exist in 4.x. Even you can use some trick to workaround this without modification any exisiting API. Those two of different style to specify memory cache limitation should not exist at the same time.\nIf we change, change in 5.x. So you can consider the architecture in 5.x.. I'm tied of this discussion. Really.\nI create a PR for 5.x branch, contains your apporach to use a category property on UIImage. You can check that #2568 instead.\nAfter that was merged, I can pick and create a suitable one for 4.x (because 4.x have to, and always using the pixels count for cost function).\nThe FLAnimatedImage part, separate it into another PR, don't put them together.. @zhongwuzw These things can be done together. If you agree with this design, I'll merge and pick them together. I just don't want to spend more time for 5.0.0-beta4 release. Check #2568 for the total cases (including the comment, the Animated Image overrride method). After that merge, I can pick and solve the merge conflict.\nIf you think your \"Git Author\" in the git history is important. I can rename my MR to your name.. @zhongwuzw The reason that I don't agree to merge this PR directlly, because it's not what it says, a bugfix.\nThis PR contains many part, it's not a simple PR to merge.\nFor that UIImage+CacheCost, it's a feature PR, not any thing related bugfix. It's to provide a custom value for cache cost calculation. This is what we enter the agreement of the design.\nFor that SDImageCache new open API, this is something I don't think a good idea. Because it's does not do anything meanningful for user. I'd suggest to remove.\nFor that FLAnimatedImageView related changes, it's a bugfix. So this shuold be separate to another PR to make it easy to merge. We can create a fix after the UIImageCacheCost` was available in the 4.x.\nI want you to review the part, is the first one in #2537 , the cost function design issue. So we've done the agreement and I think it's time to merge this one firstly. It's not related to FL or anything to spend more time.. I'm apologized for what I said \"If you think your \"Git Author\" in the git history is important. I can rename my MR to your name.\". Because I don't know the idea why you do not review that MR instead. Since we've already come to an agreement about the way for customization. So I guess that may because that you're worried about your code's author right or something.\nAnd to say, the GitHub comment here, does not show me the basic idea or the reason for these changes. It's hard for me to figure out or understand the thought behind the code.\nSince you're a Chinese, you can always contact me via my email here or the some social network like WeChat\n. I decide to fix and release 5.0.0-beta4, and ready for v4.4.4 release. This PR is OK except that updateImageMemoryCostWithKey public API. Because it's always available by combining on the current API. And the usage of that is really rare. Advanced people who need it can also use their own wrapper.\nAfter I merge this PR, I'll merge and change the suitable cost function in the 5.x.. The comment answer your question:\n\nyou don't need to unregister an observer in its dealloc method.\n\nYou can still call removeObserver any times , even you didn't register any observer for the target notification name. It does not cause any issue because Apple implementation check whether they have current object registered in the notification maps.\nWriting like this can avoid extra runtime platform OS version check.. Because we add https://github.com/SDwebimage/SDWebImageWebPCoder into the demo project, but however, the demo project also need to build in  the CI.\nThis cause the issue, if we change the API or something will effect SDWebImageWebPCoder in the Core repo, that repo also need to be changed. But currentlly the related PR here: https://github.com/SDWebImage/SDWebImageWebPCoder/pull/2 was not been merged. So the CI will fail.\nThis changes is easy to fix. But for further development, I think the similar issue will still appear.\nA simple solution, is that each time we update the Podfile in the Core repo's demo project, to point to the target branch of SDWebImageWebPCoder (contains the related change) instead of using a version number dependency. So that the Core repo's CI will pass.\nBut now, I think adding the WebP support into the Core repo's demo project is not a good idea. Which will cause a cycle dependency like this, when we want to update some APIs.\nAs a plugin, SDWebImageWebPCoder should update itself after the Core lib new feature PR is merged, but not block the way Core lib was merging PR... \ud83d\ude15 . @zhongwuzw These macro are all private previouslly. But @bpoplauschi change it into the SDWebImageCompat.h during f8fe886\nTo say, I don't think it's good for project development that there are no any Project Headers or Private Headers. We put all headers into the public header, which cause our API easy to break (Some internal change should not visible for any user) because we always follow https://semver.org/\nI previouslly decide to add some header (For example, our utils class like SDWeakProxy, and some internal property for SDWebImageDownloaderOperation). But @bpoplauschi say there are some issue related to Private Header so we have to declare all of them into public. Is there any hard thing to block us use private header files ? \ud83d\ude15 \nMy company's most of frameworks, use private_header_files for CocoaPods spec files for internal headers, it works all the time. And also, for Carthage, I change the Xcode config to mark them as Private. I don't meet any issue. Is there are something extra issue for introducing private headers ?. I think we create a private header contains these define. So we can clear what is public API, which is private API (or called Project Header in Xcode) for development. This can avoid some little trick to put all unrelated class or utils method into the implementation files only.. OK...I'm busying in the past weak so that I loss some conversation here.\nIn long term, I still suggest to create private headers, which can move some commom utils/helper methods/private property into the private files and make it easy to use (especially when different components need to share same method, instead of writing twice just to avoid exposing to public headers)\nIn short term, I will merge this PR simply, still keep that SD_LOCK && SD_UNLOCK in the SDWebImageCompat.h. So that this macro will not accidentally effect other user's define.. @ivan-konov  I try to use Carthage to build SDWebImage 4.4.2 with Xcode 10 official release. It works without any issue. Could you please paste your console output to show what cause this issue ? (Using --verbose arg in carthage build)\n```bash\n\u279c  SwiftDemo git:(master) \u2717 xcode-select --print-path\n/Applications/Xcode 10.app/Contents/Developer\n\u279c  SwiftDemo git:(master) \u2717 carthage update --platform watchos --configuration DEBUG --verbose\n...\nSigning Identity:     \"-\"\n/usr/bin/codesign --force --sign - --timestamp=none /Users/lizhuoli/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A255/SDWebImage/4.4.2/Build/Products/Release-watchsimulator/SDWebImage.framework\n\nTouch /Users/lizhuoli/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A255/SDWebImage/4.4.2/Build/Products/Release-watchsimulator/SDWebImage.framework (in target: SDWebImage watchOS)\n    cd /Users/lizhuoli/Documents/Demo/SwiftDemo/Carthage/Checkouts/SDWebImage\n    /usr/bin/touch -c /Users/lizhuoli/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A255/SDWebImage/4.4.2/Build/Products/Release-watchsimulator/SDWebImage.framework\n BUILD SUCCEEDED \n``. @yidongAndOther What case can you trigger amultiple threads` environment for progressive decoding use case ? It's associated to single operation, each operation using a decoding queue.\nThe normal decoding decodedImageWithData: method is thread-safe because it can be called from any thread at same time, it's context-insensitive API and have no side-effect. But however, the progressive decoding need a context keeping in instance level not class level. So it's not designed to be called from multiple threads at the same time.. He means when using http or SDWebImageRefreshCached in iOS 12, there will be frequtelly NSURLErrorCancelled (-999) error.\nBut however, there are no any different in my test on iOS 12 simulator && real device.\n@JKjiangnan If you means you will see some logs in the console output, it's the standard output for Apple's URLSesson framework, each time you call NSURLSessonTask.cancel() on it.\nYou can just ignore it, using some tricks like https://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-logs. Because from Xcode 8, Apple 's own framework using OSLog, they all output to the same console and save it into the same log files (OS_LOG_DEFAULT). This does not cause a retain cycle. Let me tell the reason.\nFirst, for each SDWebImageCombineOperation, there are two object will retain it. The first one, it a NSArray in SDWebImageManager.runningOperation. Which hold a strong reference to all pending loading tasks, until it been finished or cancelled. This one should keep, or the operation will been dealloced.\nSecond one, it the UIView+WebCacheOperation, each view use a strong-weak NSMapTable in associated object (strong property). Because the maptable is a weak reference to the operation, after the runnningOperation array remove the operation, the opeartion will be dealloced.\nYour question, maybe related to your business code. For example, if you want to immediatelly cancel the network loading after your VC been poped or dismissed, you should not capture self in the completionBlock. Instead, use a weak capture list for Swift, or Strong-Weak pair in Objective-C, to make the completionBlock does not capture your self to cause a retain cycle. Note even it's a retain cycle, after loading finished or cancel, all will be dealloced, is just a temporary state.\nBut however, sometimes you need to keep self alive, for example, later you may request the same URL, so you want to cache it and do some logic after loading, even if your VC disappeared. You should capture the self in the completion, to avoid your businese code which may call [self xxMethod] fail. It's also a possible use case, it does not means retain cycle is always bad, it's important to keep instance alive for some reason.\nIf you still have questions, see Common Problems: Handle self capture in completion block. @bpoplauschi Sounds good. But one more question, does this changes be compatible for Xcode 8 (which means, after this change is merged, can Xcode 8 user still build it without any issue ?). Current 4.x seems be a compatible version supports both Xcode 8 && iOS 7...\nIf there are something break effect, maybe we can merge it into 5.x and hurry up to release 5.x. It takes too much of times (nearly half of year) \ud83d\ude05  . Current pending PR for 5.x, which does not introduce API breaking should be considered in low priority. Because we can fix it in 5.0.1 or future after we release the official 5.0.0.. @bpoplauschi It seems another weak passed...There are nearlly 4 months since first 5.0.0-beta released and half of year since we started the 5.x development.\nI think we can merge this on into 5.x if there are no any issue. Then we can consider to release 5.0.0 official version.\nThere seems no pending PR that will cause API break, and some unsolved PR can be fixed later. The only one that I think we can do, it's to migrate this repo to the SDWebImage organization, like what we've discussed with @rs.\nWhat's your opinion ? \ud83d\ude00 . LGTM...I run the target branch with Xcode 10.1. Xcode config can avoid massive configuration across different target, it's a tool for the large project which contains multiple targets but share some common configs.. No. I don't check each of configuration in xcconfig, but if you can ensure all their value are from current Xcode's project config, it's OK to swtich to the xconfig to manage them. It's text-based and more easy for git to show the diff (instead of that pbproj files which is hard to read). See : kCFErrorHTTPSProxyConnectionFailure\nYou are configurating to use HTTPS proxy. Check your proxy config such as Root CA certificate firstlly, this is not anything related to SDWebImge framework.. Are you sure ? We use Xcode 10 to upload the iTunes Connect and did not face this issue.\nIf you want to ensure all third-party framework use the same min-deployment target version, specify the platform arg in your Podfile.\nruby\nplatform :watchos, '2.0'. @martin-key It seems CocoaPods will not inherit the platform version to the pod build settings. Currentlly you can specify each pod's platform version using the post_install script in your Podfile.\nruby\npost_install do |installer|    \n    installer.pods_project.targets.each do |target|\n        if target.name == \"SDWebImage\"\n            target.build_configurations.each do |config|\n                config.build_settings['WATCHOS_DEPLOYMENT_TARGET'] = '3.0'\n            end\n        end\n    end\nend. @martin-key However, we can not simply upgrade the min-deployment target version in the master branch of 4.x. If this iTunes connect upgrade force all watchOS app to use watchOS 3 min deployment target version. We can only change it into 5.x.\nPlease help us, is there some iTunes connect review screenshot or something email to prove this change ? We didn't face this review issue during some apps in our company in the current weak.. Are these related to your issue ? \nDeveloper forum: https://forums.developer.apple.com/thread/108408\nhttps://github.com/daltoniam/Starscream/issues/552. @martin-key I check all the comments and related radar in the Apple Developer forum. I think it's a bug in Xcode 10, but not a App Store Review upgrade. Because if we downgrade to Xcode 9 and upload the ipa build with watchOS 2, it passed the binary check and is available in TestFlight.\nSince Xcode 10, it now use a new build system. Could you please trying to use the old build system again (upload to iTunes connect) to check whether this cause the issue? You can do it through Xcode Workspace Settings (or Xcode Project Settings) -> Build System -> Legacy Build System\n\n. @martin-key  Currentlly use the workaround above. We will see if Xcode 10 new update will fix this issue. If the App Store review change, we will follow later.\nIMO, I don't think since Xcode 10 supports build wacthOS 2 app, contains watchOS 2 simulator, but only reject watchOS 2 binary uploading.\n\n\nIf we decide to upgrade the watchOS deployment version, this change need te be applied for nearly 8 repos && pods in SDWebImage organization. It's not a small task. So we should be carefully about this chanages until we find out whether it's a bug or not.. @martin-key  Does this still happend ? We've upload the new Apps update which use the watchOS deployment target version 2.0. I think we can close this now.. Duplicated for #2347 . It has been solved in the #2348 and be available in 4.4.1. Please upgrade your podfile to use the new version.\nruby\npod 'SDWebImage', '~> 4.4.1'. UIImage itself only contains the image frames and image frame duration information. The frame loop count information is only available in the UIImageView level via animationRepeatCount property.\nAny images loaded with SDWebImage framework, we keep the animated image loop count information in the sd_imageLoopCount category property. So if you think the image loop count is important for your use case, you should set it to the imageView by yourself after image is loaded.\nIf you want to stop animation at any time manually, just call stopAnimating on the imageView.\nYou can check the detailed information about UIKit's official animated image usage via developer documentation. Here I just show you simple code to handle it.\nobjective-c\nUIImageView *imageView1;\n[imageView1 url placeholderImage:nil options:SDWebImageRetryFailed completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n    // Check whether it's a `UIAnimatedImage`\n    if (image.images) {\n        imageView1.animationImages = image.images; // specify frames\n        imageView1.animationDuration = image.duration; // specify duration\n        imageView1.animationRepeatCount = image.sd_imageLoopCount; // specify loop count\n        imageView1.image = image.images.lastObject; // specify which image to display when animation stop, here is the last frame\n    } else {\n        imageView1.animationImages = nil;\n        imageView1.animationDuration = 0;\n        imageView1.animationRepeatCount = 0;\n        imageView1.image = image;\n    }\n}];. If you're using the SDAnimatedImageView introduced in 5.x, you don't need this check like the above because by default we follow the image loop count from the SDAnimatedImage level. It just works.\nHowever, for advanced user, you can still specify a custom loop count instead of loop count from original image format. Set the shouldCustomLoopCount to YES and then use the animationRepeatCount property.\n```objective-c\nSDAnimatedImageView *imageView2;\nimageView2.shouldCustomLoopCount = YES;\nimageView2.animationRepeatCount = 1;\n[imageView2 sd_setImageWithURL:url placeholderImage:nil options:SDWebImageRetryFailed completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n    NSAssert([image conformsToProtocol:@protocol(SDAnimatedImage)], @\"should be a custom animated image class\");\n    NSUInteger loopCount = ((id)image).animatedImageLoopCount; // The loop count from original image meta information\n    NSAssert(loopCount == 0, @\"custom loop count, not equal to specified imageView loop count\");\n}];\n```. Maybe we can also add this to the wiki page if there are more people asking this question. Although this information can be founded on the Apple's developer documentation, there may be some developer who don't read carefully about it :)\nSo for now, I just close this issue, if you have any more question, feel free to reopen this issue.. This usage of background task contains issue. So maybe this is why current we disable this function.\nWe use weak-strong dance inside the expiration handler, but however, if the self become nil inside that handler, we will miss the endBackgroundTask call and UIKit will kill the app. The call inside that cancel or reset does not help, because there it's always possible that one operation can executed over the time limit of that background task.\nSo I now know it's a bug, but this PR's fix is not correct and will potential make thing worse. We'd better fix it from the scratch. This relay on the NSOperationQueue or NSOperation behavior. This assume that\n\nif the NSOperation is dealloced, its cancel method must been called before it.\n\nHowever, I don't know whether it's true or not and don't care about it.\nThe general correct writing of the background task identifier, it's to use a __block variable (for instance) or static variable to ensure it's always bind to the expiration handler. It's always safe.\nobjective-c\n__block UIBackgroundTaskIdentifier taskID = UIBackgroundTaskInvalid;\ntaskID = [UIApplication.sharedApplication beginBackgroundTaskWithExpirationHandler:^{\n    [UIApplication.sharedApplication endBackgroundTask:taskID];\n}];. Sorry for that I'm busy these weaks. I previously decide to fix it with another PR but I forgot that.. I see.\nActually I means, from a general approach this style of code is not safe. We'd better provide two level protect for this. Because the background task is really easy to mass up on your code. And once the enter && end is not balanced, iOS system will kill your app in the background, it's a serious issue and I think we should take carefully to take the responsible for this.\nMy idea is that to add two-level protect, like this:\nobjective-c\n__block UIBackgroundTaskIdentifier taskID = UIBackgroundTaskInvalid;\n__weak typeof(self) wself = self;\ntaskID = [UIApplication.sharedApplication beginBackgroundTaskWithExpirationHandler:^{\n    __strong typeof(wself) sself = wself;\n    UIBackgroundTaskIdentifier validTaskID = sself ? sself.taskID : taskID; // when self is dealloced, use the __block associated one to check\n    if (validTaskID !=UIBackgroundTaskInvalid ) {\n        [UIApplication.sharedApplication endBackgroundTask:validTaskID];   \n    }\n}];\nself.taskID = taskID;. Any way, it's OK for this if you can ensure this does not cause extra issue. By running your local test or mock test from your Apps.\nBecause this issue exist in the 4.x branch as well. You can keep your current code, then change the base branch to master, after I merge it to the master branch, I can easily merge master to 5.x again.\nIt's better than you create two different PRs and let me merge it one by one. That will cause the merge conflict when I merge master to 5.x). @zhongwuzw Seem CI failed. Our some test case relay on an AWS server to host the image. But recently the server is down. Maybe we'd better fix it or find another image source.\nSuch as this link: https://s3.amazonaws.com/fast-image-cache/demo-images/FICDDemoImage001.jpg. @bpoplauschi Is that AWS server owned by you or do you know anyone who can fix it ? Or maybe we'd better switch to another image resources.. @zhongwuzw See #2570 and I'll merge that to master. Check Using cache key filter. You can provide a custom logc to generate the cache key for URLs. @CocoaML Hi.\nYour demo code does not contains any retain cycle (Only if you retain the self in the compltionBlock, it will cause a short-term (until load finish) retain cycle). I guess it may because of the FaceAware code that open too much of bitmap context to detect the faces (I don't check their source code, you can have a try).\nThe best way to view your memory usage, firstlly try Xcode Memory Graph Debugger. You can see each alive object's retain chain. There may be a \u2755mark in the object which is in retain cycle.\n\nFor more advanced debug, you need Instruments and using Leaks scheme to check the status.\n\n. Duplicated for #2347 . Upgrade to v4.4.1 to solve this problem.\nNote: Please using GitHub search before fire the issue. And please FILL THE ISSUE TEMPLATE. We'll auto-close the issue without valid issue template in the future.. See #2504. Don't create new duplicated same issue. If you have something related to previous one. Re-open it or leave a comment.. It seems the weak NSMapTable<NSString, id> cause the issue ? Strange...\nI'm sure I place a lock between each read/write to that NSMapTable, but this still cause issue ?\nDid you try to trigger a set method (-[SDImageCache setConfig:]) to the SDImageCache.config during runtime at different thread ? This API is actually not correct in 4.x. It's a readonly property, but however we can not change any public header because we follow semversion. In 5.x we fixed it.... @Robot2037 What previous version of SDWebImage did you use ? I remember this weak memory cache feature is available since SDWebImage 4.3.1 via #2228. Did you use any version between 4.3.1-4.4.2 version ?\nFor temporary workaround, try disable weak cache using shouldUseWeakMemoryCache = NO. I'll try to find out the reason and provide a better solution.. Really strange. It seems a Apple implementation bug ? Because we use strong-weak table, the key should follow the strong (retain + 1) semantic behavior, and should not been released before we manual remove that.\nYour attempt (or hack ?) may work from the theory and we can have a try. We just do a real copy of the original string for key (I think using +[NSSring stringWithFormat:] is better, mutable may not so safe, many of our API is avoid using NSMutableString...).\n\n. @Robot2037 Is this appear for all firmware version ? (From iOS 8+ ~ iOS 12), or only some specify version or jailbroken device ? I want to check if this is the SDK bug or some designed behavior. . But if it's a tagged pointer, the objc_release will also ignore it. And objc_msgSend will also handle this situation. I'm still confused what this is going on wrong with that map table usage.\nc\n__attribute__((aligned(16)))\nvoid \nobjc_release(id obj)\n{\n    if (!obj) return;\n    if (obj->isTaggedPointer()) return;\n    return obj->release();\n}\nIt's not a 100% reproduable issue, maybe there are some other issue cause this crash ?. Our SDWebImageDownloader will flag the URLSession by default, to not use any cache algorithm. Because we already have SDImageCache, which will cause a double cache.\nCheck our wiki : Custom Cache. For example, if you want to implement a custom disk cache age for specify url, you can implement removeExpiredData method. There are just a pseudocode to show the logic.\n```\nfor cacheFile in cacheFolder {\n    if cacheFile.fileName == \"target name\" {\n        if cacheFile.lastModifiedDate < 7 days ago {\n            fileManager.removeFile(cacheFile)\n            return\n        }\n    }\n    super.removeExpiredData()\n}\n```\n. To say, the cache policy, should really be controlled on the HTTP server side via many Cache-Control header. As a client it's not suitable to modify and provide a custom value again.\nSo you'd better check your image server at the beginning, to let them specify the correct cache age.. If you really want to do this, maybe possbiele. Expect that custom cache implementation, another way, which it's far more harder, but still a possible solution. It's also possible in current 4.x but maybe harder again :)...\nExcept what you can do in custom cache. You can also consider one approach, it's Custom Download Operation. You need to filter some specify URL, then ignore the SDImageCache cache totally (Or you'll have double cache).\nAttention this solution need complicated steps and may contains some issue because of URLSession internal process, you'd better use other ways.\n\nContinue to read if you're really want to do this.\n\nFirst Step\nYou need to disable SDImageCache. This can be done in 5.x using SDWebImageFromLoaderOnly (stop cache query) && {SDWebImageContextStoreCacheType : @SDImageCacheTypeNone} (stop cache storage) options during sd_setImageWithURL:. In 4.x you can use trick SDWebImageCacheMemoryOnly options.\nobjective-c\n[imageView sd_setImageWithURL:url options:SDWebImageFromLoaderOnly placeholderImage:nil context:@{SDWebImageContextStoreCacheType: @SDImageCacheTypeNone}]\nSecond Step\nNext, you need to restore the NSURLRequest.cachePolicy. Because by default we use NSURLRequestReloadIgnoringLocalCacheData, which will cause that URLSession not cache your data at all. This step can be achieved using Request Modifier. In 4.x you can not directly do this, but you can modify the URLRequest in the custom download operation implementation files.\nobjective-c\nSDWebImageDownloaderRequestModifierBlock requestModifier = ^NSURLRequest *(NSURLRequest * request) {\n    NSMutableURLRequest *mutableRequest = [request mutableCopy];\n    if ([request.URL.absoluteString isEqualToString:@\"http://foo/bar\"]) {\n        mutableRequest.cachePolicy = NSURLRequestUseProtocolCachePolicy;\n    }\n    return [mutableRequest copy];\n};\nThird Step\nLast, you need to subclass SDWebImageDownloadOperation and override that our running method start. I provide a demo code base on the logic (but not test whether it's possible to work or not), you can check about it.\nobjective-c\n- (void)start {\n    if ([self.request.URL.absoluteString isEqualToString:@\"http://foo/bar\"]) {\n        NSURLCache *URLCache = [NSURLCache sharedURLCache];\n        NSCachedURLResponse *cachedResponse = [URLCache cachedResponseForRequest:self.request];\n        if (cachedResponse) {\n            NSString *responseDateString = (((NSHTTPURLResponse \n*)cachedResponse.response).allHeaderFields[@\"Date\"]); // HTTP response header <Date>\n            NSDateFormatter *dateFormatter = [NSDateFormatter new];\n            dateFormatter.dateFormat = @\"EEE',' dd' 'MMM' 'yyyy HH':'mm':'ss zzz\";\n            NSDate *responseDate = [dateFormatter dateFromString:lastDateString];\n            NSDate *expirationDate = [NSDate dateWithTimeIntervalSinceNow:-7 * 3600 * 24]; // 7 days ago\n            if ([[responseDate laterDate:expirationDate] isEqualToDate:expirationDate]) {\n                // expire and remove\n                [URLCache removeCachedResponseForRequest:self.request];\n            }\n        }\n    }\n    [super start];\n}\nThen connect all of this done together.. \ud83d\ude05 We don't need to replace any url with the new one. Actually GitHub will always automatically redirect to the new URL.\nI think, we just modify the source, homepage filed in the Podspec. And something in the readme. It's enough.. Please update and fill the issue template with correct value (For example, the SDWebImage version, OS version). Or we have no information about your issue environment to provide the feedback and identify the cause.\nNote: Latter new issue without corrected template will be automatically closed.. All NSURLSessionTask created with the factory method NSURLSesson dataTaskWithRequest:completionHandler: share the default task priority. You don't need to manualy set its' priority property, it's already treated as default in the documentation. Please check again for this behavior.\n\n. emm...What benefit from this immutable -> mutable changes ?\nTo keep thread safe, use atomic (to make sure self.xxx = xxx && let a = self.xxx read-write safe) is OK. This dictionary is rare to modify. Most cases, for user who don't call any setValue:forHTTPHeaderFiled:, using lock cost extra cost. I think it's no need to use mutable object. (What pay is what you gain).\nBut anyway, both of two (using immutable collection + atomic / mutable collection + synchronization) can keep the thread safe.. @zhongwuzw atomic using a spinlock, which is the best suitable for this use case because this is the fast compared to semaphore. (suitable for this type of single getter/setter). I think Objective-C runtime implementation is better than my code. https://opensource.apple.com/source/objc4/objc4-723/runtime/objc-accessors.mm.auto.html\nI'm also a little confused about that bug between these two approach. I think they share the same result for this use case. Any real code ?\nmutableCopy is only paid the cost when you call setValue:forHTTPHeaders:. For most of use from our user && nearly 20 iOS large project I saw inside my company, does not trigger that method more than once. Even they do, they do this static register in the App launch time, and use headersFilter block to dynamic append headers. Because this method will override all default network request headers. (Not per-image-request-level). I see, it seems you means we have multiple method calls (that setObject:forKey:) just between the lock start && lock end. So the business code will contains potensial data lost ? Is also a problem. Maybe I loss this one. It's correct.\nHowever, for simple set/get method, it's still recommaned to use atomic, we have a full test of that and it's stupid to write your own like this code:\n```objective-c\n@property (nonatomic, strong) id immutableObject;\n@property (nonatomic, strong) id objectLock;\ndispatch_semaphore_wait(self.objectLock);\nself.immutableObject = newValue; // between start && end there are no extra method calls or logic, one atomic operation\ndispatch_semaphore_signal(self.objectLock);\n```\nMoreover, spinlock is fast one that use case (simple read/write without any extra waiting or jmp code). Because it's a busy lock while semaphore is not. And what you mean spinlock is unsafe does not related to this (it's about Priority Inversion, but here we are not inside a background queue with lower QoS).. Unfair lock is still a busy lock. They can do more performant in this case. While samphore is not designed to solve this simple synchronization problem. it's a resource aquire synchronization and was used mostlly for UNIX file, socket or something can be shared from different thread / process. But however, we use that like a lock because it's a NSObject and easy to use.. @zhongwuzw I just mean you should know when to atomic, when to use a manual lock (like samaphore). For single get/set thread-safe, atomic is the best. For this use case : You have a method call or other operation, but you want to make entire procedure atomic, use the manual lock instead. atomic is not a evil, I saw many people who misunderstand this thing.. I think Swift open source commutity should handle this case. Because I think NS_TYPED_ENUM should enjoy the same Swift API naming rules like enum. However, from other open source guy of PSPDFKit with their attempt. This behavior seems will not be solved forever. So now, we have to annotation any API using SDImageFormat one by one with the better syntax for Swift user.\nBug report related to this: \n+ ClangImporter ignore aliased Objective-C type name. Seems we need something like API generator to check, for major release. Previouslly I use objc-diff to check the API changes from 4.x-> 5.x. However, it only reports the Objective-C API changes.\nI think we can also provide a API changes for Swift exported API. Maybe I need to find some utiles or using the official Clang Importer to do this.. These code is from #2174. Which is aim to solve the crash in #2156.\nUsing lock here is actually a hack. We put the @synchonized() not on self, but on the cache instance. To try our best to make it all access to that NSCache.sharedCache inside our framework, is serial.\nThis is not a 100% fix, but can help to decrease the crash ratio of that case.So I think currently it's no reason to revert back this code.. objective-c\nNSURLCache.sharedURLCache = [[SDThreadSafeURLCache alloc] initWithMemoryCapacity:oldCache.memoryCapacity diskCapacity:oldCache.diskCapacity diskPath:[SDThreadSafeURLCache defaultCachePath]];\nThis code override the user's default behavior across the Application level. It's like a hook, I'm not recommaned to use this.\nThe issue seems already been fixed using that lock inside our framework, if user access the shared URLCache, they should have their own way to lock. Instead of we override the Foundation default impelemntation.. What is accptable, is that for any NSURLSessionConfiguration created inside SDWebImage, you can assign a custom NSURLCache subclass. But it's not recommaned to override that NSCache. sharedURLCache. This is controlled by the Application-level, but not framework level. (It looks just like a Swizzle)\nSee https://developer.apple.com/documentation/foundation/nsurlsessionconfiguration/1410148-urlcache?language=objc. You can assign a target cache after URLSession was created.. Are there any more crash log like this in the latest firmware (iOS 9.0+) ? I think it's a bug or something that should be handlered by Apple but not developer.\nAnd to solve this, yes, currently we only synchonize the read operation (Seems I don't do that correctly). We can use subclass, but I means you should not touch anything NSCache.sharedCache, instead, assign your custom cache class to the NSURLSessionConfiguration.URLCache, we can ensure all the URLCache from our framework and synchonized. Directlly assign to NSCache.sharedCache will override the Application behavior, which is unacceptable for a framework.. I'll have a check at the Fabric or other crash analysis tool and give you back the result.\nAnd also, I can help to provide a PR for this. We assign all the NSURLSessionConfiguration created inside SDWebImage, using a custom NSCache subclass, try to solve this issue.. @zhongwuzw I actually mean like this:\nobjective-c\n//SDWebImageDownloade.m :120\nNSURLSessionConfiguration *sessionConfiguration = _config.sessionConfiguration;\nif (!sessionConfiguration) {\n    sessionConfiguration = [NSURLSessionConfiguration defaultSessionConfiguration];\n}\nsessionConfiguration.URLCache = SDThreadSafeURLCache.sharedCache; // Put it here\nobjective-c\n// Or I don't sure this can fix or not, we can put it only defaultSessionConfiguration, don't effect user's defined `_config.sessionConfiguration`\nif (!sessionConfiguration) {\n    sessionConfiguration = [NSURLSessionConfiguration defaultSessionConfiguration];\n    sessionConfiguration.URLCache = SDThreadSafeURLCache.sharedCache; // Put it here\n}. @lhnoah Hi. SDWebImage already have SVG coder plugin support in SDWebImageSVGCoder. Which use SVGKit as SVG parser as well. Please check that for this SVG format.\nThat SDWebImageSVGCoder repo is maintained by our SDWebImage orgnization and myself to make it as a out-of-box SVG plugin. If you're interested in SVG, please go to that repo and have a check.  You can also fire some PR or feature request.\n\nOur core repo (This SDWebImage) from architecture, should not include any third-party library dependency, and for new image format, we've done many works to make it extensible. Which means, if you want to add a new format support, you SHOULD NOT modify any line of SDWebImage core repo. All of coder plugin is done using the customzation coder plugin solution here: Custom Coder.\nTo know what image format SDWebImage official support, check coder plugin list for the inforamtion.. So maybe I'll close this issue, please have a check at that SDWebImageSVGCoder and fire issue there.. You mean this line ? https://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/SDWebImageDownloader.m#L307\nJust as the comment shows, we use a GCD semaphore disaptch_semaphore_wait at the beginning of that function entry. (See thie line), and we also use disaptch_semaphore_wait inside the operation.compltionBlock.\nIf Apple call your operation.compltionBlock after you call NSOperationQueue.addOperatation in synchronously (when the operation is empty), what will happen ?  There may be two sequence call to disaptch_semaphore_wait, and so that the semaphore count will -2 (become -1) and block the current queue. But each of them waiting for another to release the lock. This cause a dead lock.\nIf Apple does not call it synchronously, the first semaphore (from the SDWebImagDownloader) will be released. And then the NSOperation.completionBlock's semaphore can balance it as well. No dead lock occur.\nThis comment is here to tell people who \"I think this two disaptch_semaphore_wait would cause a dead-lock ! Fix them !\". Their answer is not correct.. \n. ...Just simplify the problem. That code can looks like this, if you assume Apple call your completionBlock synchronously when operation is already empy. And thanks, they do not do like this. They will always dispatch to queue to execute the completionBlock (typically another queue, but can be the same queue running for opearation).\n```objective-c\nint main(int argc, char *argv[]) {\n    @autoreleasepool {\n        dispatch_semaphore_t lock = dispatch_semaphore_create(1);\n    __auto_type completionBlock = ^{\n        dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);\n        printf(\"operation finish\");\n        dispatch_semaphore_signal(lock);\n    };\n\n    dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);\n    printf(\"add opeartion\");\n    completionBlock();\n    dispatch_semaphore_signal(lock);\n\n    printf(\"here\"); // never go here\n}\n\n}\n``. Retain cycle ? Which object didimageIndicator` retained ? Did I miss something ?\nself -> imageIndicator -> End\nself -> progressBlock -> imageIndicator -> End. Be free to report the issue. There may be some mistake in code and issue can help us to find it.\nTips: Xcode has a really powerful memory graph tool to show all alive objects in the memory. And there will be a purple exclamation mark on that leaked object. You can open it up at any time via the toolbar (next to the pause breakpoint button). It\u2019s really easy to find whether there are retain cycle or not.\nYou can check this tutorial for Xcode memory graph debugger tool: https://useyourloaf.com/blog/xcode-visual-memory-debugger/. Except the code movement, this PR first commit also fix a issue on AppKit implementations. When the scale arg is 0, we should use the device main screen.\n\nDocumentations:  If you specify a value of 0.0, the scale factor is set to the scale factor of the device\u2019s main screen.. @bpoplauschi This fix need to be available in the 5.0.0-beta4.\n\nI just correct it with our documentation: For UIKit, these methods just call the same method in UIGraphics.h. See the documentation for usage.. This is a designed behavior. We store the UIImage instance into the memory cache, the original downloaded NSData in disk cache. When a image is cached in memory, we will immediately retrieve it and callback without any disk cache query with NSData.\nIf you want to ensure always give me back the NSData with disk cache query, you should provide extra options. Using SDWebImageQueryDataWhenInMemory && SDWebImageQueryDiskSync options. See the documentation for the combination of these two options, which will cause little different behavior (sync or async, actually).. > What happens when I keep writing to disk when the memory is full.\nIf you are writing disk cache using method like -[SDImageCache storeImage:forKey:completion:], you should note the documentation shows that this will also store the image into memory as well. So that the memory cache may start evicting. Because current implementation use NSCache.\nIn 4.x, we have no built-in method to store disk cache only. You can only use some hack way like using the internal method _storeImageDataToDisk:.\nIn 5.x, we introduce the SDImageCache protocol, which allows you to store disk cache only using storeImage:imageData:forKey:cacheType:completion: with SDImageCacheTypeDisk.. That memory  is full seems cause misunderstanding of this issue.. This changes will break the current Carthage support. Because Carthage need your build scheme to be marked as Shared. However, the shared scheme configuration is stored inside that xcshareddata folder. So this should not be ignored. Only your xcuserdata can be ignored.. This behavior is not a bug, actually.\n\nGIF image url is already been loaded using UIImageView before FLAnimatedImageView hit the same URL, cause fallback normal GIF rendering.\n\nI know this behavior exist, and in 5.x it still exist. But the simple solution to solve this (remove a cache and re-add a cache) is not a correct behavior. Because this assume something like \"FLAnimatedImage is a super set of UIImage, so whenever there is one UIImage, I need to replace it\"...This will cause massive cache invalidation.\nOne rare case\nAssume other have two imageView, one is UIImageView, another is FLAnimatedImageView, both of two I want to load an animated GIF. When they both show a same URL, they will begin to invalid the cache from each other. (UIImageView one accept UIImage, so it invalid cached FLAnimatedImage instance; FLAnimatedImageView one accept FLAnimatedImage, so it invalid cached UIImage instance)..\nFor 4.x, it OK to hack or take some solution. But this code should not exist in 5.x. We should use something other way to solve this, or provide another option to let user to choose when this situation meet. (The custom animated image class load a URL, which is already cached by something other image than we expected).\n5.x solution\nThe correct way to solve this should introduce another design. Like that if you provide SDWebImageContextAnimatedImageClass class instance, we will mark it cache hit only if this is true:\nobjective-c\nUIImage<SDAnimatedImage> *animatedImage = [self cachedImageForKey:xxx];\nUIImage *cachedImage = animatedImage;\nClass animatedImageClass = context[SDWebImageContextAnimatedImageClass];\nif ([animatedImage conformToProtocol:@protocol(SDAnimatedImage)]) {\n    if (![animatedImage.class isSubclassOfClass:animatedImageClass]) {\n                // Mark cache miss because of the type not match\n        cachedImage = nil;\n    }\n}. My fault. That solution still contains issue, because we support the fallback of SDWebImageContextAnimatedImageClass. They can be nil even if imageData is not nil and will fallback to normal UIImage.\nSo maybe for 5.x there need another consideration.. This issue should be kept. This solution is not a good idea to solve this...\nBecause this change will massive up the cache invalidation. Why we think FLAnimatedImage is better than UIImage ? Because if one FLAnimatedImageView invalid a cache key, other view category which query the same key will cause a cache miss, and then start to asynchronously disk cache query.. LGTM. Emmm. Why this is useful ?\nDuring that first line call [self sd_cancelImageLoadOperationWithKey:validOperationKey];. You image loading process has already been stopped, then all cache query && download will immediatelly return a error. So that the previous image request (for example, during UITableView && UICollectionView reusing) will be canlled and start the new one. They are no reason for this check.. @zhongwuzw Actaully, this UIView+WebCache or UIImageView+WebCache is designed to call in the main queue, because it's a UI-related method. Unlike that SDWebImageDownloader && SDWebImageManager, they are not designed to be thread-safe...\nThe normal workflow for user, as we know, just using sd_setImageWithURL: during the UITableViewDataSource cellForRowAtIndexPath: && UICollectionViewDataSource cellForItemAtIndexPath:. So they all run on the main queue in order and safe to call cancel...\nAdd a protect is OK. But I wonder if there are some race change cause that sd_imageURL become invalid ? If so , this check may cause a undesigned behavior and hard to find.. Seems OK. The only write to that sd_imageURL: is happened in UIView+WebCache. So this is a convergence entry.\nWe can have a try fox this protect. And did you business code face the issue that cause a mismatched image during cell re-using ? @zhongwuzw . @zhongwuzw Is this PR's code change related to that new #2534 ?. Recently days I'm busy in my full-time job. So I don't have enough time to join the open source project. I just review the PR in some spare time. Today I just create this to show my idea. The reply may be slower.\nThe original discusssion is from https://github.com/orgs/SDWebImage/teams/collaborators/discussions/2. And the related issue is #2485 . And @zhongwuzw fire a solution, which I disagree with, then we start many conversation.\nI can list my idea about why that solution is not suitable for 5.x, and some related consideration.. # My idea about the solution in conversation\n2485 Use anothe design, the class category on UIImage, which introduce one read-write property for image memory cache size.\nobjectivec\n@interface UIImage (CacheMemoryCost)\n@property (assign, nonatomic) NSUInteger sd_memoryCost;\n@end\nWhy I think this design is not great. Here the reason.\nTiming\nThe most strange issue of that solution. It's timing. Because that a read-write property, ask yourself a question: When should I modify and set a value for that property ?\nBecause the value should be used during our memory cache store method call -[SDMemoryCache setObject:forKey:cost:]. The most suitable time point, is that just before that call. However, current we have no such a time point. You can not evaluate a custom block during our write to memory cache logic.\nThat #2486 show his another attempt, which trigger the write to this property during View Category method sd_internalSetImageWithURL:setImageBlock: using setImageBlock. However, the problem is by the time we callback your setImageBlock, we already store your image into the memory cache. It's too late. Yes, we can then remove that memory cache and re-add. But it's a hack, but not correct solution.\nReadwrite\nAnother issue I disagree with is that the readwrite property. Because as the design from Apple's class. The UIImage is immutable. And one image's current occupied memory bytes size, should be a readonly property and calcuate the current state. So it's strange you need to manual specify that value. What you should do is report the current object's itself occupied bytes, but not store a value from outside for this semantics.\nCategory property is easy to lost\nFinally my consideration, it that category value will be lost. Because our image load pipeline, supports you to use Force Decode feature, Image Transformer feature and so on. Which means you can return a new image instance. Then all your previous specified memory bytes size will be lost.\nMaybe you think you can also call another calcutation of that memory bytes size after these process down. But it's hard and break the design.  A image is image, which report the information used by cache system. The cache system code should not exist during each image decoding/processing code. It's a anti-design pattern.\n4.x && 5.x consideration\nSo, I think, since I develop most of feature in the 5.x for customizable SDWebImage, I know the difference on design between these two branches. And one solution to introduce new feature or change behavior, should be suitable for current architecture.\n4.x user use that pixels count from 4.0-4.4.3, it's not suitable to change until another major release. So my first point, it that it's a good idea, but don't do this on 4.x, leave it 5.x to change.\nIf most of 4.x user agree it's OK to change. That #2486's solution may works and can been merged. But after we merge master into 5.x, I'd suggest to totally do refactory and use this PR's design instead. Because that PR is only suitable for 4.x but not for 5.x. And I want to make SDWebImage itself, easy to maintain in the future. . >  I have a custom image subclass named SubclassOfImage, it wants custom memory cost calculation\n@zhongwuzw You don't need to subclass UIImage unless you want to do custom animating rendering. It's the basic idea. And the custom protocol it was designed for.\nUIImage is designed to works for all of common cases. We use a subclass, but it's only for the better animating support, but not for changing any other behavior of its super class. See the reason here: Animated Image. So this is why all of the arguments, all of the method, called with an Animated.\nWe don't suppose(or at least, don't prepare for this case) you, to pass a Custom Image Class, which does not do animting, but do something related to your own business code. For this case, you'd better use your own context option value, instead of the built-in one.\n\nSDWebImageContextAnimatedImageClass => Animated Image Class, not other class\nSDAnimatedImage protocol\nSDAnimatedImageProvider protocol. @zhongwuzw Actually, previoslly I want to make another solution, use a dynamic block instead, to let you provide the cache size of the target image. It's the idea and lesson we learn from the previously hard-coded SDImageScaleFactorForKey(scale calculation). The API looks like this:\n\n```objectivec\n@protocol SDWebImageCacheCalculator \n\n(NSUInteger)memoryCostForImage:(nonnull UIImage *)image;\n\n@end\n@interface SDWebImageCacheCalculator : NSObject \n\n(nonnull instancetype)initWithBlock:(nonnull SDWebImageCacheCalculatorBlock)block;\n\n@end\n// Usage\nUIImageView imageView;\nSDWebImageCacheCalculator calculator = [[SDWebImageCacheCalculator alloc] initWithBlock:^(UIImage *image){\n    return image.size.height * image.size.width * 100;\n}];\nimageView sd_setImageWithURL:url placeholderImage:nil options:0 context:@{SDWebImageContextCacheCalculator : calculator}];\n```\nThis is more likely design for user who don't use the default calculation.\nBut after I check all of my company's code usage and some open source project, I think I'm over-design for this. People who want to use the memory cache cost limit, just want to ensure the bytes it kept in memory is controllable. \nWhy more and more people notice this design issue or feature request, may because of the animating support from FLAnimatedImage in 4.x. It use an associated object and cause issue (the calculation does not count the frame count). The project who use SDAnimatedImage in 5.x does not face any related issue and argue for feature request.\nSo I think, in 5.x, we can just keep a simple design to concentrate on the animating part with cache issue. It's useless for any other cases about image caching. So we just make a read-only property to let the Animated Image Custom Class author, to provide a cost calculation. It's not good to be a read-write property, which will cause misunderstanding, both for normal user and for custom image class author. Beacuse there are no quite suitable code point to specify that value. (Your setter code must exist after image decoding and transforming, and just before manager store the cache. However, there no any delegate or block during this pipeline)\nIn 4.x, if many people face the issue and have to solve it, we can  use some hack to fix it (such as add a special check for FLAnimatedImage class and multiply it with frame count. Which should apply for built-in UIAnimatedImage as well).. I'm tied of this discussion. Really. I want to push 5.0.0 official release soon, not delay for more and more reasons, more and more issues, without a predictable release date.\nI'll close this PR, with a new PR using that category method on UIImage. It's read-write property. So all this thing can end-up.\n. Use Dispatch Group. Not semaphore. Convert async function to sync version.\nSee dispatch_group_notify dispatch_group_wait. objectivec\ndispatch_queue_t currentQueue = dispatch_queue_create(\"com.targetQueue\", DISPATCH_QUEUE_CONCURRENT); // If you're running on a background queue\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_enter(group);\n[[SDWebImageManager sharedManager] loadImageWithURL:[NSURL URLWithString:adModel.imageUrl] options:SDWebImageRefreshCached progress:nil completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {\n    dispatch_group_leave(group);\n}];\ndispatch_group_wait(group, DISPATCH_TIME_FOREVER);. > Now this feature will only save the transformed image, but the original image may be used in multiple places and with different transformers applied.\nThis is a Good idea. I can make it as a feature request.\nBut this need some more careful though about this. Once we save both of two image for cache, we need to re-think about our current cache key system. Because now, even if the transformed cache key miss, we need query original image and do transform JUST IN TIME. Which may block the caller queue (such as memory cache query).\nI'll check back later this week. It seems that I'm busy this days. But maybe it's time to go back this project. \ud83c\udf7a . I write a demo solution. Please have a check at: https://github.com/dreampiggy/SDWebImage/commit/0f00067aa4d4985a1bf7b6318e190360d6894e55\nThis allows you to decide where to store the original image, as well as the transformed image. Like:\nswift\nlet context = [.storeCacheType : .all, .originalStoreCacheType : .disk] // transformed image to both memory && disk, original image to disk only\nsd_setImage(with:url options:[] context:context]). @stale Fresh. It's a 5.x feature, Image Transformer.\nYou can use any Core Image Filter or even your own custom implementation for image processing since it's a protocol.. Still a memmove crash. Seems your application is OOM.. Thanks for your report and I know the reason.\nBut, please goto https://github.com/SDWebImage/SDWebImageHEIFCoder and fire the issue here. Since it's related to that decoder plugin, not the Core SDWebImage framework.. I've moved your issue here: https://github.com/SDWebImage/SDWebImageHEIFCoder/issues/2. Fixed by SDWebImageHEIFCoder new release.. This readme seems out of date. Currently, we're a pure Objective-C/C code framework, without any line of Swift code in framework itself. So you can use whether static linking or dynamic linking.\nThis readme maybe about the old day, before Xcode 9 (Swift 4) was released, because at that time, all Swift framework should be dynamic linking. And you have to use use_framework! in your Podfile if you are using any Swift framework. So maybe that readme is for those simple user.. Another issue, maybe about the using Swift code from a static Objective-C library. You should using the bridging headers. Because if you directlly import SDWebImage from the Swift side, CocoaPods generated xcconfig does not supports this and will trigger a compile issue.\nSee: https://stackoverflow.com/questions/31884507/how-to-use-objective-c-cocoapods-in-a-swift-project. @zhongwuzw It's not a complete version of fix.\nCurrent we support one View Catalogy, load different operation at the same time. But some of feature was introduced to be only related to one image URL.\nFor example, image indicator. How does this behave when I call like this. Maybe this is a design issue but hard to fix by simple changes without a break behavior.\n```objective-c\nUIImageView *imageView;\n[imageView sd_setIndicatorStyle UIActivityIndicatorViewStyleWhite];\nNSURL url;\nNSURL highlitedUrl;\nimageView.highlighted = NO;\n[imageView sd_setImageWithURL:url];\nimageView.highlighted = YES;\n[imageView.sd_setHighlitedImageWithURL:highlitedUrl];\n```. And that patch, including a behavior change, I think maybe we need another patch or minior version. The 4.4.3 version release log is already done by @bpoplauschi , and the release data is announched. We just quickly release it, make others into next patch version or minor version.. Just quickly release. @bpoplauschi it's our project manager. We should follow the release change log. Other changes, just put into next patch release. This SDWebImage it's alive project, it's still maintained so don't worry about your commit will be lost or something.\nAfter this was merged, update your PR with a revert to this revert commit, then we can merge it together.. @zhongwuzw Recently new bugfix commit seems are correct and suitable. Just grab them together and release.\nThis commit was a partial sulotion in #2531 and merged by me. So I'm just responsible for this. After 4.4.3 releae, you can just reveret this revert commit pick it again, update your #2534. Then we can merge that MR together.. Just quickly release 4.4.3... @bpoplauschi seems out of contact again... \ud83d\ude02. LGTM. Use 5.x branch. There are one 'compressionQuality' arg. And all available coder plugins(JPEG/WebP/BPG/HEIF) support it.. 5.x have only one Spec. All coder plugins was seperated to the standalone repo. And MapKit, FL Plugin as well.\nIf you want to use SDWebImage with WebP coder plugin, you should also import it\npod 'SDWebImageWebPCoder'\n5.x is a big change from 4.x, which make SDWebImage more customizable and introduce many to extend the posibility of this framework can do (for example, Photos Kit, Image Transformer, Multiple Caches). Check migration guide for more information. This seems need more consideration. Could you please provide your use case with more detail information and let me understand why you need this ?\nNSOperationQueuePriority, according to Apple's doc and practice, it used to specify the priority for pending operations, inside NSOperationQueue, about \"which one should be firstly beeen executed if they have no dependency and the queue is concurrent?\". It does no effect if the operation is already started. See queuePriority\n\nThis value is used to influence the order in which operations are dequeued and executed.\n\nSo, from our current logic, if we queried a operation from the downloader, it must be a operation which already started (means the main method is called). It does not effect to do this.\nIf you means to optimise the QoS or something, the current implementation does already do this.. @jerelevine I understand your use case. Seems this is a better approach to let that SDWebImageDownloaderHighPriority works for more appropriate situation.\nOne suggestion, since this is a non-API break change, we can merge it in 4.x as well as 5.x. And I think we can also treat SDWebImageDownloaderLowPriority as well.. @jerelevine See #2562. Which is more robust code. If we want to merge, firstly merge that into master, then we can directly merge back to 5.x.. This is fixed by #2575. It's available in SDWebImage 4.4.4 version. Thanks for your contribution. \ud83d\ude04 . What about trying disable the predraw feature of FLAnimatedImage ? And you can also use their optimalFrameCacheSize.\nobjective-c\nFLAnimatedImageView *imageView;\nimageView.sd_predrawingEnabled = NO;\nimageView.sd_optimalFrameCacheSize = 1; // equals to `FLAnimatedImageFrameCacheSizeLowMemory`, means  \"The minimum frame cache size; this will produce frames on-demand.\"\nNote this is a trade-off between CPU && RAM, when disable all predrawing && buffer cache, for large GIF image you may face some slow animating render result.. @zhongwuzw What about this ? I think they can achive the same result. But make a simple (hack ? or not , as I think) solution.\nIncluding a fully support for whatever UIImage instance is over-design for those issue. Though your solutioin, using a category on UIImage instance can make it more customization, but actually, we don't need that. The main point you want that custom memory cost, it's because of animating, but not other things. So just keep it simple. > cost would not update when you set it again, need remove and reinsert.\nAre you sure ? I've tested it.. > Believe user would always use memory cache. It's not true.\nWhat does this means related to this issue ? If user disable memory cache, what problem will happen ? It need to query disk cache each time, and we fallback to the previous hack solution.. @zhongwuzw See the libcache source code, or Apple's open source re-implementation of NSCache using Swift.\nIf the cache entry alread registered, but new cost provided, only update the entry of cost..They already consider this case.\nBut anyway, I can keep code assumption simple (seems NSCache's documentation is really frustrating) and use a remove-then-insert instead.. That shouldCacheImagesInMemory is a issue. Seems we support the dynamic change of that property in previous SD version (but not put self.memCache = nil when its disabled). I can add a check as well.. @zhongwuzw If you're interested, check libcache.dylib 's implementation. I just means that Apple already supports you to update the cache entry for which is already stored but use a different cost. Whatever in Objc-env (Darwin system), or non-Objc-env (Linux)\nBut actually, this behavior is not ducumentated well. So it's OK to change to insert-after-remove. This part it not performance-sensitive.\nBesides this, any extra consideration ? @skyline75489 you can also take a review.. @zhongwuzw .....\nThis is why I don't want to start this topic. Because I know this will cause extra discussion but does not help for the issue or MR. I have a full-time job, some of the rare experience is under our company's doc. It's take a long time to explain each of them one by one during my work time.\ncache_set_and_retain is a C method in libcache. If you're really a cusrious guy, you can have a check as the implementation. But mostly, just use insert-after-remove, it's OK. No huge performance difference and it's more safe.. @zhongwuzw I update the PR to use the category method for FLAnimatedImage memory cache calculation. Now I think it's time to merge this fix.. Time to roll 4.4.4.\nThis PR use the fix to directlly solve the issue of FLAnimatedImage memory cache cost. The original discussion of how to custom memory cost, take quite long time. But after that been merged, this PR just about the FL part. No something big issue about this.\n. @kinarob @skyline75489 Please help me to review this...I think there are no more issue.. UIView category (UImageView+WebCache, etc) is designed to right be used for View loading, and it's designed to keep Cell-Reuse capable. All you need to do is call sd_setImageWithURL: during Cell reusing method (cellForRow for tableView or cellForItem for collectionView). It has many internal logic such as placeholder && image automatically set, automatically cancel previous image and refresh (cell-reuse).\nSo, from your demo code, it seems you're using a view to load image, but the completion block itself will trigger refresh or some code to manage cell reusing logic. Don't do this. Instead, directly use SDWebImageManager.sharedManager loadImageWithURL:, this does not trigger any self.image = xxx set image process to mass up the problem.\nYou can have a try and see the result.. This seems a issue you have tro fix it by your server, or write some extra code(not recommaned, but possible).\nYou should have a basic knowledge about the RAM usage of a image. One image's memory consuming bytes, is not what its compressed image foramt data (JPEG/PNG/HEIF or any other) size, but only about its how much pixel it have.\nThe bytes one image may occupy when showing on the screen, it's equals to\nall bytes = pixels count * bytesPerPixel(normally, 4 for alpha channel image)\nThis logo resolution you provide, will consume 1100 MB when rendering on the screen. It's an un-avoidable cost for memory.\nOne solution, ask your server provider to pre-scale all the image you use, to fit for suitable size (such as screen pixel count). You ask your the server to accept a URL with query params like this: https://www.server.com/large.png?width=1080&height=1920.\nAnother solution, do pre-scale in the client side. This need you to write a custom plugin currently in 4.x. You should use Apple's Image IO framework with their thumb API CGImageSourceCreateThumbnailAtIndex with a max pixel size limit kCGImageSourceThumbnailMaxPixelSize. Maybe I can consider a better solution in the future.\nNote you SHOULD NOT consider to use transformer feature (introduced in 5.x, or manually by your own in 4.x using delegate method). Because, by the time the image was decoded, they already occupied the RAM. And sysmtem will kill your app. You have to use something thumb decoding solution I talked above, to avoid full pixels generation.. \ud83d\ude15 iPhone XS Max actually the physical RAM is 4GB. So theoretically it can decode this large image without OOM (unless your phone is under heavy memory pressure)...Maybe I need an iPhone XS Max test device to check back.. @cdunkel  I brought a iPhone XS Max from our QA for testing. I can reproduce this issue (not every time, but it's possible on iPhone XS Max)\nFor iPhone X/iPhone 8 (iOS 12.1), when download and decode this image, and cause allocation failed, there will be a malloc failed log, and Image IO framework will return a nil CGImage, so we can finally mark this deciding failed. No kill or jetsam even was fired.\nSDWebImage iOS Demo(2662,0x16f6d3000) malloc: can't allocate region\n*** mach_vm_map(size=1150517248) failed (error code=3)\nSDWebImage iOS Demo(2662,0x16f6d3000) malloc: *** set a breakpoint in malloc_error_break to debug\n2018-12-14 11:30:55.979711+0800 SDWebImage iOS Demo[2662:389406] [Unknown process name] CGSImageDataLock: Cannot allocate memory\nHowever, when running on iPhone XS Max (12.1), the system framework does not log anything when allocate failed. Instead, then just trigger a OOM process without any other useful information.\n// No log from malloc failed\nMessage from debugger: Terminated due to memory issue\nAnd the device console contains useless log only.\ndefault 11:26:21.813409 +0800   SDWebImage iOS Demo Received memory warning.\ndefault 11:26:22.027039 +0800   kernel  EXC_RESOURCE -> SDWebImage iOS Demo[2661] exceeded mem limit: ActiveHard 2048 MB (fatal)\ndefault 11:26:22.028253 +0800   kernel  137820.072 memorystatus: killing_specific_process pid 2661 [SDWebImage iOS Demo] (per-process-limit 10) - memorystatus_available_pages: 37808\ndefault 11:26:22.040183 +0800   assertiond  [SDWebImage iOS :2661] Setting jetsam priority to 3 [0x100]\nerror   11:26:22.040616 +0800   assertiond  [SDWebImage iOS :2661] SyscallError: setpriority(PRIO_DARWIN_ROLE, 2661, 3): No such process\nerror   11:26:22.041489 +0800   SpringBoard HW kbd: Failed to set (null) as keyboard focus\ndefault 11:26:22.042390 +0800   backboardd  Connection removed: IOHIDEventSystemConnection uuid:3C5C64B4-9BB0-4F84-883C-27750D7A16CC pid:2661\nMaybe this is because the new system management for those iPhone XS/XS Max/XR (arm64e) devices (note that iPhone XS Max contains 4GB mem, but OOM detect use 2GM limit) . I'll try to investigate this issue deeply later. \nCurrently I can provide you a demo on how to use thumb decoding (which means, decoding only thumb pixels without allocation failed, but not firstly generate full pixels and then scale down, which does not help for this issue). @cdunkel You can using Image IO (for PNG/JPEG/HEIF, Apple's supported format) for thumb decoding, I test it locally on the iPhone XS Max, it works. The sample code looks like this (written in 4.x's protocol API). You can create a subclass of SDWebImageIOCoder and override this method instead (Don't forget to adjust plugin orders in SDWebImageCodersManager).\n```objectivec\n- (UIImage )decodedImageWithData:(NSData )data {\n    if (!data) {\n        return nil;\n    }\nCGImageSourceRef source = CGImageSourceCreateWithData((__bridge CFDataRef)data, nil);\nif (!source) {\n    return nil;\n}\nNSDictionary *properties = (__bridge_transfer NSDictionary *)CGImageSourceCopyPropertiesAtIndex(source, 0, nil);\nNSUInteger pixelWidth = [properties[(__bridge NSString *)kCGImagePropertyPixelWidth] unsignedIntegerValue];\nNSUInteger pixelHeight = [properties[(__bridge NSString *)kCGImagePropertyPixelHeight] unsignedIntegerValue];\nNSUInteger exifOrientation = [properties[(__bridge NSString *)kCGImagePropertyOrientation] unsignedIntegerValue];\nif (!exifOrientation) {\n    exifOrientation = 1;\n}\nUIImageOrientation imageOrientation = [SDWebImageCoderHelper imageOrientationFromEXIFOrientation:exifOrientation];\nNSUInteger maxPixelSize = 4000; // This should be a option value from the caller method\n\nCGImageRef imageRef;\nif (pixelWidth > maxPixelSize || pixelHeight > maxPixelSize) {\n    // Using thumb pixel decoding\n    NSDictionary *options = @{(__bridge NSString *)kCGImageSourceCreateThumbnailFromImageIfAbsent : @(YES), (__bridge NSString *)kCGImageSourceThumbnailMaxPixelSize : @(maxPixelSize)};\n    imageRef = CGImageSourceCreateThumbnailAtIndex(source, 0, (__bridge CFDictionaryRef)options);\n} else {\n    // Using full pixel decoding\n    imageRef = CGImageSourceCreateImageAtIndex(source, 0, nil);\n}\n\nUIImage *image = [[UIImage alloc] initWithCGImage:imageRef scale:1 orientation:imageOrientation];\nCGImageRelease(imageRef);\nCFRelease(source);\nimage.sd_imageFormat = [NSData sd_imageFormatForImageData:data];\n\nreturn image;\n\n}\n```\n\nHowever, I need to consider whether it's suitable to put this feature in our Core Framework on 4.x. Because now our decoder does not support a extra options to pass from the top-level API to the bottom. Maybe if we have to do, we can put it on a property of SDWebImageIOCoder shared instance.\nOn 5.x, I'll make this a optional value through decoding option, to allow customization of max limit pixel count during decoding. This can solve some issue.. However, the thumb decoding feature is tied to specify image format (some format does not support, like TIFF/GIF) and decoder compatibility. For example, WebP and Google's libwebp decoder, does not support any thumb decoding. You MUST always generate and allocate the full pixel bytes in the memory.\nSo this means if you have a 30000 * 30000 WebP image, you'll occupy those 3.5GB memory without any workaround. So this is why I say \"The better solution, is to avoid download full pixels image, ask your server to do pre-scale\".. @zhongwuzw Once you call malloc to allocate 2GB memory on iPhone XS Max (not apply for iPhone X), the OOM detector start to jetsam and kill. I don't know why but this the real device take the behavior.\nWhether you move the bitmap buffer to CA render server (when draw a bitmap context, leave decompressImage turn on) or keep the bitmap buffer on App process, these does not help. They just check whether total memory is used. So to fix this case, you have to avoid allocation large buffer than the limit. Allocate a large buffer to decode then scale down does not help anything.. @zhongwuzw I know the size of bitmap buffer. The system consume memory as well. Such as the Wired Memory is not purgeable. So the sum over 2GB and trigger a jetsam. (This is actual the strange thing. Because iPhone X (3GB RAM), does not trigger jetsam even for the same memory pressure)\nI list my test result when running on iPhone XS Max. You can also have a try for this case.. This is fixed by #2575. It's available in SDWebImage 4.4.4 version. Thanks for your contribution. \ud83d\ude04 . > GIF can not be loaded when imageData is GIF and image is placeholder.\nIt seems a bug(?). This issue can be caused by this condition.\nimageData is GIF representation && image == nil && placeholder == nil\nCurrent code will cause a earily return without disk cache query and do decoding.\nHowever, I don't understand your fix to change the || into &&. If the imageData is GIF representation, whether or not the placeholder exist, we need to do decoding (because placeholder can also use FLAnimatedImage and do animting. Note this use case).\nI'll create and fix it.. I check the code again. That condition:\nimageData is GIF representation && image == nil && placeholder == nil\nActually can not happend during View Loading. See UIView+WebCache.m code here:\nhttps://github.com/SDWebImage/SDWebImage/blob/4.4.3/SDWebImage/UIView+WebCache.m#L134-L144\nWhen the imageData exist and it's a GIF representation, the image is always nonnull. So this case is not possible during normal pipeline.\nCould you tell me what case of your usage can trigger this bug ? @cntrump . This issue has been solved by #2588. It's available via 4.4.4 version. So this PR can be closed now. Thanks for your contribution \ud83d\ude04 . This is a issue of usage of CocoaPods, actually, but not what a Pod framework can do.\nFor multiple target project, you must use the both GIF subspec for each target. If you use one target with subspec 1, another with subspec 2, CocoaPods allow this usage and will generate two different frameworks (static libaray) with two xcconfig, instead of the only one. It\u2019s a designed behavior of CocoaPods. You can even make your different targets use different versions of same Pods.\nA better solution, if you write Podfile (instead of some Podfile automatic pre-generator), you can define a ruby function called shared pod to be used across the targets.\n```ruby\ndef shared_pods\n  pod 'SDWebImage/GIF'\nend\ntarget 'App'\n  shared_pods\n  pod 'KVOController' # only for App\nend\ntarget 'Extension'\n  shared_pods\nend\n```. Anyway, if some people don\u2019t know the usage about multiple tagets with CocoaPods, they\u2019ll enter this trap. I suggest to update the Wiki page about common problems.. Seems this is a usage issue. I think the answer above works for the this case. @SwordJason any extra issue ?. This does not help for huge images.\nThe image data buffer (NSData), is a compressed format, and does not cause too much of RAM. For example, A 1KB JPEG can represent a 10000*10000 pure color images.\nThe biggest cost is the image bitmap buffer. The bitmap buffer 's RAM usage is only related to the resolution.\nBytesPerPixel = 4 // For RGBA8888 32 bit images\nBytes = BytesPerPixel * Pixel Count\nFor example, a 10000*10000 pixel image, can consume 382MB RAM.\nIf you want something about the workaround for huge images. Check #2560 for the same issue.\nAnd I'm doing a propose for thumb decoding (decode a small thumb image when the output resolution is out of limit). I'll notify you when my PR is ready.. # Current break change (Need change code)\nSDMemoryCache\nSDMemoryCacheCostForImage this API is introduced during 5.0.0-beta1, and now is removed from 5.0.0-beta4. Use sd_imageMemoryCost property instead.. @skyline75489 @zhongwuzw This PR has been updated because of that #2486 is merged.So the diff is much more simple.\nSome related coder's plugin like SDWebImageFLPlugin && SDWebImageYYPlugin need to be updated, after this PR is merged and 5.0.0-beta4 is released.\nI'll update the Migration-Guide to point this change.. # Current break change (Need change code)\nSDImageCache\n\ngetSize: RENAMED to totalDiskSize\ngetDiskCount RENAMED to totalDiskCount\n\nSDImageCacheConfig\n\nmaxCacheAge RENAMED to maxDiskAge\nmaxCacheSize RENAMED to maxDiskSize. @kinarob Maybe we can mark these method as deprecated with replacement in the next minor release of 4.x (4.5.0 maybe). But I don't know whether this is really necessary ? (This seems a little verbose for user. I think if we want to break API, break them once instead of multiple times).\n\nSince we've already introduce some naming changes for semantic reason in 5.0.0-beta1~3, I think this one can be the same one as normal. I will update the API break changes into the  5.0-Migration-guide, then generate a API diff just before 5.0.0-beta4 was released.. I check again. Seems that dispatch ground balance issue is not related to this. I'll close this.. @cntrump Please clone and check whether this PR solve your use case. I write a test case to simulate your code. Am I right ?. setImageWithCacheTypeBlock is just a trick to solve API-break, actually. This is why in 5.0 it's already been changed with more args.\nSee: https://github.com/SDWebImage/SDWebImage/blob/5.x/SDWebImage/UIView%2BWebCache.h#L20. And even with two more arg cacheType && url, this usage can not be solved at all. Because I can always use code to trigger a case where the placeholder caused args are the same as SDWebImageManager loaded result.\nFor example, to simulate a case that cause placeholder to be equal to network loaded image, I can use the code below.\n``objective-c\nNSURL *url = [NSURL URLWithString:@\"https://github.com/cntrump/pics/raw/master/SDWebImage/giphy.gif\"];\nUIImage *cacheImage = [[SDWebImageManager sharedManager].imageCache imageFromCacheForKey:url.absoluteString];\nSDWebImageManager.sharedManager.cacheSerializer = ^(UIImage * _Nonnull image, NSData * _Nullable data, NSURL * _Nullable imageURL) {\n    return nil; // This returnimageDataas nil,cacheTypeas.none`\n};\n[_imageView sd_setImageWithURL:url placeholderImage:cacheImage options:SDWebImageRetryFailed completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n}];\n```\nYou can not distinguish the difference use any args from that setImageBlock... So this is point.. Sadly it can not. Your PR's code still assume this case\n!imageData && image && cacheType == none\nto match a placeholder and should not do decoding. However this is not correct in the case I wrote. It's a valid case for network GIF image and should do decoding. \nWhen user provide cache serializer or write custom download operation, the network downloaded data can be nil and cacheType == none.\nThe only check to distinguish a image loading success or not, only concern about the image instance, but not gurantee there is imageData or not.. After I check and run test cases again, it seems that cacheSerilizer current implementation, does not effect the imageData arg inside manager completion block.\n\nBut however, the key design of SDWebImage in curent version, does not guarantee A Download must callback the nonnull image data when success. The only guarantee is that image is nonnull. So this is still a posible issue (But it's quite rare than this).\nFor example, I can write a custom download operation, which just return the image instance. This is suitable. All the code does not, and don't need to check if (image && imageData) { // success}. That #2404. Actually do only one thing toward current master branch code.\nobjective-c\nBOOL isPlaceholder = (!imageData && image && cacheType == SDImageCacheTypeNone)\nThen the thing can be done.\nBut I don't like those fix for API-breaking, by introducing a extra SDSetImageWithCacheTypeBlock. The fix is only appied for FLAnimatedImage. And should not be used for any further cases. So it's better to use some other hack way to hide the implementation.. @zhongwuzw Contact me in IM like WeChat, GitHub discussion is not effective at all. Or maybe we can use some IRC channel.. @zhongwuzw It's useless to consider placeholder, until you create your MR to use async operation.\nAsk yourself this case:\n\nSetImage a placeholder with GIF reporesentation -> Do async decoding \nSetImage a memory cached image (non-GIF representation, or a sd_FLAnimatedImage asscociated one) -> Do not decoding again, do a setImage call (imageView.image == image)\nAsync decoding finished, Do a setImage call (imageView.image == placeholder)\n\nThen the final rendered image is placeholder, but not the target image. User will complain about that that the imageView showing palceholder randomly.. My though after long long history for FLAnimatedImage embed for SDWebImage, it's that, if you can not gurantee your async do GIF rendering for FLAnimatedImage is safe, we'd better totally revert to 4.1, which does not use any asynchronized operation. It's a safe and more correct way to solve all the problem, with just little performance cost.. Contact me in WeChat QQ mail or Lark, maybe you don't get the point and I think it's better to talk about this with efficiency.\nI mean all your that code, can simply by replacing current master branch code using\nBOOL isPlaceholder = (!imageData && image && cacheType == SDImageCacheTypeNone); // Or you can call this naming like isNotRealImage or whatever\nDon't need to write branch of code. They work the same (But I don't know why you can not realize this).\nThe reason we should filter this case, because of the async operation order. You can not put placeholder into async operation , which will cause wrong order. This is the point.. @lly4155 What your desired behavior ? If the operation is dealloced, don't send notification ? Or any other use case. Provide information can help us find the solution.. Looks good for me. Seems a valid check. But I don't know whether this happend in real world application or not. The previous check for isFinished is because we find it in real world application in debug breakpoint.\nWhat the connection between this and #2575 ? I don't get the point.. @zhongwuzw I believe most user, don't want to keep the download operation alive for longer. Because operation contains many alive instance (it store the progressBlock && completionBlock, which retains many things). So this is why the history code use weak self. You can have a search for git history.\nI think to fix #2573, just don't post any notification when operation is dealloced (the weakSelf becomes nil).. Seems related to 1f33e95 and cd977d7. @zhongwuzw ...I can not understand why place a __strong strongSelf = self instead of directlly use block to capture self have any difference ?\nA block will capture any variable inside the block, which hold a strong reference. Here the self should be retained by the block, and after that dispatch async main queue, the block is called, the self can be dealloced. I don't know the case cause that issue.. Is that different in memory management ? Actually.\n```objective-c\ndispatch_async(dispatch_get_main_queue(), ^{\n    [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:self];\n});\n__strong typeof(self) strongSelf = self;\ndispatch_async(dispatch_get_main_queue(), ^{\n    [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:strongSelf];\n});\n```. I think, the most struggle issue for this PR is that..\nNobody can answer why previous code cause crash, and nobody can gurantee changing this code does not cause crash. At least for myself it's the truth. So I can not provide any review result for this. Maybe I need sometime to figure out the reason or ask someone to answer this question ?. Time to roll 4.4.4 version release. This PR, maybe contains some issue. We can have a try and see the result. I'll mention the potential issue in the release change log about this.. Seems that PR merged from the the 5.x, but not update the API for usage...I merge this fix.. I prefer the white background one (The black one seems a little deep in color from my mind).\nI think the second and forth one are both good in the left side. \ud83d\udc4d . This is needed. The URL error code is only apply for NSURLErrorDomain. Different domain have different meanings for error codes.\nHowever, we support any customization id<SDImageManager>, which can use their error code && error code domain. Like SDWebImagePhotosPlugin. The error code is from Apple's PhotoKit.\nFor example, the error is like this one\nDomain=CloudPhotoLibraryErrorDomain Code=25 \u201cRecord ***the_record_id*** does not exist\u201d. I merge this firstly, then I need to revert this revert commit again because this cause wrong logic issue.. The valid use case of a custom SDImageLoader from SDWebImagePhotosPlugin\nobjective-c\nPHImageRequestID requestID = [[PHImageManager defaultManager] requestImageForAsset:asset targetSize:targetSize contentMode:contentMode options:requestOptions resultHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) {\n    NSError *error = info[PHImageErrorKey];\n    if (error) {\n        dispatch_main_async_safe(^{\n        if (completedBlock) {\n            completedBlock(result, nil, error, finished);\n        }\n    }\n// ...\n}\nBut the error domain is CloudPhotoLibraryErrorDomain, and current check mark this as failed. A better, or correct solution, as least should filter only NSURLErrorDomain. Because error code does not take any meannings unless you specify a correct domain.. That delegate is for user, not for developer.\nFor example, I'm the author of a custom loader plugin SDWebImagePhotosPlugin. I can not touch that manager.delegate because is for user's task. Instead, I want to make sure whether or not you  use delegate, the code works.\nCurently I have to create a manual code with domain: NSURLErrorDomain, code: NSURLErrorCancelled. Which is actually a hack, but not good taste API. See: https://github.com/SDWebImage/SDWebImagePhotosPlugin/blob/master/SDWebImagePhotosPlugin/Classes/SDWebImagePhotosLoader.m#L152. At least, you should always check NSURLErrorDomain.  For example, anyone who use Custom Download Operation or Custom Downloader, can provide arbitery codes. Like vImage_Error, CFNetworkErrors, FTP Erros, etc. Which can share the same error code but for different domains. It's a bug.. I'll consider this later. Maybe this retry failed logic need another way to allow be consistent with the Custom Loader feature.. All your feature request, Already been done in 5.0.0-beta...You can have a try. See: https://github.com/SDWebImage/SDWebImage/tree/5.0.0-beta3\nobjective-c\nUIImage *decodedImage = [SDImageCoderHelper decodedAndScaledDownImageWithImage:image limitBytes:1024*1024*30]. The second question is that bitmap context draw issue. The CGContext draw result a error. I'll try to investigate later.. Fixed via #2585.. For 5.0.0\u2018s WebP coder, see https://github.com/SDWebImage/SDWebImageWebPCoder/pull/4. \ud83d\ude05 Emm...Anyone can review ? Or if you think the image decoding/encoding part is expert concept. I can take the responsible of the correctness. Review the code style or something non-related to the logic is OK. @bpoplauschi @zhongwuzw @skyline75489 @mythodeia @kinarob \nAnd I'll release the 5.0.0-beta4 soon, with the update for SDWebImage/SDWebImageWebPCoder#4. We can let our 5.0.0-beta user to have a try firstly.. \ud83d\udc4d. Seems a interesting feature request. I previously have a idea about it, but after some consideration I think this feature need some detailed search before writing code.\nFor most people, they use SDWebImage with tableView or collectionView. So maybe it's not really useful to provide a retry logic, because it's all been done by tableView && collectionView's reusing function. But it's OK that user use normal standalone imageView and don't want to implements complicated logic by their own.\nWe must answer some questions before we find a complete proposal to do. I can list some topics here.\nDoes the retry logic checked by framework or user\n\npossibly include a delegate that checks to see if the retry should occur based on the error and the retry count\n\nThere are actuallly two choice for retry. One is that you specify enough context or option during download, then we do the automatically retry. Another is that the check we delegate to user, framework just do final retry code without know about the concept of retrying.\nBy framework\nThe API may looks like this one:\n/**\n A NSUInteger value to specify that the total retry count when image download process failed. If the retry happended, the operation will not been marked finished and retry with the same args, until it success or the retry times reach this limit value. (NSUInteger)\n Defatuls to 0, which means does not do any retry.\n */\nFOUNDATION_EXPORT SDWebImageContextOption _Nonnull const SDWebImageContextDownloadRetryCount;\nThen you just need to pass this retry count limit value to the image request you want. It's a per-image-request config.\nBy user\nThat simple retry count limit is one choice. Another choice it's to let the user do the check logic. It's OK to add a delegate method for manager. It's also OK to add it into downloader level since it's not related to cache, but that will cause downloader code become more complicated and does not benefit by using Custom Loader (Each loader need write code to implements it).\nA API may looks like this one:\n```objective-c\n/**\n Control the retry download logic to mark as finished.\n@param imageManager The current SDWebImageManager\n @param imageURL The url of the image\n @param error The download error for the url\n @param retryTimes The current retry times for current image load, the first time is 0. And will be increased each time you do retry.\n @param loaderOperation The download operation. It's typically SDWebImageDownloadToken, You can use it to check more detailed information (like HTTP response) if needed.\n @return Return true to do a retry automatically, false to mark it finally as finished\n /\n- (BOOL)imageManager:(nonnull SDWebImageManager )imageManager shouldRetryDownloadForURL:(nonnull NSURL )imageURL withError:(nonnull NSError )error retryTimes:(NSUInteger)retryTimes loaderOperation:(nonnull id)loaderOperation;\n```\nDoes the retry logic need to change original URL ?\nThis is also important topic to know. Because retry for same URL multiple times may be not suitable for some logic. For example, A CDN image URL may have multiple backup host, one image URL was failed does not means all host should be failed. So it's a use case that we want to change a new URL instead.\nIf this feature is applied, the above API should also been updated. User must return a new URL for this. Or maybe we can tweak the API to let user combine the existing request modifier\nSDWebImageDownloaderRequestModifier logic (When retry count == 0, return first URL host, retry count == 1, return second URL host). Anyway, this need some research before writing code.. @jerelevine Any good idea about this feature request ?\nActually, from myself's use case, I don't have a really strong rely on this automatically retry. Do you have some good use case for your own Apps ? Which can help me to understand and choose the proper solution (using delegation mode or the context mode, or even better) to solve this problem.. What about this fix ?\nI think we can hide this new API firstly. If our users have a strong requirement for that API, we can make it open later in 4.5.0.. Time to roll 4.4.4. This issue keep too long time. We've run into agreement that the fix way. But whether or not to expose the public API need extra consideration.\nThis PR, just firstly use the private API to fix the issue by our own. If some user need the new API to take advance of that SDInternalSetImageBlock, we can open this API later in 4.4.5 or 4.5.0. No break is needed.. @kinarob @skyline75489 Please help me to review this as well.. @alexandre-g  The error code -999, is from the cancel method call of download operation. And it should be propagated to the user (Or there are no any callback to indicate current load is been cancelled and failed).\nIf you don't care about the User or Framework which cancell the download process, you can filter this error code.\nswift\nif let error = error, error.code != NSURLErrorCancelled {\n  // ...\n}. A little strange. Is this always reproducible ? I can run a local image server which return 404 to have a check.. @alexandre-g Seems I misunderstand your use case, so please, provide your detailed use case and I can provide solution, or listen to your feature request and work a PR for this.\nIf you care about the HTTP response status code\nIn this use case, actually, you actually not care about what NSError is or what code it is. You need to check the NSHTTPURLResponse.statusCode\nIn 5.x, you can use the following code to check the status code.\nswift\n    func testStatusCode() {\n        let imageView = UIImageView()\n        let url = URL(string: \"https://zh.wikipedia.org/wiki/File:PNG_transparency_demonstration_1.png\")!\n        imageView.sd_setImage(with: url) { (image, error, cacheType, url) in\n            let operation = imageView.sd_imageLoadOperation(forKey: \"UIImageView\") as! SDWebImageCombinedOperation\n            let downloadToken = operation.loaderOperation as! SDWebImageDownloadToken\n            let response = downloadToken.response as! HTTPURLResponse\n            let statusCode = response.statusCode\n            print(\"status code: \\(statusCode)\")\n        }\n    }\nHowever, in 4.x (master branch), there are no such public API to check within per-image-request level. But you can use NSNotification to add listen to SDWebImageDownloadReceiveResponseNotification, which will give you a download operation and you can get the HTTP response. The code looks like below. (Also works for 5.x)\nswift\n    func testNotificationStatusCode() {\n        NotificationCenter.default.addObserver(forName: .SDWebImageDownloadReceiveResponse, object: nil, queue: nil) { (notification) in\n            if let downloadOperation = notification.object as? SDWebImageDownloaderOperation {\n                let response = downloadOperation.response as! HTTPURLResponse\n                let request = downloadOperation.request!\n                let statusCode = response.statusCode\n                print(\"url: \\(request.url!.absoluteString)\")\n                print(\"status code: \\(statusCode)\")\n            }\n        }\n    }. ### If you care about the native URLSession error in NSURLErrorDomain instead of HTTP standard status code\nBut, if you care about the native NSError error code listed in NSURLErrorDomain. I agree that current implementation, cause the URLSession framework, to always produce a NSURLErrorCancelled code, because we implements the delegate method, and return that NSURLSessionResponseCancel.\nMaybe we can provide a way, to let we pass NSURLSessionResponseAllow, but manual cancel the data task. However, this cause a memory leak due to #1744 . This need another workaround.\nOne solution, is that, we translate some standard HTTP status code, into the native NSURLErrorDomain code. Maybe it's not a good idea but a quick fix.. This PR does not cause extra API break and be merged immediately into 5.0.0. Maybe we can merge it later.. This PR does not cause extra API break and be merged immediately into 5.0.0. Maybe we can merge it later.. @kinarob This changes is about the Force Decode feature. (Option named shouldDecompressImages in 4.x, renamed with shouldAvoidDecode in 5.x). The currnet implementation for WebP does not do it was designed for.\nThe force decode feature, it's original designed for Image/IO. Because Image/IO use the lazy decoding optimization, which produce a \"empty\" CGImage, via the common API CGImageSourceCreateImageAtIndex. The CGImage does not contains any bitmap buffer and consume memory. Only when you draw that CGImage, Image/IO start to do decoding and produce bitmap to allocate memory.\nHowever, since many people using SDWebImage with UITableView or UICollectionView image, the problem is that if you grab many many \"empty\" CGImage and let it rendered on the UIImageView inside cells. You will trigger this lazy decoding process just right in the main queue (called from Core Animation). This reduce the frame rate in visible effect. To solve the issue, we provide that Force Decode feature. Which trigger the decoding in the background queue in advance to avoid this.\nHowever, it's a trade-off of CPU/RAM. Because if you trigger the lazy decoding in advance, you also allocate the bitmap buffer in advance, but not allocate when used. Which can increase the total memory usage. So this is why there are a shouldDecompressImages option to let user disable this.. However, things become a little different for WebP images.\nWebP images, however, does not using Image/IO, and does not using anything lazy decoding. When our WebPCoder call libwebp to do decode, it always produce and allocate the bitmap buffer just in time. No lazy. So, for this cases, that Force Decode feature does not do something useful as Image/IO does, because it's already been decoded and contains bitmap buffer.\nBut a interesting thing, is that way we used for Force Decode. You should understand, draw on CGContext is JUST one way to force decode the bitmap buffer, not the only way (You can also use other methoid, but this one is the most suitable for render on iOS).\nWhen you draw CGImage in the CGContext, you also have another benefit. After call CGContextDrawImage for a CGImage, Core Graphics will transfer that CGImage's bitmap buffer, from your App's process, into the Render server process (Actually, the SpringBoard process on iOS; the WindowServer process on macOS). So you will see your App memory become lower. But the total physical memory usage does not change. (You'll notice your \"App memory\" drop and \"Other Process memory\" grow)\nThis may be useful for some people, because each texture render on iOS screen, should be submitted to render server, this make the transfer step in advance. So I think it should be controled with the same option with current  shouldDecompressImages. However, if user disable that shouldDecompressImages. You should not try to do Force Decode and do a extra draw on CGContext.\nNote: The Animated WebP have to use a CGContext as canvas, because of that animation decoding logic. See WebP's standard about how animation rendered. It's not about force decode at all.. If anyone can read Chinese or using the Google Translate (Sorry I did not translate that article into English...). Here is a article written by me, to tell you about \"What is Force Decode ? What problems it solved ? \". I think it can answer all the questions about that.\nThe blog link: \u4e3b\u6d41\u56fe\u7247\u52a0\u8f7d\u5e93\u6240\u4f7f\u7528\u7684\u9884\u89e3\u7801\u7a76\u7adf\u5e72\u4e86\u4ec0\u4e48\n. It\u2019s a bug...Maybe at that time I forgot something when migrate code from the original file. It was already fixed in 5.0 SDImageWebPCoder. See: https://github.com/SDWebImage/SDWebImageWebPCoder/blob/master/SDWebImageWebPCoder/Classes/SDImageWebPCoder.m#L150. What image url did you try ? Did that too big ? Or did your device is running out of momory (OOM) ?\nThe NSAllocateMemoryPages will throw a exception when the system have no enough memory to allocate. Like this one:\n\n Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: ' NSAllocateMemoryPages(10969344) failed'. Seems that temp copy of mutable NSData cause a memory peak. The code:  SDWebImageDownloaderOperation.m:329.\n\nMaybe the progressive decoding logic of queue management should be done to solve this. However, if you don't use progressive decoding, this should not cause any issue.\nCould you please explain the detail of this behavior ? Does the slow means the download speed ? Or the time between setImage <-> completionBlock callback ?\n\nI disabled progressive feature but the the downloading was still too slow. I think we can fix the same thing like this:\n\nhttps://github.com/SDWebImage/SDWebImageWebPCoder/pull/5/files. @IljaDaderko  The transformer is a manager-level feature, and it's compatible for prefetcher because prefetcher is based on the manager. It can be used for both image-request level, or the central control. You can use context option to bind a transformer for all your prefetch request.\nThe 5.0.0-beta way to use prefetcher with transformer, it's that for each type of transform you used, create a temp transformer, then specify the custom context option. For example, to use prefetcher for use a list of urls with resize-transformer, use the code like below.\nswift\nlet urls: [URL]\nlet prefetcher = SDWebImagePrefetcher.init(imageManager: .shared)\nlet transformer = SDImageResizingTransformer(size: .init(width: 100, height: 100), scaleMode: .aspectFit)\nprefetcher.context = [.imageTransformer : transformer]\nprefetcher.prefetchURLs(urls). Note since 5.0.0 release version is not been pulished. So this API may be changed. For example, if you think creating a temp transformer and update the context property it's not a good idea, we can change that into a new API with extra context arg like:\nobjective-c\n- (nullable SDWebImagePrefetchToken *)prefetchURLs:(nullable NSArray<NSURL *> *)urls\n                                          context:(nullable SDWebImageContext*)context\n                                          progress:(nullable SDWebImagePrefetcherProgressBlock)progressBlock\n                                         completed:(nullable SDWebImagePrefetcherCompletionBlock)completionBlock;\nBut there are some historical issue of prefetcher, so that you see the current option and context is a property, but not a optional arguments of prefetchURLs: method, unlike other APIs (Manager/View Catagory, those use a argument instead of property). @IljaDaderko It depends on your own use case. The Image Transformer feature, is designed to be customized. It's a protocol and you can provide your own implementation by your need.\nFor example, from your description, I think you want to limit the bitmap images memory size for Non-Retina display device. So I can create a demo code like this:\n```swift\nclass DemoScaleDownTransformer : NSObject, SDImageTransformer {\n    var transformerKey: String = \"DemoScaleDownTransformer\"\nfunc transformedImage(with image: UIImage, forKey key: String) -> UIImage? {\n    /// scale down to the device scale factor\n    let ratio = image.scale / UIScreen.main.scale\n\n    if ratio > 1 {\n        let newSize = CGSize(width: image.size.width / ratio, height: image.size.height / ratio)\n        let newImage = image.sd_resizedImage(with: newSize, scaleMode: .fill)\n        guard let cgImage = newImage?.cgImage else {\n            return image\n        }\n        /// make the scale factor match the currernt device, both @3x, @2x, @1x share the same logic point size\n        return UIImage(cgImage: cgImage, scale: UIScreen.main.scale, orientation: image.imageOrientation)\n    } else {\n        return image\n    }\n}\n\n}\nlet urls: [URL] = []\nlet prefetcher = SDWebImagePrefetcher.init(imageManager: .shared)\nlet transformer = DemoScaleDownTransformer()\nprefetcher.context = [.imageScaleFactor : 3, .imageTransformer : transformer]\n/// Note you can specify a scale factor to indicate your network image is @3x\n/// If you don't provide, we will calculate the scale factor based on SDImageScaleFactorForKey built-in logic\nprefetcher.prefetchURLs(urls)\n```\n. ...If you use the init one, did you keep a reference of that prefetcher ? Like self.prefetcher = prefetcher\nAll Objective-C and Swift language, use the Reference Counting to manage memory resource. If one object is not retained by any other object, it will immediately dealloced. If you're new to iOS programming, you should check Swift-AutomaticReferenceCounting\nThe shared instance use the static to keep in memory all the time without dealloc. So it always exists and can callback your completionBlock after load finished.. Objective-C method return any CF data type, does not follow CF rules. You must annotation it with either CF_RETURNS_RETAINED (caller call CFRelease) or CF_RETURNS_NOT_RETAINED (caller don't need call CFRelease).\nThe CF Create / Get Rule of naming, is for C function, but not for Objective-C method.. See all the Objective-C API with CF data type inside all the Apple's framework, like UIImage.CGImage.\n\n. @bizibizi  I can not reproduce the issue. Could you please try the 5.0.0-beta4 version firstly ? And also, could you please paste your demo code ?\nThis function is in our test cases, it should not break because we have CI to trigger it. And I run a local tests which generate 4 image formats. Always work.\nSee the screenshot: \n\n. OK....I understand the issue. It's should describe like that sd_imageData(as: _, compressionQuality: _) does not work for compressionQuality arg. The output is always the same\nAnd after I check the code, it's a obvious bug that trigger this. And not only the compressionQuality, the firstFrameOnly arg is get effected as well. I'll create a MR to fix that as soon as possible.. @bizibizi This issue have been solved by #2602. We will release a 5.0.0-beta5 version soon (because we find a serious issue which break some user's install && build).. Please provide the information by using our issue template, instead of remove them.\nAnd, what Xcode && CocoaPods version did you use ? It's a Xcode standard build settings.. @winfredzen Could you provide the information about the environment ? Like Xcode version && CocoaPods version, iOS firmware version, a demo project is better. Because our demo project can works and my third-party project can also build success.. @zhongwuzw Maybe that DEFINES_MODULE contains some related issue, could you please have a check ?\nAnd, I think, even if we don't specify DEFINES_MODULE in the podspec, Swift user who want to use Objective-C staic framework, can just using the :modular_headers => true in their Podfile. It's more configuratale (from CocoaPods 1.5.0 \u2014 Swift Static Libraries). Could we change to that and update the readme ?\nruby\npod 'SDWebImage', '~> 4.4.4', :modular_headers => true. > xcode error : unable to execute command: Segmentation fault: 11\nCould you please have a screenshot or the full build log (including all messages of that line in Xcode build ouput) ? . @applejian Check again. You can use the preprocess function from the Xcode. Create a new temp Objective-C files (For example, ViewController.h && ViewController.m), then do the following step to check:\n\nNavigate to ViewController.m\nClick the Related Items -> Preprocess\n\n\n\n\nSearch the preprocessed files with SDWebImage, if you found one, you must have a implict import of SDWebImage in your prefix header.\n. @applejian The 4.4.5 version is released. Which revert that DEFINES_MODULE. You can have a try again by upgrading your Podfile.. @pei625569 Hi. Could you please provide the information in the issue template ? Since at least we need to know what version of SDWebImage, the platform version, Xcode version, to help us investiagte the issue.\n\nIssue Info\nInfo                    | Value                               |\n-------------------------|-------------------------------------|\n Platform Name           | e.g. ios / macos / tvos / watchos\n Platform Version        | e.g. 11.0 / 10.13.0 / 11.0 / 4.0\n SDWebImage Version      | e.g. 4.2.0 / 4.1.0\n Integration Method      | e.g. carthage / cocoapods / manually\n Xcode Version           | e.g. Xcode 9 / Xcode 8\n Repro rate              | e.g. all the time (100%) / sometimes x% / only once\n Repro with our demo prj | e.g. does it happen with our demo project?\n Demo project link       | e.g. link to a demo project that highlights the issue. @pei625569 Wait. You are using the SDWebImageCacheSerializer in SDWebImageDownloader ? It's wrong usage. The downloader does not do anything related to cache. And the documentation also point this property or context option is applied for SDWebImageManager. You can use like this.\nobjective-c\nSDWebImageContext* context = @{SDWebImageContextCacheSerializer:seri};\n[SDWebImageManager.sharedManager loadImageWithURL:imageURL options:SDWebImageContinueInBackground context:context progress:nil completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {\n    NSLog(@\"inside finished image size = %@, dataSize = %.5lf kB\",[NSValue valueWithCGSize:image.size], image.sd_imageData.length / 1024.0);\n}];\nPlease check your usage again. And see the documentation comment there.\n. Here is the documentation about cacheSerializer. @kinarob It's a bug of CocoaPods with Xcode. The modular framework, should be compiled and processed before any prefix header generated. However, current CocoaPods seems cause this step order wrong (the bug only happended when you turn on Precompiled Prefix Header build settings ON).\nSome of user reply that using Xcode 10.2-beta version solve this issue. But I didn't have a try yet.\nTo say, since why we use DEFINES_MODULE to mark the SDWebImage as a modular framework, it's to solve the issue of #2547. Which is about the Swift project, who don't want to use use_frameworks! to mark all Pods as dynamic framework. Because dynamic framework contains some limitation compared to static framework on iOS (macOS does not have this issue), you can check that #2547 to see the reason.\nAnd to solve this, we actually don't need to mark SDWebImage as modular framework totally. Let the user to define this. User who use SDWebImage, can use :modular_headers => true inside their Podfile. They actually share the same meanings. But it's under control of the user. For some old Objective-C project which use static framework from the day one, they actualy don't care about whether our framework is modular or not.. @luangaolei The version 4.x of SDWebImage, does not need extra configuration once you including WebP subspec in CocoaPods.\nCould you please provide your WebP image url, or some demo code to show your usage ? It's little strange.\nAnd, if you can reproduce locally, could you please set a Xcode breakpoint, on -[SDWebImageWebPCoder decodedImageWithData:], to see whether this method is called ?. @luangaolei Could you also set a debug breakpoint at -[SDWebImageCodersManager decodedImageWithData:]. And print out the self.coders property (using po self.coders via lldb) ? It's an array contains all your coder plugin. It must have that SDWebImageWebPCoder instance inside. If not, maybe the bug is somewhere.. I can not reproduce this issue locally. Are you sure you're using SDWebImage via the 3 way correctly (CocoaPods/Carthage/Manual) ?\nOr, did you use something like preprocess macro override. The SD_WEBP macro is used to add the SDWebImageWebPCoder into the coder plugin manager during init method. If you face some issue, you can manually add that coder instead.\nobjective-c\n[SDWebImageCodersManager.sharedInstance addCoder:SDWebImageWebPCoder.sharedCoder]. We previously found some of our user, which embed SDWebImage as the upstream dependency, and build their own framework (like MyImageLoadFramework). However, they forget to inherit the macro define. In 4.x version, we have a SD_WEBP define in the podspec. This is used for some of logic specify for WebP. So this will cause some issue.\nIn the 5.x, this define is removed and all coder plugin is configuratable by the user.. It this issue been solved ? I think it's that you're using something not our framework (Like a wrapper or a modified version). So maybe we can not help for that.. OK...\nActually, if someone who want to embbed SDWebImage 4.x with WebP subspecs, they must inherit the preprocess macro SD_WEBP. In 5.0, this does not needed because the WebP is another standalone repo without any preprocess macro hack.. I can not understand what this code do. The force decode feature is ignored in macOS, and it ignored on UIAnimatedImage. Why does it related to the compressed image format ? The force decode does only about bitmap representation.. > image.images is nil if image is GIF.\nActually NO. If you don't use FLAniamtedImage, and use SDWebImageGIFCoder in coders manger. You always get a UIAnimatedImage for the GIF compressed data.\nIf you do use FLAnimatedImage, and don't add SDWebImageGIFCoder in coders manager. You get a single frame bitmap of GIF. And it should be decoded because it allows fallback on normal UIImageView.\nThere are two choice for the user. User can choose which one to use.. @zhongwuzw You forget the case there is a staic GIF image format. Which can exist when the GIF does not encode the animation sequence bitstream. This is why we have these code in SDWebImageGIFCoder. See the spec for GIF bitstream via W3C-GIF89a\nActually, does this force decode cause anything bad ? I don't understand. But I can ensure if we filter the GIF(compressed image data) here, we break previous behavior.. @zhongwuzw All your consideration, is already been done in 5.0. There are one SDWebImageDecodeFirstFrameOnly option. Do the exact what you want.\nAnd why you introduce this filter, it's because that what the type of image, or imageView this metadagta, does not been passed from the High Level API (sd_setImageWithURL:). Which is not the matter of 5.0's design.\nSo I think, don't change too much. I'll release the 5.0.0-rc.1 after that two PRs been merged. Then mark the API as stable and wait for the last official release. This takes too long time to waiting because of many many things.. @zhongwuzw I know you means. But I say \"This break the current behavior, for the user, who use SDWebImageGIFCoder and decode a static GIF, their force decode feature does not applied.\". Since that Static GIF case is rare compared to current FLAnimatedImage use case, It's acceptiable choice. (This actually is not a fix, it's performance trade-off)\nPlease update the comments there, to make it clear logic for future maintain, instead of just chaing code. For example, like this\nobjectivec\n// Do not force decoding animated images\n// Do not force decoding GIF images in 4.x, because we have FLAnimatedImage compatible code which assume the compressed data buffer not been changed. Since static GIF is rare, this can benefit most users.. That comments...Does not explain the reason correctly. \ud83d\ude05 \nIt's not about image decoding, it's the force-decode. Or you can call that force predraw. They are separate features in SDWebImage...Actually, you can implements a force predraw logic, which process the UIAnimatedImage as well, but this cost much more memory usage compared to static image force predraw.\nAnyway, I merge this now.. You means that SDImageIOCoder, can not encode the WebP format, so that [self encodedDataWithImage:scaledDownImage format:format] always failed ?\nMaybe it's a case and it's better to fix. (But actually, WebP encoding is really slow compared to Image/IO hardware encoding. I don't know whether it's suitable or not to do this during shouldDecompressLargeImages). And could you please don't remove that comments. It's the comments to explain the reason why force decode of WebP images can \"decrease the memory usage showing on Xcode\". WebP force decode logic, actually solve the different issues compared to what Image/IO force decode, though they looks the same.\nSee my blog article for the new user who don't understand force decode: https://dreampiggy.com/2019/01/18/%E4%B8%BB%E6%B5%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E9%A2%84%E8%A7%A3%E7%A0%81%E7%A9%B6%E7%AB%9F%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88/. Update the comments ? I think the code there is OK. But we should keep that comment. That comment is here to describe why force decode on WebP does not fix the memory usage issue. Previously there is one comment here.\n\n// draw on CGBitmapContext can reduce memory usage\n\nSee here in 4.4.3. Seems this dstTotalPixels is not configuratable in the 4.x...There are no difference to change that kDestImageSizeMB into 30MB instead \ud83d\ude05 . CGImageGetWidth return the pixel size of bitmap buffer. It's does not represent the point size. Are you sure this calculation is correct ?\nBut actually, I'm agree with that sqrt method. The calculation there should be changed.. Seems your're right. I run the test case again. It works.\n\nBy the time I create that #2602, I run the test cases but found that SDGIFImageCoder will get a UIAnimatedImage instance, which CGImage property is nil. It's a little strange... \ud83d\ude15 \nFor now,just revert this until we can reproduce that case again.. Please fill the issue template. Don't remove it, or we can not find the information about the issue and provide any help.. This enum have no extra meaning. And it's totally been ignored by Swift user. You just need to pass [].. Can not reproduce...Are you sure it's not the server issue or network issue ? The image downloaded, is a normal PNG image, and the connection use HTTP/2.\n\n. Just use sd_setImageWithURL:. I run the demo project of our framework and just change one URL.\n\nThe requwst timed out.\n\nAlready show that it\u2019s a network connect issue. Not about image decoding, not about loading logic inside SDWebImage.. Maybe your image server provider, check something about HTTP header specify for Web only (which filter the Client).\nCopy all your HTTP header from the browser (such like Chrome. Grab that in Network debugger tab). Then have a try again.. I don\u2019t know something that about that App Crashes. But if you want to cancel current imageView load, you can simply call\nswift\nimageView.sd_cancelCurrentImageLoad(). It's a designed behavior. If you cancel the image load, you will receive a completion callback with error, which error code is NSURLErrorCancelled. You can try to use KVO on the operation\u2019s 'cancelled' property. But to say, it\u2019s not a good idea from the general usgae. Sample code\nswift\nimageView.sd_setImage(with: url)\nlet operation = imageView.sd_imageLoadOperation(forKey: \"UIImageView\")\nself.kvocontroller.observe(operation, value: [.newKey] keyPaths: [\"cancelled\"]) { print($0) }\nCould you tell me the detailed reason make you to write code like this ? If you just need to synchronizly download (as well as cache) the image from net, use -[SDWebImageManager loadImageWithURL:]. It\u2019s more suitable for this use case (have a return value) compared to the View Catatory methods.. Could you please. use Charles HTTP Debugger to capature the request information for same URL compared with these two different version of SD. I think that your image server provider, filter something because of HTTP Header(such as User-Agent or something, we add a default UA recentlly in #2409 I remember). You can run Charles, send network request, then see all the information for the HTTP request and response. It\u2019s better to export (right click on that request) that report (save as a .chls file) and upload for me to investigate.. Also, version below 3.8 using NSURLConnection, which it\u2019s a legacy network framework for iOS URL Loading system. Later we use URLSession. However, there are also some little different between these. For example, URLSession does not use URLProtocol by default (you need to config one) compared to NSURLConnection. So if yout app have custom URLProtocol, you shoukd have a check.. I don\u2019t know the reason why cause this file not found. It\u2019s new file introduced in v4.4.3. And it\u2019s always works in CocoaPod\u2019s install. Maybe you can try to clear your pod cache ?\npod cache clean SDWebImage. @maurovc What previous version of SDWebImage did you use ? Is that version contains this crash case with the same rate ?\nI remember, the 4.4.5 version, fix one of WebP colorspace for ICC Profile via #2584 , I don't know whether that it's related to this crash. But looks like that stack trace, the ColorSync framework is used for color space transform. @dirtmelon Is this reproducable ? I see that you set a breakpoint and found the exception. Can you print the exception content or show me the console output ? (You can also using lldb's po $arg1 when exception was thrown even it's a C++ exception).\nAnd, are you using something like Fabric for Crash report ? Is this issue only appied for some specify iOS firmware (For example, iOS 8 only), or some specify iPhone Device Model ?\nBecause I can not reproduce this issue, but that fix works. So I should know whether it's a SDK bug (need workaround) or the usage issue.. @dirtmelon Since your env have a high reproducible rate. Could you please try to disable the force decode feature, using SDImageCache.sharedImageCache.shouldDecompressImage = NO; SDWebImageDownloader.sharedDownloader.shouldDecompressImage = NO, does this crash still appear ?\nI see the crash happened during the foce decode process, if you disable it, maybe can solve the issue. \nBut, if this crash still exist (maybe the stacktrace is different from this one because it happens during render step of UIImageView), we can say that the crash it's because of the custom ICC Profile, we have to revert that PR or filter the iOS 12 firmware.. @dirtmelon Hi. Thanks for your cooperation.\nFrom your test behavior. I have a idea that this crash may be related to some specify WebP images, which contains invalid ICC Profile. At the first time, I assume this is a OOM issue (when memory is limit, anything can happen to cause crash). But after you disable the force decode feture, the crash still exist, so it may not related to OOM (Because, if you disable force decode, the memory usage is really small before rendering on the screen).\nSo, let we have another try, to see whether this crash is applied for specify WebP URL. Could you please, set a Exception Breakpoint using Xcode. Then run your local environment to trigger this crash.\n\nNote this time, you should enable force decode to make it easy to debug (set shouldDecompressImage = true).\nWhen the crash happend (exception thrown), please reveal the stack trace. If the image is from cache, click the -[SDImageCache diskImageForKey:data:options:] stack call, then using lldb, to print the current cache key:\npo key\n\nIf the image is from network, click the -[SDWebImageDownloadOperation URLSession:task:didCompleteWithError:] stack call, then using lldb, to print the current request url.\npo self.request.URL\n\nThen, show me the WebP url and let me have a check at that and see whether it's reproducible.. @dirtmelon I can also reproduce now. Use this WebP in our demo project and use prorgessive loading (go to the detail page), trigger the same exception.\nSeems because of the WebP embeded ICC Profile is invalid on iOS ? This cause the ColorSync read failed and throw the exception. I'll have a try to investigate those invalid ICC Profile. Wait a while for my result.\n\n< (kCGColorSpaceICCBased; kCGColorSpaceModelRGB; This profile has a bad description tag)>. @dirtmelon Should be fixed via #2621. It's not the issue cause by ICC Profile itself, but the code we used. It's a use-after-free bug.\n\nIf you're in hurry, you can apply a patch to use that commit for your project, or wait for next patch release.. This issue is solved by v4.4.6 release. Close now.. It's CocoaPods's bug (from v1.6.0-beta), there are issue about it via https://github.com/CocoaPods/CocoaPods/issues/8451. And been fixed via https://github.com/CocoaPods/CocoaPods/pull/8452 . > Please resolve this asap team.\nActually, it's a CocoaPods's bug, but not the way for framework author to solve. The podspec syntax here, use the standard pod_target_xcconfig, with the correct $(inherited) synxtax for user header search path xcconfig. See https://guides.cocoapods.org/syntax/podspec.html\nThe issue have already been fixed by CocoaPods, it's available after next release (1.7.0 ?), or you can have a try with the latest master branch of CocoaPods.\n . OK. My fault, I found that SDWebImage using spec.xcconfig syntax ? It's a little strange, let me have a try with pod_target_xcconfig instead.. Seems even I change the spec.xcconfig into spec.pod_target_xcconfig, the warning on CocoaPods 1.6.0 still exist.\nBut actually, those user header search path have no any meaning. I'll have a check again, maybe it's better to remove those build settings.\nThis podspec can work:\n```ruby\n  s.subspec 'GIF' do |gif|\n    gif.ios.deployment_target = '7.0'\n    gif.source_files = 'SDWebImage/FLAnimatedImage/*.{h,m}'\n    gif.dependency 'SDWebImage/Core'\n    gif.dependency 'FLAnimatedImage', '~> 1.0'\n  end\ns.subspec 'WebP' do |webp|\n    webp.source_files = 'SDWebImage/UIImage+WebP.{h,m}', 'SDWebImage/SDWebImageWebPCoder.{h,m}'\n    webp.pod_target_xcconfig = { \n      'GCC_PREPROCESSOR_DEFINITIONS' => '$(inherited) SD_WEBP=1',\n    }\n    webp.watchos.pod_target_xcconfig = {\n      'GCC_PREPROCESSOR_DEFINITIONS' => '$(inherited) SD_WEBP=1 WEBP_USE_INTRINSICS=1',\n    }\n    webp.dependency 'SDWebImage/Core'\n    webp.dependency 'libwebp', '~> 0.5'\n  end\n```. @cj1024 Should be fixed via #2622.. This crash maybe the same as #2353 .\nThat issue seems a OOM issue, which cause -[NSMutableData copy] failed. I current have no idea how to solve this. Maybe because we process too much of parallels download operation at the same time, or maybe we retain the imageData reference too long and cause it keeping in RAM. You can have a try using SDWebImageDownloader.sharedDownloader.maxConcurrentDownloads = 4 (default 6).\nBut that may not solve this issue from the scratch. Current downloader design, using URLSession.DataTask, which keep all network data buffer into RAM. However, if we write that data into disk (or using URLSession.DownloadTask), many many of things need to rewrite and may cause new issue. I'll keep this in mind and find some workaround.. And, did you try using SDWebImage v4.4.5 ? Is the crash rate the same as current vertsion (v4.4.3) ?. The disassembler results:\n```c\nint _CGColorSpaceCreateWithICCData(int data) {\n    rbx = data;\n    if (rbx == 0x0) goto loc_182a36;\nloc_1829c3:\n    if (CFGetTypeID(rbx) != _CGDataProviderGetTypeID()) goto loc_1829e2;\n//...blablabla\nloc_1829e2:\n    if (CFGetTypeID(rbx) != CFDataGetTypeID()) goto loc_182a36;\nloc_1829f7:\n    rax = CFRetain(rbx);\n    goto loc_1829ff;\n}\n``. Maybe this custom Error mainSDWebImageErrorDomain` will break current behavior.\nCurrent version, if the server response a HTTP 500, next image request will still send to server, it's a designed behavior for most people.\nBut however, if you callback a custom error code, which is not listed in the block failed request error code. It will be blocked by the manager and next request will never send to the server. For my own app, I sent a little image requests to a image server which may have a expire, or the server return a 304 code. This will cause a blocking as failed URL and never get sent again.\nSee #2582. This is the issue caused by the current code that does not check NSError's domain is NSURLErrorDomain, but assume all code are URL Loading System Error Codes. Maybe I think those code should be modified to solve further related issues.. And, current we have the posiblity to check HTTP status code. We can wait for that user reply to find out whether HTTP status code works for their usage or not. If the user don't care about HTTP status code but only the NSError returned by the URLSession loading system, we need another solution.. @KeymonWong Any issue about this ?. Fixed by #2627...Available in SDWebImage v4.4.6. @ducnv2910 Seems the error code is network, but not WebP decoding.\nAnd I can successlly load this webp image url. Maybe it's something of your code that cause the issue ?\n\n. @ducnv2910 Using our SDWebImage repo's demo. \nChange your image url in MasterViewController.m, Run \"SDWebImage iOS Demo\" target.... It this reproducable ? Maybe we have to fix it before final release.\nYour uploaded image seems down, could you please re-upload your screenshot ?\nAnd, the image url is necessary for us to investigate the issue.. @GengJian Any update ?\nThe code of calculating file name from cacheKey, it's exact the same.\n4.4.6: https://github.com/SDWebImage/SDWebImage/blob/4.4.6/SDWebImage/SDImageCache.m#L245-L260\n5.0.0-beta5: https://github.com/SDWebImage/SDWebImage/blob/5.0.0-beta5/SDWebImage/SDDiskCache.m#L273-L288\nSo maybe this issue is not caused by the calculating algorithm. I guess maybe that the cacheKey appear in 5.0 is different from 4.4.6. Could you please show me some of the image url (if you're using a custom SDWebImageCacheKeyFilter, please provide the code). Seems OK...\n@iliaskarim  Are you using Swift with SDWebImage ? The Swift API of this new method is much more simple (with only one required arg url, comletedBlock is optional with default nil value)\n```swift\nopen func downloadImage(with url: URL?, completed completedBlock: SDWebImageDownloaderCompletedBlock? = nil) -> SDWebImageDownloadToken?\n// code to call\nlet url: URL\nlet token = SDWebImageDownloader.shared.downloadImage(with: url)\n```\nActually the downloader is not a high-frequency used components, so I think why the downlaoder API have all args here is for user who care about the detail args behavior. Make API simpler not always means easy to use, my personal idea...\nBut anyway, it's not hard to maintain the code after this API was introduced. If this it's really helpful for you, we can merge this and ready for 4.4.6 release.. All the private headers are listed in the Private directory(group), make it easy to find and use.\n\n. Run pod install for both Example && Tests directory, because these targets using CocoaPods to integrate source files && headers. They does not update the xcconfig for HEADER_SEARCH_PATH generated from podspec unless you run the pod command.\nBut however, SDWebImage.xcodeproj (SDWebImage && SDWebImage Static target), using the native Xcode project to integrate source files && headers.. ? I\u2019m using the New Build System with the latest 5.x branch, anything works fine. Is this caused by beta version Xcode ?. Ourself, does not use anything Developer Team certificate. When running on real device, myself using the free or personal developer certificate. \nFor certifcate config, SDWebImage 5.0 using the xcconfig files to manage any configuration used by Xcode. We don't relay on the GUI part of build settings. Maybe you can check the App-Release.xcconfig files ?. The roadmap, there are another beta 5.0.0-beta6. Hopefully this release does not have any serious bug, so it will become the final beta release. And from now on, there are no any Feature to be added until the 5.0.0 official release.\nThe 5.0.0 release have already taken too long time to finish. Because our maintainer lack of free time to do this. But I hope people who are using this framework or people who are interested in open source can help for contribution.. The 5.0.0-beta 6 is released. This is the final beta version of 5.0.0. And no more features will be added until the 5.0 release published.. Please fill the issue template.\nI have no idea what your Integration Method (carthage / cocoapods / manually). @Insofan Our Travis-CI build script, now always using the latest version of CocoaPods (including the beta version), and I guess some test case have thread-safe issue to cause the test case crahsed. I'll try to investigate and fix it.\nCurrent, you can do a travis-CI retry after you login the Travis-CI.org with GitHub account. If you can not restart the test, try to ammend a empty change commit and force push to your remote branch, this will trigger the retry.. @Insofan We\u2019ll release the last 5.0.0 beta(beta6). The merge from master branch to 5.x will be done by me periodicity. You don\u2019t have to do so.\nAfter we finally want to release 5.0.0, we will follow the steps and merge 5.x branch to master. The current master will become another 4.x branch to keep a short-term maintain branch for serious bug in 4.x version.. Seems ok.\nActually, for most cases, current code will not cause issue. The retain chain is:\nSDWebImagePrefetcher -> NSOperationQueue -> Array[SDAsyncBlockOperation] -> Block -> SDWebImagePrefetcher.\nOnce all the operations was done or been cancelled, the SDWebImagePrefetcher instance can be dealloced. This can ensure all operations will been executed and the callback (or delegate of prefetcher) will be called.\nBut you're right, this will cause issue when user don't want to keeping prefetching after their VC or Business instance been dealloced. If they want to keep prefetching, they can use the shared instance (static, keeping alive) or create their own one.\nMerge it.. And, we have so many of dummy code for weak-strong dance.\nobjectivec\n__weak weakSelf typeof(self) = self;\n^{\n    __strong strongSelf typeof(weakSelf) = weakSelf;\n    if (!strongSelf) return;\n    __weak weakweakSelf typeof(strongSelf) = strongSelf;\n    ^{\n        __strong strongstrongSelf typeof(weakweakSelf) = weakweakSelf;\n        if (!strongstrongSelf) return;\n    }\n}\nAnd code become more massive when you have multiple level of weak-strong dance (you have to naming it into sself, ssself, sssself...)\nSince we have private headers, I think it's better to cleanup and manage these code later. \nWe can use the same way of other open source framework like CocoaLumberjack, by using the small part of https://github.com/jspahrsummers/libextobjc about @weakify, @strongify (those macro is short and can been copied into the private headers or prefix header)\nobjectivec\n@weakfify(self)\n^{\n    @strongify(self);\n    if (!self) return;\n    @weakify(self);\n    ^{\n        @strongify(self)\n        if (!self) return;\n    }\n}\nThe macro is simple and can avoid the sself, ssself, sssself to mass up our eyes... \ud83d\ude13 . I found you're using SDWebImage 4.4.5 with WebP, is this issue related to #2621 ? Did you try the 4.4.6 version ?. @xuvw  Is there any WebP image url for testing ? Could you set a exception break point and find the image url (or if your break point have only image data, using lldb to write the image data to temp folder and upload here)\nexpr [imageData writeToFile:\"/tmp/1.webp\" atomically:YES];\nWe need to investigate whether this is a bug of libwebp, or the use code of SDWebImage.. I mean, I wan to know the detail about WebP image cause this crash. I've no idea how to reproduce this crash and have no idea whether this is bug of libwebp (please fire issue to https://developers.google.com/speed/webp/community) or our usage code.\nSo please at least, show me the WebP image url, or you can upload the WebP image to the comment here.\nYou can grab the image url from the stack trace using lldb (check SDWebImageDownloadOperation.m, there is a self.request.URL), or output the WebP image data to your computer's directory using the lldb command.. \n. \n. From my local test, the cancel of token does not cause any leak. You can check the SDWebImage.slack (or join our WeChat group to talk about in Chinese), where have the chat history about this question from @kinarob . @zhongwuzw Using you code, I can ensure this cause a leakage of the those SDAsyncBlockOperation. And those operation does not been dequeued from the operation queue.\n\n...Actually you don\u2019t realize when you call cancel on SDWebCombinedOperation, the completed block is guranteed to be called, and then each SDAsyncBlockOperation is called completed to mark as finished.\n\nThis gurantee is not correct, it that a bug ? A sd_setImageWithURL:completed or loadImageWithURL: may not been called after cancel (when the download does not been started and queued, cancel does not trigger a callback)\nI'm wondering is this designed behavior or not ? I'll check previous 4.x behavior again to see whether this is another bug during 5.x refactory.. Seems even in 4.x, there are no gurantee the completed block is called when cancel on the SDWebImageCombinedOperation...Really. See the code SDWebImageDownloaderOperation.m:217. The callback is handled in the URLSessionDelegate method, but not cancel method.\nIf so, the code of prefetcher currently is not correct. My previous implementation is based on the completed block callback, but now, this need a custom cancel implementation of NSOperation method.\nThe code seems work. But I'm afriad add a extra retain chain of prefetchOperation -> combinedOperation will cause some issue. And the SDAsyncBlockOperation naming maybe should be changed into something like SDWebImagePrefetchOperation since it's not a common component now.. @zhongwuzw I see......\nIt seems that you using another weak array to hold all the SDAsyncBlockOperation. The logic between SDAsyncBlockOperation and the operation from manager iSDWebImageCombinedOperation is independent from each other. Still using the SDAsyncBlockOperation just for concurrent control.\nMy previous idea is that only contains one weak array, each SDAsyncBlockOperation contains a weak reference of SDWebImageCombinedOperation. The cancel method of SDAsyncBlockOperation call the [SDWebImageCombinedOperation cancel]. But anyway, this one is OK.... @Insofan What about this one ? #2647 \nI've done by re-using the libextobjc metamacros.h and put all private macros into a private SDInternalMacros.h, so that this does not effect any public API or users.\nCurrently this does not using prefix_header_file or prefix_header_contents because of CocoaPods's saying\n\nThe file path options is not recommended as Pods should not pollute the prefix header of other libraries or of the user project.. Actually, I think maybe we can put this SDInternalMacros.h, into the project prefix header files (pch).  Instead of import this again and again in each .m files... Any idea ?\n\nI found CocoaPods spec syntax here says:\n\nprefix_header_contents multi-platform\nAny content to inject in the prefix header of the pod project.\nThis attribute is not recommended as Pods should not pollute the prefix header of other libraries or of the user project.\n\nAny reason or worry about this ?. The metamacros.h is from the libextobjc with MIT licence.. @luisobo During my test, the prefix_header_file or prefix_header_contents actually does only effect the Pod target, instead of Application target. Which means, it does not  pollute anything outside Pod itself.\nSince we use the macros internally, maybe it's better to use the private pch instead of the duplicated #import \"SDInternalMacros.h\" in each implementation files.. Sounds great. But in fact all the protocol is optional, and ourSDWebImageGIFCoderdo not supportincrementalDecodedImageWithDatathis one. If it subclass from thatSDWebImageDecoder` abstract class(which implements all the methods), it maybe called this function. This is not as excepted.\nMoreover, SDImageCache will use the provided coder instance to decode (otherwise use the shared coder to avoid extra init), SDWebImageDownloader need to transfer the coder class to actual SDWebImageDownloadOperation because each operation need a seperate coder to avoid data conflicts. But maybe there will be a better solution.. Fixed. Maybe not. Our users(including me in my product) still use this one to decoded raw image data. And it's an more easy usage. Keep these public API and call the new SDWebImageDecoder in implementation is not a pain.. This is really a pain. In fact I need to transfer the coder class infomation to the operation from SDWebImageDownloader. But I found that our classes are all public and open to user now. There is no what like SDWebImageDownloaderOperationInternal or SDWebImageDownloaderOperation+Private here to keep only visible in project. If you'd like, I can create SDWebImageDownloaderOperation+Private and keep it to private and removed from source files in podspec.. Fixed by use just an image coder for each SDWebImageDownloaderOperation. It will be set when the SDWebImageDownloader created the operation. If you do not set one, create an built-in decoder instance. (each operation need a seperate coder to avoid data conflicts). This looks like a hack. But for this usage(Just a map from state to URL) is OK. Maybe we could find a better solution like use prefix string as an key([NSString stringWithFormat:@\"image_%@\", @(state).stringValue] and  @\"backgroundImage_%@\").... Maybe this is no need to change and this allow potential override from the user(Though this is not recommaned).. Apple says /* These methods are provided here for compatibility. The corresponding methods on NSData which return NSErrors should be regarded as the primary method of creating a file from an NSData or retrieving the contents of a file as an NSData.\n */\nSo, I suggest to use NSData's writeToFile:options:error: to write to file, but not just grap the error code from POSIX file API and give back to user.. This is used previously with that SDWebImageDownloaderIgnoreCachedResponse. But now downloadedImage should not be nil if network is OK. So this logic is useless.. This line early return will cause -(void)done not been called. Create Iterator here is useless for static image(Since it will be decoded using sd_rawWebpImageWithData. But after this change, it will create one before that static image decoding code if (!(flags & ANIMATION_FLAG)) {xxx}. This early return will cause logic bug. Need to call [self done]. Fixed via #2049 . This seems strange when totalSize > self.expectedSize. But we can keep this to protect the accident condition. Such as self.expectedSize == 0. Well. Remove that and add each nullability manually.... Keep that method. Maybe user can subclass to override this.. Previously I think that the for-in loop in coders may be not always obey the priority order and we can gather the logic into one place. \nBut if this order gurantee is never change (coders Array first object contains the highest priority and last object contains the lowest one), we can remove that helper method.\nAnd also, I advice to point this out clearly in that property doc comments. So that user would not do reversed enumeration.. Sorry...I forget this task. By the way, what about decode this outputData again and check frame count, image size and so on(these properties should equal to gifImage's properties) ? This can ensure that it works for both decoding & encoding process :D. This extra arg seems a little ugly(Only for this single propose). Can we detect that [self isKindOfClass:[FLAnimatedImageView class]] to determine this setBlock should happed in global queue instead of main queue ?. ...A question, why all our public method happed on main queue :) . Even -[SDWebImageManager loadImageWithURL:options:progress:completed:]. A better solution is to add some custom code for FL such as UIView+WebCache.m:60. Since this is currently the only way we can find that [self class].(Or we need to attach a flag or context ,this is too more tricky)...I can have a try in my original PR. @bpoplauschi I mean many check with that dispatch_main_async_safe is useless and may be misunderstanding. :) Previously I think some code happed in a global queue. But I find that nearly all the callbacks in our API such as SDWebImageManager, SDWebImageDownloader are dispatched on the main queue. Anyway, I try another approach without modifying header files. . This is ensure only FLAnimatedImageView will enter this logic (global queue setImageBlock). The else condition is for all-other situation.\nAnd we should use isKindOfClass since some user may subclass FLAnimatedImageView... OK. Keep these here.. @bpoplauschi @skyline75489 Why this is a little hack because we do not have something like #if SD_WEP such as #if SD_GIF(Maybe we can add one). Use #if __has_include and check that class is OK but looks too complicated. So currently I use that NSClassFromString. Any good idea.?. @skyline75489 \n\nDISPATCH_QUEUE_PRIORITY_HIGH\nItems dispatched to the queue run at high priority; the queue is scheduled for execution before any default priority or low priority queue.\nThis constant maps to the QOS_CLASS_USER_INITIATED class.. @skyline75489 Agreed. Maybe we need to refacotor some code. Currently our sd_internalSetImageWithURL is not too customizable. I advice too add a extra context arg. And another suggestion is to move this code into a actually private header files. (Through cocoapods's private_files) to avoid our user touch it or even relay on it (In fact, my company's a little code relay on this method \ud83d\ude02).. Through context arg. We can pass extra information and let the callee to do specify logic. For example, if we can get call_setImageBlock_in_this_queue from the context. Then we do this logic. The context arg should be set from FLAnimatedImageView+WebCache.\n\nA context can be a naive NSDictionary and we grab things through some private-defined-keys. Or we can make it a id or something else.(This is not really important). It's OK\n\nMaybe I always enter the trap. This case:\n\nfinished == NO\nimage != nil\n(options & SDWebImageAvoidAutoSetImage) == YES\n\n~~~The left one will not call completion but the right one will call. We should change it to BOOL shouldCallCompletedBlock = finished || (image && (options & SDWebImageAvoidAutoSetImage))~~~. @bpoplauschi Well. It should be equal(The case I comment is OK. I omit the last completion call). If you think nothing to add, you can merge now.. Yeah..Fix it. Actually. This kinid of file type detect is totally wrong. For example, JPEG format should check FF 08 and PNG should check 89 50 4E 47. Only check the first byte is really tricky and may lead wrong image format detect if some image format have the same byte as others. Thanksfully that currently these types have no common first byte. \ud83d\ude05 . I suggest to change this and check the image format one by one with their file sig. But this may be a carefully changes. Any idea ?. Well. Maybe this could change to [isEqualToString: @\"ftypheic\"]. A little misunderstanding. @bpoplauschi For file format, it should have this file signatures(or sometimes called magic number). I just means that the first byte test is a little tricky. Maybe we need to check that specify bytes match the actual file signatures for detecting format. But currently it works...So, it's a question.. I think I considered too much. Easy and direct way to detect HEIC encoding compatibility \ud83d\ude06 \n. @skyline75489 NO. Check my description and Apple's WWDC introduction. It only works on (iOS 11 || macOS 10.13) && (isMac || isIPhoneAndA10FusionChipAbove) && (!Simulator). Since it's Natively support and not effect all the interface above Image/IO layer, so we do not need to check that. Instead, just use Image/IO Public API to detect.. NSImage 's design is that it use NSImageRep for actually rendering images. It choose the \"best representation\" to render. In fact, GIF is bitmapRep without scale hint for PDF or someother things. So we do not need to check all image representations.. GIF use Image/IO. So it use seconds.. This method is avilable for watchOS. So open it to solve potential orientation issue on watchOS.. These two method are nearly the same except that one line code for blend mode. For non-blend(Which means you should cover the current frame image), just clear the target image rectangle before draw.. WebP encoder need milliseconds but not seconds. So don't forget to covert. Copied from previous SDWebImageWebPCoder code. Use frame class instead of two arrays. :). We need this extra scale because user may using cache filter to override your URLs. Since the scale process is really cheap, so we do not need to pass this cacheKeyFilter or SDWebImageManager instance  to that SDWebImageDownloaderOperation and then call cacheKeyForURL:self.request.URL]. This can also make our class dependency clear.. Well...Maybe we should just grab the first image if image is a _UIAnimatedImage.. You're right. This 64 is device architecture related. For ARMv7 it use 32 instead of 64. So I change it to always pass 0 to let Core Graphics automatically calculate it. See #2119 . These two methods exist in SD 3.x, but is useless after SD 4.x refactory. (UIButton will use UIView+WebCache category add just pass the key). Rename this internal methods because it's a category, use prefix to avoid user-defined method name conflict. ...Wait, why you want to call CFRelease on a NULL ?. Good. I loss this during a git reset :). OK.\nBut I not always mark the implementation method with nullability, just the header files. This is actually nuallble. @skyline75489 I think we should not replace all UIImageView and it's configurable. This SDAnimatedImageView is used for high-performance banlanced of CPU & memory. But for some small animated images (especially small UI icon), UIImage's build-in one is the best choice. So we need this :)\nAnd also, some build-in class can't be replaced with that image view. For example, UIButton's setImage:forState: can only show animated images with UIAnimatedImage. So this case our solution will fail.. Maybe this one is wrong. We do not need to place an @ autoreleasepool here...The loop is just a enumeration on array and immediately break if one coder is selected.. @LululuSir This If has no loopCount info, loop count would be 1 seems adoptable. But what about these change ? Should we add loop count by 1 ?\n  . This seems not totally IO-safe(not be called on IO Queue, through it's a read-op). Maybe we should rename this method to safeDiskImageDataExistsWithKey:(or _ diskImageDataExistsWithKey :)), and then sync/async public API call this method with dispatch_sync(self.ioQueue) and dispatch_async(self.ioQueue)\nI found that storeImageDataToDisk:forKey, diskImageForKey: are not IO-safe either. Maybe we should review our current sync version disk-related API again...But we can merge this first and create a new PR for IO-safe check.(To say, thread-safe and IO-safe is really hard and read IO-safe is harder than write). This is actually follow the GET rules on Core Foundation, mark this to avoid Swift user use a Unmanaged check. Use category prefix here to avoid name conflict. ~~These change to make the API more suitable for Swift and Objective-C user. Use method is little wired :)~~\nI'll try to create a new class for indicator. Current design is bad for extension and more flexible. Actually, we can implement this on macOS using the NSAnimationContext API. But this need spend more time to do this. Currently I just leave it here :) Maybe I can implement this image transition on macOS if I have extra time. typo, fix!. This just copied from NSAnimationContext and I want to make this not availble on iOS & tvOS & watchOS. If you use #if SD_MAC, the generated comments on Swift will leave here. No so good :)\nWhether OS X 10.7 or 10.8 actually don't cause any issue, this is the interface defined in AppKit.. The generated interface are:\n```swift\n    open func sd_setImage(with url: URL?, placeholderImage placeholder: UIImage?, options: SDWebImageOptions = [], progress progressBlock: __ObjC.SDWebImageDownloaderProgressBlock?, completed completedBlock: __ObjC.SDExternalCompletionBlock? = nil)\nopen func sd_setImage(with url: URL?, placeholderImage placeholder: UIImage?, options: SDWebImageOptions = [], transition: SDWebImageTransition?, progress progressBlock: __ObjC.SDWebImageDownloaderProgressBlock?, completed completedBlock: __ObjC.SDExternalCompletionBlock? = nil)\n\n```\nCan this cause issue ? I'll check one. @skyline75489  I tried and all of these two can be called. The previous name conflict issue is related to the options arguments, which contains a defualt value [] and can be totally omit. But this new transition arg placed after the options, so there is no issue :)\nSwift support default value in params, which means you can totally ignore this args. So if you contains 2 default value in params, the actually generated function is (2^2 = 4).\nThis two actually used interface (omit the last compledBlock arg because it does not effect this, or I have to write 8 functions):\n```swift\n    open func sd_setImage(with url: URL?, placeholderImage placeholder: UIImage?, progress progressBlock: __ObjC.SDWebImageDownloaderProgressBlock?, completed completedBlock: __ObjC.SDExternalCompletionBlock? = nil)\nopen func sd_setImage(with url: URL?, placeholderImage placeholder: UIImage?, transition: SDWebImageTransition?, progress progressBlock: __ObjC.SDWebImageDownloaderProgressBlock?, completed completedBlock: __ObjC.SDExternalCompletionBlock? = nil)\n\nopen func sd_setImage(with url: URL?, placeholderImage placeholder: UIImage?, options: SDWebImageOptions, progress progressBlock: __ObjC.SDWebImageDownloaderProgressBlock?, completed completedBlock: __ObjC.SDExternalCompletionBlock? = nil)\n\nopen func sd_setImage(with url: URL?, placeholderImage placeholder: UIImage?, options: SDWebImageOptions, transition: SDWebImageTransition?, progress progressBlock: __ObjC.SDWebImageDownloaderProgressBlock?, completed completedBlock: __ObjC.SDExternalCompletionBlock? = nil)\n\n``. @skyline75489 That is bridged by compiler. When your method's last arg is anullable block, the generated Swift interface will be aoptional blockwith the default valuenil`. Which means user can omit this arg and this actually generate 2 interfaces.\nAnd also, if you use Objective-C's NS_OPTIONS, the generated Swift interface is a OptionSet with the default value []. So this arg can also be omit and actually generate 2 interfaces too.\nSo, we may have 2 args with default value, one is options and another is completedBlock(That's why the name conflict, but since this new arg is placed between those two arg with default value, this will not cause issue). You can not mark any other arg with a default value in Objective-C. All done by compiler :)\n(You can write a simple demo to check, or contact me...). :) OK.... Rename this to sd_imageURLStorage because write any category method is actually in the class method list during runtime. So this may cause name conflict. Seems not current, but have this possibility :). Actually, whenever you call -[SDImageCache storeImageDataToDisk:forKey:] which is our public API. This log is printed because you can not access the ioQueue outside...Really awkward :). I think maybe this is not thread-safe. Even this will not cause crash. But if user call addProgressCallback from the different queue with the same url. If thread A and thread B enter this if condition at the same time(Can happen). This will cause we create two operations but only the last one was alive(The first one will be replaced).\nI think we shuold better consider use a lock again with dispatch_semaphore again and lock the entire block of code into a lock instead.. Actually I think it's a issue by design. The configuration for class which contains a shared instance should always use copy. Because when you change the config on shared instance, this may affect other instance who use the same config object.. There should be a class level default config, or we have no timing to change the custom memory class or disk cache for the sharedCache.. Even through the status code in invalid. We should also store the actual response and post the notification to let user decide the action. Current implementation contains bug. \nAnd also, for 304, it should not directly call cancelInternal, which will cause the completion block not been called at all. Because cancelInternal remove all the callback blocks.. @skyline75489 Because as I point it out. We now have a default configuration in static. This means each SDImageCache instance will call copy to get a copy and store in their own. Or if you modify the default configuration, all the SDImageCache instance's config will be affect, this is a wrong behavoir.\nAnother way, it's to change the default value for SDImageCacheConfig. Each time you call [[SDImageCacheConfig alloc] init], the config contains all the default value. However, this is hard to use because if I want to specify the sharedImageCache to use the custom class<SDDiskCache>. I have no proper timing to do this. Right ? After you call [SDImageCache sharedCache], you already use the default class intead of my own class.. Well. Maybe we can totally remove this protocol design. We pass the config instance to the   id<SDDiskCache> and let they do the proper adjustment. So sometimes we add new config item, we do not need to add new method.. Well. I can remove this by specify nonnull to the most of methods. Unlike the SDImagCache. We can block all the optional value from the beginning instead of pass to id<SDDiskCache>. This is previouslly to keep that imageData mutable is thread-safe. However, if the reset method is called. This means the operation is neither cancelled or finished and will be removed from SDWebImageDownloader's operation queue. So we do not need any work for the operation itself to let ARC dealloc it.. Acutally copy is useless. Because we always pass a immutable NSString but not NSMutableString. Use strong-weak is OK.. This is just code moving :)\nBecause that SDWebImageLoader protocol should not import SDWebImageDownloader, or it will cause a cycle import issue.\nI can seperate this into another PR after some 5.x feature merged to avoid future merge conflict. Not a big change.. Code moving as well. Actually the SDWebImageDownloader's basic logic does not change at all.. Maybe when Photos Library no authorized, we should through a exception ? Or does this authorization check impact the performance ? I will check later. (Currently will check each time you request Photos asset). Acutally, here is not finished because we supports progressive image loading.\nOne solution, it's to leave this for other developer to use the loadImageWithURL: one and build their own. Or I can continue to implement it to allow loadImageDataWithURL: progressive loading. (Actually, copy the code in SDWebImageDownloadOperation. Or maybe a better way to share the code ?).. We should provide a error, or that may not work as a consistent component with SDWebImageManager.. These two API actually should mark as open, since this is what a download operation's basic information. And we have a SDWebImageDownloadStartNotification notification, which will contains a NSOperation<SDWebImageDownloadOperation>. User can use the request to identifier which operation to check, use response to get the information. This is actually an advanced ability to allow user to get current loading operation for UIView category. See the demo usage below in comments.. Why to remove these 3 methods because for manager, it already allow to get back the specify cache object. And these 3 methods just call cacheKeyForURL: to get the cacheKey, then call the cache object's corresponding method. It's really easy to do the same thing by your own. However, put these into manager's public API cause we maintain it difficultly and tie manager with cache's implementation. Since we support custom SDWebImageCache protocol to make it more extensible, it's time to clean up.. This one expectedSize can be grab from response easily. It's no need to provide a seperate property for this.\nAnd also, NSInteger does not fully cover the long long value from response. expectedContentLength which may loss of precision. And currentlly it does not represent correct NSURLSessionTransferSizeUnknown(-1)....We should put it as private usage only. This cancel method now seems useless. Since SDWebImageDownloadToken can directlly call cancel on it and correctlly process the cancel. It's no need to provide two APIs.\nMaybe the 4.x implementation which supports you to create [[SDWebImageDownloadToken alloc] init] then assign some property such as downloadOperationCancelToken (since it's readwrite on public API), then finally feed it to downloader with -[SDWebImageDownloader cancel:]. But this is not a designed behavior and you should only use the return value token from the downloader.. MKAnnotationView is availble for tvOS 9.2+...Current min deployment target version is wrong \ud83d\ude05 . We could not use #if SD_MAC here because the umbrella headers will be also parsed by clang to check whether non-modular headers exist. However, during the check, the define like TARGET_OS_MAC does not exist! So this will fail. Instead, we can use __has_include to check it.\nThis actually just fix for warning, not impact the actual header including process on iOS & macOS. This may cause unnecessary cost if the NSImage it's not bitmap image based. (Such as PDF image, which is vector based image and scale does not work). We'd better only care about bitmap image rep.. No longer need. And this is not a public API in 4.x, So clean up.. ...Actually, we already upgrate to use Xcode 8, or many feature likes APNG, class property in Objective-C (For Swift API bridge) will fail. Please update this :). This is already been done in current 5.x branch.. @mythodeia These options are from SDImageCacheConfig...The disk cache protocol's initializer method take the config as arg.\nThis method means the implementation should choose their own way to remove expiered data, we recommend to use  ageLimit,countLimit, sizeLimit. But not an enforce way. Our SDDiskCache built-in disk cache process all these 3 limit.. If you can provide a better comments there, you can also point it out :) Maybe I'll have some grammar mistake in English since I'm not a native English speaker.. This will be refactored using the custom cache key filter feature. So we pass the cache key filter in context for downloader, downloader use that to calculate cache key (or string from URL). We do not need this hack logic.. @bpoplauschi You means that there are one @property (nonatomic, class, readonly) SDImageCacheConfig * defaultCacheConfig;. You can just only modify the property ? All the initilizer without any config value will use this instead (Including sharedImageCache).\nThat's the previous design of this PR. But I change that into this current design. At that time I think this may looks little hard to use.. @bpoplauschi Anyway, I can change back to this design. Wait for a commit. (Also fix merge conflict). init method in Objective-C is always safe. Because you create object use 2-way-initilizer (First call alloc, then init). If you call init twice, you get 2 different instances.\nThread-safe is about different threads modify the same instance(or variable), but not different threads modify different instances... But you should note it's not safe if you initializer (Or something like Class convenience initilizer) which share a global static variable. At this time you should take responsibility to access that shared variable thread-safe.\nBut most of our initilizer does not use that. Only rare class use shared instance (Like - [SDAnimatedImage imageNamed:], which use semaphore to guard. Or something like defaultDownloadConfig, which use dispatch_once to guard).\nNote this hard topic is useless in Swift. Swift initilizer or class static variable is always thread-safe. (Swift compiler keep this variable thread-safe by lock internally). Actually :)...If the coders during enumeration is modified by another thread, there is no way to protect it. Because we using NSEnumerator when for-in loop.\nobjective-c\nIn Objective-C, it is not safe to modify a mutable collection while enumerating through it. Some enumerators may currently allow enumeration of a collection that is modified, but this behavior is not guaranteed to be supported in the future.\nSo, the best choice, it's to keep a copy of current state. Which not get effected by later add or removal.\nThe best choice, since self.coders is a immutable NSArray, just reference it is OK.. Swift's Array is a struct. But however, it using copy-on-write, which is not compatible for thread-safe. So you should also take attention the for-in loop during different threads are not safe. Create a copy of current state is better.. Can this be nullable ? Such as if you provide a nil value, we just ignore the prefix, the behavior is the same as @\"\" ?\n@AgentFeeble. @AgentFeeble Agreed. Done. com.hackemist.SDImageCache. it's already the default value. See the description above and that SDImageCacheConfig.m files. This can become nil only when you explicitly set it with a nil. So I think maybe we do not need to protect more here. Just let it become the empty string @\"\"\nOr maybe just mark it as nonnull ? Spcify a nil will trigger a assert(Objective-C only, Swift is compile error). If you really do not want any prefix, explicitly set with @\"\". (But I think in this case, treat both @\"\" and nil empty string is better). ...I think this should be safelyAddOperationToRunning. Not safelyRemoveOperationFromRunning :). These 2 methods do no need to expose as public API. Use one property is OK.\nThe header files should looks like this:\nobjective-c\n@property (nonatomic, assign) NSUInteger optimalFrameCacheSize;. This kDefaultOptimalFrameCacheSize is no need...Because FLAnimatedImage class already treate 0 as default value. So just override the setter/getter for sd_optimalFrameCacheSize is OK.\nAnd, since FLAnimatedImage's designated initializer is -[FLAnimatedImage initWithAnimatedGIFData:optimalFrameCacheSize:predrawingEnabled:]. I'd suggest to also provide the property  called sd_predrawingEnabled. Make both 3 args available for user.. Stupid mistake. We should use the rotated CGImage but not the original one :). This should still use strcmp. We just need to remove the dispatch_queue_async_safe macro. @zhongwuzw We can not assume that libdispatch always use a string literal to create the main queue. There are no any documentation or guard for this.\nAnd actually...Does this cause some performance issue. For short ASCII string using strcmp... @zhongwuzw Not worry...Just a little curious about this changes. Because from my personal experience I do not use == for any C string compare. And...I guess this seems a little overhead of performance :)\nBut anyway, I saw the source code of libdispatch. The queue label is stored in the queue struct. So they always get the same address. It seems that your consideration is adoptable. So we can use this and hope for Apple does not change this implementation. \ud83d\ude05 . This one can use semaphore as well. And it's not actually need a recursive lock(recusive mutex) to avoid deadlock :)\nBecause all you need is to get the array of running operations, you don't have to lock all the process including cancel && removal.\nSo the code can be like this:\nobjective-c\n- (void)cancelAll {\n    LOCK(self.runningOperationsLock);\n    NSArray<SDWebImageCombinedOperation *> *copiedOperations = [self.runningOperations copy];\n    UNLOCK(self.runningOperationsLock);\n    [copiedOperations makeObjectsPerformSelector:@selector(cancel)]; // This will call `safelyRemoveOperationFromRunning:` and remove from the array\n}. @hulizhen This line of code can be a little better. Check if operation is nil before, only it's not nil we need to lock the runningOperations.\nobjective-c\nif (!operation) {\n    return;\n}\nLOCK(self.runningOperationsLock);\n[self.runningOperations removeObject:operation];\nUNLOCK(self.runningOperationsLock);. \ud83d\ude05 Using a semaphore here...Well it's OK. But since most cases, the cancel method is called only once, there is no different performance impact for it. Using @synchronized is enough...But anyway, it's a option. The advantage to use @synchronized because it's easy, and process many race condition during using. For example, @synchronized is a recursive lock, means if you are using a @synchronized(self), it's safe to using @synchronized(operation) outside of your own code and avoid deadlock, which semaphore can not do it simply. And also, it add a try-catch block to unlock the lock when a exception was through. So even a runtime exception occur and was catched by user, the lock itself will not cause a unfair deadlock...\nI guess the proper way to using semaphore, is when using with NSMutableArray, NSMutableDictionary collection. You already know that this mutable property is not cause recursive lock, and no exception will occur, so it's safe and maybe more performent to use this. For a single object which method may be called only once, I guess @synchronized is better.... This feature is adoptable. However, from the maintainer side, this property should be moved to SDImageCacheConfig. This naming seems not follow our contributation guide. The enum name should be suffix with the type, to allow better generate Swift API (Swift user can use .accessDate to represent SDImageCacheExpireTypeAccessDate). And this will not cause any futher possible naming conflict.\nI suggest to name it to SDImageCacheExpireType. And its type should better use NSUInteger but not NSInteger. Because it's just a option and no need to allow negative number for raw value.\nAnd the correspond enum type should be \nSDImageCacheExpireTypeAccessDate & SDImageCacheExpireTypeModificationDate, which use the noun to describe that date. Follow Apple's NSURLContentAccessDateKey & NSURLContentModificationDateKey API design.\nobjective-c\ntypedef NS_ENUM(NSUInteger, SDImageCacheExpireType) {\n    SDImageCacheExpireTypeAccessDate,\n    SDImageCacheExpireTypeModificationDate\n}. This one, since SDWebImageContext was bridge to Swift as[SDWebImageContextOption : Any]?, which does not contains a default arg. So we shouldn't use NS_REFINED_FOR_SWIFT here.. Oops. I forgot add this method into header files during 5.x development. Here I fix it.. This API does no effect on macOS platform. So I mark this as NS_AVAILABLE_IOS to indicate this will be only available on iOS/tvOS.\nIf you think this not so obvious, we can replace it with API_UNAVAILABLE(macos). But we'd better not expose this symbol on macOS, since it does not take any effect.. @zhongwuzw Seems just by practice. Because Objective-C's @required protocol will not trigger a compile error for most of project configuration (until you specify -Werror-objc_protocol)...\nI think this check can be replaced with that canLoadWithURL, which may be better because even your URL such as ftp:// send to a HTTP downloader, this can avoid extra handler for custom download writer.\nI guess this one can be merged now.. immutable NSString seems always return self when call copyWithZone:. So acutally this does not cause any performance problem.\nWrite like this is just by practice, since in large project, refactory may loose something we assume at the code was written. For example, someone introduce a mutable NSMutableString...So I guess whether to change this or not seems not really important :). This is correct. Should use copy. For example, someone write like this _namespacePrefix = another.namespacePrefix, this will cause potential issue on mutable string.\nI write like this, just follow the old style of implementation copyWithZone:, which should better pass the zone params to every object property and call their coorespond attributed. For copy property, call copyWithZone:, for strong/weak property, call xxx getter method..NSString here use copy attribute, so I just use copyWithZone:, regardless of what actual class it is.\nBut actually, since now that zone params has no effect, you can directlly call self.namespacePrefix = another.namespacePrefix as well. Change or not seems no effect :). @zhongwuzw  Can we change if (atomic_load_explicit(&(token->_finishedCount), memory_order_relaxed) + atomic_load_explicit(&(token->_skippedCount), memory_order_relaxed) >= atomic_load_explicit(&(token->_totalCount), memory_order_relaxed)), the >= to == to solve this ? \nThe seconds thread enter, each single atomic counter should be correct, so the sum be larger than the total count, isn't it ?\n. Just OK to change. So I merge it now.. @zhongwuzw This should not change like this. Because _finishedCount means the task which is success. And _skippedCount means the task which is failed. Their sum should equal to _totalCount and call completion block. But not just _finishedCount. I guess maybe I mass up these value's meaning \ud83d\ude05 We can see the header files of SDWebImagePrefetcher.\nThe finished count is the count a task end, whether it's error or success. Always increase this number.\nThe skipped count is the count a task failed, only increase when error occur.\nThe total count is the number of input array url. This is not increased at all.\nWhy so that because you can Cancel a prefetch at any time. So the finished count may be smaller than total count.\nI guess this may be a little wired, but SDWebImage 4.x already use this in all the prefetcher delegate. So we just keep this value meanings. This should be changed to if atomic_load_explicit(&(token->_finishedCount), memory_order_relaxed) == token->_totalCount. You're correct. Acutally we can't use 2 options to handle 6 cases using permutations. Because 2! == 4. This change the order about remove and cancel. Previously it firstlly call cancel and then call remove. This time first call remove and then call cancel.\nThe SDWebImageCombiedOperation hold the completion block for the manager loading. So this may change the behavior. But I don't know whether or not this behavior should be relied on.\nAnyway, from my propose, change this seems OK. Actually....I don't know why previous writter use a NSDictionary to store just two type of completion block. Why not create a simple Object instead ? Without that tricky code anymore.\n```objectivec\n@interface SDWebImageDownloaderOperationCallback : NSObject\n@property (nonatomic, copy, nullable) SDWebImageDownloaderProgressBlock progressBlock;\n@property (nonatomic, copy, nullable) SDWebImageDownloaderCompletedBlock completionBlock;\n@end\n// Then just upgradte all internal APIs.\n@property (strong, nonatomic, nonnull) NSMutableArray *callbackBlocks;\n// - (nullable NSArray )callbacksForKey:(NSString )key -> Use this instead. Simpler\n- (NSArray )progressBlocks {\n    LOCK(self.callbacksLock);\n    NSMutableArray callbackBlocks = [self.callbackBlocks copy];\n    UNLOCK(self.callbacksLock);\n    NSMutableArray *mutableProgressBlocks = [NSMutableArray arrayWithCapacity:callbackBlocks.count];\n    for (SDWebImageDownloaderOperationCallback callbackBlock in callbackBlocks) {\n        [mutableProgressBlocks addObject:callbackBlock];\n    }\n    return [mutableProgressBlocks copy];\n}\n``\n. This change. Actually take no big benefit. All our key used for dictionary, are not suffix with@. So it does not trigger-[NSObject valueForKey:]` at all. So both of this is OK...\nActually. These changes may only about coding style :). @zhongwuzw I know...I means, there are not so huge performance issue on this. It just check NSString.character(at: 0) == \"@\", and call super instead...Seems sometimes you're worrying too much about performance \ud83d\ude05 \nAnd, Foundation framework is not private framework, the implementation can be found and disassembled using Hopper, don't need to paste that ARM assemble code :)\nobjectivec\n/* @class NSDictionary */\n-(void *)valueForKey:(void *)arg2 {\n    r15 = arg2;\n    r14 = self;\n    rbx = [r15 length];\n    if ((rbx != 0x0) && (([r15 characterAtIndex:0x0] & 0xffff) == 0x40)) {\n            r12 = [r15 _newSubstringWithRange:0x1 zone:rbx - 0x1];\n            if (r12 != 0x0) {\n                    var_30 = r14;\n                    rax = [[&var_30 super] valueForKey:r12];\n                    rbx = rax;\n                    [r12 release];\n            }\n            else {\n                    rbx = [r14 objectForKey:r15];\n            }\n    }\n    else {\n            rbx = [r14 objectForKey:r15];\n    }\n    rax = rbx;\n    return rax;\n}\nAnyway, we can change this without no issue...This is a better practice and coding style.. This break further APIs. Our users' code and related framework always use enum and switch case to check this image format. And using \"swich case\" (if-else-if) for NSString is not easy to use at all (Especially in Objective-C)\n\nsd_imageFormatForImageData:\nsd_UTTypeFromImageFormat:\nsd_imageFormatFromUTType:\n\nIf we want to change to string, why not just directly use Apple's UTType like kUTTypeGIF. They are all strings \ud83d\ude15 ...I guess it's better to keep this enum, but replace with a extensible way.. But anyway. Using a NS_STRING_ENUM can solve the problem 2 : Conflict define for same value. Because if we use string, we can do anything, like a prefix domain or something to avoid this. Instead of using that wiki page to list format raw value.\nHowever, I guess this need to change branch of API's implementation and headers. I'll try to replace with string enum and check the effected result to decide whether it's acceptable. \ud83d\ude34 . Any reason to change this ? Because using setObject:forKey: on NSDictionary is not a good coding style.\n[NSDictionary setValue:forKey:] will not throw exception and cause crash when the value is nil. However, setObject:forKey: does.. @zhongwuzw :)...Does this indent looks more clear ? I don't find anything different...\ud83d\ude02\nThe user who use SDWebImage, should not assume anything about the raw value. Only the plugin developer who need provide new image foramt, should avoid duplicated raw value. So I guess maybe write something like this does not do anything....\nAnd the original enum define also does not contains any indent as well.... @bpoplauschi We don't need to list all image format, which is not supported with SDWebImage core repo. The coder plugin is designed to as a plugin, so the core lib should not dependent on the plugin. So if someone want to define the new image format, they can define it in the plugin repo, but not constantly upgrade our SDWebImage core repo (And not all plugins are written by us, they can be written by anyone) .\nActually, why I fire this PR, because of that I try to upgrade SDWebImageBPG coder which support encoding BPG images. I try to define SDImageFormatBPG in that plugin repo, however, finding current enum does not allow Swift user to use in switch case. So I create this PR.\nAfter this finished, I can update thoes plugin provided in SDWebImage Organization. And you can see, after change this, when people import both of core lib and plugin, then can use switch case in both Objective-C and Swift. So it's no need to define this value in the core lib.. @zhongwuzw See the new commit.... Could we make this API, more similiar to disaptch_group ? Like the Swift interface from Apple...\n```objective-c\n@interface SDWebImageGroup : NSObject\n@property (nonatomic, class, readonly) SDWebImageGroup *group;\n\n(void)enter;\n(void)leave;\n(void)notify:(dispatch_queue_t)queue block:(dispatch_block_t)block;\n(void)wait;\n(void)waitUntil:(dispatch_time_t)timeout;\n\n@end\n```\nBut anyway, I'd suggest to make this class totally private, so whatever API is OK. :). This change is adoptable. Because this may shadow the options arg from the input arg. But this is not related to this PR, create another instead...\nFor each PR, it should contains the most related change for the feature/bugfix. Don't try to bundle something unrelated to a single PR, because this will make it hard to review, and may cause issue if we want to revert.. ...emmm. Am I miss something ?\nI means, move all code, into [SDDiskCache initWithCachePath:config:] method. Don't need to modify any code in SDImageCache.m, this method should not be visible in header files as well.\nDuring init method of SDDiskCache, use dispatch_once + global queue to only move once.. This NSURLCredential don't need to be required method in protocol. The requried method should be the important method for basic network request. So it's better to move to optional method instead.. This return value, in 4.x, should be NSOpration<SDWebImageDownloadOperationInterface>.\nMaybe we can create another commit to fix it, leave it is OK as well.\nAnyway, I fix this during 5.x merge. . I think, if we change the method to just createDownloaderOperationWithUrl. The url arg should be nonnull, because when the url is nil, the caller method downloadImageWithURL: already handle this case and earily return the response. So actually this should be removed.. This seems does not handle tvOS, so it's better to use SD_UIKIT instead.. Actually...Do we need this check ? By default we return YES, and this SDWebImageIOCoder should contains the lowest priority in the coders. So check the HEIC/HEIF decoding possibility seems useless. I forget the reason why we use this check...\ud83d\ude05 . 1. When dstPath does not exist, we do a movement of directory, which is more easier.\n2. When dstPath is a file, we remove it and fallthrough to the 1. case above. Since the arg dstPath you pass is from user, and the comment there list the behavior. Maybe remove of that file is adoptable.\n3. When merge exist, this case only happened if both srcPath && dstPath are directory, so this will not raise error, until you pass a dstPath which is not writeable (Such as /System/Library)\n4. Previously I think we can put a error pointer. I don't know whether user want to know the erorr, if they want, they can use the NSFileManagerDelegate to handle the error. So I don't add one arg here. This can be still in discussion.\n5. This is just a movement of SDDiskCahce disk cache. It's not a helper method or util. For example, maybe someday we change the implementration to also rename something during cache path movement. It's possible. So it's better not to treate this as a common method . Correct. I'll provide a fix for the 1. case...\nFor the 2. case, it seems that during merge we ommit the error and continue, isn't it adoptable? And since you can always get the error delegate method from NSFileManager, maybe keep this is OK. This seems a good way to filter the operation. But the zero weak reference in Objective-C may be not as you think from their implementation. What if the weak object during addObserver:selector:name:object:] is alive, but when later a notification is triggered and the weak object is already dealloced (Like KVO, which will crash for this case) ? Because NSNotification's implementation based on CoreFoundation, this need some detailed behavior documentation and maybe not so obvious to answer.. And. Since you say also do once when created. What about to just create a init method like this, to init the download operation once and does not change it ?\n```objective-c\n@implementation SDWebImageDownloadToken\n\n\n(void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:SDWebImageDownloadReceiveResponseNotification object:self.downloadOperation];\n}\n\n\n(instancetype)initWithDownloadOperation:(NSOperation *)downloadOperation {\n    self = [super init];\n    if (self) {\n        self.downloadOperation = downloadOperation;\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(downloadReceiveResponse:) name:SDWebImageDownloadReceiveResponseNotification object:downloadOperation];\n    }\n    return self;\n}\n\n\n(void)downloadReceiveResponse:(NSNotification )notification {\n    NSOperation downloadOperation = notification.object;\n    if (downloadOperation && downloadOperation == self.downloadOperation) {\n        self.response = downloadOperation.response;\n    }\n}\n@end\n``. @zhongwuzw Yeah...If theobjectarg in theaddObserver:selector:name:object:was not be referenced asunsafe_unsafe_unretaind, which like the behavior ofobserver` arg before iOS 9, so my worry can be disappear.\n\n\nI test this code with demo running iOS 8, it seems works without any issue. Maybe this can be adoptable.\nAnd there are another question : \"What's the behavior, if I register a weak object with notification name, the weak object is dealloced, but another object send the same notification name ? \". I test it.  The answer is that you don't receive the notification. (Like this observer paire is disappeared).\nChanging this is adopable, but as we do, we should know the non-documented behavior of NSNotification, which is not so simple, So this is why I think this should be carefully considered.. Emm.....What does this used for ? The SDWebImageDownloadToken just use a internal class category for write access and init (Actually, the init method should be marked as NS_UNAVAILBLE). So we don't need to change anything on the header files.. \ud83d\ude05Since this is the implementation files, don't need to write NS_DESIGNATED_INITIALIZER, because designed initilizer must override super class init method (NSObject.init). Just this line is OK.\nobjective-c\n- (nonnull instancetype)initWithDownloadOperation:(nullable NSOperation<SDWebImageDownloaderOperation> *)downloadOperation;\nAnd travis-ci failed does not because of this change (that HTTP auth server issue), ignore it :). Any reason to change this ? By the time when coder queue running this block task, the download may have already finished, the remaining pending decoding task should be canceld (like early return). Emm...Maybe from the semantics is right. I previously use NSTimeInterval because it's has the meaning interval. But double is correct, because it does not represent time.\nAnd, if you change here declaration, also change the correspond proproty in SDWebImageDownloadConfig and SDWebImageDownloadOperation protocol. I guess maybe this should be changed to this, right ? Current code will cause the progress block not been called even when download finished with 100%. So it means, if the minimumProgressInterval = 0.50001, we should call progressBlock twice (ignore the other progressBlock outsize URLSession:dataTask:didReceiveData:).\nSo, the correct one should be this:\nobjective-c\nif ((currentProgress - previousProgress) < self.minimumProgressInterval && !finished) {\n  // return;\n}\nI can fix this issue, because the bug was introduce by me.... Maybe use _ivar is better...I'm not a developer from MRC time, I just think, the setter of property should always been called, instead of directlly acess ivar. Like you use copy annotation or write a custom setter method like lazy initilizer. But however, in the init method of Cbjective-C, maybe use ivar is OK because it's called init method and provide the default state.. Just keep the current thing...Maybe it's more about coding style. And most of case, it should not cause dead lock because the setter will not trigger another the same getter...I guess sometimes I'll forget to call copy when the input arg is a NSMutableArray or NSMutableDictionary so I sometimes use dot syntax to call setter to handle this..\nAnyway, I revert it.. @zhongwuzw And, does this line code actually effect your use case ?\nI introduce this feature, because some of user find that decoding big WebP may consume more time, so that even the download already finished, the progressive decoding is still happend until final decoding task finished and show the final full resolution image. Which is useless because you already have the full image data.\nThis will only occur when your decoding code is slow (like use non-performant software codec on low CPU hardware). You can also check that SDWebImageProgressiveJPEGDemo.\nBut currentlly, seems the final progressive decoding (with finished = YES) will never been called. So, do we need to expect the finish status here ? Like changing it to this:\nobjective-c\n// We only do final progressive decoding (with finished=YES) once.\n// All the subsequence tasks dispatched to the coder queue between first receive bytes and the last bytes finished should be ignored.\nif (finished && !downloadFinished) {\n   return;\n}\n// Do progressive decoding. downloadFinished is a scalar type but not reference by object. So if the URLSession delegate called first time all bytes was downloaded, the downloadFinished = YES and visible in the block.\nHowever, current coder queue may not be empty and contains the pending progressive decoding task with a partial image data. We don't need wait them to be finished. Early cancel them, only let the final status (Current receivedSize == expectedSize && captured downloadFinished == YES) do progressive decoding.\nThis can ensure some coders to finish their final state. (Or this updateIncrementalData:finished: finished arg will always be NO). Like someone do a cleanup when finished == YES. I'll do that.. If this change is under consideration, maybe we can take further talk about it. I can just revert it to previous 4.x state.. @zhongwuzw This assume (downloadFinished == YES) => (finished == YES). Current it's right. Maybe I just think too much. Only these two case, we need continue prorgessive decoding:\n\ndownloadFinished == YES && finished == YES\ndownloadFinished == NO && finished == NO. @zhongwuzw Noop...Here is a long story.\n\nSome of image coder, when implement progressive decoding, need to use many C level API, and they need a time to call API to stop progressive decoding and do a clean up. So there is an finished arg in progressive coder protocol. We'd better make it been called.\nAnd, we could not store and progressive decoded image and use that for final completion callback. Though a ideal progressive decoder, should actually produce the same image when final image data is updated, as well as normal decoding with the same data. Like Apple's Image/IO for JPEG images. However, the real world is not. libwebp, for example, does not produce the same image bitmap buffer even we update the final full data, and it does not support progressive decoding Animated WebP. So we'd better to call normal decoding for final callback.. Actually...I think progressive decoding code logic here contains aother issue as well. But I don't know if it's suitable to change.\nFor example, since we separate the decoding task to coder queue, network callback to URLSession queue. I think that [imageData copy] should also be considered about queue change.\nCurrent implementation, since we copy the image data in the URLSession delegate queue, so we will decode the data snapshot each time URLSession delegate callback.\nHowever, what about, copy the imageData, just when the actual decoding task begin ? Which means we will decode the data snapshot each time coder queue run. This two are different, consider the case when network callback speed is fast but decoding is slow. Then the second one will be more accurate but refresh image less frequently, which always refresh current downloaded image representation.\nNote this must use synchronization solution like lock or session queue dispatch to ensure thread-safe.\nobjective-c\ndispatch_async(self.coderQueue, ^{\n    // LOCK\n    NSData *imageData = [self.imageData copy];\n    // UNLOCK\n    // decode current image data\n    [self.progressiveDecoder decodeWithData:imageData];\n};. @zhongwuzw Correct. Both of two policy are adoptable, I don't know which one is better. So I say it's need discussion. \ud83d\ude15 \nBut since this discussion need further consideration, I can revert this changes just back to 4.x current code. Only fix the bug firstly.... This indicator was introduced in 5.x. During writing my tests for this feature, I find that this order is more suitable for user...At most of time, people can write their business code in progressBlock but not in SDWebImageIndicator protocol implementation.\nSo if they need some check of current status, putting the progressBlock after that indicator was called, can make a help (Or if the progerssBlock called before that, maybe some UI staus will be hard to sync). @zhongwuzw Rebase to one commit.\nThis change roll back to 4.x behavior. We copy the image data snapshot each URLSession delegate call, as well as current finish status.\nI think we can create a issue firstly to talk about whether we need to choose some other way for this.. Opps...This comment should be removed because of that #2437 change the order, or this test will not pass. Emm...Code review is OK. But is there any sugesstion about the API's usage ? I want to get the idea or the use case of the original API. This API implementation, as I say, it's just a naive copy from the SDWebImagePrefetcher, maybe will be changed when I know the what problem it want to solve. . This will reach a un-balanced of dispatch_group_enter && dispatch_group_leave. Because for the placeholder, we also call the setImageBlock, with a dispatch_group_enter. If we return it without call dispatch_group_leave, it will crash. This key.pathExtension (including one in the bottom), should use ext local variable instead. Because we check to use NSURL or NSString Path for compatible reason. Don't use key.pathExtension directly.. ? Why does placeholder to be considered GIF but not conatains associatedAnimatedImage?\nif we have a placeholder image, it's GIF, and not have associatedAnimatedImage this case can not happen...\nI think most of questions, you consider too much. We should fix the most potential problem, instead of do optimization for something that does not represent the root case or assume something without profile test result.. We accept the placeholder of FLAnimatedImage, this break previous user's usage. See the comments in UIImage+FLAnimatedImage\n\nFor most cases this is read-only and you should avoid manually setting this value. Util some cases like using placeholder with a FLAnimatedImage.. @zhongwuzw See that sd_imageFormat, it's not a animatedImageWithImages. _UIAnimatedImage are not GIF image....This is what we introduced in this 4.2.2 version.\n\nYou must bind the FLAnimatedImage on the UIImage instance, or you have a image data, which File Signature can be detected with GIF, any other will not treated as GIF. As placeholder, imageData is always nil. See that code with comments... ....emmm, I still can not get the point, how will this \"placeholder image is GIF, but it does not contains an associated FLAnimagedImage\" happens ? The placeholder is provided by user, but not anything that from our decoder. I can figure one point: There is no difference for a image to set, during setImageBlock. It should never consider what the image is from, but only the image to be set. The placeholder process should always be equal to the final image, or some of feature basic assumtation are broken. For example, cell reusing (rely image to be refrshed multiple times during same runloop), view transition (rely previous placeholder and current image to be set differently). I get your point.\nobjective-c\nUIImage *placeholder = [UIImage sd_animatedGIFWithData:data];\nActually, this usage is wrong. Because for FLAnimatedImageView, you should always use FLAnimatedImage for GIF representation, but not the thing like the code above, to create a _UIAnimatedImage which represent the GIF image. Mix them will cause many potential issue.\nAnother thing, why here we query the diskCache for the url, even that we does not have imageData. It's because of a rare case that one user face: Sometime that memory cached image hit, but the retuend image instance does not get associated FLAnimatedImage. It's may because that they previouslly query one GIF url, on the normal UIImageView, so the cached GIF does not contains the FLAnimatedImage (But actually it's quite rare, and we don't find the root case beside this potential reason).\nI think this case it's not good to solve, so the previous version add a backup to query disk cache. But from your idea, I think it's not a good idea. We should also revert this query disk cache behavior, only continue when we have nonnull imageData.\nIf we remove that query disk cache behavior, so this problem solved, because placeholder does not contains imageData, even it's a GIF representation. So we can earily return.\nSee the related changes in #2393 . Emm...The 4.x seems sd_cacheFLAnimatedImage is optional. But 5.x, this is built-in behavior that can not disable it.\nFor this issue, so you means you need to check whether it's placeholder ? But still need to query disk cache ?\nIf so, I can just update that PR to introduce this check, without any public API changed.. This line should not. When the url is invalid or anything. (See our code which can return a SDWebImageErrorInvalidURL) You should always callback immediatelly on the caller queue. Instead of any queue dispatch. It's a common behavior, so this one follows. Done...But actually this is not a create. It's does nothing than local pointer reference, and will be optimized by the compiler.. These noOf... exist from the SDWebImagePrefetcher code, I rename all of them into numberOf.... ...Acutally this is copied from SDWebImagePrefecher.prefetchURLs. Put these two into one or two does not cause anything for the final compiler result. Anyway, I change them together.. Add Setting this to zero means expiring immediately comment here to specify the detail behavior.. This private method now is no use at all. Since we scale the image during image decoding and it's never get called.. The reason to change this ? We need to check that the current data contains hole previous data, not a subsequence of previous data. So that range.length == previousData.length is necessary.. @zhongwuzw Is that the documented behavior ? This simple check seems not cause any performance cost, and make the code more readable. I think leave it does not seems cause some issue and I test it the length is actually match previousData.length during stress test. I see...So it means actually this API is implemented as this ?\n```objectivec\n- (NSRange)rangeOfData:(NSData *)dataToFind options:(NSDataSearchOptions)mask range:(NSRange)searchRange {\n   NSUInteger loc = [self beginOfData:dataToFind options:mask range:searchRange]; \n   return NSMakeRange(loc, dataToFind.length); // Just a pass the value out\n}\n\n(NSUInteger)beginOfData:(NSData *)dataToFind options:(NSDataSearchOptions)mask range:(NSRange)searchRange {\n //... actual implementation \n}\n```\n\nAnyway, I think this check is OK. Which does not cost any performance cost and make code readable. No need to remove this.... Emm....If that document's behavior is correc, I think change it into range.location != NSNotFound is more suitable. Did you test that if we provide NSDataSearchAnchored, the range.location is either NSNotFound or 0, no other value can be returned ? If this is true, change this is adoptable.. @zhongwuzw I see. My previous comments does not means we don't use autoreleasing pool. I means for some small logic block, espacially this one that may not contains logic to produce much autoreleasing object. It seems don't need to add one.\nBut anyway, brainlessly adding all block with autoreleasing pool is OK as well. Since it only contains temporary memory usage.. Emm...This import seems contains issue. Maybe we should use #if __has_include(< SDMapKitWebImage/MKAnnotationView+WebCache.h>)\nAny, I still suggest to use SDWebImageMapKit for generated framework naming. Using the suffix one seems a little strange compared to other frameworks. . @bpoplauschi \ud83d\ude05...It seems that some Cocoa developer like the suffix naming than the prefix one. Anyway, it's OK. But I'm surprised that that this __has_include will pass and does not cause issue ?. One question: I think for issue, it's easy for our contributor to determine whether it's important or not. And can be clearly tagged such as crash, bug, etc. So the stale config is correct.\nHowever, for PRs, sometime we can not immediatelly determine whether it's important or not. Because it's base on implementation but not what this PR solved. We need review it toally and get the idea. And people who create PR (normally the first time commiter), have no right to tag their PR with any tag. So I think this may sometimes make it harder for new commiter to give us their idea. (I don't want to effect someone's heart about open source contribution).\nCan stale have different config namespace between PR or issue ? For example, for PR, the time stay longer. Or for PR, using more aspects to keep it not stale (for example, if some PR's milestone is future, we don't stale it). Looks like they have namespace...Options without any pulls or issues as common configuration. You can then add pulls to override the common configuration and specify it for PR only. I can have a try on SDWebImagePhotosPlugin.... Seems a solution. Actually what I want maybe like this. However, I read their doc seems this feature is in development and not available.\npulls:\n    exemptMilestones:\n        - future\nCurrently it's OK to merge. 60 days is enough for our contributor to talk about on PR.. \uff1fWhat the reason to use @ synchronized. The self.dataTask and self.ownedSession is immutable after we initilize them in in the start method. No any write operation to that operation.. Check you logic again. I remember there are previous a crash because of self.imageData = nil (trigger from user's [operation cancel] queue) can happend when URLSessionDelegate call didReceiveData: (triggered in URLSession delegate queue) at the same time. See #2011 \nHowever, thedataTask.cancel is different case from imageData. If you walkthrough this logic, there should not be chance to trigger self.dataTask = nil && self.dataTask at the same time in different queue. Because this is a NSOperation, the cancel state will cause the operation queue remove it. While the URLSession will also stop further delegate callback.. Could you give some code path ? I remember at that time (Half year ago) I check the total path for that thread-safe issue. Checked any write operation insdie reset method. Other property does not cause thread-safe issue.. Can we change it to this ? I think it's better than a hard-coded 1, because user may accidently use this method on a retina scaled image. So it may not always in the 1 scale.\nif (scale != image.scale). These method are here to keep the compatible for UIKit's 5 methods. Previouslly we have only 4 because we don't use this simple SDGraphicsBeginImageContext. Where we use always contains a scale args so we use the SDGraphicsBeginImageContextWithOptions. Apple says:\n\nThis function is equivalent to calling the UIGraphicsBeginImageContextWithOptions function with the opaque parameter set to NO and a scale factor of 1.0.. I guess since UIKit have the built-in implementation, we can just call them. Even if someday they change the implementations, or update the documentation,which don't follows what they said \ud83d\ude05 . Just follow what our documentation says, no extra assume.\nFor UIKit, these methods just call the same method in UIGraphics.h. See the documentation for usage.. Small question, does this variable naming cause a Xcode warning ? \ud83d\ude15 Anyway it's OK, just a little curious. OK.. This behavior change seems have no document update, and it's not suitable in a patch version release.. Naming issue. All Objective-C method with a simple property getter, should use the property name without get keyword. get keyword is means this property is available via a asynchronously completionblock. Rename this to sd_imageURLWithOperationKey: or more appropriate name. . It's a bug or test code. Because when moving the old path ~/Library/Caches/default/com.hackemist.SDWebImageCache.default/ to new path ~/Library/Caches/com.hackemist.SDImageCache/default/, I found that there are still a empty folder ~/Library/Caches/default/ there. So I remove it.\n\nActually this remove it's not safe, because default is a common name without any reverse domain, other people may have already write something into it. It's not good to remove it. I can just revert this line of code.. Don't need. Because current 5.0.0-beta3 is a prerelease. We follow semversion and already point this out inside the Wiki that \"The public API in beta version may change between different beta release\".\nSee semversion's spec for this case: https://semver.org/#spec-item-9\n\nA pre-release version indicates that the version is unstable and might not satisfy the intended compatibility requirements as denoted by its associated normal version.\n\nAnd there are also a GitHub issue for this case: https://github.com/semver/semver/issues/350. CIImage use various image representation. It's not gurentee in the RAM (can be VRAM on GPU), and it's even not gurantee to be a in-memory object (such as you can feed a mmap object). So just return the 0 number to indicate this value is not available. The SDMemoryCache allow this value and NSCache support 0.. > we also need add another property to return memory cost if user define a custom UIImage.\nThis is not a valid case.We allow customization, but not means we support every design pattern for your customization. The image your provide to communicate with our framework (SDWebImage), it's designed to use subclass. See why we create Animated Image Class Customization.\n. > the cost is the memory cost of UIImage instance, and we can't only take rendering bytes into account,\nWe care about the most important thing of performance, but not every object you attach. The compressed image data, for example, 1000x1000 JPEG image, contains only less than 100KB, but the bytes of the bitmap buffer (1000 x 1000 x 3 bits) occupy is 2.86MB.\nAnd this is open, which means if you really need your own custom class (Typically I don't think people do this. It's designed to be compatible for YYImage/FLImage), you can add the cost of the compressed image data. > SDMemoryCache only need to call sd_memoryCost of any UIImag\nI told the reason why use subclass over category. Because the Custom Image Class is designed to be advanced usage, and mostlly, for the Animated Image solution in 5.x. It's not designed to be any cache specify solution.\nAnd it's not suitable for SDWebImage, to add more read-write category property on UIImage instance. Because the category property will be lost during many image process.\nWe have Force Decode feature, which will draw your image bitmap context and create a new image instance. You loss all the property.\nWe have Image Transformer. Which will do image transforming using CG or vImage, and create new UIImage instance. You custom catarogy property will lose as well.\nBut if we use subclass and protocol, we can add a check. It's good to see this code inside your image process code.\nif ([image confromToProtocol:@protocol(SDAnimatedImage)]) {\n    // ....\n}\nBut it's bad to see this instead.\nif (image.sd_memoryCost != 0) {\n    // ....  \n}. I decide to not do migration for those folder. Because migration it's not a cheap. And it's not a good idea to do any tie dependency of the cache folder. Because it's can become invalid at any time. Apple iOS system may purge your User Cache folder as well. It's not a server DataBase migration.\nExpect this issue, any extra consideration about this PR ?\n. This is another issue. Don't place them together.\nYour reply is about \"Since we have a SDMemoryCacheCostForImage global function, why not just check SDAnimatedImage protocol inside that function ? Suck Guy?\"\nThis is because by the time I create this MR, I assume that the Coder Plugin Author (like SDWebImageYYPlugins bring YYImage support) will call SDMemoryCacheCostForImage inside their own implementation of the protocol method, like this.\n```objective-c\n@implementation YYImage (SDAnimatedImage)\n\n(NSUInteger)animatedImageMemoryCost {\n    if (self.animatedImageFrameCount <= 1) {\n        return SDMemoryCacheCostForImage(self); // This will cause a recursion\n    } else {\n        return bytesPerFrame * frameCount;\n    }\n}\n@end\n```\n\nBut now, I agree with you and think it's stupid to protect this. I can correct the documentation and code to handle the SDAnimatedImage protocol inside that global method.. Actually my reply above, is about that using sd_memoryCost this category read-write property is not good idea. We should use subclass and protocol method. But maybe my reference comment cause misunderstanding.. It's quite simple to do this migration for 5.0.0-beta3 user, just a simpe line of code to call. But I'm afraid this migration list will become more and more huge, like a pain.\nIf I'm an author of a K-V storage or database framework, I'll be careful about the migration. But actually, SD's cache is a simple cache, no important users' files are here, and it's always purgable.\nI can add one Important Change section in the CHANGELOG.md as well as migration guide, to point this out about directory during 5.x beta versions. People can also call that migration code by their own just as we do for them, actually. . @jerelevine The low priority is always set by user. And since it's always writrable unless the operation been pop from the queue, I think we just use the final option is OK.\nAnyway, this does not effect too much of behavior the operation was running. Just a hint to NSOperationQueue.. Does this cause issue actually ? I want to know the use case to change this code.\nSeem this [self cancelImageLoadOperationWithKey:key] is here from the day one of SDWebImage via 4c18545. ...Why not just simply use the code, but use a total cancel call ? This is not what it need to do.\n#if SD_UIKIT\n         if (self.backgroundTaskId != UIBackgroundTaskInvalid) {\n             // If backgroundTaskId != UIBackgroundTaskInvalid, sharedApplication is always exist\n             UIApplication * app = [UIApplication performSelector:@selector(sharedApplication)];\n             [app endBackgroundTask:self.backgroundTaskId];\n         }\n #endif. Call cancel in dealloc have a un-predictable effect. Because NSOperationQueue KVO your cancelled, finished property and have their logic. And I don't know what that wasteful things is.\nI just mean to add just what you directly designed to solve, do not add extra code with unrelated changes. If you can sure your previous test is OK. Just remove anything in the dealloc method and I can start merging.. I'll fix the comment here soon. Seems it was not sync to the code changes.. This is check for that the operation is pending on the queue. What do you mean ?. This is already been used widely. I rename it with only disk keyword to make it easy to find the replacement. No changes is needed.\n\nAvoid obscure terms if a more common word conveys meaning just as well. Don\u2019t say \u201cepidermis\u201d if \u201cskin\u201d will serve your purpose. Terms of art are an essential communication tool, but should only be used to capture crucial meaning that would otherwise be lost.\n\nSee what we refer to https://github.com/ibireme/YYCache/blob/master/YYCache/YYDiskCache.h#L114. This introduced API is useless. Is this really helpful for current user (Or for your own framework business code ?)\nIf the answer is NO, delete it and use other way instead (private header, or inline method). The one naming I though, it's to use totalDiskCacheSize. But I think it's a little dummy because we're already using the SDImageCache and everyone know it have a disk cache. Both of these two name is OK actually.\nYY also name it simple, it's enough to distinguish from the memory cache representation.\nhttps://github.com/ibireme/YYCache/blob/master/YYCache/YYDiskCache.h#L96. The combine usage !operation.isFinished && !operation.isExecuting is necessary for checking operation is ready but not started. So need this check.\nThe options & SDWebImageDownloaderHighPriority on the left is because of we only need to touch in this condition. This can slightly increase the performance because isExecuting && isFinished need synchronization inside its getter method.\nThe goal of this line, is to check whether current new operation, or an operation is already in the queue and been re-queried, should update its queue priority. So I think it's the right place.. This is not suitable code. You can not assume all View are CALayer based, or it's suitable to touch contents for rendering.\nFor example, on macOS, there are CPU-based view && layer-backed view && layer-hosting view. The layer may be nil.\nFor example, on iOS, there are many layer like CAEAGLLayer, CATextLayer, which the contents is always be nil and been ignored (because they draw on extra context like OpenGL/Metal or use vector rendering tech). You should not touch them.\nFor customization, always pass your draw code inside that setImageBlock.. @cntrump Could you tell me why you need to query the existed placeholder image which has the same URL, and then load again ? Is this not a logic bug but a common use cases ?\nIf so, we have to remove that code specify for any placeholder, and trigger a actual disk query.. @cntrump This demo code actual cause that case\n\nProvide a placeholder image which is exact the same as the queried image url instance (from cache)\n\nSo if this is a designed behavior but not a developer bug, We should fix it by not checking anything related to placeholder. I can provide a PR for that or you can do it as well.\nHowever, current PR's changes inside that UIView+WebCache is not correct...Placeholder is image as well, its render should use the provided setImageBlock but not use a nil.. My fault. We have to keep placeholder check, but need a better way to filter the cases to distringuish the difference between user provided placeholder image instance and image queried from cache instance. Because placeholder should not trigger any dispatch queue async operation, or the Cell-Reusing will be incorrect...I'll try to do this.. This PR is closed. Because it's not related to that issue due to my fault.. ...I don't understand what's the reason, to put these code inside the synchonized lock. Does this modify the download queue and cause thread-safe issue ?. And that StalenessInterval sounds quite not for most programmer. \nAnd we can find another example, HTTP Cache Control use the max-age  represent exact what we've used. It also have a max-stale value, which represent even if the cache is marked not fresh and need to cleanup, I can extend the further time. So I think it's suitable for the current naming.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control. Size can mean two dimension in geometry. But however, in the concept about bytes. We always use heap size, memory size, bytes size to point to the bytes we used.\nActually these two method, just renaming it to not to use get word. It's not suitable because of Objective-C API naming guideline. So I replace the get with total, other words is kept.. I'll create another PR to revert this again. This is a designed logic and should be kept.. My consideration is performance, not whether the code is clean or not. It\u2019s the PR\u2019s author\u2019s responsibility to make better code.\nIf you mean \u201cI don\u2019t want to check that condition twice, it make my code ugly\u201d, you can write a bool variable to check. It\u2019s not hard and does not impact current performance. There are no 5 cases....You can check the logic. And my though it's only that don't put unrelated code insdie a code unit that is specify for thread-safe synchronization\n\noperation == nil: impossible. Always nonnull after that LOCK end.\noperation.isCancelled: Does not cause issue whether is cancelled or not. We just touch the queuePriority.\noperation.isExecuting: Must check. If not executing, can be either pending in queue, or already finished or be cannled.\noperation.isFinished: Does not cause issue whether is finished or not.\n\nYou can simplify your code like this.\n```\nUNLOCK(self.operationsLock);\nif (!operation.isExecuting) {\n    // xxxx\n}\n```. > it's the initialize operation.\nThis is not initialize operation. \ud83d\ude15 If this is a initialize operation, why not place all of this code into the createDownloaderOperationWithUrl:options: ?\nThis is a logic applied for something after we quired one valid operation.. @kinarob This block type, is actually from 5.0.0's define. Please see here: https://github.com/SDWebImage/SDWebImage/blob/5.x/SDWebImage/UIView+WebCache.h#L20\nThe reason why \"here is a imageURL arg\", is the same as why \"SDExternalCompletionBlock, SDWebImageTransitionPreparesBlock all of these have a imageURL arg\".\nAfter I search the git history, I found it's related to #722 and #770. It's not ideal actually (I can explain why later), but since it's already a stable API, keep it with the same arg lists.. It's not related to this issue, but I can find something possible reason with that imageURL arg.\nPros\nFirst, it make your completionBlock become non-escapable, which means from the user side, you can pass one SDExternalCompletionBlock from different method API, without keeping a extra url arg, it's a non-side effect closure.\nSecond, it make usage easy. For the most cases during cell reusing imageView, you don't need to worry about self capture if you just want to check url to ensure load correctly. Because when write code inside the SDExternalCompletionBlock using something like self.imageURL, you may forget the fact that you cause a temporary retain-cycle (see here). It's a common mistake. But when imageURL is just available in completionBlock, this can avoid that mistake.\nThird, it make something possible in the future's feature, like something I've talked about in #2587. With this imageURL arg, maybe in the 5.x, we can implements a feature that allow user to provide a backup url list, or retry with another CDN url feature. When original image URL download failed and do something like retry, we can change the base URL instead, so this time, the imageURL is important because it's not equal to the original one you passed.\nCons\nThe biggest disadvantage of that all View loading related completion block keep a extra imageURL, is that we break tons of APIs during 3.x into 4.x. And we need to keep this design in the future since imageURL is really key point in the top-level API. But thankfully, we've already broken it. So now, just follow it if we can not find any important issue with that.. This method is create method...I place the CF_RETURNS_RETAINED, so that the caller should use CFRelease on that CGColorSpace object.. Seems I miss the WebPDemuxReleaseChunkIterator call after that CGColorSpace was created.. Emm...Does this really need using a C function instead of Objective-C method ? I think previous one is OK. Anyway, it's a choice to write C-based method or Objective-C method.. We can just directlly fix the potential leak issue. Changing to C function, seems a little wired... Typically only some small function (which can be inlined), or function need to communicate with third-party C library (like libheif, libwebp), I use the C function instead.\nI remember that since 5.0, I renamed many public global C functions (previouslly inside that SDWebImageCoder.h into the Objective-C class function, because it's easy to use both in Objective-C and Swift.. Emm...That sd_colorSpaceWithDemuxer method, will try to create a ICC-based CGColorSpace. If the ICC chunk is empty or anything failed, it will return a default colorSpace with retain count +1, So just use that sd_colorSpaceWithDemuxer:demuxer instead.\nThat method's logic is written to avoid the caller worry about the backup colorSpace.. This seems good. CGColorSpace will copy the ICC profile data. So this don't need a extra copy.... So..This obey that method' usage. What about change this into the code below ?\n```objective-c\n- (nonnull CGColorSpaceRef)sd_colorSpaceWithDemuxer:(nonnull WebPDemuxer *)demuxer CF_RETURNS_RETAINED {\n    uint32_t flags = WebPDemuxGetI(demuxer, WEBP_FF_FORMAT_FLAGS);\n    CGColorSpace colorSpace = NULL;\nif (flags & ICCP_FLAG) {\n   // Original logic, paste here\n} else {\n    olorSpace = SDCGColorSpaceGetDeviceRGB();\n    CGColorSpaceRetain(colorSpace);\n}\n\nreturn colorSpace;\n\n}\n```\n. Full code, you can pick it here. (I remember GitHub there is a feature to allow code snippet inside code review and directlly commit, is that been removed ?)\n```objective-c\n- (nonnull CGColorSpaceRef)sd_colorSpaceWithDemuxer:(nonnull WebPDemuxer *)demuxer CF_RETURNS_RETAINED {\n    // WebP contains ICC Profile should use the desired colorspace, instead of default device colorspace\n    // See: https://developers.google.com/speed/webp/docs/riff_container#color_profile\n    uint32_t flags = WebPDemuxGetI(demuxer, WEBP_FF_FORMAT_FLAGS);\n    CGColorSpace colorSpace = NULL;\nif (flags & ICCP_FLAG) {\n    WebPChunkIterator chunk_iter;\n    CGColorSpaceRef colorSpaceRef = NULL;\n\n    int result = WebPDemuxGetChunk(demuxer, \"ICCP\", 1, &chunk_iter);\n    if (result) {\n        NSData *profileData = NSData *profileData = [NSData dataWithBytesNoCopy:(void *)chunk_iter.chunk.bytes length:chunk_iter.chunk.size freeWhenDone:NO];\n        colorSpaceRef = CGColorSpaceCreateWithICCProfile((__bridge CFDataRef)profileData);\n        WebPDemuxReleaseChunkIterator(&chunk_iter);\n    }\n}\n\nif (!colorSpaceRef) {\n    colorSpaceRef = SDCGColorSpaceGetDeviceRGB();\n    CGColorSpaceRetain(colorSpaceRef);\n}\n\nreturn colorSpaceRef;\n\n}\n```. Is not argue. Though this can be fixed once by the in-place code, but please, you should understand I'm maintaining both 4.x && 5.0 codebase. So I'm happy if the same code or fix can applied for both branch. If there are no any extra effort.\nIn the 5.x codebase, the sd_colorSpaceWithDemuxer is called from 4 different part, if I seperate the check of that if (flags & ICCP_FLAG) {...}. I need to dunplicate the code 4 times. So I think put them together is better to help for me to maintain.. I'll apologize if my reply is offensive. I just want \"if these changes is not so hard , please have a update, or I have to create a MR and merge again...\". \ud83d\ude2a \nAnd I think since all the official coders are in our orgnization, each of SDWebImage orgnization memeber can join and contribute. Even though I learned a lot knowledge about image decoding / encoding, everyone can make mistake or have something unknown part.\nAnyway, I'll merge this now. As well as the 5.x WebP.. That WebPChunkIterator is a struct hold in the stack not heap. If the WebPDemuxGetChunk failed, it's just a empty value and been dealloced after the method return.. See the comment below, if you don't understand both \"Why previously we draw on bitmap context and grab again ?\", and \"Why we currently don't need to draw on bitmap context and grab again ?\". This is previous version bug. It does not check whether user disable memory cache or not.. @kinarob  Any extra idea ? This comment seems about the imageUrl arg, and I search the history git log and explain the usage. But it's not related to the PR's changes.... This fix the issue when user provide a UIAniamtedImage created by animatedImageWithImages:duration:. The CGImage property is always nil. So that the encoding process will fail.\nInstead, we should check the first frame as backup for this type of animated image.. ?. ...Maybe you don't know why SDWebImage have force decode. Check that blog again and you'll understand.\nThe decode logic, is happend to decompressed the compressed data buffer (for example, JPEG), to the bitmap buffer (RGBA pixel array).\nHowever, Image/IO, the system decoder, use a lazy policy, when you call CGImageSourceCreateImageAtIndex(), it only parse the bistream, without generate the bitmap array buffer and allocate the memory.\nOnly when you call CGDataProviderRetainBytePtr (or the public API CGDataProviderCopyData, they start to generate and allocate the bitmapbuffer. However, this step, by default the pipeline, will happened during the Core Animation render logic (by CA::render::commit), and it trigger the decoding in the main queue. Which may reduce the frame rate.\nTo solve that issue, we and many many Image loading framework (including YY, Kingfisher, etc), use a pre-trigger of decoding, which force to decode that in advance and increate the frame rate. However, it's a trade-off between CPU && RAM. So this is a option to let user disable this feature totally.. But things does not apply the same for WebP images. For WebP, we call libwebp's WebDecode() function, which immediatelly decode and allocate the bitmap array buffer. It's not lazy at all. So, even if this image was rendered and called by Core Animation to get the bitmap buffer, it don't need to block main queue. So no extra performance  cost.\nBut things is interesting, because of the way we trigger force decode. (To trigger that CGDataProviderRetainBytePtr, there are many ways. Draw on bitmap canvas will implicitly call that method). When you call CGContextDrawImage, it have another side-effect. It will call vm_copy, to copy your bitmap buffer backing store, from the App Process, into the Render Process. \nSo you will see after call the force decode, you App memory (showing on Xcode's Memory chart) become lower. But the total memory does not change. It's just a movement. The benefit of these things, I've already listed on the blog article.\n\nIncrease a little frame rate (really small compared to force decode on Image/IO), because we pre-transfer the bitmap to Render Process.\nIf the original CGImage's bitmap colorSpace does not match the iOS device screen native colorSpace. (For example, iPhone 6 use sRGB, iPhone 7 use P3), this can do a transform to match to avoid Core Animation do the samething during Render.\n(?) Reduce the visual number of Xcode App memory.. What is that twice ? Actually. If you can , contact me in Slack or WeChat.. And, I think this is something a already exist feature and not related to this PR. I just want you to update the comments...The code here is OK. So that I can release right now. Or I have to add these comments by myself again.... I think maybe the issue is because of the __block which will increase the lifetime of the data pointer.\n\nThis strange design is because of that decompressedImageWithImage:data, will modify the original data pointer.\nThis feature (or hack) is removed in the 5.x, so we don't need that __block in the 5.0.0\nThis fix seems OK, merge it.. ......Maybe you misunderstand something.\nWe ask libwebp, to output a RGB/RGBA bitmap buffer. Even it's original encoded with Monochrome(grey style) which contains 1 component. The ouput bitmap buffer is always 3/4 components (transformed by libwebp from Monochrome to RGB).\nc\n    config.output.colorspace = config.input.has_alpha ? MODE_rgbA : MODE_RGB; // <--- This cause libwebp to always ouput 3 or 4 components RGB bitmap buffer\nIf you supply 1 component to CGImageCreate, your dataProvider, actually is wrong. Because the bitmapBuffer is RGB(3 components), the colorSpace is Monochrome(1 component). It's also not correct..The correct way, is to supply either a Monochrome colorSpace + Monochrome bitmap data buffer, or a RGB colorSpace + RGB bitmap buffer, but not mix them together...\nActually, we can use ColorSync and vImage framework, to convert a ICC Profile from Monochrome to RGB, or even CMYK(YUV), but I really don't think it's necessary. \ud83d\ude13 \nWe have never designed to be a professional image processing tools or decoding tools. If you build apps like Photoshop iOS and your customer is worry about the color sync, you have to write many many codes with professional color sync knowledge and low level APIs. This PR is just fix the problem of some rare WebP images on the modern Internet.. emmmmm....\nA good fix, but Is this really useful ? libwebp now have only v1.0.2 version. So even we limit it with <=2.0, this does not actually do anything.. If you care about something in the future, people who use SDWebImage with API-breaked libwebp (maybe 2 years later after libwebp become v2.0 and change the API we use...Since Google libwebp spent 4 years to become v1.0), can still specify the version in the Podfile pod 'libwebp', '~> 1.0'\nAnd, we will release SDWebImage 5.0.0 soon. Which the WebP coder dependency is ~> 1.0 and have the sem version to limit < 2.0.... Please don't submit this auto generated files into the repo. You can ignore this from git-config. Or maybe you can modify the .gitignore files to add this line of file into it.. This class is used, to simply create a NSOperation, which can make a async completion callback into the NSOperation and get benefit from the built-in NSOperationQueue. \nIt's helpful If you want to use the some power feature (like the maxConcurrentOperationCount, the dependency manage) from the high level API instead of using the GCD. Yes I can done the same feature by writting code by myself using a Array and bind each block a flag to manage the concurrent control or dependency. But it's really a bad idea, since NSOperationQueue already provide the same thing and I repeat it.\nThe NSBlockOperation can only been used when your code in the block, is sync. The NSBlockOperation will be marked as finished after your last line of code inside the block is returned. So it's not help for async method call (always return immediatelly).\nThis SDAsyncBlockOperation will be marked as finished after you call complete inside the async block, So it's much more easy to use our manager's API loadImageWithURL:completed:\nActually, the simple code can be found online like : https://github.com/devxoul/AsyncBlockOperation. Actually, we tested and it's not. Using private headers can make it easy to maintain the code. We don't need any runtime hack or writing un-related code components into the same files.\nI and @kinarob achieve the agreement to follow other open-source frameworks' usage about private headers. The framework we choosed it's facebook's https://github.com/Instagram/IGListKit. You can see their code structure about the usage.\nWe follow the rules:\n\nFor internal class, keeing the file names with the class naming and mark it Private Headers in Xcode\nFor public class' internal method (have implementation in original files), which it's used to be called inside framework but not from public, should be naming class name + Internal.h, and no .m files exist.\nFor public class' private category or property, should be naming class name + Private.h or class name + category name.h. This is a little different from the 2. because you have also implementation code, so there are .m files with the same name.. OK...Actually these two have no difference... \ud83d\ude05 . The IGListKit private headers: https://github.com/Instagram/IGListKit/tree/master/Source/Internal. We follow the same structure as they are.\n\nIGListKit is used widely in the World (even widely than SDWebImage itself) and I believe facebook team have a strong knowledge about the project management, code structure and the build tools (CocoaPods). This is the reason.. Typically you're right. But this IDEWorkspaceChecks.plist from Xcode 9.3 is a exception. This files only contains the 32-bit warning for Xcode now. So it's useless for most projects.\nIf we want to use it, I can submit this files again. Sorry for bother.. If the company, use a copy of SDWebImage, but not using the official support build tools we supported(we have 3: CocoaPods (official version with no modification), Carthage, Manual Install), they should take responsible for their build tools, but not force us to adopt their internal tools.\nprivate_header_files, and which result as Xcode's offcial feature: 'Private Headers', it's the official way of all Apple platforms built feature for Objective-C/C/C++, so if their build tools don't support this syntax, it's their responsibility to fix. There are too many build tools, like Buck, like ninja, like CMake, etc. We can not adopt them one by one and use a limited syntax or feature to increase the complexity of project structure.. Although it's not a language-syntax for resource control (private, public, internal in Swift) because of C history, but all Apple's framework for iOS/tvOS/watchOS/macOS, benefit from the public/private/project headers for resource control.\nSince our framework, written in Objective-C, but not Swift, and we focus on Apple platforms. We can always use this feature from Xcode.. The last one is not simple stringByAppendingString, it's the Foundation API stringByAppendingPathExtension: for file path but not simple NSString. The implementation will check whether the path is end with ., whether the path is end of /. It's a little complicated. If change, I can only change the first wo into stringWithFormat:. Don't add these....Put all the internal macro into the private headers. Then using the pch files instead.\nIf we put macro here, this will effect the user application who dependency SDWebImage.. @Insofan Pull the remote branch of SDWebImnage 5.x into your fork repo's 5.x branch first.\nYou can use some Git GUI tools or command line for this.. Or maybe, I can create a MR for this changes about the internal macros ? Then you can help to replace each implementation files usage.. This pch is internal only. So does not port to any publc APIs or effect any other Pod or Application outside SDWebImage/Core.. I don't think this dispatch_main_async_safe is a public API. It's not documented at all.\nBut SD_LOCK should be moved. It's introduced during 5.0.0-beta2, no any compatible issue. and it's a hack, see #2488 .\nI also notice this, this is why I change this into a seperate commit (see c829bb39097222ec77f84ebacadbc187be8a48f6). If so, I can split this MR into two, one does not move dispatch_main_async_safe, one does.\nSince this 5.0 is not released, there is the last chance to polish API stable (or we have to wait 6.0 to change). Maybe this need last check before release.. @bpoplauschi Seems previous the refactory of project in #2494, does not create a seperate xcconfig for the SDWebImage Tests.xcodeproj. But however, the test project and framework project have different configuration. So this time I create one to specify the different things.. This one can use the code below, since all NSOperation conforms to SDWebImageOperation protocol\nif ([operation conformsToProtocol:@protocol(SDWebImageOperation)]) {\n    [operation cancel];\n}. \u3002\u3002\u3002Wait. Don't change this line of code. Change the below one into this type.\nPrevious there are no compat call, so the for in loop element can be a NULL and so using conformsToProtocol is safer.\nBut actually, this code is usless because the element type of NSPointerArray is fixed.... \ud83d\ude05 Both of them is OK...I means we can use the same code for this two weak array. Choose what you like.\nYou can also write:\n```objective-c\n[self.prefetchOperations compact];\nfor (id operation in self.prefetchOperations) {\n    SDAsyncBlockOperation *prefetchOperation = operation;\n    [prefetchOperation cancel];\n}\nself.prefetchOperations.count = 0;\n[self.loadOperations compact];\nfor (id operation in self.loadOperations) {\n    SDWebImageCombinedOperation *loadOperation = operation;\n    [loadOperation cancel];\n}\nself.loadOperations.count = 0;\n```. If this should never return nil, the correct way shoud be changing the public API to nonnull, I think.\nBut some API , like downloader, will return nil if your input arg is nil...It\u2019s a little strange design (for compatible code ?). If we don\u2019t change public API of manager, add a NSParamAssert here to avoid future refactory code of manager break this prefetcher logic.. During the 5.0 migration, I\u2019ve already fix some nullability issue, like the some delegate method of NSURL, which should actually be nonnull. I think this may because of historical issue, at that time(first time of Xcode 7), there are so many API need to mark nullability, so they placed nullable for those API they can not ensure nonnull or which the logic is too complicated to detect nullability.. ",
    "sprynmr": "Would also like to see this. At the very least a global option so I don't have to hardcode myself.\n. Seeing something similar to this. Randomly not loading images in cells, but it's not a long list with a lot of re-use.\n. Once I switched away from SDWebImage, the images loaded fine (using AFNetworking image loading instead, fwiw). Definitely some sort of problem with SDWebImage. I would even log the image out to see that it was definitely completing successfully, but for some reason the image would never get set.\n. @xissburg Any new thoughts on this issue? I think https://github.com/rs/SDWebImage/issues/314 may be a duplicate of this. It's preventing me from using SDWebImage in some scenarios.\n. @xissburg Sorry for the delay. There's really nothing special doing on. More complicated than a cut and paste, but it just tells a custom cell to configure with a piece of data. The custom cell contains a UIImage and a few labels, using auto-layout. The completion seems to fire with the image data, but it wouldn't (always) get displayed. Switched to the AFNetworking version of async loading for now, and it doesn't seem to have any problems.\n. ",
    "werediver": "I also think this is a very useful feature.\n. ",
    "ipeisong": "Yes, that's exactly what I need now. Seems I have to implement it myself.\n. Hi Mark, yes was thinking about that.\nAfter reading the source code, it is using absolute URL MD5 as cached filename, that means one way to pass by cache is to add version information to the URL, like xxx.com/image.jpg?v=1. \nTo achieve auto expiration a separate storage for related information is required, probably will do it later.\n. ",
    "fproulx": "I'm also in favor of this idea. I think it'd be really neat.\n. ",
    "adamjernst": "Agreed. Often you know the list of images (e.g. a bunch of thumbnails) and you could queue them up to download without parsing the UIImage on the main thread.\n. Agreed-- I'm using your low priority mode already, and it's great. (Main-thread UIImage decompression does not play nice with smooth scrolling, at least in complex apps like mine that have other stuff going on too. Your low priority mode is great for making sure decompression doesn't happen while in event tracking mode.)\nHowever as you note, that requires the data to be stored in RAM while it's downloaded, then parsed and cached out in the background. It would be ideal if the connections just downloaded directly to disk to minimize RAM usage.\n. Sure thing; in fact this scenario happened to me, and was the reason for the fix.\nI have a UITableViewCell subclass that draws an image into the cell in drawRect:. It's a reusable cell, so it might request different images as it's reused.\nIts code looks something like this:\n```\n- (void)setURL:(NSURL *)newURL {\n    if (url != newURL) {\n        [url release];\n        url = [newURL retain];\n    [thumbnail release], thumbnail = nil;\n    [[SDWebImageManager sharedManager] cancelForDelegate:self];\n    [[SDWebImageManager sharedManager] downloadWithURL:url delegate:self retryFailed:NO lowPriority:YES];\n\n    [self setNeedsDisplay];\n}\n\n}\n```\nAnd of course it's a delegate, so it receives the image:\n- (void)webImageManager:(SDWebImageManager *)imageManager didFinishWithImage:(UIImage *)image {\n    if (thumbnail != image) {\n        if (thumbnail) {\n            NSLog(@\"WARNING: thumbnail loaded by image manager, but we already have a thumbnail. This should never happen.\");\n        }\n        [thumbnail release], thumbnail = [image retain];\n        [self setNeedsDisplay];\n    }\n}\nThe race condition is as follows:\n1. setURL: is called.\n   1. setURL: calls [SDWebImageManager downloadWithURL:].\n   2. downloadWithURL: calls through to the cache. Imagine the image isn't in memory, so it spawns a background operation to check the disk cache. The main thread resumes executing.\n2. Before the operation completes, main thread code once again calls setURL: with a different URL.\n   1. setURL: calls [SDWebImageManager cancelForDelegate:]. The previous request should no longer result in the delegate method being called.\n   2. setURL: calls [SDWebImageManager downloadWithURL:].\n   3. downloadWithURL: calls through to the cache, again. Imagine the image isn't in memory (again), so another background operation is spawned.\n3. Now two operations are executing simultaneously. Each will result in a webImageManager:didFinishWithImage: call for the respective images they load from the disk cache. There is no guarantee about which will be delivered first, so we could end up with the wrong image displayed in the end.\nThis is only one of the scenarios. The other use case: you should always call cancelForDelegate:self in -dealloc, or any outstanding requests might message a dealloc'd object. Under this race condition, an image cache lookup might trigger that.\n. When cancelForDelegate: is called you can't look up from a URL, you only have a delegate requesting cancellation. So you need cacheDelegates. But you're right that I could have done without one of the arrays\u2014cacheURLs.\nIn fact, you're right; cacheURLs is unneeded. I'm going to write a patch to remove it. Stay tuned.\n. Done. Take a second look\u2014it should be much cleaner now. Thanks for pointing this out!\n. Instead of a class, how about a bitwise flag parameter?\n. Awesome. Look forward to it.\n. Or, do a HEAD request to determine if the 2x version exists. That avoids the overhead of two downloads.\n. Actually, on second thought I think that my suggestion to use a HEAD request is the wrong idea here.\nMost of the loading time on mobile devices is network latency, not actual download time. Turning one round trip into two (a HEAD followed by a GET) would be a waste.\nI think that SDWebImageDownloader should issue the two requests simultaneously (normal and 2x). When connection:didReceiveResponse: is called for the 2x variant, it can check the HTTP status code and cancel the \"normal\" request if the status is not 404.\nThis change will touch a lot of the cache code as well. Definitely not trivial.\nIn terms of API design, I'd change as follows:\n- SDWebImageDownloader has its lowPriority: parameter changed to options: of type SDWebImageDownloaderOptions. There are two bitwise flag options: SDWebImageDownloaderOptionLowPriority and SDWebImageDownloaderOptionRetinaSearch.\n- Likewise with SDWebImageManager, but replace both retryFailed: and lowPriority: with options flags.\n- I'm not sure about the UIImageView category. It seems messy to add another method, but may be the only option.\nAlternatively, we could add a single static method to SDWebImageDownloader , +setSearchesForRetina:, that would control behavior of the entire library. This would disallow per-request customization but be much cleaner.\n. I should note that the reason for this commit is that I noticed the UI was dropping frames while scrolling in a non-trivial app using SDWebImageManager. Profiling with Instruments showed that main-thread image data decoding was the culprit, particularly with JPEG images since they're more expensive to decompress.\nSince blocks are so easy to use, I figured I'd just commit a change that fixes it for runtimes where blocks are available, and leave it compatible with 3.x in case anyone still uses that.\n. P.S. I also only use this new approach if we're in UITrackingRunLoopMode, so that we don't needlessly spawn the background operation.\nIt also occurs to me that this needs to be NSEventTrackingRunLoopMode on Mac OS. I'll leave the cross-OS ifdef to you when you clean up the commit.\n. Any comment on this?\n. Updated to work on 3.x.\n. Also check out this blog post about the issue. His conclusion is that even drawing the image once isn't enough. You have to use CF and specify kCGImageSourceShouldCache.\n. Wow, that was weird. No idea where that link came from. Check out the link above now.\n. Corrrect, my code is not really ideal. We should close this and @mystcolor should submit a new request based on his findings.\n. Ooh, nice catch. I think this is only a partial solution; after all the delegate could just as well call cancelForDelegate: from the delegate methods themselves, not just in dealloc. But at least it's better than nothing.\n. Great catch! However, cancellation alone will not solve this issue. cancel is called on a different thread from the operation itself, and according to the docs:\n\n-(void)cancel\nIf the operation has already finished executing, this method has no effect.\n\nIssuing cancel would race with the completion of the operation, so the race condition would merely be less frequent.\nThe proper solution to this is to include a URL check to make sure the UIImageView is still trying to show the same URL as originally requested when the operation was queued.\n. @mystcolor your solution is very similar to my original code (which never made it into trunk), but what's missing is that you need to also check that the URL is equal for that delegate index before removing the delegate from the array. You're removing all instances of the delegate when any one of them returns, but you should only remove the one that has a corresponding URL equal to the just-completed URL. This is a bit confusing, but see my code here:\nhttps://github.com/adamjernst/SDWebImage/commit/04f96e7809e5777ac05c9e00401591268cbe5a2c\nThat should do it. Let me know if I'm missing something (which I very well might be). Thanks!\n. ",
    "vesterbaek": "I partially resolved this issue by adding a low priority download mode. CPU and RAM is still wasted since the image is decoded, but does not disturb the UI as much since it runs in NSEventTrackingRunLoopMode. The fix has been merged into master a while ago: https://github.com/rs/SDWebImage/pull/12\n. edit: without caching them to persistent storage\n. Yeah, of course. I have a tight deadline next week on some work but will update the request in 1-2 weeks\n. Callstacks from a live app experiencing this crash: \n```\n*** -[__NSArrayM removeObjectAtIndex:]: index 0 beyond bounds for empty array\n3 app 0x001532c3 -[SDWebImageManager imageDownloader:didFinishWithImage:] + 799\n4 CoreFoundation 0x326233fd -[NSObject performSelector:withObject:withObject:] + 53...  Anonymous User  5\nException reason\n*** -[__NSArrayM removeObjectAtIndex:]: index 0 beyond bounds for empty array\nStacktrace\nPRIMARY THREAD THREAD 0\n0 CoreFoundation 0x326c988f exceptionPreprocess + 163\n1 libobjc.A.dylib 0x3471f259 objc_exception_throw + 33\n2 CoreFoundation 0x326279c1 -[__NSArrayM removeObjectAtIndex:] + 177\n3 app 0x001532c3 -[SDWebImageManager imageDownloader:didFinishWithImage:] + 799\n4 CoreFoundation 0x326233fd -[NSObject performSelector:withObject:withObject:] + 53\n5 app 0x00152139 -[SDWebImageDownloader imageDecoder:didFinishDecodingImage:userInfo:] + 57\n6 app 0x00151267 -[SDWebImageDecoder notifyDelegateOnMainThreadWithInfo:] + 171\n7 CoreFoundation 0x326281fb -[NSObject performSelector:withObject:] + 43\n8 Foundation 0x38029747 __NSThreadPerformPerform + 351\n9 CoreFoundation 0x3269dad3 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION + 15\n10 CoreFoundation 0x3269d29f __CFRunLoopDoSources0 + 215\n11 CoreFoundation 0x3269c045 __CFRunLoopRun + 653\n12 CoreFoundation 0x3261f4a5 CFRunLoopRunSpecific + 301\n13 CoreFoundation 0x3261f36d CFRunLoopRunInMode + 105\n14 GraphicsServices 0x31776439 GSEventRunModal + 137\n15 UIKit 0x3211ecd5 UIApplicationMain + 1081\n16 app 0x000edb13 main (main.m:16)\n17 app 0x000eaf54 start + 40\n```\n```\n*** -[__NSArrayM removeObjectAtIndex:]: index 77 beyond bounds [0 .. 76]\n3 app 0x000882c3 -[SDWebImageManager imageDownloader:didFinishWithImage:] + 799\n4 CoreFoundation 0x317183fd -[NSObject performSelector:withObject:withObject:] + 53...  Anonymous User  3\nException reason\n*** -[__NSArrayM removeObjectAtIndex:]: index 77 beyond bounds [0 .. 76]\nStacktrace\nPRIMARY THREAD THREAD 0\n0 CoreFoundation 0x317be88f exceptionPreprocess + 163\n1 libobjc.A.dylib 0x37afc259 objc_exception_throw + 33\n2 CoreFoundation 0x3171c9c1 -[__NSArrayM removeObjectAtIndex:] + 177\n3 app 0x000882c3 -[SDWebImageManager imageDownloader:didFinishWithImage:] + 799\n4 CoreFoundation 0x317183fd -[NSObject performSelector:withObject:withObject:] + 53\n5 app 0x00087139 -[SDWebImageDownloader imageDecoder:didFinishDecodingImage:userInfo:] + 57\n6 app 0x00086267 -[SDWebImageDecoder notifyDelegateOnMainThreadWithInfo:] + 171\n7 CoreFoundation 0x3171d1fb -[NSObject performSelector:withObject:] + 43\n8 Foundation 0x320da747 __NSThreadPerformPerform + 351\n9 CoreFoundation 0x31792ad3 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION + 15\n10 CoreFoundation 0x31792335 __CFRunLoopDoSources0 + 365\n11 CoreFoundation 0x31791045 __CFRunLoopRun + 653\n12 CoreFoundation 0x317144a5 CFRunLoopRunSpecific + 301\n13 CoreFoundation 0x3171436d CFRunLoopRunInMode + 105\n14 GraphicsServices 0x3378e439 GSEventRunModal + 137\n15 UIKit 0x30e77cd5 UIApplicationMain + 1081\n16 app 0x00022b13 main (main.m:16)\n17 app 0x0001ff54 start + 40\n```\n. I don't think this is a threading issue. If I cancel a downloader from one of the callbacks, the index-based code does not work since this changes the arrays.\n. No, don't have a sample of the problem right now, but I'll try to explain.\nIn - (void)imageDownloader:(SDWebImageDownloader )downloader didFinishWithImage:(UIImage )image here: https://github.com/rs/SDWebImage/blob/b357e8210c2a1c96ea768b16fd0c003baef77a04/SDWebImage/SDWebImageManager.m#L343\nYou use the index of a downloader as it was in the array before calling any of the delegate functions to remove after items from the arrays here: https://github.com/rs/SDWebImage/blob/b357e8210c2a1c96ea768b16fd0c003baef77a04/SDWebImage/SDWebImageManager.m#L414\nFor this to work, the delegate callbacks must never do something that changes the downloaders, downloadInfo or downloadDelegates arrays\n. Yes, adding them to a temporary array, removing them from the original and then call the delegates would be a good solution as well. I like that better than my solution.\n- (void)imageDownloader:(SDWebImageDownloader )downloader didUpdatePartialImage:(UIImage )image is a bit different in that the downloaders should not be removed, but the same approach works fine here.\n. That way, you should also be able to get rid off the bit ugly\nSDWIRetain(delegate);\n            SDWIAutorelease(delegate);\nsince the temporary array retains the delegate and info\n. The only reason I can see for the retain+autorelease is if the delegate if released somewhere else. If it is retained in a temporary array, all should be good? -- or am I missing something?\n. All the downloaders that we need to notify would first be added to a temp array, notified and then freed.\n. I'll update the pull request later. 2nd half of Denmark - Portugal just started and it is not going too well :)\n. I've looked a bit more on the code. I don't think adding temporary arrays makes the solution happer, since we'd still have to check if downloaders have been canceled before calling the delegates. Hence, my best input atm is the current pull request. \n. ",
    "taintedzodiac": "Perhaps adding an optional (BOOL)enableRetina that would trigger a request for the @2x file name as a second download?\n. So, basically something like this to check for retina and then perform the HEAD request?\nif ([[UIScreen mainScreen] respondsToSelector:@selector(scale)] && [[UIScreen mainScreen] scale] == 2){ \n  // HEAD request with fallback to non-retina image\n}\n. ",
    "grgcombs": "That's a great thought!\n. ",
    "achappell": "This would be really great! Any idea if this is being worked on, or planned to be worked on?\n. ",
    "justjimmy": "Looking for this feature too. Are there any good work arounds in the meantime?\n. I seem to occasionally have this issue too. \nWhen I do: \n[[SDWebImageManager sharedManager] cancelAll];\nI seem to get this exception: \n* Terminating app due to uncaught exception 'NSGenericException', reason: '* Collection <__NSArrayM: 0x17024c390> was mutated while being enumerated.'\n. \n. this seems to fix it for me.\nPull request: https://github.com/rs/SDWebImage/pull/838\n. I had a pull request that fixed it for me. It was merged in but you have to grab it using the pod with a specific commit. It's not in 3.7.1 but will be in 3.7.2. Can you try in and see?\u2014\nSent from Mailbox\nOn Wed, Sep 3, 2014 at 3:54 AM, Daniel Miedema notifications@github.com\nwrote:\n\nI can consistently get this to crash by prefetching different sets of images very quickly.\nI created an example project to show the crash with instructions in the README on how to trigger the crash also. It currently crashes for me 100% of the time\nhttps://github.com/dmiedema/SDWebImageCrashExample\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/809#issuecomment-54191104\n. @dmiedema awesome. I think it'll be part of 3.7.2 whenever that is ready.\n. \ud83d\ude0a\n. \n",
    "JNK": "Reading the ideas above another nice way to implement this (although this would only work on controlled servers) send the scale of the device (1.0, 2.0 or 3.0) along in the request header (e.g. SDWebImageDeviceScale: 1.0) and let the server return the appropriate image. The scale attribute of UIImage would only need to be set appropriately by SDWebImage.\n. ",
    "project707": "Does this work with SDWebImageManager or only the convenience method?\n. I'm getting near the end of the dev cycle for this and need to make a decision as to whether this will work for transparent png images. Has anybody else seen this same issue?\nI would appreciate any direction I can get on this issue, however brief.\n. OK just hacking it myself I guess...\nIn SDImageCache.m -> storeKeyToDisk you have:\nUIImageJPEGRepresentation(image, (CGFloat)1.0) as the file contents. \nThis should probably not be the case or there should be a check for the original file type. Otherwise handling png images properly is impossible.\n. I believe if you just set the frame of a UIImageView you are loading an image into to the desired sized it sizes the image as well. Works for me\n. I't's  always a bit simpler than you would think\n==============>\n [image: project707 logo] http://project707.com/\nJason Ware\n831.345.3609\njason@project707.com\nwww.project707.com http://project707.com/\nOn Sat, Oct 8, 2011 at 2:08 AM, Olivier Poitrey \nreply@reply.github.comwrote:\n\nRemove all the imgv and setFrame stuff, you dont need it. Only keep the\nthird line and ensure background.png is of the same size as the image you're\nloading with setImageWithURL.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/30#issuecomment-2331197\n. \n",
    "jaumecornado": "It's a simple addition of a UIActivityIndicator on the UIImageView category.\n. ",
    "echamberlain": "Why not add an observer to the UIImageView image property?\n. ",
    "Shukuyen": "Thanks for all the solutions, will have a look at those :-) @echamberlain didn't know you could do that, very interesting!\n. ",
    "exalted": "Thanks for quick reply... how would you compare your implementation please against ASIHTTPRequest's download cache? (Ref.: http://bit.ly/o4Xagh)\n. Hi, thanks again for great answer, much appreciated. Keep up the good work! Regards,\n. ",
    "richardjkeys": "Did you ever find a solution to this? The cached files are transparent PNGs, but they're being displayed with a solid black background.\n. That's worked a treat, thank you!\n. ",
    "keeshux": "Richard, look at this recent commit:\nhttps://github.com/rs/SDWebImage/commit/c32f9c03f816dac58a8cac25d6189310272ca9c1\nReverting did the trick for me, at least it worked with the PNGs I'm dealing with. Assuming alpha channel absence doesn't sound that smart..\n. ",
    "eriadam": "Worked like a charm.\n. ",
    "xidew": "I suggest using this method of the SDImageCache class instead of reverting the commit mentioned above:\nstoreImage:imageData:forKey:toDisk:\nJust pass the NSData object returned by UIImagePNGRepresentation to the method and it should store it like you want.\n. ",
    "fmessina": "I'm getting this problem too.\nWhen the image is retrieved from the cache the alpha is transformed to a white background.\nTry with this image to get the same error:\nhttp://www.beachscout.it/Volantino/categorie/04.png\n. Hi!\nYes, taken 2 days ago when I first faced this issue.\nIt only happens when the cached image is used. If I force to clear the cache (and the disk), the first time the image is shown with the transparent background as expected. \n. I removed all the SDWebImage files, cleaned the project, added the library again. Now it's working correctly.\nmy bad. Thanks in any case. :)\n. ",
    "MphammedRafiq": "HI, It helped me alot. Thanks\n. ",
    "christosc": "Hi,\nI came across this issue with the latest version, 3.7.1.  A png image having transparency loses it after being cached into SDImageCache.  I traced the problem to ImageDataHasPNGPreffix(NSData *data), which is passed nil as argument, and then the ensuing if condition within that function returns false.  The change below seems to fix the issue, although I'm not sure if it's correct...\n@@ -21,7 +21,7 @@ BOOL ImageDataHasPNGPreffix(NSData *data);\nBOOL ImageDataHasPNGPreffix(NSData *data) {\nNSUInteger pngSignatureLength = [kPNGSignatureData length];\nif ([data length] >= pngSignatureLength) {\n-        if ([[data subdataWithRange:NSMakeRange(0, pngSignatureLength)] isEqualToData:kPNGSignatureData]) {\n+        if ((data == nil && kPNGSignatureData == nil) || [[data subdataWithRange:NSMakeRange(0, pngSignatureLength)] isEqualToData:kPNGSignatureData]) {\n             return YES;\n         }\n}\n. Sorry, I double posted the previous post on #55.  Sorry for that.\n. I installed SDWebImage through Cocoapods.  I guess it uses an up-to-date revision of the master branch...\nThanks\n. Hi, I came across this issue too, with the latest version 3.7.1, which I've installed through Cocoapods.\nI have a transparent png image, which after caching it in SDImageCache, I retrieve it with an alpha value of 1.0 (and a white background).\nI tried to trace the source of the problem, and I've found that - [SDImageCache storeImage:recalculateFromImage:imageData:forKey:toDisk:] finds my image as not being of type PNG, and so it uses this statement: UIImageJPEGRepresentation(image, (CGFloat)1.0);  to store it.\nParticularly in function BOOL ImageDataHasPNGPreffix(NSData *data) the if condition happens to result in [nil isEqualToData:nil],  which is false, and so the function as whole returns false, too.\nSomething like the following seems to fix it, but I don't know if it's correct...\n@@ -21,7 +21,7 @@ BOOL ImageDataHasPNGPreffix(NSData *data);\nBOOL ImageDataHasPNGPreffix(NSData *data) {\n NSUInteger pngSignatureLength = [kPNGSignatureData length];\n if ([data length] >= pngSignatureLength) {\n-        if ([[data subdataWithRange:NSMakeRange(0, pngSignatureLength)]   isEqualToData:kPNGSignatureData]) {\n+        if ((data == nil && kPNGSignatureData == nil) || [[data subdataWithRange:NSMakeRange(0, pngSignatureLength)] isEqualToData:kPNGSignatureData]) {\n         return YES;\n     }\n }\n. Hi, and thanks for your response.\nIt seems that data is nil, because - [SDImageCache storeImage:forKey:] passes a hard-coded nil to argument imageData of - [SDImageCache storeImage:recalculateFromImage:imageData:forKey:toDisk:].   So If the comparison shouldn't be performed at all whenever data is nil, maybe the following change in - [SDImageCache storeImage:recalculateFromImage:imageData:forKey:toDisk:] would suffice to avoid it: \n```\n@@ -165,7 +165,7 @@ BOOL ImageDataHasPNGPreffix(NSData *data) {\n                 BOOL imageIsPng = YES;\n             // But if we have an image data, we will look at the preffix\n\n\nif ([imageData length] >= [kPNGSignatureData length]) {\nif (imageData != nil && [imageData length] >= [kPNGSignatureData length]) {\n                     imageIsPng = ImageDataHasPNGPreffix(imageData);\n                 }\n```\n\nThank you\n. @bpoplauschi \nI think I'll manage the pull request.  Should I include in it only the change in - [SDImageCache storeImage:recalculateFromImage:imageData:forKey:toDisk:] or both this one and the one in ImageDataHasPNGPreffix?\n\nIn any case, regarding the way I'm using the framework, I'm creating an SDImageCache of my own through\nSDImageCache *imageCache = [[SDImageCache alloc] initWithNamespace:@\"myNamespace\"];\n, I download the images myself without using SDWebImage,\nand finally I do\n[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];\n. @mythodeia In my case, control entered the 1st if statement, because both data and kPNGSignatureData were nil, and therefore both [data length] and [kPNGSignatureData length] were equal to 0...\n. @mythodeia Indeed adding the line\nkPNGSignatureData = [NSData dataWithBytes:kPNGSignatureBytes length:8];\ninside - [SDImageCache initWithNamespace:] fixes the problem.\nThanks very much for your help!\n. ",
    "vinod1988": "Are you using the updated master branch, i am using the same not facing any issue.\n. My App was crashing  while scrolling the tableview , Randomly \n(SDWebImageDownloaderOperation *const) self = \n. Can u tried a progress comletion method . Just  tried it hope it work well.\nOn Fri, Sep 5, 2014 at 10:55 AM, Kristofor Salmin notifications@github.com\nwrote:\n\n@james075 https://github.com/james075 i know about this method. But I\nneed image manipulation in completion block.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/833#issuecomment-54586339.\n\n\nThanks & Regards\nSr Software Engineer | Vinod Vishwakarma\nSkype: vinod.vishwakarma8\nM:7208317956\n. ",
    "Dzamir": "I have the same problem using 3.7.1, cached image doesn't have transparency\n. I just tried the fix #981 but I still have the problem. I deleted and reinstalled the app but when the cache loads from the disk the result is a white background instead of a transparent one\n. I think that the problem is that I create the png programmatically from the imageManager delegate imageManager:transformDownloadedImage:withURL: and even #981 fix recognizes the NSData of the image as a JPG\n. ```\n+ (UIImage )resizeImage:(UIImage ) image proportionallyIntoNewSize:(CGSize)newSize;\n{\n    CGFloat scaleWidth = 1.0f;\n    CGFloat scaleHeight = 1.0f;\nif (CGSizeEqualToSize(image.size, newSize) == NO) {\n\n    //calculate \"the longer side\"\n    if(image.size.width > image.size.height) {\n        scaleWidth = image.size.width / image.size.height;\n    } else {\n        scaleHeight = image.size.height / image.size.width;\n    }\n}\n\n//prepare source and target image\nUIImage *sourceImage = image;\nUIImage *newImage = nil;\n\n// Now we create a context in newSize and draw the image out of the bounds of the context to get\n// A proportionally scaled image by cutting of the image overlay\nUIGraphicsBeginImageContextWithOptions(newSize, NO, 0.0);\n\n//Center image point so that on each egde is a little cutoff\nCGRect thumbnailRect = CGRectZero;\nthumbnailRect.size.width  = newSize.width * scaleWidth;\nthumbnailRect.size.height = newSize.height * scaleHeight;\nthumbnailRect.origin.x = (int) (newSize.width - thumbnailRect.size.width) * 0.5;\nthumbnailRect.origin.y = (int) (newSize.height - thumbnailRect.size.height) * 0.5;\n\n[sourceImage drawInRect:thumbnailRect];\n\nnewImage = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\n\nif(newImage == nil)\n    NSLog(@\"could not scale image\");\n\nreturn newImage;\n\n}\n+(UIImage ) circledImageForImage:(UIImage ) image size:(CGSize) size borderColor:(UIColor *) borderColor borderSize:(CGFloat) borderSize blurImage:(BOOL) blurImage;\n{\n    if (size.width <= 0)\n    {\n        size = image.size;\n    }\nUIImage * scaledImage = [self resizeImage:image proportionallyIntoNewSize:size];\n\nif (blurImage)\n{\n    scaledImage = [self blurredImageFromImage:scaledImage];\n    // resample the image to retina resolution\n    scaledImage = [UIImage imageWithCGImage:[scaledImage CGImage]\n                                scale:[UIScreen mainScreen].scale\n                          orientation:UIImageOrientationUp];\n}\n\nUIGraphicsBeginImageContextWithOptions(size, NO, 0.0);\nCGContextRef context = UIGraphicsGetCurrentContext();\n\nCGRect aRect = CGRectMake(0, 0, size.width, size.height);\nCGContextSetFillColorWithColor(context, [UIColor colorWithPatternImage:scaledImage].CGColor);\nCGMutablePathRef path = CGPathCreateMutable();\nCGPathAddEllipseInRect(path, NULL, aRect);\nCGContextAddPath(context, path);\nCGContextFillPath(context);\nCGPathRelease(path);\n\nCGContextSetLineWidth(context, borderSize);\nCGContextSetStrokeColorWithColor(context, borderColor.CGColor);\nCGContextStrokeEllipseInRect(context, CGRectInset(aRect, borderSize / 2, borderSize / 2));\n\nUIImage * newImage = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\n\nreturn newImage;\n\n}\n\n(UIImage )imageManager:(SDWebImageManager )imageManager transformDownloadedImage:(UIImage )image withURL:(NSURL )imageURL;\n{\n                transformedImage = [self circledImageForImage:image size:imageTransformation.finalSize borderColor:imageTransformation.borderColor borderSize:imageTransformation.borderSize blurImage:imageTransformation.blurImage];\n                return transformedImage;\n}\n```\n. I also tried to add these lines to force the returned image as a PNG:\n\n- (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL;\n{\n                transformedImage = [self circledImageForImage:image size:imageTransformation.finalSize borderColor:imageTransformation.borderColor borderSize:imageTransformation.borderSize blurImage:imageTransformation.blurImage];\n                NSData * data = UIImagePNGRepresentation(transformedImage);\n                transformedImage = [[UIImage alloc] initWithData:data];\n                return transformedImage;\n}\n. Just tried it, the problem is still present but now I also have a pixellated image because it's without the retina scaling\n. I tried setting a clear background but it doesn't solve the problem: the image was already transparent and when not cached it correctly show the transparence. The problem seems to be that the SDImageCache doesn't recognise the png header on the UIImage.\nEDIT: here's a screenshot of the problem https://www.dropbox.com/s/2y3hi3hdt7zkx2d/Screenshot%202014-12-15%2017.37.34.png?dl=0\n. ",
    "mythodeia": "@Dzamir did you try it with the small fix from this pull request?\nhttps://github.com/rs/SDWebImage/pull/981\n. @Dzamir can you share the code in the imageManager:transformDownloadedImage:withURL \nso we can see if there might be any issues there? Do you save the new imagedata as PNG?\n. @Dzamir can you try to use \nUIGraphicsBeginImageContextWithOptions(newSize, NO, 1.0);\ni only changed the zero to 1\n. @Dzamir the pixelated was because of the hardcoded scale change.\ni just google it and found this:\nhttp://stackoverflow.com/questions/11378165/save-uiview-as-png-file-with-transparent-background\n. @rokridi try this\nit is working now \nthis pull request is what fixes it https://github.com/rs/SDWebImage/pull/1121\n. @iossaif Asset Urls are not supported\n. @christosc thanks for clarifying \n@bpoplauschi i think @christosc  is right as the hardcoded nil is indeed passed in the storeImage methods. So checking if the data is nil is valid for me. Checking it inside ImageDataHasPNGPreffix makes sense too. What do you think?\n. @bpoplauschi i assumed its ok since the comments on that method state:\nWe assume the image is PNG, in case the imageData is nil....\n. @christosc when you create SDImageCache on your own using the the following:\n[[SDImageCache alloc] initWithNamespace:@\"myNamespace\"];\nthen the ImageDataHasPNGPreffix is not initialised. Maybe this is why you are having this problem.\ni also just realised that the code you posted at a couple of posts above:\nBOOL ImageDataHasPNGPreffix(NSData *data) {\n NSUInteger pngSignatureLength = [kPNGSignatureData length];\n if ([data length] >= pngSignatureLength) {\n-        if ([[data subdataWithRange:NSMakeRange(0, pngSignatureLength)]   isEqualToData:kPNGSignatureData]) {\n+        if ((data == nil && kPNGSignatureData == nil) || [[data subdataWithRange:NSMakeRange(0, pngSignatureLength)] isEqualToData:kPNGSignatureData]) {\n         return YES;\n     }\n }\nwill not work if the data is already nil. if the data is nil the code will not go through the 1st if statement, right? \n. @christosc so the only thing you need to do in your case, is initialise the kPNGSignatureData inside the \n[[SDImageCache alloc] initWithNamespace:@\"myNamespace\"]; method, until we make a commit for this.\nthen you will not have any problems and you will not need to add anything else in other methods.\nDoes that sound correct?\n. @christosc no problem! good luck with your project ;)\n@bpoplauschi later today i will send a pull request that will address the issue for the uninitialised kPNGSignatureData when the user creates his own SDImageCache using the initWithNamespace method. \n. can anyone confirm this issue still exists in the latest version? \nUIImageJPEGRepresentation strips the image of its metadata so if the image has orientation information inside the EXIF metadata this will be lost.\n. i will close this as its been quite some time since this one was mentioned. @danipralea unless the image url is a direct url you can access without logging in then as far as i know you cannot connect to an FTP server with this library, yet!\n. @bickram can you replicate the issue on the demo project?. @priya-vr is UIButton+WebCache.h & UIButton+WebCache.m included in your project\n. are these files included too? UIView+WebCacheOperation.h & UIView+WebCacheOperation.m\nif not please make sure you have read the installation notes here\n. the error messages are from an old ASIHTTPRequest library\n. @n13 @bpoplauschi \nthis should work with JPG but for PNG there are no exif inside the image.\nWe could check to see if the data is png or jpg before actually doing anything, right?\n. @chainone continue here\n. @EpicDraws @chadkouse\n i have tried it with the demo project and the completion block always fires. The only option set is the SDWebImageProgressiveDownload Can you reproduce it with the example source code?\n. @chadkouse i added to the sample project a failedURL (404 image) and on the 1st view the image did not load. When i tapped on the cell to enter the details view the completion block fired just fine.\n. @daveanderson any news on this? \n. @Tbwas which version of the library are you using? have you tried in the demo project? can you provide a sample project?. @Tbwas can you try with the latest version and report back or try the dataset that produces the issue with our demo project (use latest version) and report back. @Tbwas try with the latest version. i think we made some fixes regarding this.. @arun057 @chancyWu @obaidjawad \ncan you replace the code in decodedImageWithImage method in SDWebImageDecoder with this one and try again?\n```\n// do not decode animated images\n    if (image.images) { return image; }\nCGImageRef imageRef = image.CGImage;\n\nCGImageAlphaInfo alpha = CGImageGetAlphaInfo(imageRef);\nBOOL anyAlpha = (alpha == kCGImageAlphaFirst ||\n                 alpha == kCGImageAlphaLast ||\n                 alpha == kCGImageAlphaPremultipliedFirst ||\n                 alpha == kCGImageAlphaPremultipliedLast);\n\nif (anyAlpha) { return image; }\n\nsize_t width = CGImageGetWidth(imageRef);\nsize_t height = CGImageGetHeight(imageRef);\n\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                             height,\n                                             CGImageGetBitsPerComponent(imageRef),\n                                             0,\n                                             CGImageGetColorSpace(imageRef),\n                                             kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\n\n// Draw the image into the context and retrieve the new image, which will now have an alpha layer\nCGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);\nCGImageRef imageRefWithAlpha = CGBitmapContextCreateImage(context);\nUIImage *imageWithAlpha = [UIImage imageWithCGImage:imageRefWithAlpha];\n                        //[UIImage imageWithCGImage:imageRefWithAlpha scale:image.scale orientation:image.imageOrientation];\n\nCGContextRelease(context);\nCGImageRelease(imageRefWithAlpha);\n\nreturn imageWithAlpha;\n\n``\n. any updates on this? Did the code above correct the issue?\ntested with [this](http://a1.mzstatic.com/us/r1000/066/Purple2/v4/cd/39/63/cd3963aa-d301-8f71-69d2-bef3d54193be/Icon.png) link and it does not produce any warnings or errors in either IOS 7 or 8\n. @iFoxxy download the latest build and try again\nthe code has been changed since that post\n. @iFoxxy go toSDWebImageDecoder.m` and change this [line 36]:\nbool unsupportedColorSpace = (imageColorSpaceModel == 0 || imageColorSpaceModel == -1 || imageColorSpaceModel == kCGColorSpaceModelIndexed);\nto this\nbool unsupportedColorSpace = (imageColorSpaceModel == 0\n                                  || imageColorSpaceModel == -1\n                                  || imageColorSpaceModel == kCGColorSpaceModelIndexed\n                                  || imageColorSpaceModel == kCGColorSpaceModelCMYK);\nthe colorspace for your image is CMYK thats why it was failing. tried it now and its working\n. everyone interested should try this pull\n. @Savankumar-vaishnav this is already done via https://github.com/rs/SDWebImage/pull/1217\n. @bill350 check this\nthey say that crash was actually due to a bug in Splunk mint library.\n. @Aromxyz can you replicate it the current version?. @TechbirdsYogendra please follow the installation documentation step by step. \nMake sure all the files are in place or use cocoapods to save some time\n. @runningfree100 \ncan you reproduce it using the latest version of the lib?\n. closing this. feel free to reopen if you still encounter issues with the latest version of the lib\n. @nicksnyder you produce the deadlock by setting the maxConcurrentDownloads to 1024. This sets the maxConcurrentOperationCount of the downloadQueue in SDWebImageDownloader to 1024 so NSOperationQueue will try to execute at the same time 1024 operations. This will surely hurt the system.\nI tried it with as less as 70 in my system and still it deadlocks. 60 is the magic number for me to make it work\n. i think that the deadlock in SDWebImage occurs because of race conditions happening while requests are cancelled or finished. NSOperationQueue does not dequeue an operation until its finished state changes to true. So there might be some issues there.\n. @mallorypaine so according to your pull request you turn NSCache off.\nDo you disable decompression as well in your apps?\n. @burakkilic you get a crash with just 80kb images on your 2nd scroll? thats weird.\ni have a tableview as well with 300x250 imageview and get no crashes whatsoever while scrolling.\nare you sure its memory pressure thats causing your crashes?\n. @burakkilic how large are your images in resolution?\n. oh come on...thats huge. Thats why it crashes. Even if your size is 80kb your images are large in resolution. You should also experience laggy scroll. Generally speaking you do not add large res images as thumbs in a tableview/collection view. You add smaller ones. Do you actually need 300 ppi for thumb images? \n. In my apps i use 300x300 max  as thumbs while scrolling. You could use lower if you want.\nAnd you can load the large image when you tap the thumb. \nThere is no need to make them square like i said but you get my point \n. @bpoplauschi #884 and #894 are almost the same.From these two i prefer #884.\nNow for #787 i would like to see some benchmarks and the code needs some cleanup.\nHowever i like the idea of making it optional like you said\n. @lsantaniello maybe use the SDWebImageRefreshCached option\n. basically there are 2 options:\n1. getting the images smaller from the server side\n2. try this to reduce the size of the image first before caching.\n. @krupanshu \nshouldDecompressImages available for both\nSDImageCache & SDWebImageDownloader\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\n. now there is the option\nshouldDecompressImages available for both\nSDImageCache & SDWebImageDownloader\n. @snpatil1 \nbased on comments above i think we can close this for now. If the issue reappears feel free to re-open it.\nthanks\n. @mmjuns not its not a but. the number show the max concurrent operations at any given time. check the sample code. it words just fine. i think there is an issue with your project.\n. @GuilhermePolitta @xmucyp \nis there a solid way to reproduce this crash?\n. @GuilhermePolitta  so exactly like the sample project, right? i tried that in both simulator and an iPhone 5S but cannot seem to make it crash\n. @GuilhermePolitta sorry i do not have an iPhone 4 or 4S to try. maybe someone else can pick this up\n. @bpoplauschi do we have plans for supporting local image urls or should i close this?. I think that animating the appearing image is outside the scope/purpose of this library. Thanks\n. Hello @sairasamdani \ncheck if the target membership for the file: \nSDWebImageManager.m file is checked in XCode File Inspector panel\n. @sairasamdani Did you use CocoaPods or you just copied the frameworks / source code in your project? Have you followed the steps provided in the README?\n. @sairasamdani i tried that myself in a newly created project and it compiles just fine.\ndid you add the -ObjC flag in the Build Settings in other linker flags?\n. @sairasamdani can't see any screenshot. \n. Hello @bizibizi \nyou can set the max cache age in the SDImageCache.m file.\nyou can change the kDefaultCacheMaxCacheAge to meet your needs\nthanks\n. @bpoplauschi  would this work?\ngit clone --recursive https://github.com/rs/SDWebImage.git\n. @bpoplauschi \nyeap that works fine\n. Hello @bizibizi \nin SDImageCache.h there are 2 methods which might come in handy:\n- clearMemory\n- clearDisk\nthe cache is automatically wiped after x amount of time declared in SDImageCache.m\nin the static const kDefaultCacheMaxCacheAge\nthanks\n. @bpoplauschi i think you can close this now :)\n. @bizibizi i do not think you can selectively disable caching for certain images. \n. @gsempe did you mean this:\nhttp://passets-ec.pinterest.com/images/about/logos/Pinterest_Favicon.png\nbecause the one you pasted is 128px in size only\n. tests added with 3.7.3 release.\n. Hello @bizibizi \nif you read the documentation you will find that there are a couple of methods that can take care this request.\ne.g \ninside the SDImageCache.h:\n-diskImageExistsWithKey\n-cachePathForKey\n-queryDiskCacheForKey\n-imageFromMemoryCacheForKey\n-imageFromDiskCacheForKey\nin SDWebImageManager.h:\n-cachedImageExistsForURL\n-diskImageExistsForURL\ndepending on your needs you can take your pick \n:)\n. @bpoplauschi \n@sourcebits-mahesh if what you are saying is that the urls from your server are added to the failed list then the issue could be there and not in the library itself. \nDo the urls contain any weird character? Can you provide a list with 10 urls coming from your server that are failing?\n. @Kry256\nits a typo mistake like you said... \nit should say \"Use sd_cancelCurrentImageLoad\" instead\nhowever i do not get the crash you suggested.\n. @Kry256 the demo project has a scenario like that. when you go into the details view it loads the image by calling the sd_setImageWithURL which in turns calls sd_cancelCurrentImageLoad which successfully cals the sd_cancelImageLoadOperationWithKey inside the UIView+WebCacheOperation.m file.\nno crash for me with the demo.\ncan you replicate it there?\n. @skriyaz7 \nThis library is not intended for use with ALAsset urls. You can use this pull request https://github.com/rs/SDWebImage/pull/906 that supports ALAsset urls and the new PHAsset framework.\n. @jyothireddy58 is this crash easy to replicate using the demo project?\n. @jyothireddy58 when you drag & drop a folder you should tick the 'Copy items if needed' checkbox. \nThis will create a copy of the files into your project. What you did was create references to the location you copied them from.\nFirst remove all files for SDWebImage from your current project.\nopen terminal in your desktop or whichever location suits you and paste this:\ngit clone --recursive git@github.com:rs/SDWebImage.git\nwhen its done:\n- open the folder you downloaded and drag & drop the 'SDWebImage' folder in your project\n- then open the Vendors folder and drag & drop the 'libwebp' folder in your project.\n  Clean & rebuild your project\nThat should do it\n. @jyothireddy58\ni just tried that myself and the folder is not empty. \nAre you waiting for the whole process to finish? First it downloads the SDWebImage library and then all then external modules\n. @jyothireddy58 \nare you following the steps as per my post? are you cloning the repository recursively in terminal?\nyour other option is to directly download the webp lib\ngit clone --recursive http://git.chromium.org/webm/libwebp.git\n. @jyothireddy58 duplicate symbol errors usually mean that you have duplicate files in your source. \nCheck your compile sources for duplicates.\n. based on comments we can close the issue. if you find more info on this please re-open.\nthanks\n. similar https://github.com/rs/SDWebImage/pull/824\n. @timkoma this issues is not closed\nyou got confused of the reference of the other issue. this is still open\n. @mtitolo closing this for now but please reopen if you have further info for using NSMapTables instead of  dispatch_barrier_sync\n. based on comments above i am closing this\n. @maxmitch \nin your preparetoreuse method in your tableview/collectionview subclass nil your imageview's image.\nsomething like:\nself.imageView.image = nil;\n. @brittanyl \nwhy dont you pass just the url instead of the whole imageView? This way you can load the image in the viewdidload of the detailViewController instead of the way you are doing it now.\ni think it would be simpler :)\n. @brittanyl \nfrom this code you posted:\nFullArticleViewController *detailViewController = [[FullArticleViewController alloc]\ninitWithNibName:@\"FullArticleViewController\" bundle:nil];\ndetailViewController.title = [[Doctors objectAtIndex:indexPath.row] objectForKey:@\"node_title\"];\ndetailViewController.articleDetail = [Doctors objectAtIndex:indexPath.row];\n[detailViewController.featureImage sd_setImageWithURL:[NSURL URLWithString:cellImageLink]];\nyou are not passing the url. You are passing the image while using this method: sd_setImageWithURL to load it at the same time.\nYou are just using the cellImageLink inside the method and not passing it like you do for the title or the articleDetail.\nCheck the sample and see how the example passes the url to the detailViewController and then pushes the view.\n. @Igor-Palaguta \nin the downloadImageWithURL method inside the SDWebImageManager.m file\nthe following is performed:\noperation.cacheOperation = [self.imageCache queryDiskCacheForKey:key done:^(UIImage *image, SDImageCacheType cacheType) {\nbefore calling the downloadImageWithURL method which means that a cached image is already loaded (if any) and does not change since the response is 304\n. @RuiAAPeres check here https://github.com/rs/SDWebImage/issues/1082\nthey are waiting for an app to be approved(or not) based on the code found in that thread\n. closing this. everyone redirect towards https://github.com/rs/SDWebImage/issues/1082\n. @pclion please see the installation documentation for this library. Use cocoapods to make your life easier \n. discussed here as well\n:+1: \n. @bpoplauschi \ni think this makes sense since we do want to save the altered data when a transformation has been performed by the delegate method from the user. Unless i am missing something here this is good to go.\n. @bpoplauschi Thanks for clarifying!\n. closing as of https://github.com/rs/SDWebImage/pull/1121\n. @Steven4294 \non the simulator it works better as it uses the RAM of your mac which a lot more that the available ram on the actual device. My opinion would be to use a collectionview instead of an actual custom nib. \nNow on your case the performance might be caused on the images being large in size maybe?\nWhat device are you testing on?\n. @bpoplauschi \neven though my spare time is a bit limited right now, i would love to be of any assistance whenever i can.\n. @bpoplauschi @rs thanks\n. @Steven4294 \nif you provide UIImageJPEGRepresentation with compression quality 1 it DOES NOT return the original image. It returns a new image with compression quality as its maximum value.\nThis can actually return an object that is larger than the original asset .\n. @Steven4294 \nfeel free to re-open if you have more info regarding this. thanks\n. thanks for the reply.closing this now\n. @yangchenLiuliu you could do\n[[SDImageCache sharedImageCache]  initWithNamespace:@\"ns\"]; instead of the \n[[SDImageCache alloc] initWithNamespace:@\"ns\"] so you can init the kPNGSignatureData\nHowever this passes through twice in the initWithNamespace method.\nor you could check in the initWithNamespace method if the kPNGSignatureData is nill and assign value to it\n. @yangchenlarkin \nyes i edited my comment. You could check inside the initWithNamespace method if kPNGSignatureData is empty and then assign value to it\n. @yangchenlarkin thanks for your comment :)\n. anyone facing this issue can try this\n. @TalhaAkkas can you share your solution so others can benefit from it?\n. @TalhaAkkas any news on a pull request on this or some sample code?\n. @kidGuo i am waiting for a formal solution as well. \nSomeone on this: https://github.com/rs/SDWebImage/issues/538\nreported the following as a solution:\nhttps://github.com/rs/SDWebImage/issues/538#issuecomment-44598405 \n. @kidGuo that's why i am still waiting for an official fix as many people are struggling with memory issues\n. @kidGuo \nSDImageCache.h offers 3 options:\n- (void)clearMemory;\n- (void)clearDisk;\n- (void)cleanDisk;\n. closing this. go to https://github.com/rs/SDWebImage/issues/538 instead\n. closing due to lack of response. Re-open if you have more info regarding this\nthanks\n. @liweiz \nyou can find the DerivedData folder in:\n~/Library/Developer/Xcode/DerivedData\n. #833 has some pointers on solving this\n. @donholly now thats a feature i would love to have in SDWebImage! \nthanks for the contribution :)\n. done https://github.com/rs/SDWebImage/commit/9620fffa64381fd8b2f76ffdb09a314a75aec2cb\n. @PalTamojit you are getting a memory issue because the image is 5.2mg\nit does not have to do with caps in the extension in my opinion.\nAll your other images are the same size as this one?\n. @PalTamojit the image you posted is only 47 kb\n. @PalTamojit if you check the issues this is what many people are struggling with.\nI do not think there is a library that can handle this size since you always need to decompress the images  before showing them. This creates the memory warning.\nYou should use smaller images when in a collectioview/tableview and then if the user wants to see the full image download it in another method\n. @PalTamojit \ni tried it with your image using the default SDWebImage demo project and did not get any memory warnings. I even uploaded it to my own server just for the test sake and still did not get any warnings.\n. @PalTamojit\nin my opinion you should not download a huge image like in your example only to show it in a small square uiimageview in a tableview or collectionview. \nBesides being wrong as the image will take quite a while to download, it will not show correctly since you will be squeezing a huge resolution into a very small square which will distort the image.\nFor showing images like thumbs you should use low res / sized images. This way it loads super fast and the user will not feel any lag at all while scrolling. Then if you want to show the full resolution image let the user tap the cell and download it at will.\nP.S: i tried the example using the 1st link you provided which was 5.2mg and did not get any warnings at a iPhone 5S device\nare you doing anything else to your downloaded image? Are you sure its the SDWebImage lib thats causing the memory warning?\n. @PalTamojit \nmy suggestion is to use smaller images and let the user decide which one to see in full resolution.\nThis will enhance the user experience plus it will load the image in split of a second\n. @PalTamojit \nyou would either need to download smaller images in the first place or use the\nCGImageSourceCreateWithURL method https://developer.apple.com/library/iOS//documentation/GraphicsImaging/Reference/CGImageSource/index.html#//apple_ref/c/func/CGImageSourceCreateWithURL\nto create a smaller image from your original ones.\nBut the problem will still exist since the user would need to wait for all images to download first and then be drawn to view. The solution is simple. Make smaller images since you do not need to output the full resolution in a smaller uiimageview.\n. @PalTamojit you can check the width/height of the image after the download and then use the method i told you in my previous post to create a smaller image and show that instead of the huge one.\nBesides that you could use resize categories to resize the image to lower rect frame.\nAll of the above can be done in the completion block of the SDWebImage method\n. @PalTamojit \nglad it works :)\n. @Tom29 \ncachedImageExistsForURL checks the memory cache first and if its nil it then checks the disk cache.\nCheck SDWebImageManager.m to see the implementation for more details\n. @Tom29 \nAs far as i know when the app receives memory warning the library automatically clears its memory cache automatically. You do not need to clear the disk cache yourself as this is done when you put your app in the background.\nCheck this file SDImageCache.m for this method cleanDiskWithCompletionBlock for more info.\nWhen you use the cachedImageExistsForUrl you get a yes/no response which tells you if that url has an image in cache or disk.\nAlso you can control the cache age as well on the same file on top search for this: kDefaultCacheMaxCacheAge \n. @SashaBugayev have you tried the command 'pod install' in the terminal?\nthis should download all the pods\nalso make sure you open the workspace that the cocoapods have generated instead of the xcodeproj\n. @SashaBugayev \nfor the images you do not want to keep in storage you could use this option: SDWebImageCacheMemoryOnly \nso that the image thats downloaded is only cached in memory and not in disk.\nTo get 10-15 images per cell you could use the SDWebImagePrefetcher do download x many images as the number of urls you provide to it in an nsarray.\ncheck in SDWebImagePrefetcher.h the prefetchURLs method for more details\nRemember to keep the images in a reasonable size in order to maximise the user experience and not cause lag while scrolling\n. @EvoRobin \ni think this is something outside the scope of this library. You could do it yourself in the completion block of the SDWebImage method. \ne.g If you want to fade the image check https://github.com/rs/SDWebImage/issues/533\n. @jaumevn \ni think you can show animated gif using methods like:\nsd_animatedGIFWithData  or\nsd_animatedGIFNamed \nfound in UIImage+GIF.h\ncheck it out\n. @jaumevn \nout of curiosity, when you save those gif images on disk are they saved as gif or jpg?\nif they are saved as jpg then that should be the issue.\n. @jaumevn \nYou might be saving it as gif but if you open the physical file from disk can you see the animations?\n. @jaumevn \ni checked the diskImageForKey method and i see this:\n\nUIImage *image = [UIImage sd_imageWithData:data];\n\nif you check the sd_imageWithData method you will see inside that it returns the image based on the type of it, png,jpg,gif. \nIf you put a breakpoint there does your image return the correct content type?\n. @jaumevn \nglad i helped a bit :)\n. @jaumevn \ncan you share your full code for reading and writing to disk so that others can dive in?\nmaybe there is a logical error somewhere in your code.\n. @jaumevn are you sure the isAnimatedSticker method returns true for gif images?\nWhat is the key you are passing in the main method? Is the image already stored and you pass the imagepath? If yes then how was it stored in the 1st place.\nA bit confused.\n. @jaumevn \nin your 1st block of code you load the image from disk using nsfilemanager then you get a uiimage back using sd_imageWithData and then you resave the image to disk using storeImage method.\nWhy do you save it again since you already have it stored?\n. @jaumevn \nmaybe i did not make myself as clear as i wanted.Sorry about that. \nI was asking why are you saving the image again since you already had it on disk. \nI see that you ask for data from the NSFileManager and then you resave it again using SDImageCache's storeImage method. \n. @jaumevn \nare you still experiencing issues with your GIF images?\n. @ZevEisenberg i tried the image as well and i get an exception too. \nThere might be issues with the metadata of the image.\nsimilar https://github.com/rs/SDWebImage/issues/943\n. the warning appears when this fires:\nCFDictionaryRef properties = CGImageSourceCopyPropertiesAtIndex(imageSource, 0, NULL);\ni cannot guess what Apple might be doing under the hood but its whats causing the issue. Since its a warning and not a crash i think you are ok. \nI will close this as this is not something SDWebImage is responsible for or able to fix any other way.\nIf by any chance anyone finds another way please let us know\n. @houmie this image shows just fine when i tried it in the demo project.\nthis url is not loaded at all just like in the webbrowser\nThis url produces \"Not authorised\" because it expects parameters just like the other url above.\nThe images that produce the warning CreateMetadataFromXMPBufferInternal show just fine in this library.\n. can you try the url with the parameters in the demo project? remove all other urls and leave only this\nThe demo project uses the code below to load the image in a tableviewcell, which is like the one that causes you issues. If you want you can remove the options parameter as well\n[cell.imageView sd_setImageWithURL:[NSURL URLWithString:[_objects objectAtIndex:indexPath.row]]\n                      placeholderImage:[UIImage imageNamed:@\"placeholder\"]\n                               options:0];\nThe proper image loads just fine.\n. The Verbose macro works with the prefetcher only and this outputs the logs Prefetched x out of x in the console.\nas far as the url that is failing for you did you try to uninstall the app and retry? \nmaybe the url was added to the failedUrl array. \n. the current version is 3.7.2 not 3.7.0\ncheck this comment to override failedUrls array\n. If you check the error you will see it's because of a timeout in your\ninternet connection.\nOn \u03a3\u03ac\u03b2, 4 \u0399\u03bf\u03c5\u03bb 2015 at 13:20 Houman Khorasani notifications@github.com\nwrote:\n\nSpeaking of which, the NSError for the failed guardian image says this:\nError Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo=0x7fe1a1d836b0 {NSUnderlyingError=0x7fe1a403c420 \"The request timed out.\", NSErrorFailingURLStringKey=http://i.guim.co.uk/img/media/22e3bdb76e11eafa92b3d6abc676ea9e515e643b/0_269_4256_2556/master/4256.jpg?w=645&q=85&auto=format&sharp=10&s=af23d29efa6e0194a41607ba25631aa0, NSErrorFailingURLKey=http://i.guim.co.uk/img/media/22e3bdb76e11eafa92b3d6abc676ea9e515e643b/0_269_4256_2556/master/4256.jpg?w=645&q=85&auto=format&sharp=10&s=af23d29efa6e0194a41607ba25631aa0, NSLocalizedDescription=The request timed out.}\nThere you go, and the same image works fine with Haneke. So it must be\nsomehow how SDWebImage handles this sort of encrypted urls.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/919#issuecomment-118498599.\n. Read the error message carefully. Request timeout means that you could not\nget a response from the server hosting the image. Google it\nOn \u03a3\u03ac\u03b2, 4 \u0399\u03bf\u03c5\u03bb 2015 at 13:23 Houman Khorasani notifications@github.com\nwrote:\nInternet connection is fine. I have 40 images, 20 from guardian and 20\nfrom Telegraph. The internet happens to disconnect for all guardians and\nremain stable for all telegraphs? c'mon. lol\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/919#issuecomment-118498692.\n. @houmie i added both urls in the demo project and both load just fine.\nproof:\n\n. when you add a breakpoint after the request is started the you will get 'request time out' if you do not let the code continue in a specific amount of time. So the server will respond with a request time out (the error you posted above). Be careful with your breakpoints.\n\nI really cannot understand why you are getting this issue when both urls you mentioned work just fine in the demo project. Please check your code again for anything you might have missed. Cell reusability issues, timeouts, etc...\n. that error means that the downloaded image's size is zero. Are you sure you are not changing the url at all? the guardian needs to be exactly as it is or else you will get a not authorized error (even in the browser).\nPlease check both urls in the demo project. If both work then you need to readjust the code in your project as something there is causing your issues. Also make sure you are using the latest code from this lib.\njust tried again with both urls and both work just fine\n. @houmie if the urls you provided work on the demo app then there must be something wrong with your project. In another post you stated that the urls work in the demo app, right?\n. @thisispiers \ncheck this https://github.com/rs/SDWebImage/issues/889\nin the latest version its fixed\n. @M00ker \nhello. Check here https://github.com/rs/SDWebImage/blob/master/README.md\nScroll down and you will see the installation section. :) \n. @M00ker \nthis is the closest to your problems https://github.com/rs/SDWebImage/issues/856\nhow did you install this lib? i just downloaded it and cd into Tests and run pod install.\nthen i opened the SDWebImage.xcworkspace and it compiles just fine in all targets\n. @M00ker clone the git recursively\ngit clone --recursive https://github.com/rs/SDWebImage.git\nor simply clone the repository then use terminal to cd into Tests and then install using cocoapods\nwhatever suits your needs\n. @M00ker \nNo worries. Glad it worked!\nYou can close the issue if everything works fine\n. @brunojasgv \ni tried the image url in the browser and the image did not show either.So i guess its a server side issue\n. @brunojasgv did you find any time to check this? if you load the image url to your browser and open console you will see this:\nFailed to load resource: net::ERR_CACHE_MISS\nso i think you should check your server side code as i do not think its an issue with this lib\n. @SashaBugayev\nin order to download many images you can use the SDWebImagePrefetcher with the following method:\n- (void)prefetchURLs:(NSArray *)urls;\nyou can gather all your NSUrls and add then in an array to the prefetcher method.\nAlso you can use the:\n- (void)prefetchURLs:(NSArray *)urls progress:(SDWebImagePrefetcherProgressBlock)progressBlock completed:(SDWebImagePrefetcherCompletionBlock)completionBlock;\nmethod to get progress and completion blocks as well\n. @PalTamojit you mean moving using a parallax like effect? if thats what you mean i do not think this library is what you want. Can you be more precise?\n. i think its ok now\nhttps://github.com/rs/SDWebImage/commit/9620fffa64381fd8b2f76ffdb09a314a75aec2cb\n. closing this since its outside the library's scope.\n. based on this this NSURLContentAccessDateKey is not set with every read access of the file\n. @msmobileapps Can you provide with a sample image? Maybe the EXIF metadata are corrupted or wrong info is written in wrong fields.\n. @msmobileapps yes..do you have a url of an image that produces this crash log?\n. @msmobileapps can you save the image locally and then upload it to a dropbox share so i can download it?\n. @msmobileapps \ni tried your image using the demo project and after some testing i got this:\nin IOS 8 i get no warnings or errors whatsoever.\nin IOS 7 i get:\nImageIO: JPEG Corrupt JPEG data: premature end of data segment\nonly once with every run in the simulator. \nTo reproduce the error do the following:\nRun the app in the IOS 7 simulator,\nLet the thumb load first \nTap clear cache \nNow tap the cell to view the details view.\nYou will see the error on the console.\nThe error is initially produced on SDWebImageDownloaderOperation.m file and line 276 where it tries to draw the partial image using CGContextDrawImage\nHowever I could not get the error code you describe in the subject to show up.\ni will investigate more and report back\nEDIT: By the way it does not crash the app at all. It just produces a console warning\n. @netwire88 can you try one thing. Get the image that produces this error and strip its EXIF metadata. Then clear the cache and try again. Does it produces the same log?\n. @jlmendezbonini thanks for the image. i did a quick test and the warning appears when this fires:\nCFDictionaryRef properties = CGImageSourceCopyPropertiesAtIndex(imageSource, 0, NULL);\ni cannot guess what Apple might be doing under the hood but its whats causing the issue. Since its a warning and not a crash i think you are ok. \nI will close this as this is not something SDWebImage is responsible for or able to fix any other way.\nIf by any chance anyone finds another way please let us know\n. @fmaylinch thanks for the link \nThe exif is what's causing the issue.since it's a warning you do not need to worry about it. \n. @antoinebis do you have a sample image for us to test on?\n. @antoinebis\n i tried it with IOS 7 & 8 simulator and device and i did not have any issues loading the image from a remote server of my own with the 1st try. \nI also do not see any issue with the image itself.\nAre you using the latest build of this lib? Are you doing anything else with the image after downloading it or just plain showing it to a cell imageview?\n. @antoinebis \nThe library itself:\n- automatically cleans up the in-memory cache when memory warnings occur.\n- automatically cleans up expired cache files when the app gets terminated\n- automatically performs a cleanDisk to clean up any unfinished tasks\nSo if you say that your users restart the app then whats being done is that the lib is cleaning all expired files upon termination.\nThe default cache age is 1 week. After that the lib automatically cleans up all expired files.\nHave you by any change setup the maxMemoryCost property?\nSince we do not have any definitive case to replicate in order to debug this, my only other thought is for you to download and try with the latest version of this lib and see if that works with your case and report back with results.\n. @antoinebis \nPlease re-open when you have some results with using the newest version. Hopefully it fixes your issues\n. @bpoplauschi sounds good to me. \nplus there are these if you want to check them out:\n- OLImageView\n- JMAnimatedImageView\n- AnimatedGIFImageSerialization\n. @bpoplauschi \nif you want you can do a benchmark like you did with this. https://github.com/bpoplauschi/ImageCachingBenchmark\n. @bpoplauschi FLAnimatedImage has an active UIImage subclass branch...\ncheck it out\n. need to make some extra changes. will resend pull later\n. @bpoplauschi until we have the new gif support ready i think we should merge this if it fixes the transparent rendering issue\n. similar https://github.com/rs/SDWebImage/issues/798 https://github.com/rs/SDWebImage/issues/809\n. @zhongchao-han did you find a solution for this?\n. @sublimepremise \nyou can use the completion block of the sd_setImageWithURL method that contains the image that has been downloaded and pass that.\nIf the url is not valid or empty then the completion block will result with a nil image\n. @sublimepremise no problem :)\n. @harshcs the missing files means that you have not installed the library correctly. \nPlease refer to this section https://github.com/rs/SDWebImage#installation and follow instructions to integrate this lib into your project.\nTo run the example project do the following:\nFirst close the project. Navigate using terminal into the Tests folder and run pod install\nWait for the process to finish and then you can use the SDWebImage.xcworkspace to open the project.\n. @harshcs everything you need to know is here\nYou can find nice tutorials like this as well\n. similar https://github.com/rs/SDWebImage/issues/821\n. @sourcebits-mahesh @tbrknt\ngo to SDWebImageManager.m file inside the downloadImageWithURL method from line 176 and change this\nif (image && options & SDWebImageRefreshCached) {\n                // force progressive off if image already cached but forced refreshing\n                downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n                // ignore image read from NSURLCache if image if cached but force refreshing\n                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n            }\nto this:\nif (image && options & SDWebImageRefreshCached) {\n                // force progressive off if image already cached but forced refreshing\n                downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n                // remove SDWebImageDownloaderUseNSURLCache flag\n                downloaderOptions &= ~SDWebImageDownloaderUseNSURLCache;\n                // ignore image read from NSURLCache if image is cached but force refreshing\n                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n            }\ni tried it and i got it working.\nlet me know how it turns out\n. @sourcebits-mahesh \nwhat i did is add this\n// remove SDWebImageDownloaderUseNSURLCache flag\n                downloaderOptions &= ~SDWebImageDownloaderUseNSURLCache;\nthis removes the SDWebImageDownloaderUseNSURLCache option only when the user has enabled the SDWebImageRefreshCached flag\n. @sourcebits-mahesh \nbased on my understanding, SDWebImageRefreshCached flag is used to get images from urls that you know they might change, e.g like avatars. i do not know if thats a good idea to force refresh for all images.\ni also have read about this option NSURLRequestReloadRevalidatingCacheData that actually revalidates the cached image. According to Apple's documentation:\nSpecifies that the existing cache data may be used provided the origin source confirms its validity,\notherwise the URL is loaded from the origin source *Unimplemented*\nLogically, this would mean that the request would respect the cache-control & expiration header for that image and either use the cached one or load from the origin source. \n. @GabrielCartier any updates on this? does this still happen on your side?\n. @rokridi are you using the SDWebImageRefreshCached option?\n. @rokridi \ni used the demo project. removed all example files and added 1 image i uploaded to my server.\non the detailsviewcontroller i added the refreshcached property like this:\n[self.imageView sd_setImageWithURL:self.imageURL\n                          placeholderImage:nil\n                                   options:SDWebImageProgressiveDownload|SDWebImageRefreshCached\n                                  progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n                                      if (!activityIndicator) {\n                                          [weakImageView addSubview:activityIndicator = [UIActivityIndicatorView.alloc initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray]];\n                                          activityIndicator.center = weakImageView.center;\n                                          [activityIndicator startAnimating];\n                                      }\n                                  }\n                                 completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                                     [activityIndicator removeFromSuperview];\n                                     activityIndicator = nil;\n                                 }];\nThen i opened the simulator and run the project, tapped the 1st cell to see the details view.\nThen i uploaded a new image with the same name as the previous one and replaced the old one online.\nI hit back on the nav bar and again tapped on the 1st cell. The new image loaded successfully.\n. @nitishmakhija can you replicate it in the demo project?\n. @runia \nwhen you download the image SDWebImage has cached it in memory/disk. \nYou only need to pass the url of that image and then use sd_setImageWithURL in the detail view controller to retrieve it. Since the image has already been cached the fetch will be very quick.\ncheck the example code of SDWebImage for a similar example\n. @runia no problem\n. closing this. this https://github.com/rs/SDWebImage/commit/91b425111518b3a818fcea5a775b8fc6e606cee9 was already merged\n. @nickplee thanks for the code. merged here\n@bpoplauschi i removed the comment for the designated initializer\n. @lllovesmatt are you re-using your table cells properly? Can you replicate this in the demo project?\nOut of curiosity, are you using a UITableView to show images in grid style format?\n. @kartikthapar \nSDWebImage supports downloading of images in the background by creating tasks using beginBackgroundTaskWithExpirationHandler\nThis buys the app some more time to finish downloading any current tasks already created, such as downloading of images in a queue.\nWhat you suggest needs NSURLSession which currently the lib does not support.\n. @perlasivakrishna if you want to refresh the image every time you make a request you should use the SDWebImageRefreshCached option\n. @perlasivakrishna did this flag work for you?\n. @ice6 could you please use english so everyone can understand?\nis there any reason you are quoting Corinthians from the bible?\n. @kevinran do you have a sample project we can test this on? \nI used the library's example project and added a button that does this:\n```\n    [SDWebImageDownloader.sharedDownloader downloadImageWithURL:[NSURL URLWithString:[_objects objectAtIndex:arc4random_uniform(10) + 1]]\n                                                        options:0\n                                                       progress:^(NSInteger receivedSize, NSInteger expectedSize){\n }\n completed:^(UIImage *image, NSData *data, NSError *error, BOOL finished)\n {\n        if (image && finished){\n            NSLog(@\"%@\",image);\n        }\n }];\n\n```\nevery time i tap the button it download a new random url from the _objects array.\nI could not make it crash and i tried on IOS 8 & XCode 6\n. @kevinran do you have any updates on this? Is your app still crashing when calling downloadImageWithURL twice?\n. if you are referring to the readme it was updated recently. please reopen if thats not the case\n. @zhw511006 right now we are at the process of replacing our existing GIF support which is rather slow. Thanks for your patience\n. @leiyong316 \nas far as i know, there is no direct option to set so you can use only the disk cache. \nWhat you can do though is use this method removeImageForKey:(NSString *)key fromDisk:(BOOL)fromDisk; to remove the image from memory only passing NO as an argument to the fromDisk \n. @leiyong316 you cannot erase all at once but you can use the method i told you above in the completion block of every image request. This way after you get the image you immediately remove it from memory cache only\n. if you need anything else regarding this matter please reopen\n. @GBoyadziev sounds like a reuse issue to me as well. Are you using one custom cell only?\n. @GBoyadziev if you need any further assistance on this please reopen\n. @MooYoo \nyou can use this git clone --recursive git@github.com:rs/SDWebImage.git which will download all necessary files. Then you can add them to your project. \n. closing this. if you need any further assistance please reopen\nthanks\n. @XiangqiTu how to you know that on the return image part of the code the size is 1.3MG?\nhow to you calculate it there?\n. @XiangqiTu when you save the image to disk do you use UIImageJPEGRepresentation ?\nif yes then you actually DO NOT save the exact image.Instead you are saving a new one with a compression quality of your choice. Thats why you see a bigger image\n. closing this...the readme was updated recently\n. @bpoplauschi something like this?\nNSString *filename = [NSString stringWithFormat:@\"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%@\",\n                                    r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10],\n                          r[11], r[12], r[13], r[14], r[15], [[key pathExtension] isEqualToString:@\"\"] ? @\"\" : [NSString stringWithFormat:@\".%@\", [key pathExtension]]];\n. @bpoplauschi ok. I will send a pull request soon\n. I am not in front of my Mac now so please be my guest @bpoplauschi \n. something like that? https://github.com/rs/SDWebImage/pull/806\na bit old though\n. @vickieduong are you sure that data is downloaded and passed to the sd_imageWithData method?\ncan you reproduce it all the time?\n. @evrenios have you added all necessary frameworks?\nsteps found here:\nhttps://github.com/rs/SDWebImage#add-the-sdwebimage-project-to-your-project\nhttps://github.com/rs/SDWebImage#add-dependencies\nhttps://github.com/rs/SDWebImage#add-linker-flag\nhttps://github.com/rs/SDWebImage#import-headers-in-your-source-files\n. closing this. please reopen if you need more info\n. @bpoplauschi\nI only changed the location for the initialisation of the kPNGSignatureData so it works for either case.\n(alloc using the singleton or alloc new instance manually).\n. @bpoplauschi do you want me to merge this?\n. @rakeshroshan44 seems you are using an older version of the library. \nsetImageWithURL should be sd_setImageWithURL\nyou can clone the repository or use cocoapods for the latest version\n. closing this. if you have any followups please reopen\n. @hungbv according to this\nthe error you are having is because the file does not exist.\ncan you make sure the online image exists?\nthanks\n. closing this now.You can reopen if you have more info\n. @hungbv can you please try using this SDWebImageRetryFailed in the options of the method you are using. Please let me know how it turns out\n. glad it worked for you\n. @f33chobits using your image i get:\n403 \"The operation couldn\u2019t be completed. (NSURLErrorDomain error 403.)\naccording to wiki:\nA web server may return a 403 Forbidden HTTP status code in response to a \nrequest from a client for a web page or resource to indicate that the server \ncan be reached and understood the request, but refuses to take any further action.\n. :+1: \n. @hungbv i think this is unrelated with the current closed issue.\nmaybe this can help you\n. @newacct \ncan you check if this recent pull request fixes any issues for you?\nhttps://github.com/rs/SDWebImage/pull/1031\n. it made some changes in the SDWebImageOperation and how it cancels sub operations fixing a race condition, making thread-safe, according to the author.\nIt also made a small change when calling the [self.imageDownloader downloadImageWithURL ... which basically inits in return the SDWebImageDownloaderOperation.\nThats why i asked if that pull request in its entirety fixed the cancelling issues for you\n. No need to open 2 same issues. closing this one. \nPlease refer to https://github.com/rs/SDWebImage/issues/993\n. closing this based on comments above. thanks @adrianmacneil \n. @MangeshVyas SDWebImage as it is now does not encrypt data while saving. You can do that yourself in the storeImage... method of the SDImageCache.m file by adding appropriate attributes in the createFileAtPath method e.g\n[NSDictionary dictionaryWithObject:NSFileProtectionComplete forKey:NSFileProtectionKey]\nis that what you want?\n. closing this now. If you need more info please reopen\n. @Draveness did you check if the cache is being emptied when the app is restarted?\nBy default when the app goes into background the backgroundCleanDisk is called.\nWhen the app receives a memory warning then the clearMemory is called and when the app is terminated the cleanDisk is called.\nThe clearMemory removes the in memory objects.\nThe clearDisk removes all objects from cache location.\nThe cleanDisk removes all objects from disk based on the modification date and the maxCacheAge set\nCheck the code of any of these methods is the one responsible for making the cache smaller.\n. @fc01 i tried your url and i got this response\n<NSHTTPURLResponse: 0x7fabe2c2a860> { URL: http://img1.imgtn.bdimg.com/it/u=2095998095,2004959060&fm=23&gp=0.jpg } { status code: 403, headers {\n    \"Content-Length\" = 345;\n    \"Content-Type\" = \"text/html\";\n    Date = \"Tue, 06 Jan 2015 09:18:58 GMT\";\n    Server = lighttpd;\n} }\nthe status code is 403 thats why it does not load the redirected image and it cancels the request.\ni think you should check your server's response\n. closing this. Please reopen if you need more help\n. i browsed through this earlier today and i had the same thought. Its not something the library needs to work, but its a cool feature/plugin that someone might need when using maps. \nyeap...a good plugin!\n. @harishkashyap \nare you sure your server replies with the correct amount of info for the progress to show?\n. closing this. please reopen if you think its a problem with the library. \n. @nvdcmptr can you elaborate on \"wrong url\"? do you mean url where the image is not there or a url that is not in correct syntax?\n. @seanLee the following method automatically caches in memory and disk unless stated otherwise using specific SDWebImageOptions parameter.\n- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options;\nits almost the same as the method you are using. Your selected method 1st checks and loads an image from disk,if found, and then loads the url\n. @seanLee you can check the documentation for each option and add the one that fits your needs.\nThere is only this option SDWebImageCacheMemoryOnly that forces the memory cache only and disables the disk cache\nIn your case can use the SDWebImageProgressiveDownload option to slowly show the image as it downloads. You can just use the - (void)sd_setImageWithURL:(NSURL *)url; that will cache the image to memory & disk as well\n. no problem. Good luck with your app\n. @seanLee This library is not for use with ALAsset type URLs. However there is a pull request here https://github.com/rs/SDWebImage/pull/906 that has this type of functionality that you want.\n. @samkass thanks for this.\nWhen the image has finished downloading here SDWebImageDownloaderOperation.m  -> connectionDidFinishLoading method i see that it calls the sd_imageWithData method where the orientation from the EXIF data is retrieved from this method sd_imageOrientationFromImageData.\nIf the orientation is not UIImageOrientationUp it returns an image with the orientation found from sd_imageOrientationFromImageData.  How come you did not put the fixOrientation method there?\nPlus the fixOrientation method will not work in PNG images since they do not support an orientation flag, right?\n. @bpoplauschi whats your opinion on this?\n. @bpoplauschi yeap. 371 was an issue not a pull request.\nI had posted the code there as well.\n. @TheoJL \ni tried your scenario in the demo project. I added 2 more imageviews in the detailviewcontroller and all worked just fine. i got the image to display in all 3 of them. Are you sure your code is not doing anything else unexpected? All requests are fulfilled just fine.\nIf you can replicate it in the demo project feel free to reopen.\ni read this now https://github.com/rs/SDWebImage/issues/973 and even though the request is cancelled i get the image in all my imageviews.Can you please test using the latest build and the demo project?\nthanks\n. @aanchalkalani \nplease read this:\nhttps://github.com/rs/SDWebImage#installation-with-cocoapods\nand this:\nhttps://github.com/rs/SDWebImage#installation-by-cloning-the-repository\nbasically you download the library and and run pod install command in the Tests folder.\nThen you open the project using the SDWebImage.xcworkspace\n. @rosamerinoclaros \ni think you can build the framework yourself. You can download the demo project, run 'pod install' command in the Tests folder and then open the workspace project and alter the architectures you want to support. Then choose the scheme you want and build the project.\nGo to Derived Data folder and get your framework from there.\nWhat issue is causing you a problem?\n. closing this. Please reopen if you need more help. thanks\n. @heaofei \nthe problem i think is because you set content type of the response to be application/octet-stream\nso the file can be downloaded and not previewed.\ncheck this\nhttps://github.com/rs/SDWebImage/issues/285\nSDWebImage uses these headers: image/webp,image/*;q=0.8\nif you remove them then you can download the image in your example\n. @marcustoy in your cell subclass add the prepareforreuse method and nullify the image in your imageview\n. @siddhesh12 there must be a cell reuse issue somewhere hidden in your code. check the demo project to see how it works. if still you have issues please share a demo project so everyone can take a look and help\n. closing this. Follow https://github.com/rs/SDWebImage/issues/538 instead\n. @wangweiarr this is outside the scope of this library.\nYou can add rounded corners yourself in the completion block or simply use the \n- (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL;\nto do whatever you want with the image and it will cache the changed file instead of the original\nmore details in SDWebImageManager.h\n. @wangweiarr \nif i understand correctly you want the image to have rounded corners and return that image on the completion block of the sd_setImageWithURL,right?\ni used the demo project and set the delegate of the SDWebImageManager to self in my detailsviewcontroller.\nthen i added the method i described above in the view.\nI did not add any extra code to the sd_setImageWithURL method. \nI only added a UIImage category to take the image and add corners to it like this:\n- (UIImage *) imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL{\n    return [image add_imageWithCornerRadius:50];\n}\non my completion block of the sd_setImageWithURL method i got my rounded image.\nThis does what you described. It does the transformations before caching the image and before returning it to the completion block.\n. As i see it its a specific case you want to address. If you can do it then please create a pull request and so others can benefit from it as well.\nThanks\n. @mohamedadly can you try this https://github.com/rs/SDWebImage/issues/951#issuecomment-62358369 and let me know if it works for you\n. thats weird since with the mentioned code in the comment the image is loaded again from the online url and not from disk / cache. \nif you load the url to a browser you will see that the image is retrieved from akamai cdn\nhttps://fbcdn-profile-a.akamaihd.net/\nis there a chance the image is not yet loaded to the akamai cdn and thats why it sometimes works and sometimes it does not? maybe the akamai server does not have the new image yet.\n. it does not mean its something wrong. it just takes time to sent the new image to the cdn and then cache it and sent it to all server instances. Since as you said it sometimes takes time to refresh the image to the browser as well then the \"issue\" is with the cdn's response time.\nIf like you said using the username instead of the numeric user id makes the image refresh faster then continue using that :)\n. i don't see anything else we can do here. closing this\n. dont worry about it\ni know that most of us have limited time. :+1: \n. as far as i can see the prefetcher calls cancelPrefetching before starting to prevent duplicate requests. This method will call the [self.manager cancelAll] which in turn cancels all running operations by design. \nCan you try initiating the prefetcher using this:\nSDWebImagePrefetcher *prefetcher = [[SDWebImagePrefetcher alloc] init];\ninstead of using the sharedImagePrefetcher\nThis will create a new instance of SDWebImageManager instead of using the global one.\n. glad we helped! closing this. if you need further info please reopen\n. @timkoma is there a reason why the completion callback wont be called?\n. as i can see it if you cancel the SDWebImageDownloaderOperation then the cancelBlock posts a notification:\nSDWebImageDownloadStopNotification\nThe SDWebImageDownloader listens for that notification and calls the stopActivity\nam i missing something here?Please let me know if i am getting this wrong\n. this is where the completion block for cancelled requests was removed due to race conditions https://github.com/rs/SDWebImage/pull/699\n. @MobileMon are you sure this control is causing the animations to stop? do you have any sample project that we can check for this? If you find any more info please let us know\n. @MobileMon whats the object that the malloc is referring to? did you try the swizzle method in that thread? did you see the source code responsible for that error?\n. can you please try with the latest build and report back if the same error occurs?\n. where does it crash? what does the app do at that time? can it be reproduced in the sample project?\n. @huangguiyang are you still having these crashes \n. closing this. please reopen if you have troubles again\n. as i explained here as well this is not possible if the response headers of the url is not an image.\nthe url's you provided are not valid for image downloading. the link from google drive does not even have permissions to access.\n. there might be issues with the code you have pasted. In the completion block of the sd_setImageWithURL... you have an else statement which does not belong there...or you have forgotten some code on top of that.\nanyway...can you replicate the bug using the demo project? \nPlus make sure the urls (small & big as you say it) as different for every image.\n. you can use the downloadImageWithURL method of the SDWebImageDownloader or if you are in a cell you can use the sd_setImageWithURL method\nthe image can be retrieved from the completion block of the methods\n. :+1: \n. sounds indeed like a case of reusable cell issues. make sure you are applying the image to the correct imageview in the completion block because it might get reused while scrolling\n. check this https://github.com/rs/SDWebImage/pull/702\nanimating the appearing image is outside the scope/purpose of this library. Thanks\n. can you reproduce it with the demo project using your own image urls?\n. does this happen to all gif images or to specific ones?\n. do you have sample images that produce this console warning? \n. as far as i understand this is an issue with some images and it has to do with the way they were created/edited etc. \nsince this is not a crash, rather than a warning i will close this for now. if you have more info please reopen\nthanks\n. thanks for the pull request but thats out of the scope of this library. \n. unless @rs or @bpoplauschi have something in mind regarding caching anything NSData related, i think this library will stick to UIImage caching, at least for now.\n. something like this you mean? https://github.com/rs/SDWebImage/pull/514\n. closing this. :+1: \n. those 2 images in the demo fail to load. if you see the console log in your browser you will see that the images do not exist\n. number 9 image is this\nopen it with your browser...on the console of the browser you will see 404 error message. thats why the small image does not appear.\nthe details screen has this image\nthe difference in the 2 urls is that when you go to details view the url is replaces the small word with source, thus another image. Thats why the source url works. The small url has 404 error message thats why you do not see the thumb\ncheck the sample code please\n. @timkoma i remember i tried your code and i had some issue when several urls where not downloading at all while scrolling.\n. @timkoma no i do not have anything as all my tests were made in a private app i was working back then. \nWhat you could do, if you have some free time, is to cleanup all the commits here and rebase into a new pull request so we can retry it, as these changes here are not easily debugged/checked.\n. closing this. keeping https://github.com/rs/SDWebImage/issues/1192 \n. Just a reference for the image used in your git:\nIts size is 10.000 width x 10.000 height.\nSo for every pixel in an image 4 bytes are used. To calculate the memory:\nheight x width x 4 = total bytes in memory.\n10.000*10.000*4 = roughly 382MB\ncan you try with the latest build and use the advice @rromanchuk suggested and report back?\n. whats the resolution/size of the images you download? @zhangxiaolian1991 \n. of course the memory is high with this kind of image. to load this you will need to do other things.\nread this\n. for gif you can use this\n. can this issue be replicated in the demo project as well?\nyou can try and change the queue mode using SDWebImageDownloaderQueueMode\nSDWebImageManager.sharedManager.imageDownloader.queueMode = SDWebImageDownloaderLIFOQueueMode;\nAnd one more thing...can you try removing the SDWebImageHighPriority option and try again?\n. the code you entered is correct. that should be added in the viewdidload.\nhowever this should not be necessary since as you scroll the tableview the request for images that are not shown in view are cancelled and the new ones are added to the queue.\nDoes this happen on the example project as well? The example project has more than 100 images i think. can you try it there?\nif the issue does not occur on the example project what you could do is share a demo project with this issue so we can debug it further.\n. first of all when you use this:\nDemoTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"ItemCell\" forIndexPath:indexPath];\ni think you do not need to add this:\nif (cell == nil) {\n        cell = [[DemoTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@\"ItemCell\"];\n    }\nit takes care that for you!\nalso remove this:\nSDWebImageManager.sharedManager.imageDownloader.executionOrder = SDWebImageDownloaderLIFOExecutionOrder;\ni tried with those changes on device and simulator and despite some 404 links everything else is working fine. no problems at all. Of course sometimes the amazon S3 from previous experience takes some time to return the images from your request. \n. @heistings on the demo that code is not included anywhere...can you try the code with my changes above and let us know if it works for you....taking into consideration that the S3 might be slow :P\n. thats very weird....i do not have this piece of code in my download from https://github.com/dfing/myDemo\n. nope...i cloned the git and the viewcontroller does not have it there....so weird...\ni just saw the code online and indeed it has it there..but on my cloned copy its not\n. aha! i just saw that when i downloaded the code the commit https://github.com/dfing/myDemo/commit/23d3af646e4b6fee1a925e65282ce3d5f1eb747b \nwas not introduced. so thats why it was working for me\n. @dfing check this\nif you do not use the last part ... forIndexPath:indexPath then you should add the if (cell == nill) ...\n. for me its working fine...i cant seem to make it work like @heistings suggested. Did you?\n. @dfing please try with our suggestions and let us know if there is any other issue so we can close this :)\n. take into consideration that sometimes the s3 does not respond immediately\n. good luck with your app\n@heistings thanks :+1: \n. @swtlovewtt check this nice article and also this which can help understanding GCD\n. how are you adding the progressview?\ncheck this old commit\nand let me know if that works better for you\n. apparently its a custom method he wrote to add the progress functionality. \n@nandodelauni can you replicate this in the sample project?\n. @nandodelauni can you try your datasource on the sample project, without changing anything else, and see if the flickering still occurs?\n. @nandodelauni any news on this? did you try the sample project using your own datasource ? does it still flicker?\n. the image is cached and shown without blinking or flickering like you said in a collectionview either horizontal or vertical.\ni think uipageviewcontroller has a fade effect that makes the image blink on load. Consider adding your own transition effect to make that go away.\nNevertheless i do not think there is a problem with the library. if you find anything else please share\n. @tedyyu sorry for the delay. add this to a new line in the other linker flags\n$(inherited)\nnow it works :+1: \n@bpoplauschi maybe we should add it to the ReadMe as well\n. done \n. check this https://github.com/rs/SDWebImage/issues/971 for your webp issues.\nBasically you should clone the repository and add the missing files in your project\ncheck the documentation here\nfor available methods with progress\n. try cloning the repository using this \ngit clone --recursive https://github.com/rs/SDWebImage.git\n. @sahabe1 do you have any updates on this?\n. closing thins. if you need further help please reopen\n. the progress block depends on your server setup as well. if your server setup returns the size of each segment upload then you can use it to show download with percentage.\ntry and download the same image with chrome. \nif you see the a progress showing size downloaded and total size then please share either a link or a small demo so we can debug it\n. are you using the latest build?\n. i tried in the demo project and you are right on the fact that it calls the completion block 1st before showing the progress report when SDWebImageRefreshCached is set.\nif you remove the SDWebImageRefreshCached it works fine and reports progress before calling the completion block\n. from the comments inside the SDWebImagemanager.m line 163\nIf image was found in the cache & SDWebImageRefreshCached is provided, \nnotify about the cached image AND try to re-download it in order to let a chance\n to NSURLCache to refresh it from server.\nthats why you see a completion block 1st and then a small progress when you set the SDWebImageRefreshCached option\n. if there was a new image in the server then it should be downloaded.\nAfter the 1st completion block, the one that notifies you that the image exists in cache, the manager tries to re-download it again from the web in order to give NSURLCache a chance to refresh it from server.\nlogically it all depends on the headers you supply back as a response.\n. no worries. Productive criticism is welcome.\nIn your case since it hits 304, it does not re-download the image again as it has not been modified.\ni am using it without any issues so far to show progress but i agree that there are bits and pieces that need to be addressed.\nPlease if you find some time and have anything to offer, submit a pull request and we will be happy to take a look at it.\nClosing this.\n. @kentsheltongardner check with the latest build. \nSeveral useful error codes have been added to try and avoid adding urls in the failedurl list \n. similar to this? https://github.com/rs/SDWebImage/pull/1041\n. @mpdomas i tried your url in example from this library and got no crash.\nI used both the simulator and an iPhone6Plus. Are you using the latest build ?\n. i do not get a crash. with further inspection i get this:\nError Domain=SDWebImageErrorDomain Code=0 \"Downloaded image has 0 pixels\" UserInfo=0x7f8123f4ce70 {NSLocalizedDescription=Downloaded image has 0 pixels}\nbut still no crash.\nAre you using the latest build from this library?\n. this is actually used when calling the cleanDisk method which removes all expired cached images from disk.\nit does not free up memory. Based on that property you can delete images from disk that have expired.\nI will close this issue. If you need further info please reopen \n. @ryanmeador memory & disk caching is enabled by default. \nyou can use SDWebImageCacheMemoryOnly option to disable the disk caching and leave only memory caching\nif you need further info regarding this question please reopen\n. @patniemeyer \nthis is used to download and cache image async\nthis only downloads the image\nYou are right the docs are not clear enough on some issues. \nYou can see here and here\nhow to clean the cache (memory and disk)\n. @wesj check this\ndoes it help you?\n. @sgtsquiggs thanks for your contribution.\nActually this method is discussed here and its definitely in some issues related with memory pressure in SDWebImage.\nHowever according to the author of that article the performance decreased when immediate caching was set to YES. \nDid you see different results in your tests in either IOS 7 or IOS 8?\n. closing this as this decoding method does not produce any significant results. thanks for the pull though\n. @githubdbbest i edited your post so everyone can visualize the code better\n. @githubdbbest if you check the option SDWebImageDownloaderIgnoreCachedResponse on the SDWebImageDownloader.h file you will see the image & data are set to nil on purpose when the image is read form NSURLCache\n. @sekmo\nif i understand you correctly you want something like this:\n- (UIImage *)imageFromDiskCacheForKey:(NSString *)key;\nor\n- (UIImage *)imageFromMemoryCacheForKey:(NSString *)key;\nthese methods will simply return the UIImage for a specific url\nclosing this. please reopen if thats not the case\n. The image must be downloaded first so it can be cached.\nOr you can cache it manually\nPlease check documentation for more details \n. closing this as its a matter of opinion. thanks\n. check https://github.com/rs/SDWebImage/pull/1108\nplease correct the issues i describe in the above pull request and resubmit a new one with both changes if you want\nthanks\n. @muer2000 \nwhy didn't you make a pull request with both changes in h & m files together?\nPlus i think on this one you have  withCompletion:(SDWebImageNoParamsBlock)completio;\nand on the m file you have withCompletion:(SDWebImageNoParamsBlock)completion\nmissing the n char from completion in your h file method declaration\nplease fix and resubmit if you want\n. @levieggert \ni just tested with an image that has orientation UIImageOrientationRight and uploaded it to a server online. I tried that image and SDWebImage caches that image and keeps that orientation. The image in memory is still  UIImageOrientationRight and the imageview shows it correctly.\nWhen suspending the app and trying again the lib takes the image from disk like you said and still the image's orientation is UIImageOrientationRight and the imageview shows it correctly.\nwhat i suspect is this:\nwhen you manually cache the image using the storeImage:image forKey.... method the recalculate property is set to YES by default, whereas when downloading and caching the image automatically the recalculate is set to NO.\nwhat the recalculate does is that is reconstructs new data from the current UIImage with this:\ndata = UIImageJPEGRepresentation(image, (CGFloat)1.0); or this\ndata = UIImagePNGRepresentation(image);\nsomething which strips the EXIF from the image, thats why you get the UIImageOrientationUp when retrieving it from disk.\nCan you try and cache the image using the following method and pass NO for recalculateFromImage.\nYou should pass the data as well:\n- (void)storeImage:(UIImage *)image recalculateFromImage:(BOOL)recalculate imageData:(NSData *)imageData forKey:(NSString *)key toDisk:(BOOL)toDisk\nand see if it works for you?\n. when saving with UIImagePNGRepresentation the EXIF metadata are stripped. \nSDWebImage checks to see if the original image is a png and then uses the appropriate method to save it to disk.\ngenerally PNG images do not keep orientation info inside as far as i know.\nSo in your case you should use the method like i told you with recalculate set to NO so you can save the JPG with initial metadata.\nif you need more info please reopen\n. @bpoplauschi merging this. \n. you can  manually save the new image for the same key [url] using the storeImage...forKey... method\n. @troypayne are you talking about the prefetcher?\n. check this https://github.com/rs/SDWebImage/pull/1106\n. i do not know if swift is causing this or not but since the actual logging is taking place in 3 lines i think you can manually comment them for now\n. @tfonfara can this be of any assistance\n. until its merged you can copy paste the code you need\nluckily its not that big of a change\n. @Janrin this is a console warning right?\n. no we do not have something concrete yet. Can you try this?\nhttps://github.com/rs/SDWebImage/pull/1015\n. can you share the image that produces the warning?\n. i did not get a warning from that\n. yeap..this one does the trick and throws the warning. until we find a solution for this do not worry about it as it is just a warning\n. just a reference for anyone interested \n. @Janrin \ncan you replace the method \n+ (UIImage *)decodedImageWithImage:(UIImage *)image {\nwith the one below and test again?i am seeing the image in my tests now without warnings.\n```\n+ (UIImage )decodedImageWithImage:(UIImage )image {\n    if (image.images) {\n        // Do not decode animated images\n        return image;\n    }\nCGImageRef imageRef = image.CGImage;\n\nCGImageAlphaInfo alpha = CGImageGetAlphaInfo(image.CGImage);\nBOOL anyAlpha = (alpha == kCGImageAlphaFirst ||\n                  alpha == kCGImageAlphaLast ||\n                  alpha == kCGImageAlphaPremultipliedFirst ||\n                  alpha == kCGImageAlphaPremultipliedLast);\n\nif (anyAlpha) { return image; }\n\nsize_t width = CGImageGetWidth(imageRef);\nsize_t height = CGImageGetHeight(imageRef);\n\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                   height,\n                                                   8,\n                                                   0,\n                                                   CGImageGetColorSpace(imageRef),\n                                                   kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\n\n// Draw the image into the context and retrieve the new image, which will now have an alpha layer\nCGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);\nCGImageRef imageRefWithAlpha = CGBitmapContextCreateImage(context);\nUIImage *imageWithAlpha = [UIImage imageWithCGImage:imageRefWithAlpha];\n\n// Clean up\nCGContextRelease(context);\nCGImageRelease(imageRefWithAlpha);\n\nreturn imageWithAlpha;\n\n}\n``\n. :+1: \n. @ClegeJJ download the latest version of this library. i tried the demo project with your url and it works fine\n. @A1314  and everyone else having the same issue please download the latest version of the library and try again\n. @swl367 instead of using a temp image to get the caching working why dont you use the methoddownloadImageWithURLfrom SDWebImageManager \nor even thedownloadImageWithURLof theSDWebImageDownloader`\nto get the images & cache them?\ndid you check if the urls are unique for each tile image?\n. closing this. if you need more info please reopen\n. @archfear have you been using this with success?\n. thanks...lets see how this goes :+1: \n. try and clone the repository using git clone --recursive https://github.com/rs/SDWebImage.git\nthen add the files UIImage+WebP.h & UIImage+WebP.m manually in your project\n. :+1: \nthank you for the guide. this can help others \n. @OlegAnghelov i would suggest you start by cloning the repo and then adding the files UIImage+WebP.h & UIImage+WebP.m manually in your project\ncheck if this works first\n. Please try the below steps. I just used the demo project and i got the files just fine. \ngit clone --recursive https://github.com/rs/SDWebImage.git\npod install inside Tests folder\nopen SDWebImage.xcworkspace\nchoose WebImage target & build\nopen derived data and get WebImage.framework\ndrag into your project\n#import <WebImage/UIImage+WebP.h>\n\n\n\n\n. @shiyingyan did you find the derived data folder?\n. @shiyingyan if you choose the SDWebImage+WebP target you can create the SDWebImage+WebP.framework\n. @jiekewei \npeople above,@willbin @jjepsen @lvpengwei, have mentioned that with 3.7.1 there is no issue. \nAre you sure you are having the same issue with v3.7.1?\n. @ppaulojr the empty image you are seeing is caused by something else which is discussed here\n1401 #1440 #1454  #1457 which is fixed by this https://github.com/rs/SDWebImage/pull/1496\n. In your prepareforreuse method change the image to nil\nwithout cancelling the operation\nOn \u03a0\u03b1\u03c1, 15 \u0391\u03c0\u03c1 2016 at 14:04, drakon notifications@github.com wrote:\n\nI think I have the same problem. Using version 3.7.5.\nWas testing lazy loading images in a table view. I figured that if an\nimage loaded, I scroll to another position in the table and back to the\nstart, the first image is replaced with an image from further down the\nlist. It's pretty easy to reproduce on my side when I slow down the\ninternet connection.\nI assume it has something to do with reusing cells and not correctly\ncancelling downloads. After I added this to the cell it didn't happen again:\noverride func prepareForReuse() {\n    super.prepareForReuse()\n    self.imageView.sd_cancelCurrentImageLoad()\n}\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1123#issuecomment-210416619\n. in objc\n\n```\n-(void)prepareForReuse\n{\n    [super prepareForReuse];\nyour_imageView.image = nil;\n} \n```\n. can anyone reproduce this on the latest version?. @jelenadj do you have a sample project we can look at?. @szuniverse there is no way to do this with this library. you can however add some code of your own and combine it with SDWebImage to make this work. for example play with the reachability code and when the network status changes to 'connected' you can fire up this lib to download your image.\nWill close this now since its not an issue with the library.\n. :+1: \n. can you share some code usage?\n. @praveencastelino \ni used the demo project and managed to replicate the issue you describe.\ni got another error because i enabled airplane mode before i begin to download the image\nNSURLErrorDomain Code=-1003 \"A server with the specified hostname could not be found.\" UserInfo=0x1702e1d00 {NSUnderlyingError=0x170059c80 \"A server with the specified hostname could not be found.\"\nthe url is added to the failedURL array because it satisfies the following:\nerror.code != NSURLErrorNotConnectedToInternet && \nerror.code != NSURLErrorCancelled && \nerror.code != NSURLErrorTimedOut\n@bpoplauschi do you think we should add the NSURLErrorCannotFindHost or NSURLErrorCannotConnectToHost to that check?\nIn my case the image url was added because the host could not be found as i had enabled airplane mode. What do you think?\n@praveencastelino of course this can be resolved if you add the SDWebImageRetryFailed as an option\na bit related https://github.com/rs/SDWebImage/pull/1111\n. @bpoplauschi any updates?\n. i used the demo project to add a large image url in the detail view controller and the placeholder image showed correctly while the large image was loading. please beware that several large images from the demo project as not working. Add you own url to test \n. closing this. if you find that its still an issue please reopen\n. you can use the SDWebImageRefreshCached option\nthe caching is based on the url\n. closing this. if you need further assistance please reopen\n. @pr1001 \nhave you modified the code to use protection on the cache image files generated by SDWebImage?\nThis library does not encrypt data while saving.\nThe backgroundCleanDisk calls cleanDiskWithCompletionBlock which enumerate all of the files in the cache directory and:\n1. Removes files that are older than the expiration date.\n2. Stores file attributes for the size-based cleanup pass in order to delete when over the maxCacheSize\ni used the sample project to determine if it crashes when the device is locked. I tried it with & without a device passcode and the code went through the cleanDiskWithCompletionBlock without issues.\n. closing this. if you determine that the crash is caused by this library please reopen.\n. can this be of any help ?\n. closing this. if you need further assistance please reopen.\n. @SpongeBob-GitHub the sole purpose of this library is to cache files on memory and disk.\nBy any means you can create a category that uploads files and caches them on completion.\nThe enumeration should not crash when protected files are found.\n. did you clone the repo? use\ngit clone --recursive https://github.com/rs/SDWebImage.git\n. @WuKongCoo1 can you please elaborate? i am not sure i understand what you mean\nif you mean to clean the cache from a specific image file you can use the method below\n- (void)removeImageForKey:(NSString *)key fromDisk:(BOOL)fromDisk withCompletion:(SDWebImageNoParamsBlock)completion;\nclosing this. please reopen if you meant something else\n. closing this. https://github.com/rs/SDWebImage/pull/1085 has been merged\n. closing this as i cannot make any sense of it. please open a new issue and try to explain your problem so everyone can understand.\n. you can use this library in a swift only project. \n. closing this as i cannot make any sense of it. please open a new issue and try to explain your problem so everyone can understand.\n. closing this as i cannot make any sense of it. please open a new issue and try to explain your problem so everyone can understand.\n. so this can be closed then. @abuzar-amin-confiz thanks for the info\n. thanks for the contribution but there is this and this\n. having NSCachesDirectory as a fallback is indeed a nice touch. i will reopen so everyone can check it and use it if needed.\n. @pawelkata are you sure thats the line that causes the crash? because there is an if statement to check if imagesource is nil. Plus there is an if statement to check for empty dictionary property.\nWhat did the console log in your crash? Unless you are not talking about the UIImage+MultiFormat.m file\n. can you share the image that causes the crash?\n. Unfortunately it will not be an easy task determining the issue. If you let it crash can you please share the full console log with the error?\n. similar to https://github.com/rs/SDWebImage/issues/943 and https://github.com/rs/SDWebImage/issues/919\nthat is an issue with the metadata of the image. The warning in the console is coming internally from Apple's compiler.\n. As stated here https://github.com/rs/SDWebImage/issues/943 as well, the code stops when 'Exception Breakpoints' are enabled.\nIf you disable the 'Exception Breakpoints' the code will not crash. I am not sure there is something we can do at this point as the error comes from Apple's compiler, so its difficult to know whats happening under the hood.\n@ stackoverflow people are reporting that images with XMP metadata are causing the issue. Removing the would resolve the issue. \n. @houmie If you have adobe photoshop you can remove the XMP from there. \nOr if not you can download a free software either for mac or windows and strip everything out.\n. @A1314 its a warning not an error. This kind of warning is produced by Apple's compiler and has nothing to do with this library. check here\n. @instantflashback that section is deprecated. You can check the Releases section for downloads.\nHowever for the 3.7 you can build the library using the framework scheme.Check your derived data folder to retrieve the framework.\n. @jkblgithub feel free to provide assistance. My time is a bit limited\n. the image is just fine. open the demo project and remove all other images.\nadd this url and test. you will see that it loads just fine\nthat error you are getting means that one of your images is either corrupt or it has zero width/height\nplease use the demo project to troubleshoot and reopen if you find that there is something wrong with the library. thanks\n. i added all 3 urls and got no warnings at all when testing in simulator.\n\n\n. @stephanecopin why did you add this check \nNSFoundationVersionNumber <= NSFoundationVersionNumber_iOS_6_1 in your if statement?\n. @jstart this https://github.com/rs/SDWebImage/commit/60cab8b74cb59a79c69957368628c48a3f82a454 fixed this issue\n. Is your TestSavoDownloadOperation a subclass of SDWebImageDownloader?\nDoes your custom subclass override this:\n- (id)initWithRequest:(NSURLRequest *)request\n              options:(SDWebImageDownloaderOptions)options\n             progress:(SDWebImageDownloaderProgressBlock)progressBlock\n            completed:(SDWebImageDownloaderCompletedBlock)completedBlock\n            cancelled:(SDWebImageNoParamsBlock)cancelBlock\n. just tried that using a custom subclass on the demo project and its working fine.\nSDWebImageDownloader *manager = [SDWebImageDownloader sharedDownloader];\n[manager setOperationClass:[TestImageDownloaderOperation class]];\nTestImageDownloaderOperation.h file\n```\nimport \n  @interface TestImageDownloaderOperation : SDWebImageDownloaderOperation\n\n@end\n```\nTestImageDownloaderOperation.m file\n```\nimport \"TestImageDownloaderOperation.h\"\n@implementation TestImageDownloaderOperation\n-(id)initWithRequest:(NSURLRequest *)request options:(SDWebImageDownloaderOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageDownloaderCompletedBlock)completedBlock cancelled:(SDWebImageNoParamsBlock)cancelBlock{\n // your own custom code\n}\n\n(void)done {\n    NSLog(@\"done...\");\n}\n@end\n``\n. fixed\n. the way this library works is by using the url of the image as a key to track the actual cached image.\nif you know the url of the wifi cached image before-hand then load that image as a placeholder in thesd_setImageWithURL` method. this way you will show the cached image while the other one is loading.\n. can you please write in English so everyone can understand what you asked?\nplease reopen when you have more info regarding your issue \n. something like this ? its has been merged\nPlease reopen if thats not the case. thanks\n. SDWebImage does not support OSX. you can add support if you want and send a pull request. Thanks\n. @lengmolehongyan if you clone the repository, then do a pod install in the tests folder and then open the SDWebImage.xcworkspace you will see that all 4 files you mention are there. Can you try that ?\nOr am i missing something else?\n. thanks @weibel \ni think this can be transferred in the google groups forum as stated above. If anyone finds something interesting please share \n. closing this...continue here https://github.com/rs/SDWebImage/issues/1154\n. @bpoplauschi i think he answered his own question regarding the size of the image before and after the decoding\n. how large are the images you download/cache?\n. add your images in the demo project that comes with this library so you can check if the issue still persists. if yes then we need to check the images. if not then there is something wrong with your project's code. really weird that 50kb images would cause an issue though.. \n. @DanisFabric any updates on this?\n. good luck :+1: \n. merging this. thanks\n. @joelchen i will revert this as the submodule libwebp commit is non existing.\n. i will reopen this and merge this as the previous had some issues.\nthanks\n. @mmjuns not its not a bug. the number show the max concurrent operations at any given time. check the sample code. it words just fine. i think there is an issue with your project.\nif you are not in the latest version please update first\n. can you try installing in an empty project and reply back?\n. then please check your project as the problem might be there.\n. @alwaystrong  what do you mean it has no effect? Can you try the demo project? Does it work there?\n. the error comes from a missing file in the libwebp library.\nPlease remove the target thats causing the issue (SDWebImage+WebP) and then add the libSDWebImage.a as a link binary to the demo project. then try again. i have compiled successfully but i cannot test as i have not upgraded to El Capitan.\n\n\n\n. @alwaystrong any updates on this?\n. :+1: \n. @auibrian Actually to be honest it never crossed my mind to manually deal with cleaning the NSCachesDirectory. I always left it to Apple to do the dirty work. As far as the sharing of the cache folder between app & extension if anyone finds a definitive answer please share. \n. the only reason i can justify the use of that method is that it does not erase all data. \nProvides a bit more \"control\" over what is being cleaned up as It cleans files that are older than the expiration date & checks if the remaining disk cache exceeds a configured maximum size and removes the oldest files first. I guess Apple does a clean swipe of all files. This is a bit selective.\n. that image is of type image/webp and i think its what causing the issues as the code does not go through the correct if statement to use sd_imageWithWebPData\ni will investigate further later on\nEDIT:\nthe SDWebImage+WebP target is missing a couple of files in the compile sources & headers.\n. have you installed through cocoapods or by dragging the files in your app?\ni made a custom demo project and i added the library files in my app, plus the ones inside the libwebp/src folder.\nnow the image shows just fine\n. make sure the uiimage+webp.h/m files and the files inside libwebp/src folder are included in your project\ncheck this sample project with your image as a test url\n. why dont you reload that request again to show the complete image? I will close this as it does not seem to be a problem with the library.\n. if there is an error while you download the file the request will stop and the image will be nil.\ncan you check the completion block if the image is nil or not and whether there is an error there as well?\nif you still get no errors and the image is not nil then remove the SDWebImageProgressiveDownload from your options and try again. this way the image will show only when its complete\n. i tried the url in the demo project and it loads just fine.try it there and see if you get the same error\nuse the latest version of this library\n. i will close this one to avoid clutter. you can search with decodedImageWithImage for any open issues if you want. Try with the newest build and check the:\nshouldDecompressImages property of the SDImageCace & SDWebImageDownloaderOperation\nalso read this\n. @huoyi2000 why are you removing the imageviews and recreating them? and why do you download >3MB images on your tableview? in my opinion its wrong. download smaller thumbs and load the bigger ones when the user asks for them. Anyway...by design now SDWebImage cancels any request if another one with the same url occurs. We know of this issue, thanks\n. i agree with @bpoplauschi here. we do not know if the prefetch array is being enumerated while we add more urls to it. This will definitely result in a crash\n. @zigadolar there is an enumeration but you are right as its not removing any elements there. \nits only calling the startPrefetchingAtIndex method.\nMy concern is like you said, if by any chance you try to get a specific element of the array from within the startPrefetchingAtIndex method,  when in fact that index is out of bounds (if the prefetchUrl array has changed by the user)\n. @zigadolar makes sense. @bpoplauschi are you ok with this?\n. @bill350 you can use this\n- (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL; to apply any transformation you want before caching/showing the image.\nand for a fade effect read this\nhowever i like the completion block that you suggested. not bad.\n. it would be nice to give users the option to take control of the returned image in the completion block. \n@rs @bpoplauschi what do you think?\n. @bill350 sounds better yes! \n@rs @bpoplauschi ideas? \n. we should rename the option like @bill350 said. I think the SDWebImageAvoidAutoSetImage is good as suggested above. \n. @gclsoft try with the latest commit again. should be resolved\n. @joshuafeldman its failing because the image in one of the tests is causing a 404. thanks\n- FIXED\n. @genaks your problem sounds like a cell-reuse issue. Are you sure you reuse your cells correctly?\nPlease try to replicate the issue in the demo project\ni will close this. if you get more info please reopen\n. try to replicate it in the demo project please. Also make sure you have preparetoreuse method in your cell and there you should empty your imageview's image.\n. @starmier i cannot see this code in the library. What version are you using? Please try with the latest build\n. i will close this for now. please use the latest build and try again. if you still encounter issues please reopen\n. do you get any errors? Does the code pass by the completion block ?\nmaybe this has to do with it if you are solely targeting IOS 9. really i haven't had time to install the beta yet\n. :+1: \n. @unlucio why is it WebP? i see that the webp folder is lowercase in both disk and xcode group.\nare you talking about something else?\n. @bpoplauschi can you revert pls?\n@unlucio no worries :)\n. you can use the prefetcher to download an array of images without attaching them to imageviews\nexample:\nSDWebImagePrefetcher *prefetcher = [SDWebImagePrefetcher sharedImagePrefetcher];\n [[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:urlArray];\n. see my post above for sample code\n. it will try and prefetch every time. \nEverytime you call it, it will cancel any occuring prefetch before starting again\nYou should do this once, or you could create a method that will check which images exist in cache and prefetch the the ones that do not\nAlso to avoid the excess NSLogs you can define the SD_LOG_NONE macro\n. :+1: \n. you should not prefetch while in cellforrowatindexpath.\nbut if you have already prefetched images in another view or in your viewdidload then in your cellforrowatindexpath you could ask for that image directly from the cache and if its not there the use the setImageWithURL method\n. it does not work exactly like that. Because when you load your view the prefetch mechanism will not have finished downloading the images for the tableview to show. (especially if the images are 120 like you said).\nYou can use the setImageWithURL method directly from the cellforrowatindexpath without the need to prefetch anything. This will download, cache & display the image for you. You will not need to use prefetch at all.\nPlease check the example code that comes with the library so you can see how to use it.\n(several image links will not load as they are broken. But you will get the idea)\n. the prefetcher will help but you need to put it in another view and not in the view where the tableview is already downloading images to show while scrolling.\n. you said you want the user to be able to see the image without waiting for it to download. if you put the prefetcher in the viewwillappear and the sd_setImageWithURL in the viewdidload it might cancel eachother out. \nThe prefetch should happen in another view. not in the detail screen or the thumb screen in my opinion.\nThen in the detail view you can use the sd_setImageWithURL to get the already downloaded image.\nthats all.\n. ok..but the prefetcher should not be on the same view as your tableview.\n. ok then you are all set\n. i think we have analysed this a lot. what i would do is this:\nuse the prefetcher somewhere besides the tableview(thumbs) and the detail view(full image).\nthen in both those views you can use the setimageWithURL to get the cached image\n. you can check if the image exists in cache and if not then try to download it. \ncheck the SDImageCache.h for more info\nOr you can use this setImageWithURL to ask for the image and if the image is cached it will be shown without the need to redownload it\n. @perlasivakrishna  i modified your post so everyone can read the code properly.\nhow large are the images you load to your cells?\nif you are using the latest build there some new options to avoid the memory decompression issue.\ncheck this\n. resolution? dpi? Maybe its something of these two that causes the crash. Does it happen while scrolling fast? Can you try your datasource urls, with the demo project and see if it crashes there as well?\n. if the resolution of the images is high then you will surely get a memory related crash. make sure the resolution is small and the dpi is 72. also check this\n. did you try with these options:\nthe resolution is the width x height \nthe dpi means Dots Per Inch\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\n. the images above are 720x960 and 960x720 resolution.\ni think you should lower these down. The images should be the same as you cell keeping aspect ratio in mind. So around 250x....\n. you can use the code from this method:\n- (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL;\nto transform the image before caching it to disk. \nYou can scale the image down there if you want\nbut the best thing would be to already get a scaled down image from your server side code. This way you will not stress the app even more.\n. then have 2 images. one smaller one and one larger for full preview mode. but for thumbs you should for sure lower the resolution. Way less than 700x\n. Does the app run fine on the simulator or an iPhone 5/6/6P ?\nIs it a swift project?\nHow did you add the SDWebImage.framework in your project?\nCan you check if you have added it twice?\nYou might have a conflicting class in your project that has to be renamed\n. So you only face this problem in the iPhone 4S device?\nIn all other devices you do not have any issues?\n. @wodetian any updates on this?\n. can you check the url of the images that produce this console warning? find one and load it in your browser. does it load? please share a url\n. @cytryn any updates\n. @cytryn can you try your image on the demo project. i just tried it in the simulator and got no warnings at all.\n. you need to clone the repo\ngit clone --recursive https://github.com/rs/SDWebImage.git\nthen do a pod install in the tests folder.\nthen open the xcworkspace file\nthen remove all sample urls and add only yours and debug\n. are you using the latest code from this library? \nEDIT:\nby the way...why are you passing nil in the sd_setImageWithURL as you said in your post above? \nif you pass nil you are actually calling the method with a nil URL, which will not load anything.\n@cytryn use this:\n__weak __typeof(self)wself = self;\n    [cell.imageView sd_setImageWithURL:[NSURL URLWithString:[_objects objectAtIndex:indexPath.row]]\n                  placeholderImage:nil\n                         completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                             if(image) {\n                                 [wself.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];\n                             }\n                         }];\n. @livyathan i will take a look at it later on. thanks for reporting it\n. @livyathan \ntemporary solution:\ngo into SDWebImageDecoder.m and leave only this kCGBitmapByteOrderDefault on line 37\n. from a bit more research those images have kCGColorSpaceGenericGray which is unavailable on IOS CG_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_NA);\ni will try and implement a solution for these kind of images but until then you can remove the bitmap info i told you above and it will show the images\n. @livyathan can you replace the whole method decodedImageWithImage\nwith the one below?\ni am close to a final solution but please try this one and let me know\n```\n+ (UIImage )decodedImageWithImage:(UIImage )image {\n    // do not decode animated images\n    if (image.images) { return image; }\nCGImageRef imageRef = image.CGImage;\n\nCGImageAlphaInfo alpha = CGImageGetAlphaInfo(imageRef);\nBOOL anyAlpha = (alpha == kCGImageAlphaFirst ||\n                 alpha == kCGImageAlphaLast ||\n                 alpha == kCGImageAlphaPremultipliedFirst ||\n                 alpha == kCGImageAlphaPremultipliedLast);\n\nif (anyAlpha) { return image; }\n\nsize_t width = CGImageGetWidth(imageRef);\nsize_t height = CGImageGetHeight(imageRef);\n\n// default RGB\nCGColorSpaceRef RGBcolorSpace = CGColorSpaceCreateDeviceRGB();\n\n// current\n//CGColorSpaceModel imageColorSpaceModel = CGColorSpaceGetModel(CGImageGetColorSpace(imageRef));\n\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                             height,\n                                             CGImageGetBitsPerComponent(imageRef),\n                                             0,\n                                             RGBcolorSpace,\n                                             kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\n\n// Draw the image into the context and retrieve the new image, which will now have an alpha layer\nCGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);\nCGImageRef imageRefWithAlpha = CGBitmapContextCreateImage(context);\nUIImage *imageWithAlpha = [UIImage imageWithCGImage:imageRefWithAlpha];\n\nCGColorSpaceRelease(RGBcolorSpace);\nCGContextRelease(context);\nCGImageRelease(imageRefWithAlpha);\n\nreturn imageWithAlpha;\n\n}\n``\n. @livyathan thanks \nPlease let me know if it gets the job done :)\n. [PR](https://github.com/rs/SDWebImage/pull/1236) merged\n. @takdol check https://github.com/rs/SDWebImage/pull/1236\nas it has some updated code\n. with which version are you getting errors? if neither the code in this post above nor the code in this pull request https://github.com/rs/SDWebImage/pull/1236 fixes it for you then please share an image so i can test\n. @takdol\ncan you try that url in the demo project? i just tried it and i can see the thumbnail just fine\nplease use the latest commit.\n. @takdol  :+1: \n. open yourSDWebImageDecoder.m` and replace this [line 38]:\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                 height,\n                                                 CGImageGetBitsPerComponent(imageRef),\n                                                 0,\n                                                 (imageColorSpaceModel == 0 || imageColorSpaceModel == -1) ? RGBcolorSpace : CGImageGetColorSpace(imageRef),\n                                                 kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\nwith this\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                 height,\n                                                 CGImageGetBitsPerComponent(imageRef),\n                                                 0,\n                                                (imageColorSpaceModel == 0 || imageColorSpaceModel == -1 || imageColorSpaceModel == kCGColorSpaceModelIndexed) ? RGBcolorSpace : CGImageGetColorSpace(imageRef),\n                                                 kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\n. @A1314 if you put your urls in the demo project do you have the same issue? Please share the urls after you tried with the demo project and had the same issues\n. @A1314 i tried the urls in the json export you provided (the thumbnails only) and none give me the warning of 'invalid context...'. Please if you find the url try it on the demo project first and then share it here\nby the way you can use this to add the raw json and produce a readable text so you can extract the urls\n. :+1: \n. can you check using master ?\n. use this in the master branch\ngit clone --recursive https://github.com/rs/SDWebImage.git\n. i just tried it and it works just fine\nCloning into 'SDWebImage'...\nremote: Counting objects: 3514, done.\nremote: Total 3514 (delta 0), reused 0 (delta 0), pack-reused 3514\nReceiving objects: 100% (3514/3514), 3.91 MiB | 640.00 KiB/s, done.\nResolving deltas: 100% (2112/2112), done.\nChecking connectivity... done.\nSubmodule 'Vendors/libwebp' (https://chromium.googlesource.com/webm/libwebp) registered for path 'Vendors/libwebp'\nCloning into 'Vendors/libwebp'...\nremote: Sending approximately 15.76 MiB ...\nremote: Counting objects: 2496, done\nremote: Finding sources: 100% (2201/2201)\nremote: Total 15678 (delta 7449), reused 15642 (delta 7449)\nReceiving objects: 100% (15678/15678), 12.64 MiB | 538.00 KiB/s, done.\nResolving deltas: 100% (8708/8708), done.\nChecking connectivity... done.\nSubmodule path 'Vendors/libwebp': checked out '326b5fb863a43ab8cb225bca913e9025f727f078'\n. Hello\ncheck cleanDiskWithCompletionBlock method.  You will see that it takes into account the maxCacheSize\nthis method is called when this is called manually cleanDisk or when the app goes into background by this method backgroundCleanDisk\nyou can find this method in SDImageCache.m file\n. So you say that when you put the app in background or switch to another app and then open you app again, all images show the placeholder image? Check the demo project to see how the tableview best works and try to replicate the problem there. Maybe its a problem with reusable cells in your code\n. @prasathbabu maybe you are not reusing your cells correctly. I cannot provide more assistance if we cannot debug it properly. plus i do not know how IGGridview works under the hood.\nI will close this until we have more info to work with.\n. @AbelIngrand check this\nalso have you tried this:\ncell.imageView.contentMode = UIViewContentModeScaleAspectFit;\n. can you add something like this in your custom cell subclass?\n- (void)layoutSubviews {\n    [super layoutSubviews];\n    self.imageView.frame = CGRectMake(0,0,32,32);\n}\nof course change the imageview rect to your liking\n. can you try this instead of using a uiimageview?\n[SDWebImageDownloader.sharedDownloader downloadImageWithURL:your_image_url\n                                                    options:0\n                                                   progress:^(NSInteger receivedSize, NSInteger expectedSize)\n                                                   {\n                                                       // progression tracking code\n                                                   }\n                                                   completed:^(UIImage *image, NSData *data, NSError *error, BOOL finished)\n                                                   {\n                                                       if (image && finished)\n                                                       {\n                                                           // do something with image\n                                                       }\n                                                   }];\n. @kmiloaguilar are you having the same problem using markers or in another scenario? did you try the code in my post above?\n. which completion handler do you mean does not work?\nthe completion handler from:\n[SDWebImageDownloader.sharedDownloader downloadImageWithURL\nor from:\n[imageView setImageWithURL:imageURL placeholderImage:\nor both?\n. @kmiloaguilar  can you replicate it on the demo project?\n. can you go to SDWebImageCompat.m file and change this:\nCGFloat scale = 1; to this CGFloat scale = [UIScreen mainScreen].scale; line 31\ni think that the initial scale should be set to the current scale of the device just in case the image does not have a @2x or @3x \n@bpoplauschi can you check this as well? i think that setting the scale to 1 is wrong as we do not know if the images saved on disk have the @2x or @3x in their filenames\n. why do you change the device datetime? the images are removed because i think that the maxCacheAge might have passed.\nwhen you move the app to background this method runs backgroundCleanDisk\n. this will only happen when maxcacheage is reached. The default is 1 week. you can change that to your liking\n. @asifbilal-vteams i hope you are not using that same 2mb image as a thumbnail. if yes then thats why you are crashing. please use lower res images as thumbs and show the larger ones when the user asks for it. \nand use this to see if that makes any difference.\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\nif you search this repo you will see several posts regarding similar situations with crashes when large images are used as thumbs while scrolling \n. @asifbilal-vteams \nor you could use the this delegate method - (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL;\nand do any resizes you want there. \nThen this library will cache the smaller image right before showing it,\nbut then its up to you to download the bigger one and show it when the user wants.\n. the operation timed out when trying to clone the libwebp repository as i can see from your post. \nI tried it just now and it works just fine.\nCheck screenshot\n\n. isnt this the correct one? \nhttps://chromium.googlesource.com/webm/libwebp\n. @bpoplauschi \ni have added the following in my fork:\nfixes #391  -> option to cache only on Disk\nfixes #343  -> iCloud backup Option\nfixes #371  -> CGBitmapContextCreate: unsupported parameter combination\nfixes #576  -> scale set to screen scale\nfixes #1035 -> progress queue with dispatch_async\nnew feature -> activity indicator using auto layout\nif any of the above are of any interest let me know\n. @bpoplauschi  all the above are on my master branch as different commits. Do you want me to send you one pull request so you can pick what you want?\n. @bpoplauschi my time will be limited for the next couple of weeks as my wife just gave birth to my son and i want to spend as much time as possible with both of them. But i will do my best :+1: \n. @bpoplauschi all good? do you want me to merge?\n. :+1: \n. i had the same issue at some point and after the dispatch_async i never got that again. \nAt least in my case that fixed it. If you get any solid lead that this is caused by something else please share so we can fix it too.\ni think we should focus now on race conditions and the dispatch_sync & async you mentioned\n. i have it in my local git. will send a pull request shortly. i used \ndispatch_async(dispatch_get_main_queue(), ^{\n          //      ...progress callback\n            });\n. done https://github.com/rs/SDWebImage/pull/1218\nwaiting for travis\nmerge at your convenience\n. maybe there is a delay until the gif is fully loaded. if your gif files are large in size check whether the same thing happens with smaller size gif files\n. @renmoqiqi read this\n. please read [this]https://github.com/rs/SDWebImage/issues/945 \nwe are planning on replacing our GIF component with another one.\nclosing this as there is no need to add another GIF issue\n. @perlasivakrishna \nyou can use the shouldCacheImagesInMemory and set it to NO so you only use disk cache.\nyou should have small thumbs for your tableview/collectionview because if you try to scroll with large images you will eventually cause a crash.\nif you want in your case you can continue to use the SDWebImageDownloader and then save to cache in the completion block using this method below\n- (void)storeImage:(UIImage *)image forKey:(NSString *)key toDisk:(BOOL)toDisk;\n. this depends on your app's needs and how you have setup it up.\nSome people have 2 urls, others have 1 and do a resize and cache both \nIts something you decide. If this works for you then leave it as is but be careful when resizing very large images as this takes memory as well.\nYou can use the demo project to test all options before you migrate to something new. \ngood luck :+1: \n. you will need to be careful with cell reuse as this SDWebImageDownloader does not return the url in the completion block.\nwhy don't you use this: [cell.imageView sd_setImageWithURL....  and do any resize with this method:\n- (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL;\nby setting the SDWebImageManagerDelegate delegate to the class responsible for the resize?\nThe cached image will be the resized one.\nAlso do not forget to use the shouldCacheImagesInMemory option if you want to cache only to disk.\nplease use the demo project to test whatever configuration suits your needs\n. :+1: \nuse your own urls there as the ones on the demo project are not all working\n. @dami7786 please use the latest commit. i just tested it and it works fine\n. @AzenXu you can check the completion block of the sd_setImageWithURL method and if the image is nil or the error is not nil then add your own image there. But i do not think there is a need for a new method.\n. @wenxp most of these commits already exist in our current build. closing this\n. @wenxp as i stated in your previous pull request these commits already exist in our current build. \nclosing this\n. @songdh go to the method you mentioned and change this in line 38\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                 height,\n                                                 CGImageGetBitsPerComponent(imageRef),\n                                                 0,\n                                                 (imageColorSpaceModel == -1 || imageColorSpaceModel == 0) ? RGBcolorSpace : CGImageGetColorSpace(imageRef),\n                                                 kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\nto this\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                 height,\n                                                 CGImageGetBitsPerComponent(imageRef),\n                                                 0,\n                                                 (imageColorSpaceModel == -1 || imageColorSpaceModel == 0 || imageColorSpaceModel == 5) ? RGBcolorSpace : CGImageGetColorSpace(imageRef),\n                                                 kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\nand it will work\n. with the url you provided i do not get this error using the revised code i told you\n. sorry but i cannot replicate this error with the url you provided.\ni am trying this url\nand i have replaced the code from line 38 in the decodedImageWithImage method with the one below and it works\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                 height,\n                                                 CGImageGetBitsPerComponent(imageRef),\n                                                 0,\n                                                 (imageColorSpaceModel == -1 || imageColorSpaceModel == 0 || imageColorSpaceModel == 5) ? RGBcolorSpace : CGImageGetColorSpace(imageRef),\n                                                 kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\nif you continue to have issues then upload a demo project so i can check it out\n. In both of your demos i get the console messages you told me.\nNow the weird part is this. Download the demo project of this library and replace all urls in the masterviewcontroller with only this one\nthen run the demo. You will see that the image is downloaded successfully in both views.\nCan you test that please?\nBy the way, the colorspacemodel for this image is kCGColorSpaceModelUnknown which i do not have much info\n. share some image urls. do you use the latest version?\n. the code above is not the latest one. try this one:\n```\n+ (UIImage )decodedImageWithImage:(UIImage )image {\n    // do not decode animated images\n    if (image.images) { return image; }\nCGImageRef imageRef = image.CGImage;\n\nCGImageAlphaInfo alpha = CGImageGetAlphaInfo(imageRef);\nBOOL anyAlpha = (alpha == kCGImageAlphaFirst ||\n                 alpha == kCGImageAlphaLast ||\n                 alpha == kCGImageAlphaPremultipliedFirst ||\n                 alpha == kCGImageAlphaPremultipliedLast);\n\nif (anyAlpha) { return image; }\n\nsize_t width = CGImageGetWidth(imageRef);\nsize_t height = CGImageGetHeight(imageRef);\n\n// current\nCGColorSpaceModel imageColorSpaceModel = CGColorSpaceGetModel(CGImageGetColorSpace(imageRef));\nCGColorSpaceRef colorspaceRef = CGImageGetColorSpace(imageRef);\n\nbool unsupportedColorSpace = (imageColorSpaceModel == 0\n                              || imageColorSpaceModel == -1\n                              || imageColorSpaceModel == kCGColorSpaceModelIndexed\n                              || imageColorSpaceModel == kCGColorSpaceModelCMYK);\nif (unsupportedColorSpace)\n    colorspaceRef = CGColorSpaceCreateDeviceRGB();\n\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                             height,\n                                             CGImageGetBitsPerComponent(imageRef),\n                                             0,\n                                             colorspaceRef,\n                                             kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\n\n// Draw the image into the context and retrieve the new image, which will now have an alpha layer\nCGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);\nCGImageRef imageRefWithAlpha = CGBitmapContextCreateImage(context);\nUIImage *imageWithAlpha = [UIImage imageWithCGImage:imageRefWithAlpha];\n\nif (unsupportedColorSpace)\n    CGColorSpaceRelease(colorspaceRef);\n\nCGContextRelease(context);\nCGImageRelease(imageRefWithAlpha);\n\nreturn imageWithAlpha;\n\n}\n```\nthe only difference this code has with the latest version here is the check for CMYK colorspace\nWith this code all your links work\n. remove the app and try again...if you want add only the above 3 urls in the demo project and replace the code in the SDWebImageDecoder with the one i posted above.\n. you could use the option SDWebImageRefreshCached\nunless you mean something else\n. either use the the option i stated above or delete the image in cache using the removeImageForKey method before you make another request for that url.\nif you still need assistance let us know\n. @luoyibu for your fps question you can connect your device to XCode and open instruments and select Core Animation.\n. @daqiangge @rcodddow are you using the latest version of this library. there was a commit a couple of days back that was to correct some of those issues. Usually what this error means is that we are trying to create a bitmap context using wrong parameters because of unknown colorspace. \n. please try this first and if this does not work share an image thats causing the issue\n. closing this. if you still encounter issues let us know\n. based on comments closing this\n. you can use this SDWebImageRefreshCached option to always refresh the cached images\n@bpoplauschi :+1: \n. @Agenric download the latest version as there have been changes in that area. if still you encounter issues provide a link to an image that produces this error\n. closing this. if you still need help please let us know\n. unless you are using this SDWebImageCacheMemoryOnly i cannot see any other reason why data is nil. \n. if you log the cacheType on the completion block what does it say?\n. 0 is for SDImageCacheTypeNone\n1 is for SDImageCacheTypeDisk\n2 is for SDImageCacheTypeMemory\ni think SDWebImageDownloader does not cache images. SDWebImageManager does\n. on the completion block you can manually call the\n- (void)storeImage:(UIImage *)image forKey:(NSString *)key toDisk:(BOOL)toDisk;\ncheck SDImageCache.h file\n. thanks. good luck with your app :+1: \n. check this\n. @crarau i cloned your repo and did a pod install and everything is working fine. The project compiles and runs just fine. Is there a step i am missing?\n. i was using 0.38.0 and i had no issue. i updated to 0.38.2 and indeed there is an issue. thanks for reporting\n. @crarau i fixed it by replacing this:\n#import \"webp/decode.h\"\nwith this\n#import <libwebp/webp/decode.h>\n. can you please be more specific? this does not help at all. are you using the latest version of this library? can you provide the crash log? can you replicate it in the demo project?\n. @nishan-guiddit are you using the latest version? can you try the url of your images with the demo project and see if it crashes there as well? \n. @XCGit \nAre you using the latest version? Can you replicate the issue in the demo project using your urls?\n. @nishan-guiddit download the latest version of this library and replace the files you use with the newer ones.\n. i will close this one. if you still face issues please reopen\n. @Hin-D kCGColorSpaceGenericCMYK is only available on Mac OSX. trying to find a solution for this.\n. @Hin-D a temporary solution would be this from line 38:\ngo to the SDWebImageDecoder.m file and replace this:\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                 height,\n                                                 CGImageGetBitsPerComponent(imageRef),\n                                                 0,\n                                                 (imageColorSpaceModel == 0 || imageColorSpaceModel == -1) ? RGBcolorSpace : CGImageGetColorSpace(imageRef),\n                                                 kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\nwith this\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                 height,\n                                                 CGImageGetBitsPerComponent(imageRef),\n                                                 0,\n                                                (imageColorSpaceModel == 0 || imageColorSpaceModel == -1 || imageColorSpaceModel == kCGColorSpaceModelCMYK) ? RGBcolorSpace : CGImageGetColorSpace(imageRef),\n                                                 kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\n. closing based on comments above\n. @victorBaro can you check using the latest version if you encounter the same issue?\neither using 3.8 or the 4.x branch\n. i do not have it installed as its in beta . What seems to be the problem with XCode 7 and SDWebImage?\n. its not this library that causes the issue\nmore here and here and here\n. @holgersindbaek check the links above. \n. @holgersindbaek i think both the links i provided, excluding the Apple one, provide solutions.\nthe stackoverflow one provides a solution on the 2nd answer. The other does the same thing but explains why you should pay attention to something like this. If you need more assistance i am sure someone here will assist you if you are patient.\n. no worries. if you encounter issues with any of the solutions please reply back and hopefully we can work it out. :+1: \n. how are you installing the library? follow the steps shown here\n. did you add the $(inherited) flag like the installation notes suggest? Unless you are not using any other libraries like Parse,RestKit...\n. @ssddss the issue is with the failedUrl array being filled when it shouldn't.\nthis fixes it.\nI just tested with your scenario and it works fine.\nwaiting for merge :+1: \n. @KittenYang you can use the \n- (NSString *)cachePathForKey:(NSString *)key inPath:(NSString *)path;\nto get the disk cache path \n. for me this works:\nSDWebImageManager *manager = [SDWebImageManager sharedManager];\n        [manager downloadImageWithURL:self.imageURL\n                              options:SDWebImageHighPriority\n                             progress:nil\n                            completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n            if (image) {\n                NSString *key = [manager cacheKeyForURL:imageURL];\n                NSString *source = [manager.imageCache defaultCachePathForKey:key];\n                NSLog(@\"%@\",source);\n            }\n        }];\n. closing this. if you encounter issues let us know\n. @takdol are you using the latest version? several changes have been made regarding this issue\n. go to SDWebImageDecoder.m and replace this:\nbool unsupportedColorSpace = (imageColorSpaceModel == 0 || imageColorSpaceModel == -1 || imageColorSpaceModel == kCGColorSpaceModelIndexed);\nwith this:\nbool unsupportedColorSpace = (imageColorSpaceModel == 0\n                                  || imageColorSpaceModel == -1\n                                  || imageColorSpaceModel == kCGColorSpaceModelIndexed\n                                  || imageColorSpaceModel == kCGColorSpaceModelCMYK);\n. closing this. please reopen if you still have issues\n. @ibnusina can you try the url in the demo project using the latest version?. @VikasPrajapati27 please try the url of the image you are facing a problem, with our latest demo project. download the latest version and try again. its working fine on my end\n. @MohamedSaad check this method.\nit removes files that are older than the expiration date & if remaining disk cache exceeds a configured maximum size it deletes the older files first.\nthe cleanDisk method is called when this notification is received UIApplicationWillTerminateNotification & UIApplicationDidEnterBackgroundNotification\nthe mem cache on the other hand is cleared when this is notification is received: UIApplicationDidReceiveMemoryWarningNotification\ncheck this if you want a custom cache path\n. @cristi1900 the code that checks whether the url should be added to the failedUrl array is here\nare you testing with the latest version?\nbecause i see that if the error is NSURLErrorNotConnectedToInternet the url is not added to the failedURL array\n. thanks for the report. if you have a fix please submit a PR\n. waiting for https://github.com/rs/SDWebImage/pull/1297\nit has much cleaner implementation on failedUrl handling\n. @fjorn this is from UIImage+WebP.h file.\nhave you added the file twice? how are you installing the library?\n. visual studio in windows? i thought coding from visual studio was still in beta...\nsorry i cannot help you in this as i have no knowledge of adding the library from visual studio.\ni can only guess that visual studio did not exactly clone the repository with all the dependencies.\ni will close this issue as it seems its not a problem with the library, rather than an issue with how visual studio installs components(libraries).\nif you have any more details please share\n. best of luck :+1: \n. @sushipan the error code for this url is:\nError Domain=NSURLErrorDomain Code=403 \"The operation couldn\u2019t be completed. (NSURLErrorDomain error 403.)\"\ni tried with another image with comma in the filename and i got no errors.\n. @sushipan check this \n. @rraghul you can replicate it in the demo project with your urls?\n. no need to share...just use the urls in the demo project and test again. the demo project uses a tableview. I am only asking this because what you are describing is a fundamental feature and everyone would have the same issue. Are you sure you are not having cell re-use issues with your collection view?\nDo you nullify the image on your prepareForReuse method in your collectionviewcell subclass?\n. @rraghul any updates on this?\n. @cristi1900 i think https://github.com/rs/SDWebImage/pull/1297 is a nice solution without messing with IOS versions. \n. @zhangyicococo to make that change we need to see the code behind the UIImage+FixOrient.m\" file \nAs i can see thefixOrientation``` method exists in a new category\nWhats is the problem you are facing with the existing setup?\n. closing this. if you have more info please reopen\n. it can be done. check this\n. how did you install the files? did you just copy them to your project?\nwhats the error you are getting exactly?\n. can you replicate it in the demo project? i tried to build the demo project for device and it has no issues\n. you are building the framework WebImage and not the demo project\nBut thats not the issue. I tried that as well and it works fine on my end.\nPlease download the latest version of the library and run pod install on the Tests folder\nthen open the SDWebImage.xcworkspace and try again.\n\n\n. the 'no known class method for selector' means that the compiler cannot find the sharedApplication method to run. are you using the latest version of the library?\nEDIT: i created a new empty project and downloaded SDWebImage without cocoapods. I dragged the files in the project and tried to archive the project. no errors at all.\n. closing this. if you still face issues please reopen\n. @Crementae \nthe sd_setImageWithURL is asynchronous which means the code will continue beyond this method without waiting for the actual image to download. You can use the sd_setImageWithURL:placeholderImage:options:completed method and do what you need in the completion block\n. you could use the code below to know when the image has finished downloading and adjust your code logic based on that. if still you have issues please upload a demo project so we can check it out.\n[thumbnail sd_setImageWithURL:URL\n                      placeholderImage:PLACEHOLDER\n                               options:OPTIONS\n                              completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n// This is the completion block of the method. \n// When this is called it means that the image has finished downloading\n                              }];\n. please give it a shot first and if you do not succeed then post the project so everyone can have a look and help.\n. you do not need this to display the image\n[thumbnail setImage:image];\nplease upload a demo project so everyone can test\n. 1st of all currentMarker.thumbnail should be NSString or NSUrl not an NSArray.\n2nd you are loading large images to use as thumbnails. You need to use smaller resolution for thumbnails.\nAccording to google maps documentation:\nThe info window is rendered as an image each time it is displayed on the map. This means that any changes to its properties while it is active will not be immediately visible. The contents of the info window will be refreshed the next time that it is displayed.\nIssue discussed here\ni also tried this workaround  and this which also did not work.\ni will close this issue as this is not a problem with the library, rather than an issue with google maps framework\n. @bpoplauschi @rs what do you think? is it ok to merge?\n. @cristi1900 does this work for you?\n. @developforapple please read #945 \nwe are planning on replacing our GIF component with another one.\nclosing this as there is no need to add another GIF issue.\nthanks\n. @ghazel #967 talks about adding a filename extension to the cached file. \nLine 233 in SDWebImageManager shows that the storeImage is called before the completion block. And for the completion block we use sync not async\n. missed that, you are right indeed! Can you propose a solution for that?\n. Both ways are fine since the queue is serial but i would add a completion block to the storeImage. @bpoplauschi what do you think?\n@ghazel can you test your solution above to your existing problem and let us know if that worked for you\nHowever SDWebImageManager does not have access to ioQueue. Exposing it does the trick.\ndispatch_async([SDImageCache sharedImageCache].ioQueue, ^{\n    dispatch_main_sync_safe(^{\n        if (!weakOperation.isCancelled) {\n            completedBlock(downloadedImage, nil, SDImageCacheTypeNone, finished, url);\n        }\n    });\n});\n. can you replicate using the sample project? \n. sorry i am a little bit confused. You experience issues only in IOS 9? Does it work in IOS 8?\nThe cache files are saved to disk using the MD5 of the url as a filename. So how do you mean duplicate disk cache? \nplease upload a demo project we can use to replicate the issue.\n. the docs have nothing to do with this lib. these are just log files \n. :+1: \n. SDWebImageRefreshCached always calls the server to get a new copy if any. check here.\nThe completion block is fired and then the code continues thats why you get a cached one and then a newer one\n. @serkrapiv as i see here the code checks for a 304 status code. In your sample i always get a 200 thats why it returns twice.\nA nice solution would be to check the Etag or the Expires property in the header to see if the file has changed or not.\nHowever this would also mean that we would need to keep that for each file as well.\nWhat do you think?\n. @initlifeinc can you send a pull request with the check for then empty url only?\n. @mitchellporter \nsd_setImageWithURL only downloads the image once and then caches it. On the second request it asks for the image using queryDiskCacheForKey which checks memory and disk and then returns that without performing the online request (unless stated otherwise in options)\nsd_setImageWithPreviousCachedImageWithURL internally calls sd_setImageWithURL but has an issue #793 \n. @funkyLover can you replicate it in the demo project? \nPlease download the latest version of this library.\nalso you should __weak your imageview to use it inside the block again\n. did you try to replicate it with the demo project?\n. can you replicate it with the demo project and IOS 9?\nunless its an auto-layout issue of your project then its a bug this library has been having for quite some time. Check this\n. @MickeyHub is this console log coming from trying the demo project?\n. @MickeyHub \nthis error means that you are trying to update something in the UI from a background thread.\nif you are updating UI you should do it like this\ndispatch_async(dispatch_get_main_queue(), ^{\n    // update the UI\n    // layoutIfNeeded now\n});\nThis library has a demo project you can try. \n. the code i wrote is not IOS 9. I am just saying that if you update anything regarding UI you should do it inside the block code i wrote otherwise it will produce undesirable results. Since i do not know what is your code you should try your urls in the demo project. If it does not crash there then its an issue with your project\n. yes the general practice is that all UI modifications should happen on main thread.\n. @masterfego \n1 - The maximum size of the cache, in bytes.\n2 - IOS will delete the content of caches when memory is low\n3 - the lib SHOULD clean whichever folder you declare as your cache folder\n. there is no default value for this. you should add one if you want\n. can you try and replicate in demo project?\n. @cherpake any updates on this?\n. @cherpake thanks :+1: \n. are you using it in a tableview? can you replicate in the demo project?\n. i meant you should try your urls in the demo project of the library. \nGenerally in a tableview you can use the sd_setImageWithURL method which will set the image automatically on the imageview. Check the sample project.\nWhat do you mean by speed? If the image is large in size then it will delay showing until its fully downloaded.\n. if you want to scale an image and cache the scaled image instead you can use this method. \nWhat it does is that it allows to transform the image immediately after it has been downloaded and just before to cache it on disk and memory.\nAs i said before if the image is large in size then it will delay showing until its fully downloaded.\nUnless there is a problem with the library i will close the issue.\n. When you choose to add files to an existing project a dialog appears that lets you choose which files you want to add. There you can choose the SDWebImage.framework which you can either download from here or generate your own by building the library and choose that.\nclone the repository.\ndo a pod install in the Tests folder.\nWhen the pod installation is done open the SDWebImage.xcworkspace\nbuild the SDWebImage Demo to test or choose the SDWebImageFramework to produce a framework to add to your own app.\n. does this happen with all images or with gif only?\nshare the url of the images so everyone can have a go\n. @Farhaddc this specific image has no exif metadata for orientation. I tried several online tools as well and no orientation key exists inside the EXIF metadata.\nSo SDWebImage in this method sd_imageOrientationFromImageData when it tries to get the orientation it returns UIImageOrientationUp which is the default one as no kCGImagePropertyOrientation is found inside the image. \nSo there is no way to know which way is up. \nHowever i tried twitter and the image is showing wrong there as well!!\n. @superdev89 which version of the library are you using? Are you loading the gif using FLAnimatedImage object?. I am sorry but i cannot understand what you are saying.\nwhy are you putting everything in s low priority queue? This is what might be causing the issues.\nTo install the demo project:\nClone the library in a folder and then open the SDWebImage.xcworkspace file with the SDWebImage demo project scheme\n. as i told you in my previous comment please see the demo project for example on how to use this lib in a tableview scenario\n. The pod file is in the tests folder.but all you need to check is the code on the master & details view controller\n. you should not use large images as thumbnails. Because if you have multiple requests/cells at the same time and each request is for an image larger than 1 MB then the user experience will not be good as the thumbs will not load fast enough. In my opinion you should use smaller thumbs for the tableview and larger images on demand when the user wants them.\nif you see the demo project it only uses [cell.imageView sd_setImageWithURL:.... without the use of dispatch_queue_t.\nIf you use smaller images you will see faster response\n. thats an issue with your constraints. Please check your constraints set on your imageview or label\n. read this and this\nit has nothing to do with this lib\n. @bpoplauschi I did not know when you would be back and I tried to cleanup as much as possible.\nGlad to see you are back though!\n. try the prepareforreuse method in your tableviewcell subclass. you should nullify your image there\n. @nhatlee are you using any other external 3rd party framework?\nread this and let us know if it helped\n. i get that. i mean besides this library. did you check the link i gave you?\n. @nhatlee any updates?\n. check these build settings:\nPrecompile Prefix (GCC_PRECOMPILE_PREFIX_HEADER) = NO\nDebug Information Format (DEBUG_INFORMATION_FORMAT) = DWARF with dSYM\n. if you open the sample project does this issue occur there as well?\n. closing this. if you need further assistance please reopen\n. @qq6931850 The error is about: Downloaded image has 0 pixels\n. the image url is invalid. no image is found online [failed to load resource] - 404 error\ncheck sample project DetailViewController.m file for correct usage. \n. this is what i am seeing\n\n. @Piyush08 \n\n@dhruv-russmediatech \n\nall report 404 in the browser and this is coming from the app:\nError Domain=NSURLErrorDomain Code=404 \"The operation couldn\u2019t be completed. (NSURLErrorDomain error 404.)```\n. maybe its blocking countries or IPs. sorry maybe someone else that can see the image can help debug it. i would suggest to use the demo project that has an example in the viewdidload which works just fine and test from there\n. is this the image you are trying to access?\n\n. i debugged the issue and it seems to be triggering the following warning when CGBitmapContextCreate is running in SDWebImageDecoder.m file\nCGBitmapContextCreate: unsupported parameter combination: 16 integer bits/component; 64 bits/pixel; 3-component color space; kCGImageAlphaPremultipliedFirst; 8000 bytes/row.\n. add this in SDWebImageDecoder.m file:\nif (!context) {\n        if (unsupportedColorSpace){\n            CGColorSpaceRelease(colorspaceRef);\n        }\n        return image;\n    }\nafter this call:\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                                 height,\n                                                 CGImageGetBitsPerComponent(imageRef),\n                                                 0,\n                                                 colorspaceRef,\n                                                 kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\n. :+1: \n. @dengzhp can you try with the latest commits? this should be resolved\n. yes it does. use the same methods as you would with an http image.\n. the website prompts for a certificate acceptance\n. use this option SDWebImageDownloaderAllowInvalidSSLCertificates\n\n. if you remove this library's pod everything else works just fine?\n. Since it's not working even without this pod then it has something else to do with your pod/project, right?\n. @dimohamdy you should add the necessary keys into your project plist\nalso check here\n. can anyone have a go using the latest version?. @bmurmistro you can do all the transformations here while still using the sd_setImageWithURL method\n- (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL;\nmore info\n. apparently this commit breaks the prefetcher \n@bpoplauschi i think we should revert\n@eikemeier can you check #1366 ?\ni used the example and indeed the code hang\n. @WWLJ i have the latest version and it works fine without issues using your image.\nare you sure its that image thats causing the issue. tried it in simulator 8.4\nthe code stops here:\nif (anyAlpha) { return image; }\nas the anyAlpha is YES\n. is the image large in resolution or size?\n. That's a logical memory spike then.\nOn \u03a0\u03ad\u03bc, 29 \u039f\u03ba\u03c4 2015 at 17:11, Emanuel J\u00f6bstl notifications@github.com\nwrote:\n\nExactly. 4096 * 4096 pixels, jpeg.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1354#issuecomment-152209594.\n. Just a reference for the image used:\nIts size is 4096 width x 4096 height.\nSo for every pixel in an image 4 bytes are used. To calculate the memory:\nheight x width x 4 = total bytes in memory.\n4096 * 4096 * 4 = roughly 64MB\n. @bpoplauschi \nif i understand correctly what he means is that the right call is this:\n\n[self  sd_cancelBackgroundImageLoadForState:state] // Correct.\ninstead of this:\n[self sd_cancelImageLoadForState:state];  //Wrong:  for setImageWithURL\n. yes i know but in our file it has the wrong one.\n. it seems that the static library libAmazingPicturesIOS.a you have in your project does not contain the 64bit build. also why dont you use the latest version of this library?\n. maybe the library contains another version of SDWebImage that cannot be built with arm64?\n. svg images are not supported yet \n. @standers67 so the only difference is 1 url that makes the app hang? can you try it in the demo project and report back?\n. replace dispatch_apply line with this one:\ndispatch_apply(maxNumberOfImages/self.maxConcurrentDownloads, dispatch_get_global_queue(self.prefetcherQueue, 0), ^(size_t index) {\nthe last commit that addressed this apparently broke it\n@bpoplauschi we should revert this https://github.com/rs/SDWebImage/commit/92e38160d60f704a137dfd72c7bea0ea0474e26b\nas it hangs the prefetcher\n. no errors here! tested and working fine\ndispatch_apply(maxNumberOfImages/self.maxConcurrentDownloads, dispatch_get_global_queue(self.prefetcherQueue, 0), ^(size_t index) {\n    size_t i = index * self.maxConcurrentDownloads;\n    size_t stop = i + self.maxConcurrentDownloads;\n    do {\n        [weakSelf startPrefetchingAtIndex:i++];\n    } while (i < stop);\n});\n. @eikemeier any ideas why https://github.com/rs/SDWebImage/commit/92e38160d60f704a137dfd72c7bea0ea0474e26b commit hangs the code?\n. @eikemeier thanks for the info! \n@bpoplauschi what do you think? revert the commit and make the random changes @eikemeier posted or revert and rethink the whole thing?\n. @Shayanzadeh thanks for this :+1: \n. does this occur in the demo project as well?\n. are you using the latest version? i remember that we have made some changes regarding the blacklisting of urls when offline\n. according to this it should not add the url on the failedlist array\n. @bpoplauschi can you release 3.7.4 with that fix?\n. there shouldn't be any issues with this method. if you check the demo project you will see it works just fine (obj-c)\n. check this https://github.com/rs/SDWebImage/pull/1412\n. this is the error i am getting in the console while trying this url\nError Domain=NSURLErrorDomain Code=403 \"The operation couldn\u2019t be completed. (NSURLErrorDomain error 403.)\n. @AhmedOsamaOsman  pdf images are not supported\n. right now v4 is more important. if you want you to help you can submit a PR to support pdf images and help this library progress.\n. @AhmedOsamaOsman \n:+1: \n. the images of your tableview have different size?\n. as far as i know now you cannot get the size of the remote file before downloading it.\nhowever you can check this. it might be of some assistance\n. @bpoplauschi looks good. \n. @mrxiaobin after this pull the url is now https://github.com/webmproject/libwebp not the one you wrote\n. @RobinChao yes it does but as it is right now it causes some memory issues.\n. @mlijin9011 can this be replicated in the demo project? if you remove the sd_cancelCurrentImageLoad from prepareforreuse does it still cause the reuse issue?\n. @mlijin9011 did this fix your issue?\n. @bingFly if i understand you correctly you want to measure the traffic (bandwidth) of images in your app? what you are asking is out of scope of the usage of this library.\n. @LilyHZ are you using the latest version? the code you have posted is not in the decodedImageWithImage method\n. @a13xb can you please share that image?\n. @a13xb i will take a look at it thanks\n. the error you are getting is: \nunsupported parameter combination: 64 bpp RGB color space model; kCGImageAlphaPremultipliedFirst\naccording to the following table:\nthis combination is not supported.\n\n. @a13xb i will take a closer look later today. :+1: \n. @a13xb if you replace  CGImageGetBitsPerComponent(imageRef) with 8 it works fine. but i cannot hardcode this for these kind of images. A better solution would be to check if the bits per component result in an unsupported combination and if it does then roll back to hardcoded 8. \npull requests are always welcome :P\n. @a13xb does this pull solve your issues? https://github.com/rs/SDWebImage/pull/1496\n. fixed https://github.com/rs/SDWebImage/pull/1496\n. @cocoZ i think you are using an old version of the library. \nthat file has changes a lot\n. closing this. please reopen if you still encounter issues\n. @sbiermanlytle did you try to use the [SDImageCache sharedImageCache]\nWhy are you allocating a new instance every time?\n. the sharedImageCache uses the default namespace. And the SDWebImageManager uses the [SDImageCache sharedImageCache].\nSo  the following example worked for me (even though i did not need to resave to cache as the sd_setImageWithURL method has already done this, but for the sake of the example)\n```\n        SDImageCache imageCache = [[SDImageCache alloc] initWithNamespace:@\"LookAppInc\"];\n        [imageCache queryDiskCacheForKey:@\"LookProfilePic\" done:^(UIImage image, SDImageCacheType cacheType){\n            if (image){\n                NSLog(@\"fired!\");\n            } else {\n            [self.imageView sd_setImageWithURL:self.imageURL\n                              placeholderImage:nil\n                                       options:SDWebImageProgressiveDownload\n                                      progress:nil\n                                     completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                                         [imageCache storeImage:image forKey:@\"LookProfilePic\"];\n                                     }];\n        }\n    }];\n\n```\nor substitute the instance imageCache with the [SDImageCache sharedImageCache] without initializing with a custom namespace\n. @abhi2412shek\nits the namespace to use for this cache store. check this\n. @Rotemy that pull was not merged. This lib does not support ALAssets.\n. @GuoZhiQiang I got a couple of timeouts until i was able to see the image but i tried your url in the demo project and it works fine.\n. did you try to replicate the issue in the demo project? for me it seems to be working.\nare you using the latest version?\n. the SDWebImageDownloader does not cache the image. you can cache the image in the completion using something like \n[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];\n. the sd_setImageWithURL:url method caches the image without adding any extra code.\nonly when using the [[SDWebImageDownloader sharedDownloader] downloadImageWithURL  you need to cache the image manually\nthe fsCachedData is not where this library caches images. This is created from the use of NSURLCache\nThe following code will remove all cached data from that folder:\n[[NSURLCache sharedURLCache] removeAllCachedResponses];\n. fixed with https://github.com/rs/SDWebImage/pull/1464\n. can you check if the recent commit https://github.com/rs/SDWebImage/commit/cac21e106de23d25988905d6e5f293069d1d069a\nfixes your issue. it rolled back a commit which caused issues with the prefetcher.\ncheck https://github.com/rs/SDWebImage/pull/1350\n. does the demo crash there as well with iPhone 4S IOS 8.4?\n. sorry my bad. i meant to write simulator iphone 4S IOS 8.4.i corrected my post.\ni tried the demo project with simulator iphone 4S IOS 8.4 and IOS 9.2 and it works fine.\nwhich version of this library are you using?\n. i am using IOS 9.2 - i do not have 9.0\ncan you try with the latest version and check again? can you replicate this with the demo project too?\n. :+1: \n. @smilydronavalli thats not relevant with the library. maybe this can help\n. the constraints can be found here\nif you revert to 3.7.3 is your issue resolved?\ncan i ask why do you have a UITabBar inside a uitableviewcell? :P\n. duplicate https://github.com/rs/SDWebImage/issues/1406\n. did you follow these steps?\nhttps://github.com/rs/SDWebImage#add-linker-flag \n. you mean the downloaded cached image size is different in 3.7.2 than in 3.7.4?\ni tried in both and i get the same size images.\n. in 3.7.4 i got 440x440 in all images except one which was 800x800\n. \n. i am sorry but i did not understand. \n. maybe this is whats causing the change? this \ncommit: https://github.com/rs/SDWebImage/commit/dcde40fc01d2815070a2b4b496234aeb1b6d038e\n. :+1: \n. @sun-fox-cj please enable the CG_CONTEXT_SHOW_BACKTRACE argument in the environment variable in your scheme so we can understand why the image is showing as nil.\nMy best guess is that it has to do with the CGImageGetBitsPerComponent(imageRef).\ncheck this\n. fixed with this https://github.com/rs/SDWebImage/pull/1464\n. @laojiawei are you using the latest commit?\n. try using the latest commit not version.\n. share the url of the image that produces the error\n. i tried it with the demo project and it works fine.\n. can you still replicate the issue?\n. if you use the latest cocoapods version can you use pod 'SDWebImage/WebP', :head?\nif no, how did you resolve the issue?\n. maybe the constraints here are to blame? https://github.com/rs/SDWebImage/pull/1388\ncan you check if this is an issue for you?\n. did you try to post a notification instead?\n. @sanshanchuns this warning is normally coming from SDWebImageDecoder.m file \nmethod  + (UIImage *)decodedImageWithImage:(UIImage *)image\ncan you post some images that produce this issue?\n. @juyka this is the full console warning for your url:\nCGBitmapContextCreate: unsupported parameter combination:\n        16 integer bits/component;\n        64 bits/pixel;\n        RGB color space model; kCGImageAlphaPremultipliedFirst;\n        768 bytes/row.\n    Valid parameters for RGB color space model are:\n        16  bits per pixel,      5  bits per component,      kCGImageAlphaNoneSkipFirst\n        32  bits per pixel,      8  bits per component,      kCGImageAlphaNoneSkipFirst\n        32  bits per pixel,      8  bits per component,      kCGImageAlphaNoneSkipLast\n        32  bits per pixel,      8  bits per component,      kCGImageAlphaPremultipliedFirst\n        32  bits per pixel,      8  bits per component,      kCGImageAlphaPremultipliedLast\n        64  bits per pixel,      16 bits per component,      kCGImageAlphaPremultipliedLast\n        64  bits per pixel,      16 bits per component,      kCGImageAlphaNoneSkipLast\n        128 bits per pixel,      32 bits per component,      kCGImageAlphaNoneSkipLast |kCGBitmapFloatComponents\n        128 bits per pixel,      32 bits per component,      kCGImageAlphaPremultipliedLast |kCGBitmapFloatComponents\ncheck this for supported contexts\n. as i have said before replacing the CGImageGetBitsPerComponent(imageRef) with 8 here will make these images only work, but generate warnings for others.\na working solution would be to check if the bits per component result in an unsupported combination and if it does then roll back to the hardcoded 8.\n. @caldofran @sanshanchuns @pljhonglu can you try this pull and let me know if that works for you\nhttps://github.com/rs/SDWebImage/pull/1496\n. fixed https://github.com/rs/SDWebImage/pull/1496\n. sunilsharma08 this happens because the image that gets downloaded is nil for some reason\nurl response:\nError. Page cannot be displayed. Please contact your service provider for more details. (11)\n. you can add something like this if (image == nil) { return nil; } at the top of the decodedImageWithImage method in SDWebImageDecoder.m file\ni just merged a pull request that prevents this issues\n. its not in a release yet. we have added it to the 3.7.6 release\n. @venky284 sorry i cannot make any estimations as i am a bit swamped at work \n. @ningliuliu what do you mean by calling that method very quickly?\ncan you reproduce in the sample project?\n. @threeknife are you using the latest version? there were some fixes concerning this 10 days ago i think\n. i do not think its related to #1123 \nthis url produces a warning: \nCGBitmapContextCreate: unsupported parameter combination\ncheck #1401 #1440 #1454 \na working solution would be to check if the bits per component result in an unsupported combination and if it does then roll back to the hardcoded 8.\n. @edalford11 @ppaulojr can you try this pull and let me know if it works for you? https://github.com/rs/SDWebImage/pull/1496\n. fixed https://github.com/rs/SDWebImage/pull/1496\n. you can download a placeholder image and control the playback using something like this\nEdit: this also has a nice delegate feature to control if the gif will autoplay or not\n. gif images is not the strong suit of this library. I have tried FLAnimatedImage and it works good without issues in most gif files. But if you want to get all images from a gif you can see this method.\ntake it apart and use it as you need. Modify it to get a single image to meet your needs.\ncheck this to see how you can control the autoplay of the gif\nEdit: this has a nice delegate to control the auto playback of the gif\n. can you reproduce it with the latest version on the demo project?\n. is this with the latest version of the library?\n. i checked your sample and the image that gets saved on disk is the correct size.\nDo not forget that the image.size is measured in points not pixels\nif you put a breakpoint in SDWebImageCompat.m on this:\nUIImage *scaledImage = [[UIImage alloc] initWithCGImage:image.CGImage scale:scale orientation:image.imageOrientation];\nyou will see that the image that gets generated is half the size. this method generates a retina aware UIImage based on the scale of the device.\ndo another test. download the image locally and try this:\nUIImage *tmp = [UIImage imageNamed:@\"bf1ec0c3defa52e6f9d5ce466804187e\"];\nUIImage *scaledImage = [[UIImage alloc] initWithCGImage:tmp.CGImage scale:[UIScreen mainScreen].scale orientation:tmp.imageOrientation];\nyou will see again that the scaledImage is half the size again\n. its not an issue of the IOS. the image that gets saved on disk is correct. The size is 1047 x 693 pixels.\nWhen you log the size of the image using nslog the size you get is in points. you can read this for more details on points and pixels\n:+1: \n. does this occur in v4 as well?. closing this. please reopen if you still face issues . SDWebImage provides these\ndo you mean something else?\n. this is not an issue coming from the library rather than the image itself.the metadata of the image is causing the issue.\n. The commit responsible for the change is this\nSimilar issue #1470 \n. if you are not interested in scale at all then revert the code in your SDWebImageDecoder.m file\n. @bpoplauschi what do you think?\n. i do not see any reason to revert back. also this commit was done quite a while back and we had no complains. \n. check the latest commit. the issue should now be resolved\n. the API you are referring to will return a url, right? then you can use SDWebImage to load that url and cache the image\n. that would create a huge overhead. i do not think this is the best approach. the best solution is for the API to return urls\n. check the console for the value of this imageURL instead of what you did. Are you loading a correct url? does this occur in all your images? please use the demo project and debug your urls there. report back if there is an issue\n. you should first place a UIImageView inside the scrollview. The method that crashes is because it only works with an imageview and not a scrollview\n[your_image_view sd_setImageWithURL:imageURL.....]\n. from what i see in the image you are using an older version of the library. \nThat code was modified if you see here\ntry with the latest version \n. read this https://github.com/rs/SDWebImage/issues/1476\n. fixed with https://github.com/rs/SDWebImage/commit/29c9c5d68ace94c646292d2a647a558b5f87fbff\n. check the comment here\n. check the latest commit. the issue should be resolved\n. you said that when the image is cached on disk or in memory then you get it instantly but it flickers.\nhowever you have this:\nif(cacheType == SDImageCacheTypeNone || cacheType == SDImageCacheTypeDisk) {\nwhich animates with a crossdissolve animation when the image is cached on disk or not at all.\nIn your else (memory cache type) statement you assign the UIImageView without animation.\n. did you try to add both force_load and inherited?\n. in order to see which library might be causing the issue what i would do is use the new project which you said you made it work and add one library at a time and see when it breaks. \nThen you can search if other users have had similar issues in the corresponding forum of that library.\n. please update this thread when you have more info :+1: \n. :+1:  thanks for the update\n. are you using the latest version?\nplease provide some code...or you can check the sample and then review your code.\n. not necessarily. please check the code in the sample project with yours. does it produce any errors/warnings anything?\n. whats the crash message?\ni used the demo project and your code and it works fine. Unless you are using it from background threads\n. something in your code is not running on main thread. check your code. as i said i tested it with the sample project and it works. So you must have something else that is running in backgorund\n. @bpoplauschi this looks good. i did some tests and so far its working fine. no warnings on some problematic images i tried on\n. so you say we put the [sself startAnimating]; inside the if (sself && image) { \nto make sure that we have an image to animate before we do it, right?\n. if you try to disable App Transport Security completely by adding the following snippet in the info.plist\n<key>NSAppTransportSecurity</key>\n <dict>\n      <key>NSAllowsArbitraryLoads</key>\n     <true/>\n </dict>\ndo you get the image? please remove the app and re-install\nalso read this where it says 'Debugging ATS Failures'\ni think the error you are getting has to do with invalid certificate on the server side\n. @zhujinlong i meant to remove the NSExceptionDomains part and add only the NSAllowsArbitraryLoads key so i can see if the error comes from the exceptiondomains. \nUsing Alamofire can you get the image ? Can you post a demo url along with a session token so we can test?\n. i have emailed you on your Github email\n. use this\n```\n       [[SDWebImageManager sharedManager] downloadImageWithURL:replace_with_your_url\n                                                       options:SDWebImageContinueInBackground\n                                                      progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n                                                  }\n                                                 completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n\n                                                 }];\n\n``\n. you mean you only included this#import SDWebImageManager.h\"` and its not working?\n. can you provide a sample project because i do not see this warning in mine. are you sure you are not calling it somewhere...\nare you using the latest version?\n. i see the deprecations but if you do not use them then you will not get any warnings.\nif you download the demo project and run it you will not see any warnings for this.\nplease provide a sample project so i can understand what you mean. otherwise i will not be able to give you much help\n. if you tried to use the SDWebImageManager with the deprecated completionblock then thats why you got the warning. I am sorry if i am not understanding your issue. Please provide a demo project so i can see the error you are getting\n. check if thats causing the issue then\n. please use the example project as reference. you might have missed something in your code.\n. you did not upload the zip correctly. try again\nyou should wait for the upload to finish before posting\n. WebWork.zip\n. you should use with custom subclass if you want to use without a placeholder image.\nor you can make a transparent placeholder image and use that one. this way the user will not see the placeholder at all\n. did you change anything in your app update? Did you change this library at all? Did you use the same version of this library in both of your versions?\n. how to you use the library? do you create any custom cache folders?\n. @sunbohong might be right. Since you haven't changed versions of this library i think the cache age could be the culprit to your issues\n. please check the sample project for more info or share the project so we can check the full source\n. Since you debug for IOS9 you should add these:\n<key>NSAppTransportSecurity</key>  \n     <dict>  \n          <key>NSAllowsArbitraryLoads</key><true/>  \n     </dict>\nin your info.plist file\nmore info here\nhowever you should consider using https for your requests as per Apple's documentation\n. i agree with @bpoplauschi. Since we might have multiple download sources we can set up each one individually with their own settings. I will close this for now. if you have other thoughts please reopen. please provide sample code. Can you reproduce it on the demo project?\n. can you replicate this issue in the demo project? \n. i think it would be easier to test the demo project. if the demo project works then there must be something wrong with your code. if you still cannot find it then you can post a sample demo project here so everyone can have a look and provide assistance\n. No method as far as i am aware of.\ncheck the CHANGELOG.md and/or the podspec\n. whats different with the current approach as it is now?\n. yes it checks the scale of the device. There is no flag for this yet.\nalso discussed here: https://github.com/rs/SDWebImage/issues/1476 https://github.com/rs/SDWebImage/issues/1487 https://github.com/rs/SDWebImage/issues/1490\n. check the commit thats responsible for this: https://github.com/rs/SDWebImage/commit/dcde40fc01d2815070a2b4b496234aeb1b6d038e\nand revert to the old code\n. i did not mean to revert to that commit. i mean to just replace the one line of code it changes back to the one that was before\n. line 66 file SDWebImageDecoder.m \nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDecoder.m#L66\nreplace with:\nUIImage *imageWithAlpha = [UIImage imageWithCGImage:imageRefWithAlpha];\n. check the latest commit. the issue should be resolved\n. @bpoplauschi @skyline75489 do we have plans to support LCR Images?. i hope you are not using the full image from that url as a background of the button. \nThat image is 3042x4032  (width x height). \nEven with a browser i cannot open it completely. It stops and restarts for some reason\n. what do you mean by clear pixels? both images look the same to me\n. i downloaded the original image and i still see this 1px line at the far right.\n\n. again this is take from the original showing the 1 extra pixel at the right side:\n\nand even further zoom:\n\ni really do not know whats happening with your image. As a sidenote i am using Opera\n. you can remove the image from cache using something like this:\n- (void)removeImageForKey:(NSString *)key fromDisk:(BOOL)fromDisk; from SDImageCache\n. What exactly is the issue? Do you have issues rendering jpg images? Can you provide sample jpg?\n. changing to kCGImageAlphaNoneSkipLast indeed solves this issue. \nHowever i do not know if it creates new issues with some other images.\nchange the values in line 61 in SDWebImageDecoder.m from:\nkCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst\nto this\nkCGBitmapByteOrderDefault | kCGImageAlphaNoneSkipLast\nand let me know if that works for you in all your images\n. sorry i have Xcode 7.3 and it does not support IOS 7 simulators.\nWhat version of Xcode are you using?\n. closing this. please reopen if you still have issues\n. have you added any app transport security keys?\ncheck this\n. i used the url you provided in the demo project and it downloads and shows the image just fine.\nCan you test it as well?\nThe demo project has Allow Arbitrary Loads set to YES. \nApp transport security requires a valid SSL with TLSv1.2\nYou can also read this table 2 & 3\nIf you still face issues please reopen\n. check this\nyou are missing a user agent...\ni added it before downloading , like the one found in the post i linked and i got the image\n```\nNSString userAGENT = [NSString stringWithFormat:@\"%@/%@ (%@; iOS %@; Scale/%0.2f)\",\n                           [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString )kCFBundleExecutableKey] ?: [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString )kCFBundleIdentifierKey], [[[NSBundle mainBundle] infoDictionary] objectForKey:@\"CFBundleShortVersionString\"] ?: [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString )kCFBundleVersionKey], [[UIDevice currentDevice] model], [[UIDevice currentDevice] systemVersion], [[UIScreen mainScreen] scale]];\n[[SDWebImageDownloader sharedDownloader] setValue:userAGENT forHTTPHeaderField:@\"User-Agent\"];\n\n``\n. please use latest commit. there have been many changes in theSDWebImageDecoder.m` file.\nIf still you face issues please reopen and provide a sample image so we can replicate\n. based on https://github.com/rs/SDWebImage/issues/1548#issuecomment-216945451\n. i just tried to clone the repository recursively and everything worked fine.\nread this\nare you using the latest commit?\n. @ikesyo i think this was reverted here\n. download the demo project and try it again. i used the url you provided and it works just fine.\nplease download the latest commits\n. i used the demo project and it works just fine. Try it there and let me know if you still encounter issues\n. nope...works just fine. please the demo with your urls first\n. whats the size of the image you are trying to download?\n. did you try setting these two:\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\nby the way, whats the highest resolution of those images?\n. should be before you make your requests. try the appdelegate\n. why are you using SDWebImageManager's downloadImageWithURL:... and not [cell.imageView sd_setImageWithURL:...\ncan you try the demo project? do you see the same increase in memory there too?\n. if you perform extra actions on the image you could use this\ndid you try the demo project? does it show the same memory increase?\n. try the demo project with your API urls but without doing anything extra to the image after download. do you still see any increase in memory?\n. in prepareforreuse you should nil your imageview's image.\ne.g my_image_view.image = nil\nlet me know if you have troubles\n. can you reproduce it on the demo project?\n. you can try the demo project on its own on an older device too and check it out. no need to copy any files. just download the demo project by cloning the repo and run it on an older device.\n. why are you using [[SDImageCache sharedImageCache] queryDiskCacheForKey instead of  [ [self.imageView sd_setImageWithURL:self.imageURL\nThe sd_SetImageWithUrl does exactly that. downloads the images and caches it.Next time it gets it from cache directly without requesting it again.\nwhat happens if you run the demo as it is without subclassing the cell?\n. yeap. it does all the heavy work for you.\n\ud83d\udc4d \n. \ud83d\udc4d \n. try the latest commits. the code has changed and this issue was fixed.\n. download the demo project and use the image url that produces this warning there. if you still face issues please reply\n. can you replicate in the demo project?\n. @Qingzhaowang i tried the url on the demo project and it works fine. \n. some of the duplicates #691 #1013 #1402 #1443 #1484 \n. this was reverted\nmore info here\n. can you replicate the crash on the demo project? Do you have the image that causes this crash?\n. closing this. please reopen when you have more info\n. duplicate? https://github.com/rs/SDWebImage/issues/1573\nfixed with https://github.com/rs/SDWebImage/commit/22fded56cf832543f39283962d089d3f4d7d0f61\n. as always great work @bpoplauschi. i will check it out this weekend\n. @bpoplauschi \nso far i have tested on a 6Plus & 6S Plus with a dozen gifs and i have no crashes yet.\nof course there is an increase in memory  and CPU while the gif cells are showing.if i scroll it goes back to normal percents.\ngifs showing on screen on an iPhone 6SPlus:\n\ngifs showing on screen on an iPhone 6S:\n\nno gifs on screen:\n\n. @NSKevin can you share any gif that produces this crash? @bpoplauschi is right. Where did you get this log from?\n. \ud83d\udc4d  @bernikowich-cedoni \n. do you mean this\n. only one is removed,right?\n[sself.URLCallbacks removeObjectForKey:url];\n. @bernikowich-cedoni maybe. @bpoplauschi has made some commits in 4.x branch regarding this issue from the post you linked. I will take a closer look later this week and i will reply if i find anything. If you want you can try this too https://github.com/rs/SDWebImage/pull/1575\n. @bernikowich-cedoni tested against the code in 4.x and it seems that this issue is fixed. please give it a go and let us know. thanks\n. @bpoplauschi i have read this. Indeed since yesterday Apple accepts IPv6-only network services. So are you going to release 3.8 soon?\n. @bpoplauschi is single session used in 4.x branch as well?\n. perfect\n. getting it now\n. building the IOS demo on the simulator works fine. when i build for the device i get this 3 errors:\nGNU-style inline assembly is disabled in the enc_neon.c file\n\n. it works fine now on device apart from this:\n \nwhich is easily fixed by changing the build number from 1.0 to 1 on SDWebImage iOS Demo target  \nHowever i am getting this for the simulator:\n\n. @bpoplauschi everything builds just fine now. I will test it a bit more tomorrow\n. @757388559 i have tested your url with the demo project and it seems to be working just fine.\ncan you test it yourself in the demo project?\n. please provide a sample project as i have tested the url/code you provided with the demo project and it works fine\n. did you try to load this url in the demo project of 3.8.1 version? \n. this \nhttp://api.limologs.com/v1/limo/vehicle_diagram?cls_id=3\nredirects to this:\nhttp://limologs.com/uploads/diagrams/SW50ZXJuYXRpb25hbCBNaW5pdmFuNA==.jpg\n@bpoplauschi is there anything specific we need to configure to make redirect urls work? \nI mean anything server side wise? Does the server need to return any specific status code?\n. check this\nand this\n. you can remove the cached image on the completion block for those images you do not want to be cached. or use the SDWebImageDownloader and only cache the images you want on the completion block\n. can you try this url in the demo project? which version of SDWebImage are you using?\nusing the latest build its working fine with the demo project\n\n. download the latest version of the library and use the demo project to test the images and replicate the issue. Does its happen there too? If yes then please share the image urls so everyone can have a look\n. can everyone test using the latest version?. please test using the latest version.\ni am closing this for now. please reopen if you have more info.. you can use this:\n- (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL;\ndo your transforms inside and the result image will be the one that SDWebImage will cache\nmore info here\n. i do not think there is a way to choose to load a gif or not.\n. try the demo project and let us know if you encounter the issue there.\nmaybe it has something to do with this?\ndispatch_async(dispatch_get_global_queue(QOS_CLASS_USER_INITIATED, 0), ^{\n. have you tried removing the custom global queue and using the main queue instead? \nin order for everyone to provide assistance a demo project would be great if possible. \nI am closing this as this does not seem to be a problem with the library.\n. @stardustWK the url is working fine with the latest version. just tested in on the demo project. yes\nand this too\n. if you use the https url of the image in the demo project does it work?\n. please reopen if you still face issues\n. can you test the url in the demo project?\n. maybe similar issue... here\n@bpoplauschi any ideas?\n. @andyden9 can you try this ?\n. can this be replicated in the demo project as well?\n. when you download the library there is a demo project that you can test it with. check it out\n. i am loading https images just fine. check the demo project and see that it loads https amazon images without any issue. are you sure everything is setup correctly in your server side?\ncheck this for more info on how to debug any ATS problems.\nif you find that the problem is caused from this library please reopen\n. excuse my ignorance but what is a lentp?\n. @bpoplauschi ready to merge this?\n. @prashantkrishnan94 i do not remember this method. SDWebImage does not support PHAsset.\nUnless you are talking about this \n. the issue appears to be with the Nikon colour profile. I removed the NikonD800-Generic colour profile and the image shows correctly now. \n. @superk589 can you try with the latest version and let me know?. i think this is something each user can modify on his own. thanks\n. we had some issues with this in the past year so we reverted back to using it as it is.\n. can you replicate in the demo project?\n. \ud83d\udc4d \n. i did some tests yesterday without any issues but i did not stress it much though\n. can this be replicated in the demo project?\n. @ivedeneev check this. if you remove the guassianBlurProcess:withProgress method from your code does it still crash?\ncan you provide a demo project? can you replicate it on the sdwebimage demo project?\n. i do not think TBImageUtility is part of Apple's IOS 10 frameworks.Maybe is it part of your code.closing this. please reopen if thats not the case. due to lack of response i will close this. please reopen with more info. can you replicate it on the demo project as well?\n. please reopen if you are still face issues. Also please download and test the latest version. can you test using the latest version?\ni think the correct method is:\n[[SDWebImageManager sharedManager] loadImageWithURL:<#(nullable NSURL *)#> options:<#(SDWebImageOptions)#> progress:<#^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL)progressBlock#> completed:<#^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL)completedBlock#>\n. did you try with the latest version of the library?\n. the latest tag is v3.8.2 but there are 2 pre-releases of v4 which you can try if you want\n. can you upload a small sample project that replicates the issue so everyone can have a look?\n. closing.please reopen if the problem persists. @thsseek  please try again with the latest version. closing this due to lack of response. please reopen if you have more info. no you cannot download zip files. . does this happen to a specific image only? if yes please share the image url or a demo project . did you try it on the demo project as well?. i tried it with the demo project and it does not fill with white. which version are you using?. which version are you using?. read this\nyou can download the latest version and try again or \nyou can download v4.0 beta here. can you try it with v4?. i tried your demo project but i did not get a crash. let me know how to replicate it. please reopen if you still face issues. can you please reupload the image and write something about the issue your are facing? . can you replicate it in the demo project?. the default maxCacheAge (found in SDImageCacheConfig) is 1 week. Maybe the images are getting invalidated afterwards? . https://github.com/rs/SDWebImage/issues/746#issuecomment-264840104. please try the latest version.. according to the latest UIView+WebCache.m the activity indicator is added within a dispatch_main_async_safe\nplease download the latest version and try again. due to lack of response i will close this. please reopen if you have more info. Test the url with the demo project and reply back. Also check your ATS settings in your plist.\nplease use the latest version if you want.i tested with the latest version and it downloads just fine.. please share the image url. Which version of SDWebImage are you using? Did you try the url in the demo project of the current version?. @yupuyang i tested the url in the demo project with the option SDWebImageAllowInvalidSSLCertificates and it works fine.. did you check the ATS settings in your plist? if your ssl is not valid you can add the SDWebImageAllowInvalidSSLCertificates option/\nAlso download and use the latest version since NSURLConnection is deprecated in IOS 9. did you set your ATS keys in your plist file? check the demo . as it says on the error message the network connection was lost during the request. Also the url is not reachable now that i am trying it.. @bpoplauschi more info here\ni think its safe to add it to the list.. \ud83d\udc4d . please use the latest version of the library. also share the decode error you mention.\nor you can try the image url that causes the issue in the sample project and check if the error occurs there as well.. as i have mentioned above please try the images you sent me in the demo project using the latest version of the library. if you still face issues please let us know. can you use the latest release and try again? if the problem still occurs please share the url of some of the images that cause the issue. can you replicate this in the demo project? does this happen in the latest version of the library?. closing this. please reopen if you have more info. Since this is not an SDWebImage related issue i will need to close this. If you have any issues with the library please do not hesitate to open an issue. . closing due to missing information regarding the issue you are having.. which version of this library are you using? do you use the FLAnimatedImageView to render the gif? can you replicate it on the demo project?. can you try with the latest version 4.0.0 and let us know? replace the UIImageView with the FLAnimatedImageView and try again\nalso maybe this ?. closing this. please reopen when you have more info. can you try using the latest version (4.0.0). i am sorry but i cannot understand whats the issue. can you please elaborate?. closing this. please reopen with all the necessary info filled in. thanks. closing this. please reopen with all the relevant info.. i just tested the url you posted and i got the same size 140 kb in both situations. please check your code and see if you are doing anything else to the image.\n\n. @paktree check if your cache is large in size like @skyline75489 suggested. \nAlso do a test with fewer images e.g with the demo project and let us know if you still see significant background usage time.\nclosing this. please reopen when you have more info. there is no direct way of doing this as far as i know but what you can do is on the completion block to erase that image from disk.. thanks @edisongz . please try and replicate with the demo project. if you can replicate this then please reopen. closing this. please reopen with more info. does this happen with the latest version 4.0?. closing this. please reopen if you have more info. @huipengo which version of this library are you using?. @neeschal please update the library to the latest version and try again. closing this. please reopen if you need more info. can you replicate this in the demo project?. closing this. please reopen when you have more info. Also please try it with the latest version of the library.. can you replicate the problem with the demo project?. just clone the demo project and try it on a device or the simulator. \nif the issue does not appear there then please check your code for anything that might be causing this. closing this for now. please reopen if you still encounter issues\n. check #1703 and #1691 \nmaybe you are using an older version? can you try with the latest one?\nplease reopen if you still face issues. can you replicate this with a specific image in the demo project?. closing this. please reopen with more info. please share the image url so we can test it\ndid you try the url with the latest version of the library? . closing this. please reopen with more info. @O-mkar did you try this url with the latest version 4.3.2?\ncan you try the latest demo project with this url and report back?. @wangxuewen can you please provide some more info regarding this huge pull?. @wangxuewen can you provide some more info for this pull? what does it help with?. this should already be resolved #1780 #1784 . did you try the latest version?i think in the demo project you can find what you are looking for.. the latest version is 4. try with that one. did you try the urls in the demo project? what version are you using?have you setup ATS in your plist? please conform to the ISSUE_TEMPLATE. please check the demo project and test the images there. i am closing the issue for now. if you still encounter issues after you tested with the demo project please let me know.. please clone the repository using git clone --recursive https://github.com/rs/SDWebImage.git and then open the demo project, remove the demo urls and add your own. Run the project in a simulator or device and let me know if the images appear in the tableview. whats the error you are getting when you git clone the repository in your terminal?. i tried it just now and the repository cloned just fine. \ni also tried the image urls you posted in the demo project just now and all appear in the tableview. See screenshot. Please check the options in my 1st post.\n\n. this means you already have SDWebimage in the destination folder you cloned it to. As you can see from my previous post the images appear just fine.. as i have told you in my previous post you might already have this library downloaded in your destination folder where you are trying to clone it to. i am sorry i cannot provide more info since i just tested the urls and they seem to work fine. please check your code or post your code so we can check. please check my comment. the error you posted destination path 'SDWebImage' already exists and is not an empty directory means that you might already have this library downloaded in your destination folder where you are trying to clone it to. its not an issue with the library. \nyou are trying to download the library and the library is already downloaded in your desktop. please remove the library from your desktop and run the command again. Also close the demo project before doing all that.\nAlso when you run the demo project you should run the demo ios scheme. if you read the whole error you will see that it tries to find a missing file. this means that the repository has not been cloned correctly and some files are missing. you can download it from here. \nit will expire in 48 hours\nopen SDWebImage.xcworkspace and use the SDWebImage IOS Demo scheme\n. use the link in my post above. did you use the same image urls you posted above?. can you test this url in the demo project?. \ud83d\udc4d . which version of SDWebImage are you using? Can this issue be replicated in the demo project?. @kata017 can you upgrade to the newest version and try again?. you said you can replicate it in the demo project. I can use the demo project just fine.are you having problems with your internet connection? see this. are you referring to this?\n. more info on JS reader here. you asked for resources on implementing heic support. i linked the js library that reads these kind of images so you can check the code and whats needed. Unless i misunderstood something.. As i see it, implementing heic support will surely need time and lots of tests. \nMost of the collaborators here spend their free time supporting this library and we could always need some help with new features/bugs etc. If you want to support this library you can always send a pull request and we will be happy to check it out. \n\ud83d\udc4d . the SDWebImageDownloaderProgressBlock sends back progress related info NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL\ni do not think there is a way to get the data from there.\nHowever SDWebImageDownloaderCompletedBlock sends back UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, BOOL finished so i think you can use this to get the data.\nread the comments from this method\nif SDWebImageDownloaderProgressiveDownload isn't use. With the\n * SDWebImageDownloaderProgressiveDownload option, this block is called\n * repeatedly with the partial image object and the finished argument set to NO\n * before to be called a last time with the full image and finished argument\n * set to YES. In case of error, the finished argument is always YES.. please be a little more specific with the issue you are having. can you replicate it on the demo project? please conform with the ISSUE TEMPLATE\nclosing this. please reopen with all the necessary info. does this fix the issue?. the images you uploaded are not working. can you please conform to the ISSUE_TEMPLATE on this project?. can you try the same url in the demo project using an iPad?\n999 error is NSURLErrorCancelled. Have you setup ATS correctly?. @Shanti-SR i just tested your url with the demo project and the latest version and it works just fine.\n. can you please conform to the ISSUE_TEMPLATE on this project?\nwhich version are you using?. have you setup ATS correctly in your plist?. The reply from Apple states that \"the app could not load content on the main page\". What is your main page? Do you load images? Is there any way that the images could not be loaded because of a server side problem? . @Mrshj you are trying to load an image from a local server as i can tell. i do not know if the response you are getting is actually an image or not. if the url responds with an image then you can test it by adding the url in the demo project and check. can you try with the latest version? can you replicate it on the demo project?. did you try to replicate this in the demo project? can you show some code? i will close this. please reopen if you have more info. can you share the image url that produces this broken image?. have you tried this with the demo project and the latest version of this library?. i just tried it myself on the simulator and it seems to be working just fine. \nPlease use the latest version of the library and try again. @AbhishekChourasia16690 if you want you can create a pull request and we will check it out. version 4 supports ipv6. also here https://github.com/rs/SDWebImage/issues/1566. closing this. how did you install the library?. so you just copied the files? did you use git clone recursively to clone the repository?. if you use this does it work when you open the SDWebImage.xcworkspace file?\ni just tried it and it builds just fine.. the mirror works fine https://github.com/webmproject/libwebp\nare you still having issue?. How big are the images you are using?. check the demo project and you will see a full working sample (ios simulator). there is a NSImage+WebCache.h file. @tiwariammit this does not say much. can you replicate it in the demo project? how big are the images you are trying to load? which version of this library are you using?. how did you install SDWebimage? did you check this. which version of this library are you using? how did you install this library in your project?. closing based on comment above. @superdev89 which version of the library are you using? Are you loading the gif using FLAnimatedImage object?. @antonbremer does this happen in the demo project too? Did you use FLAnimatedImage for the gif?. closing this. the urls must be escaped as @skyline75489 suggested.. closing this. you have opened it twice. @HaleyYQ did you try the url in the demo project? which version are you using? download the latest version and try again. @HaleyYQ this screenshot below is from the latest version. I tried the demo project with your url and it shows just fine. Thats why i asked you to test the url in the demo project.\n\n. @HaleyYQ the demo project uses FLAnimatedImage too. maybe there is something else that causes the issue in your project.. thats the HTTP NTLM auth example. it takes a username/password where you can provide in those two lines you mentioned. closing this. please refer to the other open tickets for this issue. thanks. please try using the latest version of the library. are you using v3.7.6? please try with the latest version and let us know\n. closing this. . v4 now uses FLAnimatedImage to support gif loading. check this \ncheck demo project as well. whats the size a the gif files you are trying to open? can you replicate the issue in the demo project?\nalso read this. can you replicate this in the demo project (using v4 of this library)?. does this happen in simulator only or device? if this happens only in iOS 10.3? in iOS 9 the issue is not there? weird...if its an Apple firmware bug i do not know if there is a way to resolve this. Have you opened an issue in the FLAnimatedImage repository?. please share the image url. Which version are you using? Also did you try adding that url in the demo project and check the issue there?. you are right, i just replicated that in the demo project. really weird.. you can encode the backslash and then request the url. try that. check this and the method below as well. which version are you using? did you try the problematic url with the demo project?\n. i will close this one as there are multiple for the same reason. please use the search. thanks. https://github.com/rs/SDWebImage/issues/1716\nhttps://github.com/rs/SDWebImage/issues/1807\nhttps://github.com/rs/SDWebImage/issues/1816\nhttps://github.com/rs/SDWebImage/issues/1821\nhttps://github.com/rs/SDWebImage/issues/1859\nhttps://github.com/rs/SDWebImage/issues/1883\nall of them related to crashes on SDWebImageDownloaderOperation on v4\n. since this is not an issue with the library as far as i understand i will close this ticket. please refer to Stackoverflow for requests like this. . clean your derived data folder and then try to rebuild. ~/Library/Developer/Xcode/DerivedData. please reopen if this did not fix the issue for you. @Asution which version are you using? can you try the image in the demo project (latest version) and let us know if it still crashes?. you are using an older version of the library. download the latest one v4.0.0. currently this library does not support ALAsset or PHAsset images. Sorry about that. Take a look at the following search results. closing this due to lack of response. please reopen if you need more info. @AaronV5V5 are you sure the above links are images? \n@dreampiggy thanks for the clarification. i could not open the HEIC image and for some weird reason the other was unreadable too. now it works fine. @kbhat968 can you post your code or setup a demo project? which version of the library are you using?. @dreampiggy you can add this to v5 i think.. @dreampiggy \ni agree to have maxMemoryCost & maxMemoryCountLimit inside SDImageCacheConfig.\nSDImageCacheConfig should have all the configurations in one place. I think its better this way.\nMost users do not have a need for this like you said. \nI use the v5 branch in a project of mine with all your commits and so far it looks good. \ud83d\udc4d \nSo you can add these in the v5 branch too.\n. \ud83d\udc4d . i agree with @skyline75489. Looks good but maybe it will be better to add this to 5.x ?. @Anonymous-Monk Please provide more information in our issue template.\nWhich version of the library are you using?\nDid you try the url on the latest version in our demo project?\nDid you search through issues similar to this?\nAlso i can see that you are loading an image through insecure HTTP channel. Have you disabled ATS?\n. @adityativ-issart can you replicate your issue in our demo project using the latest version?\n. download the latest version of the library and play with the demo. @adityativ-issart follow the instructions here. \ud83d\udc4d . @dreampiggy the idea behind this pull request is correct. \nAdopting NSProgress with KVO can definitely help in some complicated situations even though most users will only use the completedUnitCount and the totalUnitCount\nI really do not have much to say on this issue so i only checked the code which looks good. \nSo no need to be worried. \n. @dreampiggy now i am using the 5.x branch and testing it in my app. \ud83d\udc4d \nexcellent job my friend. @dreampiggy how many \ud83d\udc4d   can i give for this :)\nexcellent work. @dreampiggy whats with the do not merge label? did you find anything wrong with using the barrierQueue?. @TianyGao follow these instructions. you should consider 2 options:\n1st -> download the large resolution image and write code to make it smaller after download & before showing it to the user\n2nd -> ask your server API to give you smaller images in the 1st place\n. maybe this is whats causing it\nhave you added CFNetwork framework?. @janardhanmupparaju what kind of images are you downloading? i mean size in bytes and/or resolution. generally you should avoid showing images that are 10mb in size. either download and scale them down or ask the server for smaller ones. \nAlso did you try your image urls in the demo project using the latest version? does this crash too?. @dreampiggy how does this affect performance? . this was fixed i think in https://github.com/rs/SDWebImage/pull/2242 & https://github.com/rs/SDWebImage/pull/2225. @PrakashMaharjan how big are the images in terms of size and resolution?. @shaktiprakash099 and whats the resolution of those images? is it lower that 1000x..... @lzylzy1991 the webp image you posted is a bit moret than 1MB in size. if you have 200 images of this size then the memory will surely rise . i see a lot of issues regarding these options coming our way.... naming is hard . @dreampiggy i like the idea of loadImageWithURL:options:context:progress:completed: which returns a UIImage. it would be helpful. @vinayakpal can you replicate the issue in the demo project with your own images? \nwhich version of the library are you using?. @vinayakpal i tried the url (http://res.cloudinary.com/purnesh/image/upload/f_auto/v1520249635/shiv-tikki-wala-final-header-1.png) in the browser and got an error as well. this does not seem to be a problem with the library\ncheck if the image exists online first.\n\nclosing this. please reopen if thats not the case\n. can you replicate this on the demo project?\nplease also try the latest version of the library. @dreampiggy \ud83d\udc4d for a great and detailed work. \ni agree with the protocol use like you suggested. in my mind its clearer. . \ud83d\udc4d for @import SDWebImage syntax\nthis MR has conflicting files. @dreampiggy this is what you are talking about in your previous comment?. so will you close this MR or update it?. @dreampiggy  sorry for the confusion but i only asked if you will close this PR because your previous comment said \"i decide to create again....\" :). @dreampiggy dont worry. that code was used back in 2015. we should help 4.x users too. go ahead and use it in both 4 and 5 versions. if issues arise on specific images we can deal with those then.. @bpoplauschi i am too a fan of AFNetworking and indeed its a model open source project for all others. I agree with using the SD prefix instead of SDWebImage.\nI will say it again. Naming is hard and trying to find names that \"work\" well for both Swift and Obj-c will result in a lengthy discussion. . @dreampiggy its a simple change \ud83d\udc4d \n@bpoplauschi ?. in 5.x we can point to a higher version, i agree. now i do not think its a good idea to introduce something that will break the current API.. i would upgrade the minor version number \ud83d\udc4d . the url is from a local server. we cannot access it. also check this\ncan you check your url in the demo project and see if it works there?. @victordengx whats the issue here? can you explain a bit more?. @anhmuonnoi Please fill the issue template regarding platform, iOS version, library version and some detail about the issue.. @satheeshkumar8186 even though svgs are not supported check what @dreampiggy wrote here. I agree with @dreampiggy about not pushing the wrong way even further with FLAnimatedImage.\nHowever since we have removed FLAnimatedImage in 5.x but want to keep it in 4.x \nv4 should be production stable as best as possible.\nMaking it async like @zhongwuzw suggested in 4.x is not something i would disagree on.\nDo we have a performance hit or do we create any other issue by making it async in any way?\nFLAnimatedImage has created more issues that it has solved :P. @ghostfeng can you provide a sample url? did you try the url in the demo project? which version of the library are you using? please fill the issue template when you add issues. @zhoupeiyu Please fill in the issue template so we know in which version you are facing the issue you describe. Also please provide the image url and/or details about the image e.g resolution,size. @fishycx can you please conform to the ISSUE_TEMPLATE on this project?. @kramesh2005new does this url work on our demo project? can you try it there? also the url seems to be a non HTTPS url. have you added the NSAllowsArbitraryLoads property in the info.plist?\nAlso check this. @keynsianets can you try the url you provided in the demo project? does it load there?. @dreampiggy @keynsianets using the demo he provided i cannot load the image too. \nthe code is:\nlet url = URL(string: \"https://d2bnh4l4ivgux0.cloudfront.net/outfits/bfe8cf33-8b2f-4678-9a7a-81b6ecf477bd.png\")\n        imageView.sd_setImage(with: url) { (image, error, cacheType, url) in\n            if error != nil {\n                debugPrint(error, \"my error\")\n            }\n        }\nmaybe its a headers issue like you suggested?. can you please conform to the ISSUE_TEMPLATE on this project?\nwhich version are you using?. @dreampiggy \nbased on the comment above, how can the user choose the kind of data to remove. the comment states ageLimit, countLimit and sizeLimit. where can we add these options?. excellent. i saw it after i had posted it. \ud83d\udc4d . ",
    "rokridi": "I have the same issue. When image is loaded from disk, it comes with a white background. Have this issue been solved ?\n. Sorry for the late reply. I will provide a separate demo project as soon as possible.\n. Here is the link to a simple demo project : https://www.dropbox.com/s/q975vpdokstct1o/SDTransparencyIssue.zip?dl=0 . I have an issue with a .jpg image. The issue is that the image has a white background when loaded from the disk cache.\n. The issue is related to .jpg images.\n. @mythodeia Thank you very much\n. @mythodeia i am facing the same exact problem as @GabrielCartier \n. @mythodeia yes i am using SDWebImageRefreshCached option.\n. @mythodeia i have checked again and it is working now. Sometimes, the image (with static url) is not refreshed even when using SDWebImageRefreshCached. The cache returns the cached image and then  i wait for the download of the new image but i get the old one (may be its is related to backend). I will investigate till i recognize the exact scenario to reproduce this systematically. Thanks for help.\n. ",
    "bpoplauschi": "This should work fine. Can you provide a demo project with this issue isolated?\n. @donholly this sounds good. Could you create a pull request?\n. We need to separate this ALAssetsLibrary functionality from the core, if we want to add it properly (separate target, separate subspec), similar to MKAnnotation\n. I might take care of that, if I find the time. Or maybe someone else can pick this up\n. If data is nil, then what is the point of the comparison? Sounds to me like there is a different issue. data should not be nil\n. I'm not sure it's valid. We can't assume the image is a PNG if we have no NSData to look at.\nAre you using storeImage:forKey: on your own? That is the only logical explanation for which the imageData would be nil. You shouldn't, you should rely on the mechanisms described in the readme.\n. In that case, I think we are good. We should make that fix. @christosc could you create a pull request?\n. :+1: \n. Hi guys. Sorry it took so much, but I will reopen the pull request and think about this in the near future. Note: I briefly looked at the implementation from JJSaccolo and I would avoid having another set of setImageWithUrl methods just for the usingActivityIndicatorStyle param. That would make this library even harder to maintain. But maybe we can find some other way\n. We don't have support for loading images at certain paths. But a way to work around that is to load the image from whatever directory (in this case Documents) using for instance UIImage imageWithContentsOfFile, and then directly store it into our system using SDImageCache storeImage. After that, you will be able to use it as if it was downloaded.. @SerhiiMatvieiev Indeed the image would be stored twice. And cache gets cleared (see the SDImageCacheConfig settings. I was offering a workaround, as the requested feature does not exist and I don't see it being implemented.. Guys, this is an installation issue, please look at https://github.com/rs/SDWebImage/issues/862 on how to fix it.\n. You should be able to use the bitwise OR operator: .RetryFailed | .CacheMemoryOnly\n. Depending on which version of SDWebImage you are using, check the docs and examples for that version. Version 4.0 has renamed SDWebImageManager.downloadImageWithURL to loadImageWithURL. . Hi @siancu. 3.0 was a major refactoring of 2.0. You can see some details about the releases here https://github.com/rs/SDWebImage/releases. In 3.0, the biggest changes were dropping iOS 3 and 4, while adding GCD, ARC, blocks, NSCache. The purpose of SDWebImage remains the same, but the internal way of doing it has changed completely. Some interfaces remained the same, while others have changed. There is no plan of documenting this, as its been more than 1 year since 3.x came out. At this point I assume people have completely adopted 3.x\n. @XiaGuanghua can you detail on the issue, how you reproduced it, if it's 100% reproducible, which version of the library where you using, ...\n. @Doshipak which version of the library are you using? What do you want to achieve with \"clear cache\"? Get rid of the memory cache? Get rid of the disk cache?\n. The difference is clearMemory will only remove the images from the RAM cache, they will still exist on the disk, so they will be quickly loaded the next time you need them. clearDisk will erase the cached image files from the device disk, so if you need them again, they will need to be re-downloaded.\nYou almost found the right method for what you need. It's clearDisk not cleanDisk from SDImageCache. If you look at SDImageCache.h you can see the comments explaining the 2 methods:\n/**\n * Clear all disk cached images\n * @see clearDiskOnCompletion:\n */\n- (void)clearDisk;\n/**\n * Remove all expired cached image from disk\n * @see cleanDiskWithCompletionBlock:\n */\n- (void)cleanDisk;\n. :+1: \n. I will close this issue, if there are still issues with clearing the cache, feel free to reopen or just comment here and I will reopen it.\n. @handiansom you can use [[SDWebImageManager sharedManager].imageCache clearMemory] or [[SDWebImageManager sharedManager].imageCache clearDisk]\n. It depends on how the server was set-up. I don't think this is a problem with SDWebImage. Why would you suspect that?. We have an array of failed URLs so we don't keep retrying URLs that failed. . This is a good idea, but the current pull request is not merge-able and @melle doesn't seem to be active on github for at least a year. It's probably over-engineered, as having multiple redirects to the same URL is an edge IMO. Closing.\n. @JuanMunhoesJr any updates on this?\n. Closing, due to lack of response.\n. I don't think it's supported. Someone should check and make sure\n. I think all the points suggested by @nebillo are solved:\n- listening to both UIApplicationWillTerminateNotification and UIApplicationDidEnterBackgroundNotification for cleaning the disk cache\n- using a background task in [SDImageCache backgroundCleanDisk]\n- using the enumeratorAtURL:includingPropertiesForKeys:options:errorHandler: API #307 \n. Yes, SDWebImage supports animated gif images. First support was added via #375 and refactored in 1dbb79f\n. Fixed by #683 \n. @shoabricot Any updates on this?\n. Closing due to lack of response. Please reopen if it's still an issue.\n. @n13 please create a pull request with this.\n. Thanks. We will assist you if needed\n. There is (a way to determine the format of the image). See NSData (ImageContentType) contentTypeForImageData:\n. Fixed by #764. As for the EXIF info missing for PNG and other formats, I think the current code handles that correctly. Just uses the info if it's available.\n. Guys, I see that the current master branch (releases 4.x) supports iOS7 and above, and also the incoming 5.x releases will drop iOS7 and require iOS8, so I think we should clean it up if we are sure about the fix.. Then it must be something wrong with the custom image view. You could need to nil the imageView image before loading the new one. Please reopen if the issue still persists.\n. To load an image async from the cache, use the [SDImageCache queryDiskCacheForKey:done:] method.\n. @jdp-global any updates on this?\n. I think this is now fixed by 0772019 (SDWebImageManager uses the shared instance of SDWebImageDownloader. This was requested by several developers for easier setup of their downloads. Replaces #486)\n. Hi @Kapin. I am curious why would you need a synchronous retrieval method? You can always use the async methods for retrieving images from the cache. Any particular reason you need those synchronous?\n. The retrieval operations are run on dedicated queues and I think that is a good pattern, so I wouldn't vote for making sync methods. People might misuse that. Closing.\n. Guys, does this issue still apply? Do you have any updates? Is it still reproducible with the latest SDWebImage?\n. Closing, since the last update was in January. Please reopen if this issue still exists and you have solid info about it.\n. Those crashes should be fixed in version 3.6.0 by the #373 cleanup. Please reopen if it's the case.\n. Fixed by #553 (SDWebImageDownloaderHandleCookies). No option available for pipelining, as that is already YES.\n. @jhickman7 if the issue still exists (was logged more than 1 year ago), you need to profile the app using the File Activity instrument on the simulator and determine which component triggers those downloads. The caching done by SDWebImage uses the correct folder (Caches) and is used by a lot of apps, so it cannot be the direct cause.\n. I assume you are using iCloud backup in those apps. Could you try on a device/simulator, debug where the cache is stored and what get's uploaded to the iCloud backup?\n. No longer applicable. SDWebImageCompat got refactored.\n. Now the MKAnnotationView category is added via a separate CocoaPods subspec that requires MapKit.\n. Most probably, the downloading of images is not paused by the SDWebImage code, but rather by your code no longer requesting images. You need to revisit that (if the issue still applies) and find the cause of the \"pause\". If we are on the subject, you can suspend/resume the download queue with the [SDWebImageDownloader setSuspended:] method.\n. An update to this thread:\n- the two methods that collide are setImageWithURL: and setImageWithURL:placeholderImage:\n- Mattt stated in AFNetworking #1142:\n\nIn AFNetworking 2.0, all categories on public classes (namely the UIKit extensions) will be made available as subspecs through CocoaPods. Because the decision to pull in these categories would be explicitly made by the developer, the need for prefixing is obviated.\n\nThis means that developers (like @matej, myself, ...) can specify just the AFNetworking core subspec i.e. pod 'AFNetworking/NSURLConnection' or pod 'AFNetworking/NSURLSession'\n- using prefixes for methods is not ideal, as it impacts the autocomplete from Xcode/AppCode/...\n- there is always the option @matej suggested, to use methods that are only in SDWebImage like setImageWithURL:placeholderImage:options: or setImageWithURL:completed:\nGiven those, I don't see a solid solution, so I would just leave things as they are.\nWhat do you think? @rs @matej @0xced \n. Good news guys. This was fixed in #770, all those category methods now have a sd_ prefix. \n. Those crashes should be fixed in version 3.6.0 by the #373 cleanup. Please reopen if it's the case.\n. @daveanderson could you please rebase this on top of master, so we can merge it?\n. No news here, closing. I don't see a reason to add this now, especially after the 4.x refactoring of all the category methods on UIView.\n. No longer applicable, SDScaledImageForPath was renamed to SDScaledImageForKey.\n. Guys, what is the status here?\n. This is probably fixed by #683. Could someone check?\n. Since I got no answer in over one week, I think we can assume the issue was fixed by #683. Please comment/reopen if it's still the case\n. Those crashes should be fixed in version 3.6.0 by the #373 cleanup. Please reopen if it's the case.\n. Based on @bm-i's comment, #366 fixes this.\n. I can still reproduce this issue using the latest master (3.6.0), using this image from @MaxGabriel's demo project http://a1.mzstatic.com/us/r1000/066/Purple2/v4/cd/39/63/cd3963aa-d301-8f71-69d2-bef3d54193be/Icon.png. At this point, I have no clue on how to solve this.\n. Not sure why this force load is needed. Could you give some more details, @ivanoblomov ?\n. Seems like this solves #567. force_load is an alternative to ObjC for loading the categories.\nSee more details on Parse-questions or on Stack Overflow.\n. Fixed by #401 \n. Checked with the last version, connection:didReceiveData: does call\nif (self.progressBlock) {\n    self.progressBlock(self.imageData.length, self.expectedSize);\n}\n. Closing this based on @rs's last comment. LRU eviction is a separate feature.\n. This a very good idea. I have tried this on the simulator and even there there are significant differences in retrieval times. I will create a pull request for the 3.7.0 release.\n. We will implement this, but we need time to do it.\n. Is anyone here interested in trying this approach in a Pull Request?\n. Guys, based on #1991 now we can add another coder with the suggestions here. Or people can directly do that inside their projects, as now we can plugin the coders. Per my last comment, closing. Fixed by #551 plus #721, same as #499 \n. You can use [SDImageCache cachePathForKey:inPath:] or [SDImageCache defaultCachePathForKey]. Do the NSFileManager check on your own. SDWebImage does not encourage it's users to directly interact with the paths and the cached images. Hope this is satisfactory to you.\n. @gmogames This feature was added in 3.7.4 release. You just need to use the shouldCacheImagesInMemory property from SDImageCache and set it to NO.\n. This is handled properly. Closing\n. You can get the SDWebImage.framework by downloading the project and building it. Regarding the integration with CoreData, I think that is not in the scope of this library, it will add extra dependencies and no actual gain (storing images on disk is more efficient that CoreData http://biasedbit.com/filesystem-vs-coredata-image-cache/).\n. The MapKit files are provided via a separate subspec, so no need for all the SDWebImage users to include the MapKit framework.\n. This issue is most probably fixed in version 3.6.0 by the #373 cleanup. Please reopen if it's the case.\n. Guys, could you please see if this reproduces with version 3.6.0? I have seen this crash in an app of mine that used version 3.5 of the library. In the next update I released I was using 3.6.0 and the crash no longer appeared (tracking crashes with Crashlytics, so I should have seen it even if it happened just once).\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Those crashes should be fixed in version 3.6.0 by the #373 cleanup. Please reopen if it's the case.\n. Agree, you should address questions like this on Stack Overflow or a similar forum.\n. related to #394 \n. Should be fixed by 6c409cd8a00fce0e4d10b75f3098a70320850aee\n. As @rs stated, the memory cache is cleaned when going to background or under a low memory warning, the disk cache is cleaned when going to background (for images older than 1 week - time window can be configured).\n. Closing, based on @rs's last comment\n. Downloading a pre-compiled version of the framework is not the best approach. Please use CocoaPods or include the source files directly into your project.\n. Fixed by #683 \n. @KatekovAnton could you please rebase this on top of master so it can be merged? Also, please explain the capabilities you are trying to add and what problems will those address.\n. Please use CocoaPods or add the source files directly (in this case the git submodule libweb must be initialized).\n. I hope you managed to fix your issue, as SDWebImage requires the -ObjC flag. This is responsible for supporting categories in static libraries (http://stackoverflow.com/questions/6629979/what-does-the-objc-linker-flag-do).\n. Do not use the \"download\" feature of github, it doesn't fetch submodules. You should either download the complied framework or git clone the repo. An even easier solution is to use CocoaPods.\n. @tevelee SDWebImageDownloaderOperation is a subclass of NSOperation so you can set the priority and dependencies on this directly.\n. @NachoSoto you can Use the [SDWebImageManager downloadWithURL:options:progress:completed:] method for the download and make your check in the completion block.\n. Was fixed with commit 282e817\n. You can use the [SDImageCache queryDiskCacheForKey:done:] method instead of setImageWithURL.\n. Detection of all image formats was added in #604, but we still need the SD_WEBP macro. This enables some portions of the code to compile when the WebP is not included.\n. You can use the NSFileManager methods. i.e.\n```\nNSURL diskCacheURL = [NSURL fileURLWithPath:self.diskCachePath isDirectory:YES];\nNSArray resourceKeys = @[NSURLIsDirectoryKey];\nNSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL\n                                           includingPropertiesForKeys:resourceKeys\n                                                              options:NSDirectoryEnumerationSkipsHiddenFiles\n                                                         errorHandler:NULL];\nNSMutableDictionary *cacheFiles = [NSMutableDictionary dictionary];\n// Enumerate all of the files in the cache directory\nfor (NSURL fileURL in fileEnumerator) {\n    NSDictionary resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:NULL];\n// Skip directories.\nif ([resourceValues[NSURLIsDirectoryKey] boolValue]) {\n    continue;\n}\n\nif (CONDITION_DEFINED_BY_YOU) {\n    [_fileManager removeItemAtURL:fileURL error:nil];\n}\n\n}\n``\n. Fixed by #635 and #634 \n. Please use Cocoapods, if the git clone + git submodule init doesn't work for you.\n. Great @sekmo \n. Please retry using the latest version, the issue should be fixed.\n. @pixelfreak please see @MrNickBarker's suggestion. If the issue still persists, please reopen. Closing.\n. Synchronous calls are not recommended, even if executed on background threads. In SDWebImage there are queues dedicated for different parts of the download/cache/load mechanism, so please stick to using those. \n. This is a duplicate of #350. Please follow that issue\n. No longer applicable (was already there).\n. This is an old issue that is missing a clear description. Please reopen if it still happens and provide a valid description so we can investigate it.\n. To set the memory cache limit (that is actually the cache limit of NSCache), use theSDImageCache.maxMemoryCostproperty. You cannot set a custom folder, as the path must be inside theCachesfolder, but you can specify a namespace[SDImageCache initWithNamespace].\n. Actually, you can set a custom folder, but only for read-only purposes. This means that if you have the images already cached somewhere, you can specify that path usingSDImageCache.customPaths.\n. Closing, based on @yunmingzhang17's comment. Indeed, downloading the zip does not work because it doesn't allow getting the libwebp files. I strongly recommend using Cocoapods or git clone\n. @steewsc We'll look into this. A possible cause is the difference between main queue and main thread described here: http://blog.benjamin-encz.de/post/main-queue-vs-main-thread/\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way). We have solved the main queue vs main thread issue\n. Out of the box, this is not possible. NSCache, the class we are using for memory caching allows setting a cost for each object (right now, the cost=the size in memory), so the bigger the objects are, the faster they will be evicted under low memory or when entering the background.\n. @ksiedzulek is this still an issue? Any updates?\n. No, I am trying to clean up those old issues. In this case, I will close this one. If it still exists, someone will open a new issue.\n. @studentdeng is correct. Use Cocoapods orgit clone.\n. relates to #723 and #713 \n. Fixed by 136daba\n. Closing, based on the previous comments. This is not an issue with SDWebImage.\n. SDWebImage does not do base 64 decoding. You can use a dedicated library for that (http://cocoapods.org/?q=base64).\n. Fixed by #744.\n. @RebornSoul could you create a pull request with this fix?\n. Closing due to lack of response.\n. Fixed by #744.\n. Fixed in 0772019.\n. Good point @chgsantos. Could you create a pull request?\n. Fixed by #771.\n. @rs What do you think about this one? Should we include those Xamarin integration files into our repository?\n. @einsteinx2 I agree with @rs here. We are thankful for your effort in the Xamarin integration, but I don't think we can maintain those (due to our lack of Xamarin skills). You could create a repo for Xamarin that wraps up around SDWebImage.\n. Cool. It's great that the pull request is still here, so people can find it if searching the project for Xamarin. Thanks for that.\n. might be related to #803 \n. I think this feature is something that apps needs to implement, based on their needs. I see no point in checking if the ImageView is on screen (hacky). You can implement your own logic, set priorities, cancel requests that are no longer required...\n. Closing, based on the fix\n. @odanu I've created a PR for version 3.5.3 and 3.5.4 : https://github.com/CocoaPods/Specs/pull/9008. It should be available in a few hours.\n. Guys, I have just managed to push a new spec for thelibwebp 0.4.1. Everything should work fine now.\n. The issue no longer exists.\n. Fixed by #646 \n. Fixed by #551 plus #721 \n. @paulthorsteinson does this issue still reproduce? Could you create a dummy project to help us reproduce it? Do you have a working solution?\n. Ok. Closing. Will reopen if it's the case\n. PS: thanks for replying\n. We will fix the GIF usage problems, but in the meantime you can use the solution proposed above or make your own solution, simpler, inUIImage+MultiFormatsd_imageWithData:`, you can disable the gif path\nNSString *imageContentType = [NSData sd_contentTypeForImageData:data];\nif ([imageContentType isEqualToString:@\"image/gif\"]) {\n    image = [UIImage sd_animatedGIFWithData:data];\n}\n. Closing, based on the questions being answered.\n. Agree. We should fix this.\n. Relates to #414 \n. Guys, could you please see if this reproduces with version 3.6.0? I have seen this crash in an app of mine that used version 3.5 of the library. In the next update I released I was using 3.6.0 and the crash no longer appeared (tracking crashes with Crashlytics, so I should have seen it even if it happened just once).\n. @JanGorman thanks for checking. What do you mean by downgrading? Did you use the latest master before? Or an older version? BTW: we just released a 3.7.0 version and I need to know if this still has this crash, so we can start working on it.\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Related to #509 \n. Should be fixed by the latest 4.x branch changes (Redone the stuff from #781 by 062e50a f7e8246 c77adf4 265ace4 0c47bc3. Same stuff: replaced all sync calls to the completion with async, cleaned up the code a bit).\n. Closing due to lack of details. libwebp should be working fine\n. @cherpake please rebase on top of master so it can be merged\n. Replaced by #781. Closing\n. Any updates on this one?\n. Closing. Please reopen if you have more info on the potential issue with SDWebImage.\n. Fixed by #551 plus #721, same as #499 and #387 \n. Yes guys, we need to fix this. I have also seen crashes like this one in my projects, but never found reproduction steps. Does anyone has some ideas on why this happens?\n. Relates to #414 \n. Guys, could you please see if this reproduces with version 3.6.0? I have seen this crash in an app of mine that used version 3.5 of the library. In the next update I released I was using 3.6.0 and the crash no longer appeared (tracking crashes with Crashlytics, so I should have seen it even if it happened just once).\n. @yarmoshy I am curious about one thing. How did you wrap the call to [SDWebImageDownloaderOperation start] when that call is not visibly executed, since our library adds the operations to the operation queue and start is automatically called. Are you calling start explicitly in some way?\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Closing, based on the response from @linkov \n. @grubbyJay would you mind creating a pull request with this fix? I'm not sure I understand the issue you want to fix.\n. Closing, due to lack of a response. @grubbyJay please reopen and make that pull request, if you can\n. It seems to me you don't have the WebP package. Do you use CocoaPods? Have you included the WebP subspec?\n. Closing, due to lack of response. Feel free to reopen if this is still an issue.\n. The crash is no longer reproducible. Also, the pull request contains a lot of mixed fixed. Please create separate pull request for each issue, if those still exist.\n. @rs could you comment on this one?\n. @gongpengjun a couple of questions for you:\n\n-[SDImage cleanDisk] will be called when UIApplicationWillTerminateNotification is received, but cleanDisk will async schedule the task in serial queue self.ioQueue. It might be correct to sync schedule the task to self.ioQueue.\n\nWhy do you think we should do dispatch_sync here on self.ioQueue? It's not executed on the main thread, so this won't stop the app from closing.\n\n-[SDImage backgroundCleanDisk] will be called when UIApplicationDidEnterBackgroundNotification is received, it might be enough to async the task to self.ioQueue:\n\nI think we are no longer dispatching on the global queue. This was fixed in #676 \n. I will go ahead and close this one, as it seems everything is as supposed. Please reopen if you think we need to make the cleanDisk dispatch_sync.\n. This can be achieved using SDImageCache.maxMemoryCost\n. Guys, any updates here? Does the issue still occur?\n. You can process the image after download, before being saved in the cache, using the SDWebImageManagerDelegate protocol. Just implement the - (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL method.\n. You can use the clearDiskOnCompletion and put the UI updates there.\n. I'm not sure we should change the queue for progressBlock. We could just document the fact that is not guaranteed to be executed on the main queue. @rs what do you think?\n. @googler2013 does this answer your question? Is changing the max concurrent downloads setting make it work similarly to version 2.x?\n. Closing due to lack of response. Feel free to reopen\n. We will make this change in the new release (4.0).\n. Replaced by commit eb91fdd. The pull request was not mergeable. Thanks @Tylerc230 \n. Closing, based on the latest comments.\n. Most of the time, you just need the UIImageView+WebCache or SDImageCache and those will include the rest. I don't see a real need to that all-in-one header.\n. @pprochazka72 are you using static images with high res or animated ones (GIF or other format)?\n. We have replaced our GIF component with FLAnimatedImage. You can try our 4.x branch (instructions).\n. Closing. The FLAnimatedImage solution replacing our own GIF is integrated into the 4.x branch.\n. @mythodeia @rs it seems that 3 different people created PR's with the same idea of fixing some of the memory issues we have: scaling down the large images: #787  #884 #894. Do you think it is a good idea? Which one do you prefer? If we merge any of them, I would go with a SDWebImageScaleDownLargeImage option so people can go around it if they really need to.\n. @mythodeia I agree. Now since I saw that #787 was the most solid PR and it also included the Apple sample for downscaling, I considered including it is best. I merged it via 959d965 (of course it had conflicts and I updated the code). Then I added another commit 00bf467 cleaning stuff up in the Decoder class. Take a look and let me know what you think. We still need to bechmark it.\nEveryone, #787 and 00bf467 should give you a good solution for dealing with large images. Together with the GIF handled by FLAnimatedImage, this ticket should be done now.\n. This doesn't sound like an issue with SDWebImage, so I'm going to close this issue. Please move conversations like this to StackOverflow or a similar forum. This place is for library issues\n. @leverdeterre could you please rebase this on top of master, so it's mergeable?\n. Replaced by 30f6726\n. We use a category. You can search for more info about Obj-C categories. I have included here a link from Apple Doc. \n. Indeed, you don't have the WebP submodule. Either do git submodule init or simply install via CocoaPods.\n. This was refactored, now we decide which method to use based on the image format (as it should be).\n. @richmonkey Could you give a few details how you concluded AFNetworking and ASIHTTPRequest both call NSURLConnection's cancel on the same thread?\n. Closing due to inactivity. Please reopen if you want to further address this issue and you can explain your conclusions.\n. This issue will be totally avoided by replacing the network code with NSURLSession in 4.0.0\n. We have replaced our GIF component with a library from Flipboard (FLAnimatedImage). Could you try our 4.x branch (instructions) and see if it helps?\n. Closing. The FLAnimatedImage solution replacing our own GIF is integrated into the 4.x branch.\n. Old PR - closing (no longer applicable). Sorry this one didn't get merged.. Closing, based on @rs's response. @dzenbot please reopen if the response does not clarify your questions.\n. @rs Preserving image transparency is important, but let's not forget UIImagePNGRepresentation is considerably slower than UIImageJPEGRepresentation. Instead of hardcoding the representation, this could be determined at runtime (based on the fact that PNG has that 8-byte signature at the beginning see Wikipedia or WWW Consortium).\n. @rs any comment on this? At this point I cannot upgrade to SDWebImage 3.5.1 because of this change (PNG instead of JPEG) that implies some performance slowdown. Ideally for me, SDWebImage should have the option to determine between JPEG and PNG at runtime, based on the image format. But an option could work as well. \nAnother thought: this change is a significant change to me so it doesn't fit well with a patch update from 3.5 to 3.5.1.\n. of course, will do. :)\n. @rs here is the pull request https://github.com/rs/SDWebImage/pull/581. The change was not as important as it looked, since it only affected a limited case. Details in the pull request.\n. This should be fixed now. Please try again with the latest version.\n. I think the SDWebImageRefreshCached flag is what you are looking for. There were some issues with it, but with the latest version it should work fine\n. Closing, based on the last comments.\n. related to #488 \n. @bfoz does the issue still occur with the latest version of SDWebImage?\n. Fixed by #771.\n. Redirect support was added. Please try with the latest version.\n. @rs What do you think we should do over here? Update this pull request? It still relies on dynamically adding properties to the classes (a practice I don't think we should encourage).\n. @klaaspieter could you rebase this on top of master, so it can be merged?\n. Thanks @klaaspieter. Merging\n. Need to investigate this in more depth, but at a first glance, I think the @synchronized removeObject from the runningOperations needs to run right after the completionBlock is executed. We might do\nelse if (image) {\n    dispatch_async(dispatch_get_main_queue(), ^{\n        completedBlock(image, nil, cacheType, YES);\n        @synchronized (self.runningOperations) {\n            [self.runningOperations removeObject:operation];\n        }\n    });\n}\n. I think this issue no longer applies, as this code now looks like\nelse if (image) {\n            dispatch_main_sync_safe(^{\n                if (!weakOperation.isCancelled) {\n                    completedBlock(image, nil, cacheType, YES, url);\n                }\n            });\n            @synchronized (self.runningOperations) {\n                [self.runningOperations removeObject:operation];\n            }\n        }\n. Could you use Instruments (in particular TimeProfiler) to determine what are the causes for the scrolling performance?\n. Yeap, it looks fair, if the images are that large.\n. Hi guys,\n\nThis flag causes the linker to load every object file in the library that defines an Objective-C class or category. While this option will typically result in a larger executable (due to additional object code loaded into the application), it will allow the successful creation of effective Objective-C static libraries that contain categories on existing classes.\n\nSince we are using categories in SDWebImage, we need the ObjC flag. The only workaround I can think of is, as @khazaei stated, include the source files directly in your target (but doing that is not a good practice). I think the other frameworks should fix and accept this flag.\n. See #376 for the resolution. It implies using -force_load SDWebImage.framework/Versions/Current/SDWebImage instead of -ObjC\n. Fixed by e6c0f56, 1e53e91 and #297 \n. @donholly any updates on this?\n. @Piero87 does the response from @donholly answer your questions?\n. Thank you.\n. @albertschulz this pull request is not mergeable+there is an issue with the SDWebImage/SDImageCache.h file, as there is a broken merge there <<<<<<< HEAD...\nAlso, could you please explain in detail what issues you are trying to address and how. It's a pretty big change and we need to understand it before being able to merge it.\n. This pull request can't be merged and has some unresolved conflicts in the code. Plus we would need some info about what the issues are you are trying to fix. We will close it, as it's inactive for a couple of months. Please reopen if you can update it and explain in detail what it does.\n. @chresko could you create a pull request with this fix?\n. @chresko any updates here? Do you still have the code?\n. Related to https://github.com/rs/SDWebImage/pull/706\n. Fixed by #766. \n. Looks good, thanks.\n. Thanks @bkoc for the details. Closing\n. Closing, based on @hsoi's comment.\n. Same as #538. \n787 and 00bf467 should give you a good solution for dealing with large images. Together with the GIF handled by FLAnimatedImage, this ticket should be done now.\n. Fixed by #694 \n. Animations are not in the main scope of SDWebImage, this behaviour can be achieved with the current version by directly downloading the images and setting them as you wish. +the pull request is not mergeable. Closing\n. This issue should be fixed by 6e4fbaf, since we no longer dispatch_sync inside diskImageExistsWithKey and use the NSFileManager defaultManager\n. The best way to add SDWebImage to your project is through CocoaPods. You should follow the install instructions on the readme page.\n. SDWebImageManager uses the shared instance of SDWebImageDownloader (0772019).\n. Closing based on the last comment\n. :+1: \n. The completedBlock is guaranteed to be executed on the main queue (on the last version).\n. Guys, does this issues still exist with Xcode 5.1 and the latest SDWebImage?\n. Fixed by #587 \n. guys, does this issue still exist?\n. The warnings should be fixed in the latest master.\n. Closing, the warnings should no longer exist in version 3.7.0.\n. @csaby02 Does this issue still apply to you? Do you have a dummy project you can share where it's easy to reproduce it?\n. Fixed by #840 \n. You need one of the -ObjC or -force_load PATH_TO_LIBRARY_FILE flags. Please use the preferred install method (CocoaPods), or, just use the git clone --recursive.\n. Please install via CocoaPods or directly using git clone + git submodule init.\n. @bw0lff does this issue still reproduces for you? On which SDWebImage version? Do you have some specific steps? How did you check?\n. Thanks @bw0lff. Based on your comment, I will close this issue. If you manage to find more details and it turns out to be a SDWebImage issue, feel free to reopen it. Cheers.\n. This should be fixed already. Please reopen if it's still the case.\n. I've created a PR for this: https://github.com/CocoaPods/Specs/pull/9008. It should be available in a few hours.\n. 3.5.4 is available via Cocoapods\n. This is deprecated, current version is 3.6. Closing.\n. Guys, what is the current status of this issue? Does it still exist? Is this pull request the proper fix? If so, you need to rebase it on top of master so we can merge it.\n. Since this pull request didn't get updated, replaced it with #783 \n. Fixed by commit 6e4fbaf.\n. - clearDisk and clearDiskOnCompletion will evict all the image files from the disk\n- cleanDisk and cleanDiskWithCompletionBlock will evict only the images older than 1 week\nNote: if you have any custom paths added, you need to clean those up yourself.\n. Guys, could you bring more details?\n. That might be it. If the connection is not that great, no image will get displayed.\n. Closing, due to lack of details.\n. Those methods were dropped when 3.0 was rewritten. You can always cancel the download operations.\n. Guys, could you details this \"download speed\" issue? \n. Guys, can you provide more details? iOS version, library version, how often can you reproduce it, do you have a demo app, crashlog, \n. Closing due to lack of info. Please respond if you have more details and we can look into the issue.\n. Does this still reproduce with the latest version of SDWebImage? Any other info you can provide?\n. Closing based on lack of response. Please reopen if it's the case.\n. Please see https://github.com/rs/SDWebImage/issues/862 for a fix. It's an installation issue.\n. The backgroundCleanDisk is intentional, but it only deletes the files older than maxCacheAge. By default, this is set to a week. Basically, when the app enters the background, we try to clean cached images that are older than 1 week. This is not just to save disk space, but to make sure update images on the server side get refreshed.\n. This was fixed in version 3.5.3. It should be available with Cocoapods in a few hours.\n. This issue should be gone now. Please reopen if it's the case.\n. You can use the SDWebImageRefreshCached flag for that.\n. I've created a PR for this: https://github.com/CocoaPods/Specs/pull/9008. It should be available in a few hours.\n. 3.5.4 is available via Cocoapods\n. Thanks\n. Could you provide some details about the crash? Crashlog, scenario, ...?\n. Any other details guys? Could you create a dummy project where we can easily reproduce the issue?\n. Guys, updates please.\n. There are no benchmarks available to compare the two libraries. I compared image caching libraries a few months ago, but I didn't include EGOImageView.\nFor the 1st question, it would be faster for downloading if the images were compressed (i.e. gzip the HTTP response).\n. This crash should be fixed. Please retry with the latest version and reopen if it still occurs\n. Guys, does this issue still happen? I have reasons to believe this got fixed in 3.6.\n. @snpatil1 do you have updates? Did you release a version with checking?\n. :+1: \n. Sorry about that guys. This won't happen again in the future. Thanks for reporting.\n. @phamquy Is this still an issue? Any chance your images server doesn't work as expected and SDWebImage is partially downloading the images?\n. Great. Thanks. Closing.\n. already done.\n. I think this is fixed now. Please reopen if it's the case\n. Please retry with the latest version\n. You need to use CocoaPods or directly clone from Github (but make sure you get the libwebp submodule) git clone --recursive\n. What indications do you have this is an issue with SDWebImage?\n. Closing, most probably not an issue with SDWebImage.\n. Could you also provide the code that is causing this compile error?\n. Your block was returning a float, while the param was expecting a void return type.\n. The recommended way to install SDWebImage is via CocoaPods. If you don't want to use CocoaPods, please do a 'git clone --recursive'. This will prevent issues like that to appear (linking to frameworks, new 64 bit platform, ...).\n. This issue should be gone now. Please reopen if it's the case.\n. Fixed by #694 \n. I think this issue is fixed with the latest 3.6.x version. Please reopen if it's the case.\n. Please don't use the .framework. Install SDWebImage using CocoaPods or by using git clone --recursive\n. Please don't use the .framework. Install SDWebImage using CocoaPods or by using git clone --recursive\n. @pixelcaido could you please rebase on top of master?\n. Thanks @Whirlwind, I didn't see that (even if it was right under my nose).\n. Closing based on @sapzildj's comment.\n. @gacover could you please try this using the latest version (there was a major refactoring since version 2.x).\n. Closing, due to lack of response here. Please reopen if it's still an issue.\n. Would any of you be interested in implementing this?\n. Please reopen when you have some more info, I don't know how this can be implemented.\n. Closing, based on @Mazyod's response. @leonsg please reopen if you still have this problem.\n. Since you are using images stored in a custom path, you need to declare that using addReadOnlyCachePath:.\n. @Mazyod is right. We can't risk taking all available threads with downloads. @rs might have some extra details, as he did this in 8f50bf6\n. @rs could you comment on this?\n. Sure. If you look at the definition of the progress block:\ntypedef void(^SDWebImageDownloaderProgressBlock)(NSInteger receivedSize, NSInteger expectedSize);\nYou have defined the 1st argument as NSUInteger and it was expecting NSInteger. They must match.\n. @appletesting2 what's with the notification? Do you have a stack trace / crash log for your crash? Might be the same crash as #691 \n. Closing due to the lack of response. Please reopen if you have more info on this.\n. @brynbodayle could you provide more details about this issue? How did you notice this? What is the cause?\n. Good catch @brynbodayle. Thanks. Merging\n. I don't seem to remember either. :) It doesn't seem to be related, this is just a fix for sync the access to runningOperations.\n. Do you refer to gif's as animated images?\n. Thanks @rokemoon \n. Yeap, SDWebImage will take care of the memory warnings on its own.\n. SDWebImage does not currently support Mac OS, never has. Feel free to add support for that.\n. Closing. The 4.x branch support Mac OS X. 4.0.0 release is coming next\n. Relates to #414\n. Guys, could you please see if this reproduces with version 3.6.0? I have seen this crash in an app of mine that used version 3.5 of the library. In the next update I released I was using 3.6.0 and the crash no longer appeared (tracking crashes with Crashlytics, so I should have seen it even if it happened just once).\n. @AvdLee thanks for checking. Seems like this crash won't go away easily\n. @karsawu It's a valuable piece of information that the crash occurs with 3.7 but it doesn't with 3.6. I will look into this again soon\n. Then I misunderstood your comment. What were you trying to say?\n. I got it now. From what I know, this crash is an old one and it happens in older versions as well.\n. None that I know of. From what I know, this crash happens rarely. It's not supposed to happen for a lot of users.\n. No updates yet, sorry. We haven't got any info on why this crash happens. I will find some time to really look into this, as it seems this is the biggest issue with SDWebImage at this point.\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Unfortunately, you can't cancel a dispatch_async. See more details on StackOverflow. Instead, you could try using NSOperation. That one can be cancelled.\n. This should be fixed.\n. You could try to add the path to the local images using [SDImageCache addReadOnlyCachePath:]. Then try to use setImageWithURL: by constructing the URL like this:\nNSURL *fileURL = [[NSURL alloc] initFileURLWithPath:path isDirectory:NO];\n. thanks @Akki9326. Will look into this, not sure if we planned to support this.\n. @mythodeia We don't plan for that. Our library is supposed to do image download and caching. If the image is already local, there is no point in that. I would close this.. @salling could you rebase this on top of master so it can be merged?\n. Replaced by #781. Closing\n. @rs I think this pull request was updated according to your feedback. Could you please take a look and merge if you agree? It looks good to me\n. Thanks\n. This behaviour could already be achieved with the existing code. No need to add an extra option for that.\n. @talklittle you are right, I misunderstood initially.\n. Could you please rebase so we can merge it?\n. Sure. Thank you too for the patience :)\n. You can use the SDWebImageDownloaderHandleCookies flag to enable HTTPShouldHandleCookies.\n. I think this issue is fixed now.\n. What version of SDWebImage are you using? And what do you mean by \"I change to arm64\"?\n. It compiles fie for me. Also tried with the demo project. Could you check you project settings?\n. @prasathbabu Are you using a compiled SDWebImage.framework?\n. Please install it using Cocoapods, as that is the recommended installation.\n. the Podfile should use the lib name, not SDWebImageFramework:\npod 'SDWebImage'\n. How did you create it automatically? It should be something like\n```\nplatform :ios, '6.1'\npod 'SDWebImage'\n``\n. you need to remove the old reference from your project to the SDWebImage.framework. This is referenced from the Pods.xcodeproj. Just use the xcworkspace that was created by the pod command.\n. @Klabauterman could you please rebase on top of master so we can merge this?\n. Agree. Thanks @Whirlwind. So this was actually fixed by #766. Cool\n. Can anyone create a pull request with this?\n. Fixed by #766 \n. @erango check #1297, it should fix the issue you are describing. Please note this is only merged into master and not yet included in any release.\n. For best results and easy integration, please install via CocoaPods. Otherwise, just make sure you follow all the steps from the Readme.\n. SDWebImage doesn't support spdy. Feel free to create a pull request with this, if you have the time.\n. @yasirmturk please rebase on top of master\n. No, if you update your branch, github will pick that up automatically\n. Hi @yasirmturk. Thanks for the effort, your implementation with a few small adjustments was added via commit 50c4d1d.\n. There is no way to disable caching empty images. But why does your server respond with a valid image if the image is not valid? I think this is a service issue, not a problem with SDWebImage. I will go ahead and close this issue. Feel free to reopen if you have more info about it and it appears to be a bug in our library.\n. I see. Are you interested in creating a pull request with a fix? For most our users, this should not be an issue, but I understand your situation. An alternative would be for you to use theSDWebImageDownloaderdownload methods directly and cache only when the image is valid (this would not imply changes in the library code).\n. Related to #723 point 1 - there is a bug,SDWebImageLowPriorityis not used.\n. I would rather expose thecacheKeyForURLmethod fromSDWebImageManager`, it should give developers more flexibility.\nThen, you could do:\nSDWebImageManager *imageManager = [SDWebImageManager sharedManager];\nSDImageCache *imageCache = imageManager.imageCache;\nNSString *key = [imageManager cacheKeyForURL:url];\n[imageManager.imageCache storeImage:image forKey:key toDisk:YES];\nWhat do you think?\n. Good catch, thanks for that. Yeap, we might do both.\n. Fixed by #751 \n. Or it might be something wrong with the image, since the cost is computed using the image size. Could you debug and check this?\n. You are either having an issue with the image size or you are using an older iOS version like 4 or 5 under which using NSCache with costs produces issues.\n. Once SDWebImage has cached an image, it will only refresh it in a week.\nCould you give more details about this? I'm not sure I follow you\n. There is a pull request with this #759. But even without that, you can retain the url in a UITableViewCell property and compare it with the one you used for the request.\n. I think you can check it, since the issue is the cell that started the request might get reused before the response arrives. I would do something like\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n   ...\n   cell.imageUrl = url;\n   __weak typeof(cell)weakCell = cell;\n   ...\n   [cell.customImageView setImageWithURL:url completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {\n      __strong __typeof(weakCell)strongCell = weakCell;\n      if ([strongCell.imageUrl isEqual:url]) {\n         strongCell.customImageView.image = image;\n      }\n   }\n}\n. I was giving you an option until that gets merged in.\n. :+1: \n. It will probably get included in the next version. If we can't find a backwards compatible way, we might need to bump to version 4.x\n. Go ahead and try it. We will need a way to know which completion blocks to call and with how many parameters.\n. Fixed by #770 \n. @robertmryan thanks for the detailed write-up.\n\nI notice that SDWebImageDownloader checks for high priority queues ...\nBut it doesn't do the corresponding check for low priority.\n\nThis was fixed via commit 136daba\n\nI notice that the SDWebImagePrefetcher is instantiating its own SDWebImageManager (not using the sharedManager), which means its instantiating its own SDWebImageDownloader, too.\n\nThis was also resolved in commit 0772019. It's not exactly as you requested it, as SDWebImagePrefetcher will still have its own instance of SDWebImageManager, but now SDWebImageManager uses the SDWebImageDownloader.sharedDownloader, so they will all share the same downloader.\n\nI'm wondering if you could clarify your choice of maxConcurrentOperationCount and maxConcurrentDownloads. It looks like SDWebImageDownloader defaults to 2, and SDWebImagePrefetcher defaults to 3. Are you simply trying to leave some excess network bandwidth for non-SDWebImage requests?\n\nThis is a good question for @rs. I can only see this commit 8f50bf6 with the message Set max concurrent to 2 by default, so I can only guess its something like you said, an attempt not to stuff the network component with downloads.\n. Ok then. I will close this one, as we answered all the questions/issues.\n. Then you should go ahead. Robbie has picked the people based on active contributions on the project and, most probably, skills and style. You could do the same. I suggest you start from SDWebImage contributors and choose people you could trust, based on their activity.\nI have only one pull request merged into SDWebImage, but I would gladly help clean and update this project because I like it. It's up to you.\n. Thank you. I will start looking at the open pull requests and issues. For now, I will just look at issues that are straight-forward and ask questions where I'm not sure (at least until I can find my way around the codebase).\n. Closing this\n. Fixed by #732 .\n. @Whirlwind please create separate pull requests, one for the restructured cancel logic and another for the UIImageView+HightlightedImage. Plus, please explain in detail what you wanted to achieve and how, those are big changes, hard to follow.\n. Just create 1 branch (for the cancel refactoring), cherry pick the commits that need to go in there, then submit a pull request with it. Do the same for the 2nd branch (uiimageview+highlighted)\n. I would start the branches from the latest master\n. The [SDWebImageManager sharedManager].imageDownloader is actually the same as [SDWebImageDownloader sharedDownloader]. You just need to set the HTTP headers for that instance.\n. @spmsv Please provide more details about the crash (crash log, stack trace, ...)\n. Closing due to lack of details.\n. Yes you can, but the compiler will issue a warning.\n. Looks good to me. @rs Please comment if you disagree\n. Good idea, we might look at that on how to fix https://github.com/rs/SDWebImage/issues/548\n. By merging #1575 into the 4.x branch, I think we can close this thicket. Feel free to test it and let us know if it works.\n. We will release a new version very soon that fixes this issue. Until now, Xcode6 is in beta, so you cannot submit apps using it. That is why this is not super urgent.\n. @anasb you should open an issue on the MWPhotoBrowser to update their SDWebImage reference.\n. CocoaPods latest version of SDWebImage is 3.7.1\n. Closing, based on the response from @taylornrolyat \n. Can you put up a dummy project that can demonstrate the issue?\n. Related to #803 \n. :+1: \n. We will look at releasing an update soon.\n. Looks legit to me. I'm merging it. @rs Please review this to make sure it's a good fix\n. Hmmm, that is a good point. Any ideas on how to decouple those two? We can't use any protocol as NSURLCache directly inherits from NSObject without any protocols.\n. Closing issue based on @mythodeia's response. Thanks @mythodeia\n. What do you mean by \"How can I ho it\"?\n. A 3.7.0 release is in progress. It should be out there in a few days (we are still triaging through the big chunk of open issues to fix as many as possible).\n. The master branch should be working fine. We just need to add a couple of fixes so we can release the new version. Until then, you can get the latest using CocoaPods pod 'SDWebImage', :head\n. 3.7.0 version is now released. Available via CocoaPods as well.\n. Use the [SDWebImageManager downloadWithURL:options:progress:completed:] method.\nFor more details, look at the UIImageView (WebCache) implementation for setImageWithURL:placeholderImage:options:progress:completed:\n. You cannot pass a nil completion block. See the 1st line from the method implementation\n// Invoking this method without a completedBlock is pointless\nNSParameterAssert(completedBlock);\n. Replaced by e410494\n. @rs Please review as well, especially the else if (self.finishedCount == self.requestedCount) condition. Looks legit to me, but I'm still not experienced with this code.\n. @robertmryan thanks for the detailed explanation. You are 100% correct.\n. Closing based on @dchohfi's comment. Thanks.\n. This has nothing to do with the SDWebImage code. It's probably a bug in your VC rotation logic.\n. Indeed, the animation of the appearance should be done in your code, outside of SDWebImage.\n. What is the size difference (original vs saved on disk)? Could you provide a link to the image you are downloading?\n. I have just tried it using the demo project, original image size is 43kb, size on disk (cached by SDWebImage) is also 43kb. I might be missing something\n. @smallqiang could you give a more consistent scenario? We need to reproduce this before we can fix it.\n. Until we have a clear scenario/image that causes this, I will go ahead and close it.\n. The recommended install ways are via CocoaPods or by running git clone + git submodule init\n. you need to run git submodule init\n. Probably git clone --recursive https://github.com/rs/SDWebImage.git. Worked for me.\n. Great. Closing the issue\n. Actually, if you install from CocoaPods specs, that spec correctly uses version 3.6. What we need to do is update the podspec file from our repo.\n. Yeap. Thanks.\n. We can do this, if we:\n- besides the existing SDWebImageCompletedBlock and SDWebImageCompletedWithFinishedBlock, add 2 new block types with different names, that also include the NSURL param\n- for all the methods that use a completedBlock in form of SDWebImageCompletedBlock or SDWebImageCompletedWithFinishedBlock, define new methods (they need a different name) that use the new blocks, plus deprecate the old ones\n- make sure all our internal calls use the non-deprecated methods.\n- this way, people will still get the old completion blocks working\n. Great. Looking forwards to it\n. It's still not mergeable. Could you rebase on top of master?\n. I think we can come up with better names for the new methods. Let me think about this.\n. @ilushka85 many thanks for the heavy lifting for this. I created a new pull request that is mostly based on what you did, with a few changes. #770 I hope you don't mind this.\nThe reasoning for replacing your pull request with a new one:\n- your contained some changes that were already merged (i.e. the change from SDWebImage/SDWebImageCompat.m) \n- it did not replace and deprecate all methods (decided to do a universal change from set* to load*)\n- method and typedef names could be better\n- wanted to redo the docs\n- indentation was inconsistent\n. Since #770 was merged and it replaces this, closing this pull request\n. No, there is no functionality to disable caching from a host/link. Why would you need that?\n. Closing, as we don't have this support.\n. It think it fixes it. @poetzhangzi could you confirm?\n. Thanks, @dchohfi \n. @rs could you take a look at this? I'm a bit concerned about what this could break.\n. Ok, merging. Let's see how this goes. Thanks @n13 \n. @n13 could you please take a look at those crashes?\n. @n13 we have a limited amount of unit tests, we are working on increasing this coverage. I don't think we have images we know that can cause this crash.\n. @jdelStrother could you please check with 3.7.1? This version is supposed to fix the crash. Fix was #819 \n. Hmm. You might be right, that a race condition still happens there. I'll open a new issue for that.\n. Thanks @Whirlwind \n. Do you mean we missed some timeouts besides NSURLErrorTimedOut?\n. You can. Download the images with AFNetworking, then from the NSData create an UIImage and use SDImageCache storeImage:forKey: to add it to the cache.\n. You get all the features from AFNetworking. Just that you cache and load with SDWebImage.\n. You have to implement that logic in your own code. I don't think SDWebImage should handle this.\n. I sincerely don't know if this is something the lib should be doing. One can do this by processing the images after download using the SDWebImageManagerDelegate. @rs what do you think about this?\n. @gsempe we are going to close this. Sorry for that, but I think this would cause more confusion that solve issues, plus this behavior can be easily achieved using SDWebImageManagerDelegate imageManager:transformDownloadedImage:withURL:\n. Besides GIF related memory grows, I didn't see other cases where we have memory issues, especially since NSCache will respond to a memory warning immediately. Could you detail?\nIf the app would have mem issues because of the size of the downloaded images, you are right, it would be too late. I didn't get that right away. \n. @rs please take a good look at this. I think it's all good, but you know this code better than anyone. Thanks in advance.\n. @rs I totally understand your point about keeping the library clean. But I don't think what we have right now for the next version qualifies for a major release (other than if we were breaking compatibility). I think the approach  you suggested (prefixing the method names) is great and I vote for that. I will go ahead and update my pull request. Please let me know if you disagree so I don't do that.\n. I updated with the sd prefixes for all the category methods. Please review\n. I created a 4.0.0 milestone and issue #774 set on 4.0.0 that will remind us to clean those up. Could you merge it now?\n. Thank you\n. @Whirlwind You worked a bit on this :) It's a big change to me and I must say I don't know if we really need this. What issues are you trying to fix with this?\n. @rs @matej Please take a look at this and comment.\n. Ok. Merging based on @rs's comment. \n@Whirlwind I couldn't understand from your comments what are the issues, but after looking again at the code, I did. Thanks\n. @matej you are right, we should deprecate the old methods.\n. Update: I did deprecate them, just 2 methods [UIButton cancelCurrentImageLoad] and [UIImageView cancelCurrentArrayLoad]\n. I don't think we need to, since the operation is going to be deallocated. @rs am I right?\n. You are right. The operation is retained and stored using OBJC_ASSOCIATION_RETAIN_NONATOMIC. The reason why we didn't see leaks here is:\n- when trying to set a new image from url, we first call cancelCurrentImageLoad that will set the old operation to nil.\n. @rs do you think we should set the operation to nil after the completion block is called aka when the operation is finished?\n. @Whirlwind could you make a pull request with this fix? You are more familiar with this code, after your changes in #771 \n. Actually, #771 removes the storage of operation, so this no longer applies.\n. @rs I've started working on a unit-test environment. You can take a look at my branch.\nI definitely inspired from AFNetworking and:\n- created a SDWebImage.xcworkspace\n  - includes the existing SDWebImage.xcodeproj (responsible of compiling the library)\n  - includes the existing SDWebImage Demo.xcodeproj\n  - includes the newly created SDWebImage Tests.xcodeproj (tests project)\nUnit testing backbone:\n- XCTest framework (the one from Apple)\n- XCTestAsync - extension for XCTest that allows easily creating asynchronous tests. Relies on dispatch_after. You just need to use XCAsyncFailAfter and XCAsyncSuccess.\n- Expecta - matcher Framework for Objective-C/Cocoa. This one just makes it easier to set expectations. i.e. expect(originalImageURL).to.equal(imageURL) or \nexpect(^{\n    // block of code\n}).to.notify(UIKeyboardWillShowNotification);\nexpect(^{ /* code */ }).to.raiseAny();\nAnother detail to consider: similarly to AFNetworking, I changed the demo project so it directly includes the SDWebImage source files (instead of referencing the project).\nLooking forward for your feedback, as I want to know if this is a good direction.\nI think we have a strong need for unit tests, as with the amount of changes we make, we can still be sure at least the basic functionality is preserved.\n. I'm not sure why Mattt included the source files directly. Maybe because it's easier to setup the project. Now that I think about it more, perhaps it makes sense to have the demo project demo how to include the library. And our recommendation (whether it's via CocoaPods or not) is to include the SDWebImage project as a subproject. I'll try to make that as it was.\n. Done.\n. So you're ok with the tests setup?\n. FYI: I've merged those changes in via commit c7330db, so we have the backbone ready for future tests and no need to merge with other branches.\n. We need to enable Travis CI for this project. I will create the yml config file so it will build and run the tests. This will help with the pull requests being validated before merging.\n. Starting Xcode6, the XCTestASync is deprecated, we can work our way with the default implementation  from Apple (XCTestExpectation).\n. Seems this was done in https://github.com/rs/SDWebImage/pull/898\n. @rs could you login with your GitHub account to https://travis-ci.org/rs/SDWebImage and enable Travis CI? I have already create a .travis.yml file and it should work.\n. Thanks @rs. I managed to update the .travis.yml config file and now the build and test are working fine.\n. We just need to add more tests, but even as they are right now, we would still be able to catch a couple of issues. At least the framework and demo project building correctly.\n. @Whirlwind good call. I updated the demo project in fe4b3a0\n. For now, we didn't change all the methods, just the ones that were subjects to naming collisions with other libraries (i.e. AFNetworking). @rs do you think we should rename all public methods using the sd_ prefix?\n. Closing, based on the response from @mythodeia \n. Yeap, we have this fix prepared for the next version, we just need to wrap up a few other fixes until we can release it. Until then, feel free to use the latest master (pod 'SDWebImage', :head)\n. Please detail more about 'not working on iOS 7.0'.\n. @sourcebits-mahesh Could you please detail this issue you are having?\n. if the url is added to the failedURLs array, it's probably because it failed. You can debug and add a breakpoint in SDWebImageManager at line 150 (on the latest master) on the line [self.failedURLs addObject:url];. There you can inspect the error and see why it failed. As @mythodeia said, providing some urls could help us help you :)\n. We can't access those pictures. Probably ourservename.blob.* is in your internal DNS. You must debug on your own, as I suggested in the previous comment\n. If the url is in the failedURLs array, then we won't retry to download from it. At this point, we never remove from the failedURLs array. Basically that gets recreated when the app is restarted.\n. @sourcebits-mahesh any updates here? Have you figured this out?\n. Closing due to the silence.\n. @rokgregoric Good catch. This was an issue introduced by #560 and merged in by myself. I missed this. Thanks.\n. @rs @donholly @matej @cherpake @salling @lavoy @akhenakh I would appreciate if you guys could review this thoroughly. I will add more tests as I have time\n. Guys, could you please review this? Especially @rs \n. Ok, I will do some profiling for sync vs async.\n. I profiled a bit the sync vs async solutions, using an iPhone 4. \nI think the async one works better (as I would have expected), as it doesn't block any queue. It doesn't make sense why in the async version, the displaying would be slowed down. We are just registering a block for execution on the main queue, the only difference is if ioQueue needs to wait for the completion executed on the main queue or it can get to a new operation. See the screenshots (I can provide the Instruments trace files as well) - async is the first one.\n\n\nThe only issue that popped on the async solution were some crashes inside sd_setImageLoadOperation because operation was nil. That happened because the operations were executed fast and deallocated before getting to store them. No issue there, just need to add a check for nil.\n@rs I think this is the only major showstopper for the 3.7.0 that we are being asked to release asap.\n. Guys, I've given this more thought and I think the safest way to do this is:\n- release a 3.7.0 without the change from sync to async. I will only cherry pick the fixes for the deadlocks (46d23ad) and for race condition for canceled ops (a8f7a94)\n- for the next major version 4.0 we will incorporate the async calls and ask people to test using master.\nThis was due to the impossibility to predict the impact of changing those sync calls to async and the need to release the 3.7.0 version that a lot of developers are asking for.\n. Redone this via commits 062e50a f7e8246 c77adf4 265ace4 0c47bc3 on the 4.x branch. Same stuff: replaced all sync calls to the completion with async, cleaned up the code a bit. \nAnother important change is based on http://blog.benjamin-encz.de/post/main-queue-vs-main-thread. This article states that the main thread may execute code from other queues than the main queue, so we actually want to check for main queue to assure our UIKit operations.\nWe used: strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())\n. @croath I see your point, but I feel safer with the async code, since we have a history of locking here and there. Take a look and let me know what you think.\n. Hi @MirkoBrunner,\nThanks for reporting this. Could you create a pull request with a fix?\n. Great that you found a solution. Closing the issue.\n. @rs could you please review and merge this (if you're ok with the changes)?\n. @rs could you please look at this too?\n. Merging, based on @rs's comment.\n. Hi there. I just tried this on the simulator from Xcode 6 beta 3 using the demo project and everything worked fine. Could you please check using the demo project? I think you might have an issue with your code.\n. Any updates her, @fdezjose ?\n. You don't have the webp files. Please install via cocoapods or using git clone --recursive so you get the libwep files (they are referenced as a git submodule).\n. Great. Thanks.\n. I can't reproduce the crash using the demo project. I don't see why a crash because of missing imports. Could you provide more details? Does your copy of SDWebImage contain the UIView+WebCacheOperation class?\n. BTW, fixed the deprecated misspell with 30e034d\n. There must be an issue with your project (either doesn't properly include the UIView+WebCacheOperation files or it has an issue loading categories (might be missing force_load or load_all flags)). Please try using our demo project. Also, on the clean project you set up, check if the UIView+WebCacheOperation files exist.\n. I just created a test single-view project where I installed SDWebImage via cocoapods\nplatform :ios, '6.1'\npod 'SDWebImage', :head\nRan sd_setImageWithUrl: and everything went smoothly.\n. Ok @Kry256, thanks for checking. Will close this one. Please reopen if you still encounter this issue.\n. @valentinradu we prefixed with sd_ to avoid naming collisions with libraries like AFNetworking (which also has an UIImageView category with imageWithURL:... methods. It's kind off having a namespace, since Obj-C doesn't support one built-in.\n. hi there. Of course we want to support iOS 8. Could you please try the demo app from our project on iOS 8 and see if the completion is called? I tried it myself and it works fine for me.\n. to get the entire repository, run git clone https://github.com/rs/SDWebImage.git --recursive. We need the recursive part because there is a git submodule libwebp that otherwise won't be retrieved.\n. You can still use CocoaPods, as that is the recommended way to include with SDWebImage. Until we release a new version (3.7.0), you can use pod 'SDWebImage', :head\n. @jyothireddy58 you should definitely update to the latest version of SDWebImage. Make sure you use CocoaPods or git clone --recursive git@github.com:rs/SDWebImage.git so you also get the webp package that is available on a separate repository.\n. How did you install SDWebImage?\n. You have 2 ways to properly install SDWebImage, as I said before. You either use CocoaPods or do a recursive clone using git clone --recursive git@github.com:rs/SDWebImage.git. Your copy of SDWebImage does not include the libwebp dependency. Please remove it and install as I suggested.\n. You can start with this http://guides.cocoapods.org/using/getting-started.html\n. CocoaPods takes care of that.\n. @jyothireddy58 I am asking you again, did you remove your old copy of SDWebImage and installed a new one using the recommended ways?\n. I don't think we should avoid calling the completion block in any cases. Most (if not all) Apple API will always call the completion block, otherwise you might end up with incomplete operations or memory that is not deallocated. We have recently added the NSURL as param of the completion block, so doing  this check is very easy for the developers. I suggest we don't make this change. @rs what's your opinion?\n. @AdibContractorCC thank you for the effort put into this pull request, but we are not going to include it, for the reasons listed above.\n. Sorry, I missed that the completion block was called. \nI agree this would help developers. \nIn order to include such a change, I think we should make it consistent for all the other similar cases (UIButton, ...). And I would make this change in a major version, since we are kinda changing the contract. We are calling a completion block in failure instead of success and that can affect one's code.\n. Agree. The issue here is we are changing the behaviour and this impacts all the apps using our library.\n. Not sure when we will release a major version (this would mean a 4.x version). Right now, we are pretty busy with the 3.7.0 release.\nRegarding a pull request, you could do the URL check for all the other places (UIButton, MKAnnotationView, ...) and you can create the pull request for the 4.0 branch I just created, that way we don't interfere with the current release.\n. @zakhej any updates? Does it shill happen with the latest version? Which iOS versions? How often? Can you reproduce it constantly?\n. @rs could you please review and comment? I don't fully understand the way we use the run loop for download operations\n. Considering the changes from #1578, we no longer rely on CFRunLoop and we already call cancelInternalAndStop on the current thread, this PR is no longer relevant. Closing.\n. @DimaVartanian Sorry I didn't respond earlier (lack of time). I will look at this soon.\n. @DimaVartanian This method can return a nil operation, if the key is nil, if the done block is nil or if the image exists in the memory cache. This is the expected behaviour.\n. Closing, please reopen if there is another issue there.\n. @DimaVartanian this method for using the previously cached image was just added (see #541 and #599) to avoid the flickering between placeholder and the image that is cached (in that case). The author just added it for UIImageView. You are correct, we should rewrite this in an async manner. Are you available for this?\n. Yeap, to be consistent is should be available for UIButton and MKAnnotationView\n. @DimaVartanian any updates? Did you managed to do anything?\n. Looks like it didn't.\n. Thanks @vjyanand \n. I tried to repro this, but I get strange compiler errors (like the ones described here https://github.com/rs/SDWebImage/issues/494). It seems those issues were fixed in libwebp, but they never released an update since December 2013, even though they are actively working on the project.\nRegarding the issue you are addressing, I can't say if they work or not.\n. I removed the arm64 support and everything compiled fine, without your fix. I'm not sure I follow\n. Yeap. That's exactly what I did. \nplatform :ios, '6.1'\npod 'SDWebImage/WebP', :head\n. I will try with the -all_load flag today or tomorrow. Stay tuned :)\n. Hey @leafduo, I just tried with the -all_load flag and I do get the duplicate symbols error. With the fix from @xlchen, everything is ok. I will merge this fix. Thank you both for the support.\n. I don't know if this is a feature we should support in the library or something the library users should take care of.\n. @shifu we will release a 3.7.0 version very soon, keep in touch\n. 3.7.0 version is now released. Available via CocoaPods as well.\n. Could you please provide a stack trace? Also, try using the Zombies Instrument to determine the object that is causing the crash and why\n. @kirualex we appreciate you working on this. I will take a look as soon as I have some time.\n. What version of SDWebImage are you using? Does it reproduce with the latest master version? It might be an issue with the SDWebImagePrefetcher, but it could also be an issue with the block you are passing.\n. Until we can figure out the exact cause, made a temp fix (e95224b) with the suggested _cancelBlock = nil\n. 3.7.1 just got out. Could you please check and see if this crash still reproduces or is fixed as it should be?\n. Great, please post the feedback as soon as you have it\n. Let's see if this still happens with 4.0. It shouldn't\n. Not sure if it's the same issue. Which version of SDWebImage are you using?\n. Glad you found the issue.\n. Could you provide an url to the image? Seems that the request needs to specify the image/png type in header fields and that might not be something we can do, since SDWebImage supports all kinds of images (i.e. jpeg, gif, ...)\n. It doesn't seem an issue with SDWebImage for me. It's just that you need to provide the authentication. The gray image might be something the webservice returns\n. Will close the issue. Please reopen if you have more info and we still need to fix this.\n. Yeap, @austinlouden is correct. We added an extra param to the completion block, the NSURL *imageURL, so you need that one too if you use the new method sd_setImageWithURL:....\n. Hi @mtitolo. I've tried to reproduce this scenario, but without success. How is the cancelling occur? (is it the sd_cancelCurrentImageLoad from the sd_setImageWithURL:placeholderImage:options:progress:completed: or you are cancelling explicitly? Could you set up a demo project where the issue can be easily reproducible?\n. This issue should be fixed now, on the 4.x branch. 4.0. release is coming\n. Yeap, the reason is indeed the usage of decompressed images, but that should not be a problem, as the images are stored in a NSCache instance, that automatically releases memory when receiving a memory warning or even when going to background.\n. Please try the latest master. We will release a new version soon.\n. Please try with the demo project. It compiles fine for me in Xcode 6.\n. Great. Closing based on the latest comments.\n. This was replaced by #1041\n. Ok. Will close it.\n. @rromanchuk we will look into this soon.\n. Fixed by #819 \n. 3.7.1 just got out. Could you please check and see if this crash still reproduces or is fixed as it should be?\n. Ok, but does it reproduce with 3.7.1?\n. Mi @maeji. We will look into this crash soon.\n. @rromanchuk I have tried to reproduce this crash, but I doesn't occur to me. Could you help me with that? Do you have a scenario that works all the time?\n. Also, could you please check using the latest HEAD for the other crash (#808), it should be fixed now.\n. I think I found the issue. self.cancelBlock = nil; will trigger a call to our custom setter setCancelBlock:. Looking at that code\n- (void)setCancelBlock:(SDWebImageNoParamsBlock)cancelBlock {\n    if (self.isCancelled) {\n        if (cancelBlock) cancelBlock();\n    }\n    else {\n        _cancelBlock = [cancelBlock copy];\n    }\n}\n- the check of self.isCancelled passes since we just had self.cancelled = YES;\n- then if (cancelBlock) will not pass, as the call to the setter was made using nil as param\n- and then we exit, without ever setting _cancelBlock to nil\n- so if after this, an attempt to use self.cancelBlock will lead to a crash.\n. @rromanchuk Thanks for the support. Could you also check my latest fix (28109c4) against this crash? It shouldn't crash anymore (your clue that _cancelBlock = nil; got me on the right track). As soon as I get the approval, I will release that patch.\n. @rromanchuk did you get a chance to try this out? I want to release the patch asap.\n. Until we can figure out the exact cause, made a temp fix (e95224b) with the suggested _cancelBlock = nil\n. 3.7.1 just got out. Could you please check and see if this crash still reproduces or is fixed as it should be?\n. What version are you using? I'm asking because that code is a bit different now\n. Great, thanks.\n. Hi there. Could you copy-paste or screenshot the warnings from Xcode?\n. I see no screenshot :)\n. The compiler says you didn't add parameter names in your test method. You should try\n```\n-(void)test\n{\n    [[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:@[] progress:^(NSUInteger completedNo, NSUInteger totalNo) {\n} completed:^(NSUInteger completedNo, NSUInteger skippedNo) {\n\n}];\n\n}\n``\n. Correct. I will change that now.\n. Sure, thanks for the feedback, now all of those should be solved and autocomplete should do its job.\n. Hi @RobertBiehl. I don't have that deep knowledge of the webp format, but feel free to try to fix this issue. @rs might be able to help you. You can make a pull request if you have a solution and we can further discuss there.\n. Closing due to lack of response.\n. I have to agree, it's probably safer to just revert. I have asked the commit author to have a look, but we may revert anyway. We should probably release a 3.7.1 patch asap with this fix.\n. Replaced by #819 Thanks @seviu for investigating this, your fix is the same. I will release a 3.7.1 patch asap, hope this fixes the issues.\n.3.7.1just got out. Could you please check and see if this crash still reproduces or is fixed as it should be?\n. @Shenjiaqi@autoreleasepool` is described by Apple docs, you can read the Advanced Memory Management Programming Guide for a clear info on this. \nGithub issues is a place for bugs/enhancements/features for this project in particular. In the future, please post questions like this one on StackOverflow or a similar forum.\n. :+1: \n. @ivan-golub could you create a pull request with the fix?\n. I think this one is now fixed by #2034 . Right. I asked the WebP devs to release a new version soon, as they have fixed this ARM_NEON for arm64. There are older versions than 3.7.0 that don't build. Until we add arm64 support, please remove arm64 from your architectures manually.\n. WebP released a 0.4.1 version with arm64 support, we included it in our 3.7.2 release, so that should be fixed.\n. Could you please share with us a crash log. \nPlease note there are 2 options enums: SDWebImageDownloaderOptions and SDWebImageOptions. You have mixed the two, as the imageManager methods use SDWebImageOptions.\n. In your example you are using the SDWebImageManager method\n- (id <SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                         options:(SDWebImageOptions)options\n                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                       completed:(SDWebImageCompletionWithFinishedBlock)completedBlock;\nnot the SDWebImageDownloader\n- (id <SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                         options:(SDWebImageDownloaderOptions)options\n                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                       completed:(SDWebImageDownloaderCompletedBlock)completedBlock;\n. :+1: \n. The reason why we are doing dispatch_barrier_sync and dispatch_sync is to synchronise the access to the NSMutableDictionary that is not thread-safe, according to the Threading Programming Guide. Same doc states that NSMapTable is not thread-safe, so I don't think your code is protected against crashes.\n. @mtitolo any response here?\n. Ok, this sounds legit and I managed to get the same crashlog if imageSource was nil. Merging.\n. Hi @muffe. Could you please explain why such a feature would be useful?\n. Thanks for the explanation. Indeed, I don't see this as a feature that should go inside SDWebImage. It's more like a corner-case. Plus it could be easily achieved using the existing code (SDWebImageManagerDelegate).\n. I misunderstood. You can't use the delegate, but you can use SDWebImageCache maxCacheSize and this way, your disk cache size won't exceed that value. Instead, it will always store the latest used images (meaning the oldest stored images are deleted from the disk cache to make room for the new downloaded image).\n. I see. You have a pretty unusual requirement. It seems easy to fix, but I hope you understand why I wouldn't include this, as it seems to be a limited target feature that we will have to maintain every time we change something on the storage side.\n. Is anyone interested in making a Pull Request with this?\n. @knuxel I think this is actually correct. Cache-control private means \"do not cache\". See: https://www.w3.org/Protocols/HTTP/Issues/cache-private.html\n. Need to test this, see what is the performance.\n. I must say I don't really understand how is this caching anything. Could you add some details, maybe some links with the explanation on those changes?\n. @ivangolub I appreciate the response and sorry it didn't go in at that time. For now, it sounds safer just to close this PR. I think this one is now fixed by #2034 . An interesting idea, might be worth doing, but it does mean we need to rewrite code. Maybe somethin to be done in a major release.\n. @plivesey @rromanchuk one idea would be to properly separate the layers in our code (as FastImageCache does) and adopt AFNetworking for the actual network part. That way we can benefit from their support for both NSURLConnection and NSURLSession, all the up-to-date code and fixes.\n. Resolved by #1578 \n. 3.8.0 version was just released.\n. We need only the cost related changes.\n. Thanks\n. Yeap, #819 fixes this crash. We will release a patch (3.7.1) very soon.\n. 3.7.1 just got out. Could you please check and see if this crash still reproduces or is fixed as it should be?\n. Thanks @davemess \n. No, but in the completion block you can check for [SDWebImageManager isRunning]. When it returns NO, all the download tasks are complete.\n. Hi @djaney. Could you post a full symbolicated stack trace? How often does this happen? Can you reproduce the crash constantly?\n. :+1: \n. Which other question?\n. Could you provide the stack trace?\n. Please take a look at https://github.com/rs/SDWebImage/issues/414, this a stack trace info we would need to be able to fix the issue. A demo project to demo the crash would be even more useful.\n. @ZuYuanZhou please create a demo project which I can download and try, so I can reproduce the crash and try to fix it. Thanks :)\n. @harshcs you don't need to post this question in so many places, it creates confusion. Please look at this threads' comments and see how people managed to make their Swift code work with our library.\n. Please set up a demo project to show the issue you are encountering.\n. There is not need to call [imageCache storeImage:image forKey:encodedString];. setImageWithURL: takes care of setting the image.\n. Closing, based on the latest comments. Please reopen if it's still an issue.\n. There is a UIImageView sd_setImageWithURL:. Am I missing something?\n. Because an UIImageView is a UI class and initialising involves setting the frame and optionally other parameters. This is usually done by application code, so we only added support for the images loading.\n. Thanks @reiz \n. The correct way to use SDWebImage is to use an already created UIImageView instance (either created from a XIB or manually with [[UIImageView alloc] init...].\nThen on that instance call\nfeaturedImageView sd_setImageWithURL:.\n. sd_setImageWithURL: has a void return type, so the line\nfeatureImage = [UIImageView sd_setImageWithURL:[NSURL URLWithString:cellImageLink]]; doesn't make sense. Just use featuredImage sd_setImageWithURL:[NSURL URLWithString:cellImageLink]];\n. @purkylin you should add a check to see if the viewWithTag 101 is actually an UIImageView.\n. Closing, as the original issue was fixed. @purkylin please make sure the issue is not within your code and, if that is the case, let us know.\n. Great @justjimmy. We will try your fix and let you know.\n. Thanks for this fix @justjimmy \n. :+1: \n. Thanks @foxling .\n. Hi @shifu. There is no way to do that. Feel free to add support and make a pull request here so everyone can benefit from that.\n. There is probably an issue with pod try that doesn't bring the libwebp submodule. Please go to the path where it downloads the project (should look like /private/tmp/CocoaPods/Try/SDWebImage/Examples/ and run git submodule init and git submodule update. It worked for me.\n. Can you provide some details, maybe an Instruments trace?\n. @Jasonvdm could you try Instruments and look for the cause of the main thread block?\n. Please retry with 4.0.0. No longer using dispatch_sync and other improvements.\n. This should be fixed in the latest version 3.7.1.\n. If you use the SDWebImageDownloader directly, the completion block (as you noted) will be invoked on a background queue. You can fix it using dispatch_async on the main queue from the completion.\n[[SDWebImageDownloader sharedDownloader] downloadImageWithURL:url\n                                                      options:0 progress:^(NSInteger receivedSize, NSInteger expectedSize) { ... }\n                                                    completed:^(UIImage *image, NSData *data, NSError *error, BOOL finished) {\n                                                        dispatch_async(dispatch_get_main_queue(), ^{\n                                                            NSLog(@\"--- isMainTrhad %d\", [NSThread isMainThread]); // says NO\n                                                            // use the image...\n                                                        });\n                                                    }];\nAnother way around this is to use the SDWebImageManager downloadImageWithURL:options:progress:completed: method that invokes the completion blocks on the main queue.\n. :+1: \n. @Krivoblotsky could you send a pull request with this? I would like to fix this, but don't have a lot of time to do it myself.\n. Fixed by #942 thanks @Krivoblotsky \n. 304 means the image did not change and this happens when you already have the image, so there is no point in downloading it again.\n. I think this should be fixed due to #883. Please retest after we release 4.0 (right now the fix is on the 4.x branch).\n. The Url doesn't work for me. This sounds like a server issue, Content-Length is mandatory from what I know.\n. Closing, based on the latest comment.\n. Have you downloaded the zip file from GitHub? That is why the libwebp files are missing. There are 2 recommended ways to download SDWebImage:\n- using CocoaPods (that will make sure the libwebp library is also downloaded)\n  OR\n- using git clone https://github.com/rs/SDWebImage.git --recursive\n. You were right. I went and updated the list of libwebp files we include in our project in commit 16eea9f. The issue was alpha_processing.c was moved from utils to dsp folder inside the libwebp lib.\n. I've closed the issue, since latest master is fixed and the installation with CocoaPods also works. Please reopen if it's the case.\n. :+1: \n. Since this is one of the key features of the library and a lot of users are using it and didn't complain, I will assume there is an issue with the way you are constructing your urls. Feel free to reopen the issue if you have more info or a potential solution.\n. Closing, there is nothing we can do here.\n. Guys, why are you using that hackemist page? It's pointing to some old documentation. I recommend you switch to http://cocoadocs.org/docsets/SDWebImage/3.7.1/\n. Now I got it. It was that link from the README.md. I just updated that to the CocoaDocs link. Thanks @MelWinter \n. Latest version is 3.7.1. Could you please try with that? 2.7 is pretty old.\n. Please try 3.7.1, it should work on iOS 5 as well.\n. I'm not 100% sure, but you can try to change the minimum deployment version to 5.0. If you install via CocoaPods, the deployment target is set to 5.0. Please try it, I can't as I don't have a 5.0 device anymore.\n. @starFelix did you try my suggestion?\n. Closing this due to lack of response and that the memory warning cause will be fixed in 4.0 by using a max size for images.\n. How did you install SDWebImage? Which version?\n. You're probably missing the project PATHS settings. What I recommend for the easiest install is to use CocoaPods, that will take care of all the setup you need.\n. Hi @mattjgalloway. Thanks for your contribution, but it seems that this is a feature that will add more ambiguity than solve issues. I don't see that case happening and if it does, it is still handled via a new download plus the old image will eventually get purged. Unless there are other reasons to accept this, I'm going to close the pull request. Next pull request will go in :)\n. @mattjgalloway I still think that a method for this will cause confusion. I think it doesn't fit with all the other methods available. @rs could you take a look and give us your opinion?\n. The current implementation does not support multiple delegates for the SDWebImageManager class. You can instantiate it multiple times and have different delegates implemented in the view controllers.\n. We will look into this soon enough. But if any of you have the time, go ahead and try a pull request.\n. @barfoon I tried creating a custom keyboard extension inside our demo project and downloaded some images and everything worked fine. When did you receive that error? At runtime or at compile time? It seems other libraries have the same issues. Here is how AFNetworking fixed it https://github.com/AFNetworking/AFNetworking/issues/2119 https://github.com/AFNetworking/AFNetworking/commit/5b0638f94738b2996ec0994d70250bebd1c3cdd2. Could you create a small demo project where we can reproduce the issue? it will help us make a proper fix.\n. Thanks @auibrian I will look into this. Great that you set up a demo project and a solution PR.\n. Looks like the same issue with https://github.com/rs/SDWebImage/issues/809\n. @Steven4294 any updates here, is the issue still there? How did you determine the caching is not working on the device?\n. Closing the issue due to lack of response. Please reopen it if it still occurs.\n. How did you install SDWebImage? Are all the files added properly, as well as compiler settings? I strongly recommend you try this using CocoaPods, it should take care of all the issues. \n. I'm not sure I follow. in the last version it's ok, so I assume it doesn't crash on latest version 3.7.1. The you say it's still crashing. Which one is true?\n. Ok, got it. Please make sure you have the ObjC compiler flag set, as recommended here. https://github.com/rs/SDWebImage#add-linker-flag. Also, make sure you do a full Xcode project clean (Product->Clean).\n. Great.\n. Problem originally discussed in #764 \n. So I say, let's fix it :)\n. Should be fixed in the latest 4.x branch. Should revisit after 4.0 is released.\n. Hmm, the issue here with this change is we need the imageData to determine which kind of image we are dealing with. If that one is nil, we will just assume a PNG. \nThe actual bug here is we are using the original image data to check for the PNG header, but instead in the case the image was transformed, we should be checking the transformed one. I don't have a good fix right now, since we only have a transformedImage, from which we should get the NSData to analyze it's header.\n. That might work. Thanks for the suggestion. Could you try it out and update the PR?\n. Sure, go ahead and send a PR and we can discuss it there.\n. Fixed by #876 \n. @mythodeia thanks for responding here. @Steven4294 please use Instruments to determine the cause of the slowness. If it's SDWebImage related, feel free to reopen the issue and continue the discussion.\n. @mythodeia I noticed you helping respond on the large number of SDWebImage issues. Would you be interested in becoming a Collaborator? Do you have the time to help us out?\n. @rs could you add @mythodeia as Collaborator?\n. Thanks @rs Welcome @mythodeia \n. At this time, there is no support for resumable downloads. If you have time, you can try implementing this. From what I know, it's easier to do it with NSURLSession, but we are still stuck with NSURLConnection, as no one has time to work on this yet :)\n. NSURLSession has support for suspend/resume. I think it's important (in most cases) that we cancel the old downloads when trying to load new images (i.e. when scrolling in a table) to free up the network resources. The iOS system has a maximum number of active requests it can support at a time (at least from the same host). Even if you queue more requests, they will be inactive.\nThe proposal here was to suspend them instead of cancel and try to resume if we come back. It might work, not sure. @skyline75489 feel free to try to implement, but I'm not convinced this is a feature that needs to be added to the library itself rather than being built in different apps. \nOther opinions?\n. I was not aware of the cancelByProducingResumeData: or downloadTaskWithResumeData:. Those sound interesting.\n. @skyline75489 I see. It sounds indeed complicated and the goal for now is to release and stabilise the current 4.0.0. Let's keep this ticket open and revisit later. Thanks for investigating.\n. @Steven4294 can you respond to the latest comment?\n. You can use the SDWebImageManagerDelegate imageManager:transformDownloadedImage:withURL: to edit the images before they are saved to the cache.\n. This is very similar to #1398 that was fixed in 86fc47b by allowing the user to create a new SDWebImageManager instance and pass it cache and downloader instances.\n. Hi there. Take a look at #833  and see if the instructions there help you get rid of the crash.\n. :+1: \n. @TaoXiaoSeng thanks for noticing this, indeed both functions have to have the same behavior\n. We need to investigate this, you might be right that both the blocks are called.\n. Please provide a stack trace, reproduction rate, SDWebImage version, OS version, ...\n. There is a problem with the installation. Please remove and re-add SDWebImage from your project and make sure you are using the latest version.\n. @billyjr did you manage to fix the issue?\n. If you use [[SDWebImagePrefetcher manager] cancelAll] it will, otherwise not. If depends which instance of SDWebImageManager are you using, if it's the same with the one used by the SDWebImagePrefetcher or not.\n. our library is created to work with our own cache class. If you want a different one, just modify the property accessor. Overall, I think it could cause more harm making this change in the project, since most people should not change it.\n. Feel free to work on a solution to this on your fork. If it works for us, we will include it by a PR.\n. Great\n. Closing based on the last comments\n. Thanks @dulgan \n. Does it reproduce all the time? Could you setup a demo project so we can easily reproduce and fix it?\n. We are doing our best to maintaining this one, but time was not our best friend lately. I will personally dedicate more time for this. \n@rromanchuk are you interested in becoming a maintainer? \n. @mattjgalloway I have taken a deeper look at this PR and there are a lot of scaring changes here. Not sure who could properly review this and make sure it's working as expected.\nMore than that, I think the case you are talking about is an edge case, as most people would download unique urls or even if they encounter the same url again, I don't expect a lot of cancels.\nHow did you come to the conclusion that the app will avoid downloading the same url twice? I can't find anything against that in our master branch code.\nFrom where I look at this, given that the fix is huge, changes a lot of stuff plus it addresses an edge case, I would go towards not including it.\n@mattjgalloway could you bring more details about the scenario that needs fixing and how did your app end up handling that? Maybe we can come up with an easier fix.\n. > On the tests front - sure, it's using my updated architecture. But you can easily see how that translates to the old architecture. Do you want me to add a failing test on top of master for this maybe?\nYes, that would be great.\n\nCancels can easily happen. Consider a cell that's loading an image. Then the cell goes off screen and the request is cancelled.\n\nAgree, but our issue, from what I understand, is cancelling when there are multiple requests for the same url. And that is why I think this is an isolated scenario.\n\nI'm unsure quite what you mean here. Can you elaborate please?\n\nThis is because you stated \n\nSDWebImage helpfully downloads only once if a request for the same image comes in more than once while the image is still being downloaded. \n\nand I was asking which code assures that we only try to download from a unique url once.\nAny chance you can think of another fix that has less changes? I'm also looking at #1031 #1044 #1069 and they seem to address some cancel issues. Maybe you can take a look as well.\nPS: Thanks for working with me on this.\n. @mattjgalloway I've finally come to a conclusion regarding this PR vs #1069 and I decided this is the way to go for now. Since the changes in this PR are breaking compatibility with the 3.x versions, I will only merge it into 4.0. It would help me if you could rebase/merge with master so there are no conflicts and change the target branch to 4.0. I will very soon release 3.7.4. Thanks\n. Finally, I have merged this into the 4.x branch via commit 13cfc5b. It looks ok, even though the changes are a bit scary, but we will see as we move along. @mattjgalloway I have updated your solution a bit in 8a78586 by just exposing SDWebImageDownloadToken.\n. Might be a duplicate of https://github.com/rs/SDWebImage/pull/894\n. #787 adds a more robust solution to dealing with large images.\n. See https://github.com/rs/SDWebImage#add-linker-flag. Correctly setting the flags should take care of the issue. BTW: I strongly recommend you guys switch to CocoaPods, that way those issues will never arise.\n. This is a very very strange issue which I need to investigate further more. Both methods are defined, it just seems the compiler doesn't see the new one. Did you guys try to delete the DerivedData folder? \n. Closing based on the comments. The issue appears in other GitHub issues, but it's only an installation problem.\n. See https://github.com/rs/SDWebImage/issues/862\n. :+1: \n. Agree @hsoi. Thanks.\n. @mkll I don't think there is a more elegant way to achieve this. Unfortunately, this doesn't seem to be a feature that we need to have in the library, as it solves an edge-case (keys changing). I'm going to close the issue.\n. Please use the latest SDWebImage, this issue is already fixed. I suggest you install via CocoaPods.\n. See #741 and 0b47342\n. Does self.executing work for you? _executing is only visible in the SDWebImageDownloaderOperation class, and not in its subclasses\n. Will look into this soon.\n. Great. So the latest version fixes the issue. I will close it. Please reopen if the problem still exists with the latest version.\n. Thanks @asparagui \n. #787 adds a more robust solution to dealing with large images.\n. Fixed by #896. Thanks @skrew \n. I think this is a value people should set on their own. Our default value must be a middle one.\n. I agree as well.\n. Thanks for the quick turnaround. Merging\n. Thanks @mattjgalloway \n. Try using the suggestions from https://github.com/rs/SDWebImage#add-linker-flag and see how that goes\n. Does it work now?\n. I'll close the issue in this case. I am still curious why it didn't compile, it definitely has something to do with the compiler flags. force_load should be used instead of ObjC.\n. Got it. I think you might have solved the issue by using force_load for the google maps library file as well.\n. Just use the SD_LOG_NONE macro to silence the logs. Or just comment the NSLog lines.\n. @jrr363 I'm not sure I understand your question.\n. This complicates the APIs, I would not merge it in.\n. I just tried with the SDWebImage demo project and the url you provided and it worked fine (iPhone 6 simulator - iOS 8). Does it reproduce for you in the simulator?\n. Glad it helps. Might be just a strange crash. But if you found a fix, great.\n. Could you provide a trace from Instruments so we can see what is causing the lag?\n. An important improvement we will release in the new version (4.0.0) is increasing the SDWebImageDownloader downloadQueue maxConcurrentOperationCount from 2 to 6. You can try this before the release gets out and see if it improves the performance. See https://github.com/rs/SDWebImage/pull/897 for details\n. Guys, starting with SDWebImage version 3.7.0, this change was made. See #741 and 0b47342. Please update to the latest version (I strongly recommend you use CocoaPods). If I missed something, please reopen this issue.\n. What error are you getting?\nIf it's related to a retain-cycle, you should do the usual weak-reference to self:\n__weak typeof(self)weakSelf = self;\ndownloadimg.sd_setImageWithURL(NSURL.URLWithString(\"(apifileurl)\"), placeholderImage: nil, completed: { (image: UIImage?, error: NSError?, cacheType: SDImageCacheType!, imageURL: NSURL?) in\n  if (image != nil) {\n    UIImageWriteToSavedPhotosAlbum(image, self, Selector(\"image:didFinishSavingWithError:contextInfo:\"), nil)\n    weakSelf.DownloadButton.alpha = 1.0\n    myActivityIndicatorView.removeFromSuperview()\n  }\n})\n. Please try my suggestion.\n. @Tom29 please look at https://github.com/rs/SDWebImage/issues/833 for ideas how to fix this, until we release a fix.\n. Hi guys.\n@donholly you did a good job.\nA few comments I have, besides the ones from @rs: \n- I think that for our current users, the interface should remain the same. This means that installing SDWebImage via CocoaPods should continue to install just the Core subspec. We need a new subspec for ALAsset/PHAsset. I would preserve the downloadImageWithURL:options:progress:completed: method from SDWebImageManager. I think that a user should know when an image is available locally and when it needs to be downloaded, so I don't grasp the need for a multipurpose downloadImage method. Instead, I would just create a new method like retrieveImageWithLocalURL:...\n- We need some kind of tests, ideally unit tests + a test app for demo purposes\n. Old PR - replaced by #1702 . With the 4.0 release, we will replace our GIF solution with an external one. No reason to merge this.\n. What are the compiler errors you get?\n. You probably need to import the CFNumber.h header, since your app might not include CoreFoundation.\n. Closing due to lack of response. Please reopen if you didn't fix it.\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Thanks @mythodeia \n. Thanks for your help, guys\n. CocoaPods installation issue, not related to SDWebImage. Closing\n. Fixed by https://github.com/rs/SDWebImage/pull/937\n. I'm not sure what to say here, people are also expecting for some other fixes that we will deliver with 4.0, this is a security issue, but it's living there for a while. I think we could wait for 1 to 2 weeks.\n. Can you reproduce this crash constantly? Do you have a special image for this? \n. @dbrockman please provide some more details, I've asked for a few in my previous comment. An image URL to repro this would be nice\n. Great that we have an image which makes it easy to reproduce.\n. @bgfriend0 how did you install SDWebImage? Are you using CocoaPods? It should work, as the latest code has fixed this issue. See #741 and 0b47342\n. Closing, based on the conversation above.\n. I don't understand the issue.\n. Please reopen if the issue still exists and you can detail it\n. Please install SDWebImage using CocoaPods.\n. Closing, looks like a server issue.\n. Looks like https://github.com/rs/SDWebImage/issues/414. We are still trying to figure those crashes out\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Using the prefetcher is very simple. Just create an array with all the urls you need. i.e.\nNSArray *urls = @[\n                    [NSURL urlWithString:@\"http://static2.dmcdn.net/static/video/656/177/44771656:jpeg_preview_small.jpg?20120509154705\"],\n                    [NSURL urlWithString:@\"http://static2.dmcdn.net/static/video/629/228/44822926:jpeg_preview_small.jpg?20120509181018\"],\n                    [NSURL urlWithString:@\"http://static2.dmcdn.net/static/video/116/367/44763611:jpeg_preview_small.jpg?20120509101749\"],\n                    [NSURL urlWithString:@\"http://static2.dmcdn.net/static/video/340/086/44680043:jpeg_preview_small.jpg?20120509180118\"]];\n[[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:urls];\n. What do you mean by spanning image?\n. Please give an example. You keep saying panning image and we keep asking what is that :)\n. Thanks @Alexey-Matjuk. I will take a look at this in the following days.\n. In 4.0.0 we will remove the GIF support and add a 3rd party solution.\n. Yeap, we need the @3x support\n. Same issue as #907 \n. Not sure :)\n. What is the benefit of this? In which cases would a user need a NSValueTransformer for the data?\n. Thanks @flexih \n. Thanks @pavelosipov \n. Use the SDWebImageRetryFailed option.\n. @rs what do you think?\n. @LukeDurrant can you please respond to this thread?\n. Thanks @mishagray \n. @mythodeia many thanks. I didn't know Mattt had such a library. Looks very good because it uses UIImage directly. Need to see how it performs.\n. I would if I had the time :) I played with AnimatedGifImageSerialization and it has the same performance issue as our own code. They both work with very small GIF's, but that's it. :( I was hoping we could use Mattt's lib\n. Note to self: look at https://github.com/kaiinui/KIChameleonView, it integrates SDWebImage with FLAnimatedImage.\n. Guys, I've tried very hard to integrate FLAnimatedImage with our library, but because it's not a UIImage subclass, it involves too many changes and it breaks all the decoupling we have now. I have started integrating YLGIFImage instead. It works fine and it is easier to hook in. If FLAnimatedImage changes their implementation soon and subclass UIImage, we might turn this around, but from where I sit right now, I don't see a good way to integrate them with their current architecture.\n. Seems like one contributor to FLAnimatedImage is willing to work on making FLAnimatedImage a subclass of UIImage this weekend, I'll keep in touch with him and see how that goes.\n. Thanks @chenium \n. Thanks @mythodeia, I will look at this again.\n. No solution yet, I will look at the new FLAnimatedImage variant and take it from there.\n. By merging #1575 into the 4.x branch, I think we can close this thicket. Feel free to test it and let us know if it works.\n. Ok :) Thanks for working on this\n. Thanks for the fix, but right now we are looking at replacing our existing GIF support which is not performant. Until we decide exactly how we will do it, I will leave this PR open.\n. I would not make any changes to the GIF component. We will indeed replace it in 4.0.0, so no point in merging this.\n. @harshcs then you need to clone the repo. try git clone --recursive https://github.com/rs/SDWebImage.git\nAs a medium term thing, I strongly recommend you try CocoaPods, it's very simple and it will save you time when you want to install a library or even just try it out.\n. Added this section to the readme https://github.com/rs/SDWebImage/blob/master/README.md#installation-by-cloning-the-repository\n. @harshcs please note the cloning a GItHub repo is a very basic operation and it doesn't fall in the responsibility of the author. \n. :+1: \n. @andreaslindahl you can set 0 as options or another value, instead of the UseNSURLCache one.\n. Closed, based on the comment from @mythodeia \n. An interesting problem. You could have probably avoided this by using all caps names for macros (i.e. XX_IMAGE_URL.\n. Looks good, just that I'd remove the comment about the designated initializer. I think most people should stick to the old initializer, this option you're adding is for those who really need a particular SDImageManager.\n. thanks @mythodeia \n. Please reopen if it's the case. Thanks @mythodeia \n. Feel free to reopen.\n. Agree. This is an ongoing task for our current 4.0 release.\n. See https://github.com/rs/SDWebImage/issues/945\n. @zhw511006  We have replaced our GIF component with a library from Flipboard (FLAnimatedImage). Could you try our 4.x branch (instructions) and see if it helps?\n. Closing. The FLAnimatedImage solution replacing our own GIF is integrated into the 4.x branch.\n. There are no current plans to expand SDWebImage to OS X\n. Thanks for the idea. We will look into it, but for now we need to remain compliant with iOS 5 and 6.\n. That sounds like a good idea. Could you make a pull request with this implemented?\n. Sounds good. Then lets leave this open as a Feature request and we will deal with it when we drop some backwards compatible methods.\n. They are only excluded from the Core subspec. Look at the WebP subspec, it has the 2 files.\n. It's normal for the decodedImage to take up more memory. Because it's decompressed by force. You should look at the original image after being rendered on screen. They should have the same size.\n. @ghazel indeed, by design, we cancel a previous request for a UIImageView if we are trying to load a new image. Since the network is a limited resource, I think this is the right approach for the shared version of the library. Feel free to fork it and modify this behaviour if you really need to.\n. Sorry, I missed the part with the URL being the same. Could you make a PR with this fix?\n. #883 should fix this\n. Agree. We will update the readme before releasing the new version. Thanks.\n. Could you help us reproduce this issue? Maybe create a demo project where it repros constantly.\n. I think so. \n. Or we can merge this one and add a commit to it directly on master.\n. Done\n. Implemented with #1041\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Ideally, we should not merge our own PR's :). Sorry, I somehow forgot to press the merge button for this one, as I have reviewed it earlier.\n. This breaks compatibility. Maybe we'll add it in 4.0.\n. I know. Sorry for that, but I had little time and the number of issues/pull requests was large.\n. @rromanchuk I kept failing to find the proper time to overview those. My plan is to do it by the end of January. Any help is be appreciated.\n. Regarding this PR, indeed it is correct.\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. We need to add a Swift section in our Readme.md file, explaining how to get SDWebImage working with Swift.\n. Looks good @initlifeinc. Thanks.\n. @Jur4s I have looked at the changes in this PR and I cannot understand how this fixes the issue. The only significant change is that you're forcing the code from the operation start to run on the main thread, which I think beats the purpose of having a separate operation.\n. This code has changed a lot. I will close the PR, release 4.0.0 in the near future and we will see if the issue still exists there and address it.\n. Guys, sorry for the delay, but I'm picking up things where they were left off.\n- Regarding the #997 PR, agree that is a very sensitive area and we need to think about this. I will do this in the following days. Any ideas are more than welcome. \n- From my pov and based on my experience with SDWebImage, I can definitely say I dislike the fact that we have a significant amount of dispatch_sync calls. I have made an attempt here https://github.com/rs/SDWebImage/pull/781, but I did not have time to properly test the impact of those changes. Any opinions?\n- I see @harishkashyap's fork has a few fixes, I will make sure we incorporate those into the main library.\n. Finally integrated this one via merge in commit c8c0081\n. Great that you found a fix, @AlexChesters \n. Replaced by 9620fff since this one can't be merged (git conflict).\n. I'm not sure this is a feature that fits into the SDWebImage model. Looks more like a SDWebImage plugin. @mythodeia what do you think?\n. @rozdoum your work is appreciated, but we don't think this is a feature we that applies directly to the core of SDWebImage. My recommendation is to create a separate project, like SDWebImageFromLocation or something similar.\n. Thanks @mattjgalloway \n. Indeed, looks constraints related\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. @mythodeia doesn't #1217 via 4cfb12c replace this PR? (#371).\n. Closing, #1217 replaces this\n. Replaced by 7f99c01. Thanks @JamesMura \n. Replaced by 88ee3c6, due to merge conflicts. Thanks @EdmundasMokipay \n. @GoodSquishy did you find a resolution to the issue? I see you've closed the issue.\n. Ok :)\n. At this point we don't have support for this. Feel free to create a pull request.\n. Any updates here?\n. @mythodeia is there anything else we can do here?\n. Thanks (especially for taking care of SDWebImage while no-one else was active).\n. This should be resolved by #883 on the 4.x branch.\n. I think this should be fixed due to #883. Please retest after we release 4.0 (right now the fix is on the 4.x branch).\n. @MobileMon @Japspre indeed there is an issue with progress blocks not being called on the main queue. We will fix this in the next release. For the completion blocks, I think those are already on the main queue.\n. Not yet fixed, but will very soon\n. Fixed by #1218\n. Will atempt to fix this issue with 4.0 with the long overdue refactoring on dispatch_sync vs dispatch_async and resource synchronization\n. More than that, I will replace the NSMutable collections we have so that the threading issue is avoided\n. Please retry with the 4.x branch (4.0 release is coming). Crash should not happen.\n. Travis CI builds were fixed\n. I've just released a 3.7.2 version.\n. It's a good practice, since you can always change the type of self and the code will still work.\n. Fixed by #1057 \n. @thedrick I will take care of this, in a few days. I need to make sure the changes in this version are not breaking compatibility with the older ones, case in which we should be bumping to a major version.\n. Would you be interested in making a Pull Request?\n. @aodhol there is no plan from us the maintainers to support APNG.\nWhat we will do in the near future is refactor and offer a simpler way to plug in support for different formats.. I will look into this, I must check if the current master doesn't have some breaking changes. If that is the case, then we can't release a 3.7.2 version, as it would break compatibility.\n. I have just released 3.7.2, with a tag and distribution via CocoaPods.\n. @Sniper-yj the Travis build is failing. Please check that\n. No response - closing.\n. It might be doable, but there are some changes required for this. feel free to work on a pull request with this\n. Please check https://github.com/rs/SDWebImage#installation-by-cloning-the-repository.\n. The problem with WebP is that the bit_writer.c file generates a warning because of some unused code. I've fixed Travis by adding the --allow-warnings flag to pod spec lint. Please rebase on top of master\n. @timkoma why did you close the PR? I just started re-reviewing it yesterday :)\n. It took a lot, but I am looking at it. Trying to comprehend all the underlying changes - not easy :)\n. In the meantime, it would help me if you could do a merge from master into this branch, or at least review the one I did and pushed it to my fork: https://github.com/bpoplauschi/SDWebImage/tree/SDWebImageOperation+Canceling\n. Great @timkoma \n. @timkoma I kept getting interrupted and wasn't able to finish this, but I am getting back to this library.\n. After analysing this MR and #883, I think the safer one is #883, as #1069 had shown issues and failed to pass the tests from #1222. Thanks @timkoma for all your support and work here, but for now I will go with the other implementation. Hope I am making the right decision.\n. @flovilmart we definitely want Carthage support, I will review this soon and reply.\n. Great work. Thanks @flovilmart \n. But it does avoid duplicate code. I'm going to merge this in\n. Thanks for the details @nandodelauni \n. This should work. Please try some cleanup (delete derived data, refresh pods by removing SDWebImage from the podfile, doing a pod update, then re-adding it and pod update again, ...).\n. I can't download the file, it asks me to login plus it's Chinese and I can't read it. Could you share it some other way?\n. Could you add it, please?\n. Fixed with #1085. @flovilmart @bassrock @auibrian @mythodeia many thanks for working on this. For 4.0, we will take a deeper look at #1182 and see if we can switch to that.\n. Just released version 3.7.3. Closing.\n. Just released version 3.7.3. Closing.\n. @pronebird the documentation for SDWebImageDownloader stated that the progressBlock is called on a background queue. Also added 62180db for more explicitly saying this for all APIs. (4.x branch).\n. We could create a method that will reset the failedURLs mutable set. Could you create a PR?\n. Isn't the makeDiskCachePath: method sufficient? You could subclass SDImageCache and rewrite this method.\n. great\n. We will add GIF support via a separate library. Stay tuned.\n. See https://github.com/rs/SDWebImage/issues/945\n. @sgtsquiggs thanks for looking into this. From what I know, the only real memory spikes from SDWebImage are due to GIF images, which we will fix by removing our GIF handling code and replace it with a 3rd party that is doing a lot better. Is this case for you, or you're experiencing those mem problems with regular non-animated images?\n. Looks like the StackOverflow question was answered.\n. Right. We need to review this.\n@rs what should we use?\n. You can just define SD_LOG_NONE before importing the SDWebImagePrefetcher class and the logs will go away because of this\n```\nif (!defined(DEBUG) && !defined (SD_VERBOSE)) || defined(SD_LOG_NONE)\ndefine NSLog(...)\nendif\n```\n. @lqthien we will soon release 3.7.3 with this fix included (#1104).\n. @molon Why did you close the PR?\n. The latest 4.x branch contains only async store image methods with completion blocks. No need for this PR. Thanks anyway\n. I will be merged, it's just a bigger change which I want to review thoroughly.\n. Not yet, but we will look to include this fix soon. Not sure when we will release a 4.0 though.\n. Resolved by #883 \n. Ideally, we shouldn't expose the response as we don't want people messing around with it and probably most users won't care about it. Maybe you should fork the library and make those changes for yourself\n. Closing based on the last comment\n. Oh, sorry. The original issue by @willbin is a different one from the one @ppaulojr reported and is fixed by #1496. Reopening\n. There are a number of potential causes for this issue:\n- 1st one that crosses my mind is #897 where we switched from 2 max concurrent downloads to 6 which may have surfaced an older issue\n- another potential cause is #996 that changed a bit the way we load and decompress images.\nBut the bottom line is: if the solution @mythodeia proposed (prepareToReuse set the image to nil) works, you should use that.\nI think this was a must even for older versions of SDWebImage. The reason is if you are using table views or collection views which reuse cells, due to scrolling the same imageView will start requests for different images and we must make sure only the last request is actually finalised and the imageView is always reset before being reused.\nThoughts?\n. Thanks @pauruiz \n. This doesn't look related to SDWebImage.\n. Guys, really appreciate the work here. We have replaced this with a mergeable solution https://github.com/rs/SDWebImage/pull/1217\n. This is already done in the latest 4.x branch due to the refactoring into the UIView category.\n. Thanks guys\n. Fixed by #1158 \n. This sounds interesting, but we need someone to be able to work on this. And it should be after we refactor SDWebImage into 4.0\n. I understand this is a feature that some of you need, but at this time there is no effort in implementing if from the maintainers. If anyone has the time to try it (in a PR), a lot of people would be interested. In the meantime, Concorde is probably the go-to solution.. Just released version 3.7.3. Closing.\n. @chdi please isolate the fix you are trying to make. Right now this PR is trying to add a Pod KVOController and make other changes\n. Closing, based on the current state of the PR and the lack of response.\n. Could you share a demo project to easily replicate those crashes?\n. Do you have any statistics on how many users run into those crashes? I can't do much without a clear repro scenario. Just by looking at the stacktrace, I assume it's a memory management issue since instead of an NSData, that method sd_contentTypeForImageData: receives an NSCFString object. This could have a lot of causes\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Those files are contained in different subspecs (MapKit and WebP). To get those, you need to specify in the Podfile something like pod 'SDWebImage/MapKit'\n. @onmyway133 why did you close this?\n. Great post. Thanks for that.\n. Not sure if this method would be safe. It alters a mutable container that might be enumerated.\n. @zigadolar can you respond to our comments?\n. > so there would always only be more items in the array and never fewer.\nI don't agree. Even if we guarantee that the number of items is larger, there is still an issue of data synchronisation. The idea would be that while enumerating or interacting with a collection, nobody should change the contents of that collection. startPrefetchingAtIndex: could be executed at the same time as addPrefetchURLs:. Because startPrefetchingAtIndex: works with indexes of the array, we will at least have a logical issue (if not a crash).  We need to synchronise access to the prefetchURLs and we need this for the existing code (even without this patch here).\n. Closing, based on the conversation.\n. 3.7.3 should go out soon (in a few days). https://github.com/rs/SDWebImage/milestones. We just need to take care of some other stuff until then.\n. Meanwhile, could you please rename the option to  SDWebImageAvoidAutoSetImage?\n. Thanks @bill350 \n. Could you or someone else help by implementing this?\n. I am planing to do some refactoring in 4.0 that will involve integrating AFNetworking as network component, so we will gain access to their NSURLSession component. I will let you know as soon as we have that in place.\n. Just merged the watchOS support into the 4.x branch. Will definitely be included in the next release. In the meantime, you can take it from there and see if it works for you - please note that is in-progress work which breaks compatibility with the older versions of SDWebImage.\n. Done in b111d62\n. Looks like a duplicate\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. This doesn't sound like a core feature that we should add to the library. It's very hard to maintain a lot of marginal features. You can implement this in an extension to SDWebImage. I am going to close the PR. Thanks for the intention, but I hope you understand why we can't add a lot of features in.\n. @wodetian I'm going to close the issue. Please reopen when you can bring updates.\n. @kmiloaguilar any updates here?\n. @johnzhu12 this is a problem with your network setup. Not sure how to help you here.. Do you have a working URL for libwebp?\n. :) I can understand the frustration. You could just use SDWebImage without the webp stuff. I strongly suggest you use CocoaPods instead of a clone to the repo. This way, you will get only the files you really need.\n. Let us know how it works\n. Use http://forked.yannick.io/ to see which forks were updated in the past year and which have more stargazers.\n. See the list converted to git remotes:\ndonholly        git@github.com:donholly/SDWebImage.git (fetch)\ndonholly        git@github.com:donholly/SDWebImage.git (push)\nharishkashyap   git@github.com:harishkashyap/SDWebImage.git (fetch)\nharishkashyap   git@github.com:harishkashyap/SDWebImage.git (push)\nmattjgalloway   git@github.com:mattjgalloway/SDWebImage.git (fetch)\nmattjgalloway   git@github.com:mattjgalloway/SDWebImage.git (push)\norigin          git@github.com:rs/SDWebImage.git (fetch)\norigin          git@github.com:rs/SDWebImage.git (push)\ntimkoma         git@github.com:timkoma/SDWebImage.git (fetch)\ntimkoma         git@github.com:timkoma/SDWebImage.git (push)\nmythodeia       git@github.com:mythodeia/SDWebImage.git (fetch)\nmythodeia       git@github.com:mythodeia/SDWebImage.git (push)\n. For certainly, the fixes are most welcome. I'll need to check the feature because we have rejected features that are not 100% on track with the library core until now, as we want to keep it maintainable.\nYou should create PR's from those branches\n. The activity indicator feature will replace https://github.com/rs/SDWebImage/pull/131\n. And the fix for #391 will replace https://github.com/rs/SDWebImage/pull/1130\n. I created a PR from your master branch: https://github.com/rs/SDWebImage/pull/1217\n. About future directions, I want to look at the other forks I listed in the other issue and see what other good fixes we can get. Then refactor the dispatch sync to async.\nI replaced the GIF solution with FLAnimatedImage on the 4.0 branch, the only issue is that branch is not ready for release, as it has a bunch of warning and nobody there seems to take care of that. We will see how that goes.\nAnother thread will be adding AFNetworking and replacing our network component, so we will be able to allow NSURLSession, requested by some of our users.\n. I reduced the list to 5 forks, one of which is yours. Here are the fixes I identified we should look at:\n- from @mattjgalloway: #883 \n- from @donholly: #906 \n- from @harishkashyap: #999 \n- from @timkoma: #1031 #1044 #1069 \n. About #999, it seems a big chunk from that was merged via #996. I am looking at the remaining code and see if we want to add it as well. \n@harishkashyap  I can see the remaining patch is actually a merge request into your fork: https://github.com/harishkashyap/SDWebImage/pull/1. What about this code? I see some good stuff here, but the way NSMutableOrderedSet *prefetchURLs and NSMutableDictionary *unfinishedOperations are used doesn't look too solid. Those are non-thread safe classes and most of the time they are accessed without a sync mechanism which makes it vulnerable to crashes. Any feedback here?\n. @harishkashyap thanks for the details. Could you and @mythodeia please review #1221, I've started a branch from your fork's master + reordered the methods in SDWebImagePrefetcher.m as they were before so the diff is easier to read and added some synchronization on the 2 non-thread safe collections prefetchURLs and unfinishedOperations.\n. @mythodeia great news. Congrats and all the best to your wife and son. Get back when you can, I will keep going with 4.0 in the meantime.\n. @harishkashyap I have create a branch with all your fixes plus some extra thread-safety. See #1221 \n. By importing #883 in favour of #1069, this closes the items on this ticket. Closing\n. All good. I was waiting for the Travis build to finish :) Great work\n. Quick question. You mentioned about a fix to #1035. I don't see any commit for that. MobileMon said that dispatching the progress block to main queue didn't fix his issue.\n. I still don't see your fix. Or you're referring to people putting that in their progressBlocks themselves?\n. Great\n. :+1: \n. @fanpyi we need more info about this crash. a full stacktrace, how often does it repro, which library version, maybe create a demo project to demonstrate the crash.\n. Closing. Please reopen if you can provide the info required\n. GIF's are working lazy with our current version. In 4.0, we will replace the GIF component and most probably, those issues will go away\n. It's going to take a while, as it's a lot of ground to be covered and I'm working alone on it. Can't give you a good estimate, but at least till the end of August.\n. We know about that issue as well and we will replace the existing GIF component.\n. @purnimaSingh We have replaced our GIF component with a library from Flipboard (FLAnimatedImage). Could you try our 4.x branch (instructions) and see if it helps?\n. Closing. The FLAnimatedImage solution replacing our own GIF is integrated into the 4.x branch.\n. @harishkashyap could you take a look and let me know what you think?\n. Got it. I will review this, i thought you reviewed the merge request https://github.com/harishkashyap/SDWebImage/pull/1 and agreed with it, since you merged it into your fork. Agree that changes a few things.\n. Some more details. It seems https://github.com/rs/SDWebImage/commit/ed64e00d4c0fda4344a3c08acb71eaedde85a5cb was already merged into the master repo via #996. \nhttps://github.com/rs/SDWebImage/commit/ded305fb28ad55fdc1f39bc3c138ce386f221102 is a merge from master into your branch, so nothing to get from there. \nFinal one we should get is: https://github.com/rs/SDWebImage/commit/cbc34337df46840927f9014db113c1b882d7e633. \n. Finally integrated this one via merge in commit c8c0081\n. Since #883 was merged into the 4.x branch, we no longer need this PR.\n. This bug is already known. See one of the duplicates: https://github.com/rs/SDWebImage/issues/1013\n. I think this is the only way (the one you solved it). \n. I know. Our plan is that for version 4.0, we will replace our own GIF component with FLAnimatedImage from Flipboard. That should take care of your scenario as well.\n. We've added FLAnimatedImage support via #1575 into the 4.x branch. Try it out and let me know if your issue is resolved.\n. Indeed, it seems this webserver requires a User-Agent before giving access to the image.\nYou don't need to modify the SDWebImageDownloader code.\nBefore downloading the image, do:\n[[SDWebImageDownloader sharedDownloader] setValue:userAgent forHTTPHeaderField:@\"User-Agent\"]; using an userAgent computed like in the example above.\n. We are planning to replace our GIF component in 4.0 with FLAnimatedImage. Hopefully this will take care of your issue.\n. @Onetaway  We have replaced our GIF component with a library from Flipboard (FLAnimatedImage). Could you try our 4.x branch (instructions) and see if it helps?\n. Closing. The FLAnimatedImage solution replacing our own GIF is integrated into the 4.x branch.\n. Hi there. I can't find any setNeedsDisplay calls inside SDWebImage. Not sure where you found it.\n. quote from StackOverflow: \n\nsetNeedsLayout is an easy one: it just sets a flag somewhere in the UIView that marks it as needing layout. That will force layoutSubviews to be called on the view before the next redraw happens.\n\nSince some UIImageView classes or subclasses might do something custom after the image has been set, we mark the view as needing a layout. I don't know the exact reason, but I assume we do need it, as I've seen a lot of other libraries doing this. \nPS: Your StackOverflow link is about setNeedsDisplay which is another thing from our topic here.\n. @rs could you answer to this question? It's been a long time, but maybe you remember\n. Thanks @rs for responding to this.\n. @flovilmart could you take a look at this? I'm not sure how this would work.\n. The question is how to enable WebP support via Carthage?\n. This should be solved now, the current framework targets include webp\n. Thanks @mythodeia \n. I don't think we need 2 images (placeholder + default). The placeholder should be enough, we just need to make sure it's not cleared when nil is received.\n. Closing, based on the latest comments\n. Not sure I grasp your proposal\n. I think I managed to solve this with #1681 (375f29d to be more explicit).\n. @luoyibu indeed, you can use CoreAnimation for real FPS measurements. Regarding the difference between initWithContentsOfFile and drawImage, I didn't take any measurements here, so I can't really have an opinion. The documentation on SDWebImage was written by @rs, so he should have the info on that. You can check out https://github.com/path/FastImageCache#the-problem, as it explains the classic problem with image decompression.\n. We will refactor this part (dispatch_main_async_safe) in 4.0 anyway\n. I think we still need it. The heavy completion indicates other issues that with this library.\n. This should be solved now, the current framework targets include webp\n. With the current architecture, you can't do it synchronously. Please try async until we find a way to change the API\n. You can set SDWebImageRefreshCached via the options param, but that will respect the HTTP response cache headers (i.e. Cache-Control). So if the webservice hosting the image says \"cache it for 1 day\", then we will not re-download it for 1 day.\n. Thanks @Coeur \n. Good point, but I will merge this PR into the 4.0 branch, as we might still want to release a 3.x version and this change will make it loose backwards compatibility.\n. Replaced by 5b05d6c\n. We do have subspecs (i.e Core and WebP). Are they not sufficient? I think I'm missing the issue. WebP (from what I know) can be included via Cocoapods.\n. Usually, to see which subspecs are available in a pod, you can run pod search SDWebImage and look at the output:\nAsynchronous image downloader with cache support with an UIImageView category.\n   pod 'SDWebImage', '~> 3.7.3'\n   - Homepage: https://github.com/rs/SDWebImage\n   - Source:   https://github.com/rs/SDWebImage.git\n   - Versions: 3.7.3, 3.7.2, 3.7.1, 3.7.0, 3.6, 3.5.4, 3.5.2, 3.5.1, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.7.4, 2.7, 2.6, 2.5, 2.4 [master repo]\n   - Subspecs:\n     - SDWebImage/Core (3.7.3)\n     - SDWebImage/MapKit (3.7.3)\n     - SDWebImage/WebP (3.7.3)\nor just look directly at the podspec file.\nIf you want to include WebP, you should probably add to your Podfile: pod 'SDWebImage/WebP'. That will include the SD_WEBP macro definition.\n. :) of course it's not only for advanced users. I will add this to the readme. Thanks.\n. Fixed by bf899e2\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Hmm, need to take a closer look at this\n. Replaced by bf899e2\n. Interesting approach. We've never tried this scenario. So the one in the 2nd comment works? If so, we can close the issue\n. We have no official 4.0 release, that is still in progress. You can look at the 4.x branch out of curiosity :)\n. @arielelkin DEBUG macro is generated by Xcode when you create a new project, the other 2 can be created by SDWebImage users to control this logging. This is a feature and there is no sense in removing it.\n. @damienrambout would you be interested in implementing this add creating a PR?\n. @madik05 would you be interested in creating a PR?\n. You can always set urlCredential from SDWebImageDownloader to any value you need (it's exposed).\n. Please look at the latest 4.x branch (release 4.0 is coming). The issue should be fixed (I think).\n. I agree with the reasons @arielelkin described. Ideally, we would have these logs but since our Swift users will have an issue, I think merging this request makes sense.\n. We will achieve this by replacing our custom network component with AFNetworking which allows using NSURLSession or NSURLConnection\n. I think the migration will be to AFNetworking, I hope I can find the time for that and the other things that need to be done\n. Guys, help me out here. I was almost sure that not having to maintain networking code for this library is a good thing and relying on a library like AFNetworking for the network component would add value. Is adding a dependency the issue here?\n. Ok, got it. I will rethink this and try to do it without AFNetworking. (The reasoning was to avoid all kinds of fixes for the networking component and I can definitely say AFNetworking is still properly maintained and has a good code quality, but I understand what you are saying).\n. Resolved by #1578 \n. 3.8.0 version was just released.\n. We will replace the GIF component in the next version and everything should work.\n. @snowywolfie  We have replaced our GIF component with a library from Flipboard (FLAnimatedImage). Could you try our 4.x branch (instructions) and see if it helps?\n. Version 3.7.4 is out.\n. @mythodeia thanks for investigating and clearing it up\n. @tcjamie Your contribution is appreciated, but unfortunately this doesn't seem to be a feature that fits with the rest of the code here. The case where a 404 response also contains an image in the body is non-standard, as 404 means the resource was not found. You can keep this version of the code on your fork, but I don't see this as something we can maintain in the main repo.\n. Looks good.\n. Replaced by 32923fa which actually upgrades to Xcode 7.1\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. @zapjonny this thread was sleeping :) let us know if we can help you in any way, but we won't be able to do much. Only if you have an idea on how to implement this. Looking at the latest version of SDWebImage, I know we have refactored the SDImageCache.storeImage methods to be async, so they support a completion block. The issue now is the calls from SDWebImageManager just pass nil as the completion block for the storeImage on disk. But that is for a sound reason, since it is harder to make sure we call the completion after both saving on disk and returning the image are complete.\nYou can try to save the UIImage yourself, that way you will have control over the completion block.. @renssies any help is appreciated :)\n. :+1: \n. Please retry with 3.8.2 and the 4.0 release that is coming (now available on the 4.x branch).\n. Resolved by #1578 \n. 3.8.0 version was just released.\n. @mythodeia thanks for looking into this. I was busy for a long period, but now I'm back and I will allocate time for SDWebImage and the 4.0 release. As long as we are at least 2 active contributors, we should not merge our own pull requests :)\n. :) Don't worry, I know the feeling of creating a merge request and nobody being there to actually look at it.\n. You need to set Skip Install as described in the stack overflow link\n. Could you create a PR with this fix?\n. Should be fixed by #1593\n. Thanks @hoseking \n. Any updates here?\n. Can you share an image url? 401 means Unauthorized and this indicates an issue with the service providing the images (might require an authentication).\n. Great\n. We should keep the conversation on the original thread. I replied there. \n. @mamaral glad you found the issue :)\n. What version of CocoaPods? Does it help if you upgrade to the latest one? (0.39)\n. This looks like an issue with CocoaPods itself. Maybe it is damaged or there is an issue with ruby. Please make sure those 2 are properly installed (maybe try reinstalling them).\n. :+1: \n. I don't think we will be adding this feature in the near future.. Per #1991 you can now write your own decoder/encoder for PDF. Just have to conform to SDWebImageCoder protocol. Closing this PR as we will not add and maintain any PDF handling.. Looks promising, I will take a closer look\n. Probably a duplicate of https://github.com/rs/SDWebImage/issues/691\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. I don't see the issue here. We only need to remove observers in the classes that add observers and we have this already. The SDWebImageDownloaderOperation class is observable, not an observer.\n. Yes, but you must remove the observers where they are added. Meaning the class that observes those notifications (the observer) must addObserver and removeObserver. It doesn't get done in the observable object.\n. It might be a bug, but the description you provided is not very detailed. Can you reproduce this on our demo project? There might be an issue with the way you are reusing the cells with the images. \n. @rrallo even though you moved to a different project, still want to thank you for the scenario, it does make sense there's a race condition for multiple downloads. I will look into it.\n. Replaced by dcb7985\n. Version 3.7.4 is out.\n. Sorry guys, I totally missed this, I've mistaken tvOS with watchOS. We have no watchOS support yet.\n. I think the biggest dependency is NSURLSession, we are adding that as we speak in 3.8.0. As soon as that is merged in, I will start working on the WatchOS support.\n. Just merged the watchOS support into the 4.x branch. Will definitely be included in the next release. In the meantime, you can take it from there and see if it works for you - please note that is in-progress work which breaks compatibility with the older versions of SDWebImage.\n. Just merged the watchOS support into the 4.x branch. Will definitely be included in the next release. In the meantime, you can take it from there and see if it works for you - please note that is in-progress work which breaks compatibility with the older versions of SDWebImage.\n. Looks good. Thanks @yirenjun \n. FIxed in 8dcc5b5\n. Thanks @eikemeier \n. @orta thanks. Cancelling is an issue we are currently looking at. There are 2 proposals, please take a look at #1069 and #883 \n. @orta I'm actually looking at integrating #883, shouldn't take me more than a day or two to get that into master\n. @orta very soon, right after 3.7.4 gets out (probably today), I will merge #883.\n. @orta Damn, I see now how long it took to get this merged. Finally, #883 is merged into our 4.x branch and we are full ahead towards a 4.x release. Do you still need this feature?\n. \ud83d\udc4d \n. Guys, you can try the 4.0.0-beta version which is available via CocoaPods. An official release is on its way.\n. There are already some issues with the same description (https://github.com/rs/SDWebImage/search?q=CGBitmapContextCreate&type=Issues&utf8=%E2%9C%93) that were already fixed. Please take a look at them (i.e. #371). We will reopen the issue if it still exists.\n. Are you using the latest version of the library?\n. Please try using the latest master. It should work fine.\nI mean:\npod 'SDWebImage/WebP', :head\n. Not sure how to proceed here. Large images will do spikes, no matter what we do\n. I think this issue is similar to #538 and #586.\n787 and 00bf467 should give you a good solution for dealing with large images. Together with the GIF handled by FLAnimatedImage, this ticket should be done now.\nClosing. Let's see how this is with 4.0.0\n. There were some fixes to scale issues in the latest versions. Could you update to the latest and recheck? \n. Are you interested in creating a Pull Request?\n. Thanks @hoseking \n. Version 3.7.4 is out.\n. I don't understand what the issue is.\n. And the issue? :)\nIf you use setBackgroundImage of course you cancel it via cancelBackgroundImage\n. This does not describe an issue with this library. Please use StackOverflow or a similar forum for those kind of questions.\n. Thanks @muer2000. I will soon have a look.\n. Could you setup a demo project with the 2 pods installed, see if we can replicate the issue?\n. No updates - I don't think anyone is working on this. Look at some dedicated SVG lib, like SVGKit.. Guys, sorry for not reviewing the initial change properly, merging it and taking so long to read this thread. I totally agree with @robertmryan and @eikemeier and will revert the entire PR.\n. Actually, I only reverted the dispatch_apply part that was causing issues, as I considered the rest of the PR valuable\n. Guys, you were right. When I reverted the dispatch_apply, I missed the part that was starting a new prefetch after another one finished. It should be fixed by a8fca65. A new release will go out soon with this fix (3.7.5).\n. We haven't release a version with tvOS support yet. If you really need it, you can point to our latest master: pod 'SDWebImage', :head\n. Fixed by #1327  - will make a new release soon (3.7.4).\n. @lhecker Please take a look at 88b025a. In the 4.x branch (4.0.0 release) I have merged #1438. It adds support for Animated WebP. Could you look at that and adapt your PR?\n. For now, there isn't a real need for that method. Thanks for the suggestion.\n. You need to store data in that path manually or using a different mechanism. That API only allows reading cached images from another folder.\n. Resolved by #1438\n. It might be a problem with your server. Make sure the cache policy flags are properly set and returned.. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Coming soon.\n. Can you benchmark this and come up with some results of iOS 8.3 vs iOS 9.1 performance?\n. Closing due to no response\n. I think it's important that notification is broadcasted immediately.\n. Fixed by e6e5c51\n. This issue should be fixed by #735 in version 3.7.0. Which version are you using?\n. I don't agree. dispatch_main_async_safe checks if the current queue is the main queue before doing dispatch_async. And even if the check wouldn't work properly, dispatch_async is not a blocker.. Latest definition\n```\nifndef dispatch_main_async_safe\ndefine dispatch_main_async_safe(block)\\\nif (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) {\\\n    block();\\\n} else {\\\n    dispatch_async(dispatch_get_main_queue(), block);\\\n}\n\nendif\n``. @cherpake the crash you described is not related to this issue. Please search for one that is or open a separate issue. Also, we need information like the SDWebImage version, how often does the crash occur, if you can replicate it with our demo project, .... Feel free to reopen\n. I'm not sure how it was tested, but I can tell you it's async, so after theremoveImageForKeycall, there is no guarantee the image was removed. Can you debug it? \nI suggest writing the test async and use theremoveImageForKey:withCompletion:. Thesdprefix was added to methods likeimageWithURLto avoid the collision with other libraries. In this case, I don't think the same issue applies. To avoid complicating our lives, I would not merge this in.\n. This is resolved by some refactoring on the 4.x branch that moved all the activity indicator code fromUIImageViewtoUIView.\n. Looks good, not sure what the impact is on the existing users and if this doesn't break anything, but we'll leave it as it is (merged) and keep an eye on it. Thanks guys\n. :+1: \n. You probably have an older version because all our latest versions use https://github.com/webmproject/libwebp. @CognitiveDisson We have replaced our GIF component with a library from Flipboard (FLAnimatedImage). Could you try our 4.x branch ([instructions](https://github.com/rs/SDWebImage/tree/4.x#animated-images-gif-support)) and see if it helps?\n. Closing. The FLAnimatedImage solution replacing our own GIF is integrated into the 4.x branch.\n. Version 3.7.4 is out.\n. Could you create a small project where the issue replicates easily?\n. Closing - no response.\n. Which version of SDWebImage? Which iOS version? Can you replicate it on the demo project or could you create another small project to demo this issue?\n. Thanks for the info.\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. I see your point and is valid. But I don't think the extramanagerparam on the UIKit categories methods makes sense. If you go down your road, you could always use theSDWebImageManagerlayer.\n. @zats I added the 1st part of your work in 86fc47bf7b80bdfea49d39d9ad4d719bba90015c. Hope this helps.\n. It would require too many changes. The current design of the library is built on a singe manager instance and this cannot change very easily. I think you should just fork (if you haven't already) and use your version for what you need it.\n. Wow, this is indeed very strange. Did you find the cause? I am going to close the issue. If the issue still exists, you might get more help on StackOverflow.\n. Great to hear this.\n. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. @abdullahumer can you upgrade to a newer version?. Let's close this issue, see if it happens again with 4.0.0 (4.0.0-beta is available for download, 4.0.0 official release is on its way).\n. Check #883 that was already merged into the 4.x branch.\n. @YYDD  We have replaced our GIF component with a library from Flipboard (FLAnimatedImage). Could you try our 4.x branch ([instructions](https://github.com/rs/SDWebImage/tree/4.x#animated-images-gif-support)) and see if it helps?\n. Great.\n. I think this is a breaking change and I would avoid doing it. Feel free to reopen.\n. No response. Closing\n. Animated webp images are not supported.\n. @jballer you should continue the conversation on the WebP tracker tool, as this is not related to SDWebImage. I only published the libwebp releases via CocoaPods, I have no other relation to this great library.\n. TheSDWebImageDownloaderdoesn't know anything about cache. It will always download.\nUse theSDWebImageManagerorUIImageViewcategory to get access to the cache functionality.\nFor example:self.bannerImageView.sd_setImageWithURL(NSURL(string: urlString!)). animated webp support is scheduled for the 4.0 release.\n. Resolved by #1438\n. I advise you to try this question on StackOverflow, as it doesn't seem to be an issue with the library itself.\n. There is already a transform image mechanism via theSDWebImageManagerDelegate`. This version you implemented here adds complexity and we are trying to avoid that.\n. The latest released version is on CocoaPods. As soon as we release the new 3.7.4, that will also be available via CocoaPods.\n. Version 3.7.4 is out.\n. Guys, I think I understand the issue and it's probably related to #976 because we added the extension to the cached file name. But I don't see how this could break things for the users. Worst case, it should just redownload the images that are in the cache, but their name is the old one (without the extension).\n. I've done a bit of debug and things look fine. Do you have any problematic URLs that could lead to a wrong filename?\nIt makes sense for me for the 3.7.4 version not to load the images cached by previous versions, because of this change. It this a problem? I think not, the library can download them again. If it is a problem, then we could maybe create a backwards compatible mechanism so we can still load those images.\ni.e. look for key.jpg, if it fails, fallback to key.\n. Fixed by fca618f - Added a fallback for #976 so that if there are images saved with the old format (no extension), they can still be loaded.\nI will release a 3.7.5 patch. Please let me know if this fixes the issue.\n. Not sure what to do here. We don't have in depth knowledge of Carthage. Did you find a solution?\n. Should be fixed by #1593\n. @mythodeia I don't think cac21e1 fixes the issue.\n. I tried reverting 6406d8e, but I missed the part where on the download completion block, we trigger another startPrefetchingAtIndex:.\n. I've added a fix with commit a8fca65\n. Fixed by a8fca65\n. Guys, we need more info here. Which SDWebImage version? Which OS version? Does it repro constantly? Can you repro the crash with our demo project? Can you create a demo project which makes it easy to repro?\n. Closing - not enough info\n. If you want to check out the project directly from git, you need to clone it recursively. See the details here: https://github.com/rs/SDWebImage#installation-by-cloning-the-repository\n. :+1: \n. Closing, as a duplicate\n. Related to #1553 - to fix that issue, removed the query string from the url. This would strip your url to https://maps.googleapis.com/maps/api/staticmap\n. Because of #1589 we had to revert the fix for this issue. The remaining option is too use the SDWebImageManager cacheKeyFilter block param to override the default computation of they key in the library.\n. I'm not sure why the checks failed\n. This was added via #1504 which adds the cancelAllDownloads method to SDWebImageDownloader\n. Merged via 88b025a in 4.x branch\n. It's already fixed, in version 3.7.6. Just do a pod update\n. I don't understand the issue here. Closing. Feel free to reopen with a strong description: see what the issue should have here: https://github.com/rs/SDWebImage/blob/master/.github/ISSUE_TEMPLATE.md\n. This looks like an issue with your code. Closing the issue due to missing activity. Feel free to reopen with additional info (SDWebImage version, repro rate, can you create a small demo project to show the crash).\n. Yeap, it looks like the issue is caused by CocoaPods 1.0. Will fix it soon.\nhttps://travis-ci.org/rs/SDWebImage/builds/130876102\n. Thanks guys for the info here. Thanks to @kenmaz, I was able to fix the issue.\n. I think the idea here was to separate the images that need to be downloaded now of the ones that are being prefetched, so using 2 instances of SDWebImageManager. The code you posted looks ok, you should be able to set the same delegate for 2 manager instances.\n. @wyland @minoue10 I don't know the exact reason for having the 2 instances of SDWebImageManager, but my guess is it's related to performance, having a dedicated manager for pre-fetching that is lower in priority than the downloads needed at that time in particular.\nMaybe @rs can bring some light ... if you remember :)\nCC @mythodeia @skyline75489 . Closing, no response here.\n. Not sure what to do here.\n. Great\n. Thanks @cdzombak for detailing this.\n. @willice9527 is this still an issue for you or you found a resolution? Which version of the library are you using? Can you reproduce the crash with the demo project?\n. Closing, based on the response. @willice9527 please create any issue related to 3.8.1\n. I understand the issue but I'm not sure your fix is right.\nYou keep adding the image to that array\nwhile ([currentImages count] < idx) {\n  [currentImages addObject:image];\n}\ncurrentImages[idx] = image;\n. Sounds right. I'm not sure if it would be better to fill the array with the same image or an empty image. \n. Ok @sean9keenan. Rebase and I will look into merging it.. Ok let's give this a try in prod - merging.. Looks good, aside from the small comments I added.\n. @fabiosoft do you mean from SDImageCache? Depends on the SDWebImage version you are using. For versions 4.x, you can use diskImageDataForKey:. Closing due to missing info.\n. @bkvirendra you'll have to debug inside the library code and see why the completion is not called\n. This issue should have been fixed in 3.7.5 a8fca6584feabd625abdcbc0da921cbfc689fa3e. Please reopen if it still exists\n. Fixed with 94c1ec3e\n. Could you make use of the UIImageView category methods? sd_setImageWithURL:placeholderImage:completed:?\n. We will entirely remove our GIF support in 4.0 because it has a poor performance and use an external solution.\n. Hmm, I'm not sure you can. At least from this level. you'll need access to the SDWebImageDownloaderOperation which has a response property.. At this point, there isn't such a possibility.\n. Thanks guys, looks good with the revert.\n. Not sure. This code is from 2012. Maybe @rs can answer to this.\n. We will entirely remove our GIF support in 4.0 because it has a poor performance and use an external solution.\n. Please try the latest version (3.8.2 which uses NSURLSession). Also, there is a 4.0 release coming. You should also try that when it's available.\n. We switched back to getting the scale from the url name.\n. Thanks for your work, but this doesn't seem to be a feature we need in the core of SDWebImage. Feel free to keep it on your fork.\n. At this moment, I don't see this possible, as it is a trait of the framework to set the placeholder before querying the cache.\n. @runningfree100 is correct, you just need to set your class as the delegate of both [SDWebImagePrefetcher sharedImagePrefetcher].manager and [SDWebImageManager sharedManager]\n. Agree with @viljamik \n. Probably related to #1452 \n. Fixed by #1452. Closing, due to lack of activity.\n. This is a duplicate of #1543 \n. @patelmayank We have replaced our GIF component with a library from Flipboard (FLAnimatedImage). Could you try our 4.x branch (instructions) and see if it helps?\n. Closing. The FLAnimatedImage solution replacing our own GIF is integrated into the 4.x branch.\n. @patelmayank you can easily try using the 4.0.0-beta I released via CocoaPods.\n. @marcovanetti the reason for the spike is that since the resource is https, it probably doesn't allow caching, so we keep downloading it every time, since that is what the SDWebImageRefreshCached is telling. You should try Allocations Instrument and see the what objects keep pilling up.\n. The 4.0 branch is deprecated. We are using 4.x, but no merge is needed yet between the two.\n. Sorry, but SDWebImage requires ARC.\n. Not sure about this. The idea was you can have multiple download sources, each one with their own settings. That's why SDWebImageDownloaderOptions is passed along with every request. So one request can ask for progressive jpeg and another one use HTTP auth and so on. Not sure how would a global set of settings work. We might make the options passed by param override the ones from the class options, so therefore needing to pass 0 as options so the class options are in effect, but I'm not convinced. \n. The build fails. Could you rebase on top of the 4.x branch and recheck?\n. I'm not sure how to achieve this fat framework, but I think it's a generic question for packing frameworks and is not an issue with this library.\n. The deprecated NSURLConnection issue is handled in #823 and #1291 \n. @medisean could you please respond?\n. You are correct, we don't support LCR files at this point. Are you interested in creating a Pull Request?\n. @mythodeia Not that I know of.\nThe more I look at the code, the more I get the sensation that we already do to much. We should stick to doing a single thing in the core library and let other people create extensions.. The question is no longer visible in StackOverflow.\n. You can disable the memory caching and force SDWebImage to load from disk-cache everytime. Set SDImageCache shouldCacheImagesInMemory to NO.\n. @MichaelHuyp could you explain why this code is redundant?\n. It's not redundant, it's usually a practice to keep checking for isFinished/isCancelled. Let's leave it as it.\n. Did you try updating to the latest version of SDWebImage?\n. No response. Closing\n. This is wrong. 404 means the resource was not found. If there is indeed an image in the body, that is because of a wrong reason.\n. This sounds like an issue with CocoaPods, not SDWebImage.\nCan you provide more details?\nFor example, can you install other pods?\n. @martinpilch Please take a look at all the code regarding the sync on self.runningOperations. If there is an issue, it's in multiple places. \n. Thanks. I plan to look at this too, but I have other more urgent tickets \n. Any updates here? @martinpilch can you share some Instruments trace that show this retain cycle?\n. Since the code changed on the 4.x, branch I have replaced this PR with 9cd6779. No need to weakify self since it's usually a singleton.\n. This will be delivered in 4.0.0. See #883 \n. You are setting the image twice, probably that is causing the flash. sd_setImageWithURL will set the image automatically after the download is finished.\nIf you need to control setting the image, then use SDWebImageManager downloadImageWithURL:options:progress:completed: as follows:\n```\n[[SDWebImageManager sharedManager] downloadImageWithURL:url options:SDWebImageRefreshCached progress:nil completed:^(UIImage image, NSError error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n...\n}\n```\n. @CavalcanteLeo any updates? Any chance you are using animated (GIF) images?\n. I think this issue is similar to #538 #586 and #1354.\n787 and 00bf467 should give you a good solution for dealing with large images. Together with the GIF handled by FLAnimatedImage, this ticket should be done now.\nClosing. Let's see how this is with 4.0.0\n. Thanks @smindia1988 for sharing these settings. @SDWebImage/collaborators should we list those settings to our docs or even README page? They might come in handy for a good number of our users.. Ok. I added https://github.com/SDWebImage/SDWebImage/wiki/Common-Problems#configuration-for-large-images-avoid-high-memory-usage. I think there is. SDImageCache shouldCacheImagesInMemory should be set to NO to avoid memory caching. For the disk caching, you need to set SDWebImageCacheMemoryOnly as download option for SDWebImageManager downloadImageWithURL:options:progress:completed:. Let me know if this takes care of the caching.\n. Looks good.\n. This behavior can easily be achived with\nSDWebImageManager *manager = [SDWebImageManager sharedManager];\n[manager.imageCache imageFromDiskCacheForKey: [manager cacheKeyForURL:url]];\nI don't see a reason to add an extra method.\n. Not an exact ETA, but I am working on this\n. The 3.7.6 version is out\n. For iOS 7 and above, removed the query from the url using NSURLComponents (prior to iOS 7 the behaviour remains the same).\n. Because of #1589 we had to revert the fix for this issue. The remaining option is too use the SDWebImageManager cacheKeyFilter block param to override the default computation of they key in the library.\n. Like you noticed, we rely on the URL key to determine the scale of the images. If you can change the way the URLs are returned, you could add @2x in the name. \nOtherwise, a feature Pull Request should be created, offering a way to force a certain scale, even though I think that could cause more issues than help people.\n. It's just a check. If the key contains @2x or @3x, it would look like @2x.png - this one has 7 characters. So we need at least 8 so it contains a name before @2x.\n. Could you please translate to English?\n. Closing due to lack of information, per the Contributing guide.\n. The issue here is that setting the contentMode must be done before doing other stuff like setting the image or the frame. In our case, when the completion is called, the image is already set, that's why setting the contentMode again doesn't have an effect. You can try to do\nvoid(^completed)(UIImage *, NSError *, SDImageCacheType, NSURL *) = ^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) { \n    self.contentMode = UIViewContentModeScaleAspectFill;\n    self.image = image;\n}\n. The image url doesn't work for me\n. There is something wrong with this image or at least unusual.\nThe root cause is [[UIImage alloc] initWithData:data] will return nil for this image. So the iOS UIImage class doesn't support it. After looking at some details, I observed this is a non-standard PNG, as the first byte should be 0x89, but it's 0x3C.\nI don't think there is much we can do here. Closing the issue.\n. Strange. I have saved the image locally and it didn't work for me. As for the http2 protocol, I will replace our NSURLConnection code with NSURLSession in the 4.0 version, so it should work after that.\n. I don't have any idea. Like you said, changing from a strong reference to a weak one is not an obvious fix for a crash. The issue here is this commit is super old (2013). I strongly suggest you use a newer version of SDWebImage.\n. Closing in favour of #1566 \n. Seems like you have a very old version of the code. This was fixed almost a year ago by #1257 \n. Resolved by #1581 \n. I'm not sure if our current networking code (based on NSURLConnection) supports ipv6, but we will rewrite that using NSURLSession in the 4.0 release, so I think ipv6 will be supported then.\n. We don't have a clear estimate, but aiming for this fall.\n. We are working on the networking rewrite as we speak.\n. @tehnoir because of this June 1st milestone from Apple, I have made turned around our timeline and dedicated the 3.8.0 release for the NSURLSession support, so people can get it as soon as possible. A pull request is already open, we will test it properly and then release 3.8.\n. Resolved by #1578 \n. 3.8.0 version was just released.\n. @ryandailey100 are you sure this is related to SDWebImage? Apple docs says NSURLSession supports IPv6.. https://developer.apple.com/news/?id=05042016a has details. We are ok by working with NSURLSession. There must be something different that you are doing, since a lot of people submit apps with SDWebImage included and do not get rejected (myself included).. animated webp support is scheduled for the 4.0 release.\n. Resolved by #1438\n. @srinivasanVaradan we need more information here: a stack trace and please try to replicate with our demo project.\n. 2.0-compat doesn't need to be merged into master, that is an old compatibility branch of 2.x versions.\n. It's not the time to merge this branch into master. We will do so when it's ready to be released. Until then, minor versions (3.x) might come out.\n. Good catch @lsflhuyy. Thanks.\n. @mythodeia @rs could you check this out and let me know what you think?\n. Merging this to avoid keeping multiple branches. Will make all future changes directly on the 4.x branch. Also need to update the documentation (and the migration guide #1590 )\n. @mythodeia please still review this when you have time.\n. @mythodeia @NSKevin this crash doesn't look like a regular crash. It's a simulated (not sure what that means) watchdog crash, not related to memory usage.\n. @eggswift Because the idea was to force people using the FLAnimatedImage component for the GIFs, as the one we had before had poor performance.\nHope this makes sense. I will close the ticket #1836 and continue the conversation here, where other people involved can see it.. Yeap. @mythodeia is right. Also, this issue was already reported #1113\n. This is an issue with the repo of libwebp, a dependency of SDWebImage. This repo is apparently not accessible in your country. You could instead install SDWebImage manually. See https://github.com/rs/SDWebImage#installation-by-cloning-the-repository\n. We have changed that url in our repo. But we cannot make that change in CocoaPods.\n. Looks good. One immediate comment: since NSURLSession is available only from iOS 7, so we need to change the deployment target from 5.0 to 7.0 in the podspec and the projects.\n. @mythodeia @rs please take a look at this. Apple says\n\nAt WWDC 2015 we announced the transition to IPv6-only network services in iOS 9. Starting June 1, 2016 all apps submitted to the App Store must support IPv6-only networking. Most apps will not require any changes because IPv6 is already supported by NSURLSession and CFNetwork APIs.\n\nI would make a 3.8 release ASAP. Minor version and not patch because we will loose compatibility with iOS 5 and 6.\n. @mythodeia I sure hope so. As soon as this PR is merged (requires small changes and testing), I will release 3.8.\n. I'll go ahead and merge it. I will add the deployment target changes directly on master.\n. @ksi1024 can you share any measurements that show the degraded performance?\n. @ksi1024 I just released 3.8.0, please try it out and let us know if it performs as expected.\n. Yeap. I recently merged master into 4.x\n. Thanks @RobertBiehl for the suggestion here. Indeed, that is a problem. I will dig into this to fix it for both cases (using frameworks and using static libs). Hope it's not something that needs to change inside FLAnimatedImage.\n. PS: Let's keep this reopen so I don't forget about it.\n. 3.8 was not released yet. It will very soon, stay tuned.\n. @mythodeia another PR for you too look at. Enjoy :)\n. I will go ahead and merge this. Feel free to add comments afterwards.\n. @NSKevin please provide the other info from the template:\nIssue Info\n| Info | Value |\n| --- | --- |\n| Platform Name | e.g. ios / tvos |\n| Platform Version | e.g. 8.0 |\n| SDWebImage Version | e.g. 3.7.6 |\n| Integration Method | e.g. carthage / cocoapods / manually |\n| Xcode Version | e.g. Xcode 7.3 |\n| Repro rate | e.g. all the time (100%) / sometimes x% / only once |\n| Repro with our demo prj | e.g. does it happen with our demo project? |\n| Demo project link | e.g. link to a demo project that highlights the issue |\n. Thanks @minsOne, indeed I missed the min OS of string is 8.0. Related to #1553.\n. @NSKevin thanks for this. I adapted a bit your fix. Since we have places where we use that key as a dictionary key, I preferred to return an empty string rather than nil when the url was nil. 1bf62d4\n. @oanapopescu Thanks a lot for showing interest and contributing to SDWebImage! \nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. Was this a large image? Looks like the system could not allocate that memory. Not sure how to fix this.\n. Please retry with 4.0.0 and reopen if it's still happening.\n. @myriky in 3.8.0 we fixed #1433 with fb0cdb6, 1bf62d4 and #1584. Basically the key created from the image URL no longer contains the query params. In your case, the key for this url\nhttp://img1.daumcdn.net/thumb/R124x0@2x.q50/?fname=http://t1.daumcdn.net/kstyle/upload/shopbox/2016/06/81/74/16/0/16748125.jpg is http://img1.daumcdn.net/thumb/R124x0@2x.q50/. That's because of the way the urls are created on this server.\nI'm not sure if this is an isolated issue or we just created problems for a lot of users. I wonder how many urls are like this, because in my whole experience, I never got images with query params.\n. It's been added in the Changelog and the Release notes\n. No problem :)\n. I've decided to revert to the old behavior. People with problems with the way we compute the key by default can use SDWebImageManager cacheKeyFilter to override that mechanism.\n. Fixed by de149ae\n. @myriky I just released a 3.8.1 patch version that reverts to the old way of computing the keys. Can you upgrade and let me know if it fixes the issue?\n. Great\n. Removed deprecated methods: #774 \n. Renamed SDWebImageManager downloadImageWithURL:options:progress:completed: to loadImageWithURL:options:progress:completed: as it makes more sense, since we check the cache first and download only if needed a32a177\n. Deleted targets: SDWebImage+MKAnnotation, SDWebImage+WebP, SDWebImageFramework. \n- SDWebImage target that build as a static library (all subspecs included) -> libSDWebImage.a\n- \"SDWebImageiOS\" and \"SDWebImagetvOS\" targets that build as dynamic frameworks\n. Travis CI updated\n. #883 Fix multiple requests for same image and then canceling one (download token).\n. Modern Objective-C syntax 64382b9\n. Implemented Lightweight Generics and Nullability #1581 \n. e775b44 - Extended the SDImageCache queryDiskCacheForKey:done: so it also returns the NSData (we will need it later for the GIF images).\n- had to add an NSData param to SDWebImageQueryCompletedBlock, so to make it simpler see this change for users, renamed the block type to SDCacheQueryCompletedBlock\n- pass the NSData when getting the image from disk cache\n. aecb13d - Extended the SDWebImageManager loadImageWithURL:options:progress:completed: so it also returns the NSData (we will need it later for the GIF images).\n- had to add an NSData param to SDWebImageCompletionWithFinishedBlock, so to make it simpler see this change for users, renamed the block type to SDInternalCompletionBlock\n- pass the NSData from the ImageCache or the Downloader\n- updated all classes using this method with the new signature\n. For consistency with the previous change, also renamed SDWebImageCompletionBlock to SDExternalCompletionBlock\n. UIImage(GIF) methods removed.\n. watchOS and OS X #1595 \n. the guide should describe the changes on each entity\n. unit testing #1681 \n. In SDCacheCostForImage we multiply the scale 2 times because each dimension contains it - both the width and the height. It basically returns the number of pixels. If you have a 200x300 image @2x, then it basically has 400x600 pixels = 240000 pixels.\nAs stated in the doc The cost function is the number of pixels held in memory. this means you have to compute the number of pixels that can be stored in 100MB. I think dividing it by 8*4 (8 bytes per chanel * 4 channels RGBA) will give you the number of pixels that can be stored in 100MB. This means you should set: 3,125 * 1024 * 1024 = 3276800 pixels. Does this make sense?\n. @yaliashkevich you're right: 32-bit per pixel (not bytes as I said). Your calculation is correct.\n. Could you create a demo project with this issue?\n. Glad you found the issue\n. @corydolphin Thanks a lot for showing interest and contributing to SDWebImage! \nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. Ping @corydolphin . @corydolphin that's ok, we totally understand. If you come back, feel free to revisit us :)\nTake care.. @mythodeia please take a look\n. @mythodeia good catch. It seems it's an issue with building the webp files for watchOS - device. Because they compile fine for iOS device. I will look into it.\n. @mythodeia here's the more detailed issue:\n- inline assembly is incompatible with ios and watchos\n- because of the ios part, the google folks added this code\n```\n// Right now, some intrinsics functions seem slower, so we disable them\n// everywhere except aarch64 where the inline assembly is incompatible.\nif defined(aarch64)\ndefine WEBP_USE_INTRINSICS   // use intrinsics when possible\n```\nThen if WEBP_USE_INTRINSICS is defined, the assembly inline code is replaced by some other code (which is probably slower), but can compile.\n- so for the ios, it will define WEBP_USE_INTRINSICS, but for watchos it wont'.\n- even if we get it to work in our project, if someone uses it with CocoaPods, I'm not sure if we could force define WEBP_USE_INTRINSICS\n. @mythodeia I added a new commit that sets WEBP_USE_INTRINSICS for the watchOS targets, it builds fine now. Probably we will need to define this in our podspec so people don't need to set it manually.\n. Good catches. I actually missed 2 files from the new webp. Travis also showed this error. Should be fixed now.\n. @mythodeia I will also merge this in. let me know if you managed to test anything\n. You should check the SDWebImage cache folder. If it's no longer there, our job is done. It might be cached by the network system.\n. @iosnatarajan looks very interesting. We will need a thorough review, but this is promising.\n. @iosnatarajan not sure, there are a bunch of items pilled up for 4.0, I'm moving through them.\n. Looks like #2197 has fixed #821 and #1305. Do we still need this PR or we can close it? @dreampiggy @iosnatarajan . @Nasy521 you haven't filed any of the required info, especially what the issue is. Please reopen with the appropriate details.\n. @757388559 please fill all the info required, as stated in the Contributing doc. Also, please share the image url that is causing this.\n. At this point, you can't. From 4.0 version (coming next), you will get back a token that can be used to cancel an image loading operation, but that's it. No access to the session.\n. Feel free to make a pull request, but I'm not sure if this is something we need in the library.\n. @HuiiChong did you solve your issue?\n. Will look into this, but right now it looks like a very big feature with many changes, not sure if we will include it in the library.\n. It seems the image you provided is an animated webp image. It works now, due to #1438 that was merged into the 4.x branch. 4.0.0 release is coming\n. Or even delete the DerivedData folder. Looks like an Xcode issue.\n. I will look at this issue asap. Looks like more than an isolated issue\n. I will take a proper look at this issue this weekend.\n. I have spent some time trying to figure this out, but without success. \nI'm currently at the state where I think it's related to NSURLCache and perhaps race conditioning there when one thread writes to the cache and this one reads. I'm on this thought path because I noticed in https://github.com/rs/SDWebImage/issues/1608#issuecomment-230932690 that on thread 7, the NSURLSession is writing stuff to the NSURLCache. I would be very curious if this is the case for other crashlogs as well. Could you (who use Fabric), just use the share option from Fabric so you can send me the link to the issue (I will be able to look at all the threads, iOS versions and other info).\n. PS: @bsjcho thanks for the extra info\n. Many thanks @DarkDarius. It seems my assumption was wrong. In your crashlog, there is no other thread working with the NSURLCache - dead end here, will need a new hypothesis.\nAnother thing I tried was to pass nil to [[NSURLCache sharedURLCache] cachedResponseForRequest:] but it won't crash.\nAnother idea is that somehow, the NSURLRequest gets deallocated, but that makes little sense since the SDWebImageDownloaderOperation has a strong reference to the NSURLRequest.\n. Thanks @romk1n \n. Guys, I'm in a bit of dead-end here. I need help. I've added 1 commit on master with a small change, could you try it and see if the issue still occurs? Also, if anyone can reproduce the issue constantly, could you create a small demo project so I can debug it properly? (maybe @bsjcho)\nNote: I was able to simulate the same crashlog by using a deallocated instance of NSURLRequest passed to [NSURLCache cachedResponseForRequest:], but I forced that. Not able to properly reproduce with the current code.\n. I have made an attempt fix in e7bd5ab: Apparently there is a race condition on NSURLCache and we avoid making those checks unless necessary (basically we will query the NSURLCache only when SDWebImageRefreshCached is used and the image cannot be cached by the system when it's too big or behind authentication). Will release a new version soon.\n. Guys, 3.8.2 is now available via CocoaPods, please try it out and let me know if the issue still happens or not.\n. @kaspermunck I did not create a radar, as I am not sure that is the cause. I'm waiting for people that had the issue and upgraded to comment back, if it's fixed. Basically, I only reduced the number of calls to NSURLCache\n. Thanks to @zaczh, this issue will entirely go away in version 4.1.0.. This means the download operation will use NSOperationQueuePriorityLow in the NSOperationQueue so other downloads have priority towards it. Look at the code for more clarification.\n. Not sure what the benefit is here. Closing.\n. I'm not sure how to approach this. The AFN thread does not describe a solution. No resolution here. #1676 and 7940577 should have fixed this.\n. Yes it is. Manually create the prefetcher, image manager and image cache and for this cache, set it not to use memory.\nSDImageCache *cache = [[SDImageCache alloc] init];\ncache.shouldCacheImagesInMemory = NO;\ncache.shouldDecompressImages = NO;\nSDWebImageDownloader *downloader = [[SDWebImageDownloader alloc] init];\nSDWebImageManager *manager = [[SDWebImageManager alloc] initWithCache:cache downloader:downloader];\nSDWebImagePrefetcher *prefetcher = [[SDWebImagePrefetcher alloc] initWithManager:manager];\n. The current version of SDWebImage (3.8.1) works on iOS 7 and later. You just need to set your app to support iOS 7 as deployment target. Make sure your Podfile has platform :ios, '7.0'\n. On the 4.x branch, we refactored all those methods on a UIView category. This means there is no need for the MSSticker to have its own methods. Calling the ones from UIView should be sufficient.\n. I will take a proper look at this issue this weekend.\n. @bestwnh I looked at the PINRemoteImage issue you linked, but their crash log looks very different. \ntheirs:\n0   libdispatch.dylib  0x0000000199e22b48 dispatch_async + 76\n1   PINRemoteImage     0x0000000100952904 -[PINURLSessionManager URLSession:task:didReceiveChallenge:completionHandler:] (PINURLSessionManager.m:79)\nours:\n0  libobjc.A.dylib 0x2393fa66 objc_msgSend + 5\n1  CFNetwork       0x2478877f -[NSURLCache cachedResponseForRequest:] + 114\n2  SDWebImage      0x23bd795 -[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:] (SDWebImageDownloaderOperation.m:407)\nThanks anyway, it might have been of help. I have looked at the crash for a while, but can't figure out the cause.\n. Guys, I'm in a bit of dead-end here. I need help. I've added 1 commit on master with a small change, could you try it and see if the issue still occurs? Also, if anyone can reproduce the issue constantly, could you create a small demo project so I can debug it properly? (maybe @GBoyadziev you said it happens quite often)\nNote: I was able to simulate the same crashlog by using a deallocated instance of NSURLRequest passed to [NSURLCache cachedResponseForRequest:], but I forced that. Not able to properly reproduce with the current code.\n. I have made an attempt fix in e7bd5ab: Apparently there is a race condition on NSURLCache and we avoid making those checks unless necessary (basically we will query the NSURLCache only when SDWebImageRefreshCached is used and the image cannot be cached by the system when it's too big or behind authentication). Will release a new version soon.\n. Guys, 3.8.2 is now available via CocoaPods, please try it out and let me know if the issue still happens or not.\n. @zheck does it have the same frequency? We did not fix the issue, but try to reduce the calls to [[NSURLCache sharedURLCache] cachedResponseForRequest:], since we considered that is the cause (a race condition on NSURLCache). Right now it should be called only if SDWebImageRefreshCached is explicitly sent as option and the image cannot be cached (since it's too big or requires authentication). Can you confirm any of this?\n. Thanks to @zaczh, this issue will entirely go away in version 4.1.0.. #2032 and #1994 should take care of this crash here, even though there are some chances it will bring it back :) let's keep an eye open.. 4.1.1 is now released.. Can you share the image causing the problem? I tried for instance with https://www.ioncannon.net/wp-content/uploads/2011/06/test2.webp which has an invalid SSL certificate and after setting SDWebImageAllowInvalidSSLCertificates, the download worked fine.\n. Closing. Please reopen if you have more info on this.\n. This should no happen, right now we have a check at the beginning of the sd_imageWithData function:\nif (!data) {\n        return nil;\n    }\n. Of course it will. Right now, since we don't have any explicit Swift code, I'm not sure if we need to do anything in particular for this.\n. @billionbucks @ducmaxime @joridor can you provide some image urls that don't work for you so we can test?\n. PS: I just created a demo Swift 3 project, added SDWebImage and indeed got into the 'ambiguous method' issue, but I easily passed that by adding the options param and then everything worked fine (including downloading and showing the image). I used this url: https://nr-platform.s3.amazonaws.com/uploads/platform/published_extension/branding_icon/275/AmazonS3.png\n. @henry0475 which version of SDWebImage?\n. @henrik for version 4.0.0, use\nSDWebImageManager.shared().imageDownloader?.downloadImage(with: url, options: SDWebImageDownloaderOptions.allowInvalidSSLCertificates, progress: { (min, max, url) in\n            print(\"loading\u2026\u2026\")\n            }, completed: { (image, data, error, finished) in\n                if image != nil {\n                    print(\"finished\")\n                } else {\n                    print(\"wrong\")\n                }\n        })\n. Here's my sample project: https://github.com/rs/SDWebImage/files/515471/Swift3TestSDWebImage.zip.\nIf your images are available via http, you need to add the App Transport Security Settings/Allow Arbitrary Loads=YES into your Info.plist to allow this unsecure connections.\nAlso, you can try the 4.0.0 (right now, beta2 is available via cocoapods, even though it's not an official release yet).\n. @gujinku thanks. About an ETA, in think it will take a few more days to properly test and wrap up the documentation.\n. This is a question you should address on a forum like Stack Overflow. It has nothing to do with the SDWebImage code that will give you the image as it is downloaded.\n. This is an issue with autolayout (constraints) and it's not related to our library. Closing.\n. At that point (before checking) we already have an image from image = [[UIImage alloc] initWithData:data];. We recreate it only if it has a different orientation.\n. In the 4.x branch, you can find our new GIF solution based on FLAnimatedImage. Please try with that and see if the issue still occurs.\n. Yeah, you should only load the image once, not every time you scroll. We do support background images for buttons, look at our UIButton+WebCache category.\n. Please provide some example image urls. Also, notice the latest version out there is 3.8.2, might want to try upgrading first.\n. Ideally, it should. But it's a bit more difficult to do\n. Fixed in latest 4.x releases, see #1638 for details.. I have no idea, but you should look at the actual NSError\n. Should be fixed now after merging #1657.\n. Replaced by 17ae791. Thanks\n. Sorry but for now we are going with the FLAnimatedImage approach. Seems a lot better in the long run.\n. You can try the 4.x branch, but we are not ready for a release yet. See the issues marked with 4.0.0\n. I think you could call [imageView sd_cancelImageLoadOperationWithKey:@\"UIImageViewImageLoad\"]\n. Looks the same with #1623 \n. Closing as a duplicate.\n. I did not create a new version, it's still 3.8.1. I only made a commit attempt on master branch, but I don't think it fixes the issue.\n. Should be fixed by e7bd5ab.\n. I don't understand what the issue is and how we are fixing it. Could you detail?\n. Guys, I strongly recommend you don't download that version. To get the 3.8.1, you just need to follow the instructions https://github.com/rs/SDWebImage#installation. I recommend you use CocoaPods or Carthage, makes everything easier.\nAs for the archived frameworks, we stopped doing them from version 3.6 which is more than 1 year old. Forget about that.\n. Please look at https://github.com/rs/SDWebImage/pull/1141 and http://stackoverflow.com/questions/19546054/nscache-crashing-when-memory-limit-is-reached-only-on-ios-7/19549090#19549090\n. Does this happen on more than 1 dev machine?\nAlso, could you repro this in a new demo project you start from scratch? It looks very odd to me\n. Can you share some URLs? Not sure I see your issue, it's most probably in your code not SDWebImage.\n. @lixiang1994 what's the description printed in the console? It should say something about the error\n. Can someone create a PR with those fixes? I don't know to which pieces of code they apply. @dreampiggy that is the ideal case :). Not for the near future. Feel free to add it.\n. I know, you're right. My issue is there are so many open issues and I can't seem to close them down. It's confusing for me and for other people as well.\n. Should be available in 4.0.0 version due to the UIView+WebCache category. @zfha 4.0.0 is closing to a release, not sure about a date.\n. This issue is fixed on the 4.x branch, but that is still in progress. You can try it from there, but keep in mind it's not released yet.\n. Looks good. But we should try to make the test work as well. Better coverage that way.\n. Ok, I merged it into the 4.x branch, for now thats it. Thanks\n. @mackoj Thanks a lot for showing interest and contributing to SDWebImage! \nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. Ping @mackoj . The method is not public because it shouldn't be used directly :)\nWith the latest versions of SDWebImage, you also get the NSData in the completion, along with the UIImage, so feel free to use that.\n. @Mina-R-Meshriky if you have the image already, just assign it to the imageView imageView.image = image. I don't think you need SDWebImage for that, what this lib does is download and cache. Inside SDWebImage, we are supporting webP images by using libwebp, you should look into that. (PS: regarding what you said, sending images or any binary data into JSON is a bad idea, you should use a CDN like setup where you can access images directly via a url).. I think the error is because cache cannot be nil\n. This is fixed on the 4.x branch.\n. You should upgrade to 3.8 for ipv6\n. This is not ready to be merged yet\n. In the 4.x branch, due to some refactoring, the activity indicator code is now on UIView, so all the  views can get it, even UIButton.\n. PS: your solution looks cleaner. We may want to refactor like that, have the activity indicator stuff in a separate component\n. @nilotic does this code you posted work?\n. Please make the issue conform to the issue template: https://github.com/rs/SDWebImage/blob/master/.github/ISSUE_TEMPLATE.md\n. @vinguan there is no other way at this point.\n. Can you add some extra details? See the ISSUE TEMPLATE. Does it happen with our demo project? Any image or just a particular one? .... Thanks for the info @superk589, will look into this. great to hear that. closing. @pengkun please follow the issue template and provide us with all the info required there: https://github.com/rs/SDWebImage/blob/master/.github/ISSUE_TEMPLATE.md\n. Should be fixed in the latest 4.x.\n. @Gantaios please provide all the info required by https://github.com/rs/SDWebImage/blob/master/.github/ISSUE_TEMPLATE.md.\n. Closing. Feel free to reopen with the required info.\n. Looks interesting. I will take a closer look soon\n. Thanks @jimmaye \n. I agree with what you say (check if nil before dispatch), but those completion blocks will be altered in the 4.0.0 version i'm currently working on. Stay tuned\n. I've made some changes for version 4.0 regarding the completion blocks. I will leave them as they are for now and lets see how it goes.\n. We already have this fix on the 4.x branch. Thanks anyway\n. @mythodeia @rs take a look if you have time and comment. I will merge it in a day or two anyway, but feedback is more than welcome.\n. Thanks @mythodeia. It should be ok, but if you find anything suspicious, just let me know :)\n. @ansonlo I just tried creating a demo Swift 3.0 project with Xcode 8, using 3.8.2 and WebP. Everything worked fine.\nPlease note that there might be issues with HTTP urls, but those are OS specific and are not related to SDWebImage.\n. Same crash as #1619. #1676 and 7940577 should have fixed this.\n. Replaced by #2058 - closing this PR. @hamentmiglani could you be more specific. Same issues as described in #1627 ?\n. I will close this. It doesn't provide the required info.\n. @diejmon Oh man, awesome. I kept investigating this crap for hours and couldn't understand why the code there doesn't work. I didn't check that simple macro thing, I kept looking at SF scenarios. \nReally glad you caught it.\n. @psnt143 we cannot understand what you are saying.\n. I think you should be able to avoid the deletion by working with maxCacheAge config from SDImageCache. It's default to 1 week, but you can change it. \n. Try this\n```\nlet block: SDWebImageCompletionBlock = {(image, error, cacheType, imageURL) -> Void in\n    activityIndicator.stopAnimating()\n}\nimageView.sd_setImage(with: picture_url, placeholderImage: UIImage(named: \"placeholder\"), options: SDWebImageOptions(rawValue: 0), completed: block)\n```\nYou don't need to specify the block param types.\n. Hmm. Strange. I just created a demo project with Xcode 8, Swift 3 and everything works fine, even with the image URLs you provided. Here's the demo project.\nSwift3TestSDWebImage.zip\nOne thing to check would be the libwebp version, as libwebp 0.5.1 was released this September. Make sure you use that.\n. It's a separate framework, a dependency of SDWebImage. You need version 4.0.0 for this. 4.0.0-beta2 is available and an official release is very close.\n. Can you share with us the simple test project where your issue appears?\n. This seems fixed - no idea why it's still open. @mythodeia @rs @matej @lavoy @akhenakh \n@rromanchuk @mallorypaine @gsempe @mattjgalloway @timkoma @harishkashyap @tscheepers @voronianski\nGuys, this is a very big release, we already have a working 4.0.0-beta2. I would really appreciate any help from you on testing or indicating missing parts before we can cut a final release.\nI added the people I remembered being active on pull requests or conversations. Feel free to include other people if you know they can help.\n. - @diejmon \n. @rs that section is still to be complete. I've listed all the changes and I just need the basic cases covered with examples.\n. @rs Also, I think the short description of SDWebImage points to an older documentation:http://hackemist.com/SDWebImage/doc. We can either update that (not sure how) or change that link to http://cocoadocs.org/docsets/SDWebImage, but only you can do this.\n. All right guys, fingers crossed. I pushed the official 4.0.0 version.. Thanks @JiaoYingBo \n. I have merged #1952 , let's close this one and see how it goes.. @weiminghuaa clearing up the memory cache is a feature of SDWebImage. I don't think we will remove it. You can try to find a way around this. It may work. Let me know. I don't know if we can do more here. Closing. Feel free to reopen or continue the conversation. @skyline75489 looks good. I tested all combinations (Swift, Objc with and without use_frameworks) and they all work.. I just tried with the demo project and the image url you supplied and it works fine. To debug properly, you can also print the image in the completion block, but it should be non-nil. Also check the data type of newData.avatar_mid to make sure it's a NSString and not something else.\n. Do a git add. This is not related to our project, it's a git usage question.\n. I agree @skyline75489. We need to support both frameworks and static libs integrations. I will look into this issue soon.\n. Fixed by #1696 . This should be fixed in version 4.0.0.. @skyline75489 @dreampiggy should we refresh this PR? Maybe target 5.0 release? What is your opinion?\nI'm just concerned this code will become more code for us to maintain/fix.\nAnother idea is to allow plugin-able inputs. Closing based on the last comment.. Should be fixed in version 4.0.0.. This should be fixed in 4.0.0. @skyline75489 looks quite interesting, I will take a look at this soon.. @dreampiggy does #2057 replace this PR?. @skyline75489 sorry for this PR still not being merged.\nRevisiting this after so long, I thought: can make just make another SDImageCache implementation based on ImageIO? Similar pattern to the one for coder/decoder plugins. If we define an interface for a cache, then we can have multiple implementations. This one (ImageIO) could live in its own repo on SDWebImage organization.\nIdeas?\nCC @dreampiggy @zhongwuzw @mythodeia . I think the action to take here is just to close the PR. I don't see anyone interested in doing the implementation for another SDImageCache based on ImageIO code. We have the PR as a reference, I would just go ahead and close.\n@skyline75489 if you consider otherwise, please let us/me know and we can discuss it.. Fixed by 79683ba. Thanks @tomj . Just add the control you want over or as a subview of the UIImageView.. Thanks @timbroder \n. @timbroder Thanks a lot for showing interest and contributing to SDWebImage! \nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. Ping @timbroder . @timbroder no problem. I sent you an invite to the org, you can accept it now and get back when you have some time, or just accept it then.. Done @timbroder - thanks for letting us know. Thanks @timbroder . Thanks @cdunkel . Please reopen when the issue description contains all the required info.. Those issues should be fixed in 4.0.0. @chenzhuolin1002 please provide detailed information about the crash. If it doesn't have the same stacktrace, please look at other issues on our project or create a new issue. It's important we keep the conversations on issues clean.. Ok, I will reopen this and look into it. Should be fixed by #1940 - closing for now. Should be fixed in 4.0.0. Does SDWebImage build properly? You need to look at the build console in detail to see what is wrong.. Not sure if this is the desired behavior. I will not merge this for now, but appreciate the work @baight . @baight they should behave in the same way, even though people got used to this behaviour. Let's revisit this. I don't think this is the right fix. Let's see if the issue (which is now fixed) reproduces after we release 4.0.. @thsseek you did not conform to the issue template and provide all the info.. @kuyazee there is no UIImage category because it doesn't make sense. UIImage is not a view, so I don't think we need that category.. Please retry with 4.0.0, we are using FLAnimatedImage for the GIF images.. Sounds like an issue with your code. Make sure you have the proper background set manually.. Please retry with 4.0.0, we have replaced our GIF component with FLAnimatedImage.. Related to #1759 . Closing - see #1759 for details. thanks @tiagomartinho . Please reopen with the proper info as requested in the issue template. Thanks @zaczh, this looks a lot cleaner and hopefully will get rid of the NSURLCache crash (#1608 #1623). Thanks @Baichenghui . Related to #1759 . Closing - please see #1759 for details.. Please retry with the latest 4.0.0 version. Closing - please see #1759 for details.. I don't understand the question. Please retry with the latest 4.0 version and let us know if this issue still exists.. Ideally, the weak-strong pattern should be used in all places, to be super-safe. But since SDWebImageManager is a singleton, we don't really need to worry about it in that case.. @IvanChan it is a good idea, but us the maintainers will not have the time to do this in the near future. Feel free to work on a pull request. @IvanChan see #1991. I think it's pretty close to what you asked here. And it will be included into the next (4.2.0) release.. This was changed in the 4.0.0 release. Please retry. #import <SDWebImage/UIImageView+WebCache.h> is correct for 4.0.0 version. Closing - See #1759 for details. @eggswift thanks for working on this, but I can't merge it yet.\nLet me tell you why. We had some previous issues in this area of the project (name of the file saved to disk):\n- in 3.8.0 we wanted to fix an issue (file name contained the URL query) so we: \n  - Removed the URL query params from the filename (key) fb0cdb6 1bf62d4 #1584 - fixes #1433 #1553 #1583 #1585\n- in 3.8.1 we had to revert because of \n  - SDWebImage 3.8.0 get wrong image #1589 - the issue was caused by the changes in 3.8.0 (Removed the URL query params from the filename (key) fb0cdb6 1bf62d4 #1584 - fixes #1433 #1553 #1583 #1585) - Reverted.\n  - Note: The solution for those issues (i.e. #1433 #1553) is to set the SDWebImageManager cacheKeyFilter block and do their own calculations there.\nWe need to have a thorough look at the whole case and see if we can do the change you want.. I have re-reviewed this issue. I don't think we can merge your fix, or we will do the same mistake I described before. Feel free to add this way of computing the key using cacheKeyFilter.\nSorry about this, but I think it's better this way for the majority of the users and who needs to override it, can do it.. You need to find a way to make the same request as with postman.. I will look at this soon (also marked it for 4.1.0). In the meantime, see #1627. @skyline75489 thanks for looking into this, your solution sounds like it can work and take care of the issue. Are you available for making a PR with this?. PS: Regarding a Swift subspec, CocoaLumberjack does the same and it works (not ideal solution but a working one).\n@skyline75489 couldn't we mark as NS_SWIFT_UNAVAILABLE all the methods in each category except the ones that have all the params? . @skyline75489 yeah, that was my point. For now, I would just go with the simple solution (no Swift). Especially because it seems that your branch keeps failing at building in Travis at this pod lib lint --allow-warnings\n. Exactly. And thanks. @skyline75489\n- for the method you posted above, the options param has a default value because it's an enum, and also the completedBlock param has a default value being a trailing clojure param. My only problem there is that the progressBlock has no default value so we kinda have to always add it.\n- to fix this, I would suggest instead of just one method left available in each category, make two of them, one with progressBlock and one without it. We can use NS_SWIFT_NAME to make sure the two methods don't collide\nThe ObjC interface would look like this:\n```\n- (void)sd_setImageWithURL:(nullable NSURL )url NS_SWIFT_UNAVAILABLE(\"\");\n...\n- (void)sd_setImageWithURL:(nullable NSURL )url\n          placeholderImage:(nullable UIImage *)placeholder\n                   options:(SDWebImageOptions)options\n                 completed:(nullable SDExternalCompletionBlock)completedBlock \nNS_SWIFT_NAME(sd_setImage(url:placeholder:options:completed:));\n\n(void)sd_setImageWithURL:(nullable NSURL )url\n          placeholderImage:(nullable UIImage )placeholder\n                   options:(SDWebImageOptions)options\n                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                 completed:(nullable SDExternalCompletionBlock)completedBlock \nNS_SWIFT_NAME(sd_setImageWithProgress(url:placeholder:options:progress:completed:));\nand the generated Swift interface\nopen func sd_setImage(url: URL?, placeholder: UIImage?, options: SDWebImageOptions = [], completed completedBlock: __ObjC.SDExternalCompletionBlock? = nil)\n\nopen func sd_setImageWithProgress(url: URL?, placeholder: UIImage?, options: SDWebImageOptions = [], progress progressBlock: __ObjC.SDWebImageDownloaderProgressBlock?, completed completedBlock: __ObjC.SDExternalCompletionBlock? = nil)\n```\nHow does this sound?. I'm not too worried about placeholder, as you can simply pass nil there when using the APIs. The original issue we started from is compiler errors when using some of the APIs. And the exception for progress is because it's in the middle of two other params with default values. \nThe general recommendation (for all languages) is to group all params with default value at the end.\nAlso, I think only a few people use progress and therefore can use a different API when that is the case. For placeholder, I think it's the other way around, most of the people use it.. About NS_SWIFT_UNAVAILABLE, I see your point.\nAnother idea for this issue:\n- we added the sd_ prefix to avoid colliding with other categories on UIImageView. For instance, AFNetworking had a similar categ with a setImageWithURL: method.\n- but for Swift, since we have namespaces, we could use NS_SWIFT_NAME(setImage(url:placeholder:options:completed:)) without the sd_ prefix, so the compiler can distinguish between the two.. As for NS_REFINED_FOR_SWIFT, I didn't use it before but it looks interesting - see details.\nFor - (void)sd_setImageWithURL:(nullable NSURL *)url NS_REFINED_FOR_SWIFT(\"\") it will generate open func __sd_setImage(with url: URL?), so with __ as prefix.\nThis can work as well.. Last comment from this burst :)\n- since we have already a version 4.0.0 and we want to go to 4.1.0, we can't make breaking changes, so dropping the sd_ prefix doesn't work. I'd go with NS_REFINED_FOR_SWIFT in this case.. Fixed by 93d259c. @sunXiChun need to take a closer look. \n@mythodeia what do you think?. Great @mythodeia. We will include it in the next release. Still not sure what the next release is: 4.1.0 if everything with 4.0.0 works or 4.0.1 if we need to patch something fast.. Let's assume the best and go with 4.1.0 for now.. Please reopen when the required info in the template is provided.. Replaced by #1735 . @ryandailey100 look at SDWebImagePrefetcher. I have no response to this.. @ankit-betterbutter the question was if this scenario happens WITH OUR DEMO, not to create a demo.. @ivan-konov please fill in the info required in the ISSUE TEMPLATE. @ivan-konov @tualatrix (who created #1781) @lauracalinoiu this problem is tricky.\nWhen installing via Carthage, indeed you get FLAnimatedImage as well. But with CocoaPods, you can just use the Core subspec which means no FLAnimatedImage.\nAlso, if you do install FLAnimatedImage as a dependency of SDWebImage via CocoaPods, this path <SDWebImage/FLAnimatedImage.h> will not work.\nNot sure what to do here.\nCC @mythodeia @skyline75489. Actually I think I found a way.\n```\nif __has_include()\nimport \nendif\nif __has_include()\nimport \nendif\n```\nIt will check if the inclusion is available.\nBecause the issue of direct inclusion was not so easy. It might have worked for Carthage alone, but for people installing via CocoaPods, it would not have worked.\nAnd we cannot use the Project visibility for FLAnimatedImage.h and FLAnimatedImageView.h since people using Carthage might need to reference FLAnimatedImage entities directly. For WebP, since we hide all the implementation details, we don't need to make any of those headers Public so the umbrella warning does not apply there.. I don't know what the exact issue is (I never used NSAllowsArbitraryLoadsForMedia), but If you have set NSAllowsArbitraryLoads inside NSAppTransportSecurity in the plist, then your non-https connections should work.\nThe issue doesn't seem to be a direct problem with the library, so I'll close the issue.. I see. But those are settings for your application. Not really related to our project, right?. Can you share a demo project where this happens?. Thanks @Wenzhi . Thanks @slxl . Let's see how we can fix this. I assume it's just missing from the Info.plist, even if that plist was generated by Xcode. . Can any of you guys create a PR with this change?. Great guys.\n@ivan-konov PR was merged into master.\nClosing this.. Related to #1776 . @tualatrix thanks for this PR, but I did it a bit different via d9f7cf4 - see #1776 for details. @LanYanQin can you reproduce this crash with our demo project? Could you create a demo project of your own where this crash happens all the time? It would help identify the issue.\nAlso, what's the stack trace for the crash?. Great to hear. Closing based on the previous comments.. Thanks @ivan-konov. I made a small change to your code, set CFBundleVersion to 4.0.0 so we match CFBundleShortVersionString (AFNetworking does the same).\nThis will help me when releasing new versions, make sure I change all the version numbers.. Hey @skyline75489, really appreciate you helping out here and there. \nWould you be interested in becoming a collaborator for this project? You could help @mythodeia and myself take care of SDWebImage (help where and when you can, no strings attached).\nIf you are interested, I can talk to the owner of the project to add you.. @skyline75489 glad to hear this.\n@rs could you please add @skyline75489 as a contributor?. Many thanks @rs.. @skyline75489 welcome onboard :). @qmkCamel the idea was not to be able to change the config instance, but only its properties. \nWe take care of creating the SDImageCacheConfig instance.\nYou should only alter the configs you want.\nFor example:\n_exportImageCache.config.shouldDecompressImages = NO;\n_exportImageCache.config.shouldCacheImagesInMemory = YES;\n_exportImageCache.config.maxCacheAge = 3600;\nMakes sense?. @ws752958369 take a look at similar issues like #1029. You can do a search using SDWebImageRefreshCached as query and find all the related discussions to this topic. \nThis is why the issue template contains (to prevent duplicating issues):\n\nI have searched for a similar issue in the project and found none\n\nAlso, please make sure you debug your server properly and that it responds correctly to all queries.. @ws752958369 also, you should fill in all the info in the template because you left it as default.\nIt's important for us to know if you can reproduce the issue all the time, with our demo or only with a demo project of your own, if you can share some urls that trigger this situation, .... Glad to hear that @ws752958369. Closing, based on previous comment.. Thanks @vincent-peng . @SylarRuby when you created a new issue, an issue template was pre-filled. We need that info in order to understand your issue.\nEspecially in this case, what is the compiler error you are getting?\nAlso, note that we have a 4.0 version, so you should try that.. @Binusz make sure you are using the 4.0 version of the library.\nFor an older version, if you cannot upgrade, use [SDImageCache sharedImageCache].maxCacheSize = .... @Binusz Upgrading to 4.0.0 fixed your issue?. The reason for doing this (and the library is doing it for quite some time) is this:\n- if you display a 60x60 image on an iPhone 6 Plus in a 60x60 frame, the image will be pixelated. It's the way retina works. You need an image 3 times that size to look good. That's why we split the size by the scale, so we get an image that looks good.\nIf you really need to display at the original resolution, ignoring scale, I guess we could add a new option like SDWebImageIgnoreScale that when set, will just ignore the scale.\nAnyone interested in making this into a PR?. @FKLam please reopen when you have filled the issue template info. We cannot work with issues described like this.. If you have version 4.0, you can use\n[SDWebImageManager sharedManager].imageCache.config.maxCacheSize = 5 * 1024 * 1024; // 5 Mb in bytes\nFor earlier versions (under 4.0):\n[SDWebImageManager sharedManager].imageCache.maxCacheSize = 5 * 1024 * 1024; // 5 Mb in bytes. Thanks for doing this @skyline75489 and sorry it took so long. Guys, like @PabloLerma says, you need pod 'SDWebImage/GIF'.. Closing, based on the previous comment. Also the Readme has been updated with more clear instructions on the Podfile.. @vishal-i4gs make sure inspirationImageView is of type FLAnimatedImageView. I thinks it's UIImage, especially since FLAnimatedImage is a subclass of UIImage.\nFor cropping, I would recommend you use the SDWebImageManagerDelegate and crop after retrieving the image, which is before being set. When you do it in the completion, the image was already set in the imageview.. Hmm, tough question. I don't have a straight answer. You'd have to check FLAnimatedImage, maybe they have some capabilities there.. Thanks @JEKos . this must be an issue with your local cocoapods repository. Try cleaning it up.. Fixed by #1802 . Thanks @jimmaye. I made a small update to the PR via a6af214: made sure we don\u2019t get into problems when checking for self.activityIndicator on one thread and allocating on another. Also, made sure sd_removeActivityIndicator executes on the main queue. @jimmaye Thanks a lot for showing interest and contributing to SDWebImage! \nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. Please note we have an instance of SDWebImageDownloaderOperation for each image download. So if one images gets a 304, it will not affect the other images.. It's a problem from a previous refactoring - callbackBlocks used to be a property of SDWebImageDownloader and it made sense to be an array, as it hold the callbacks for multiple urls. It was moved to SDWebImageDownloaderOperation in #883 and persisted as an array of dictionaries, when it should be just a dictionary.. Thanks @nemissm I agree to this change. @JEKos Thanks for the initiative, but I added a more comprehensive copyright update with commit b1c3bb7. @vinayak-parmar-cf can you reproduce this with our demo project?\nIf not, could you create a demo project of your own where it reproduces constantly?. I will try to come up with a fix this week. @billyto has a good point. That might be a cause.\nAny other ideas/suggestions?. Sorry guys this took so long but I did not have the time to properly investigate.\nHere are my findings:\n- the issue is probably caused by f4bdae6 - fixing that issued made this one appear. Basically, we used to make sure we call cancel on the same thread as start which means the exact thread that runs the operation. This behaviour stopped working at some point (probably we changed something in starting operations) so f4bdae6 tried to fix it, so cancelInternal was called again. Now it was not called on the same thread, therefore the threading issue.\n- #1940 tries to fix the issue by using weak references. Let's see how that goes. If there are still issues, we can just pass nil, but this fix is better because when the instance exists, we pass it.\n- I will close the other PR's and cut a release very soon. I'll need to review this properly. Thanks @EllinaKuznetcova for the initiative. I see, thanks @EllinaKuznetcova for the PR and @dreampiggy for the explanation.\nMaybe we should refactor SDImageCache to work with NSData only, to avoid all the if's.. @songxing10000 please follow the Migration Guide to 4.0, as some entities got renamed/removed.. Closing, it's not an issue with SDWebImage.. @g001613001 please fill in the information required in the ISSUE TEMPLATE.\nIt's relevant that we know which version of the library are you using, if you can share the image url, if it reproduces constantly or not, if you can reproduce it with our demo, if you have a demo project where the issue is constantly reproducing.\n@mythodeia @skyline75489 Retorical question: why do people keep ignoring the issue template when creating an issue?. @g001613001 I cannot access this image URL: https://itvcloud.org/KFAAppService/MAM/Thumbnail/Promo/Home/31298515-29f8-4f7a-a422-252afb5d5470.png\nMake sure your server is accessible all the time and provides the image. \nI don't think this is an issue with our library.\nClosing the ticket. Will reopen if new info arrises.. Indeed, something is strange with the server, because I cannot access the image from my browser.. @gaowanli can you please conform to the ISSUE_TEMPLATE on this project?. Should be fixed by #1940 - closing for now. Should be fixed by #1940 - closing for now. @iOSCountry  What is the question/issue here?. @kokuyoku82 we can't use PODS_ROOT because not everybody installs SDWebImage via CocoaPods.. @kokuyoku82 I got confused (not sure why), indeed the change you suggested was for the podspec so it is valid.\nBut after reading the latest comments, I think we can just close this PR, right?\nCC @dreampiggy . Thanks @mu29. Since you deleted the branch, I could not reopen and merge, but I ported your changes to 5eb83c3. @flyingdog1 there is another issue open on our project where we have discussed this (I can't find it now) :)  - you are right, but the problem there is we want to give the control back to the user as soon as possible, so the completion block of the SDWebImageManager load* is called right after we get the image - which sometimes is before the image is stored to disk. I don't see a good way to fix this, but I'm open to suggestions. Hmm, maybe the image server returns an error the 1st time and we might added it to failedURLs, so we are not trying again. Might worth looking into that. @dreampiggy nice catch, I think you're right, it does look like the same stacktrace from #1968 - I mean the one from @jiangxk2015.\nAs for the 1st one, I think that is a bit weird especially since @IvanChan says it was a beta release.. @jiangxk2015 @IvanChan can you please check? We fixed #1968 in 4.1.0. Fixed by #1911 . Conversation on #1575 since it has more visibility. Closing this one.. Already added via #1911 - closing this one. @VioletHill is right.. Thanks @zssr . Please upgrade, as this issue was fixed. You can upgrade to 3.8.2 if you want to avoid migrating the code using our library, but I recommend our latest version 4.0.0 (which is a major update and requires some migration on your code).. Are the graphs in wrong order? The 1st one says it's without @autoreleasepool and it consumes less memory.. @GibaPadavan silly me, I did not look at the scale. Thanks for clearing that up. I haven't written that code, but I assume it's because we need to return token which is created on the barrierQueue. Mutating URLOperations is not thread safe, so we are synchronizing the that using the barrierQueue.. I don't know the details of that code in particular, but it's probably synchronizing the whole operation.. @tirrorex it is better to keep things separated. So in my opinion, creating a project/lib to deal with the HEIF format makes a lot of sense, because all the stuff related to HEIF will be there (code, issues, ...). The scope of SDWebImage is to handle download and caching of images. \nIf you look at the way we support WebP format, we just plug-in the support from libwebp which is a library from Google that handles exactly this file format.. Good luck. Fixed by #2080 . @billyto why did you close this PR?. Never-mind, I just saw #1858 :). Replaced by #1940, see #1807 for details. Should be fixed by #1940 - closing for now. @RbBtSn0w I'm not sure about this. Look at CGBitmapContextCreate. Doc says:\n\nCreates a bitmap graphics context.\nWhen you draw into this context, Core Graphics renders your drawing as bitmapped data in the specified block of memory.\n\nSo basically we need destBitmapData later on when we draw with CGContextDrawImage.\nWe might try to release it after that.. Should be fixed by #1976 . @dreampiggy I think our latest 4.1.1 changes will fix this issue as well. What do you think?. Thanks @dreampiggy . @ghughes this looks like a good improvement to our code. I will look for a future release to add this.. Update to the latest comment: you can just add that coder to the list of coders. No need to merge this PR.\n[[SDWebImageCodersManager\u00a0sharedInstance] addCoder: [DecryptCoder new]];. @magonicolas look at the headers of SDWebImage from the version you have installed and they will show you what the methods signatures are.\nAlso, we recommend that you upgrade to the latest version (where indeed you can use the code you pasted).. Guys, I'm pretty sure SDWebImage does not cause this issue. Thousands apps use it and don't have issues at submission (including a few I saw with my own eyes). There must be something with your own setup (app or server).. @liruqi are you interested in making a pull request with this change?. @Westacular I agree about the interface not being open here.\nLet's fix that, but let's also keep backwards compatibility - we don't want to break a lot of our users' code.\n- We can expose the sessionConfiguration or if that opens potential problems, add a method to be able to set a new sessionConfiguration (where we can also create a new NSURLSession).\n- I would not change the shared objects that are heavily used\nAre you interested in creating a PR?\n. Sounds good, thanks. #1891 was merged - closing this. @AbhishekChourasia16690 I don't think creating a thumbnail from a video or any video related features are in scope of our library. We only handle images download and caching. Please look at other libraries that might be doing that (https://cocoapods.org/?q=video), or, you can start a new project with this scope.. @younata I see. I recently moved all that logic inside the UIView category so it's not duplicated with every UIView. But we can take one step further and separate it into a new component and some leftover UI code that will remain in UIView category.\nAre you interested in making a PR?. As I commented on #1867 \n\nGuys, I'm pretty sure SDWebImage does not cause this issue. Thousands apps use it and don't have issues at submission (including a few I saw with my own eyes). There must be something with your own setup (app or server).. What's the benefit of adding those comments? It would be more helpful if you could create some unit tests that check the LIFO/FIFO patterns.. Thanks @hbhpeng . Let's close this PR and revisit later.\nThanks for the involvement @seanscal @evliu . The https://github.com/webmproject/libwebp repo is restored. Closing. It should be fixed now, Google reverted this change.. This is very strange, will look into it.. Should be fixed by #1940 - closing for now. @lauramejiaarroyave 4.1.0 was just released.. @piercifani the problem is multiple crashes being almost randomly added to tickets :) so you're referring to the one at the top of this thread described by @EugeneGoloboyar. Indeed that can still happen. I will reopen this ticket and look for a fix.. @piercifani we can try to use a weakSelf reference in this case because the crash does look like a message sent to deallocated instance. Do you have any other info that might help us? Like a link to Crashlytics or whatever crash reporting tool you use? Frequency? OS versions .... Thanks for the info @piercifani - it appears you are correct, we need a weak reference there. Probably a race-condition because otherwise I cannot explain how a strong reference to an object can lead to a \"message sent to deallocated instance\" crash.. @piercifani I made a commit 2f892f9 with the solution we talked about. Can you try it before we release 4.1.1 - this can take a few more days.. @VidhyaJain we will release in a couple of days - sorry for the delay. 4.1.1 is now released.. You need to clone recursive, so git will also bring libwebp. Check out https://github.com/rs/SDWebImage/blob/master/Docs/ManualInstallation.md which explicitly says git clone --recursive https://github.com/rs/SDWebImage.git. @MiguelArber there was a downtime for the libwebp clone on Github, which is not handled by our group. Now it's back, so that probably explained why it didn't work at first, but now works again.. Fixed by #1983 . @ankitkapasi Here's the situation: we are using NSCache inside SDImageCache for the memory cache. This doesn't expose a valid mechanism for the total size of the cache and more than that, it has the liberty to evict the objects from that cache depending on the system status, so I wouldn't rely on that.. > subspec GIF requires iOS 8+\n\nyou mean the deployment target from the Xcode proj?. I'm confused, @zhungxd what are you referring to?. @kkYFL a URL cannot contain space, it needs escaping. Details in the URL RFC: https://www.ietf.org/rfc/rfc1738.txt. :)) what is this?. There is no need for this method. If you have the instance of the operation, you can call cancel on it directly.. @REWNing it will probably crash with the method you described as well. Can you take a look with Zombies and see which object is crashing and why? If you could create a PR, a number of people would benefit from that. @aaaamruta FLAnimatedImage was only introduced in version 4.0 of our library. If you're using 3.7.6 (as you say in the description), you need to upgrade.. @aaaamruta if you read the install instructions https://github.com/rs/SDWebImage#animated-images-gif-support you can see you need to specify the GIF subspec:\npod 'SDWebImage/GIF'. I have created a 5.x branch from the latest master and changed this PR to target that branch, that way when it's ready we can merge it and keep master with the current 4.x versions.. @walkline there was a race between you and me here :)\nWhile you were merging from latest master to your branch I was merging this PR locally. Now it is merged into 5.x but Github doesn't see it as merged because your branch is now forward. Could you reset your branch to this commit as it was before the last merge? 879ea18. @walkline I wasn't clear enough :)\nThis PR looks closed which is the state after being rejected. When accepted, it should appear as merged (not closed). I was manually merging so GitHub can pick up the fact that it was merged, but since you added another commit GitHub cannot detect this, as for him it appears that the branch was not merged (only older commits). That why I was asking you to reset your master branch (basically go back one commit) to 879ea18 which would have made it clear for GitHub this PR is merged.\nNot so big of a problem anyway.. @Whirlwind I only came across this PR now.\nThis matter of how we reference our dependencies inside the project is something I've been pondering for a while.\nI think all approaches have pros and cons.\nWhat is the reason you wanted to bring them via CocoaPods? And why did you not remove them as submodules?. I've just revisited this PR. Still waiting for an answer from @Whirlwind on this.\nI don't think we can make this change. libwebp is not available via Carthage (I think - because it doesn't have and xcodeproj and a scheme in their repo). So if we remove the WebP submodule we  will loose Carthage WebP support.. Closing this one for now, we will reopen if there is an ongoing conversation.. #2047 was finally merged, this ticket can be closed.\n@Silence-GitHub 4.2.0 will be released soon and it contains this fix. Thanks for the original idea.. Since it should contain trivial computation and that people are already used to being called on the main queue, I would leave it as it is.\nPS: it's not guaranteed to be called from the main queue.. You should not call the sd_internalSetImage methods directly, but instead use the ones from MKAnnotationView+WebCache like sd_setImageWithURL. This doesn't make sense. Requesting a HTTP resource is by standard a GET request. This is exactly so we can cache in the response and other benefits. POST is for submitting info. I don't think we can even change this inside the library.. Those are good improvements that can be used outside this project. I don't see any sense in adding them here.. Take a look at the latest 4.0.0 code, it is used. Should be fixed by #1911 . Good catch @disaabler. SDWebImageCombinedOperation is not public.\nTo answer the bigger questions, this lib was made for easy usage that most our users need. You are trying to reuse some components while shutting off some behavior. It's not easy :) Feel free to propose any PR and we will discuss there, we've been open to exposing things people need. @tirrorex \n\nWhat i want to accomplish here is a way to prevent the image from being set without actually cancelling the download\n\nHave you tried using SDWebImageAvoidAutoSetImage? It will not set the image after it's retrieved from network/cache.\n\nAlso i have to use SDImageCache because SDWebImageManager download method checks the disk, a behaviour i cannot have since i do a manual check to reuse my original image if existing in disk.\n\nI think you can subclass SDImageCache and alter some of the behaviour. Maybe we should clean up its interface a bit.\nDoes this help?\n. @tirrorex ok. Is there anything we can change that would make your customisation work easier or your code cleaner?. What part from the blog post are you referring to?\nAnd I've rechecked with the latest version and the cost is correctly computed. Look at SDWebImageDownloader and the way it uses then URL as a key for URLOperations.. Thanks for creating the PR, but this is not a feature that I see added to the project. Closing.. @singhjagjot1992 I might be missing something, but this is a question you can answer very quickly by just looking at the code or reading the docs (the removal of those methods was added to the Changelog and the release notes section).\nLook at cachedImageExistsForURL:completion: and diskImageExistsForURL:completion:. I suggest diskImageDataExistsWithKey: (the sync one). Done via 2d9c812 - release 4.1.0 available. I don't think we support this feature. Feel free to work on a PR.. Should be fixed by #1940 - closing for now. I just rechecked, the CocoaPods installation works fine - closing. If your issue still persists, you should look into the CocoaPods project for similar problems. We have SDWebImageScaleDownLargeImages option for scaling large images. The decompressing one is indeed a setting for all the library. We can't really change this without braking compatibility (only in a major version) and more people should be asking for this :). There is no such feature. Feel free to create a PR if you think this is a valuable addition, but I'm not convinced.. You need to let us know which version of the library are you using. Why did you not fill these info in the issue template and just left them with default values?\nMore to that, probably your setting is not done properly, please debug and stop on that line, check the setting.. @RamChandraReddy are you interested in creating a PR?. Closing due to lack of response. Very interesting issue @joshuafeldman, sounds right. I will merge this, publish the 4.1.0 soon and see how it goes. Thanks for explaining it.. #2048 is merged. Should have fixed this issue.. Feel free to reopen with all the info required by the issue template.. @MicMat68 you say the sd_cancelCurrentImageLoad method doesn't work. What is the error?\nAlso, it's important you fill the required info from the issue template, otherwise we keep guessing here :). This is probably an issue with CocoaPods that needs cleanup - closing. Now merged into master. Fixed by #1952 . I have to trust you @dreampiggy with this PR, this logic is a bit too complicated for me. But let's bring it it.. @dreampiggy I've run the builds, tests and CI, that's why we have them. Seems to be ok, so I merged it. We will found out soon if there are any problems :). Interesting issue. Did you debug in detail to see what the cause of the increasing memory is @guidev?. I think the key here is trying to load thousands of url's that will cause 404. This is a bit off, even if we should not crash.. @dreampiggy I agree. I did not add it to the 4.1.1 milestone as I don't see this as an urgent issue.. This is not related to our library, as it is a question you should ask on Stack Overflow or a similar forum - it's entirely related to NSURLSession. This is a CocoaPods installation issue, you should look for similar issues in their own repo.. Feel free to reopen the ticket after providing the data required in the issue template. Not sure what the issue is, but you can debug it if you can reproduce it. The method changed in release 4.0, so upgrading might fix it - needs to be tested.. @vdugnist you opened up this PR and the closed it again, but I see some potential fixes here we may want. What do you think?. I did not understand the issue. Please reformat your issue and provide the issue template required details so we can properly respond.. Feel free to change this setting via experimentation. We found this value to be a good value for all the supported devices, a higher value would just overuse the CPU.. @christopherhwood feel free to create a PR.. \ud83d\udc4d . No idea. Can you replicate it with any conditions (our demo project, another project, anything)?. @IvanChan please provide all the details that are required in the ISSUE Template.. Should be fixed by #1978. Thanks @dreampiggy . This looks similar to #1925 #1821 #1716 - should be fixed with 4.1.0. Closing, we will monitor this. Feel free to reopen when all required info are there. I don't understand this issue. If this url is not available to you https://chromium.googlesource.com/webm/libwebp, I don't know how to get passed that. That is the URL which is used by libwebp to publish via CocoaPods.\nMaybe you can try Carthage instead. @ZB0106 see #1860 - this is a duplicate. Closing. @ZB0106 please check out #1976 it should fix those leaks.. Great work @dreampiggy. I missed this entirely.. @dreampiggy I see you have a few contributions to our project. If you are interested, I can ask the owner to add you as a contributor to the project. . Great. @rs could you add @dreampiggy into the team?. Thanks @rs. PS: we have a new version out :)\n@dreampiggy welcome and feel free to contribute in any way that you find suitable, we sure need help here.. The only small concern I have is how does this affect the memory allocation, since we can't control when that memory is dealloc-ed. But since we didn't free it before, we should not have problems.\nI will merge this. Thanks @dreampiggy . Looks good @skyline75489 . SDWebImageCacheMemoryOnly will disable the disk cache, SDImageCache.config.shouldCacheImagesInMemory = NO should disable the memory cache.. Looks good to me @skyline75489. Merging. We can improve it further per @dreampiggy's suggestion.. I have tried your image with the demo project and it returns a 403 error. There is something wrong with that API providing the image.\nPS: When you hit \"new issue\" on this project you get a template with all the info we need to investigate an issue, including testing with the demo project. Why did you decide to ignore that?. @tlb123456 what issue? are you loading the same image? :) I doubt that.\nPlease properly describe your problem here if it is the same, search for a proper issue if there is one, or just open a new one otherwise.. Sounds good @dreampiggy, but I will review it in more detail. For now, I've added it to the 4.1.1 milestone. \ud83d\udc4d . @dreampiggy the idea of a decoder is much welcome. \nTo extend on that, I was bothered for a while by the fact that we somehow hardcode the image formats we support. I want to take a deeper look and see how we can use some way of plugging in formats. So we provide some out-of-the-box formats and people can add new ones, that way we don't need to support all kinds of crazy formats while the users can if they need to.\nOne a global picture of this project: even though Swift is gaining massive traction, our Obj-C project here is still heavy used. There are always issues to look into and some users want to extend the scope of the project. I think we need to focus on the basics and keep the functionality to the minimum, because whenever we change something, there is a growing list of things to check and that can go wrong. In this light, I want to allow image formats to be plugged in, so we don't need to maintain them.. @xhzth7091 this is a duplicate of #1859 - that is why the template asks you to search for issues before opening a new one.\nPlease add to that thread - we released a fix in version 4.1.0, but let us know if that doesn't resolve it for you.. @btxkenshin \ud83d\udc4d . Related to #1952 . @SevenHL those are all issues with CocoaPods and not with our project.\nMake sure your podfile contains the platform. Example platform :ios, '8.0'. F....ing build still fails :) I will take another swing to fix it. It was failing on my branch as well, something to do with this test test40InsertionOfImageData. I thought I fixed it. @dreampiggy Another suggestion: I think we can rename some of the protocol methods for a bit of clarity:\n- canDecodeData: rename to canDecodeFromData:\n- canEncodeImageFormat: rename to canEncodeToFormat:\n- canIncrementalDecodeData: rename to canIncrementallyDecodeFromData:\n- incrementalDecodedImageWithData:finished: rename to incrementallyDecodedImageWithData:finished\nJust let me know if you agree and I can take care of the renaming.. @dreampiggy regarding this PR, once we agree that is ready, I will go ahead and squash your branch into a single commit so it doesn't mess our history that much (right now we have 33 commits :) and counting).\nAlso, I think we can include it into 4.2.0 version, that is why I haven't worked on any other ticket, so we apply everything on top of this refactor.. @dreampiggy sure thing I will. @dreampiggy quick question: why does SDWebImageImageIOCoder canDecodeFromData return NO for GIF, but canIncrementallyDecodeFromData returns YES for GIF. Is this ok?. @dreampiggy @skyline75489 see https://github.com/dreampiggy/SDWebImage/pull/3, I made a PR to @dreampiggy 's branch so things are easier to see. . @dreampiggy I understand, but I would keep the 2 decoders separate, for clarity and the option to change our GIF decoding internally again without affecting the interface.. @dreampiggy travis still fails, I will try to switch the testing to XCode 9, see if it's better. Those are random fails we get now, which is super odd because they always worked fine.\nNevertheless, this is not the subject of this PR.\nLet us focus on the getting this refactoring ready and merged.\nI will take some time today to review everything again, test a bit and squash into a single commit. If I don't find anything, I will merge it into master.\nAfter that, we can re-evaluate all the other work planned for 4.2.0.\nIn your opinion @dreampiggy, are there missing pieces from this PR?. Ok, I am merging this in. Actually I will merge manually so I can squash everything into one commit ( @dreampiggy you are still the author of that commit).\nWe will work our way from there.. Strange, I did all the steps from command line, even made sure the merge commit has all the right info but this PR still looks open - let's just close it - IT IS MERGED :). Sure @dreampiggy we will take the time and review everything for 4.2.0. I'm glad this refactoring is finally merged, so even if we have issues we will then have to fix it as opposed to pushing it to a future version :). Good - now it's merged, not sure why it was delayed :) I didn't do anything. @OnlineYoung please fill in the info required above in the issue template. . @ufosky I tried your scenario, but I still get all the images. What is the error you see? Can you debug a little?. @ufosky @dreampiggy thanks for looking into this\nI managed to reproduce it myself (I somehow understood that it happens in the list not in the details screen, so it took me a while).\nIndeed, this is a change introduced in 4.1.0, in particular #1737 \nI am looking at this PR and now cannot find the logic for that change:\nif (options & SDWebImageDownloaderIgnoreCachedResponse) {\n    cachePolicy = NSURLRequestReturnCacheDataDontLoad;\n...\nIt's due to our old code from SDWebImageManager:\nif (cachedImage && options & SDWebImageRefreshCached) {\n    // force progressive off if image already cached but forced refreshing\n    downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n    // ignore image read from NSURLCache if image if cached but force refreshing\n    downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n}\nSo I think we need to revert.\nCC @zaczh the author of #1737 - do you remember the reason for using NSURLRequestReturnCacheDataDontLoad?\nBecause our existing code, if there is a cachedImage and SDWebImageRefreshCached is set, then we want to ignore the NSURLCache - which makes sense.\nWith your changes, we always end up with NSURLRequestReturnCacheDataDontLoad cache policy if there is an image in our cache so it will never be downloaded.. @dreampiggy man, this is a tough one and I've been banging against it for a while. I don't know very well the idea behind those flags, but here is what I know:\nSDWebImageRefreshCached\n\nI think we all agree SDWebImageRefreshCached means to everyone: refresh the image even if you have it cached so we need to do that. But the docs say:\n\n\nEven if the image is cached, respect the HTTP response cache control, and refresh the image from remote location if needed.\n\n\nThis means we have to use NSURLRequestUseProtocolCachePolicy and trigger a request even if we have the image cached locally (in SDImageCache).\nWe used to have a mechanism relying on [[NSURLCache sharedURLCache] cachedResponseForRequest:self.request] but that was causing some race condition crashes inside NSURLCache. This was removed by #1737 which at that time I thought was right and I understood it, but now I have my doubts :)\nNevertheless, I don't know why, but we used to call the completionBlock 2 times and one call would be with a nil image.\n\nSDWebImageDownloaderIgnoreCachedResponse\nThis is one used behind the scenes by SDWebImageDownloader, so I'm not surprised you're not using it directly - very few people do. @dreampiggy back to the basics. I don't expect us to figure out all this hidden details.\nLet's think this from an end-user perspective.\nFor those using SDWebImageRefreshCached, we must make sure NSURLRequestUseProtocolCachePolicy is set via the request and it is after #1994. In this case, they will first get the completion called with the cached image and after the download, again with the new image, if any. I think that is fine.\nOtherwise, it's the default behaviour of using SDImageCache and fallback to SDWebImageDownloader if there is no cached image.. Also I agree we can just remove SDWebImageDownloaderIgnoreCachedResponse since it will do nothing. I don't see any reason to ignore the cached response if you have one, until you can download a new image.. I have merged #2032 so I think this issue can be closed. Will be releasing 4.1.1 soon.. 4.1.1 is now released.. Thanks @DwayneCoussement . @VioletHill it's very important for us that you fill in the issue template, not leave the default values there. Please update it so we know which version you are talking about and more. @hongruqi \n\nPlease fill in the detailed description of the issue (full output of any stack trace, compiler error, ...) and the steps to reproduce the issue.. @hongruqi we need you to fill the data in the template table, not leave it with example values. \nIt's key for us to know:\n- Platform Name\n- Platform Version\n- SDWebImage Version\n- Integration Method\n- Xcode Version\n- Repro rate\n- Repro with our demo prj\n- Demo project link\n\n. 4.1.1 is now released.. 4.1.1 is now released.. @zhangninghao I will close this issue because it lacks very important info. Feel free to reopen when you can properly fill the Issue Info table above and also describe the issue with details (not \"something wrong happened\").. Fixed by #2002 . Indeed looking good. Thanks @iwill @dreampiggy . @iwill Thanks a lot for showing interest and contributing to SDWebImage! \nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. @iwill no problem. I just removed you from the team. :) best of luck. This looks like a crash on an older version of the library that probably needs a cleanup.. Closing per comments from @dreampiggy . Just read https://github.com/rs/SDWebImage#animated-images-gif-support or look at our demo project.. @grandmasteraziz please use the issue template that you deleted and fill in all those fields as we do need them so we can properly respond.. Looks good @dreampiggy, thanks.. Fixed by #2030 . @BlueVirusX We would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. Sounds good @BlueVirusX. I have sent you an invite to the organization. #2027 . @dreampiggy I'm just looking into this. So we fixed the issue of loosing the orientation. That is good.\nBut I think we need to also change the imageData. If we change image we should also change imageData, otherwise they are out of sync and can cause problems. Basically, I would consider we just got a smaller image than the one we actually did, so from that point forward, everything should be done using the smaller image.. @dreampiggy I'm not sure I follow. I am referring to\n- (UIImage *)decompressedImageWithImage:(UIImage *)image\n                                   data:(NSData **)data\n                                options:(NSDictionary<NSString*, NSObject*>*)optionsDict\nthis already uses an in/out data param, but we just don't change that data inside the method implementation from SDWebImageImageIOCoder. That is my point. We should just change it inside, when we recompute the image. Indeed for getting NSData we can use the mechanism you described.\nI don't think we need an option here because there is one already: SDWebImageDownloaderScaleDownLargeImages. If this is set explicitly by the user, then we will scale down the image, so it makes sense for the data returned to be in sync with that image.. @dreampiggy this is the last issue currently assigned to 4.2.0 release. Any updates here?. Initially fixed by #1991 + latest comments (about changing the NSData when scaling down images) fixed by #2074.. \ud83d\udc4d . Good job here @dreampiggy.\nPS: sorry for being away for such a long time, but I did have some personal issues.. @dreampiggy I really appreciate taking the time to explain here the status of the remaining work for 4.1.1 and even more. It made things easier for me.\nI agree with your assessment: I have merged #2032 and #1983, agree about #2040.. @dreampiggy are there any other fixes that you would include into 4.1.1? If not, I will go ahead and release.. I suggest we keep it for 4.2.0 and do some testing, as it may decrease performance (using @synchronized). I will go ahead and release 4.1.1. @dreampiggy one small request :) since I use your fork to review all the branches and PR's your' working on, I would like to get rid of the branches from your fork that are already merged into master. I see two options: you can delete them yourself or you can add me to your fork and I will keep deleting them after merges (even GitHub will add a delete branch button for me on the PR's :) ).. Thank you. I will not modify anything except deleting branches which were merged already. :). @dreampiggy small follow-up on this conversation. I am constantly using your SDWebImage fork along with mine and the main repo one to keep up with all the branches.\nSo I wanted to check with you which branches are safe to be removed from your fork:\n- feature_enhance_encoder_and_refactor\n- fix_3.7.6_EXC_BAD_ACCESS\n- fix_refresh_cache_behavior\n- test_branch\n- test_loopCount \nWhat about fix_swift_build_on_gif? I see no PR from this branch that claims to \n\nFix Swift project on SDWebImage/GIF\nRename prefetchURLs to prefetchURLArray to solve Ambiguous reference to member prefetchURLs issue\n\nPS: I've already deleted 2.0-compat and 4.x since they exist in the main repo. Appreciate this @dreampiggy . @dreampiggy I have looked at this issue and your suggestion sounds good. I will merge it, even though I have a small doubt. Here it is: I think NSURLCache crashes because of some race condition, not necessarily on the same cached response. So moving the cachedResponseForRequest call to a different moment may be better or worse. We will see :) For now, I don't see this potential problem as a showstopper and I do agree we should aim to keep the old behaviour (double completion call).\nLet's keep an eye on this.. @dreampiggy great, thanks for the extra effort on your side. I will take care of the release today.. Release 4.1.2 is published. @dreampiggy ok. I think this is a duplicate for #1853 . Fixed by #2080. @quanliangswift please a deep look at our Getting started section. If you still can't use our library with Swift, try properly filling the above issue template which you left with the example values.. \ud83d\udc4d . Indeed, I think we can release in a couple of days.. \ud83d\udc4d . Logs were removed a long time ago.. PS: just debug and see what is actually logging, I doubt it's our lib. @dreampiggy very good catch about the call orders. I took some time to look into this performance issue and I created #2069 but I'm not sure if we should merge it - looks a bit too complicated to me.. @skyline75489 please take a look at this issue and the PR I linked above, let us know what you think.. Hmmm, I don't really like this :) even though I could live with it.\n~~~First of all I think that the imageView.animatedImage = ... should be executed on the main queue.~~~\nThen the code changes inside the UIView category are complicating that code (similar to my proposal).\nI will think of a potential other solution, but keeping this PR open.. @dreampiggy here's my opinion on the latest written on this PR:\n1. if we are adding SD_GIF, we need to do a bit more\n1a. First of all, the naming is misleading. I think SD_FLANIMATEDIMAGE is better, since we support GIF even without this code.\n1b. We need to define the macro (the same way as for SD_WEBP) inside the xcodeproj target preprocessor definitions - the way it is now only works for CocoaPods installations. \n1b. We should be consistent with SD_WEBP and make sure we guard with #ifdef SD_FLANIMATEDIMAGE the pieces that should not be defined/user otherwise.\n2. I'm not sure we want to invest into the GIF decoding inside our project. This is code we are not experts in (at least myself) and thus we will need to maintain it. I'm fine with having the GIF coder as it is now - simply based on IOImage, but I would not push forward on that. That is the reason we added pluginable coders, so that people can take matters into their own hands.. @dreampiggy see my other comment I added recently: https://github.com/rs/SDWebImage/pull/2047#discussion_r146137856\nI prefer we add an options param to sd_internal. That way, we don't need any SD_GIF macro.. @dreampiggy yes, we add a dictionary param where we can pass what we want. In this particular case, it can even be something like SDWebImageEnableGIFThreadingOptimisation. Or the one you proposed.\nThe warm block design was just a proposal which I already closed, we all agreed it's too complicated.. @dreampiggy looks good. I just added an extra commit 3ffd5f7 to improve readability a bit:\navoid defining the call of completion block twice + added some comments. Please take a look and if it's ok with you, I will finally merge this PR :). Ok. I will squash when merging so it only appears as one commit.. Good. @dreampiggy @skyline75489 this is the last PR for 4.2.0 release. Let's all look at the changes in 4.2.0, test and if we are all ok, I can take care of releasing. No point waiting any more :). I tested a bit, everything looks ok, so I released 4.2.0. Fingers crossed. Nice release, thanks everyone.. @dreampiggy very good point and I agree with the fix. I will merge this gladly, the race condition for cancel and cancelBlock exits for quite a while, but I could never find a valid explanation. You did so congrats :). The fix looks ok, I totally missed this. Should we release a 4.1.2 patch before people start complaining? :). Ok @dreampiggy I am merging this. Please let me know when you are done with the review and if I can help in any way.. @HTOne please fill in the info required in the issue template. Also, I don't understand what the problem is, can you detail it a bit?. Closing - per last comment.. @lemarian this image is a png. I just tried your image with our demo project and it works fine. You should debug the code and see why it doesn't work. Maybe it has something to do with your network. Please try another image, for instance http://assets.sbnation.com/assets/2512203/dogflops.gif. @cp3hnu please fill in the issue template info above. Also, are you sure this is about SDWebImage? We do link against MapKit, but only if you explicitly picked the MapKit subcomponent of our project.. @cp3hnu I see you are using Carthage. From what I know, Carthage doesn't allow selecting subcomponents from a framework and since our targets include all the files, they will contain MapKit.\nOne option I see right away is to integrate SDWebImage via CocoaPods. There you have the option to use pod SDWebImage/Core which doesn't contain any of the MapKit files.. @dreampiggy I don't think I agree. Here's how I see it.\nFor synchronization of a resource using queues you can go with 2 options: serial queue (easier to implement, just one operation allowed at a time) and option 2 is a concurrent queue.\nA concurrent queue allows the multi-reader single-writer pattern, this is the case here. So all writes to the resource (callbackBlocks array) are using dispatch_barrier_sync which makes sure no other block is executed on that resource. But for the reads, using dispatch_sync will allow multiple read operations going on at once. \nIf we make everything a dispatch_barrier_sync, it's the same as using a serial queue - which we should do to avoid the extra-not-justified-complexity.\nNow, I'm not sure I got what the crash from #1684 is all about, can someone give me some insights?. @dreampiggy man don't stay up late :) we need you fresh :) let's look at this in more detail after merging the decoding refactoring.. @dreampiggy why did you remove this PR from 4.2.0? I missed it :). Thanks @dvkch - looks good, I've merged it manually - also added 2 small tests. @thechaudharysab you need to debug in detail and bring some more info. Right now it's too vague. Also, you should try it with out demo project and see if you can repro the issue there. . The only way to set/pass headers is via SDWebImageDownloader setValue:forHTTPHeaderField:.\nExample:\n[[SDWebImageDownloader sharedDownloader] setValue:@\"image/*\" forHTTPHeaderField:@\"Accept\"];. @dreampiggy good idea overall. \nShould we rename SDWebImageGIFCoder to something like SDWebImageAnimatedGIFCoder or SDWebImageGIFCoreGraphicsCoder?\nOr SDWebImageIOCoder to SDWebImageIOStaticCoder ? or it just creates more confusion?\nI would like to make it clear to the users which is which, but maybe it's ok how it is now.. Should also update this comment from SDWebImageIOCoder.h:\nBuilt in coder that supports PNG, JPEG, TIFF, includes support for progressive decoding to include one-frame GIF. I did update the comments via a32ab28 so I can merge this PR.. @Tracydeng we are supporting WebP format for quite a while (even our 3.x versions have WebP), but you need to be explicit with CocoaPods: pod 'SDWebImage/WebP'. This is because WebP is a subspec with its own dependencies and not everybody wants it.. Looks good - waiting for the build. @dreampiggy I already fixed it on master :). Great work @dreampiggy so you are sharing the fix with the WebP community and until that is available in a release from them, we have a working workaround. Excellent.. Master build works now :) I just disabled that test. Let's merge this in. I created a dedicated PR so I can check codecov, since this affects coverage (should show an increase from aprox 74% to 77%).. Looks good :) @dreampiggy @skyline75489 merge it when you can. test02PrefetchMultipleImages failed during the last build. I think this is just a random failure, I will re-trigger. . Guys, a few more commits.\nI am happy with the current status of our tests:\n- Refactored the SDWebImageDecoderTests a bit. Per DRY, created verifyCoder:withLocalImageURL:isAnimatedImage: method that will take a imageURL and a coder and will check decoding and encoding back and forth, sizes and so. Reusing this method for the static WebP image, for the animated WebP image and for the GIF.\n- Switched all the tests from using https://s3.amazonaws.com/fast-image-cache/demo-images/* images which are big and sometimes fail to arrive in 5 seconds (before the test can timeout) to smaller images, basically using http://via.placeholder.com/ like http://via.placeholder.com/50x50.jpg or http://via.placeholder.com/200x200.png\nThis should speed up the tests a bit and also avoid some of the random failures due to timeout\n- Finally fixed the tests from SDImageCacheTests so we can re-enable test40InsertionOfImageData\n  - the problems: some tests were just poorly written, using async calls but not properly setting async expectations. Those were generating undefined behaviour (not clear if/when those callbacks would be executed).\n  - also, we wanted to call clearAllCaches before every test, but since some methods there are async, this doesn't work with the way setUp was designed. So basically sometimes before a test we could clear the cache but sometimes not, or even the clear could come while running the test which was worst\n  - decided to fix this by making sure after every test that we manually clear what we have added.. Finally, green light from CI. This PR is ready.. @dreampiggy merge it please :). This PR was only a demo of a too complicated approach. Closing.. Ok. Too bad, it appeared like a good attempt. Glad we have the tests to show errors like this :). @juliusbtesh there are a few things to consider:\n- by default, we keep all images in the memory cache which may increase memory usage, but also increases performance and this memory cache is evicted when memory is low\n- but you can disable this\n- also, we decompress the images on a background thread, which also takes up resources, so they are faster to display. When you use UIImage imageWithData:, the image is not decompressed, so when you add that image to a UIImageView it will be decompressed on the main thread which makes the FPS drop. It's a trade-off. \n- this decompressing can also be disabled.\n- there are a few issues on this project that describe how to deal with memory consumption (it's a trade-off from app to app) - just search for them\nPS: never ever use NSData *imageData = [NSData dataWithContentsOfURL:url];. It's a synchronous API that blocks the current thread until all the data is downloaded. :). @JEKos please fill in the info required (as in the issue template). I don't want to take it on you, but why are you ignoring that stuff that is already pre-filled and you just have to spend a few seconds to fill it in?. @JEKos Unfortunately, FLAnimatedImage is not a UIImage, so it doesn't work with all the APIs we have in place. We had a conversation with FLAnimatedImage team about this, but they only created a proof of concept and never integrated it (to make FLAnimatedImage a UIImage subclass).\nI don't see how we could return the FLAnimatedImage there. . The only way you could convert from UIImage to FLAnimatedImage would be to transform the UIImage to NSData and then call [FLAnimatedImage animatedImageWithData:]. Please try upgrading to the latest version 4.1.2 which has a fix for exactly this problem.. @xiu619544553 please fill in the table info in the description so I know which version are you using and which installation method. Note that 4.1.2 is released already.. @bianzhifeng looks like this is the same issue with #586 and #538. Please take a look at those. Bottom line: decoding images is memory consuming, so if you are dealing with large images, you can use SDWebImageScaleDownLargeImage option. If your images are not that big, one option (https://github.com/rs/SDWebImage/issues/586#issuecomment-215059553) is to stop decompressing in the background\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\nPlease try using our latest version.\nPS: Please fill in the info in the table above - so we know which version are you using and so on.. @bianzhifeng sorry, for this version the configs from SDImageCache were moved to a separate object.\nSo [SDImageCache sharedImageCache].config. shouldDecompressImages = NO;. Yeap, your code is correct:\nSDWebImageDownloader.shared().shouldDecompressImages = false\nSDImageCache.shared().config.shouldDecompressImages = false. @dreampiggy I don't think Carthage supports \"subspecs\" And indeed there is a problem with not being able to support all combinations.\nI haven't merged this PR already because:\n- on one hand, I understand the problem @BlueVirusX is facing and it can be solved if we keep a set of xcodeproj targets with core only\n- on the other hand, we already have quite a few targets there and creating more will just complicate things. Even now is a bit difficult when adding a file to the project to make sure is included in all proper targets (not necessarily all targets). At this point, the dimension of the targets is the platform (and sometimes static vs dynamic). So we have a static iOS lib and a dynamic iOS framework, but also a dynamic watchOS framework. Adding another level of depth with core/map/gif/... components will just make maintenance impossible.. See https://github.com/Carthage/Carthage/issues/588\nI think their message is: split large frameworks into smaller ones. So we could do this, I guess.\nSomething like:\nSDWebImageCore.framework, then SDWebImageMap.framework that links to the first.\nThen each file will belong to one framework per platform.. @priteshshah1983 I understand your issue. Let me give some context and then we can think about what to do next, except doing nothing :)\n- a long time ago, libwebp was the only dependency of this project and got added via git submodules (at that time, it didn't have CocoaPods or Carthage support. In the meantime, we managed to add it to CocoaPods).\n- when making the 4.x rewrite, we added FLAnimatedImage as a dependency to deal with the animated images - it was performing way better than our code (based on the Apple high level APIs). So we added it using the same pattern aka git submodules.\n- now here we are\n- indeed, for the future, we can do something about this.\n- @dreampiggy's idea sounds good (moving the FLAnimatedImage code to a separate project). Wonder if we can do the same for the other subspecs. We need to look deep into this. But I immediately spot a potential issue with libwebp that doesn't support Carthage (doesn't have an xcodeproj). So if the libwebp files are not in our repo (as they are now by git submodules), we won't be able to support Carthage for libwebp. To be explored...\n- CC @mythodeia @skyline75489 @rs what do you guys think?. An update here: I think we are going to remove FLAnimatedImage entirely from the 5.x version - see #2140. We did remove FLAnimatedImage on the 5.x branch, so that makes things a bit easier. We still don't have a way to import SDWebImage via Carthage without MapKit.. Currently, since we have removed FLAnimatedImage from 5.x, we still have issues with:\n- webp dependency\n- MapKit dependency.\nI still don't think keeping a lot of targets around (we already have too many) is a good option.\nSo looking past that:\n- we could move SDImageWebPCoder to a dedicated repo that lists libwep as a dependency. That project would still need to link to libwebp as a git submodule since we can't use Carthage - missing xcodeproj in their repo. But at least people who explicitly add that to their Cartfile will do so explicitly\n- if we want the same result with MapKit, we could also create a project for the MapKit plugin, but that would only contain MKAnnotationView+WebCache so I don't know, sounds like over-engineering to me. Actually, looking at https://github.com/pinterest/PINRemoteImage/blob/master/Cartfile I can see we can reference libwebp via Carthage, even though they do not have an xcodeproj:\ngit \"https://chromium.googlesource.com/webm/libwebp\" \"v0.6.0\". @dreampiggy @zhongwuzw what do you think? Is it a good idea to move all the WebP stuff (code, issues, ...) into a dedicated project like SDWebPCoder? Will match our pattern and will make it easier for us.. Appreciate your night quick response @dreampiggy :). > Does a Cartfile with that git \"https://chromium.googlesource.com/webm/libwebp\" \"v0.6.0\" successfully work ? Carthage build will automatically download the git repo of libwebp and build ? But there are no any xcproject\nI thought the same, but it seems these guys from Pinterest are using libwebp via Carthage. Need to investigate\nUPDATE: seems like they can't build it, so they just rely on Carthage to download the dependency and they link to it manually.. > MapKit support is quite simple, I guess the most of reason some user want to build without MapKit, it's because of App Store review (I'm doubt of that). See ReactiveCocoa and the reason they create ReactiveMapKit.\nReactiveCocoa/ReactiveCocoa#3524\nReactiveCocoa/ReactiveCocoa#3521\nBasically, they did the same as the proposal from @BlueVirusX, just keep another target with MapKit. I would explore other options before going to that.. One thing I noticed recently is we could have a single target in Xcode that is built for multiple platforms, so I think we can merge all SDWebImage iOS + SDWebImage tvOS + SDWebImage watchOS + SDWebImage OSX = SDWebImage with all 4 platforms.\nSame for SDWebImage iOS static + SDWebImage watchOS static = SDWebImage static supporting ios and watchos.\nThe demo targets need to remain dedicated :). Another idea is to use a proxy like https://github.com/zetasq/CWebP which basically contains an xcodeproj with shared targets and links to the libwebp project as git submodule. Per this conversation, I have created:\n- SDWebImage/libwebp-Xcode which is very similar to CWebP, but cleaner (we don't keep any copies of the source files). This basically links to libwebp as a git submodule and adds an Xcode project to it.\n- SDWebImage/SDImageWebPCoder containing all the WebP integration. This is very similar to SDWebImage/SDWebImageFLPlugin\nIf everything is ok, on the 5.x branch we will remove the WebP related files and subspec.. I think this PR will be closed once we merge #2469 and #2476. #2469 was merged to 5.x branch. #2476 is up for review. I will go ahead and close this one.\n@BlueVirusX thanks for making the initial PR, it took us a while but I think we have come up with a good solution.. @dreampiggy don't worry, I'm glad I caught it. I was trying to create a demo project for Progressive JPEG using Concorde, so I noticed it :). Build is done, PR was approved. I will merge.. @dreampiggy looking good here.\nI think we could add (besides this PR):\n- update our demo to include one HEIC image (maybe even a test)\n- find a way so that SDWebImageImageIOCoder returns false for canDecodeData if the OS doesn't support it, so that it somehow pops up to the user of the library. Ok, got it. As I know, IOCoder will say yes to canDecode HEIC since we just excluded WebP there.\nI think this PR is sufficient for now (meaning release 4.2.0).\nWaiting for CI build before merge.. But there is no kUTTypeHEIF defined inside UTCoreTypes.h. I think the corresponding one to HEIF is kUTTypeLivePhoto but we have to check.\nWhy do you say it won't encode to HEIC? canEncodeToFormat only excludes WebP.. Looks good @dreampiggy. I will trust your judgement on this one. Let me know if I can merge it (when CI build is done).. I don't get it, why sd_UTTypeFromSDImageFormat falls back to kUTTypePNG? Because there is kSDUTTypeHEIC before that?. Guys, I think we can merge this PR. @dreampiggy @skyline75489 \n@dreampiggy is this still valid? Are we encoding HEIC as PNG?\n\nIf our ImageIO coder received canEncodeToFormat and return YES for SDImageFormatHEIC, then encodedDataWithImage will try to encode target UIImage with PNG format. This not sounds really good as we expected. This encoding method can be called from user. I prefer to return nil if we can't encode this instead of return a PNG image data.. Looks good @dreampiggy . At first look, the code looks better. I'll have to review in more depth before I can say if there are no hidden issues :)\nAnyway, since I just released 4.2.0, I've marked this PR for 5.0.0 release.. @dreampiggy I asked you guys if there are any work remaining for 4.2.0 release. :) So it's gone already, released.\nWe can patch it. What is the problem with kCGImagePropertyOrientation?\nIf this PR is not breaking changes, we can release a 4.2.1 patch.. I see. I don't think that iOS 7 support is a major problem, so my proposal is: let me review this PR and then create a 4.2.1 patch with just this PR. That will fix our problems.. @dreampiggy I have reviewed this PR and everything looks good (I've added a small commit just making the new classes public for people who need to write custom coders). I will merge this into master (actually squash) and then release a 4.2.1 patch. This means I will close #2085.. 4.2.1 is released.. @dreampiggy I really appreciate your dedication to this project. Good job on this refactor. @dreampiggy I will let you to review this PR. @Pearapps please note @dreampiggy is already working on a PR to refactor the animated WebP and GIF together #2082 . #2082 is merged.. Closing this PR, as #2082 takes care of this issue as well.. @ghowen try clean-build or even refresh CocoaPods. This file SDWebImageDecoder.h does not exist.. @Beyond-Chao SDWebImageDownloaderOperation is a subclass of NSOperation. The start method is defined there and is called when the NSOperation is started (in our case when added to the NSOperationQueue).. @krishnameena please fill in the info required in the issue template.\nAlso, why are you loading a nil url? That makes no sense.\nI'm pretty sure the tintColor has nothing to do with our library.. If you're loading a static image, just set it imageView.image = image, no need for the SDWebImage functions.. Fixed by #2093 . Looks good @dreampiggy. I will merge it.. Closing based on the response above. Looks very good @dreampiggy and long due. Thanks for updating the demos. Got it @dreampiggy. I will release 4.2.2 today.. Fixed by #2093 . 4.2.2 is released. @AnilkumarRabhasa you can try to download the image using SDWebImageManager and use that image inside the completion block to create and set the UIColor:\nSDWebImageManager.shared().loadImage(with: url) { (image, data, error, cacheType, done, _) in\n  self.scrollView.backgroundColor = UIColor(patternImage: image)\n}. I don't understand how SDWebImageManager is not a declared identifier. This class is in the library from the beginning.. What do you mean by \"set thumbnail\"?\nAlso, it's very important that you fill in the issue template info above (I re-added the template for you).. For large images, you can use the SDWebImageScaleDownLargeImages option. This will make our library cache and return a scaled version of the image, if it's larger than a certain value that depends on the device.. SDWebImage does not handle videos, only images (including animated images like GIF or animated WebP).. Very nice @dreampiggy. Merging.. @junestchick there is one mechanism for customising the way we compute the cache key:\n[[SDWebImageManager sharedManager] setCacheKeyFilter:^(NSURL *url) {\n    ...\n    return keyAsString;\n}];\nBut the thing is this is a block you set once and you can only use the url to make the computation, but maybe you can keep a map structure like (url, row/section) and go from there.. @BirdsAndFish probably because the response from the server is missing Content-Length HTTP header field. We are getting the expected size from that. See #334. Closing this PR per the previous comments. @dreampiggy indeed, this is a huge PR. Hat off for doing this work. Now I will try to review :)\n- I think we need to rename one of the SDAnimatedImage protocol and SDAnimatedImage class. This is confusing. Maybe the compiler can deal with this, but people do not :)\n- isn't there an issue with SDAnimatedImageView implementing sd_setImageWithURL... methods, since it is an UIImageView which already implements those methods in our older categories.. @dreampiggy we need to update the documentation on the animated images support, especially on our README.md. @dreampiggy:\n- ok, I agree with your justification of using the same name for a class and a protocol. I guess it's fine as it is (just my own preferences...). Thanks for detailing on the naming\n- we can talk on something like Slack, but that won't be visible to the people here. Unless we publish the summary of those conversations here on GitHub\n- I will also help on updating the docs, I was just saying it seems needed. Looks good to me. I just updated the README.md on the 5.x branch to be in sync with those changes on the platforms requirements. See 8801138. @dreampiggy is this the same coder from https://github.com/SDWebImage/SDWebImageAPNGCoder? If so, we can do some dependency management to avoid duplicating the code. I see. Basically on the 5.x branch is a more rich version of the APNG coder. OK. @dreampiggy good idea, this was long due (fixing the version of webp).\n@ShaharHD I see the same issue. I also tried to publish version 0.6.1 to CocoaPods, but got the errors:\n```\npod spec lint\n\n-> libwebp (0.6.1)\n    - ERROR | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild: Returned an unsuccessful exit code. You can use --verbose for more information.\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  libwebp/src/dsp/alpha_processing_mips_dsp_r2.c:15:10: fatal error: 'src/dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  libwebp/src/dsp/alpha_processing_neon.c:14:10: fatal error: 'src/dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  libwebp/src/dsp/alpha_processing_sse2.c:14:10: fatal error: 'src/dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  libwebp/src/dsp/alpha_processing_sse41.c:14:10: fatal error: 'src/dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  libwebp/src/utils/bit_reader_utils.c:18:10: fatal error: 'src/utils/bit_reader_inl_utils.h' file not found\nAnalyzed 1 podspec.\n[!] The spec did not pass validation, due to 1 error.\n``\nSeems like the webp team has made a refactoring of the way they import headers: https://github.com/webmproject/libwebp/commit/0a17f47. CC @jzern @skal65535 from the libwebp team. Guys, we are trying to publish the0.6.1version of libwebp via CocoaPods. Myself and @ShaharHD have the permissions for the CocoaPods Specs project (Trunk), but I can easily add you if you are interested.\nAnyway, there seems to be an issue with the recent change from#include \"../dsp/dsp.h\"to#include \"src/dsp/dsp.h\"`.\nI managed to fix it in the podspec by adding\n...\n\"pod_target_xcconfig\": {\n    \"USER_HEADER_SEARCH_PATHS\": \"$(inherited) ${PODS_ROOT}/libwebp/src/**\"\n  },\nbut it only works when using libraries pod spec lint --use-libraries, which means for people trying to use_frameworks! this won't work.\nWe need your input here.\n. @jzern thanks for responding here.\nThere were 2 errors:\n- first one was when compiling the libwebp module, 'src/dsp/dsp.h' file not found. That one (for both libraries and frameworks scenarios) could be fixed with \n\"pod_target_xcconfig\": {\n    \"USER_HEADER_SEARCH_PATHS\": \"$(inherited) ${PODS_ROOT}/libwebp/src/**\"\n  },\n- the second error which I get only when running the lint with frameworks: \n``\npod spec lint\n -> libwebp (0.6.1)\n    - ERROR | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild: Returned an unsuccessful exit code. You can use--verbose` for more information.\n    - WARN  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  libwebp/src/enc/backward_references_enc.c:662:12: warning: variable 'best_offset' may be uninitialized when used here [-Wconditional-uninitialized]\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  libwebp/src/enc/backward_references_enc.c:594:20: note: initialize the variable 'best_offset' to silence this warning\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-ckdeskkivwqktuevyddslggiepeb/Build/Products/Release/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: 'src/dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180403-6292-7qikfy-libwebp/App/main.m:3:9: fatal error: could not build module 'libwebp'\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-ckdeskkivwqktuevyddslggiepeb/Build/Products/Release-iphonesimulator/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: 'src/dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-ckdeskkivwqktuevyddslggiepeb/Build/Products/Release-appletvsimulator/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: 'src/dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-ckdeskkivwqktuevyddslggiepeb/Build/Products/Release-watchsimulator/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: 'src/dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core, libwebp/utils, libwebp/dsp, and more...] xcodebuild:  /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180403-6292-7qikfy-libwebp/App/main.m:2:9: fatal error: could not build module 'libwebp'\nAnalyzed 1 podspec.\n. PS: I tried also setting the search headers via `user_target_xcconfig` for the user target, but didn't work:\n  \"user_target_xcconfig\": {\n    \"USER_HEADER_SEARCH_PATHS\": \"$(inherited) ${PODS_ROOT}/libwebp/src/**\"\n  },\n``. @jzern :) you caught me. It doesn't make a big difference.$PODS_ROOTis resolved to thePodsfolder. I initially added \"${PODS_ROOT}/libwebp/\" as a recursive path. But then I saw that we only need thesrcfolder and I tried with that. I get the same error with both paths.. @jzern I ran the spec lint with--verbose` option.\nCocoaPods version: 1.4.0.\nThe full output is here (didn't paste it here because of the size): https://www.dropbox.com/s/ijnwkt5s57tdt54/libwebp_pod_spec_lint_verbose.txt?dl=0\nThe podspec (JSON) I used: https://www.dropbox.com/s/rt3il3i3d6w57m9/libwebp.podspec.json?dl=0\nHere's the relevant part from the pod spec lint --verbose output:\n```\nCompileC /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/Objects-normal/i386/main.o App/main.m normal i386 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180404-1965-1x70t80-libwebp\n    export LANG=en_US.US-ASCII\n    export PATH=\"/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/bogdanp/.rvm/bin\"\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch i386 -fmessage-length=0 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -std=gnu11 -fobjc-arc -fobjc-weak -fmodules -gmodules -fmodules-cache-path=/Users/bogdanp/Library/Developer/Xcode/DerivedData/ModuleCache -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -fbuild-session-file=/Users/bogdanp/Library/Developer/Xcode/DerivedData/ModuleCache/Session.modulevalidation -fmodules-validate-once-per-build-session -Wnon-modular-include-in-framework-module -Werror=non-modular-include-in-framework-module -Wno-trigraphs -fpascal-strings -Os -fno-common -Wno-missing-field-initializers -Wno-missing-prototypes -Werror=return-type -Wdocumentation -Wunreachable-code -Wno-implicit-atomic-properties -Werror=deprecated-objc-isa-usage -Werror=objc-root-class -Wno-arc-repeated-use-of-weak -Wimplicit-retain-self -Wduplicate-method-match -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wuninitialized -Wconditional-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wno-float-conversion -Wnon-literal-null-conversion -Wobjc-literal-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wundeclared-selector -Wdeprecated-implementations -DCOCOAPODS=1 -DNS_BLOCK_ASSERTIONS=1 -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator4.2.sdk -fasm-blocks -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -mwatchos-simulator-version-min=4.2 -g -fvisibility=hidden -Wno-sign-conversion -Winfinite-recursion -Wcomma -Wblock-capture-autoreleasing -Wstrict-prototypes -Wunguarded-availability -fobjc-abi-version=2 -fobjc-legacy-dispatch -iquote /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/App-generated-files.hmap -I/Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/App-own-target-headers.hmap -I/Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/App-all-non-framework-target-headers.hmap -ivfsoverlay /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/all-product-headers.yaml -iquote /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/App-project-headers.hmap -I/Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Products/Release-watchsimulator/include -I/Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/DerivedSources/i386 -I/Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/DerivedSources -F/Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Products/Release-watchsimulator -F/Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Products/Release-watchsimulator/libwebp -iquote /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Products/Release-watchsimulator/libwebp/libwebp.framework/Headers -MMD -MT dependencies -MF /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/Objects-normal/i386/main.d --serialize-diagnostics /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/Objects-normal/i386/main.dia -c /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180404-1965-1x70t80-libwebp/App/main.m -o /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Intermediates.noindex/App.build/Release-watchsimulator/App.build/Objects-normal/i386/main.o\nWhile building module 'libwebp' imported from /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180404-1965-1x70t80-libwebp/App/main.m:2:\nIn file included from :1:\nIn file included from /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Products/Release-watchsimulator/libwebp/libwebp.framework/Headers/libwebp-umbrella.h:13:\n/Users/bogdanp/Library/Developer/Xcode/DerivedData/App-dhxibhkisoboaffgmwnqzzefambm/Build/Products/Release-watchsimulator/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: 'src/dsp/dsp.h' file not found\ninclude \"src/dsp/dsp.h\"\n     ^~~~~~~~~~~~~~~\n\n1 error generated.\n/var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180404-1965-1x70t80-libwebp/App/main.m:2:9: fatal error: could not build module 'libwebp'\n@import libwebp;\n ~~~~~~~^~~~~~~\n2 errors generated.\n BUILD FAILED \nI think the problem is just resolving the paths.. More updates:\n- apparently, running `pod spec lint` on the older specs (for versions like `0.6.0`) also fails, no matter which CocoaPods version I use (`1.4.0`, `1.3.1`, `1.2.1`).\nError:\n -> libwebp/core (0.6.0)\n    - ERROR | [libwebp/core] xcodebuild: Returned an unsuccessful exit code. You can use --verbose for more information.\n    - NOTE  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-gmqdsontmyxucuedklilrhongpnr/Build/Products/Release/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: '../dsp/dsp.h' file not found\n    - NOTE  | [libwebp/core] xcodebuild:  /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180404-45960-grt1x9-libwebp/App/main.m:3:9: fatal error: could not build module 'libwebp'\n    - NOTE  | [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-gmqdsontmyxucuedklilrhongpnr/Build/Products/Release-iphonesimulator/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: '../dsp/dsp.h' file not found\n    - NOTE  | [tvOS] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-gmqdsontmyxucuedklilrhongpnr/Build/Products/Release-appletvsimulator/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: '../dsp/dsp.h' file not found\n    - NOTE  | [watchOS] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-gmqdsontmyxucuedklilrhongpnr/Build/Products/Release-watchsimulator/libwebp/libwebp.framework/Headers/bit_reader_inl_utils.h:25:10: fatal error: '../dsp/dsp.h' file not found\n    - NOTE  | [watchOS] [libwebp/core] xcodebuild:  /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180404-45960-grt1x9-libwebp/App/main.m:2:9: fatal error: could not build module 'libwebp'\nAnalyzed 1 podspec.\n[!] The spec did not pass validation, due to 1 error.\n- I can run `pod spec lint --use-libraries` with success, and I remember that this was the way I published the previous specs (`pod trunk push --use-libraries` to pass the validation).\n- For the version `0.6.1`, `pod spec lint --use-libraries` fails without the\n\"pod_target_xcconfig\": {\n    \"USER_HEADER_SEARCH_PATHS\": \"$(inherited) ${PODS_ROOT}/libwebp/src/\"\n}\n. From what I see, libwebp is not ready to be built as a dynamic framework - imports should be different. I will go ahead and just publish the new version using `--use-libraries` as before.. I also tried adding to the podspec\n  \"pod_target_xcconfig\": {\n    \"USER_HEADER_SEARCH_PATHS\": \"$(inherited) ${PODS_ROOT}/libwebp/\",\n    \"CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES\": \"YES\"\n  },\n  \"user_target_xcconfig\": {\n    \"USER_HEADER_SEARCH_PATHS\": \"$(inherited) ${PODS_ROOT}/libwebp/**\",\n    \"CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES\": \"YES\"\n  },\nnow `pod spec lint` fails by not finding the definitions to `__msa_hadd_s_d` or `v4i32`, which are in the `msa.h` file that apparently cannot be found.\n -> libwebp/core (0.6.1)\n    - ERROR | [OSX] [libwebp/core] xcodebuild: Returned an unsuccessful exit code. You can use --verbose for more information.\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  libwebp/src/enc/backward_references_enc.c:662:12: warning: variable 'best_offset' may be uninitialized when used here [-Wconditional-uninitialized]\n    - NOTE  | [OSX] [libwebp/core] xcodebuild:  libwebp/src/enc/backward_references_enc.c:594:20: note: initialize the variable 'best_offset' to silence this warning\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:588:45: error: unknown type name 'v4i32'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:589:9: error: unknown type name 'v2i64'\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:589:24: warning: implicit declaration of function '__msa_hadd_s_d' is invalid in C99 [-Wimplicit-function-declaration]\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:589:24: warning: this function declaration is not a prototype [-Wstrict-prototypes]\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:589:40: error: use of undeclared identifier 'v4i32'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:589:51: error: use of undeclared identifier 'v4i32'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:590:9: error: unknown type name 'v2i64'\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:590:24: warning: implicit declaration of function '__msa_splati_d' is invalid in C99 [-Wimplicit-function-declaration]\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:590:24: warning: this function declaration is not a prototype [-Wstrict-prototypes]\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:591:9: error: unknown type name 'v2i64'\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:592:19: warning: implicit declaration of function '__msa_copy_s_w' is invalid in C99 [-Wimplicit-function-declaration]\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:592:19: warning: this function declaration is not a prototype [-Wstrict-prototypes]\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:592:35: error: use of undeclared identifier 'v4i32'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:604:45: error: unknown type name 'v8i16'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:605:9: error: unknown type name 'v4i32'\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:605:21: warning: implicit declaration of function '__msa_hadd_s_w' is invalid in C99 [-Wimplicit-function-declaration]\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:605:21: warning: this function declaration is not a prototype [-Wstrict-prototypes]\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:606:9: error: unknown type name 'v2i64'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:607:9: error: unknown type name 'v2i64'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:608:9: error: unknown type name 'v2i64'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:609:41: error: use of undeclared identifier 'v4i32'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:621:46: error: unknown type name 'v8u16'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:623:9: error: unknown type name 'v4u32'\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:623:23: warning: implicit declaration of function '__msa_hadd_u_w' is invalid in C99 [-Wimplicit-function-declaration]\n    - WARN  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:623:23: warning: this function declaration is not a prototype [-Wstrict-prototypes]\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:624:3: error: use of undeclared identifier 'v2u64'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:625:3: error: use of undeclared identifier 'v2u64'\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:626:3: error: use of undeclared identifier 'res0_m'; did you mean 'res_m'?\n    - NOTE  | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:623:15: note: 'res_m' declared here\n    - ERROR | [OSX] [libwebp/core] xcodebuild:  /Users/bogdanp/Library/Developer/Xcode/DerivedData/App-buepdoxptmqzyzeeifyerpskguau/Build/Products/Release/libwebp/libwebp.framework/Headers/msa_macro.h:626:12: error: use of undeclared identifier 'res0_m'\n    - NOTE  | [OSX] [libwebp/core] xcodebuild:  fatal error: too many errors emitted, stopping now [-ferror-limit=]\n    - NOTE  | [OSX] [libwebp/core] xcodebuild:  /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/CocoaPods-Lint-20180404-54655-195fy3e-libwebp/App/main.m:3:9: fatal error: could not build module 'libwebp'\nAnalyzed 1 podspec.\n. I will stop now :) too much noise here. I have published version `0.6.1` via CocoaPods (used `pod trunk push --allow-warnings --use-libraries ./libwebp.podspec.json`).. Clean implementation @dreampiggy I like it \ud83d\udc4d . @sahibhussain could you create a demo project where this issue replicates? It would help us reproduce and isolate the problem.. Does this issue still apply? Any updates?. @dreampiggy I am reviewing all the PRs for 5.x release as they were created. Got to this one.\nI'm ok with the idea of adding `context` param, but if so, we don't need to keep the APIs without context in deeper classes like `SDImageCache`. I understand the need for high level APIs to have both, but there is no need underneath + we do DRY. What do you think?\nTo give an example: I would just remove `SDImageCache queryCacheOperationForKey:options:done:` since we have the one with `context`.. Interesting implementation @dreampiggy . Looks good. @dreampiggy interesting point of view, I see your proposal. I will look into the other PR.. @Zhangyunjiang123 please fill in the info required by the issue template. English would be nice :) even though I think @dreampiggy speaks Chinese.. @dreampiggy \ud83d\udc4d for creating the Common problems doc. Good fix @dreampiggy . Looks good. The PR @mnvr mentioned is #2210 . @BakaYang this later question is `webp` related, so you should address this on the webp project. We are just referencing it. I also strongly recommend you use the recommended install via CocoaPods.. We already have some code that handles image resize, but it's called only when `SDWebImageScaleDownLargeImages` option is set and the image is large enough (over 60 MB of memory for a decompressed image). See [SDWebImageIOCoder \n sd_decompressedAndScaledDownImageWithImage](https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageImageIOCoder.m#L269). \ud83d\udc4d . @dreampiggy about this PR:\n- I appreciate your work here, properly describing the issue, the design and the implementation\n- but in my opinion, some of this code does not belong in this library/module and we should not maintain it. Code like applying `CIFilter`s or rounding corners of images. I see `SDWebImage` as a well defined module that does image download and cache and not more. We could have created modules on top that can be brought in by the people who need them.\n- this has multiple reasons, among which the need for the code to be minimal, so it's easy to review for us and for the users, to maintain and to understand.\n- BUT, since this is a joint effort of maintaining the library, the other active contributors @skyline75489  and @mythodeia didn't disagree and that I was silent while this PR was developed, I will not try to convince you to change it. Let's see how this goes.. PS: I like the `SDWebImageTransformer` and the ways to compose transformers. I agree with this opening of the API. Indeed this is a bit weird, but as @dreampiggy said, `setValues:forHTTPHeaderField:` will update the  `HTTPHeaders` array used for all the downloads for a certain downloader. `headersFilter` is a block called for each download where you can do something with the headers (should be filtering, but given the interface of the API, you can return any dictionary as long as it matches the type).. Agree with @dreampiggy. Closing the issue. Thanks @a455455b . Nice @dreampiggy . @noticeboard-priyansh this issue sounds pretty weird, so here are a few ideas:\n- is the app launched from launcher the same debug one installed with Xcode?\n- are you using the device or simulator?\n- you can try installing the app, starting it and then attaching the debugger :). Good job @dreampiggy . Very good addition @dreampiggy . Yeap, it's a bit weird, but it looks balanced. Not sure what we can do to simplify. @LululuSir thanks for submitting the PR, but please detail a bit:\n- why do you think this is the proper fix for the issue #1484 \n- how did you test? can you write some unit test?. @LululuSir thanks for the details. Could you also add a unit test?\n@dreampiggy what do you think? It sounds valid to me. Got it. I like @dreampiggy's suggestion. @dreampiggy you are correct, we need to lock the part where we edit the array. That is a common pattern, which we have used to do with a serial queue that is the recommended method from Apple to synchronising access to a non-thread safe resource. We can also use a lock. But you are right, we can't just rely on the `atomic` flag.. Good stuff @dreampiggy. @dreampiggy do you think that the 5.0 release will provide a workaround for this issue? I can't keep up with this conversation :). Some tests are failing. Looking good @dreampiggy. I will go ahead and merge it.. @dreampiggy regarding [SDWebImage-Photos](https://github.com/dreampiggy/SDWebImage-Photos), I would recommend we move it under github.com/SDWebImage/ so all those extension projects are there. I would also rename it to `SDWebImagePhotosFramework` or even `SDWebImage+PhotosLoader`. I saw this naming convention for adding extensions and using `+`.. I think `SDWebImagePhotos` is just confusing :) Few people can think it's related to the `Photos` framework. What do you mean by `+` is fobbiend?. I see. Thanks for the details. CamelCase is ok, but not that readable. Anyway, we can go with CamelCase.. @dreampiggy I'm updating the diagrams for the 5.0.0 release and I can't figure out what the `SDImageLoadersManager` is doing. It's not being used from other classes. `SDWebImageManager` directly uses its instance of `SDImageLoader`. Can you give me a hint?. @dreampiggy I see, they can be used via `defaultImageLoader` or similar.. I must say this is not too intuitive :). I added this PR to milestone 5.0.0 for now. If we decide to release some other version in the meantime, we will adjust then.. I didn't see the 4.3.4 milestone. Yeap, that is the right milestone.. @dreampiggy I agree with the decision here, but as a general practice, I think it's best if we don't merge our own PR's. :). I think we should move `SDWebImageDownloadToken` and `SDWebImageCombinedOperation` to their own files, since they are now visible entities. As they were private entities, it was ok to keep them together but now I think it would be more clear if they are explicit. Looks good, I like this cleanup as well. @dreampiggy \nOne thought: since there are a lot of common options between `SDWebImageDownloaderOptions` and `SDWebImageOptions`, what do you think about merging them into a single one? I think  `SDWebImageOptions` is the supraset, but I need to check. Anyway, the idea is to use the same enum and just ignore options the downloader cannot apply. Thoughts?. PS: Again, I don't like having a protocol and class with the same name. Here it's `SDWebImageDownloader`. According to the latest Swift naming practices, we should use something like `SDWebImageDownloadable` for the protocol.\nMoving one step further, we can look into clearing up those names across our lib. For example, `SDDownloadable` seems enough for me. No need to keep copying over the `SDWebImage` prefix.. @dreampiggy you are right about `SDWebImageOptions` not being a superset of `SDWebImageDownloaderOptions`. I will continue with the remaining PRs and see after that.. Looks very clean @dreampiggy . Good idea not to move the Core files. I will take another look after lunch and merge it.. Seems like `pod lib lint --allow-warnings` fails.. I'm not sure about the following case:\n- the `modulemap` is defined on the root of the `podspec`, which means it's applicable to all the subspecs\n- inside the `modulemap`, we do `import SDWebImage.h` which contains imports like `MKAnnotationView+WebCache.h` or `#import <SDWebImage/UIImage+WebP.h>` which are not included in all the subspecs\n- so my concern is that if you try to include just some subspecs into a project, it might have an issue.\n`pod 'SDWebImage/Core'` \n- one idea would be to use `#if __has_include` for all the non-core header imports inside `SDWebImage.h`. The odd thing for me is the `pod lib lint` on CI doesn't fail. And I know that command will check every subspec in a test project. So I guess it works, but I'm a bit confused about it, since it should fail. I've quickly looked at CocoaLumberjack where I am maintainer as well - just for a comparision\n- there we have a `modulemap` file, but it's not specified via the podspec. It's just added to the list of preserved paths which are just copied over `s.preserve_paths = 'README.md', 'Classes/CocoaLumberjack.swift', 'Framework/Lumberjack/CocoaLumberjack.modulemap'`\nI guess CocoaPods picks it up automatically\n- look at the `modulemap`\nframework module CocoaLumberjack {\n    umbrella header \"CocoaLumberjack.h\"\nexport *\nmodule * { export * }\n\ntextual header \"DDLogMacros.h\"\n\nexclude header \"DDLog+LOGV.h\"\nexclude header \"DDLegacyMacros.h\"\n\nexplicit module DDContextFilterLogFormatter {\n    header \"DDContextFilterLogFormatter.h\"\n    export *\n}\n\nexplicit module DDDispatchQueueLogFormatter {\n    header \"DDDispatchQueueLogFormatter.h\"\n    export *\n}\n\nexplicit module DDMultiFormatter {\n    header \"DDMultiFormatter.h\"\n    export *\n}\n\nexplicit module DDASLLogCapture {\n    header \"DDASLLogCapture.h\"\n    export *\n}\n\nexplicit module DDAbstractDatabaseLogger {\n    header \"DDAbstractDatabaseLogger.h\"\n    export *\n}\n\n}\n```\nThe CocoaLumberjack.h header contains\n```objective-c\n// Core\nimport \n// Main macros\nimport \nimport \n// Capture ASL\nimport \n// Loggers\nimport \nimport \nimport \nimport \n// CLI\nif __has_include() && TARGET_OS_OSX\nimport \nendif\n. It's ok now, as I see the `has_include` pattern is used.objective-c\nif __has_include()\nimport \nendif\n```\nI somehow missed this change. Great job @dreampiggy . Interesting approach. Closing the issue per lack of activity. @wangjufan if you are still interested in this subject, please reopen/comment/create PR .... @XiaoYiS please fill in the issue template info.. @hms111111 please fill in the template info on the issue.. Travis build is failing because sd_imageOrientationFromImageData is used by test08ImageOrientationFromImageDataWithInvalidData. @dreampiggy please properly review the changelog and migration guide. I must say I can't follow all the changes made in this big release, so I'm not sure I covered them properly. Please take proper time to do this, it's very important for our users.. @dreampiggy I like this idea. Let's keep working on the wiki until we are done :). @dreampiggy this tool is so nice, had no idea something like that exists. It will help a lot. I was doing the diff manually. I think we can just remove my list and use the generated one (as you said, in the repo), it's better organised and we can always regenerate it. What do you think?. @dreampiggy very good point. I will do it.. Ok, I brought the changes from the wiki to this PR. Looks much better.. @dreampiggy I've added the latest changes from Wiki + small changes to make things for English friendly :)\nPlease take a look. @dreampiggy any blocker for merging this one?. Ok, time to merge this one.. @dreampiggy this refactoring also looks nice.\nMy only problem is with the naming, that is why we need to review all our names before releasing.\nI'm familiar with our codebase and still can't say what a SDWebImageCache is :) does it contain WebImage because it is a name prefix or does it have anything to do with web images.\nIt gets even weirder: SDImageCache implements SDWebImageCache :) this is also confusing because you would expect something like WebImage to be an extended Image or something like that.\nThis is not a showstopper for this PR getting merged, as I want us to review all the names.. Created #2291 - will discuss there. Hold on about the renaming. I've merged this, we will discuss all the renaming in #2291 and decide together. We are closing in to releasing a 5.0.0-beta version. Stay tuned.. Looks good @dreampiggy. I will go ahead and merge. The Codecov issue is already fixed on the 5.x branch. @dreampiggy looks good. Yeah, let's merge into master and include it into the 4.3.4 release.. I merged this PR as well (manually because of the conflicts). Good job @dreampiggy . @dreampiggy what's the order we should review&merge the remaining open PR's?. Good plan @dreampiggy. I have already reviewed and merged #2280 and #2282. I'm looking into the other PR's, please let me know if you need to update anything on those.. @dreampiggy regarding FLAnimatedImage, can you take care of removing this dependency from our code and moving your FLPlugin project to the SDWebImage org? Then we can reference it properly and get rid of FLAnimatedImage for good.\nOr I can do the removal, just let me know how you prefer.. Quick question: SDImageAPNGCoder is now inside the repo. Should we just keep this in it's dedicated repo and remove it from the main project?. @dreampiggy @skyline75489 @mythodeia @zhongwuzw I've just released 5.0.0-beta.\nWe should try it out, also ask other people to do so.. Cool. I've cleaned up the 3.0-compat and 4.x branches - no longer needed. We will keep using master for the 4.x releases - probably 4.4.2 until 5.0 is ready to be released (released and merged into master).. @dreampiggy @mythodeia @skyline75489 @zhongwuzw can we all test a bit the beta release? Any other people you want to involve for beta testing? Like people you talked to on GitHub and are interested in our project. @dreampiggy I did try this version in a very simple project. Works fine. We can still rely on our unit tests for another point of view of testing. But maybe we need to update/add more tests, as it seems with 5.x we are around 65% coverage, as for 4.x we had 75%.. @dreampiggy I see. Good to know about the Test being included in the numbers. That was misleading and I do remember we talked about this :)\nAnyway, don't worry, we will improve the tests all together. You did a good job adding tests for the features added in 5.x.. Agree @itdongbaojun - we will bump the dependency to libwebp 1.0.0. We are still looking into perhaps moving the libwebp coder to it's dedicated repo, like all the other custom coders.. SDWebImage/SDWebImageWebPCoder already works with libwebp 1.0. > About the transfer, I got no replies from you guys in the email thread.\n@rs we have sent a number of email, on both your dailymotion.com and rhapsodyk.net accounts. I didn't paste the entire address here. Please let us know how to proceed. We are pretty much blocked at this point. @rs I just sent another email to the account you prefer. Please note we are waiting for a resolution of the repo transfer so we can make the final push for the 5.0 release.. Much appreciated @rs . Looks good. Merging.. @dreampiggy I agree about people using SDWebImageManager along with the UIView extensions. But for 90% of our users, that should be it.\nA 5.x major release allows us to change the interface and optimize it.\n\none reason for those renaming is pure readability: shorter entity names are easier to read and the code does not extend that much\nanother reason: we have the SD prefix for all the entities. That is sufficient to avoid name collisions. Now all the other parts of the name need to make sense:\nSDWebImageManager is a manager that handles loading of images, not necessarily from the web. That is why the web word is confusing in it's name.\nSDWebImageTransformer is an image transformer, its API just allows changing from an input image to an output image, there is no relation to the web\nan even more interesting example: SDWebImageCacheKeyFilter has nothing to do with web or even image, it's just a cache key filter\nsame principle for the context names, we just don't need to carry over that redundant WebImage. This was the logic we used for naming, but it's not ideal.\nIt's ok that we don't agree :) so we can have a constructive discussion and decide.\n\nMy 2 suggestions:\n- let's look at other libraries as example. For instance AFNetworking which for me is a model for all Objective-C open source projects. They do not name their entities as AFNetworking...., but just use the AF prefix and then use the most relevant name for that component. Examples: AFHTTPSessionManager, AFSecurityPolicy, AFURLRequestSerialization\n- extend the conversation to our colleagues @mythodeia @skyline75489 @rs what do you guys think?. @dreampiggy yeap, we are closing in to the beta release. Just a few things we really need to do.\nAbout naming, I think we can find some middle ground:\n- go ahead with the strong renaming I proposed above\n- to avoid breaking top level API, we can just keep some aliases around\nobjective-c\n@compatibility_alias SDWebImageManager SDImageManager;\nNote: using typedef to create an alias will result in a compiler error\nobjective-c\ntypedef SDWebImageManager SDImageManager;\nSDImageManager.h:240:27: Redefinition of 'SDImageManager' as different kind of symbol. About my idea above, the one downside is imports file names will also changes, so for those who have explicitly #import <SDWebImage/SDWebImageManager.h> it will break. Not sure if many did this.. @dreampiggy I appreciate you creating the PR's for those renames. They are all merged.\nLet's keep going with the conversation:\n- about SDWebImageManager and SDWebImageDownloader, I agree they should not be changed. One last attempt from me :) \n  - @compatibility_alias indeed will only make the entity exist before compilation. It's very similar to a macro definition (which we use for UIImage and NSImage). The user works with the entity he wants and at compilation, that is replaced with the one we want. I don't see any issues.\n  - we can also do a \n```objective-c\nifndef SDWebImageManager\n#define SDWebImageManager SDImageManager\n\nendif\n- I think we can/should rename `SDWebImageLoader` to `SDImageLoader` - it was added in the 5.x branch, so no impact on the users.\n- `SDWebImageCacheKeyFilter` -> `SDCacheKeyFilter`\n- `SDWebImageCacheSerializer` -> `SDImageCacheSerializer`\n- `SDWebImageError` -> `SDError`\n- `SDWebImageTransition` -> `SDImageTransition`\n- `SDWebImageIndicator` -> `SDImageIndicator`. What about the other?\n`SDWebImageLoader`, `SDWebImageError`, `SDWebImageTransition`. @rs I don't think there's a clear answer. There are benefits to shortening the entity names and making them more clear (or not, even that is up to debate) and a major release is the place to do so. On the other hand, I get why people might be avoiding the upgrade if it's too much work.\nBut for the changes we have currently applied, most of them are only 5.x features, so no friction there.\nWe have agreed not to changed `SDWebImageManager` or `SDWebImageDownloader`.. I agree with @rs on this one. From my pov, all the core functionality from SDWebImage should remain into this project (easier to maintain and easier for the existing users). What I suggested above was to make sure we don't have pieces that do something else than our core lib. For instance, the concrete implementations of the transformers. Or pieces like the Bridges you mentioned in the diagram (that link `SDWebImage` to other modules). But for now, I don't see any obvious ones that could be made a separate project. Another example are the coders (like `APNG` or `ProgressiveJPEG` coders that are not used by a lot of our users and are well definable outside our lib.. Ok. Let's close the renaming here. I just want to release a 5.0.0-beta asap.. @avershelaecom @dreampiggy \nI just tried to update to our latest (4.3.3) version using Carthage with a simple demo project.\nThe command is `carthage update --platform ios --configuration DEBUG` and it worked fine for me:\n Fetching SDWebImage\n Checking out SDWebImage at \"4.3.3\"\n xcodebuild output can be found in /var/folders/78/p2z45nm930d4trk7ntf6_rdr0000gn/T/carthage-xcodebuild.kmBTY6.log\n Building scheme \"SDWebImage iOS\" in SDWebImage.xcworkspace\n\ncarthage version                                  \n0.29.0\n. I had reviewed it earlier, just didn't merge it :). @dreampiggy this is from the latest master (unreleased 4.3.4):objective-c\n- (void)storeImageDataToDisk:(nullable NSData )imageData forKey:(nullable NSString )key {\n    if (!imageData || !key) {\n        return;\n    }\n    dispatch_sync(self.ioQueue, ^{\n        [self _storeImageDataToDisk:imageData forKey:key];\n    });\n}\n``\nso the comment makes perfect sense. If you call this method from the ioQueue, it will deadlock because of thedispatch_sync.. @dreampiggy the refactoring you mentioned was in 5.x, so this PR applies for 4.3.4. I will merge it.. 22e532c. Closed per #2315 . @dreampiggy I tried to change the base branch tomasterand merge it there first, but it doesn't work (too many differences). This needs to be propagated to themasterbranch as well.. Looks good. Even though this might create some issues (sometimes it's best if user interaction is disabled during animations, otherwise strange crashes can happen), I think it's better to allow the interactions.. Cool @dreampiggy . Fix looks good, release looks good. Thanks guys. \ud83d\udc4d . Looks good. I'm not 100% confident with this change, but since you guys looked into it, let's keep it. I'm only concerned at some point, the 2 addresses will be different, but the strings will still be the same.\nI just think it's a logical error comparing with==`.. Good fix. Looks good to me. Let's see how it behaves. I see your point @gukemanbu, but this change is breaking compatibility. We can talk about it, for a major release.. @gukemanbu I didn't properly look at your PR the last time, sorry for that.\nThanks for your interest in our project and the contributions you made.\nRegarding this PR here, I agree with you. The code design was not that great, I think your's is much cleaner. I will look at this one more time and try to merge it.. I did merge it - so thanks @gukemanbu \n- I did not move the cancel method so it's easier to see the actual diff\n- for the Downloader tests, I actually kept the original idea: check if passing a nil url will call the completion with all nils. Also added a check for the createDownloaderOperationWithUrl: non-nil result. @dreampiggy I think this change is not a big one. We will need to merge master into 5.x anyway before the final release.\nBut if @gukemanbu is so kind to make a PR for the 5.x branch, that would be appreciated.. Hmm, I see only 6 files with conflict. I see d5b60c6 commit was a merge from master to 5.x which you made (many thanks for that) on Jul 18th. So there are only a handful of commits since then.. I will look into this merge.. Yeap. Thanks @dreampiggy for doing the merge. I was doing it myself, but that's ok.. @gukemanbu Thanks a lot for showing interest and contributing to SDWebImage! \nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. @gukemanbu did you see my invitation addressed to you above?. Awesome @gukemanbu. I sent you an invitation to the organization.. This will probably no longer apply with the 5.0 release, because we are moving all the FLAnimatedImage support to a dedicated repo . @kinarob Thanks a lot for showing interest and contributing to SDWebImage! Also noticed your Learning-SDWebImage repo.\nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time. \nI am working on writing down the expectations from contributors, but basically\n\nwe want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way. \n\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guide.. Great @kinarob. I just sent you an invite to the org.. \ud83d\udc4d \nI am back now, will be picking up the remaining pieces for 5.x.. \ud83d\udc4d . \ud83d\udc4d . @tjcsr thanks for your interest in our project. I kindly ask that you fill in the info in the issue template (table above). Also, can you provide a stack trace for the crash? Does it crash constantly? Can you reproduce it in a small demo project?. Closing due to lack of response and more info. Please reopen if it's still an issue.. @attheodo @huanghe810229530 we need to see what types and sizes of images do you deal with. There are some things we can do to handle large images (that cause those OOM issues) - see similar OOM issues.. Closing per lack of response. Feel free to reopen/continue the conversation if still applicable.. @lohenyumnam it depends on the HTTP headers of the response as well. If the server providing the image returns Expires or similar headers, the system may calculate the image needs to be re-downloaded. We can inspect those flags if you provide some test image, otherwise, you need to inspect them yourself. My assumption is this is a setup problem on your server.. @lohenyumnam feel free to reopen or just continue the conversation, I am curious if we can figure it out. Ok. I will go ahead and release 4.4.2. 4.4.2 is now available via CocoaPods. \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d . obj-c\nkPOSIXErrorENOSPC             = 100028, /* No space left on device */\nThis is a standard system error. As @dreampiggy said, we can just surface this error, we can't control the conditions under which this error occurs.. Per latest comments, closing.. @hejinggen the stack trace doesn't show any SDWebImage code.\nCan you reproduce this crash easily? Can you setup a demo project (simple) where it's reproducible?. Closing due to lack of response. @hejinggen feel free to reopen if you have more info.. \ud83d\udc4d . @dreampiggy what's the status with this PR? Does it still apply? If so, you can rebase it and then I can review. @dreampiggy I merged #2390 and #2391 . @zhongwuzw I would not rely on NSString to always allocate memory, as the way strings are used, reused and allocated into global access memory is not totally known. I would feel better using another class, like NSNumber or NSData. Ok, I just saw 4.4.2 release. Let's bring it there.. I agree with @dreampiggy's proposal here. @zhongwuzw you have proved your worth here.\n@rs can we add @zhongwuzw as a collaborator?. Appreciate it, @rs . Welcome to the team @zhongwuzw. Seems like you have access to the project, I've also added you to README - Collaborators section. @zhongwuzw as a global rule, I kindly ask you (and the other contributors) not to merge our own PR's. I know in this case I had already approved the PR, but I think it's cleaner and safer that at least another member reviews any change before it's merged.\nSometimes, to move things faster, we are tempted to take shortcuts (like my case with f8fe886 committed directly on the 5.x branch), so we need each other to remind us we can do better :). @dreampiggy the ideal solution is a private header, but that's a bit complicated (with Carthage and CocoaPods and all). I would just prefix to SD_LOCK. @x2rider yes, that is what we are saying. Can you try it out and let us know?. Closing, @x2rider feel free to continue the conversation/reopen.. @dreampiggy this looks good, except for a small CI issue which I am correcting now.\nOne thing I noticed, there are some differences between the FLAnimatedImageView+WebCache files from this repo and the ones from (SDWebImageFLPlugin)[https://github.com/SDWebImage/SDWebImageFLPlugin]. We should probably update this repo with the latest changes. \n\nHowever, we should keep a way for our 4.x user who already use FLAnimatedImage deeply. So we provide a plugin for SDWebImage 5.x. The code which contribute to the master branch or the issue will also be transfered there. Let's start doing it.\n\nI don't think we need to do anything here. The 4.x users still have the 4.x code with FLAnimatedImage support. 5.x users will just need to add SDWebImageFLPlugin into their Podfile.. @dreampiggy I've imported the small changes from the main repo to the SDWebImageFLPlugin one: b45963b. I'll go ahead and merge this PR.. @dreampiggy I just enabled Travis CI for SDWebImageFLPlugin and SDWebImagePhotosPlugin.\nIndeed, we need to write the Readme for those projects.\nWhat commits do you mean were lost?. Got it. Thanks.. Looks good to me. @dreampiggy ? @mythodeia @skyline75489 ?. Good idea @dreampiggy . @dreampiggy I agree with this. We wanted to improve things with #2047 but it didn't work out as expected. No problem with that :) we still need to keep trying. @halilyuce can you provide a simple demo project where the issue is 100% reproducible?\nFrom past experience with similar issues, it's probably a problem within your code, but let's make sure. Closing based on the last comment.. Guys, what is the plan here? What is the next move?. @yunjinghui123 please see similar issues marked with OOM label\nBasically, if you are decoding big images, the app will run out of memory. You need to stop de decompression like instructed above, or use our options for scaling down large images to smaller ones.. In my opinion, the current proposal will only complicate our already far-from-being-simple logic there. Let's look into the problem with more eyes, maybe we can find a simpler solution.\nCC @mythodeia @skyline75489 guys what do you think?. Great discussion here guys. Indeed, FLAnimatedImage brought a number of problems (especially due to its architecture), but I think we had to try that so we could learn how to do it properly :) This is me saying a bad decision is still a step forward :)\nNow I agree about us having to fix things in a way for 4.x. I will take a look over this weekend, maybe I have some other idea. @zhongwuzw your contribution here is appreciated. https://github.com/Flipboard/FLAnimatedImage/issues/207 check out this issue. I can't see an easy way out. Let's decide together. We can:\n- just merge this PR for 4.x and be done with it. But I would not port any of this to 5.x. I'm not happy with this because this new component can have issues, makes code harder to read and debug. I recently noticed that people use all our versions, not necessarily the latest ones, so I would be careful, we may need to maintain 4.x for a while.\n- leave things as they are and blame FLAnimatedImage :)) not that great option\n- I'm open to other options. @zhongwuzw @dreampiggy I have decided not to wait anymore. I merged #2441 since it was the one with fewer changes, easier to review. \n@zhongwuzw please create another PR with only the fixes you mentioned, preserving backwards compatibility.\nI will wait till tomorrow, then release 4.4.3 - I just can't wait anymore :)\nThen merge master into 5.x and push for a release there.. @zhongwuzw please understand my reasoning:\n- your PR had quite a few changes and it was harder to follow, that is why I choose to merge #2441 that was just using the group param\n- please port your fixes to a new PR, on top of the latest master, so I can see exactly what you are trying to fix. For example the if [url isEqual:sstrongSelf.sd_imageURL] can be used for all our image categories (UIView+WebCache) so we avoid setting wrong images.. @zhongwuzw hey man, don't take it personal :) We all definitely want to fix the issues. Just keep going. @zhongwuzw any progress with that PR? I am waiting for that before I release 4.4.3. Can I help you with this?. Thanks @zhongwuzw - 2 of them are already merged. Let's see about #2528 . @dreampiggy please review and merge. I thought the diagram you created was very good for a high level overview of our architecture, so I added it as well.\nI mean this one\n. Here are the new diagrams (so it's easy for the review):\nClass Diagram\n\nSequence Diagram\n. CC @zhongwuzw @mythodeia @skyline75489 . Actually, from the one big class diagram, created several smaller ones:\n- still one overall class diagram, but that doesn't list any attributes, methods\n- dedicated diagrams for each section (containing a bigger level of detail)\n  - top level API (WebCache categories, Prefetcher, Manager)\n  - manager\n  - coders\n  - loader\n  - cache\nCreated a Docs/Diagrams folder.. I'm merging (was approved).. @zhongwuzw I agree we need to set the User-Agent. I would also consider the comment from @dreampiggy and actually make use of our existing features to do so. \nJust that we need this User-Agent configured properly for all our users. We can't expect them to do it. We only offer ways to alter this behavior, if they need that.. I've looked at this PR again. Guys, I think an API like requestModifier is too advanced for the users that simply use our UIImageView (or similar) categories. I see AFNetworking also sets the User-Agent in the same way, so I say we do the same.\nThis is not a case where some users want some custom behaviour. From my point of view, this is the User-Agent set for each request of all our users, so we need to set it properly.\nThe only feature I say we could add (but it's just nice to have) is another field in the DownloaderConfig that allows passing in the User-Agent.. You are right guys, I forgot about setValue:forHTTPHeader:. That is sufficient for the users to customize. So we just need to calculate the User-Agent for the default case, which is most of the users (that will never deal with that). Basically this PR + the minor change request by @dreampiggy . I see no reason to keep this un-merged. Good job @zhongwuzw . @AmeerChand clearing the cache does not set the images of the image views to nil.\nIf the UI elements already have a UIImage stored, they will exist until reload.\nAre you saying that even new cells are properly loading the images? Then we need to check the memory cache.\nPlease fill in the issue template - I added it back as it was originally when you created the issue. Closing due to lack of response. @AmeerChand feel free to reopen/continue the conversation. This is duplicate of #2410 . @dreampiggy this is not the case of changing some APIs - which indeed are subject to reading the migration guide and updating the consumer code.\nIn this case, I think most users will not become aware that the cache path has changed. It is not a big issue since we will just re-download everything, but I prefer we do the migration. It's the right approach for any storage upgrade. If you upgrade a storage (let's say CoreData), you don't expect the user to handle all the migration, you do as much as possible yourself under the hood. Especially here where we will just keep that folder for no usage, just taking up space.. - agree that this migration procedure should be limited to SDDiskCache\n- we need to find a way to easily check and start the migration only then\n- any strong storage API needs to handle data format upgrade/migration, so I propose:\n  - adding migrateCacheFromCachePath:toCachePath: method to SDDiskCache protocol and implement it in our SDDiskCache class\n  - call that method from SDImageCache only if the com.hackemist.SDWebImageCache.default path exists. I think calling private methods is just a bad practice (Apple discourages this) and error prone.\nWe can always create a private category over a class that we use internally, but do not expose through our installations. But that is just not needed. We can expose this method on SDDiskCache, no problem in it being available.. I just merged #2417 so closing this PR. Thanks @zhongwuzw for driving this conversation, it's great to have the migration code in place.. @dreampiggy merge it. If there are any other changes, we can make another PR.. Let's move things up. I have taken another look at this PR and #2412 and decided to merge this one. They are pretty much the same, with the difference this one looks a bit simpler.\n@zhongwuzw feel free to add to the changes here by making a PR on top of this (if your comments about edge cases are relevant).. @SamboVisal thanks for taking the time do describe the issue. We had similar issues in the past, usually because the iOS system cannot handle decompressing of many images at once, due to the memory spike that causes an out-of-memory crash. You can look at similar issues here: https://github.com/rs/SDWebImage/search?q=Terminated+due+to+memory+issue&type=Issues\nOne thing you can try is disabling the decompression:\nobjective-c\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\nAlso check out these points about reducing the memory footprint: https://github.com/rs/SDWebImage/issues/2252#issuecomment-375891085\nOne thing I recommend is just running the app through instruments and inspecting the memory.. @SamboVisal regarding the other issue, it would have been ideal to have a separate issue. But I can respond here: we also had similar issues: https://github.com/rs/SDWebImage/search?q=wrong+image&unscoped_q=wrong+image&type=Issues\nI suggest you take a try with this suggestion: https://github.com/rs/SDWebImage/issues/968#issuecomment-64246783. @fschaus thanks for the detailed write-up, we will look into this issue in detail.\nFor now, I think it's a good idea to move your scenario to a separate issue, to keep the conversation clean. I don't think it's the exact same issue as the one in the description.. Moved @fschaus conversation to #2448. @SamboVisal can we close this issue now? Did you get what you needed?. @hovven Thanks for taking interest in our project and reporting this issue. \nI have re-added the template info to the description of this issue. Please fill in this info, it is important for us to know this.. Closing due to lack of response. @hovven feel free to reopen.. Thanks you guys for following up on this, indeed I would like to see a url that reproduces this issue, since it is something we should fix (if reproducible).. @rushilMethsof I have re-added the issue template info (which is very important) to the issue description. Please fill in the info there.. Then what can we do next? @rushilMethsof can you debug and see what is happening? If the request goes through? If we get a response?. Closing due to lack of response. @rushilMethsof feel free to reopen if you are willing to help us reproduce and fix the issue.. Good point @zhongwuzw, I've also noticed this but didn't act upon it, my bad.\nWe need to figure out a list and then Olivier can set them. Let's look at similar projects and their topics:\n- Nuke uses: cache, image, swift, webp, gif, progressive-jpegs\n- Haneke and HanekeSwift: no topics\n- FLAnimatedImage: no topics\n- PINCache: carthage, cocoapods, objective-c, ios, cache\n- Alamofire: networking, urlsession, urlrequest, httpurlresponse, request, response, swift, xcode, certificate-pinning, public-key-pinning, parameter-encoding, alamofire, cocoapods, carthage, swift-package-manager\nSo my proposals are:\n- macos, ios, watchos, tvos\n- image, jpg, jpeg, png, gif, webp\n- cache\n- objective-c, swift\n- cocoapods, carthage. We will need this link when we ask Olivier to set the topics (once agreed): https://help.github.com/articles/classifying-your-repository-with-topics/. @dreampiggy do you agree with the list above?. Alamofire has 15 topics, I also proposed 15, I guess that should work. All those topics are beneficial from a SEO point of view, since they will make our project even more easy to discover.. I reviewed the list a bit and I think we don't need jpg since we have jpeg.\nI keep the proposal for 14 topics: macos, ios, watchos, tvos, image, jpeg, png, gif, webp, cache, objective-c, swift, cocoapods, carthage.\n@rs please note our conversation here, do you think adding those topics to the project is a good idea? If so, can you please do it? You're the only one with permissions.. Thank you @rs.. Thanks @zhongwuzw . @zhongwuzw \n- I think having someone who is not an iOS dedicated developer in our team is very valuable, as valuable as having people like me that do only iOS development. @dreampiggy is also using more technologies than iOS. This only increases the areas where we get inspired from.\n- those are not trivial contributions, so you don't need to stop anything. As you can see, we will discuss each and every one of them separately. My suggestion is instead of doing the work (the PR), create an issue first and we can discuss there, so you code only after we all agreed to move forward. That should save you some time.\n- I think we all had contributions to open source that were just not merged in. That is not ideal, but should not stop the contributions from coming :) I think is super important how the maintainers explain why they can't/won't merge and this is an area where we can all improve. If we just reject people's contributions, they will end up not making them. You @zhongwuzw are already a member of our team, but we will use your example here and try to better communicate to all contributors what contributions are we willing to get (most of them of course) - that is why I opened #2416 . Regarding this particular case (issue), I always coded by this code \n\nEarly optimisations are the root of all evil\n\n:)) joke aside, the idea is that if a piece of code looks like not performant, we need to measure first. Any change is a potential break of functionality and we want to use our time best. From past experience, some code that get's called a few hundred times per app session is not that probable to have a big performance impact. Nevertheless, we need to always measure.. > @zhongwuzw @bpoplauschi I don't means anything offensive. \ud83d\ude05 I just comment about the PR's changes...(I'm not a serious people as you think :))\nSame for me :). Awesome. @oceanfive thanks for coming back to us with this crash.\nFrom what I can see, this image is a quite large one: 3024x4032 3.9 MB of compressed jpeg, which means when decompressing in the memory, the size will be quite large (we can calculate). My assumption is that when decompressing, the device runs out of memory, especially since in case of progressive download, we will decompress and create an image for each chunk of data we receive.\nYou can try disabling the decompression, see if this works.\nobjective-c\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];. Closing due to lack of response. @oceanfive feel free to reopen and we can continue the conversation.. @SamboVisal if you are using the 4.x versions of SDWebImage, then you would need to call this before anything - when the app starts for example\nobjective-c\nNSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];\n// do change the configuration as you want.\nconfiguration.waitsForConnectivity = YES;\n[[SDWebImageDownloader sharedDownloader] createNewSessionWithConfiguration:configuration];. Since we don't have this feature and neither does NSURLSession before iOS 11, you need to built it on your own: I would try using Reachability, mark the images not downloaded (in an array of urls for example) and just retry when the connection is back on. Or even don't start downloading if there is no connection.. @ToLengSon thanks for reaching out regarding an issue. Now it's important for us to understand your context that you fill in the template info @dreampiggy mentioned above. I added it back to the issue description, so please fill in those details.\nFor your particular issue, can you reproduce this with our demo? Do you have a url of a webp image you can share that is good to reproduce this issue?. Makes sense @zhongwuzw.. Related to #2415 . Should we make the new method\nobjective-c\n- (void)callProgressBlocksWithReceivedSize:(NSInteger)receivedSize\n                              expectedSize:(NSInteger)expectedSize\n                                       url:(nullable NSURL*)url {\n  for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) {\n    progressBlock(receivedSize, expectedSize, url);\n  }\n}\nWe could then call it from all places instead of just 2.\nJust asking.\nFrom a performance POV, it's less performant to add another function call to the stack.. @mthole very good catch. First of all, I made a mistake with publishing the 1.0.0 release, as \"tag\": \"v0.6.1\". I will correct that.\nI think that is causing the inconsistency, because otherwise CocoaPods should just know SDWebImage supports only 0.x versions and not upgrade to 1.0.0. I created https://github.com/CocoaPods/Specs/pull/14381 to fix the issue. Great, thanks @mthole for sharing. I will still push to fix the latest libwebp podspec.. I will close this issue now. @dreampiggy I am one of the owners of pod trunk libwebp. \n```\npod trunk info libwebp\nlibwebp\n    - Versions:\n      - 0.3.0-rc7 (2014-05-19 21:52:10 UTC)\n      - 0.3.1 (2014-05-19 21:59:26 UTC)\n      - 0.4.0 (2014-05-19 22:02:33 UTC)\n      - 0.4.1 (2014-08-08 15:06:06 UTC)\n      - 0.4.2 (2014-11-04 08:59:32 UTC)\n      - 0.4.3 (2015-03-17 13:26:28 UTC)\n      - 0.4.4 (2016-01-18 15:10:52 UTC)\n      - 0.5.0 (2016-01-18 15:15:46 UTC)\n      - 0.5.1 (2016-09-29 15:21:39 UTC)\n      - 0.5.2 (2017-05-05 19:01:52 UTC)\n      - 0.6.0 (2017-05-05 19:15:29 UTC)\n      - 0.6.1 (2018-04-04 08:07:07 UTC)\n      - 1.0.0 (2018-07-31 07:47:06 UTC)\n    - Owners:\n      - Bogdan Poplauschi bpoplauschi@gmail.com\n      - Shahar Hadas shaharhd@gmail.com\n``\nBut I don't know how to delete and resubmit. That is why I created a PR to the Specs repo. I'm waiting for someone on their team to advise.. Actually, now I saw they addedpod trunk delete. I just tried it and it worked. :) cool. This option was not always around, or at least I didn't see it.\nUploading the correct 1.0.0 version. Thanks @dreampiggy . Corrected version 1.0.0 is published.\n@mthole we will update our dependencies to that, probably for version 5.0. But if you are using an older version of SDWebImage, it will pick up the compatible version of libwebp - in fact, this is CocoaPods's job.. @zhongwuzw I would like to ask you one thing. I prefer using theMerge pull request - Create a merge commit` option when merging a PR.\nThis is so we have the full history of the contributor branch, commits and then a single commit showing exactly what was merged. If you use squash or rebase, It's more difficult for me/us to track the history as well as follow the contributors steps for each PR.\nWhat do you think?\n\n. What I usually do/did in cases like this is:\n- create a branch for the feature\n- work there, create as many commits\n- open a PR at any time, which is basically just an intention to merge that branch into another branch (in our case master)\n- when the work is done and I get approval from the others involved, I would go ahead and locally do\ngit rebase -i where I would squash everything into one commit, change the commit message, ...\n- then ask one of the people who accepted to hit merge\n- this way, the history is simple and readable\n\n. Good job. Can't we just add if canDecodeFromHEICFormat to the test?. Thanks @dreampiggy . @turkeyaa I assume you found your answer. If not, feel free to reopen the issue and let us organize it a bit by providing the issue template info - I added the template, just fill in. Sounds good @dreampiggy - I wanted to merge myself but left it open for potential reviews. Guys, I've also had to do some searching about this API. Indeed, it's been only synchronous since ever, but some people might use it. I would just accept @dreampiggy's PR since it would be a nice addition to have the asynchronous version of this API.\nIn the past, when we removed some APIs, people started complaining.. @dreampiggy I don't agree about removing the API. I think there are still people using it. The logic you saw there was discussed with one of those users in a PR (I can search for it). It is doing the best animation with the images available, which is ok.\nBut we can give it a try: removing the API entirely and see what the feedback is.\n. Per #2459 decided to drop this APIs. @dreampiggy @zhongwuzw seems like #2441 and #2404 are pretty similar. Let's decide which one to merge and move forward. Good job guys - I'm happy with both of them. @dreampiggy @zhongwuzw I can't follow all the discussion here, can you guys decide how to move forward?\nI see @zhongwuzw has listed some additional problems with master that I assume his PR fixes:\n\nCurrently in master, we have some bugs, I'll list the bugs to review the code:\n- Created FLAnimatedImage in main thread.\n- FLAnimatedImageView call setImage multiple times, leads to GIF refresh multiple times in some cases.\n- Always call disk search if imageData is nil.\n- GCD always retain FLAnimatedImageView.\n- When FLAnimatedImageView reuse, e.x. UICollectionView, would leads to wrong image.\n- sd_cacheFLAnimatedImage leads to GIF invalid.\n\n@dreampiggy what do you think about those?. @yjh1313 what is the reason for closing this PR? You seem interested in the project, please detail. Can we help your contribution in any way?. Oh, I see you also created and closed #2443 and #2444. Please let us know if you need assistance.\nThe issue in the description sounds valid.. @yjh1313 did you try running the tests locally?. Guys, what is the action to take here? Just close this PR?\n@zhongwuzw @mythodeia @skyline75489 what do you think?. Agree with @dreampiggy . I don't see GitHub activity for a long period on @yjh1313 account - we might need to do the changes on our own :). Replaced by #2516 - closing. @YYDD indeed the case you described can happen, but I think we did take care of documentation (code comments, examples). People will need to read the way an API works, since we added sd_setImageWithURL: as a convenience for people who don't care about the completion. It's actually a quite old API so I don't see a reason to change/remove it.. @bradmuzza thanks for your interest in our project and creating an issue.\nRegarding the situation you are describing, sounds very weird. Can you create a small demo project where this issue replicates and share it with us?. Closing due to lack of response. @bradmuzza feel free to reopen and continue the conversation. Closing per lack of response. @abhijith2smb feel free to reopen if you can continue the conversation.. @dreampiggy responded:\n@fschaus Hi. The SDWebImage 5.x, change that global control level shouldDecompress, to the SDWebImageOptions level, which allow you to control each image request instead of a global one (Because some small images, it's no need to trun off that force decode feature, which cause a frame rate drop). See the related PR for this #2283 #1927 \nYou can also find it on the migration guide here : 5.0-Migration-guide. The correspond options, was moved from cache/loader-level , to each image request level.\nYou should now use like this to disable the force decode feature:\nswift\nimageView.sd_setImage(with: url, placeholderImage: nil, options: [.avoidDecodeImage])\nAnd also, could I ask the issue why cause your application out of memory ? Did you setup a maxmium cache size SDImageCacheConfig.maxMemoryCost or maxMemoryCount  to avoid cache too much of image in memory ? Did you try to load animation GIF on normal UIImageView ? (You can disable animation suppoert, by using firstFrameOnly options for each image request, or totally remove SDImageGIFCoder from coders list) . @fschaus responded:\nThanks for the input, I should have looked in the migration guide.\nSo I profiled a bunch of tests on my app to get to the bottom of this and see really weird behavior. See the link below for the details:\n\u2022 My debug version runs as expected - once loaded my app allocates ~70Mb in memory (which is in line with what I saw previously when I was using KF). After a bit of usage (message loading + images) it goes up to 120-13Mb, rarely above (maxCache works) and flushes itself once the app enters background.\n\u2022 My release/ prod scheme however shots straight to 160Mb at load, quickly goes to 300Mb (or more if I keep loading but then more often than not crashes) which doesn't respect my cache limit. If I don't turn off decoding the memory doesn't get flushed once the app enters the background (it decoding is off but still retains more than expected at 120-140Mb vs. 20-30Mb w/ my debug scheme).\n\u2022 I use 5.0 beta 2, with a mix of fixed images and gifs (the initial loading screens only have fixed images). I also tested with UIImageView and AnimatedImgView but that makes no difference\n\u2022 I also used Kingfisher to compare and its behavior with my prod release was similar to SDWI with my debug scheme. In all cases I use the \"default\" manager settings (except decode that I toggle on/ off for one of my use case).\nMy detailed tests are here: https://drive.google.com/open?id=1HIRHttQYn1NIJr0Omb9BG2FLOeWa8E_9\nI am not deep enough in this library nor in iOS image frameworks to understand how they differ between the debug and the release scheme but I feel like the culprit is likely there (given the vastly different behavior observed).\nI really like SDWebImg as it is the only library with a strong gif manager which allows me to have a single cache/ image processor for PGN & Gifs (I had a weird convoluted kingfisher + FLAnimatedImg setup before) and like how more flexbile SDWebImg is (e.g., add fade, progress bar, etc.) so really hope we can get to the bottom of this together J\nThanks!\nFrancois. @lianglx thanks for your interest in our project.\nI assume you opened up this PR by mistake :) since we are not ready to merge the 5.x branch into master yet :). Closing due to lack of response. @zhoupeiyu feel free to reopen and share with us details about your issue.. Good fix @zhongwuzw . Looks good. Thanks @zhongwuzw . @edenman thanks for your interest in our project.\nIndeed, we are keeping all the failed urls under failedURLs so we can retry without causing a the completion to keep refiring. This was a feature added a few versions ago.\nBut in your case, I don't see this url being added to the failedURLs array.\nI've used the 5.x branch and the http://not_a_domain/lazy_bear.jpg url for testing.\nHere's the code where we decide if we should add to the array:\nobjective-c\nshouldBlockFailedURL = (error.code != NSURLErrorNotConnectedToInternet\n                     && error.code != NSURLErrorCancelled\n                     && error.code != NSURLErrorTimedOut\n                     && error.code != NSURLErrorInternationalRoamingOff\n                     && error.code != NSURLErrorDataNotAllowed\n                     && error.code != NSURLErrorCannotFindHost\n                     && error.code != NSURLErrorCannotConnectToHost\n                     && error.code != NSURLErrorNetworkConnectionLost);\nAnd for the URL you provided, the error code is -1003 aka NSURLErrorCannotFindHost.\nSo the shouldBlockFailedURL is false and thus we don't mark the URL as failed.\nWith the demo I tried, the completion was firing every time. Can you try your demo with the latest 5.x branch?\nPS: using .retryFailed doesn't make a difference here, as the url is not added to the failedURLs array. Thanks for the info @edenman.\n- our 5.0.0 is still in beta, so I would hold off just a bit to using it in production\n- the code -1022 aka NSURLErrorAppTransportSecurityRequiresSecureConnection. Any chance your demo app doesn't have NSAllowsArbitraryLoads set to YES in the plist? Because the url is an http one.\n- I will try to debug 4.4.2 and if I can reproduce this issue, I will fix in in 4.4.3. I've tried debugging the latest master and I can't reproduce the issue. I think the problem is your app doesn't allow http sessions. From my point of view, when receiving this kind of error we don't need to retry, since the problem will not go away :) I think the code is functioning correctly. Can you try allowing http connections from your demo and retry?. @edenman thanks for bearing with me on this one :)\nIndeed, your commit helps, but the problem is not in our code:\n- SDWebImagePrefetcher has a property completionBlock which is overwritten each time you call prefetchURLs\n- in the case of your demo, since the 1st completion block would not finish and call the 2nd one, the property will end up set incorrectly - basically the 1st block remains set and then gets deallocated, so when the 2nd call reaches the completion call, it is nil\nobjective-c\nif (self.completionBlock) {\n    self.completionBlock(self.finishedCount, self.skippedCount);\n    self.completionBlock = nil;\n}\n- by making a simple change to your demo, I was able to get the completions keep going (just dispatch the next call to prefetch on the main queue so this completion block can end\nswift\nprivate func prefetch() {\n  NSLog(\"OMG called prefetch\")\n  let bogusURL = URL(string: \"https://not_a_domain/lazy_bear.jpg\")!\n  SDWebImagePrefetcher.shared().prefetchURLs([bogusURL], progress: nil, completed: { numFinished, numSkipped in\n    NSLog(\"OMG finished \\(numFinished) skipped \\(numSkipped)\")\n    DispatchQueue.main.async {\n      self.prefetch()\n    }\n  })\n}. Addition to the previous comment:\n- the system will cache the blocks, so the completion defined on the prefetchURLs in the ViewController class will always have the same address\n- because of this, when the 2nd call is initiated, the completion callback for the 1st call is not done. when it is done, it will get set to nil therefore impacting the 2nd call call.. thanks @edenman and @dreampiggy.\nFrom the doc point of view, I think there are still people who can and will successfully use the 4.x SDWebImagePrefetcher.shared(). @anks62 can you provide more details about this problem? Are you using any of the SDWebImage code into this conversion?\nPlease fill in the issue template info (see platform, versions, ...). @anks62 glad that you found the issue, don't worry :)\nYou can contact me directly here for any other topics.. @anks62 how is this case related to SDWebImage?. @anks62 sorry but I do not understand properly your question. I strongly advise you to go to a forum like StackOverflow and post your question there, there are more chances on getting a proper response.. \ud83d\udc4d . @voidless thanks for your interest in our project.\nIndeed, you have touched a pretty big subject, so I will share some of my experience with this.\nThe issue\n\nusing CocoaPods + use_frameworks! means you will have quite a few dynamic frameworks linked to your app (depending on how many pods). Apple recommends a maximum of 6 dynamic frameworks per app for a decent app load time (see WWDC16 - Optimizing App Startup Time ).\nin the desktop world, dynamic frameworks were created so that they can be loaded only when needed (hence the dynamic term), but the iOS loader is very limited in this area. There is only dl_open method which is pretty basic. For most of us (iOS developers), all those dynamic libraries will be loaded at start time, which makes the app startup time a problem.\na lot of details about this subject can be found from this thread on Artsy (one great open source app): https://github.com/artsy/eigen/issues/586\nup until CocoaPods 1.4, building Swift code required the use_frameworks! option, as Swift could not have been built as static. From CP 1.4, using this static_framework option added to a podspec allows that pod to be built as a static framework.\nCP 1.5 adds the option to build Swift code or a mix of Swift+ObjC code as a static library (so without use_frameworks!)\nbasically, making almost every pod static is our best option for app startup performance\n\nOther OS projects\n\nI've ran a search through CocoaPods/Specs to see which projects have set the static_framework flag: https://github.com/CocoaPods/Specs/search?p=1&q=static_framework&unscoped_q=static_framework\nI don't see any big name there, so I'm not sure we should do it\n\nAlternatives to static_framework\n\nusing CP 1.5 or later you can just build everything as static libraries\na hack I came up with a while ago using a pre_install hook to your Podfile, you can control which pod will be built as static framework and which will be dynamic framework: https://github.com/CocoaPods/CocoaPods/issues/7428#issuecomment-377864948\nI didn't like the idea of the pod author deciding if it's going to be static or not. That is up to decide for the ones using it, depending on the conditions. With the hack I used, you have control over which frameworks (if any need to) be dynamic\n\nIn conclusion, I would not merge this PR :). Closing, per latest comments.. Keeping the DO_NOT_MERGE label until review is done and we move the tests/demo to the dedicated project.. @dreampiggy I have attempted to create a Podfile for the demos and link SDWebImageWebPCoder. From my pov, this is not ideal. Referencing should work the other way around, only our more advanced components can link to the core one, not vice versa. Let's see how it goes. It's not building yet.. @dreampiggy It was not that difficult, just a few travis CI changes were needed.\nI think I managed to do most of the stuff I wanted on this PR. Ready for review/merge. Guys, here is my opinion:\n- this improvement does not come based on a real problem found by our users or us\n- I would love to get rid of the locks, but it seems (at least to me) we do need them for safety\n- the improvements would be smalls\n- this case if different from the one we discussed about autoreleasepools, since that was based on actual measurements and with big impact\n- I simply suggest we don't merge this PR\n- @zhongwuzw hope you keep putting up PRs :) you're doing great. Just that some of them might not be merged. Same for everyone here.. @dreampiggy do you agree?. This is great @zhongwuzw. Thanks for measuring and detailing. I want to merge this PR and make the same adjustments for 4.x. @dreampiggy I think the improvement on decoding is a different discussion than this one. These autoreleasepools will just help keep the allocations not spiking, which is great. I will merge this one and the one to master as well. We can discuss on other PRs/issues about other improvements.\nBut keep in mind we should just really close on the 5.0 release, we can't just keep adding stuff :) So join me on #2285 where I created a list of remaining things for a beta4 release. Let's keep this list minimal. We can always make other improvements in future versions without changing the API (no breaking changes).. @dreampiggy \n\nI think we'd better do something like ReactiveCocoa. That SDMapKitWebImage.framework add dependency of SDWebImage.framework. People who use MapKit should include both of two. If we don't add depdency, carthage user, for example, who add cartfile with a framework who dependentSDWebImage, will fail to build when your application use a SDMapKitWebImage.framework.\n\nThis is what I have done. SDMapKitWebImage contains only the MapKit code and it depends on SDWebImage. That way people can link only SDWebImage or both if they need the MapKit code.\nI could not implement the other option (have one framework with MapKit and another without) because they both need to be named SDWebImage.framework and then Carthage overwrites them when building.\n\nAnother solution (I don't know suitable or not), just move the MapKit code into another repo like plugin. Called SDWebImageMapKitPlugin. The SDWebImage/Core && SDWebImage/MapKit can also be removed. Keep the core framework clean. This can also make it easy for carthage user. (For cocoapods user they need to change podfile)\n\nI thought about this too, but I wanted to take the simplest approach. Creating a separate project just for 1 category over MKAnnotationView sounds like over-engineering to me.\nI am happy with the solution in this PR - of course, since it's mine :))\nJoke aside, I went for simplicity, same as Moya did. ReactiveCocoa also created a dedicated podspec for the MapKit part. I didn't want to do that so the CocoaPods people can still built everything into a single framework. The number of frameworks matters for performance (especially when they are dynamic). For Carthage, we can't do anything.. @dreampiggy @zhongwuzw @mythodeia please review and merge.. Guys I've made the name changes - should be good to merge now. Thanks guys. - I don't think doing work on the NSURLSession delegate queue is ok. That must remain available for network ops\n- I think letting the user control on which queue we decode is a bad idea, they should not need to know these details\n- I did like the idea of decoding on a dedicated queue. I do not like the idea of each download operation having another queue.\n- I think we should just use a single queue for all decoding, which is concurrent - multiple downloads at the same time could decode concurrently\n- about progressive decodes, I think we need a mechanism to cancel an existing progressive decode if we already have another batch of data. For this, NSOperation would work better.\n- I would try this:\n  - create a NSOperationQueue and use it from all the download operations. We could just create it in our SDWebImageDownloader and pass it to the operations.\n  - leaving maxConcurrentOperationCount to its default value means based on the system conditions, multiple operations can run at the same time\n  - when adding a progressive decoding operation (can simply be NSBlockOperation blockOperationWithBlock), we need to store it (as a download operation property) and when trying to add another progressive operation, first cancel the existing one. This way we can have only one progressive download decode at a time for a certain download.\nIdeas?. See #2480 per my comment. Reopen until we apply one of the fixes. Thanks @zhongwuzw - I noticed this issue a few days ago but had no idea which project caused it and I didn't have the time to investigate.. @netgfx no idea. I recommend you do a visual debug (using Xcode) and see what the composition of the layers is.. Guys, what is the plan with this PR? You two have to agree upon the action to take here :) I can't follow up. From what I remember, having private headers is a bit of extra work, especially since we support so many integration methods. If any of you have the time to work on that, I am not against it, but I would keep them all public for simplicity.\nRegarding those macros, I think our modules like SDWebImageWebPCoder don't need to redefine them, but just use the ones from the core library, as it is a dependency.\nAnyway, with this rename, I think we are ok as a public interface.. \ud83d\udc4d . @yidongAndOther please let us know if you need any assistance. I don't understand what did you try to do here :) 5.x is not yet ready do be merged into master.. @yidongAndOther please give more details about the issue you want to log here. What is the problem you are encountering?. @JKjiangnan Can you describe the issue you have in English?\nCC @dreampiggy @zhongwuzw for chinese :). The build fails because the pod lib lint fails on Xcode 10 - not related to this PR, but I will fix it.\nEDIT: Actually it's a problem from CocoaPods because the EXPANDED_CODE_SIGN_IDENTITY is missing (see https://github.com/CocoaPods/CocoaPods/pull/7720 fixed in 1.6.0 beta) - changing to use the beta version. @dreampiggy \n- this PR keeps compatibility with the OS versions, but because of one setting (SWIFT_VERSION=4.2) it requires Xcode 10. I agree we can keep this 4.x compatibility with older versions and move this PR to 5.x\n- I also want to push and release 5.0. I agree. Let's look again at the list of remaining things for 5.0 and just get it out. Agree @dreampiggy it is taking too long. I will change this PR for 5.x branch and create another one for master so we can support Xcode 10 and iOS 12 in 4.4.3 - see #2495 . I will: rebase on top of 5.x, then change the branch target here. Build passes. You can review again guys. This time if against the 5.x branch.. @dreampiggy do you have second thoughts about merging this? :)\n. Then please merge it, I don't want to merge my own PR :). Thank you sir. @shoaibnomani - yes. See #2494 - not merged yet.. Guys, I don't think we need to do anything here. Let me explain:\n- the project already builds fine with Xcode 7 to Xcode 10\n- we have no Swift code, so again no changes needed for Swift 4.2\n- iOS 12 also works.\nAbout the #2494 PR I linked, that will actually be addressed into our 5.0 release.. @ZNBmm please describe the issue you are facing. Start by filling in all the info in the issue template.. @martin-key thanks for reporting this back to us.\nI'm not sure we need to change this setting, I think it would be sufficient for you to set the deployment target on your Xcode proj and in the Podfile platform :watchos, '3.0'. @martin-key please add any info you think is valuable. I am still convinced the deployment_target setting in each podspec is only used when the Podfile does not properly specify the deployment target via platform - see more details on the Podfile CocoaPods guide. @martin-key please try @dreampiggy 's suggestion above. Sounds good @martin-key. We will look more deeply into this issue. For now, I think the post_install hook is a good enough fix. Just dropping the watch 2.0 compatibility in a minor release may raise problems for the other users.. @zhongwuzw I took a look at this PR and the code from 5.x branch (and master) is odd to me.\nNot sure your fix is entirely correct.\nHere's how I see it:\n- when you want to create a background task you need to\n- 1 - create the task\n- 2 - register as background task: call Application beginBackgroundTaskWithExpirationHandler where the expiration handler will cancel the task and call endBackgroundTask\n- 3 - now 2 cases\n  - a - if the task is not finished and the app goes to background, the system will let it run. Only if reaching the maximum allowed time for a background task the system will call the expiration handler which basically ends the task\n  - b - if the task is finished and the app is still in foreground, we just need to call endBackgroundTask so the background task is unregistered. Otherwise, the app might be killed if going to background.\nFrom what I can see, you added this code in cancel method, which is not called when the task is done. I think we can call if from within done.\nAlso, I would refactor the background task code into a separate component.. CC @SDWebImage/collaborators . > @bpoplauschi Emm, seems you overlooked? \ud83d\ude02 I put it in reset method, not cancel.\n@zhongwuzw sorry, the diff page mislead me. reset is probably a very good place for this code, as we actually reset the background task :)\n\n. > @bpoplauschi You mean separate to two methods, one for start background task, another for end? \ud83e\udd14\n@zhongwuzw probably something like https://github.com/bradgmueller/CFABackgroundTask. @CocoaML thanks for reporting back to us.\nFirst of all, I have re-added the issue template info you have removed from the issue description. We need you to fill in the info in this table to we can better understand the conditions of your issue.\nSecondly, you are using another 3rd party code, so I think the best thing to do is just use Xcode profiler to see what is causing the memory grow.\nOne idea is to disable the FaceAware code and see if the issue still reproduces.\nI see you have set SDWebImageScaleDownLargeImages. If you are dealing with large images, that might cause the memory growth.\nYou can also try disabling the decompression and see if that takes care of the mem issue\nobjc\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\n[[[SDImageCache sharedImageCache] config] setShouldDecompressImages:NO];. @CocoaML what do you mean by\n\nI try to set the code. but it does not work.\n\nWhat doesn't work? Doesn't compile? Doesn't run? The issue still happens with this code?. @pengzhiqiang110 I have added back the issue template. Please fill in this info so we can better understand your issue.\n@zhongwuzw @dreampiggy. From what I see, the keys have strong references, where the values are weak.\nobjc\nself.weakCache = [[NSMapTable alloc] initWithKeyOptions:NSPointerFunctionsStrongMemory valueOptions:NSPointerFunctionsWeakMemory capacity:0];\nAny chance the UIImage stored in the NSMapTable is deallocated and then sent a message?. @zhongwuzw we can try this idea :). Should we reopen?. @vaibhavsingla1996 thanks for taking the time to create the issue, but please start by filling in the info required in the table above (Issue Info).\nThe current release 4.x does not support custom handling of each cache type, but since version 5.0 (currently in beta), one can create a custom SDImageCache implementation and do whatever inside.. Duplicate of #2508 . @tshirt101 what is the update/fix you are making here? is it just that innocent space? :). I also done the other changes. Thanks guys for merging. @zhongwuzw @dreampiggy what a conversation :) took me a while to follow through.\nI have to agree with @zhongwuzw on this (at least more than 50% :)) ):\n- first of all, atomic is not a strong mechanism for thread safety, as stated above. Details on a SO discussion\n- on master (4.x releases) we used to have a semaphore in place, no problems were reported there. Let's use the safe approach, keep using the semaphore and lock the get and set parts of this operation. Added 6c6d848 with 2 unit tests checking the two cases discussed in #2444. @zhongwuzw indeed, we need some Swift demo, probably added to the Examples folder.. @zhongwuzw the solution we have on master is a bit weird to me. Based on Apple Docs, the @synchronized requires an object to create the lock, not sure what happens when used with a class name like we do @synchronized(NSURLCache), I haven't found similar uses.\nBut the fact that we don't crash anymore / or the users are not reporting makes me sceptic about removing that code. If you want my opinion, I would just leave it be.\nCC @SDWebImage/collaborators . PS: there are definite thread safety issues with NSURLCache.\nPer docs:\n\nThread Safety\nIn iOS 8 and later, and macOS 10.10 and later, NSURLCache is thread safe.\nAlthough NSURLCache instance methods can safely be called from multiple execution contexts at the same time, be aware that methods like cachedResponseForRequest: and storeCachedResponse:forRequest: have an unavoidable race condition when attempting to read or write responses for the same request.\nSubclasses of NSURLCache must implement overridden methods in such a thread safe manner.. @zhongwuzw I agree that we don't lock when writing, so it's pointless. Now I fully understand.\nHistorically, we kept having crashes due to race condition: some connection was writing data to NSURLCache and we were reading [NSURLCache cachedResponseForRequest:].\nA big improvement was made in commit e7bd5ab, where we reduced the number of calls to cachedResponseForRequest, but that was not a fix. As you said, we can't fix it without locking on the write operation as well as on the read.\nI think we could subclass NSURLCache and make our own thread safety implementation on top of the super methods. Then we can set the it NSURLCache.sharedURLCache = [OurURLCache new];. We don't care if there is a different instance passed in via the session param.\n\n\nI said the following, but I was wrong. Poor naming of local ivar with uppercase first letters URLCache made me think it was the Swift class name URLCache.\n\nthe solution we have on master is a bit weird to me. Based on Apple Docs, the @synchronized requires an object to create the lock, not sure what happens when used with a class name like we do @synchronized(NSURLCache), I haven't found similar uses.. What I had in mind is something like this\n```objective-c\n@interface SDThreadSafeURLCache()\n\n@property (nonatomic, strong, nonnull) dispatch_queue_t serialQueue;\n@end\n@implementation SDThreadSafeURLCache\n\n\n(instancetype)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(nullable NSString *)path {\n    if (self = [super initWithMemoryCapacity:memoryCapacity diskCapacity:diskCapacity diskPath:path]) {\n        _serialQueue = dispatch_queue_create(\"com.hackemist.SDThreadSafeURLCache\", DISPATCH_QUEUE_SERIAL);\n    }\n    return self;\n}\n\n\n(nullable NSCachedURLResponse )cachedResponseForRequest:(NSURLRequest )request {\n    __block NSCachedURLResponse *cachedResponse = nil;\n    dispatch_sync(self.serialQueue, ^{\n        cachedResponse = [super cachedResponseForRequest:request];\n    });\n    return cachedResponse;\n}\n\n\n(void)storeCachedResponse:(NSCachedURLResponse )cachedResponse forRequest:(NSURLRequest )request {\n    dispatch_sync(self.serialQueue, ^{\n        [super storeCachedResponse:cachedResponse forRequest:request];\n    });\n}\n\n\n(void)removeCachedResponseForRequest:(NSURLRequest *)request {\n    dispatch_sync(self.serialQueue, ^{\n        [super removeCachedResponseForRequest:request];\n    });\n}\n\n\n(NSString )defaultCachePath {\n    NSArray paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\n    return [[paths objectAtIndex:0] stringByAppendingPathComponent:@\"SDThreadSafeURLCache\"];\n}\n```\n\n\nand then just make sure we always use that:\nobjc\nSDWebImageDownloaderOperation\n- (nonnull instancetype)initWithRequest:(nullable NSURLRequest *)request\n                              inSession:(nullable NSURLSession *)session\n                                options:(SDWebImageDownloaderOptions)options\n                                context:(nullable SDWebImageContext *)context {\n    ...\n    if (![NSURLCache.sharedURLCache isMemberOfClass:[SDThreadSafeURLCache class]]) {\n        NSURLCache *oldCache = NSURLCache.sharedURLCache;\n        NSURLCache.sharedURLCache = [[SDThreadSafeURLCache alloc] initWithMemoryCapacity:oldCache.memoryCapacity diskCapacity:oldCache.diskCapacity diskPath:[SDThreadSafeURLCache defaultCachePath]];\n    }\n    if (session.configuration.URLCache && ![session.configuration.URLCache isMemberOfClass:[SDThreadSafeURLCache class]]) {\n        session.configuration.URLCache = NSURLCache.sharedURLCache;\n    }. @dreampiggy the issue is not fixed in our current code, it's only reduced because it's behind the SDWebImageDownloaderIgnoreCachedResponse flag.\nWe only added the synchronization for reading from NSURLCache. We can't add it for writing without changing the implementation of NSURLCache. The issue is a crash due to a race condition when one thread (network op) is trying to write to NSURLCache at the same time our own downloader operation is trying to read.. @lhnoah thanks for your contribution. I see you are interested in this project (you also created #2519). \nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time.\nI am working on writing down the expectations from contributors, but basically we want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way.\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guider.. Can we close the issue?. @kinarob can you detail how you found the cycle? What is using the Xcode inspectors?. I think @MagLiC is referring to the disk, not the memory cache. \nSee #2366 - I think that is the error you get when disk is full.. @jiangpengyun we appreciate the interest in this project and creating a PR, but we need to close it.\nAs @dreampiggy explained, we do need to share the schemes and therefore keep them in the git repo.\nAbout the workspace, I don't know what it is that needs fixing.\nFor the future, please create an issue first where we can discuss the potential problems and fixes before doing the work, that way we can all be efficient.. I will wait a few more hours on this, but I can release without it. Let me know. @robinmo thanks for taking an interest in our project. Please properly describe your issue and fill in the  info in the issue info table above, so we understand your situation.. It's released now. @michaeleisel just to throw another option on the table:\n- using a simple hack you can use_frameworks! but link them statically instead of dynamically. See https://github.com/CocoaPods/CocoaPods/issues/7428#issuecomment-377864948\nThat way you can build your dependencies as frameworks, but avoid paying the app startup cost of loading a lot of dynamic modules.. We can add something to the readme, but I'm afraid most people will be confused with that level of detail. For most app creators that use only a handful of pods, using dynamic frameworks is not bad. App startup performance is still good, as Apple invested heavily in improving the loader (around iOS 9.3 if I remember correctly). The app I'm currently working on had more than 40 dynamic frameworks linked to it and still pre-main time was around 1 second for a cold start and better for warm starts. That is not ideal, but it's an acceptable number for a regular app.\nI also think it's not this project's scope to go into the details of which install method to be preferred :) we try to support as many as possible and allow the users to choose. The dynamic vs static discussion is too big for us to handle, and there still isn't any silver bullet :)\nBut thanks for raising the issue, as it may help others by reading this conversation. @dreampiggy @zhongwuzw glad to see 4.4.3 released. I was caught up with other projects, but I am back to help again.\nWhat's your plan for the following period?. \ud83d\udc4d thanks for catching this. @tebriz159 thanks for you kind offer. Feel free to create a logo (note we have 2 versions of the logo):\n- the small version used as organizatio logo: \n\n- the larger version used as project logo: \nLets us know if you have any ideas for a new logo, it might be better than the one we have.\n. @tebriz159 I like the 1st one more. I think we should keep it smaller and avoid duplicating the \"SD\" part. Can we just use a more readable font for \"SD\" and keep it inside the semi-square (I assumed the first 2 letters are SD written in a custom font)? That way the \"WebImage\" text will follow and the whole logo is shorter.. @tebriz159 sorry for the late response. Those look very nice IMO.\nMy personal preference is for the 4th in the 1st column.\n\n@SDWebImage/collaborators other opinions?. Great @tebriz159, really appreciate this contribution.\nI think it would be ideal to release the new logo with the 5.0 release :). I've updated the 2 logos on the 5.x branch: https://github.com/SDWebImage/SDWebImage/tree/5.x\nWhen we release the 5.0 version, I will also update the Organization logo.. I have to agree with @rivera-ernesto. Usually, it's a better practice to check for completion blocks and allow people not passing one. Gives more flexibility. Better than enforcing someone to pass in an empty non-nil block.\n. @Gabro why do you consider this a misuse? completionBlock means giving back the control to the requester when the async operations is finished. If they decide that nothing needs to happen then, I think it's still a good use.\n. I understand that case. But we should think about most of the developers that are used the possibility to pass nil as a completionBlock, even for Apple APIs. I don't think we have a clear way to explain to them that they should be using the prefetcher in this case. \n. Then the NSAssert should print some kind of message like 'Please use the prefetcher if you just want to download the image...'\n. Thanks @Gabro \n. SDWebImagePrefetcher has a bigger purpose, it's supposed to prefetch sets of images, not a single image. The downloadImageWithURL: methods from SDWebImageManager are used to download and process a single image at a time. I think having both of them makes sense.\n. why the hardcoded 8 value instead of the CGImageGetBitsPerComponent(imageRef)?\n. from one pov is a workaround, but this solution fixes the issue, plus it assures we don't get into situations like this in the future, if other non-synchronized code is added. Synchronising the access to this resources would have a performance impact\n. we should check if the pathExtension exists, otherwise we might have an issue\n. please match our coding style\nif (...) {\n   ...\n} else {\n   ...\n}\n. according to our coding style, this should be\nif (!imageData) {\n    return;\n}\n. why this change?\n. why adding this shell script?\n. the code above is not optimal, I know. I think I should change it. We explicitly call diskImageDataBySearchingAllPathsForKey: that loads from disk and then call diskImageForKey: that also calls diskImageDataBySearchingAllPathsForKey: and transforms that into a UIImage. Too bad we don't have tuples like in Swift, we could just change the diskImageDataBySearchingAllPathsForKey: to return (UIImage , NSData ) \n. we should remove dealloc because it's empty\n. we should add a comment to explain this nil as delegateQueue. According to the docs: \n\nAn operation queue for scheduling the delegate calls and completion handlers. The queue need not be a serial queue. If nil, the session creates a serial operation queue for performing all delegate method calls and completion handler calls.\n. I don't think we need all those methods, we can just refactor the old storeImageDataToDisk:forKey: into storeImageDataToDisk:forKey:error:.\nThe proper way of using dependency injection for the NSFileManager is creating a new initializer for SDImageCache that allows passing the file manager as well.. Why do you say we don't want to use NS_ASSUME_NONNULL_BEGIN? It just takes care of repetitive code.. @dreampiggy this will not create a new instance, it will just return the first coder that is progressive and can decode this data. . @dreampiggy I don't really like the API coderWithCondition. Since SDWebImageCodersManager exposes all the coders via an array, we don't need that new API.\nI suggest that this \"reuse coder logic\" is limited to this case only. I like storing the progressive coder inside the downloader operation.\nBut we can do that by simply looping through the list of coders:\nif (!self.progressiveCoder) {\n  // We need to create a new instance for progressive decoding to avoid conflicts\n  for (id<SDWebImageCoder>coder in [SDWebImageCodersManager sharedInstance].coders) {\n    if ([coder conformsToProtocol:@protocol(SDWebImageProgressiveCoder)] && \n        [((id<SDWebImageProgressiveCoder>)coder) canIncrementalDecodeData:imageData]) {\n      self.progressiveCoder = [[[coder class] alloc] init];\n    }\n  }\n}. I'm not too worried about this order thing - it's something the user will config just once, so any potential problems will be visible. I also would let him empty the coders array, it's the expected behaviour, not do any magic behind scenes.\nAlso, ideally only one coder from the array can decode a certain type of data, so we should be good.. I think this assignment should also happen on the ioQueue. Like\ndispatch_sync(_ioQueue, ^{\n  _fileManager = fileManager ?: [NSFileManager new];\n});. small detail - don't need all those extra spaces or lines. I think we should return NO here since the store operation did not go successfully.. should update this comment. should update this comment. Done via a32ab28. Done via a32ab28. actually, this should be check against 0, because after clearDisk we should have 0 files in the cache.. @dreampiggy no prob. I can take care of this. I just copy-pasted from the WebP tests. I will revisit those as well and also fix my comment above (about that calculateSize expectancy).. Done @dreampiggy.\nPer DRY principle, created verifyCoder:withLocalImageURL:isAnimatedImage: method that will take a imageURL and a coder and will check decoding and encoding back and forth, sizes and so. Reusing this method for the static WebP image, for the animated WebP image and for the GIF.. We can't even do that :( the part where we set the image on needs to be on the main queue, only the part creating the FLAnimatedImage needs to be on a background queue.\nThat's why I said I don't like it, it adds complexity I don't think we need.\nDo you see any other way around?. @dreampiggy I don't understand your question :)\nWhat do you mean \"all our public method happen on the main queue\"?\nAnd regarding the custom FL code, can you give a code example?. I think users expect completion blocks to be executed on the main queue, especially for UI components like UIImageView where you will add UI code. If we don't, we get a lot of complaints :) also, we can't change this now after it's been like this for so long.\nMaybe it's only my opinion :). we should not change this, we cannot be sure this block is always called on the main queue. \nThat is the purpose of dispatch_main_async_safe. Will just check.. what does this check do when we don't have the GIF component (including FLAnimatedImageView). Maybe we can check if ([sself isMemberOfClass:[UIImageView class]]) ?. to avoid repeating the code on if and else we can do something like:\ndispatch_queue_t queueForSetImage = ([sself isKindOfClass:NSClassFromString(@\"FLAnimatedImageView\")]) ? dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0) : dispatch_get_main_queue();\ndispatch_async(queueForSetImage, ^{\n    [sself sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock];\n    dispatch_main_async_safe(^{\n        if (!sself) {\n            return;\n        }\n        [sself sd_setNeedsLayout];\n        if (completedBlock && finished) {\n            completedBlock(image, error, cacheType, url);\n        }\n    });\n});. - I was referring to installing the lib without GIF (pod 'SDWebImage/core'). Then the FLAnimatedImageView class does not exist.\n- the check I suggest was for UIImageView, so if it's exactly UIImageView, then execute on main queue, otherwise on the background queue. But It's not such a good idea. @skyline75489 please detail on * I feel that currently the GIF-related code is somehow tight-coupled with the core code.*\n\n@dreampiggy indeed we can pass something for more customisation. I would use a dictionary of string,string like options dict for decompressedImageWithImage\nThat way we could pass options like how to run the setImageBlock which would move the decision to the FLAnimatedImageView category - much cleaner.. There must be a better way to express those conditions. Right now (on our branch) is a code smell. Easy to have missed cases like the one you noted above. Let's not settle with this and improve it more :). I've reviewed again those conditions and they are exactly as the code from 4.1.2\nOn your case (finished=NO + image!=nil + (options & SDWebImageAvoidAutoSetImage) == YES) the code from 4.1.2 was calling the completion and so is the code from this PR.. @dreampiggy I think we are good for merge now.. @dreampiggy there is an issue here :) given that we don't break, the progressiveCoder will always be SDWebImageIOCoder because it gets reallocated. I've also noticed this fact (that we don't do textbook checks for the image format). But I'm concerned doing it, as this might break for some people. I'm not sure all the PNG files have the whole sequence 89 50 4E 47 or JPEG FF 08.\nI would like to improve it, but I think it's better if we leave it alone.. Yeap, [isEqualToString: @\"ftypheic\"] is better.. But not a blocker for merging this PR.. quick question @dreampiggy: are we sure we always run on 64 bit systems? Maybe we can find a way to get that number through a system API call and use it instead of using the the hardcoded value of 64. Done. I copy-pasted the Xcode 7.3 value until I could determine if an update is required. c38b731. I can't think of a case where you would want to set a default cache config. You can just pass one to all the initializers if you want to override. \nMy original idea with this config object was that you can never change it, just edit the properties, to keep it simple.\nI think this setter is confusing, since it's not obvious what \"setting a default cache config\" does under the hood.. It's ok @dreampiggy, this is not a showstopper, that is why I merged it. Just focus on the other PRs and we will review everything again before releasing.. why did we change this to reverse order?. this looks a bit weird. Usually, you would lock the enumeration as well. Here it works because we actually can't alter self.coders, we can only change the pointer to another array.. I've already added this to the 5.0.0 release checklist - I mean the fact that those defines are copy pasted to several places. They should probably exist just in the SDWebImageDefine.h. Just a theoretical question: are we sure we don't need to synchronise the creation of the array? I know in theory you only get the SDWebImageCodersManager instance after init, but I'm not sure what a concurrent environment can cause. Just going super-theoretical here :) The original implementation was the same. But the bullet proof one is if you have a non-thread-safe resource, synchronise all the access to that resource, including creation and deallocation.\n-- No need to change anything --. I know :) I meant a situation where alloc was executed, so we have an instance and on the same instance init on one thread and another method on another thread go concurrent. But that is impossible. we should make the default \"com.hackemist.SDImageCache.\". this #endif was accidentaly deleted and makes the build fail. Fixed with c797279 commit on the project_move_FLAnimatedImage branch. I agree with @dreampiggy. @zhongwuzw let's just keep the old code and just check for key is nil. Changing those values to strings seems too much work for very little benefit. \nI understand @dreampiggy 's point about the lack of extensibility for SDImageFormat. \nI agree with typedef NSInteger SDImageFormat NS_TYPED_EXTENSIBLE_ENUM.\nMore to that, I would just add the rest we already know and support through plugins\nobjective-c\nstatic const SDImageFormat SDImageFormatAPNG = SDImageFormatPNG;\nstatic const SDImageFormat SDImageFormatHEIF = 6;\nstatic const SDImageFormat SDImageFormatBPG = 7;\n.... I agree with this approach as a generic rule of thumb, but I think we can let this one slip :). It's fixed in the merge commit. Here we still see the diff with the original branch, without the conflicts fixed.. I've also fixed this in the merge commit. Check that. 676a4b5. @zhongwuzw take a look at #2417, I think the approach from @dreampiggy is simpler.\nBut I would not be so picky in choosing the approach :) You guys should decide . I think it's more clear if it's explicit.. I'm not sure if messing with the observers doesn't create any issues. It's not usual to keep adding and removing observers this way.. Also, the SDWebImageDownloadReceiveResponseNotification notification is a generic notification, which means the communication is 1-to-many. Most of the notification patterns involve needing to filter some of the notifications received: for example, observing the changes for a certain keypath.\nI suggest we keep things as they are, clearer and without errors.\nI do appreciate your improvement, but I feel we don't really need it.. Let's hear another opinion before deciding. The SDWebImageDownloader initialize example is different, there we just do that once for the entire class. Your are correct @dreampiggy, this condition is about skipping the progress block call. So we want to skip when there is too little progress and the download is not finished. If we have enough progress or we are finished, we want to call the progress block.. I also don't understand this change here.. Yeap, we need to consistently change all the minimumProgressInterval, from NSTimeInterval to double.. \"early optimisations are the root of all evil\" :))\nIn this particular case, I think objectForKey is better than valueForKey for the following reasons:\n- code readability and semantics (since objectForKey can be easily used via the [] subscription operator)\n- the definition - (nullable ObjectType)objectForKey:(KeyType)aKey shows that objectForKey is more strict in terms of types, especially is used on a dictionary with generics NSDictionary<String,String>. - (nullable id)valueForKey:(NSString *)key is part of NSObject(NSKeyValueCoding), while objectForKey is defined on NSDictionary.\n- indeed, a very small performance difference - not important here as we have very few calls.. I don't necessarily like this approach. It's too verbose. I think the old code was better in terms of readability.\nIdeally we would use a flatMap or reduce here, but those are only available in Swift.. it was the time to update the osx_image and use a newer simulator. Ok. I will make the change. Not too happy about it :)). You are correct about the import. It's strange, but probably because the other path exists too, it works.. It applies to PRs as well.\nFrom by POV and past experience with the bot, I would like to leave it as open as possible. Basically, just get a 30 days reminder on each issue/PR that was not updated. Then, if we just do anything there, the Stale label goes away.\nI think important label is sufficient, just to have one that is overlooked. If we add more labels, we will just let issues pile up.. I don't think we need. Let the bot comment and we can revisit. Better this way, otherwise we just forget about them and never resolve them.. I don't think we can split the configs. The one thing I can do is just ignore PRs. Even though I think it's important not to let PRs open for so long and the bot could help us push on them.\nBasically, I think once an issue or pr is open, we need to push on that for an action plan and a resolution. 30 days should be sufficient to do it. If it's something that takes more time, we will just make a change and have the bot ignore it for another 30 days.. I didn't know about that @zhongwuzw  :)\nSo should I add\npulls:\n  daysUntilStale: 60\n  markComment: >\n    This pull request has been automatically marked as stale because it has not had\n     recent activity. It will be closed if no further activity occurs.\n     If this is still applicable, please make sure it is up to date and if so,\n     add a comment that this is still an issue to keep it open.\n     Thank you for your contributions.\n?. I added the pulls stale to 60 days and custom message. Let's merge.. Agree - I don't see why we would need @synchronized here. It's not that obvious, but the name was imageURL and that was shadowed by a param with the same name in the addHandlersForProgress block below it:\nobj-c\nSDWebImageDownloaderOperation *operation = [[SDWebImageDownloaderOperation alloc] initWithRequest:request\n                                                                                            inSession:nil\n                                                                                              options:0];\n[operation addHandlersForProgress:^(NSInteger receivedSize, NSInteger expectedSize, NSURL *imageURL) {\n} completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, BOOL finished) {\n    if (image && data && !error && finished) {\n        [expectation fulfill];\n    } else {\n        XCTFail(@\"Something went wrong\");\n    }\n}];\nAll the other changes are similar, there are blocks where the param is shadowed. are you sure we just append at the end of the coders array?. I might have said that, but I don't remember it :) If @dreampiggy says the private headers work, let's try them out. We can always revisit. ",
    "benhoyt": "Very worthwhile suggestion -- in fact, we've implemented this in our own copy of SDWebImage which is used for viewing potentially 1000s of large photos, so we needed a cap. What my implementation does is when the disk cache size is >MAX_SIZE (eg 200MB), it deletes the oldest files till it's only using MAX_SIZE/2 (eg 100MB). Let me know if you'd like me to post my code.\n. Done. Commit is here and new version of SDWebImageCache.m is here. You'll want to call [[SDWebImageCache] sharedImageCache] in your app's startup code because the first time it's a fairly expensive disk operation.\nAlso note in the diff that I've made a couple of other changes (for our codebase) that you probably don't care for.\n. ",
    "nonamelive": "I think the problem will only happen when the cancelForDelegate: method is called in dealloc, because all of these code are in one thread. When the [delegates removeObjectAtIndex:] is called, the dealloc method will be immediately called, so the code runs to cancelForDelegate:. I can't imagine other scenarios other than that. :)\n. ",
    "bamlhs": "I'm sorry for late reply,.\nI tried it in imageview and it's work fine but when I use it in cell.imageView dosen't work properly.\nCGRect ImageRect = CGRectMake(0, 0, 160.0f, 140.0f);\n    UIImageView *imgv = [[UIImageView alloc] initWithFrame:ImageRect];\n    [cell.imageView setImageWithURL:url placeholderImage:[UIImage imageNamed:@\"background.png\"]];\n    [cell.imageView setFrame:ImageRect];\n    [cell.imageView addSubview:imgv];\n. Thank you it's work fine!\n. ",
    "daemonsy": "Hi, sorry for commenting on an old issue. I'm wondering since SDWebImage downloads the image async, is there any way to change the frame of the imageView after knowing the image's actual height? This is because in my app, the image widths are all the same, but the height can vary and you only know the height after downloading the image. \n. ",
    "yichen": "Hey any solution to this last question? I am running into the same issue. I tried to resize the UIImageView by setting the frame size in the completion block with no luck. \n. ",
    "ftedin": "Hi. I  have the same issue, I added a NSNotification to the \"completed\" block and the controller listens it and resizes the UIImageView (by setting the frame with new size). You can send the UIImage parameter in the NSNotification in order to get it in the method that processes the notification.  Is there a better solution?\n. ",
    "fragginAJ": "One workaround for the resizing issue is to use a custom cell and override its layoutSubviews method. You can set your imageView's frame based on the imageView's image size. Combine that with a content mode of UIViewContentModeScaleAspectFit and you should be all set. Make sure to set your cell's height in your TableViewController as well, otherwise the image will be the right size but will get clipped by the cell.\nHere's a somewhat relevant discussion: http://www.raywenderlich.com/forums/viewtopic.php?f=2&t=2123\n. ",
    "aleemb": "Never mind. Just checked out the project and notice the support for UIImageView.\n. ",
    "alon85": "Thanks!  That allowed for compilation.\n. ",
    "ntodd": "As of iOS 5 and Xcode 4.2, ARC is on by default when creating a new project.  Apple is pushing ARC hard and is heavily encouraging people to use it.\n. ",
    "cbrauchli": "For my curiosity: why is SDWebImage a better caching system for images than SDURLCache?\n. ",
    "Naituw": "It support cocoa already, see SDWebImageCompat.h and just use the web cache category for NSImageView.\n. ",
    "loretoparisi": "This is awesome! I'm using on iOS and it works great, so now I can go on with Cocoa...thanks!\n. When compiling for OSX 10.7 you go through two problems despite of cocoa compatibility.\nThose problems affected the SDWebImageDecoder.m at lines 99 and  119:\nThe first one is an ERROR \"Property CGImage Not Found on object of type 'NSImage *'\"\n+ (UIImage *)decodedImageWithImage:(UIImage *)image\n{\n    CGImageRef imageRef = image.CGImage;\nand this is a WARNING \"NSImage may not respond to initWithCGImage\"\nUIImage *decompressedImage = [[UIImage alloc] initWithCGImage:decompressedImageRef];\nThe first error is due to the lackness of a direct CGImageRef object on the NSImage object, as CocoaTouch does with UIImage objects types.\nThe second is a warn about the NSImage method\n- (id)initWithCGImage:(CGImageRef)cgImage size:(NSSize)size\nso it's of course defined yet for NSImage and UIImage as well.\nBut what about the [NSImage CGImage] api ?\nA possibile solution for COCOA would be this (SDWebImageDecoder.m#97 )\n```\n + (UIImage )decodedImageWithImage:(UIImage )image\n {\nCGImageSourceRef source;\nsource = CGImageSourceCreateWithData((CFDataRef)[image TIFFRepresentation], NULL);\nCGImageRef imageRef =  CGImageSourceCreateImageAtIndex(source, 0, NULL);\n\n```\n. thank you.\n. Just to know, which was the change?\n. ",
    "OpenFibers": "I recently made another lib to do the same thing in OSX: https://github.com/OpenFibers/OTWebImage\n. It did support, but not supporting. Hope rs will fix this issue.\n. I recently made another lib to do the same thing in OSX: https://github.com/OpenFibers/OTWebImage\n. ",
    "truehybridx": "oh wow lol it does fix them :P thanks\ni had another problem in the plugin not working when i just try to set an image in a detail view too \n. and now it appears to work lol wtf...\n. ",
    "rramnel": "Hi,\nI tried your suggestion. Its still the same. \n. ",
    "dimoreira": "Sorry mate, I only notice this trick one day after I posted the issue!\nReally sorry about this.\nThanks\n. ",
    "lucaquerella": "any update?\n. ",
    "donholly": "Anyone taken a crack at this yet? Would be super awesome for local asset retrieval and alleviating the pains associated with pulling in many images from ALAssetsLibrary quickly. There's no inherent queuing system (like SDWebImageManager provides) for doing this cleanly and the results can be quite ugly when using the native APIs :( \n. I finally got around to this. I integrated ALAssetsLibrary using a separate NSOperation subclass. It's decently separated from the rest of the code base.  You can take a look at the changes I made here:\nhttps://github.com/donholly/SDWebImage/commits/master (the commits start on Oct 9th)\nIf there's any interest in merging it in merging it in, I'll do a quick cleanup pass on it and verify it follows the same formatting as the rest of the library.\n. I actually already did several months ago:\nhttps://github.com/rs/SDWebImage/pull/571\n@rs made a good point in that it might be better separated out into a category as to not force users to include the ALAssetLibrary.framework in their projects.\nI haven't gotten around to refactoring this behavior yet to allow for that, so I've been using my fork in the meantime.\n. That seems reasonable. Unlikely I'll get around to this in the near future,\nthough.\nOn Thu, Jun 12, 2014 at 5:00 AM, Bogdan Poplauschi <notifications@github.com\n\nwrote:\nWe need to separate this ALAssetsLibrary functionality from the core, if\nwe want to add it properly (separate target, separate subspec), similar to\nMKAnnotation\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/45#issuecomment-45882658.\n. This is not yet merged into master yet. I haven't had time to tidy it up and submit a new pull-request. I may get to it this week. Feel free to pull from my fork if you want this functionality now.\n. If you're using the latest version, the new method is:\n\nobjc\n- (void)sd_setImageWithURL:(NSURL *)url;\n. This would be a very nice addition :+1: \n. Just pinging to see if this is still going to be a considered pull request :)\n. Thanks!\n. I haven't had any issues with it so far... Where are you calling it from?\n. This is already handled in SDWebImageManager. You just need to make sure you don't send in SDWebImageRetryFailed:\n``` objc\n    BOOL isFailedUrl = NO;\n    @synchronized(self.failedURLs)\n    {\n        isFailedUrl = [self.failedURLs containsObject:url];\n    }\nif (!url || (!(options & SDWebImageRetryFailed) && isFailedUrl))\n{\n    dispatch_main_sync_safe(^\n    {\n            NSError *error = [NSError errorWithDomain:NSURLErrorDomain code:NSURLErrorFileDoesNotExist userInfo:nil];\n            completedBlock(nil, error, SDImageCacheTypeNone, YES);\n    });\n    return operation;\n}\n\n```\n. :+1: \n. How is that related to this topic?\n. I'm a little confused...\nThe entire point of the decompression step when serving images via SDWebImage is to avoid that expense when the image is drawn to screen (and to keep it off of the main thread).\nYou can read more about this here (the TLDR is that decompressing JPEGs is expensive):\nhttp://www.cocoanetics.com/2011/10/avoiding-image-decompression-sickness/\nWhat you're likely going to see when you disable this functionality is that images will take longer to appear (and may cause main thread hiccups) when you're drawing them (this will be more noticeable in a UICollectionView with many images). \nPer my understanding, this won't actually prevent CGRasterData accumulation (since this same process will occur when you draw the images to screen). At best, you're just delaying the decompression costs to the point of drawing - which has its merits, but doesn't solve the underlying memory issue in the long run. The only reason I could think you might not want to decompress the images on a background thread upon retrieving them from the cache is if you're not planning on drawing them immediately (pre-fetching for later use).\nUIImage has its own memory management techniques and should purge unused image data when it is no longer needed (or when memory warnings occur). SDWebImage also uses an NSCache to store in-memory images, which will also purge its contents in the event of a memory warning.\nI do not think image decompression should be off by default. This is one of the key benefits of using SDWebImage in the first place (decompressing JPEGs in a background thread is noticeably more performant than doing so JIT on the main thread).\nI would also argue that having two separate places for setting that option (both in the cache and image downloader) is poor design and not very intuitive. Perhaps moving this option to the SDWebImageManager (which can then set it in both places on the user's behalf) is a better way to do this?\n. Okay - perhaps I'm just not seeing this b/c of the size of the images I'm loading. What size images do you guys see these problems with? And you don't notice any difference in drawing time when you turn decompression off? Even with older devices (iPhone 4/4S)?\nYou may be right that the article I referenced is out of date. If so, I may actually want to use this patch and save CPU cycles for decompression.\n. I didn't mean to criticize the design, sorry :)\nWhat was the reason for separating them? Why would you want them to be\ndecompressed from the cache but not when downloaded (or vice versa)?\nOn Wed, Feb 25, 2015 at 11:19 AM, Harish Krishnamurthy \nnotifications@github.com wrote:\n\nI would be happy to move the configs to as sdwebimagemanager and default\nto not decompressing if everyone concurs.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/538#issuecomment-76034597.\n. Got it... is the consensus that background image decompression is a thing\nof the past now? Perhaps ImageIO/CoreGraphics are just better/smarter about\nthis now?\n\nOn Wed, Feb 25, 2015 at 11:20 AM, Kevin Delannoy notifications@github.com\nwrote:\n\n@donholly https://github.com/donholly I had the memory issue causing\ncrashes on iPad 2. I didn't notice any performance issue applying\n@harishkashyap https://github.com/harishkashyap 's patch as an user of\nthe app.\nImages I'm loading are quite large (some of them are bigger than 1000 x\n1000).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/538#issuecomment-76034888.\n. Got it. Sounds good!\n. @harishkashyap - What alternative methods are you referring to?\n. Ah yes, I do remember coming across that awhile back now.. I didn't investigate further due to what @steipete noted:\n\nI was very excited when I first found out about this, but you really shouldn\u2019t be. In my tests, performance actually decreased when I enabled immediate caching. Either this method calls up to the main thread (unlikely) or perceived performance is simply worse because it locks in copyImageBlockSetJPEG, which is also used when showing a non-decrypted image on the main thread.\n. I'm going to do a re-work of this. I want to move this stuff into SDImageCache instead of making a new operation. The speed of getting them directly from ALAssetsLibrary is significantly faster than getting it on the OperationQueue and forceDecoding them.\n. I submitted a new pull request: #571 \nIt's not quite as fast as the camera roll still... I assume they're doing some magic in the background to support the speed they seem to handle (storing all thumbs in memory for instance).\nThe bottleneck appears to be getting an instance of a UIImage  from the CGImageRef in the ALAsset.\nEven moving that to a high-priority queue (to avoid blocking the main thread during that conversion) wasn't quite enough. It's definitely an improvement once they're in memory though!\n. It has not yet been merged into the project. I was going to refactor it a\nlittle and resubmit it after the holidays. You could pull the fork I have\non my repo if you want to use it.\nOn Tuesday, December 24, 2013, Raymond wrote:\n\nDid this ever make its way into the master branch? When I downloaded the\nSDWebImage 3.5 framework, the ALAssetsLibrary code wasn't included. How can\nI get it in the *.framework file?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/pull/561#issuecomment-31183359\n.\n. A category seems like an interesting idea... I'll ponder that tomorrow and see if we can get away with that!\n. As I stated in #45, I really don't have time to refactor this into a category and rebase with master. Anyone that would like to take a stab at it is welcome to with my fork! I've updated a couple things:\n\nhttps://github.com/donholly/SDWebImage\n. I've redone this with support for iOS 8's PhotoKit as well as ALAssetsLibrary. I'll submit a new pull request \n. Do you have -ObjC in the other linker flags?\nOn Sunday, December 15, 2013, Felipe Salazar wrote:\n\nAn alternative is downgrade to 3.2 version.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/572#issuecomment-30618414\n.\n. You might try the SDWebImageRefreshCached option when using the library\n. Per: https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageManager.h\n\n/**\n * Even if the image is cached, respect the HTTP response cache control, and refresh the image from remote location if needed.\n * The disk caching will be handled by NSURLCache instead of SDWebImage leading to slight performance degradation.\n * This option helps deal with images changing behind the same request URL, e.g. Facebook graph api profile pics.\n * If a cached image is refreshed, the completion block is called once with the cached image and again with the final image.\n *\n * Use this flag only if you can't make your URLs static with embeded cache busting parameter.\n */\n. Not true: \nSDWebImageManager.h\nobjc\n/**\n * Check if image has already been cached\n */\n- (BOOL)diskImageExistsForURL:(NSURL *)url;\n. This is where you would expect most memory to be consumed. This is when the image is getting decompressed from JPEG and put into memory. This is just showing in instruments where the image decoding is occurring. There isn't an issue with that code.\n. Is anyone actually seeing crashes as a result of this?\nI'm fairly confident that ImageIO is smart enough to manage it's own cache and the increase in perceived memory usage is actually okay. It will purge as necessary. It seems to be a little greedy, but that's actually fine so long as it's not being \"too\" greedy and crashing your app as a result of this.\n. This function shouldn't spend much time. It's not going to be instantaneous\nthough, it needs to read from disk. It does so in a block on a serial queue\nbecause NSFileManager is not threadsafe. If you have any ideas on how to\nspeed this up, I'd love to hear them.\nOn Saturday, December 28, 2013, openkava wrote:\n\nI have use SDImageCache ,and query disk image exitst use\ndiskImageExistsWithKey function .It use block ,always spend to much time to\nreturn BOOL .so the app is freezed and crashed or restart . I think this is\na big problem I use imageFromDiskCacheForKey function , it takes less time\n,so it works ok . please fix this .thanks .\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/593\n.\n. I'm not sure how it's possible that imageFromDiskCache is any faster... If\nyou could post an instruments log from Time profiler showing this behavior\nthis would be useful. I use this method to check for thousands of images\nand it performs fine.\n\nOn Saturday, December 28, 2013, openkava wrote:\n\nI have use SDImageCache ,and query disk image exitst use\ndiskImageExistsWithKey function .It use block ,always spend to much time to\nreturn BOOL .so the app is freezed and crashed or restart . I think this is\na big problem I use imageFromDiskCacheForKey function , it takes less time\n,so it works ok . please fix this .thanks .\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/593\n.\n. The only way that could happen is if you call diskImageExistsWithKey: from the ioQueue (dispatching synchronous work to the same serial queue does cause a deadlock).\n\nThe assumption was made that this would be unlikely called from that queue, however it does need to be on that queue since NSFileManager is not threadsafe and was created on the ioQueue. We could instead prevent the possibility of a deadlock by doing something similar to dispatch_main_sync_safe, but instead checks the label on the provided queue and assures it is not running on that queue before dispatching to it synchronously.\nSeem reasonable?\n. Interesting! Good catch. Seems that if you use the defaultManager instance of NSFileManager we should be fine without the synchronous queue. That may be a slight performance boost, too.\n. Seems reasonable. Quick fix would be to just use the [NSFileManager\ndefaultManager] since it is threadsafe.\nSimple pull-request should do the trick :)\nOn Mon, Mar 24, 2014 at 5:14 AM, Matej Bukovinski\nnotifications@github.comwrote:\n\nYes, I think there really is a problem here and it's actually broader that\nthis specific example.\nIt's pretty easy to how to get to a deadlock here. If\ndiskImageExistsWithKey: gets called while queryDiskCacheForKey:done: is\ndoing work on the ioQueue, the main thread will block on the dispatch_synccall inside\ndiskImageExistsWithKey:. When queryDiskCacheForKey:done: in turn reaches\nthe dispatch_main_sync_safe call, it has to wait for the main thread,\nwhich is blocked by the dispatch_sync call. The ioQueue waits for the\nmain_queue and vice versa.\nThis can also happen in other places where dispatch_main_sync_safe is used\nto invoke callbacks (calculateSizeWithCompletionBlock:) and perhaps also\nin other places throughout the library - related to other queues.\nIn general I think it's pretty risky to invoke callbacks from a queue to\nmain queue synchronously, if there are places where the main queue can\nenter the particular queue in a synchronous manner. To play it safe, think\ncallbacks should rather be always dispatched asynchronously as a general\nrule.\n\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/625#issuecomment-38436894\n.\n. Hey everyone,\n\nThanks! Glad to contribute. I'm fine with supporting this as a subspec in the project since not everyone will need it, but I do think that having a multipurpose downloadImage method has its benefits. The whole idea behind SDWebImage in the first place is to eliminate as much of the hassle as possible when handling images. Knowing what format the image is pretty heavily dependent on how they've structured their data. Having a single method you can call with a URL or local asset URL/Identifier comes in handy. \nI'm fine with leaving the existing downloadImageWithURL:options:progress:completed: if you'd rather it not be aware of local assets - though I would propose a separate method that could intelligently call either downloadImageWithURL:options:progress:completed: or retrieveImageWithLocalIdentifier:... on the user's behalf.... say downloadImageFromAppropriateSourceWithIdentifier:options:progress:completed: (or perhaps something a little less verbose)? Keep in mind: if we don't have a single entry point for retrieving images, we'll have to change how things like the prefetcher work as well (assuming it would want to support local asset retrieval). Having a single entry point for getting any image from any source seems like a pretty good selling point for SDWebImage in general. Is your main concern here the method parameter getting changed to an id vs NSURL? I suppose it would even be safe to keep it an NSURL and pass it the strings that represent PHAssets The rest of the modifications to SDWebImageManager are relatively minor and could be made safe in the case that the local assets subspec isn't included.\nI'll likely end up with my own fork that has a single entry point regardless of whether it ends up getting merged in. The way my data is stored in core data doesn't discriminate between image sources (web vs local) when storing them. It seems silly to have to do checks in various places of the app for which method I should be calling in my Image Library/Manager. Using a preprocessor macro, we could do something like this instead if you'd prefer:\n``` objc\n    if (queryLocally) {\nifdef SD_LOCAL_ASSETS\n    operation.cacheOperation = [self.imageCache queryLocalAssetStoreWithLocalAssetIdentifier:key\n                                                                                  targetSize:targetLocalAssetSize\n                                                                             completionBlock:cacheOperationCompletionBlock];\n\nendif\n} else {\n    operation.cacheOperation = [self.imageCache queryDiskCacheForKey:key done:cacheOperationCompletionBlock];\n}\n\n```\nThat way if the subspec/category isn't present there's no problem.\nI'll take some time in the next day or two to tidy up a few things based on your and @rs 's comments, but let me know how you'd like to handle the retrieval portion.\n. Hi @Flitskikker - I've since abandoned using SDWebImage in our application and wrote a custom image cache from scratch that better addressed some of our specific needs. Given this, I'm no longer maintaining this code. I assume you should be able to just merge master into my fork and resolve any conflicts without too much pain though.\n. If you use the option SDWebImageCacheMemoryOnly, the image will only be cached in memory (useful when you don't need to persist the image).\ndiskImageExistsForURL is useful for that reason because you may need to know if the image can be retrieved between launches of the app.\nI'm personally using this method for determining if I should prefetch images that do not already exist on disk (and have not been cleaned up by iOS - since SDWebImage stores images in the caches directory which is eligible to be deleted at any time by the OS).\n. ",
    "skriyaz7": "i am getting unsupported url error in version 3.7.1 in ios 8 . \n. i'm getting unSupported url error for alAsset urls in version 3.7.1 , \nSDWebImageManager * theManager = [SDWebImageManager sharedManager];\n[theManager downloadWithURL:asset.defaultRepresentation.url options:0 progress:nil completed:^(UIImage image, NSError error, SDImageCacheType cacheType, BOOL finished) {\n    if (image) {\n        myImageview.image = image;\n    }\n    else\n    {\n        myImageview.image = [UIImage imageNamed:@\"placeholder.png\"];\n    }\n}];\n. ",
    "iossaif": "Hello sir ,\n@bpoplauschi  is asseturl functionality supported now?\nI am using sd_setImage function for getting images from photo library.url is something like this\n assets-library://asset/asset.PNG?id=D0282AEB-C86F-4422-B404-132BCCFE44DD&ext=PNG\nImage is never fetched from library and I cross checked imageview's image in cell its nil.\nPlease reply as soon as possible.I would be grateful to you.Kudos to your team\nThank you\n. ",
    "guoxj": "i have solve this by use a customer UITableViewCell.thanks\n. ",
    "dmakarenko": "Hi,\nIn my opinion the best solution would be a combination of these two approaches, but you should definitely start with the one you've suggested.\n. ",
    "sparrowice": "This is the log which is printed in the gdb console\n* Terminating app due to uncaught exception 'NSGenericException', reason: '* Collection  was mutated while being enumerated.'\n*** First throw call stack:\n(0x33d728bf 0x3548e1e5 0x33d723e3 0x34de16d7 0x34de19fd 0x34de25c3 0x34de218b 0x7375 0x133fd 0x10a5b 0x6300f 0x33ccc435 0x34dfa9eb 0x34dfa9a7 0x34dfa985 0x34dfa6f5 0x34dfb02d 0x34df950f 0x34df8f01 0x34ddf4ed 0x34dded2d 0x35909df3 0x33d46553 0x33d464f5 0x33d45343 0x33cc84dd 0x33cc83a5 0x35908fcd 0x34e0d743 0x2561 0x24f0)\nfollowing the stack trace.\ni got crash in sdImageCache.m in the following line\n- (void)queryDiskCacheOperation:(NSDictionary )arguments\n  {\n  NSString key = [arguments objectForKey:@\"key\"];\n  NSMutableDictionary *mutableArguments = [[arguments mutableCopy] autorelease];\nUIImage *image = [[[UIImage alloc] initWithContentsOfFile:[self cachePathForKey:key]] autorelease];\n  //got the crash at this point\n. ",
    "mohacs": "SDImageCache *imageCache = [SDImageCache sharedImageCache];\n    [imageCache clearMemory];\nsolved the problem before return cell.\n. @dreampiggy hi, when I do pod install, here is the result and thank you so much for looking into this. \nPre-downloading: SDWebImage from git@github.com:rs/SDWebImage.git, branch fix_running_operation_leak\n[!] Error installing SDWebImage\n[!] Failed to download 'SDWebImage'.\nCheers,\n-mohac.. @dreampiggy changed in to this and i was able to download it. \npod 'SDWebImage', :git => 'https://github.com/dreampiggy/SDWebImage.git', :branch => 'fix_running_operation_leak'\nI have deleted everything inside the derivedData folder include module caches etc and built project with the updated library. \nI am sorry, no difference. Still memory consumption is around 1 - 1.5 GB per tab (same project), unless set \nSDImageCache.shared().config.shouldCacheImagesInMemory = false\nWhen it is set to false, memory usage is around 800-900 MB and this time when I dismiss the window controller it releases 100-150 Mb memory. \nIf there anything else I can check, please advise?\nCheers,\n-mohac.\n. hi @dreampiggy, sorry for being pesty. All images are good old jpegs, there is no WebP, gif or png images. \nCalling this function every 5 seconds. \n@objc func clearnSDWebImageCache() {\n       SDImageCache.shared().clearMemory()\n       print(SDImageCache.shared().getSize())\n    }\nSomething catchy here. If I comment out SDImageCache.shared().clearMemory() line, getSize() result is alway 21923394. \nshouldCacheImagesInMemory = false or true OR maxMemoryCost = 100 * 1024 * 1024\ndoesn't matter, it always print 21923394. Is it normal?\nTonight, I will check \"Allocations\" and let you know.\nCheers,\n-mohac.\n. hi @dreampiggy, I do not see any problem on allocations. As I can see only the problem right now \nSDImageCache.shared().clearMemory()\nis not working for me, SDImageCache.shared().getSize() printing same value before and after \nSDImageCache.shared().clearMemory() called. Can you confirm that?\n. @dreampiggy I noticed two different problems on my code. Actually one of them is not my mistake but Apple's. If you use xib for NSCollectionViewItem, it is leaking like a hell. I deleted xib and created everything with code. Now there is no leak. \nThe second problem I mention about earlier was \"not releasing memory\" even after NSWindowController closed. it was because of a Timer I am using to invoke SDImageCache.shared().clearMemory(). \nRight now on the Instrument there is no leak however high memory problem still here. While browsing up and down in to collection view it hits to 1-1.5 GB. \n\nToday it is kinda late but for sure tomorrow I will do the test with Kingfisher and let you know the results. \nThank you,\nCheers,\n-mohac.. @dreampiggy sorry for delay, i got cold, can't working right now. I will let you know asap once I get up. @dreampiggy my apologies for the delay, just today i could hold myself together.\nRe \"Kingfisher and enabling decompress\", after I set decompress by using .backgroundDecode, UI is barely moving (NSCollectionview) but I did not observe higher memory usage?\nAs I mentioned earlier, after I fixed the leaks and strong reference problem, right now when I dismiss the window controller it releases all the memory it is using, however while using it same high usage stands. \nSince there is no leak on SDWebImage or somewhere else, after your detailed explanations we could say this is how NSCache handles the images on macOS and go on? :) \nCheers. ",
    "jfradj": "This is to allow compilation with old SDK (<4.0). ==> that's exactly what the #if does ;-) Maybe I've not be very explicit. I talked about the if ([device respondsToSelector ..., not the #if. I think it's useless to have the both checks.\nThis is certainly no longer needed but it doesn't hurt I guess. ==> I guess too. I was reading your class to help me writing my own cache with GCD and Blocks and because I do not like useless code I took 1 min to report it to you ^^\nCheers,\n. #if __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_4_0  ==> compile time check, the code will not be executed on device running on 3.x, and can be compiled for those devices => everything is OK.\nOn device running on 4.0+, the key UIApplicationDidEnterBackgroundNotification will be defined and the notification handler will be called only if the device support multitasking => so the runtime check is useless\nPS: excusez moi d'insister c'est juste pour clarifier mes propos et surtout \u00eatre s\u00fbr que je ne me plante pas... On peut continuer cette conversation par mail (johann@hotappsfactory.com) si vous voulez ;-)\n. Maybe I'm wrong... I wanted to make some tests to confirm that, but the code in the #if is never executed...\nI'm probably too tired. I'll give it a try another day and keep you posted ^^\n. Ok.\nIn the meantime check out this great blog post => http://mattgemmell.com/2011/12/05/latest-version/\nOk ok, it's a big dilema with apps like yours but you could drive huge amounts of users to update their phone and help all developers to not gone crazy with that kinds of segmentation issues.\n;-)\n. That's a good point.\nI'm agree with you for ARC, but not so much for GCD and blocks because there were introduced with iOS 4.0 and I don't know the exact percentage of users on iOS 3.x but it is really really low, and for me the ROI is evident ;-)\nBye\n. I mean in ease of use, but a bench could be cool ;-)\nI'll finish my library, test it a lot and then push it on github.\nCould you make the bench? I didn't have to do it before the next few weeks...\n. ",
    "pradeeptjha": "HERE IS NEW URL,\nSEE THE IMAGE U WILL GET IT\nhttp://www.filejumbo.com/Download/080369B2C1EB3F11\nI WANT IMAGE\nhttp://www.filejumbo.com/Download/A6281D25CE139872\nThanks in Advance \nPradeeo Jha\n. ",
    "Rupert-RR": "I just came across this same issue - it is because the alpha channel has been ignored when decoding images, for performance reasons.\nSee https://github.com/rs/SDWebImage/commit/c32f9c03f816dac58a8cac25d6189310272ca9c1\nTo resolve, you will just need to change back the source code mentioned in the commit (I presume the author won't want to do so for performance reasons).\n. I agree - I add this manually at the moment, but it seems logical to me that if we have categories on UIImageView etc for loading the normal image, we should also have them for the highlighted images.\n. ",
    "odanu": "well, anyway there is something to think about ;)\n. Are you planning to change the podspecs to tag 3.5.3?\n. ",
    "ubaltaci": "Unfortunately yes, source url1 are the same.\n. I uploaded .h[1] and .m[2] file. Actually, I was hoping that someone may face some kind of problem, because, it's a simple piece of code.\nAlso, this is the code piece where I called SDWebImage:\n[self.big_image setImageWithURL:[NSURL URLWithString:self.big_image_url]\n                   placeholderImage:[UIImage imageNamed:@\"detay_background.png\"]];\n[1]https://gist.github.com/1623223\n[2]https://gist.github.com/1623229\n. You can download from: www.ugurbaltaci.com/ImageProblem.zip\nI hope you can reproduce this issue, definetely I can't reproduce.\n. ",
    "smartcode": "Nice and helpful fix.\nIt would be probably better to omit the .png and .jpg and just check for \"@2x\".\nYou basically limit all the images be be of type .png or .jpg. What about .jpeg for example?\n. ",
    "ngoan": "Yes, it would be great to be able to return the requesting URL or at least some sort of tag so that the image is identifiable in the didFinishWithImage method.\n. ",
    "bauerpl": "Same problem here. After selecting a row, imageView mode has been changed.\n. Workaround is that the imageView size should be the same as image loaded into it.\n. ",
    "kevinelliott": "I am having the same problem.\n. It doesn't appear to be following the 302 (with the embedded Location header) in the response.\nOn Apr 18, 2012, at 6:47 AM, Olivier Poitrey wrote:\n\nIt should handle redirects by default, but I have to admit that never tested.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/100#issuecomment-5198807\n. So very strange! Here's a URL to my Facebook profile photo. See if you have any problems.\n\nhttps://graph.facebook.com/619964826/picture\nI have no problems accessing this in a browser or with wget (which shows the redirect occurring).\n-Kevin\nOn Apr 18, 2012, at 7:02 AM, Olivier Poitrey wrote:\n\nThat's surprising:\nhttps://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/URLLoadingSystem/Articles/RequestChanges.html#//apple_ref/doc/uid/TP40009506-SW1\n\"If the delegate doesn't implement connection:willSendRequest:redirectResponse:, all canonical changes and server redirects are allowed.\"\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/100#issuecomment-5199109\n. Interesting. It's working now. The UIWebView is in a UITableViewCell, and I needed to scroll the cell off the screen and back and it appeared. I'm using this in other UITableViewCells (where the images have no redirect) and they load fine. It's just this one that is having problems.\n\nOdd.\n-Kevin\nOn Apr 18, 2012, at 7:02 AM, Olivier Poitrey wrote:\n\nThat's surprising:\nhttps://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/URLLoadingSystem/Articles/RequestChanges.html#//apple_ref/doc/uid/TP40009506-SW1\n\"If the delegate doesn't implement connection:willSendRequest:redirectResponse:, all canonical changes and server redirects are allowed.\"\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/100#issuecomment-5199109\n. \n",
    "mayanktiwari": "Found a (possible) solution\nEdit the webImageManager:didFinishWithImage: method in UIImageView+WebCache.m like this\n- (void)webImageManager:(SDWebImageManager )imageManager didFinishWithImage:(UIImage )image\n  {\n  //---MaYanK---\n  self.contentMode = UIViewContentModeTopLeft;   // set desired contentMode here\n  self.clipsToBounds = YES;\n  self.backgroundColor = [UIColor grayColor];\n  //---MaYanK---\nself.image = image;\n  }\n. ",
    "WrightsCS": "So it only downloads a few at the beginning, then 1 by 1 after so many images? Any way to change the amount it downloads initially (natively)?\n. ",
    "scompt": "I'm also interested in doing this.\nI think the main conceptual problem is that images are cached by their URL. If you allow image manipulation before caching, the cached image might not necessarily be the same image represented by its URL, which is a problem if that URL is requested again from a part of the code that doesn't need the manipulation. AFNetworking solves this by allowing the developer to specify a cache name with each request. The URL and cache name are concatenated to form the cache key for the post-manipulation image. I think a combination of this and a new delegate method (or block) that accepts the downloaded image and returns the manipulated image would solve the problem.\nShould the new delegate method go in SDWebImageDownloader? I'd like to have access to the manipulation code in the UIImage category, but if that's not possible to do cleanly, then I can always create my own category with the necessary bits. If @rs can provide some feedback, I can write the code. I'm just not that familiar with the SDWebImage architecture yet.\n. ",
    "MikeAbner": "I'm also interested in this feature.  I need to crop images and I'm doing so in the success callback and it sorta, kinda works.  Here's the code/\n```\n[avatarView setImageWithURL:[NSURL URLWithString:[contact.avatar_url stringByAppendingString:@\"?type=large\"]]\n                   placeholderImage:[UIImage imageNamed:@\"blah\"]\n                            success:^(UIImage *image) {\n                                int cropX            = [contact.avatar_crop_x intValue];\n                                int cropY            = [contact.avatar_crop_y intValue];\n                                int cropW           = [contact.avatar_crop_w intValue];\n                                int cropH            = [contact.avatar_crop_h intValue];\n                            //crop the image\n                            CGRect cropRect         = CGRectMake(cropX, cropY, cropW, cropH);\n                            CGImageRef imageRef     = CGImageCreateWithImageInRect([image CGImage], cropRect);\n                            UIImage *croppedAvatar  = [UIImage imageWithCGImage:imageRef];\n                            CGImageRelease(imageRef);\n                            [avatarView setImage:croppedAvatar];\n\n                        }\n                        failure:^(NSError *error) {\n                            NSLog(@\"image load FAILURE!!!!!!!!\");\n                        }];\n\n```\nThe line where I set the image of the UIImageView in the success callback \"works\" in that all subsequent requests to a particular url load the cropped image into the view.  But the first call doesn't replace the image in UIImageView.  I've tried reloading the the table data.  I've tried redrawing the individual row of the table.  I've tried setting the NeedsLayout on the UIImageView.  None of those seem to work.  But again, the next time I fire up my app the cropped image gets put in the view.\n. ",
    "sivakumarj": "I mean the allocations steep increasing but not releasing after dismiss that view.\nI got it on the line :\nUIImage *image = [[[UIImage alloc] initWithContentsOfFile:[self cachePathForKey:key]] autorelease];\nHere is my stack trace :\nmovl                           -40(%ebp), %eax\nmovl                           +792954(%eax), %ecx\nmovl                           +783214(%eax), %edx\nmovl                           %ecx, (%esp)\nmovl                           %edx, +4(%esp)\ncalll                          0x0005f87a\nmovl                           -16(%ebp), %ecx\nmovl                           -28(%ebp), %edx\nmovl                           -40(%ebp), %esi\nmovl                           +790454(%esi), %edi\nmovl                           %ecx, (%esp)\nmovl                           %edi, +4(%esp)\nmovl                           %edx, +8(%esp)\nmovl                           %eax, -44(%ebp)\ncalll                          0x0005f87a\nmovl                           -40(%ebp), %ecx\nmovl                           +790250(%ecx), %edx\nmovl                           -44(%ebp), %esi\nmovl                           %esi, (%esp)\nmovl                           %edx, +4(%esp)\nmovl                           %eax, +8(%esp)\ncalll                          0x0005f87a\nmovl                           -40(%ebp), %ecx\nmovl                           +783266(%ecx), %edx\nmovl                           %eax, (%esp)\nmovl                           %edx, +4(%esp)\ncalll                          0x0005f87a\nmovl                           %eax, -36(%ebp)\n. ",
    "Foap": "Hi, I also have a similar problem even if I have not yet found the exaxt line that triggers it.\nI use the  newest version of SDWebImage in an ARC environment and when I look in X-code Instruments Allocations-tool I see that \"Live Bytes\" is increasing all the time while I am getting images. I have tried to use     [[SDImageCache sharedImageCache] clearMemory];  at regular intervals to lower the mermory consumtion but it is still increasing. I don't see any leaks in the Leaks-intrument. \n. Hi again, \nI think I found my problem and it was not SDWebImage that was the cause of it. It was simply NSURLCache that was expanding to much in my project. When I set it URLcaches memory to 0 everything seemes to camel down in my X-code allocations instruments.\nSorry for the inconvenience.\n/knut\n. ",
    "justdan0227": "Hey dphase, I\"m new to SDWebImage but a veteran in IOS.  It appears that inside of SDWebImageManager.m\n- (void)imageCache:(SDImageCache )imageCache didFindImage:(UIImage )image forKey:(NSString )key userInfo:(NSDictionary )info\nis the one who is called once the image is downloaded and retrieved from the cache.  SDWebImageManager then calls us with didFinishWithImage but does not pass the forKey:(NSStringkey) which is your image.  You modify the call to pass a third parameter of the key along with the image and self.  This would require putting self and key inside of an array and passing image and the array to the delegate as I don't know of a way to pass 3 parameters but you can pass 2 (the image and an array of self and key).\n. Figured it out.  It had to do with the fact that for some reason the Activity Indicator using self.center was not centering in the image for a cell image that was not set to autoresize.  It now works.  I also added a'\n- (void)webImageManager:(SDWebImageManager )imageManager didFailWithError:(NSError *)error; \nto UIImageView+WebCache.h so that it would stop the UIActivityIndicator if the image was not found \n- (void)webImageManager:(SDWebImageManager )imageManager didFailWithError:(NSError )error {\nUIActivityIndicatorView aiView = (UIActivityIndicatorView )[self viewWithTag:1001];\n  if (aiView){\n      [aiView stopAnimating];\n      [aiView removeFromSuperview];\n  }\n}\n. ",
    "dphase": "Thanks for the response, Dan!\nI ended up doing something very similar by adding an imageUrl property to SDWebImageManager.  So far it's working well -- hopefully we'll see something like this in future versions of SDWebImage.\n. ",
    "marcwickens": "Do something like\nint rand = arc4random() % 100;\nmyUrl = [NSString stringWithFormat:@\"%@?rand=%d\", myUrl, rand];\nAdding a random number to the end of your url will cause it to be reloaded.\n. ",
    "lqik2004": "I have the same problem.When I debug the app,it works fine,but when i want to release log says:\nViewController.m:10:9: 'SDWebImage/UIImageView+WebCache.h' file not found\n. Thank You\uff0crodchile.I have the same problem and you saved my day!\n. ",
    "aymericio": "Add this on the Header Search Path :\n$(SRCROOT)/SDWebImage\n. I have a similar error.\nError: CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 24 bits/pixel; 3-component color space; kCGImageAlphaNone; 288 bytes/row.\n. ",
    "samiibnauf": "yes.. Im using the last version..\n. ",
    "itsmeduncan": "@rs - I am seeing this issue as well. Is there any movement? Or even a work around other then re-rotating it every single time...\n. ",
    "kmcgill88": "I'm having this same issue. Has anyone found a fix?\n. I'm seeing the same crash. Has anyone found a solution for this? I'm using Swift and Xcode 6.1.1. \n. ",
    "KanybekMomukeyev": "I added SDWebImage as \" pod 'SDWebImage'  \", also having this same issue!\n. same here, this takes a lot of memory, and don not release. \n\n- (UIImage )decodedImageWithImage:(UIImage )image \n  {\n  }\n. Same here!\n. same here\n. ",
    "peterjkirby": "I am using SDWebImage 3.7.1 and am also seeing this issue.\n. ",
    "samkass": "I see images rotated if the EXIF data specifies a different rotation than the image data is stored.  (ie. an image stored in landscape that you know should be displayed portrait only because of its EXIF.)\nEdit: It seems that UIImageJPEGRepresentation does not generate a JPEG with the orientation that the UIImage got from the original JPEG.  So SDWebImage is downloading the JPEG and producing a UIImage that looks correct, but saving a rotated JPEG into the cache.  The easiest workaround seems to be to just rotate the UIImage to always be up when it's downloaded, as done here: https://gist.github.com/densa/1064652\n. It doesn't look like my pull request was ever integrated. It's easy enough to reproduce. I had to fork it over this issue so don't know if the root still has the issue. . Images can get into SDWebImage a variety of ways, can't it?  I fixed the bug at the source of the bug-- the serialization of the image which would otherwise be incorrect, regardless of how the system acquired the image.  Thus if an image is injected directly by passing in the bytes it still works.  It also means this extra work doesn't have to be done in the case of an in-memory cache.\nAs for PNG, it's just the opposite.  The whole problem is that UIImage does support an orientation flag which isn't getting written out.  Now, instead, the whole UIImage is rotated and the orientation is reset to \"up\" so a JPEG or PNG with no orientation flag set is still correct.\n. You could make a good case that this is a workaround for a bug in UIImageJPEGReresentation, which really should put the orientation in the metadata.  You could also rewrite SDWebImage to keep original JPEG data around instead of turning it into an intermediate UIImage... But UIImages are very convenient and that doesn't cover the case where a developer hands you a UIImage explicitly.  But the current implementation, when handed a rotated image, stores an incorrect JPEG and that needs to be fixed one way or the other--either produce a correct JPEG header with the existing bits or rotate the bits to match the header.  I chose the latter because it simplifies the code and continues to use the built-in JPEG encoder.\n. This case is extremely easy to reproduce if you use an image picker to grab images out of the photo album and stuff them into an on-disk SDWebImage cache, then re-load the images from cache.  Just take a bunch of pictures while rotating your iDevice to various orientations... iOS just stores the bots off the sensor and puts the orientation in the JPEG metadata.\n. ",
    "fcesc": "Finally it works fine. There was a problem with the SDWenImage static\nlibrary file (.a) I was using for my app. After compiling the source SD\ncode with mine, everything works fine.\nThanks,\nFrancesc.\n2012/3/10 Olivier Poitrey <\nreply@reply.github.com\n\nDid you import UIImageView+WebCache.h?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/76#issuecomment-4432190\n. \n",
    "bamboohome": "```\nNSString *imageUrl = [NSString stringWithFormat:@\"%@100_%d.png\", [plistData objectForKey:@\"ImageUrl\"], index]; \nNSLog(@\"imageUrl: %@\", imageUrl); \n/ Result: http://.../100_503502.png /\nNSURL *url = [[NSURL alloc] initWithString:imageUrl];\n[imageButton setImageWithURL:url placeholderImage:[UIImage imageNamed:@\"addIcon.png\"] ]; \n```\naddIcon@2x.png and addIcon.png exists.\n. thank you so much :-)\n. ",
    "aaron007": "I write this code :\n   UIImageView image=[[UIImageView alloc] initWithFrame:CGRectMake(110, 0, 100, 100)];\n    [image setImageWithURL:[NSURL URLWithString:@\"\"] placeholderImage:[UIImage imageNamed:@\"error.png\"]];\n    [self.window addSubview:image];\nthe \"error.png\" is in my project ,  but when it show ,the error.png will dismiss quickly! Then a white placeholder image shown!   who know why?   but I create a new project ,then add SDWebImage ,it can be not shown again.but in my old project does't work ,Thank you for your answer!!\n. yes,Thank you!\n. OK, Thank you !\n. the setBackgroundImageWithURL:  and setImageWithURL: methods won't both work in my project!  Please check it! \n. the   - (void)webImageManager:(SDWebImageManager )imageManager didFinishWithImage:(UIImage )image userInfo:(NSDictionary )info    method can't be invoked!\n. oh, I have found your mistake ,      the method signature is wrong \nIn UIButton+WebCache.m file:\nyour code is \n- (void)webImageManager:(SDWebImageManager )imageManager didFinishWithImage:(UIImage )image userInfo:(NSDictionary *)info\nshould be changed below:\n- (void)webImageManager:(SDWebImageManager )imageManager didFinishWithImage:(UIImage )image forURL:(NSURL )url userInfo:(NSDictionary )info;\nI have tested it works !\n. ",
    "caoguangyao": "find a way http://www.wrichards.com/blog/2011/11/sdwebimage-fixed-width-cell-images/\nif you are using tableview,but I don't like it,because of hardcode the imageview size\n. ",
    "iamb55": "How do I get that in Xcode 4.3.1 do a bt in lldb?\n. - thread #1: tid = 0x1f03, 0x9c9bb9c6 libsystem_kernel.dylib__pthread_kill + 10, stop reason = signal SIGABRT\n  frame #0: 0x9c9bb9c6 libsystem_kernel.dylib**pthread_kill + 10\n  frame #1: 0x9c4caf78 libsystem_c.dylibpthread_kill + 106\n  frame #2: 0x9c4bbbdd libsystem_c.dylibabort + 167\n  frame #3: 0x0242be78 libc++abi.dylib_Unwind_DeleteException\n  frame #4: 0x0242989e libc++abi.dylibZL17default_terminatev + 34\n  frame #5: 0x022a6f17 libobjc.A.dylib_objc_terminate + 94\n  frame #6: 0x024298de libc++abi.dylib_ZL19safe_handler_callerPFvvE + 13\n  frame #7: 0x02429946 libc++abi.dylibstd::terminate() + 23\n  frame #8: 0x0242aab2 libc++abi.dylib__cxa_throw + 110\n  frame #9: 0x022a6de1 libobjc.A.dylibobjc_exception_throw + 311\n  frame #10: 0x01a53cbd CoreFoundation-[NSObject doesNotRecognizeSelector:] + 253\n  frame #11: 0x019b8ed0 CoreFoundation___forwarding_** + 432\n  frame #12: 0x019b8cb2 CoreFoundation_CF_forwarding_prep_0 + 50\n  frame #13: 0x00004c42 Clef-[PreferencesViewController tableView:cellForRowAtIndexPath:] + 626 at PreferencesViewController.m:114\n  frame #14: 0x00f69c54 UIKit-[UITableView(UITableViewInternal) _createPreparedCellForGlobalRow:withIndexPath:] + 494\n  frame #15: 0x00f6a3ce UIKit-[UITableView(UITableViewInternal) _createPreparedCellForGlobalRow:] + 69\n  frame #16: 0x00f55cbd UIKit-[UITableView(_UITableViewPrivate) _updateVisibleCellsNow:] + 1350\n  frame #17: 0x00f646f1 UIKit-[UITableView layoutSubviews] + 242\n  frame #18: 0x00f0dd42 UIKit-[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 178\n  frame #19: 0x01a53e42 CoreFoundation-[NSObject performSelector:withObject:] + 66\n  frame #20: 0x02c7c679 QuartzCore-[CALayer layoutSublayers] + 266\n  frame #21: 0x02c86579 QuartzCoreCA::Layer::layout_if_needed(CA::Transaction_) + 231\n  frame #22: 0x02c0b4f7 QuartzCoreCA::Context::commit_transaction(CA::Transaction) + 377\n  frame #23: 0x02c0d3f6 QuartzCoreCA::Transaction::commit() + 374\n  frame #24: 0x02c0cad0 QuartzCoreCA::Transaction::observer_callback(__CFRunLoopObserver_, unsigned long, void_) + 80\n  frame #25: 0x01a2699e CoreFoundation__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 30\n  frame #26: 0x019bd640 CoreFoundation__CFRunLoopDoObservers + 384\n  frame #27: 0x019894c6 CoreFoundation__CFRunLoopRun + 1174\n  frame #28: 0x01988d84 CoreFoundationCFRunLoopRunSpecific + 212\n  frame #29: 0x01988c9b CoreFoundationCFRunLoopRunInMode + 123\n  frame #30: 0x029457d8 GraphicsServicesGSEventRunModal + 190\n  frame #31: 0x0294588a GraphicsServicesGSEventRun + 103\n  frame #32: 0x00ecf626 UIKitUIApplicationMain + 1163\n  frame #33: 0x0000268d Clef`main + 141 at main.m:16\n. That worked for me too.  Thanks.\n. ",
    "dbullard": "Has anyone figured this out? I'm having the same issue. \n. ",
    "priteshshah1983": "I'm having the issue as well.\n. I was able to resolve this issue in my project. Please note that I'm NOT using the static library approach and have copied the files directly into my project.\nI added the implementation files (.m) under Build Phases > Compile Sources.\nI'm not sure if this is the best way to fix it, but it works. I hope this helps someone.\n. Posting my comment here from the other thread:\nI was able to resolve this issue in my project. Please note that I'm NOT using the static library approach and have copied the files directly into my project.\nI added the implementation files (.m) under Build Phases > Compile Sources.\nI'm not sure if this is the best way to fix it, but it works. I hope this helps someone.\n. Thanks jmig, I was sure it was a PEBKAC issue.\n.  pandizajner, I took out MKAnnotationView+WebCache.h and MKAnnotationView+WebCache.m files later as I'm not using that functionality. So, that's one option.\nI haven't tried it, but the other option is to add MapKit framework to your project.\nI decided to go for Option 1 as I'm not using MKAnnotationView anyways.\n. Will this be the best way to make the compiler ignore this warning for now?\npragma clang diagnostic push\npragma clang diagnostic ignored \"-Warc-performSelector-leaks\"\n        id activityIndicator = [NSClassFromString(@\"SDNetworkActivityIndicator\") performSelector:NSSelectorFromString(@\"sharedActivityIndicator\")];\n\npragma clang diagnostic pop\nThanks.\n. It turns out armv6 was missing in the Architectures section. I added it and works now!\n. Since both Cocoapods and Carthage support dependencies, can FLAnimatedImage be declared as a dependency in the podspec and Cartfile respectively instead of bundling it? Is it specifically bundled in Vendors to support the manual installation use-case?\nPlease let me know if I'm missing something. In my case, I'm trying to use SDWebImage in a Carthage project that already uses FLAnimatedImage and running into Duplicate interface definition for class 'FLAnimatedImageView'. If Carthage supported subspecs, I could have only imported SDWebImage/Core instead, but it doesn't.. ",
    "memogonzalez": "Thanks  @priteshshah1983 I added the .m files to compile sources too and it worked!\n. I have the same problem, I had done all, \"Unrecognized selector sent to instance\" is the error. Xcode (4.3) autocompletes the methods of SDWebImage.\nDoes somebody know another solution to this problem?\nThanks!\n. ",
    "dmcdonx": "Issue duplicated using most recent code; it's definitely a bug.\n. ",
    "maddox": "Definitely a bug. I've been tracking this down all day. It's pretty critical. \nI'm using this block method in a fullscreen photo viewer view controller that gets retained. After I use it the first time, every ImageView that is loaded using any API in SDWebImage calls the photo viewer's success block.\n. ",
    "XMLSDK": "Always the same when printing indexPath.row in success block. Is it the blocks not queued up within any array?\n. ",
    "jmig": "In your .m file you should have\n    #import \"UIImageView+WebCache.h\"\ninstead of your header file, this is a category so you won't need it in the .h file.\nAre you sure you call the setImageWithURL in MainTableViewController.m ? Does the auto-completion works in Xcode ?\n. So I guess you've made a mistake in configuring the subproject.\nIf you installed it using the static library make sure it's embedded in your app when compiling.\nYou can also try to add all the files in your project instead of the static library (that's the way I do, because at the beginning the static library option wasn't available).\nGood luck\n. Great to here that !\nIf you add the files, you must add them to the target (don't forget the checkbox when using Add Files to Project)\n++\n. ",
    "pandizajner": "It doesnt matter where I import it, error looks the same. Yes, auto-completion works fine everywhere I type \"UIImage...\"\n. Static library means .xcodeproj included in the other one? I have no idea how to check if it is being compiled. I tried to add all files particularly but there were some problems eg. with libsdwebimage.a .\n. Hm... ok, but only if I try to build app with files copied directly I got this: http://cl.ly/430U1N0440383b2I3f2c\nI see yet another problem with libsdwebimage.a When I were using static library (so it means .xcodeproj right?) I were able to load this library to \"Link Binary With Libraries\"... but then I were always getting: http://cl.ly/3K161E3q2B2Y2j1N2T0r\nI feel so confused this situation... Don't know if I'm so foolish or there's something wrong...\n. Thanks! I copied the files again (no static library) and removed MKAnnotation, and Xcode builds it ok.\n. Yes, i have done it right this way and works ok since then... There must me something wrong with MKAnnotationView files.\n. ",
    "dmdeller": "I was having the same linker problem as in pandizajner's screen shots, but I was determined to use it as a static library. I got it to build by doing two things:\n1. Deleting MKAnnotationView+WebCache.h and MKAnnotationView+WebCache.m from Xcode (don't know why those two were a problem, hopefully I won't need them)\n2. Adding the -all_load flag to 'Other Linker Settings' in my app project, as seen in the first answer here: http://stackoverflow.com/questions/3998483/objective-c-category-causing-unrecognized-selector\nCaveat: sometimes it will still fail with the 'can't find .h' error, but if I do nothing else and just click 'Build' again, it works!\nUsing Xcode 4.3.2, for what it's worth. I'm using other static libraries as sibling projects in a shared workspace, and overall it has been an incredibly huge headache.\n. ",
    "keighl": "Was experiencing this issue too; adding MapKit.framework to \"Link With Binary Libraries\" fixed it.\n. ",
    "hussain-sohaib": "Hi,\nI am having problem Can not load file SDWebImage.xcode.Project because it is open in some other workspace.\nHow can i solve this problem?\n. ",
    "TST-sdavis": "The easiest way to resolve this behavior is to follow the installation instructions provided by the project. As soon as you follow these steps that error will go away.\nhttps://github.com/rs/SDWebImage#installation\n. Just as a sanity check, did you remember to include the #import  line in your implementation file?\nThe only other item that could be wrong, that many people overlook, is making sure the double quotes are around the target dependencies.  Aside from that, just making sure you aren't using the Annotations version.\n. Yes, I am.\nIt sounds like you have everything setup correctly. You might try cleaning the project and re-building. If that doesn't work, it may not hurt to start over from scratch.  I believe I had to do mine twice, but I have not had any issues with it since following those instructions directly.\nThe only other thing I could try would be for you to archive your project and send it to me for me to try and fix it for you. Shrug.\n. ",
    "PerishableDave": "Followed the instructions to the tee and still received the unrecognized selector exception.\nI'm running Xcode 4.5\nAdded SDWebImage.xcodeproj to my master Xcode project.\nAdded SDWembImage ARC to the Target Dependencies of my target.\nAdded libSDWebImageARC.a and ImageIO.framework to Link Binary With Libraries\nAdded -ObjC to Other LinkerFlags\nAdded \u201d$(TARGET_BUILD_DIR)/usr/local/lib/include\u201d and \u201d$(OBJROOT)/UninstalledProducts/include\u201d to Header Search Paths\nAny ideas?\n. Yep, definitely added the \"#import \" and I'm not using the annotated version. As far as the target dependencies, are you talking about \"Target Dependencies\" in the \"Build Phases\" of the project settings?\n. ",
    "bgreenlee": "I'm having the same issue. I followed your instructions carefully.\n. Actually, figured that one out: I had added the entire SDWebImage repository to the project, rather than just the XCode project. However, now I'm seeing:\nUndefined symbols for architecture i386:\n  \"_OBJC_CLASS_$_MKAnnotationView\", referenced from:\n      l_OBJC_$_CATEGORY_MKAnnotationView_$_WebCache in libSDWebImage.a(MKAnnotationView+WebCache.o)\nld: symbol(s) not found for architecture i386\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nBut I can open a separate issue for this if I don't figure it out.\nUpdate: Figured the above out. You need to add the MapKit framework to your project.\n. ",
    "ashishmankar": "If you are not adding MapKit framework delete following files from the SDWebImage\nMKAnnotationView+WebCache.h\nMKAnnotationView+WebCache.m\n. ",
    "Stan92": "I get the same warning too.. \n. ",
    "andybee": "I've tweaked it to use a proper NSObject copy call and passed it through the compatibility methods to make it ARC-safe (hopefully!)\n. ",
    "laitinen": "Me too. My error:\nTerminating app due to uncaught exception 'NSRangeException', reason: '*** -[__NSArrayM removeObjectAtIndex:]: index 1 beyond bounds [0 .. 0]', this was on line 263 in SDWebImageManager.m, ([cacheDelegates removeObjectAtIndex:idx];). A fix would be greatly appreciated.\n. ",
    "jamesstout": "Not sure why idx would be >= the array count, but I put this fix in SDWebImageManager:\n- (void)imageCache:(SDImageCache )imageCache didFindImage:(UIImage )image forKey:(NSString )key userInfo:(NSDictionary )info\n``` objc\n-    [cacheDelegates removeObjectAtIndex:idx];\n-    [cacheURLs removeObjectAtIndex:idx];\n\nif( [cacheDelegates count] > idx){\n[cacheDelegates removeObjectAtIndex:idx];\n}\n\nif( [cacheURLs count] > idx){\n[cacheURLs removeObjectAtIndex:idx];\n}\n``\n. Does[NSURL URLWithString:imageURL]` definitely return a valid URL?\n\nMaybe put some logging in SDWebImageManager.m in - (void)imageDownloader:(SDWebImageDownloader *)downloader didFailWithError:(NSError *)error;\n. ",
    "ananfang": "Thanks\n. ",
    "evfemist": "Hi! I have SDWebImage (2.6) installed by cocoapods. is this issue fixed in this version?\nBecause when I open same image url in different ViewControllers - the latest block called twice.\nI fix it by adding \nNSMutableArray downloadSuccessBlocks;\nNSMutableArray cacheSuccessBlocks;\nwith same behavior like in\nNSMutableArray downloadDelegates;\nNSMutableArray cacheDelegates;\n. ",
    "devangmundhra": "This probably was not the issue. Retrying with the same steps gives the following error again:\nUndefined symbols for architecture i386:\n  \"OBJC_CLASS$MKAnnotationView\", referenced from:\n      l_OBJC$CATEGORY_MKAnnotationView$_WebCache in MKAnnotationView+WebCache.o\nld: symbol(s) not found for architecture i386\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n. Solved:\nExplicitly add all header files (but do no add to target)\nCheck for the Build Settings in the SDWebImage Project and match it with the Parent Project.\nThat does the trick for me.\n. Not related to SDWebImage so closing.\n. ",
    "ethanwa": "Nevermind... looks like a fix 5 days ago fixed the issue. Thanks!\n. ",
    "Glchriste": "I figured out the issue--not related to SD at all, rather my use of global variables. :) I need to say if(testImage) rather than if(cachedImage).\n. ",
    "simonholroyd": "I've been experiencing this same issue but I've noticed that facebook is responding with a 403 rather than redirecting correctly.  The weird part is that facebook's response is different depending on the connection the device has (tested wifi, 3g, and LTE).  LTE produces the 403 error while the others do not.\n. (and it's independent of SDWebImage as I've tested with other image loading libraries.  so.... this issue should remain closed)\n. ",
    "cbowns": "Just kidding, some of these are fixed in newer commits, I\u2019ll pull and merge and re-send this.\n. Your app is directly linking SDWebImage as a static library, and using iOS 8's dynamic frameworks to link it at runtime. You'll want to remove one of those two.\n. ",
    "danipralea": "can you please let us know how did you actually managed to display an image from ftp ? \nThanks\n. I have the same issue. Clearing, cleaning the cache, removing the image from the cache manually ... Nothing works, the cached image is still displayed, even if the image on the server has changed.\n. It's not working for me. The clearing of cache I mean. Would love to see it fixed/working.\n. +1 I have the same problem\n. ",
    "penso": "Well not really. That works if the view you're dismissing has 1 or 2 images, but if that view has tons (let's say, a twitter user profile, etc) or as much as your main view, that won't be efficient.\nA cacheKey specified per view would then be more efficient.\n. Ok let's say you have 2 views in your app, one main view listing tweets, one user view when you see a user profile, both have 100 images loaded.\nWhen the user goes back from the user profile view to the main view you want to release those 100 images you loaded as you won't need them anymore. With your commit that profile view needs to keep all those image URL in a NSArray and call removeImageForKey: 100 times. I want to do neither of them.\nIf (SDImageCache *) cache.memCache was a dictionary of dictionaries per cacheKey (cacheKey being set to 'default' if unspecified), and I had methods like :\nsetImageWithURL:placeholderImage:forCacheKey\nclearCacheforKey:\nI could :\n- request to fetch an image using a cacheKey (which would be different for the master and the profile view)\n- clear that cache when the profile view unload (in a single step, without storing the NSImages I've loaded in that view)\n. That would use the disk cache twice, the cacheKey would only be used for the memory cache.\n. My feeling is having a NSDictionary for loading in memory only once would be 'overkill', and those cacheKey would be used for views (user profile) which are meant to be unloaded at some point anyway.\n. Well I'm all for better, the current issue is being able to clear cache when a dismissed view has loaded lots of images, the cacheKey seemed the best in such case, and quick to implement.\nA more complex expiration would probably be nice, but max time or max last use time wouldn't allow you to instantly clear unnecessary images from memory (view has just been dismissed, so images were used recently).\nI can see uses for both system, they are complementary to my opinion.\n. Clearing the whole thing would be the short answer I guess.\nThe memory cache and the disk cache would have the same key, only the memory one would be put within another dictionary with either a 'default' key, or one you specified. The disk cache and memory cache would end up something like :\nmemoryCache = {:default => {:foo1 => \"value\", :foo2 => \"value\"}, :anotherCacheKey => {:foo3 => \"value\"}}\ndiskCache = {:foo1 => \"value\", :foo2 => \"value\"}\n:default and :anotherCacheKey being the ones I was talking about\n:foo1 and :foo2 being your current cacheKey for a image URL\nso yes you'd end up having maybe duplicates in :default and :anotherCacheKey but release one (hint: to clear all memory when releasing a view) would take a single method call. Easy and efficient.\n. (default meaning if the developer doesn't use a cacheKey, it works the way it does now)\n. Because maintaining it on my side with a view including 100 images requires calling removeImageForKey 100 times every time the view unloads?\n. ",
    "steveriggins": "ok but the image is 0x0, is there ever a case this is a value image?\n. I implemented a change where I now reload the image after a delay, and the crash has been removed.  I still maintain that there is a race condition in the error handling that SDWebImageManager may want to synchronize on or something\n. ",
    "siancu": "I did, without the ImageIO it doesn't link. This doesn't seem to have anything to do with ImageIO, but with ARC. Does it build for you in an ARC-enabled project, without that change?\n. ",
    "tolik85": "But button's background image is an UIImage instance and not UIImageView...\n. Right, thanks. Is there some reason there is no built in methods on UIButton's category to use activity indicator (like there is with UIImageView's category?\n. ",
    "iunion": "another is in SDWebImagePrefetcher.m\nyou forgot to add\n@synthesize options;\n. ",
    "wilzog": "Thanks for the quick response. This should solve my problem \n. ",
    "firdousali86": "like this:\nimport < SDWebImage/UIImageView+WebCache.h >\n. yeah, cause this text editor was not showing it so i added spaces\n. < appname >.xcodeproj/project.pbxproj:              USER_HEADER_SEARCH_PATHS = \"\\\"$(TARGET_BUILD_DIR)/usr/local/lib/include\\\" \\\"$(OBJROOT)/UninstalledProducts/include\\\"\";\n< appname >.xcodeproj/project.pbxproj:              USER_HEADER_SEARCH_PATHS = \"\\\"$(TARGET_BUILD_DIR)/usr/local/lib/include\\\" \\\"$(OBJROOT)/UninstalledProducts/include\\\"\";\n< appname >.xcodeproj/project.pbxproj:              USER_HEADER_SEARCH_PATHS = \"\\\"$(TARGET_BUILD_DIR)/usr/local/lib/include\\\" \\\"$(OBJROOT)/UninstalledProducts/include\\\"\";\n. no neither in path nor in app name\n. fixed\n. ",
    "rodchile": "HI Guys, \nI had had the same error and couldn't fix it with the instructions detailed here. After google it, I found this:\nhttp://stackoverflow.com/a/11586502/685901\nAnd it worked ... I wonder what is the problem in the config spec? One weird thing is I faced this issue ONLY when I archive the project. I doesn't replicate if you build and run the project in the iOS simulator.\n. ",
    "jomnius": "Same problem, about same solution: I added to project instead of target, so that doesn't make any difference. However I used path \"$(SRCROOT)/../SDWebImage\", since my copy of SDWebImage is located at the same folder level as my project.\n. ",
    "spiderguy84": "I did see this issue and I still have same error. \nSent from my iPhone\nOn May 19, 2012, at 4:25 AM, Olivier Poitrey reply@reply.github.com wrote:\n\nPlease, see #125\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/128#issuecomment-5800508\n. Don't close an issue that's not fixed\n. Also, #125 never brings up the error that I get now:\n\nclang: error: no such file or directory: '(Deleted)/Library/Developer/Xcode/DerivedData/Lakeside-fklinocjntxipgdoacixgozahodl/Build/Products/Debug-iphonesimulator/libSDWebImage.a'\n. ",
    "sgdesmet": "True, it's not directly related, but if the subproject can't build, then the parent project won't be able to find it's headers.\nI was trying to figure out why the headers weren't being found, stupidly overlooking the compiler error shown for SDWebImage...\n. Yep, it works, thx!\n. ",
    "yvestan": "Hi ! Same problem ;)\n. ",
    "nickdaugherty": "Bummer this isn't part of SDWebImage :( Would be very nice to have UIActivityIndicatorViews while images are loading out of the box, rather than adding another external repo or hacking something together.\n. ",
    "ghost": "+1\n. me too, but it can't be fixed by grampe said, still the question.\n. @mhaleem where did you install from? I tried download from https://github.com/rs/SDWebImage/releases, it works.\n. +1 Would love to see this fixed.\nAccording to this stackoverflow post the images are cached for a week\nhttp://stackoverflow.com/questions/6053416/what-happens-to-sdwebimage-cached-images-in-my-app-when-the-image-file-on-the-se\n. When I download the master the webp library doesn't come along with it? How can I include this in my project?\n. Ah okay that worked. Now I have this issue. \n\nUndefined symbols for architecture i386:\n  \"_WebPDecode\", referenced from:\n      +[UIImage(WebP) sd_imageWithWebPData:] in UIImage+WebP.o\n  \"_WebPInitDecoderConfigInternal\", referenced from:\n      _WebPInitDecoderConfig in UIImage+WebP.o\nld: symbol(s) not found for architecture i386\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n. Same problem in my project\u2026 Some news maybe ?\n. Agreed! +1\n. Actually there is a crash:\n- at line number 187:\n[self.imageData appendData:data];\n- at line number 258:\nNSUInteger received = self.imageData.length;\nCan it be fixed in the next version?\n. and as i supposed, under caches are only two pictures(first and second row):\n\n. no idea:/ I resigned using SDWebImage in this case. @bpoplauschi, have you similar problem?\n. I set progress to nil, this code will work, but can you tell why set progress:^(NSUInteger receivedSize, NSInteger expectedSize) is wrong? thanks\n. Never mind . I had a macro defined. \"imageURL\". Didn't realize you guys use imageURL in this plugin.\n. Good point will keep this in mind for next time. Thanks. \n. I've implemented this change and have verified that the images are never loaded from memory, but I'm still getting the spikes (sometimes 100MB+) when some images are first loaded into the imageviews in my tableview.\n. ",
    "anton-matosov": "+1\n. SDWebImage (3.7.1)\nI have received similar crash today:\nCrashed: NSOperationQueue 0x1b184140 :: NSOperation 0x16213d80 (QOS: USER_INTERACTIVE)\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS 0x000000000fd62000\nStacktrace:\nThread : Crashed: NSOperationQueue 0x1b184140 :: NSOperation 0x16213d80 (QOS: USER_INTERACTIVE)\n0  libsystem_platform.dylib       0x394fd990 _platform_memmove + 143\n1  Foundation                     0x28187a2b -[NSData(NSData) getBytes:length:] + 118\n2  Foundation                     0x28187a2b -[NSData(NSData) getBytes:length:] + 118\n3  <AppName>                      0x1f0d11 +[NSData(ImageContentType) sd_contentTypeForImageData:] (NSData+ImageContentType.m:13)\n4  <AppName>                      0x1fe06f +[UIImage(MultiFormat) sd_imageWithData:] (UIImage+MultiFormat.m:22)\n5  <AppName>                      0x1f7327 -[SDWebImageDownloaderOperation connectionDidFinishLoading:] (SDWebImageDownloaderOperation.m:347)\n6  CFNetwork                      0x26db4f69 __65-[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:]_block_invoke + 56\n7  CFNetwork                      0x26db4f21 -[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:] + 184\n8  CFNetwork                      0x26db5015 -[NSURLConnectionInternal _withActiveConnectionAndDelegate:] + 36\n9  CFNetwork                      0x26c74e57 ___ZN27URLConnectionClient_Classic26_delegate_didFinishLoadingEU13block_pointerFvvE_block_invoke + 78\n10 CFNetwork                      0x26d2e937 ___ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 + 70\n11 libdispatch.dylib              0x3936cec3 _dispatch_client_callout + 22\n12 libdispatch.dylib              0x39374713 _dispatch_block_invoke + 450\n13 CFNetwork                      0x26c65e9b RunloopBlockContext::_invoke_block(void const*, void*) + 18\n14 CoreFoundation                 0x27366c29 CFArrayApplyFunction + 36\n15 CFNetwork                      0x26c65d83 RunloopBlockContext::perform() + 182\n16 CFNetwork                      0x26c65c4d MultiplexerSource::perform() + 216\n17 CFNetwork                      0x26c65ae1 MultiplexerSource::_perform(void*) + 48\n18 CoreFoundation                 0x27416827 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 14\n19 CoreFoundation                 0x27416417 __CFRunLoopDoSources0 + 454\n20 CoreFoundation                 0x2741477f __CFRunLoopRun + 806\n21 CoreFoundation                 0x273671e9 CFRunLoopRunSpecific + 516\n22 CoreFoundation                 0x273a7fab CFRunLoopRun + 98\n23 <AppName>                      0x1f5fa3 -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:107)\n24 Foundation                     0x28212cc5 __NSOQSchedule_f + 192\n25 libdispatch.dylib              0x3937704f _dispatch_queue_drain + 1762\n26 libdispatch.dylib              0x3937002f _dispatch_queue_invoke + 282\n27 libdispatch.dylib              0x393783dd _dispatch_root_queue_drain + 400\n28 libdispatch.dylib              0x3937824b _dispatch_worker_thread3 + 94\n29 libsystem_pthread.dylib        0x39501e29 _pthread_wqthread + 1024\n. ",
    "vittoriom": "+1\n. ",
    "MartinHerman": "+1\n. ",
    "leonardoobaptistaa": "Hey @MartinHerman ,\nyou can add this other project to your Podfile: https://github.com/JJSaccolo/UIActivityIndicator-for-SDWebImage\nThey don't want an activity indicator on the main project.\n. ",
    "Nihility-Ming": "Create a category is nice idea.   :)\n. ",
    "gotmayonase": "Just ran into this same issue.\n. ",
    "wcrtr": "I'm seeing the same thing -- I noticed that there was code merged about a month ago that was supposed to use the ../../Headers directory vs. the SDWebImage, but I updated to the latest and it's still building to SDWebImage.  Is this supposed to be resolved?\n. @ShumiGmail -- you mean the SDWebImage folder that is created in the built products directory?\n. Maybe not ideal solution but I just included all the source files vs using the .a file.\nSent from my iPhone\nOn Jun 6, 2012, at 8:28 PM, Daniel Kramerreply@reply.github.com wrote:\n\nI've tried the above suggestion and having no luck getting around this error.  Any other helpful advice?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/132#issuecomment-6168131\n. \n",
    "ShumiGmail": "I have already used the latest one but it's the same\n. I have resolved the issue.\nThe solution is move whole SDWebImage folder into project folder.\n. yes...put the whole SDWebImage folder (include examples) into your app directory.\n. ",
    "danielkramer": "I've tried the above suggestion and having no luck getting around this error.  Any other helpful advice?\n. Right, that doesn't sound ideal.  I'm guessing you tried copying the source directories to another location.. that didn't do it for me.   Hopefully the author will chime in, I'll ask an xcode expert friend if he can take a look\n. I just found a solution that worked for me.  I tried several methods found on StackOverflow for adjusting the header paths to no avail.  I decided to add the file \"UIImageView+WebCache.h\" to my main project.. simply browsed to the location on the filesystem and added.  So now that file appears in my main project and in the SDWebImage.xcodeproj subproject.  Ran an Archive and it worked.  Seems a bit dumb I couldn't find a header search path but this is pretty simple and got me up and running.  Better then adding all the project files\n. ",
    "piotrb": "grumble why did you guys have to end up reverting that commit I contributed? (the one the OP mentions) .. failing archive builds is a pain .. and having to modify SD sucks .. I want to maintain it as a submodule so I can get easy updates, SD is big enough not to just drop it into the app as a few files in Vendor folder .. \nDid anyone find a solution to this (short of putting the header drop off back to what 2125d13 added in)?\n. After finding this StackOverflow article: http://stackoverflow.com/questions/5543854/xcode-4-cant-locate-public-header-files-from-static-library-dependancy\nTurned out that setting my headers path to: \"$(PROJECT_TEMP_DIR)/../UninstalledProducts/include\" made it finally properly archive for me.\n. ",
    "joxenford": "@piotrb I just ran into the same issue and your fix worked for me too.  Thanks! This was incredibly frustrating as my project is 98% complete and almost ready to upload to Apple.\n. ",
    "snowleung": "@piotrb thank you,i set the header search path to \"$(PROJECT_TEMP_DIR)/../UninstalledProducts/include\"  and it work~~thanks\n. ",
    "pius": "@piotrb Thanks! Please post this to Stack Overflow so we can all vote you up. ;)\n. ",
    "johnlinvc": "@piotrb Thanks! Please post this to the Stackoverflow question.\n. ",
    "HotWordland": "http://stackoverflow.com/questions/10714600/cdvplugin-h-file-not-found-in-cordova-as-component-cleaver \nI solved the issue is add \"$(OBJROOT)/UninstalledProducts/$(PLATFORM_NAME)/include\" to the Header search Path\n. ",
    "m-irfan": "GOTO this file UIImageView+UIActivityIndicatorForSDWebImage.h\nChange these two lines\n```\nimport \"UIImageView+WebCache.h\"\nimport \"SDImageCache.h\"\n```\nto \n```\nimport \nimport \n```\nthats it\nrecompile code and error gone gone\nBest Regards,\nHappy Coding. ",
    "calebshay": "Ran into the same issue.  I had added CoreImage, I had forgotten to add ImageIO.framework.  That fixed it.\n. ",
    "hamishcrittenden": "Yeah, Needs MapKit too\n. ",
    "Tr736": "Thanks  for all your input guys. it worked :)\n. ",
    "xyxdasnjss": "Thanks,it worked :+1: \n. ",
    "SixBe": "Olivier,\nIt works like a charm. Thanks for the responsiveness.\nM.\nMichael Gachet\nSixBe Owner | iOS Freelancer\nOn Tuesday, June 5, 2012 at 01:19 , Olivier Poitrey wrote:\n\nPlease tell me if this commit fixes your issue\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/137#issuecomment-6114133\n. \n",
    "manoelfranklin": "Yes for both questions!\n. I couldnt make it faster... Still trying and working on this. Sorry :(\nAnyone can help?\n. ",
    "bassrock": "Any more thought into this issue? I'm experiencing the same problems.\n. I looked at the http traffic and that is normal. It is loading from the cache that seems to be the issue. Right now I have 335 images stored in the cache and when the app tries to pull from that there seems to be a lot of lag time.\n. It actually seems to be when I do async tasks in other threads\n. Sadly that didn't work, I put  dispatch_async(dispatch_get_main_queue(), ^{}); around the SDWebImage setImageURL placeholderImage: . So what I have figured out is that I have a task running asynchronously using GCD for somereason the SDWebImages will not load until that task actually finishes, which is confusing to me because my separate task is running in the background. This is also true if I disable my task and then try to enable GameCenter. I get the same type of response Game Center is supposed to load in the background, but for some reason SDWebImage is waiting for the GameCenter Auth thread to finish. Any clues as to why this may be?\n. +1\n. Yea i think it would make more sense to see the placeholder instead.\n. :+1: \n. @twilly86  sorry try this: https://gist.github.com/bassrock/2400d9c7167f626d50ca\n. :+1: \n. @flovilmart There are about 4 places where SDWebImage calls sharedApplication for background tasks. sharedApplication can not be used in app extensions, like today views, watch extensions, or other frameworks.\nI made it a seperate target because I did not know of any other way to do this properly. \n. Will that work for Carthage still?\n. @flovilmart so that won't work, when you check the app extension safe box in Xcode for the framework a build will error out because it checks at compile time not runtime.\n. While true you still get a warning about linking dylib unless the App Extension was checked on the framework and my understanding is that if we were to go with your proposed solution the framework won't build with that checked, and its possible you can get a rejection. I could be totally wrong\n. @flovilmart I just downloaded your branch and tried to build it with the \"Allow App extension API only\" checked. And get a build failure.\n\n. Yes it does run properly when you disable that checkbox. However you still get a linking against dylib is unsafe when that is unchecked, which could still trigger a rejection.\n\"To configure an app extension target to use an embedded framework, set the target\u2019s \u201cRequire Only App-Extension-Safe API\u201d build setting to Yes. If you don\u2019t, Xcode reminds you to do so by displaying the warning \u201clinking against dylib not safe for use in application extensions\u201d. \"\nhttps://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html\n. However based on that and not having tried submitting an app with that warning I am unsure if it actually will trigger a rejection. But I do not doubt it.\n. Ok that sounds better then! Sweet! Now my question would be why did AFNetworking do the compile flags vs. this way. More so curiosity/specific reason for submission or something.\n. I will be trying with @flovilmart's method to submit an app within the next few days with WatchKit and TodayView support. So far it works with Apple's TestFlight so we will see if it can make it past a real review.\n. @flovilmart yea we will see. With the floodgates opened this morning it's now just deciding if it is ready.\n. @flovilmart well my app went into review this morning using this patch. We should have an answer soon.\n. @justinschier yes it was. I thought i replied to this but it looks like my reply got deleted.\n. Closing in favor of #1085 \n. :+1: But also suggest lowering the deployment target to 8.0 on the framework.\n. :+1: \n. Chime in here. Quick update on my app review. There was a legal thing I had to fix on my app, but after an appeal its still \"In Review\" so we will see where it goes.\n. AND APPROVED :+1: \n. Processing for the store right now but once its available: https://itunes.apple.com/us/app/disney-wait-times/id963982614?ls=1&mt=8\nIts (hopefully) the first DisneyLand Wait Time app for the \uf8ffWatch.\n. @auibrian would be helpful if you could provide a solution\n. @rs Any chance of this getting merged?\n. yes it is\n. @mythodeia yea that works actually. didn't think of that.\n. Been looking into this, currently looking at the best practices to do this.\n. Would be happy to support it but am unsure what the current state in the iOS world is to support this in the same codebase.\n. So in order for this to work it requires #823 as only NSURLSession is available on watchOS. As for the framework, it requires creating a second Framework target and adding a preprocessor macro to define WatchKit, from there it is just adding preprocessor ifs in the code. Which is easy, except that it requires NSURLSession.\n. ",
    "PilchardFriendly": "Any luck with this?  It's popped up in some cases in our app too.\nIt seems identical to the above.\nWe have: TableCell [contains]-> UIImageView (thumbnail): [creates]-> CustomViewController [contains]-> UIImageView (full).\nBoth the thumbnail and the full view have the full image url.  Clicking on the thumbnail will create a new UIImageView and add it to the navigation controller.   Looking at network traffic, I can see that all images are in cache. \nSometimes I have to click \"thumbnail\", \"back\", \"thumbnail\" to get the imageview to display properly.\nI'm assuming some race condition but it's fiendish to both reproduce and debug.\n. ",
    "octopusbaba": "same problem with the collection view .\nWhy does it takes time to load image from the cache in uicollectionview cell.\nIt first download image from url and stores in cache but when next time i re-run the app , it takes 2-3 secs delay in loading image from cache .\nShouldn't it be showing instantly???\n. - (void)cancelInternal {\n    if (self.isFinished) return;\n    [super cancel];\nif (self.dataTask) {\n    [self.dataTask cancel];\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:self];\n    });\n\n    // As we cancelled the connection, its callback won't be called and thus won't\n    // maintain the isFinished and isExecuting flags.\n    if (self.isExecuting) self.executing = NO;\n    if (!self.isFinished) self.finished = YES;\n}\n\n[self reset];\n\n}\nEXC_BAD_ACCESS when dispatch_async stop notification\nSAME ISSUE -> When can we get the update ???????. ",
    "cherpake": "still happening for me ...\nLast Exception Backtrace:\n0   CoreFoundation                  0x3475429e __exceptionPreprocess + 158\n1   libobjc.A.dylib                 0x32a6497a objc_exception_throw + 26\n2   CoreFoundation                  0x3469fb70 -[__NSArrayM objectAtIndex:] + 160\n3   Pogoplug                        0x0022fa6a -SDWebImageManager cancelForDelegate:\n4   Pogoplug                        0x00232c84 -UIImageView(WebCache) cancelCurrentImageLoad\n. Sure,\nBut what i did solved this issue for me:\n---------------------- SDWebImage/UIImageView+WebCache.m ----------------------\nindex 090c82c..0e229c3 100644\n@@ -64,7 +64,9 @@\n- (void)cancelCurrentImageLoad\n  {\n  -    [[SDWebImageManager sharedManager] cancelForDelegate:self];\n  -    @synchronized (self) {\n  -        [[SDWebImageManager sharedManager] cancelForDelegate:self];\n  -    }\n    }\n- (void)webImageManager:(SDWebImageManager )imageManager didProgressWithPartialImage:(UIImage )image forURL:(NSURL *)url\n-Evgeny\nP.S\nCan you please explain if this is by design or just a typo:\n    UIImage decompressedImage = [[UIImage alloc] initWithCGImage:decompressedImageRef scale:image.scale orientation:UIImageOrientationUp];\nand not\n    UIImage decompressedImage = [[UIImage alloc] initWithCGImage:decompressedImageRef scale:image.scale orientation:image.imageOrientation];\nBecause setting image orientation to UIImageOrientationUp is kinda strange.\nOn Nov 4, 2012, at 1:44 AM, Olivier Poitrey notifications@github.com wrote:\n\nCould you please try to add some @synchronized block around method contents of imageCache:didFindImage:forKey:userInfo: and cancelForDelegate: and tell me if it still happen?\n\u2014\nReply to this email directly or view it on GitHub.\n. 7 month later i realized it was my fault :-(\n. Wow this was long time ago... I think that by mistake I was trying to load a movie instead of image, or something like this. If I remember correctly adding additional check before loading images helped (size wise).. Unfortunately no, it's reported by some users (crash reports being sent), but i don't even have a reproduction case for it.\n. Some additional info, i tried to fix this issue by:\n1) removing the dispatch_sync in the diskImageExistsWithKey:(NSString *)key method - which resolved it, but scrolling between the images wasn't fluid (UI).\n2) changing the macro dispatch_main_sync_safe to by async - made UI much more fluid and responsive \n\nNow i saw that this change was introduced recently and probably for a good reason, but doing dispatch_sync on the main thread IMHO doesn't seem as a good idea, as it might be other wise busy, why not use dispatch_async here?\n. One last note: checking this commit https://github.com/rs/SDWebImage/commit/3a6d9481c9dd5a0e6a8c586cf6fb7f21127cbe65 i see that you turned a lot of async calls to sync calls, just saying.\n. Hi,\nHaving same thing:\n0   CoreFoundation                       0x305ae210 -[NSDictionaryM objectForKey:] + 200\n1   CEPHView                             0x00137083 -UIView(WebCacheOperation) sd_cancelImageLoadOperationWithKey:\n2   CEPHView                             0x00136fe3 -UIView(WebCacheOperation) sd_setImageLoadOperation:forKey:\n3   CEPHView                             0x00160501 -UIImageView(WebCache) sd_setImageWithURL:placeholderImage:options:progress:completed:\n4   CEPHView                             0x001618fb -UIImageView(WebCacheDeprecated) setImageWithURL:placeholderImage:options:completed:\n5   CEPHView                             0x000a6c8d __48-[PhotoViewController loadHiResWithFinishBlock:]_block_invoke (PhotoViewController.m:272)\n6   libdispatch.dylib                    0x3b3cf833 _dispatch_call_block_and_release + 8\n7   libdispatch.dylib                    0x3b3cf81f _dispatch_client_callout + 20\n8   libdispatch.dylib                    0x3b3d649f _dispatch_main_queue_callback_4CF$VARIANT$mp + 276\n9   CoreFoundation                       0x3063b8f1 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE + 6\n10  CoreFoundation                       0x3063a1c5 __CFRunLoopRun + 1298\n11  CoreFoundation                       0x305a4f4f CFRunLoopRunSpecific + 520\n12  CoreFoundation                       0x305a4d33 CFRunLoopRunInMode + 104\n13  GraphicsServices                     0x354fd663 GSEventRunModal + 136\n14  UIKit                                0x32ef016d UIApplicationMain + 1134\n15  CEPHView                             0x000b22d3 main (main.m:11)\n16  libdyld.dylib                        0x3b3f4ab7 start + 0\nHow removing SDWebImage and re-adding it should solve this?\n. Looking @ the code it looks for my uneducated eyes that you might want to do this:\n@implementation UIView (WebCacheOperation)\n- (NSMutableDictionary )operationDictionary {\n  @synchronized ( self ) {\n      NSMutableDictionary operations = objc_getAssociatedObject(self, &loadOperationKey);\n      if (operations) {\n          return operations;\n      }\n      operations = [NSMutableDictionary dictionary];\n      objc_setAssociatedObject(self, &loadOperationKey, operations, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n      return operations;\n  }\n  }\nJust so you would be sure that you associating & creating object just once\n. even when not using sharedImagePrefetcher and creating another one like @timkoma,\nits still happening - i can't figure why, but disabling perfecting solves the issue of images not being loaded.\nbut when i changed SDWebImageManager to create new _imageDownlaodeder and not to use [SDWebImageDownloader sharedDownloader] it solved the issue for me.\n. +1\n. Full crash report: https://s3.amazonaws.com/hockey-app-bucket/production/crashes/logs/336/257/790/original/bccacca47c31d0e3da018aae739adc8d.log?1432095495\n. And here another suggested fix:\n    CGImageSourceRef imageSource = CGImageSourceCreateWithData((__bridge CFDataRef)imageData, NULL);\n    if (imageSource && CGImageSourceGetCount(imageSource) > 0) {\nTo fix this crash report:\nhttps://s3.amazonaws.com/hockey-app-bucket/production/crashes/logs/337/803/767/original/e347822f85c24a5a6b231da3566dac36.log?1432246829\n. Yeah, my fix doesn't fix anything :-( Having same crash too... very weird.\nHere stack trace:\nThread 16 Crashed:\n0   libsystem_kernel.dylib               0x0000000195b8b270 __pthread_kill + 8\n1   libsystem_pthread.dylib              0x0000000195c29170 pthread_kill + 108\n2   libsystem_c.dylib                    0x0000000195b02b18 abort + 108\n3   libsystem_malloc.dylib               0x0000000195bc0d78 szone_error + 404\n4   libsystem_malloc.dylib               0x0000000195bc1134 free_list_checksum_botch + 32\n5   libsystem_malloc.dylib               0x0000000195bb9dc4 small_malloc_from_free_list + 920\n6   libsystem_malloc.dylib               0x0000000195bb5b30 szone_malloc_should_clear + 1792\n7   libsystem_malloc.dylib               0x0000000195bb53e4 malloc_zone_malloc + 112\n8   libsystem_malloc.dylib               0x0000000195bb9a04 malloc + 52\n9   AppleJPEG                            0x000000018a046b94 applejpeg_decode_create + 48\n10  ImageIO                              0x0000000184faf928 initImageAppleJPEG + 1292\n11  ImageIO                              0x0000000184fb4fb0 _CGImagePluginInitAppleJPEG + 76\n12  ImageIO                              0x0000000184eeeae8 makeImagePlus + 1052\n13  ImageIO                              0x0000000184ef7e88 _CGImageSourceGetPropertiesAtIndexInternal + 64\n14  ImageIO                              0x0000000184ef7de0 CGImageSourceCopyPropertiesAtIndex + 152\n15  Pogoplug                             0x00000001001669fc +[UIImage(MultiFormat) sd_imageOrientationFromImageData:] (UIImage+MultiFormat.m:52)\n16  Pogoplug                             0x0000000100166918 +[UIImage(MultiFormat) sd_imageWithData:] (UIImage+MultiFormat.m:35)\n17  Pogoplug                             0x0000000100202418 -[SDWebImageDownloaderOperation connectionDidFinishLoading:] (SDWebImageDownloaderOperation.m:376)\nAlthough its happening less frequently (or at least i think so).\n. Nope, its happening in the field with production app, and I don't know which image is causing this.\n. sorry man - we having holidays in my country, which doesn't leave with much of free time, once we return to work, will create a demo project, which isn't trivial- cause after initial cache, it will have to change the image on the server side...\n. Hi, this seems to cause crash on Mac OS X 10.8\n0 | libsystem_c.dylib | strcmp + 80\n1 | Remote for Mac | UIView+WebCache.m\u00a0line\u00a042-[NSView(WebCache) sd_internalSetImageWithURL:placeholderImage:options:operationKey:setImageBlock:progress:completed:]\n2 | Remote for Mac | UIImageView+WebCache.m\u00a0line\u00a048-[NSImageView(WebCache) sd_setImageWithURL:placeholderImage:options:progress:completed:]\nI guess one of the calls returns nil or something.. Sorry,\nI will open a separate issue with all the relevant information \n\nOn 2 Nov 2017, at 12:06, Bogdan Poplauschi notifications@github.com wrote:\n@cherpake https://github.com/cherpake the crash you described is not related to this issue. Please search for one that is or open a separate issue. Also, we need information like the SDWebImage version, how often does the crash occur, if you can replicate it with our demo project, ...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/rs/SDWebImage/issues/1384#issuecomment-341373681, or mute the thread https://github.com/notifications/unsubscribe-auth/AA1fxCI9wUOFvPMjmhCxiLJ8XK89SoCLks5syZQOgaJpZM4GtxWe.\n\n\n. I wasn't able to find any :(\nSorry. Yes, they do - but SDWebImageDownloaderOperation is a class and can have multiple crash scenarios unrelated one to another, and most of those are talking about cancelInternally, mine crash is in the successful completion of the NSURLSession task. Slightly different - but I'm probably missing something here.. ",
    "aburgel": "+1 on switching to NSCache.\ni was using the NSMutableDictionary version of SDImageCache in my app and noticed that it was getting flushed very frequently. flushing based on 'get_free_memory()' is not a good approach because the number of free vm blocks doesn't necessarily correlate to the amount of free memory. there is a lot of stuff in vm that can be flushed by the os when memory gets tight, including os caches, other apps, etc.\nso by flushing the image cache based 'get_free_memory()', you are not giving the OS a chance to clean up. NSCache also doesn't flush everything when memory is tight, just as many objects as necessary.\nafter switching to use NSCache, i noticed a significant increase in memory cache hits.\n. There is no way to disable the memory cache. But the cache is designed to flush itself when you get a memory warning, so you shouldn't need to worry it.\n. Clearing the cache might negatively affect other parts of your app, forcing you to redownload images.\nAnother option would be to append some changing value to image url, like the date. Images are cached by URL, so if the url is unique, you won't find it in the cache and will have to download it.\n. It's not entirely clear what you're asking. But here are some things to look into.\nYou'll either need a web service that returns a list of image urls or a web service that redirects to an image URL. Or alternatively, you can put a list of urls in your app and choose one of those to display.\nBut you should probably be asking this question on stackoverflow. You'll have more luck there.\n. ",
    "TheDom": "Another +1!\n. ",
    "nov": "+1\n. ",
    "dtorres": "self.inFavorCount++\n. To do that, I checked the difference between the timestamp before the request and after, like this\n```\nCFAbsoluteTime aTime = CFAbsoluteTimeGetCurrent();\n[UIImage setImage... success^(args) {\n     CFAbsoluteTime anotherTime = CFAbsoluteTimeGetCurrent();\n     if (anotherTime - aTime >= 0.03) {\n           //NOT CACHE\n     } else {\n }\n\n}\n```\nThat's how i did it, the 0.03 diff I made it up  (I  don't remember how much it was), you should measure on device and see what fits.\nObviously, this is a partial solution and the BOOL should really be there;\n. ",
    "shouze": "+1\n. ",
    "claaslange": "+1\n. ",
    "MotionMobs": "My bad was an issue on our web service. Thanks!\n. ",
    "papapete39": "sorry - xcode version is 4.5\n. ",
    "dmishe": "+1 one for this. I think i see some lags in UI first time imageFromKey goes to check the disk.\n. I could probably vote on this issue. I generate some images in code, at 2.0 scale, save them to cache. But then I always get 1.0 scaled images from cache.\n. So, I don't need the result block to be called on main thread in my case, I do some processing on images after cache and usually put cached image on another queue just for that.\nBut, now that I think of it, I could probably save cached image pre-processed :)\n. ",
    "markkrenek": "I agree. I need a quick way to check for the existence of the image on disk so that I grab it instead of initially displaying the placeholder image (-setImageWithURL:placeholderImage: currently always displays the placeholder even if it turns out the image was in the disk cache).\n. I still don't understand why you wouldn't check the cache first. That's the purpose of the cache.\n. ",
    "acoomans": "This pull request is still open. Can you pull the changes? Thanks.\n. ",
    "inamiy": "+1 for this issue.\nWe don't normally request images with URLs having @2x at tail even for retina devices.\nSo, we should either:\n1. load cached image (non-@2x) converting scale to 2 automatically via @romanr 's 34985cb\n2. or, provide some way to add @2x before saving to disk so that it will be recognized as scale=2 image when loaded.\nWe are living in a full-retina age, so I think this feature is very needed!\n. ",
    "farhanpatel": "+1 as well. We request are images with their resolution. As retina on the iPhone might be used for non-retina on iPad   It doesnt make sense to always label images with @2x\nI preferr @inamiy 's option number 1. It works well. Maybe also provide a way to override for some odd cases. \n. ",
    "MBulli": "This should work:\nNSURL *url = [[NSBundle mainBundle] URLForResource:@\"img\" withExtension:@\"png\"];\nOR\nNSString *path = [[NSBundle mainBundle] pathForResource:@\"img\" ofType:@\"png\"];\n. ",
    "rintoandrews90": "could you please specify any methods for loading images from Document Directory . ",
    "SerhiiMatvieiev": "@bpoplauschi But if do it as you say image will stored twice (in own cache directory and SDImageCache directory), right ? \nMaybe you know how long SDImageCache store image ? And if SDImageCache automatically clears cache, how can I store images permanently ?. ",
    "mobilehub": "I have the same problem.\n. ",
    "markymc": "Me too\n. ",
    "amachang": "Try -Wno-arc-bridge-casts-disallowed-in-nonarc\n. ",
    "thomasconner": "What do you mean?\n\nTry -Wno-arc-bridge-casts-disallowed-in-nonarc\n\nI am having the same issues.\n. ",
    "igrampe": "i fixed it problem:\nif __has_feature(objc_arc)\nCGImageSourceUpdateData(imageSource, (__bridge  CFDataRef)imageData, totalSize == expectedSize);\nelse\nCGImageSourceUpdateData(imageSource, (CFDataRef)imageData, totalSize == expectedSize);\nendif\n. ",
    "rgaino": "This error seems to happen when you link against libSDWebImage.a on an ARC project, instead of libSDWebImageARC.a . Check your \"Link Binary With Libraries\" step on the installation tutorial. Your project should look like this: http://i.imgur.com/xoiWZ.png\n. ",
    "Whirlwind": "I link libSDWebImage.a on a NOT ARC project . :(\ngrampe said that fix it.\n. I agree.\nI think it is easy to add the category. please add it . :+1: \n. #646 pull request.\n. I think it is not good idea.\nThe better way is that like setImageURL:placeHolderImage:UsingCache:. It  like to request the network, and it will use cache if failed and the cache exists.\n. please push the v3.5.3, v3.5.4 to Cocoapods spec repo\n. why not to receive this pull request?\n. I think I done it. #646 \n. I think we should have a better way allow user  custom the animation rather than set a or some animation options.\n. I think this pull request should be ignore.\nThe request should be retry always if the link is not broken and just request failed.\nplease see #766 , it solve it.\n. I think the best way is to set the default option for adding fail url.\n. Why not NSURLErrorCancelled?\n. Is it like this:\nif (error.code != NSURLErrorNotConnectedToInternet && error.code != NSURLErrorCancelled && error.code != NSURLErrorTimedOut) {\n@synchronized(self.failedURLs)\n                        {\n                            [self.failedURLs addObject:url];\n                        }\n}\nright?\n. @bpoplauschi the pull request like #766 ?\n. I think it is a good way. ^^\n. Please merge it. Because I commit the pull request with some bug for  6f02d77  . --#\n. I sorry that I don't know how to create single pull request for each commit.\nCould you help me?\n. Should I merge the master of this repo, and update the cancel logic?\n. I added the timeouts.\n. I think this is a good pull request.\n. anybody agree with me?\n. I had said the reason. And if we will not need it, you should check and fix all cancel methods!!\n. I don't think so. The operation is be retained with OBJC_ASSOCIATION_RETAIN_NONATOMIC.\n. Good, but I don't know what is the Travis CI?\n. And I think we should fix the methods be called at the demo. :)\n. I think the imageURL will be collision with other libraries in the future, although I don't known whether it is had exists.\n. The xcconfig in SDWebImage's podspec is unnecessary:\n\"USER_HEADER_SEARCH_PATHS\": \"$(inherited) $(SRCROOT)/libwebp/src\". @rs Could you have a look at this issue?. ",
    "lastquestion": "First of all, this is a warning on default compiler options, not an error.\nSecond, the fix is as @grampe  mentioned: do a check whether the current project is ARC or not.\nNote that his code was mangled by github's markdown, so the actual change is like this:\nif __has_feature(objc_arc)\n    CGImageSourceUpdateData(imageSource, (bridge CFDataRef)imageData, totalSize == expectedSize);\n\nelse\n    CGImageSourceUpdateData(imageSource, (CFDataRef)imageData, totalSize == expectedSize);\n\nendif\nI'll put together a pull request for this later today.\n. Actually, I think this should be closed. This was fixed in https://github.com/rs/SDWebImage/commit/7b941a0cb2951d731794ba9e259897ecb077cd72 by @grampe after all!\n. ",
    "SRandazzo": "@rs I've finally updated this for the latest SDWebImage!\nI updated the demo as well to show how adding a custom path works, and bundled one of the images with the app (the gif to be specific)\n. @rs any chance this will get looked at/merged in?\nWe've been using it in production smoothly for a few weeks now, would love to get it official! \n. @timmolter Of course!\nIt's important that any images you want to \"seed\" are downloaded via SDWebImage (since SDWebImage manages generating the hash/file name based on the URL of the images)\nTo go about this, start with a fresh/clean cache (you can use the SDImageCache method, or just manually delete the files), then download all the images you need. For example, we sometimes just use an array of image URLs that we loop through and tell SDWebImage download. If your app is not user data specific, you can also just run through it, and any images downloaded will be in the cache folder (again, be careful of user data specific images)\nIt's not a bad idea to have a completely separate target that can run this code if you are going to do it often\nOnce all the images you need are downloaded, navigate in your Finder to here:\n~/Library/Application Support/iPhone Simulator/7.0.3/Applications/d12312-123412-1234321/Library/Caches/com.hackemist.SDWebImageCache.default\nWhere  d12312-123412-1234321 is your application\nand 7.0.3 is the sdk you ran the app on when downloading all the files\nCopy all the files inside of the com.hackemist.SDWebImageCache.default folder to a folder in your project folder and then to your project\nI use something like \"seed_image\" for the folder name, then added that to the project (In this case, I typically add as a \"folder reference\")\nfrom there, just use this code (in the PR/sample project)\nObj-c\n NSString *bundledPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:@\"seed_image\"];\n[[SDImageCache sharedImageCache] addReadOnlyCachePath:bundledPath];\nObviously this could all stand to be automated, but we weren't swapping bundled images often enough to make it worth it\nhope that helps\n. thanks.\nGoing to try and update this soon for the new 3.0 SDWebImage as this PR was based on the last version, will take your suggestion into account!\n. ",
    "timmolter": "@SRandazzo Could you help a newbie out? How do you go about seeding your app with images?\n. @SRandazzo Wow! Thanks so much! I'll give it a shot.\n. @SRandazzo God dang brilliant! Thanks for this!\n. +1 I also came here to report this.\n. ",
    "angeloh": "I got same problem. Why not fix it?\n. Yes, but why it is related to this issue?\n. ",
    "jianlin": "ah Angelo, you went to \u8f14\u4ec1\u5927\u5b78 ?\n. ",
    "mapan": "I just called this method inside the - (UITableViewCell )tableView:(UITableView )tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath:\n[cell.imageView setImageWithURL:url\n                   placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]];\nLike you did in the example. So maybe i should put this inside a dispatch_async queue?\n. Just tried this:\ndispatch_queue_t getImage = dispatch_queue_create(\"image\", NULL);\n    dispatch_async(getImage, ^ {\n    [cell.imageView setImageWithURL:url\n                   placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]];\n    });\n    dispatch_release(getImage);\nBut it gave me an error in here:        [cacheURLs removeObjectAtIndex:idx];\nAlso i noticed that i have to keep scrolling up and down to show the images for each cell.\nThanks for your time.\n. Hi\nI then used the example code from Apple library it's called lazy image download or something like that. That one works smoothly.\nThank you!\nPan\nBest Wishes\nWe are Purdue.\nWhat we make moves the world forward.  Boiler Up\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Monday, October 15, 2012 at 8:05 PM, NukemHill wrote:\n\nI'm experiencing a similar problem. I'm loading a large dataset, with unique images for each table row in an iPad DetailController. The UITableViewCell is a custom cell managed through a storyboard. The placeholder loads right away. But unless I scroll the tableview, that is all that will display. How do I make sure the imageview in the cell updates when the actual image is downloaded from the web?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/rs/SDWebImage/issues/159#issuecomment-9466865).\n. \n",
    "NukemHill": "I'm experiencing a similar problem.  I'm loading a large dataset, with unique images for each table row in an iPad DetailController.  The UITableViewCell is a custom cell managed through a storyboard.  The placeholder loads right away.  But unless I scroll the tableview, that is all that will display.  How do I make sure the imageview in the cell updates when the actual image is downloaded from the web?\n. ",
    "angelolloqui": "Hi! I am not sure why this issue is close but I am experiencing a similar problem. I think it is due to cell reusing. \nFor example, I am reusing the same cell multiple times, which calls setImageWithURL multiple time on the SAME UIImageView. This call will cause the delegate to cancel the previous call, and therefore the delegate will never be invoked and the image view will never get drawn again. However, when you scroll you are actually giving time to the cell to receive the call from the delegate and thus redrawing before the cell is reused.\nI think this is an architectural problem related to how the delegate pattern has been implemented, and is not easy to solve. Removing caching of cells is simply not an option because I have thousands of cells that are exactly the same, and I need as much performance as possible.\n. Yes, the problem is the same one. The UIImageView is reused, canceling the previous image loading before the previous one was completed. Checkout the line at UIImageView+WebCache.m:48\n. Yes, I understand the purpose, but the problem is that if you are reusing cells your will have calls when drawing a table like this:\n1. Create Cell ($1)\n2. Configure $1 at position 0 --> load remote Image $1 with url1\n3. Configure $1 at position 1 --> load remote Image $1 with url2\n4. Configure $1 at position 2 --> load remote Image $1 with url3\n5. ....\nIf the image download takes too long (which will always be the case when the content is remote), every call to load remote content on image $1 will cancel the previous one, and therefore images will never be loaded. Why? the call at 2. will be cancelled when the called at 3. takes place and so on.\nAnyway, I am still investigating because it may come from somewhere else.\n. @rs You are right, it should not be problematic but I thought it was the origin of my problem. However, I just discovered that is had nothing to do with that, it was just that I was using a custom cell with a property called imageView (which was the remote image) that was having conflicts with the generic imageView in UITableViewCell. Noob mistake, sorry and thanks for your fast response! it is working now!\n. It could be due to the cell being laid out without a content image (a Zero size is then assigned to it). Try setting a default placeholder image with same size that the one you want and see if it helps. If that is the case, I would suggest to try calling setNeedsLayout when you image is downloaded.\n. ",
    "atadeu": "Apple return a erro with didFailWithError to ... crash in this code and say :\n...in addition, we found that your app uses one or more non-public APIs, which is not in compliance with the App Store Review Guidelines. The use of non-public APIs is not permissible because it can lead to a poor user experience should these APIs change. \nWe found the following non-public API/s in your app:\ndownload:didFailWithError:\nIf you have defined methods in your source code with the same names as the above-mentioned APIs, we suggest altering your method names so that they no longer collide with Apple's private APIs to avoid your application being flagged in future submissions.\nany help ??\n. this question persisti yet ... Apple yet return this methods download:didFailWithError is a rewrite of a internal method and dont aprove my app with SDWebImage.\n. ",
    "aleufms": "A way to set the HTTP headers would be a great addiction, or a way to expose the NSURLRequest. I have to add a token on http header to get the picture, so I have to hard code this in the SDWebImage code.\n. I've added my code accessing the NSURLRequest on line 79 of https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloader.m. We have to hard code this because this variable is a method variable and we don't have access to it outside of the method.\n. ",
    "bhaity": "Hi aleufs how did you go about doing this? Could you give me some guidance?\n. ",
    "johndpope": "https://github.com/jdp-global/SDWebImage.git\n```\nimport \n\n(void)setDefaultHeader:(NSString )header value:(NSString )value\n\n// inject an authorisation header\n        [SDWebImageDownloader setAuthorizationHeaderWithUsername:auth_token password:@\"\"];\n// set a custom header\n    [SDWebImageDownloader setDefaultHeader:@\"foo\" value:@\"bar\"];\n// you'll need to clear it when not needed!!!!\n        [SDWebImageDownloader clearAuthorizationHeader];\n      [documentView setImageWithURL:[NSURL URLWithString:url] placeholderImage:nil options:SDWebImageProgressiveDownload\n                      success:^(UIImage *sdImage){\n\n                      }failure:^(NSError *error){\n\n                              DLog(@\"error:%@\",error);\n                      }];\n\n```\nI merged code from Gowalla classes - so had to include their license too.\n. You can keep overwriting  the header value b4 each image request.\nI added a method for auth token in the download class. Try it. \n. Oh actually that sucks as it is static method - it will break with multiple requests.\n. slight problem. I need to handle oauth headers with tokens for salesforce api. \nyour solution doesn't solve this problem.\nsee\n++ (void)setAuthorizationHeaderWithToken:(NSString *)token ;\n. also you can see here - some people need other custom header values\nhttps://github.com/aleufms/SDWebImage/commit/a28d037ad264f5cea0231e190e82f669cd4888cd#commitcomment-2636161\nthis commit will handle those too\n[SDWebImageDownloader  setDefaultHeader:(NSString )header value:(NSString )value]\n. yes it does. there's a slight caveat - if the user is downloading from one site / then switches to another site - they must clear the custom header. This is nothing some notes in readme can't solve.\n[SDWebImageDownloader clearAuthorizationHeader];\nI tried quickly merging latest changes and pushed to a bArcMerge branch. \nNeeds testing. Don't have a lot of time.\nI also had a need to find out if a url image was already downloaded. (BOOL)SDImageCache hasCacheForKey\nIf it returns YES - I'd display the full image. If NO - then I wanted to switch to fetch a smaller icon of image from server first. I think the app Path has this logic. That's what that was for.\nYou can throw this code away if it's simpler than merging. But I'd appreciate it if you can expose the methods.\nThanks\nJP\n. ",
    "nogece": "Thanks! However, I doubt that this will work with AWS. The Auth-header in REST-authentication a la AWS is different for each and every request.\n. I found a better solution ouside of SDWebImage: intercepting the requests by registering my own URLProtocol.\n. ",
    "itsSaad": "Although this was closed without any reason. But i think this feature request is still valid and needed.\n. ",
    "abraxascorner": "I have tried this, but it doesn't work\nobjective-c\nSDWebImageDownloader *manager = [SDWebImageManager sharedManager].imageDownloader;\n[manager setValue:[NSString stringWithFormat:@\"Basic %@\",authValue] forHTTPHeaderField:@\"Authorization\"];\nIs there any solution to do basic authorization with SDWebImage lib?\n. ",
    "judepereira": "That worked for me :)\n. ",
    "farzadshbfn": "@nogece would you share your approach with URLProtocol?. ",
    "fannheyward": "Add this to SDWebImageManager and it works for me.\n```\n- (void)cancelAll\n{\n    for (SDWebImageDownloader *downloader in downloaders) {\n        [downloader cancel];\n    }\n    [cacheDelegates removeAllObjects];\n    [cacheURLs removeAllObjects];\n[downloadInfo removeAllObjects];\n[downloadDelegates removeAllObjects];\n[downloaders removeAllObjects];\n[downloaderForURL removeAllObjects];\n\n}\n```\n. ",
    "kakashilw": "\u591a\u8c22  @fannheyward \uff0c\u6211\u8bd5\u4e86\u4e00\u4e0b~~ It's work for me~~\n. ",
    "Reflejo": "Since this is cancelling operations in an async way. You will get some headaches if you want to cancel all running operations in order to start a new download.\nI've been doing something like this:\n[[SDWebImageManager sharedManager] cancelAll];\n[imageView setImageWithURL:<url> placeholderImage:nil];\nAnd image was simply not showing. Debugging the code I noticed that my new operation was getting canceled. I just removed the dispatch_async call and now it's working.\nI understand that you want to ensure to be running on main thread, but dispatch_sync didn't work for me neither.\n. JaviSoto, I don't think so. Latest SDWebImageDecoder.m is still doing\nCGContextRef context = CGBitmapContextCreate(NULL, imageSize.width, imageSize.height, CGImageGetBitsPerComponent(imageRef), CGImageGetBytesPerRow(imageRef), colorSpace, CGImageGetBitmapInfo(imageRef));\n. Fixed here: https://github.com/rs/SDWebImage/pull/277\n. Still happening here :( \n<Error>: CGBitmapContextCreate: unsupported parameter combination: 16 integer bits/component; 48 bits/pixel; 3-component color space; kCGImageAlphaNone; 96 bytes/row.\n. ",
    "Sukhrob": "I figured out it on my own.\nSDWebImageManager manager = [SDWebImageManager sharedManager];\n[manager downloadWithURL:url delegate:self options:0 success:^(UIImage image) \n{\n    cell.profilePicture.image = [self imageByScalingAndCroppingForSize:CGSizeMake(cell.profilePicture.frame.size.width, cell.profilePicture.frame.size.height) image:image];\n} failure:nil];\n. Thanks for your reply @mayqiyue. I will try out :).\n. ",
    "mayqiyue": "Your solution is not very good! Because you crop the image in the main thread which would block the main thread. You should use this method:\n- (UIImage )imageManager:(SDWebImageManager )imageManager transformDownloadedImage:(UIImage )image withURL:(NSURL )imageURL;\nin SDWebImageManagerDelegate\n. @dreampiggy Sorry, I made a mistake. Our issue was not caused by SD.. ",
    "GuyFran": "but does the \"clean\" check for any update on the file before actually ersing the file from the disk cache ?\n. Ok thx for the answer :)\n. Great, thank you\n. Oh right, cheers.\n. Simply I would like my images to expire after x amount of days (or minutes, or whatever), therefore even if the cache finds the pic, if the \"validity\" time expired, then I would expect the library to fetch the picture from the server again, but keep the one in cache as a back up in case of a network failure.\n. I didn't , I guess it's a new section from the last time I read the main page. Thx. I will test it out :)\n. Oh wow I just realize the \"whole\" library changed in terms of exposed methods :(.\nNeed to change many many calls hehe.\nI think the last time I pulled was at least 6 months ago.\nI thought there would be some \"legacy\" support. Well no choice if I wanna be able to deal with the expired cached pictures ^^\nBTW , is there no need to cancel a download operation now ? I used to do that on cells in my tableviews to improve the performance.\n. Actually [self.imageCache storeImage:transformedImage recalculateFromImage:imageWasTransformed imageData:data forKey:key toDisk:cacheOnDisk]; should work since the flag 'imageWasTransformed' is set at true once the picture got change, and then the image to save to disk is recomputed from the transformedimage. But somehow it is the data that gets saved to disk.\nMy 'solution' is merely a work around.\n. Any idea when 4.0.0 will be released ?\n. ",
    "seanrice": "ah, i was wondering this too. thx!\n. Hey, just so people know ... my app is completed and it's always built fine ... but then i went to Archive and XCode 4.5.1 on 10.8 fails ... no idea why :) ... i was trying to solve the Archive Lexical or Preprocessor file not found issue being reported ... then noticed rs reply to a thread saying upgrade to latest .framework so i did ... and i verified both simulator and release builds had both proper header strings ... all to no avail. I'm still getting same build errors, plus a variant of the error noted above ... in my case disabling SDImageCache's getMemoryCount and getMemorySize methods. Bottom line i can't archive app to upload and looking for solutions.\n. imports setup? found this link solved my problem above ... https://github.com/rs/SDWebImage/issues/132\n. yup =) worked around that problem for Go World (http://itun.es/us/PNMQI.i) by setting my cache to 24 hours, setting a \"watch\" image on my server ... and when the image is missing, the app clears its memory and disk caches. I also set the app's App Delegate (seemed easiest) to clear memory when low using SDWebImage's cleandisk and cleardisk methods... which any instance of the SDWebManager can handle. Remember, these memory cleaning methods are expensive and should be used cleverly while user is otherwise entertained so to speak. Finally, just so i could be sure and test in realtime, i added gesture recognizers which allow user to hold two-fingers down (1 sec) to clear any athletes image from cache and reload ... or three-fingers (3 seconds) clears all caches in Go World period. Hope this helps!\nApp Delegate example ...\n- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application\n  {\n  NSLog(@\"AppDelegate-warning: -------------------------------------\");\n[[SDImageCache sharedImageCache] cleanDisk];\n[[SDImageCache sharedImageCache] clearMemory];\n  }\n. S O S --- hit the issue too (5.1/iOS7.1). Liked your solution Ganster41, worked fine in simulator & device development. Unfortunately, when i switched to Release to Archive started getting \"Value Conversion Issues\" like ...  'unsigned long' to 'natural_t' (aka 'unsigned int') and 'NSUInteger' (aka 'unsigned long') to 'int'. switched to jurjen-van-dijk's solution above. same WARNING from compiler for SDImageCache.m file.\n. Looking at SDImageCache.m:\nthe variable:\nstatic natural_t minFreeMemLeft = 1024_1024_12;  // reserve 12MB RAM\nstatic natural_t get_free_memory(void) {\n  /* Stats in bytes */\n    natural_t mem_free = vm_stat.free_count * pagesize;     <---- XCODE WARNING HERE\n    return mem_free;\n}\n-(int) getMemoryCount {\n    return [[memCache allKeys] count];   <---- XCODE WARNING HERE\n}\nWarnings: \n'unsigned long' to 'natural_t' (aka 'unsigned int') \nand 'NSUInteger' (aka 'unsigned long') to 'int'.\n. My finished app builds fine, has been submitted and validated already prior to Xcode 5.1 and iOS 7.1 BUT WILL NOT ARCHIVE now. Issue appears to be integer precision. If anyone has ideas (seanrice@mac.com) ... i'll gladly fork up a promo-code for solution !!!!\n. think i'm getting things now. Olivier renamed the SD methods when upgraded them, hence there is no visible @interface for old SD selectors developers were using. got it.\n. www.drummerboy.me is my project, submitted and waiting for Apple approval.\nI found the \"selector\" solution has nothing to do with 'my code' and everything to do with SDWebImage changes. Bottom line: import SDWebImage as instructed by Olivier -and then- try out by invoking UIImageView in a method call like [self.myImageView setImage... or whatever] and look at the selectors that pop up in your Xcode for SD's UIImageView. \nPast users will notice old routines generate warnings because the methods don't exist. they were renamed. new users will just get new class methods for UIImageView that work when invoked. As before, import SD (#import) and then use the enhanced class where appropriate.  Hope this helps.\n. ",
    "arbarlow": "No explanation for the close? I think this is a great and needed feature\n. Ah, thanks\n. Agreed, perfectly good idea, the use of 'get free memory' was scaring me..\n. ",
    "mgv": "+1\nIt's awesome.\n. ",
    "Mamonaku": "Great, but unfortunately, just downloaded the latest snapshot, and the NSCache implementation isn't part of it. I'm still with the NSDictonnary implementation, which I find a little scary, as it nukes the cache when low on memory....\nAny plans to include the NSCache implementation in the main trunk ?\n. ",
    "PhillipApps": "Seems like i found the issue.\nI shouldn't set the option to cache ( [prefetcher setOptions:SDWebImageMemoryCacheOnly]; ) ,but I had to leave it in low priority, so now everything works perfectly!\n. ",
    "aldrinmartoq": "Check https://github.com/rs/SDWebImage/commit/c32f9c03f816dac58a8cac25d6189310272ca9c1\n. ",
    "brenwell": "This latest update didn't work for me. I solved my problem and thought it maybe useful for others. I edited the decodedImageWithImage() method to handle the images with no alpha correctly. Finally putting an end to all the wild errors. Such as:\nMaybe it is worth a look.\nI believe it should be    and the bytes per pixel must be 4 despite having no alpha.\nResulting in this:\n\n+ (UIImage *)decodedImageWithImage:(UIImage *)image\n{\n    CGImageRef imageRef = image.CGImage;\n    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();\n    CGImageAlphaInfo alphaInfo = CGImageGetAlphaInfo(imageRef);\n    BOOL imageHasAlphaInfo = (alphaInfo != kCGImageAlphaNone);\n    CGBitmapInfo bitmapInfo = imageHasAlphaInfo ? kCGImageAlphaPremultipliedLast : kCGImageAlphaNoneSkipLast;\n\n    CGContextRef context = CGBitmapContextCreate(NULL,\n                                                 CGImageGetWidth(imageRef),\n                                                 CGImageGetHeight(imageRef),\n                                                 8,\n                                                 // Just always return width * bytesPerPixel will be enough\n                                                 CGImageGetWidth(imageRef) * 4,\n                                                 // System only supports RGB, set explicitly\n                                                 colorSpace,\n                                                 bitmapInfo);\n    CGColorSpaceRelease(colorSpace);\n    if (!context) return nil;\n    CGRect rect = (CGRect){CGPointZero,{CGImageGetWidth(imageRef), CGImageGetHeight(imageRef)}};\n    CGContextDrawImage(context, rect, imageRef);\n    CGImageRef decompressedImageRef = CGBitmapContextCreateImage(context);\n    CGContextRelease(context);\n    UIImage *decompressedImage = [[UIImage alloc] initWithCGImage:decompressedImageRef scale:image.scale orientation:image.imageOrientation];\n    CGImageRelease(decompressedImageRef);\n    return SDWIReturnAutoreleased(decompressedImage);\n}\n\nAnyway it has stopped the errors for me\n. ",
    "JaviSoto": "The problem with that approach is that now you're creating a transparent image even if the original one had no alpha information, making drawing always slower :-/ Which kind of defeats the purpose of this framework I think.\n. This is not true. If you create a context with alpha channel, the resulting image will have transparency information which will cause the render system to have to compose the layer with another layer. I don't know where you read that but it's not true :)\n. Yeah we know that, that's why this code is so problematic, cause not all color spaces are valid.\n. The solution to this is to use bytesPerPixel = 4 even if the image is opaque. I tested that and it works, and there's no blending going on if the image is opaque.\nIn any case, It'd be better to create the CGContext with UIGraphicsBeginImageContextWithOptions, which since iOS4+ you can call from any thread in the application. I'll make the pull request when I have some spare time, but basically it's the same that I did here: https://github.com/mindsnacks/MSCachedAsyncViewDrawing/blob/master/MSCachedAsyncViewDrawing.m#L68\n. I believe that's perfect :) I'll double check tomorrow and will give my\n:+1: so you guys can merge if that's alright :)\n\nJavier Soto\nSent from my iPhone\nOn Nov 11, 2012, at 15:06, Olivier Poitrey notifications@github.com wrote:\n@JaviSoto https://github.com/JaviSoto what about this?\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/rs/SDWebImage/pull/204#issuecomment-10273735.\n. Yes that's correct :)\n. It doesn't make sense, we're creating a context with UIKit (UIGraphicsBeginImageContextWithOptions) now..\n. Oh, you're right... that's just on the beta branch, I asked @rs to cherry-pick it to master, but I guess he never did? https://github.com/rs/SDWebImage/commit/0c1dd3c857fcf4d704baaed0d0619c0ea3dd07ac :)\n. Wow, I didn't think UIGraphicsBeginImageContextWithOptions would be that much slower :S\nI added a question here: https://github.com/rs/SDWebImage/pull/227#issuecomment-11260373\n. So this solution doesn't support images with alpha channel? (semi-transparent images)\n. :+1: \n. Closing. I didn't realize I hadn't included the new SDWebImageCompat.m file to the project that already does this.\n. I think we should've tested this before. If this doesn't do what I think it does, we're basically not decoding the images, and scrolling is gonna turn slow. I can test it tomorrow.\n. I would revert the merge commit for now, as I said I needed to test it.\nI'll do I tomorrow.\nOn Thursday, February 7, 2013, Olivier Poitrey wrote:\n\nI now get a lot of CGBitmapContextCreate errors:\nFeb  8 02:31:07 elijah dailymotion-devel[55348] : CGBitmapContextCreate: unsupported parameter combination: 0 integer bits/component; 0 bits/pixel; 0-component color space; kCGImageAlphaNone; 0 bytes/row.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/pull/293#issuecomment-13272777.\n\n\nJavier Soto\n. The problem is that it's passing the wrote bytes per pixel, the correct code would be this:\n``` objc\n    CGRect rectToDraw = CGRectMake(0, 0, 1, 1);\n    const CGFloat bytesPerRow = CGImageGetBytesPerRow(imageRef) / image.size.width; // Normalize to 1px\nCGColorSpaceRef colorSpace = CGImageGetColorSpace(imageRef);\nCGContextRef context = CGBitmapContextCreate(NULL,\n                                             rectToDraw.size.width,\n                                             rectToDraw.size.height,\n                                             CGImageGetBitsPerComponent(imageRef),\n                                             bytesPerRow,\n                                             colorSpace,\n                                             CGImageGetBitmapInfo(imageRef));\n\n```\nEither way, I just tested this, and it's slower :-/ I guess the UIImage doesn't get cached when you call drawInRect:, only when you do imageNamed:, so please revert my commit! I apologize :)\n. :+1: \n. Defining an intermediate BOOL variable would help understand what all this means, example: ( not really sure if that's what it means )\n``` objc\nconst BOOL imageHasAlphaInfoButOnlyThreeComponents = (((bitmapInfo & kCGBitmapAlphaInfoMask) & (kCGImageAlphaFirst | kCGImageAlphaLast)) != 0 && CGColorSpaceGetNumberOfComponents(colorSpace) == 3));\nelse if (imageHasAlphaInfoButOnlyThreeComponents) { }\n```\n. ",
    "benanderman": "I don't even know what this project is, I was just googling around after having a similar issue. Apparently you MUST use an alpha channel with CGContext regardless of whether you want one at all. And supposedly this is actually for performance reasons. So don't feel bad about doing using alpha for no reason.\n. Okay, I wasn't quite correct; you don't have to have alpha, but you do have to have 32bpp (or 16bpp), it just ignores the last (or first) byte if you don't have alpha. And here's my source for that: https://developer.apple.com/library/ios/documentation/graphicsimaging/conceptual/drawingwithquartz2d/dq_context/dq_context.html#//apple_ref/doc/uid/TP30001066-CH203-BCIBHHBB\n. ",
    "AndyJordan": "Thanks. Let me know if I can test any changes or provide more info.\n. Thanks for this. Fixed! \n. ",
    "jpiabrantes": "still happening to me after adding the -ObjC flag\n. ",
    "Legoless": "Same here, installed from CocoaPods.\n. Instead I removed WebP support as I don't need it for now. Keep up the good work! ;)\n. Just use SDWebImage/Core pod until WebP is fully supported.\n. I really suggest you fork that library and update it for 3.7.0 version (many functions were deprecated from 3.6.x anyway). It should only take you about 5 minutes and on the way you can also update podspec so it only needs SDWebImage/Core podspec instead of whole SDWebImage.\n. ",
    "mhaleem": "i still have the same problem with the linker flag and latest version of the framework.\n. ",
    "jodonnell": "same issue, installed from cocoapods.\n. ",
    "bawn": "same issue, installed from cocoapods.\n. @mythodeia Yes, I need display some different size imageview, they are the same width, but the height is determined by the image itself. The imageview dimensions  ratio is image.size.width / image.size.height\n. @mythodeia Thanks\n. ",
    "Futurecompiler": "same issue installed from cocoapods\n. ",
    "JayachandraA": "am also facing the same problem -[UIImageView setImageWithURL:]: unrecognized selector sent to instance\nPlease help me out...\n. ",
    "imran411": "Any one solve this issue ? Headbang from 5 hour's\n. Have you install cocoapods for this project\nIf no then please intall.\n. ",
    "bouudi": "same issue, installed from cocoapods\n. ",
    "priya-vr": "Guys, My issue is \"Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[UIButton sd_setImageWithURL:forState:placeholderImage:]: unrecognized selector sent to instance 0x7f9853d55f50\".How can i solve this?\n. still issue exist,shows the error \"[UIButton sd_cancelImageLoadOperationWithKey:]: unrecognized selector sent to instance 0x7f80b061c5c0\".?\n. issue is solved by adding UIView+WebCacheOperation.h & UIView+WebCacheOperation.m.,\nThanks \n. ",
    "RajaSaravanan": "I installed through cocoapods, for me also its crashing.\n. UPDATE\nI had the same issue, but I managed to get it worked without using\nimport \"UIImageView+WebCache.h\"\n\nActually my fix is that, I added the following in Other linker flags as mentioned in SDWebImage github site\n  -force_load $(TARGET_BUILD_DIR)/libPods.a\nbut my libPods.a is libPods-SEED.a, where SEED is my project name.\nif you want to look your project's libPods.a file, look into the build phases -> Link Binary With Libraries\n  \n. \n",
    "ewechsler": "No, I did not. It was more convenient for us to add your project as git submodule. So I just added subproject in Xcode and linked static lib to my target. \n. Thanks a lot. It was really quick! It is helpful - I just switch the submodule to new commit.\n. ",
    "muratogat": "Strangely this happens for me too, but only for archiving. It seems that while compiling for debug the success block expects\nsuccess:^(UIImage *image, BOOL cached)\nbut while archiving the same block expects\nsuccess:^(UIImage *image)\nNow I have checked whether this could be due to a different declaration of linking parameters, but I couldn't find any difference. Can somebody give any info on this? The related stackoverflow question is here:\nhttp://stackoverflow.com/questions/13035831/ios-6-sdwebimage-success-failure-block-error-incompatible-block-pointer-types\n. ",
    "rnaud": "Hello, I still have the issue with the last version of SDWebImage, Jpeg images that makes the UIImageView not opaque (red on the color blend layers).\n. ",
    "fonkadelic": "@rnaud same here\n. Update from 3.1 to 3.2 solved it. All green now. \n. Yep... you are right... Missed that one. \n. http://hackemist.com/SDWebImage/doc/Classes/SDWebImageManager.html\nThe doc says: Returns a cancellable NSOperation\n. ",
    "ozba": "I'm also getting \n\": CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 24 bits/pixel; 3-component color space; kCGImageAlphaNone; 240 bytes/row\" on latest version.\nwhy is that?\n. the zip from here:https://github.com/rs/SDWebImage\n. @rs  It seems that in the path you gave there are only header files and even than some files missing (such as MKAnnotationView+WebCache).\nCan you check it?\n. Can I have a link to the source files? \nIt's better for me to use that than the framework\n. ",
    "pulkitsinghal": "I just got the latest version of the master branch and this error is still happening:\n<Error>: CGBitmapContextCreate: unsupported parameter combination:\n8 integer bits/component; 24 bits/pixel; 3-component color space; kCGImageAlphaNone; 768 bytes/row.\n. Seeing same issue in an ARC enabled project. But at least the workaround of moving the import statement out of the prefix.pch file worked.\n. I believe I'm seeing the same issue. The browser shows proper downloads with the same URL but empty images show up when using SDWebImage.\n. Any thoughts?\n. Works great, thank you!\n. ",
    "ldiqual": "Is this issue fixed in the master branch? I'm using version 3.0 from the CocoaPods spec and I'm getting flooded by these warnings. Could you please add a 3.0.1 tag so an updated Spec can be released?\n. Would it be possible to add a 3.0.1 tag? Current 3.0 from Podspec is flooding me with these warnings :/\n. Thank you Olivier, I updated the PodSpec to 3.1.\n. ",
    "veveer": "Still comes the problem\uff01I wonder if it does harm to the project.Thank @rs ,@JaviSoto!Hoping V3.0.1!\n. Thanks\n. ",
    "haabaato": "Will do, thanks for the prompt response.\n. Sadly, this wasn't enough.  25 days later, I triggered the same crash by rapidly pushing and popping a gallery of images that are all populated with SDWebImageManager.  For now, I fix it by checking if idx is within the bounds of the cacheDelegates and cacheURLs array.\n. ",
    "britran": "@rs I still get this error in iOS 5, not iOS 6, and not for all my ImageViews.  It happens for both retina and non-retina.  Even with the error, the image in the ImageView still shows however.  Here's the error message in the console:\nError: CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 32 bits/pixel; 3-component color space; kCGImageAlphaLast; 880 bytes/row.\nI'm using SDWebImage-3.0.framework.  Any thoughts?\n. ",
    "evil001": "i hava same problam..\n. ",
    "herrernst": "Unfortunately, this doesn't seem to change anything, Cache.db is still growing when showing images ...\n. Thanks!\n. Thanks.\n. ",
    "lxcid": "Hmmmp, I'll get back with you on both issues by tonight.\nCheers!\n. Hi there,\nFor the barrierQueue (I'm using the latest Xcode 4.5.2 with ARC), it is due to barrierQueue is declared with assign instead of strong. I changed to strong and the crash goes away. :)\nhttps://github.com/rs/SDWebImage/blob/3.0-beta/SDWebImage/SDWebImageDownloader.m#L23\n. I want to mentioned that I really like 3.0 branch direction. I think a really good image disk cache library is lacking in the iOS community and SDWebImage looks perfect with all the functionalities it provides.\nThat said, I would like to comment on the NSURLConnection behaviour a bit further as I have recently been doing a lot of research in this area though.\nI'm not aware of the libev portion though, if you have any materials providing more explanation of the connection between NSURLConnection and libev, I would really love to read them up.\nFrom my understanding, NSURLConnection achieve asynchronous behaviour not by running on a separate thread, rather it achieve asynchronous behaviour by hooking up the run loop (whether you explicitly or implicitly schedule it).\nFrom the NSURLConnection documentation, it stated several times of this behaviour though:\n\n[Overview] These delegate methods are called on the thread that started the asynchronous load operation for the associated NSURLConnection object.\n[initWithRequest:delegate:] By default, for the connection to work correctly, the calling thread\u2019s run loop must be operating in the default run loop mode. See scheduleInRunLoop:forMode: to change the run loop and mode.\n\nSo when it dispatch the NSURLConnection scheduling to main queue, it end up hooking up the NSURLConnection to main thread run loop.\nIn your situation, it is necessary to have NSURLConnection to be scheduled in main thread.\nTry commenting https://github.com/rs/SDWebImage/blob/3.0-beta/SDWebImage/SDWebImageDownloaderOperation.m#L57 and you will notice that your NSURLConnection does not response to NSURLConnection's delegate methods. I learnt this the hard way though. :(\nLike the documentation said, in order for NSURLConnection to work properly, the thread scheduling it must have a operating run loop.\nSo the next immediate question is that, does NSOperationQueue, which \"spawn and manages its thread\" have an operating run loop? Apparently it does not have an operating run loop setup. http://developer.apple.com/library/ios/#qa/qa1712/_index.html explains whats going on behind NSOperationQueue and how it affect NSURLConnection scheduling, which describe our question pretty nicely.\nLastly, I would like to establish that while the operation is started (when the start method is called) in a secondary thread, the delegate currently is called in the main thread and how it could affect UI operation (although most of what we does in NSURLConnection's delegate method probably return so fast that it probably won't matter much).\nI need to you inject the follow code snippets to \nLine 50 of SDWebImageDownloaderOperation.m\n- (void)start\n{\n    NSLog(@\"start - %@\", [NSThread isMainThread] ? @\"main thread: YES\" : @\"main thread: NOPE\");\nThis code snippets simply check if the operation is started in the main thread or the secondary thread.\nLine 165 of SDWebImageDownloaderOperation.m\n- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data\n{\n    NSLog(@\"connection:didReceiveData: - %@\", [NSThread isMainThread] ? @\"main thread: YES\" : @\"main thread: NAH\");\n    [NSThread sleepForTimeInterval:1.0];\nThis code snippets is a bit more interesting. You will need to test with a web image viewer and that is layout in a long scroll view. (Make sure nothing have been cached) It checks if didReceiveData is called in the main thread or the secondary thread. It also tries to sleep for a second. This is to show didReceiveData (or any NSURLConnection's delegate method) can affect UI by competing with it in the main thread in the current set up.\nThis is what Apple's DTS meant by not contributing to main thread latency. If we are fetching really a lot of images and the NSOperationQueue number of concurrent operations is set to a high number, these NSURLConnection can be competing with the UI for main thread attention.\nIn a way, MVCNetworking had something called QRunLoopOperation. This is a subclass of NSOperation that is run loop aware.\nWhy MVCNetworking (and thus AFNetworking, which is derivation of MVCNetworking) have a separate thread to schedule NSURLConnection and manage to avoid the common bug is by ensuring there's an operating run loop. (AFNetworking have a shorter and more modern implementation of the following code snippet.)\n```\n- (void)networkRunLoopThreadEntry\n    // This thread runs all of our network operation run loop callbacks.\n{\n    assert( ! [NSThread isMainThread] );\n    while (YES) {\n        NSAutoreleasePool * pool;\n    pool = [[NSAutoreleasePool alloc] init];\n    assert(pool != nil);\n\n    [[NSRunLoop currentRunLoop] run];\n\n    [pool drain];\n}\nassert(NO);\n\n}\n```\nI really hope you consider my suggestion though.\nBut even if you felt its not necessary I'll still use this library as it have a lot of great features. :D\nThanks!\n. Hi, as for the dispatch_queue_t you were asking, it seems like it might be an iOS 6 related issue, rather than Xcode related. I'll do some research in this area. can't find any mention in clang ARC document though.\nhttps://github.com/magicalpanda/MagicalRecord/issues/198\nEDIT: From the same URL, this pull request for MagicalRecord seems to fix it. https://github.com/magicalpanda/MagicalRecord/pull/260\n. I was giving some serious thought of workaround and before reading your comment, my suggestion would have been to make SDWebImageDownloaderOperation run loop aware by exposing a property to reference the thread to handle the NSURLConnection.\nI actually didn't thought about GCD, but now that you mentioned about it, it seems to be a more elegant solution like you explained.\nI too, thought that if SDWebImage spawned a thread, and for my situation, AFNetworking spawned a thread too, It does seems unnecessary and expensive, taking up precious computing resources. Initially, I was keen on hooking SDWebImageDownloaderOperation to AFNetworking run loop thread.\nBut your solution actually seems more elegant by letting OS handles the concurrency resources, what GCD is very good at. I'm looking forward to your upcoming commit.\nI think your suggestion is the better and more well thought one than mine. Cheers!\n. Regarding dispatch_release, I pull the latest change (Also, notice the delegation to GCD of NSURLConnection's delegate methods, cool!), I'm still facing same crash.\nMy stack trace is as follow though.\n```\n(lldb) po [NSThread callStackSymbols]\n(id) $1 = 0x08984f80 <_NSCallStackArray 0x8984f80>(\n0   ???                                 0x0d77017f 0x0 + 225902975,\n1   Gag                                 0x00035678 -[SDWebImageDownloader addProgressCallback:andCompletedBlock:forURL:createCallback:] + 136,\n2   Gag                                 0x00034485 -[SDWebImageDownloader downloadImageWithURL:options:progress:completed:] + 501,\n3   Gag                                 0x0003a291 __64-[SDWebImageManager downloadWithURL:options:progress:completed:]_block_invoke_0 + 689,\n4   Gag                                 0x0003213b __42-[SDImageCache queryDiskCacheForKey:done:]_block_invoke_0 + 1563,\n5   libdispatch.dylib                   0x01f9353f _dispatch_call_block_and_release + 15,\n6   libdispatch.dylib                   0x01fa5014 _dispatch_client_callout + 14,\n7   libdispatch.dylib                   0x01f95418 _dispatch_queue_drain + 239,\n8   libdispatch.dylib                   0x01f952a6 _dispatch_queue_invoke + 59,\n9   libdispatch.dylib                   0x01f96280 _dispatch_root_queue_drain + 231,\n10  libdispatch.dylib                   0x01f96450 _dispatch_worker_thread2 + 39,\n11  libsystem_c.dylib                   0x9455ae12 _pthread_wqthread + 441,\n12  libsystem_c.dylib                   0x94542cca start_wqthread + 30\n)\n(lldb) \n```\nI'll try to keep a look out for possible solution too. Cheers!\n. Rob Napier have a great explanation on the issue: http://stackoverflow.com/a/12514040/379604\nShould there be a compile time check like this?\n```\nif OS_OBJECT_USE_OBJC\n@property (strong, nonatomic) dispatch_queue_t workingQueue;\n@property (strong, nonatomic) dispatch_queue_t barrierQueue;\n\nelse\n@property (assign, nonatomic) dispatch_queue_t workingQueue;\n@property (assign, nonatomic) dispatch_queue_t barrierQueue;\n\nendif\n```\nSince its dependent on the SDK it is compiled with this should be a neat solution. maybe accompany with your new SDDispatchQueueRelease to release in dealloc?\nCheck out os/object.h for more info. :)\n. Also, you might want to add #undef here, I'm getting compile warning for redefined macro. :)\n```\nif TARGET_OS_IPHONE\n#if __IPHONE_OS_VERSION_MIN_REQUIRED >= 60000\n    #undef SDDispatchQueueRelease\n    #define SDDispatchQueueRelease(q)\n#endif\n\nelse\n#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1080\n    #undef SDDispatchQueueRelease\n    #define SDDispatchQueueRelease(q)\n#endif\n\nendif\n```\nThis style was taken from os/object.h though.\n. The latest update seems great. Thanks! I'm closing this issue. :)\n. I face similar issue as well.\n. ",
    "88fsantos": "Awesome! It works (added the MapKit). But now I get another error:\nThread 10:EXC_BAD_INSTRUCTION (code=EXC_1386_INVOP, subcode=0x0)\n0x22f894d:  ud2    \nI'mt trying to make the images with the placeholder equal to nil. Is that valid? And what is the placeholder?\nThanks!\n. This error was with the beta (3) version.\nI'm trying the 2 and it gives me (I linked the MapKit and the ImageIO) :\n\"Undefined symbols for architecture i386:\n  \"OBJC_CLASS$_SDWebImageDecoder\", referenced from:\"\n. Awesome! It works now!\nThanks a lot man! You saved my day!\n. 4.3, but I'm testing only on 5.1\n. ",
    "daproject85": "thank you so much for replying oliver? One question.. why the user of <<\n... an enum sets numbers for the provided items.\nOn Tue, Nov 6, 2012 at 3:57 PM, Olivier Poitrey notifications@github.comwrote:\n\n\nSDWebImageRetryFailed: By default, when an URL fail to be\n  downloaded, the URL is blacklisted so the library won't keep trying. This\n  flag disable this blacklisting.\nSDWebImageLowPriority: By default, image downloads are started\n  during UI interactions, this flags disable this feature, leading to delayed\n  download on UIScrollView deceleration for instance.\nSDWebImageCacheMemoryOnly: This disables on disk caching\nSDWebImageProgressiveDownload: This enable progressive download, the\n  image is displayed progressively during download as a browser would do. By\n  default, the image is only displayed once completely downloaded.\n\n\u2014\n  Reply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/215#issuecomment-10133068.\n. thank you very much... also what is the best way to contact you for questions regarding your code? \n. \n",
    "leoleong": "Hi Olivier, i'm wondering whether could i use some of the options together? In my case, i want use both of .RetryFailed and .CacheMemoryOnly. Thank u~\n. ",
    "yanz67": "Thanks!  I am not getting this error in 3.0 but when i downloaded latest 2.x the same error appears.  I had to revert the old version of SDWebImage for it to work with out errors.\n. Here is a sample project.  I included the data file with it.  Press load\ndata and it will load around 9k records.  Scroll up and down for a minute\nand it crashes every time on the same line of code.  Here is the link to\nthe project.  Let me know if you had any issues downloading it.  Thanks!\nhttps://www.dropbox.com/s/96bcxj7kfl1ysoc/SDWebImageTest.zip\nPS I didn't modify the demo project but created my own from the code that i used for the main project that  i am working on.\nOn Tue, Nov 13, 2012 at 11:53 AM, Olivier Poitrey\nnotifications@github.comwrote:\n\nI just added an activity indicator to the demo app, I can't reproduce.\nPlease send the demo project modified so it reproduce the issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/220#issuecomment-10333320.\n. I downloaded the update with the if statement and it is still crashing on the same spot with EXC_BAD_ACCESS Please check it out.  Thanks!\n. Sorry i think i spoke to soon.  I did clean in xcode and reinstalled the app now it's not crashing.  I have been trying it for few minutes.  I think you can close this one.  Will let you know if it crashes again.  Thanks!\n. You can only see it for cached images because you see the\nuiactivityindicator again for the cached images and they flicker.  Uncached\nimages just show up when they are finished downloading.\n\nOn Tue, Nov 13, 2012 at 9:40 PM, Olivier Poitrey\nnotifications@github.comwrote:\n\nDoes the delay happen for already cached images or only for uncached image?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/223#issuecomment-10353079.\n. Thanks for the reply.  I tried to put the activity indicator in download progress block but still the scrolling is not smooth.  The pictures flickers when i scroll up and down.  Here is the updated code: \n\n```\n[cell.personIV setImageWithURL:[NSURL URLWithString:imgURL] placeholderImage:nil options:SDWebImageProgressiveDownload progress:^(NSUInteger receivedSize, long long expectedSize) {\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [cell.mattIV addSubview:activityIndicator];\n        });\n    } completed:^(UIImage image, NSError error, BOOL fromCache) {\n        if(error == nil){\n            [activityIndicator stopAnimating];[activityIndicator removeFromSuperview];\n            cell.personIV.image = [image thumbnailImage:120 transparentBorder:0 cornerRadius:0 interpolationQuality:kCGInterpolationDefault];\n            if(fromCache){\n                cell.personIV.alpha = 1;\n            }else{\n                [UIView animateWithDuration:0.4 animations:^{\n                    cell.personIV.alpha = 1;\n                }];\n            } \n        }else{\n            [activityIndicator stopAnimating];[activityIndicator removeFromSuperview];\n            cell.personIV.image = [UIImage imageNamed:@\"placeholder.png\"];\n        }\n}];\n\n```\n. You are absolutely right about activity indicator being initiated in the progress block.  I didn't think it through.  I will try to nil out the image but the thing is in 1.x everything works smoothly with the same code.  I don't see the activity indicator and the image just comes up from cache and in 3.0 i see the indicator for a split second and the image comes up.  Something is slowing down somewhere.  Thanks again!\n. ",
    "Pei116": "Any updates here?\nIt's useful when redirecting to the same placeholder images etc.\n. Any updates here?\nIt's useful when redirecting to the same placeholder images etc.\n. finally fixed here. https://github.com/rs/SDWebImage/pull/744\n. it's finally fixed. https://github.com/rs/SDWebImage/pull/744\n. I'm facing the same issue. It gets memory warning and finally crashes due to memory pressure when I set image with url.\n. ",
    "matej": "The reason for what you are seeing lies inside SDWebImageManager.m:89-93. The callback is now dispatched asynchronously even if there is a hit in the in-memory cache. \nobj-c\ndispatch_async(dispatch_get_main_queue(), ^\n{\n   completedBlock(image, nil, YES, YES);\n   [self.runningOperations removeObject:operation];\n});\nThis code could be refactored to check if we're already in the main thread and skip the dispatch call when we are. I'm not sure if that would affect scrolling performance though. \nIt might make more sense to refactor your code and use the progressBlock to add the progress indicator only if a download is in progress. Memory-cache and disk-cache requests should be fast enough that an activity indicator would only be perceived as noise. \n. I think the progress block is not yet implemented, and if it was you shouldn't use it like this (adding the indicator on every progress change). \nThe flickering is likely something with the animations and cell reuse. You have to cancel the animations (and nil out the image) when it gets reused. \n. As, mentioned, the reason for the additional delay is dispatch_async, which postpones the message to the next run loop iteration. If you change the code snipped I posted above to something like the following:\n``` obj-c\nif ([NSThread isMainThread]) \n{\n   completedBlock(image, nil, YES, YES);\n   [self.runningOperations removeObject:operation];\n} \nelse \n{\n  dispatch_async(dispatch_get_main_queue(), ^\n  {\n     completedBlock(image, nil, YES, YES);\n     [self.runningOperations removeObject:operation];\n  });\n}\n```\n... you'll see that that delay goes away. \n. I've now actually added this to my fork of SDWebImage. Your initial code may work better with this. \n. I was also suppressed to see such an improvement. I would assume some benefit would come due to using CG methods directly instead of going through UIKit, but otherwise it's also a mystery to me. \nI've investigated image extraction a while back and merged together several variants that I found. This was the best performing. I've been actually using a version that also discards the alpha channel but opted to leave that out for flexibility's sake. \nIt might might be a good idea if someone independently verifies that there is an actual performance increase here.\n. I went and did another profiling round, this time on the beta branch directly (I initially added this enhancement to the master branch and did my measurements there).\nOn the beta branch, the results seem even more dramatic. Those are loads of the first two relatively large (1920px+) images from disk. No UI interaction took place during those tests and the only difference is that I reverted back to the old decompression code for the first one. http://cl.ly/image/0P2Y0b1w1x30 http://cl.ly/image/2i18123Z2y3E\nI also noticed that I was getting a lot of memory warnings. I went and investigated the memory aspect and notified that the Activity Monitor indicates a 100+MB spike during image load when using the old decompression code. The new code produced a memory spike of just 5MB. \n. Yeah makes sense, getting the alpha info from the source image can lead to invalid combinations. I guess I just got lucky with my sample data. \nDoes the warning go away with? \nCGBitmapInfo bitmapInfo = kCGImageAlphaPremultipliedLast;\n. Actually, this should be the best performing variant: \nobj-c\nCGBitmapInfo bitmapInfo = kCGImageAlphaPremultipliedFirst | kCGBitmapByteOrder32Little;\nSources:\n- http://stackoverflow.com/questions/5266272/non-lazy-image-loading-in-ios\n- https://gist.github.com/259357\n- http://stackoverflow.com/questions/2395650/fastest-way-to-draw-a-screen-buffer-on-the-iphone\n- https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_images/dq_images.html#//apple_ref/doc/uid/TP30001066-CH212-BBCJBICF\n. Yeah, but I think the point here is to find a format that doesn't require any additional conversions on the main thread. I don't know. This seems to be used by most people and this doesn't break for me like the previos variant. \nFeel free to just cherry pick the other stuff if you'd rather keep the current Implementation. I'll create a test app that illustrates the problems I was seeing once I find some spare time.\n. I noticed the same thing. I don't really know why cancelAll is doing that dispatch call. I think it would be reasonable to require that this is called in the main thread. Most of the SDWebImage public methods won't work well if not called from the main thread anyways.  \nRemoving the dispatch call doesn't seem to cause any problems - 32947bc044fb64719f2a8f37c2a350bc35694115. \nI think it's reasonable to chancel everything. The pre-fetcher uses a private manager instance so all of it's URLs can be cancelled. \n. If I may way in here for a bit. What exactly is the issue you're seeing here? Is this recursion a problem? Are you worried that the call stack is going to grow to large? \n\nAn alternative way to fix this is to call the success block from the download function in the next run loop, which might avoid future issues like this.\n\nThe downloader call the success block should not be called in the next run loop. Ideally it should return in the current run loop iteration if possible so the image can be displayed immediately if it's already available in order to minimize UI flicker. \n. In that case it might make sense to refactor the recursion into a while loop?\nThis method is being called on the main thread, right? Does it affect\nthe UI when you're loading ghat many images?\n. It looks to me like it downloads a range of photos (from the requested index to self.requestedCount). That would be the loop. It's true however that your approach might better handle changes tot he URL array, so perhaps it's really the way to go.\n. Yes, I think there really is a problem here and it's actually broader that this specific example. \nIt's pretty easy to see how we can get to a deadlock here. If diskImageExistsWithKey: gets called while queryDiskCacheForKey:done: is doing work on the ioQueue, the main thread will block on the dispatch_sync call inside diskImageExistsWithKey:. When queryDiskCacheForKey:done: in turn reaches the dispatch_main_sync_safe call, it has to wait for the main thread, which is blocked by the dispatch_sync call. The ioQueue waits for the main_queue and vice versa. \nThis can also happen in other places where dispatch_main_sync_safe is used to invoke callbacks (calculateSizeWithCompletionBlock:) and perhaps also in other places throughout the library - related to other queues.\nIn general I think it's pretty risky to invoke callbacks from a queue to main queue synchronously, if there are places where the main queue can enter the particular queue in a synchronous manner. To play it safe, think callbacks should rather be always dispatched asynchronously as a general rule (meaning https://github.com/rs/SDWebImage/commit/3a6d9481c9dd5a0e6a8c586cf6fb7f21127cbe65 and any similar modifications should perhaps be reverted). \n. I came up with a couple of fixes for SDImageCache, that hopefully improve things a bit. \nI guess that using the shared file manager would be ok here, however in my opinion, always using the serial ioQueue does have some advantages here (for instance making sure that operations that require multiple NSFileManager actions complete as one unit of work before the next cache task is performed). Also when using dispatch_async, we obviously also free up the main thread (not really applicable when discussing diskImageExistsWithKey: though). \nI also think that using dispatch_async for the callbacks is more appropriate here, since we're always on the ioQueue and dispatch_main_sync_safe would not really save us much time here. \n. Hey there! I'm a bit swamped with other work as well, but otherwise I'm more than happy to help out a bit, as soon as I get some breathing room. \n. I think the reason for this is the change from\n- (BOOL)isExecuting;\n- (BOOL)isFinished;\nto \n@property (readonly, getter=isExecuting) BOOL executing;\n@property (readonly, getter=isFinished) BOOL finished;\nin NSOperation. This probably impacts auto ivar generation.\n. Fixed in a83f44026946ba44525f7243bf1c73d5f22817f0.\n. That's essentially equivalent, just a matter of style. \n. It's possible to configure cocoapods to fetch a specific version from\nthe git repository. It makes no sense to create a new version for\nevery minor fix.\n. Consolidating some of the category functionality into a single utility class and enhancing the cancelation behavior seems like a good thing to do, so I approve as well. There's actually even more stuff that could be shared here. The main thing I'd personally do differently is to define a new class for the shared functionality instead of cramping the shared code into a UIView category. Adding base classes like UIView should in my opinion be done only if it really makes sense. Something like +[SDWebImageCache setImageLoadOperation:onObject:forKey:] could do the same thing. There were also some public API changes here, that were made without first marking the methods as deprecated or something like that. Probably not a big deal, but in general it's better if API changes (e.g., renaming methods) are only made with major releases. \n. Great. Thanks. \n. I think the important thing to keep with async calls is that (memory) cache hits get returned in the same run loop iteration. This way we don't get any image flickering going on for this operation, that really should be instantaneous. \nPutting it another way. If I call -[SDWebImageManager downloadImageWithURL:options:progress:completed:] from the main thread and this results in a memory cache hit, the completion block should be invoked immediately so the image can be populated before the UI is re-drawn. The main thread check in dispatch_main_async_safe, should essentially make sure this does in fact happen, right? \n. ",
    "TalalM": "Yes, I am using reusable cells.\n. Hi,\nThe problem seems to be solved with the version 3.0-beta !\nI will let you know if I have this problem again.\nThanks,\n. ",
    "gokalpcaymaz": "I am getting same error for this. above solution was not worked for me. do you have any suggestion?. ",
    "rogmabi": "You are probably already using the AFNetworking library for your other network stuff and there is also a category called UIImageView+AFNetworking.[h|m] with a method which has exact same signature... I suggest you have a look at Apple documentation about that Method Name Clash: http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html#//apple_ref/doc/uid/TP40011210-CH6-SW4\nPS: AFNetworking has a caching mechanism from NSURLCache. Read more about that here http://petersteinberger.com/blog/2012/nsurlcache-uses-a-disk-cache-as-of-ios5/\n. ",
    "Toze": "Thanks for replying so quickly.\nMy app build settings is set to YES for Objective-C Automatic Reference Counting (project and target) but still raising the error\n. I've not found the solution. I've commented the line in the lib for the\nmoment (yes, I know, I should be ashame :p)\nOn Wed, Nov 28, 2012 at 6:31 PM, zzndino notifications@github.com wrote:\n\nI have same problem, @Toze https://github.com/Toze how did you solve\nit? OR @rs https://github.com/rs what shall I do? (my \"Objective-C\nAutomatic Reference Counting\" is set to \"Yes\" in my app \"Build Settings\")\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/229#issuecomment-10812057.\n\n\n_Antonio MENDES PINTO\n_CEO & Co-Founder of Toze Labs\nT : @Toze https://twitter.com/#!/Toze _| W :  http://tozelabs.com | P\n: +33 6 73 97 50 47_\n\n\n. works for me. Thanks!\n. ",
    "zzndino": "I have same problem, @Toze how did you solve it? OR @rs what shall I do? (my  \"Objective-C Automatic Reference Counting\" is set to \"Yes\" in my app \"Build Settings\")\n. works for me, thanks\n. CGRect imageViewFrame = [self getImageViewFrame];\n        CGSize imageSize = imageViewFrame.size;\n        IndexPath shouldIndexPath = self.indexPath;\n        NSString imageUrlStr = [imageUrl absoluteString];\n        UIImageView *blockImageView = _imageView;\n```\n    [[SDWebImageDownloader sharedDownloader] downloadImageWithURL:imageUrl options:0 progress:^(NSUInteger receivedSize, long long expectedSize) {\n    } completed:^(UIImage image, NSData data, NSError *error, BOOL finished) {\n        blockImageView.image = [FitImage fitImageWithFrame:imageSize  image:image];\n        if ([shouldIndexPath isEqual:self.indexPath]) {\n        blockImageView.alpha = 0;\n        [UIView animateWithDuration:0.5\n                         animations:^{\n                             blockImageView.alpha = 1;\n                         } completion:^(BOOL finished) {\n\n                         }];\n    }\n    [[SDImageCache sharedImageCache] storeImage:image forKey:imageUrlStr toDisk:NO];\n}];\n\n```\nI use downloader in a tableview, so the most important for me I need to store indexPath before download and the get into completed block compare the indexPath if it is the one before download. \nIn 2.x I use userinfo, but now I don't know how to keep the needed values such as imageSize, shouldIndexPath, imageUrlStr...\n. @rs I probably work this out, but there is one thing I want to tell you. You are doing amazing work!!!!!!! I like your project VERY MU~~~~CH!!!    GOOOOOOOOOOD JOB!!!!! \n. ",
    "chadpod": "Seeing same issue.  Xcode 4.5.2, LLVM 4.1\n. Thinking this is probably due to having the #import for SDWebImage stuff in the prefix header? @davekeck just verified that is indeed the case.  When you mix ARC and non-ARC in the same project, the prefix is compiled as non-ARC, and hence the check fails.  Due to this, the check for ARC should probably be handled differently.\n. ",
    "davekeck": "To elaborate on @chadpod: the problem is that SDWebImageCompat.h is being included from non-ARC code, sometimes indirectly by way of a .pch prefix header.\nSince ARC is an implementation detail, this compiler assertion should only occur within .m files, not headers. In other words, since clients of SDWebImage can be both ARC and non-ARC, SDWebImage's public headers should be compatible with both ARC and non-ARC.\nSee https://github.com/shacked/SDWebImage/commit/424a3e4cdf9d18d0444c2a7358bbe14775fe8e09 for our fix.\n. ",
    "rpedroni": "LOL, my awesome solution also was commenting the line out.\n. Same problem here. I'm going to the extent of clearing and cleaning the WHOLE disk and memory but with no success :(\n. This is not a bug but a misconception of how table view cells work.\nLike getaaron said, go to SO and look for questions with subjects like \"Load async image in cell\"\n. ",
    "apauly": "I was able to fix this issue. It had absolutely nothing to do with SDWebImage. If you're interested, here're the two main issues I had:\n1. I used [cell setTag:indexPath.row].\n   The image view also had a tag, to find and reuse it on recycled cells.\n   I didn't realize that [cell viewWithTag:] could also return the cell itself.\n   The images tag was 33 - that's why all that weird stuff started with row 32.\n2. After fetching remote content, I used [tableView insertRowsAtIndexPaths:indexPaths withRowAnimation:UITableViewRowAnimationNone]. Again, I didn't know that this method actually forces the tableView to allocate new instances for all (or most?) added cells instead of just dequeue them. Every request to the server adds 6 cells to the tableView, that somehow explains the step I mentioned above...\n. ",
    "DylanVann": "The problem is that @ankitherocker wants each SDWebImage request to specify its own headers.\nAs it is headers are not associated with requests, they're shared between all requests for a downloader.\nSame issue:\nhttps://github.com/rs/SDWebImage/issues/729\nhttps://github.com/rs/SDWebImage/issues/166#issuecomment-8379698. ",
    "LuaiKalkatawi": "I added the SDWebImage file which is inside the SDWebImage-master file. \n. Thanks it works now.\n. ",
    "drUniversalis": "having the same issue right now\n. ",
    "AlfonsoUceda": "and here:\nerror\n<Error>: CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 32 bits/pixel; 3-component color space; kCGImageAlphaLast; 800 bytes/row.\nI'm using cocoapods.\n. ",
    "gabrielrinaldi": "I am having the same issue too. It was working fine on 2.7. Also this new version seems to be causing small UI blocks. Could be by upgrade to the new queryImageForKey: method.\n. ",
    "srisub": "I'm also running into this problem -- images don't load occasionally and this behavior is unpredictable. Has anyone looked into this issue yet?\nThanks, \nSriram\n. I tested the new in-memory caching code with our app (ShoppinPal) and it seems to work well. Thanks! \n. ",
    "JaapManenschijn": "I could do that, but it does not seem to be the most logical step.\nI guess for people wanting to do cache related stuff, the first place they look at is something called SDImageCache when they look through the files. Atleast, for me that was the first place to look at, and that didn't turn out to work the way you'd think it would.\nIt could be me, but i don't find it to be very logical.\n. Fair enough, i didn't look at it that way.\nI guess i'll just clear it through the SDWebImageManager.\nWouldn't suprise me if more people ran into the same issue like i did, but i guess they'll find this issue if they can't work it out.\nThanks for your time! :)\n. ",
    "shiablue": "I got this issue today.I can't find out a way to fix it.\n. ",
    "Doshipak": "@bpoplauschi So, I've just got this issue.\nI've tried to clear my image cache in four standard ways:\n1. [[SDImageCache sharedImageCache] clearMemory];\n       [[SDImageCache sharedImageCache] cleanDisk];\n2. [[SDImageCache sharedImageCache] clearMemory];\n3. [SDWebImageManager.sharedManager.imageCache clearMemory];\n4. [SDWebImageManager.sharedManager.imageCache cleanDisk];\n5. 3 and 4 together\nBut it didn't work the way I expect.\n. @bpoplauschi I'am using the last version of SDWebImage (3.7.1), just updated my pods to make sure.\nTo be honest I didn't get the difference between \"clearMemory\" and \"clearDisk\". If it's not complicate for you can you please explain me that?\nI want to do the same when I'am calling this mehod for single image:\n[[SDImageCache sharedImageCache] removeImageForKey:imageKey fromDisk:YES];\nThis method works fine. I want to do the same with all images stored in app device memory to load new images from server.\n. @bpoplauschi Thank you man! I've missed this difference. Now everything is fine. My fault!\n. ",
    "handiansom": "I got a problem with  my memory. I am using the SDWebimage with ProgressView. Is there a way to clear the cached memory? disk and ram?\n. @bpoplauschi   Thank you so much for your answer. It really helped me reduce memory usage.\n. ",
    "AmeerChand": "on Logout Method....\nSDImageCache.sharedImageCache().clearMemory()\n        SDImageCache.sharedImageCache().cleanDisk()\n        SDImageCache.sharedImageCache().clearDisk()\nafter login i switched off the internet.\non Scrolling The TableView i am Still getting Images. Why?\nwhile there is no internet Connection.\n. i don't know about ATS.\ni send you Array of images.\ncan you make a try to check these.\nThanks.\nOn Wed, Mar 29, 2017 at 1:29 PM, Konstantinos K. notifications@github.com\nwrote:\n\ndid you try the urls in the demo project? what version are you using?have\nyou setup ATS in your plist?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1846#issuecomment-290020365, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AZhZ-UzIsAN-l11u3Ri5bfjJWgBCkktVks5rqhZqgaJpZM4Msn-3\n.\n. i download form https://github.com/rs/SDWebImage\ni tried my best to solve this issue but i can't.\n\nThe whole issue is in Attachment.\nOn Wed, Mar 29, 2017 at 5:07 PM, Konstantinos K. notifications@github.com\nwrote:\n\nplease check the demo project and test the images there. i am closing the\nissue for now. if you still encounter issues after you tested with the demo\nproject please let me know.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1846#issuecomment-290069802, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AZhZ-dkaVS6yVv_a-8clmnJSeeQCE84gks5rqkmLgaJpZM4Msn-3\n.\n. still error.\ni already Tried this command\n\nOn Thu, Mar 30, 2017 at 12:02 PM, Konstantinos K. notifications@github.com\nwrote:\n\nplease clone the repository using git clone --recursive\nhttps://github.com/rs/SDWebImage.git and then open the demo project,\nremove the demo urls and add your own. Run the project in a simulator or\ndevice and let me know if the images appear in the tableview\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1846#issuecomment-290320685, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AZhZ-b1yoDcCVD9VQC1nWVsLVvMKiK1sks5rq1N8gaJpZM4Msn-3\n.\n. destination path 'SDWebImage' already exists and is not an empty directory\n\nOn Thu, Mar 30, 2017 at 12:21 PM, Konstantinos K. notifications@github.com\nwrote:\n\nwhats the error you are getting when you git clone the repository in your\nterminal?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1846#issuecomment-290324441, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AZhZ-WLZv3g5v5OTxTpguWNskjWUq3rfks5rq1gMgaJpZM4Msn-3\n.\n. why i am getting this one error\n\nOn Thu, Mar 30, 2017 at 12:29 PM, Konstantinos K. notifications@github.com\nwrote:\n\nthis means you already have SDWebimage in the destination folder you\ncloned it to. As you can see from my previous post the images appear just\nfine.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1846#issuecomment-290326055, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AZhZ-d8DveLYH2K6A0E_nKDbCFhpkyyRks5rq1nbgaJpZM4Msn-3\n.\n. i saw that you have done this.\nbut why i am getting this error.\n\ncan you assist me on this problem?\nOn Thu, Mar 30, 2017 at 12:34 PM, Konstantinos K. notifications@github.com\nwrote:\n\nas i have told you in my previous post you already have this library\ndownloaded in your destination folder where you are trying to clone it to.\ni am sorry i cannot provide more info since i just tested the urls and they\nseem to work fine. please check your code\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1846#issuecomment-290327009, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AZhZ-SUUTP0NXYf4E7kerX__74EDz2bnks5rq1rsgaJpZM4Msn-3\n.\n. \n\ni know it's worked well in  your device.\nas you above show Image thats well.\nbut why i am getting still same issue?\n. ok. i admit this is not issue of library.\n The issue is \nApple LLVM 8.0 error.\nNo Input file.\nwhat are these error??. can you send me link of demo account excluding Github.\ni tried alot but i can't solve this error.\ni tried many to download from Github.\nbut unable to solve LLVM 8.0 error.\nOn Thu, Mar 30, 2017 at 5:06 PM, Konstantinos K. notifications@github.com\nwrote:\n\nif you read the whole error you will see that it tries to find a missing\nfile. this means that the repository has not been cloned correctly and some\nfiles are missing\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1846#issuecomment-290390914, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AZhZ-WjA6c39ElC48MjYHX80m4lwWzEQks5rq5rGgaJpZM4Msn-3\n.\n. \n\n. yes\n\nOn Fri, Mar 31, 2017 at 2:00 PM, Konstantinos K. notifications@github.com\nwrote:\n\ndid you use the same image urls you posted above?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1846#issuecomment-290658322, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AZhZ-T_UFALo4KNhuWm1Ov2O9Ktyou9kks5rrMCmgaJpZM4Msn-3\n.\n. @bpoplauschi I am showing images via SDWebImage in a tableview. Now I have a button that clears the cache and when I reload the tableview it still shows images. Even I have killed the application completely after clearing cache and device is in airplane mode. Now when I relaunch the application it still shows images which I had cleared earlier.  That's why I think there is some issue in clearing cache. . \n",
    "MattFoley": "Thanks!\nSent from my iPhone\nOn Feb 16, 2013, at 4:55 PM, Olivier Poitrey notifications@github.com wrote:\n\nPlease upgrade to SDWebImage 3.0.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey, is this already in development by someone? If not, I can go ahead and add GIF support to SDWebImage using this category in the next day or two I think. Would that be helpful?\n. Very awesome!\n. #377 Adds a getter for that to both UIImage and UIImageView, convenience/readability method for any future users.\n. Oh shoot, that's totally true. I had been following the GIF thing for a bit, wanted to help a bit :)\n. \n",
    "swtlovewtt": "SDWebImage is ARC only. Either turn on ARC for the project or use -fobjc-arc flag\n. the marco you defined 'dispatch_main_sync_safe' and 'dispatch_main_async_safe'.\nwhat's the difference of this two marco?\nin 'dispatch_main_sync_safe' you set the image from web.\nin 'dispatch_main_async_safe' you return an error.\nis this two marco has difference?\nhow about use OperatinonQueue:\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{\nimg.image = tempImage;\n}];\nneed your answer ,thank you .\ud83d\ude04\n.  thank you ,now I know the  dispatch_main_async_safe  may faster than   dispatch_main_sync_safe  am I right?\nand  how about use OperatinonQueue:\n\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{\n}];\n. ",
    "nickcheng": "How about replace 'self' with 'wself'?\n. Yes. It's confusable.\n. ",
    "rsmoz": "I'm gonna work on a fork.\n. ",
    "ruchiryTrre": "same here.. \n- I am using iOS 6.0 with ARC enabled for my project. \n- I use images to show in the table view & collection view.\n- I also tried to modify the code and not allow any \"caching\" to see if that changes anything, but did not help much.\n. - the crash is Low Memory crash so there is no such stack trace\n. ",
    "soufianeEssabbane": "Yes in the simulator it just make the app freeze it's just like if it\nblocks the main thread ... but in the device it completely crashes.\n2013/1/9 Olivier Poitrey notifications@github.com\n\nSo it's a kill from the OS? It doesn't happen in the simulator right?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/259#issuecomment-12043537.\n. did anyone found a solution ????\n. \n",
    "thedarkginger": "You're a rockstar. I'm going to give this a try. Big thanks! \n. Re: aburgel - What would I want to do to create a changing URL request? I get that I could keep updating the files it is pulling it from on that basis, but how can I make that happen in the code, if you don't mind me asking? \n. ",
    "viking2009": "/Users/Yair/Downloads/GoogleAnalyticsiOS_2.0beta3/GoogleAnalytics/libGoogleAnalytics.a(GAIDispatcher.o)\n/Users/Yair/Downloads/GoogleAnalyticsiOS_2.0beta3/GoogleAnalytics/libGoogleAnalytics_debug.a(GAIDispatcher.o)\nyou can use only one library for target, not both at once\n. You should add libGoogleAnalytics.a for release(distribution) version of your app or libGoogleAnalytics_debug.a for debug version.\nRead Readme.txt for Google Analytics iOS SDK version 2.0 Beta 3:\n\"To use a version of the library with debug symbols intact, link against libGoogleAnalytics_debug.a instead of libGoogleAnalytics.a. This may be useful\nif you experience exceptions or crashes originating in the SDK.\"\n. ",
    "lyair1": "so what can i do if i want to use the google analytics library but also this one?\nis that not possible?!\n. ok. thank you very much! i deleted the release version and its now working. \nits amazing! thanks!\n. ",
    "ericbae": "Same here. \n. ",
    "kenpig": "Thanks, I've tried, but still wrong\n. \n. Thanks you very much! I found the cause of the error.\n. ",
    "jpatinop": "so? waht was the error, share please\n. did you fix the problem? I'm having it too\n. ",
    "skensell": "You can now solve this flashing issue with the SDWebImageDelayPlaceholder option.\n. ",
    "mingfu": "Thanks for the reply.\nHere's the link to the doc i was reading:\nhttp://hackemist.com/SDWebImage/doc/Classes/SDImageCache.html\n. ",
    "thomask": "Got the same issue\n. ",
    "alparkatona": "Im not sure of the version used. Inherited code. (In the project only the framework is included.)\nI tried eyeballing the diffs between what I have in the framework and the one from the GIT 3.0 version and I could not find any.\nHow can I check the version?\n. ",
    "reidmain": "Sounds good to me.\n. ",
    "mtitolo": "Fun story, I've been using this library without problems for a few months, and I just started getting this crash as well.\n[UIImageView setImageWithURL:placeholderImage:success:failure:]: unrecognized selector sent to instance 0x16aa5210\nThis works fine if I don't try to use blocks.\n. I have the -ObjC linker flag already, plus -all_load. I'm still seeing this crash, and I need to use the blocks for this.\n. So my problem has since been resolved, and was a compound of having AFNetworking+UIImageView.h/m still in my project (which was being used even though I didn't #import it), AND the SDWebImage library conspicuously missing from Link Binary With Libraries.\n. Took a bit of poking, and some symbolic breakpoint trickery, but I managed to reproduce the issue.\nCode: https://github.com/mtitolo/cats/tree/sdwebimage-scrolling\nHere's an Instagram key to use: 42988e0cdc54410b80aceeb4309faf19\nHow to reproduce: \n1. Set a breakpoint in applicationDidFinishLaunching...\n2. Get a device, iPhone 4 or equiv,  and enable Network Link Conditioner on the 3G setting.\n2. Run on the device.\n3. When the breakpoint is hit, in lldb run breakpoint set -n semaphore_wait_trap\n4. Next, run script and paste in this script:\n```\nfind_in_stack = ['-[SDWebImageDownloader addProgressCallback:andCompletedBlock:forURL:createCallback:]']\ndef continue_ignored(frame, bp_loc, dict):\n    global find_in_stack\n    names = set([frame.GetFunctionName() for frame in frame.GetThread()])\n    all_ignored = set(find_in_stack)\n    ignored_here = all_ignored.intersection(names)\n    if len(ignored_here) == 0:\n        frame.GetThread().GetProcess().Continue()\nquit()\n```\nThere are a number of semaphore_wait_traps that we want to skip. We are only interested in ones with -addProgressCallback:... in its stack frame\n5. Lastly, run br comm add -F continue_ignored 2 where 2 is the ID of the breakpoint printed from step 1 (it may be a different number).\n6. Continue. Scroll around a bit, and the breakpoint will be hit.\nI noticed that this will also get hit in the simulator occasionally, so this looks to be the cause of jankiness in general.\nHTH.\n. Related: http://openradar.appspot.com/radar?id=4998836871233536\n. ",
    "getaaron": "Same here - if I pass a completion block (even an empty one), it crashes.  If I pass nil, it doesn't.  Of course, that doesn't help me update the image when the download completes. :-)\n. Update: I was able to resolve the issue by adding the -ObjC linker flag to my target.\nFrom an Apple Q&A:\n\n\nThis flag causes the linker to load every object file in the library that defines an Objective-C class or category. While this option will typically result in a larger executable (due to additional object code loaded into the application), it will allow the successful creation of effective Objective-C static libraries that contain categories on existing classes.\n\n\nI'm leaving the bug open in case the maintainers would like to add some type of test or warning for this issue.\n. I made a similar modification on my project for the same purpose: rounded corners on images in a table view.\n. @melle What about just creating your own category on UIImageView which calls the SDWebImage category, then rounds the corners (or does whatever) on completion?\n__weak UIImageView *updateImageView = self;  //__weak prevents retain cycle\n    [self setImageWithURL:myURL\n                completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {\n                    image = [image roundCorners]; //rounds corners\n                    updateImageView.image = image;\n                }];\n. I'm using the newest version of SDWebImage from CocoaPods (3.2).\n. Okay, I traced through all the blocks.\nLooks like it's getting to here (lines 46-71):\n```\n- (void)setImageWithURL:(NSURL )url placeholderImage:(UIImage )placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedBlock)completedBlock;\n{\n    [self cancelCurrentImageLoad];\nself.image = placeholder;\n\nif (url)\n{\n    __weak UIImageView *wself = self;\n    id<SDWebImageOperation> operation = [SDWebImageManager.sharedManager downloadWithURL:url options:options progress:progressBlock completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished)\n    {\n        __strong UIImageView *sself = wself;\n        if (!sself) return;\n        if (image)\n        {\n            sself.image = image;\n            [sself setNeedsLayout];\n        }\n        if (completedBlock && finished)\n        {\n            completedBlock(image, error, cacheType);\n        }\n    }];\n    objc_setAssociatedObject(self, &operationKey, operation, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n}\n```\nAnd wself is nil, so the method returns without the completion block being called.\nWhy is wself == nil?\n. Got it.  I thought I was retaining the UIImageView, but I wasn't.  I am now, and that resolved the issue.\nDo you think it's worth logging a warning when this happens?\n. You should ask this question on Stack Overflow: http://stackoverflow.com/questions/tagged/sdwebimage\n. @bpoplauschi :thumbsup::exclamation: \n. I can, but the issue only occurs rarely, so I'm not sure it'll be conclusive.\n. Thanks!\nDo you think it's worth doing a bugfix update with this and the other recent threading changes? (SDWebImage 3.3.1, maybe?)\n. I opened a pull request for the CocoaPods specs: https://github.com/CocoaPods/Specs/pull/3544\n. You need to remove the image from the cell in your subclass, in prepareForReuse.  You can probably get a more complete answer on stack overflow.\n. ",
    "muzammil-triffort": "Thank you getaaron, \nI was able to resolve the issue by adding the -ObjC linker flag to my target.\n. ",
    "xissburg": "Haven't tried this before but I bet you can store it in the cache manually like this:\nobjective-c\n[[SDImageCache sharedImageCache] storeImage:someImage key:[imageURL absoluteURL]];\nHTH\n. Even though the image was cached in the file system, the image is not always in the memory cache. The proper way to query an image from the cache is to use -[SDImageCache queryDiskCacheForKey:done:]. It gives you the image in the done block.\n. The completion block might be called immediately (if the image is loaded in memory) or later (if the image is in the flash memory or has to be downloaded from the server). If it is called later after the download finishes, the cell you are using inside the block might not refer to the cell you expect because of cell reuse. Then, you need to obtain the cell through -[UITableView cellForRowAtIndexPath:] passing the indexPath you already have as the only argument. \nHowever, there's another detail here. If the block is called immediately, cellForRowAtIndexPath: is not gonna work (can't recall what happens exactly) because you are building the cell that should be at this index at this point! So in this case you have to just use the cell you already have. You can use the cacheType variable to determine what to do. If it is coming from memory, just use the cell you already have. Use cellForRowAtIndexPath: otherwise. Something like this:\n``` objc\nUITableViewCell *actualCell = nil;\nif (cacheType == SDImageCacheTypeMemory) {\n    actualCell = cell;\n}\nelse {\n    actualCell = [tableView cellForRowAtIndexPath:indexPath];\n}\n```\nNow you use actualCell instead.\n. @sprynmr what does your tableView:cellForRowAtIndexPath: look like?\n. Remove UIImageView+AFNetworking.h/m from your project.\n. ",
    "TomThorpe": "No worries - At the time of writing this SDWebImageCacheMemoryOnly didn't work correctly (since been fixed in https://github.com/rs/SDWebImage/pull/287 ), so while I was investigating that, I had thought it might've been useful to be able to choose to not even cache to memory. SDWebImageCacheMemoryOnly is fine though.\n. ",
    "mclark4386": "Um, just use the example code with this url: http://communication.notitlabs.co/uploads/511e9ee6367885c248000025/avatar.png\nAnd why did you close this?\n. Fixed now, thanks. \n. ",
    "marcoscurvello": "I'm having the same issue, the company I am working for now has an api which always returns a image/jpeg, is there a way I can change the accept: header this request is sending ? @rs\n. Strangely I am receiving the same error from the NSError, I did change the Accept: header from \"image/webp,image/*;q=0.8\" to nil and it seemed to be a \"hotfix\" but are there any concerns I should have doing so ? I have contacted the backend people at the company and they said they are working on implementing webp so I guess I will have to live with this for awhile...\n. @rs the url I am requesting always hands me back a avatar in jpeg format.\n. ",
    "zapjonny": "We are seeing the same problem now.. This website describes a workaround: http://uiroshan.github.io/2015/01/25/sdwebimage-nsurlerrordomain-code-equals-406/\nThe deal is to call this code before .sd_setImage etc:\nSDWebImageDownloader.shared().setValue(\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\", forHTTPHeaderField: \"Accept\")\nCan't tell for sure, but this looks like a bug in SDWebImage? It's kind of weird, because the same code would work for one domain/path, but not another.... I suspected that too.\nBut downloading using curl or browsers work. If I change the accept parameter like that (I think Chrome uses that) it works. I don't know where the problem comes from.. And oh by the way, the first call would render a 406 error, then subsequent calls always -1001 or similar. It's like it caches the error (??) on first attempt after booting app, and does not retry actual network calls from there.. @PKrupa94 it seems that the function you mention is async. Is there a sync alternative?. I was able to work around my issue which was about loading specifically sized images from an API, and I suppose a sync method does not exist. In my case I needed to re-fetch the image from url if the sdimagecachetype was anything but memory. Not sure the reason for that. I had to create a separate cache and query the contents of that - get the image and cache type with the query and if it wasn't a memory cache type I'd fetch again, store to my cache, then reload the whole cell from table view.. I think I read somewhere here that even loads from disk cache are too slow and would cause jumpy UI performance which is why sdwebimage obviously (?) does disk loading on a background thread, which actually should be the correct way. So in any case image fetching should not be done in sync in the main thread. \nIf you're using a collection view then I suppose your case could maybe be fixed in a similar way with mine. I had a set width for the images, but I still needed to maintain the original aspect ratio of each image, which needed to be calculated after an image was fetched, and then set through a layout constraint. I got it to work in the end.. Sdwebimage even has this cache class which can be instantiated like this. I put this in the specific thumbnail cell class I used. Might be worth checking out.\nprivate static let cache = SDImageCache.init(namespace: \"mynewcache\")\n2018/01/27 9:29\u3001Ryan Poolos notifications@github.com\u306e\u30e1\u30fc\u30eb:\n\nYea I was looking for an in memory cache check I could use, since the size would be called immediately after the image loads the slower way.\nBut I guess we'll live with fixed size for now until we can write our own cache or write our own API that returns the size of the image in the initial object load.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I need this. I need the path of the image for a local notification attachment.. My idea was to save the uiimage to disk myself, if possible, then use that completion handler.... \n",
    "NachoSoto": "Thanks!\n. This seems like a really hacky way to detect finished operations. I would recommend implementing it similar to how NSOperationQueue works and use KVO on isFinished.\n. ",
    "hemangshah": "+1\n. ",
    "JohnnyTseng": "Thanks, problem solved!\n. ",
    "jurezove": "Yes, indeed I am. I've tried commenting out the part in the mentioned method where bitmapInfo is modified and images are not colored red anymore but of course, warnings are thrown in the console regarding the bits per second etc.\n. ",
    "melle": "I think the operation is cancelled only, if the UIImageView category is used. We're using SDWebImage inside a custom control (that adds an overlay-image, rounded corners and such stuff). In this case the operation keeps running and blocks the queue.\nThe speedup is visible: when the user scrolls very fast, it may take several seconds until the image of the bottom row is loaded. Of course it is possible to cancel the operation, but we prefer to continue loading. In case the user changes the scroll direction, the images can be served from the cache.\nI understand that this is not everybody's use-case, maybe we should add a SDWebImageOption (LIFO/FIFO) to enable this explicitly.\n. Well, we would like to continue loading the images to pre-fill the cache.\n. ",
    "SebastianZus": "In case of UITabeViews, we decided to use SDWebImageManager and because of that, we changed to a LIFO implementation. The reason is that while the priority of downloading images is with respect to the current UI, we also keep downloading images that were previously scrolled over, in order to have them in the cache. \nIf we would've used the UIImageView category, the user would've had to wait at each cell in order for the image to be downloaded and cached. Because on some images the actual URL for the image takes a while to be retrieved (redirects and external web service api's) we considered that it wouldn't be so user friendly.\n. ",
    "ikanth": "as beginner in ios  plese clarify this doubt? \n. hello..........please clarify my doubt............\nin .h file like.......\nimport \n@interface TableViewDemo111ViewController : UIViewController\n{\nIBOutlet UITableView *tableviewobj;\nNSMutableArray  *from_array;\n}\n.....\nin .m file like...........\nimport \"TableViewDemo111ViewController.h\"\n@implementation TableViewDemo111ViewController\n- (void)viewDidLoad\n  {\n[super viewDidLoad];\n// Do any additional setup after loading the view, typically from a nib.\nfrom_array = [[NSMutableArray alloc] init];\n[from_array addObject:@\"Donepudi\"];\n  [from_array addObject: @\"Kollur\"];\n  [from_array addObject: @\"Vizag\"];\n  [from_array addObject: @\"Donepudi\"];\n  [from_array addObject: @\"HYD\"];\n  [from_array addObject: @\"Tenali\"];\n  [from_array addObject: @\" Vizag\"];\n  [from_array addObject:@\" Donepudi\"];\n  [from_array addObject: @\"Mumbai\"];\n  [from_array addObject: @\"Now HYD\"];\nself.navigationItem.title = @\"My Journey\";\n}\n-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{\n    return 1;\n}\n//set the number of rows in a section\n-(NSInteger)tableview:(UITableView *)tableview numberOfRowsInSection:(NSInteger)section{\nreturn [from_array count];\n}\n//customize the cells\n-(UITableViewCell )tableview:(UITableView )tableview cellForRowIndexpath:(NSIndexPath *)indexpath{\n```\n//- (id)dequeueReusableCellWithIdentifier:(NSString *)identifier;\n// Used by the delegate to acquire an already allocated cell, in lieu of allocating a new one.\nstatic NSString *cellidentifier = @\" cell\";\n//idnetify the each & Every cellobj  by using cellidentifier\nUITableViewCell *cellobj = [tableview dequeueReusableCellWithIdentifier:cellidentifier];\nif(cellobj == nil)\n{\n    cellobj  =[[UITableViewCell alloc]initWithStyle :UITableViewCellStyleSubtitle reuseIdentifier :cellidentifier];\n}\n//set the values for each & every Row\nNSString *cellvalue =[from_array objectAtIndex:[indexpath row]];\n```\n//find the location of value & placed in the array\n//This row number is used, in turn, to extract the corresponding element from our colorNames array and assign it to the textLabel property of the cell object.\ncellobj.textLabel.text = cellvalue;\nreturn  cellobj;\n}\n- (void)didReceiveMemoryWarning\n  {\n  [super didReceiveMemoryWarning];\n  // Dispose of any resources that can be recreated.\n  }\n@end\n. hi........every one \ni am newly coming to ios &xocde(obj-c).\ns in that way you clarify me \nThanks in Advance\n. hi......rs\n  after changing UIviewController  to UITableViewController  & then build/run\nagain it shows like...........\n2013-02-12 17:05:56.809 TableViewDemo111[1608:11303] * Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: '-[UITableViewController loadView] loaded the \"TableViewDemo111ViewController\" nib but didn't get a UITableView.'\n* First throw call stack:\n(0x1c92012 0x10cfe7e 0x1c91deb 0x243357 0xf4ff8 0xf5232 0x443d5 0x4476f 0x44905 0x4d917 0x27b5 0x11157 0x11747 0x1294b 0x23cb5 0x24beb 0x16698 0x1beddf9 0x1bedad0 0x1c07bf5 0x1c07962 0x1c38bb6 0x1c37f44 0x1c37e1b 0x1217a 0x13ffc 0x24ed 0x2415)\nlibc++abi.dylib: terminate called throwing an exception\n(lldb) \n. thanks for response \n. sorry , not solve the problem Mr.RS\n. ",
    "fanyj": "An UIImage object CAN NOT present a gif image cuz UIImage does not support that. You can hack some code to get the image data from disk(if you have cached it to disk). See SDImageCache.m line#87\n``` objective-c\n- (NSString )cachePathForKey:(NSString )key\n{\n    const char str = [key UTF8String];\n    unsigned char r[CC_MD5_DIGEST_LENGTH];\n    CC_MD5(str, (CC_LONG)strlen(str), r);\n    NSString filename = [NSString stringWithFormat:@\"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\",\n                          r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], r[11], r[12], r[13], r[14], r[15]];\nreturn [self.diskCachePath stringByAppendingPathComponent:filename];\n\n}\n```\nYou can make this method public and get the raw data with [NSData dataWithContentsOfFile:cachePath];\nSee LBGIFImage if you need a present a gif image.\n. That will be great if SDWebImage have this feature. \n. THIS IS AWESOME! Great featrue!\nI been trying to integerate LBGIFImage into my project for weeks.\nSince it use method\nobjective-c\n(UIImage *)animatedImageNamed:(NSString *)name duration:(NSTimeInterval)duration\n, there may be some efficiency problem when playing a large gif (I just experience this problem).\nAt last I move to [https://github.com/ondalabs/OLImageView] and it works fine for me. \nI think we shall keep an eye on this problem.\n. I am facing the exactly same problem with the lastest release (v3.3) on ios5.0 or ios5.1. It's wired that this problem can't be reproducted on ios6.0 or higher. I stop the app on simulater and find out that there is about 50+ threads pasued on \nSDWebImageDownloaderOperation start\nobjective-c\n        // Make sure to run the runloop in our background thread so it can process downloaded data\n        CFRunLoopRun();\nand \nSDWebImageDownloader callbacksForURL:(NSURL *)url\nobjective-c\n    dispatch_sync(self.barrierQueue, ^\n    {\n        callbacksForURL = self.URLCallbacks[url];\n    });\nMay be there is a deadlock. \n\n. Nevermind\uff0cthis problem has been disscussed here #425 , and fix can be found here #444 .\n. This commit will bring the issue #425 back to us. Tested on ios 5.0 simulator.\n. I'm doing some researching on this issue and find out that issue #444 break the retain cycle in the wrong place.\nMay be the retain cycle is in SDWebImageManager.m:\nobjective-c\n- (id<SDWebImageOperation>)downloadWithURL:(NSURL *)url options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedWithFinishedBlock)completedBlock\nI have revert the #444 commit and add the following line in SDWebImageManager.m , by doing this I can break the retain cycle but this will still lead to issue #464. Hope someone can help me going further.\n``` objective-c\n        {\n            // Image not in cache and download disallowed by delegate\n            completedBlock(nil, nil, SDImageCacheTypeNone, YES);\n            @synchronized(self.runningOperations)\n            {\n                [self.runningOperations removeObject:operation];\n            }\n        }\n+        subOperation = nil;\n    }];\nreturn operation;\n\n```\n. Thanks for the effort but I'm afraid the problem was not be fixed.\nIt seems the following lines got another strong referance to subOperation.\nobjective-c\n            operation.cancelBlock =\n            ^{\n                [subOperation cancel];\n            };\n. @rs I've also noticed on Instruments that the number of SDWebImageCombinedOperation instances is rising along with SDWebImageDownloaderOperation's. May be the root poblem is caused by SDWebImageCombinedOperation..\n. Thanks. It works. May be there is still something wrong underlying. But at least with this commit the UI will not freeze forever on ios5. \n. I've run into the same problem. Both on iPad iOS 6.1.3 and iPhone Simulator iOS 6.1. With the master branch.\n. @rs \nIf I am right, this is caused by SDWebImageDownloader.m \nobjective-c\n- (NSArray *)callbacksForURL:(NSURL *)url\n{\n    __block NSArray *callbacksForURL;\n    dispatch_sync(self.barrierQueue, ^\n    {\n        callbacksForURL = self.URLCallbacks[url];\n    });\n    return callbacksForURL;\n}\nand \nobjective-c\n- (void)removeCallbacksForURL:(NSURL *)url\n{\n    dispatch_barrier_async(self.barrierQueue, ^\n    {\n        [self.URLCallbacks removeObjectForKey:url];\n    });\n}\nThe dispatch_xxx calls in these two methods are not mutexed so they could lead to this problem during the enumeration in the muilti-thread environment. \nI have changed both of dispatch calls to \u201cdispatch_barrier_sync\u201d and trying to reproduce this problem.\n. I've integerated YLGIFImage and it works well for me. But it seems this lib is no longer supported.  FLAnimatedImage sounds like a good idea and they are considering change FLAnimatedImage to an UIImage subclass. See #11.\nSo I vote FLAnimatedImage.\n. ",
    "wlegate": "Calling cancel on the SDWebImageOperation object doesn't cancel the operation\n. +1\n. any update on this?. @partho-maple unless something changed in the last week or so, this flag doesn't perform the desired/expected behavior as can be seen in the Concord library.. Any update on this?. ",
    "JuanMunhoesJr": "what i need to do to make this support?\n. i'm looking into method didReceiveData, the problem is with code after function CGImageSourceUpdateData called. What  this if (width + height > 0 && totalSize < expectedSize) means? if it was true, then the partial image is created but why?\n. i think that is the problem don't you think? i'm thinking about something like this: \nCreate the CFData object for accumulating the image data.\nCreate an incremental image source by calling the function CGImageSourceCreateIncremental.\nAdd image data to the CFData object.\nCall the function CGImageSourceUpdateData, passing the CFData object and a Boolean value (bool data type) that specifies whether the data parameter contains the entire image, or just partial image data. In any case, the data parameter must contain all the image file data accumulated up to that point.\nIf you have accumulated enough image data, create an image by calling CGImageSourceCreateImageAtIndex, draw the partial image, and then release it.\nCheck to see if you have all the data for an image by calling the function CGImageSourceGetStatusAtIndex. If the image is complete, this function returns kCGImageStatusComplete. If the image is not complete, repeat steps 3 and 4 until it is.\nRelease the incremental image source.\n. Well the code think its ok and the client application is saving interlaced png so i don't know what's the problem. I will try to understand why... Thank you for both answers. Regards.\n. ",
    "pedro380085": "Is it supported now?\n. ",
    "davidseek": "any updates?. ",
    "nebillo": "pull request for point 3 done :)\n. ",
    "Webguyatwork": "I found that downloading the current zip archive of the project and adding the classes manually into my project allowed animated GIF images to animate properly while importing from a GIT submodule did not. \n. I'm just trying out SDWebImage for the first time after finding out that Three20 image caching wasn't working at all anymore for some reason. Your library looks WAY more complete and easier to use. I wanted to point out that in my attempts to figure out the animated GIF support, I wasn't having any luck with it at all. But then I removed the pre-compiled framework (version 3.2) and added in the files manually, and all of a sudden I have have motion on those GIFs! Way cool, but perhaps a slight bug or a mismatched compilation is sitting on the download page right now.\n. ",
    "tuchangwei": "i meet it  like you\n. ",
    "josea": "@rs I agree that it would be a bad idea to do this for a table view. My use-case is that I have a thumbnails grid, when the user taps over an image I show a full screen image (2-5mb size). If the image is in disk-cache it takes about 0.5-1sec to show - so you get an ugly blinking between the placeholder and the real image. Blocking the main thread gives much better results... and I made it optional.\n. It is fast enough that you only see that image loaded. The thing is that when it shows the placeholder it blinks (the original behavior), and it immediately shows the correct image. You don't get to feel like the app is \"blocked\" because you are \"zooming\" in the page (you tap, the whole page changes, and it includes the image already, you can immediately interact with the app).\n. I tried a conditional technique to set the placeholder - it didn't work fine. I believe your idea might work. I'll try it tomorrow and let you know if I still want to \"request a pull\" from you. Thanks.\n. Ok - so your suggestion worked. I still have a place where it would be better to block the UI (I prefer to block the UI 0.3 seconds, than showing a complete screen missing the image so it loads in a moment). I might be able to delay the display of the fullscreen view a moment to see if that behavior gets fixed. \nAnyways, in case somebody runs into this in the future. This is the way you do it if you want to prevent blinking for images that are already in disk-cache (I am also going to update stackoverflow): \n[imageView setImageWithURL:url placeholderImage:imageView.image options:0 progress:\n         ^(NSUInteger receivedSize, long long expectedSize) {\n             imageView.image = [UIImage imageNamed:@\"QuestionMarkFace.png\"];\n         } completed:nil];\nI am closing this pull request as I guess you (@sb) are really against having anything in the code that blocks the main thread. \nThank you.\n. BTW: just FYI, doing the workaround above works, however, if the download queue has more items the placeholder is not displayed right away (as the progress block doesn't get called immediately). I am not sure what is worse for me, using the workaround and living with this or using my forked version (I do not like to be outside the master branch).\nNote: I believe the best option might be to add a parameter to indicate that the placeholder should only be loaded if the image is not in disk-cache. That's probably not that hard to be done. That way the main thread wouldn't be used for i/o. \n. Oh...sorry :). Thank you. BTW: I might come back in a few weeks with a way to check if the disk-cache exists. I am thinking on adding a InDiskPlaceHolder parameter to setImageWithUrl so we can specify the placeholder when the image is in disk. Already spent too much time on this, but depending on my users feedback I might do it.\n. ",
    "himanshur": "Even I am facing this problem. @rs, any chance we could have this fix ported to the main branch?\n. ",
    "luosky": "I am having this problem too.\n. same here\n. ",
    "amberaggarwal": "Thanks for quick response.\nI do have SDWebImageRetryFailed flag so that the URL does not get added to the list of failed URL's. But I still see the Issue I mentioned above.\nI think the Image Server is alive and responding all the time. I use Amazon Cloud front for image retrieval.\nIf I put an Alert View to put a debug message etc, I never see this Issue.\n. TestSavoDownloadOperation is derived from SDWebImageDownloaderOperation.\n. ",
    "hacky12": "To be a problem [self cancelCurrentImageLoad] I think this part? \nbecause if you do not take if (operation) this part is generated,\nthe objc_setAssociatedObject, may have an address other reference\n. ",
    "ollieatkinson": "I have been getting a similar issue, with some investigation it seems the operation queue is not getting cleared - I got around this by cancelling all operations in the SDWebImageManager in viewWillAppear.\n. I have been getting a similar issue, with some investigation it seems the operation queue is not getting cleared - I got around this by cancelling all operations in the SDWebImageManager in viewWillAppear.\n. ",
    "stevemckenzie": "I am seeing this as well. If you scroll around in a table or collection view, load a bunch of images and toggle the requests a few times, SDWebImageManager isRunning will get stuck on YES because of the stuck operations.  Using cancelAll will fix this.\nWould love to find out why the operations get stuck though.\nEdit:\nI should also note I am using SDWebImageRefreshCached\n. You can also watch in Instruments to see this.\n. After some more effort around this, still not understanding where things are going wrong but I can see more info at least.\nI believe this issue is related to cancelled operations as these are the operations that appear to be hanging around when they shouldn't. \nI can see when it reaches the sub operation where it needs to be removed from the array that it does not yet have isCancelled set to YES so this is at least why it never gets removed. isCancelled does eventually get set to YES though.\nFor now, this is my work around:\nSDWebImageManager *imageManager = [SDWebImageManager sharedManager];\n    NSArray *runningOperations = [imageManager.runningOperations filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@\"isCancelled = NO\"]];\n    BOOL isRunning = runningOperations.count > 0;\n    if (!isRunning) {\n      if (imageManager.runningOperations.count > 0) {\n        [imageManager cancelAll];\n        DDLogVerbose(@\"Removed all cancelled operations.\");\n      }\n    }\n    else {\n      DDLogVerbose(@\"Waiting till next time...\");\n    }\n. I'm seeing this issue as well.\n. ",
    "altab-ch": "I removed SDWebImage.framework from \"Link Binary with Libraries\", removed it from my project data. I downloaded framework version 3.1 from github, added it to the project. I removed app from simulator. I launch the app and files are still written on disk. Did i forget to clean something ?\n. ",
    "usirin": "@shoabricot When simulator screen is open, Click the iOS Simulator option from the top (Nex to to Apple Icon), and choose Reset Content and Settings. And then, recompile the app, all of the files will be gone.\n. ",
    "n13": "Actually was pretty easy, I have a fix but it's too messy to share right now, need to get some projects working... EXIF orientation gets stored in the cache with the image data so it's a simple matter of extracting it before creating the UIImage. \n. Basically I created a helper class with these two methods, and using that whenever we do \n[UIImage imageWithData:data]\n//\n// Created by nik on 3/1/13.\n//\nimport \nimport \"SDImageHelper.h\"\n@implementation SDImageHelper\n+(UIImageOrientation)imageOrientationFromImageData:(NSData *)imageData {\n    UIImageOrientation result = UIImageOrientationUp;\n    CGImageSourceRef imageSource = CGImageSourceCreateWithData((__bridge CFDataRef)imageData, NULL);\n    CFDictionaryRef properties = CGImageSourceCopyPropertiesAtIndex(imageSource, 0, NULL);\n    if (properties)\n    {\n        CFTypeRef val;\n        int exifOrientation;\n        val = CFDictionaryGetValue(properties, kCGImagePropertyOrientation);\n        if (val) {\n            CFNumberGetValue(val, kCFNumberIntType, &exifOrientation);\n            result = [self exifOrientationToiOSOrientation:exifOrientation];\n        } // else - if it's not set it remains at up\n        CFRelease((CFTypeRef) properties);\n    } else {\n        NSLog(@\"NO PROPERTIES, FAIL\");\n    }\n    CFRelease(imageSource);\n    return result;\n}\npragma EXIF orientation tag converter\n// Convert an EXIF image orientation to an iOS one.\n// reference see here: http://sylvana.net/jpegcrop/exif_orientation.html\n- (UIImageOrientation) exifOrientationToiOSOrientation:(int)exifOrientation {\n  UIImageOrientation o = UIImageOrientationUp;\n  switch (exifOrientation) {\n      case 1:\n          o = UIImageOrientationUp;\n          break;\n```\n  case 3:\n      o = UIImageOrientationDown;\n      break;\ncase 8:\n      o = UIImageOrientationLeft;\n      break;\ncase 6:\n      o = UIImageOrientationRight;\n      break;\ncase 2:\n      o = UIImageOrientationUpMirrored;\n      break;\ncase 4:\n      o = UIImageOrientationDownMirrored;\n      break;\ncase 5:\n      o = UIImageOrientationLeftMirrored;\n      break;\ncase 7:\n      o = UIImageOrientationRightMirrored;\n      break;\n  default:\n      break;\n  ```\n}\n  return o;\n  }\n@end\n. @bpoplauschi  never done that before but will give it a try\n. Created a pull request.\nHowever, since I made this the code base has advanced quite a bit. I integrated the fix as best as I could in the new code base - fingers crossed! \nShould there be issues with it, the fix is really very simple: Whenever you create a UIImage from NSData, extract the image orientation from the EXIF info in the image (come to think of it I've only ever tested this with JPG files... Hmmm). If the orientation is not == up, create a new UIImage object with the correct orientation. \nI can't test with the new codebase right now; actually this would really be an ideal case for a unit test, are there unit tests?\n. @mythodeia @bpoplauschi  The code should be safe to run if there are no properties, e.g. if there is no EXIF data. In that case it does nothing. \nI agree it's probably better to check whether it's JPG first though - if there is a definite way to tell. \n. That\u2019s good news! I\u2019m all for that. \n\nOn 10 Apr 2018, at 10:50 am, DreamPiggy notifications@github.com wrote:\nIt seems that this code is out of date. - [UIImage initWithData:] now can correctlly handler the EXIF orientation tag. It's no need to create another UIImage instance again.\nSee the test for that: https://github.com/recurser/exif-orientation-examples\nI'd suggest to remove this code to make ImageIO coder more clear and performent.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Since the removing of this code is just an optimization / removal of unneeded hack, I would suggest to keep doing it for any old version that SD still supports.\n\nIf you're sure it's not needed say in iOS 8 and up, but SD still supports iOS 6 and 7 too - then only remove it for iOS8 and up. That way things keep working in all versions supported by SD. \nI don't have access to a iOS 7 device. So I would just assume by default that the workaround is still needed there, until proven otherwise.\nI didn't look up what versions are supported by SD, so please fill in the correct values up there.\nI am a big fan of removal of unneeded workarounds! Keeping the code base clean is important. So thanks for bringing this up.\n\nOn Apr 10, 2018, at 12:17 PM, DreamPiggy notifications@github.com wrote:\n@n13 https://github.com/n13 So maybe I'll change this in SD 5.x(5 years passed since your PR)...But, does anyone have a iOS 7 device to test if we can also change this extra calculation of EXIF orientation on iOS 7 so that maybe we can also merge this change into 4.x ? \ud83d\ude05\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/rs/SDWebImage/issues/316#issuecomment-379976641, or mute the thread https://github.com/notifications/unsubscribe-auth/AAD_hP47995vZ7HJ69BnEkNl9eQYvU_Kks5tnEBtgaJpZM4Ad5vB.\n\n\n. Just assume iOS 7 still has the bug. IMO Not really worth anyone\u2019s time and effort to check whether iOS 7 could be made more efficient. It is just a hack removal after all. \nBut if you want to do it be my guest :)\nThanks for spotting this. Removal in 5.x sounds like a great solution. \n\nOn 10 Apr 2018, at 3:53 pm, DreamPiggy notifications@github.com wrote:\n@bpoplauschi \ud83d\ude05I'll create a PR and merge this into 5.x. But howevver, whehter or not to change this should be checked later (To see if iOS 7 support this automatically EXIF orientation handle or not)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. awesome. fingers crossed ;)\n. Yes but not right now. Tomorrow.\n\nOn Thu, Jul 17, 2014 at 4:37 PM, Bogdan Poplauschi\nnotifications@github.com wrote:\n\n@n13 could you please take a look at those crashes?\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/764#issuecomment-49284204\n. Got a fix for this - apparently imageSource can be NULL. That's not in the Apple docs, but Apple's own demo code is checking for NULL. Sigh. \nIt would be great to get the image that caused the problem, and add it to the unit tests. Are there unit tests?\n. Created a new pull request. Let me know if there's anything else I can do.\n. If the code can be removed now, I am all for that. . is this related to iOS 8?\n\nI haven't installed it yet but would be a bit worrying if that actually broke in iOS 8.\n. And if it does reproduce, could you please attach an image that causes the crash to happen?\n. Reference to bug reported on https://github.com/rs/SDWebImage/pull/764\n. ",
    "cakl": "this does not work for me. can you please elaborate your fix. thx!\n. ",
    "runmad": "Hey, so I am running into an issue here.\nI see an issue on line 50 of UIImage+MultiFormat.m:\nCFDictionaryRef properties = CGImageSourceCopyPropertiesAtIndex(imageSource, 0, NULL);\nIt doesn't seem to be for all images, so looks like it might be for images with missing EXIF info?\n. ",
    "maxmitch": "may you exapand on this for #834 \n. I found my answer at issue #533 \n. Can you help with my other question?\n. #834\n. I have removed that! But they still get confused... I think that the problem is, is that when it finds new cells it calls it cells 0, 1 and 2. Which is the maximum number of cells you can see on my UITable at once (no matter how far down the table you are) rather than calling it say the 10th cell down! As currently in my UITable you can see a maximum of 3 cells. \nEXAMPLE:\nsay if you have cached cells 0,1 and 2 and then scroll to cells 3,4 and 5 (which have not yet been cached) and then you scroll back to cells 0,1 and 2 before the images have been downloaded they will be replaced by the images that should be on cells 3,4 and 5! \n. Please help!!! \n. ",
    "hlongvu": "This is my definition:\n@property (nonatomic, assign) id < SDWebImageOperation > operation;\n. Thanks you, it works!\n. ",
    "u16suzu": "This feature looks so nice. I'm Looking forward to it!\n. ",
    "AalokParikh": "Yeh, If it is added to the SDWebImage, It will be a great feature for it. I m also looking forward to it :+1: \n. This is not true in my case it just works fine for me.\nMay there is some problem with xcode try to restart the xcode first.\nEven then the problem stays try to download the zip (if you have downloaded before) again or delete the repo and clon it again this will sure solve the problem.\n. ",
    "migrant": "Cool ! Looking forward to it.\n. I delete the repo and clone it again but the problem still stays.\n\n. @timkoma Looks like it has not been merged into master ?\n. @bpoplauschi Thank you for that. Looking forward to it.\n. ",
    "lavoy": "I'd love to see this as well.  Is anyone working on this or should I try and get it done?\n. https://github.com/rs/SDWebImage/pull/375\n. Sure thing. Sorry about that.\n. It would be nice to have a way to tell the user that the image is a GIF or not so they know how to process it later. Maybe an extra param in SDWebImageCompletedWithFinishedBlock but that would break compatibility. Thoughts?\n. Ah, that works well. No change needed then.\n. That's what this should be... did I mess up the merge?\n. Ya, I cleaned it up to be recursive. Lemme know if you see otherwise.\n. np, glad we were thinking the same thing :)\n. Also, I can rebase if you'd like to keep your commit log cleaner.\n. Yeah.. only made it worse. Oh well.\n. I'm seeing this as well.\n. Yeah, this is important to both the community and myself. I'll help.\n. ",
    "alaaghribi": "Any news about the gif support please?\n. I have some gif image files and they're not displayed, only the png files are shown.\n. I really don't know the difference between this two ones , but I'm using Cocoa pods to integrate SDWebImage in the project. \n. I'm just doing this in the pod file:\npod 'SDWebImage'\nSo I think that the new version will be retrieved automatically in that case, no ?\n. I'm on the 3.3 and I don't have GIF support. Can you please verify it?\nThank you very much.\n. Did you check it please?\n. ",
    "yohannprigent": "Is GIF supported on placeholder images ? It does not seem...\n. ",
    "RaimundWege": "An animated placeholder image would be nice too! I tried the following, but the gif stands still:\n[cell.previewImageView setImageWithURL:[NSURL URLWithString:itemObject.imageURL] placeholderImage:[UIImage imageNamed:@\"loading.gif\"]];\n(i've downloaded the actual framework today)\n. ",
    "TimWatson": "You can set an animated placeholder like this for now:\nNSArray *loading = [NSArray arrayWithObjects:[UIImage imageNamed:@\"loader_1\"], [UIImage imageNamed:@\"loader_2\"], [UIImage imageNamed:@\"loader_3\"], [UIImage imageNamed:@\"loader_4\"], nil];\nplaceholderImage:[UIImage animatedImageWithImages:loading duration:0.2]\n. ",
    "chainone": "why is this issue closed? It is still the same as RaimundWege mentioned. Did I miss anything here?\n. ",
    "josepaul28": "You can do something like this:\n```\nvar placeholderImage: UIImage? = nil\n//viewDidLoad\nif let resourceUrl = NSBundle.mainBundle().URLForResource(\"loader-64px\", withExtension: \"gif\") {\n            if let path = resourceUrl.path where NSFileManager.defaultManager().fileExistsAtPath(path) {\n                let placeholderImageView: UIImageView = UIImageView()\n                placeholderImageView.sd_setImageWithURL(resourceUrl)\n                if let arrayImages = placeholderImageView.image?.images where arrayImages.count > 0 {\n                    self.placeholderImage = UIImage.animatedImageWithImages(arrayImages, duration: 0.2)\n                }\n            }\n        }\n//cellForItemAtIndexPath\ncell.productImageView.sd_setImageWithURL(NSURL(string: image), placeholderImage: self.placeholderImage)\n```\n. ",
    "lbrndnr": "Well it should only be handled synchronously if it is already cached on the disk?\n. Because it is written on asynchronously?\n. Okay, but couldn't we make a method that fetches the image asynchronously and pass a bool pointer. As soon as the pointer changes the asynch fetch gets sychronous and waits until the fetch is complete. That would vastly improve the performance, especially on newer devices. \n. ``` objc\n-(void)doStuff:(BOOL)wait completionBlock:(void (^)(UIImage))completionBlock {\n    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);\n    dispatch_async(dispatch_get_main_queue(), ^{\n        if (wait) {\n             dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n        }\n    });\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        //get stuff\n        UIImage* image = [self blabla];\n    dispatch_semaphore_signal(semaphore);\n    if (completionBlock) {\n        completionBlock(image);\n    }\n});\n\n}\n```\nWouldn't something like that work? Can't test it, I'm in school right now.\n. Oh my bad, check out the edited code\n. What issues do you mean? And why would you have race conditions? \nWell If you had a UITableView that loads the cell the cell would have a couple moments to fetch its image before it needs to block the main thread.\n. Oh well I even forgot more about it. Sorry, I was trying to replicate something I've read somewhere ages ago that just came into my mind. What if the first block was checking it permanently with a while loop?\n. ",
    "omet": "Thank you :)\n. ",
    "Kapin": "This was over a year ago. I honestly can't remember the exact reasoning. My only guess would be loading an image from another thread to avoid spinning up another one.\n. ",
    "nioq": "Thanks for this, and sorry about the extra work you had to do to get this into shape!\nAny chance you would you be open to keeping double disk caching as an option? With the SDWebImage cache we get to associate the cached image with the request URL, which is useful for offline access in cases where the request URL responds with a 302 redirect to the actual image and no-cache is specified in the response headers. \nNSURLCache without the SDWebImage cache will associate the image with the actual image URL but since it won't cache the original 302 response we don't know the actual image URL when offline. You may recognise this as the situtation we face with Facebook graph API profile pictures:\na) https://graph.facebook.com/[id]/picture?height=200&width=200 returns a 302 with no-cache specified\nb) 302 points to a static image on the Akamai CDN with max-age=1209600\nIf both NSURLCache and SDWebImage's disk cache are enabled, SDWebImage caches (a) so we still have profile pics while offline, and NSURLCache caches (b) so even if we keep requesting (a) again, we do not re-download the static image.\nIt's still wasteful though so I understand if you'd rather this situation be dealt with some other way. Either way, thanks for the great library!\n. Thanks!\n. ",
    "mohamedadly": "Hey,\nthis works fine if you are using the Facebook username in the graph URL.\nBut if you are using the Facebook ID for example \"100007160439164\", this will not work, and will not refresh the image.\n. @mythodeia  actually it is better than before, but still sometimes it returns the cached image.\n. yes, maybe the problem is from the CDN.\nI noticed many times that even on web browser it takes a long delay till the image is refreshed.\nbut i noticed a strange behaviour, if i use the username instead of the numeric user id, the image is refreshed much faster.\ni don't know honestly if there is something wrong with Facebook's CDN.\n. Yeah i will use that, but the problem that not all Facebook users have usernames.\nanyway, i hope to include this fix in the pod version as well.\n. ",
    "bm-i": "Thanks for the quick merge!\n. The '@2x' suffix needs to be added through the cacheKeyFilter, e.g.:\nobjective-c\n^NSString *(NSURL *url) {\n    NSString *result = [url absoluteString];\n    if (UIScreen.mainScreen.scale == 2.0) {\n        result = [result stringByAppendingString:@\"@2x\"];\n    }\n    return result;\n};\nI looked at the code, but couldn't figure out any other way than use the cache key to communicate the stored image should be loaded with a different scale. Maybe there's a better approach, but as it already detected @2x for local files I thought it's a good idea to somehow make it more generic.\n. Any update on this?\n. As I wrote in the last two comments, if you use a cacheKeyFilter as defined above, the key will be suffixed with @2x both when storing and when loading the image back. The storage is already correctly implemented. The patch will detect the @2x suffix when loading and create an UIImage with correct scale. I don't know how to explain this any better, sorry. Maybe it's not the best solution - is there any other way to indicate the image is at different scale?\n. Right, it doesn't work out of the box. Should downloadWithURL in SDWebImageManager and further queryDiskCacheForKey in SDImageCache be extended with an optional new argument indicating a different scale, instead of having the scaled detection in SDScaledImageForPath based on the key?\nThis feature is missing and I just proposed one possible implementation and also asked for further feedback on how it should be implemented.\n. The use case is a different: You want to request a thumbnail, scale it, taking the device scale into account, through the transform delegate method and cache this image instead, so the scaling doesn't need to be performed on a cache hit. This works when scaling to a UIImage with scale=1, but doesn't when an image with scale=2 is generated in the transform delegate: it will be saved, but loaded as scale=1 on a cache hit. \n. The downloaded image is proportionally scaled and the device scale is taken into account, i.e., on retina devices the  scaled image has twice as many pixels and the UIImage scale is set to 2, so it is correctly rendered at half the size.  Not setting scale=2 will result in a rendering of double the size. Producing an image with the same pixel count as on non-retina and leaving scale=1 will render at the right size, bit pixelated.\n. Okay, rebased on master.\n. Thanks!\n. I previously submitted a pull request for a similar change which also tried to extend SDScaledImageForPath, see rs/SDWebImage#331. I'm still convinced we need to fix the scaling detection, but I closed this pull request and made the whole scaling detection extensible in rs/SDWebImage#366. \nCould you please check that one out and try it? It should allow you to subclass the cache and override the method with the logic you need:\nobjc\n- (UIImage *)scaledImageForKey:(NSString *)key image:(UIImage *)image\nIn case this works for you, I think it would be a good idea to close this pull request and comment on the other one, so this one will get merged and allows anyone to extend it to his/her liking. Thanks!\n. ",
    "jaysonng": "are you getting this error?\nOBJC_CLASS$_MKAnnotationView\", referenced from:\nto fix this, you need to link the mapkit.framework library in \"Link Binary With Libraries\".\n. Can we add the mapkit.framework requirement to the installation section in readme? \n. do you have all the SD files properly imported into the project? are they at Compile Sources under BuildPhases?\n. hi! A little help please. \nHow do I go about using this? is there an example somewhere I can look at on how to use this delegate method? I'm lost. :O newbie\nthanks,\n. got it. thank you I will try that. \n. worked perfectly. thank you.\n. ",
    "sankaet": "@jaysonng  no thats not the error. also, I tried adding mapkit, it didnt work. I am attaching a screenshot of the error. please have a look\n\n. AFNetworking works just fine. The problem occurs when I add SD into my project \n. nope. I still get the errors\n. I tried to fix all the issues I could, but I am still getting 108 duplicate symbols for architecture i386\n error.\n. Everything starts working as soon as I remove -ObjC\n. yes I removed AF's UIImageView\n. Just used cocoapods instead. Wasn't aware that SDWebImage was on it.\n. ",
    "sghiassy": "As a note, removing -ObjC from the \"Other Linker Flags\" in my Target's Build Settings solved the problem for me.\n. ",
    "saif287": "hi using the above mention way to process image before displaying it.. my process image is not reflecting there.. \ni am doing the processing in \n-(UIImage )imageManager:(SDWebImageManager )imageManager transformDownloadedImage:(UIImage )image withURL:(NSURL )imageURL\ni guess it should update \n[self.imgItemImage setImageWithURL:url];\nbut its not reflecting my processed image..\ncan u pls share any example????\nthanks\n. ",
    "zhigang1992": "I'm having the same problem... just appeared for no reason. maybe something wrong with the server side.\n. @magnett try download it with Chrome, see if it has a download progress\n. ",
    "magnett": "Having the same problem...\n. I have it too and i can't figure out a way to deal with it...\n. ",
    "elburro1887": "Im also seeing this issue on 3.7.2\nFirst i thought it was because my web server was not outputting the \"Content-Size\" HTTP header, but even after adding that, i still get expectedsize = 0.\nEDIT: Never mind, The correct name of the HTTP header is Content-Length, and not Content-Size. Now it works perfectly\n. +1\n. ",
    "pratik1311": "Hi @elburro1887 \nI am still facing the same issue. When I tried to download image I am always getting expected size 0.\nCan any one please help me.\nThanks.. ",
    "alexdd55": "Hi,\nmaybe you should add to your readme file, that MapKit.Framework needs to be added also. it does not seem to be clear.\nI received 8 Errors until adding ImageIO, then 2 Errors until i added MapKit.\nThanks for your work :)\n. Hi Olivier,\ni received error messages during the buildprocess without even #import, so i thought it might be useful to know.\nits running now very good.\nthank you again for sharing your code :)\nAm 31.03.2013 um 17:39 schrieb Olivier Poitrey notifications@github.com:\n\nIt's not needed until you install the MKAnnotationView+WebCache category.\n\u2014\nReply to this email directly or view it on GitHub.\n. this works fine for me\n\n``` javascript\nSDManager.downloadImageWithURL(url, options: nil, progress: {\n                receivedSize, expectedSize in\n                    if receivedSize != expectedSize {\n                }\n            }, completed: {\n                image, error, a , c ,s in\n                if image != nil {\n                    cell.imageView?.image = image\n                }\n        })\n\n```\n. This might help\n. a list with all available functions would be nice, too.\n. ",
    "idserda": "Ok, I figured it out. The MapKit subspec is always installed, so the MapKit framework is always included in the Other Link Flags (OTHER_LDFLAGS) build setting in the Pods project (via the Pods.xcconfig file). Problem was that in our main project we were overriding this build setting. Adding '$(inherited)' to the Other Link Flags in our main project fixed this. \n. ",
    "realdah": "Thanks @rs for the answer.  that MapKit issue confused me quite a lot...\n. ",
    "mohammed52": "Alright I guess downloadWithURL and the cancelCurrentImageLoad are not supposed to be used together.\nIf I use setImageWithURL method instead of downloadWithURL, then it's OK.\n. Alright, so I did the modification you suggested, but I'm not quite sure it was that useful.\nI just got 3 crashes right now. It's very random. The last one took more than 5 mins to crash, but the first two crashes happened only after a few seconds.\n\n\n\n. It doesn't seem to happen on the simulator FYI.\n. Some new screenshot.\n\n. Ok after a lot of testing, it seems the culprit is the flag SDWebImageRefreshCached.\nFor all my call to setImageWithURL, i use a MACRO for the options, that is defined like this :\nSDWebImageDownloaderLowPriority|SDWebImageRetryFailed|SDWebImageRefreshCached\nWhen I removed the flag for the cache refresh, it doesn't crash anymore. Any suggestions on why this would happen ?\nThx for the help!\n. Am I the only one facing that issue ?\n. Experienced crashes as well with the new flag. Removing it solve all crashes. Following this and hoping for a fix! :)\n. ",
    "hgo": "i guess, it makes bounding bits, pixels streched to fill its imageview. (leftmost and topmost pixels in the image above) which makes no sense to me.\n. hmm. i do not set any custom inset on uiimages however in storyboard stretching section all properties( X, Y ,Width, Height) are suspiciously set to 0 ,  i guess width and height must be '1' right?\n. yes.. it is gone. thank you! :beers: \n. ",
    "gardnermj": "I'll second this, or alternatively a method similar to queryDiskCacheForKey that returns the bare NSData from the disk cache:\n``` objc\n- (void)queryOnlyDiskCacheForKey:(NSString )key done:(void (^)(NSData data, SDImageCacheType cacheType))doneBlock {\n    if (!doneBlock) return;\nif (!key)\n{\n    doneBlock(nil, SDImageCacheTypeNone);\n    return;\n}\n\ndispatch_async(self.ioQueue, ^\n{\n    NSData *data = [NSData dataWithContentsOfFile:[self cachePathForKey:key]];\n\n    dispatch_async(dispatch_get_main_queue(), ^\n    {\n        doneBlock(data, SDImageCacheTypeDisk);\n    });\n});\n\n}\n```\n. ",
    "pattrawoots": "I also would like SDWebImage to allow to get file path of image cached on disk. Exactly the same reason as @lammertw \n. ",
    "hlcfan": "ya, I need this method too.\n. I need this method too.\n. ",
    "deni2s": "I also need it.\n. ",
    "mkll": "There are private SDImageCache methods to get filesystem path to image. Just make these methods public with category. Put the code below into the SDImageCache+Private.h and add it to your project:\n```\nimport \"SDImageCache.h\"\n@interface SDImageCache (PrivateMethods)\n\n(NSString )defaultCachePathForKey:(NSString )key;\n(NSString )cachedFileNameForKey:(NSString )key;\n\n@end\n```\n. Ok, thanks.\n. ",
    "grasGendarme": "It's crashing in objc_msg_send which is virtually impossible.\nEnable break on exception in Xcode: http://blog.manbolo.com/2012/01/23/xcode-tips-1-break-on-exceptions\nand show messages. (BTW, you can attach images to github issues, no need to use imageshack)\n. ",
    "cfis": "Same crash here.  It looks to me that the underlying download operation is being freed from under the NSURLConnection.  We see this issue a lot.  Perhasp because we load images in background threads.\nThe crash manifests itself in a couple of ways.\nFirst is the crash above:\n\nApplication Specific Information:\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[__NSDictionaryM appendData:]: unrecognized selector sent to instance 0x1f554a30'\nThread 14 Crashed:\n0   libsystem_kernel.dylib              0x3af47350 __pthread_kill + 8\n1   libsystem_c.dylib                   0x3aefa973 abort + 95\n2   mdsymposium                         0x003acabf uncaught_exception_handler + 27\n3   CoreFoundation                      0x32d6557f __handleUncaughtException + 615\n4   libobjc.A.dylib                     0x3aa49a65 _objc_terminate() + 129\n5   libc++abi.dylib                     0x3a49607b safe_handler_caller(void (*)()) + 79\n6   libc++abi.dylib                     0x3a496114 std::terminate() + 20\n7   libc++abi.dylib                     0x3a497513 __cxa_throw + 123\n8   libobjc.A.dylib                     0x3aa499bf objc_exception_throw + 95\n9   CoreFoundation                      0x32d68e07 -[NSObject(NSObject) doesNotRecognizeSelector:] + 171\n10  CoreFoundation                      0x32d67531 ___forwarding___ + 393\n11  CoreFoundation                      0x32cbef68 _CF_forwarding_prep_0 + 24\n12  mdsymposium                         0x0033b58b __59-[SDWebImageDownloaderOperation connection:didReceiveData:]_block_invoke (SDWebImageDownloaderOperation.m:187)\n\nAnother one is crashing when trying to call the block (I can' tsay 100% for sure its the completion block but I think its highly likely):\n\nThread 10 Crashed:\n0   libobjc.A.dylib                     0x3c296536 objc_retain + 6\n1   libdispatch.dylib                   0x3c6b3793 _dispatch_call_block_and_release + 11\n2   libdispatch.dylib                   0x3c6b6b3b _dispatch_queue_drain + 143\n3   libdispatch.dylib                   0x3c6b467d _dispatch_queue_invoke + 45\n4   libdispatch.dylib                   0x3c6b7613 _dispatch_root_queue_drain + 211\n5   libdispatch.dylib                   0x3c6b77d9 _dispatch_worker_thread2 + 93\n6   libsystem_c.dylib                   0x3c6db7f1 _pthread_wqthread + 361\n\nMy guess is the new flag isn't the source of the  issue but makes it more obvious simply because it triggers the code to run more often.\nSo - anyway we can see that the download operation block gets freed before the nsurlconnection get cancelled.\n. Same as #341.\n. ",
    "bharatdodeja": "I am facing same issue, just difference is, instead of crashing my app gets stuck and I have to kill the app and restart it. #425 \n. I am facing same issue, just difference is, instead of crashing my app gets stuck and I have to kill the app and restart it. #425\n. ",
    "boecko": "It's really annoying, that this \"feature\" is on.\nThere a certain occasions, where you want only authenticated users to see certain images.\n. ",
    "enagra": "@boecko \u0010@JyothiVij completely agree!\n. ",
    "Appmazo": "Well the only thing I changed in the update was the addition of the SDWebImages library to the app. Before that, it was already approved and in the store. I just liked the efficiency of this libraries image processing and lazy loading so I added it.\nI don't download any other files (only data to core data which is not 22mb in size).\n. Interesting. Not sure what else could have downloaded 22mb since the image files I use are the only files I download in the app.\nI did just add this code and will re-submit the app in the next couple days so maybe it is the fix?:\n//Disable iCloud Backup for Image URL\nNSError *error = nil;\nBOOL success = [url setResourceValue: [NSNumber numberWithBool: YES] forKey: NSURLIsExcludedFromBackupKey error: &error];\nif(!success){\n    NSLog(@\"Error excluding %@ from backup %@\", [url lastPathComponent], error);\n}else{\n    NSLog(@\"Success excluding %@ from backup %@\", [url lastPathComponent], error);\n}\n//\nTo this method (SDWebImageDownloader.m):\n(id)downloadImageWithURL:(NSURL )url options:(SDWebImageDownloaderOptions)options progress:(void (^)(NSUInteger, long long))progressBlock completed:(void (^)(UIImage , NSData , NSError , BOOL))completedBlock\n. Ok so I solved this issue (at least for my usage).\nThis line of code needs to be replaced (located in SDWebImageCompat.m):\n            NSRange range = [path rangeOfString:@\"@2x.\" options:0 range:NSMakeRange(path.length - 8, 5)];\nWith this line:\n            NSRange range = [path rangeOfString:@\"@2x\" options:0 range:NSMakeRange(0,path.length)];\n           *Don't forget to remove the PERIOD!\nI guess I don't understand why the original code is searching only for \"@2x.\" within a specific range at the end of the filename. My guess is they are trying to prevent issues with images that may have \"@2x\" somewhere other than the end of the filename, but I wouldn't imagine many developers using such a naming convention. So for me, the updated code works just fine.\nFeel free to let me know if I am wrong about something!\n. See Pull Request #370 \n. @flovilmart  @KoCMoHaBTa  Late to the party, but having the same issue. I installed the latest version of SDWebImage using cocoapods yesterday and now having the debugger errors. What did you mean by: \n\nUse the module WebImage instead of the static lib and you should be fine. \n. @flovilmart That's included in the current cocoa pod? Tried adding and failed 'No such module WebImage'.\nDo I still need to import this in the bridging header still: \n\nThanks for the quick response!\n. @flovilmart Unfortunately, I can't introduce Carthage to this existing project due to some restrictions. But was wondering if I missed a step. What do you mean by \"I've added a framework build scheme that builds WebImage.framework\"?\nDo I need to run anything to build the actual framework? Or should it already be included in the main library?\n. @KoCMoHaBTa Ahh ok I will give that a shot now. Thanks for the clarification!\n. @KoCMoHaBTa So I downloaded the latest master, and I'm not seeing the WebImage framework, just a WebImage folder with a .h / .plist file (see screenshot). Still missing something?\n\n. @KoCMoHaBTa Thanks for the guide! Did all that, but now get this error:\n\nld: embedded dylibs/frameworks are only supported on iOS 8.0 and later (@rpath/WebImage.framework/WebImage) for architecture x86_64\n\nOur app currently supports iOS 7.0 and up, so hoping their is a fix for this... :-/\n. @KoCMoHaBTa Thanks for all the help, I will keep playing around with it.\n@flovilmart Yes, please add support for cocoapods and iOS 7! Still a lot of companies using those combinations and would be super helpful!\nThanks again for the support guys!\n. @KoCMoHaBTa FYI - You got an extra '>' after the &&. But that did the trick! Yes please PR that so it's in the next cocoapod update.\nThanks again guys!\n. It appears AFNetworking had the same problem and found a fix here:\nhttps://github.com/AFNetworking/AFNetworking/issues/2488\nBut it looks like SDWebImage has already been updated with that same fix (changing 'strong' to 'assign' for the 'dispatch_queue_t' instances).\nAny ideas why it's still causing the LLDB error?\n. Closing as issue is addressed thoroughly in https://github.com/rs/SDWebImage/issues/1074\n. ",
    "Vyazovoy": "As I know, SDWebImage library placed all cached images in right place - Caches directory. If you don't copy any files into other directories, then there is no reason for rejection. Try to run you application on simulator and look into application directories after that. If you find any files in directories except Caches try to understand how can it placed there.\n. @eduardohueso Can you post part of rejection mail from Apple? Usually Apple write what file wrong placed.\n. Request added :)\n. I agree with @matej because it is real problem (not only in this repo) naming new variables, types, methods without unique prefix. I don't understand what do you mean when talk about backward compatibility. If you change the name of methods in new version (for example), then other programmers should change those code in 10-20 places. It is not so hard work, but it will fix the problem and all subsequent. @matej, you should copy your post to AFNetworking :)\n. I have the same exception\nException Type: NSInvalidArgumentException\nReason: -[__NSArrayM appendData:]: unrecognized selector sent to instance 0x1d29e5e0\nBut I shallow inspect SDWebImageDownloaderOperation and can't find any mistakes.\n. I hane once more in the same lane of code, but with different explanation\nException Type: NSInvalidArgumentException\nReason: -[__NSCFSet length]: unrecognized selector sent to instance 0x1d9d11b0\nLike an NSData is not NSData :) I broke my mind.\n. Yes, I use ARC.\n. Yes, since I removed that flag I have no any crashes. But I analyze code and don't see any relation between this flag and initializing imageData.\n. ",
    "eduardohueso": "I just had my app rejected by apple for this same exact reason.\nWe've been using SDWebImage in 5 different white label apps with basically the same exact code. 4 of the apps have been accepted twice and one of them rejected on the second update. This means, apple is not being consistent at detecting this issue.\nThe cache is actually in the Library/Caches directory but somehow, it's still looks like it's getting backed up to iCloud.\nWe verified that the size of the iCloud backup exactly matches the size of the SDWebImage cache directory.  My understanding agrees with yours in that just by being in the Caches directory it shouldn't be getting backed up, but somehow it looks like it is. I'm wondering if you've learned anything else about this since this thread with Vyazovoy.\nThanks so much.\n. Thanks guys. \n@bpoplauschi, the app doesn't explicitly use iCloud. What we are talking about here is the fact that the iCloud backup of the device is including the cache directory created by SDWebImage.\nWe already looked directly in the device's file system and confirmed that the caches are in the Library/Caches directory.  The question is not weather the caches are in the right place, but why are they getting backed up despite being there. \nWe are going to try modifying SDWebImage to explicitly add the ExcludeFromBackups flag and see if that helps.\n@vesterbaek, apple didn't mention which specific files/directories are being backed up that shouldn't. All they say is that the app is generating a rather large backup even though no data was generated by the user. Which is true, the app is clearly backing up caches.\n. ",
    "brizzly": "We have just been rejected for the exact same reason... I did patch SDWebImageDownloader ith following code and crossing my finger for another In Review =)\n//Disable iCloud Backup for Image URL\nNSError *error = nil;\nBOOL success = [url setResourceValue: [NSNumber numberWithBool: YES] forKey: NSURLIsExcludedFromBackupKey error: &error];\nif(!success){\n    NSLog(@\"Error excluding %@ from backup %@\", [url lastPathComponent], error);\n}else{\n    NSLog(@\"Success excluding %@ from backup %@\", [url lastPathComponent], error);\n}\n//\nAnd also added in SDWebImageCache.m just after writeToFile\nhttp://stackoverflow.com/questions/12928509/cfurlsetresourcepropertyforkey-failed-when-disable-data-backup-on-nsdocumentdire\n. I experience the same issue, got any clues?\n. Thread : Crashed: com.hackemist.SDWebImageDownloaderBarrierQueue\nCrashed: com.hackemist.SDWebImageDownloaderBarrierQueue\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS at 0x84428a11ed1f0000\n0  libobjc.A.dylib                0x000000019191e98c objc_object::release() + 16\n1  libsystem_blocks.dylib         0x0000000191f23908 _Block_release + 256\n2  libsystem_blocks.dylib         0x0000000191f23908 _Block_release + 256\n3  CoachGuitar                    0x00000001000cd098 __destroy_helper_block_17 (UIImageView+WebCache.m)\n4  libsystem_blocks.dylib         0x0000000191f23908 _Block_release + 256\n5  CoachGuitar                    0x0000000100187a44 __destroy_helper_block_126 (SDWebImageManager.m)\n6  libsystem_blocks.dylib         0x0000000191f23908 _Block_release + 256\n7  CoreFoundation                 0x00000001852f61d4 CFRelease + 468\n8  CoreFoundation                 0x00000001853037e4 -[__NSDictionaryM dealloc] + 156\n9  CoreFoundation                 0x00000001852f61d4 CFRelease + 468\n10 CoreFoundation                 0x00000001853025c0 -[__NSArrayM dealloc] + 156\n11 CoreFoundation                 0x00000001852f61d4 CFRelease + 468\n12 CoachGuitar                    0x00000001001b7618 __46-[SDWebImageDownloader removeCallbacksForURL:]_block_invoke (SDWebImageDownloader.m:228)\n13 libdispatch.dylib              0x0000000191edc014 _dispatch_call_block_and_release + 24\n14 libdispatch.dylib              0x0000000191edbfd4 _dispatch_client_callout + 16\n15 libdispatch.dylib              0x0000000191ee24a8 _dispatch_queue_drain + 640\n16 libdispatch.dylib              0x0000000191ede4c0 _dispatch_queue_invoke + 68\n17 libdispatch.dylib              0x0000000191ee30f4 _dispatch_root_queue_drain + 104\n18 libdispatch.dylib              0x0000000191ee34fc _dispatch_worker_thread2 + 76\n19 libsystem_pthread.dylib        0x00000001920716bc _pthread_wqthread + 356\n20 libsystem_pthread.dylib        0x000000019207154c start_wqthread + 4\n. Same for me, the biggest crash source of my app too. I'm waiting for a patch or at least a work around fix..\n. OMG thank you so much for that info ! Can't stand to try out this V 4.0\n. Any update or workaround ? This issue is still the biggest crash in our app CoachGuitar.\nExtra kudos for the great developers of this great lib !!!\nThread : Crashed: com.hackemist.SDWebImageDownloaderBarrierQueue\n0  libobjc.A.dylib                0x37d8e708 objc_release + 7\n1  libsystem_blocks.dylib         0x3831bae1 _Block_release + 216\n2  libsystem_blocks.dylib         0x3831bae1 _Block_release + 216\n3  CoachGuitar                    0x000a00a7 __destroy_helper_block_17 (UIImageView+WebCache.m)\n4  libsystem_blocks.dylib         0x3831bae1 _Block_release + 216\n5  CoachGuitar                    0x00140359 __destroy_helper_block_126 (SDWebImageManager.m)\n6  libsystem_blocks.dylib         0x3831bae1 _Block_release + 216\n7  CoreFoundation                 0x29de4ffd CFRelease + 600\n8  CoreFoundation                 0x29dfd12f -[__NSDictionaryM dealloc] + 134\n9  libobjc.A.dylib                0x37d8ed5f objc_object::sidetable_release(bool) + 166\n10 CoreFoundation                 0x29de4ffd CFRelease + 600\n11 CoreFoundation                 0x29dfc14d -[__NSArrayM dealloc] + 148\n12 libobjc.A.dylib                0x37d8ed5f objc_object::sidetable_release(bool) + 166\n13 CoreFoundation                 0x29de4ffd CFRelease + 600\n14 CoachGuitar                    0x0016dad9 __46-[SDWebImageDownloader removeCallbacksForURL:]_block_invoke (SDWebImageDownloader.m:228)\n15 libdispatch.dylib              0x382df2e3 _dispatch_call_block_and_release + 10\n16 libdispatch.dylib              0x382e7729 _dispatch_queue_drain + 1468\n17 libdispatch.dylib              0x382e1aad _dispatch_queue_invoke + 84\n18 libdispatch.dylib              0x382e8f9f _dispatch_root_queue_drain + 394\n19 libdispatch.dylib              0x382ea3c3 _dispatch_worker_thread3 + 94\n20 libsystem_pthread.dylib        0x38445dc1 _pthread_wqthread + 668\n21 libsystem_pthread.dylib        0x38445b14 start_wqthread + 8\n. I would like to know the release date too, as I get same kind of crash at line : 173\nSDWebImageDownloader.m line 173\n__72-[SDWebImageDownloader downloadImageWithURL:options:progress:completed:]_block_invoke102\nhttps://github.com/rs/SDWebImage/issues/1299\n. What is that ? I'm using the latest official release.\n. didn't know! thx.\n. ",
    "kevindelord": "We have the problem for one of our app. Same code 6 or 7 apps and one got randomly rejected for the same reason.\nI applied a workaround without modifying the library. This is what I did (swift code):\n// Just download the image\nSDWebImageDownloader.sharedDownloader().downloadImageWithURL(url, options: .allZeros, progress: nil) { (image: UIImage!, data: NSData!, error: NSError!, finished: Bool) in\n    if (image != nil && finished == true) {\n          // Store it on the disk\n         SDImageCache.sharedImageCache().storeImage(image, forKey: thumb)\n         // Get the path and add the backup attribute - as explained everywhere on the web :)\n          if let path = SDImageCache.sharedImageCache().defaultCachePathForKey(thumb) {\n               AssetsManager.addSkipBackupAttributeToItemWithFileName(path)\n         }\n    }\n}\n. ",
    "XBeg9": "Any updates? SDWebImageDownloader should support this.\n. ",
    "nickgs": "I just had to do the same. This is also mentioned here: \nhttps://github.com/rs/SDWebImage/issues/191\nIn my case, I removed the MKAnnotationView from my project and then did not require MapKit.framework. \nThanks. \n. ",
    "EpicDraws": "I perform some actions upon image load, and I also have this issue where cached images do not trigger the block. Is there a way to fix this? Forcing a redownload every time avoids the entire purpose of the library.\n. ",
    "chadkouse": "@Hackmodford Can you reopen this - it still seems like a bug to me\n. In my case it's not firing for failed downloads.  I am not sure about images successfully retrieved from cache.  I will try the example source.\n. ",
    "0xced": "In order not to break backward compatibility, you could mark these methods as deprecated in the interface and implement them dynamically with +[NSObject resolveInstanceMethod:] for example.\n. ",
    "PaulWoodIII": "I just want to add that I ran into this problem as well and quickly made some changes on this fork: https://github.com/PaulWoodIII/SDWebImage\nI'm not asking for a merge here but maybe it'll help someone else interested in this issue. \n@0xced if you could share some code on how to use resolveInstanceMethod I could add that in as well.\n. +1 as well, or if the author thinks he really needs this feature, maybe make it an optional feature to add those failed URLs with a boolean we could set after initializing the SDWebImageManager\n. Backed up my request with some code, as for now on my own projects, after I download via cocoapods I just comment out [self.failedURLs addObject:url];\nAfter working with that code, I realized that the property should be placed in the header file, so hopefully I'll make another pull request shortly\n. I could do that but should I remove the feature or modify the feature to make it optional?\n. after doing some research I have a different proposition, how about these different Error codes don't cause the URL to be added to failedURLs as well,\nNSURLErrorTimedOut\nNSURLErrorNetworkConnectionLost\nAnd we just add these to that if statement @Whirlwind has shared above. Then we don't have this weird option and things work as proposed by @Whirlwind\n. Apple docs say \"Returned when an asynchronous load is canceled.\" so this would occur if the user canceled the SDWebImageOperation right? I agree this shouldn't cause the URL to be added to the failedURLs as well\n. Okay this pull request isn't what you want after some testing, I'll try again\n. ",
    "sibljon": "Hi all,\nFor anyone looking to use both SDWebImage and AFNetworking as-is, here's my caveman solution to discourage use of the colliding methods:\nhttps://gist.github.com/sibljon/5957892\nIt's obviously not future proof, and is prone to breaking if the implementation of these methods changes in AFNetworking or SDWebImage.  It's far from an ideal solution.  In other words, at your own risk!\nJon\n. ",
    "kastiglione": ":+1: \n. In addition to the already suggested transition options, another way could be to use conditional compilation and give those of us who want prefixes the ability to turn on prefixing by defining a preprocessor macro (ex. SD_WEB_IMAGE_USE_PREFIX).\n. ",
    "madninja": "+1. This would be super useful\n. ",
    "rromanchuk": "@rs @jparise it would be really nice if we could document these defaults and also mention these cache management methods in the README.  Stackoverflow is filled with SDWebImage cache management questions   like http://stackoverflow.com/questions/17707272/caching-images-doesnt-stay-once-applicationdidenterbackground-is-activated  Mostly due to lack of documentation\n. Can confirm this. @rs make sure you change your architecture to include arm64 using xcode5 GM\n\n. @rs @nrj any temporary workarounds available? \n. @donholly i can objectively say i have found no performance degradation turning off decompression using @harishkashyap patch. Not using the patch causes my app to crash in under one minute as the application reaches it's memory pressure limits. You can reproduce this very easily, just use larger images. UIImage does not clean up its  CGRasterData\nTo be honest, the article you posted may be completely invalid in today's market. I have ran many different UICollectionViews with decompression off and have noticed zero difference. The current state of SDWebImage using decompression with images any larger than 100x100 is going to cause ios system shutdowns as RasterData balloons to device limitations.\nI honestly don't think you will see any performance degradation or FPS frame drops using instruments when turning off decompression. Without this patch we need to put a huge warning that SDWebImage will only not crash for users using small thumbnails (but will still leak unless the client listens for memory warnings and manually wipes sdwebimage)\n. I noticed SDWebImage is not using NSCache  countLimit, any reason? This is probably the worst documentation i've read in a while so it could be completely worthless, and i'm not even sure what the default is?  @mallorypaine  do you have any insight to this setting? \nhttps://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSCache_Class/index.html#//apple_ref/occ/instp/NSCache/countLimit\n. Actually,\nThe default value is 0, which means no limit. \nCould this be causing - (void)setMaxMemoryCost:(NSUInteger)maxMemoryCost to be completely ignored? I understand it's a black box, but maybe we can help coach it a bit more?\n. I'm going to do a few tests with instruments with these changes, and i'll report back \nhttps://github.com/rs/SDWebImage/compare/master...rromanchuk:feature/add-count-limits\n. Guys, the images you are posting do not show any memory issues.  If your apps are lagging it's most likely because you are doing silly things on the main thread.  @trunglee you say huge memory growth but what exactly is your persisted memory after scrolling? \n. This is indeed a problem here. But I'm less worried about the memory pressure this creates, but i am worried because it seems it's never released until persisted memory reaches above 300mb. Is this an enumeration-without-an-autorelease problem?  I haven't jumped into the source yet, but this expansion seems to have gotten worse from older versions.  I'm seeing long lived CGDataProviderCreateWithCopyOfData caused by decodedImageWithImage  Maybe i'm only seeing it now because of larger devices, larger photos, etc?\nWasn't there just a recent change on maximum concurrent downloads? I could see that exacerbating this issue. \n. Maybe we are conflating this issue with something else. I see no problem with a huge VM CG Raster Data, but i'm noticing a lot more memory warning than the past. Let me try and isolate the didReceiveMemory events, maybe it's more related to prefetching\n. Actually it looks like a lot has already been done on this front\nhttps://github.com/rs/SDWebImage/pull/996\nhttps://github.com/rs/SDWebImage/pull/884\n. and:\n https://github.com/rs/SDWebImage/issues/602\nhttps://github.com/rs/SDWebImage/issues/880\nhttps://github.com/rs/SDWebImage/issues/538\n. @bpoplauschi  you should close all these duplicates already being tracked https://github.com/rs/SDWebImage/issues/538\n. @vincentjames501 do you have a fork that's working for ios8? \n. :beers:  for a version released \n. I am also getting this using latest 3.7.0 \nwhen calling [sharedImagePrefetcher cancelPrefetching]; i am getting the following crash \n```\nIncident Identifier: B2B50A5B-0EEF-4767-878B-16BD6CCD3141\nCrashReporter Key:   375A9052-1C42-4A48-A4A8-90061C692FE1\nHardware Model:      iPhone6,1\nProcess:         Frontback \u03b2 [4084]\nPath:            /Users/USER/Frontback \u03b2.app/Frontback \u03b2\nIdentifier:      me.frontback.beta\nVersion:         2342\nCode Type:       ARM\nParent Process:  launchd [1]\nDate/Time:       2014-07-16T02:41:06Z\nOS Version:      iPhone OS 7.1.1 (11D201)\nReport Version:  104\nException Type:  SIGSEGV\nException Codes: SEGV_ACCERR at 0x1\nCrashed Thread:  0\nApplication Specific Information:\nobjc_msgSend() selector name: setCancelBlock:\nThread 0 Crashed:\n0   libobjc.A.dylib                      0x3861f636 objc_msgSend + 22\n1   CoreFoundation                       0x2ddf2a95 -[NSArray makeObjectsPerformSelector:] + 178\n2   Frontback \u03b2                          0x0018165d -[SDWebImageManager cancelAll] (SDWebImageManager.m:286)\n3   Frontback \u03b2                          0x001825d7 -[SDWebImagePrefetcher cancelPrefetching] (SDWebImagePrefetcher.m:135)\n4   Frontback \u03b2                          0x001c783d unnamed_356 + 10\n5   Frontback \u03b2                          0x00baa761 rb_vm_dispatch + 4866\n6   Frontback \u03b2                          0x0079e891 vm_dispatch + 362\n7   Frontback \u03b2                          0x007abe75 rb_scope__openFullscreen: (grid_controller.rb:382)\n```\n. this is related to https://github.com/rs/SDWebImage/pull/813\n. No, same bug, was just running on ios8\n. this crash is also happening at similar frequency in 3.7.0\nhttps://github.com/rs/SDWebImage/issues/809\n. can confirm crashing when canceling prefetcher. \n```\nApplication Specific Information:\nobjc_msgSend() selector name: setCancelBlock:\nThread 0 Crashed:\n0   libobjc.A.dylib                      0x3861f636 objc_msgSend + 22\n1   CoreFoundation                       0x2ddf2a95 -[NSArray makeObjectsPerformSelector:] + 178\n2   Frontback \u03b2                          0x0018165d -[SDWebImageManager cancelAll] (SDWebImageManager.m:286)\n3   Frontback \u03b2                          0x001825d7 -[SDWebImagePrefetcher cancelPrefetching] (SDWebImagePrefetcher.m:135)\n```\nIf you guys need help testing with a real sample size, I can help by pushing out HEAD before SDWebImage cuts a release. Right now there are two show stopping crashes that took less than a minute to discover in a real world environment. \n. Yes #808 is fine, this bug is hard to reproduce, and I only see it frequently with 400+ active users, it's still my number one crash at the moment though. \nI reduced a majority of the crashes by removing calls to - (void)cancelPrefetching; from SDWebImagePrefetcher \nI will try and make the crash reproducible by prefetching and canceling but you can also see prefetching is canceled when given a new set of urls \n``` objective-c\n- (void)prefetchURLs:(NSArray *)urls progress:(SDWebImagePrefetcherProgressBlock)progressBlock completed:(SDWebImagePrefetcherCompletionBlock)completionBlock {\n    [self cancelPrefetching]; // Prevent duplicate prefetch request\n    self.startedTime = CFAbsoluteTimeGetCurrent();\n    self.prefetchURLs = urls;\n    self.completionBlock = completionBlock;\n    self.progressBlock = progressBlock;\n// Starts prefetching from the very first image on the list with the max allowed concurrency\nNSUInteger listCount = self.prefetchURLs.count;\nfor (NSUInteger i = 0; i < self.maxConcurrentDownloads && self.requestedCount < listCount; i++) {\n    [self startPrefetchingAtIndex:i];\n}\n\n}\n```\n. My guess is the best way to make it crash is by having active prefetching URLS, and interrupt them before they have finished\nIt looks like I fixed the crash by changing self.cancelBlock = nil to _cancelBlock = nil as the crash is happening because self does not respond to the setter, something must be releasing too early.  This is a similar finding that @maeji is reporting \nobjective-c\n- (void)cancel {\n    self.cancelled = YES;\n    if (self.cacheOperation) {\n        [self.cacheOperation cancel];\n        self.cacheOperation = nil;\n    }\n    if (self.cancelBlock) {\n        self.cancelBlock();\n        _cancelBlock = nil; // <------ fixes the crash\n    }\n}\n. @bpoplauschi thanks!  Let me rebuild with this commit, looks good though\n. @bpoplauschi sending a release out now, should know soon \n. looks like i'm still getting it :(  \nThread 0 Crashed:\n0   libobjc.A.dylib                      0x3a262626 objc_msgSend + 6\n1   CoreFoundation                       0x2fa33ad5 -[NSArray makeObjectsPerformSelector:] + 178\n2   Frontback \u03b2                          0x001f2ce9 -SDWebImageManager cancelAll\n3   Frontback \u03b2                          0x001f3c7b -SDWebImagePrefetcher cancelPrefetching\n4   Frontback \u03b2                          0x001f3afd -SDWebImagePrefetcher prefetchURLs:progress:completed:\n5   Frontback \u03b2                          0x001f3ac1 -SDWebImagePrefetcher prefetchURLs:\n. Bogdan,  things seem OK with the patch, will let you know if I see anything \nSent from my iPhone\n\nOn Jul 24, 2014, at 12:12 AM, Bogdan Poplauschi notifications@github.com wrote:\nWhat version are you using? I'm asking because that code is a bit different now\n\u2014\nReply to this email directly or view it on GitHub.\n. @dmiedema any reason you are not using  pod 'SDWebImage', :head?  I recently dropped down to 3.6 because other issues were popping up, besides the cancel all issue, but haven't verified it's due to SDWebImage, needs much more investigation. Just can't afford to upgrade until it has served at least million images on production.  Swamped with ios8 stuff right now, come back to it and hopefully help out when i have more time.\n. @seviu can confirm, this is a serious problem for production apps.  Probably should be completely rolled back, it wasn't tested in any sort of production environment \n\nhttps://github.com/rs/SDWebImage/commit/c76aba6c00077fa6edca7f79477dde38dc736381#diff-a2080a524a7f749c0dab0afb2d8b8566\n. :+1: \n. related https://github.com/rs/SDWebImage/issues/808\n. It's basically an entire rewrite :stuck_out_tongue_winking_eye:   Look how https://github.com/path/FastImageCache completely separated networking from caching.\n. It looks like i am seeing this too :(  Probably going to have to just drop back down to 1.6 until things stabilize after a couple of releases into real production environments. \n. this should be closed, being tracked here https://github.com/rs/SDWebImage/issues/538\n. don't have this problem on ios8, just all the current open issues :cry: \n. Thanks @mattjgalloway  Question for you, are you using any particular fork?  The current state of SDWebImage is really frustrating and I see a lot of great PRs that are sitting idle.  We desperately need an edge, or prerelease version of SDWebImage so we can at least start testing.\n. @mattjgalloway i'm looking for a public fork that is actually being maintained \n. I can definitely, at the very least, get edge/pre releases well tested before before we cut a release. That way we can feel confident in releasing important pull requests that come in. This is one project that really needs real world device deployment because of the complexities and subtleties of concurrency. \n. Guys, did you profile this change before making it? It should really be the responsibility of the client to cancel requests that are no longer valid (cell goes off screen) or manually modifying this default if their application best fits a large number of concurrent connections...like a table view with many small images. \nHowever, changing a very reasonable default of 2  to 6 could have drastic consequences for an application that is downloading very large images. Imagine what this could mean in terms of memory pressure for a user that has a fast connection and downloading full screen retina images. \nThis change may have contributed to the 15 or so tickets that are currently open due to extreme memory pressure SDWebImage is putting on devices\n. +1 this is correct\n. @bpoplauschi where are you at with all these PRs? Do you need help testing a release branch with a large sample population? \n. @Jur4s have you put this into production yet? \n. Linking for readability #414 \n. this should be closed, cocoapods is industry standard.  @jeromejesse if you need a static build, you can do it yourself http://www.raywenderlich.com/41377/creating-a-static-library-in-ios-tutorial\n. Hmmm, this makes me a little nervous. Orientation should not be managed by SDWebImage, it's up to the programmer to manage orientation of their resources. Sounds like we are trying to fix a pre existing programming error. \n. git clone git@github.com:rs/SDWebImage.git and add the source yourself, or create a static lib http://www.raywenderlich.com/41377/creating-a-static-library-in-ios-tutorial    \nThis is beyond the scope of the maintainers.  @rosamerinoclaros just curious, why don't you use cocoapods?\n. duplicate https://github.com/rs/SDWebImage/issues/538   Close please. \n. So use the latest then.. \npod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git', :commit => '962bcb03231d3baa8a0463743d148f494cbed5aa' #3.7.2\n. Guys, just a reminder, you don't have to wait for the spec to update. Just cut the equivalent and leave yourself a comment \npod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git', :commit => '962bcb03231d3baa8a0463743d148f494cbed5aa' #3.7.2\n. How about https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImagePrefetcher.h ?\n. Obviously not the most elegant use case, but you get the idea \nswift\nfunc prefetch() {\n        prefetcher.prefetchURLs(fetchedObjects?.map {\n            return ($0 as! Post).url\n        })\n    }\n. @ashfurrow  there are some caveats to this bad boy though, let me try and save you some headaches \n- If you used the shared instance, it's not FIFO, as soon as you send in urls it will cancel your entire last batch\n- Because it uses NSOperation NSURLSessions are out of the question (no support for NSURLSession priorities etc) \n- Make sure you check the defaults on max concurrent connections and don't forget to factor in your already existing  SDWebImage  operations\n- If you are working with large images make sure you use HEAD,  and set false for shouldDecompressImages else your devices (especially arm64) will shutdown from memory pressure in minutes. This should be the default by the framework, but it's not :confused: \nExample defaults\nswift\nSDImageCache.sharedImageCache().maxCacheSize = 300 * 1024 * 1024\nSDImageCache.sharedImageCache().shouldDecompressImages = false\nSDWebImageDownloader.sharedDownloader().shouldDecompressImages = false\nSDWebImageDownloader.sharedDownloader().maxConcurrentDownloads = 4\n. :+1: \n. @flovilmart i also checked out this branch and gave it a test, working fine\n. Fix your podfile\npod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git', :commit => '962bcb03231d3baa8a0463743d148f494cbed5aa' #3.7.2\nAnd make sure you set below in your didFinishLaunchingWithOptions\nSDImageCache.sharedImageCache().shouldDecompressImages = false\n SDWebImageDownloader.sharedDownloader().shouldDecompressImages = false\n. @mallorypaine thanks for jumping over to this project and for this PR :+1:  This has been plaguing this project for a long time now. \n. @KiranPanesar seems to be working for me.  @mallorypaine do you know what this means in terms of performance in FPS on a standard scrollview?  About to do some profiling, but just wondering if you knew off hand? \n. @mallorypaine makes sense, thx\n. @mallorypaine just anecdotally, turning NSCache off fixes the memory problem for me, but there is an obvious new animation stutter when scrolling (fullscreen paging), but i'm sure it's just a developer error that was conveniently being hidden under the surface which is now being exacerbated now that NSCache is turned off \n. @mythodeia just close, doesn't make sense\n. @markrickert yeah that would be ideal, but from what i can tell NSCache is like angsty teenager and it's eviction policies are just suggestions. I'm still uncomfortable with this because SDWebImage should never be causing system memory events. I found this actually can be managed with #1140  At this point the implementer has clearly mismanaged his memory and it's already too late to be algorithmic about it. \nFor over a year I have been fighting a bug where a long session would run up the memory and crash/shutdown when a memory intensive action followed. I was always under the assumption that this was perfectly normal to run up this cache as the system would reclaim it when needed, i figured it was just some memory leak inside other libraries like GPUImage when in reality NSCache would drive up memory pressure and the device would send a memory warning, NSCache would ignore it, and the app would explode on a memory intensive alloc. \nI hate this PR, but short of completely turning off NSCache as https://github.com/rs/SDWebImage/pull/1130 or rewriting a real LRU eviction policy, we are being terrible netizens at the moment. \nA good start might be to leave a message in the README about carefully configuring SDWebImage on the context of the app and to carefully monitor memory so that maximum cost and count limit are set correctly \n. closing for https://github.com/rs/SDWebImage/pull/1143\n. @rs hahahaha, sorry let me try again. \n. stop\n. ",
    "pnicholls": "Dunno if this helps but also seeing this come up in the logs\nobjective-c\nNoisy(5091,0x6a1f000) malloc: *** error for object 0x20175e00: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\n(lldb)\n. @Vyazovoy hmm interesting, I seem to be getting it a fair bit these days especially moving between tableviews / scrolling around.\n. Also using ARC\n. Looking at #341 it looks like the issue has something to do with the newly introduced SDWebImageRefreshCached\n@rs does that sound right?\n. ",
    "dstancioff": "Also seeing this, also using ARC, happening inconsistently. Not sure how the imageData is getting released without getting set to nil...\n. ",
    "kostassite": "Still having this issue with 21656fad68084e682a18eb638077989351a7cb52\nCrashing on\nSDWebImageOperation.m line 90\nself.connection = [[NSURLConnection alloc] initWithRequest:self.request delegate:self startImmediately:NO];\n. ",
    "maximkhatskevich": "@rs this might be an issue again. iOS 8.4, SDWebImage 3.7.3.\nI'm getting crashes with message like this: \"malloc: * error for object 0x17cd03320: Freeing unallocated pointer * set a breakpoint in malloc_error_break to debug\" when using \"[[SDImageCache sharedImageCache] storeImage:forKey:];\" for image preloading. See screenshot attached. Any suggested are very welcome!\n\n. ",
    "daveanderson": "Have an issue with the pull request (new to this)\n. probably - the project I'm using it in already has QuartzCore included for other reasons.\n. ",
    "kaishin": "QuartzCore needs to be added to the podspec indeed.\n. See #548 for more details.\n. @onishinji I removed it in this fork/branch https://github.com/kaishin/SDWebImage/tree/no-gif but I removed other stuff that you might need. You can use the diffs to remove only GIF support.\n. @rs Also reported in #548. This is clearly a leak that has to do with GIFs. Removing GIFs or using AFNetworking which doesn't support GIFs 'fixes' the problem.\n. @huyduc Are you testing with GIFs? You don't seem to be.\n. After further investigation, I found out that this problem has less to do with SDWebImage and more to do with UIKit. Calling the method  UIImage animatedImageWithImages:duration: is what causes the memory hike. Any GIF implementation using this method is affected.\nMy thinking is that Apple could have done a far better job for animating images. Currently, it seems like all the frames (images) are preloaded in memory, which is not a bright idea.\nThat said, there are some clever GIF implementations out there that use CADisplayLink and partial frame loading/deallocation to keep the memory footprint low. See https://github.com/liyong03/YLGIFImage for more details.\n. @voronianski Unfortunately GIF support is baked into SDWebImage. So you either patch it, or use a separate library (see my comment above).\nI personally went for the more time-consuming approach of separating concerns (networking, caching, animating) using 3 separate libraries. This beats the purpose of SDWebImage (takes care of everything for you), but it's a decision you should make based on how central images are in your app. In my case, the entire app is about displaying images, so it just makes sense that I have total control over the flow. \n. @voronianski No, you will have to create a UIImageView subclass if you want to use the YLGIFImage approach. A category on UIImage simply won't work. See my comment on the issue you mentioned above for a little bit more details.\n. I have the exact same issue.\n. Looks like + (UIImage *)sd_animatedGIFWithData:(NSData *)data is what's causing this. In my app, I can easily hit 1Gb of memory in a collection view with 6~8 gifs and a couple dozen PNGs/JPEGs. Removing the gifs results in a significantly lower memory footprint.\nI looked at other GIF implementations and I haven't got any better results.\nI will fork SDWebImage to have the option to disable animation.\nAlso, during my tests, I found out that prepareForReuse is not being called (see this for more details) but I think that's unrelated since I got the same results on iOS 6.1 where it's being properly called.\n. @mattdonnelly I reached the same conclusion as well. What's worse, the memory allocated to these frames doesn't get released, even after nil-ing the UIImage property of the UIImageView.\n. Not in my experience. I just tried with 7.1 and I still get the app crashing with anything more than 4 gifs displayed at the same time.\nIf the library is not designed to be used that way, it'd be nice to add a note in the README to warn about this limitation.\n. ",
    "jjz": "every time I read the file update file modification time,i clean it of minimum time,You're okay with this?\n. ",
    "Chrystiano": "Try\u00a0call the setImageWithURL:placeholderImage: method.\nhttps://github.com/rs/SDWebImage#using-uiimageviewwebcache-category-with-uitableview\u2014\nSent from Mailbox for iPhone\nOn Tue, Apr 16, 2013 at 12:39 AM, marplesoft notifications@github.com\nwrote:\n\nI've built a simple iOS 'Hello world' test app to reproduce this behaviour. All the app does is use a UITableViewController and create one simple row with an image. Initial when displayed there is no image (and in fact the row label is fully left-justified indicating that the imageView has no content). One you select the row, the image suddenly appears. What gives?\nXCode 4.6, iOS 6, running in 6.1 Simulator\n```\n@interface MyViewController : UITableViewController\n@end\n...\nimport \"ViewController.h\"\nimport \"UIImageView+WebCache.h\"\n@implementation MyViewController\n- (NSInteger)tableView:(UITableView )tableView numberOfRowsInSection:(NSInteger)section\n{\n    return 1;\n}\n- (UITableViewCell )tableView:(UITableView )tableView cellForRowAtIndexPath:(NSIndexPath )indexPath\n{\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"Normal\"];\n    if (!cell) {\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@\"Normal\"];\n    }\ncell.textLabel.text = @\"Row Text\";\n[cell.imageView setImageWithURL:[NSURL URLWithString:@\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/12/User_icon_2.svg/48px-User_icon_2.svg.png\"]];\nreturn cell;\n\n}\n@end\n```\nInitial output:\n\nAfter selecting a row:\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/361\n. \n",
    "marplesoft": "It does seem to work if I provide a placeholder image that is the same size as the target image. Problem is, I'm downloading a series of images for my table rows and they aren't all the same size. I've set the contentMode of the imageView to AspectFit to accommodate this. So I figured I'd just skip the placeholder image. But if do that, I get the behaviour described above. If I do provide a placeholder image that's not the same size as the target images, then they resize all weird when the row is selected. I can send new code/screenshots of that in the morning.\n. The setNeedsLayout call did it, thanks.\n. ",
    "cromanelli": "Thanks xissburg ... the completion block is called for every cell, and when i ask for the cacheType it returns 2 . Actually, when i first load the tableView every cell images loads but when i scroll completely down and returning up some images get lost , normally is 1 or 2 over a total of 10 and when this happens is always the same images. \nFor example : \nThis log represent the image on the first cell first load . \n2013-04-18 16:24:40.764 Neobuggy[7412:907] image  cached ? 2 cell 0 Image is shown\n1 min 30 secs later after i scroll completely down and go back .\n2013-04-18 16:26:22.664 Neobuggy[7412:907] image  cached ? 2 cell 0 Image not displayed\nAny ideas how to kill this bug  ?? \nIt has something to do with the cell reuse . I say this because i have been able to prevent the bug by not reusing the cell. \n. ",
    "gongpengjun": "Encountered same issue.\n. +1 I need this feature too.\n. I'm getting the same crash too.\n. @rs @hsoi [SDWebImageDownloader downloadImageWithURL:options:progress:completed:] will always return nil after the fix, so SDWebImageDownloaderOperation changed to be NOT cancelable.\n. @asifbilal786 If you don't use WebP format image, just comment out the WebP related code. The following is what I did.\n```\n+ (UIImage )sd_imageWithData:(NSData )data\n{\n    UIImage *image;\nif ([data sd_isGIF])\n{\n    image = [UIImage sd_animatedGIFWithData:data];\n}\nelse\n{\n    image = [[UIImage alloc] initWithData:data];\n}\n\n//#ifdef SD_WEBP\n//    if (!image) // TODO: detect webp signature\n//    {\n//        image = [UIImage sd_imageWithWebPData:data];\n//    }\n//#endif\nreturn image;\n\n}\n```\n. Me too on Xcode 5.1.\n. I fixed it by deleting the 'inline' keyword in SDWebImageCompat.h.\n. ",
    "gujinku": "Have encountered similar issue.  The image cannot be shown in UITableViewCell. I tried to scroll the table view to trigger the dequeuing of UITableViewCell, but it still cannot show. \nI opened other views, the images' downloading is normal.\n. Won't we need to do any adjustment to Swift3.0? \n. Can you please take a look?  Not sure if you are ware of this. @bpoplauschi \n. The completion block is called but the image is nil.\n. @bpoplauschi \nAwesome work!\nI got the 4.0.0 beta2 and we love it!  We cannot wait to integrate it into our production app in next release.  So we would be grateful if you can provide the rough release ETA of SDWebImage 4.0.0.\n. I am using cocoaPods 1.1.0 r2.  I integrated it into my project successfully. But not sure why you remove \"use_frameworks!\"\n. @mythodeia , Sorry for the late reply. \n Unfortunately I cannot reproduce it, it appears occasionally. And now I've added some logs to debug what happened under the hood.\n. Do we have solution for this crash issue please?. ",
    "Tbwas": "I encountered the same issue, how to fix it. @mythodeia Sorry, I don't know the specific version. The last time update library is 6 June 2016. Is it a SDWebImage\u2019s bug?. @mythodeia ok, I will try it. I found the reason. The first image downloading request is finished yet the connectionDidFinishLoading method doesn't execute completely, and then the second image downloading request start executing because of the UICollectionViewCell reuse mechanism\uff0cso the first request is cancelled but the image is downloaded completely and cached. However, the first request callback nil to the second cell rather than the first cell, and the second cell's operation is marked cancel state.. @mythodeia ok, thanks.. ",
    "Berkat0789": "Hey is you are still having issues with this I found a way to fix it..you need to use the SD_set image call with options and set the SdWebimageOptions Accordingly. Here is what I did. I am user Firebase Also if that helps you in any way.. \nitemImage.sd_setImage(with: URL(string: passedItem.itemImage), \n          placeholderImage: #imageLiteral(resourceName: \"Watch_Item\"), \n                   options: [SDWebImageOptions.progressiveDownload, SDWebImageOptions.continueInBackground]) { (image, error, CatahType, url) in\n  self.itemImage.image = image (this is obviously the image you want to set)\n}. ",
    "ThangavelMca": "Hi,\nSDWebImage not working(not compile) in Objective C++ complier. \nMy app have some c++ coding.. So i should go to Objective c++ complier.. \nHow to fix that issue in SDWebImage code\nThanks in Advance.\n. Hi,\nSDWebImage not working(not compile) in Objective C++ complier.\nMy app have some c++ coding.. So i should go to Objective c++ complier..\nHow to fix that issue in SDWebImage code\nThanks in Advance.\n. @bpoplauschi  CFNumberGetValue - Method did not found in SDWebImageDownloaderOperation class.\n. ",
    "wangpeng1": "i think this is a bug ,and should modify the UIImage SDScaledImageForPath(NSString path, NSObject *imageOrData) method: if (image &&[[UIScreen mainScreen] respondsToSelector:@selector(scale)]) not if ( [[UIScreen mainScreen] respondsToSelector:@selector(scale)])\n. ",
    "croath": "@rs feel so sorry for my bad code format.\nfixed!\n. Hey guys I don't know if you guys are still focusing on the issue. Actually I'm not involving with any issues here, just feeling curious about the sync things around the callback block, well, while reading the source code of the project.\nAfter reading the explanations from @matej and @rs , and the great example about -[SDWebImageManager downloadImageWithURL:options:progress:completed:] hitting the memory cache, I kind of know the reason of using sync.\nBut talking about the UI redrawing, is the main thread just here waiting for memory cache returns back and will draw the image once the image comes back from memory, immediately? There are still lot of time and chances for UI to redraw between querying cache and sending back the completionBlock.\nAnd what if the -[SDWebImageManager downloadImageWithURL:options:progress:completed:] call couldn't hit any cache and then just fetches it from internet? After the image being downloaded successfully, should we just use a async instead of sync to call the completionBlock?\nPlease let me know if I missed something or there was any misunderstanding.\nThanks!\n. @bpoplauschi Awesome! Yep the safety, just what I was talking about. So that I asked about why sync but not async. Maybe we can see the result differs with profiling work in some specific situations.\n. ",
    "residentsummer": "Did you imported the header?\n```\nimport \n```\n. Yes, I think if you didn't, autocompletion won't be working...\nSo, it seems that runtime can't find the requested method.\nFirst thought was \"maybe library isn't linked to the binary\", but there are nothing about it in the installation notes.\nI've run out of ideas here :(\nP.S. I've installed SDWebImage through CocoaPods - works like a charm.\n. ",
    "spoofax": "Yes I did.\n. Ok, thank you very much any way... I will try the CocoaPods method.\n. @residentsummer I also installed it through CocoaPods now, does not work anyway.\nEDIT: In Simulator ist works, but not on the device.\nEDIT2: Now it also works on the device itself! Yess.... and thx to all helpers!\n. ",
    "ninjatronic": "@spoofax Hi. What steps did you follow to get it to work? I am also having this problem. Thanks :)\n. ",
    "arun057": "I have the same issue\n+1\n. +1 I would love to see this happen! I am struggling with the same issues atm.\n. I have the linker flag set and am still getting this error :(\n. ",
    "glibsm": "Same here. Having issues with PNGs\n. ",
    "obaidjawad": "I'm also getting the same error and the file is not getting saved in the document folder instead it is getting cancelled completely. The url is getting stored as cache and it is not telling us whether the image is failed to load or success. Please correct this issue and I have also tried this with saving the images in JPEG format and downloading the PNG images.\n. i'd like to tell you that i'm using the tabcontroller + navigationcontroller in my next project in which i'm getting the above error, is it the cause? I know that this is funny question to ask but still because it is strange it works for one proejct and not for other?\n. I fixed the problem by manually adding all the SDWebImage class files and it got fixed.\n. ",
    "chancyWu": "<Error>: CGBitmapContextCreate: unsupported parameter combination: 16 integer bits/component; 64 bits/pixel; 3-component color space; kCGImageAlphaPremultipliedFirst; 4960 bytes/row. when load some images, this error message comes out.\n. ",
    "iFoxxy": "Hi! Got the same issue with this JPEG image http://hh.ru/employer-logo/1479899.jpeg\nEven @mythodeia 's solution didn't fix it.\nError text: CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 40 bits/pixel; 4-component color space; kCGImageAlphaPremultipliedFirst; 1216 bytes/row.\n. @mythodeia with the latest build error still persists... only for the JPEG above.\n. Now it works, thanks!\n. ",
    "King-whb": "Aug 25,2015 ,mythodela is so smart,Thank your very much;\n. ",
    "ivanoblomov": "Adding Facebook's SDK fixes the compilation errors, but this adds over 1 MB(!) to the app for a library I don't use. Can you think of another solution? Haven't had much experience juggling third-party libraries like this. Cheers!\n. Right on. I'll give it a shot.\n. CocoaPods install went like butter (Ruby, I miss ya!), but I'm getting the same compilation errors unfortunately.\nWhich I suppose makes sense, Pods must be declaring the same compiler flag under the hood somewhere. Got any other ideas before I bite the bullet and add the Facebook SDK?\n. Damn, and I thought I searched their forums too. Thanks for the link! I'm not using CocoaPods on this project yet, so hopefully it won't be an issue.\n. Absolutely right, Bogdan. Sorry I couldn\u2019t reply earlier. I was AFK for a wedding. Cheers!\n. ",
    "MaxGabriel": "You could install using Cocoapods instead. \n. Cool. If you run into any problems with Cocoapods I'll answer them. \n. Oh crap. Maybe I should have thought more about the Cocoapods thing before suggesting that. It looks like Parse has answer for your question though: https://parse.com/questions/using-the-parse-ios-sdk-without-including-the-facebook-sdk\nBad news is that the last guy commenting has some problem with Cocoapods and Parse's fix :(\n. ",
    "holyprin": "Ditto, driving me nuts because I hate warnings. looks like its only happening for iOS 6+ though, since it's defined earlier in header only if its iOS 6 or mac osx 10.8 and from what I can tell it should be 5 anyway.\n. Just add \"#undef SDDispatchQueueSetterSementics\" before both redefs in that if, annoyingly this will break with submodule / pod updates but meh, I hate warnings.\n. ",
    "BenMoment": "Me too...\nI'm not sure it has anything to do with the GIF impl though.\n. ",
    "TomerMomentMe": "Any news?\n. ",
    "Constantine-Fry": "Yes, i know that it will clean by \"access time\".so your cache will not remove images that users access every day.\nyour cache remove images be \"creation date\". it means that after kDefaultCacheMaxCacheAge that application downloaded on first launch will be removed even user open them.\nI suggest to update NSFileModificationDate once after launch. By having NSMutableDictionary with accessed images paths. no need to update several times NSFileModificationDate.\nwhat do you think?\n. ",
    "pennig": "I'd suggest submitting a pull request here. Seems worthwhile to me!\n. ",
    "Derkin": "why not adapt this advice?\n. ",
    "CodeLife2012": "Maybe image created by ImageIO  is lazy load it's content. So in this test may need use the content of the image.\n. I said Lazy load  is not about decompression, it just the load of the image. When create a source with CGImageSourceCreateWithURL, actually the file isn't loaded, maybe mmap to the file. The file is loaded into memory when first access.\nSo there is no difference between NSData+ImageIO and NSData+UIImage. \n. I have create a demo for test, you can see clearly the real memory consumed between two approaches(3.4m->160m). So when use  CGImageSourceCreateWithURL the file is actually not loaded into memory instantly.\n@skyline75489\n@Constantine-Fry \n. I run the test in local, test04CachedImageExistsForURL: is failed, but seems this fail should not caused by my change.\n. Seems this is caused by the system.\nCurrently gif is just multi images in UIImage, and will disappear in transition. . Why ImageIO is preferred?\n. ",
    "skyline75489": "@CodeLife2012  UIImage is kind of lazy loaded in its nature. No matter how you create it, UIImage won't do the decompression thing until it's being displayed in UIView.\nHere in the example UIImage is just created. If you're doubting the equality of the test, I don't think there's a point, since all those methods are just doing the same instance-creation part.\n. @CodeLife2012 Interesting. Looks like ImageIO is merely a trade-off between speed and memory. In that case, I'm not sure that #1707 is really that necessary after all. \nCC @bpoplauschi \n. @dreampiggy Were it caused by logical problem, using other locks would lead to the same deadlock issue. However I failed to find one. Any suggestions?. Now that we've changed to NSURLSession, is this implemented ? If not, will this be implemented any time soon? @bpoplauschi \nI'm willing to implement and PR this if help is needed.\n. I think that \"suspending\" isn't ideal because of the reason you mentioned. We need to free up the network resources. However, it would make sense if we use cancelByProducingResumeData to temporaily save the data downloaded. Later on we can use downloadTaskWithResumeData to continue the download. This could effectively save the time needed for downloading.\n. This weekend I'll try to figure out a demo, maybe even a PR, to demostrate this feature.\n. I did a little research tonight. Although NSURLSessionDownloadTask's methods looks sweet and all, it has a serious flaw (perhaps design in Apple's perspective), that is saving the data to file directly after downloading. While downloading, you can only get the received and expected byte count, but not the actual data. This violates so many things that SDWebImageDownloaderOperation are doing right now, such as progressively showing the image and compressing the image if needed.\nThis is not as easy as I thought it should be. Man, has SDWebImage changed since 3.8.x. AFAIK, there seems to be no other way to implement this (without breaking other parts of the library) other than manually handling the resuming, which is basically writing a NSURLSessionDownloadTask. Hopefully someday me or some other guys would come up with a better idea.\n. I think this would be nice in 5.0 release. I'll take a look at it. @bpoplauschi @dreampiggy . Then I guess this issue can be safely closed?. @nateboxer This makes sense because Apple doesn't allow any \"beta\" software uploaded.\n. By the way, I've read the current CHANGELOG. When it comes to FLAnimatedImage support, It says\n\nrequires iOS 8+ (it's the only way due to FLAnimatedImage requirements)\n\nHowever, FLAnimatedImage's podspec requires only iOS 6. And I just installed with Podfile that requires iOS 7 and it compiles just as it should do. Am I misunderstanding this or is this a mistake in the changelog?\n. This somehow messed up the tests. I'll look into it tonight.\n. @gujinku Well, in my defense, as a full Objective-C project, it's not necessary to use SDWebImage with \"use_frameworks!\".\n. @nateboxer What's the problem exactly?\n. Can you provide an example that reproduces this crash?\n. Can you provide an example that reproduces this?\n. According to #386 ImageIO is significantly faster.\n. @dreampiggy #386 also discusses this. This PR is more of a experiment thing. The performance is faster indeed. However it's basically a trade-off between CPU and memory.\nBut more PRs could never hurt, right? If it could inspire someone out there, so much the better.. What's this supposed to do?\n. I've doing some research on this. Turns out it isn't really that easy. \nThe key, which has been point out by @Mosaics is that Swift has internal support for default values of method parameters. This feature does not play well with those methods signatures in UIImageView+WebCache.h, which is designed to make Objective-C support default-values-of-method-parameters-like feature. \nIn most cases, this will simply cause redundancy, because the interoperation mechanism in Swift can convert nullable method parameters in Objective-C into default value nil in Swift, making the method with most parameters is the one and only method we need. However, the problem here specifically is OptionSet. Swift does not know what initial value we need for OptionSet type and chooses [] for default value. What we actually need is that options is required without a default value.\nTo resolve this, my suggestion would be creating a new interface for Swift, utilizing NS_REFINED_FOR_SWIFT & NS_SWIFT_UNAVAILABLE. First, make sure only one OC method is refined.\nObjective-C\n- (void)sd_setImageWithURL:(nullable NSURL *)url NS_SWIFT_UNAVAILABLE(\"Use refined method for Swift instead\");\n- (void)sd_setImageWithURL:(nullable NSURL *)url\n          placeholderImage:(nullable UIImage *)placeholder NS_SWIFT_UNAVAILABLE(\"Use refined method for Swift instead\");\n//...\n// We only need the last one.\n- (void)sd_setImageWithURL:(nullable NSURL *)url\n          placeholderImage:(nullable UIImage *)placeholder\n                   options:(SDWebImageOptions)options\n                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                 completed:(nullable SDExternalCompletionBlock)completedBlock NS_REFINED_FOR_SWIFT;\nSecond, create new Swift interface like this:\n```Swift\nextension UIImageView {\nfunc sd_setImage(url: URL?, placeholderImage: UIImage? = nil, options: SDWebImageOptions = .init(rawValue: 0), progress: SDWebImageDownloaderProgressBlock? = nil, completed: SDExternalCompletionBlock? = nil) {\n    __sd_setImage(with: url, placeholderImage: placeholderImage, options: options, progress: progress, completed: completed)\n}\n\n}\n```\nTo avoid signature collision, the method is named sd_setImage(url:) instead of sd_setImage(with:).\nNow, old methods won't show up in the IDE auto-completion and using those methods will be forbidden by compiler:\n\n'sd_setImage(with:completed:)' is unavailable in Swift: Use refined method for Swift instead\n\n\nSeems to me there is no other way to do this without creating a new Swift interface. That being said, I really don't like adding Swift source files into pure Objective-C libraries. One concern would be that once you have a Swift file in your library you can not use it as a pure static library any more. You'll have to use it as a dynamic (or embedded in Apple's dictionary) Framework. And you'll have to make your target iOS 8+ because embedded framework works only on iOS8+. This kind of sucks if you need to support lower version of iOS.\nI thought about perhaps making a Swift subspec for this? But that isn't very elegant, either.\nCC @bpoplauschi \n. If I'm not misunderstanding this, we can and probably should do that in each category(e.g. UIImageView+HighlightedWebCache.h) to prevent any further problems regarding naming collision.\nI'll try to make a PR tonight.. @bpoplauschi  Seems like I've been misunderstanding your point. You mean just mark NS_SWIFT_UNAVAILABLE all the methods except the last one, without using any Swift code after all? It indeed is a easy fix, though. I think using Swift gives us more available space for imagination such as further \"swifty\" API refinement. . @bpoplauschi Alright then. I'll go and make a more simple fix. The Swift way is actually way more complicated than I thought. And I finally understand why CocoaLumberjack is using a separate Swift framework because otherwise many other problems would arise.. @bpoplauschi  I've been trying to come up with a Objective-C only fix. But the result is not very ideal. The generated Swift method signature for the method that have all the parameters looks like this:\nswift\nopen func sd_setImage(with url: URL?, placeholderImage placeholder: UIImage?, options: SDWebImageOptions = [], progress progressBlock: SDWebImage.SDWebImageDownloaderProgressBlock?, completed completedBlock: SDWebImage.SDExternalCompletionBlock? = nil)\nAs you can see only the options and completed are granted a default value. I'm not sure why but this is making the API less flexible than in Objective-C.. This fixes progress but there is still placeholderImage left without a default value? Should we also add it?. And by the way, using NS_SWIFT_UNAVAILABLE may not perform as expected. If I try to neglect some parameters in the long method, Xcode still gives something like:\n\n'sd_setImage(with:completed:)' is unavailable in Swift: Use refined method for Swift instead\n\nIt seems that Xcode still know the short version is there but refuses to let you use it, which is kind of strange and here just not correct for us.  I think NS_REFINED_FOR_SWIFT might be a better idea because it actually rename the method.. There is no easy way to improve app performance. I think you'll need to profile you app with Instruments to get a better understanding of the exact cause of performance bottleneck. . What is the crash exactly. Related to #1780 . The first commit just a draft to demonstrate what I'm trying to do. Here's some further concerns that I'd like to discuss:\n\nCarthage support. Currently the code only works with CocoaPods. CocoaLumberjack chooses to create separate frameworks named CocoaLumberjackSwift for Swift. I'm not sure why but I guess they have their reasons. I'll try to deal with Carthage later.\nSwift for subspecs. Should it be SDWebImage/MapKit/Swift or SDWebImage/Swift/MapKit? Personally I prefer the latter.\nNaming convention. Should we adopt the new and trending namespace-like naming convention used in RxSwift? Imagine imageView.sd.setImage(url:).\n\nCC @bpoplauschi  @mythodeia . I'm deeply honored to hear that. I've been working on some other open source projects driven by my personal passion about open source community. It's always been fun for me and I'd love to join you guys. I'm also totally cool with just being an outsider who makes PR, just so you know. . Thanks. Looking forward to working with you guys \ud83e\udd42 . Close this in favor of #1797 . Your local pod repo needs to be updated. Pod no longer updates local repo since version 1.0.0. You'll need to use pod install --repo-update.. No problem. I'll close this issue then.. You'll need to give us more information than this. More code would be nice.. The warning is about libwebp and basically irrelevant in most cases.. Is there any error information that you can provide?. @bpoplauschi Fact: People just gonna keep ignoring ISSUE_TEMPLATE until Github enforces it. I'm not telling you how I found out though. That's a secret. \ud83d\ude09 . @geoffery009  Please fill in the issue template otherwise we wouldn't have enough information about issues like this.. I don't quite understand the issue. Is #1764 making the travis build failing?. Just out of curiosity, when would we want to load image only if it's already in cache?. #1781 addressed this.. Can you guys provide reproducible examples about the crash?. There seems to be no straight way to disable this feature. How long is the background usage are we talking about here? It shouldn't be very noticeable unless you have a large amount of cached files. . It's very clear that you should run pod repo update. Can you be more specific? Which beta version works fine for you ?. What is the use case that caused this crash, exactly? Can you elaborate?. @inigo333 Can you give us an image that can reproduce this error?. Hi there. In #1925 @Cooriyou indicates that this makes things better but still there's crash remaining. What do you think? Have you seen crashes like that?. @rami-ihr #1858 seems a valid one. You may want to give it a try.. It's clearly written in the documentation here:\nobjective-c\n    /**\n     * By default, when a URL fail to be downloaded, the URL is blacklisted so the library won't keep trying.\n     * This flag disable this blacklisting.\n     */\n    SDWebImageRetryFailed = 1 << 0,\nPlease refer to any documentation you can possibly find before asking a question. This isn't about polite. Reading documentation is the very skill that you need to be a good coder.. #1781 . The problem is not NSUTF8StringEncoding. The problem is about \"escaping\". URLs must be escaped.. I believe this is a duplicate of #1883 ?. Try #1858 and see if it works. Have you seen #1883 and #1925 ? . Technically there is a way but SDWebImage isn't designed to be a full-featured HTTP client. You may have to implement this on your own.. @joshuafeldman I'm not quite convinced that this is the root cause of the crash(although it seems to be). My understanding is that the old code is holding self(main_queue -> block -> self). Before block is actually executed self shouldn't be released. So my question here is:\n\nself shouldn't be dangled as it can not be released before the block finishes executing.\nEven self is dangled, why would the crash appears in dealloc? By the time the code reaches dealloc the notification process must have been already finished.. Forgive my bluntness. It's just some recent thinking made me realize that I was not really seeing this PR through.. Search for strong-weak dance & you'll get there. Github is not a tech support forum and please don't make it one.. @dreampiggy Welcome aboard \u6b22\u8fce\u4e0a\u8f66 \ud83d\ude09 . Sounds amazing. Maybe mark some of the PRs as WIP?. I too feel that  #2069 is kind of complicated to me. This PR plus more comment in code that clarify  the purpose of the queue switching would be nice. Looks like a nice little feature to have. I'll give it this \ud83d\udc4d . @dreampiggy \u5144\u5f1f\u4f60\u662f\u771f\u7684\u7a33\u3002\u4e0d\u8fc7\u6ce8\u610f\u8eab\u4f53\u554a\u8001\u54e5\uff0c\u8eab\u4f53\u662f\u9769\u547d\u7684\u672c\u94b1 \ud83d\ude03 (\"Sleep early\" in our native tongue). Looks very promising. Hat off, sir.\n\nChanging SDK version seems fine. I mean it would be 2018 in just a few days. iOS7 feels really 80s to me. . Lately I've been busy with my personal stuff. I'll try to find time to review this.. I thought about adding NSProgress as parameter but that would cause even more API changes. So I decide to break the only API I think can be broken.\nUsing category looks brilliant. But if the progress is set after sd_internalSetImageWithURL is called, there may some confusing usage. For example, one could start observing the sd_imageProgress and then sd_setImageWithURL.\nI'm not sure about this one. I'd like to think that \"if we have to break it, break it fast\". So I'm open to more suggestions.\n  . Looks good to me. Cheers for better APIs. \ud83c\udf7b . I'd also say 5.x is better. . I think we should leave all API changes to 5.x.. I like this one. But I'm not sure whether we should expose SDWebImageCombinedOperation. It seems very internal to me. The id <SDWebImageOperation> is obviously more flexible.. Looks good to me. Well done. This looks good. I think it would be better if we move the cancellation thing into SDWebImageDownloadToken, which would make better api like:\nobjective-c\n if (self.downloadToken) {\n    [self.downloadToken cancel];\n}\nInside SDWebImageDownloadToken hides the cancellation detail.. I don't really get it about the animation part. There is no animation happening, right? Because you're using zero duration.. This is great. But I'm just curious does anyone really need this feature right now? I'm not a AppKit guy myself.. I see, the completionBlock is the problem. I'm trying to find an execution example that could cause the main thread to block. Could the completionBlock get called on the main queue?. One possible deadlock situation is that completionBlock is called on barrierQueue, which would cause barrierQueue blocked and then main queue itself.\nBut you're right. Using lock is apparently the better choice.. I know people are asking for this. But personally I'm really not a fan of adding complicated indicator feature. The API already exposes progress and completed callbacks which should be enough in most cases. \nIt's just my opinion whatsoever. If people like it, it should be introduced. Just like Trump :us: . Looks good. Finger crossed for 4.3.0.. I'm a little bit worried that UIImage+Transform interface would change a lot in the future. Should it really be exposed to users anyway?. What I'm saying is that we are using methods in UIImage+Transform inside the library. At the same time it's exposed to user. If some day we'd like to change those, we'll be having a hard time doing that since some users may also use them.\nTake our lib YTKNetwork for example. We intentionally make our util class private (https://github.com/yuantiku/YTKNetwork/blob/master/YTKNetwork/YTKNetworkPrivate.h) so that we can change it without breaking other people's code.. That's cool. My other concern would be the naming. UIColor + Additions and UIImage + Transform seems to be too general. I think it's better to prefix it with SD.. Honestly I think QueryDataSync doesn't seem to belong to SDImageCacheOptions since you must combine it with other options for it to work. \nPerhaps a better naming would be SDImageCacheQueryDataSyncWhenInMemory and SDImageCacheQueryDiskSyncWhenNotInMemory. But this seems utterly long.... These are a lot of changes. I think the priority of the Photos support is not high. Maybe we should hold this PR until other PRs are merged.. LGTM. This is sweet for Swift users. \ud83d\udc4d . Personally I think that adding custom properties is a pattern that should be used with extreme carefulness. I agree with @dreampiggy on this one.. @zhongwuzw Can you list the reason why your implementation can not work so that we can all openly discuss it ?. I've read basically all your discussions. I agree with @dreampiggy . The protocol implementation is more elegant and maintainable. Adding sd_memoryCost property just seem to be too much effort for only a fix for FLAnimatedImage.\nAs for #2486 , I understand @zhongwuzw 's concern for memory issues with 4.x. I'd say that people know SDWebImage 4.x isn't good with animated image. For crying out loud, FLAnimatedImage itself hasn't received a newer release in the past year. For people who are really serious about animated image, they'd very likely already give up on SDWebImage. If we really want a better animated image support, we should do it with 5.x.\n. @dreampiggy The name animatedImageMemoryCost seems a little bit redundant.  It's inside a protocol named SDAnimatedImage . I'd suggest memoryCost, or something like it.. @zhongwuzw When I say \"protocol implementation\" I mean @dreampiggy 's implementation. Should've make it clear.\nIf you really looking for that level of customization. I'd suggest adding another protocol named SDImageMemoryCost, move memoryCost up there and let SDAnimatedImage implment it as well.. @dreampiggy Does adding another SDImageMemoryCost protocol sounds reasonable? It's presumably better than depending SDAnimatedImage.h inside SDMemoryCache, which adds reverse depencency. And it allow users to customize their image implentation.\n. Let's be honest, there is no perfect solution in programming. All solutions are trade-offs. I personally prefer using protocol. Exposing sd_memoryCost to users just seems quite confusing.. @zhongwuzw It may not be your intention but your English expression sometime sounds very aggresive. I think we can all agree that what's important is how to make this project better, not whose code is better. We on the same table?. Looking good. Nice PR by the way.. This seems reasonable. But I'm not sure whether it's worth the effort. For most cases this priority changing perhaps doesn't really make a difference, if you know what I mean.. I'd love to hear @jerelevine 's idea on this one. How much does this actually help improve your app's performance?. @zhongwuzw  If I'm not misunderstanding, this is basically reverting #1940 . What do you think about #1940 then?. @zhongwuzw I understand what you are trying to do. But honestly I've not using (or seeing) the usage in this PR. Usually we capture self using __block in order to nil it after using:\nobjective-c\nMyViewController * __block myController = [[MyViewController alloc] init\u2026];\n// ...\nmyController.completionHandler =  ^(NSInteger result) {\n    [myController dismissViewControllerAnimated:YES completion:nil];\n    myController = nil;\n};\nYou also mentioned that:\n\nIn theory, using self should not be caused crash, but it has, I don't know the reason.\n\nThat's also discussed in #1940. In theory this crash should not happen at all. But it indeed happened, like a lot. I think leave it weak would be a safer choice.. @dreampiggy Exactly what I'm thinking. . This looks good. But I wonder if we could separate transform logic from normal image download & cache logic clearly. Currently the transform-related logic is sparse and mixed with original logic, which makes the code hard to read and maintain.\nIn general I love the transform feature, though. Thanks for the work.. Here @nonobjc prevents this method from being imported to SDWebImage-swift.h (for Swift -> Obj-C). This should be OK because you don't actually need this if you're using Obj-C.\nWithout @nonobjc there will be import error in the generated header file.. Should this be exposed in .h?. Maybe a base coder class so we don't need to implement sharedCoder for serveral times.. \"the default coder will be used instead\". Perhaps mark this as deprecated?. I think we are deliberately not using NS_ASSUME_NONNULL_BEGIN in the project.. Well in #1581 quote:\n\nDecided to make explicit nullable and nonnull and not use NS_ASSUME_NONNULL_BEGIN so everything is clearer when read. Done so in the implementation files as well. A small improvement would be using QOS_CLASS_USER_INITIATED on iOS8+ since it's recommended by Apple.. I can't say that I like isKindOfClass check but it seems to the only way. Also If we are using FLAnimatedImage in so many places, we don't need to pretend that we are not using it, even when \"installing the lib without GIF\".. @dreampiggy I feel that currently the GIF-related code is somehow tight-coupled with the core code. The reason for this perhaps lays within the nature of GIF format itself. It's just combination of simple images. The decoupling of GIF code may not be intuitive or the right thing to do.. Yeah I get the idea that this two is currently the same thing. But the QoS API is the future, if you know what I mean \ud83d\ude09 . Should iOS version check be good enough?. Wouldn't it be more reasonable to put @autoreleasepool inside the loop?. To avoid using hard-code string, keys can be generated from selector like NSStringFromSelector(@selector(scale)). The return value of initWithCoder should be nullable.. I feel that this option is kind of needless. Why wouldn't one want to use SDAnimatedImage were it better than UIImage in many ways \ud83d\ude09 . I think this method should be annotated with NS_REFINED_FOR_SWIFT in case of naming collision. See #1797 and related issues.. The minimum macOS version requires is 10.8 currently.. This two option has the same value?. Isn't is kind weird that only completed was given default parameter nil but not progressBlock. Why is this happening?  Just out of curiosity. Maybe make this \"operationsLock\" and LOCK(operationsLock), in case there would be any other locks needed. I don't quite understand. It's meant to be shared. Why would I want to use a obsolete config object? . Remember the not using NS_ASSUME_NONNULL_BEGIN thing?... Well it's kind trivial. @bpoplauschi What do you think?. Can we make more properties optional? With ageLimit, countLimit and sizeLimit, it's kind of hard for one to actually conform SDDiskCache.. It may sounds biased. But beta version is meant to be unstable and will change interally and externally. That's what beta means. Users who are using beta version of anything suppose to know that beforehand.. I wouldn't say it's \"punishment\". We can not make it better without breaking things. Beta is where things will be broken. And that's a good thing cuz that's also where it gets better.. \n",
    "andyvb": ":+1:\n. I would prefer to be able to turn it on or off, perhaps via a property.  Even in debug I don't always want to see logging.  Since you already have a way to call it with a completion block, a developer could use that instead (granted it would require a recompile).  Or maybe add a method signature which returns an NSError for a failure case, since other than count for success it's the only additional info one might usually care about.\n. ",
    "jparise": "I considered keeping it for DEBUG, but it still felt too noisy for that environment.  (I often prefetch 50+ images)  That's a matter of personal opinion, of course.\nIf you feel strongly about retaining some level of debug-level output, I think a good compromise would be logging only the summary line in DEBUG builds.\n. You might want to consider guarding against the same path being added multiple times.  While that's probably a user error, it's easy enough to be extra helpful.\n. ",
    "pieterclaerhout": "Have a look at #577.\nThis pull request adds a delegate for the image prefetcher. This way, everybody can choose what he/she thinks is the best approach.\n. Done.\n. ",
    "lucianboboc": "can this be included in the project?\n. ",
    "mitchellmorris": "I second that.\n. ",
    "yorkwang": "I'v tried using  [[SDImageCache sharedImageCache] clearMemory];, but it didn't seem to work.\n. ",
    "ultranano": "Hi All!\nI Have tried calling [[SDImageCache sharedImageCache] setValue:nil forKey:@\"memCache\"]\nat the end of loop of 160 Images (JPG 800x600)\nbut memory cache still raise...\nMy problem it's that real memory and virtual memory reach high values and app crashed before the Mem Warning\n. ",
    "hsoi": "@rs not sure what the \"better solution soon\" is, but I would like to add my voice to wanting this ability.\nI'm trying to use SDWebImage to solve numerous problems in an app I work on. Much of the time the app images are thumbnails in UITableViewCell's so it's simple enough to just use the UIImageView category. But there's a feature in the app where you can \"download all app content\" for things like Airplane Mode use. So of course, I'd want to piggyback into SDWebImage's mechanism so there's one way for all image management.  It would be welcome to have a way to purely download the images and save onto disk, no memory caching, very simple and efficient file download.\nOne thing I also have to contend with is this server transition we're going through. The old way had the server processing the images and putting them on the server with constantly unique URL's, so detecting \"changes to the image\" was never difficult, just check against the URL. Thus our SDWebImage use wouldn't need any options.  However, the new server doesn't necessarily provide unique URL's (tho the HTTP headers should have Last-Modified and Expires headers); so for that server I've been trying to use SDWebImageRefreshCached to always ensure we get the latest and right one, even if it's a performance hit (need to be correct first, fast second).  So I don't know how this might factor into your solution, but I figured it might be useful to mention.\nThank you for listening.\n. I'm experiencing what sounds like a similar problem, tho my issue doesn't appear to be like the 2 referenced issues nor did using SDWebImageLowPriority make a difference. And while my code was using SDWebImageRefreshCached, setting the options to 0 didn't help.\nBut I too have a table with hundreds of items in it, custom UITableViewCell, UIImageView with SDWebImage. If I slowly scroll, no problem. If I rapidly scroll, eventually the app freezes.\nWhat I see when I stop in the debugger is the main thread is blocked waiting on the dispatch_barrier_sync(self.barrierQueue in the SDWebImageDownloader. There are a few barrier_sync's in the code and across numerous runs of my app it'll happen on one of them.\nPrimarily it happens because the -queryDiskCacheForKey:done: happens on the main thread, either through normal course of action or eventually being forced onto the main queue. \nIt is of course bad to block the main thread.\n@bharatdodeja are you seeing this same problem, if you run in the debugger? Or are you seeing something else?\n. @rs I cannot speak for @bharatdodeja 's issue, but to mine, do you have any comment? insight? ideas for tracking this down?  Thank you.\n. I'm starting to look into this. I exported a huge list of image URL's from our app, then created a very simple app from project stationery. Added a UITableView, basic data source handling to then fetch and display the image... uber simple, and it's working. sigh\nI do see a lot of stuttering, especially on slower devices (the barrierQueue on the main thread still causing problems?).  I also noticed if I paused the app's execution there weren't many background operations running, whereas when I hit this freeze there's some 50-75 threads paused off in the CFRunLoop. Hrm.\nmore details to come I guess.\n. I've been able to reproduce this in a simple sample app. It seems it has something to do with the load operation being canceled. That is, if you're setting the UIImageView of a UITableViewCell, you scroll a lot, the cell's get dequeued and reused thus any existing operations canceled... then yes, eventually there can be a lockup.\n@chinaxuyujian  - does this seem to be your case? You may need to insert NSLog statements to ensure you're getting a dequed cell instance AND that you're seeing cancellations of the SDWebImageDownloaderOperation.\nI have a lead on the possible problem. We're vetting it out in testing. @rs I'll certainly provide information and/or a pull request when/if we have something.\n. @rs  it looks like the problem is in SDWebImageDownloader, with a retain cycle.\nsee this: https://github.com/barz/SDWebImage/commit/ca58ab6b9bb2f11a2e06856136380ef375462ef5\nOr at least, once I did that, the problem went away along with various leaks and other things I saw in Instruments.\n. Yeah, working on it. Need to make you a clean branch that isolates that issue and not other workaround stuff (that you resolved in some other commits since that fork).\n. Thank you. Hopefully the others reporting the problem can chime in if it resolves their issues or not.\n. thank you!\n. Does the merged-in pull request https://github.com/rs/SDWebImage/pull/591 solve your problem? If so, I reckon you can close this issue (and accept the S.O. answer). If not, what problems remain?\n. Thank you!\n. :+1: \n. ",
    "joshuafeldman": "+1 I would love to have the ability to either turn off in memory caching or at least control the size of it without altering the source code.\n[[SDImageCache sharedImageCache] setValue:nil forKey:@\"memCache\"]; works, but I feel like it is a not so pretty workaround. Also you would need to have it in multiple places because when you retrieve an image from the disk cache it is added to the memory cache so you would have to run this call again.\nWould be awesome to see this feature added. I am sure many people would benefit greatly from it.\n. I see this issue as well. Came type of crash report.\nI also see failed downloads which I am now guessing might have to do with this issue.\n. Why couldn't you use scheduleInRunLoop instead of explicitly setting a timeout?\n. Wouldn't you need to be executing on a run loop to receive NSURLConnectionDelegate messages safely? Since this is a subclass of NSOperation I believe you need some sort of run loop for the connection layer otherwise the connection messages could be lost.\nI actually think this is a fairly large issue. From my understanding an NSURLConnection should almost always be scheduled in a run loop, otherwise it's possible the background thread it is running on can exit before it finishes. I think we would need something along the lines of:\n[self.connection scheduleInRunLoop:runLoop forMode:[NSSet setWithObject:NSRunLoopCommonModes]];\n. I see that you added a conditional for 5.0. I don't believe this is an effective solution for this problem.\nYou closed this issue but didn't actually fix the problem. iOS 5.0 still suffers from downloads failing. I believe using scheduleInRunLoop will fix this issue as well as the dead thread problems.\nI think this issue should be reopened.\n. @rs But since you are scheduled in an operation queue wouldn't you need to place it in a run loop? It says if you don't it will be scheduled in the current run loop in the default mode, but you have. Am I wrong?\n. @rs I haven't I am in the middle of another issue right now, flipping back and forth between Xcode and this discussion :)\n. I don't think so. I believe if you don't schedule it in a run loop (when inside an NSOperation) it can exit.\nI took a quick peak into AFNetworking's NSOperation subclass and they do indeed follow what I was saying. They also call start after the connection has been scheduled in the run loop.\nhttps://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking/AFURLConnectionOperation.m\nIf I had some more time right now I would test, but I really do think this is a pretty big issue. I would love to use SDWebImage in the next update in one of my applications but this is a major problem in our QA right now.\n. We'd also need to make sure to unschedule it from the run loop unscheduleFromRunLoop.\n. You could also create a while loop to keep the run loop alive while the operation is executing and than break once it finishes.\n. One might be created on the fly but there is no guarantee it will stick around. CFRunLoopRun is keeping it around which is in essence what AFNetworking is doing also, right? They just chose to explicitly schedule the NSURLConnection in a run loop as opposed to querying it like what CFRunLoopRun does. It is ensuring that the run loop exists for the NSURLConnection. Not sure if it makes much of a difference but start is called on the NSURLConnection before you have ensured you have a run loop.\nI was suggesting using [self.connection scheduleInRunLoop:runLoop forMode:[NSSet setWithObject:NSRunLoopCommonModes]]; because I think it is a more proper way of achieving exactly what your code is doing.\nI also suggest not starting the NSURLConnection until after you've ensured there is a run loop. I know it's all in the stack at the same time but just to be safe.\n. Even if it is only for iOS 5.0, the idea of having a magic number for a timeout does not seem correct to me.\n. Okay.\nI do find it interesting that almost every single example I can find, and stackoverflow question, related to having an NSURLConnection inside an NSOperation schedules the connection in the run loop.\nIt's also interesting that myself and 3 other people are experiencing the exact same issue. I will pull your recent changes and see if it helps at all.\nThanks.\n. I understand that. It works fine most of the time. I see two issues.\n1. Downloads timing out in low network connectivity due to the run loop timeout not the network connection timeout.\n2. I have the same crash report attached above.\n. @jbweimar congratulations! What application? I will go and check it out.\n. I would like to see this integrated as well. The ability to query the disk without having to load the image would be awesome.\n. Also to note that the same code using AFNetworkings UIImageView category works correctly. Also if I retry the image download right after it fails with SDWebImage it loads fine.\n. I actually retract that previous comment. It appears that I experience the same issue with AFNetworking. Not sure why this is happening.\n. I see this as well. I just commented in https://github.com/rs/SDWebImage/issues/903 but there is definitely something performing poorly. I have seen several comments about it. I suspect it might be tied to the cancel operation that hits the dispatch_barrier_async but I am totally guessing without any investigation\nPossibly related to https://github.com/rs/SDWebImage/issues/803\n. I am not sure if by \"laggy\" @tungvoduc meant the time to download the image. I have been noticing that the most recent version of SDWebImage performs poorly in table views. Simply increasing the maxConcurrentOperationCount wont improve performance.\nI haven't had a ton of time to really dig into time profiling but I see a lot of comments in issues about UI lockups with SDWebImage. I recently switched to the AFNetworking category and the performance  is much better, although their library does not offer as much in terms of image decompression.\n. This issue should probably get reopened as the latest HEAD of master still spins the main thread when prefetching\n. \ud83d\udc40 We have it also. \ud83d\udc40. @skyline75489 sorry for the delay not really watching my GitHub these days.\nTiming is definitely key to my theory. Since the asynchronous block is not owned by self a retain cycle on self should not be an issue. And since we don't know the internals of NSNotificationCenter we really are not sure how object is stored in memory. So my theory is that the asynchronous block is indeed run and self is getting freed and dealloc is getting run but the internal of that notification gets a dangled reference for the object to be sent with the notification. I'm not sure if the post notification method is synchronous or not.\nTo be honest my theory is only a hunch and not something I can prove or disprove. I didn't spend a ton of time trying to reproduce this issue but I can say that the weakification of self does fix the crash.. It's also worth noting that passing a strong reference to self to any asynchronous block is fairly bad practice. It can lead to all sorts of weird issues, instabilities, and unpredictable lifecycles. Especially to a queue that we really have no insight to.. And I didn't think you were blunt at all \ud83d\ude00. I am seeing this crash in version 4.1.0 of the SDK as well. Although it is not a very large crash.\n```\n[__NSArrayI appendData:]: unrecognized selector sent to instance 0x174e4b940\n0 | CoreFoundation | exceptionPreprocess\n1 | libobjc.A.dylib | objc_exception_throw\n2 | CoreFoundation | __methodDescriptionForSelector\n3 | CoreFoundation | forwarding\n4 | CoreFoundation | _CF_forwarding_prep_0\n5 | XXX | SDWebImageDownloaderOperation.m\u00a0line\u00a0302-[SDWebImageDownloaderOperation URLSession:dataTask:didReceiveData:]\n6 | XXX | SDWebImageDownloader.m\u00a0line\u00a0289-[SDWebImageDownloader URLSession:dataTask:didReceiveData:]\n7 | CFNetwork | __67-[NSURLSession delegate_dataTask:didReceiveData:completionHandler:]_block_invoke.242\n8 | Foundation | __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK\n9 | Foundation | -[NSBlockOperation main]\n10 | Foundation | -[__NSOperationInternal _start:]\n11 | Foundation | __NSOQSchedule_f\n12 | libdispatch.dylib | _dispatch_client_callout\n13 | libdispatch.dylib | _dispatch_queue_serial_drain\n14 | libdispatch.dylib | _dispatch_queue_invoke\n15 | libdispatch.dylib | _dispatch_root_queue_drain\n16 | libdispatch.dylib | _dispatch_worker_thread3\n17 | libsystem_pthread.dylib | _pthread_wqthread\n18 | libsystem_pthread.dylib | start_wqthread\n``. Possible race condition? TheimageDatacollection is being set tonil` before this callback is unexpectedly called...?. Seems like a valid observation to me.\nAny timeline for getting this merged in? Would love to include it in our next release.. ",
    "peterjenkins": "+1\n. +1. I'm seeing the exact same behavior as everyone else.\n. ",
    "voronianski": "+1\n. @marinh @andrewprocter +1 \nstruggling from this issue as well..\n. @kaishin @kefon @marinh  @andrewprocter \nthat's the screen of memory usage in my app.. just two GIF images were loaded -\n\nis there a workaround? \nor should I try another lib like ImageView+AFNetworking??\n. @eightytwo actually I don't need to load gifs separately, my app is kind of feed and there are images loaded from different resources, they can be gifs, png, jpg and so on.. I'm looking for the way to disable this veeeery huge memory leak on SDWebImage\n. @kaishin I'm just wondering is it possible to replace UIImage+GIF with some solution like YLGIFImage (btw it's not ideal too, was crashing for me when using image from url - see https://github.com/liyong03/YLGIFImage/issues/5)..\n. @hidefguy @kaishin @mattdonnelly \nalso have this issue, is there a way to workaround it?\ndetails - https://github.com/rs/SDWebImage/issues/538#issuecomment-42128872\n. @matej please update cocoapod as well\n. ",
    "schazers": "+1\n. ",
    "timbornholdt": "+1\n. ",
    "darkzlave": "+1\n. ",
    "marcelosalloum": "+1\n. ",
    "maha-ghonam": "+1\n. @Bluezen i have the same problem , did you find a solution to it?\n. @Bluezen thanks for your reply.\ni have tried the SDWebImage-YLGIFImage to handle GIFs but the memory increased incredibly while loading the GIFs and blocks the UI too until finishing.\nabout DFImageManager it seems to work great but it didn't handle disk caching and the images are downloaded every time the app is launched.\nis there any way to handle downloading and displaying GIFs with little memory usage and high performance?\n. @bpoplauschi  i have the same problem here .. did you reach a solution?\n. ",
    "Savankumar-vaishnav": "+1\n. ",
    "gmogames": "+1\n. ",
    "AlfredDuck": "+1\n. ",
    "bcattle": "In case this saves anyone else time, in recent SDWebImage this property has moved to SDImageCache.config.shouldCacheImagesInMemory. ",
    "trannguyenvu91": "SDImageCache.config.shouldCacheImagesInMemory = NO doesn't work for me :( . ",
    "arrabidas92": "Here is the new syntax to use SDImageCache.shared().config.shouldCacheImagesInMemory = false. ",
    "thatdguy": "I hope that you already solved your problem, I just encountered it too so here is the solution. There's an error in the readme at this moment, where it says that we can download the SDWebImage.framework zip file from https://github.com/rs/SDWebImage/wiki/Download-Complied-Framework. You have to go to https://github.com/rs/SDWebImage/wiki/Download-Compiled-Framework instead. Get the zip, uncompress it, and you'll get the SDWebImage.framework folder.\n. ",
    "AshuMishra": "Hello Sir!\n        Hope you are doing good. Don't worry  got the solution. But i would like to thank for your support to me . One thing more in your API you haven't provided any methos to save the UIimage which is being to download in CoreData. I can save it to myself but it would be more feasible for users of the API if they get a method which can download as well as save image to CoreData.\nThanks-\n     Ashutosh Mishra\n  (Software Developer)\nAppstudioz Technologies \nOn 27-May-2013, at 5:51 AM, thatdguy wrote:\n\nhttps://github.com/rs/SDWebImage/wiki/Download-Compiled-Framework\n. \n",
    "andrewgarn": "For consistency. queryDiskCacheForKey completes on the main queue, and it dispatches back to the main queue after the transformDownloadedImage delegate call as well.\nIt seems to be just the downloadImageWithURL completion block that doesn't get called on the main queue.\n. Same issue? \n\n. ",
    "erlangzhang": "thans for your reply, it's very usefull.\n. but i found in the newest code, it will retain cycle again, in\nSDWebImageDownloader  the code \n```\n id operation = blockOperation;\nblockOperation = nil; // break retain cycle\nreturn operation;\n```\nhas no use,it can't break retain cycle\n. the newest code #397 is ios5, the thread will go to deadthread\n. i think it is not the blockOperation cause retain cycle;i down the newest code this time ,and there is my fix code ,hope this will help.\nin file  SDWebImageManager.m -----> downloadWithURL function\nfirst: replace all \"operation\" to \"weakOperation\"\nsecnond: __block id subOperation;\n```\n        __weak typeof (subOperation) weakSubOperation = subOperation;\n    subOperation = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage *downloadedImage, NSData *data, NSError *error, BOOL finished);\n\n```\nreplace all \"subOperation\" to \"weakSubOperation\"\nso all Code is \n- (id)downloadWithURL:(NSURL *)url options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletedWithFinishedBlock)completedBlock\n{    \n```\n// Very common mistake is to send the URL using NSString object instead of NSURL. For some strange reason, XCode won't\n// throw any warning for this type mismatch. Here we failsafe this error by allowing URLs to be passed as NSString.\nif ([url isKindOfClass:NSString.class])\n{\nurl = [NSURL URLWithString:(NSString *)url];\n\n}\n// Prevents app crashing on argument type error like sending NSNull instead of NSURL\nif (![url isKindOfClass:NSURL.class])\n{\nurl = nil;\n\n}\n__block SDWebImageCombinedOperation *operation = SDWebImageCombinedOperation.new;\n__weak SDWebImageCombinedOperation *weakOperation = operation;\nBOOL isFailedUrl = NO;\n@synchronized(self.failedURLs)\n{\nisFailedUrl = [self.failedURLs containsObject:url];\n\n}\nif (!url || !completedBlock || (!(options & SDWebImageRetryFailed) && isFailedUrl))\n{\nif (completedBlock)\n\n{\n\n    dispatch_main_sync_safe(^\n\n    {\n\n        NSError *error = [NSError errorWithDomain:NSURLErrorDomain code:NSURLErrorFileDoesNotExist userInfo:nil];\n\n        completedBlock(nil, error, SDImageCacheTypeNone, YES);\n\n    });\n\n}\n\nreturn operation;\n\n}\n@synchronized(self.runningOperations)\n{\n[self.runningOperations addObject:operation];\n\n}\nNSString *key = [self cacheKeyForURL:url];\n[self.imageCache queryDiskCacheForKey:key done:^(UIImage *image, SDImageCacheType cacheType)\n{\nif (weakOperation.isCancelled) return;\n\n\n\n\nif ((!image || options & SDWebImageRefreshCached) && (![self.delegate respondsToSelector:@selector(imageManager:shouldDownloadImageForURL:)] || [self.delegate imageManager:self shouldDownloadImageForURL:url]))\n\n{\n\n    if (image && options & SDWebImageRefreshCached)\n\n    {\n\n        dispatch_main_sync_safe(^\n\n        {\n\n            // If image was found in the cache bug SDWebImageRefreshCached is provided, notify about the cached image\n\n            // AND try to re-download it in order to let a chance to NSURLCache to refresh it from server.\n\n            completedBlock(image, nil, cacheType, YES);\n\n        });\n\n    }\n\n\n\n\n    // download if no image or requested to refresh anyway, and download allowed by delegate\n\n    SDWebImageDownloaderOptions downloaderOptions = 0;\n\n    if (options & SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority;\n\n    if (options & SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload;\n\n    if (options & SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache;\n\n    if (image && options & SDWebImageRefreshCached)\n\n    {\n\n        // force progressive off if image already cached but forced refreshing\n\n        downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n\n        // ignore image read from NSURLCache if image if cached but force refreshing\n\n        downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n\n    }\n\n    __block id<SDWebImageOperation> subOperation;\n\n    __weak typeof (subOperation) weakSubOperation = subOperation;\n\n    subOperation = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage *downloadedImage, NSData *data, NSError *error, BOOL finished)\n\n    {\n\n        if (weakOperation.cancelled)\n\n        {\n\n            dispatch_main_sync_safe(^\n\n            {\n\n                completedBlock(nil, nil, SDImageCacheTypeNone, finished);\n\n            });\n\n        }\n\n        else if (error)\n\n        {\n\n            dispatch_main_sync_safe(^\n\n            {\n\n                completedBlock(nil, error, SDImageCacheTypeNone, finished);\n\n            });\n\n\n\n\n            if (error.code != NSURLErrorNotConnectedToInternet)\n\n            {\n\n                @synchronized(self.failedURLs)\n\n                {\n\n                    [self.failedURLs addObject:url];\n\n                }\n\n            }\n\n        }\n\n        else\n\n        {\n\n            BOOL cacheOnDisk = !(options & SDWebImageCacheMemoryOnly);\n\n\n\n\n            if (options & SDWebImageRefreshCached && image && !downloadedImage)\n\n            {\n\n                // Image refresh hit the NSURLCache cache, do not call the completion block\n\n            }\n\n            // NOTE: We don't call transformDownloadedImage delegate method on animated images as most transformation code would mangle it\n\n            else if (downloadedImage && !downloadedImage.images && [self.delegate respondsToSelector:@selector(imageManager:transformDownloadedImage:withURL:)])\n\n            {\n\n                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^\n\n                {\n\n                    UIImage *transformedImage = [self.delegate imageManager:self transformDownloadedImage:downloadedImage withURL:url];\n\n\n\n\n                    dispatch_main_sync_safe(^\n\n                    {\n\n                        completedBlock(transformedImage, nil, SDImageCacheTypeNone, finished);\n\n                    });\n\n\n\n\n                    if (transformedImage && finished)\n\n                    {\n\n                        NSData *dataToStore = [transformedImage isEqual:downloadedImage] ? data : nil;\n\n                        [self.imageCache storeImage:transformedImage imageData:dataToStore forKey:key toDisk:cacheOnDisk];\n\n                    }\n\n                });\n\n            }\n\n            else\n\n            {\n\n                dispatch_main_sync_safe(^\n\n                {\n\n                    completedBlock(downloadedImage, nil, SDImageCacheTypeNone, finished);\n\n                });\n\n\n\n\n                if (downloadedImage && finished)\n\n                {\n\n                    [self.imageCache storeImage:downloadedImage imageData:data forKey:key toDisk:cacheOnDisk];\n\n                }\n\n            }\n\n        }\n\n\n\n\n        if (finished)\n\n        {\n\n            @synchronized(self.runningOperations)\n\n            {\n\n                [self.runningOperations removeObject:weakOperation];\n\n            }\n\n        }\n\n    }];\n\n    operation.cancelBlock = ^{[weakSubOperation cancel];};\n\n}\n\nelse if (image)\n\n{\n\n    dispatch_main_sync_safe(^\n\n    {\n\n        completedBlock(image, nil, cacheType, YES);\n\n    });\n\n    @synchronized(self.runningOperations)\n\n    {\n\n        [self.runningOperations removeObject:weakOperation];\n\n    }\n\n}\n\nelse\n\n{\n\n    // Image not in cache and download disallowed by delegate\n\n    dispatch_main_sync_safe(^\n\n    {\n\n        completedBlock(nil, nil, SDImageCacheTypeNone, YES);\n\n    });\n\n    @synchronized(self.runningOperations)\n\n    {\n\n        [self.runningOperations removeObject:weakOperation];\n\n    }\n\n}\n\n}];\nreturn operation;\n```\n}\nbut, may be there are some problem, may be the cancle download images operation can't cancel immediately.\n. are you running the code in iPhone 5.0 simulator,if you drag to down of the list ,and fast drag to top ,repeate this action, it will happen\n. the newest code will make thread dead\n. this problem happen every time ,when i use iphone simulator 5.0\n. yeah,this problem only open in ios5\n. it will now dead thread ,but it may cause the thread for seconds, does it have a better solution.\n. ",
    "scotbond": "+1 for this issue - \nI'm having the same problem with a table of ~200 records.\niOS 5.1 on iPhone simulator and iOS 5.01 on iPhone 4S:\nUI is blocked for several seconds, then goes back to be responsive.\nNo crashes as far as I tested.\n. ",
    "twobitlabs": "@eliperkins : awesome, I found the issue using that very same gist, good stuff!\nI've also submitted a pull request for this that handles UIImageView+WebCache as well as UIButton+WebCache:\nhttps://github.com/rs/SDWebImage/pull/417\nI capture strong self inside the block that gets dispatched on the main thread instead of capturing it before the dispatch_async. The only downside of capturing self as strong before the dispatch_async is that it causes the UIImageView or UIButton to be retained as long as the block is waiting to run on the main thread.\n. This is our number one crash at the moment as well.\n. No news. The crash happens with CFRunLoopRun() is called from SDWebImageDownloaderOperation which makes it a little more difficult than most to troubleshoot. I'm not sure what the problem is but it's our top crash so on two of our projects we've rolled back to commit 9f4e6915c7625bb94041a6cfef0817aaa361c5b3 of SDWebImage since it seems to be a lot more stable.\n. Looks good, thanks!\n. Seeing this crash too in our builds. \n. ",
    "rocxteady": "You are welcome.\n. ",
    "msvmuthu": "When I try to integrate this version, it gives me webp/decode.h file not found\n. ",
    "jameswatt2008": "me,too.   #import \"webp/decode.h\"\n\n. thank you. clone your the SDWebImage project demo is ok.But  I new a project and import sdWebImage is not OK.\n\n. \n. ",
    "jackyshan": "try #include \"webp/decode.h\"\n. ",
    "arthankamal": "Add the following path in your \"User Header Search Paths\" in \"SDWebImage\" target which is in your \"Pods\" project. \n$(SRCROOT)/libwebp/src with recursive\nAlso make sure, you've added libwebp pod in your Podfile\npod 'SDWebImage/WebP'\n\n. Add the following path in your \"User Header Search Paths\" in \"SDWebImage\" target which is in your \"Pods\" project. \n$(SRCROOT)/libwebp/src with recursive\nAlso make sure, you've added libwebp pod in your Podfile\npod 'SDWebImage/WebP'\n\n. ",
    "akolov": "That's a wrong one.\n. I made a Podspec for libwebp and pushed to CocoaPods-Specs so you can depend on it directly.\n. FYI: https://github.com/CocoaPods/Specs/commit/b2c3a4be87f44e84345081011a793c232f38f9dd\n. It's a bug on Apple's side: http://www.openradar.me/14173481\n. ",
    "bluwave": "i'm also seeing this exception\nFatal Exception NSInvalidArgumentException\n-[__NSCFString postUpdatesIfNecessary]: unrecognized selector sent to instance 0x268bf070\n0    CoreFoundation  __exceptionPreprocess + 162\n1    libobjc.A.dylib     objc_exception_throw + 30\n2    CoreFoundation  __methodDescriptionForSelector\n3    CoreFoundation  ___forwarding___ + 392\n4    CoreFoundation  _CF_forwarding_prep_0 + 24\n5    CoreTelephony   ___SendInternalNotification_sync_block_invoke_0 + 32\n6    CoreFoundation  __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 14\n7    CoreFoundation  __CFRunLoopDoTimer + 274\n8    CoreFoundation  __CFRunLoopRun + 1230\n9    CoreFoundation  CFRunLoopRunSpecific + 356\n10   CoreFoundation  CFRunLoopRun + 98\nSDWebImageDownloaderOperation.m line 73\n-[SDWebImageDownloaderOperation start]\n. ",
    "fhaider-trulia": "Yep same here and quite a few of them. Any updates.\nCrashing on SDWebImageDownloaderOperation.m line 73\n-[SDWebImageDownloaderOperation start]\n. ",
    "sgladun": "@twobitlabs , hey, any news on this? Thanks\n. ",
    "cspickert": "Seeing the same issue here.\n. ",
    "akmarinov": "Same here\n. I haven't seen that log, but I also haven't been experiencing the issue with the newest version.\n. I'm experiencing the same issue only on retina iPad, where the images are big.\nThe only way to fix the issue is to restart the iPad, but then it happens again after awhile.\n. Could you perhaps submit a pull request that'll fix the issue?\n. ",
    "airdrummingfool": "Same here\n. I hit this problem as well, while scrolling quickly through a UITableView of cells that have images downloaded with SDWebImage. I haven't changed maxConcurrentDownloads or anything like that.\nHere's my stack trace: \n. I have also seen a crash on this. I'm on commit ff2b30e, and the crash occured on line 74 of SDWebImageDownloaderOperation.m. See the Crashlytics stack trace for more info.\n. ",
    "boazadato": "Long shot, but could this be related to starting an op that had been already canceled?\nDo you guys sometimes see logs like the following:\nwent isFinished=YES without being started by the queue it is in\n?\n. ",
    "ziryanov": "seeing the same issue in the latest version\n. ",
    "greg-smule": "it appears v3.5.2 has the issue\n. ",
    "ItsTipTop": "same issue in lastest version (head)\n. ",
    "cherishloveyou": "same issue in version 3.7.0\nate/Time:           2014-07-18 09:11:21.461 +0800\nOS Version:          iOS 7.1.2 (11D257)\nReport Version:      104\nException Type:  EXC_CRASH (SIGABRT)\nException Codes: 0x0000000000000000, 0x0000000000000000\nTriggered by Thread:  0\nLast Exception Backtrace:\n0   CoreFoundation                  0x2e86ff7e *exceptionPreprocess + 126\n1   libobjc.A.dylib                 0x390eacca objc_exception_throw + 34\n2   CoreFoundation                  0x2e873912 -[NSObject(NSObject) doesNotRecognizeSelector:] + 198\n3   CoreFoundation                  0x2e8721fe forwarding** + 702\n4   CoreFoundation                  0x2e7c1764 _CF_forwarding_prep_0 + 20\n5   ChangShuo                       0x0007be24 +NSData(ImageContentType) sd_contentTypeForImageData:\n6   ChangShuo                       0x0010c6e0 +UIImage(MultiFormat) sd_imageWithData:\n7   ChangShuo                       0x0016012c -SDWebImageDownloaderOperation connectionDidFinishLoading:\n8   Foundation                      0x2f1affbe 65-[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:]_block_invoke + 50\n9   Foundation                      0x2f1aff02 -[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:] + 202\n10  Foundation                      0x2f1afe1c -[NSURLConnectionInternal _withActiveConnectionAndDelegate:] + 56\n11  CFNetwork                       0x2e4d60e2 ZN27URLConnectionClientClassic26_delegate_didFinishLoadingEU13block_pointerFvvE_block_invoke + 70\n12  CFNetwork                       0x2e4d4cf2 _ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 + 50\n13  CoreFoundation                  0x2e7a38ec CFArrayApplyFunction + 32\n14  CFNetwork                       0x2e46c6b6 RunloopBlockContext::perform() + 178\n15  CFNetwork                       0x2e46c574 MultiplexerSource::perform() + 216\n16  CFNetwork                       0x2e46c408 MultiplexerSource::_perform(void) + 44\n17  CoreFoundation                  0x2e83b206 CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION + 10\n18  CoreFoundation                  0x2e83a6d6 __CFRunLoopDoSources0 + 202\n19  CoreFoundation                  0x2e838eca __CFRunLoopRun + 618\n20  CoreFoundation                  0x2e7a3eba CFRunLoopRunSpecific + 518\n21  CoreFoundation                  0x2e7e79ae CFRunLoopRun + 94\n22  ChangShuo                       0x0015dd3e -SDWebImageDownloaderOperation start\n23  Foundation                      0x2f248768 __NSOQSchedule_f + 56\n24  libdispatch.dylib               0x395d828e _dispatch_async_redirect_invoke$VARIANT$mp + 106\n25  libdispatch.dylib               0x395d9ad2 _dispatch_root_queue_drain + 218\n26  libdispatch.dylib               0x395d9d24 _dispatch_worker_thread2 + 52\n27  libsystem_pthread.dylib         0x39714bce _pthread_wqthread + 294\n28  libsystem_pthread.dylib         0x39714a94 start_wqthread + 4\nThread 0 Crashed:\n0   libsystem_kernel.dylib          0x396ad1f0 __pthread_kill + 8\n1   libsystem_pthread.dylib         0x39717792 pthread_kill + 54\n2   libsystem_c.dylib               0x3965dfd8 abort + 72\n3   libc++abi.dylib                 0x3898ccd2 abort_message + 70\n4   libc++abi.dylib                 0x389a56e0 default_terminate_handler() + 248\n5   libobjc.A.dylib                 0x390eaf62 _objc_terminate() + 190\n6   libc++abi.dylib                 0x389a31c4 std::__terminate(void (*)()) + 76\n7   libc++abi.dylib                 0x389a2d28 __cxa_rethrow + 96\n8   libobjc.A.dylib                 0x390eae12 objc_exception_rethrow + 38\n9   CoreFoundation                  0x2e7a3f30 CFRunLoopRunSpecific + 636\n10  CoreFoundation                  0x2e7a3c9e CFRunLoopRunInMode + 102\n11  GraphicsServices                0x336fd65e GSEventRunModal + 134\n12  UIKit                           0x310f0148 UIApplicationMain + 1132\n13  ChangShuo                       0x0014ca74 main (main.m:16)\n14  libdyld.dylib                   0x395f7ab4 start + 0\n. is SDWebImage will die?  there is less activity.\n. ",
    "yarmoshy": "Paste from another issue with same crash causing method:\nSDWebImageCompat.h defines a dispatch_main_sync_safe macro. I wrapped the entire [SDWebImageDownloaderOperation start] method inside this auto main thread detecting safe macro. Crashes stopped, images still load.\nCrash might be slightly different, my logs say stop calling this ( CFRunLoopRun();) on a back thread. Same method getting the blame on logs though.\n. Paste from another issue with same crash causing method:\nSDWebImageCompat.h defines a dispatch_main_sync_safe macro. I wrapped the entire [SDWebImageDownloaderOperation start] method inside this auto main thread detecting safe macro. Crashes stopped, images still load.\nCrash might be slightly different, my logs say stop calling this ( CFRunLoopRun();) on a back thread. Same method getting the blame on logs though.\n. SDWebImageCompat.h defines a dispatch_main_sync_safe macro. I wrapped the entire [SDWebImageDownloaderOperation start]  method inside this auto main thread detecting safe macro. Crashes stopped, images still load.\nEdit: Crash might be slightly different, my logs say stop calling this ( CFRunLoopRun();) on a back thread. Same method getting the blame on logs though.\n. ",
    "wufawei": "The same issue in version 3.7.1  @bpoplauschi \n. ",
    "scinfu": "+1\n. there is a pod solution ?\n. ",
    "vickieduong": "+1\nThread : Crashed: NSOperationQueue 0x14e73f90 :: NSOperation 0x14f242f0\n0  libobjc.A.dylib                0x375ee6ba objc_retain + 9\n1  HeartThis                      0x000e8ecf +UIImage(MultiFormat) sd_imageWithData:\n2  HeartThis                      0x0019b227 -SDWebImageDownloaderOperation connectionDidFinishLoading:\n3  CFNetwork                      0x29a845a1 65-[NSURLConnectionInternal withConnectionAndDelegate:onlyActive:]_block_invoke + 56\n4  CFNetwork                      0x29a8455b -[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:] + 182\n5  CFNetwork                      0x29a8464d -[NSURLConnectionInternal _withActiveConnectionAndDelegate:] + 36\n6  CFNetwork                      0x29999ceb ZN27URLConnectionClientClassic26_delegate_didFinishLoadingEU13block_pointerFvvE_block_invoke + 78\n7  CFNetwork                      0x29a35f95 _ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 + 60\n8  CFNetwork                      0x2998abed RunloopBlockContext::_invoke_block(void const, void_) + 60\n9  CoreFoundation                 0x29e3908d CFArrayApplyFunction + 36\n10 CFNetwork                      0x2998aaa7 RunloopBlockContext::perform() + 182\n11 CFNetwork                      0x2998a96d MultiplexerSource::perform() + 216\n12 CFNetwork                      0x2998a801 MultiplexerSource::_perform(void*) + 48\n13 CoreFoundation                 0x29eed58f __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION + 14\n14 CoreFoundation                 0x29eec99f __CFRunLoopDoSources0 + 218\n15 CoreFoundation                 0x29eeb005 __CFRunLoopRun + 772\n16 CoreFoundation                 0x29e39621 CFRunLoopRunSpecific + 476\n17 CoreFoundation                 0x29e8228b CFRunLoopRun + 98\n18 HeartThis                      0x00199ea3 -SDWebImageDownloaderOperation start\n19 Foundation                     0x2ac2344b __NSOQSchedule_f + 186\n20 libdispatch.dylib              0x37b3c651 _dispatch_queue_drain + 952\n21 libdispatch.dylib              0x37b3709d _dispatch_queue_invoke + 84\n22 libdispatch.dylib              0x37b3dba1 _dispatch_root_queue_drain + 320\n23 libdispatch.dylib              0x37b3ecd7 _dispatch_worker_thread3 + 94\n24 libsystem_pthread.dylib        0x37c95e31 _pthread_wqthread + 668\n.  same with 3.7.2\n1\nHeartThis - Best Outfitters Wishlist & Buy Urban Apparel Forever\nUIImage+MultiFormat.m line 20\n+[UIImage(MultiFormat) sd_imageWithData:]\n2\nHeartThis - Best Outfitters Wishlist & Buy Urban Apparel Forever\nSDWebImageDownloaderOperation.m line 368\n-[SDWebImageDownloaderOperation connectionDidFinishLoading:]\n. Fatal Exception: NSInvalidArgumentException\n-[NSPathStore2 getBytes:length:]: unrecognized selector sent to instance 0x15ee2fe0\n. no, not reproducible all the time (with all our images), though we have had 6 crashes for 6 different users at this exact line of code\n. ",
    "Serlight": "SAME issue, still on 3.7.1\n. encounter the same issue\n. ",
    "amazingmanthere": "My crash stacks on 3.5.2:\n0 CoreFoundation 0x24144e38 exceptionPreprocess\n1 libobjc.A.dylib 0x317f2c88 objc_exception_throw + 35\n2 CoreFoundation 0x2414a188 methodDescriptionForSelector\n3 CoreFoundation 0x241480a0 _forwarding\n4 CoreFoundation 0x2407a208 _CF_forwarding_prep_0 + 24\n5 Foundation 0x24e497c8 __NSFireDelayedPerform + 467\n6 CoreFoundation 0x2410b4b8 CFRUNLOOPIS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION\n7 CoreFoundation 0x2410b038 CFRunLoopDoTimer\n8 CoreFoundation 0x24109288 CFRunLoopRun\n9 CoreFoundation 0x24057620 CFRunLoopRunSpecific + 475\n10 CoreFoundation 0x240a0288 CFRunLoopRun + 95\n11 mttlite 0x014c8808 -SDWebImageDownloaderOperation start\n12 Foundation 0x24e41448 NSOQSchedulef\n13 libdispatch.dylib 0x31d5a650 dispatch_queue_drain\n14 libdispatch.dylib 0x31d55098 __dispatch_queue_invoke\n15 libdispatch.dylib 0x31d5bba0 __dispatch_root_queue_drain\n16 libdispatch.dylib 0x31d5ccd0 __dispatch_worker_thread3\n17 libsystem_pthread.dylib 0x31eb3e30 _pthread_wqthread + 667\n18 libsystem_pthread.dylib 0x31eb3b80 start_wqthread + 4\n-[SenderHelper dispatchSendTask:reportTime:]: unrecognized selector sent to instance 0x16839440\n. Same issue.\nI suspect that some gif images have many image frames so that using UIImageView to render and show these frames requires a lot of memory.\nNow my solution is that limit gif data size in method +(UIImage*)sd_imageWithData:(NSData*)data.\n+(UIImage*)sd_imageWithData:(NSData*)data\n{\n    UIImage *image;\n   if([data sd_isGIF] && data.length < GifLimitSize)\n. ",
    "elado": "Same here.\n. ",
    "ParsifalC": "can anyone reproduce this issue?\n. Paste from another issue with same crash causing method:\nSDWebImageCompat.h defines a dispatch_main_sync_safe macro. I wrapped the entire [SDWebImageDownloaderOperation start] method inside this auto main thread detecting safe macro. Crashes stopped, images still load.\nCrash might be slightly different, my logs say stop calling this ( CFRunLoopRun();) on a back thread. Same method getting the blame on logs though.\n@karsawu  @bpoplauschi what about this solution offered by @yarmoshy?\n. @harishkashyap @rromanchuk did you reproduce it? @Jur4s fix the issue by adding a dispatch_main_sync_safe for the \"start\" method. But when I code like this(it's a bad code),it didn't crash with out \"dispatch_main_sync_safe\".\n__weak typeof(self) weakSelf = self;\n    dispatch_async(queue, ^{\n        [[SDWebImageDownloader sharedDownloader] downloadImageWithURL:url options:0 progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n            NSLog(@\"receivedSize:%ld expectedSize:%ld\", (long)receivedSize, (long)expectedSize);\n        } completed:^(UIImage *image, NSData *data, NSError *error, BOOL finished) {\n            weakSelf.imageView.image = image;\n        }];\n    });\nI try to reproduce the issue,but it seemed to be difficult.\n. yep,I got that.well done.I will try it.thx.\n. I tested @Jur4s 's solution too,it didn't seem to be a perfect solution.sometimes it even can't download images.I tested on collection views too.I hope someone can fix it.waiting..I tried my best already.\n@rromanchuk  @harishkashyap \nmaybe @Jur4s had some advices?\nthis issue has taken a long time to fix,but nobody succeed.\n. ",
    "etsuyoshi": "same here\n. ",
    "cxfeng1": "same here\n. ",
    "ubhutta": "Same here\n. ",
    "cwhstcnn": "Same here\n. @bassrock It's nice that your app is accepted. I can use this library again, hahh~ \n@flovilmart what's the meaning of \"xxx that disables the UIApplication related features\"? Can you tell me something about the related features? THX a lot...\n. @flovilmart  THX,,,it really helps me a lot\n. ",
    "bill350": "Yeah same here in 3.7.2\nMy Splunk report could help :\n0   IOKit   IONotificationPortDestroy (in IOKit) + 16\n1   UIKit   -[UIDevice setBatteryMonitoringEnabled:] (in UIKit) + 328\n2   MyApp   -[DataFixture appendBaseValues] (in MyApp) + 2180\n3   MyApp   -[DataFixture init] (in MyApp) + 80\n4   MyApp   -[NetworkDataFixture init] (in MyApp) + 56\n5   MyApp   -[SplunkNSURLConnectionDataDelegateInterceptor initAndInterceptFor:withRequest:] (in MyApp) + 244\n6   MyApp   SplunkNSURLConnectionInitWithRequestDelegateStartImmediately (in MyApp) + 480\n7   MyApp   -[SDWebImageDownloaderOperation start] (in MyApp) (SDWebImageDownloaderOperation.m:89)\n8   Foundation  __NSOQSchedule_f (in Foundation) + 228\n9   libdispatch.dylib   _dispatch_client_callout (in libdispatch.dylib) + 16\n10  libdispatch.dylib   _dispatch_queue_drain (in libdispatch.dylib) + 1448\n11  libdispatch.dylib   _dispatch_queue_invoke (in libdispatch.dylib) + 132\n12  libdispatch.dylib   _dispatch_root_queue_drain (in libdispatch.dylib) + 720\n13  libdispatch.dylib   _dispatch_worker_thread3 (in libdispatch.dylib) + 108\n14  libsystem_pthread.dylib _pthread_wqthread (in libsystem_pthread.dylib) + 816\n15  libsystem_pthread.dylib start_wqthread (in libsystem_pthread.dylib) + 4\n. Wow seriously O_o, ok thanks !\n. @mythodeia Ok thanks for your this quick feedback.\nI perfectly agree about your transformDownloadedImage method, but : \n- I just want to download the image and cache it (as an original image)\n- on download completion, sometimes, I want to apply a black/white filter (because my image is \"linked\" to a data object for instance, with readed YES/NO value, like a news object)\n- Ok for your fading transformation tip, but, it will be very ugly because the image will display for few millis (because image is set automatically, again...) and will be displayed from alpha=0 to alpha=1 after. Wow'.\n  I think this code is better to do in completion for a crossdissolve/fading (but again with a set image manually):\n[UIView transitionWithView:myImageView duration:0.3 options:UIViewAnimationOptionTransitionCrossDissolve animations:^\n{\n[myImageView setImage:image];\n } completion:nil];\n- and what about other custom transformation when image is downloaded ? :-)\nSo, please think about it : \"Ok, so the developper use an image download completion block, he want to manage his image freely, so let him do what he want with the UIImage object which will pass in the block\". And that's all.\nIt's also the UIImageView+AFNetworking category philosophy and I think it's very powerful to think like this.\nI felt bad if I have to use a fork just for this option, which will not introduce regression.\nThank you.\n. @mythodeia We can rename this option to SDWebImageAvoidAutoSetImage, it will better to understand.\n. Great to hear that you are going to put this feature in 3.7.3\nWhen (approximatively) will you release this version ?\n. Done ;) https://github.com/bill350/SDWebImage/commit/4d6693c81339b452e3edb611cbbe42593d7c838a\n. Yeah you are right. I forgot to add the new feature for others categories!\nThanks!\n. ",
    "cuzv": "Same issue in 3.7.3\nCrashed: NSOperationQueue 0x17002ec80 :: NSOperation 0x170130cc0 (QOS: USER_INITIATED)\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS at 0x000000001246c978\nThread : Crashed: NSOperationQueue 0x17002ec80 :: NSOperation 0x170130cc0 (QOS: USER_INITIATED)\n0  libobjc.A.dylib                0x0000000193513bd0 objc_msgSend + 16\n1  CoreFoundation                 0x0000000181c11458 CFRelease + 524\n2  CoreText                       0x000000018274e4bc TLine::~TLine() + 192\n3  CoreFoundation                 0x0000000181c11394 CFRelease + 328\n4  UIKit                          0x0000000186ae9980 -[UILabel _invalidateLayout] + 44\n5  UIKit                          0x000000018677e5ac -[UILabel _setTextColor:] + 556\n6  UIKit                          0x0000000186b8b44c -[UIButton _updateTitleView] + 592\n7  UIKit                          0x00000001867cb880 -[UIButton layoutSubviews] + 144\n8  UIKit                          0x0000000186771760 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 580\n9  QuartzCore                     0x00000001860b9e1c -[CALayer layoutSublayers] + 152\n10 QuartzCore                     0x00000001860b4884 CA::Layer::layout_if_needed(CA::Transaction*) + 320\n11 QuartzCore                     0x00000001860b4728 CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 32\n12 QuartzCore                     0x00000001860b3ebc CA::Context::commit_transaction(CA::Transaction*) + 276\n13 QuartzCore                     0x00000001860b3c3c CA::Transaction::commit() + 528\n14 QuartzCore                     0x00000001860ad364 CA::Transaction::observer_callback(__CFRunLoopObserver*, unsigned long, void*) + 80\n15 CoreFoundation                 0x0000000181cec2a4 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 32\n16 CoreFoundation                 0x0000000181ce9230 __CFRunLoopDoObservers + 360\n17 CoreFoundation                 0x0000000181ce9610 __CFRunLoopRun + 836\n18 CoreFoundation                 0x0000000181c152d4 CFRunLoopRunSpecific + 396\n19 CoreFoundation                 0x0000000181c6735c CFRunLoopRun + 112\n20 Haioo                          0x00000001002c7280 -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:117)\n21 Foundation                     0x0000000182c1df28 __NSOQSchedule_f + 228\n22 libdispatch.dylib              0x0000000193b51954 _dispatch_client_callout + 16\n23 libdispatch.dylib              0x0000000193b5c0a4 _dispatch_queue_drain + 1448\n24 libdispatch.dylib              0x0000000193b54a5c _dispatch_queue_invoke + 132\n25 libdispatch.dylib              0x0000000193b5e318 _dispatch_root_queue_drain + 720\n26 libdispatch.dylib              0x0000000193b5fc4c _dispatch_worker_thread3 + 108\n27 libsystem_pthread.dylib        0x0000000193d3122c _pthread_wqthread + 816\n28 libsystem_pthread.dylib        0x0000000193d30ef0 start_wqthread + 4\n. ",
    "anton-plebanovich": "v3.7.2\nHere some logs:\niOS 6.1.3:\nThread : Crashed: com.apple.root.default-priority\n0  WebCore                        0x37deee68 void std::__1::__push_heap_back<WebCore::TimerHeapLessThanFunction&, WebCore::TimerHeapIterator>(WebCore::TimerHeapIterator, WebCore::TimerHeapIterator, WebCore::TimerHeapLessThanFunction&, std::__1::iterator_traits<WebCore::TimerHeapIterator>::difference_type) + 19\n1  WebCore                        0x37dafea1 WebCore::TimerBase::setNextFireTime(double) + 200\n2  WebCore                        0x37dafea1 WebCore::TimerBase::setNextFireTime(double) + 200\n3  WebCore                        0x37ef79b9 WebCore::ImageQualityController::shouldPaintAtLowQuality(WebCore::GraphicsContext*, WebCore::RenderBoxModelObject*, WebCore::Image*, void const*, WebCore::IntSize const&) + 880\n4  WebCore                        0x37e2f4bd WebCore::RenderBoxModelObject::paintFillLayerExtended(WebCore::PaintInfo const&, WebCore::Color const&, WebCore::FillLayer const*, WebCore::IntRect const&, WebCore::BackgroundBleedAvoidance, WebCore::InlineFlowBox*, WebCore::IntSize const&, WebCore::CompositeOperator, WebCore::RenderObject*) + 2880\n5  WebCore                        0x37e2e975 WebCore::RenderBox::paintFillLayers(WebCore::PaintInfo const&, WebCore::Color const&, WebCore::FillLayer const*, WebCore::IntRect const&, WebCore::BackgroundBleedAvoidance, WebCore::CompositeOperator, WebCore::RenderObject*) + 96\n6  WebCore                        0x37e2e803 WebCore::RenderBox::paintBackground(WebCore::PaintInfo const&, WebCore::IntRect const&, WebCore::BackgroundBleedAvoidance) + 238\n7  WebCore                        0x37e2db6f WebCore::RenderBox::paintBoxDecorations(WebCore::PaintInfo&, WebCore::IntPoint const&) + 298\n8  WebCore                        0x37e2c52d WebCore::RenderBlock::paintObject(WebCore::PaintInfo&, WebCore::IntPoint const&) + 60\n9  WebCore                        0x37e2d8f7 WebCore::RenderBlock::paint(WebCore::PaintInfo&, WebCore::IntPoint const&) + 170\n10 WebCore                        0x37e2b129 WebCore::RenderLayer::paintLayerContents(WebCore::RenderLayer*, WebCore::GraphicsContext*, WebCore::IntRect const&, unsigned int, WebCore::RenderObject*, WebCore::RenderRegion*, WTF::HashMap<WebCore::OverlapTestRequestClient*, WebCore::IntRect, WTF::PtrHash<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::IntRect> >*, unsigned int) + 1088\n11 WebCore                        0x37e2accb WebCore::RenderLayer::paintLayer(WebCore::RenderLayer*, WebCore::GraphicsContext*, WebCore::IntRect const&, unsigned int, WebCore::RenderObject*, WebCore::RenderRegion*, WTF::HashMap<WebCore::OverlapTestRequestClient*, WebCore::IntRect, WTF::PtrHash<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::IntRect> >*, unsigned int) + 1082\n12 WebCore                        0x37e2b557 WebCore::RenderLayer::paintLayerContents(WebCore::RenderLayer*, WebCore::GraphicsContext*, WebCore::IntRect const&, unsigned int, WebCore::RenderObject*, WebCore::RenderRegion*, WTF::HashMap<WebCore::OverlapTestRequestClient*, WebCore::IntRect, WTF::PtrHash<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::IntRect> >*, unsigned int) + 2158\n13 WebCore                        0x37e2accb WebCore::RenderLayer::paintLayer(WebCore::RenderLayer*, WebCore::GraphicsContext*, WebCore::IntRect const&, unsigned int, WebCore::RenderObject*, WebCore::RenderRegion*, WTF::HashMap<WebCore::OverlapTestRequestClient*, WebCore::IntRect, WTF::PtrHash<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::IntRect> >*, unsigned int) + 1082\n14 WebCore                        0x37e2b557 WebCore::RenderLayer::paintLayerContents(WebCore::RenderLayer*, WebCore::GraphicsContext*, WebCore::IntRect const&, unsigned int, WebCore::RenderObject*, WebCore::RenderRegion*, WTF::HashMap<WebCore::OverlapTestRequestClient*, WebCore::IntRect, WTF::PtrHash<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::OverlapTestRequestClient*>, WTF::HashTraits<WebCore::IntRect> >*, unsigned int) + 2158\n15 WebCore                        0x37f56683 WebCore::RenderLayerBacking::paintIntoLayer(WebCore::RenderLayer*, WebCore::GraphicsContext*, WebCore::IntRect const&, unsigned int, unsigned int, WebCore::RenderObject*) + 154\n16 WebCore                        0x37f564ff WebCore::RenderLayerBacking::paintContents(WebCore::GraphicsLayer const*, WebCore::GraphicsContext&, unsigned int, WebCore::IntRect const&) + 162\n17 WebCore                        0x37f56455 WebCore::GraphicsLayer::paintGraphicsLayerContents(WebCore::GraphicsContext&, WebCore::IntRect const&) + 96\n18 WebCore                        0x37f5637f __drawLayerContents_block_invoke_0 + 182\n19 WebKit                         0x386ebe87 WKCALayerEnumerateRectsBeingDrawnWithBlock + 170\n20 WebCore                        0x37f55f5f drawLayerContents(CGContext*, CALayer*, WebCore::PlatformCALayer*) + 522\n21 QuartzCore                     0x33a182ef CABackingStoreUpdate_ + 2126\n22 QuartzCore                     0x33a17915 CA::Layer::display_() + 980\n23 WebCore                        0x37f55d07 -[WebLayer display] + 54\n24 QuartzCore                     0x33a0e93b CA::Layer::display_if_needed(CA::Transaction*) + 202\n25 QuartzCore                     0x33a0e865 CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 24\n26 QuartzCore                     0x33a0e243 CA::Context::commit_transaction(CA::Transaction*) + 238\n27 QuartzCore                     0x33a0e051 CA::Transaction::commit() + 316\n28 QuartzCore                     0x33a0deb1 CA::Transaction::observer_callback(__CFRunLoopObserver*, unsigned long, void*) + 60\n29 CoreFoundation                 0x31e2d6cd __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 20\n30 CoreFoundation                 0x31e2b9c1 __CFRunLoopDoObservers + 276\n31 CoreFoundation                 0x31e2bd17 __CFRunLoopRun + 742\n32 CoreFoundation                 0x31d9eebd CFRunLoopRunSpecific + 356\n33 CoreFoundation                 0x31dfd9bb CFRunLoopRun + 98\n34 ThaiJoop                       0x003f1bc1 -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:98)\n35 Foundation                     0x3275dbe3 __block_global_6 + 102\n36 libdispatch.dylib              0x39f1511f _dispatch_call_block_and_release + 10\n37 libdispatch.dylib              0x39f23259 _dispatch_root_queue_drain + 260\n38 libdispatch.dylib              0x39f233b9 _dispatch_worker_thread2 + 84\n39 libsystem_c.dylib              0x39f49a11 _pthread_wqthread + 360\niOS 8.4.0:\nThread : Crashed: NSOperationQueue 0x170229980 :: NSOperation 0x1703045c0 (QOS: USER_INITIATED)\n0  JavaScriptCore                 0x00000001866d158c WTFCrash + 72\n1  JavaScriptCore                 0x00000001866d1584 WTFCrash + 64\n2  WebCore                        0x0000000193b3a1c8 WebRunLoopUnlock(__CFRunLoopObserver*, unsigned long, void*) + 382\n3  WebCore                        0x0000000193b3aa74 WebThreadLock + 104\n4  WebKitLegacy                   0x00000001949ca5dc -[WebView(WebPrivate) _dispatchTileDidDraw:] + 160\n5  Foundation                     0x0000000185ccc180 __NSFireDelayedPerform + 424\n6  CoreFoundation                 0x0000000184d9012c __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 28\n7  CoreFoundation                 0x0000000184d8fddc __CFRunLoopDoTimer + 888\n8  CoreFoundation                 0x0000000184d8d828 __CFRunLoopRun + 1372\n9  CoreFoundation                 0x0000000184cb92d4 CFRunLoopRunSpecific + 396\n10 CoreFoundation                 0x0000000184d0b35c CFRunLoopRun + 112\n11 ThaiJoop                       0x00000001002a11e8 -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:110)\n12 Foundation                     0x0000000185cc1f28 __NSOQSchedule_f + 228\n13 libdispatch.dylib              0x0000000197121954 _dispatch_client_callout + 16\n14 libdispatch.dylib              0x000000019712c0a4 _dispatch_queue_drain + 1448\n15 libdispatch.dylib              0x0000000197124a5c _dispatch_queue_invoke + 132\n16 libdispatch.dylib              0x000000019712e318 _dispatch_root_queue_drain + 720\n17 libdispatch.dylib              0x000000019712fc4c _dispatch_worker_thread3 + 108\n18 libsystem_pthread.dylib        0x000000019730122c _pthread_wqthread + 816\n19 libsystem_pthread.dylib        0x0000000197300ef0 start_wqthread + 4\n8.0.2\nThread : Crashed: NSOperationQueue 0x1661a660 :: NSOperation 0x166d6200\n0  JavaScriptCore                 0x27a554aa WTFCrash + 53\n1  JavaScriptCore                 0x27a55457 WTFPrintBacktrace + 130\n2  WebCore                        0x317e3ce9 _WebTryThreadLock(bool) + 204\n3  WebCore                        0x317e4465 WebThreadLock + 80\n4  WebKitLegacy                   0x322e8095 -[WebView(WebPrivate) _dispatchTileDidDraw:] + 136\n5  Foundation                     0x272aa7c9 __NSFireDelayedPerform + 468\n6  CoreFoundation                 0x2656c4bf __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 14\n7  CoreFoundation                 0x2656c03b __CFRunLoopDoTimer + 650\n8  CoreFoundation                 0x2656a28b __CFRunLoopRun + 1418\n9  CoreFoundation                 0x264b8621 CFRunLoopRunSpecific + 476\n10 CoreFoundation                 0x2650128b CFRunLoopRun + 98\n11 ThaiJoop                       0x00237ac5 -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:110)\n12 Foundation                     0x272a244b __NSOQSchedule_f + 186\n13 libdispatch.dylib              0x341bb651 _dispatch_queue_drain + 952\n14 libdispatch.dylib              0x341b609d _dispatch_queue_invoke + 84\n15 libdispatch.dylib              0x341bcba1 _dispatch_root_queue_drain + 320\n16 libdispatch.dylib              0x341bdcd7 _dispatch_worker_thread3 + 94\n17 libsystem_pthread.dylib        0x34314e31 _pthread_wqthread + 668\n18 libsystem_pthread.dylib        0x34314b84 start_wqthread + 8\n. ",
    "dan-ryan": "3.7.3:\nCrashed: NSOperationQueue 0x191572e0 :: NSOperation 0x1eaabd70 (QOS: USER_INITIATED)\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS 0x00000000fd12151f\nStacktrace (iOS 8):\njavascript\nThread : Crashed: NSOperationQueue 0x191572e0 :: NSOperation 0x1eaabd70 (QOS: USER_INITIATED)\n0  libobjc.A.dylib                0x3234ef56 objc_msgSend + 21\n1  libobjc.A.dylib                0x3235cc9b objc_object::sidetable_release_slow((anonymous namespace)::SideTable*, bool) + 114\n2  libobjc.A.dylib                0x3235cd2f objc_object::sidetable_release(bool) + 118\n3  CricHQ Next                    0x120d95f -[SDWebImageDownloaderOperation reset] (SDWebImageDownloaderOperation.m:192)\n4  CricHQ Next                    0x120ea41 -[SDWebImageDownloaderOperation connectionDidFinishLoading:] (SDWebImageDownloaderOperation.m:405)\n5  CFNetwork                      0x237df0d5 __65-[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:]_block_invoke + 56\n6  CFNetwork                      0x237df08f -[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:] + 182\n7  CFNetwork                      0x237df181 -[NSURLConnectionInternal _withActiveConnectionAndDelegate:] + 36\n8  CFNetwork                      0x23793209 ___ZN27URLConnectionClient_Classic23_delegate_cacheTrifectaEPK20_CFCachedURLResponseU13block_pointerFvvE_block_invoke + 428\n9  CFNetwork                      0x23790365 ___ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 + 60\n10 CFNetwork                      0x236e3985 RunloopBlockContext::_invoke_block(void const*, void*) + 60\n11 CoreFoundation                 0x23baec6d CFArrayApplyFunction + 36\n12 CFNetwork                      0x236e383f RunloopBlockContext::perform() + 182\n13 CFNetwork                      0x236e3705 MultiplexerSource::perform() + 216\n14 CFNetwork                      0x236e3599 MultiplexerSource::_perform(void*) + 48\n15 CoreFoundation                 0x23c64faf __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 14\n16 CoreFoundation                 0x23c643bf __CFRunLoopDoSources0 + 218\n17 CoreFoundation                 0x23c62a25 __CFRunLoopRun + 772\n18 CoreFoundation                 0x23baf201 CFRunLoopRunSpecific + 476\n19 CoreFoundation                 0x23bf7f23 CFRunLoopRun + 98\n20 CricHQ Next                    0x120d085 -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:117)\n21 Foundation                     0x249cafc7 __NSOQSchedule_f + 186\n22 libdispatch.dylib              0x328db729 _dispatch_queue_drain + 1468\n23 libdispatch.dylib              0x328d5aad _dispatch_queue_invoke + 84\n24 libdispatch.dylib              0x328dcf9f _dispatch_root_queue_drain + 394\n25 libdispatch.dylib              0x328de3c3 _dispatch_worker_thread3 + 94\n26 libsystem_pthread.dylib        0x32a3adc1 _pthread_wqthread + 668\n27 libsystem_pthread.dylib        0x32a3ab14 start_wqthread + 8\n. ",
    "jaminzzhang": "Same issue in v3.7.3:\nLast Exception Backtrace:\n0   CoreFoundation                  0x2e50fefe __exceptionPreprocess + 126\n1   libobjc.A.dylib                 0x38ca4ce2 objc_exception_throw + 34\n2   CoreFoundation                  0x2e50fdd0 +[NSException raise:format:arguments:] + 100\n3   Foundation                      0x2eebce86 -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:] + 82\n4   UIFoundation                    0x3614ae54 -[NSLayoutManager(NSPrivate) _resizeTextViewForTextContainer:] + 372\n5   UIFoundation                    0x3614ab9e -[NSLayoutManager(NSPrivate) _recalculateUsageForTextContainerAtIndex:] + 1518\n6   UIFoundation                    0x3614ac08 -[NSLayoutManager(NSPrivate) _validatedStoredUsageForTextContainerAtIndex:] + 76\n7   UIFoundation                    0x3617870c -[NSLayoutManager usedRectForTextContainer:] + 108\n8   UIKit                           0x30de4cdc -[_UITextContainerView textContainerOrigin] + 88\n9   UIFoundation                    0x36194362 -[NSTextContainer textContainerOrigin] + 158\n10  UIFoundation                    0x36176554 -[NSLayoutManager _primitiveInvalidateDisplayForGlyphRange:] + 2844\n11  UIFoundation                    0x36176b56 -[NSLayoutManager invalidateDisplayForCharacterRange:] + 434\n12  UIFoundation                    0x3614aca2 -[NSLayoutManager(NSPrivate) _invalidateDisplayIfNeeded] + 58\n13  UIFoundation                    0x3614c81e -[NSLayoutManager(NSPrivate) _rectArrayForRange:withinSelectionRange:rangeIsCharRange:singleRectOnly:fullLineRectsOnly:inTextContainer:rectCount:rangeWithinContainer:glyphsDrawOutsideLines:rectArray:rectArrayCapacity:] + 5862\n14  UIFoundation                    0x3614d4a0 -[NSLayoutManager(NSPrivate) _rectArrayForRange:withinSelectionRange:rangeIsCharRange:singleRectOnly:fullLineRectsOnly:inTextContainer:rectCount:rangeWithinContainer:glyphsDrawOutsideLines:] + 76\n15  UIFoundation                    0x3617a156 -[NSLayoutManager rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:] + 54\n16  UIKit                           0x30de28bc -[_UITextContainerView updateInsertionPointStateAndRestartTimer:] + 240\n17  UIFoundation                    0x36150d2a -[NSLayoutManager(NSPrivate) _invalidateLayoutForExtendedCharacterRange:isSoft:invalidateUsage:] + 1962\n18  UIFoundation                    0x36150d9e -[NSLayoutManager(NSPrivate) _invalidateLayoutForExtendedCharacterRange:isSoft:] + 26\n19  UIFoundation                    0x36174fa0 -[NSLayoutManager textContainerChangedGeometry:] + 320\n20  UIFoundation                    0x361945ac -[NSTextContainer setSize:] + 148\n21  UIKit                           0x30de2756 _UITextContainerViewResyncNSTextContainer + 294\n22  UIKit                           0x30de2556 -[_UITextContainerView setFrame:] + 130\n23  UIKit                           0x30de1e0c -[UITextView _resyncContainerFrameForNonAutolayout] + 324\n24  UIKit                           0x30f12c6a -[UITextView setBounds:] + 386\n25  UIKit                           0x30e34e60 -[UIView(Geometry) _applyISEngineLayoutValues] + 276\n26  UIKit                           0x30d58b0c -[UIView(Geometry) _resizeWithOldSuperviewSize:] + 160\n27  UIKit                           0x30e374b2 -[UIScrollView _resizeWithOldSuperviewSize:] + 38\n28  CoreFoundation                  0x2e45440a __53-[__NSArrayM enumerateObjectsWithOptions:usingBlock:]_block_invoke + 86\n29  CoreFoundation                  0x2e45431a -[__NSArrayM enumerateObjectsWithOptions:usingBlock:] + 194\n30  UIKit                           0x30d49786 -[UIView(Geometry) resizeSubviewsWithOldSize:] + 114\n31  UIKit                           0x30e35b00 -[UIView(AdditionalLayoutSupport) _is_layout] + 132\n32  UIKit                           0x30d3f570 -[UIView(Hierarchy) layoutSubviews] + 68\n33  UIKit                           0x30d3f300 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 376\n34  QuartzCore                      0x309bb316 -[CALayer layoutSublayers] + 138\n35  QuartzCore                      0x309b6b3a CA::Layer::layout_if_needed(CA::Transaction*) + 346\n36  UIKit                           0x30d5449c -[UIView(Hierarchy) layoutBelowIfNeeded] + 548\n37  UIKit                           0x30e76fea -[UITableViewCell setEditing:animated:] + 650\n38  AddressBookUI                   0x2db7c184 -[ABContactCell setEditing:animated:] + 72\n39  AddressBookUI                   0x2db5f3dc -[ABPropertyCell setEditing:animated:] + 72\n40  AddressBookUI                   0x2db8147c +[ABContactView preCacheEditCells] + 404\n41  Foundation                      0x2eeef112 __NSFireDelayedPerform + 410\n42  CoreFoundation                  0x2e4daf42 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 10\n43  CoreFoundation                  0x2e4dab5e __CFRunLoopDoTimer + 790\n44  CoreFoundation                  0x2e4d8ee6 __CFRunLoopRun + 1214\n45  CoreFoundation                  0x2e4437a4 CFRunLoopRunSpecific + 520\n46  CoreFoundation                  0x2e4873c6 CFRunLoopRun + 94\n47  PALifeApp                       0x00465558 -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:117)\n48  Foundation                      0x2eee7740 __NSOQSchedule_f + 56\n49  libdispatch.dylib               0x3919225a _dispatch_async_redirect_invoke + 106\n50  libdispatch.dylib               0x39193684 _dispatch_root_queue_drain + 224\n51  libdispatch.dylib               0x391938d8 _dispatch_worker_thread2 + 52\n52  libsystem_pthread.dylib         0x392bec12 _pthread_wqthread + 294\n53  libsystem_pthread.dylib         0x392bead8 start_wqthread + 4\n. Finally found that if there is a scrollview contain several image views in your app, and the Auto Layout of these image views would trigger this Crash. You can take a try to replace Auto Layout with autoresizingMask to solve this bug. I didn't know the essential causes, perhaps it's a system bug in iOS 7.\n. ",
    "SYLuffy": "Same issue in V3.7.3\n. ",
    "Aromxyz": "Same issue in V3.7.5. ",
    "lauramejiaarroyave": "Its still happening in v4.0.0. Hoping that it improves on new version.. When will be released the 4.1.0 with the fix?. ",
    "roei46": "Same her . ",
    "robertmryan": "My solution was to go back to the last commit before WebP:\ngit checkout -b BeforeWebP 1dbb79f903b44c4330a4ee17123540ad6f322ae8\n. @rs Thank you very much. That solved the \"webp/decode.h not found\" error!\n. Agreed. Or, if you absolutely need them, only include them #ifdef SD_VERBOSE or something like that. See this pull request: https://github.com/rs/SDWebImage/pull/551\n. Agreed. This logic re self.finishedCount + self.skippedCount is not correct. Either\n- Change this to just check self.finishedCount; or \n- Change finishedCount so it's incremented inside the if (image) statement (but that changes the meaning of finishedCount (from what it is now, the number of finished images, whether successful or not, to the number of only the successful images), a variable you pass to completionBlock, progressBlock and the delegate method). So the question is what did you intend for those three callbacks to use? The number of successful downloads or the number of completed requests (successful or not).\n. For reasons of sheer backward compatibility with existing code, I'd agree with you. I'll issue pull request.\n. @rs \nYou might want to rebuild the appledoc-based class framework documentation to reflect the header documentation changes.\n. Technically, in this case, it doesn't matter, because the weakSelf/strongSelf pattern isn't necessary at all in this particular scenario. But if you're going to do what this code is doing, affectionately known as the \"weakSelf/strongSelf dance\", you might as well avoid race conditions that often plague multithreaded code.\nFirst, to illustrate the recommended pattern, look at Transitioning to ARC Release Notes, there is a section called \"Use Lifetime Qualifiers to Avoid Strong Reference Cycles\", in which there is an example that says:\n\nFor non-trivial cycles, however, you should use:\n```\nMyViewController *myController = [[MyViewController alloc] init\u2026];\n// ...\nMyViewController * __weak weakMyController = myController;\nmyController.completionHandler =  ^(NSInteger result) {\n    MyViewController *strongMyController = weakMyController;\n    if (strongMyController) {\n        // ...\n        [strongMyController dismissViewControllerAnimated:YES completion:nil];\n        // ...\n    }\n    else {\n        // Probably nothing...\n    }\n};\n```\n\nNote, you assign the weak object reference to a strong variable first, and then check to see if that strong variable is non-nil.\nIf you do it the other way around (check to see if the weak variable is non-nil, and only then set the strong variable), there is a race condition, namely that it's theoretically possible for the weak variable to become nil between the time you check to see that it's non-nil, and the time you assign the strong variable. \nUsually, when you do this weakSelf/strongSelf dance, you're doing it because you want to ensure that strongSelf is not nil. So my change achieves that. It's not critical in this particular situation, but I just break out in hives anytime I see code that introduces theoretical race conditions. No offense was intended by my edit.\n. OMG, I just saw this SDWebImagePrefetcher code and while the dispatch_apply stuff was well-intended, it's a disaster. Using dispatch_apply for this purpose is completely wrong and suggests some very fundamental misunderstanding on the part of that author of that commit. The purpose of dispatch_apply is to run a loop computationally intensive synchronous tasks in parallel on multiple threads and waiting for that to finish. But these tasks are not computationally intensive, nor are the synchronous, nor should we ever wait for anything from the main thread (which is where one would likely call this prefetch routine). And then, adding insult to injury, prefetchQueue is defaulting to the main thread, which deadlocks. \nIn short, this code should not use dispatch_apply for initiating a bunch of asynchronous operations. There's no reason to do this and has many (negative) unintended consequences.\nAs @eikemeier has suggested, this should be reverted.\n. ",
    "dalexsoto": "Yes, actually it wont allow me to build without it\n. I think I have a clue @rs will fork and test, Google Maps iOS SDK used to have the same issue with WebP and they fixed it by defining 2 empty functions\nvoid WebPInitPremultiplyNEON(void) {}\nvoid WebPInitUpsamplersNEON(void) {}\n. @rs  The library will fail to compile on devices when -force_load flag is used on an application\n. Ok, fixed this issue on this pull request\nhttps://github.com/rs/SDWebImage/pull/418\nHope you can merge it or integrate the fix yourself, I've tested the fix and it works\nAlex\n. Thank a lot :) :+1:\n. ",
    "jyothireddy58": "void WebPInitPremultiplyNEON(void);\nvoid WebPInitUpsamplersNEON(void);\nvoid VP8DspInitNEON(void);\nthese 3 functions are coming dublicate\n. webP+decode.h filenot found is coming\nOn Sun, Nov 23, 2014 at 10:25 PM, kuberan notifications@github.com wrote:\n\n[image: screenshot]\nhttps://cloud.githubusercontent.com/assets/1269336/5158326/40a68882-735f-11e4-89df-a651f2239880.jpg\nI am trying to build an iOS project which used to work on iOS 7. Now on\niOS 8 I get this error when I try to build on Xcode. Will I be able to fix\nthis if I just upgrade to the latest SDWebImage ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64124803.\n. any solution for this and tableview fast scrolling the app is crashing\n\nOn Mon, Nov 24, 2014 at 9:44 AM, Reddy jyothi reddyjyothi44@gmail.com\nwrote:\n\nwebP+decode.h filenot found is coming\nOn Sun, Nov 23, 2014 at 10:25 PM, kuberan notifications@github.com\nwrote:\n\n[image: screenshot]\nhttps://cloud.githubusercontent.com/assets/1269336/5158326/40a68882-735f-11e4-89df-a651f2239880.jpg\nI am trying to build an iOS project which used to work on iOS 7. Now on\niOS 8 I get this error when I try to build on Xcode. Will I be able to fix\nthis if I just upgrade to the latest SDWebImage ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64124803.\n. Webp library is not coming onlt sdwebimage library coming\nOn 24 Nov 2014 14:53, \"Bogdan Poplauschi\" notifications@github.com wrote:\n\n@jyothireddy58 https://github.com/jyothireddy58 you should definitely\nupdate to the latest version of SDWebImage. Make sure you use CocoaPods or git\nclone --recursive git@github.com:rs/SDWebImage.git so you also get the\nwebp package that is available on a separate repository.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64168346.\n. Im using xcode 6.in this sdwebimage webp folder is not ther and one more\nthing is webp folder is notthere\nOn 24 Nov 2014 15:08, \"Reddy jyothi\" reddyjyothi44@gmail.com wrote:\nWebp library is not coming onlt sdwebimage library coming\nOn 24 Nov 2014 14:53, \"Bogdan Poplauschi\" notifications@github.com\nwrote:\n\n@jyothireddy58 https://github.com/jyothireddy58 you should definitely\nupdate to the latest version of SDWebImage. Make sure you use CocoaPods or git\nclone --recursive git@github.com:rs/SDWebImage.git so you also get the\nwebp package that is available on a separate repository.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64168346.\n. From latest sdwebimage github code im sdwebimage file drag and drob in to\nmy project.after that webp+decode.h file not found\nOn 24 Nov 2014 15:13, \"Bogdan Poplauschi\" notifications@github.com wrote:\n\nHow did you install SDWebImage?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64170324.\n. Thanku how we will use cocoaods can u explain please\nOn 24 Nov 2014 16:47, \"Bogdan Poplauschi\" notifications@github.com wrote:\nYou have 2 ways to properly install SDWebImage, as I said before. You\neither use CocoaPods or do a recursive clone using git clone --recursive\ngit@github.com:rs/SDWebImage.git. Your copy of SDWebImage does not\ninclude the libwebp dependency. Please remove it and install as I suggested.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64179700.\n. K thanku.\nOn 24 Nov 2014 17:27, \"Bogdan Poplauschi\" notifications@github.com wrote:\nYou can start with this\nhttp://guides.cocoapods.org/using/getting-started.html\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64184445.\n. How we will get webp folder\nOn 24 Nov 2014 17:35, \"Reddy jyothi\" reddyjyothi44@gmail.com wrote:\nK thanku.\nOn 24 Nov 2014 17:27, \"Bogdan Poplauschi\" notifications@github.com\nwrote:\n\nYou can start with this\nhttp://guides.cocoapods.org/using/getting-started.html\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64184445.\n. Thanku\nOn 24 Nov 2014 20:06, \"Bogdan Poplauschi\" notifications@github.com wrote:\n\nCocoaPods takes care of that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64201749.\n. tableview fast Scrolling CGImage ImagewithObjectAtindex0 is coming and the\nApp is crashing.can u tell me the reason\n\nOn Mon, Nov 24, 2014 at 8:17 PM, Reddy jyothi reddyjyothi44@gmail.com\nwrote:\n\nThanku\nOn 24 Nov 2014 20:06, \"Bogdan Poplauschi\" notifications@github.com\nwrote:\n\nCocoaPods takes care of that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64201749.\n. Webp/decode.h file not found\nOn 25 Nov 2014 12:10, \"Konstantinos K.\" notifications@github.com wrote:\n\n@jyothireddy58 https://github.com/jyothireddy58 is this crash easy to\nreplicate using the demo project?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64316827.\n. After drag and drop the sdwebimage folder folder color is coming in blue\ncolor not in yellow volor may i knw thw reason\nOn 24 Nov 2014 09:44, \"Reddy jyothi\" reddyjyothi44@gmail.com wrote:\nwebP+decode.h filenot found is coming\nOn Sun, Nov 23, 2014 at 10:25 PM, kuberan notifications@github.com\nwrote:\n\n[image: screenshot]\nhttps://cloud.githubusercontent.com/assets/1269336/5158326/40a68882-735f-11e4-89df-a651f2239880.jpg\nI am trying to build an iOS project which used to work on iOS 7. Now on\niOS 8 I get this error when I try to build on Xcode. Will I be able to fix\nthis if I just upgrade to the latest SDWebImage ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64124803.\n. Uiimage+webp.m in that webp/decode.h file not found coming\nOn 24 Nov 2014 09:44, \"Reddy jyothi\" reddyjyothi44@gmail.com wrote:\n\nwebP+decode.h filenot found is coming\nOn Sun, Nov 23, 2014 at 10:25 PM, kuberan notifications@github.com\nwrote:\n\n[image: screenshot]\nhttps://cloud.githubusercontent.com/assets/1269336/5158326/40a68882-735f-11e4-89df-a651f2239880.jpg\nI am trying to build an iOS project which used to work on iOS 7. Now on\niOS 8 I get this error when I try to build on Xcode. Will I be able to fix\nthis if I just upgrade to the latest SDWebImage ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64124803.\n. I will do and let u knw\nOn 25 Nov 2014 15:08, \"Konstantinos K.\" notifications@github.com wrote:\n\n@jyothireddy58 https://github.com/jyothireddy58 when you drag & drop a\nfolder you should tick the 'Copy items if needed' checkbox.\nThis will copy the files in your project. What you did was create\nreferences to the location you copied them from.\nFirst remove all files for SDWebImage from your current project.\nopen terminal in your desktop or whichever location suits you and paste\nthis:\ngit clone --recursive git@github.com:rs/SDWebImage.git\nwhen its done:\n- open the folder you downloaded and drag & drop the 'SDWebImage'\n  folder in your project\n- then open the Vendors folder and drag & drop the 'libwebp' folder in\n  your project. Clean & rebuild your project That should do it\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64332239.\n. Libwebp folder empty is coming\nOn 25 Nov 2014 15:11, \"Reddy jyothi\" reddyjyothi44@gmail.com wrote:\nI will do and let u knw\nOn 25 Nov 2014 15:08, \"Konstantinos K.\" notifications@github.com wrote:\n\n@jyothireddy58 https://github.com/jyothireddy58 when you drag & drop a\nfolder you should tick the 'Copy items if needed' checkbox.\nThis will copy the files in your project. What you did was create\nreferences to the location you copied them from.\nFirst remove all files for SDWebImage from your current project.\nopen terminal in your desktop or whichever location suits you and paste\nthis:\ngit clone --recursive git@github.com:rs/SDWebImage.git\nwhen its done:\n- open the folder you downloaded and drag & drop the 'SDWebImage'\n  folder in your project\n- then open the Vendors folder and drag & drop the 'libwebp' folder\n  in your project. Clean & rebuild your project That should do it\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64332239.\n. still im not getting the libwebp in vendors folder\n. After importing everything dublicate symbol _webpinitupsamplersNEON in\niscoming\nOn 25 Nov 2014 18:31, \"Konstantinos K.\" notifications@github.com wrote:\n\n@jyothireddy58 https://github.com/jyothireddy58\nare you following the steps as per my post? are you cloning the repository\nrecursively in terminal?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64395950.\n. Linker error is coming\nOn 26 Nov 2014 12:09, reddyjyothi44@gmail.com wrote:\nAfter importing everything dublicate symbol _webpinitupsamplersNEON in\niscoming\nOn 25 Nov 2014 18:31, \"Konstantinos K.\" notifications@github.com wrote:\n\n@jyothireddy58 https://github.com/jyothireddy58\nare you following the steps as per my post? are you cloning the\nrepository recursively in terminal?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-64395950.\n. \n\n",
    "kaandedeoglu": "I'm getting the same crash; sometimes with NSCFArray and sometimes NSCFString. Anyone?\n. Same here.\n. ",
    "zmzhuai": "I'm getting the same crash too. Is there a resolution? It looks like a Memory Leak.\n. ",
    "winwys": "I'm getting the same crash too.\n. ",
    "taichino": "Seeing similar crash with 3.4 and current HEAD of master.\nThe stack trace in crash log is followings.\n0    libsystem_platform.dylib    _platform_memmove$VARIANT$CortexA9 + 52\n1    Foundation  -[NSConcreteMutableData appendBytes:length:] + 386\n2    Foundation  -[NSConcreteMutableData appendBytes:length:] + 386\n3    Foundation  -[NSData(NSData) enumerateByteRangesUsingBlock:] + 64\n4    Foundation  -[NSConcreteMutableData appendData:] + 82\n5    MyApp  SDWebImageDownloaderOperation.m line 179 -[SDWebImageDownloaderOperation connection:didReceiveData:]\n6    Foundation  65-[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:]_block_invoke + 54\n7    Foundation  -[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:] + 206\n8    Foundation  -[NSURLConnectionInternal _withActiveConnectionAndDelegate:] + 60\n9    Foundation  _NSURLConnectionDidReceiveData + 80\n10   CFNetwork   ZN27URLConnectionClientClassic29_delegate_didReceiveDataArrayEv_block_invoke + 168\n11   CFNetwork   _ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 + 54\n12   CFNetwork   ZNK17CoreSchedulingSet13performAsyncEPKcU13block_pointerFvvE_block_invoke + 18\n13   CoreFoundation  CFArrayApplyFunction + 36\n14   CFNetwork   RunloopBlockContext::perform() + 164\n15   CFNetwork   MultiplexerSource::perform() + 220\n16   CFNetwork   MultiplexerSource::_perform(void*) + 48\n17 ...   CoreFoundation  CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION + 14\n21   CoreFoundation  CFRunLoopRunInMode + 106\n22   MyApp  SDWebImageDownloaderOperation.m line 76 -[SDWebImageDownloaderOperation start]\n23 ...   Foundation  __NSOQSchedule_f + 60\n27   libsystem_pthread.dylib     _pthread_wqthread + 298\n. @bpoplauschi @rs Could you explain a little more? I think this kind of check has to be done either way. I don't see the point why all users need to write same code. Do you really think this is users responsibility?\nI understand your concern but the completion block still gets called with an error. Incomplete operations won't happen with this change.\n. @bpoplauschi Thanks for your reply! That's fair enough. Do you want another PR with UIButton's change? \nAnd can I ask about when you are going to release next major version? it would be very helpful.\n. ",
    "rnselv1": "I'm seeing the exact crash with the latest build.\nCrashes at line 263:\n    -     self.progressBlock(self.imageData.length, self.expectedSize); \n[NSConcreteMutableData length]: message sent to deallocated instance 0x25630e50\n_imageData  NSMutableData * nil 0x00000000\n_connection NSURLConnection *   nil 0x00000000\n_expectedSize   long long   25618   25618\nself    SDWebImageDownloaderOperation * 0x255f4160  0x255f4160\nNSOperation NSOperation\nwidth   size_t  0   0\nheight  size_t  0   0\nresponseFromCached  BOOL    YES '\\x01'\n_executing  BOOL    NO  '\\0'\n_finished   BOOL    YES '\\x01'\n_request    NSMutableURLRequest *   0x255f4060  0x255f4060\n_options    SDWebImageDownloaderOptions 0   0\n_progressBlock  SDWebImageDownloaderProgressBlock       0x00000000\n_completedBlock SDWebImageDownloaderCompletedBlock      0x00000000\n_cancelBlock    __block_literal_generic *   NULL    0x00000000\n_imageData  NSMutableData * nil 0x00000000\n_connection NSURLConnection *   nil 0x00000000\n_expectedSize   long long   25618   25618\n. imageData is nil both crashes. Can a nil handling for imageData be added in the next update?\nCrashes at line 187:\n- [self.imageData appendData:data];\n[NSConcreteMutableData appendData:]: message sent to deallocated instance 0x221d8b00\n_imageData  NSMutableData * nil 0x00000000\n_connection NSURLConnection *   nil 0x00000000\n_expectedSize   long long   42737   42737\nconnection  NSURLConnection *   @\"0 objects\"    0x2200d0a0\ndata    __NSCFData *    1448 bytes  0x21643200\nself    SDWebImageDownloaderOperation * 0x22181610  0x22181610\nNSOperation NSOperation\nNSObject    NSObject\nisa Class   SDWebImageDownloaderOperation   0x001a6a0c\n_private    __NSOperationInternal * 0x22181650  0x22181650\n[0] id\n_private1   int32_t 0   0\nwidth   size_t  0   0\nheight  size_t  0   0\nresponseFromCached  BOOL    YES '\\x01'\n_executing  BOOL    NO  '\\0'\n_finished   BOOL    YES '\\x01'\n_request    NSMutableURLRequest *   0x22180f40  0x22180f40\n_options    SDWebImageDownloaderOptions 0   0\n_progressBlock  SDWebImageDownloaderProgressBlock       0x00000000\n_completedBlock SDWebImageDownloaderCompletedBlock      0x00000000\n_cancelBlock    __block_literal_generic *   NULL    0x00000000\n_imageData  NSMutableData * nil 0x00000000\n_connection NSURLConnection *   nil 0x00000000\n_expectedSize   long long   42737   42737\nconnection  NSURLConnection *   @\"0 objects\"    0x2200d0a0\ndata    __NSCFData *    1448 bytes  0x21643200\n. ",
    "linyize": "I've got same crash too.\nException Type:  SIGABRT\nException Codes: #0 at 0x383151fc\nCrashed Thread:  7\nApplication Specific Information:\n* Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[NSMallocBlock** length]: unrecognized selector sent to instance 0x14d65f40'\nApplication Specific Backtrace 1:\n0   CoreFoundation                      0x2d915f4b  + 130\n1   libobjc.A.dylib                     0x37d566af _objc_exception_throw + 38\n2   CoreFoundation                      0x2d9198e7 -[NSObject doesNotRecognizeSelector:] + 202\n3   CoreFoundation                      0x2d9181cb  + 706\n4   CoreFoundation                      0x2d8674d8 __CF_forwarding_prep_0 + 24\n5   iMW                                 0x004b7e2d -[SDWebImageDownloaderOperation connection:didReceiveData:] + 2116\n. Probably solved by pull request #580   \"Fix race condition in image download cancellation\"\n. Good\n. ",
    "erikcharlebois": "If you cancel operations, these issues are very likely caused by the race conditions explained/fixed in #580.\n. This very likely fixes some the #420 problems as well.\n. ",
    "jessicamoore112": "I updated the code to ensure its on the main thread when i assign the image to my view but it didn't work\n- (void) downloadThumbnails:(NSURL )finalUrl\n  {\n  SDWebImageManager manager = [SDWebImageManager sharedManager];\n  [manager downloadWithURL:finalUrl\n                   options:0\n                  progress:nil\n                 completed:^(UIImage image, NSError error, SDImageCacheType cacheType, BOOL finished)\n   {\n```\n   if (image)\n   {\n   dispatch_async(dispatch_get_main_queue(), ^{\n\n       [self setThumbnail:image];\n       [[NSNotificationCenter defaultCenter] postNotificationName:@\"DataSaved\" object:nil];\n\n   });\n\n}\n  ```\n}];\n  }\nAnything else i am doing wrong? or any other solution?\n. ",
    "chinaxuyujian": "i found the same problem as hsol,anybody can help?\n. ",
    "leejunkit": "I'm getting this issue as well. App eventually freezes when scrolling up and down UITableView rapidly. Each cell has one or two UIImageViews that are asynchronously downloading images via SDWebImage. App freezes with about 70+ threads created, the majority of them freezing on [SDWebImageDownloaderOperation start]. \nThe crash report is extracted as a gist at https://gist.github.com/leejunkit/5931460\nI can't seem to reproduce the issue while testing on iOS 6 on an iPhone 5. But probably that is because that phone is more powerful.\n. ",
    "livyathan": "This problem it's a little hard to reproduce, but it's happening on iOS 5 (5.1.1, iPod Touch 4G) and somehow it's related to the \"cancelCurrentImageLoad\" method. The problem starts to happen when I have a list of around 400 elements.\nI'm using AQGridView to display a grid with thumbnails, and each time a cell is reused I'm creating a new UIImageView:\nobj-c\n    if (image) {\n        [image cancelCurrentImageLoad];\n        [image removeFromSuperview];\n        image = nil;\n    }\nimage = [[UIImageView alloc]...\n.\n.\n [image setImageWithURL:finalUrl...\n(I know that I should reuse, just let me be)\nIf I remove the call to \"cancelCurrentImageLoad\", then it will work normally, but a download will never be canceled.\nI tested the same code on iOS6 (iOS 6.1.3, iPhone 4S), and it seems to be working fine. I also tried to find memory leaks using Instruments, but I couldn't find anything.\n. I'm having a similar issue. I get this error messages:\n: CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 16 bits/pixel; 1-component color space; kCGImageAlphaPremultipliedFirst; 224 bytes/row.\nJul 16 10:41:06 livyathans-iPhone SDWebImage Demo[483] : CGContextDrawImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\nJul 16 10:41:06 livyathans-iPhone SDWebImage Demo[483] : CGBitmapContextCreateImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\nIt appears than when this error is triggered, the image isn't displayed. I tried to isolate the problem by using the Demo example, and I think I found something. I can consistently reproduce this error with images with \"Color space: Gray\".\nHere are 3 examples you can use:\nhttps://danbooru.donmai.us/data/preview/1a3183f5ee226e8af06d8faf0244e079.jpg\nhttps://danbooru.donmai.us/data/preview/d3f8f9d294678bba6d91e89a3bdd054f.jpg\nhttps://danbooru.donmai.us/data/preview/f18c863d7024277b054a1f05c60bb3ba.jpg\nLet me know if you need more examples.\nEdit: I forgot to mention, I'm working with an iPhone 6, iOS 8.4, Xcode 6.4, iOS SDK 8.4 and target iOS 8.0\n. I tried the solution, and it works, but only for those types of images, the normal images (with color space RGB) now throw a similar error, even the images from the demo will throw an error.\nI didn't noticed this error until I updated the library with the latest version today, I was using a 2-3 month old version, so I related the problem to the library, and not the sources of the images. I don't know much about this, but if you say that these images cannot be decoded, at least consider adding a validation.\nI hope you can find a better solution. Thank you.\n. @mythodeia I just tried the code on the demo app and it seems to be working fine, I can see every image without errors. I'm using a mixture of RGB and Gray images at the same time.\nI can test the code on my app but that will take a little longer, I'll try to report back tomorrow.\n. @mythodeia I tested the changes on my app today and it's working great, I cannot reproduce the error anymore. I hope you can add the changes to the main branch\nAgain, thank you for the help.\n. I'm also having the same issue (Xcode 7.1.1, SDK iOS 9.1, iPhone 6). I didn't really understood everything explained on this issue, so I cannot offer assistance.\nInitially I was using the shared Prefetcher, but after encountering this problem I decided to use a new instance. I'm using this code on the viewDidLoad:\nself.prefetcher = [[SDWebImagePrefetcher alloc] init];\n [self.prefetcher setPrefetcherQueue: dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0)];\nself.prefetcher.options = SDWebImageContinueInBackground;\nI also call to cancelPrefetching on the dealloc. This is also helpful since I need to be able to cancel the requests created on the current screen without affecting the request created by the previous screen.\nThis seems to be working fine, but is this correct? I mean as a temporally workaround, or is there a chance this will hang randomly? Is it recommended to not use the prefetcher for now?\n. There still a problem here, it looks like it will only prefetch the same amount of images defined by maxConcurrentDownloads:\nfor (NSUInteger i = 0; i < self.maxConcurrentDownloads && self.requestedCount < listCount; i++) {\n            [self startPrefetchingAtIndex:i];\n        }\nThis part makes sense, but the method startPrefetchingAtIndex never triggers the download of the next image, and it doesn't look like it's being called from somewhere else, so the rest of the array is being ignored. \n. It was wrong on my side to report this here, this is a new error, but somebody already reported it on issue #1425, and duplicated on #1426 .\n. ",
    "jisungna": "ah man; i had hit this exact problem last night, spent a night investigating it, and i know exactly what caused mine. mine also had main thread stuck at queryDiskCacheForKey:done: waiting on dispatch_barrier_sync(self.barrierQueue) as well; and i also had ~70 other threads. \nbtw, my copy of sdwebimage is 3-4 month old i think; so this might not repro in the latest build but i still wanted to investigate what was causing the deadlock w/ that build... so this is just for sake of anyone's interest than anything...\nat first, i was obviously looking for cycles between locks (after all, this was a deadlock) main thread was holding locks to both ioQueue (well, it's actually owned by another thread that did dispatch_sync(main_thread) inside ioQueue) and main thread itself and that main thread was seemingly blocked on barrierQueue so i thought any of other ~70 threads must be already holding the lock to barrierQueue but blocked on either the main thread (via dispatch_sync(main) or ioQueue - thus creating a cycle. \nbut no matter how hard i looked, there was no other thread that was being run under the barrierQueue - i literally walked through the individual stacks of 70 threads because i truly believed there must be another thread that is already holding the lock to barrierQueue that was blocked on doing either dispatch_sync(main) or dispatch_sync(ioqueue) - but there was seriously none; so why was main thread got blocked on dispatch_barrier_sync(barrierQueue)?\nthen, i eventually found out that -  GCD has a hard limit on # of threads it can create - this limit is 64 (or something similar) - everyone who above states they were seeing ~ 70 threads when hang occurred - myself included. \nbasically, main thread was blocked on trying to create a new thread to run barrierQueue, but because the limit was already reached, it needed to wait for # of threads to go down below the limit. However, all the other threads were either blocked on main_thread (so they could not proceed until main thread DID create a new thread) or barrierQueue themselves (so they too also needed to create that same thread - but could not for the same reason); so none of the threads could proceed and exit - # of threads wouldn't go down below the limit - main can't create a new thread and do dispatch_sync on it - and thus a deadlock was created :(\nnow, the reason for having ~70 non-main threads blocking on main_thread or barrierQueue in the first place; all of those threads were sdwebimagedownloader like everyone elses' and majority of them were executing NSURLConnection's connection:didFail delegate... and that was because i cancelled whole bunch of them at the same time (others also mentioned they were hitting this primarily when they were able to cancel downloadOperations - hsoi's \"fix\" seemed to fix their problem because you couldn't really cancel anymore); and when whole bunch of them got cancelled at the same time, bunch of their connection failure delegates got called at the same time and all of those threads suddenly got blocked waiting on dispatch_sync(main) line (it would've been fine if some of them were still executing the connection or doing something else) - while taking big chunk of allocations of GCD thread limit; and now main thread is doing its thing on queryDiskCacheForKey:done: and then... yeah; it gets blocked trying to create a new thread for barrierQueue because there's already too many threads created;\nas for the fix, i wasn't supposed to even have ~70 threads running download operations so my first fix was that (this was within my project - i thought i wasn't but i found a way this could happen especially during bulk cancellation); also, if main thread doesn't run queryDiskCacheForKey:done: itself, that would also be a fix since other threads that were blocked on main thread could have exited to make a space (i don't know if main still runs that method in the latest build)...\n. ",
    "agiokas": "I have the same issue here. When I use SDWebImageRefreshCached in my project I get crashes in SDWebImageDownloaderOperation.start  .. CFRunLoopRun()\niOS7 iPad Air.\n. ",
    "ndethore": "@agiokas had the same issue a while ago ... are you using the image you downloaded from downloadImageWithURL:options:progress:completed:'s completed block ? If so, make sure you dispatch to the main queue before using using the image ;)\nMore infos : https://github.com/rs/SDWebImage/issues/845\n. ",
    "sakshijoshi": "solution for getting stuck tableview while scrolling .If you are using image from url then use it\n[cell.imgView setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@\"%@\",[dict objectForKey:@\"profile_pic\"]]] placeholderImage:[UIImage imageNamed:@\"profile.png\"]];. ",
    "surkis": "I think this issue fixed your problem https://github.com/rs/SDWebImage/issues/427\nBut on download page need changes from 'SDWebImage-3.3.framework' to 'SDWebImage.framework'.\n. ",
    "joris416": "I have the same problem, and I think is causes this: #437. Do you know how to solve this?\n. ",
    "skrul": "Oops, turns out I was missing the -ObjC linker flag.  Nothing to see here :)\n. ",
    "TechbirdsYogendra": "I have the Same Problem.\n. ",
    "kolyuchiy": "https://github.com/rs/SDWebImage/pull/683 may be related.\n. ",
    "orta": "If you wrap your code in ``` you'll get much easier to read code in this comment ^\n. @waterclock - yeah it's working, I've been using it extensively on https://github.com/artsy/emergence - not looked too deep into the file image cache bits though\n. Though the GM is giving me this error on the tv:\n2015-10-22 09:25:23.842 Artsy Shows[173:6744] [/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreUI/CoreUI-370.8/Bom/Storage/BOMStorage.c:517] <memory> is not a BOMStorage file\n. To quote an apple employee: \n\nThanks for the build log, this is a harmless message that can be ignored.\n. Right now for CocoaPods support you'd need to use my gem to allow using a Pod on any platform. You're probably better off adding tvos to the podspec so it works for everyone.\n. ( @dWoeckel CocoaPods does git references, e.g. pod 'AFNetworking', :git => 'https://github.com/gowalla/AFNetworking.git', :commit => '082f8319af'  )\n. Thanks @bpoplauschi - I bet I could build this on top of one of these #1069 \n. Cool, that's even better ( I just figured that #1069 was closer to being merged )\n. No worries, I'm not trying to put pressure on you at all :+1: - you run one of the most popular libs, you can run it how you like\n. hah - yeah, it's not turn the ship around kind of thing, but it's I'll take this into account on upcoming artsy/eigen priorities  \ud83d\udc4d \n. Congrats!\n. \n",
    "KatekovAnton": "Hello. Main goal is to cache images using e-tag parameter. SDWebImageManagerCacheDelegate allows you to write your implementation of storing e-tag for cached images. Also it should allows you to make a decision of caching using e-tag for each image individually. \nFor example my client application have images: \n-avatars for my users(png images on remote server),\n-images for my products \n-ean13 barcode(png image which was generated by some service only using barcode number). \nAll I know about avatars - is that application should allways check actual version of this kind of image and, if the new one has been spotted, I should remove old one and download a new one. shouldTrackUpdationForUrl will check url, for example if([url rangeOfString:@\"avatars/\"].range != 0){return YES;} ->should allways track\nAfter it, all i know about my products - is that we will update our images only once a week. So i can implement this logic in  shouldTrackUpdationForUrl: else if([url rangeOfString:@\"products/\"].range != 0) {implement my logic with current date and date of last etag checking}\nAnd, finally, all i know about barcode - is that this image will newer changed, so shouldTrackUpdationForUrl for this case will looks like this: else if([url rangeOfString:@\"barcode\"].range != 0) {return NO;}\nSo, if image should be checked by e-tag, SDWebImageManager runs HEAD request to obtain actual e-tag. If it is same - returns image from cache, if not - download new one.\nIf you think that this functionality is good, i will find time to rebase on top of master. \nSincerely yours,\nKatekov Anton\n. Hello. Thank you for the feedback.\nYou know I remember time when I created it and I think I was a different person lol, so long time ago!. ",
    "Deanzou": "Mark~\n. the link to download webp:http://code.google.com/p/webp/downloads/detail?name=libwebp-0.3.1.tar.gz&can=2&q=\n. ",
    "limboy": "Please merge, it's ugly to add SD_WEBP=1 in Preprocessor Macros\n. ",
    "lukegeiger": "Any idea on where to download libwebp? Also agree that it would be nice to have an out of the box working example...\n. @MaciejGad Cool. Thanks for the heads up.\n. ",
    "MaciejGad": "@lukejgeger I've cloned from repo http://git.chromium.org/webm/libwebp.git \n    git clone http://git.chromium.org/webm/libwebp.git\n. ",
    "shifu": "It's setup as submodules.  You can clone with submodules to make it work out of the box.\n. dup of #447 \n. ",
    "pkishino": "actually the submodule doesnt seem to be working properly as I did clone it and the files still didnt get added.. so right now cloning this and trying to run will not build..\n. no luck so far, it tries to fetch it but keeps saying up to date\n. finally using pods it seems to work\n. ",
    "pinkcity699": "in terminal type this one. \ngit clone --recursive git@github.com:rs/SDWebImage.git\n. ",
    "shiqiang124": "git submodule update --init --recursive ,then  Cloning into 'Vendors/libwebp'..., but waiting waiting ,and not down.\n. ",
    "sekmo": "git clone --recursive https://github.com/rs/SDWebImage.git\nworked for me\n. Thanks for your support... It was exactly what I'm looking for, but I'm a little lost...\nThere is a method that takes an URL (NSURL or String) and outputs an UIImage, retrieving from cache if it's cached, or otherwise downloading and caching it?\n. ",
    "pathfinder1989": "@bpoplauschi  when pod install  error:\nInstalling libwebp (0.5.0)\n[!] Error installing libwebp\n[!] /usr/bin/git clone https://chromium.googlesource.com/webm/libwebp /var/folders/0c/rt1dny3d64qfrncb1yq22_rc0000gn/T/d20161103-3177-11xvrzp --template= --single-branch --depth 1 --branch v0.5.0\nCloning into '/var/folders/0c/rt1dny3d64qfrncb1yq22_rc0000gn/T/d20161103-3177-11xvrzp'...\nfatal: unable to access 'https://chromium.googlesource.com/webm/libwebp/': Failed to connect to chromium.googlesource.com port 443: Operation timed out\n. i have the error :\nInstalling OpenUDID (1.0.0)\nInstalling SDWebImage (3.8.2)\nInstalling libwebp (0.5.0)\n[!] Error installing libwebp\n[!] /usr/bin/git clone https://chromium.googlesource.com/webm/libwebp /var/folders/0c/rt1dny3d64qfrncb1yq22_rc0000gn/T/d20161103-3177-11xvrzp --template= --single-branch --depth 1 --branch v0.5.0\nCloning into '/var/folders/0c/rt1dny3d64qfrncb1yq22_rc0000gn/T/d20161103-3177-11xvrzp'...\nfatal: unable to access 'https://chromium.googlesource.com/webm/libwebp/': Failed to connect to chromium.googlesource.com port 443: Operation timed out\n. ",
    "buvtopcc": "cd SDWebImage/SDWebImage Dir and run 'git submodule update --init --recursive', It's correctly clone  libwebp and worked for me.. ",
    "MrNickBarker": "Remove it from \"Link Binary With Libraries\" in the \"Build Phases\" panel.\n. ",
    "tommi-lew": "I fixed the problem by renaming the folder from SDWebImage-3.3.framework to SDWebImage.framework after unzipping, then continue to follow the instructions to install the framework.\n. ",
    "leszarna": "http://stackoverflow.com/questions/14721235/two-categories-on-the-same-class-with-the-same-method-name\n. ",
    "alexburkhay": "all developers use cocoapods.. remove from project when its in pods or use custom podspec are not the best solutions for this problem. SDWebImage should rename their methods into something like setWebImageWithURL ..i do this in some of my projects ((\n. ",
    "tzq582905": "thanks, this problem does not happen.\n. ",
    "yunmingzhang17": "How did you build the project?\nI got the same error message when I first downloaded as zip file and then used git to install the vendors/libWeb directory. \nI fixed it by just abandoning the whole download zip file approach and just use git clone on desktop, it worked out of the box\n. ",
    "mattgalloway": "You need to use one of the methods with an \"options\" parameter and specify SDWebImageRetryFailed like so...\n[cell.imageView setImageWithURL:thumbnailURL\nplaceholderImage:[UIImage imageNamed:@\"placeholder.png\"]\noptions:SDWebImageRetryFailed\ncompleted:^(UIImage image, NSError error, SDImageCacheType cacheType) {...}];\n-M.\n. ",
    "wlindner": "Great, thank you\n. ",
    "AaoIi": "it worked for me too :)\n. ",
    "xcxcxc": "iOS 6 have the same problem.\nCFRunLoopRunInMode(kCFRunLoopDefaultMode, 10, false);   exc_bad_access\n. ",
    "shiwensong": "I have some questions you want to ask, I used to set the value SDWebImage UIImageView, but this time APP crash, crash CFRunLoopRun (); I printed out the image links, image links is wrong, no pictures. If the URL is not a formal link, it will not crash it! Great God enlighten request.\n. Consult this information:  bool _WebTryThreadLock(bool), 0x16149910: Tried to obtain the web lock from a thread other than the main thread or the web thread. This may be a result of calling to UIKit from a secondary thread. Crashing now...\n. ",
    "gph1991": "What has happened \uff1f\n. ",
    "steewsc": "I have the same problem as @shiwensong (happens on iPhone 6s). \nAny fix/workaround?\nThanks\n. ",
    "kirualex": "seems OK for 3.4.\n. The culprit seems to be : \nself.cancelBlock = nil; line 271 of SDWebImageCombinedOperation\nIt happens only sporadically so I'll have to find a way to make it happen again so I get the stack trace.\n. This is the best I get :\n\nMy last logs being : \n[SDWebImageCombinedOperation setCancelBlock:]: message sent to deallocated instance 0xc5a9c10\nZombies don't help much as well as trying to go forward :/\n. I managed to get a raw crash log, SDWebImagePrefetcher seems definitely at fault. I'll dig into this.\n__\nApplication Specific Information:\nobjc_msgSend() selector name: setCancelBlock:\nThread 0 Crashed:\n0   libobjc.A.dylib                      0x389ac626 objc_msgSend + 6\n1   CoreFoundation                       0x2e177a55 -[NSArray makeObjectsPerformSelector:] + 178\n2   winkli                               0x00154699 -SDWebImageManager cancelAll\n3   winkli                               0x00155613 -SDWebImagePrefetcher cancelPrefetching\n4   winkli                               0x00155495 -SDWebImagePrefetcher prefetchURLs:progress:completed:\n5   winkli                               0x00155459 -SDWebImagePrefetcher prefetchURLs:\n6   winkli                               0x00087a81 -Event parseEventParticipants:\n7   winkli                               0x0007f6c3 +FQLRequest parseQueryForEvent:withResponse:\n8   winkli                               0x0007f335 54+[FQLRequest friendsOfFriendsForEvent:withCompletion:]_block_invoke (FQLRequest.m:299)\n9   winkli                               0x000dc975 __51-[FBRequestConnection completeWithResults:orError:]_block_invoke602 (FBRequestConnection.m:1283)\n10  winkli                               0x000eb845 __39-[FBTask dependentTaskWithBlock:queue:]_block_invoke_2 (FBTask.m:254)\n11  libdispatch.dylib                    0x38e8bd53 _dispatch_call_block_and_release + 8\n12  libdispatch.dylib                    0x38e8bd3f _dispatch_client_callout + 20\n13  libdispatch.dylib                    0x38e8e6c3 _dispatch_main_queue_callback_4CF + 276\n14  CoreFoundation                       0x2e1d2641 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE + 6\n15  CoreFoundation                       0x2e1d0f0d __CFRunLoopRun + 1306\n16  CoreFoundation                       0x2e13b729 CFRunLoopRunSpecific + 522\n17  CoreFoundation                       0x2e13b50b CFRunLoopRunInMode + 104\n18  GraphicsServices                     0x330aa6d3 GSEventRunModal + 136\n19  UIKit                                0x30a9c871 UIApplicationMain + 1134\n20  winkli                               0x00086477 main (main.m:16)\n21  libdyld.dylib                        0x38ea0ab7 start + 0\n. Same problem.\n- (void)cancelAll in SDWebImageManager seems to be the issue, when called from - (void)cancelPrefetching in SDWebImagePrefetcher.\nDigging.\n. This seems to do the trick for me, but I will have a definitive answer next week after more intensive testing.\n. Well the fix did improve things but the issue still arise :/ I'm pulling directly from the git repo though.\n. Thanks\n. ",
    "kevincador": "We'll updating our app with the latest version (master) of SDWebImage asap since that crash got reported 20 times in the last 2 weeks.\n. ",
    "MaximillionMai": "This bug still repros.  We should call \"copy\" inside the \"dispatch_sync\" block.  I will send a PR. \n. actually, this is already fixed in 3.7.2 in the inlined code instead of callbacksForURL: function.\n. This was fixed in the last release, which I did not pick up yet. Closing\n. @rs Please take a look at this.\nAn alternative way to fix this is to call the success block from the download function in the next run loop, which might avoid future issues like this.\n. @akhenakh @matej @rs Please take a look at this.  There are way too many outstanding pull requests in this project right now.\n. @matej the recursion is definitely a problem.  I am using the prefetcher to pre-fetch like 200 images, and that makes the call stack way too deep for the device.  It crashed on every phone without my fix. \n. @rs I merged with your latest master.  Please take a look again.  I am not sure if that Vendors/libwebp is needed.  It was changed by SourceTree, I think.  If you don't want that, I will revert that change.\n. @matej the pre-fetcther code downloads one image at a time.  What do you expect to be in the while loop?  Do you want it to be a while loop in background thread?  What happens when the prefetcher needs to add new URLs?  Adding URL to the pre-fetcher is called on main thread, but downloader is donwloading on background and supposedly (I did not check code) decode in background right?  pre-fetcher uses downloader.\n. @matej I don't mind if prefetcher downloads say multiple images (say 3 images) at a time.  I think the current design don't want to download too many at a time so it won't slow down the higher pri downloads.\n. @rs merge please.\n. @rs What are you talking about?  This is all inside prefetcher in SDWebImage.  \"the callback\" is the SDWebImagePrefetcher. If it does not want to be using main runloop, it should all be changed here.\nLook, try prefetching 200 images on the phone and SDWebImagePrefetcher will crash due to out of stack.  That's what I am trying to fix here.  I sent an earlier pull request back in December, and it was ignored multiple times.\n. @bpoplauschi Hi Bogdan, do you mind making a release with this security fix?  Since it's a security fix, I imagine many people would like to pick it up.  Thank you!\n. ",
    "studentdeng": "you can try install using CocoaPods \uff08http://cocoapods.org\uff09\n$ gem install cocoapods\n$ pod setup\ncreate Podfile\nlike this\nplatform :ios, '5.0'\npod 'SDWebImage'\n$ pod install\n. ",
    "oekekezie": "Any update on this? I'm wondering the same thing too.\n. You guys rock!\n. ",
    "ynechaev": "Have same issues. Found temporary solution: use SDImageDownloader to download image from URL and then store it manually in SDImageCache with a key, which suppose to be an absolute URL string for this image.\n. I assume a temporary solution: Use SDWebImageCache directly and delete stored image. A key is usually similar to image url.\n28 \u00e0\u00e2\u00e3. 2013 \u00e3., \u00e2 11:51, Patrick Singer notifications@github.com \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb(\u00e0):\n\nThat is no solution for me because i have an App with many Images and when i do this i always download this images then was the function of the image cache useless.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have issues with loading images, their download doesn't often complete at all. I use progress block to track loading progress and I have same issues (same progress stop) at same images. It looks very weird, because when I simply paste links to browser I load them without problems. I tried using SDImageDownloader directly, work with SDImageCache and so on... Maybe this comes from gcd, maybe from other things, I am still figuring it out. My previous comment was wrong, I supposed that I had some improvements, but now I see that the problem is still taking place. iOS Deployment 5.0 (running on latest 6), ARC\n. \n",
    "Zeropointer11": "That is no solution for me because i have an App with many Images and when i do this i always download this images then was the function of the image cache useless.\n. ",
    "albertschulz": "I also have the same issue. any fix so far?\n. same here\n. Is this really an integration of if-modified-since caching? I can not find a hint in the source code, and it is not working as expected\n. I submitted a pull request where I solved this problem. Take a look at it:\nhttps://github.com/rs/SDWebImage/pull/575\nIt may not be perfect yet, need to work on it and clean it.\n. ",
    "vc7": "~~I have the same issue as well. the progressBlock seems never been called, even it was passed layers inside.~~ If the image was loaded before, it has cache inside the app. For me, I delete the app and the progressBlock runs for me.\n. ",
    "dkokarev": "I have the same issue, but only for iOS 7. For iOS 6 it's working fine.\n. ",
    "kanakachary-spoors": "I have same issue, but only for below iOS 7. For iOS it's working perfect.\n. ",
    "aaronwardle": "Did anyone solve this issue?\n. ",
    "laucel": "same as @DannyDeveloper , any update?\n. ",
    "notsoux": "The same to me :(\n. ",
    "aisrael": "setImageWithURL: is an instance method of UIImageView+WebCache.\nYou're sending it to the class FocusedImageView. So, Objective-C looks for a class method in FocusedImageView, finds none, and raises the exception.\n. ",
    "potatolicious": "Hi Alistair, I checked and I'm sending it to to self, not the class, where self is a FocusedImageView.\nThis issue has been rendered moot though - in hindsight trying to include a dependency two degrees removed via a static lib is a terrible idea. We've since folded the common lib into the two apps themselves by including the sources directly. Messy, but it has solved any dependency errors like this. Thanks for the help!\n. ",
    "eddydas": "rs: Okay let me put it this way: The issue was, before my commit, if I want to override the user agent used by SDWebImage, I could not (or maybe I can but I overlooked? Please correct me.) Yes I know I can use setValue:forHTTPHeaderField: in SDWebImageDownloader, but SDWebImageManager always tries to reinitialize one. This reinitialized one is not the same instance as the singleton instance. A newly initialized one does not come with my custom headers of course because I haven't called setValue:forHTTPHeaderField: to the newly initialized instance. Then can I achieve what I want by calling setValue:forHTTPHeaderField: to the newly initialized one? No, because SDWebImageManager doesn't give me an accessor for its SDWebImageDownloader. Nor could I use the singleton at [SDWebImageDownloader sharedDownloader], because the instance used by SDWebImageManager is not the same instance as [SDWebImageDownloader sharedDownloader].\nSo my fix would be to ensure SDWebImageManager uses the singleton instance of SDWebImageDownloader, so that if I need to setValue:forHTTPHeaderField: I can do it using the singleton instance.\nThank you very much for your time.\n. ",
    "chgsantos": "I'll take a look as soon as possible.\n. ",
    "Oneginpanda": "I\u2018ve got the same crash here.\n. ",
    "einsteinx2": "I thought that may be the case when I submitted it, but figured at least having it in your pull requests section would make it visible to other consumers of the framework. I actually no longer work on this project and don't have time to maintain it either, so maybe someone else using it will take up the job.\n. ",
    "runningfree100": "I have the same problem.\nIt's happen only when I open UITableview with images, go back, and quickly return to the same uitablview (meaning loading again the same images).\nIf I move to diffrent UITableView( with different images), also quickly, it works O.K.\nwhen bug happen, I have 100 threads...\nany ideas ? \nthis bug freeze the app, so even if there somtheing to deal specific to this case, like wait more, it's better then this situation.\n. wow. this is crazy. you must write this tip in description of the project :\nhttps://github.com/rs/SDWebImage\nchanging to this and my uitableview works like the good old library speed.\nplease, for others, write this in the description. I almost cried from hapiness :)\n[[SDWebImageDownloader sharedDownloader] setMaxConcurrentDownloads:6];\n. [SDWebImagePrefetcher sharedImagePrefetcher].manager.delegate is different \nthan [SDWebImagePrefetcher sharedImagePrefetcher].delegate\nI have a class the scale the images before cached in disk, and I set the object of this class to :\n[SDWebImageManager sharedManager].delegate = [FBImageScaleBeforeSDWebImageCache sharedInstance];\n[SDWebImagePrefetcher sharedImagePrefetcher].manager.delegate=[FBImageScaleBeforeSDWebImageCache sharedInstance];\nthis way, all photos are scaled before cache,(for both managers, the SDWebImagePrefetcher and SDWebImageManger)\n. 1. [SDWebImagePrefetcher sharedImagePrefetcher].manager.delegate=YOUR_CLASS_OBJECT\n2. YOUR_CLASS need to implement :\n   (UIImage )imageManager:(SDWebImageManager )imageManager\n   transformDownloadedImage:(UIImage )image\n                   withURL:(NSURL )imageURL\n   {\n///* scale the image here *// (UIGraphicsBeginImageContextWithOptions...)\n     .......\n     .......\n     return image; (the scaled image)\n   }\nThis way, after the prefetch complete the download and before cache it to memory/disk\nthe prefech manager call the delegate which is your object, the give u a chance to scale the image and return it back (if you choose not to scale some of the images, you just return the image)\nthis is how I did it and it works. maybe others have more info  about it.\n. So, I don't understand what I need to do now.\nIf i have uiimageView of size (50,50) and I want the uiimage of size (80,80) (meaning the server will send 80,80 \"file size\")\nIf I download with SDWebImage and get it in scale size of (26,26)\nsetting this image to UIImageView with UIImageView.scaleToFill will show the same image quality or not ?\nIf yes, this scale is not needed (why scale twice ?)\nIf no, so, I need to request with 80 * 3, 80 * 3 ? to get the same quality ? but here there is  also  scale.\nI'm confused and I wasted hours..to find this \"bug\" :(\njust incase I want to disable this my self for now:\n- (UIImage )scaledImageForKey:(NSString )key image:(UIImage )image {\n  return SDScaledImageForKey(key, image);\n  }\n  to\n- (UIImage )scaledImageForKey:(NSString )key image:(UIImage )image {\n  return image;\n  }\n  Is enough ?\n. to  2.7.3 ? (in the discussion..I read).\nthe last is 3.7.5.\nthis is too old no ? \n. o.k\nsorry for the trouble..I search for this code before (the one line code in the commit ) but did not found it.\nwhat I found (and wrote in message before) is about this method :\n(UIImage )scaledImageForKey:(NSString )key image:(UIImage )image { return SDScaledImageForKey(key, image); } \nto\n(UIImage )scaledImageForKey:(NSString )key image:(UIImage )image { return image; } Is enough ?\n. Thanks :) \n. ",
    "idoru": "Fixed in #495 \n. ",
    "alexmedearis": "@rromanchuk \nThis is actually a problem with libwebp, not SDWebImage.  Support for webp was added in version 3.3, so you can work around this temporarily by using 3.2.  If you're using cocoapods:\npod 'SDWebImage', '3.2'\n. ",
    "mcastilho": "Is this still an issue with 3.5.1 ?\n. ",
    "amerikan": "I just downloaded 3.5 and for some reason whenever I run it in 64-bit simulator or my iphone 5S it crashes. The non-64 it runs good though. Any ideas?\n. Yeah it seems like it. I just started getting into ios dev and decided to use SDWebImage for my project. I followed the setup and everything seem good until I tried to run my app in the 64-bit simulator and iphone 5s, they both crash. The non-64-bit seems to be OK. Let me know if you find a solution. :smile: \n. I ended up using AFNetworking+UIImage for now since that does work for 64-bit. https://github.com/AFNetworking/AFNetworking\n. ",
    "PauloMigAlmeida": "I'm facing the same situation as @erikmontes. It complains like I haven't added an import statement to SDWebImage category.\n2013-12-30 12:06:01.740 now[13876:70b] -[UIImageView setImageWithURL:placeholderImage:]: unrecognized selector sent to instance 0x10b8e2e50\n2013-12-30 12:06:01.812 now[13876:70b] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[\n. I was able to run it on iPhone 5S by changing \nBuild Settings > Architectures to $(ARCHS_STANDARD)\nBuild Active Architecture Only to Yes\nSooner or later SDWebImage will release a new version and compatible with 64-bit architectures and we won't need this workaround anymore\n. ",
    "tigpt": "I also can compile but when running on 5S ir crashes.\n. ",
    "jmstone617": "Seeing the same issue here. Any work arounds available?\n. ",
    "maziyarpanahi": "I suppose the Framework 3.5 doesn't have the latest pull right?\n. ",
    "vaiden": "3.5.4 still crashes on 64 bit:\n[UIImageView setImageWithURL:placeholderImage:]: unrecognized selector sent to instance xxxxxx\n. Is this an official reply?\n. Are you building a slim binary (i386 only)?\n. This is strange since SDWebImage is crashing arm64 devices running fat binaries ( = where one of the target architectures is arm64). The dreaded \"unrecognized selector\" crash: https://github.com/rs/SDWebImage/issues/494.\nSo you've done something that enables your app not to crash, which might be related to the fact that you can't get the caching working...\n. ",
    "vitoziv": "@vaiden is right, I meet the problem too\n. ",
    "sdefresne": "webp support for arm64 was introduced with this change: https://chromium.googlesource.com/webm/libwebp/+/1ba61b09f9a42ce28d0bf91334a507333ae32c05\nThis has not yet been released yet as a packaged version of libwebp, but should be included in the next release hopefully.\n. ",
    "zelinliu": "Problem still exists in pod 'SDWebImage', '~> 3.6'\nShould be easily fixed like this .\n. @kutakmir Seems like it is fixed in 3.7 version. Problem gone after updating.\npod 'SDWebImage', '~> 3.7'\n. ",
    "kutakmir": "Yes, I am dealing with the same issue - would you mind making a pull request of this fix, so it is working on the main repository?\n. I found out that this happens when you load too many images at a time, using too many threads and system cannot handle that.\nWouldn't it be possible to just add a limit on concurrent threads and stack them into a queue?\n. ",
    "dsdjung": "I am not seeing this issue on a simulator, but only seeing the issue when I try to archive with iOS Device. The work around mentioned to set build settings does not seem to work for me. Any ideas?\n. That's interesting. I am using 3.7.1 with webp 0.4.0\nInstalling SDWebImage (3.7.1)\nInstalling libwebp (0.4.0)\nStill seeing the issue.\n. @zelinliu Your dsp.h mod did the trick. Thanks...\n. ",
    "zephyr-dev": "+1 dealing with the same issue.\n. ",
    "carmenalbu": "With 3.7.1 dealing with the same issue.\n. ",
    "akshayvernekar": "Solved this issue by changing the Build settings of SDWebImage to \"(armv7,arm64)\" . Got few errors in \"NSLog\" those are easy fixes ,apart from that you need to change \n- (int)getMemoryCount\n  {\n  return [[memCache allKeys] count];\n  }\n  in  SDImageCache.m  to\n- (int)getMemoryCount\n  {\n  return (int)[[memCache allKeys] count];\n  }\n. ",
    "jbweimar": "\nI'm also getting crashes on that line actually when downloading lots of items in a UITableView\n. i might have to abandon this library if this remains an issue. are there\nany plans on fixing this?\nOn Fri, Sep 20, 2013 at 5:51 PM, joshuafeldman notifications@github.comwrote:\n\nI see this issue as well. Came type of crash report.\nI also see failed downloads which I am now guessing might have to do with\nthis issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/497#issuecomment-24820183\n.\n. i will do more reporting on this particular crash the coming days (assuming\nthat we're experiencing the same issue). i actually have an app in the app\nstore that is featured this entire week that makes heavy use of the SD\nlibrary. i only found out about this crash at the very last moment. i\ndidn't have time to fix it anymore because apple had set a deadline for\nsubmitting in order to become featured with iOS 7 launch. as soon as crash\nlogs start being populated in itunes connect i will let you know.\n\nOn Fri, Sep 20, 2013 at 10:01 PM, Olivier Poitrey\nnotifications@github.comwrote:\n\nThis commit will fix 1. About 2. I'm not sure as I can't reproduce.\nAnyways, I'm wouldn't bet on the runloop scheduling as a culprit for this\none.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/497#issuecomment-24837449\n.\n. \n",
    "jawong": "I seem to be getting dead locks some times when I attempt to use the diskImageExistsWithKey method? Any thoughts?\n. Well what I have essentially is a UICollectionView. When I create the cell, it checks to see if an image already exists in the cache, if it does then it will just display the image immediately, if it doesn't exist then I let it load and then animate the image in once it has finished loading.\nI've just made it deadlock again and there is another thread which is calling [SDImageCache queryDiskCacheForkey:done:] block invoke\nNot sure if this might help with figuring out what's going on?\n. Ah thanks! \nI only recently updated my SDWebImage framework and hadn't really looked into the extra SDImageCacheType parameter.\n. ",
    "paulthorsteinson": "@bpoplauschi hey, sorry this was a while ago and I am no longer working on that.  Feel free to close this if you are not seeing this behaviour anymore.\n. ",
    "AndrewBarba": "I noticed this as well. Crashes on iPhone 4 and below because of the massive memory spike. I was seeing a spike of +60mb when a gif was downloaded. I would say this is a bug \n. ",
    "onishinji": "and ? How to remove gif support ?\n. ",
    "damienrambout": "Alright, thank you.\nBut I can use SDWebImageRefreshCached option to force the SDWebImageManager to use the HTTP response cache control, right ?\n. Just a quick note:\nI'm aware of SDImageCache which can be instantiated with custom a namespace and cache size. But sd_ extension methods will always use [SDWebImageManager sharedManager] which will always use [SDImageCache sharedImageCache].\n. ",
    "yupliang": "@cherpake hi , I meet the same crash issue , how could you solve the problem , please help me .. thank you guys.. ",
    "nickyu0204": "you figured it out? Im stuck on the same issue lol\n. Im using the latest version of SDWebImage\n. ",
    "aidenluo177": "Anyone figured it out?\n. ",
    "JanGorman": "@bpoplauschi The crash does not occur on 3.6, I just downgraded our project's dependency to that version and all is fine again\n. @bpoplauschi we were using 3.6 before, I updated to 3.7.0 and during my smoke test the app crashed so went back to 3.6 ;)\nHere's the stack trace from our app\nThread : Crashed: NSOperationQueue 0x13b84be0\n0  CoreFoundation                 0x052820af CFRelease + 1487\n1  zalando                        0x00894cbf +[UIImage(MultiFormat) sd_imageOrientationFromImageData:] (UIImage+MultiFormat.m:63)\n2  zalando                        0x00894a75 +[UIImage(MultiFormat) sd_imageWithData:] (UIImage+MultiFormat.m:34)\n3  zalando                        0x00883869 -[SDWebImageDownloaderOperation connectionDidFinishLoading:] (SDWebImageDownloaderOperation.m:343)\n4  Foundation                     0x02091e49 ___NSURLConnectionDidFinishLoading_block_invoke + 40\n5  Foundation                     0x020287e1 __65-[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:]_block_invoke + 62\n6  Foundation                     0x01eb0f5e -[NSURLConnectionInternalConnection invokeForDelegate:] + 119\n7  Foundation                     0x01eb0ec6 -[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:] + 208\n8  Foundation                     0x01eb0dd8 -[NSURLConnectionInternal _withActiveConnectionAndDelegate:] + 76\n9  Foundation                     0x01eb1188 _NSURLConnectionDidFinishLoading + 43\n10 CFNetwork                      0x046a369f ___ZN27URLConnectionClient_Classic26_delegate_didFinishLoadingEU13block_pointerFvvE_block_invoke + 111\n11 CFNetwork                      0x046a13de ___ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 + 104\n12 CoreFoundation                 0x052a1c69 CFArrayApplyFunction + 57\n13 CFNetwork                      0x0460a441 RunloopBlockContext::perform() + 155\n14 CFNetwork                      0x046ec3f4 non-virtual thunk to RunloopBlockContext::multiplexerClientPerform() + 20\n15 CFNetwork                      0x0460a257 MultiplexerSource::perform() + 299\n16 CFNetwork                      0x0460a06c MultiplexerSource::_perform(void*) + 76\n17 CoreFoundation                 0x0528977f __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 15\n18 CoreFoundation                 0x0528910b __CFRunLoopDoSources0 + 235\n19 CoreFoundation                 0x052a61ae __CFRunLoopRun + 910\n20 CoreFoundation                 0x052a59d3 CFRunLoopRunSpecific + 467\n21 CoreFoundation                 0x052b0d51 CFRunLoopRun + 129\n22 zalando                        0x0088128a -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:103)\n23 Foundation                     0x01f9ef44 __NSOQSchedule_f + 62\n24 libdispatch.dylib              0x056444d0 _dispatch_client_callout + 14\n25 libdispatch.dylib              0x05630fe0 _dispatch_async_redirect_invoke + 202\n26 libdispatch.dylib              0x056444d0 _dispatch_client_callout + 14\n27 libdispatch.dylib              0x05632eb7 _dispatch_root_queue_drain + 291\n28 libdispatch.dylib              0x05633127 _dispatch_worker_thread2 + 39\n29 libsystem_pthread.dylib        0x05973dab _pthread_wqthread + 336\n30 libsystem_pthread.dylib        0x05977cce start_wqthread + 30\n. ",
    "dperetti": "FYI, I'm experiencing the exact same issue at the moment :-)\n. ",
    "dreipol": "Got the same issue.\nPlease apply cherpakes patch, it fixes it.\n. ",
    "nicksnyder": "I can reliably reproduce this problem using SDWebImage 3.7.2, Xcode 6.2, in the iPhone 6 iOS 8.2 simulator.\nSee this project:\nhttps://github.com/nicksnyder/iOS-UIWebView-vs-UITableView\n. I didn't mean to imply that 1024 was the smallest number needed to deadlock, but it does seem to vary based on the hardware being run on (which is why I put a silly high number in the bug report).\n32 concurrent operations performs better than 3 (the default) in my project. I was manually searching for the sweet spot which is when I reproduced the deadlock. The deadlock is indeed still a bug with SDWebImage, right?\n. ",
    "nikhilchaurasia": "Previous nonArc codes are working fine .\n. Any update on this issue?. I m using\n[self.imageView sd_setImageWithURL:content.imageURL placeholderImage:[UIImage imageNamed:@\"Placeholder-background\"]]\nto load image. It is reproducible every time when user user kill app app 20-30 times and opens again.\n  . ",
    "quaertym": "I agree, there is no need for that verbose logging.\n. ",
    "leontiy": "Are there any plans (and means) to address this? Getting these crashes as well.\n. ",
    "linkov": "set SDWebImageRetryFailed option to fix this\n. ",
    "crazytonyli": "@rs Hi, could you please take a look at this pull request? Thanks.\n. @rs Yes, that would be nicer. I will update this pull request to use filter.\n. @rs Pull request updated, please review. :)\n. ",
    "grubbyJay": "```\ndispatch_barrier_sync(self.barrierQueue, ^\n{\n    BOOL first = NO;\n    if (!self.URLCallbacks[url])\n    {\n        self.URLCallbacks[url] = NSMutableArray.new;\n        first = YES;\n    }\n// Handle single download of simultaneous download request for the same URL\nNSMutableArray *callbacksForURL = self.URLCallbacks[url];\nNSMutableDictionary *callbacks = NSMutableDictionary.new;\nif (progressBlock) callbacks[kProgressCallbackKey] = [progressBlock copy];\nif (completedBlock) callbacks[kCompletedCallbackKey] = [completedBlock copy];\n[callbacksForURL addObject:callbacks];\nself.URLCallbacks[url] = callbacksForURL;\n\nif (first)\n{\n    createCallback();\n}\n\n});\n```\nI think you creat operation in another queue\n. I modify it\n. in main queue\n. ```\ndispatch_async(dispatch_get_main_queue(), ^{\n    BOOL first = NO;\n    if (!self.URLCallbacks[url])\n    {\n        self.URLCallbacks[url] = NSMutableArray.new;\n        first = YES;\n    }\n// Handle single download of simultaneous download request for the same URL\nNSMutableArray *callbacksForURL = self.URLCallbacks[url];\nNSMutableDictionary *callbacks = NSMutableDictionary.new;\nif (progressBlock) callbacks[kProgressCallbackKey] = [progressBlock copy];\nif (completedBlock) callbacks[kCompletedCallbackKey] = [completedBlock copy];\n[callbacksForURL addObject:callbacks];\nself.URLCallbacks[url] = callbacksForURL;\n\nif (first)\n{\n    createCallback();\n}\n\n});\n```\n. it work well\n. But I'm not sure whether it will make another issue.\n. ",
    "asifbilal786": "I am having this in my the device. Did you find any solution?\n. Thanks and yes, you' re right. I also investigated this issue and got the same point. But in my application, the data was not an Image.\n. But that's not the proper solution. Why Xcode 5.1 doing this.\n. ",
    "Tylerc230": "I think the issue is that in SDWebImageDownloaderOperation, the run loop is only run for 10 seconds so if an image takes longer than 10 seconds, the download stops but the operation isn't cancelled or anything and just sits in the operation queue. \n. Looks like this was fixed for > 5.0 on the tip of master.\n. ",
    "JoeSzymanski": "I think we are hitting this, too. When testing downloads on slower networks, the device can frequently get into a state where all downloads fail, and no callback ever happen.\n. It may not be the problem we're hitting, as we're at 3.5 release running only on iOS 7. I'll have to dig some more to see if there are some other issues.\n. ",
    "mohpor": "I'm facing the exact same issue. I've used sdwebimage in numerous places in my app and when one of the operations take more than 10 seconds, the entire app sucks because nothing will be loaded afterwards, and yes, no callbacks what so ever (completion block is never called) but, it seems that the operation has finished it's job, because, when I re-run the app, all images are loaded from cache which I suppose is a sign that operation has been going well to some point in the previous run!\nit's an annoying problem indeed.\n. the new commit somehow seems to solve my problem! Thanks\n. ",
    "morisunshine": "I meet the same problem\n. ",
    "MrAlek": "What I found out when digging a bit is that the default maxConcurrentOperationCount for the shared download operation queue is only 2. This doesn't really suit table views well, since even if you cancel operations when cells are reused, download operations that have already started for will take up space in the queue.\nYou can easily fix it by upping the count yourself:\n[[SDWebImageDownloader sharedDownloader] setMaxConcurrentDownloads:6];\n. Still, a good default value is one that fits the most common use cases and loading images in cells is arguable on of the top ones. \nPeople are having performance problems because it is difficult to draw the conclusion that the maxConcurrentOperationCount needs to be set higher. Myself, I nearly opted out of using SDWebImage when benchmarking it against my regular network library before finding out that there weren't enough concurrency.\nWould you feel more comfortable with a lower value, like 6?\n. Lowered it to 6\n. I would say that applications that concurrently shows many very large images is not a typical use case compared to images in table & collection views. One should optimize for the common case. If you're queuing up several full retina images, it's not wise to decompress all of them before actually showing them anyway.\nThe memory issues in SDWebImage have been around since long before this fix and are related to live allocations building up over time, not temporal spikes, why this change doesn't affect those issues.\n. ",
    "pixelfreak": "Oops apologies for not looking closely enough. I'll just answer my own question to avoid public humiliation. :)\ndownloadWithURL: returns a cancelable NSOperation, voila!\n. ",
    "dzenbot": "+1! Please merge.\n. Is there any other way I can retrieve the value for a cacheKey from the cacheKeyForURL block then?\nThe whole purpose of this pull request is to get the custom cache key for specific urls, from the download operation class.\n. What do you think @rs ?\n. I agree with @lluisgerard. Not all APIs have the \"@2x\" at the end.\nIn the project I currently work on, they don't have it, and supporting it makes no sense since the API needs to respond for several different clients.\nThat's why I need to insert the \"@2x\" into the urls to make SDWebImage believe it's a retina density image, like so:\n```\n[[SDWebImageManager sharedManager] setCacheKeyFilter:^(NSURL URL) {\n        NSString url = [URL absoluteString];\n        if ([UIScreen mainScreen].scale == 2.0) {\n        NSRange range = [url rangeOfString:@\".jpg\"];\n        NSMutableString *urlRetina = [NSMutableString stringWithString:URL.absoluteString];\n        [urlRetina insertString:@\"@2x\" atIndex:range.location];\n        url = urlRetina;\n    }\n    return url;\n}];\n\n```\nAny idea of how to make it less complicated?\n(This is called on the app delegate)\n. +1 for a parameter on setImageWithURL:\nor a property on SDWebImageManager, like \n@property (nonatomic) CGFloat scale;\n. What about adding a new type to SDWebImageOptions, like SDWebImageDoubleScaling ?\nSo that will not need to modify any of the current setImageURL methods.\n. From our REST API we're sending image urls with cache busting parameters:\n\"http://assets.staging.epiclist.io.s3.amazonaws.com/uploads/user/avatar/filename/37eeba3b7913c8775565510a0a999f9b/mobile_thumb_medium_37eeba3b7913c8775565510a0a999f9b.jpg?1386963479\"\nNote the timestamp param ?1386963479 after the file extension.\nWhen the image, the timestamp param updates.\nI recently noticed the type SDWebImageRefreshCached on SDWebImageOptions.\nThis looks like it enables cache busting, Right?\n. @rs Just added a verification to fix that.\n. ",
    "Fl0p": ":thumbsup: \nVoteUp for this\nsemi fix for https://github.com/rs/SDWebImage/issues/569\n. ",
    "Ricardo1980": "The protocol says it's an error. It seems it's youtube who is not using the standard properly.\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n10.4.5 404 Not Found\nThe server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.\n. Works perfectly! Thanks.\nOne question regarding memory management, isn't it there a retain cycle in photoImgeView?\nI mean, try to change photoImgeView by cell.photoImgeView.\nThanks.\n. Thanks.\n. Same question here\n. @jballer  I have the same problem.\nCan you tell me the link of that issue in the other tracker?\nThanks..\n. Hello,\nAre you talking about the last cocoapods beta? 1.0.0.beta.6\nOr the last SDWebImage version?\nOr both?\nThanks.\n. ",
    "mwaterfall": "@Ricardo1980 That states that it is indeed an error condition, which I'm not disputing (and neither is YouTube), but mentions nothing about not allowing data in the HTTP request. As mentioned above, it seems possible to send data (in this case image data) along with the error HTTP request. Therefore it seems like it would be great to populate both the error and image arguments, and let the user take it from there.\n. @rs just wondering if you could chime in here with your thoughts?\nAn example of this causing issues is with YouTube video poster frames. When getting a poster frame for a video where the user has not set a poster frame, YouTube returns a 404 status code and the data contains an appropriate placeholder poster frame. Currently with SDWebImage we're not able to get that placeholder poster frame that YouTube serves up.\n. Yes this backwards incompatible change has caused some issues today. @w5mith you beat me by a few hours to report this! \nFYI, @w5mith you should be able get MWPhotoBrowser running now as I've just merged a fix: mwaterfall/MWPhotoBrowser#214\n. ",
    "pburleson": "FYI, Netflix does this as well:\nhttp://cdn-2.nflximg.com/us/boxshots/large/70273612.jpg\nIt seems the current logic came from #79.\n. @rs I was actually just thinking about that because I don't want the image in this case. But I'd also like to stop trying to download it over and again. Locally, I'm tracking the images that return an error and storing a set of URLs to just show my placeholder for instead of asking the image cache for them. \nIt would be nice if the library knew you wanted your placeholder always in case of error and to cache that placeholder as the image for that request. Taking it a step further, a configurable time out to retry error producing URLs for those that might have temporary errors. (Not something I'd use in my case).\n. @donholly I totally missed that. Thanks for pointing it out!\n. ",
    "luisobo": "@rs what's the reason this got closed? Is it a feature that you don't want or is that the implementation is wrong maybe?\n. ha! I totally missed that. Awesome. \nI'm gonna submit another PR to give the same option through the manager, I don't know where the hell I put those changes :S\n. awesome\n. ",
    "asuralyc": "use completed block\n[photoImgeView setImageWithURL:[NSURL URLWithString:photoPath] \n    completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {\n        if (cacheType == SDImageCacheTypeNone) {\n            photoImgeView.alpha = 0;\n            [UIView animateWithDuration:0.3 animations:^{\n                photoImgeView.alpha = 1;\n            }];\n        } else {\n            photoImgeView.alpha = 1;\n        }\n    }];\n. It works fine with UITableViewCell.\n. ",
    "Nagarjun123": "It worked thanks @asuralyc . How to change white fadein background for this? Currently fadein is white i want it black or grey?. ",
    "ivanbruel": "I am indeed having the same problem on an iOS7-only app. Images don't seem to be recycled. Seems to be related with [SDWebImageDownloaderOperation connectionDidFinishLoading:] and the ForceDecode of the UIImage.\n. Well, from my particular issue, I'm URLing into the documents folder, the memory keeps growing no matter how many passes I make through the list, it will most of the time fetch them from disk instead of memory. So does this  mean the discardable memory is being discarded even while it grows?\n. ",
    "kefon": "@ivanbruel nice to know that I'm not the only one ;) I still looking to understand the problem, but unsuccessfully for now...\n. I also have the same issue while running the SDWebImage demo project (on iOS7 / iPhone 5) \n\n. @rs Ok ! So if I understand, this is a perfectly normal behavior and the memory is released if needed. Thank you for your answer, now I think I understand what's going on. Sorry for the noob question ! (So I can close this issue right?)\n. ",
    "cloay": "I have this issue only on iOS7.  How to avoid this?\n. ",
    "mrtristan": "i see this too, are we thinking this isn't an issue? @rs are you saying the memory will grow and grow until it actually needs to be reclaimed?\n. ",
    "willclarke": "I am seeing a lot of crashes as the CG raster data grows - it doesn't look like it's actually discarding memory when it needs to be. I see memory warnings start to get generated, it kills background apps, and then the app crashes without ever discarding any of the CG raster data.\n. I added this:\nobjc\n// Init the memory cache\n_memCache = [[NSCache alloc] init];\n[_memCache setTotalCostLimit:41943040];\n_memCache.name = fullNamespace;\nBut I'm still getting this as I scroll through a UITableView with lots of images:\n\nNote the CG Raster Data is still blowing up and it's killing other apps but never reducing the raster data.\nIs there something I should be doing to release the images in the table cells when the cells are dequeued and reused? Sorry if that's a stupid question.\n. Looks like right now it's setting a cost for each entry of the image height * width * scale as an approximation for image size... I've changed this to:\nobjc\n    NSData *png_representation = UIImagePNGRepresentation(image);\n    [self.memCache setObject:image forKey:key cost:png_representation.length];\nIn the three places where setObject happens - but memory usage is still exploding. I have it capped at 80 MB but CG Raster Data continues to increase unbounded... I suspect this could be the way CoreGraphics is storing rendered images in the view and has nothing to do with the cache that SDWebImage is keeping. But I just have no idea how to tell CG how to free this raster data when it's not on screen.\n. Definitely possible. I'm not seeing any memory actually leak in Instruments, but I'll keep trying to track it down. Thanks for your responses @rs !\n. ",
    "phionardo": "I have exactly the same issue, too. @rs Is there a way to clear cache timely, or reduce using memory for caching? \nIn my case, the \"All Anonymous VM\" grows to 700MB and my app crashes, due to the huge amount of \"CG raster data\".\n. ",
    "wujie0919": "I also encountered such a problem \n. ",
    "andrewprocter": "I'm encountering this as well. I believe @kaishin is onto something re: GIF's.\n. @marinh that's awesome, any way we can get our hands on your implementation?\n. ",
    "pradeepfission": "I'm encountering ImageIO_PNG_Data memory problem. I'm seeing following in instruments\n\nCGRaster Data and ImageIO_PNG_Data are taking a lot of memory.\n. @rs Is this behaviour normal?\nI am using setimagewithurl method to display images(url).\nWhat can i do, to free the cgrasterdata which is growing enormously and crashes after 10 min usage of app.\nAnd i am using 3.2 version on sdwebimage.\nI observed this behaviour starting iOS 7 and still continuing in iOS 7.1 too.\n\n. +1 ahui2823 i too facing same problem\n. ",
    "jxdwinter": ":+1: \nMaybe some issues in iOS7 with this GIF stuff. I build a simple project in both iOS6  and iOS7. Check this out.Same code.\niOS6\n\niOS7\n\n. Hi,guys, just use UIWebView to show a gif right now.\n. ",
    "myell0w": "seeing the same problem and lots of crashes related to SDWebImage. @rs: I think that's an issue worth looking into and isn't related to the affected apps.\n. regarding KVO: \nyou can create a separate class that acts as the observer and let the imageView hold a reference to that object (associated object). In this case it doesn't matter, whether the default implementation of UIImageView implements observeValueForKeyPath:ofObject:change:context: or not.\n. ",
    "huyduc": "We're having the same memory problem with SDWebImage too. Seem to happen only on iOS7 with CGRaster Data keep growing to hundred of MBs just by swiping the table view, to the point that the app will get memory warning and be terminated.\nI personally believe this got something to do with iOS than the library itself.\n. Seem like this is a bug in iOS Simulator only. I've just tested on 7.0.3 device and saw a huge drop in memory usage. Looks like the system is claiming back the memory when it's needed. \n\n. SDWebImageManager.shared().imageCache?.config.shouldDecompressImages = false\nSDWebImageDownloader.shared().shouldDecompressImages = false\n@dreampiggy We're experiencing the same issue. May I ask what's the equivalence of the above workaround in SDWebimage-5.0-beta? \nIs this new SDWebImageOptions the equivalence? \nSDWebImageAvoidDecodeImage. ",
    "KetchupMoose": "I also have this issue, but I am seeing the same problem on a device running ios 6.1 but the ios SDK 7.0.  \nI am using GIFs.\n. I found an answer that might potentially work here, going to try it now.  http://stackoverflow.com/questions/17643649/reduce-memory-usage-in-ios-app-without-leaks\n. ",
    "tscheepers": "Anymore thoughts where this build up could come from? I have a lot of memory related crashes on actual devices. I am clearing the cache om memory warnings [SDImageCache.sharedImageCache clearMemory];. And have set a cache limit: SDWebImageManager.sharedManager.imageCache.maxMemoryCost = 3000 * 3000; but it does not seem to be working.\n\n. My problem seemed to originate from something else than the SDImageCache but since it did contribute to the memory buildup I asked my question here. \nPerhaps other people with the same problem could try what I tried. Keep in mind that I was using ARC.\n- Run the profiler with the Leaks template and check for the allocation of your own classes in the Allocation Summary.\n- Dive into them and check how they are allocated, if there are leaks. Mind that a leak doesn't show up in the Leaks instrument because you are using ARC. So Instruments could think everything is going ok\u00e9 but there still could be a leak somewhere. By diving in to the allocation of your own classes you could figure out what is going wrong.\n- Keep in mind that the retain/release count information is only provided when using the Leaks template and not while using the Allocations template.\nMy problem was that I was referencing instance variables and self directly from within blocks without reassigning them to __weak variables. When self is used within a block it will automatically be retained by ARC and sometimes never released. A weak reference prevents that from happening.\nFor example, this is wrong:\n[[NSNotificationCenter defaultCenter] addObserverForName:UIKeyboardDidShowNotification object:nil queue:nil usingBlock:^(NSNotification *note) {\n    [self.view setContentOffset:CGPointMake(0.0, kKeyboardOffset) animated:YES];\n}];\nYou should call self using a __weak reference like this:\n__weak YourViewControllerClass *weakSelf = self;\n[[NSNotificationCenter defaultCenter] addObserverForName:UIKeyboardDidShowNotification object:nil queue:nil usingBlock:^(NSNotification *note) {\n    [weakSelf.view setContentOffset:CGPointMake(0.0, kKeyboardOffset) animated:YES];\n}];\nSince my app uses a lot of block's I had a ton of leaks the Leaks instrument could not detect. When I fixed them the memory problem was gone.\nI hope this helps.\n. ",
    "AcidicSkittles": "I was having memory problems too. I ended up just calling\n[[SDImageCache sharedImageCache] setValue:nil forKey:@\"memCache\"];\nperiodically and that seemed to work. I found this answer here:\nhttps://github.com/rs/SDWebImage/issues/391\n. ",
    "marinh": "I tried implementing YLGIFImage instead of current GIF implementation in SDWebImage. It doesn't crash at all now and GIFs load even faster. It is really noticeable on lower end devices (iPhone 4 or older). \n. ",
    "eightytwo": "I use the following library for loading gifs:\nhttps://github.com/mayoff/uiimage-from-animated-gif\nIt is available as a cocoapod here:\nhttp://cocoapods.org/?q=UIImage%2BanimatedGif\n. ",
    "ahui2823": "I didn't use GIF in my app, but it seems the same problem, When I scroll the tableView with image in cell, the VM(CG raster data) live bytes growing huge, and then I take photo, app crashes. Does anyone has a good way to solve this problem?\n. ",
    "zkarcher": "Similar issue here, after upgrading my project (and iPad) from iOS 6 to 7.\nWhen my application launches, it loads 50 images (PNG format) using this code:\nSDWebImagePrefetcher * prefetcher = [SDWebImagePrefetcher sharedImagePrefetcher];\nprefetcher.options = SDWebImageRetryFailed | SDWebImageRefreshCached | SDWebImageLowPriority;\nprefetcher.delegate = self;\nprefetcher.maxConcurrentDownloads = 1;\n[prefetcher prefetchURLs:urls];\nNote the 313.47 MB of \"CG raster data\" which is never released:\n\nPossible fix: Insert this line: \nreturn image; \nat the beginning of SDWebImageDecoder's +(UIImage *)decodedImageWithImage:(UIImage*)image method, so that images are not redrawn. After inserting this line and clearing my cache, the \"CG raster data\" leaks are gone:\n\nWhat is the purpose of the decodedImageWithImage method?\n. My app uses SDWebImagePrefetcher to preload images. (The app is an interactive installation, and preloads several gigabytes of image data.)\nWhen I uninstall the app, then reinstall & launch it, the app runs OK. It does not crash.\nBut when I launch the app when it's already installed, then some images are already cached on disk. ... And in this case, memory consumption grows quickly during the prefetching. I don't know why. Is it retrieving images from the disk cache, decompressing them, and not releasing them? Very strange.\nMy solution: don't prefetch images with the same URLs as cached images.\n``` objective-c\n// URLs to preload:\nNSMutableArray * urls = [NSMutableArray array]; // of NSURLs\nSDWebImageManager * manager = [SDWebImageManager sharedManager];\nfor( NSURL * url in [page imagePreloaderURLs] ) {\n    if( [manager diskImageExistsForURL:url] ) {\n        //NSLog(@\"SKIPPING: %@\", url.absoluteString);\n        continue;\n    }\n    [urls addObject:url];\n}\nif( [urls count] > 0 ) {\n    SDWebImagePrefetcher * prefetcher = [SDWebImagePrefetcher sharedImagePrefetcher];\n    prefetcher.options = (SDWebImageRetryFailed | SDWebImageRefreshCached);\n    prefetcher.delegate = self;\n    prefetcher.maxConcurrentDownloads = 1;  // ??? Not sure what's best here\n    [prefetcher prefetchURLs:urls];\n} else {\n    // All images already in disk cache.\n}\n```\nThis has fixed my memory pressure crashes.\nUnfortunately, if any of the image assets change, they won't be reloaded. The outdated image (in the disk cache) will be used instead.\nHope this helps someone. I'm using version 3.7.1.\n. ",
    "ws513": "+1\n. +1,\nas temporary solution I've modified the decodedImageWithImage, by just returning the image passed\n. ",
    "algrid": "facing the same problem (I don't use gifs)\n. ",
    "macelangelo": "+1\n. ",
    "briansunter": "+1\n. ",
    "DDany": "In my app(iOS7 only), SDWebImage works very well. But GIF supporting is also on the schedule now. After a few hours investigation, I decide to use YLGIFImage for GIF function. SDWebImage is really not good at GIF. \n. ",
    "holetse": "I am also seeing this issue.\n@rs I understand that these images are in a NSCache and that NSCache SHOULD release objects as memory pressure increase, however the background decoded images are never freed. I can push the app to the point of being terminated due to memory pressure and it never yields substantive memory back. If I disable the background decode by returning immediately, I still see memory pressure increase but at a reasonable point it starts to release memory back to the OS and the app will run indefinitely.\nIn fact, if there are any GIFs in the cache (which aren't decoded) they are released as memory pressure increases but the actual decoded images remain.\nThis leaked memory persists even if I manually clear the cache using [SDImageCache clearMemory].\n. @futuretap I have not. I have yet to have the time to conclusively investigate if the bug is related to NSCache and images containing CG Raster Data, or if its related to SDWebImage's usage of NSCache.\n. @donholly The big issue here seems to be that NSCache has a memory leak when it's used to cache CGRasterData. All these solutions are just ways of working around that central bug.\n. This is fundamentally an NSCache issue as I understand it. Implementing a\ncustom cache a la @mallorypaine would address the issue. So would Apple\nfixing NSCache, but that seems to not be happening.\nOn Mon, Apr 27, 2015 at 12:41 PM bbnnt notifications@github.com wrote:\n\n@mallorypaine https://github.com/mallorypaine so it might not be really\nan sdwebimage problem; but more or less a memory management strategy if i\nget it well ? I'm not expert enough; an app with lot of images developed\nwithout this experience/knowledge would at some point always crash then ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/538#issuecomment-96792685.\n. \n",
    "futuretap": "Did you file a radar for this?\nOrtwin\n\nAm 03.07.2014 um 02:42 schrieb Edward Holets notifications@github.com:\nI am also seeing this issue.\n@rs I understand that these images are in a NSCache and that NSCache SHOULD release objects as memory pressure increase, however the background decoded images are never freed. I can push the app to the point of being terminated due to memory pressure and it never yields substantive memory back. If I disable the background decode by returning immediately, I still see memory pressure increase but at a reasonable point it starts to release memory back to the OS and the app will run indefinitely.\nIn fact, if there are any GIFs in the cache (which aren't decoded) they are released as memory pressure increases but the actual decoded images remain.\nThis leaked memory persists even if I manually clear the cache using [SDImageCache clearMemory].\n\u0081\\\nReply to this email directly or view it on GitHub.\n. Sorry, wasn't on the latest commit which works fine.\n. @ikesyo do you name your scaled images with @2x or @3x? If I read the code correctly, then the scale should be restored correctly. Since SDWebImage doesn't store the scale specifically in the cache, it can only deduce it from the file name.\n\nFor images without a scale specifier in the file name, a scale of 1 is the best choice imo.\n. My use case is a Spotlight indexer for POIs where I want to use a POI image if already fetched. Otherwise I use a default image to improve indexing performance and save network bandwidth.. ",
    "welsonla": "I solved this by add clearMemory code when didReceiveMemoryWarning,and when the controller disappear call the clear code too: [[SDImageCache sharedImageCache] clearMemory];\n``` ruby\n- (void)didReceiveMemoryWarning\n{\n    [super didReceiveMemoryWarning];\n//clear memory cache\n[[SDImageCache sharedImageCache] clearMemory];\n\n}\n```\n. ",
    "albsala": "+1 I have the same problem.\n. ",
    "kidGuo": "I have the same problem. app crash because high virtual memory.\n. I met the same problem\n. I found my problem is like this : https://github.com/rs/SDWebImage/issues/538      I used Instruments to find what make this. Instruments told me is + (UIImage )decodedImageWithImage:(UIImage )image\n. @mythodeia Could you help me? thanks advance.\n. @mythodeia  Thank you. Insert \" return image\" at the  beginning of SDWebImageDecoder's +(UIImage )decodedImageWithImage:(UIImage)image method. Instruments told me \"VM : ImageIO_JPEG_DATA\"  to use large memory . If not insert it, VM: CG raster Data use large memory.  I don't know why i am different.\n. @mythodeia  Do you know how to clear virtual memory? Thank you for answering my question.\n. @YauzZ  What are you using now? Can it solve the problem?\n. ",
    "zzontheway": "+1, i have  this problem too\uff0chow to solve this bug\uff0cmy  app crash  frequently\n. ",
    "harishkashyap": "Its the memory issue again. decodedImageWithImage takes up huge memory and causes the app to crash. I have added an option to put this off in the library but defaulting to YES so there aren't any breaking changes. If you put off the decodeImageWithImage method in both image cache and image downloader then you shouldn't be seeing the VM: CG Raster data on the top consuming lots of memory\ndecodeImageWithImage is supposed to decompress images and cache them so the loading on tableviews/collectionviews become better. However, with large set of images being loaded, the experience worsened and the memory of uncompressed images even with thumbnails can consume GBs of memory. Putting this off only improved performance.\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\nhttps://github.com/harishkashyap/SDWebImage/tree/fix-memory-issues\n. @foundry not sure how you have configured it. You seem to have leaks there; there shouldn't be leaks with/without the shouldDecompress. That seems like the code may be leaking somewhere else. \n. @foundry : thanks for letting me know!\n. @rs I have put in a PR for this: https://github.com/rs/SDWebImage/pull/996. Note that this also needs the configuration to be set:\n    [SDImageCache sharedImageCache].shouldDecompressImages = NO;\n    [SDWebImageDownloader sharedDownloader].shouldDecompressImages = NO;\nI would favor defaulting to these options in the library but that is your decision. I added these as options externally so not to have breaking changes.\n. It does prevent CGRasterData accumulation as the amount of memory persisted during infinite scrolling only increases and infact increases tremendously to a point that causes the crash. @foundry has demonstrated it and that is exactly what we found as well. Also we didn't see any stutter while testing; on the contrary it remarkably improves. Also patch allows choosing the queue and it was using the main queue to prefetch that was adding a bad performance to the already existing high memory due to decompression. The idea of having different options is to allow granular level of choice that was consciously done not a poor design. This reduced memory by almost as much as 2/3rd. The earlier implementation didn't perhaps consider inifinite scrolling with large images and that was a gross error.\n. I would be happy to move the configs to as sdwebimagemanager and default to not decompressing if everyone concurs.\n. The other way around, to have compressed in cache and decompressed in rendering just to control cache. But I agree that is minor and will be happy to move it to the webmanager\n. I think decompression methods may have a leak; not sure if it is NSCache. There are alternatives to + (UIImage )decodedImageWithImage:(UIImage )image on iOS 7+. Someone can see if the new decompression methods resolves that. However, infinite scrolling with large images + caching on decompressed images (no matter what method you use) can consume huge memory at any given time that can affect performance. \n. http://www.objc.io/issue-5/iOS7-hidden-gems-and-workarounds.html has decompression methods that I haven't had time to investigate as an alternative method to what is currently used. \n. Thanks @donholly! That was the only thing I was going to look at.\n. @rs that's right. This reminds me. The default should be changed to put off decompression so there is no patch that needs to be applied.\n. decodedImageWithImage takes up huge memory and causes the app to crash. This happens if you are loading 100s or 1000s of images (not even high resolution). This was tough to find as the stack trace didn't lead to this category when the crash happens. I have added an option to put this off in the library but defaulting to YES so there aren't any break in changes.\n. We did some modifications to it and is working for us; fixes the crash.https://github.com/harishkashyap/SDWebImage\n. how to reproduce this issue?\n. @rromanchuk @Jur4s Is there any way to reproduce this or do you guys know of any demo code? I will be happy to invest some time on this as well as this is an issue thats happening for us; its mostly on iOS 7.1 but not able to reproduce.\n. @mingweizhang try my latest and see if it still crashes. If the crash was happening to due to memory leak (strong references in recursive calls) to startPrefetchingAtIndex. @rromanchuk the latest commit might fix the issue.\n. Here is the link to the issue and some tests run by a user to demonstrate the fix: https://github.com/rs/SDWebImage/issues/538\n. @bpoplauschi let me know what you need from my end.\n. @bpoplauschi There are a other changes committed by other developers. However, this commit (https://github.com/harishkashyap/SDWebImage/commit/cbc34337df46840927f9014db113c1b882d7e633) modifies the prefetching logic. It changes the logic from recursion to a loop and so will help remove overflows. I would recommend that this be merged in. You can take a look at it. \n. @bpoplauschi will take a look at it soon. Congrats to @mythodeia\n. @bpoplauschi, these three can be cherry picked and reviewed. https://github.com/rs/SDWebImage/commit/ed64e00d4c0fda4344a3c08acb71eaedde85a5cb,\nhttps://github.com/rs/SDWebImage/commit/ded305fb28ad55fdc1f39bc3c138ce386f221102\nhttps://github.com/rs/SDWebImage/commit/cbc34337df46840927f9014db113c1b882d7e633\n. @bpoplauschi Only the first three commits (ed64e00, ded305f, cbc3433) are mine that improve the existing features and fixes. The later merge request I believe is a drastic change which even removes the earlier feature of prefetching logic and separate concurrency. \n. so you can decide which ones you want to cherry pick.\n. That is correct.\n. ",
    "foundry": "@harishkashyap - I am experiencing the staircase memory pattern using SDWebImage with jpeg images. I was encouraged to see your patch appear in realtime as i am wrestling with this right now. Unfortunately it does not fix the issue.\n- Your patch applied with shouldDecompress set to YES:\n\n- Your patch applied with shouldDecompress set to NO:\n\n- Here is a run without SDWebImage - using [NSData dataWithContentsOfURL:url] for crude comprarison.\n\nThis seems to confirm that SDWebImage is the cause of the issue.  Perhaps I am not using it correctly.\nHere is the offending code:\n- (void)downloadImage:(NSURL*)url withCompletion:(Block)completion {\n    @weakify(self)\n    self.imageDownloadOperation =\n    [[SDWebImageManager sharedManager] downloadImageWithURL:url\n                                                options:0\n                                               progress:nil\n                                              completed:^(UIImage *image\n                                                          , NSError *error\n                                                          , SDImageCacheType cacheType\n                                                          , BOOL finished\n                                                          , NSURL *imageURL) {\n                                                  @strongify(self)\n                                                  self.imageURL = url;\n                                                  self.rotationZoomView.image = image;\n                                                  if (completion) completion();\n                                              }];\n}\nAnd the comparison version using dataWithContentsOfURL:\n```\n- (void)downloadImage:(NSURL)url withCompletion:(Block)completion {\n    @backgroundqueue(^{\n    NSData data = [NSData dataWithContentsOfURL:url];\n    UIImage* image = [UIImage imageWithData:data];\n    if (image) {\n        @mainqueue(^{\n            self.imageURL = url;\n            self.rotationZoomView.image = image;\n            if (completion) completion();\n        })\n}\n\n})\n }\n```\n. @harishkashyap - you are correct. I don't think I was testing with your patched version. Here are better result. Your fix has done the trick, many thanks for this timely intervention!\nYour patch applied with shouldDecompress set to YES (crashes):\n\nCG Raster data -~ 200MB+\nYour patch applied with shouldDecompress set to NO (does not crash):\n\nCG Raster data - ~ 3MB\n. @bbnnt: this is how to disable decompression -\nchange: \n_shouldDecompressImages = YES\n to: \n_shouldDecompressImages = NO \nin: \nSDImageCache.m\nSDWebImageDownloader.m\nSDWebImageDownloaderOperation.m\nThis assumes use of current SDWebImage which has @harishkashyap fixes included. In my case, this fixes the issue. Without this fix, ballooning memory that resulted in crashes every time (context is infinite scrolling tableview/collectionview cells). See my post further up the page\n. ",
    "delannoyk": "Had the same issue in my app (which use a lot of large JPEG images).\nThanks to @harishkashyap for the patch, works well!\n. @donholly I had the memory issue causing crashes on iPad 2. I didn't notice any performance issue applying @harishkashyap 's patch as an user of the app.\nImages I'm loading are quite large (some of them are bigger than 1000 x 1000).\n. ",
    "mallorypaine": "NSCache is definitely the problem. I added a PR #1130 which eliminates the memory spikes by allowing the in-memory cache to be disabled. \n. @rs Yes, implementing an in-memory cache with a cost feature that is actually never exceeded would also fix this issue. For my use case, I do want my images forcibly decoded on a background thread. That way, I don't get scrolling stutters when the images are ultimately displayed in a UIImage View.\nIf I turn off decompression (which I need), then the spikes appear to go away. However, the decompression is still unrelated to this issue. As I'm sure you know, a UIImage's memory consumption balloons the first time that image is actually drawn as that's when decompression + bitmap buffer allocation takes place. If I turn off decompression, then the UIImages that are in the NSCache are just lightweight pointers referencing file data, so the spike does appear to be fixed. However, as each UIImage is actually displayed via a UIImageView, it will be decompressed and its memory consumption will balloon significantly, and the NSCache will still be holding onto these larger images. If you actually displayed enough UIImages that were referenced by the NSCache, then the memory spike would be the same as if forced decompression were enabled.\n. @bbnnt there is definitely a solution to keeping unwanted memory from piling up. However, if you want to cache every image in memory then there your app's memory consumption will reflect the caching strategy. As I mentioned, I'm able to get precisely the behavior I need by disabling the NSCache. IMHO, NSCache is basically never worth using since its behavior is buggy and imprecise. It's also fairly trivial to build your own cache object that tracks cost of each item and then evicts based on LRU when the total cache cost exceeds what the app has configured. Maybe if I can find a spare hour or two I'll whip that up as it would be a true solve for this issue.\n. This is a workaround for #538. NSCache truly is the problem and by disabling it, memory spikes are completely eliminated. Some may argue that it's OK for NSCache to balloon since that device memory is \"available\" to be used by a cache, but as your foreground app consumes memory, it will cause apps in the background to receive warnings and to be exited. I'd rather my app be a good citizen by not ballooning in the first place. \nFWIW, setting the max cache cost to zero also doesn't prevent those huge spikes; disabling NSCache is the only way to achieve the memory behavior that my app needs.\n. @rromanchuk it will have zero impact on the scrollview's scrolling performance in terms of frame rate. the only impact this change will have is that images will take longer to load (and appear in your scrollview) since they aren't being stored in the cache.\n. ",
    "benbonnet": "@rs sorry to ask as I'm not that experienced in using sdwebimage;\nbut what's not obvious here to me, is wether there's a fix to apply to sdwebimage to play well with newer iOS version, or of if this whole discussion is just a long list of people using bad patterns, leading sdwebimage to misbehave ?\n. @harishkashyap thing is with this tons of posts of different flavors here; sorry if I bother but I'm lost\u2026\nWhat would be the simplest config to apply to get this to work properly, in order to apply your \"put off decompression\" statement ?\n. @foundry thx a lot for pointing this out ! I'll have a further look\n@mallorypaine you're saying there is no real solution to all this, hence this issue (debate) will never gets closed ?\n. @mallorypaine so it might not be really an sdwebimage problem; but more or less a memory management strategy if i get it well ? I'm not expert enough; an app  with lot of images developed without this experience/knowledge would at some point always crash then ?\n. @burakkilic  \"300 Pixel per Inch\" is default for print, not digital\n. ",
    "trungp": "I disable decompression  by changing: \n_shouldDecompressImages = YES\nto: \n_shouldDecompressImages = NO \nin: \nSDImageCache.m\nSDWebImageDownloader.m\nSDWebImageDownloaderOperation.m\nBut it looks like the memory is still so high. After scrolling the table view down to some large images, the app take up huge memory.\n\nCan any one can help me to explain what happened here and write down some points about this issue ?\n. @burakkilic : In your case, its weird. My app just lagging when I'm scrolling, it still happens on iPhone 5s but get no crashes. I don't know why the memory never get down or I miss somethings here.\n. I have a table view with a list of image urls. When the table scrolling down, it's show image on every row. That's all. For some first pages (about 20 rows per page), the table view is still smooth in an acceptable way. But from the page 3, the table view is going to lagging. I just keep a list of urls as text string for table view metadata and use SDWebImage to load image for imageView on table view cell.\n. ",
    "burakkilic": "I have exactly the same issue although I made the same changes. I have some jpg images (20) in a gridview, but 80kb for each. But app crashes after one or two scroll.\n. \nHere is the profiler screenshot. Images are like:\n\nI don't know what happens\n. 1536*1024 and 300 Pixel per Inch\n. Actually no. My client uploaded them. What is the optimum resolution?\nAdil Burak K\u0131l\u0131\u00e7\nOn Wed, May 13, 2015 at 11:13 AM, Konstantinos K. notifications@github.com\nwrote:\n\noh come on...thats huge. Thats why it crashes. Even if your size is 80kb\nyour images are large in resolution. You should also experience laggy\nscroll. Generally speaking you do not add large res images as thumbs in a\ntableview/collection view. You add smaller ones. Do you actually need 300\nppi for thumb images?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/538#issuecomment-101565312.\n. Thank you. I am downgrading to 72\n\nAdil Burak K\u0131l\u0131\u00e7\nOn Wed, May 13, 2015 at 1:11 PM, bbnnt notifications@github.com wrote:\n\n@burakkilic https://github.com/burakkilic \"300 Pixel per Inch\" is\ndefault for print, not digital\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/538#issuecomment-101609330.\n. @RunesReader I'm getting \n\nmaxCacheAge cannot be found in forward class of SDImageCacheConfig\n\nerror in 4.0.0 beta. How can I set that?. For 3.8.2 \n- (void)setupSDWebImageCache {\n    [[SDImageCache sharedImageCache] setMaxCacheAge:kARRMaxCacheAge];\n}\n\n. Can it be? I will test immediately. How can I set that?. I tested it with 3.7.6 and yes, it is because maxCacheAge. Customers who doesn't connect to internet more than 1 week, cannot see the images.\nBut in 4.0.0, I couldn't set the maxCacheAge. How can I set that?. ",
    "pajapro": "It seams like a long discussing around this particular bug, but is anyone still experiencing a huge growth in memory allocation when loading high resolution images? I experience this issue primary on iPhone 6. I tried the suggested solution (from fork https://github.com/harishkashyap/SDWebImage/tree/fix-memory-issues) to turn off \n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\nbut that does not solve the memory growth. For other low resolution images I see no significant growth\n. @bpoplauschi static images with high res. \n. ",
    "CavalcanteLeo": "+1\n. about 500kb each...\nshowing in a collectionview, about 18 images at same time...\nThe problem occurs when i scroll the collectionview, and request more and more and more images...\nMaybe i have to disable the memory cache and only store in disk.. but i have no idea how to deal with it\n\n. No, i havent, i will try this code... \nThe API returns me a lot of images already resized, so i choose witch one to use, depending of the iPhone resolution(100x100, 200x200, 500x500, 1000x1000, 1500x1500, 2000x2000)\nin this particular case, im using the 500x500 ( but the print of the collectionview with the images was using 100x100 for testing)\n. Btw, where should I use this code? appdelegate or viewcontroller?\n. On viewcontroller nothing changed... still increasing memory\n. \"thumbnail\": {\n      \"height\": 100,\n      \"url\": \"https://timehi.s3-sa-east-1.amazonaws.com/post/160c6ef0a2d2db2a6502.jpg\",\n      \"width\": 100\n    }\nthe 100x100 pixels image is about 4kb...\nand increase a lot of memory\n. i cant show the image as soon as the dowload finish, i have to implement some logic before with the image...\n. i will try right now\n. it still increasing memory with the code bellow:\n[cell.image sd_setImageWithURL:downloadImg completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n    if (image) {\n        BOOL isGrid = YES;\n        if (self.headerProfile.segmentedControl.selectedSegmentIndex == 1) {\n            isGrid = NO;\n            cell.image.delegate = self;\n        }else{\n            cell.image.delegate = nil;\n        }\n        [cell.image setupImageView:post indexPath:indexPath isGrid:isGrid image:image];\n    }\n}];\n. also have checked all strong and weak properties referencies... just to double check if the ARC is releasing all object correctly, but it's all right with it\n. I have to go now, but i will try in about 2 hours, tks by now\n. by changing setShouldDecompressImages to YES, in some benchmarks, my app performance went from 600mb to about 40mb\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\nand then from 50mb to about 6mb with this:\n[[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO];\n\nalso set some other properties (no impact changed):\n[[SDImageCache sharedImageCache] setMaxMemoryCost:1024 * 1024 * 1];\n[[SDImageCache sharedImageCache] setMaxCacheAge:3600 * 24 * 7];\nand on each viecontroller i clean the cache on viewDidDisappear and didReceiveMemoryWarning\n-(void)viewDidDisappear:(BOOL)animated{\n    [super viewDidDisappear:animated];\n    [self clearImageCache];\n}\n-(void)didReceiveMemoryWarning{\n    [super didReceiveMemoryWarning];\n    [self clearImageCache];\n}\n-(void)clearImageCache{\n    SDImageCache *imageCache = [SDImageCache sharedImageCache];\n    [imageCache clearMemory];\n}\nbut now, my problem is app performance, as i set ShouldDecompressImages to NO. \nWhen i scroll my collection view too fast, my app freezes a bit\n. it occurs on setShouldCacheImagesInMemory, just commented this line and it worked\n[[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO];\nBut if i don't use setShouldCacheImagesInMemory, SDWebImage will be really expensive, see https://github.com/rs/SDWebImage/issues/1544\n. ",
    "weng1250": "[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO]; is good for me to avoid huge memory cost when it is processing GIF format pics.\n. duplicate #538 Close please. \n. ",
    "songshp39": "image = [[UIImage alloc] initWithData:data]; \nThis init method will bring in a memory spike when the image data is larger than 1M.\n. ",
    "angeltwbtea": "__weak UIImageView iv = img;\n    [img setImageWithURL:[NSURL URLWithString:urlString] completed:^(UIImage image, NSError *error, SDImageCacheType cacheType) {\n        if (cacheType == SDImageCacheTypeNone)\n        {\n            iv.alpha = 0.0f;\n            [UIView animateWithDuration:0.5f animations:^{\n                iv.alpha = 1.0f;\n            }];\n        }\n    }];\n. ",
    "divanac": "I have tried the above on iOS7 and it does not seem to work. The image just appears after the defined duration passes. Any ideas?\n. ",
    "pfitz": "I just encountered this by myself. Just cd into your SDWebImage directory and do a \ngit submodule update\nYou have to download the git submodule for WebP.\n. ",
    "shiyingyan": "step: \n1\u3001 cd into your SDWebImage directory.\n2\u3001git submodule init.\n3\u3001git submodule update.\n. @mythodeia \nHello, how to get the WebP.framework. \nI clone the repository, and stepped above . But can`t find the WebP.framework. Please tell me.\nThank you!\n. @mythodeia \n Yes, but I just find the WebImage.framework !\nhow to generate WebP.framework?\n. ",
    "delebedev": "I go to this code path every time in my setup ([SDWebImageManager sharedManager].delegate is set, \n- (UIImage *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(UIImage *)image withURL:(NSURL *)imageURL is implemented)\n. https://github.com/rs/SDWebImage/issues/545\n. ",
    "2fours": "I'm noticing this on ios 7, I get a 200 back from the server with the data, then in SDWebImageDownloaderOperation  at line 134 the self.isFinished check is false so it calls didFailWithError. It seems as though isFinished is not getting set when the download finishes.\n. Looks like it might have something to do with this commit from Aug 22: https://github.com/rs/SDWebImage/commit/16e1a1fff6bea95ad87d53dc6c4120c21638c2f5. If I back it out things work. I don't see where _finished would get set to YES anywhere. \n. +1 for this\n. ",
    "mattdonnelly": "So does anyone have any idea what's going on with this?\n. Created a test project demonstrating the high memory usage of GIFs: http://cl.ly/STnC - Beginning to think it's a problem with iOS rather than SDWebImage\n. Did some more research in to this using Instruments and noticed that VM: ImageIO_GIF_Data gets called once for every frame in the GIF. I also noticed that the amount of memory allocated each time it gets called is equal to the size of the GIF, which would imply that iOS is reallocating the whole image for every frame in it when you assign an animated instance of UIImage to a UIImageView.\n. @hidefguy It seems to be fixed in iOS 7.0.1+. I'm not sure there's anything we can do to fix it on iOS 7.0 though\n. ",
    "hidefguy": "Has the SDWebImage source been fixed (this is causing a horrendous leak in my code).\n. Matt, this isn't my experience. I don't want to use the 7.1 beta since I only have one test device, but for me (like @kaishin) I can say for sure that I'm not seeing this fixed in 7.0.1. \n. ",
    "exherb": "I created a swizzle for SDWebImage + FLanimatedImage and works great.\nhttps://gist.github.com/exherb/1257263e350831d6c205\n. ",
    "lluisgerard": "It's interesting that I'd been using UIImageView+AFNetworking for some time now. \nI switched to SDWebImage recently and suddenly all my retina images (that I download from an API) are scaled incorrectly (1.0 when my device is retina 2.0). These images doesn't have any @2x at the end, I only get the size (ie: 640x400).\nBecause of this I discovered that AFNetworking approach uses the device scale ie: [[UIScreen mainScreen] scale] so I modified the SDWebImageCompat.m to get it (once) and use this scale value all the time.\nIt works well for me but I wonder what do you think. You don't always deal with images that have the @2x since some APIs work more by size rather than normal/retina, for instance tumblr API gets you different sized images so you can pick the one that fits better for you (these never have \"@2x\").\n. @rs the class that handles all the communication with the API also knows my device is retina and it only gets retina images then. I dont think about it as a good or a bad way to do things. Is just that in my case everything is exactly what I need for my device.\n. @rs That's true, it just happens that I have a parallax effect on one of my UIScrollView's that need to have an aspectFill mode (I use autolayout constraints with the amazing Masonry library) and that's why the first thing I noticed when I switched to SDWebImage was this. Anyway, thanks for this library, it helps me a lot and finally I don't see the same image downloading again and again, thank you.\n. ",
    "chrjs": "+1 for a \"scale\" parameter on setImageWithURL!\n. All my image URLs provide retina assets, and the URL string does not contains \"@2x\" string.\nThis is how I can solve the issue with SDWebImageManager, but I can't with [UIImageView setImageWithURL].\n[manager downloadWithURL:myURL\n                     options:0\n                    progress:^(NSUInteger receivedSize, long long expectedSize) { }\n                   completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished) {\n                        if (image)\n                        {\n                            UIImage *image2 = [UIImage imageWithCGImage:image.CGImage scale:[[UIScreen mainScreen] scale] orientation:UIImageOrientationUp];\n                            annotationView.image = image2;\n                        }\n                    }];\n. Try to remove arm64 from your Architectures in project settings. Leave only\n\"armv7\" and \"armv7s\".\n2014-03-11 21:49 GMT+01:00 aencarnacion notifications@github.com:\n\nI'm getting the following error when building my application\nld: warning: ignoring file\n/Users/Ricardo/Documents/eclipse/workspace/iOS7/git/SDWebImage.framework/SDWebImage,\nmissing required architecture arm64 in file\n/Users/Ricardo/Documents/eclipse/workspace/iOS7/git/SDWebImage.framework/SDWebImage\n(3 slices)\nUndefined symbols for architecture arm64:\n\"OBJC_CLASS$_SDImageCache\", referenced from:\nobjc-class-ref in vcArticleDetail.o\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see\ninvocation)\n\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/656\n.\n\n\nChristian\n. @aencarnacion: sure, I was just suggesting you a temporary workaround just to compile.\n. ",
    "jonnolen": "I'm +1 for scale parameter on setImageWithURL, I'm going to take a  stab at implementing that tonight.\nIf all of your urls provide retina assets then set the cachekeyfilter block to something like this:\nobjective-c\nSDWebImageManager.sharedManager.cacheKeyFilter = ^NSString *(NSURL *url){\n        return [[url absoluteString] stringByAppendingString:@\"@2x.hax\"];\n    };\nI think this is the RIGHT way given the existing constraints if you know that all of your images that are being cached are going to be @2x.\n. ",
    "objectiveSee": "This deserves an update to the README as well.\nOn Tue, Feb 18, 2014 at 6:42 PM, jonnolen notifications@github.com wrote:\n\nI'm +1 for scale parameter on setImageWithURL, I'm going to take a stab at\nimplementing that tonight.\nIf all of your urls provide retina assets then set the cachekeyfilter\nblock to something like this:\nSDWebImageManager.sharedManager.cacheKeyFilter = ^NSString (NSURL url){\n        return [[url absoluteString] stringByAppendingString:@\"@2x.hax\"];\n    };\nI think this is the RIGHT way given the existing constraints if you\nknow that all of your images that are being cached are going to be @2xhttps://github.com/2x\n.\n\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/pull/549#issuecomment-35404038\n.\n. I would be interested in seeing benchmarks if you perform any comparison\ntests!\n\nOn Tue, Dec 3, 2013 at 1:44 PM, donholly notifications@github.com wrote:\n\nI'm going to do a re-work of this. I want to move this stuff into\nSDImageCache instead of making a new operation. The speed of getting them\ndirectly from ALAssetsLibrary is significantly faster than getting it\non the OperationQueue and forceDecoding them.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/pull/561#issuecomment-29738401\n.\n. \n",
    "ionel71089": "I'm not getting this update when using SDWebImage from cocoapods. How can I get this update ?\n. Thanks.\n. ",
    "danpe": "To use the edge of SDWebImage you'll need to specify the repository in your pod file:\npod 'SDWebImage', :git => 'git://github.com/rs/SDWebImage.git'\nthen rerun pods Install\n. ",
    "zhangle": "I have the same problem\n. ",
    "tzuyangliu": "use options\n. ",
    "JoshuaGross": "Thanks for catching that. Also, I changed NSInteger->NSUInteger. \n. Could you please also update the CocoaPods podspec? \n. I must be missing something. 3.5 is the latest here: https://github.com/CocoaPods/Specs/tree/master/SDWebImage\nAnd I don't see any relevant pull requests. What should I be looking at? \n. Can you run pod push master? We're still stuck on 3.5 in the podspec.\nhttp://guides.cocoapods.org/making/making-a-cocoapod.html#release\n. And/or this. http://guides.cocoapods.org/making/specs-and-specs-repo.html\nIt looks like someone else has been doing this for you for previous releases? \n. @bensie I realize this, and I'm currently using a repo target with the 3.5.1 tag. I also think it's problematic that the official podspec is outdated. \n. Agreed, however, I would also like to discuss this with @rs as he is the maintainer. If he thinks the podspec will update automatically, it appears that is incorrect, and he should know that. If his response is \"you do it\" I will respectfully comply for now, but this is not my project and I will not be updating the podspec for future versions (one of my PRs is included in 3.5.1, which is why I care more about it and was even aware that the podspec was outdated).\nI could just go solve this problem for Olivier but the underlying issue would still be there, which is why I'm waiting for his response. \n. ",
    "haxinc": "You must use DIRECT URLS\n. ",
    "klaaspieter": "Yes. I will extend it to the other categories somewhere this week.\nHow would you suggest I detect the change of the image property? Since this is a category I don't think it's a good idea to implement the image property since that will override the default implementation. \nThe only option I think is to use method swizzling which a lot of developers still consider dangerous. I personally don't have a big issue with it because, as the author points out, it can be useful when used appropriately.\nBefore I go down this road let me know if this is an acceptable solution.\n. I think KVO has the same problem as simple overriding the -image method on UIImageView. If the default implementation of UIImageView has implemented observeValueForKeyPath:ofObject:change:context: then implementing it in the category will replace that implementation. This has the possibility of creating obscure really hard to find bugs.\nThe only solution that I can think of that doesn't involve method swizzling is subclassing UIImageView.\n. @rs Done. Let me know what you think.\n. Done.\n. ",
    "famu1hundred": "Did this ever make its way into the master branch? When I downloaded the SDWebImage 3.5 framework, the ALAssetsLibrary code wasn't included. How can I get it in the *.framework file?\n. Thanks for the quick reply. It looked like your repo doesn't contain the SDWebImage.framework file. Its ok though. In the meantime I solved my problem with a quick IF statement\n. ",
    "mknippen": "added, thanks!\nOn Nov 26, 2013, at 7:45 PM, Olivier Poitrey notifications@github.com wrote:\n\nNice addition. Could you add a return before the open bracket in order to comply with the coding style of the project please? I'll merge it then.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "tbergeron": "My bad, doing a property called imageView over UITableViewCell's one is a bad idea folks.\n. ",
    "luin": "I come across the same issue. Does anyone find a solution for that?\n. ",
    "Simon-Tseng": "How to use TimeProfiler for improving scrolling performance:\nhttps://developer.apple.com/videos/wwdc/2014/ => \"Improving Your App with Instruments\"\n. ",
    "iSpartak": "same here. I have the similar problem with another framework.  Any workaround?\n. ",
    "khazaei": "I think I had to put in all the SDWebImage source and header files and compile that way\n. ",
    "bensie": "@JoshuaGross CocoaPods supports git targets, so you can point directly at rs/SDWebImage rather than relying on an official podspec in CocoaPods/Specs. In the case that the podspec defined in rs/SDWebImage is outdated or not quite what you need, you can go further and write your own and put it in a Gist, pointing Cocoapods at the raw version of the gist. Great for forks or if you want to bind to a particular commit.\n. @JoshuaGross Nothing is stopping you from opening a PR on CocoaPods/Specs with the updated spec.\n. You're experiencing a UICollectionViewCell reuse issue. Nothing to do with SDWebImage, you need to prepare your cells for reuse to ensure images are nulled out before they are shown. Have a look at the documentation for prepareForReuse and define it in your UICollectionViewCell subclass.\n. ",
    "samux87": "Same problem here! \nApp crash when is called: \n[UIImageView setImageWithURL:placeholderImage:completed:]\nFrom Console:\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[UIImageView setImageWithURL:placeholderImage:completed:]: unrecognized selector sent to instance 0x115138120'\n. i have tried both: \n- \"-ObjC\"\n- Downgrade to 3.2\nNoway.\n. ",
    "salazarfelipe": "An alternative is downgrade to 3.2 version.\n. Now is working, update to the last version\n. ",
    "revg75": "I too have been forced to use AFNetworking as well.... too bad\n. ",
    "Piero87": "yes\n. ",
    "chresko": "My implementation is janky... wasn't meant to go back into the project. Let me clean it up!\n. ",
    "ebfg": "@chresko any update on this? We just ran into the same problem\n. ",
    "ikesyo": "This should be reopened since this is now re-broken by the change in #1540.\n. Thanks for accepting.\n. Looks like this reopens #576 and broke our code base sadly. \ud83d\ude1e \n. I know because the merge commit is coming from just this PR. Could you reconsider this? #576 should be reopened for now to track the issue.\n. I'm facing the same or similar issue with the latest version (4.2.3).. > And to say, what's the problem for using _UIAnimatedImage for UIButton ? I tested it and it works as normal static UIImage.\nI'm not sure why but when a cell is reused the button's image view is empty (single-frame gif animation is played and stopped?). I'm working around this with the following:\n```swift\nbutton.sd_setImage(with: url, for: state, placeholderImage: nil, options: [ .avoidAutoSetImage ]) { image, , , _ in\n    let image = image?.images?.first ?? image\n    self.button.setImage(image, for: state)\n}\n```. Anyway closing this for now. Thanks for the response!. ",
    "vincentjames501": "Whoops, sorry about the typo in the commit log.\n. Thanks @bpoplauschi !\n. No I do not. I noticed that the demo one was working on my iOS 8 simulator however but I haven't tested beta 2.  \n\nOn Jun 18, 2014, at 5:37 PM, Ryan Romanchuk notifications@github.com wrote:\n@vincentjames501 do you have a fork that's working for ios8?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "zldrq": "by the way, i just forgot to turn off Network Link Conditioner with which i'm testing app on slow connections and this site is working pretty fast on EDGE.\ni even tried to search some images of doges and i see plenty of them in about 20 seconds.\nbut sdwebimage failed to load previously mentioned images  even on what considered by apple as \"3G avarage case\". that's pretty putting me on guard =((\n. ",
    "lukaspili": "That would actually be useful.\n. ",
    "todaylover": "very useful,thx\n. set thread  [NSThread currentThread]  in start method?\n. ref http://www.objc.io/issues/2-concurrency/concurrency-apis-and-pitfalls/#starvation\nbarrierQueue block main thread \n. same issue\n. ",
    "jenshandersson": "It's all cleaned up! Sorry about that ;) @rs \n. Was just about to open the same PR, you beat me to it :)\n. ",
    "bkoc": "I've the same issue but I've never thought that it might be related to sdwebimage since I have many views overlaid. \nWhen it happens if i inspect the app and play with the content offset of the internal UITableViewCellScrollView of the corresponding UITableViewCell it returns to normal. Most probably it's a UIKit bug but it is so hard to catch because it happens randomly.\nI experience the same issue with the Zite app also. \n. Are you using any additional gesture recognizers?\n. I can confirm that this issue is not related to SDWebImage and it should be closed. \n. For anyone landed here looking for a solution, here is a dirty workaround to overcome the issue.\nIn short disabling scroll  property of the internal UITableViewCellScrollView avoids the locked scroll issue.\nYou can apply this in your custom cell initializer \nObjective-C\n        if([self.subviews.firstObject isKindOfClass:[UIScrollView class]]){\n            UIScrollView *uitableViewCellScrollView = (UIScrollView*)(self.subviews.firstObject);\n            uitableViewCellScrollView.scrollEnabled = NO;\n        }\nNote that this is not a good idea if you are using swipe gestures and uitableviewcell states, swipe to delete etc...\n. ",
    "onmyway133": "@donholly many thanks\n. @bpoplauschi @brynbodayle can you explain why it helps prevent the issue of images not loading randomly? How is runningOperations involved?\n. I see that there is no size difference\n. @bpoplauschi sometimes we have requirements to have different caches in a project. So having ability to change imageCache of SDWebImageManager is on demand. Since SDWebImage is abusing Singleton all over its code base, I don't know override property accessor will do any harm :|\n. @bpoplauschi I have different SDWebImageManager with different SDImageCache, and it works for me so far. Thanks\n. So it has nothing to do with decompression, it is because the images contain unused meta data\nResize\n\nThe original image is 290x290, then I specify half CGRect (which is 145x145), but my device scale is 2, so the result image is 290x290\nUIGraphicsBeginImageContextWithOptions & UIImage -drawInRect: strips the meta data out, so the resized size is much decreased\n\nSize (in byte) detection\nThe result size does not take meta data into account\n. @bpoplauschi @mythodeia I see that the problem has nothing to do with SDWebImageDecoder, it is just misunderstanding the usage of image. So I think it is enough :] Also, I sum up in this Understanding SDWebImage \u2013 Decompression\n. @bpoplauschi I group similar code into 1 method, so that it is DRY\n. @bpoplauschi thanks, currently SDWebImage uses ioQueue, which is sufficient for me.\n. @bpoplauschi @mythodeia thanks, currently my workaround is to delete the images first, then download. SDWebImage uses serial ioQueue which is good for me so far\n. ",
    "fatuhoku": "What's an inexpensive way to check if an image is cached in memory? Is it okay just to access -(UIImage *)imageFromMemoryCacheForKey:(NSString *)key;? Is this expensive?\n. Bump \u2014\u00a0@rs, @flovilmart any thoughts on this?\n. @flovilmart Hmmmmmm. I've actually come around to calling it WebImage. I'm sure it was done for good reason... was just surprised it wasn't written in any change log.\nI wanted to put this out there to see if anyone else cares / prefers it one way over another.\nI'll close this for now.\n. ",
    "PKrupa94": "SDWebImageManager.h file you can find one method \n/ - (BOOL)cachedImageExistsForURL:(NSURL *)url;\nUsing this method you can check. ",
    "EmperiorEric": "Also interested in a sync alternative that just returns quickly. Or potentially a way to load only images that are cached.. Yea I'm working with an API where I don't get the size until the image loads. And I'm storing them in a UICollectionView which is very upset to recalculate the sizes multiple times for cells since on scroll the images are still loading async. I'm having to set a fixed size for the images as a work around at this point. There must be a way to make it work but the collection view was very unhappy. Scrolling performance dropped to 10fps because of the images loading from cache so quickly but not instantly.\nI tried using a DispatchGroup to wait if I knew the image was cached, but it was still too slow. \nI think with a method to load a cached image from memory synchronously, I'd have been able to pull it off. Because I could do that or if it was null, I could give the cell a default size and wait for the image to load. But there would be sufficient time at that point for the load that the collection view would only be sizing cells seconds apart rather than ms apart.. Yea I was looking for an in memory cache check I could use, since the size would be called immediately after the image loads the slower way.\nBut I guess we'll live with fixed size for now until we can write our own cache or write our own API that returns the size of the image in the initial object load.. ",
    "SpaceTimeLoop": "I always receive memory warning, from the instruments I get the above result.The decodedImageWithImage consume a lot of memory\uff0cSo I want to know whether there are other ways to reduce memory usage\n. ",
    "cameroncooke": "I'm having same issue. I have iPad app that loads lots of images and app was crashing, ran in Profiler using the Allocation template and decodedImageWithImage is using 200+MB in my app which then causes memory warnings and crash.\n. Also this memory shows up as Live Bytes surely this would great released once the image decoding has finished?\n. ",
    "nexuspad": "I'm having the same problem too. Though it's not a library issue it does cause problem on some device like iPhone 4S. Same code runs totally fine on 5S, with more room to claim and release the memory.\n. ",
    "Bluezen": "I found this thread on stack overflow which presents a different way to decompress an image introduced with iOS7:\nhttp://stackoverflow.com/questions/22994153/image-decompression-in-ios-7\nMaybe this could help decrease memory used in the process...\n. Hello @bpoplauschi and @akhenakh ,\nI discovered FLAnimatedImage thanks to this post and I have been impressed by how well it handles heavy GIF.\nI had a quick look of how I could integrate it in one app that make use of SDWebImage. If I get it well SDWebImage needs to be slightly modified beforehand to really take advantage of what FLAnimatedImage offers.\nFLAnimatedImage requires us to use their UIImageView subclass which handles GIF exclusively by taking NSData as input.\nI thought that maybe I can use the asynchronous downloader SDWebImageDownloader to fetch NSData and then decide how to decode/render it.\nProblem: The underlying SDWebImageDownloaderOperation is designed to always process the received NSData in an UIImage before calling the completedBlock.\nI can make use of the NSData returned in an SDWebImageDownloaderCompletedBlock to feed FLAnimatedImage correctly if it is a GIF but I would like to avoid \"sd_imageWithData:\" which is executed in connectionDidFinishLoading of every SDWebImageDownloaderOperation:\nobjc\n- (void)connectionDidFinishLoading:(NSURLConnection *)aConnection {\n    ( . . .)\n    if (completionBlock)\n    {\n        if (self.options & SDWebImageDownloaderIgnoreCachedResponse && responseFromCached) {\n            completionBlock(nil, nil, nil, YES);\n        }\n        else {\n            UIImage *image = [UIImage sd_imageWithData:self.imageData];\n            NSString *key = [[SDWebImageManager sharedManager] cacheKeyForURL:self.request.URL];\n            image = [self scaledImageForKey:key image:image];\nI would like to be able to avoid creating an UIImage of an NSData in this situation to let FLAnimatedImage handles exclusively alone the process of working with the NSData (and hopefully avoid at the same time the anormal memory growth). \nI think that the async downloader of SDWebImage is valuable even if it only hands an NSData.\nI would like to have your thoughts on adapting the download managing part of SDWebImage to achieve that. Is it not too far from the original purpose of SDWebImage?\nThis could be done by adding a new specific SDWebImageDownloaderOptions(OnlyNSData). Then checking in connectionDidFinishLoading if the option is set to avoid creating the UIImage and provide only NSData to the completionCode... but then there is also the topic of the caching feature that would need to be tweaked to if we want to use it with NSData instead of caching only UIImage in memory and on disk (if I'm not wrong).\nThanks in advance!\n. Ok, a quick follow-up of my first post; after reading @bpoplauschi blog post  I have a better picture of the whole process and where the memory's consumption problem with GIF is.\nWhen dealing with GIF creating the UIImage instance (sd_imageWithData: => sd_animatedGIFWithData) takes indeed memory and CPU time but it seems nothing compared with decompressing and displaying it on screen (UIImageView.image). Every image of the GIF are decoded and attached to the image object. \nI am not so sure anymore if it would be worth to offer an option to skip the creation of an UIImage. Plugging SDWebImage with the current FLAnimatedImage would benefit of this option to not create twice the UIImage but if we want to benefit of SDWebImage caching features it would mean rewriting most of it's logic to handle NSData in addition to UIImage... which I have no idea if it would be totally silly or not? (We can write NSData to disk...)\nModifying FLAnimatedImage to handle UIImage instead of NSData could be the right thing to do but I'm not sure if the way SDWebImage creates the GIF UIImage matches the way FLAnimatedImage honors variable frame delays of GIFs.\nPlease correct me if I state something false. I started digging into the whole process of image decoding only very recently, your knowledge on the topic is far more complete than mine but I would like to help move the problem with GIF if I can.\nThe best solution of course would be to integrate in SDWebImage the Producer\u2013consumer solution used by FLAnimatedImage without having to subclass UIImageView, but that seems much more work.\nWhat do you think of modifying SDWebImage to offer the possibility to cache NSData and provide only NSData with no UIImage? \n. @albertgh completed block of downloadWithURL:already return an NSData: \nobjc\ntypedef void(^SDWebImageDownloaderCompletedBlock)(UIImage *image, NSData *data, NSError *error, BOOL finished);\nAre you trying to use FLAnimated with SDWebImage? I was hoping to discuss with someone of the necessity (or not) to modify SDWebImage beforehand.  Like I said in my two previous message, I think we should add the possibility to:\n- prevent SDWebImage to create an UIImage and return only an NSCache when downloading a GIF\n- cache NSData directly instead of UIImage, at least for GIFs\n. @albertgh yeah, I personally can't say the exact amount of things to change in SDWebImage if we want to store NSData objects next to UIImageobjects in memCache.\nIn-memory caching of NSData could be a lot of work (or not?) but SDImageCache is already able to save an NSData to disk without the use of an UIImage.  Saving/Reading from disk the NSDataof a GIF without ever creating an UIImage seems at least feasible with a reasonable amount of modifications.\n. @albertgh what I meant was to store in memCache NSData instead of UIImage when we want it and not to store both NSDataand UIImage objects for every images. But that might be a bad idea.\nI think your idea of skipping memCache for GIF and go straight to disk cache is worth investigating!\n. @maha-ghonam  This fork of SDWebImage has a very nice solution yes. It prevents an UIImage to be created uselessly if you plan to handle GIFs with another library (You should have a look at these particular lines) and it correctly handles NSData caching. \nYou can use YLGIFImage to handle the GIFs and continue to use SDWebImage thanks to SDWebImage-YLGIFImage and the specified fork of SDWebImage.\nOr you could use DFImageManager instead of SDWebImage if you really want to use FLAnimatedImage.\n. @maha-ghonam YLGIFImage works perfectly well for me, even with heavy GIFs it uses very low memory. Have you made your tests on real devices? About the UI blocked you should check your code, it shouldn't be SDWebImage-YLGIFImage's fault. Good luck! \n. ",
    "luna-moonfang": "My question is when my app back to background, how can I explicitly release these memory since my app doesn't need to display the images when it is in background state. \n. That would be nicer!\nI'm using it to download and cache images for a html. So it has to place the images to the relative position of the js file. So the js code could find the images easily.\n. ",
    "daveklotz": "We are having the same problem. Short circuiting decodeImageWithImage with a \"return image\" seems to solve our problem, and hasn't seemed to cause any problems. At least not yet.\nThis seems to have been open for a while. Any chance of this being addressed @rs ? I don't want to have to use some separate fork, or ditch SdWebImage altogether, but we can't live with this as an issue.\n. ",
    "vivekseth": "This appears to still be buggy on 3.7.3. I'm loading a total of 30 images and seeing a roughly 300mb allocation from this method \n. ",
    "krupanshu": "is there any workaround to solve this memory issue ? Any help or guidance will be very helpful.\n. ",
    "lzyy": "since ioQueue is serial, it may be blocked somewhere, so the block callback have to wait.\nimageFromDiskCacheForKey is fast if the image is already in RAM.\n. may be after u scroll for a duration, images memory is recycled by system, so the next time you scroll to the imageView it has to read from disk, it may cost some time, like you see.\nif u don't put a placeholder then the 0.1-0.2 seconds just become blank, you sure this is what you want?\nor you can use SDWebImageManager to deal with yourself, combine with prepareForReuse\n. make sure your key exactly match you use when using manger to download.\n. ",
    "jiwq": "Yeah, I reviewed the pre comments, and I know you had fix this issue. Thx! @bpoplauschi \n. ",
    "croigsalvador": "When I don't put an image in the placeholder, the others images already loaded appears instead a blank image. So, it is weird.. any idea? How do you solve this?\n. ",
    "K232": "Thanks for the info. imageFromDiskCacheForKey has to contain the full URL, not just the filename. This fixed the problem!\n. ",
    "andrey-krukovskiy": ":+1: \nCurrent solution uses much memory, and we experienced problems with it. Seems that it may results in crashes due to huge memory consumption in some cases. \nI found that current solution was introduced by PR #33. But when we replace content of decodedImageWithImage: method with just return image; it working not worse than early.\n. I meant that no some visible delays were for me. May be for last 2 year performance of devices were increased, or may be I just miss it. I'm not sure in it, because I'm not performed special comparison for it.\n. ",
    "phamquy": "i have the same question, but as stated in #33, \"undecoded\" will cause \"visible delay\". I think it would be better solution if we can opt out \"forceDecode\" option.\n@andrey-krukovskiy what do you meant by \"working not worse than early\"?\n. anyone?\n. Hi. After several server update. I cn not reproduce this. Its probably srcer problem. \n. ",
    "dclowd9901": "Found in SDWebImageCompat.h\n. ",
    "lhinojosa": "I have the same issue on the released Version 5.1 (5B130a). Is there any fix for this?\n. We downloaded version 3.6 and this line doesn't have the inline neither:\nextern UIImage SDScaledImageForKey(NSString key, UIImage *image);\n. ",
    "oxxy": "me too :+1: . I fixed it by deleting the 'inline' keyword in SDWebImageCompat.h.\nThank you so much \n. ",
    "matux": "Happened the same to me with my own code. The warning is incorrect and the function is being correctly recognized during linking.\n. Already did! https://github.com/rs/SDWebImage/pull/876\nThanks for the interest, @bpoplauschi !\n. Main change in this chunk is on line 133, rest is indentation adjustment.\n. ",
    "mithunbera": "I fixed it by deleting the 'inline' keyword in SDWebImageCompat.h.\nThank you so much\n. me too :+1: . I fixed it by deleting the 'inline' keyword in SDWebImageCompat.h.\nThank you so much\n. ",
    "ratulSharker": "deleting inline from the SDWebImageCompat.m fixed my problem (Y) . ",
    "arashpa": "I have the same issue in Version 5.1 (5B103i).\n. ",
    "autoappjords": "Still in public release- Version 5.1 (5B130a)\n. ",
    "jurjen-van-dijk": "It's not an error, it's a warning.\nTo get rid of it, change the line to:\nfor (__attribute__((unused))NSString *fileName in fileEnumerator)\n. ",
    "Ganster41": "Why loop here? Why not something like this?\nNSArray* files = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:diskCachePath error:nil];\nreturn [files count];\n. ",
    "ghousesgb": "Hi Seanrice did u get the solution????\nDoes anyone got the solution to get rid of this warning.\nI am also getting same 2 warning as said by seanrice on Mar 14\n. ",
    "natedesigns": "This is the same issue that i'm getting! Though have you added -ObjC to the Linker Flag?\nSince your message there has been another release but this still hasn't solved the issue for me.\n. Yes it does.\nI did try this initially but must have had my dunce hat on as when I clicked through to the .h file from the method instantiation it took me to: MKAnnotationView+WebCache.h\ntrying to build failed - but on looking in more detail, as i'm sure you did first time, by including the: UIImageView+WebCache.h it does indeed work for 64-bit!\nThanks\n. ",
    "piyushkumar111": "I have added all this three flags (-ObjC or -force_load & PATH_TO_LIBRARY_FILE).\nAnd added framework using CocoaPods. Still its show me error like this.\n. ",
    "berained": "download : https://chromium.googlesource.com/webm/libwebp\nbut feel not good schemes\n. thx\n. ",
    "bw0lff": "Hi,\nThe issue is still happening, but I can't relate it with the lib anymore\n(since it happens also when using AFNetwork lib).\nCheers,\nJorge Miguel\nOn 15 June 2014 16:19, Bogdan Poplauschi notifications@github.com wrote:\n\n@bw0lff https://github.com/bw0lff does this issue still reproduces for\nyou? On which SDWebImage version? Do you have some specific steps? How did\nyou checked?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/614#issuecomment-46118498.\n. \n",
    "akhenakh": "Need to update the Demo to reflect recent changes, change your block  to NSInteger, NSInteger and you are fine\n. Will be fixed, thanks for the report\n. ",
    "Lings": "It's resolved the problem in iOS 7, but still exist in iOS 6.\n. I test it again, the problem already exist, whatever on iOS 7 and  iOS 6.\nI test it on my iPhone 5s (iOS 7) and iPhone4 (iOS 6),  on iPhone4 the problem appear easily, on iPhone 5s, I need scroll very very fast can make the problem appear.  \nIt always stops in this line:\nif (!self.isFinished) {\n            [self.connection cancel];\n            [self connection:self.connection didFailWithError:[NSError errorWithDomain:NSURLErrorDomain code:NSURLErrorTimedOut userInfo:@{NSURLErrorFailingURLErrorKey : self.request.URL}]];\n        }\nI think the reason is CFRunLoopStop.  another operation's cancel method trigger the CFRunLoopStop, then the first operation continue run to the code above.\nBut I have not get the resolution yet.\n. YES \uff0c I merged,  you can test it with the SDWebImage demo.\n. I used my own image set.  404 is image host problem, but my images are all correct.\nYou need test it on iPhone, not simulator.  scroll screen as fast as possible.\n. yes, I just use sdwebimage demo, and only replace the sample image set. \n. ",
    "akavalera": "I tested it on iOS 6, 6.1 and 7 and it works fine for my app. I am using it with UICollectionView cells and the only difference from standard workflow is that I am loading low resolution image first and replacing it with high resolution image right after that.\n. Have you merged my commit with the fix? https://github.com/rs/SDWebImage/pull/621/files\n. I have checked the demo app, it has issue you are talking about. I used Charles to understand what is happening. Look at the attached screenshot please. Sometimes the image hosting returns 404 error instead of image. Please try on your own image set.\n\n. As I sayer before it works fine on my side. Can you post a part of code where you are loading image? Are you using UIImageView+WebCache.h category?\n. ",
    "Casuist": "Does this only happen when running the project on a 64-bit device/simulator?\nIf so, you may find a workaround here: https://github.com/rs/SDWebImage/issues/494\nSomeone mentions changing the architectures in the build settings to exclude 64-bit. \n\nI was having similar issues and it took me half a day to find the answer. \nSDWebImage needs to be updated for 64-bit devices. \n. I'm having the same issues.\nIs this the compiler being buggy?\nEDIT:\nAlright so it doesn't like the BOOL being all lowercase anymore. \nYou need to add camel casing for it to not throw an error. \nSo instead of \"executing\" it needs to be \"isExecuting\" or something similar. Try it and watch the errors disappear. \n. ",
    "popei69": "Thanks, this helps me a lot.\n. ",
    "xiashj": "I was having the same problem, I solved it by adding libSDWebImage+WebP.a in Build Phases Link Binary With Libraries\n. ",
    "SamKun28": "I was having the same problem, I solved it by adding libSDWebImage+WebP.a in Build Phases Link Binary With Libraries,me too. ",
    "rogermoffatt": "Hmmm ... I'm taking an interest because I'm getting deadlocks frequently at present.\nhttps://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSFileManager_Class/Reference/Reference.html\n\"The methods of the shared NSFileManager object can be called from multiple threads safely. However, if you use a delegate to receive notifications about the status of move, copy, remove, and link operations, you should create a unique instance of the file manager object, assign your delegate to that object, and use that file manager to initiate your operations.\"\nI can fix my problems by modifying SDWebImage to ignore the synchronous ioQueue.\n. ",
    "joshuaseltzer": "I'm seeing the same problem in my application.  I fixed the problem by using the defaultManager for NSFileManager in the diskImageExistsWithKey method and removing the synchronous block (as mentioned above).\n. ",
    "leafduo": "Same problem here, and issue #507 is the same thing. Could we fix it?\n. As discussed in #494, it's a bug in current version of libwebp. libwebp does not support ARM64 correctly, therefore disabling ARM64 support will confirm this pull request works.\n. Did you install webp support via CocoaPods? Like pod 'SDWebImage/WebP'\n. OK, I find the reason.\nWe have -all_load set in other linker flags.\n. Any update?\n. ",
    "gossnj": "This is an ongoing issue for my project as well.\n. ",
    "iOSBrett": "I have also changed my version to use default manager to fix a 14 second deadlock I was experiencing:\n- (BOOL)diskImageExistsWithKey:(NSString *)key \n  {\n  return [[NSFileManager defaultManager] fileExistsAtPath:[self defaultCachePathForKey:key]];\n  }\nHave not encountered any issues with initial testing and my App uses SDWebImage heavily.\n. ",
    "MirkoBrunner": "No idea, i have the same issue. clearDisk remove only the folder /Library/Caches/ImageCache.\nSFWenImage::cleanDisk does nothing. \nUnder /Library/Caches/[bundle ident]/ the files and folder (fsCachedData) are not removed. \n. No sorry, i have no solution. I think the iOS need the '@2x' prefix. \n. Yeah! I found a solution for this problem. Simply put: \"@ 2x.png\" add to the end of the URL and everything is in order. Note: The server ignores \"@ 2x.png\". I think before the loading stuff starts SDWebImage adds the \"@2.png\" prefix to the given url.\n. ",
    "iziz": "@rs Thanks for fast reply.\nI know that option but it always caused 1001 error (request time-out) when scrolling (very fast) in UITableView. \nSo I don't want retry for non-visible cells. and just want to request later when cell visible.\nex) using below code too\n    - (void)prepareForReuse\n    {\n        [super prepareForReuse];\n        [_mainImageView cancelCurrentImageLoad];\n    }\n- (void)dealloc\n{\n    [_mainImageView cancelCurrentImageLoad];\n}\nOr do you have any idea ? (using always \"SDWebImageRetryFailed\" option ?)\n. ",
    "allaire": "Same issue here...\n. Might be because no placeholder was used?\n. ",
    "emanuelef": "I found someone else already asked:\nhttps://github.com/rs/SDWebImage/issues/335\nBut there's no answer to the question:\nis there no need to cancel a download operation now ?\nThanks\n. ",
    "puneetchd": "@hupadhyayula I am also facing the same issue, downloading speed is relatively slower that AsyncImageView. Any solution yet?\n. ",
    "alexwald": "me too.\n. +1 for NSURLSession\n. ",
    "damirstuhec": "Me too.\n. ",
    "rkoirala": "I receive the same issue. I have used SDWebImage in a paging app. Memory warning is received and the app crashes.\n. ",
    "Shamsiddin": "it's happening on my project when I run it in real device, but in simulators everything is ok. Could someone show me what to do?\ndevice: iPhone 4 with iOS7\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[UIImageView sd_setImageWithURL:placeholderImage:]: unrecognized selector sent to instance 0x17522f00'\n. I'd reopen this issue. It isn't fixed.\n. ",
    "alirezaLG": "That damn issue just killed whole my time !!\nBut finally it solved, just follwo this instruction:\nhttps://github.com/Alamofire/Alamofire#embedded-framework\n. That damn issue just killed whole my time !!\nBut finally it solved, just follwo this instruction:\nhttps://github.com/Alamofire/Alamofire#embedded-framework\n. ",
    "gali8": "You can download the framework with x86_64 support, from here http://goo.gl/10gJrU\nor\nyou can download the source code from this repo and build it.\n. If you wanna use the activity indicator, download here the framework with x86_64 and activity support. http://goo.gl/FTGie6\n  for import the activity category.\n. ",
    "tijmenb": "I've upgraded to 3.4.5. Any idea why I'm still getting this warning?\n. ",
    "Urkman": "Yes, please push... We need the new version...\n. Is there already a solution for this?\n. ",
    "jfahrenkrug": "This is a crash log I'm getting on iOS 5.1.1: \n```\nDate/Time:       2014-05-26 16:45:25.218 -0400\nOS Version:      iPhone OS 5.1.1 (9B206)\nReport Version:  104\nException Type:  EXC_BAD_ACCESS (SIGSEGV)\nException Codes: KERN_INVALID_ADDRESS at 0x6692948d\nCrashed Thread:  0\n                                        0x338eff86 objc_msgSend + 30\n\n1   libobjc.A.dylib                 0x338f1f8e objc_retain + 30\n2   libobjc.A.dylib                 0x338febde objc_retainAutoreleasedReturnValue + 34\n3   MyApp                                   0x000b30d2 -[SDImageCache queryDiskCacheForKey:done:] (SDImageCache.m:284)\n4   MyApp                                   0x000b6b24 -[SDWebImageManager downloadWithURL:options:progress:completed:] (SDWebImageManager.m:104)\n```\nThanks!\n. ",
    "zakhej": "still gettin' it in 2k17\n\n. Hi @bpoplauschi, currently I do not have access to that project in which I found the bug, so I can't give you more information.\n. ",
    "marckaraujo": "same problem here, it happens after a long wait of the app running.\n. ",
    "snpatil1": "Crashed: com.apple.main-thread\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS at 0x6874676e656c0000\n-[UIButton(WebCache) webImageManager:didFinishWithImage:forURL:userInfo:]\nThread : Crashed: com.apple.main-thread\n0  libobjc.A.dylib                 0x000000019934c0c0 objc_retain + 32\n1  app                                      0x00000001000b95f8 -UIButton(WebCache)     webImageManager:didFinishWithImage:forURL:userInfo:\n2  app                                     0x00000001000b7cc8 -SDWebImageManager imageDownloader:didFinishWithImage:\n3  app                                      0x00000001000b5560 -SDWebImageDownloader imageDecoder:didFinishDecodingImage:userInfo:\n4  app                                      0x00000001000b3cbc -SDWebImageDecoder notifyDelegateOnMainThreadWithInfo:\n5  Foundation                    0x000000018d9b05cc NSThreadPerformPerform + 328\n6  CoreFoundation             0x000000018cdef044  __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION + 24\n7  CoreFoundation                 0x000000018cdee3a0 __CFRunLoopDoSources0 + 256\n8  CoreFoundation                 0x000000018cdec638 __CFRunLoopRun + 632\n9  CoreFoundation                 0x000000018cd2d6d0 CFRunLoopRunSpecific + 452\n10 GraphicsServices               0x0000000192a11c0c GSEventRunModal + 168\n11 UIKit                          0x000000018fe5efdc UIApplicationMain + 1156\n12 Venoo                          0x000000010007ee9c main (main.m:13)\n13 libdyld.dylib                  0x0000000199927aa0 start + 4\nin development not facing this error, but when app is downloaded from app store, I m facing this type of error.\n. Yes, I have faced this problem for released build. Might be image url is nil that's why getting this error. In next release i have put down checkins.\n. I have used new version. In this i m not getting issue. \n. ",
    "TimJHJ": "I solved problem. don't remove parameter(query).\nin SDWebImageDownloader.m v3.5\n\"image/webp,image/;q=0.8\" => \"image/webp,image/\" is OK.\ntested URL is WMP image.\n=>http://192.168.7.56:10243/WMPNSSv4/2867831903/0_ezYwRTU5QjYwLTI3NjYtNDU4Qi1BQTFELTM1RkM2RjE0MjYwNH0uMC40.jpg?albumArt=true\nWindow Media Player Thumnail URL is not supported q=0.8.\n. ",
    "roshangautam": "same problem here.\n. ",
    "amarcadet": "Hi, \nI'm facing the same issue with version 3.7.1. It's really hard to reproduce so I'm not able to give you a sample code :disappointed: .\nIt's clearly related to the quality of the network as it appears more often on Edge or Low Latency network.\nThanks for your help\nEDIT: it might not be related to the network but rather to a thread issue between cancel and completion.\nI'm still investigating the issue and will update with information.\n. ",
    "aencarnacion": "@chrjs  This will raise the concern that it will not compile a 64 binary that its needed for 64 devices\n. @chrjs Thanxs for the suggestion, hope this issue can be fixed anytime soon!\n. ",
    "toktak": "try this new release https://github.com/rs/SDWebImage/releases it's work for me\n. ",
    "Numeral": "I tried 3.5.4 and got same errors\n. Was able to fix this changing dsp.h:\n\n. ",
    "zackster": "I am also finding this issue after upgrading to XCode 5.1\n. +1\n. ",
    "JAED1990": "So it is.\nPlease if anyone knows the solution, to tell us\n. ",
    "ijwelch": "I fixed this by linking ImageIO.framework\n. ",
    "cwmahan": "+1\n. (null): \"OBJC_CLASS$_SDWebImageManager\", referenced from:\n(null): Objc-class-ref in HelpVC.o\n(null): Symbol(s) not found for architecture x86_64\n(null): Linker command failed with exit code 1 (use -v to see invocation)\nUsing latest framework 3.5.4 with xcode Version 5.1 (5B130a)\nCompiles fine with all 32bit versions.\n. the framework linked in this issue fixes my problem:\nhttps://github.com/rs/SDWebImage/issues/641\n. ",
    "MikeFieldsNE": "@seanrice Can you please provide more information on what you needed to change to fix the \"No visible interface for 'SDImageCache\" declares the selector '...' \" error? Ideally, show your relevant code before and after. Thank you very much.\n. ",
    "jasondinh": "Because I still want the queue to go FIFO, but occasionally need an image to be loaded with higher priority. Changing the queue executionOrder for just an image and change it back doesn't make sense to me.\n. ",
    "ryback3": "I have same problem, is there any solution? I'm using SDWebImage-3-5-4.framework\n. ",
    "tschleuss": "Yeah, i started a iOS project today, and i found this framework to deal with async image loading. When i tested on my iPhone 5s, i got that same error.. on iPhone Simulator non-64 bits works fine.\nEDIT: I had this problem only with the .framework file..\n Using the sources directly it works.\n. ",
    "T-Pham": "Thanks for your response!\nI downloaded the framework zip file from the download page and included the framework into my project. Then either I run it on a 64-bit simulator or archive the project to IPA and run it on a 64-bit real device, the issue will happen. It doesn't happen on 32-bit devices and 32-bit simulators.\nMy project is configurated to support all architectures including armv7, armv7s, arm64.\nIs there any log file or something I should upload here to provide more info?\n. I just notice that there was a warning saying the framework was ignored since no support for arm64 architecture was found.\nHowever, I've been able to fix this issue by cloning the code from master and build the framework myself. The newly built framework is included in a fat binary app file and works well on both 32-bit and 64-bit devices then.\n. ",
    "monteduro": "Same situation here.\n. ",
    "sapzildj": "fixed = f2546c733328b57d459ae6754f0bda99ef0012b8\nPlease check 3.6.0 version.\n. ",
    "theblanchard": "+1. This would be a great feature!\n. ",
    "Mazyod": "@leonsg There are only two reasons this can happen, as far as I can tell:\n1. The delegate is getting nil'd. Make sure you are setting the UITableViewController as the delegate, not the UITableViewCell. Also do it in the init method.\n2. Look for the code where the imageManager calls the delegate, and add an NSLog there to print the delegate and the image URL. That should tell you the problem, or else post that info here.\nBest,\n. We are using crittercism as well, lol. We are trying to integrate SDWebImage, so will see how this goes... Thanks for sharing this, and saving us the headache.\n. Hi @operatordevelopment,\nI am not part of the team, but from personal experience, I wouldn't set the max concurrency to the default.\nThe way NSOperationQueue handles the concurrency amount (probably) is based on the CPU load. In our case, however, we are dispatching network I/O operations, which don't use much CPU, but would slow considerably (overall) if you try to execute more than, say, 8 at once.\nYou can easily see this effect when you try to move 10+ files in your computer around (as separate, concurrent operations), or download 10+ files in your browser (while connected on cellular, mind you. If you have a super internet connection, well... You'll hardly notice a difference).\nBest,\n. Ok, the API actually exposes this:\n- (BOOL)diskImageExistsForURL:(NSURL *)url;\nSimply checking for the cache in a category should do the trick.\n. ",
    "gpolak": "I'm having the exact same issue. This ONLY happens the first time the app loads, that is the first time it is installed. Subsequent runs, (even if the app is killed and restarted) work fine. And this is iOS 7.1 ONLY.\n2014-03-27 23:02:28.837 Fargate[55086:1303] * Assertion failure in void _UIPerformResizeOfTextViewForTextContainer(NSLayoutManager , UIView , NSTextContainer *, NSUInteger)(), /SourceCache/UIFoundation_Sim/UIFoundation-264.8/UIFoundation/TextSystem/NSLayoutManager_Private.m:1510\n. Some more details:\n- running latest SDWebImage master\n- the simplest case that can cause a crash is setting an image to an image view: \n  [self.imageView setImageWithURL:someUrl];\n- before when the assertion failure happens, the following symbolic breakpoint is hit:\n  -[NSLayoutManager(NSPrivate) _resizeTextViewForTextContainer:]\n- I tried making a \"simplest case\" demo project but that works fine. I'm assuming since my production code began pre-Xcode 5.1, some build settings are not the same as a fresh 5.1 demo project, hence no crashing there. I went through both project's build settings and matched them where possible to no avail.\n- Again, the crash happens only on the first app load:\n- Reset the simulator\n- Launch the app -> crash\n- All subsequent launches are fine. You need to reset the simulator (or delete the app) to reproduce this. Again, 7.1 only, works fine on 7.0.\n. Hey johnsmule, are you using Crittercism? That turned out to be the culprit in my case. Disable it or upgrade to the latest version (4.3.3) and the crash should go away.\n. Glad to help, hope that does the trick for you as well! Let me know, I'm curious - the symptoms are definitely the same.\n. Glad to help John, thanks for writing up the issue.\nI gotta say, looking at the Crittercism release notes, I'm starting to get really uncomfortable with using them. Seems like \"move fast and break stuff\" is the name of the game over there - which is fine if you're a web developer, but not when you're a slave to the 1-2 week-long App Store update cycle. Oh well...\n. @deepoceanld not sure what causes the crash, but the solution was to upgrade Crittercism. If you're seeing this behavior with the latest version, you should reach out to them.\n. ",
    "johnsmule": "We are indeed using Crittercism.  Can't get rid of it, so we will try the upgrade and report back. Thanks much for jumping on the ticket and sharing your info!\n. Upgrade confirmed to fix!    Not super comfortable with the swizzling being done by Crittercism.  I'd love to understand the mechanism of the crash, but going to let this one go.\n. Thanks much gpolak!\n. ",
    "deepoceanld": "@gpolak Hi, i run into the same problem, and i use some swizzle , do u figure out the root cause why swizzling trigger this crash? is there any solution?\n0   CoreFoundation                  0x1872db100 exceptionPreprocess + 132\n1   libobjc.A.dylib                 0x1937e41fc objc_exception_throw + 60\n2   CoreFoundation                  0x1872dafc0 +[NSException raise:format:arguments:] + 116\n3   Foundation                      0x187e12e20 -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:] + 88\n4   UIFoundation                    0x1903f8654 -[NSLayoutManager(NSPrivate) _resizeTextViewForTextContainer:] + 416\n5   UIFoundation                    0x1903f8318 -[NSLayoutManager(NSPrivate) _recalculateUsageForTextContainerAtIndex:] + 1752\n6   UIFoundation                    0x1903f83bc -[NSLayoutManager(NSPrivate) _validatedStoredUsageForTextContainerAtIndex:] + 104\n7   UIFoundation                    0x19042bf2c -[NSLayoutManager usedRectForTextContainer:] + 152\n8   UIKit                           0x18a352e88 -[_UITextContainerView textContainerOrigin] + 104\n9   UIFoundation                    0x19044a1a4 -[NSTextContainer textContainerOrigin] + 156\n10  UIFoundation                    0x190429558 -[NSLayoutManager _primitiveInvalidateDisplayForGlyphRange:] + 2804\n11  UIFoundation                    0x190429ba0 -[NSLayoutManager invalidateDisplayForCharacterRange:] + 472\n12  UIFoundation                    0x1903f8470 -[NSLayoutManager(NSPrivate) _invalidateDisplayIfNeeded] + 76\n13  UIFoundation                    0x1903fa554 -[NSLayoutManager(NSPrivate) _rectArrayForRange:withinSelectionRange:rangeIsCharRange:singleRectOnly:fullLineRectsOnly:inTextContainer:rectCount:rangeWithinContainer:glyphsDrawOutsideLines:rectArray:rectArrayCapacity:] + 7164\n14  UIFoundation                    0x1903fb3b8 -[NSLayoutManager(NSPrivate) _rectArrayForRange:withinSelectionRange:rangeIsCharRange:singleRectOnly:fullLineRectsOnly:inTextContainer:rectCount:rangeWithinContainer:glyphsDrawOutsideLines:] + 56\n15  UIFoundation                    0x19042dea0 -[NSLayoutManager rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:] + 48\n16  UIKit                           0x18a350618 -[_UITextContainerView updateInsertionPointStateAndRestartTimer:] + 248\n17  UIFoundation                    0x1903ff1d0 -[NSLayoutManager(NSPrivate) _invalidateLayoutForExtendedCharacterRange:isSoft:invalidateUsage:] + 2236\n18  UIFoundation                    0x190427dec -[NSLayoutManager textContainerChangedGeometry:] + 384\n19  UIFoundation                    0x19044a424 -[NSTextContainer setSize:] + 180\n20  UIKit                           0x18a350484 _UITextContainerViewResyncNSTextContainer + 292\n21  UIKit                           0x18a3502b4 -[_UITextContainerView setFrame:] + 168\n22  UIKit                           0x18a34fae4 -[UITextView _resyncContainerFrameForNonAutolayout] + 440\n23  UIKit                           0x18a499c9c -[UITextView setBounds:] + 332\n24  UIKit                           0x18a3a82e4 -[UIView(Geometry) _applyISEngineLayoutValues] + 260\n25  UIKit                           0x18a2bae88 -[UIView(Geometry) _resizeWithOldSuperviewSize:] + 192\n26  UIKit                           0x18a3aad20 -[UIScrollView _resizeWithOldSuperviewSize:] + 56\n27  CoreFoundation                  0x1871ed1dc __53-[__NSArrayM enumerateObjectsWithOptions:usingBlock:]_block_invoke + 132\n28  CoreFoundation                  0x1871ed0a8 -[__NSArrayM enumerateObjectsWithOptions:usingBlock:] + 256\n29  UIKit                           0x18a2aa9f8 -[UIView(Geometry) resizeSubviewsWithOldSize:] + 136\n30  UIKit                           0x18a3a8d64 -[UIView(AdditionalLayoutSupport) _is_layout] + 108\n31  UIKit                           0x18a29f288 -[UIView(Hierarchy) layoutSubviews] + 100\n32  UIKit                           0x18a29efe0 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 348\n33  QuartzCore                      0x189e90258 -[CALayer layoutSublayers] + 184\n34  QuartzCore                      0x189e8ae20 CA::Layer::layout_if_needed(CA::Transaction*) + 300\n35  UIKit                           0x18a2b62c4 -[UIView(Hierarchy) layoutBelowIfNeeded] + 548\n36  UIKit                           0x18a3f1e94 -[UITableViewCell setEditing:animated:] + 728\n37  AddressBookUI                   0x1867b3c04 -[ABContactCell setEditing:animated:] + 104\n38  AddressBookUI                   0x186791960 -[ABPropertyCell setEditing:animated:] + 104\n39  AddressBookUI                   0x1867b9bf0 +[ABContactView preCacheEditCells] + 464\n40  Foundation                      0x187e502d0 __NSFireDelayedPerform + 392\n41  CoreFoundation                  0x18729b704 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION + 28\n42  CoreFoundation                  0x18729b374 __CFRunLoopDoTimer + 804\n43  CoreFoundation                  0x18729909c __CFRunLoopRun + 1324\n44  CoreFoundation                  0x1871d9dd0 CFRunLoopRunSpecific + 452\n45  CoreFoundation                  0x18722f458 CFRunLoopRun + 112\n46  MyApp                           0x100321b4c -SDWebImageDownloaderOperation start\n47  Foundation                      0x187e46a38 __NSOQSchedule_f + 76\n48  libdispatch.dylib               0x193dbbfd4 _dispatch_client_callout + 16\n49  libdispatch.dylib               0x193dc1654 _dispatch_async_redirect_invoke + 152\n50  libdispatch.dylib               0x193dbbfd4 _dispatch_client_callout + 16\n51  libdispatch.dylib               0x193dc32b8 _dispatch_root_queue_drain + 556\n52  libdispatch.dylib               0x193dc34fc _dispatch_worker_thread2 + 76\n53  libsystem_pthread.dylib         0x193f516bc _pthread_wqthread + 356\n54  libsystem_pthread.dylib         0x193f5154c start_wqthread + 4\n. @whiskit hi, i came across the same problem , see stack trace below:\n0   libsystem_kernel.dylib          0x3ad6057c __semwait_signal_nocancel + 24\n1   libsystem_c.dylib               0x3acdba7c nanosleep$NOCANCEL + 160\n2   libsystem_c.dylib               0x3acf6ede usleep$NOCANCEL + 46\n3   libsystem_c.dylib               0x3ad10fe0 abort + 80\n4   libc++abi.dylib                 0x3a03fcd2 abort_message + 70\n5   libc++abi.dylib                 0x3a0586e0 default_terminate_handler() + 248\n6   libobjc.A.dylib                 0x3a79df62 _objc_terminate() + 190\n7   libc++abi.dylib                 0x3a0561c4 std::__terminate(void (*)()) + 76\n8   libc++abi.dylib                 0x3a055d28 __cxa_rethrow + 96\n9   libobjc.A.dylib                 0x3a79de12 objc_exception_rethrow + 38\n10  CoreFoundation                  0x2ff20f30 CFRunLoopRunSpecific + 636\n11  CoreFoundation                  0x2ff649ae CFRunLoopRun + 94\n12  MyAPP                       0x002a1e50 -SDWebImageDownloaderOperation start\n13  Foundation                      0x309c5768 __NSOQSchedule_f + 56\n14  libdispatch.dylib               0x3ac879a6 _dispatch_async_redirect_invoke$VARIANT$up + 106\n15  libdispatch.dylib               0x3ac9891c _dispatch_root_queue_drain + 220\n16  libdispatch.dylib               0x3ac98b1c _dispatch_worker_thread2 + 52\n17  libsystem_pthread.dylib         0x3adc7bd0 _pthread_wqthread + 296\n18  libsystem_pthread.dylib         0x3adc7a94 start_wqthread + 4\ndo u figure out why this happen? what's the root cause?\n. ",
    "1nput0utput": "Could we instead check if the image is already set in this case? I am facing an issue with a UIImageView subclass when setting an image twice in sequence cause it to sometime not display the image -- I'm doing some background task to process the image. On the other hand I could always validate the image myself. \n. It doesn't matter anymore. Thanks for a quick reply.\n. ",
    "mmjuns": "Hi, I am not sure if my SDWebImage is not the latest version or not. However, I met a strange case. The default value of _downloadQueue.maxConcurrentOperationCount is 2 in my app. I found that I can only get two images downloaded and displayed in my tableview even I have more than 2 cells in the current view and call the download function more than 2 times. Also, even I refresh the view, still only 2 images shown. I have to kill the app and re run it. Then I will get 2 more images downloaded and displayed. Basically, I believe this means the downloader only download 2 images each time. But based on the app doc, _downloadQueue.maxConcurrentOperationCount should only define the max concurrentoperation number, not the queue size. Is this a bug in the previous version of the SDWebImage???\n. @mythodeia \nYou are correct. I tested the latest version and it works fine. Since the project is not written by me, I just want to confirm my guess is right. Thanks.\n. ",
    "appletesting2": "Application received signal SIGSEGV\n. [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:self];\n. ",
    "brynbodayle": "@bpoplauschi I noticed this when debugging and seeing that the runningOperations array on SDWebImageManager was filling up with operations that were cancelled and never removed.\nI'm looking through the code and I don't see where an operation is removed from the runningOperations array on SDWebImageManager after it is cancelled. Perhaps I'm missing something though, do you see where it's removed?\n. @onmyway133 That's a good question. At the time I believe I had noticed an issue with it, but now I'm not seeing how it's related.\n. In order to resolve this crash, you need to import the newly added files:\nUIView+WebCacheOperation.h\nUIView+WebCacheOperation.m\nUIImageView+HighlightedWebCache.h\nUIImageView+HighlightedWebCache.m\n. ",
    "caughtinflux": "Yep. However, I wasn't using the full method that specifies the data to be saved as well. I worked around if by specifying NO for the recalculate parameter and then passing the data in. I took a look at the code, and that's the only code path that really handles animated GIFs\n. ",
    "vaidyagourav": "Use this \n [SDWebImageManager.sharedManager.imageCache clearMemory];\n  [SDWebImageManager.sharedManager.imageCache clearDisk];,\nAlthough SDWebImage takes care whenever the memory warning arrives\n. ",
    "kimjj81": "Oh.. You are right. I'm so shy. :-)\nHowevery, what do you think about \"remove the failedURL after trying again and then successes.\"?\n. ",
    "sterling3000": "Same here. \n. ",
    "xmucyp": "same issue +!\n. same issue +1\n. ",
    "GuilhermePolitta": "I'm having the same issue too.\n. I have a table view with images and when a cell is selected it goes to another view that have details of that cell.\nSwitching quickly between these views causes the problem.\n. I'm using a iPhone 4 and a iPhone 4s. In simulator it do not crash\n. ",
    "ryohang": "same here. crash... from time to time.\n. ",
    "shenfh": "same here.\n. ",
    "AvdLee": "Found this issue again in 3.7.1\n-[SDWebImageDownloaderOperation start] SDWebImageDownloaderOperation.m:107\nUsing an iPhone 5 with iOS 7.1.2 downloading images inside a uicollectionview\n. Happening more often now, any idea when a fix for this crash will be released?\n. Ouch, I missed the define \"SD_LOG_NONE\". Sorry for that, this issue can be closed. \n. ",
    "kvermeille": "Same here, happens at least once every two days\n. ",
    "pidjay": "Just happened to me as well using 3.7.1 :-/\nIt crashes on a call to CFRunLoopRun() with a EXC_BAD_ACCESS. \nI'll try to reproduce it with zombies enabled to get more info.\n. Using Zombies I could find more about this crash:\nRun 1: * -[CFString drawWithRect:options:attributes:context:]: message sent to deallocated instance 0x19ec8640\nRun 2: * -[CFString _fastCharacterContents]: message sent to deallocated instance 0x1a20a490\nRun 3: * -[CFString _fastCharacterContents]: message sent to deallocated instance 0x199b0410\nRun 4: * -[CFString drawWithRect:options:attributes:context:]: message sent to deallocated instance 0x19b3f700\nEvery time, it was related to a string. So maybe it's not due to this lib but another one I use to display the loading progress in a cell. Maybe someone can tell if my assumption is right or not with that additional data.\n. ",
    "banshchikov": "Same problem. Happens with 0.5% users per day\n. ",
    "karsawu": "@bpoplauschi \nI occur same crash when using 3.7\ncan avoid this crash using 3.6 or older versions ,make sure stability?\n. @bpoplauschi  you sure the crash can not occur in 3.6? I did not  check this issue whether occur in 3.6\n. @bpoplauschi I mean that do you know the crash whether occur only in 3.7 and not in 3.6 ?\nI want replace 3.7 with 3.6  for avoid the crash\n. @bpoplauschi no solutions avoid the crash? now\n. Okay, thank you very much\n. @bpoplauschi I find the crash more appear switch background/foreground and IOS 6.1. this message hope help you\n. ",
    "LarrrrryT": "same issue +1\n. ",
    "rohit11": "We also facing same crash with Version 3.7.3 lib. Below Stack trace I am able to see crashlytics. Can any one help me out what is exact issue in lib.\nPlease refer below row crash logs : \nThread : Crashed: NSOperationQueue 0x1488b28e0 :: NSOperation 0x148901d80 (QOS: USER_INTERACTIVE)\n0 CoreLocation 6517613300 (null) + 60044\n1 CoreLocation 6517354684 (null) + 1436\n2 CoreLocation 6517354684 (null) + 1436\n3 CoreLocation 6517351912 (null) + 1980\n4 CoreFoundation 6509153340 CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION + 28\n5 CoreFoundation 6509152480 __CFRunLoopDoTimer + 884\n6 CoreFoundation 6509142004 __CFRunLoopRun + 1520\n7 CoreFoundation 6508285088 CFRunLoopRunSpecific + 384\n8 CoreFoundation 6508602444 CFRunLoopRun + 112\n9 kohls 4298901424 -[SDWebImageDownloaderOperation start] + 2106244 (SDWebImageDownloaderOperation.m:117)\n10 Foundation 6525347688 __NSOQSchedule_f + 224\n11 libdispatch.dylib 6865770152 _dispatch_client_callout + 16\n12 libdispatch.dylib 6865819372 _dispatch_queue_drain + 864\n13 libdispatch.dylib 6865785260 _dispatch_queue_invoke + 464\n14 libdispatch.dylib 6865827260 _dispatch_root_queue_drain + 728\n15 libdispatch.dylib 6865826524 _dispatch_worker_thread3 + 112\n16 libsystem_pthread.dylib 6867948656 _pthread_wqthread + 1092\n. bpoplauschi:\nAny update for above crash. Can you please help me out, how to resolve this crash.\n\n. We also facing same crash with Version 3.7.3 lib. Below Stack trace I am able to see crashlytics. Can any one help me out what is exact issue in lib.\nPlease refer below row crash logs : \nThread : Crashed: NSOperationQueue 0x1488b28e0 :: NSOperation 0x148901d80 (QOS: USER_INTERACTIVE)\n0  CoreLocation                   6517613300 (null) + 60044\n1  CoreLocation                   6517354684 (null) + 1436\n2  CoreLocation                   6517354684 (null) + 1436\n3  CoreLocation                   6517351912 (null) + 1980\n4  CoreFoundation                 6509153340 CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION + 28\n5  CoreFoundation                 6509152480 __CFRunLoopDoTimer + 884\n6  CoreFoundation                 6509142004 __CFRunLoopRun + 1520\n7  CoreFoundation                 6508285088 CFRunLoopRunSpecific + 384\n8  CoreFoundation                 6508602444 CFRunLoopRun + 112\n9  kohls                          4298901424 -[SDWebImageDownloaderOperation start] + 2106244 (SDWebImageDownloaderOperation.m:117)\n10 Foundation                     6525347688 __NSOQSchedule_f + 224\n11 libdispatch.dylib              6865770152 _dispatch_client_callout + 16\n12 libdispatch.dylib              6865819372 _dispatch_queue_drain + 864\n13 libdispatch.dylib              6865785260 _dispatch_queue_invoke + 464\n14 libdispatch.dylib              6865827260 _dispatch_root_queue_drain + 728\n15 libdispatch.dylib              6865826524 _dispatch_worker_thread3 + 112\n16 libsystem_pthread.dylib        6867948656 _pthread_wqthread + 1092\n. ",
    "ifbarrera": "I've just experienced this exact same crash. It happened when I scrolled to top in a large table view with approximately 100 cells by setting the contentOffset to CGPointMake(0,0). Using version 3.7. Any thoughts?\nStack trace:\nThread : Crashed: NSOperationQueue 0x1308214a0 :: NSOperation 0x130c1d1b0 (QOS: USER_INTERACTIVE)\n0  libsystem_platform.dylib       0x181ade250 platform_memmove + 96\n1  ImageIO                        0x18354978c copyImageBlockSetGIF + 2992\n2  ImageIO                        0x18354978c copyImageBlockSetGIF + 2992\n3  ImageIO                        0x183507130 ImageProviderCopyImageBlockSetCallback + 852\n4  QuartzCore                     0x1845a2e0c CA::Render::create_image(CGImage, CGColorSpace_, unsigned int) + 972\n5  QuartzCore                     0x1845a1eec CA::Render::copy_image(CGImage_, CGColorSpace_, unsigned int, double) + 372\n6  QuartzCore                     0x1845a2a2c CA::Render::prepare_image(CGImage_, CGColorSpace_, unsigned int, double) + 12\n7  QuartzCore                     0x1845ad1ac -[CAKeyframeAnimation CA_prepareRenderValue] + 108\n8  QuartzCore                     0x18457f688 CA::Layer::prepare_animations(CA::Transaction_) + 72\n9  QuartzCore                     0x184575ad8 CA::Layer::prepare_commit(CA::Transaction_) + 348\n10 QuartzCore                     0x184574ca0 CA::Context::commit_transaction(CA::Transaction_) + 264\n11 QuartzCore                     0x1845749dc CA::Transaction::commit() + 512\n12 QuartzCore                     0x18456e0cc CA::Transaction::observer_callback(CFRunLoopObserver_, unsigned long, void*) + 80\n13 CoreFoundation                 0x181e34588 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION + 32\n14 CoreFoundation                 0x181e3232c __CFRunLoopDoObservers + 372\n15 CoreFoundation                 0x181d616a0 CFRunLoopRunSpecific + 416\n16 CoreFoundation                 0x181daee2c CFRunLoopRun + 112\n17 AdBoard                        0x10021f6f0 -SDWebImageDownloaderOperation start\n18 Foundation                     0x182826728 __NSOQSchedule_f + 224\n19 libdispatch.dylib              0x1818d15f0 _dispatch_client_callout + 16\n20 libdispatch.dylib              0x1818dd634 _dispatch_queue_drain + 864\n21 libdispatch.dylib              0x1818d50f4 _dispatch_queue_invoke + 464\n22 libdispatch.dylib              0x1818df504 _dispatch_root_queue_drain + 728\n23 libdispatch.dylib              0x1818df224 _dispatch_worker_thread3 + 112\n24 libsystem_pthread.dylib        0x181ae5470 _pthread_wqthread + 1092\n25 libsystem_pthread.dylib        0x181ae5020 start_wqthread + 4\n. I've experienced the same crash when scrolling a large tableView to the top. Fabric is reporting a crash at \"-[SDWebImageDownloaderOperation start]\" with a \"EXC_BAD_ACCESS KERN_INVALID_ADDRESS\" error.\nI'm using the SDWebImageDownloader class independently to download images, and this happens in the cellForRowAtIndexPath method.\n. ",
    "skytraveler": "the bug still exists  in version 3.7.5  \nSDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:117\niPhone 4S   iOS 7.1.2 (11D257)  7.0.4 (11B554a)\niPhone 5s (CDMA/LTE)  iOS 7.1.2 (11D257) \nwe are currently using your library now and it cause more than 20000 times crash everyday\nwould you please fix it?\n. It contributes 1/2 of all crashes we've got. Could someone kindly fix it? Thx.\n. there's lot of our users  suffers form this crash .  \nfor iPhone 5s   4s   iOS 7 users\n. ",
    "tianxiewuhua": "same issue +1\n. ",
    "patricktwenty20": "Same issue +1\n. ",
    "jiehu5114": "same issue +1\n. @pjchavarria   did you have the demo? \n. ",
    "luohui8891": "same issue +1\n. Hey guys, does any one confirm the 3.8.2 version about the fix?\n. Hey, guys, I also have a redirect URL issue caused can't download the image with the 3.8.1.\nAlso tried the URL in the demo app and no luck.\nAny suggestion @mythodeia ?\n. Hmm, strange, for my URL, I tried to download it via [NSData dataWithContentsOfURL:] and it didn't work. \nBut when I pasted it in chrome it could be downloaded.\n. This PR also fix my case\nThanks dude.\n. @mackoj hey, I saw 4.0.0 has been released. \nI tried my case again both in 4.0.0 and master. \nNo luck, it didn't work.\nHow to reproduce:\n\nOpen the demo project SDWebImage Demo.\nOpen the file MasterViewController.m\nAdd this link @\"http://cx500forum.com/forum/attachment.php?attachmentid=14656&d=1408526626\" in the array _objects (line 68)\nRun the demo.\n\nThe delegate method - (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask willCacheResponse:(NSCachedURLResponse *)proposedResponse completionHandler:(void (^)(NSCachedURLResponse *cachedResponse))completionHandler didn't been called.\n Do you have any idea?. Thanks for quick reply.\n@mackoj right. \nBut it works when I parsed it in Chrome and Safari on my iPhone.\nSee my previous comment\n\nThis PR also fix my case\nThanks dude.\n\nI also checkout code to the commit of this pull commit, the URL didn't work yet. But I forgot why I said that.\nI didn't understand the delegate method very clear. Do you know when it would be called? Any example URL?\n. ",
    "paulosigales": "I'm using 4.0.0 beta 2 and still occurring =( \nI think it has relation with amount of images, my feed have a lot of collectionviews with images inside each. Then i changed SDWebImageDownloader.sharedDownloader().maxConcurrentDownloads = 2\nMy app went to appstore today and the crash still happens. ;(\nSDWebImageDownloaderOperation.m line 117\n-[SDWebImageDownloaderOperation start]\nNews about?. News about this crash? -> SDWebImageDownloaderOperation.m line 117 \nIm using 4.0.0 Beta 2 and is still occurring. Me too ;(\nSDWebImageDownloaderOperation.m line 117\n-[SDWebImageDownloaderOperation start]\nI'm using 4.0.0 beta 2\nI think it has relation with amount of images, my feed have a lot of collectionviews with images inside each. \nI changed SDWebImageDownloader.sharedDownloader().maxConcurrentDownloads = 2, but this not help.. ",
    "romaonthego": "+1 I have experienced the same issue. @rs please merge.\nOriginal github issue: https://github.com/rs/SDWebImage/pull/662\n. ",
    "PrashantKT": "+1. ",
    "xieweizhi": "setImageWithURL is a method for remote URL. So you can't set the parameter to a local URL file path\n. ",
    "Akki9326": "@bpoplauschi  is not Working \n\nYou could try to add the path to the local images using [SDImageCache addReadOnlyCachePath:]. Then try to use setImageWithURL: by constructing the URL like this:\nNSURL *fileURL = [[NSURL alloc] initFileURLWithPath:path isDirectory:NO];\n. \n",
    "alejandro-menendez": "I found that the image gets loaded with following code. But, it's size is changed badly when it loads for the first time. After that, it works well.\nSDImageCache.sharedImageCache().addReadOnlyCachePath(URLabsoluteString)\nimagePreview.sd_setImageWithURL(URL, placeholderImage: nil, options: .CacheMemoryOnly)\nimagePreview.layer.masksToBounds = true. ",
    "swizzlr": "@salling I'm using your patch but sometimes still seeing it happen. How could we make the architecture more capable of handling this? Refactor to use dispatch_queues and one run loop?\n. ",
    "salling": "Nope. It is intentional. I want to not go on and do the other things in the if/else construct if the operation is cancelled. Perhaps should be rewritten to better reflect this, but I wanted to keep intent of the commit/PR as clear as possible (i.e. change flow as little as possible)\n. Done!\n. ",
    "rsanchezsaez": "@salling Can you elaborate more on what this fixes and how does it?\nWe are experiencing some completion blocks that are never executed when using concurrently with the SDWebImagePrefetcher, and I wonder if this change is related.\nWouldn't you want to notify the caller via the completion block even on a cancelled operation? The operation could be cancelled by a completely different call elsewhere, couldn't it?\n. ~~The fix for #699 is causing an issue in our code where this method:~~\n- (id <SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                     options:(SDWebImageOptions)options\n                                    progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                   completed:(SDWebImageCompletionWithFinishedBlock)completedBlock;\n~~doesn't execute the SDWebImageCompletionWithFinishedBlock completion in some circumstances.~~\n~~This should never ever happen. One should expect that the most external completion block gets executed, whether the action succeeds, cancel or timeouts.~~\n~~Wouldn't the proper fix for this be (in addition of what was already committed) replacing this code~~\n```\n        operation.cancelBlock = ^{\n            [subOperation cancel];\n        @synchronized (self.runningOperations) {\n            [self.runningOperations removeObject:weakOperation];\n        }\n    };\n\n```\n~~by this~~\n```\n        operation.cancelBlock = ^{\n            [subOperation cancel];\n        @synchronized (self.runningOperations) {\n            [self.runningOperations removeObject:weakOperation];\n        }\n\n        dispatch_main_async_safe(^{\n            completedBlock(nil, nil, SDImageCacheTypeNone, NO, url);\n        });\n    };\n\n```\n~~?~~\n. UPDATE: Hmm, I'm debugging further and I think it's a different issue. Let me investigate and get back to you.\nNot sure what's causing it, but definitely      \n- (id <SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                 options:(SDWebImageOptions)options\n                                progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                               completed:(SDWebImageCompletionWithFinishedBlock)completedBlock;\nis not calling the completion handler on some instances. This problem surfaced when updating from SDWebImage 3.6 to 3.7.1, but not sure which change exactly started to make it happen.\nWe are heavily using the SDWebImagePrefetcher in parallel to the aforementioned method.\n. Commit b59c2bb doesn't fix this. I just got it:\n\n. The problem is in SDWebImageDownloader.h:\nNSArray *callbacksForURL = [sself callbacksForURL:url];\nif (finished) {\n     [sself removeCallbacksForURL:url];\n}\nfor (NSDictionary *callbacks in callbacksForURL) {\n    SDWebImageDownloaderCompletedBlock callback = callbacks[kCompletedCallbackKey];\n    if (callback) callback(image, data, error, finished);\n}\n[sself callbacksForURL:url] gets executed, the a new callback is added (a block slips through before removeCallbacksForURL has the chance to run, and then both of them are removed). When\nfor (NSDictionary *callbacks in callbacksForURL)\nruns, it only gets the original callback. And the new one is lost forever.\nI presume this is a threading/timing issue, as it happens only about 5% of the time. I think it's related to the image prefetcher performing requests at the same time.\n. We have tried to fix it on this commit: https://github.com/obviousengineering/SDWebImage/commit/dfeeda64bb85625ab3d24aac02af826016729438.\nIssue appears to be resolved, but we are not 100% sure we didn't cause other issues or made performance worse. On our specific app, everything seems to work fine and performance doesn't look degraded.\n@rromanchuk Can you try if this works for you as well?\nIf more people try it and don't see any problems with the code, I'll submit a pull request\n. @morad So, was the issue still happening for you with my code?\nAlso, are you simultaneously using the SDImagePrefetcher at the same time, or are you just sending calls to the SDDownloadManager?\n. Hmm, even with my tentative fix, I continue to experience this problem if a call [[SDWebImageManager sharedManager] cancelAll] while there are downloads in progress. So this is serious.\nAre you manually doing cancellAll calls elsewhere?\n. I think this is also related to #847, as I believe that one is also because of racing conditions.\nSorry to say but SDWebImage 3.7.1 is really buggy... :-(\n. ",
    "billburgess": "I didn't want to interfere with the existing setup. But that would be a better option. Is this something you'd prefer to see and would consider merging?\n. ",
    "DimaVartanian": "This should be optionally settable via SDWebImageOptions. It should also be optional to fade in a new image when an old one is already set. By default it doesn't look great in a reused view such as a UITableViewCell. (Scrolling around causes old images to fade into new ones).\n. +1 great idea\n. +1, nice shortcut\n. When you put [self cacheKeyForURL:url] did you mean [imageManager cacheKeyForURL:url]? That certainly works too but requires extra code for what I think is a pretty common use case (pre-caching resources). It would honestly be nice if both were surfaced so you could easily check the cache for members and such.\n. After thinking about this a bit more I could think of only a single case it would not really work with but should still handle, which is when you are trying to remove an image from the memory cache because it is considered expired and should not be reused, rather than for memory purposes. In these cases, the weak pointer should also be cleared so that the \"expired\" image does not get reused by the cache. Adding support for this could be as simple as adding an extra flag to the removeImage... methods in SDImageCache.\nWhat do you guys think?\n. Any thoughts on this @bpoplauschi?\n. Yeah I'll try to tackle this within the next day or two. We can also add it to UIButton, I guess?\n. ",
    "pronebird": "Meh, it's outside of scope but for example AFN lets you set image yourself if you provide completion block:\nhttps://github.com/AFNetworking/AFNetworking/blob/master/UIKit%2BAFNetworking/UIImageView%2BAFNetworking.m#L151\nThe problem is that UIImageView+SDWebImage blocks me from doing animations because it always calls setImage: on image view.\n. That actually does not really solve my problem because I have to fetch image from memory next and I have to craft the same key all over again. Neglect this request.\n. Update:\nI removed second download request I had for the same UIImageView which happened earlier tho and now it's even worse, I get completion callback called, then two updates, then silence.\nconsole\n2015-03-23 13:21:10.588 App[52095:1907863] Complete = 2, error = (null)\n2015-03-23 13:21:10.606 App[52095:1907863] receivedSize = 0, expectedSize = -1\n2015-03-23 13:21:10.606 App[52095:1907863] receivedSize = 0, expectedSize = 34220\n2015-03-23 13:21:10.606 App[52095:1907863] receivedSize = 34220, expectedSize = 34220\nThis method that provides progress/completion blocks is totally useless.\n. I don't see the problem with download from Parse which I use. The progress seems legit. What does not seem legit is that progress is reported after completion block or completion block is never called...\n. Using SDWebImage (3.7.2) according to pod install\n. Sometimes it just calls completion block right away, reports that image is cached in memory and then reloads it from server because SDWebImageRefreshCached was set. But it does not call completion block after image is refreshed from server. \nCould you please test and confirm (or not?) the same problem on your end if you use the same image view and force load the same image twice? Can be in sequence after image is loaded first time.\n. Thanks, yeah it seems odd, I think it should because that's the whole point of SDWebImageRefreshCached I guess..\n. Yeah so even if I ignore cached image in completion handler, I am still not being notified when image is refreshed from server.\n. I see, in my case it hits 304 for sure. I still think that this method defeats its purpose, e.g. too much of internal implementation details exposed, threading issues (#1089) and inconsistency that makes it totally useless in case if you want to animate anything alongside. The only way to get anything useful out of it is to use progress handler and completely forget about completion handler, which is supposed to be called on completion, not randomly. I apologize if I push too hard here.\n. @mythodeia thanks for discussing that matter with me.\n@timkoma did you send PR already? I'll take a look at your fix.\n. @timkoma Sorry, I've been working a lot on other projects and I had no time to deal with that bug or review your fix so I approached the problem differently.\n. ",
    "talklittle": "I don't think it could be achieved with the existing code. See the check for !downloadedImage.images https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageManager.m#L208 ? So it bypasses any post-processing for multi-image (animated) images.\nUnless you subclass and copy that entire 165-line method, to change the one line? Sorry, I'm not seeing an elegant way to achieve my intent with existing code.\n. To add more info, the \"image transformation\" here could be used to shrink overly-large animated GIFs. If you don't do the post-processing at this stage, and attempt to do it sometime later on, after the image has been constructed, it's too late because the gigantic animated GIF overflows the heap and crashes the app.\n. @bpoplauschi Done. Thank you for giving this another look.\n. ",
    "iPermanent": "Yes, it's possible, but if you use cookies for login, you should change the code in SDWebimageDownload.m, the method - (id )downloadImageWithURL:(NSURL )url options:(SDWebImageDownloaderOptions)options progress:(void (^)(NSInteger, NSInteger))progressBlock completed:(void (^)(UIImage , NSData , NSError , BOOL))completedBlock   change the code request.HTTPShouldHandleCookies = YES;\n. Thanks for your reply and I resolved the problem. I modified the code to reload data while the data is nil.\n. ",
    "prasathbabu": "Thanks for your reply.. But am getting the below error when i change to arm64 \nUndefined symbols for architecture x86_64:\n  \"OBJC_CLASS$_SDWebImageManager\", referenced from:\n      objc-class-ref in AppData.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n. am using SDWebImage Version 3.6 and valid Architecture as armv7,armv7s and arm64.. \n. yeah am checked.. could you please check your project settings\n\n. No, am downloaded from this link\nhttps://github.com/rs/SDWebImage/releases\ndownloaded latest version framework..\n. yes am tried,\n$ pod init \n$ pod install\nits starts to Analyzing dependencies and am getting\n '[!] Unable to find a target named SDWebImageFramework'\ni want SDWebImage framework file.. now am added whole SDWebImage project files in my project..\nPlease find a solution for this.. \n. Podfile created automatically.. its correct or not ??\n\n. By this $ pod init  command the podfile created automatically in SDWebImage directory..\nok am done with your commands,\nInstalling SDWebImage (3.7.0)\nGenerating Pods project\nIntegrating client project\nBut am getting source code files in Pods folder.. am not get SDWebImage Framework..\nAm also tried with compiled version of Framework.. its not works..\n. @mythodeia i tried to reproduce the issue in the demo project but i can't reproduce in the tableview..\nhere i am using IGGridview to display images in Horizontal view with Hoodies Feature..\nIGGridview - its infragistics Nuclios Component\nStill i am facing the cache issue while retrieve images from cache.. instead of displaying cache images its display the default image.\nwhen i switch off the network after downloaded all images and after switch application the images displayed, when i scroll it the default images displayed in there instead of displaying cache image.\n\n. ",
    "benjaminjackson": "+1 on this, I think I'm being bitten by the same bug.\n. ",
    "staufman": "+1 for including NSURLErrorTimedOut as an error code that doesn't add to failedURLs. I have made this change to my local codebase but would love to see it make its way into the main repo.\n. ",
    "hasanalbukhari": "if (error.code != NSURLErrorNotConnectedToInternet && error.code != NSURLErrorCancelled && error.code != NSURLErrorTimedOut)\nThis failed to detect not connected to internet. I just removed [self.failedURLs addObject:url]; even if it was a broken link.\nI am getting kCFURLErrorCannotConnectToHost which is -1004. when I am not connected to internet. that should be added (Maybe).\nI prefer to remove failedURLs for good.\nOtherwise, it was very helpful. Thank you very much.\n. ",
    "erango": "On iOS > 6, the error codes that don't make it to shouldBeFailedURLAlliOSVersion can still make it to shouldBeFailedURLiOS7 and ruin things still, since the code checks either of them to be YES.\n. @bpoplauschi thanks!\n. ",
    "sairasamdani": "let me check but SDWebImage.xcodeproj is added in frameworks. Do we still need to  add its files in Targer's \"Compile Phases\"?\n. I just added it from target's frameworks.\nAdd other. selected .xcodeproj and added it.\nOn Friday, May 9, 2014, K.K notifications@github.com wrote:\n\n@sairasamdani https://github.com/sairasamdani Did you use CocoaPods or\nyou just copied the frameworks / source code in your project?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/708#issuecomment-42658741\n.\n\n\nSent from iPhone\n. Yeah I have. I have attached a screenshot along.\nOn Fri, May 9, 2014 at 5:53 PM, K.K notifications@github.com wrote:\n\n@sairasamdani https://github.com/sairasamdani i tried that myself in a\nnewly created project and it compiles just fine.\ndid you add the -ObjC flag in the Build Settings in other linker flags\nsetting?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/708#issuecomment-42662326\n.\n. \n",
    "yasirmturk": "do i need to add a new pull request then?\n. okay done\n. ",
    "FranckDG": "The problem we have is that we upload an image from the application, it gets processed by the server and then it becomes available. However, there is a little bit of delay between when we upload to the server and when it actually becomes available because we are doing some backend processing on it. If our application requests the image in that timeframe, it is not available and is cached as a nil image. After that even if the user tries to refresh, he/she will only see a nil image because it is cached as such. I think it would be useful in your library to allow some type of expiration of the nil/invalid image cache for cases like these (or a function to clear the cache of nil images).\n. ",
    "derpoliuk": "@bpoplauschi I was thinking to expose cacheKeyForURL: but didn't want to move imageCache to SDWebImageManager.h. It would be good functionality though.\nThanx for merging.\n. ",
    "AntekM": "I think the first option is better  - will not break the existing logic, and successful downloads are easy to calculate knowing finished and failed\nI need it as I'm downloading images for offline use - so I want to know if the operation was successful or failed \n. ",
    "rivera-ernesto": "This is inside a *.m file so it just modifies it from that particular file and doesn't change the global macro.\nBesides suppressing NSLog calls is a common practice.\n. Thanks.\nActually I was thinking of adding CocoaLumberjack support as well, but there are not many log messages. No sure if it's because no good log library was used or because SDWebImage works so well that it doesn't need to log at all ;)\n. Output also for DEBUG builds.\n. I don't see why completedBlock is required.\nFor instance I call this method to start loading images before they are needed. I don't need a completedBlock as I won't use the result immediately. Once it is needed however a new request will be made for the same URL and SDWebImage will retrieve the predownloaded image from cache (hopefully) or \"merge\" the task with the pre download request.\n. If SDWebImagePrefetcher and this method do exactly the same thing but this method requires the block, then maybe we should only keep one of the methods.\nThe less methods we have and the more flexible they are (for instance choose the best strategy if the block is NULL) the better.\n. ",
    "ilushka85": "Yes this is my push request to fix this issue.  You cannot compare it to the url even if its retained in the cell since the completion happens asynchronously ... You need the url in the completion block to compare against the retained url in the uitableviewcell to see if the image should be set or not.\n. Without testing this it may work.... but its a total hack / workaround for something that truly makes sense to be in the completion block. \n. @bpoplauschi Thank you but since i created the pull request its merged on our end so we are ok for now.  I just wanted to ensure this gets included some time in the future.\n. @bpoplauschi any idea on timeframe on the merge?  I know its a breaking change so just curious.\n. What about if i sent a push update that maintains backwards compatibility by creating some stub methods to reference the old completion blocks?  That way you can call with new one or old one.\n. I'm not sure why this was never passed into completion blocks before, but sometimes you need to determine other logic based on url in completion of image download.\nThis happens if you are using sdwebimage inside a single view to download multiple images that come from an array such as for a slideshow or if you use sdwebimage inside of a reusable cell that gets reused before an async download operation completion is complete as when it completes you must check the imageurl to be the one that currently visible block needs.\n. It breaks compatibility for sure... but this is something thats really needed in a lot of cases.  Not sure how a lot of people have gotten around it since it prevents usage in reusable views without this.\n. @bpoplauschi I will submit a new pull request for this shortly\n. @bpoplauschi  Just updated the pull request.  All old methods that used completionblocks marked as deprecated and new methods created.  ALl methods internally use non deprecated calls.\n. Should be mergeable now.\n. Let me know what you want to change them too... was totally out of ideas\nfor it.\nOn Wed, Jun 18, 2014 at 4:05 PM, Bogdan Poplauschi <notifications@github.com\n\nwrote:\nI think we can come up with better names for the new methods. Let me think\nabout this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/pull/759#issuecomment-46493996.\n. Why wait for a major release.... when we can do this... deprecate old\nmethods and in a major release clean the code of deprecated methods.\n\nOn Thu, Jun 19, 2014 at 11:17 AM, Olivier Poitrey notifications@github.com\nwrote:\n\nWhy do we change the whole API and add so much burden just to add a param\nto the callback?\nI would be more comfortable by keeping the lib clean of deprecated code\nand just make the backward incompatible change in a major release. It won't\nbreak dependent apps as they won't compile and force devs to update their\ncode.\nWe may carefully document this change to help people migrate their code\neasily.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/pull/770#issuecomment-46582157.\n\n\nKind regards,\nIlya Beyrak | Founder & CEO\nResultly LLC.\n(p) 312.273.9401\n(m) 847.912.1212\n(w) www.result.ly\n. Thanks guys\nOn Thursday, June 19, 2014, Bogdan Poplauschi notifications@github.com\nwrote:\n\nThank you\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/pull/770#issuecomment-46607013.\n\n\nKind regards,\nIlya Beyrak | Founder & CEO\nResultly LLC.\n(p) 312.273.9401\n(m) 847.912.1212\n(w) www.result.ly\n. @bpoplauschi any idea when you might pull this in?\n. @justjimmy @bpoplauschi   THANKS GUYS\n. ",
    "dchohfi": "@mplackowski do you think this might fix your problem?\n. @rs do you think this is appropriate?\n. @rs yah, it doesn't break 'cause I overloaded the method adding just an extra param to do the block call and no changes to performance or anything related, no property added or anything stored, just a block call on the main queue\n. @rs do you think you can merge this? I'm looking for that feature too! :dancer: \n. How about doing that at the beginning of the function? Like\ninline UIImage SDScaledImageForKey(NSString key, UIImage *image) {\n    if (!image) return;\n...\n. @bpoplauschi \n. @bizibizi hey man, take a look at SDWebImageManager class, you can use this class to download/save images independent of using it on view or anything else, the UIImageView category is just a helper class built on top of this class.\n. Hey check #702, I don't think this has to be done on the SDWebImage library as it's too connected to your logic.\n. @rs @bpoplauschi I kind of like that, but this will break compatibility, so better to leave for a further version?\n. @poetzhangzi hey, thank you for noticing that, check if #763 fixes your concern, @rs @bpoplauschi  how about that?\n. ",
    "mplackowski": "That is exactly what I was thinking about - great.\n. ",
    "kejinlu": "@fullc0de  Yes, you're right!  \n@rs  can you reverse the \"dispatch_async\" modification lines?\n. @rs   \nSorry for this mistake in my last PR.\n- @function dispatch_barrier_async\n  \n- @abstract\n- Submits a barrier block for asynchronous execution on a dispatch queue.\n  \n- @discussion\n- Submits a block to a dispatch queue like dispatch_async(), but marks that\n- block as a barrier (relevant only on DISPATCH_QUEUE_CONCURRENT queues).\n. ",
    "lehelmedves": "Hello,\nActually, this does not solve the problem of not being able with the above code, to set a different header for each call. How should this be handled? Having a shared downloader means, that a different value for the same header key cannot be set for the different calls.. @dreampiggy thank you so much for your help!. ",
    "inonomori": "Actually, you can pass NSString directly to this method without converting it to NSURL.\ncheck out the source code in SDWebImageManager.m\n// Very common mistake is to send the URL using NSString object instead of NSURL. For some strange reason, XCode won't\n// throw any warning for this type mismatch. Here we failsafe this error by allowing URLs to be passed as NSString.\nif ([url isKindOfClass:NSString.class]) {\n    url = [NSURL URLWithString:(NSString *)url];\n}\n. ",
    "liaojinxing": "@inonomori @bpoplauschi   Thanks! I got it.\n. +1\n. @bpoplauschi   I just update to the newest version and the problem solved. \n. ",
    "albertgh": "Provide some API like downloadWithURL: ...  to return a NSData at completed block will be great.\n. @Bluezen But memCache seems only hold UIImage Object, change to hold NSData maybe a lot work. \n. @Bluezen I think better not hold both UIImage and NSData in memCache, that will cost double times of memory.\n~~Maybe GIF should not stay in memCache ? Or when file is bigger than some specific MB, just go straight to disk cache. Use sandbox space and loading time to save valuable memory.~~\n. +1 same issue \n. ",
    "kean": "I know it's really old, but just for the future references\n\nabout DFImageManager it seems to work great but it didn't handle disk caching and the images are downloaded every time the app is launched\n\nIt does not reinvent caching and relies on NSURLCache which supports standard HTTP caching. If your images are not cached then you have a server with misconfigured HTTP caching. Here's a quick guide on this topic with couple of links on HTTP caching for beginners. If you don't have control over the sever there are ways to bypass HTTP cache-control headers.\n. You may want to check out DFImageManager, it does exactly that. There is a simple built-in networking based on NSURLSession. And there is a DFImageManager/AFNetworking subspec that replaces networking stack with AFNetworking. If also features FLAnimatedImage integration and much more.\n. ",
    "hilen": "Take a look at this : https://gist.github.com/hilen/8ef4a810406051e8f0c1\n. Take a look at this -> https://gist.github.com/hilen/8ef4a810406051e8f0c1\n. ",
    "l4u": "It looks like a bug in the compiler. Adding @synthesize explictly solves the issue temporally. \n. ",
    "Guoxweii": "l have the some problem\n. ",
    "nfox513": "As l4u says, explicitly synthesizing the properties fixes the error:\n@synthesize executing = _executing;\n@synthesize finished = _finished;\n. ",
    "johosher": "yes please @matej update cocoapods as well\n. pod 'SDWebImage', '3.7.1'\nAlso works now\n. ",
    "spinab": "As @l4u and @nfox513 say,\njust need \n@synthesize executing = _executing;\n@synthesize finished = _finished;\nIt seems that changes in https://github.com/rs/SDWebImage/commit/a83f44026946ba44525f7243bf1c73d5f22817f0 were unnecessary.\n. ",
    "fcy": "Looks like iOS 8's NSOperation declares those properties instead of just the getter methods:\n* Before iOS 8*:\n- (BOOL)isExecuting;\n- (BOOL)isFinished;\n* iOS 8*:\n@property (readonly, getter=isExecuting) BOOL executing;\n@property (readonly, getter=isFinished) BOOL finished;\nSo the subclass can just use the properties, no need to redeclare them or explicit create variables. My bad. Just now I noticed the readonly.\n. ",
    "johnlabarge": "Noob here.  Should the tag & cocoapod be updated with this change since it won't compile in Xcode6? \n. ",
    "yurrriq": "In case this is helpful to anyone else, following @matej's advice, I've edited the pertinent line of my Podfile to read\nruby\npod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git', :commit => 'a83f440'\nwhich integrates the version of the code at af3e4f87e4a26606e55ec605c19958e17edc0d65 into my project, thereby making it compile without error.\nPS I'd like to take this opportunity to thank all the contributors to this great project for their hard work.\n. \ud83d\udc4d I can confirm @johosher's comment re: 3.7.1\n. @anasb, I depend on it directly, so I can't say.\n. ",
    "billinghamj": "Can't do the above when your pods depend on SDWebImage\n+1 to pushing it\n. ",
    "diegorozen": "+1 to update pod spec. Thanks!\n. ",
    "anasb": "@BillinghamJ In that case you can add it yourself as a pod and use @yurrriq's line in your Podfile, or like I did, to fetch from the HEAD:\nruby\npod 'SDWebImage', :head\nI am now able to run my project from Xcode 6 Beta 4, even though SDWebImage was only a dependency of one of my pods.\n. Doesn't work if one of your pods has a different version as a dependency, unless I'm doing something wrong.\n``` ruby\n[!] Unable to satisfy the following requirements:\n\nSDWebImage (= 3.7.1) required by Podfile\nSDWebImage/Core required by SDWebImage (3.7.1)\nSDWebImage (~> 3.5.4) required by MWPhotoBrowser (HEAD based on 1.4.0)\n```\n. @yurrriq Even if another pod requires an older version of SDWebImage ?\n. \n",
    "PonyCui": "The version 3.7.1 has nothing help in XCode6 GM\n. CocoaPods still stay in 3.7.0\n. ",
    "ArunVicky": "-->I have created my app in Xcode 5 and i had been using the MWPhotoBrowser that was works fine, Now i have updated Xcode 6. \n-->When i run the same code in Xcode 6 am getting some issues in PSTCollectionView.h class then i have found some updated class for the PSTCollectionView and SDWebImage classes in the Xcode->Target->Build Settings i have changed the valid architecture armv6 and armv7 now my code exceuted in Xcode 6 everything is fine \n-->The issue is that my CollectionView dosen't show the images it showing only the X marks in the collection view cells \n-->I don't know where i commit the mistake or i need any updated SDK for MWPhotoBrowser for Xcode 6 iOS 8\n-->Can u please help me and give me the instruction to implement  MWPhotoBrowser in Xcode 6 iOS 8, Thanks in advance. . \n. ",
    "afiq90": "i added this code  pod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git', :commit => 'a83f440'  in my podfile which is suggested by yurrriq and everything is working fine again. thank you.\n. ",
    "avaiyakirtib": "@synthesize executing = _executing;\n@synthesize finished = _finished;\nsolved my problem , camel case is not working still after renaming\n. ",
    "Dimillian": "I was about to do it, this community is awesome <3\n. ",
    "levey": "Has updated Cocoapods?\n. ",
    "jwyld": "Did anyone verify this actually is the correct fix?  It fixes the build, but I don't believe this is the correct fix.  Specifically, any code relying on the ability to call -isFinished or -isExecuting and expecting to get the values for _finished or _executing, respectively, will not.\nI'm not exactly sure if the overrides of -isFinished and -isExecuting were on purpose and intended to mask the super class' behavior.  Someone with more knowledge in that area should weigh in here.\n. NSOperation moved from declaring the accessors as methods to being declared read-only properties.\n. ",
    "schmidp": "@jwyld sorry, you are correct!\n. ",
    "dblock": "thanks for this\n. ",
    "taylornrolyat": "He put this link in the read me. \nhttp://www.wrichards.com/blog/2011/11/sdwebimage-fixed-width-cell-images/\n. ",
    "pdrcabrod": "We updated to 3.7.1 and it\u00b4s not happening anymore. Thanks\n. ",
    "danube83": "Please see issue #736 comments.\n. ",
    "durre": "Same here :)\n. ",
    "skyem": ":+1: \n. ",
    "achainan": ":+1: \n. ",
    "Pitsko": "Same here\n. ",
    "yoobato": "Same here T_T\n. ",
    "bismark": "This is the more correct fix instead of the combination of #737 & #742.\n. ",
    "LordPinguin": ":+1:\n. ",
    "zhangjiayin": "Same here\n. ",
    "Hagbarth": "+1\n. ",
    "SeanDunford": "+1\n. ",
    "darend": "+1\n. ",
    "medington": "+1 Can we get this rolled into a podspec update?\n. ",
    "mariussoutier": ":+1: \n. ",
    "alvaromb": "Is anyone getting this compiler error with the @synthesize PR?\n/Pods/SDWebImage/SDWebImage/SDWebImageDownloaderOperation.m:39:13: Property implementation must have its declaration in interface 'SDWebImageDownloaderOperation'\nThe code:\n@synthesize executing = _executing;\n@synthesize finished = _finished;\n. ",
    "sdarlington": "While this compiles I'm not sure it's right. iOS 8 has new readonly properties on NSOperation called executing and finished. Surely the code should either comply with the new scheme (with appropriate fallback for older versions of iOS) or use different property names?\n. ",
    "rodericj": "Nice\n. ",
    "silvaric": "I use this :\n[_imageCacheChannel storeImage:image recalculateFromImage:NO imageData:data forKey:key toDisk:YES]\nIt resolved but is strange why i need to have this 'recalculateFromImage:NO' to have transparency after i get image from disk =/\nAnyway sorry for the issue and thanks for the SDWebImage ;)\n. ",
    "bizibizi": "thanks \n. ```\n        Using that I have error\n        SDWebImageManager *w = [[SDWebImageManager alloc]init];\n        [w downloadWithURL:[NSURL URLWithString:s] options:0 progress:nil completed:nil];\n\n```\n*** Assertion failure in -[SDWebImageManager downloadWithURL:options:progress:completed:],\nTerminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: completedBlock'\n*** First throw call stack:\n. thanks man!\n. thanks, good news\n. @bpoplauschi, I have 2 kinds of images: that caching for some time and that uses only while VC is on top of navigation stack\n. You did not set compressionQuality.\nI can set any \"quality\" but the image size will be same\nI am using  5.0.0-beta4 version\n             case .JPEG:\n            if let data = image.sd_imageData(as: SDImageFormat.JPEG, compressionQuality: quality) {\n                convertSuccess(data)\n            } else {\n                convertFail()\n            }\n        case .GIF:\n            if let data = image.sd_imageData(as: SDImageFormat.GIF, compressionQuality: quality) {\n                convertSuccess(data)\n            } else {\n                convertFail()\n            }\n        case .WebP:\n            if let data = image.sd_imageData(as: SDImageFormat.webP, compressionQuality: quality) {\n                convertSuccess(data)\n            } else {\n                convertFail()\n            }\n        case .HEIC:\n            if let data = image.sd_imageData(as: SDImageFormat.HEIC, compressionQuality: quality) {\n                convertSuccess(data)\n            } else {\n                convertFail()\n            }.\n",
    "RunesReader": "I think that the change of the constant value is a bad idea. Maybe it is better like this?\n[SDImageCache sharedImageCache].config.maxCacheAge = 60 * 60 * 24;. @burakkilic\nFor 4.0.0 \n```\n//\n//  AppDelegate.m\n//  SDWebImageTest\n//\n//  Created by Igor Arsenkin on 12.11.16.\n//  Copyright \u00a9 2016 Igor Arsenkin. All rights reserved.\n//\nimport \"AppDelegate.h\"\nimport \"ARRStartViewController.h\"\nimport \"SDImageCacheConfig.h\"\nimport \"SDImageCache.h\"\nstatic const NSInteger kARRMaxCacheAge = 60 * 60 * 24; // 1 day\npragma mark -\npragma mark \n@implementation AppDelegate\n\n\n(BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary )launchOptions {\n    [self setupSDWebImageCache];\nself.window = [[UIWindow alloc] initWithFrame:UIScreen.mainScreen.bounds];\nUIWindow *window = self.window;\nwindow.rootViewController = [ARRStartViewController controllerWithCharacters:nil];\n[window makeKeyAndVisible];\nreturn YES;\n}\n\n\npragma mark -\npragma mark Private\n\n(void)setupSDWebImageCache {\n    [SDImageCache sharedImageCache].config.maxCacheAge = kARRMaxCacheAge;\n}\n\n@end\n``\nThis is work fine for me.. You can try this[image sd_setImageWithURL:avatarPath  placeholderImage:nil options:SDWebImageScaleDownLargeImages];`\nFlag SDWebImageScaleDownLargeImages can help you.. ",
    "smallqiang": "such as http://14.17.109.185/attach//c1.hoopchina.com.cn/uploads/star/event/images/140612/94d8d94e5894b3b65ea7797572f75dab5b9163be.jpg This image size is so small.But I use SDWebImageManager download is so big.About 366k\n. YES.It's sometimes.I don't know why.\n. ",
    "Steven4294": "Same problem\n. What should I shoot for?\nSent from my iPhone\n\nOn Aug 11, 2014, at 10:54 PM, Olivier Poitrey notifications@github.com wrote:\nThat's definitely too big if you want a fast loading on a mobile.\n\u2014\nReply to this email directly or view it on GitHub.\n. I've figured out why I was running out of memory so fast... the SDDownloader has been increasing the sizes of my files:\n\n```\n     [cell.image sd_setImageWithURL:url placeholderImage:nil options:0 completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL *imageURL) {\nNSData *imageData = [NSData dataWithContentsOfURL:url];\nNSData *imgData = UIImageJPEGRepresentation(image, 1); //1 it represents the quality of the image.\n NSLog(@\"%d ~> %d\",imageData.length, imgData.length);\n}];\n```\nAnd then my log\n44967 ~> 315929\n305716 ~> 1842908\n44776 ~> 299237\n750196 ~> 5629146\n50582 ~> 311272\n5328 ~> 32281\n46501 ~> 330062\n5763 ~> 44065\n111407 ~> 898792\n47130 ~> 334580\n160205 ~> 793782\n44779 ~> 308271\n53884 ~> 404815\n48309 ~> 362944\n225083 ~> 1019816\n257637 ~> 2218860\n. Here is a reproduction of the issue (I created a new Xcode project to reproduce the issue):\n```\n - (void)viewDidLoad\n {\n      [super viewDidLoad];\n self.collectionView.delegate = self;\n self.collectionView.dataSource = self;\n[self fetchUrls];\n\n}\n-(UICollectionViewCell )collectionView:(UICollectionView )collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{\nstatic NSString cellIdentifier = @\"Cell\";\nCustomCell cell = [collectionView dequeueReusableCellWithReuseIdentifier:cellIdentifier forIndexPath:indexPath];\nNSURL *url = [NSURL URLWithString:[urls objectAtIndex:indexPath.row]];\n[cell.imageView sd_setImageWithURL:url placeholderImage:nil options:0 completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL *imageURL) {\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n    NSData *imageData = [NSData dataWithContentsOfURL:url];\n\n    NSData *imgData = UIImageJPEGRepresentation(image, 1); //1 it represents the quality of the image.\n    NSLog(@\"%d ~> %d\",imageData.length, imgData.length);\n});\n\n}];\nreturn cell;\n}\n-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{\n     return [urls count];\n }\n-(void)fetchUrls{\nurls = [NSArray arrayWithObjects:\n        @\"http://files.parsetfss.com/d7bcae48-0c89-49b5-8bb8-9c06eec25ff0/tfss-90bf7da7-cda8-4fd5-9661-53680276b8cd-image.png\",\n        @\"http://files.parsetfss.com/d7bcae48-0c89-49b5-8bb8-9c06eec25ff0/tfss-1ff5d277-c76e-4ca6-b041-537f3965526b-image.png\",\n        @\"http://static2.dmcdn.net/static/video/629/228/44822926:jpeg_preview_small.jpg?20120509181018\",\n     nil];\n     }\n```\nLOG\n1648 ~> 4611\n50582 ~> 311272\n111407 ~> 8987921\n. ",
    "ColworxDev": "i used this command to clone , still not getting that folder empty\n git clone https://github.com/rs/SDWebImage.git\n. ",
    "iwasrobbed": "Thanks!\n. ",
    "Panajev": "Was it a duplicate? Dis you find a quick solution?\n. +1 for NSURLSession\n[web [iPhone msg]]\n\nOn 22/lug/2014, at 12:08, Rahul Gautam notifications@github.com wrote:\n+1 for NSURLSessions\nway to go \n\u0081\\\nReply to this email directly or view it on GitHub.\n. This seems like a dealbreaker for people looking to update to 3.7.4, have you guys found a workaround that can be applied app side to mitigate this problem? \nFlushing the cache only the first time the app is started with the new update patched in maybe?\n. Is this a known issue in the readme? I think it may catch many people unaware.\n\nSent from my iPhone\n\nOn 7 Jun 2016, at 09:28, Bogdan Poplauschi notifications@github.com wrote:\n@myriky in 3.8.0 we fixed #1433 with fb0cdb6, 1bf62d4 and #1584. Basically the key created from the image URL no longer contains the query params. In your ca se, the key for this url\nhttp://img1.daumcdn.net/thumb/R124x0@2x.q50/?fname=http://t1.daumcdn.net/kstyle/upload/shopbox/2016/06/81/74/16/0/16748125.jpg is http://img1.daumcdn.net/thumb/R124x0@2x.q50/. That's because of the way the urls are created on this server.\nI'm not sure if this is an isolated issue or we just created problems for a lot of users. I wonder how many urls are like this, because in my whole experience, I never got images with query params.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Apologies then, I guess I overlooked that Bogdan.\n\nSent from my iPhone\n\nOn 7 Jun 2016, at 09:40, Bogdan Poplauschi notifications@github.com wrote:\nIt's been added in the Changelog and the Release notes\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. So exciting :).\n\nSent from my iPhone\n\nOn 16 Apr 2018, at 08:28, Bogdan Poplauschi notifications@github.com wrote:\nThis is supposed to help us track the remaining things for 5.0.0 release:\nsimulate a merge from 5.x to master to see what the overall changes are\n review naming across the project and see where we can improve/simplify\n should we keep using SDWebImage as prefix? for me it's too long\n update docs\n update readme on the support for animated images and examples\n update CHANGELOG.md\n SDWebImage-5.0-Migration-guide.md\n update the diagrams\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "ivanvassilev": "Hi,\nIt was my mistake. Delegate method is working properly.\nI wanted like to setup blur filter to image before the caching.\nSince images were already cached (wrongly) the delegate method has not been called.\nI had to flush SDWebImage cache or remove app from the simulator/device.\nNow everything is working.\n. ",
    "zhijie": "ivanvassilev is right, remove app from device. or SDWebImage won't redownload the image and won't call this delegate\n. ",
    "westk0r": "@ivanvassilev Hey! I have the same issue, can you share with me how you resolved this issue? Thanks. ",
    "jdelStrother": "For what it's worth, I ran into this crash on 3.7.0, while rapidly scrolling a tableview containing UIImageViews, each of which was requesting a load from SDWebImage.  I ended up at this stack trace : \n```\n0  0x000000010e571f9f in CFRelease ()\n1  0x000000010a499d02 in +[UIImage(MultiFormat) sd_imageOrientationFromImageData:] at /Users/jon/Developer/iphone/Pods/SDWebImage/SDWebImage/UIImage+MultiFormat.m:63\n2  0x000000010a499b20 in +[UIImage(MultiFormat) sd_imageWithData:] at /Users/jon/Developer/iphone/Pods/SDWebImage/SDWebImage/UIImage+MultiFormat.m:34\n3  0x000000010a489960 in -[SDWebImageDownloaderOperation connectionDidFinishLoading:] at /Users/jon/Developer/iphone/Pods/SDWebImage/SDWebImage/SDWebImageDownloaderOperation.m:343\n4  0x000000010b5e536b in __65-[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:]_block_invoke ()\n5  0x000000010b498bdb in -[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:] ()\n6  0x000000010b498aec in -[NSURLConnectionInternal _withActiveConnectionAndDelegate:] ()\n7  0x000000010e381637 in ___ZN27URLConnectionClient_Classic26_delegate_didFinishLoadingEU13block_pointerFvvE_block_invoke ()\n8  0x000000010e37f802 in ___ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 ()\n9  0x000000010e590f74 in CFArrayApplyFunction ()\n10 0x000000010e2f23e7 in RunloopBlockContext::perform() ()\n11 0x000000010e2f2217 in MultiplexerSource::perform() ()\n12 0x000000010e2f203a in MultiplexerSource::_perform(void*) ()\n13 0x000000010e579d21 in CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION ()\n14 0x000000010e5795f2 in __CFRunLoopDoSources0 ()\n15 0x000000010e59546f in __CFRunLoopRun ()\n16 0x000000010e594d83 in CFRunLoopRunSpecific ()\n17 0x000000010e59f8c1 in CFRunLoopRun ()\n18 0x000000010a487651 in -[SDWebImageDownloaderOperation start] at /Users/jon/Developer/iphone/Pods/SDWebImage/SDWebImage/SDWebImageDownloaderOperation.m:103\n19 0x000000010b56cc0b in __NSOQSchedule_f ()\n20 0x000000010f8e072d in _dispatch_client_callout ()\n21 0x000000010f8ceeab in _dispatch_async_redirect_invoke ()\n22 0x000000010f8e072d in _dispatch_client_callout ()\n23 0x000000010f8d0b27 in _dispatch_root_queue_drain ()\n24 0x000000010f8d0d12 in _dispatch_worker_thread2 ()\n25 0x000000010fc7cef8 in _pthread_wqthread ()\n26 0x000000010fc7ffb9 in start_wqthread ()\n```\nBy this point, self.imageData was nil, which is why imageSource ended up as NULL.  self.expectedSize was set, however, so didReceiveResponse presumably got called.\nIs it a race condition where one thread finishes downloading & calls connectionDidFinishLoading, and then another thread calls reset ?\n. Actually, I can reproduce this pretty easily if I put a sleep(1) in connectionDidFinishLoading to exaggerate the race condition, and repeatedly calling sd_setImageWithURL from the main thread.\nPossibly connectionDidFinishLoading should take a reference to imageData at the start (like it does with completionBlock), and bail if either are nil?   Even that might not be sufficient though - is it ok calling done (and thus reset) at the end of connectionDidFinishLoading, when the main thread might have tried to start a new image loading in the middle of that method?\n. Yeah, 3.7.1 fixes the crash, though you get \" ImageIO: CGImageSourceCreateWithData data parameter is nil\" in the log.  Still slightly concerned about race conditions in the latter half of connectionDidFinishLoading, but I can't reproduce any problems with it.\n. ",
    "duemunk": "Yes, but you don't get all the nice stuff like cancellation and prioritization of downloads as operations.\n. ",
    "gsempe": "I go through the execution path. The SDWebImageManagerDelegate's imageManager:transformDownloadedImage:withURL: method is called in the the completed block of downloadImageWithURL:options:progress:completed: and so get the decoded image just downloaded.\nSo, it's too late to consider any action in the this method because the application already received memory exception.\nYou should consider any way to prevent memory exception because it is a common problem that SDWebImage users have.\n. There is at least the case of this stackoverflow question: http://stackoverflow.com/questions/24177205/handling-download-of-very-large-images-with-sdwebimage\nIf you try to download this Pinterest favicon with SDWebImage you'll get almost all the time a memory exception : http://passets-ec.pinterest.com/images/about/logos/Pinterest_Favicon.png\n. yes @mythodeia, thank you! I fixed the link\n. The solution currently implemented is not perfect. I have to follow the Apple sample code Large Image Downsizing to make it better: https://developer.apple.com/Library/ios/samplecode/LargeImageDownsizing/Introduction/Intro.html#//apple_ref/doc/uid/DTS40011173-Intro-DontLinkElementID_2\n. ",
    "petesh": "missed the 3.7 upgrade train\n. ",
    "sourcebits-mahesh": "Hi,\nAfter debugging of your code we comes to know that what ever the url coming from our server its adding to the failed Url's array and then its not going to download the image, my question was why this Url's adding to the failed Url array(NSMutableArray failedUrls) .Please help out from this issue,thanking you.\n. Hi ,\nI was sharing the dummy url's , i can't post the actual url's because the work is in progress, we are using the back end as c#.NET.Please look at the below Url's:\n\u201chttps://ourservername.blob.core.windows.net/pictures/687caabf-2a04-45b2-a955-12c186c30e28\"\n\u201chttps://ourservername.blob.core.windows.net/pictures/31b021d6-f071-4331-8fae-5f31c2ec089f\"\n\"https://ourservername.blob.core.windows.net/pictures/d8829185-76b3-4022-a53b-be83801u035f\"\n\"https://ourservername.blob.core.windows.net/pictures/2490024d-cc5c-43bd-8e42-5875578cax5d\"\n\"https://ourservername.blob.core.windows.net/pictures/3db90963-4fb0-4f26-8e76-9375d009b3ea\",\n\"https://ourservername.blob.core.windows.net/pictures/4e0d61a2-382c-4124-bfc4-e25ab8de6905\"\nPlease let us the know the issue , thanking you.\n. Hi ,\ni got your point but when the url's were removed from the failed url's array? , for time constraint i comment out the line [self.failedURLs addObject:url].\n. Yes, even though I used the option,its loading the previous image.\n. Thank you ,its working fine.Can you explain a bit what you added?\nOn Mon, Nov 10, 2014 at 2:45 PM, Konstantinos K. notifications@github.com\nwrote:\n\n@tbrknt https://github.com/tbrknt\ngo to SDWebImageManager.m file inside the downloadImageWithURL method and\nchange this\nif (image && options & SDWebImageRefreshCached) {\n            // force progressive off if image already cached but forced refreshing\n            downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n            // ignore image read from NSURLCache if image if cached but force refreshing\n            downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n        }\nto this:\nif (image && options & SDWebImageRefreshCached) {\n            // force progressive off if image already cached but forced refreshing\n            downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n            // remove SDWebImageDownloaderUseNSURLCache flag\n            downloaderOptions &= ~SDWebImageDownloaderUseNSURLCache;\n            // ignore image read from NSURLCache if image if cached but force refreshing\n            downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n        }\ni tried it and i got it working.\nlet me know how it turns out\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/951#issuecomment-62358369.\n. Thank you , but I am every time enabling the SDWebImageRefreshCached flag,so\nhow it going to work in my case.\n\nOn Mon, Nov 10, 2014 at 6:05 PM, Konstantinos K. notifications@github.com\nwrote:\n\n@sourcebits-mahesh https://github.com/sourcebits-mahesh\nwhat i did is add this\n// remove SDWebImageDownloaderUseNSURLCache flag\n            downloaderOptions &= ~SDWebImageDownloaderUseNSURLCache;\nthis removes the SDWebImageDownloaderUseNSURLCache option only when the\nuser has enabled the SDWebImageRefreshCached flag\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/951#issuecomment-62378404.\n. \n",
    "ZuYuanZhou": "@sourcebits-mahesh Will you try to add the retryFailed options? \noptions:SDWebImageRetryFailed\n. ``\nthread #1: tid = 0x7fdda6, 0x03310e13 libobjc.A.dylibobjc_retain + 19, \nqueue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS \n(code=1, address=0x65726566)\n    self.imageView.sd_setImageWithURL(MYIMAGEURL\n        , placeholderImage: nil\n        , options: SDWebImageOptions.RetryFailed\n        , completed:{(image: UIImage?, error: NSError?, cacheType: SDImageCacheType!, imageURL: NSURL?) in\n            if image != nil {\n                println(self)\n        })\n\n.\nimport UIKit\nclass ViewController: UIViewController {\n@IBOutlet weak var imageView: UIImageView!\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    // Do any additional setup after loading the view, typically from a nib.\n    let block: SDWebImageCompletionBlock = {[unowned self](image: UIImage!, error: NSError!, cacheType: SDImageCacheType!, imageURL: NSURL!) -> Void in\n        println(self)\n    }\n\n    var url = NSURL(string: \"http://yikaobang-test.u.qiniudn.com/FnZTPYbldNXZi7cQ5EJHmKkRDTkj\")\n    self.imageView.sd_setImageWithURL(url, completed:block)\n}\n\n}\n```\nCrash at line println(self)\nchange to below code without luck either:\nlet block: SDWebImageCompletionBlock = {(image: UIImage!, error: NSError!, cacheType: SDImageCacheType!, imageURL: NSURL!) -> Void in\n            println(self)\n        }\nThe self is released before I want to use in the block.\n``\n thread backtrace\n* thread #1: tid = 0xaf7d9, 0x0020d7c1 libswiftCore.dylibswift_getObjectType + 17, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x10)\n    frame #0: 0x0020d7c1 libswiftCore.dylibswift_getObjectType + 17\n    frame #1: 0x001e9016 libswiftCore.dylibswift_stdlib_dynamicCastToExistential1 + 230\n    frame #2: 0x000ce05e libswiftCore.dylibSwift.print <A, B : Swift.OutputStreamType>(A, inout B) -> () + 142\n    frame #3: 0x001463d8 libswiftCore.dylibSwift.println (A) -> () + 88\n  * frame #4: 0x0003bb30 testSDtestSD.ViewController.(image=Some, error=None, cacheType=Some, imageURL=Some, self=0x00000000) -> () -> ()).(closure #1) + 112 at ViewController.swift:18\n    frame #5: 0x0003b106 testSDpartial apply forwarder for testSD.ViewController.(viewDidLoad (testSD.ViewController) -> () -> ()).(closure #1) + 118 at ViewController.swift:0\n    frame #6: 0x0003bc0b testSDreabstraction thunk helper from @callee_owned (@owned Swift.ImplicitlyUnwrappedOptional<ObjectiveC.UIImage>, @owned Swift.ImplicitlyUnwrappedOptional<ObjectiveC.NSError>, @unowned C.SDImageCacheType, @owned Swift.ImplicitlyUnwrappedOptional<ObjectiveC.NSURL>) -> (@unowned ()) to @callee_unowned @objc_block (@unowned Swift.ImplicitlyUnwrappedOptional<ObjectiveC.UIImage>, @unowned Swift.ImplicitlyUnwrappedOptional<ObjectiveC.NSError>, @unowned C.SDImageCacheType, @unowned Swift.ImplicitlyUnwrappedOptional<ObjectiveC.NSURL>) -> (@unowned ()) + 155 at ViewController.swift:17\n    frame #7: 0x0003e201 testSD88-[UIImageView(.block_descriptor=) sd_setImageWithURL:placeholderImage:options:progress:completed:]_block_invoke_2 + 449 at UIImageView+WebCache.m:53\n    frame #8: 0x0003dc92 testSD__88-[UIImageView(.block_descriptor=<unavailable>, image=0x7be6c630, error=0x00000000, cacheType=SDImageCacheTypeDisk, finished='\\x01', imageURL=0x7be6dc10) sd_setImageWithURL:placeholderImage:options:progress:completed:]_block_invoke + 626 at UIImageView+WebCache.m:53\n    frame #9: 0x00052c33 testSD__69-[SDWebImageManager downloadImageWithURL:options:progress:completed:]_block_invoke149(.block_descriptor=) + 179 at SDWebImageManager.m:252\n    frame #10: 0x0004f8c8 testSD__69-[SDWebImageManager downloadImageWithURL:options:progress:completed:]_block_invoke76(.block_descriptor=<unavailable>, image=0x7be6c630, cacheType=SDImageCacheTypeDisk) + 3448 at SDWebImageManager.m:252\n    frame #11: 0x00062274 testSD__42-[SDImageCache queryDiskCacheForKey:done:]_block_invoke_2(.block_descriptor=) + 52 at SDImageCache.m:310\n    frame #12: 0x023cf7b8 libdispatch.dylib_dispatch_call_block_and_release + 15\n    frame #13: 0x023e44d0 libdispatch.dylib_dispatch_client_callout + 14\n    frame #14: 0x023d2726 libdispatch.dylib_dispatch_main_queue_callback_4CF + 340\n    frame #15: 0x00a7e43e CoreFoundation__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE + 14\n    frame #16: 0x009bf5cb CoreFoundation__CFRunLoopRun + 1963\n    frame #17: 0x009be9d3 CoreFoundationCFRunLoopRunSpecific + 467\n    frame #18: 0x009be7eb CoreFoundationCFRunLoopRunInMode + 123\n    frame #19: 0x033f85ee GraphicsServicesGSEventRunModal + 192\n    frame #20: 0x033f842b GraphicsServicesGSEventRun + 104\n    frame #21: 0x011ccf9b UIKitUIApplicationMain + 1225\n    frame #22: 0x0003c7fe testSDtop_level_code + 78 at AppDelegate.swift:12\n    frame #23: 0x0003c83b testSDmain + 43 at AppDelegate.swift:0\n    frame #24: 0x026386d9 libdyld.dylib`start + 1\n(lldb) \n```\n. Thanks @lubert, @bpoplauschi , I have created the demo project which you can find here: https://github.com/ZuYuanZhou/testSD.git\nI test it with Xcode6-Beta5, swift\n. Hi @harshcs , just test the demo(https://github.com/ZuYuanZhou/testSD.git), it's works well, you may miss something.\n. So how can I help you?\n\nOn 2014\u5e7412\u670822\u65e5, at 19:32, Harsh Mehrotra notifications@github.com wrote:\n@ZuYuanZhou https://github.com/ZuYuanZhou Thanks a lot for the sample code!\nI have already followed the same steps but it didn't worked for me!\nSince a month I was banging my head and by just deleting and adding the bridge file, everything started working! It is very frustrating but many thanks to all of you for your inputs!\n\u2014\nReply to this email directly or view it on GitHub https://github.com/rs/SDWebImage/issues/833#issuecomment-67827738.\n. \n",
    "dulgan": "@bpoplauschi Nice work here, My app run just way better than before, this was the exact problem I had :+1: \n@rs It just need to be updated in CocoaPods, thanks ! :) \n. ",
    "web-differently": "clang: error: no such file or directory: '/Users/Webdifferently/Downloads/SDWebImage-master 2/Vendors/libwebp/src/utils/random.c'\nclang: error: no input files\nCommand /Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang failed with exit code 1\n. ",
    "fdezjose": "Hi @bpoplauschi, sorry for not replying before. I'm using version 3.7 and now it works fine again. Thank you!\n. ",
    "valentinradu": "I'm having the exact same problem here.\n. Sorry for the extra late reply. I can confirm, my problem was the fact that after pulling the new version I didn't imported the right categories. Thanks for this cool class. (As a side question, why did you prefixed your methods with sd_? Just curious.)\n. ",
    "dezinezync": "I can confirm that this only occurs when the UIView+WebCacheOperation.{h,m} are not included in the project. Works perfectly fine when they are included. \n. ",
    "Kry256": "I have tried it inside a clean project. I have all the new classes correctly imported. Basically it happens that when I try to load an image using:\n[imageView sd_setImageWithURL:__MyURL__\nplaceholderImage:[UIImage imageNamed:@\"placeholder.png\"]\noptions:SDWebImageRetryFailed];\nThen it will jump inside\n- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock {\nAnd as the first instruction of the method it calls\n[self sd_cancelCurrentImageLoad];\nThe call make SDWebImage jumps into\n- (void)sd_cancelCurrentImageLoad {\n    [self sd_cancelImageLoadOperationWithKey:@\"UIImageViewImageLoad\"];\n}\nAnd here the crash happens with this message\n-[UIImageView sd_cancelImageLoadOperationWithKey:]: unrecognized selector sent\nto instance 0x1780ade0 \nTerminating app due to uncaught exception 'NSInvalidArgumentException'\nreason: '-[UIImageView sd_cancelImageLoadOperationWithKey:]: unrecognized selector sent to instance 0x1780ade0'\n First throw call stack:\n(0x2d49af0b 0x37c31ce7 0x2d49e837 0x2d49d137 0x2d3ec098 0x41a0e7 0x418097 0x417d9f 0xf7c9d 0x2fd2ae15 0x2fd29651 0x2fd257a3 0x2fcca305 0x2f94631b 0x2f941b3f 0x2f9419d1 0x2f9413e5 0x2f9411f7 0x2f93af1d 0x2d466039 0x2d4639c7 0x2d463d13 0x2d3ce769 0x2d3ce54b 0x3233b6d3 0x2fd2d891 0xfefc1 0x3812fab7)\nlibc++abi.dylib: terminating with uncaught exception of type NSException \n. Sorry for the late in answer. In the sample project I wasn't able to reproduce this issue, however with the last commit cd4b925448c828be7492e132e4b3690301fd30b7 everything came back to work well\n. ",
    "ymakin": "@bpoplauschi Sorry, but i still have this problem.\n. ",
    "coryhymel": "I am having this issue again as well. I installed using cocoapods and the methods show up as valid but when running I get unrecognized selector . These items are included in the pod file so everything should be there. \nUIView+WebCacheOperation.h\nUIView+WebCacheOperation.m\nUIImageView+HighlightedWebCache.h\nUIImageView+HighlightedWebCache.m\nThe only thing that may be causing this is that I had SDWebImage added originally by dragging the files in and setup the project environment for it. I removed all the old files, removed the other linker flags then ran the pod install. Any suggestions? \nAlso, that is weird is that setImageWithURL works fine?? \n. ",
    "qiang437587687": "Just as  @brynbodaylee and @coryhymel  said    check  your  SDWebImage  include  it or not ?? UIView+WebCacheOperation.h\nUIView+WebCacheOperation.m\nUIImageView+HighlightedWebCache.h\nUIImageView+HighlightedWebCache.m\nI slove this Issue  add it  to the  progect!.\n. ",
    "Claus79": "Great. Could you please give me the link for downloading it? I'm currently using cocoaPods so I think I will directly import the library in my project\n. Cool. I will let you know as soon as I finish the test!\n. It works! I've removed the SDWebImage line from my Podfile and imported directly the library from the folder downloaded using your git commands. Everything went back to normal. Thanks a lot!\n. I will. Thanks again!\n2014-06-30 11:25 GMT+01:00 Bogdan Poplauschi notifications@github.com:\n\nYou can still use CocoaPods, as that is the recommended way to include\nwith SDWebImage. Until we release a new version (3.7.0), you can use pod\n'SDWebImage', :head\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/786#issuecomment-47516371.\n. \n",
    "obelix74": "I'm on cocoa pods 3.7.1 (and I use RubyMotion), this isn't working, the callback isn't being called :(.\n. ",
    "kuberan": "\nI am trying to build an iOS project which used to work on iOS 7. Now on iOS 8 I get this error when I try to build on Xcode. Will I be able to fix this if I just upgrade to the latest SDWebImage ?\n. ",
    "omnidynmc": "Completion blocks including (failure) errors are an accepted and common design practice.\nAlso, I'm not sure the contract really is being changed. Most users expect that they will receive the most recent request, ignoring the possibility of out-of-sync replies. When it happens they are forced to correct this in either their local copy or on their side of the code. I cannot think of an instance where a user would willingly want an out-of-sync issue. It's been a bug in SDWebImage for at least 2 years now that should be fixed imho.\n. ",
    "AdibContractorCC": "Thanks for the feedback @bpoplauschi. New PR submitted against 4.0 branch: https://github.com/rs/SDWebImage/pull/796\n. ",
    "mitchellporter": "Has any progress been made on this?\n. @mythodeia Ok thanks for the info, and yes I was also looking at #793 it's too bad no progress has been made on that.\n. ",
    "zyi1992": "Any progress? \n. ",
    "stojanovicigi": "@rs @shifu Great, can't wait new release.\n. ",
    "Air-Craft": "Just been looking into this as it's causing a significant number of crashes amongst users in the app I'm working on. Might it be a BAD_ACCESS in disguise (memory gets freed and repurposed into another class type resulting in the \"cancel\" or \"setCancelBlock\" to crash)?  \nA bit of guesswork here but might this be a result of a stack overflow due to a circular loop here:\n~L244 \n```\n        operation.cancelBlock = ^{\n            [subOperation cancel];\n        @synchronized (self.runningOperations) {\n            [self.runningOperations removeObject:weakOperation];\n        }\n    };\n\n```\nand ~L318\n- (void)cancel {\n    self.cancelled = YES;\n    if (self.cacheOperation) {\n        [self.cacheOperation cancel];\n        self.cacheOperation = nil;\n    }\n    if (self.cancelBlock) {\n        self.cancelBlock();\n...ie cancelBlock calls cancel which calls cancelBlock...\nUnfortunately, I can't recreate this error so I'm trying to come at it by following the code logic...\n. ",
    "timkoma": "You can try my PR: https://github.com/rs/SDWebImage/pull/1069\n. I'm using 3.7.1 and I'm still getting crash.\nWhy it was closed ?\n. I think that in my case it is a concurency problem. I called [[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:url];\nseveral  times  from background threads. \nI wasn't aware of the cancelAll at the beginning of the prefetchURLs. Also there is no warning in the doc that I have to call prefetchURLs from main thread. Anyway I think that prefetchURLs should work in the background  (at least it will be very nice feature).\n. @rsanchezsaez +1\n. I'm curious when the subOperation gets destroyed:\n    id  subOperation = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage downloadedImage, NSData data, NSError *error, BOOL finished) {\nShould not it be a property of the 'operation' (SDWebImageCombinedOperation operation) or at least marked as __block variable ? \n. I'm using 3.7.1 and I'm still getting crash.\n@zhongchao-han can I see you fix ?\n. At least it correctly sets cancelBlock for SDWebImageOperation  before SDWebImageDownloaderOperation subOperation is created (and started?). Because now it's set when cache operation is compleded and subOperation created and inserted into queue.\n. see also my comment in https://github.com/rs/SDWebImage/issues/910\n. FYI: \nsame problem with self.thread in\n- (void)connection:(NSURLConnection )connection didFailWithError:(NSError *)error {\ncan cause calling both completedBlock and cancelBlock or calling \nself.completedBlock(nil, nil, error, YES); when self.completedBlock is nil;\n. @newacct please review my PR\n. @newacct No, more things needs to be changed, see my comments in PR https://github.com/rs/SDWebImage/pull/1044\n. Same here, crashed thread: 12\nSo it seems that UIKit is called from backgroud thread.\n @clevelandlam which thread was it in your case?\n.  Exception Backtrace:\n1   CoreFoundation  __exceptionPreprocess + 132\n2   libobjc.A.dylib objc_exception_throw + 56\n3   CoreFoundation  __NSFastEnumerationMutationHandler + 136\n4   Foundation  -[NSISEngine chooseOutgoingRowHeadForIncomingRowHead:] + 296\n5   Foundation  -[NSISEngine minimizeConstantInObjectiveRowWithHead:] + 176\n6   Foundation  -[NSISEngine tryUsingArtificialVariableToAddConstraintWithMarker:rowBody:usingInfeasibilityHandlingBehavior:mutuallyExclusiveConstraints:] + 284\n7   Foundation  -[NSISEngine tryToAddConstraintWithMarker:expression:integralizationAdjustment:mutuallyExclusiveConstraints:] + 680\n8   Foundation  -[NSLayoutConstraint _addLoweredExpression:toEngine:integralizationAdjustment:lastLoweredConstantWasRounded:mutuallyExclusiveConstraints:] + 316\n9   Foundation  -[NSLayoutConstraint _addToEngine:integralizationAdjustment:mutuallyExclusiveConstraints:] + 256\n10  UIKit   -[UIView(UIConstraintBasedLayout) _layoutEngine_didAddLayoutConstraint:roundingAdjustment:mutuallyExclusiveConstraints:] + 452\n11  UIKit   -[UIView(UIConstraintBasedLayout) _constraints_didChangeAutoresizingConstraintsArrayForContainedView:] + 248\n12  UIKit   -[UIView(UIConstraintBasedLayout) _updateAutoresizingConstraints] + 104\n13  UIKit   -[UIView(AdditionalLayoutSupport) updateConstraints] + 124\n14  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 244\n15  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n16  CoreFoundation  CFArrayApplyFunction + 64\n17  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n18  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n19  CoreFoundation  CFArrayApplyFunction + 64\n20  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n21  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n22  CoreFoundation  CFArrayApplyFunction + 64\n23  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n24  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n25  CoreFoundation  CFArrayApplyFunction + 64\n26  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n27  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n28  CoreFoundation  CFArrayApplyFunction + 64\n29  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n30  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n31  CoreFoundation  CFArrayApplyFunction + 64\n32  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n33  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n34  CoreFoundation  CFArrayApplyFunction + 64\n35  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n36  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n37  CoreFoundation  CFArrayApplyFunction + 64\n38  UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n39  UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n40  Foundation  -[NSISEngine withBehaviors:performModifications:] + 132\n41  UIKit   -[UIWindow(UIConstraintBasedLayout) updateConstraintsIfNeeded] + 224\n42  UIKit   -[UIWindow(UIConstraintBasedLayout) layoutSublayersOfLayer:] + 88\n43  QuartzCore  -[CALayer layoutSublayers] + 180\n44  QuartzCore  CA::Layer::layout_if_needed(CA::Transaction*) + 296\n45  QuartzCore  CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 28\n46  QuartzCore  CA::Context::commit_transaction(CA::Transaction*) + 276\n47  QuartzCore  CA::Transaction::commit() + 420\n48  QuartzCore  CA::Transaction::observer_callback(__CFRunLoopObserver*, unsigned long, void*) + 76\n49  CoreFoundation  __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 28\n50  CoreFoundation  __CFRunLoopDoObservers + 368\n51  CoreFoundation  __CFRunLoopRun + 760\n52  CoreFoundation  CFRunLoopRunSpecific + 448\n53  CoreFoundation  CFRunLoopRun + 108\n54  Myapp   -[SDWebImageDownloaderOperation start] (SDWebImageDownloaderOperation.m:107)\n55  Foundation  __NSOQSchedule_f + 72\n56  libdispatch.dylib   _dispatch_client_callout + 12\n57  libdispatch.dylib   _dispatch_async_redirect_invoke + 148\n58  libdispatch.dylib   _dispatch_client_callout + 12\n59  libdispatch.dylib   _dispatch_root_queue_drain + 552\n60  libdispatch.dylib   _dispatch_worker_thread2 + 72\n61  libsystem_pthread.dylib _pthread_wqthread + 352\n62  libsystem_pthread.dylib start_wqthread + 0\n. I can't share the code, but why it starts from SDWebImageDownloaderOperation start?\n. Here it is:\n```\n- (UICollectionViewCell )collectionView:(UICollectionView )collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    HTBookPage * page = [self.book.pages objectAtIndex:indexPath.item];\n    HTBookPageCell * pageCell = [collectionView dequeueReusableCellWithReuseIdentifier:@\"BookPageCell\" forIndexPath:indexPath];\n[pageCell.pageImage sd_setImageWithURL:[NSURL URLWithString:page.source]];\nreturn pageCell;\n\n}\n```\n. I think that it is related to SDWebImage because it starts from SDWebImageDownloaderOperation's start method\n. SDWebImagePrefetcher and UIImageView+WebCache both use [SDWebImageDownloader sharedDownloader] or better to say SDWebImageManager instances share download manager. So cancelPrefetching can cause this happen, see #1034 \n. Hmm, I think that cancel needs to be synchronized also with all operation's completion blocks\n. It has nothing to do with commit 9cc8269:\nIf you will set the same URL to 2 different UIImageViews, only one download operation is started(for the first one). If the first one gets cancelled (e.g. because of setting the new URL) the download operation is cancelled(even though there is a second request for the same URL!). \nThis is a design bug in the SDWebImageDownloaded.\n. Because SDWebImageDownloader's downloadImageWithURL doesn't call it in it's cancelled block?\ncancelled:^{\n                                  SDWebImageDownloader *sself = wself;\n                                  if (!sself) return;\n                                  [sself removeCallbacksForURL:url];\n                             }\n. No, you got it wrong.\nIf you start the download operation from UIImageView+WebCache and download operation is cancelled, there is no guaranty that UIImageView+WebCache will be notified about cancel, because SDWebImageDownloader's cancelled(line 156):\ncancelled:^{\n            SDWebImageDownloader *sself = wself;\n            if (!sself) return;\n            [sself removeCallbacksForURL:url];\n    }\nwill not do it!\nAnd more If you will set the same URL to 2 different UIImageViews, only one download operation is started(for the first one). If the first one gets cancelled because of setting the new URL(possible with UICollectionView recycled views during scrolling), second will never load any image and will never be notified about cancel. \n. Ah, just noticed that this can be a root cause in #1032\n. I cannot agree with #699. Correct fix for Race condition is to synchronize the call either with @synchronize or using GCD (e.g. serial dispatch queue). \nBut not skipping(not calling) some code causing race condition!\nAs you can see you have some other guys complaining about missing calls here #847.\n. Thread : Crashed: com.apple.root.user-initiated-qos.overcommit\n...\n1 UIKit 0x2e6dc815 -[UIImage dealloc] + 192\nCrash is not in main thread, but during UIKit's dealloc => so you are accessing (or SDWebImage) UI from background thread.\nAre you using SDWebImageDownloaderProgressBlock ? It can be called from background thread.\n. Read this article, especially 'The Deallocation Problem': https://developer.apple.com/library/ios/technotes/tn2109/_index.html\n\nThe Deallocation Problem\nOne of the biggest problems with using secondary threads from a UIKit object,\nlike a view controller, is ensuring that your object is deallocated safely. This\nsection explains how this problem arises, and what you can do about it.\nWhen you start a secondary thread, it's common for that thread to retain the\ntarget object. This happens in numerous circumstances, including:\nwhen you start a secondary thread with any of the following methods:\n-performSelectorInBackground:withObject:\n-performSelector:onThread:withObject:waitUntilDone:\n-performSelector:onThread:withObject:waitUntilDone:modes:\nwhen you start a secondary thread with NSThread\nwhen you run a block asynchronously and the block references self or an \ninstance variable\nWhen a secondary thread retains the target object, you have to ensure that the \nthread releases that reference before the main thread releases its last \nreference to the object. If you don't do this, the last reference to the object is \nreleased by the secondary thread, which means that the object's -dealloc \nmethod runs on that secondary thread. This is problematic if the object's -\ndealloc method does things that are not safe to do on a secondary thread, \nsomething that's common for UIKit objects like a view controller.\n....\n. I agree that problem is somewhere in SDWebImage, but the question is the same:\nAre you using \n\n- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock { \nwith not empty progressBlock? Because it can be called from background thread.\n. The Travis CI build failed because of:\n[!] The platform of the target ios (iOS 5.0) is not compatible with Expecta (0.3.2) which has a minimum requirement of iOS 5.1.1 - OS X 10.7.\nThe command \"pod update\" exited with 1.\n. @rs, @bpoplauschi \nThere is a problem with WebP. I do not know how to fix it:\n-> SDWebImage (3.7.2)\n    - WARN  | [iOS] [SDWebImage/WebP]  libwebp/src/utils/bit_writer.c:262:11: warning: code will never be executed [-Wunreachable-code]\n    - NOTE  | [iOS] [SDWebImage/WebP]  libwebp/src/utils/bit_writer.c:261:29: note: silence by adding parentheses to mark code as explicitly dead\n[!] SDWebImage did not pass validation.\nYou can use the --no-clean option to inspect any issue.\nThe command \"pod lib lint\" exited with 1.\n. Thanks, now The Travis CI build passed.\n. Sorry for the late response, I'm busy right now, I will take a look at this next week.\n. @theprojectabot  - I had no crash     \n. still haven't been merged. \n@mythodeia @bpoplauschi are you planning to merge it ?\n. @mythodeia do you have a demo how to repro? I wasn't aware of the any issues. \n. I though that you are not planning to merge it :)\n. I can try to merge from master...\n. @bpoplauschi merged with master\n. @bpoplauschi how it is going? Still comparing with #883?\n Is there anything I can help with?\n. @pronebird: I tried to fix issues you are complaining here(#1089 #1090 and some others)\nYou can find it here:\nhttps://github.com/timkoma/SDWebImage/tree/SDWebImageOperation%2BCanceling/SDWebImage\nI think that it will call completedBlock with cancelled error code in case '304', but it can be easy fixed. \nI will be happy if some body can test it.:-)\n. https://github.com/rs/SDWebImage/pull/1069\n. @pronebird Did you have a time for review or test ?\n. Yes, and I have a fix for it in following PR: https://github.com/rs/SDWebImage/pull/1069 \n. One note: progress:^(NSInteger receivedSize, NSInteger expectedSize){} - can be called from background thread - use dispatch_(a)sync(dispatch_get_main_queue(), ^{}) there if you need update UI\n. I wondering if it may be related to cell reusing in TableView/CollectionView. \nOld image load operation completed right after the new one. \nI'm aware of the [self sd_cancelCurrentImageLoad]; but maybe it is too late to cancel, and new image is cached on disk-  operation is done very quickly and finished download replaces the the cached one. \nCanceling is not done very correctly - I think there is a need to wait for canceled callback and then continue with processing new downloaded image\n. I think that there is a bug in SDWebImage: progress block gets called on background thread.\ntry to call the body of the progress block method using dispatch_async:\ndispatch_async (dispatch_get_main_queue(), ^{\n        @strongify(self);\n        [self.progressView setProgress:receivedSize / (float)expectedSize];\n});\n. Not sure if this fixes the problem . Taking pointer to NSArray using barrier doesn't solve threading problem: another thread can still modify array of callbacks while loop at rows  142-145 is using it.\nCode:\ncallbacksForURL = [sself.URLCallbacks[url] copy];\nshould help. \n. This is a kind of workaround, not a real fix. Correct fix is usage of the @synchronized or some dispatch queue ...\n. ",
    "buguibu": "I'm using 3.6. \nMaybe be it's related with NSURLCache used in RestKit, but i'm not sure. As i told you in other issue https://github.com/rs/SDWebImage/issues/800 i set the images using blocks, even in UITableView, and since i'm collecting all the operations and canceling them before leave the current ViewController this issue seems that isn't raising any more.\n. Finally discover that the bug isn't related with this library, it's due to a custom integration that i made for SWTableViewCell and the bad use of \"[cell prepareForReuse];\".\n. It was related with the code posted on https://github.com/rs/SDWebImage/issues/800 ,more specifically with the completion block , now i'm not working with this code but i suspect that setting the image should be done in the main queue in a way like this\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{\n        // Main thread work (UI usually)\n    }];\nHope it helps but now i dont have the code and the app for reproduce it again, i'm sorry.\n. It loos like:\nicons/getIcon?name=citi-bank\nand it needs authentication, that's why i created that category. Debugging with Charles seems that an apropiated Accept header is sent:\nimage/png\nand the response the right Content-type:\nimage/png;charset=utf-8\n. I don't think that it's a problem with authentication because if i call to the url directly the reser redirects me to a login page, try it:\nhttp://betavalue.com/controllers/icons/getIcon?name=citi-bank\nBut i'm not 100% sure that it's a problem with this great library.\n. When i reproduce it again i'll post the crash log, but you are right! It's the option parameter that was wrong, but why? \nThe method\n- (id <SDWebImageOperation>)downloadImageWithURL:(NSURL *)url options:(SDWebImageDownloaderOptions)options progress:(void (^)(NSInteger, NSInteger))progressBlock completed:(void (^)(UIImage *, NSData *, NSError *, BOOL))completedBlock\nuses parameters of type SDWebImageDownloaderOptionsnot SDWebImageOptions.\n. A tiny difference that does the trick, thanks so much for the support.\n. ",
    "vani2": "@buguibu can you specify what produce this crash? I have the same bug.\n. ",
    "austinlouden": "The completion block in the updated version of SDWebImage has been changed. Try this:\n```\n[addView sd_setImageWithURL:[NSURL URLWithString:url]\n        placeholderImage:[UIImage imageNamed:NSLocalizedString(@\"image_loading_placeholder\", nil)]\n               completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL *imageURL) {\n               se.image = [[ToolClass instance] imageByScalingAndCroppingForSize:CGSizeMake(size.width, size.height) source:image];\n\n           }];\n\n```\n. ",
    "morad": "@heresamit I am having similar issue. How did you fix it?\n. @rsanchezsaez I am still facing the issue. I am currently running IOS 8 and Xcode 6 beta 5 (both latest). \nI have this problem on UITableView Cell, the block is not being called after the first one. \n. @rsanchezsaez I have increased _downloadQueue.maxConcurrentOperationCount to 20, from 2 which was default and that fixed the problem. But I am guessing this is just solving the symptom and not the actual issue... since the queue of loading images is not functioning as it should...\n. @rsanchezsaez correct, the problem still occurring with your code. As for your question, I am just sending calls to SDDownloadManager. Here is the code\n- (UITableViewCell )tableView:(UITableView )tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {....\nSDWebImageManager *manager = [SDWebImageManager sharedManager];\n```\n        [manager downloadWithURL:imageURL\n                         options:0\n                        progress:^(NSInteger receivedSize, NSInteger expectedSize)\n         {\n             // progression tracking code\n             NSLog(@\"going to try to download %ld\", indexPath.row);\n     }\n                   completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished)\n     {\n         if (image)\n         {\n                                 [storyImage setImage:image];\n\n         } else {\n\n             NSLog(@\"error is %@\", error);\n         }\n     }];\n\n```\n. not at all. The only way I got this to work is changing\nthe maxConcurrentOperationCount default limit from 2 to 20..\nOn Fri, Aug 15, 2014 at 8:36 PM, Ricardo S\u00e1nchez-S\u00e1ez \nnotifications@github.com wrote:\n\nHmm, even with my tentative fix, I continue to experience this problem if\na call [[SDWebImageManager sharedManager] cancelAll] while there are\ndownloads in progress. So this is serious.\nAre you manually doing cancellAll calls elsewhere?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/847#issuecomment-52335117.\n. \n",
    "sara-shokry": "i also have same issue . ",
    "glenna": "I'm experiencing this issue as well under crappy network conditions.\n. ",
    "cleanandsober": "I am also facing the same issue. Loading many image in table view with sdwebimage freezes the app. You can check the threading from this link. http://io.putul.me/oQ67RC\n. Hi,\nSorry but I don\u2019t understand the issue you\u2019re experiencing. Could you go through what you need help with?\n\nBest Regards,\nTeam Sober Grid\ncontact@sobergrid.commailto:contact@sobergrid.com\n[cid:2B498DF3-5AF6-43D6-94B5-E240B78B11C8]\nShare us on Facebookhttps://www.facebook.com/sharer/sharer.php?u=http://goo.gl/NglQWa\nShare us on Twitterhttps://twitter.com/home?status=http://goo.gl/NglQWa\nOn Aug 13, 2015, at 11:39 PM, yanzhiwei147 notifications@github.com<mailto:notifications@github.com> wrote:\nI face similar issue as well.What's the release time for resolve this issues(version 4.0.0)? It often happen on iPhone 4 or equiv device.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rs/SDWebImage/issues/803#issuecomment-130951702.\n. ",
    "yanzhiwei147": "I face similar issue as well.What's the release time for resolve this issues(version 4.0.0)? It often happen on iPhone 4 or equiv device.\n. Thank you, close issue\n. ",
    "skrew": "Same problem here. Having application freezing are a very bad user experience, as many users don't know how to kill / restart application.\nAny \"good practice\" to have ?\nEdit: putting [SDWebImageDownloader.sharedDownloader setMaxConcurrentDownloads: 1]; fix the problem for me. It's better than nothing ! ;)\n. ",
    "rajapandian-dev": "this issue still there in 4.0.\nusing https://github.com/onevcat/Kingfisher for time being . ",
    "dirtyhenry": "I have the same issue here in 4.0.\nThe main thread hangs and when I pause the execution in Xcode, this is what I get.\n\n(sorry for the screenshot, not sure how I can output this as text)\n. @rs I think this issue should be reopened, what do you think?. ",
    "RobertBiehl": "Hi jhogebator,\nThis behavior is expected. To be displayed images need to be decompressed, and in that state they require a greater amount of memory.\nIn the case of SDWebImage the images are being cached in a decompressed state to reduce latency when drawing the image or using [uiimageview setimage:]. This is especially useful in a rapidly changing context like a scrolling uitableview.\nBest\nRob\n\nOn 13.07.2014, at 02:32, jhongenator notifications@github.com wrote:\nApologies if this is not the proper place to ask questions. I am using UIImageView+WebCache to load and display one picture into each cell of a UITableViewCell, using [manager downloadWithURL: options:0].\nWhen I load 50 images that are each 10-15k in size, the memory usage jumps by almost 10 Megabytes. I thought perhaps that it was something else in my code and not SDWebImage, but when I tried running my program calling [[SDImageCache sharedImageCache] setValue:nil forKey:@\"memCache\"] ,I did not see this kind of jump anymore.\nIs there any reason that when I don't have memCache set to nil that it takes 200k to cache a 10-15k image? Am I doing something wrong?\nthanks\njames\n\u2014\nReply to this email directly or view it on GitHub.\n. @lixinfei can you please fix this build? I don't want to create another pull request for the same thing.\n. Screenshot of error that has been fixed by this commit:\n\n. Ok, I guess that does not work in every case. Travis CI fails to build because it now cannot find FLAnimatedImageView anymore. \ud83d\ude1e @bpoplauschi any suggestions?\n. Implementation of sd_animatedWebPImageWithWebPData is inconsistent with sd_webpImageWithWithWebPData. See handling of checking\nif (!WebPInitDecoderConfig(&config)) { in sd_webpImageWithWithWebPData v.s. just calling WebPInitDecoderConfig(&config);in sd_animatedWebPImageWithWebPData.\n\nAlso you should remove redundant code by checking the ANIMATION_FLAG only in one location in sd_imageWithWebPData. You could forward WebPData directly to both methods.\n. ",
    "jhongenator": "ah of course, thanks for the response guys!\n. ",
    "cooler333": "I'm using SDWebImage (3.6)\nbug not fix. Can't launch app\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438 \u0432\u0430\u0448 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041a\u0443\u043b\u0435\u0440\u043e\u0432\nMon, 14 Jul 2014 07:22:50 -0700 \u043e\u0442 Bogdan Poplauschi notifications@github.com:\n\nPlease try the latest master. We will release a new version soon.\n\u2014\nReply to this email directly or  view it on GitHub .\n.  with Swift it doesn't compile\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438 \u0432\u0430\u0448 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041a\u0443\u043b\u0435\u0440\u043e\u0432\nMon, 14 Jul 2014 07:28:54 -0700 \u043e\u0442 Bogdan Poplauschi notifications@github.com:\n\nPlease try with the demo project. It compiles fine for me in Xcode 6.\n\u2014\nReply to this email directly or  view it on GitHub .\n.  Yes\n\nSent from Mail.Ru app for iOS\n\nMonday 21 July 2014 09:48 +0400 from WilliamBao  notifications@github.com:\ni have a same problem with xcode beta 3 using swift.\nthe latest version fixed these?\n\u2014\nReply to this email directly or  view it on GitHub .\n. \n",
    "williambao": "i have a same problem with xcode beta 3 using swift.\nthe latest version fixed these?\n. ",
    "wentaozone": "This is my hand by mistake, please ignore it\n. ",
    "pengpai": "This crash isn't only happening on iOS8, but also on iOS7,iOS6 ...\n. ",
    "maeji": "\nStill reproduce that crash.\n. ",
    "farhanumer": "I just got the same crash with 3.7.1 \n\n. ",
    "DmitrijMaz": "same thing happens for cacheOperation setter.\n- (void)cancel {\n  self.cancelled = YES;\n  if (self.cacheOperation) {\n      [self.cacheOperation cancel];\n      self.cacheOperation = nil; // <---- crash here\n  }\n  if (self.cancelBlock) {\n      self.cancelBlock();\n// TODO: this is a temporary fix to #809.\n  // Until we can figure the exact cause of the crash, going with the ivar instead of the setter\n//        self.cancelBlock = nil;\n      _cancelBlock = nil;\n  }\n  }\n. ",
    "matteogobbi": "It continue to crash.\n. ",
    "dmiedema": "I can consistently get this to crash by prefetching different sets of images very quickly.\nI created an example project to show the crash with instructions in the README on how to trigger the crash also. It currently crashes for me 100% of the time\nhttps://github.com/dmiedema/SDWebImageCrashExample\n. @justjimmy looks like referencing that commit fixes the issue in the example project.\nThanks\nFor anyone curious and reading this, until its put into a new release putting\npod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage', :commit => '3587b8d1e0f51710dfd1cec0c3a723048f7473f4'\nin your Podfile will fix this particular issue.\n. @rromanchuk theres no particular reason im not using :head. I personally tend to prefer releases since i feel & hope theyre more tested & verified to be working.\nCurrently we've worked around the cancel all bug. i just didnt know it was resolved so i wanted to make a test project where it was reproducable.\nIts our most common crash for now, however with the work around & known fix it should become a non-issue. At least for us.\n. ",
    "drumnkyle": "Any idea when 3.1.2 is going to come out with this fix? We are trying to push an update to the SlideShare app tomorrow and this in our top 3 crashes. \nI think I'm just going to change our pod to reference the specific commit. Is 3587b8d1e0f51710dfd1cec0c3a723048f7473f4 still the right one to use to fix all these issues, including 798?\n. ",
    "loicgriffie": "Hi,\nHere is the xcode screenshot\nLe 16 juil. 2014 \u00e0 13:04, Bogdan Poplauschi notifications@github.com a \u00e9crit :\n\nHi there. Could you copy-paste or screenshot the warnings from Xcode?\n\u2014\nReply to this email directly or view it on GitHub.\n. Weird it was inside the email when i answered.\n\n\n. I agree but the method signature as well as the block properties do not define parameters name. By default they should be included, no ?\nfor example the following signature : \n- (void)prefetchURLs:(NSArray *)urls progress:(void (^)(NSUInteger, NSUInteger))progressBlock completed:(void (^)(NSUInteger, NSUInteger))completionBlock;\nshould be\n(void)prefetchURLs:(NSArray *)urls progress:(void (^)(NSUInteger completedNo, NSUInteger totalNo))progressBlock completed:(void (^)(NSUInteger completedNo, NSUInteger skippedNo))completionBlock;\n. do not forget the blocks in lines 19 et 20 from SDWebImagePrefetcher.m\n@property (copy, nonatomic) void (^completionBlock)(NSUInteger, NSUInteger);\n@property (copy, nonatomic) void (^progressBlock)(NSUInteger, NSUInteger);\n. Thank for the quick fix\n. ",
    "seviu": "Pull request made, closing this issue\n. I totally agree. I have tested it with bogus NSData and it does not crash. Only if the imageData is null, it fails. The pull request just does a check. Maybe it is safer that the code is rolled back, and this pull request then can be discarded.\n. ",
    "Shenjiaqi": "That link really help a lot. \n. ",
    "premedios": "How do I remove WebP support?\n. And remove the libwebp pod right?\n. I'm using UIImageView+SDWebImage_M13ProgressSuite. How do I get it to use SDWebImage/Core only?\n. ",
    "muffe": "Hey @bpoplauschi,\nin our case we have some apps that are powered by a web backend.\nUpon starting the first time the content will be downloaded and the app will be offline available.\nBecause we have little to no control over what kind of images the customer want's to have in his apps (just URLs) we set a limit of images that will be kept on disk to avoid unnecessary data overhead as much as possible but still make as much of the app offline available as possible.\nIf you see no use for that in the general scope of the library that's fine, I just thought maybe someone else could need that too :)\n. That's fine, but how could I achieve that using the delegate? I want to download the images in any case, I just want to keep the latest e.g. 100 pictures in cache, not discard the download entirely.\n. The problem is that I want to guarantee that the latest e.g. 100 images are kept on the disk, not more, not less (only exception if there are less than 100 picture obviously). And as I said, before I start the image download I have no idea how large the file is. So I can't really replicate this behavior with the given code base. \n. Absolutely, just wanted to make clear what the problem is.\n. ",
    "ivan-golub": "Hi @bpoplauschi its been a long time since I made this PR \ud83d\ude04 \nThe idea was to keep EXIF data of png image, including transformations and other stuff, which was apparently lost if use UIImagePNGRepresentation. Unfortunately I didnt find any apple doc proof, just few SO links on related topic: here, here or opposite goal\nI had this issue in one of my projects back in 2014, and its is not relevant for me anymore. Unfortunately I cant test current SDWebImage version to check how it behaves right now, so its absolutely up to you if you want to have this code in or not.\nThx for your time and effort.\n. ",
    "rahulgautam": "+1 for NSURLSessions\nway to go :+1: \n. ",
    "plivesey": "I'm looking for a feature to make fetching from the network even more generic. We would like to integrate SDWebImage with our own network stack. One of the reasons for doing this is NSURLSession, but we have other reasons (such as having a single point to test network diagnostics).\nThere are a couple of ways of doing this, but possibly the easiest way of doing it is to make SDWebImageDownloaderOperation subclassable. It isn't really right now because so much of the logic occurs in the NSURLConnection delegates.\nI'd be willing to do the work to make this change (mostly just refactoring the methods which do the actual work into different methods and adding documentation), but wanted to see if it was something people were interested in.\nAlso, should I add a new issue for this discussion?\n. So, taking another look at SDWebImage stuff, it looks like this functionality is sort of there. You can specify the operation class which seems to be a good hook into the networking:\nFrom the docs:\n- Sets a subclass of SDWebImageDownloaderOperation as the default\n  - NSOperation to be used each time SDWebImage constructs a request\n  - operation to download an image.\nHowever, SDWebImageDownloaderOperation isn't easily subclassable right now. If it had some methods in the .h like downloadImageWithURL, and processData:(NSData *) etc, then this would be a workable solution (maybe not as good as FastImageCache though).\n. Same problem here. Looks like it will be solved with Issue #1061.\n. ",
    "mishagray": "I'll generate another branch.  I accidentally pushed stuff into this branch that didn't want to be here\n. This pull req got polluted.\nCleaner reqest here: https://github.com/rs/SDWebImage/pull/941\n. This is a better version of this : https://github.com/rs/SDWebImage/pull/825\n. ",
    "pdfun": "Sorry,I don't update to latest.-_-#\n. ",
    "staxmanade": "Just found this issue: https://github.com/rs/SDWebImage/pull/819 - apologies if this is a duplicate...\n. :+1:\n. ",
    "lubert": "I'm experiencing this issue too, I'll try to make a demo project this weekend unless @ZuYuanZhou beats me to it\n. A possible workaround is to use SDWebImageDownloader instead.\nSDWebImageDownloader.sharedDownloader().downloadImageWithURL(imageUrl, options: nil, progress: nil, completed: {[weak self] (image, data, error, finished) in\n    if let wSelf = self {\n        // do what you want with the image/self\n    }\n})\n. ",
    "mk3d": "Same issue for me!\nCan't use self in completion block. \nIf i try to println it ok, but any call with self crash with EXC_BAD_ACCESS\nAny idea? Many thanks\n. Thanks @lubert, thats it! Many thanks for this workaround.\nJust have to call like this\nSDWebImageDownloader.sharedDownloader().downloadImageWithURL(myImageUrl, options: nil, progress: nil, completed: {[weak self] (image, data, error, finished) in\n        if let wSelf = self {\n            // do what you want with the image/self\n            println(\"have an image now\")\n            self?.imageView.image = image\n        }\n    })\n. I have used like this with cache in swift:\nHope this help :)\n```\n// Get the image form cache or download it\nSDWebImageManager.sharedManager().downloadImageWithURL(NSURL(string: sUrl),\n    options: nil,\n    progress: nil,\n    completed: {[weak self] (image, error, cached, finished, url) in\n        if let wSelf = self {\n            println(\"i have image now\")\n        // do what you want with the image/self\n        myImageView.image = image\n    }\n\n})\n```\n. ",
    "racse1": "Thanks @lubert, @mk3d for solution with SDWebImageDownloader. How I do use SDImageCacheType and SDWebImageDownloader together? I need something like that:\nobjective-c\n[cell.actionImage setImageWithURL:[NSURL URLWithString:[cellData valueForKey:@\"image_path\"]]\n                     placeholderImage:nil\n                            completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {\n                                if (image && cacheType != SDImageCacheTypeMemory) {\n                                    [self fadeInLayer:cell.actionImage.layer];\n                                }\n                            }];\n. @james075 i know about this method. But I need image and cache manipulation in completion block.\n. @vinod1988 thanks for help. Progress method works fine. But completion block not works for me. Any idea? Thanks so much.\nswift\ncell.thumbnail.sd_setImageWithURL(NSURL(string: cellData[\"image_path\"].string!), placeholderImage: UIImage(), options: SDWebImageOptions.RefreshCached,\n                progress: { (receivedSize: Int, expectedSize: Int) -> Void in\n                    cell.thumbnail.layer.fadeIn() // Working!\n                },\n                completed: { (image: UIImage!, error: NSError!, cacheType: SDImageCacheType!, imageURL: NSURL!) -> Void in\n                    if cacheType != SDImageCacheType.Memory {\n                        cell.thumbnail.layer.fadeIn() // Crash: Thread 1: EXC_BAD_ACCESS (code=2, address=0x30)\n                    }\n                })\n. @mk3d how I do determine if image loaded from cache or image downloaded? Like a:\nswift\nif cacheType != SDImageCacheType.Memory\nThanks!\n. ",
    "james075": "Another workaround is by using:\nself.imageView.sd_setImageWithURL(imageURL)\nIf you don't have any image manipulation\n. ",
    "sean-hill": "I'm having this same issue as mentioned here.\n. This may be fixed, but I'm using 3.7, and it's still happening. PS I'm using Swift.\nThe completion block crashes if I access any non local variables to the completion block\n```\nimageView.sd_setImageWithURL(\n    NSURL(string: url),\n    placeholderImage: placeholderImage,\n    options: nil,\n    progress: nil,\n    completed: { (image: UIImage?, error: NSError?, cacheType: SDImageCacheType!, imageURL: NSURL?) in\n    if image != nil {\n        println(\"This works great!\")\n    }\n\n}\n\n)\n```\nBut if I add any local variables to the completion block from my class or parent function, it crashes!\n```\ncompleted: { (image: UIImage?, error: NSError?, cacheType: SDImageCacheType!, imageURL: NSURL?) in\nif image != nil {\n    println(\"This is great!\")\n    // println(imageView) or println(self)\n    // BOOM!!!\n}\n\n}\n```\nThere is no stack trace, just lldb as the last print statement, but attached is an image showing the debugger.\n\nWhat can I do about this?\n. ",
    "netwire88": "Yes, same here.. unforthnately.\n. I'm seeing this as well in iOS 8 with error: <Error>: ImageIO: CreateMetadataFromXMPBufferInternal  Threw error #203 (Duplicate property or field node)\n. ",
    "masterkrang": "Any updates on this? Having the same issue.\n. ",
    "jaernouts": "Any updates? I see this issue still exists... Is there another workaround? I should have caching enabled, and the SDWebImageDownloader workaround doesn't use caching....\n. ",
    "harshcs": "I am not able to use SDWebImage in my Swift project!\nPlease let me know how can I use that?\nI want to use\n\"- (void)sd_setImageWithURL:(NSURL *)url;\" in my Swift file. But I am not able to use that as compiler is not recognizing this function and giving me error!\nPlease help! Its been a month I am stuck on this!\nAny sample code will be helpful!\n. I know this but I am not getting any response from anywhere and I am stuck since long time.\nCan you please help me in this regard!\nI have also opened an issue regarding the same but still no response on that.\n. Its simple to understand the issue:\nI have followed the steps for integrating the SDWebImage and It worked for me in with Objective C\nbut now I have to integrate the same with Swift. And for that I have included the sdk and added the dependencies as well but when I am trying to call the methods of SDWebImage using . operatotor, it is not recognizing them. I have also created the Bridge file and included the \nimport \nimport \"UIImageView+WebCache.h\"\nin that. \nHere is my code and error I am getting!\nCode:\ncell.imageView.sd_setImageWithURL(sharedImageURL)\nError:\n'UIImageView' does not have a member named 'sd_setImageWithURL'\n. @ZuYuanZhou  Thanks a lot for the sample code!\nI have already followed the same steps but it didn't worked for me!\nSince a month I was banging my head and by just deleting and adding the bridge file, everything started working! It is very frustrating but many thanks to all of you for your inputs!\n. I am not able to use SDWebImage in my Swift project!\nPlease let me know how can I use that?\nI want to use \n\"- (void)sd_setImageWithURL:(NSURL *)url;\" in my Swift file. But I am not able to use that as compiler is not recognizing this function and giving me  error!\nPlease help! Its been a month I am stuck on this!\nAny sample code will be helpful!\n. @mythodeia I have seen the instructions but I cannot see the download button or link to download the SDWebImage.Framework. I can see the docwnload link for the version 3.6 but not for 3.7. Can you please send me the link to download the framework without using POD as I am not very much aware of Cocoa Pods.\n. @bpoplauschi Thanks for sharing the link.\nBut I will say that this link should be given in the instructions so that one can save his/her time in searching the link to the framework. There should be clear step by step instructions including all the possible ways.\n@bpoplauschi: I will try to learn about Cocoa Pods but it will be better if you can provide me some intro about that like what is this and how it works. I will be thankful to you.!\n. @mythodeia Thanks a lot but it will be helpful if Author of SDWebImage can provide the clear steps to integrate the API in iOS app. That will be really helpful to the new learners and beginners. \n. @bpoplauschi I didn't mean that. I just wanted to convey that this way of downloading should have also been mentioned in the steps so that one can download the content from that way too. And thanks a lot for adding the link.\n. Any update please!\n. ",
    "umosys": "I tried the optional binding technique suggested by @lubert , but still get the EXC_BAD_ACCESS error\nself.manager.downloadImageWithURL(url,\n            options: nil,\n            progress: nil,\n            completed: { [weak self] (image: UIImage!, error: NSError!, cacheType: SDImageCacheType!, finished: Bool!, imageURL: NSURL!) in\n                if let wSelf = self {\n                    // self is TableViewController\n                    // previewView is Content View of a Table View Cell\n                    wSelf.previewView.backgroundColor = UIColor(patternImage: image)\n                }\n        })\nMay I know if a solution is coming along, or any other ideas? Thanks :)\n. ",
    "oanaandreea": "I also had the same issue mentioned by forlooper. My code still crashed even if I used weak self. The solution I came up with was to declare a global variable having the same type as my controller and assigning the \"self\" object to this variable. The global variable can be accessed from the completion block. I am new to mobile development so I'm not sure how global variables impact the memory, but this works for me for now.\nSample code: \nvar globalSetController: SettingsViewController!\nclass SettingsViewController: UIViewController {\n     var blurView: FXBlurView!\n      override func viewDidLoad() {\n            globalSetController = self\n            backgroundImgView.sd_setImageWithURL(urlImage, completed: { (image: UIImage!, error: NSError!, cacheType: SDImageCacheType!, imageURL: NSURL!) -> Void in\n                globalSetController.blurView.updateAsynchronously(true, completion: nil)\n                globalSetController = nil\n            })\n   ...\n}\n. ",
    "renatosc": "Same problem here with Swift. Looking at ZuYuanZhou/testSD repo (Thanks for the example) as mentioned, I noticed that the function call needs to be: \nsd_setImageWithURL()\nand not\nsetImageWithURL()\nas described in the README. Please update it, if possible.\n. ",
    "Voidozzer": "What worked for me was creating SDHelper in Obj-C, implementing sd_setimagewithurl there and call helper class method from my Swift viewcontroller\n. ",
    "codepushr": "Same problem here with EXC_BAD_ACCESS. Exception breakpoint halts on line 202 at dispatch_barrier_sync(self.barrierQueue, ^{ in SDWebImageDownloader.m\nEDIT: My problem was that I allocated the SDWebImageDownloader on my own instead of using sharedDownloader. Now it's working.\n. ",
    "ghazel": "Just a simple initializer instead of alloc, init, set image. \n. I'm not suggesting leaving all requests running, but if the URL is the same, it doesn't make sense to cancel it and start it again.\n. To do that, I also need to call sd_removeImageLoadOperationWithKey when the operation completes. This function actually doesn't seem to be called at all. Is that a bug?\n. https://github.com/rs/SDWebImage/issues/967 https://github.com/rs/SDWebImage/issues/339\n. storeImage appears to use async, not sync:\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDImageCache.m#L209\n. Adding yet another event to the ioQueue for the completion would do it (as long as it's serial, which it is). Kinda hacky, but simple. Something like:\nobjc\ndispatch_async(self.ioQueue, ^{\n    dispatch_main_sync_safe(^{\n        if (!weakOperation.isCancelled) {\n            completedBlock(downloadedImage, nil, SDImageCacheTypeNone, finished, url);\n        }\n    });\n});\n. The Right Way would probably be to add a completion callback to storeImage.\n. Although I should mention, another consideration here is the most users probably don't care about when the file written to the disk cache.  If you were, say, trying to set images on a UIImageView as quickly as possible, waiting for the file to write to disk would slow things down.\n. ",
    "mohsinalimat": "In latest code of SDWebImage code use sd_setImageWithURL instead of setImageWithURL\nuse below line of code and #import \"UIImageView+WebCache.h\"\nfeatureImage.image = [UIImageView sd_setImageWithURL:[NSURL URLWithString:cellImageLink]];\n. featureImage = [UIImageView sd_setImageWithURL:[NSURL URLWithString:cellImageLink]];\nplz remove your .image in your code\n. @bpoplauschi you are rock and @brittanyl i think now you satisfy...\n. ",
    "brittanyl": "@mohsinalimat Whether I use sd_setImageWithURL or setImageWithURL, the error still exists. Imported the header file as well. \n. @mohsinalimat Still doesn't work. @bpoplauschi, maybe some context will help. I'm passing an imageview defined in my tableviewcell to my detailviewcontroller. The image populating the imageview is pulled via a URL (cellImageLink). I'm passing other objects in the segue just fine; it's only the sd_setImageWithURL line in the DetailViewController that's giving me headache. Here's my code:\nTableViewController.m\n[cell.featureImage sd_setImageWithURL:[NSURL URLWithString:secondLink]];\ncellImageLink = secondLink;\n- (void)tableView:(UITableView )tableView didSelectRowAtIndexPath:(NSIndexPath )indexPath\n  {\nFullArticleViewController *detailViewController = [[FullArticleViewController alloc]\n                                                        initWithNibName:@\"FullArticleViewController\" bundle:nil];\n    detailViewController.title = [[Doctors objectAtIndex:indexPath.row] objectForKey:@\"node_title\"];\n    detailViewController.articleDetail = [Doctors objectAtIndex:indexPath.row];\n    [detailViewController.featureImage sd_setImageWithURL:[NSURL URLWithString:cellImageLink]];\n    NSLog(@\"cellImageLink is %@\", cellImageLink);\n    [self.navigationController pushViewController:detailViewController animated:YES];\n  }\nDetailViewController.h\n{\n    IBOutlet UILabel firstnameLabel;\n    IBOutlet UILabel descriptionLabel;\n    IBOutlet UILabel bodyLabel;\n    IBOutlet UIImageView featureImage;\n}\n@property (nonatomic, copy) NSDictionary articleDetail;\n@property (strong, nonatomic) UIImageView featureImage;\n@property (strong, nonatomic) NSString *cellImageLink;\nDetailViewController.m\nfeatureImage = [UIImageView sd_setImageWithURL:[NSURL URLWithString:cellImageLink]];\nNSLog(@\"cellImageLink is %@\", cellImageLink);\n. @bpoplauschi You...rock. Ha ha ha. That line no longer gives me an error; thank you. That said, when I run the app, the imageview in my DetailViewController is empty. I NSLog'd cellImageLink in my segue and the image link appears in the console, but when I NSLog cellImageLink in my detailview, it says that it's null. That said, it appears as though cellImageLink isn't being passed; or something is blocking it?\n. Hi @mythodeia! I believe that's what I'm doing now? cellImageLink is just the URL. I've redeclared featureImage in the DetailViewController, and am trying to display it now in ViewDidLoad with this:   \n[featureImage sd_setImageWithURL:[NSURL URLWithString:cellImageLink]];\nHowever when I NSLog cellImageLink, for some reason it says it's \"null\". Any idea why my URL isn't being passed? *Note: When I NSLog cellImageLink in the TableViewController segue, it gives me the full URL. Not sure why it's not making it over to the detailview? :/\n. ",
    "purkylin": "I also have a similar problem:\nThe code:\nimport \n...\nUIImageView imageView = (UIImageView )[cell viewWithTag:101];\n    [imageView sd_setImageWithURL:[NSURL URLWithString:channel.logo_url]\n                                placeholderImage:[UIImage imageNamed:@\"back.png\"]];\nThe issue:\n -[UIImageView sd_setImageWithURL:placeholderImage:]: unrecognized selector sent to instance 0x186a4120\n. ",
    "weakfl": "Invalid\n. ",
    "Friend-LGA": "+1\n. +1\n. +1\n. +1\n. ",
    "bing900717": "Me too,where is the random.c?\n. ",
    "alexito4": "Thank you! ;)\n. I just tried pointing to the last commit in master and the issue is still happening (with cocoapods 1.0.0.beta.6)\npod 'SDWebImage/WebP', :git => 'https://github.com/rs/SDWebImage', :commit => \u20180da78a4'\n. ",
    "Krivoblotsky": "Sure. Catch it.\nhttps://github.com/rs/SDWebImage/pull/942\n. ",
    "Igor-Palaguta": "Can't understand where in this sample cached image is sent to completion block. As I see just cancelBlock is called in cancelInternal. Please can you assist. Does this code work as expected?\n. is headersFilter - what I need?\n. Yes! Thank you for great library! If it could store video it will be the best!\n. ",
    "rickmak": "@rsanchezsaez I have checkout and try the code. It seem all working well in my own custom scroll view with multiple images with same URL.\n. ",
    "komocode": "+1\n. ",
    "dongyu430": "+1 same problem\n. The same problem occurs\n. preload ? SDWebImagePrefetcher \n. SDImageCache ioQueue is serial\n. ",
    "mantiswang": "oh yeah, thx, it's working now. Because the request is timeout always!\n. ",
    "54dev": "@bpoplauschi  yes,i have use git clone https://github.com/rs/SDWebImage.git --recursive many times.\nBut still will prompt this error, I found alpha_processing.c file in src/dsp/, but the error message says is in src/utils this path\n. thank you for you reply @bpoplauschi \n1.i'm ,useing git clone https://github.com/rs/SDWebImage.git --recursive get the last version at today.\n2.open SDWebImage floder,select SDWebImage and Vendors,move to Xcode of project \"3rd\" group.\n. ",
    "MelWinter": "The web page is available now, thanks a lot!\n. WOW, it's great! But the README.md doesn't change the website yet, that's why I didn't find the new page.\n. ",
    "starFelix": "@bpoplauschi My app should support iOS 5.0. \nSo I had to use 2.x\n. @bpoplauschi As the note said,the 3.7.1 requires iOS 5.1.1 minimum deployement version.\n. ",
    "mattjgalloway": "@bpoplauschi That's fair. I still think it's useful. I'll try to rework my code without using this new method and see again where I hit the requirement for this.\n. Hmm, I think I'm going to keep this handy method in my fork actually. So the use case is imagine you have an app which shows an image. The image is stored locally, but then uploaded to a server. Before the upload happens, a model object hold the local URL; after the upload happens, the model object switches to the remote URL. But it's the same image of course for both URLs.\nIf you let SD download the image again when the URL changes, then your model thinks it doesn't have an image during the time of the download. But really it does - you as the programmer know that the data on the server is going to be the same as the data you have locally, because you just uploaded it. [Yes, the server could process the image somehow, but that's up to the developer to decide if they want to use this approach of copying the local file.]\nSo, you have the file locally. You could read the file from the existing location and cache it in SDImageCache manually for the new remote URL. But, that requires you to put it into a UIImage. Moreover, it requires you to read the file into memory when it's already on disk.\n@bpoplauschi Would you be open to a method to take a path and copy the file from that location into the cache for a given key? That would solve the problem in a slightly different way.\n. Yeh it makes sense what you're saying. I think there's value in it if it's the right API.\nI was toying with the idea of aliases. So one key being an alias to another key. But that implies you can set them up before they're downloaded. But that's effectively what I'm doing here.\n\nOn 2 Nov 2014, at 07:49, Bogdan Poplauschi notifications@github.com wrote:\n@mattjgalloway I still think that a method for this will cause confusion. I think it doesn't fit with all the other methods available. @rs could you take a look and give us your opinion?\n\u2014\nReply to this email directly or view it on GitHub.\n. I've had to rework this even more. See the additional tests I added.\n\nThe TL;DR is that because -cancel on the download operation is asynchronous, it wreaks havoc with the state stored in the downloader. I've moved the logic for storing the progress and completion handlers to the operation itself, and now that has a cancel that takes a token as well.\nIt's a big refactor, and it may even be worth rethinking how this works entirely.\n. I rebased this and added a quick, required, fix.\n. @rromanchuk I have my own fork, which is where this PR comes from. I just have this and another PR (which was closed here) on master there.\nNot sure I fully understand what you're asking, sorry :-/.\n. @rromanchuk Ah I see. Well I maintain this one PR on that fork. And I put up anything else I find as I go along. But it's not actively seeking other PRs, etc.\n. @bpoplauschi I hear you. It is scary indeed.\n\nMore than that, I think the case you are talking about is an edge case, as most people would download unique urls or even if they encounter the same url again, I don't expect a lot of cancels.\n\nIt's not that uncommon to hit this case - it is an \"edge case\" of sorts - but it's also something people will hit. Cancels can easily happen. Consider a cell that's loading an image. Then the cell goes off screen and the request is cancelled.\n\nHow did you come to the conclusion that the app will avoid downloading the same url twice? I can't find anything against that in our master branch code.\n\nI'm unsure quite what you mean here. Can you elaborate please?\n\nFrom where I look at this, given that the fix is huge, changes a lot of stuff plus it addresses an edge case, I would go towards not including it.\n\nI wouldn't have shipped the app I shipped without the fix. It was causing images to not load sometimes.\n\n@mattjgalloway could you bring more details about the scenario that needs fixing and how did your app end up handling that? Maybe we can come up with an easier fix.\n\nI added failing tests...\n. On the tests front - sure, it's using my updated architecture. But you can easily see how that translates to the old architecture. Do you want me to add a failing test on top of master for this maybe?\n. @bpoplauschi - https://github.com/rs/SDWebImage/pull/1222 added for the failing test cases. As you'll see - pretty simple cases. The point is, the second time you call downloadImageWithURL:options:progress:completed: with the same URL, you get back nil. Moreover, if you cancel the first one, then the second never gets any completion called on it. This is bad.\nHopefully that should explain the problem entirely?\n1069 looks very very similar. I prefer my approach though :-P.\n. @bpoplauschi Apologies for the delay in replying here!\nSure thing, I'll rebase with master shortly.\nI'm glad you're getting this fix in. It's a really good bug to get fixed!\n. @bpoplauschi Rebase done, and tests run (they pass). Would be great if you give it a full review though since it's been a while since I wrote this.\n. @bpoplauschi - yay! So happy this is getting in :-D. It is scary but I believe it to be well tested.\n. \ud83d\udc4d\nI would love it if you could incorporate that PR from my fork. The fix is pretty important. Let me know if I can help out in any way.\n. @bpoplauschi - Here's the failing tests. I really do think that this is bad. The test fails because of a couple of things. Firstly, the second time you ask for an operation for a URL you get back nil. This is an API breakage anyway.\nI really encourage you to find a fix for this. I went through the rabbit hole and came up with my idea of returning the \"token\" that is used to perform the cancelling. It felt like the best option to me. Happy to hear your thoughts on it if you end up following the rabbit hole also!\n. I tried to use XCTestAsync here, but it was always passing, which was suspicious.\n. In any case, this is wrong. It can return nil.\n. ",
    "ryanmeador": "I would also like this feature, or some other way of accomplishing the same goal.  Perhaps it would be possible to key the transform delegate off of the subclass of UIImageView that is downloading the image?  That way we could have separate subclasses for different types of transformations.  I'm writing a chat app, and I'd like to transform the user profile photos to be round, but leave photos posted into the chat as rectangles.  Right now I've worked around this by looking at the URL in the delegate, but that seems pretty hacky.\n. ",
    "Benny365Scores": "I'm facing this issue too, Please let us know if you are about to handle this issue, we can't compile for now...\n. ",
    "fparkar": "Go to the app extension settings -> Build Settings then search for Preprocessor Macros and add TARGET_IS_EXTENSION value for it. Then add #ifndef TARGET_IS_EXTENSION // here should be the uiapplication Sharedapplication #endif to wherever UIApplication shared application exists in these classes\n. ",
    "auibrian": "@bpoplauschi The error is at compile time, the demo project links directly against a static library which manages to sidestep the error. You need to build SDWebImage from source in your extension to see the issue. There's a sample project here which shows the compile time problem: https://github.com/auibrian/ExtensionTest.git\n. We could change it to use that as well. Looks like a good find: http://stackoverflow.com/a/29076070 It looks like it was just added to clang 3 weeks ago? http://llvm.org/viewvc/llvm-project/cfe/trunk/test/Sema/attr-availability-app-extensions.c?view=markup&pathrev=230989\n. I haven't updated this PR with @aelam 's suggested fix because it won't build under Xcode 6.1, I don't know if that is a concern for users of SDWebImage or not. I'm happy to change to using the __has_feature macro if Xcode 6.1 is not a concern.\n. On 8.2 at least it is possible to call [UIApplication sharedApplication] inside an extension so these checks will pass when used in an extension. The net result is tricking the compiler into letting you use non-extension safe API which will pass app review (possibly) but could still lead to instability during use.\n. - A call to applicationDelegate will return nil\n- How openURL is meant to work inside an extension is undefined\nNS_EXTENSION_UNAVAILABLE was presumably created for a reason, and given that [UIApplication sharedApplication] actually works inside of an extension the assumption is that there were problems there that Apple didn't want to address right now so they made it a compile time error.\n. My point is that your runtime check for availability of UIApplication sharedApplication will always return true. We don\u2019t know why Apple designated the API unsafe so your change means that we are now using API considered unsafe in our extension.\n. More specific to this exact commit:\n- what happens when an extension starts a background task?\n- and then the extension is killed?\nI don't know the answers to these questions, I could speculate, but I have no concrete knowledge. So for the sake of having a singular build target (which I agree is preferable) we're introducing an unknown quantity into our extensions and we're having to fake out the compiler to do so.\n. That's actually what I have been trying to convey: I have explored it further, and they can start background tasks because sharedApplication is available. Here is proof: https://github.com/auibrian/SafeExtension\nThe runtime checks do nothing, they always pass. That's my entire point.\nFurther, from past experience again: Apple don't seem to be checking overly hard for this, because even without using performSelector I've had an app approved where I unintentionally used sharedApplication from an extension. (You can work around the check by changing where/what you link etc) So I won't be surprised at all if the app is accepted but it will mean nothing.\n. As I said, this isn't a surprise. I already had an app approved that uses extension unsafe API. That doesn't mean you should do it, that's the entire problem with this PR.\n\nOn Apr 14, 2015, at 7:27 PM, bassrock notifications@github.com wrote:\nAND APPROVED \n\u2014\nReply to this email directly or view it on GitHub.\n. PR'd in November: https://github.com/rs/SDWebImage/pull/953\n\nI also can't tell if you are being purposely obtuse: You are purposely circumventing a compiler warning in order to only have to compile something once, and in the process you are doing exactly what Apple have requested you not do: access sharedApplication. I've proven to you that the code WILL run in an extension and that your runtime check is not actually doing anything but your only concern is whether it passes app review. I don't think the community prefers potentially unsafe code to compiler warnings. Whether or not you made it past app review this is not a PR that should be accepted.\n. Suggesting this: https://github.com/rs/SDWebImage/pull/1182 as a replacement to this recently merged issue.\n. @flovilmart @joetam The above discussion of cache refers to when we were still using -[UIApplication sharedApplication] so it isn't really relevant. But to address the issue of the cache being cleaned up:\nNSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) is what SDImageCache uses to get the path in which to create the disk cache. That will return different values depending on whether you are running in app or extension. I have never seen anywhere that says that apps and extensions share cache, can you cite?\n. Actually, @flovilmart mentioning the NSCachesDirectory thing to you makes me realize something: Why is it cleaning that path out manually at all? NSCachesDirectory is meant to be cleaned out by Apple if size constraints are hit. Is all this heartache really necessary for something Apple will clean out if it gets too large? @mythodeia Do you have thoughts?\n. @mythodeia Sorry, my question was why backgroundCleanDisk exists at all to clean out a directory that Apple have already stated they will clean out when free space becomes an issue. \nWith regards to the NSCacheDirectory I can confirm they are different paths, if you like I can post a sample project.\n. ",
    "barfoon": "Thanks very much @auibrian and @bpoplauschi. I apologize for not getting back to this sooner and appreciate the investigation and sample project around the problem.\n. ",
    "Arthraim": "I'm compiling my project on Travis CI and facing the same issue here.\nIs there a released version can help me avoid the issue?\n. ",
    "aelam": "AFNetworking doesn't fix the issue totally \nwhy don't just use this \n```\nif !(defined(__has_feature) && __has_feature(attribute_availability_app_extension))\nendif\n```\n. ",
    "RuiAAPeres": "Any update on this?\n. @mythodeia I have an app that has been approved without any issue. \n. ",
    "onceMu": "in the last version it's ok,while i install the newest version today,when i use sd_setImageWithURL in anywhere  it's crashed, in the same time,i use the deprecated  method setImageWithURL it's ok.\n. i say last version isn't 3.7.1. it's just my local SDWebImage version.today i clone the new version on github,i replace the deprecated method setImageWithURL with sd_setImageWithURL,it's crash. the error info is -[UIImageView sd_setImageWithURL:placeholderImage:completed:]: unrecognized selector sent to instance .\n. ok.thanks .i will try again.\n. I delete SDWebImage from my project,then clean the project. After that i add SD to my project.it's ok.\n. ",
    "pclion": "I also have this problem,how to reslove it?\n. ",
    "sebyddd": "In my case, I managed to solve this by removing and adding back Foundation.framework and ImageIO.framework from the Pods target. Everything working good now.\n. ",
    "satheeshiOS": "I have solved this problem by adding the library files into the Build phase in the tag \"Link Binary With Libraries\" after adding the library using cocoapods. :+1: \n. ",
    "yeison": "I solved the problem by adding $(inherited) to the 'Other Linker Flags' field\nThen I uninstalled SDWebImage cocoa pod and re-installed it.\n. ",
    "red010182": "I was installed (v3.7.5) by CocoaPod and had the problem too!  Solve this by adding ImageIO.framework & SDWebImage.framework in project setting.\n. ",
    "lpeancovschi": "I just integrated 3rd party libraries via cocoapods and got this nasty error. Fixed it by adding -framework \"SDWebImage\" to Other Linker Flags. Seems like linker is having troubles with bridging swift with objC categories\n. ",
    "nishan-guiddit": "@bpoplauschi  has this issue been fixed. I'm facing the same problem as I'm trying to load the images in the Tableview. Application gets crashed and below error log is got \n\": ImageIO: CGImageSourceCreateWithData data parameter is nil \"\nCan you please let me know how this can be solved ?\n. @XCGit how would I know that I'm using the old version of the files ? Since I have not used the whole project inside my Current project and  I have used used the files from \"SDWebImage\". How will I get to know that I'm using the old version ?\n. ",
    "kiddtaurus": "@bpoplauschi     Whether the bug has be fixed in release 3.7.3?\n. ",
    "jorisroling": "This solved my problem! Thanks! \n. ",
    "PeteC": "How about, if the image had been transformed, nil is passed for the data parameter to the cacheImage method. The cacheImage method could then check for alpha information by calling CGImageGetAlphaInfo on the passed UIImage's CGImage property and then use this to determine the format to save.\n. Absolutely. Won't be for a couple of days, but I'll post an update\n. ",
    "archfear": "@bpoplauschi @PeteC I created a pull request with the changes suggested above (#1121) and it's been working well for me.\n. @mythodeia I've been using it for months in an app with a few hundred users with no problems.\n. ",
    "ZevEisenberg": "I believe SDWebImage cancels existing requests on new requests by default. What you will probably need to do is to have an intermediate layer between downloading and displaying. Probably a dictionary where you send images once they are downloaded, and then update those items in the collection view if they are still visible.\n. Here\u2019s an image that has been causing a similar (I think) exception for me: http://stageimg.invaluable.com/housePhotos/logos/FigaroAlex-logo.jpg\nIt appears to be throwing on restore from the disk cache.\n. And the stack:\n\n. ",
    "novinfard": "+1\nI couldn't find any way to do it manually, but it is necessary for it's efficiency. Everyone should look on 4.x as mature release and not having this feature is a disappointing issue.\n. ",
    "stale[bot]": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had\n recent activity. It will be closed if no further activity occurs.\n If this is still applicable, please make sure it is up to date and if so,\n add a comment that this is still an issue to keep it open.\n Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n. ",
    "zhongwuzw": "@dreampiggy Make request un-cancellable may leads to more issues, the memory(may leads to more OOM), cpu, I/O, network load (keep the socket connection, needs more time to complete and lose the management of priority) .\nIf we try to implement resumable of download, I think we can just simulate the resumable process of HTTP, check Accept-Ranges header , if server support resumable, before we cancel the request, we can save the response Etag \u3001Last-Modified and received data to disk, next time when we load the same url, we'd use these info to try to get rest of data if server not modify the data.. @dreampiggy Apple can do it by using NSURLSessionDownloadTask, but we can't use it, because we need the progressive data.. @dreampiggy \n\nBut the reason why we choose DataTask contains many aspects. Chaning this is also evil. My idea is directly aim to solve the user\u2019s request: \u201cDon\u2019t cancel download when cell resuing\u201d. Which does not menas \u201csuspend when cell disappear, resume when cell appear for reuse\u201d. These two apects are really different.\n\nI get your point, and I said the issues it may leads \ud83d\ude02  :\n\nMake request un-cancellable may leads to more issues, the memory(may leads to more OOM), cpu, I/O, network load (keep the socket connection, needs more time to complete and lose the management of priority) .. I think we need to keep in mind is if user cancel, we need cancel everything, if user start loading again, we try to decrease unnecessary operations.. If user don't want to cancel, I think he can use ImageDownloader directory, decouple the UIImageView in cell and image.. Many things seems can't solve, I just list two, images is a really memory terminator, very easy to cause OOM, and if users use HTTP1.1, previous requests would block the new request, so when scroll the tableView to the new cell, very long time would be to wait for completion, mostly it would timeout IMO. We can add an option easily, but I think it may unusable.. Head-of-Line blocking.\n\n. I suppose add a section of FAQ in WiKi page.. Agree on @dreampiggy . \ud83d\udc4d . @timbroder Thanks for your contribution anyway. Good luck to you !\n\n@dreampiggy @skyline75489 Please remove @timbroder .. Related to some architecture issues, users provide some good comments for us to find issues.. @dreampiggy \ud83d\udc4d Good to see it! and I think we can add rs to the Author section in all projects in SDWebImage organization. All of them benefit from SD.. @dreampiggy , yep, it's a API breaking, maybe we also need to tell users not to use dispatch_queue_async_safe and use their own method if needed. 5.x would be fine to do this.. @dreampiggy \ud83d\udc4c , I'll commit a PR soon.. @dreampiggy , please see #2329 .. @kyleYang Can you give an integrated crash log which contains all related information?. memory_order_relaxed only guarantee atomicity and modification order consistency. That say inter-thread can run concurrency. For example: \nThread A:                  \nA                                 \nB                                   \nThread B:\nC\nD\nThe order of the execution maybe : A C B D\nSo, back to the SDWebImage, completionBlock maybe call multiple times.\nSample Code:\n```\ninclude \ninclude \ninclude \ninclude \nstd::atomic cnt = {0};\nvoid f()\n{\n    cnt.fetch_add(1, std::memory_order_relaxed);  \n    int a = cnt.load(std::memory_order_relaxed);\nif (a == 2) {\n    std::cout << \"2\";\n}\nelse {\n    std::cout << \"1\";\n}\n\n}\nint main()\n{\n    for (int i = 0; i < 100000; i++) {\n        std::vector v;\n        for (int n = 0; n < 2; ++n) {\n            v.emplace_back(f);\n        }\n        for (auto& t : v) {\n            t.join();\n        }\n        std::cout << \"\\n\";\n        cnt.store(0, std::memory_order_relaxed);\n    }\n}\n```\nOutput:\n12\n22    \n12\n12\n22\n. @dreampiggy , these weak reference fix some problems.\n@papanton , for the big GIF sets, I just suppose you set maxMemoryCost or maxMemoryCountLimit of SDImageCache to suitable value. Can you try it?. @dreampiggy Yeah, it's not retain cycle. Just would leads some extra objects alive and increase the memory.\nTBO, I don't reproduce the crash, I use iPhone6+ and iOS11.3.1 and master branch. I  Instruments it, and the VM allocation increase to 1.x G  and then memory would down back to reasonable footprint. And also I received the memory warning.. @papanton Yeah, I use your prj to debug. \n\nThe insteresting behavior is that One thing that might be creating problems is that the system memory warning never actually gets triggered on iOS 11. Which may be the root case.\n\n@dreampiggy , memory warning is not always triggered even the memory is going to be exhausted. Jetsam would kill any not good memory citizen.\nSome situations would cause this, I know some of them, one is when the app allocate spikes memory, Jetsam would kill the app directly (I faced it before) . Another is runloop issue, because the notification needs to post by runloop, e.x. the code below show the simple infinite loop, it would leads to crash, it's extreme, but show some possible situations. \nwhile(1)\n{\n    NSString *str = [NSString stringWithFormat:@\"%@\",self];\n}\nI don't know wether we can add the functionality to monitor memory consume. The benefit is we can manually remove the cached objects in low memory to prevent crash. The penalty is it would leads to occupy more CPU and battery energy. @dreampiggy What do you think? \ud83e\udd14 . Reason I change the attribute to strong is:\nActually, we don't need to copy at all. The request and response are readonly to public.\nEven they can be modify, they still have not any effect to NSURLSession.. @dreampiggy Thanks for your invitations. \ud83d\udc4d I'd be glad and honor to be the Collaborator of SDWebImage. I'm the open source enthusiast, and more, I love SDWebImage and almost use it in all the apps I participate. I would look in depth to the whole framework, learn and the same time, propose some fixes, optimizations or something . Try my best to make SDWebImage more stronger.\nThanks again! \ud83c\udf7b . @dreampiggy @bpoplauschi @rs , Thanks all guys. \u2764\ufe0f . @bpoplauschi Yeah, thanks and appreciate! \ud83c\udf7b\ud83c\udf7b\ud83c\udf7b . @dreampiggy It's a long story. \ud83d\ude22 6 years ago, this commit introduced failedURLs and runningOperations, they were all NSMutableArray. 3 years ago, ikesyo commit a PR to change failedURLS to Set, See commit.\nrunningOperations only uses internal and store SDWebImageCombinedOperation. So I think it's ok to use Set.\nActually, NSSet still needs to implement isEqual, if multiple objects put in the same bucket, Set would use isEqual to figure out. That is to say, isEqual and hash are the couple. \ud83d\ude04 . @bpoplauschi \ud83d\udc4c I'll be careful next time. \ud83d\ude02 . If statement below maybe also can removed?\nhttps://github.com/zhongwuzw/SDWebImage/blob/cc929c79c67055b9437f660c10d07108a162a3f7/SDWebImage/SDImageCache.m#L380-L383. @dreampiggy \ud83d\ude22 Maybe I got you point. You mean async/sync is about the executing time of  doneBlock ?. @dreampiggy \ud83d\udcaf Thanks for your explanation in detail. I just didn't get the point when I give it a glimpse. It's just a discussion or questionTBO(ps: but I like to use the code to express my thoughts). I'll close it. \ud83d\ude02 . @dreampiggy Done.. @dreampiggy Done, please see #2394 .. @dreampiggy @bpoplauschi @skyline75489 What's your opinion? \ud83e\udd14 . @dreampiggy Emm, I mean we should take care of the operation that is not subclass of SDWebImageDownloadOperation, in SDWebImageDownloader, we treat everything that the operation is SDWebImageDownloadOperation, NSOperation< SDWebImageDownloadOperationInterface> is not the same withSDWebImageDownloadOperation`.\nYou can try create a class that subclass NSOperation and conforms to SDWebImageDownloadOperationInterface, and copy all the properties and methods  of SDWebImageDownloadOperation into it, that is ,just let this custom operation the same as SDWebImageDownloadOperation, but not subclass it. and change the name dataTask property of custom class to maybe anotherDataTask. You can see a crash unsurprisingly.. >when we want to call something method on SDWebImageDownloadOperation *, we also update the SDWebImageDownloaderInterface method in @required annotation\n@dreampiggy Emm,maybe not, e.x. You can see this line.\nSo should we need to handle these issues? or just let it be. \ud83d\ude02 . @dreampiggy \ud83d\udc4d \uff0c Cronet's performance is big win against NSURLSession in your product environment? \ud83e\udd14 . @dreampiggy Thanks for your detailed description \ud83d\udcaf . Yeah, discard build-in network framework has many pros, like can totally control network behavior, cache, proxy, new protocol support ...., but also has some cons, like increased app size, maybe more energy penalty(It's just my guess, I think Apple should always know utilize their own system than Google \ud83d\ude22 ). . @bpoplauschi I don't know wether @dreampiggy has his own opinion, if he agree, I'll resolve the conflict and can merge.. @dreampiggy Any consideration about this? \ud83e\udd14 please merge if you think it's ok  , this PR involved many files, very easy to face conflicts\ud83d\ude02. . @bpoplauschi I revert to original method, yeah, maybe it uses less code, but uses KVC, I hardly use KVC TBO \ud83d\ude02 . A little scary for me.. @dreampiggy IMO, we should always try to use syntactic sugar(recommended by Apple), it's more clear, but we should also ensure not nil, if we use setValue:forKey:, we should remember if value is nil, it would be do removeObjectForKey, that is, if the key already has value, it would be removed. So consider these things, I think we should be careful when we use setValue:forKey:.\nThese are my opinion. Every time we code, we should stop to think a bit. \ud83d\ude02 . @dreampiggy Query disk is not the biggest key, create FLAnimatedImage is the penalty. it leads to consume much CPU on main thread.. @dreampiggy First time's consume is unacceptable. I did't disable memory cache. You can try the demo I linked #2377 . . ```\n- (instancetype)initWithAnimatedGIFData:(NSData *)data optimalFrameCacheSize:(NSUInteger)optimalFrameCacheSize predrawingEnabled:(BOOL)isPredrawingEnabled\n{\n    // Early return if no data supplied!\n    BOOL hasData = ([data length] > 0);\n    if (!hasData) {\n        FLLog(FLLogLevelError, @\"No animated GIF data supplied.\");\n        return nil;\n    }\nself = [super init];\nif (self) {\n    // Do one-time initializations of `readonly` properties directly to ivar to prevent implicit actions and avoid need for private `readwrite` property overrides.\n\n    // Keep a strong reference to `data` and expose it read-only publicly.\n    // However, we will use the `_imageSource` as handler to the image data throughout our life cycle.\n    _data = data;\n    _predrawingEnabled = isPredrawingEnabled;\n\n    // Initialize internal data structures\n    _cachedFramesForIndexes = [[NSMutableDictionary alloc] init];\n    _cachedFrameIndexes = [[NSMutableIndexSet alloc] init];\n    _requestedFrameIndexes = [[NSMutableIndexSet alloc] init];\n\n    // Note: We could leverage `CGImageSourceCreateWithURL` too to add a second initializer `-initWithAnimatedGIFContentsOfURL:`.\n    _imageSource = CGImageSourceCreateWithData((__bridge CFDataRef)data,\n                                               (__bridge CFDictionaryRef)@{(NSString *)kCGImageSourceShouldCache: @NO});\n    // Early return on failure!\n    if (!_imageSource) {\n        FLLog(FLLogLevelError, @\"Failed to `CGImageSourceCreateWithData` for animated GIF data %@\", data);\n        return nil;\n    }\n\n    // Early return if not GIF!\n    CFStringRef imageSourceContainerType = CGImageSourceGetType(_imageSource);\n    BOOL isGIFData = UTTypeConformsTo(imageSourceContainerType, kUTTypeGIF);\n    if (!isGIFData) {\n        FLLog(FLLogLevelError, @\"Supplied data is of type %@ and doesn't seem to be GIF data %@\", imageSourceContainerType, data);\n        return nil;\n    }\n\n    // Get `LoopCount`\n    // Note: 0 means repeating the animation indefinitely.\n    // Image properties example:\n    // {\n    //     FileSize = 314446;\n    //     \"{GIF}\" = {\n    //         HasGlobalColorMap = 1;\n    //         LoopCount = 0;\n    //     };\n    // }\n    NSDictionary *imageProperties = (__bridge_transfer NSDictionary *)CGImageSourceCopyProperties(_imageSource, NULL);\n    _loopCount = [[[imageProperties objectForKey:(id)kCGImagePropertyGIFDictionary] objectForKey:(id)kCGImagePropertyGIFLoopCount] unsignedIntegerValue];\n\n    // Iterate through frame images\n    size_t imageCount = CGImageSourceGetCount(_imageSource);\n    NSUInteger skippedFrameCount = 0;\n    NSMutableDictionary *delayTimesForIndexesMutable = [NSMutableDictionary dictionaryWithCapacity:imageCount];\n    for (size_t i = 0; i < imageCount; i++) {\n        @autoreleasepool {\n            CGImageRef frameImageRef = CGImageSourceCreateImageAtIndex(_imageSource, i, NULL);\n            if (frameImageRef) {\n                UIImage *frameImage = [UIImage imageWithCGImage:frameImageRef];\n                // Check for valid `frameImage` before parsing its properties as frames can be corrupted (and `frameImage` even `nil` when `frameImageRef` was valid).\n                if (frameImage) {\n                    // Set poster image\n                    if (!self.posterImage) {\n                        _posterImage = frameImage;\n                        // Set its size to proxy our size.\n                        _size = _posterImage.size;\n                        // Remember index of poster image so we never purge it; also add it to the cache.\n                        _posterImageFrameIndex = i;\n\n....\n``. The initialize ofFLAnimatedImage` is not related about decoded bitmap. It would iterate every frame.\nPredraw is always async.. @dreampiggy , You maybe misleading the purpose of this PR \ud83d\ude02 , I definitely agree that the 4.x legacy code is not decouple very well. 5.x makes these more moduler , I commit a PR to master is because we should fix the 4.x, after the commit #2393 , we make the FLAnimatedImage not available in production environment, yeah, I think no one allow the scroll fps down to 5fps TBO \ud83d\ude22 .\nIf you think it's some little hack, I think it's just a counter \ud83d\ude02 . Maybe we can revert the #2393 ? We definitely need to let 4.x to be a production available state, right?\nI downloaded 4.2.1, it uses SDWebImageInternalSetImageInGlobalQueueKey to control target queue, TBO we can't do like this, we need always call  - (void)sd_setImage:(UIImage *)image imageData:(NSData *)imageData basedOnClassOrViaCustomSetImageBlock:(SDSetImageBlock)setImageBlock on main thread , because it has some UI related works, like setImage of UIImageView or something, maybe it's not frozen the UI, but it has risky, we should prevent it just like Apple said.. @dreampiggy The reason to iterate all frames is it needs to figure out wether the image of each index is valid, FLAnimatedImage would uses this information to calculate the optimal frame cache size.\nAnd I see 4.1.2, it did all things on main thread, so what's your point? you mean yes we can keep the older ways or users need to update to 5.x if they want to good use FLAnimatedImage ? \ud83e\udd14 . @dreampiggy \n\ndo we need to expose this new SDWebImageGroup class available for public APIs ? \n\nI can't sure, I don't know wether user needs to do some custom operations of setImage not related decoded. If you think it's no possibility, maybe we can just make it private just to fix this issue.\n\nAlso, is there any better way to solve this problem ? Because I guess the more logic we add for this FLAnimatedImage, the more issue we may face :)\n\nIn 4.x, we only support one corder to one image format because of no options when decode, other words, e.x. If we add FLAnimatedImage GIF corder, the default GIF corder is invalid, if the user choose FLAnimatedImage, he can't choose other GIF libraries.\nSo IMO we maybe can only do some these things.. @dreampiggy @bpoplauschi Any feedback?. Maybe missed? \ud83d\ude02  CC @mythodeia @skyline75489 .. @dreampiggy Yeah I can fix these conflicts, I'll fix them if all we reach the decision. \ud83d\ude02 . @bpoplauschi Yeah, 4.x is very important for many users, let's try to fix it temporary, maybe in 5.x,  we can hide it or just remove it.. @dreampiggy Yeah, I can mark it as internal. So maybe one thing we need think a bit, after we do that, if users want to do some heavy things like init of FLAnimatedImage, which method can we provide besides upgrade to 5.x?. @dreampiggy Oh, It's good that we agree we need to add parameter in setImage block.\n\nFor this issue, so you means you need to check whether it's placeholder ? But still need to query disk cache ?\n\nNope, not just query placeholder. I'll go to sleep, tomorrow I'll explain which situations we would face.. Currently in master, we have some bugs, I'll list the bugs to review the code:\n\nCreated FLAnimatedImage in main thread.\nFLAnimatedImageView call setImage multiple times, leads to GIF refresh multiple times in some cases.\nAlways call disk search if imageData is nil.\nGCD always retain FLAnimatedImageView.\nWhen FLAnimatedImageView reuse, e.x. UICollectionView, would leads to wrong image.\nsd_cacheFLAnimatedImage leads to GIF invalid.. A long long time to wait to fix these things. @SDWebImage/collaborators guys, let's concentrate on them, find a solution to fix them. . ??? My PR is definitely backward compatible, no API breaking change. I just add a new method to fix these bugs. \n\n@bpoplauschi #2441 not solve any bugs, just make FLAnimateImage created on secondly thread.. @dreampiggy \n\nGIF image url is already been loaded using UIImageView before FLAnimatedImageView hit the same URL, cause fallback normal GIF rendering.\n\nI fixed it, you can see\nhttps://github.com/zhongwuzw/SDWebImage/blob/ec60e26715ff2f6a39fa91094db15e22505a0688/SDWebImage/FLAnimatedImage/FLAnimatedImageView%2BWebCache.m#L121-L124. @bpoplauschi \ud83d\udc4c , I'll open a new PR to let guys to review and discussion.\n@dreampiggy Seems you think these bugs don't need to fix, so I think we don't need to talk anymore \ud83d\ude22 , because I think we all need to try to find the issue, get the lesson, and fix them, and you like to fix the most important thing you think.. @bpoplauschi Oh, sorry, I missed this. And I'll split this to some PRs to review convenient. First PR, please see #2528 .. @ghostfeng comma is the reserved character, so it would not produce any issue.\nCan you post some code? demo project would be the best if you can.. @ghostfeng 403 forbidden, I think the reason is User-Agent. Server forbid the request SDWebImage make.. @dreampiggy You be treated by the project you tested \ud83d\ude02 . You use the SDWebImage's demo, and NSURLSession's default User-Agent contains the bundle name. Fortunately, the demo contains the string iOS like below. You can try after modify the bundle name to remove the string iOS.\n\n. @dreampiggy It has no any business code, it just add the device and system version. just like all common user agent. you can see UIWebView/WKWebView or Safari.\nLike below, you can see how Apple uses the user-agent to identify the device.\n\n . @bpoplauschi the propose @dreampiggy suggested is used for custom for each request, so any opinion about this PR?. @bpoplauschi Emm \ud83e\udd14 , User-Agent is only a field of Headers, user can override these values by (void)setValue:(nullable NSString *)value forHTTPHeaderField:(nullable NSString *)field of SDWebImageDownloader or requestModifier, I think it's maybe enough. Would you think we must add the Boolean in DownloaderConfig?. @dreampiggy , nope, we can't expect users to know everything internal. Many users would just use one shot UIImageView category method to load image. We can't just simply rename the default directory and leave many garbage files alone on the disk.. Yeah, when we develop a product, we need treat users as foolish (No discriminate, it's just the truth for product \ud83d\ude02 ), just like #2409 , we can't expect user know everything. We just try our best to let users go to the right path, decrease mistakes. If we think users needs to know everything, maybe we don't need to fix bug anymore. Let's user do it. \ud83d\ude02 . @dreampiggy The path you listed in Migration Guide is wrong. The correct relative path is Library/Caches/default/com.hackemist.SDImageCache.default.\nI think it's up to how you understand the manager, if you think all related operation should put into SDDiskCache, it can, but maybe it still has issues, because we put the business code into the SDDiskCache, because SDDiskCache is only responsible to do disk operation. We also can handle this, just add a method to move files, and we do business logical in SDImageCache.\nIf you think manager needs to do these things, I think it's also acceptable.. @dreampiggy If any user changed disk behavior from 4.x to 5.x, I think it's him own responsibility to handle these things, maybe he would try delete all directories if he want. I think the PR covered the people who just uses one-shot method.. @dreampiggy Yeah, I can, what's your opinion about @bpoplauschi 's proposal, we can use dispatch_once to do one operation. I already add the check logical, so it would do move only necessary, what you think wether we need add a method in SDDiskCache protocol?. @dreampiggy @bpoplauschi The reasons why I put only disk related operation to SDDiskCache are:\n1. We use makeDiskCachePath or something to generate disk cache path in SDImageCache, other words, SDImageCache would tell SDDiskCache where to save. I think we still need keep the getter of default cache disk path in SDImageCache.\n2. Keep fileManager in the same ioQueue, in SDDiskCache, almost all methods is synchronous, I think we shouldn't let the migrate operation in another secondly thread.\nWhat's your guys think about? \ud83e\udd14 . I have read the contents of site, the most impressive section for me is Building-community, we can do better to attract more developers participate in\ud83d\ude0a.  . @rushilMethsof Feel free to reopen, we all can help you, would you please give a url of image that can reproduce? a little demo would be the best.. Some topics I think maybe we can add:\nmacos\u3001ios\u3001mobile\u3001image\u3001sdwebimage\u3001objective-c\u3001swift. @bpoplauschi \ud83d\udc4d These topics you post already cover what the SDWebImage can do. . @bpoplauschi @dreampiggy Seems we reach the decision, let's do it ! \ud83c\udf7b . @dreampiggy Should I need to close this PR? From WWDC 2017 511, it says:\n\nOne important difference here though between JPEG and HEIF is that creating a CGImageDestination will fail on devices with no HEVC hardware encoder. And when it fails, destination is nil. So, the good defensive code that I wrote on the previous slide, is even more important to do with HEVC where there is now a new reason that the destination might be nil. Please always make sure that you check this is the one and only way to know whether writing to HEIC is supported on your current platform.\n\nSeems Apple docs not credible, \nhttps://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/ImageIOGuide/imageio_basics/ikpg_basics.html\n https://developer.apple.com/documentation/imageio/1465316-cgimagedestinationcopytypeidenti. HEIF and HEIC's writer all use _kCGImageTypeIdentifierHEIC, so when I call CGImageDestinationCopyTypeIdentifiers, it would not return public.heif at all. Am I right?\n```\nint __Z17CreateWriter_HEIFv() {\n    _ImageIO_determine_encodingSupport_HEIF();\n    if ((int8_t )gHEIF_JPEG_EncodingSupported == 0x1) {\n            rbx = operator new(0x28);\n            IIO_Writer::IIO_Writer(rbx, _kCGImageTypeIdentifierHEIC, 0x1);\n            rbx = 0x529330;\n            (rbx + 0x20) = @\"public.jpeg\";\n    }\n    else {\n            rbx = 0x0;\n    }\n    rax = rbx;\n    return rax;\n}\nint __Z17CreateWriter_HEICv() {\n    _ImageIO_determine_encodingSupport_HEIF();\n    if ((int8_t )gHEIF_HEVC_EncodingSupported == 0x1) {\n            rbx = operator new(0x28);\n            IIO_Writer::IIO_Writer(rbx, _kCGImageTypeIdentifierHEIC, 0x1);\n            rbx = 0x529330;\n            (rbx + 0x20) = 0x0;\n    }\n    else {\n            rbx = 0x0;\n    }\n    rax = rbx;\n    return rax;\n}\n``. @dreampiggy \ud83d\udc4d Can you try to test usingCGImageDestinationCreateWithDataandSDImageFormatHEIF, as your original code? I test it oniPhone7+iOS11.4,destinationnot create successful.. @dreampiggy Yeah, thanks for your explanation, I'm not familiar withHEIF, I'll watchWWDC` to get more details. \ud83d\udc4d \nAnd please see my this  comment. \ud83d\ude02 . @dreampiggy \ud83d\udc4c , thanks !. @dreampiggy NSNotificationCenter would not retain observer or sender, TBO, __weak is always not safe if you consider race condition. Not only KVO, for the simple creation of __weak variable or weak-strong-dance. If we store/load  weak variable when object is deallocating, it would always crash, you can see objc-runtime source code, Facebook open source FBRetainCycleDetector mimic the behavior of objc-runtime, you can simply see it.\n@dreampiggy Maybe you can't imagine, I'm not iOS developer in my job, I do backend develop mainly, sometimes web\u3001embedded program\ud83d\ude02 . It's just my avocation. So I have not any big performance, definitely when I create this PR, I know it's not a big problem compared to image decoding or something. I just want to do any improvement I think it needed. Big performance point we should care, trivial things also needs to tackle. \nI love open source, and do many commits in my spare time(seems I'm idle in my work, right? \ud83d\ude02 ) . I can list some random commits from my PR, seems it's all trivial things:\n1. Decrease iteration times when shift cycle arrays in FBRetainCycleDetector of Facebook.\n2. Optimize SEL search efficiency in IGListKit of Instagram.\n3. IMP search duplicate in objc-runtime.\nLong story \ud83d\ude02 , I'll stop these trivial things later, only focus on any bug fix or something. Thanks guys again @dreampiggy @bpoplauschi \u2764\ufe0f . . @dreampiggy @bpoplauschi Emm, It's not a farewell for me \ud83d\ude02, I'll do fix later if I can .SDWebImage is a great framework absolutely, you guys make a big contributions. but maybe we still has some to improvements, I just looked at the recently PR list, seldom or no new one guy join in to contribute (maybe the latest one is me? \ud83d\ude22 ), I also looked AFNetworking\u3001Kingfisher\u3001Moya ... .The community is much active at Issues and PRs. #2416 you make is great, building community section of site is most impressive for me, I also request you guys to read again. \ud83d\ude02 I think it's very valuable for us to build SD more stronger, and healthy, because if no one review our code, it may has risky to go to the wrong way.\nFor the measurement of this situation, maybe it's hard to profile, but we can see the time complexity, the original code is (1 + 2 + 3 +..... + N), which is O(N^2), after we change one to one, becomes O(N).\n I read some WWDC sessions, just like 409, Apple shows to us how he strive to optimize code by compiler or something. We are lucky that Apple's device is efficient in CPU Memory..., and also the App has a limited life, if we have some small issues, maybe it's ok, because the device is so fast that we can ignore, and our app would be stop at a limited time, after that, we can start from scratch, just like we have infinite life when we play Contra games \ud83d\ude02 . I developed backend and recently embedded things, seems just a very small issue would leads to disasters, e.x. for embedded, the cpu is so slow, memory is only around 100+K or several megabytes, and power energy is also the key point (prevent replace battery and should keep them run months ), you can't imagine one entire frame needs seconds to refresh \ud83d\ude2d . I need to much careful about the running code and memory \ud83d\ude02 . Theses are the reasons why I'm much care about the performance, efficiency, mechanisms or something. \nGo back to this PR, I'll reopen it to let us discuss more easily.. If this PR is ok, I still need to fix the tests.\n\nFrom a performance POV, it's less performant to add another function call to the stack.\n\n@bpoplauschi , \ud83d\udc4c I can revert this new method.. Closes #2430 . @bpoplauschi \ud83d\ude02 Please see comment, I have a long discussion with @dreampiggy , do and revert many commits, they are not necessary if we just merge, so we all agree to rebase.. @dreampiggy In my opinion, I just can't find any situation that user can use \ud83d\ude02 , because along with the progress of download, the animated images would be changed, e.x. add an image in middle of animated array because we can't guarantee order of image download, this behavior seems strange, so I suggest deprecate these APIs.. @dreampiggy Good opinion, it's a good way to prevent import custom group, and I looked your code, I do some changes based your PR, please see #2404 , the changes I make are:\n\nKeep SDWebImageInternalSetImageGroupKey deprecated, because we already deprecated in previous release version and also change the logical handle of SDWebImageInternalSetImageGroupKey by import associated object, so we'd better keep it on, I create a new global key SDWebImageInternalSetImageSDGroupKey, and make it not extern to public header. I extern it only in FLAnimatedImageView+WebCache.m. \nRemove unnecessary dispatch_group_enter/leave pair, only apply to GIF data.. @bpoplauschi \ud83d\udc4c , @dreampiggy so what's your opinion about my PR? \ud83e\udd14 . @dreampiggy Please see comment.. Needs fix in 4.x.. Emm, in theory, it maybe has, but in reality, maybe no needed to handle this situation IMO, it's hardly or never occur.. @dreampiggy Emm, what's the difference of my comment and your explanation? \ud83e\udd14 \n\nIn reality, there hardly has a much long pathExtension, but it can, we use url as the cache key by default, url's length (some browser limit 1024) can be longer than file's max length in disk, so pathExtension also can exceed 254, just like my comment above, the theory is exist, but actually it rare.\nhttps://imggen.alicdn.com/3b11cea896a9438329d85abfb07b30a8.jpgasaaaaaaaaaaaaaaaaaaaajjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjaaaaaaaaaaaaaaaaajjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj. Needs discussion.. @bpoplauschi \ud83d\udc4c I'll finish it.. Please use local img in placeholder:\n- (void)sd_setImageWithURL:(nullable NSURL *)url placeholderImage:(nullable UIImage *)placeholder. @abhijith2smb Thanks for your issue, in 4.2.2, if image cached by SDWebImage, it would set cached image first, then do the GET request, only if response from server changed compared with cached image if it has in NSURLCache, the new image would override previous image, so can you check the server that image data already changed?. @dreampiggy Emm, we can't simply use NSUIntegerMax, because NSDate can only represent time from 1970. It would invalid if we specify a value greater than it. So maybe negative value would be more suitable to prevent expiration check.. @dreampiggy Oh, seems I'm be mixed up. I think we maybe should try to prevent use these MAX/MIN values to compare or calculation. I tested a bit, like -NSUIntegerMax\u3001DBL_MIN... would leads to overflow and invalid. I remember Apple also suffer this big issue a long time ago, time underflow leads to device brick \ud83d\ude22 . So IMO we just compare negative number and omit expiration check would be more robust and less bug problem. What's your opinion?\n[NSDate dateWithTimeIntervalSinceNow:DBL_MIN];. @dreampiggy Emm, maybe you don't get the point I want to express. I don't say we can't specify a number to maxCacheAge, DBL_MAX,distantFuture or something, they can do the work. I mean maybe user would make mistake,after specify NSUIntegerMax\u3001DBL_MIN or some value if he don't figure out the difference of unsigned signed type. And we can provide a method to avoid these risky, it's the value of this PR IMO.\nBut maybe the logical changed, because from older way, if we specify a negative value, all cache would be deleted and seems disk cache would be invalid  (Is this what we want? ). And after this PR, we mean no expiration. . @dreampiggy Done.. @dreampiggy \ud83d\udc4c . @voidless Thanks for your PR \ud83d\udc4d , but currently, maybe it's not the time to optimize this option, although it's benefit of cold start time, it may break usage for user who uses SDWebImage.. @dreampiggy Easy way to remove additional lock tradeoff.. @dreampiggy \ud83d\udc4d Yeah, correctly as you said.. @dreampiggy \ud83d\udc4c \n\nWhen using block, we will block main queue and let 1 frame sucessfully write to cache, then main queue will be resumed, and get the 1 frame and render it.\n\n\ud83e\udd14 Emm, have no idea where it would block to wait to cache? \n\nEven worse, this simple change of code will cause a issue that we re-fetch the 1 frame (Because at this time, the fetchFrame is also nil and start fetch 1 frame again)\n\nI think no re-fetch would be appear? fetchQueue only support one operation to run. self.fetchQueue.operationCount == 0\n\nHowever, if we use GCD to dispatch fetchQueue into main queue, the 1 frame will not be in the cache until next runloop.\n\nChange dispatch_async(dispatch_get_main_queue() to dispatch_sync(dispatch_get_main_queue(), I think it maybe the same as the original code.. @dreampiggy \n\nThe fetch queue is just a operation queue. Why the code add operationCount == 0 because it base on the assumation that we can write to the cache in time, so one frame render, one check, one query is enough.\n\nNope, we can't do this assume, mostly, it would not in time. Let's assume most devices have 2 core, so only 2 jobs would be run at the same time, main thread, system, users, would do many works, most of the time, more than 2 threads, so thread context switch would not be prevented. NSOperationQueue's default priority is NSOperationQualityOfServiceBackground, priority is slow.\n\nActually this does not. Because dispatch_sync still need to submit your block code into the last of main queue and wait for main queue to execute all previous code until this block been done. Sync just ensure it blocks the operaion queue so that the operation is not been marked finished. However, when using block, it will interrupt the running main queue (what GCD can not) \n\nTBO, I don't get what you want to express. I don't know wether you mess up the runloop, runloop is just a do while, a event loop, if no message, it sleep, when message becomes, it wake up and handle it, DisplayLink is just a timer, the interval it 1/60s, it added to runloop, so every 1/60s, runloop would handle it. So if we add block to main queue, no matter how many it is, if runloop is sleep, it would wake up the runloop, runloop would call all blocks one by one added before by __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__. \n\nthe following pair dispatch_semaphore_wait dispatch_semaphore_signal call does not cause performance lost. It just increase/decrease the semaphore count. Only when thread-safe race condition is apperared can block the calling queue. \n\nEmm, 8 days ago, you said it would be the cost, see comment you leave. And not you said, cost is always exist, no matter wether or not thread-safe race condition, it would do atomic operation.\n\n\nGCD will make a queue switch each time you access. And GCD's thread pool is limited to 64 on iOS. No need this extra cost.\n\nMaybe you mean thread switch? thread switch is always exist, sync is just add a block to main queue.\nGCD's thread pool is limited to 64, it's correct, and also what I want to say in Add autoreleasepool to release autorelease objects in advance when using GCD, in that PR, we can't do one operation to one queue. because one queue may spawn a new thread, so it's easy to make app hang, mean thread explosion, because user may use a number of threads, our framework also may use many threads, I don't remember which WWDC session, Apple developer give some demos how to use GCD and decode image, you can check it.\nAnd, maybe this PR needs more people to review IMO, @bpoplauschi @skyline75489 @mythodeia .\nI also would  check the SDAnimatedImageView to figure out wether it has any issue.. @bpoplauschi \ud83d\udc4c I'll be go on to do some fixes. \ud83d\ude02 \u2764\ufe0f \n@dreampiggy I'm ok for this PR merge or not merge, no matter for me.\nI see your ThreadSafeTest demo, it compares many locks performance, but for this situation, I want to do is free the main thread, because nearly all methods called on main thread, no need to use lock in these methods.\nFor the issue, I want to tell you, it's the issue of code reorder and thread context switch, not the issue of GCD.\nLocks also has this issue.\n\n\n. The PR targets to 5.x, but master also has issues. The big difference between 5.x and master, I think it maybe a little bother to merge. Maybe we should solve some 4.x issues asap and release 5.0.. @dreampiggy Please see my PR description, you can try #2427, it 100% crashes in very little time.\nI don't think we need to add autoreleasepool in decode function, it's the problem to GCD, call it multiple times and maybe not release in timely. And also it's what Apple recommended.. PS. add autoreleasepool is not 100% safe. I'll make a PR or Issue to describe later. The another issue is we create one queue to one operation. if we have multiple operations, which means may have multiple decoding operations running. Has a much big risky to crash.. @dreampiggy \n\nAutorelease pool is not a really cheap cost. It need to allocate the object to consturct a stack, need TLS creation, etc. So if the block logic does not create too much of autoreleasing object, it's no need to create a local one. Just use the runloop autoreleasing pool and let all objects been released is better.\n\nFrom your comments, I assume you read the related source code. I just push a new Autorelease pool on Autorelease pool stack, see Apple documents. GCD always have its own Autorelease pool, so the cost is I create a new Autorelease pool struct, one page size. Autorelease operation is always exist, I just let it in advance, so no big cost like you said, nearly no cost, and maybe you mess up the relations of Runloop and GCD, GCD has its own threads pool, so no runloop would exist. only main thread has a setup runloop. \nJust like I said above, it would crash very quickly, but if you wants to see the profile, I did it, the original code screenshot like below, it would leads to 2.6G and crash very quickly,\n\nAfter added the autorelease pool, the spikes is 1.3G, and works well. Just like below.\n\n. @bpoplauschi I make a PR for 4.x, we can merge if @dreampiggy has no any consideration.. My main opinion is the same as @bpoplauschi .\n1. Don't do progressive job on session delegate queue. It would block the progress notification and any other delegate callbacks.\n2. One queue for progressive decoding.\nI did a PR #2481 to demonstrate my opinion.What I added:\n Maintain a dependency list, one operation, one running progressive decoding.\n User can set max decoding count of images.\n Remove imageData copy for call of each didRecieveData delegate . imageData may occupy big size, if we maintain each copy, spikes would be produce.\n Added decode image cancellation when download task cancelled.. @bpoplauschi \n\nwhen adding a progressive decoding operation (can simply be NSBlockOperation blockOperationWithBlock), we need to store it (as a download operation property) and when trying to add another progressive operation, first cancel the existing one. This way we can have only one progressive download decode at a time for a certain download.\n\nEmm, this cancellation may not work if last operation is decoding. And may leads to issues because progressCoder is shared. . @dreampiggy The reason why we can't use one NSOperationQueue or dispatch_queue_t for one operation is:\nGCD has its limitation, we can't create much queue or put many tasks on global queue, it would leads much threads overhead, and more severe, thread explosion.\nYou can check the sessions about GCD from WWDC. And if you already see before, I recommend you look Image and Graphics Best Practices WWDC 2018. Your implementation is what Apple said not to do.. @dreampiggy Emm, maybe I and you cannot reach a consensus \ud83e\udd14 . Maybe needs more people to get in. But firstly, I can list some reasons why we should change the architecture:\nFrom usage of GCD\n\nFrom Apple\u3001other famous open source framework\u3001or my experience, one queue to one subsystem or module is the correct one.\nThread explosion.\nThread context switch.\nMore queue not equal to more performance.\n\nFrom a view of a third framework\n\nSD is just a image loading framework, which means, it's just a small part of an App, so this is the reason we should be more careful when uses CPU\u3001memory\u3001network or other system resources. \nHTTPMaximumConnectionsPerHost has limits, but we can't assume user would use one host to load images, I think your company also would not use only one host, because we should consider server load balance, CDN or Domain Hijacking and so on. And if you trust HTTPMaximumConnectionsPerHost, maybe we can remove downloadQueue, it has no meaning any more \ud83d\ude22 , we can't right?\nJust like the previous PR about adding autorelease pool to dispatch_queue, why I propose refactor these things is I see many people complain the crash, I think maybe many users may not see the crash log. We should change it.\nBy adding a NSOperationQueue, we can expose it to user like downloadQueue, provide user a more robust, modular, and configurable API. I think API breaking is needed, actually, it didn't change too much, easy to adopt for users.\nI think change some API is adoptable, framework needs to optimize, just like 5.x, I don't mean my solution is the best, but we should try to do the right things, other than just do some small changes, and think maybe it satisfy the needs. We never can expect users do anything.\n\nSo, except you said the API breaking , I just can't get any reason that we should insist to keep one queue to one operation.. @dreampiggy Please see myPR#2481 , it express what I want to do currently. Or #2480 make by @bpoplauschi .. Discussion in #2477 ..SDAnimatedImagenot overrideimagesproperty, I'll make aPRto fix it after thisPR` merged.. @dreampiggy \n\nThat SD_MAC check specify for macOS platform, is that need ?\n\nEmm, I'm not familiar Mac platform, Mac has CGImageGetBitsPerPixel, but not provide images property?\n\nAnd this method, is that really need to check image.images ? It can solve the problems of UIAnimatedImage, however, for the custom animated class, this does still lose some accurate value, maybe we need extra image.animatedImageFrameCount * (bytesPerFrame). But I think it become more complicated. PS : This may introducing extra cost, because each frame image is created on demand but not keeping in memory.\n\nI think images is needed, for normal UIImage, can have multiple images by images property, for SDAnimatedImage, we can override images and return UIImage's by loadedAnimatedImageFrames. If user uses custom animated image by subclass UIImage, can we add some documents to remind him to be careful cache? Or we can add a getter in protocol SDAnimatedImage to get images like loadedAnimatedImages(PS, I don't like this, because we would restrict user implement a protocol if he just wants to use images)? \n\nBy default we use SDMemoryCache, subclass of NSCache, the cost arg for setObject:forKey:cost: actually is really magic for usage (I don't think it really works :))\nIf that information is not readily available, you should not go through the trouble of trying to compute it, as doing so will drive up the cost of using the cache\n\nEmm, the meaning Apple want to express is that if we need do much work to get the count and not readily, this would drive up the cost, because what NSCache's job is get/set cache object in very short time. It may not means totalCostLimit isn't do well. \n. @dreampiggy \n\nThe PR assume something in implementation detail. While many cases can let UIImage.CGImage be nil, for example, when loading PDF images (not CGImage based, it's CGPDFPage based), or user use the CIFilter transformer to create CIImage based UIImage. This changes break the more common usage.\n\nFirst, the original calculation is wrong, we need to fix it, you can have a simple calculation, if users sets totalCostLimit to 300M, actually only cache size up to 300M * 4 = 1.2G, totalCostLimit can have effect. For most common usage, users would not use PDF, you can see no users make any issue that want to use PDF, right? CIImage can use, and we can  replace CGImageGetBitsPerPixel(image.CGImage) / 8 with 4.\n\nI don't think as a common method we should do like this. And this image cost miscalculation is not always useful for our cache system because NSCache will not always use this value (See the documentations).\n\nI don't know the actual reason Apple may not evicted instantly, from the experiences I have, the reason maybe the system resources is sufficient for work, for example, users set totalCostLimit to 100M, but system have 2G free memory, at the moment, if users's cache size up to 110M, I may would not do evict, and wait some moment if it needs, because system have a lot of memory, release operation could involve many things, cpu, free list pages....\nAnd we can't say it would not always make cache under limit, so we don't need fix it. Because we need handle the most cases.\n\nIf you think this value is important, we can consider to add a custom way for calculation. For exmaple, we add the block for this, to let you return the cost for image. Like what we've done in 5.x for SDWebImageScaledImageForKey, we support user to pass customScaleFactor for each individual image. This type of design is more suitable for our customizable SDWebImage.\n\nAdd a custom method is acceptable, but I don't think we need to add a key to user, user cannot confirm the actual size of image, I prefer to use a protocol that UIImage conforms, provide a default implementation of image cost, because we always store UIImage in cache, so like SDAnimatedImage, it can override image cost method, we just need to call cost method in SDMemoryCacheCostForImage.. @dreampiggy Wow, why here is pixels? the name is maxMemoryCost, memory cost is the bytes!!! \ud83d\ude02 It's not conform to convention , you can see all the cache, like NSCache or other, the size is bytes. And I believe most users use bytes to set it, like 1024 * 1024 * 100 for 100M. . @dreampiggy I'll add this in migration guide.\nMisunderstand is acceptable, if user wants to use this value properly, first he should realize it's the pixels count, not the memory size, second he should read the source code of SD, to confirm it uses RGBA8888 which is 4 bytes per pixel(for wide format, it's 8 bytes ), finally, use memory size / 4. \nTBO, this is not easy for most users. He should know theses images's related information.\nAnd for this PR, what about apply a protocol to UIImage that provide the image cost? @dreampiggy . The PR fixes FLAnimatedImage and APNG animated image cost calculation. Currently, we only take poster image's size into consideration, and miss many cost, for example, APNG use images to store multiple images, for FLAnimiatedImage, it stores GIF's data and frames. If we don't fix it, the SDMemoryCache is invalid, because it uses the wrong cost to trim.. @bpoplauschi The issue takes a long time to debate, I think you have to decide wether we need to fix 4.x GIF memory cost issue. At least if users uses GIF in 4.x, the SDMemoryCache is not available for manage maxMemoryCost, a potential memory issue , you guys need to pay attention. And if you guys think it's ok, just close it.. @dreampiggy I know you and I hold different opinions, we need other @SDWebImage/collaborators \nto know this issue and do some brainstorming, not just close it and keep the issue.. 5.x introduced SDAnimiatedImage, but we can't let everyone upgrade to 5.x, you can check the statistics about SD.. @dreampiggy ? User don't need to set it manually if he don't add associated object. We have default calculation, most of the time, user don't need do anything.\nhttps://github.com/SDWebImage/SDWebImage/pull/2486/files#diff-c11f08714ad45b88f7691967f7492a0eR26. @dreampiggy Anytime, before or after image be stored to cache.\nIf user don't want to use default calculation, I provide two ways:\nFor UIImage subclass:\n@interface CustomImage : UIImage\n@end\n@implementation CustomImage\n- (NSUInteger)sd_memoryCost {\n    return 100;\n}\nFor UIImage instance, but add some associate objects to it, like FLAnimatedImage, we can call like image.sd_memoryCost = 1000 after set big memory size associate objects.. Emm, this PR is for 4.x, it calculate the pixels already. I have a simple glimpse for #2568 , seems only property name has difference? if all of us agree to use property, we can keep the same interface between 4.x and 5.x, after this 4.x merged, we merged master to 5.x someday, and we should only change pixels to bytes.. > If you agree with this design, I'll merge and pick them together. I just don't want to spend more time for 5.0.0-beta4 release. Check #2568 for the total cases (including the comment, the Animated Image overrride method). After that merge, I can pick and solve the merge conflict.\nIf you want to release 5.0.0-beta4 ASAP, you can do it. bytes calculation related issues can resolved after that. Before all of us, like @bpoplauschi @skyline75489 @kinarob and other collaborators, reach an agreement, we can't just merge it. (PS. if you have not much spare time to work on release, I can get in, you don't need to have any pressure ).\n\nIf you think your \"Git Author\" in the git history is important. I can rename my MR to your name.\n\nHey man, please don't have this  narrow view. If I want this PR merged by me, what's the benefit I can get? the reason I do all of the open source things, is to try to make them be better. If you think this PR has any issues, bugs, you can express your opinions, I'm very open. PR is very simple, ideology or thoughts are the key point.\nBack to this PR, the correct order I think is all of us reach an agreement, I or you (If you want) fix it for 4.x, then merged master to 5.x, and if all of us agree to change pixels to bytes, then do it in 5.x.. @kinarob If you target after iOS9.0, you don't need remove observer explicitly. otherwise, you still need it. The reason why it don't needed anymore I think is Apple remove the unsafe_unretained in Observer and uses weak instead. So no crash anymore, pointer is safe.. @kinarob Yeah, definitely, it not uses weak, it uses unsafe_unretained. Like my comment said above, your App's minimun target should greater than iOS9.0.. I think this Issue can close. @kinarob Thanks for this discussion.. @kinarob \ud83d\udc4d for your curiosity. But if you wants to get how framework implements in iOS8, I think you can check the assembly and Xcode to debug. We'd better to follow Apple's documents, maybe some versions in series of iOS8 already support weak behavior, but anyway, always add removeObserver explicitly is more robust.\nI said unsafe_unretained, I mean framework just keep the pointer of the observer, so framework can use unsafe_unretained\u3001assign\u3001address pointer to store, these actually do the same thing.\nAnd the source you linked is not the source code of Apple, it's just GNU project. So if you curious, you can debug and see how mechanism works, post here that we can all learned. . Give my some opinions, LOCK things should only used in internal, so it maybe better to put it in a private header. And also SDWebImageWebPCoder or all other frameworks should define their own LOCK macro, not just rely on SDWebImage framework. \ud83e\udd14 . @dreampiggy I don't face any issue about private header, maybe @bpoplauschi can give some examples. IMO,for CocoaPods, private_header_files can handle this, we can see in ReactiveObjc(I don't try, maybe CocoaPods can infer public or private from Build Phases->Headers? ), for Carthage, I think it would not cause any issue either, because Carthage just build the framework based on scheme. . @bpoplauschi \ud83e\udd14 I'm ok if you insist anyway. But TBO, LOCK \u3001dispatch_main_async_safe these macro may pollute the project and I think it's not the public API we want to provide, we have no documents(maybe it's trivial) and may change the internal implementation, for example, currently we use semaphore to lock, maybe in the future we may use os_unfair_lock_t or other locks instead to improve the performance. So at least maybe we should add some comments or something to tell user don't use these macro, it's not stable IMO, you can see, this PR break the SDWebImageWebPCoder  initially, maintainer like @dreampiggy should also make a PR to fix that, it proves this is a API breaking if you think it's public. \nYes, as you said, SDWebImageWebPCoder dependent on SDWebImage, but actually, everyone who uses SDWebImage would treat the SDWebImage as a dependency, CocoaPods is just a dependency manager, the only difference is SDWebImageWebPCoder also maintained by you guys? \ud83d\ude04 .\n. @ivan-konov Seems Carthage bug, please see 2561.. incrementallyDecodedImageWithData cannot called in concurrency, besides ivars needs thread safe, CGImageSourceUpdateData is also cannot be called concurrently, other words, incrementallyDecodedImageWithData needs be called sequential. @yidongAndOther If you call it by yourself, please add a lock before call it and unlock it after it. In internal of SD, we use a serial queue to call it for thread safe.. @JKjiangnan Do you use UITableView or UICollectionView? because cell or imageView would be reused, so if we get a cell from reuse queue and set a new image url, we would cancel the download task of previous image, so these cancellation logs would be appear, do you faced any issue besides these annoying logs?. @bpoplauschi Emm, seems you overlooked? \ud83d\ude02 I put it in reset method, not cancel.. > Also, I would refactor the background task code into a separate component.\n@bpoplauschi You mean separate to two methods, one for start background task, another for end? \ud83e\udd14 . @bpoplauschi @dreampiggy Guys, this bug should also be fixed in 4.x, background download has a long time not available, if you still stick to lock performance, maybe any of you can give a PR to review, because compared to the lock performance, bug needs fixed first. \ud83e\udd14 . \uff1fIf operation is running, at least operation queue and downloader would retain operation, so operation is always valid, if operation is be canceled or done, reset method can be called, background task can balanced. \nSo If expiration hander be called, which means operation is still running, operation would not be nil. . > This relay on the NSOperationQueue or NSOperation behavior. This assume that\n\n\nif the NSOperation is dealloced, its cancel method must been called before it.\n\nHowever, I don't know whether it's true or not and don't care about it.\nThe general correct writing of the background task identifier, it's to use a __block variable (for instance) or static variable to ensure it's always bind to the expiration handler. It's always safe.\nobjc\n__block UIBackgroundTaskIdentifier taskID = UIBackgroundTaskInvalid;\ntaskID = [UIApplication.sharedApplication beginBackgroundTaskWithExpirationHandler:^{\n    [UIApplication.sharedApplication endBackgroundTask:taskID];\n}];\n\nWe can't use __block or even static variable in here, because we need to mark task end ASAP when operation have already finished, not just wait system tell us remaining time reaches 0.\nAnd I think the nil thing would not happen in our framework, only when user don't use NSOperationQueue, don't use downloader,   and call [operation start] directly, then dealloc it , if you guys think this exist, I can add a check in dealloc method.. @dreampiggy I tidy the code and take operation deallocated directly into account. We need to cherry pick this commit to master after this merged, change base branch may not work, two branches contain giant differences.. Seems we use the images from external websites. So the images may missed. I suggest replace all our image urls, instead, create a static resources project in SD organization to host our own images. To prevent copyright issues, we can find photos from some free photos websites.. @dreampiggy I' ll cherry-pick this PR to master.. @CocoaML, I'll try to find the issue, but I need some extra informations, refer to your issue template, the issue only appear in iOS11? Which device can reproduce? Simulator can reproduce? How to define large memory? 300M? 1G?\nI just run the demo you post on simulator iOS12 and memory works fine.. @Robot2037 Seems crashed when map empty keys and values, can you reproduce in your development environment? if you can, please enable Zombie in scheme to catch released object.\nAnd for temporary fix, you can disable the weak memory cache by [SDWebImageManager sharedManager].imageCache.config.shouldUseWeakMemoryCache = NO;.\nBy the way, you don't need to call clearMemory by yourself when enter to background. imageCache uses NSCache to store image, it would clear when enter background automatically.. @Robot2037 Emm, SD also handles the situation of memory warning. Theoretically even though you don't call it by yourself, the crash would also appear, because we call it in SD. And before we can find the issues, I suggest you to use [SDWebImageManager sharedManager].imageCache.config.shouldUseWeakMemoryCache = NO; to disable weak memory, and only use NSCache to manage images in memory.\nCould you mind post some integrity symbolic crash logs?. @Robot2037 After some debug, I can confirm now, the crash happens when NSMapTable empty the keys, in SD, keys is NSString of the image url, when we remove the objects, runtime calls objc_msgSend, the selector is release to release the keys, in objc_msgSend, when try to get isa of the parameter self, then crash, because key already released.\nThe crash procedure just like above I describe. But the actual reason why it would be released in advance is unknown. In theory, we use strong to store the key, would not be released before NSMapTable release it.\n@dreampiggy , I have a thought to try to fix it, before we call - setObject:forKey: of NSMapTable, we do a mutableCopy of key if key is NSString, let NSMapTable to manage the memory of key. I don't use NSPointerFunctionsCopyIn because it would not always do copy. What's your opinion? \ud83e\udd14 . @Robot2037 Yeah, it's strange, because the keys is valid when remove objects in NSCache, but invalid when empty keys in NSMapTable. So seems it's a weird system bug? I don't know wether we need to fix it, but I have a thought in previous comment to try to fix it. Let's hear other guys opinion. cc @bpoplauschi .. @bpoplauschi Yeah, at first, I suspect the issue happened in weak operation, but after @Robot2037 provide some crash log, I debug refer to the offset of crash line, the crash happened when empty keys.  Detailed analyze I already comment here.. @dreampiggy @bpoplauschi I want to try to fix it like below, what's your guys opinion? \ud83e\udd14 \n[self.weakCache setObject:obj forKey:[[key mutableCopy] copy]];. @dreampiggy \ud83d\ude06 Emm, yeah it's automatically redirection, but let's save the load for Github and user, Github don't need to do 301 and users can access it more quickly.. \ud83d\ude02 For obsessive, @tshirt101 maybe you can remove all innocent space and tidy the README?. @grimmdaniel What's the version of SD you use? Can you fill some info like below?\nInfo | Value\n-- | --\nPlatform Name | e.g. ios / macos / tvos / watchos\nPlatform Version | e.g. 11.0 / 10.13.0 / 11.0 / 4.0\nSDWebImage Version | e.g. 4.2.0 / 4.1.0\nIntegration Method | e.g. carthage / cocoapods / manually\nXcode Version | e.g. Xcode 9 / Xcode 8\nRepro rate | e.g. all the time (100%) / sometimes x% / only once\nRepro with our demo prj | e.g. does it happen with our demo project?\nDemo project link | e.g. link to a demo project that highlights the issue\n. @grimmdaniel \ud83d\udc4d Unfortunately, we may have this issue in 4.x, we already do the first step to try to fix this issue, please see #2475(other optimize still in discussion, please see #2477 ) , it's already merged into master, but still not release currently. If you need progressive feature, I suggest you fork SD, integrate it by using CocoaPods  directing to your own Git url.\npod 'SDWebImage', :git => 'https://github.com/UserName/SDWebImage.git'. @lvpengwei Thanks for your PR! but default priority of task is default. Feel free to comment if you still think it has any issue.. Conclude: this is the bug fix.\n@dreampiggy \n\nTo keep thread safe, use atomic (to make sure self.xxx = xxx && let a = self.xxx read-write safe) is OK. This dictionary is rare to modify. Most cases, for user who don't call any setValue:forHTTPHeaderFiled:, using lock cost extra cost. I think it's no need to use mutable object. (What pay is what you gain).\n\natomic attribute always has a lock to protect getter and setter method. So lock is inevitable. And NDDictionary is immutable, so it's thread safe, don't need atomic attribute. And let's assume it works, the bug , you can see the PR body I comment, I give one situation to demonstrate issues.\nBesides these, I removed any mutableCopy operation.\n```objc\n//@property(retain,atomic) UITextField *userName;\n//Generates roughly\n\n\n(UITextField ) userName {\n    UITextField retval = nil;\n    @synchronized(self) {\n        retval = [[userName retain] autorelease];\n    }\n    return retval;\n}\n\n\n(void) setUserName:(UITextField *)userName_ {\n    @synchronized(self) {\n      [userName_ retain];\n      [userName release];\n      userName = userName_;\n    }\n}\n```\n\n\n\n. Thread 1:\nset header HTTP_HEADER_1: 1\nThread 2:\nset header HTTP_HEADER_2:2\nThe implementation of original like below:\nobjc\nNSMutableDictionary *mutableHTTPHeaders = [self.HTTPHeaders mutableCopy];  [1]\n[mutableHTTPHeaders setValue:value forKey:field];   [2]\nself.HTTPHeaders = [mutableHTTPHeaders copy];    [3]\nAssume Thread 1 and Thread 2 has already finish execute [1] and [2], now begin to execute [3], let's assume Thread 1 first execute, after that, self.HTTPHeaders is {HTTP_HEADER_1 : 1}, then Thread 2 begin to execute, after execute [3], the self.HTTPHeaders is {HTTP_HEADER_2: 2}, but users expect self.HTTPHeaders is {HTTP_HEADER_1 : 1; HTTP_HEADER_2: 2}.. > atomic using a spinlock, which is the best suitable for this use case because this is the fast compared to semaphore. (suitable for this type of single getter/setter). I think Objective-C runtime implementation is better than my code. https://opensource.apple.com/source/objc4/objc4-723/runtime/objc-accessors.mm.auto.html\n@dreampiggy I don't look into the actual implementation of atomic, I just do a demonstration to show  lock is inevitable. From the url you list, if iOS truly use it currently, I just wonder, because Apple has already acknowledge spin lock is not safe, and don't recommend to use, I remember Apple use new os_unfair_lock to replace that.\nAnd I did't compare the performance, because I think these can ignore. From the tests from StackOverflow, seems atomic's performance is very bad.. @dreampiggy Emm, system can't figure out wether it can use spin or not, actually, spin lock has deprecated in iOS10, and spinlock is just a class using os_unfair_lock, see objc4. @dreampiggy Emm, am I not express clearly? first, I wonder why Apple still use spin lock, because it has bug, can't use it anymore, you reply spin lock has no problem in this situation, and then I told you that spin lock actually has deprecated, and use os_unfair_lock instead. It's what I want to express. \ud83e\udd14 .\n\nUnfair lock is still a busy lock. They can do more performant in this case. While samphore is not designed to solve this simple synchronization problem. it's a resource aquire synchronization and was used mostlly for UNIX file, socket or something can be shared from different thread / process. But however, we use that like a lock because it's a NSObject and easy to use.\n\nEmm, I don't know what you want to express, many methods can use to synchronize, why you care about lock? please see Threading Programming Guide - Synchronization.\nBack to this situation. Except the bug I mentioned, @property (copy, atomic, nullable) NSDictionary<NSString *, NSString *> *HTTPHeaders; actually is wrong, why, because NSDictionary is immutable, and thread safe, don't need atomic attribute at all.\nSeems you care about performance. I tested the getter cost in iPhone6+ iOS12 Debug mode. semaphore used 0.154559s, atomic used 0.078245s when be called 1000000 times, atomic is only 1x faster than semaphore when do getter, and they are both really fast and can omit.\n```objc\n@property (nonatomic, strong) NSMutableDictionary nonAtomicDictionary;\n@property (atomic, strong) NSMutableDictionary atomicDictionary;\n@property (nonatomic, strong) dispatch_semaphore_t semaphore;\nself.semaphore = dispatch_semaphore_create(1);\nself.atomicDictionary = [NSMutableDictionary dictionaryWithObject:@\"test\" forKey:@\"test\"];\nself.nonAtomicDictionary = [NSMutableDictionary dictionaryWithObject:@\"test\" forKey:@\"test\"];\nNSDate dateStart = [NSDate date];\nfor (int i = 0; i < 1000000; i++) {\n    SD_LOCK(self.semaphore);\n    NSMutableDictionary dic = self.nonAtomicDictionary;\n    SD_UNLOCK(self.semaphore);\n}\nNSDate *dateEnd = [NSDate date];\nNSDate dateStart1 = [NSDate date];\nfor (int i = 0; i < 1000000; i++) {\n    NSMutableDictionary dic = self.atomicDictionary;\n}\nNSDate *dateEnd1 = [NSDate date];\nNSLog(@\"semaphore time is %f\",[dateEnd timeIntervalSinceDate:dateStart]);\nNSLog(@\"atomic time is %f\",[dateEnd1 timeIntervalSinceDate:dateStart1]);\n``\n. @dreampiggy Got it, but I can tell you why many people don't like it, because it's just thread-safe when getter and setter, it's not thread safe for all operations of property, for example, we can makeNSMutableDictionaryasatomic, but if we set or getkey-value` pair, it's not safe. This is the reason. Hardly the situations exist that just need getter or setter need to keep thread safe. \nAnd for custom object, have properties, people can just assign custom object's property, it's also not thread safe.\nFor this PR, seems atomic is thread safe, but it would leads to lose of data.. Seems we have not any Swift demo or Swift test cases? I think we can add some, other than find issues when use it. \ud83e\udd14 . @bpoplauschi I joined in not a long time, so I may missed some discussions. As I PR description said, NSCache has an inevitable race condition, so if we use sharedCache to store and get concurrently, we have no any way to fix it. And why I remove the lock, is we only add lock when we read cache, this is useless, because we don't add lock to write. . @bpoplauschi I updated the original code to rename the variable.\n\nI think we could subclass NSURLCache and make our own thread safety implementation on top of the super methods. Then we can set the it NSURLCache.sharedURLCache = [OurURLCache new];. We don't care if there is a different instance passed in via the session param.\n\nEmm,  we may need to think more a bit, even though fix the race condition is not about this PR, I can give some opinions, first, we may careful to set sharedURLCache, because all URLSession default use this, and also user may use some custom by themself, this option needs to discuss. \nIf we want to entirely fix the thread safe, I think the only way is not use sharedURLCache(the disadvantage is not shared with users's cache). And maybe use a subclass of NSURLCache is an option.. @bpoplauschi \ud83d\udc4d I get your point, use a thread safe NSURLCache is ok, I mean we may need to think wether to replace NSURLCache.sharedURLCache, I can list some situations to demonstrate:\n\n\nUsers has their own needs, like control disk/memory/diskpath, may create a new instance to replace shared cache(maybe user may use their own subclass of NSURLCache to do some custom things). If we just replace by our thread safe NSURLCache, may influence users's needs.\nNSURLCache *URLCache = [[NSURLCache alloc] initWithMemoryCapacity:4 * 1024 * 1024\n                                                         diskCapacity:32 * 1024 * 1024\n                                                             diskPath:@\"tmp\"];\n    [NSURLCache setSharedURLCache:URLCache];\n\n\nNSURLSession loading system use defaultSharedCache to manage cache items, because we changed the diskPath when SD work, so if users do some network, maybe they are loading some info from server, this may mess the cached item.\n\n\nWhat's your opinion? \ud83e\udd14 . @bpoplauschi So I think we can merge this PR to remove useless lock.\nFor the thread safe issue, we all agree to use a lock to protect race condition, @bpoplauschi already post the code,   and small optimize is using read-write lock, this may best fit.\nAnother is we can assign a singleton SDThreadSafeURLCache for our default URLCache, not one session one SDThreadSafeURLCache instance.. @dreampiggy I prefer option two, provide an opportunity for user for custom, if they do, they need take care of race condition by themself.. A long time to fix.. @dreampiggy Do you still have any considerations?. @dreampiggy Two ways to fix this issue, one is remove cached image like this, another is add an option SDWebImageNotQueryMemory, so if sd_cacheFLAnimatedImage not exist, we would query disk data or do network.. @bpoplauschi This is ok, the invalidation only may happen when user loads the same GIF using UIImageView and FLAnimatedImageView at the same time, and even it invalidate, the flaw is UIImageView may loads data from disk, this is the rare case and I think it's acceptable.. @dreampiggy First, you should check my code, we would not always remove the cache, only sd_cacheFLAnimatedImage is NO and cacheFLAnimatedImage is not exist, we would remove, if we don't do this, just keep the current implementation, FLAnimaitedImage would invalid, because disk data is not always exist, do you realized? Why you just assume disk image is always exist?. Constrain to only GIF.. @bpoplauschi UIView category may also exist reuse wrong image issue. I'll have a look.. @dreampiggy concurrency, already state on my PR's description.. The relation is image url check, I reviewed the code of UIView category, and I found UIView supports multiple images loading concurrently, and would mess up NSProgress and Activity indicator, and I also adjust the handler logic when url check failed.\nI start a conversation to discuss in team, and when I wake up today, I find this PR already merged~. Keep.. @dreampiggy I'm happy after a long debate, you realize the issue finally. You list some issues about #2486 , I don't know wether you really review carefully, I can tell you these you said is inexistence, I don't want to resume a long debate to explain. Maybe after other collaborators reviewed your PR, I can list the reason why your implementation can not work, and if other also think my PR has the issue as you said, I can explain.. @skyline75489 Please see my reviews, I list the reasons.. > I've read basically all your discussions. I agree with @dreampiggy . The protocol implementation is more elegant and maintainable. Adding sd_memoryCost property just seem to be too much effort for only a fix for FLAnimatedImage.\n@skyline75489 Am I miss anything? it's not protocol implementation, it's just add a property to SDAnimatedImage protocol for SDAnimatedImage, and do if...else.. check. We support extreme customize, so just a small example, I have a custom image subclass named SubclassOfImage, it wants custom memory cost calculation, how do we do?. @skyline75489 You can check the team conversation. At first, I used a protocol as you said that any image can conforms. But after some cases I think, I give up.because not every user would use subclass of UIImage, he can set associated object to UIImage, this situation, protocol invalid.. My PR #2486 is for 4.x, it can solve associated object issue like FLAnimatedImage and any case I can think by now.\nThis PR is for 5.x, the upcoming version, so we need be careful, we need get the lesson from 4.x,  users can subclass UIImage or set associated object, these cases are really existed.\nTBO, if we need protocol, I can define a protocol which has getter and setter method, not a property. (Actually it's the same).. @skyline75489 Emm? I never say @dreampiggy 's code is bad, I'm just cast the cases. Anyway, I'm apologize if you think I'm aggresive. \ud83d\ude02 . @sunforcode I suggest you don't use lock to block any thread, it potentially dangerous. And completed block would not always be called, for example, you cancel all loading operations, so please don't do this. If you want to do some logical handler only if image be loaded, I suggest you do it in completed block, just like :\n[[SDWebImageManager sharedManager]loadImageWithURL:url options:SDWebImageRefreshCached progress:nil completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {\n        __strong __typeof(wself) sself = wself;\n        if (!sself) { return; }\n        [sself handleCustomThingsIfLoadOperationCompleted:image:url:....];\n    }];. @sunforcode Fine!. @TheLittleBoy Yeah, you can use 4.4.2 instead.. @fishycx And if this is a crash, please also upload the entire crash log.. @fishycx Please provide Exception Type like below:\nException Type:  EXC_CRASH (SIGABRT)\nException Codes: 0x0000000000000000, 0x0000000000000000\nException Note:  EXC_CORPSE_NOTIFY\nTriggered by Thread:  0. @fishycx I still request you to upload entire log just like this.\nFrom the limited log, the crash is race condition, CGContextDrawImage is not thread safe for the same image source, predrawnImageFromImage is called on a serial queue, so you use a tableView or collectionView?I need some informations. . @fishycx :ok_hand: got it, but Exception Type Exception Subtype.. also cannot provided?  because this is the key to show wether is EXC_BAD_ACCESS or other reason.\nException Type:  EXC_BAD_ACCESS (SIGSEGV)\nException Subtype: KERN_INVALID_ADDRESS at 0x0000000000000000\nTermination Signal: Segmentation fault: 11\nTermination Reason: Namespace SIGNAL, Code 0xb\nAnd if you faced many crashes, before we investigate the potential issue, you can change the code the same as #2543 , and then set FLAnimatedImageView's sd_predrawingEnabled to NO, this can disable predraw in background queue, but you need to see wether it would make some performance affects, because it delayed the decompression in main thread when image will show on screen.. @fishycx Typically, the reason is  race condition. We'll investigate!. Investigate!. @fishycx Thanks for your information! \ud83d\udc4d We'll try to fix it.. Keep.. @michaeleisel currently you can use SD as static library, just remove use_framework! and use use_modular_headers! instead:\nuse_modular_headers!. Emm, I have #2534 to fix all bugs, @dreampiggy you can see that. Very easy to fix, just only need to manage a map of operationKey and url. \nJust simply revert is avoid some bugs and produce other bugs, we'd better fix them all. . > @zhongwuzw It's not a complete version of fix.\n\nCurrent we support one View Catalogy, load different operation at the same time. But some of feature was introduced to be only related to one image URL.\nFor example, image indicator. How does this behave when I call like this. Maybe this is a design issue but hard to fix by simple changes without a break behavior.\n```objc\nUIImageView *imageView;\n[imageView sd_setIndicatorStyle UIActivityIndicatorViewStyleWhite];\nNSURL url;\nNSURL highlitedUrl;\nimageView.highlighted = NO;\n[imageView sd_setImageWithURL:url];\nimageView.highlighted = YES;\n[imageView.sd_setHighlitedImageWithURL:highlitedUrl];\n```\n\nI fixed it, indicator should applied to latest loading url, it's acceptable and not API breaking.We don't need to support one url to one indicator, it's weird, user would not want to show many indicator for each url, many indicator rotate in the center of image view the same time(PS. if user really want it, he can just implement by himself by progress block, very easy to do). If we don't fix it, indicator would be mess up. . @dreampiggy Emm, #2531 is commit after @bpoplauschi bump 4.4.3, he can just tag the commit to release it, so we don't need to revert, we have some commits after it, we can put all of them to 4.5.0.. @bpoplauschi Welcome back! Next we can review #2534 , if it's ok, we can merge it to fix the issues.. @michaeleisel Thanks for your suggestion, swift static library has some limitations as you know, CocoaPods version\u3001Xcode... and users may use other pods, I don't know wether most of them already support static library. So based on currently situation, I put static library as a special. We'll wait other collaborators's opinion and may do some changes.. @CapricornRJ Can you give the reproduce demo?. @CapricornRJ Seems App Transport Security issue? Do you add the HTTP to the whitelist? . @dreampiggy Emm, very hacky IMO, add an another class extension and re-declaration a property.\nSeems currently, you and @skyline75489 and me, have different opinions, see #2537 . Maybe this need more people to join in.\nBy the way, I have a glanced at your PR, it has two bugs:\n1. cost would not update when you set it again, need remove and reinsert.\n2. Believe user would always use memory cache. It's not true.. @dreampiggy You can try it again.\n\n\nWhat does this means related to this issue ? If user disable memory cache, what problem will happen ? It need to query disk cache each time, and we fallback to the previous hack solution.\n\nUser disable memory cache(I mean this shouldCacheImagesInMemory, not sd_cacheFLAnimatedImage), but we set it to memory cache. Other words, we consume memory but can't use it.. > @zhongwuzw See the libcache source code, or Apple's open source re-implementation of NSCache using Swift.\n\nIf the cache entry alread registered, but new cost provided, only update the entry of cost..They already consider this case.\nBut anyway, I can keep code assumption simple (seems NSCache's documentation is really frustrating) and use a remove-then-insert instead.\n\n@dreampiggy Emm, you probably misunderstand, your reference is just another distinct implementation, it's for non-apple system. All apple system still not implement any cost update operation. I see you said you have tested it and it works, it's very strange IMO, would you tell me which system already support it?. @dreampiggy NSCache just call cache_set_and_retain, I don't get your opinion, you mean NSCache don't need to re-insert to update cost? . @dreampiggy It's ok, you don't need to explain to me TBO, because I already check, I just don't get your opinion, I put the solution, we need to reinsert to update, otherwise, it's invalid. We can stop this discussion.\nIf you confident that don't need to re-insert, you can revert the commit, and remove re-insert code, let other guys to review.. @cdunkel I didn't have a iPhone XS Max, so I can't try to see the situations of memory allocation. Would you try to use SDWebImageScaleDownLargeImages option to load this? it also crashed?. @dreampiggy Just curious, what if disable decompress and let UIKit to decompress? on iPhoneXS Max still consume greater than 2G and crash?. @dreampiggy Emm, I mean wether this image's decompress consumes memory greater than 2G , because 37627\u2006\u00d7\u20067644 x 4 = 1.1G, I tested it on simulator and iPhone6+, they all indicate the memory consume is about 1.1G.. @zhanght-02 Emm, SDDispatchQueueRelease do nothing after iOS6, can you upgrade the SD version? because 4.0.0 may too old. . @musicode Can you provide a demo project to reproduce? From your screenshot, system goes to forwarding process, this seems very strange.. This bug comes from #2441, I don't much agree to use that way to fix bugs, this PR, I still disagree IMO, in my PR #2404 , I mentioned some bugs, we still not solve them, for this PR, we import the tricky code further, and I think we need to use a different view to solve these problem, we should care about cachedType\u3001imageData, other than to check placeholder or not.\n@dreampiggy I suggest you to wait other collaborators for discussion, actually we don't need to go to the tricky and bug-fix\u3001bug-fix road.. > And even with two more arg cacheType && url, this usage can not be solved at all. Because I can always use code to trigger a case where the placeholder caused args are the same as SDWebImageManager loaded result.\n\nFor example, to simulate a case that cause placeholder to be equal to network loaded image, I can use the code below.\n``objc\nNSURL *url = [NSURL URLWithString:@\"https://github.com/cntrump/pics/raw/master/SDWebImage/giphy.gif\"];\nUIImage *cacheImage = [[SDWebImageManager sharedManager].imageCache imageFromCacheForKey:url.absoluteString];\nSDWebImageManager.sharedManager.cacheSerializer = ^(UIImage * _Nonnull image, NSData * _Nullable data, NSURL * _Nullable imageURL) {\n    return nil; // This returnimageDataas nil,cacheTypeas.none`\n};\n[_imageView sd_setImageWithURL:url placeholderImage:cacheImage options:SDWebImageRetryFailed completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n}];\n```\nYou can not distinguish the difference use any args from that setImageBlock... So this is point.\n\nI don't get your opinion, so you try the #2404 ? it can not work?. @dreampiggy Can you fork my PR and add you use case, then give me your demo url? . > Test Cases:\n\n``objc\n- (void)testFLAnimatedImageViewSetImageWithPlaceholderFromCacheForSameURL {\n    XCTestExpectation *expectation = [self expectationWithDescription:@\"FLAnimatedImageView set image with a placeholder which is the same as the cached image for same url\"];\n    /**\n     This is a really rare case. Some of user, who query the cache key for one GIF url and get the placeholder\n     Then use the placeholder and trigger a query for same url, because it will hit memory cache immediately, so the twosetImageBlock` call will have the same image instance and hard to distinguish. (Because we should not do async disk cache check for placeholder)\n     */\nFLAnimatedImageView *imageView = [[FLAnimatedImageView alloc] init];\nNSURL *originalImageURL = [NSURL URLWithString:@\"http://assets.sbnation.com/assets/2512203/dogflops.gif\"];\nNSString *key = [SDWebImageManager.sharedManager cacheKeyForURL:originalImageURL];\n\n// Use cache serializer to return nil (force re-encoding)\nSDWebImageManager.sharedManager.cacheSerializer = ^NSData * _Nullable(UIImage * _Nonnull image, NSData * _Nullable data, NSURL * _Nullable imageURL) {\n    return nil;\n};\n\n[SDWebImageManager.sharedManager loadImageWithURL:originalImageURL options:0 progress:nil completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {\n\n    UIImage *cachedImage = [SDImageCache.sharedImageCache imageFromCacheForKey:key];\n    expect(cachedImage).toNot.beNil(); // Should be stored\n    cachedImage.sd_FLAnimatedImage = nil; // Cleanup the associated FLAnimatedImage instance\n\n    [imageView sd_setImageWithURL:originalImageURL\n                 placeholderImage:cachedImage\n                        completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n                            expect(image).to.equal(cachedImage); // should hit the cache and it's the same as placeholder\n                            expect(imageView.animatedImage).toNot.beNil();\n                            [expectation fulfill];\n                        }];\n}];\n\n[self waitForExpectationsWithCommonTimeout];\n\n}\n```\n\n@dreampiggy Hey, you really try my entire PR? it works!. > That #2404. Actually do only one thing toward current master branch code.\n\nobjc\nBOOL isPlaceholder = (!imageData && image && cacheType == SDImageCacheTypeNone)\nThen the thing can be done.\nBut I don't like those fix for API-breaking, by introducing a extra SDSetImageWithCacheTypeBlock. The fix is only appied for FLAnimatedImage. And should not be used for any further cases. So it's better to use some other hack way to hide the implementation.\n\n@dreampiggy It's not API-breaking. We just provide a new API for advanced usage. 5.x added arguments like I did, yes, #2449 is created after #2404 . If you worry about API, I can keep the same arguments like #2449 .\n\nThat #2404. Actually do only one thing toward current master branch code.\nobjc\nBOOL isPlaceholder = (!imageData && image && cacheType == SDImageCacheTypeNone)\nThen the thing can be done.\nBut I don't like those fix for API-breaking, by introducing a extra SDSetImageWithCacheTypeBlock. The fix is only appied for FLAnimatedImage. And should not be used for any further cases. So it's better to use some other hack way to hide the implementation.\n\nAs I said before, we don't need to consider the placeholder, setImage is mainly used for the real image, we just need to keep concentrate on handle real image, check cache type, image data, if it's not the real image, maybe placeholder or other image, just set image with it directly, don't need consider any thing.\n\n@zhongwuzw Contact me in IM like WeChat, GitHub discussion is not effective at all. Or maybe we can use some IRC channel.\n\nEmm, I prefer to discuss on the open community, which all guys can get in and discuss it.. > @zhongwuzw It's useless to consider placeholder, until you create your MR to use async operation.\n\nAsk yourself this case:\n\nSetImage a placeholder with GIF reporesentation -> Do async decoding\nSetImage a memory cached image (non-GIF representation, or a sd_FLAnimatedImage asscociated one) -> Do not decoding again, do a setImage call (imageView.image == image)\nAsync decoding finished, Do a setImage call (imageView.image == placeholder)\n\nThen the final rendered image is placeholder, but not the target image. User will complain about that that the imageView showing palceholder randomly.\n\n@dreampiggy I can't get your opinion, please show the test case and confirm it not work indeed.. @dreampiggy Do you have slack account? This is the invite url, you can join it. https://join.slack.com/t/sdwebimage/shared_invite/enQtNTE4OTQ5OTAyOTgxLTZkNmExNGQ0NmE0Mzg4YWJlMmVhYzI3ZjM3OWQ4NTY0NTAzZjg4OWYxMmIxZjdlOWJiOWM5YWZjZDY5ODQzNDQ. @skyline75489 Emm, a little difference is I create a block local variable strongSelf, so strongSelf will retain self when block is creating. The crashes #1940 try to fix is self may deallocated when self keyword only used as a parameter of the method.. > @zhongwuzw I believe most user, don't want to keep the downloda operation alive for longer. Because operation contains many alive instasnce (it store the progressBlock && completionBlock, which retains many things). So this is why the history code use weak self. You can have a search for git history.\n\nI think to fix #2573, just don't post any notification when operation is dealloced (the weakSelf becomes nil).\n\n@dreampiggy Nope, see #1940 , the reason is when using self keyword as parameter directly, it may leads to crash. You can follow the discussion, and @skyline75489 knows much about that crash. \nWe don't need to consider the performance of memory issue, it's just an async operation, very very fast, definitely can omit.. > @zhongwuzw ...I can not understand why place a __strong strongSelf = self instead of directlly use block to capture self have any difference ?\n\nA block will capture any variable inside the block, which hold a strong reference. Here the self should be retained by the block, and after that dispatch async main queue, the block is called, the self can be dealloced. I don't know the case cause that issue.\n\n@dreampiggy In theory, using self should not be caused crash, but it has, I don't know the reason.\nAfter your comment, I realized we can use __block variable to try to fix, __block storage is different with the simple variable copy. . @skyline75489 Emm, weak is more safer undoubtedly, but from the context of the notification, seems it doesn't make much sense to post a notification with nil operation, most of the time, the operation is nil. I tend to choose to retain it, __block and local variable has different memory management, maybe we can have a try, to provide user not only a notification, but also which operation finished, I think it's useful, from my view, if I get any operation state notification, I also want to know what it is. . @dreampiggy Yes, you can pull any guy to join in discussion.\n@skyline75489 From the Issue #1807 , the crash happened in iOS9, I have not iOS9 devices to debug, so I debug using iOS12 on simulator, newTempNotificationWithName:object:userInfo: used to create NSNotification object, so it would retain userInfo\u3001name\u3001object, refer to the offset of crash log, I basic conclude the issue is really because self already deallocated when call `[object retain].\n\nMy thoughts about crash are we only use self keyword as the parameter of method? From the Apple's document, it said If you access an instance variable by reference, a strong reference is made to self. So if we only use self keyword, buggy compiler may don't retain? I'm not sure.\n\nI'm looking forward to any guy to investigate.. Interesting!. I like firth and second in the 1st column.. @dreampiggy Delegate can do these custom things. This break things and unnecessary at all IMO.. @xiangwangfeng I noticed that destTotalPixels is CGFloat, but sourceTotalPixels and imageScale is float, float is always 4 bytes on 64bit or 32bit, so to prevent conversion, @xiangwangfeng please change these float type to CGFloat, then we can use sqrt instead. And please force rebase it!. @xiangwangfeng Hey, any reason to close this PR? \ud83e\udd14 \n. @dreampiggy For your case, CloudPhotoLibraryErrorDomain, it contains many error codes, not every code needs unblock, so it's not correct to filter domain directly IMO, we always need to filter code like we do, not domain. So keep the original processing logical, if user wants custom ,use delegate instead.. HTTP response 404.. @alexandre-g Thanks for your investigates, it's the bug. Do you interested to have a try to fix this by PR?\n If statusCode >= 400, we need to call completion handler with error, and then call done method.. @dreampiggy I suppose to suspend this feature, seems we mixed many logical code, IMO, we need to find a better way to organize these features.. @abdullahumer I'm sorry for that, this big crash rate seems unforgivable , we already found out the issue and have a discussion in #2477 . Unfortunately it still in discussion. Seems now only we can do is to disable progressive feature temporary.. @dreampiggy Oh, it's true, I always think compiler can do memory management the same as C function based on method return type, unfortunately clang don't do it, the reason is compiler may  cannot figure out returned C type.\n\n\n. I'll investigate this issue, @applejian any issue when execute pod update? Can you provide the Podfile example?\nThe first glimpse from the screenshot I can't find any relationship the cause is from DEFINES_MODULE.. Quote from ZipArchive\n\nOK, confirmed to be related to this issue: CocoaPods/CocoaPods#7584\nSome advices:\nSolution A: pod 'SDWebImage', :modular_headers => false\nSolution B: you disable \"Precompile Bridging Header\" AND you use Xcode 10+ to keep autocompletion working\nSolution C: you don't import SDWebImage in Precompiled Headers (*.pch), you do it header by header\nSolution D, from nsparks post, we add a swift file to the sources, as that may workaround the CocoaPods bug\nSolution E, we wait for a CocoaPods fix on this, but it can take years\nSolution F: you don't use modules (so, use_frameworks in Podfile)\nSolution G, we remove DEFINES_MODULE from podspec, but then many users wishing the benefits of static libs/modules will have to customize their Podfile manually.\nI don't guaranty at all that everything works: these are just ideas of resolution.. @dreampiggy Let's analyze 2 choices:\n1. Users use SDWebImageGIFCoder, the behavior behave the same.\n2. Users use FLAnimatedImage, image.images always equal to nil, SDWebImageImageIOCoder  handle the decompress and scale, so if GIF loaded using SDWebImageCoderScaleDownLargeImagesKey option, and it needs scale down because, data would be changed to first frame's data, leads GIF to become static image; This is the main key that we can't let GIF to go into decompression.\nIf you do use FLAnimatedImage, and don't add SDWebImageGIFCoder in coders manager. You get a single frame bitmap of GIF. And it should be decoded because it allows fallback on normal UIImageView.\n\nFLAnimatedImage do not use the first frame that SDWebImageImageIOCoder decoded, only if FLAnimatedImage not created, this only would happen if data is not GIF, if it's not the GIF, we can go into decompression process.\n@dreampiggy If you think user has the strong requirements that only load GIF's first frame by UIImageView, we need to add an option like SDWebImageDecompressFirstFrameOnly that we can use it to only decompress first frame but not do any scaled down operation.. @dreampiggy Emm, I already comment,convenience on Slack?  I can tell the details.. > @zhongwuzw All your consideration, is already been done in 5.0. There are one SDWebImageDecodeFirstFrameOnly option. Do the exact what you want.\nYou may misunderstood, I mean SDWebImageDecompressFirstFrameOnly, not SDWebImageDecodeFirstFrameOnly, decompress vs decode, it's not the same, decompress means transform to bitmap buffer, decode only decode to UIImage.\n@kinarob If user uses the default config, means uses SDWebImageImageIOCoder, GIF can goes to invalid like below:\n\n@dreampiggy @kinarob We can solve the decompression of GIF which only contains one frame(I think most of the users may not use one frame GIF, because for static image, many alternatives can better than it), but I think it may not related about this PR, I can add this SDWebImageDecompressFirstFrameOnly or check the frames count wether equals to 1 in another PR.. > @zhongwuzw I know you means. But I say \"This break the current behavior, for the user, who use SDWebImageGIFCoder and decode a static GIF, their force decode feature does not applied.\". Since that Static GIF case is rare compared to current FLAnimatedImage use case, It's acceptiable choice. (This actually is not a fix, it's performance trade-off)\n\nPlease update the comments there, to make it clear logic for future maintain, instead of just chaing code. For example, like this\nobjc\n// Do not force decoding animated images\n// Do not force decoding GIF images in 4.x, because we have FLAnimatedImage compatible code which assume the compressed data buffer not been changed. Since static GIF is rare, this can benefit most users.\n\n@dreampiggy Emm, it's a bug fix, fix multi-frames GIF may become one frame static GIF. I can update the comment to show why we need to filter GIF.\n. > CGImageGetWidth return the pixel size of bitmap buffer. It's does not represent the point size. Are you sure this calculation is correct ?\n\nBut actually, I'm agree with that sqrt method. The calculation there should be changed.\n\nGood, I'll remove additional scale calculation.. @iliaskarim Thanks for your PR! I can give my thoughts, maybe I think it may not have any benefit, because SDWebImageDownloaderNoOptions don't represent any default value, we can see how Apple does like below, UIViewAnimationOptionCurveEaseInOut,UIViewAnimationOptionTransitionNone both equal to 0, means default value, and it has specific implication. So we may just don't need to add SDWebImageDownloaderNoOptions.\n```\n    UIViewAnimationOptionLayoutSubviews            = 1 <<  0,\n    UIViewAnimationOptionAllowUserInteraction      = 1 <<  1, // turn on user interaction while animating\n    UIViewAnimationOptionBeginFromCurrentState     = 1 <<  2, // start all views from current value, not initial value\n    UIViewAnimationOptionRepeat                    = 1 <<  3, // repeat animation indefinitely\n    UIViewAnimationOptionAutoreverse               = 1 <<  4, // if repeat, run animation back and forth\n    UIViewAnimationOptionOverrideInheritedDuration = 1 <<  5, // ignore nested duration\n    UIViewAnimationOptionOverrideInheritedCurve    = 1 <<  6, // ignore nested curve\n    UIViewAnimationOptionAllowAnimatedContent      = 1 <<  7, // animate contents (applies to transitions only)\n    UIViewAnimationOptionShowHideTransitionViews   = 1 <<  8, // flip to/from hidden state instead of adding/removing\n    UIViewAnimationOptionOverrideInheritedOptions  = 1 <<  9, // do not inherit any options or animation type\nUIViewAnimationOptionCurveEaseInOut            = 0 << 16, // default\nUIViewAnimationOptionCurveEaseIn               = 1 << 16,\nUIViewAnimationOptionCurveEaseOut              = 2 << 16,\nUIViewAnimationOptionCurveLinear               = 3 << 16,\n\nUIViewAnimationOptionTransitionNone            = 0 << 20, // default\nUIViewAnimationOptionTransitionFlipFromLeft    = 1 << 20,\nUIViewAnimationOptionTransitionFlipFromRight   = 2 << 20,\nUIViewAnimationOptionTransitionCurlUp          = 3 << 20,\nUIViewAnimationOptionTransitionCurlDown        = 4 << 20,\nUIViewAnimationOptionTransitionCrossDissolve   = 5 << 20,\nUIViewAnimationOptionTransitionFlipFromTop     = 6 << 20,\nUIViewAnimationOptionTransitionFlipFromBottom  = 7 << 20,\n\n``. @iliaskarimUIViewAutoresizingNoneactually has specific meanings, it means don't do autoresizing. For thisPR, at leastSDWebImageDownloaderNoOptionshas not any meaning, so we can't import this IMO, I think we have two options, one is add all default options likeUIViewAnimationOption, another is keep the original. . @iliaskarim Provide convenience interfaces just likeUIImageView+WebCachesetImagemethod is reasonable for me, @SDWebImage/collaborators any opinions?. Closing in favor of #2633 .. @keynsianets I used you project \nhttps://www.dropbox.com/s/dknfhxvuyksye4j/SDWebImageTest.zip?dl=0, but it works, can you check again?. @kbabulrao Hey, the domain you provided is reachable?. Related #2477, although not use progressive, normal decode also has the same issue.. @mynameissujie Still not fixed currently, we don't reach agreement and have discussion in #2477 , welcome any guys to get in to discuss.. @krze Firstly, thanks for your issue report, and I can do some explanations why I say it's the same, because we have the same mechanism, we have one GCD queue to one operation, we copy the data, add the decoded block into queue, so the issue is the same. For a simple example, as your scenario, you keep 4 concurrent downloads, I assume you have table view to load many images, maybe 100, first, we put 4 tasks to download images, named 1.png, 2.png, 3.png, 4.png, and at the same time, we scroll the screen to see others, and 1\u30012\u30013\u30014.png already downloaded and put into GCD queue(even we callcancel, it cannot cancel decode operation), now 5\u30016\u30017\u30018.png comes in, it do the download and decode, we can encounter memory spikes easily, we do copy, we can't control concurrent decode nums, if we enable progressive load, it increase the severity.. Confirmed,CGColorSpaceCreateWithICCDatawould check the core foundation type id, and only do the real copy if the data parameter isCGDataProviderRef, others likeCFDataRef, it just do retain (seemsAppleforgetCFDatacan use external backing store, assume data which user provide is always valid). I made a wrong assumption that if we get the validCGColorSpaceRef`, it would maintain the whole things, and we can release data totally.\nSo for the data parameter when create CGColorSpaceRef, if we have external bytes backing store, we need to construct a NSData to copy or use CGDataProviderRef which would do copy in CGColorSpaceCreateICCBased.\n@dreampiggy We can fix some typos and merge this.. @dreampiggy Yes, this leads inconsistency block policy for server errors, but we can add filter for SDWebImageServerErrorDomain, this seems the simplest way to not introduce new API.\n@dreampiggy If we think 500 should not be blocked, why we block SDWebImageErrorDomain like https://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L442, https://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m#L433, its status code is valid, only maybe data invalid temporary. What's the consideration about this?\nFor the future of custom block policy for internal developer, for example, custom loader, I thought for a moment, for the completedBlock, we can add new parameter like userInfo as below, to let developer provide some useful contexts, not only for blocked policy, but this need to add a new API, needs discussion.\n^(UIImage *downloadedImage, NSData *downloadedData, NSError *error, BOOL finished, NSDictionary *userInfo). > And, we have so many of dummy code for weak-strong dance.\n\nobjc\n__weak weakSelf typeof(self) = self;\n^{\n    __strong strongSelf typeof(weakSelf) = weakSelf;\n    if (!strongSelf) return;\n    __weak weakweakSelf typeof(strongSelf) = strongSelf;\n    ^{\n        __strong strongstrongSelf typeof(weakweakSelf) = weakweakSelf;\n        if (!strongstrongSelf) return;\n    }\n}\nAnd code become more massive when you have multiple level of weak-strong dance (you have to naming it into sself, ssself, sssself...)\nSince we have private headers, I think it's better to cleanup and manage these code later.\nWe can use the same way of other open source framework like CocoaLumberjack, by using the small part of https://github.com/jspahrsummers/libextobjc about @weakify, @strongify (those macro is short and can been copied into the private headers or prefix header)\nobjc\n@weakfify(self)\n^{\n    @strongify(self);\n    if (!self) return;\n    @weakify(self);\n    ^{\n        @strongify(self)\n        if (!self) return;\n    }\n}\nThe macro is simple and can avoid the sself, ssself, sssself to mass up our eyes... \ud83d\ude13\n\nThis is a good idea.. @Insofan Go for it if you can help us to do code clean.. @dreampiggy @kinarob Prefetch url count is insufficient , put prefetch code at last, test code as below:\nI may busy now, if you guys still think not have any issue, I'll explain tonight maybe.\n```\n        self.objects = [NSMutableArray arrayWithObjects:\n                    @\"http://www.httpwatch.com/httpgallery/authentication/authenticatedimage/default.aspx?0.35786508303135633\",     // requires HTTP auth, used to demo the NTLM auth\n                    @\"http://assets.sbnation.com/assets/2512203/dogflops.gif\",\n                    @\"https://raw.githubusercontent.com/liyong03/YLGIFImage/master/YLGIFImageDemo/YLGIFImageDemo/joy.gif\",\n                    @\"http://apng.onevcat.com/assets/elephant.png\",\n                    @\"http://www.ioncannon.net/wp-content/uploads/2011/06/test2.webp\",\n                    @\"http://www.ioncannon.net/wp-content/uploads/2011/06/test9.webp\",\n                    @\"http://littlesvr.ca/apng/images/SteamEngine.webp\",\n                    @\"http://littlesvr.ca/apng/images/world-cup-2014-42.webp\",\n                    @\"https://isparta.github.io/compare-webp/image/gif_webp/webp/2.webp\",\n                    @\"https://nokiatech.github.io/heif/content/images/ski_jump_1440x960.heic\",\n                    @\"https://nr-platform.s3.amazonaws.com/uploads/platform/published_extension/branding_icon/275/AmazonS3.png\",\n                    @\"http://via.placeholder.com/200x200.jpg\",\n                    nil];\n    for (int i=0; i<100; i++) {\n        [self.objects addObject:[NSString stringWithFormat:@\"https://s3.amazonaws.com/fast-image-cache/demo-images/FICDDemoImage%03d.jpg\", i]];\n    }\n    NSMutableArray *urls = [NSMutableArray arrayWithCapacity:self.objects.count];\n    for (NSString *url in self.objects) {\n        [urls addObject:[NSURL URLWithString:url]];\n    }\n    [[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:urls];\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n       [[SDWebImagePrefetcher sharedImagePrefetcher] cancelPrefetching];\n    });\n\n```. Even if completed block always be called, it also has another issues, like can't do real cancel.\n@dreampiggy combinedOperation is local variable, prefetchOperation not retain it. Because it's async block, so combinedOperation retain the prefetchOperation, if combinedOperation not finished, prefetchOperation should not released, combinedOperation needs to notify it to finish. If combinedOperation finished, it mark prefetchOperation to finish, and combinedOperation would released. I don't find any issue about that.. @dreampiggy \ud83e\udd14 Sorry, I know the compiler something like you said, but in this case, what's the issue have you worried about? If current queue is main queue, dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL) returns the same pointer with dispatch_queue_get_label(dispatch_get_main_queue()).\nYou mean maybe user create a queue with label the same as main queue?. @dreampiggy First of all, I can push a new commit to use strcmp, strcmp need to compare \n at least 10 characters for most of the cases because of com.apple.* label name. \nSecondly, I just wonder to know what's the issue you worried about.  The libdispatch is open source,please see.\nFrom the API, const char * dispatch_queue_get_label(dispatch_queue_t queue); return const char *, it's immutable, dispatch_queue_s struct has a member dq_label, see below, \n```\ndefine _OS_MPSC_QUEUE_FIELDS(ns, state_field) \\\nstruct dispatch_object_s *volatile ns##_items_head; \\\nDISPATCH_UNION_LE(uint64_t volatile __state_field__, \\\n        dispatch_lock __state_field__##_lock, \\\n        uint32_t __state_field__##_bits \\\n) DISPATCH_ATOMIC64_ALIGN; \\\n/* LP64 global queue cacheline boundary */ \\\nunsigned long ns##_serialnum; \\\nconst char *ns##_label; \\  // Here is the dq_label\nstruct dispatch_object_s *volatile ns##_items_tail; \\\ndispatch_priority_t ns##_priority; \\  \nint volatile ns##_sref_cnt\n\nendif\n```\nAnd please see the source code of dispatch_queue_create about how to handle the label.\nAbove all, I think you would think the worries that you have are unnecessary. \ud83d\ude02 \nconst char *\ndispatch_queue_get_label(dispatch_queue_t dq)\n{\n    if (slowpath(dq == DISPATCH_CURRENT_QUEUE_LABEL)) {\n        dq = _dispatch_get_current_queue();\n    }\n    return dq->dq_label ? dq->dq_label : \"\";\n}. @dreampiggy , I don't know wether we should reserve this check, SDImageLoader has only @required methods, but Xcode can also compile successfully even implement them, if we reserve, I think we should also do this check on canLoadWithURL.. \ud83e\udd14 Emm, namespacePrefix's attribute is copy, so it can handle NSString and NSMutableString correctly. What's your meaning about introduce a mutable NSMutableString? you mean somebody may subclass SDImageCacheConfig? or change the namespacePrefix property from NSString to NSMutableString? If it is, people should change the attribute of copy to strong and override its own copyWithZone, and then use mutableCopyWithZone I think. What do you think? \ud83d\ude02 . Emm, I think the potential issue is that set the _namespacePrefix = [NSMutableString ....] because of set the ivar directly, other words, in copyWithZone of SDImageCacheConfig.m, self.namespacePrefix = [NSMutableString ..] or self.namespacePrefix = another.namespacePrefix always works, which means self.namespacePrefix is always NSString.\nAnd a small performance if we do config.namespacePrefix = [self.namespacePrefix copyWithZone:zone] is we call copy two times, because namespacePrefix's attribute is copy, the code can translate into:\nconfig->_namespacePrefix = [ [self.namespacePrefix copyWithZone:zone] copy];\nBut, yep, it's ok if you think we can ignore these trivial effects.\nI can revert these changes this evening. \ud83d\ude02 . @dreampiggy , nope, let's assume all operations finished successfully, no operation error, the completion can execute multiple times, just like the demo above in my comments. . _totalCount only be set when initialize. After that, it only has read operation. So no thread related issue.. Let's only make the _finishedCount to compare with _totalCount. _skippedCount is not necessary IMO.. @dreampiggy Should I need to revert all these strings back?. @dreampiggy \ud83e\udd14 Yeah, I have no context about these atomic variable. I just see you always make _finishedCount +1 no matter error and compare using >=. . So the snippet code below is what you want? \ud83e\udd14 \n```\n            if (error) {\n                // Add last failed\n                atomic_fetch_add_explicit(&(token->_skippedCount), 1, memory_order_relaxed);\n            }\n            else {\n                atomic_fetch_add_explicit(&(token->_finishedCount), 1, memory_order_relaxed);\n            }\n        // Current operation finished\n        [sself callProgressBlockForToken:token imageURL:imageURL];\n\n        if (atomic_load_explicit(&(token->_finishedCount), memory_order_relaxed) + atomic_load_explicit(&(token->_skippedCount), memory_order_relaxed) == token->_totalCount) {\n            // All finished\n            if (!atomic_flag_test_and_set_explicit(&(token->_isAllFinished), memory_order_relaxed)) {\n                [sself callCompletionBlockForToken:token];\n                [sself removeRunningToken:token];\n            }\n        }\n\n. \ud83d\udc4d \ud83d\udcaf . @dreampiggy Maybe you misleading my description, please see [`Apple Documents`](https://developer.apple.com/documentation/foundation/nsdictionary/1410210-valueforkey)\n..\nFoundation`-[NSDictionary(NSKeyValueCoding) valueForKey:]:\n->  0x108165510 <+0>:   push   rbp\n    0x108165511 <+1>:   mov    rbp, rsp\n    0x108165514 <+4>:   push   r15\n    0x108165516 <+6>:   push   r14\n    0x108165518 <+8>:   push   rbx\n    0x108165519 <+9>:   sub    rsp, 0x18\n    0x10816551d <+13>:  mov    r15, rdx\n    0x108165520 <+16>:  mov    r14, rdi\n    0x108165523 <+19>:  mov    rsi, qword ptr [rip + 0x384cd6] ; \"length\"\n    0x10816552a <+26>:  mov    rdi, r15\n    0x10816552d <+29>:  call   qword ptr [rip + 0x2d72fd] ; (void )0x000000010876f980: objc_msgSend\n    0x108165533 <+35>:  mov    rbx, rax\n    0x108165536 <+38>:  test   rbx, rbx\n    0x108165539 <+41>:  je     0x1081655c1               ; <+177>\n    0x10816553f <+47>:  mov    rsi, qword ptr [rip + 0x384ff2] ; \"characterAtIndex:\"\n    0x108165546 <+54>:  xor    edx, edx\n    0x108165548 <+56>:  mov    rdi, r15\n    0x10816554b <+59>:  call   qword ptr [rip + 0x2d72df] ; (void )0x000000010876f980: objc_msgSend\n    0x108165551 <+65>:  movzx  eax, ax\n    0x108165554 <+68>:  cmp    eax, 0x40\n    0x108165557 <+71>:  jne    0x1081655c1               ; <+177>\n    0x108165559 <+73>:  dec    rbx\n    0x10816555c <+76>:  mov    rsi, qword ptr [rip + 0x38520d] ; \"_newSubstringWithRange:zone:\"\n    0x108165563 <+83>:  mov    edx, 0x1\n    0x108165568 <+88>:  xor    r8d, r8d\n    0x10816556b <+91>:  mov    rdi, r15\n    0x10816556e <+94>:  mov    rcx, rbx\n    0x108165571 <+97>:  call   qword ptr [rip + 0x2d72b9] ; (void )0x000000010876f980: objc_msgSend\n    0x108165577 <+103>: mov    rbx, rax\n    0x10816557a <+106>: test   rbx, rbx\n    0x10816557d <+109>: je     0x1081655c1               ; <+177>\n    0x10816557f <+111>: lea    rdi, [rbp - 0x28]\n    0x108165583 <+115>: mov    qword ptr [rdi], r14\n    0x108165586 <+118>: mov    rax, qword ptr [rip + 0x38eafb] ; (void )0x000000010938b288: NSDictionary\n    0x10816558d <+125>: mov    qword ptr [rdi + 0x8], rax\n    0x108165591 <+129>: mov    rsi, qword ptr [rip + 0x386628] ; \"valueForKey:\"\n    0x108165598 <+136>: mov    rdx, rbx\n    0x10816559b <+139>: call   0x1083a81dc               ; symbol stub for: objc_msgSendSuper2\n    0x1081655a0 <+144>: mov    r14, rax\n    0x1081655a3 <+147>: mov    rsi, qword ptr [rip + 0x3849f6] ; \"release\"\n    0x1081655aa <+154>: mov    rdi, rbx\n    0x1081655ad <+157>: call   qword ptr [rip + 0x2d727d] ; (void )0x000000010876f980: objc_msgSend\n    0x1081655b3 <+163>: mov    rax, r14\n    0x1081655b6 <+166>: add    rsp, 0x18\n    0x1081655ba <+170>: pop    rbx\n    0x1081655bb <+171>: pop    r14\n    0x1081655bd <+173>: pop    r15\n    0x1081655bf <+175>: pop    rbp\n    0x1081655c0 <+176>: ret  \n    0x1081655c1 <+177>: mov    rsi, qword ptr [rip + 0x384b10] ; \"objectForKey:\"\n    0x1081655c8 <+184>: mov    rdi, r14\n    0x1081655cb <+187>: mov    rdx, r15\n    0x1081655ce <+190>: add    rsp, 0x18\n    0x1081655d2 <+194>: pop    rbx\n    0x1081655d3 <+195>: pop    r14\n    0x1081655d5 <+197>: pop    r15\n    0x1081655d7 <+199>: pop    rbp\n    0x1081655d8 <+200>: jmp    qword ptr [rip + 0x2d7252] ; (void )0x000000010876f980: objc_msgSend\n``. @dreampiggy , theNSNullcheck is the bug fix (not realized that would returnNSNull), so I think the previous writer just don't want to create a new class,it's unnecessary, just only use theKVCof theNSArray/NSDictionary` can handle these things gracefully.. > Seems sometimes you're worrying too much about performance \ud83d\ude05\n@dreampiggy \ud83d\ude02 , yeah, maybe, in my opinion, we all need try my best to write more modular, efficiency and steady code, and keep a good coding style. Because there are huge iOS developers to use, at the same time, to learn. \nBack to these changes, every option when we access, we call valueForKey: two times, it's not necessary; and in our situations, valueForKey: actually call objectForKey: internally. So let's try to do the better ways. \ud83d\ude04 . NSString would be a good way to do this IMO.\ntypedef NSString *SDImageFormat NS_TYPED_EXTENSIBLE_ENUM;\nextern SDImageFormat const SDImageFormatUndefined;\nextern SDImageFormat const SDImageFormatJPEG;. Yeah, we already stepped here, if it needs much works, keep the integer is acceptable.\nSmall suggestion, can we make some indentations when initialize? just like below, it looks more comfortable IMO. \ud83d\ude02\n\n. Coding style and don't need to check nil in all the changes I make, I definitely sure they are not nil.\nThe code which has possible be nil, I still keep the setValue:forKey, like these.. @dreampiggy It's the same, just look more beautiful IMO. \ud83d\ude02 \n\n. Small suggestion, change FLAnimatedImage framework contains a bug that cause GIF been rotated if previous rendered image orientation is not Up\nto \nFLAnimatedImage framework would cause UIImageView to use previous image orientation. Because image orientation is not only rotated, maybe mirrored or something?. @dreampiggy \ud83d\udc4c I just think it's trivial, so I do not create a separate PR. I'll be careful next time. \ud83d\ude02 . @dreampiggy emm, I know you opinion, so I put the reasons in here. I can explain my thoughts further.\nWhy I put the default cache path in SDImageCache is we generate the default cache path in SDImageCache, right? Let's see how we generate in SDImageCache:\n```\n// class of SDImageCache\n- (instancetype)init {\n    return [self initWithNamespace:@\"default\"];\n}\n- (nonnull instancetype)initWithNamespace:(nonnull NSString )ns {\n    NSString path = [self makeDiskCachePath:ns]; // first component disk cache path \n    return [self initWithNamespace:ns diskCacheDirectory:path];\n}\n- (nonnull instancetype)initWithNamespace:(nonnull NSString )ns\n                       diskCacheDirectory:(nonnull NSString )directory\n                                   config:(nullable SDImageCacheConfig )config {\n    if ((self = [super init])) {\n        NSString namespacePrefix = config.namespacePrefix;\n        if (!namespacePrefix) {\n            namespacePrefix = @\"\";\n        }\n        NSString *fullNamespace = [namespacePrefix stringByAppendingString:ns]; \n    // Init the disk cache\n    if (directory != nil) {\n        _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];\n    } else {\n        NSString *path = [self makeDiskCachePath:ns];\n        _diskCachePath = path;\n    }\nreturn self;\n\n}\n```\nWe combine many components to generate default cache disk path. The SDDiskCache is just a class that do disk operations, like access, delete, move, right? other words, it doesn't need to know what's the disk path it is, its only job is do disk operation, I think compare old and new disk path is not what it should do. If you still think we should put all these things to SDDiskCache, should we need to hard code the default path? or extract the methods of default cache path related methods into a single class to let both SDImageCache and SDDiskCache access it?. @dreampiggy Any consideration about this PR?. @dreampiggy I updated the PR I make. The good thing is we reached the decision for the most of the code. The only difference is wether we should make this method public. \nIf you decide to make it public and make it for common use, I think maybe can make some changes:\n1. What if dstPath not exist, and dstPath has non-existent parent directories, your code can't handle correctly.\n2. If dstPath is not a directory but exist, should we need to delete the file directly? maybe it needs to think a bit more.\n3.  For the merge operation, what if the dstFile exist? for the current code, it would raise the error and skip this movement of file, it's the user want? Can we provide overwrite operation?\n4. Should we need to provide any feedback, like move successful or error parameter to the user?\n5. The movement operation maybe not related with the SDDiskCahce, it only use filemanager of SDDiskCache, I think it maybe more suitable for NSFileManager category.\nOtherwise, if you think we can make it private, I think my PR can handle very well, we only handle our own default cache migration.\nAt last, it's up to you to make the decision, I'm ok for these two PRs.. Nice catch.. @bpoplauschi \ud83e\udd14 Maybe I think it's no issues, and we also use this way in code, please see code, secondly, SDWebImageDownloadToken and DownloaderOperation is 1-to-1, the token only interested in corresponding downloaderOperation. In my way, we still has filter, but we put this filter in NSNotificationCenter.\nBut anyway, if you guys think we don't need to do this, I can close it. \ud83d\ude02 . If anyone wants to get all SDWebImageDownloadReceiveResponseNotification, he can just set setDownloadOperation to nil, everything works fine.. \ud83d\udc4c Waiting for other guys's opinion. TBO, downloadOperation property is defined in internal, and also do once when created, please see code.. @dreampiggy \n1. We can't just use move operation, like my comment, if dstPath's parent directory don't exist, it would not do success.\n3. When merge exist, except not writable, if dstPath directory has exist the same name file which also exist in oldPath, error would raise.\nYeah, it's also what I wanted, it's not a common use method, only used in cache migration for ourself.. > What if the weak object during addObserver:selector:name:object:] is alive, but when later a notification is triggered and the weak object is already dealloced (Like KVO, which will crash for this case) ?\n@dreampiggy No notification would be post, NSNotificationCenter would not retain observer and object, why we should remove observer before is Apple keep the observer as unsafe_unretaind, not weak (weak is introduced in ARC), after iOS9, we don't need to remove observer in code anymore.\nAnd for your consideration, let's assume object is weak, after added observer, it becomes nil, that is the object dealloc, other words, sender is gone, no notification would post again.\n . > And. Since you say also do once when created. What about to just create a init method like this, to init the download operation once and does not change it ?\n@dreampiggy , I updated the commit, remove the setter of downloadOperation, please see the code.. @dreampiggy Yeah, just like my comments above, you can simply assume NSNotificationCenter has a map, the key is the address of object, it acts as a route key, only sender's key match this key, dispatch would be happen.. And apart from internal implementation, let's just see Apple's doc:\n\nanObject\nThe object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer.\nIf you pass nil, the notification center doesn\u2019t use a notification\u2019s sender to decide whether to deliver it to the observer.. @dreampiggy Interesting, I remember if I mark init method NS_UNAVAILABLE , no warning would occur previously, maybe apple framework update the interface. \ud83d\ude02 \n\n```\n- (instancetype)init\nif NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER\nNS_DESIGNATED_INITIALIZER\n\nendif\n``.NSTimeIntervalis typedef ofdouble, but let's replace todouble`. Because its semantic maybe not we want. \n\nNSTimeInterval is always specified in seconds; it yields sub-millisecond precision over a range of 10,000 years.. Why we need to change this to getter? I think we should always keep ivar in init method? \ud83e\udd14 . @dreampiggy Emm, yeah, I remember we should try not use getter or setter in property's getter or setter method(prevent recursive dead lock). And also in init method, one reason is getter or setter can support KVO, so in init method, we just should use ivar. \ud83d\ude02 . It may not any issue, but let's keep the recommended way?. Just a small suggestion, can you add the parenthesis at currentProgress - previousProgress? just like !downloadFinished && (currentProgress - previousProgress) < self.minimumProgressInterval. Maybe it's more readable.. We don't need do this, downloadFinished is always copy in block, that is, !downloadFinished is always true.. @dreampiggy I mean we just need to keep if (finished) \ud83d\ude02 .Let's assume downloadFinished is YES, when in block, finished is YES, right? so this condition, it would do image decode. It's what we want? I think we should also cancel it.. @dreampiggy Emm, if finished == YES, we will directly decode in - URLSession:task:didCompleteWithError:, we got all image data right? maybe progressive decode is unnecessary.. @dreampiggy \ud83d\udc4c I get your point, and you are more familiar than me in image format, as a layman, I just think if we already get all the data, why we still should do progressive data, I think we should only decode it in - URLSession:task:didCompleteWithError:. Let's wait other guys to review, I need to learn some image format firstly. \ud83d\ude02 . @dreampiggy Good catch, seems we have two choices:\n1. Like you said, use LOCK to prevent race condition. Besides imageData, I think we also need let self.receivedSize safe, because we set in URLSession delegate but read in coderQueue.\n2. Other is make all related variables to point to local variables, that is, put imageData copy in NSURLSession delegate method, and change self.receivedSize in coderQueue point to local variable, e.x. \n\n```\n        // Get the image data\n        NSData *imageData = [self.imageData copy];\n        NSUInteger receivedSize = self.receivedSize;\n    // progressive decode the image in coder queue\n    dispatch_async(self.coderQueue, ^{\n        BOOL finished = (receivedSize >= self.expectedSize);\n\n.......\n         }\n``. For option one, we try to decrease progressive decode; For option two, we try to keep decode times sync withprogresscallback times.. @bpoplauschi Please see #2432 , we would fix this in thatPR. \ud83d\ude02 . @dreampiggy Agree. .noOf..? MaybenumOfwould be better \ud83e\udd14 . CallcompletionBlockindispatch_main_async_safe.. It's trivial, but move it out ofenumeratewould be better. No need to createwself` each enumeration.. Let's put these two if check into one statement? . @dreampiggy Good catch. \ud83d\udc4d \n\nRemove unnecessary dispatch_group_enter/leave pair, only apply to GIF data.. This is wrong. Because we always call dispatch_group_enter before setImage, for example, the placeholderImage. If the user provide a placeholderImage with GIF (Bind it one FLAnimatedImage), this change will cause a un-balanced of group enter && leave. So we must always call dispatch_group_leave in the setImageBlock.\n\nI updated the code, I added a parameter isPlaceholder in setImage block, and I think we need a detailed discussion, the reason I add this parameter is we should know wether it's placeholder of not, e.x. for your comment above, if we have a placeholder image, it's GIF, and not have associatedAnimatedImage, that is, placeholder would go to Step 3, then we search the disk data by url, let's assume it exist, then we use this image data to create FLAnimatedImage, and set to ImageView. You can see, this would leads to FLAnimatedImage assign twice, one is in placeholder phase, second is when we complete load image in loadImageWithURL:.....\n// Hack, mark we need should use dispatch group notify for completedBlock\n                            objc_setAssociatedObject(group, &SDWebImageInternalSetImageGroupKey, @(YES), OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n                            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n                                // Step 3. Check if data exist or query disk cache\n                                __block NSData *gifData = imageData;\n                                if (!gifData) {\n                                    NSString *key = [[SDWebImageManager sharedManager] cacheKeyForURL:url];\n                                    gifData = [[SDImageCache sharedImageCache] diskImageDataForKey:key];\n. @dreampiggy BOOL isGIF = (image.sd_imageFormat == SDImageFormatGIF || [NSData sd_imageFormatForImageData:imageData] == SDImageFormatGIF); , placeholder is just a image created using animatedImageWithImages.. @dreampiggy Emm, TBO, I don't know why you think I think too much. It's definitely a bug, not about performance. This case is based on your assumption.\nAnd please don't judge any person easily. Maybe you say Oh maybe we have a better solution to solve this issue, or maybe this bug is trivial, it's ok to leave it temporary. is better. . Is this is a rare case? I have a animated placeholder not use FLAnimatedImage, and the image data I request is cached in disk.. @dreampiggy Please see where we set animatedImage.sd_imageFormat = SDImageFormatGIF; in the code.\n// SDWebImageGIFCoder.m\n        animatedImage = [SDWebImageCoderHelper animatedImageWithFrames:frames];\n        animatedImage.sd_imageLoopCount = loopCount;\n        animatedImage.sd_imageFormat = SDImageFormatGIF;\nIf you still not get what I want to say. Your PR #2393 \n\nFor example, when the normal UIImageView query one GIF url, it does not create and bind a FLAnimatedImage instance. so that when another FLAnimatedImageView which query the same url, will not get a FLAnimatedImage associated image. And then it does not show animation. \n\nNow I think you know we can have a placeholder image, animatedImage.sd_imageFormat == SDImageFormatGIF but not have associatedAnimatedImage. Yes, as you said, this situation, imageData is always nil, so it would query the disk by url request, then the bug produce.. > ....emmm, I still can not get the point, how will this \"placeholder image is GIF, but it does not contains an associated FLAnimagedImage\" happens ? The placeholder is provided by user, but not anything that from our decoder\ncase one, from bundle:\nNSURL *url = [[NSBundle mainBundle] URLForResource:@\"loading\" withExtension:@\"gif\"];\n    NSData *data = [NSData dataWithContentsOfFile:url];\n    UIImage *image = [UIImage sd_animatedGIFWithData:data];\ncase two, from server:\n1. Use SDWebImageDownloader.\n2. Get image from UIImageView+WebCache method.\n3. .......\n\nI can figure one point: There is no difference for a image to set, during setImageBlock. It should never consider what the image is from, but only the image to be set. The placeholder process should always be equal to the final image, or some of feature basic assumtation are broken. For example, cell reusing (rely image to be refrshed multiple times during same runloop), view transition (rely previous placeholder and current image to be set differently)\n\nMost cases, it's true, I never say we should always figure out it's placeholder or not, because for static image, setImage would not consider any about this. I just provide a new API that user can get the current image wether or not is placeholder when setImage. This case is used case like GIF, the bug I already comment there.. Another option can temporary fix his issue, if we don't want to add placeholder parameter, remove image.sd_imageFormat == SDImageFormatGIF in BOOL isGIF = (image.sd_imageFormat == SDImageFormatGIF || [NSData sd_imageFormatForImageData:imageData] == SDImageFormatGIF);, only we have imageData, we can go on.. > if we remove that query disk cache behavior, so this problem solved, because placeholder does not contains imageData\nNope, one bug produce another bug, two situations can make imageData is nil, one is set placeholder, another is memory cache hit. If we set sd_cacheFLAnimatedImage of FLAnimatedImageView to NO, next time when we load FLAnimatedImage, e.x. cell reuse, memory cache would hit, because we store the UIImage in the memory cache, but not have imageData, so FLAnimatedImage would invalid. The image becomes static image.\nSo IMO we should definitely add some args in setImage block, two args currently we have can not satisfy needs.\nSo let's talk about which args we can add. I'll handle these things carefully .\n@dreampiggy @bpoplauschi @mythodeia . Emm, if range.location is valid, that is not NSNotFound, range.length always equal to previousData.length because of NSDataSearchAnchored and range.location == 0.. \n. Apple documents said:\n\nAn NSRange structure giving the location and length of dataToFind. Yes, we can assume it works like this, I think the reason why returned NSRange here is many APIs use NSRange to do the job, it's just for facility IMO \ud83e\udd14 .\n\nYeah, it's trivial, I can revert this change, and in consideration of code readable, I think maybe change range.location == 0 && range.length == previousData.length to range.location != NSNotFound is more readable? because we call rangeOfData and pass NSDataSearchAnchored, that is to say, matching dataToFind from beginning. So if we get NSNotFound, it's meaning not found. @dreampiggy what's your opinion, I'm ok for all these.. @dreampiggy \ud83d\udc4c According to the document, and also under some tests to ensure the correctness, it's ok and works fine.. @dreampiggy Emm, this maybe also needed, cacheData maybe has big size and it's autorelease object. So release timely is also useful IMO.. Agree with @dreampiggy . SDWebImageMapKit maybe better IMO.. These things also apply to PRs? maybe important label is not sufficient for exempt labels,  how about crash\u3001OOM\u3001discussion\u3001feature?. If we also want to apply to PR, markComment section should adjust a bit? seems it says only Issue, not PR.\nWe can see Issues currently opened, some are labeled crash, OOM, seems cannot fix ASAP. So for these situations, seems we need to also add important label as well.. We can, see stale.. @dreampiggy reset method can be called concurrently, for dataTask, read operation like https://github.com/SDWebImage/SDWebImage/blob/e79f35f0849755d3d2db8e4429f955f027ed2c69/SDWebImage/SDWebImageDownloaderOperation.m#L227-L228, set operation like https://github.com/SDWebImage/SDWebImage/blob/e79f35f0849755d3d2db8e4429f955f027ed2c69/SDWebImage/SDWebImageDownloaderOperation.m#L255\nhttps://github.com/SDWebImage/SDWebImage/blob/e79f35f0849755d3d2db8e4429f955f027ed2c69/SDWebImage/SDWebImageDownloaderOperation.m#L403\nSo we can't guarantee dataTask would not be nil when executing [self.dataTask cancel].. No, operation queue remove operation only if it's not started, that is executing is NO. session delegate queue, coder queue, both can call done method, and any other thread can be called when user call cancel. Think about thread context switch and parallel, concurrency, I don't know what you said no chance.. User call cancel and url session queue call done can enter reset method concurrently, right? If it is, can concurrently execute code below, right ? \n```\n    self.dataTask = nil;\nif (self.ownedSession) {\n    [self.ownedSession invalidateAndCancel];\n    self.ownedSession = nil;\n}\n\n. Small suggests, remove these code,`SDGraphicsBeginImageContext` just call `SDGraphicsBeginImageContextWithOptions` directly. And seems bug comes from #2523 ? from the description of `PR`, I can't see any information about this added method, and @bpoplauschi may think `PR` only for exposure \ud83d\ude02 , we'd better list everything we changed in laters.. Emm, I mean change\nvoid SDGraphicsBeginImageContext(CGSize size) {\nif SD_UIKIT || SD_WATCH\nUIGraphicsBeginImageContext(size);\n\nelse\nSDGraphicsBeginImageContextWithOptions(size, NO, 1.0);\n\nendif\n}\nto\nvoid SDGraphicsBeginImageContext(CGSize size) {\n    SDGraphicsBeginImageContextWithOptions(size, NO, 1.0);\n}\n``. Emm, you meanApplemay change the default value ofopaqueandscale factor? \ud83e\udd14 Trust me, they would not, it would mess theUI. My suggestion is only for reference, my opinion is reduce redundant code and keep the wayAppledoes.. @bpoplauschi Sure.. @kinarob TBO, I overlooked this line, and thinksetObject:forKey:may crash whenoperationis nil. So now the only difference is wether we just always cancel previous operation evenoperationisnil, IMO, nil key and nil operation both are invalid value, if user wants to cancel, he should callsd_cancelImageLoadOperationWithKey:.. Emm, it's a bug fix typically, because we can't hard code the operation key as the current operation key. Think aboutUIButton, it not use [self class]to load image at all.. \ud83d\udc4d Yes, I'll update. I didn't switch from other languages in time.. What's the reason for moving this line?. How many users is using5.xbeta? this change the behavior for5.xbeta which already released previously. If many people already used it, the migrate operation also need to contain5.x betato this new directory..SDMemoryCachecan be used as a separate module, so what ifimageinitialized withCIImage?. This is the start of wrong way. \n* By addingif...else....to judge. From the decoupling and independence of modules,SDMemoryCacheshould not know whatSDAnimatedImageis. In other words, what if user define a subclassUserCustomImageofUIImageand has property occupy large memory? add anotherifstatement to judge? And forFLAnimatedImage, we set it as an associate object toUIImage, so we also need to add aifstatement? this is much likeSVN, server controls many things. \n* We add a property ofanimatedImageMemoryCostforSDAnimatedImage, by that analogy, we also need add another property to return memory cost if user define a customUIImagewhich can't use default implementation?\n*SDMemoryCachestoresUIImageinstance, the cost is the memory cost ofUIImageinstance, and we can't only take rendering bytes into account, for example,SDAnimatedImagehas acoderproperty, is retains the data ofGIF` image. \nSDMemoryCache stores UIImage, so I like my category implementation,  SDMemoryCache only need to call sd_memoryCost of any UIImage, and any UIImage can override getter method or just call setter to return memory cost.. No, what I mentioned is not API breaking, like change API or delete API, it's the changes of internal cache directory. I don't find CocoaPods statistics, see the Carthage statistics, 4.48% users choose 5.x, we need responsible for them, they already do directory transfer from 4.x. After this change, it would leads images lost and wasted disk space. . sd_memoryCost would not equal to 0, as long as any UIImage is a valid image. We don't need to care any transformed image or any thing , we only need to get the memory cost before image be stored into cache, we need cached images's memory cost.\n- (NSUInteger)sd_memoryCost {\n     NSNumber *memoryCost = objc_getAssociatedObject(self, _cmd);\n     if (memoryCost == nil) { // calculate default memory cost\n         memoryCost = @(SDCacheCostForImage(self));\n     }\n     return [memoryCost unsignedIntegerValue];\n }. Based on your example: \n```\nBut if we use subclass and protocol, we can add a check. It's good to see this code inside your image process code.\nif ([image confromToProtocol:@protocol(SDAnimatedImage)]) {\n    // ....\n}\n```\nI just need to call image.sd_memoryCost, don't need to check anything.. ? It's easy to fix, check 5.x released beta directory wether existed, if exist, 4.x's directory already transferred, so oldDefaultPath is 5.x released beta directory. If 5.x released beta directory not exist, the oldDefaultPath is 4.x directory.. @skyline75489 TBO, I'm ok if you guys think user need to get punishment when he use beta \ud83d\ude02 . NIT, I suppose give some hints that tell user we change the directory again.. @dreampiggy I'm not found any other issue except this transfer. I think We can merge if you guys think it's acceptable.\n@skyline75489 I used the emoji after I said \"punishment\", means it's just a joke. \ud83d\ude22 . suggestion\nAnd, if you're previously using any version from `5.0.0-beta` to `5.0.0-beta3`, please note that the cache folder has been temporarily moved to `~/Library/Caches/default/com.hackemist.SDImageCache.default/`, however, the final release version of 5.0.0 use the path above. If you upgrade from those beta version, you may need manually do migration, check `+[SDDiskCache moveCacheDirectoryFromPath:toPath:]` for detail information.. @dreampiggy \ud83d\udc4c We give the reminder in the docs, it may acceptable.. suggestion\nHowever, if you have some other custom namespace cache instance, you should try to do migration by yourself. But typically, since the cache is designed to be invalid at any time, you'd better not to bind some important logic related on that cache path changes.. If edge case hit, only mark background task id to end is not sufficient, we also need to clean up wasteful things, like cancel the networking or something, they don't need to do anymore.\nFor other normal cases, call cancel would return early because finished is YES.. Emm, if operation queue exist, edge case would not be hit. But anyway, it's acceptable not to consider the edge case you post, I think it's only has theoretical possibility. I'll remove this edge case check.. @dreampiggy I overlooked one line, so the crash issue I think is not exist. Please see my comment,  if it's unnecessary, we can only fix the typo.. I agree to rename some properties. I suggest some name to discussion.\nSee NSURLCache, it uses diskCapacity, the term size may more suitable to express two or three dimension.\ntotalDiskCount, TBO, if I don't see comment, I can't ensure what it means, because I don't know diskCount. The property means total images count on disk, countOfImagesOnDisk, just for discussion.. This property mean staleness interval. It express the difference value of expiration date, age means an absolute value. diskStalenessInterval for discussion.\nSee stalenessInterval of NSManagedObjectContext.. Emm, we don't need do this check for all operations, only for operation already in operationQueue and isReady.. Don't be too subjective. If we provide setter method which users can update cost, this method is needed, because update cost needs at least three steps, verify wether image in cache, if it exist, remove it and reinsert it. We need to encapsulate these things.. Emm, we can't use cleanup attribute in here.. Attention! please don't do this things in a refactor PR. This break the processing logical. I'll revert this.. @dreampiggy Because we can reuse the state of operation, operation has 5 states, nil\u3001ready not start\u3001executing\u3001finished\u3001cancelled, we already check three states at here or see #2574 , and for most situations, operation would hit these three states, so we only need to add isExecuting check, if it not executing, means it just ready to run, we can update the priority. \nFor your PR #2562 , you always do the check for every operation, it's redundancy, because for new created operation, we don't need to do it. And we also need to update NSOperationQueuePriorityNormal priority to keep the principle that we always apply the latest priority.. @dreampiggy So our semantic is the same as max-stale, right? max-age is not what we want to express. You can see the difference of max-stale and max-age. \nI don't think stale is quite difficult to understand, we can see apple use this, react native use this, and I don't mean stale is the best, we can have a discussion, maybe maxAgeOnDisk is more better than maxDiskAge IMO. And @dreampiggy if you responsible for do these rename things, I suggest you to list some alternatives from some popular frameworks, like NSURLCache, YYCache,FastImageCache\uff0cAFCache...... @dreampiggy Seems you really love YY* \ud83d\ude02 , it's good but not the best, right? because there is no one framework which is perfect IMO, Apple already told us how to name, it provides NSURLCache, you can check it and also I suggest you to investigate other popular frameworks.. @dreampiggy See #2580 , I don't merge it directly because I think every PR needs review.\nAnd for this PR, first, this change break the original processing logical, other words, this PR is not only do refactor. And aside this, I don't think we should do this check.. Where is the performance penalty? only because I put it in a lock? if you worry about it, profile it to show the statistics please.\nPS. Besides code place, your PR also has bug, see comment. Emm it may very hard to talk, I say it has 5 states, I don't say at some code line, it would not be nil.\nIf you should put only thread-safe operation in synchronization, the below code only createDownloaderOperationWithUrl and [self.URLOperations setObject:operation forKey:url]; should put in synchronize lock. other line need put outside. That dose not need synchronized.\nhttps://github.com/SDWebImage/SDWebImage/blob/8a743950e26af56f13c7662b0b6a68f19385c136/SDWebImage/SDWebImageDownloader.m#L294-L308\nI don't understand why this is unrelated code, it's the initialize operation.\nIn here , you only consider performance issue, here, you say you only consider the design issue. \ud83d\ude02 . @dreampiggy createDownloaderOperationWithUrl:options: has the same code, check it.. Satisfy Create Rule may better.. chunk_iter needs to do a free operation refer to the WebP framework, this may not cause issue for currently used WebP version, but it's a potential memory leaks place. I'll try to fix.. > // Marks functions which return a CF type that needs to be released by the caller but whose names are not consistent with CoreFoundation naming rules. The recommended fix to this is to rename the functions, but this macro can be used to let the clang static analyzer know of any exceptions that cannot be fixed.\nEmm, Objective-C or C are both ok, what I want to change actually is make function name satisfy CoreFoundation naming rules, it's what Apple recommend and I think it may more better expression~. Emm, I like C for Core Foundation APIs, we can add some macros like Apple's Core Foundation API, the usage is the same IMO.\nFor this PR, the naming is very very trivial, let's fix the problem and do some optimize. I'll revert the name.. I disagree, add flags check is the more correct (Always do flags check before get bytes) and optimized way, always call sd_colorSpaceWithDemuxer:demuxer would iterate all WebP chunks and do compare, that's waste time.. This is to prevent IIC Profile data arise error.. @dreampiggy Hey, this is just an internal helper method, can we not argue on this? we can skip call this method in advance directly if flags not hit ICCP_FLAG.. ... 5.x SDWebImage already moved out WebP, no merge operation we can do , you can do anything in SDWebImageWebPCoder project. Anyway, to save time, I'll update as you like.. @kinarob Emm, It's ok, if result not success, means chunk_iter failed, don't need to release~.. Emm, this PR has merged, if we make it as an internal method, we don't need to add this imageURL, may not have any benefit.. We need fix this in #2606 . If scaled down, the logical cannot reuse. May fixed in #2607.. @dreampiggy I need to confirm, what's the time of reduce theApp process memory usagefrom Xcode you mean? I think you mean the time is when image will show on screen? Actually, we do two decompress, one is WebP data to RGB, another is to decompress by call decompressedImageWithImage.. Emm, this is the common sense. You don't get what I mean. Please  check sd_rawWebpImageWithData  again. . We just make the decompression in advance. And we may decompress twice, this is what I want to express.. @kinarob Thanks, I already forgot we have progressive load.. Previously, I think maybe we can call done method directly, but I don't ensure wether it would leads some issues when invalidateAndCancel ownedSession in session delegate method.. We can also reuse self.imageData directly, not to copy the data, but I don't like it, I want to keep data parameter immutable.. ... We can't do this IMO, it typically indicates no constrain about the version of libwebp. What if libwebp changed  APIs in the future? we'll need to fix.. I don't think CGImageCreate don't support Monochrome, two reasons leads created failed, one is we passed wrong bitsPerPixel, Monochrome has only one component, you can try CGImageRef imageRef = CGImageCreate(width, height, 8, 8, config.output.u.RGBA.stride, colorSpaceRef, bitmapInfo, provider, NULL, NO, renderingIntent); , at least, image can show proportional. Other reason, it's also why it's show proportional is we already decode it to RGB data.\n\n. @dreampiggy ...Emm, maybe you don't get what I want to say \ud83d\ude02 , I only want to explain why CGImageCreate failed, there have two reasons. So the comments in this PR is wrong, I made a PR #2629  to update.. We assume Google not do evil things, libwebp only may changes API in 2.x, then 4.x would break, and users issue to us, we tell them how to fix them, list the libwebp version explicity or upgrade to 5.x, TBO, this is not good, from the view of project management, we need to prevent these things, in theory, my PR #2628 also needs to discuss, should we really trust libwebp would not happen very bad things like regressions until 2.0?. @dreampiggy Good for fix! Can we use stringWithFormat to replace these stringByAppendingString? seems long statement.. I remember @bpoplauschi said private header may has issues?. @dreampiggy Any reason to create this new class? . Emm, I'm not oppose using private_header_files, I just mean @bpoplauschi said before, private_header_files may have issues(I don't know the reason), actually, I communicated one team of facebook before, the guys said in facebook they don't permit to use build tools like CocoaPods, they use buck, all open source from facebook have two version, OSS for open, and another for internal, something like below:\n\n. Yes, only coding style, stringByAppendingString looks very long, and we have three in one statement. \ud83d\ude02 . @bpoplauschi \ud83d\ude02 no matter, let's try it. \u2764\ufe0f \n@dreampiggy Emm, seems you mess up Xcode and build tools, it's ok, let's try, I'm not opposed.. @dreampiggy @kinarob This feature has severe bugs, would leads operation queue hung up. I'll fix them.. Oh, I see, I can consolidate them.. ... What's your mean? Is this cause issue?. @dreampiggy Another potential issue is here, loadImageWithURL's return type marked nullable, I checked the code, currently it would not return nil, but let's assume it would return nil some day in the future, if this situation exist, we need to do some additional processes.\n- (nullable SDWebImageCombinedOperation *)loadImageWithURL:(nullable NSURL *)url\n                                                   options:(SDWebImageOptions)options\n                                                  progress:(nullable SDImageLoaderProgressBlock)progressBlock\n                                                 completed:(nonnull SDInternalCompletionBlock)completedBlock;. ",
    "jasonlagaac": "I can't seem to use that work around as I'm looking to use SDImageCache to cache images to disk.\n. #833 was correct. Thank you @bpoplauschi\n. ",
    "pwndhwn": "Watch this tutorial , it will surely help you to understand the problem\nhttps://youtu.be/d8l2iBaPXd4\n. ",
    "TaoXiaoSeng": "OK, just like i thought before\n. well, i just want to find a perfect way to asynchronous/synchronous cancel a request safely\uff0c which could control the callback not be called again after i invoke the cancel interfaces. i'm interest in this question.~~ Thanks for your reply!\n. ",
    "god-long": "OK.\n. delete SDWebImage  and  again add SDWebImage;\n. ",
    "frowing": "I'm also getting that crash consistently on multiple simulators running iOS 7 and 7.1 with the latest version on master.\nTerminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[UIImageView sd_cancelImageLoadOperationWithKey:]: unrecognized selector sent to instance 0x11ca0e2e0'\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x0000000102267495 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x0000000101c7c99e objc_exception_throw + 43\n    2   CoreFoundation                      0x00000001022f865d -[NSObject(NSObject) doesNotRecognizeSelector:] + 205\n    3   CoreFoundation                      0x0000000102258d8d ___forwarding___ + 973\n    4   CoreFoundation                      0x0000000102258938 _CF_forwarding_prep_0 + 120\n    5   Instaround                          0x0000000100022d85 -[UIImageView(WebCache) sd_cancelCurrentImageLoad] + 53\n    6   Instaround                          0x00000001000203e4 -[UIImageView(WebCache) sd_setImageWithURL:placeholderImage:options:progress:completed:] + 228\n    7   Instaround                          0x0000000100022e83 -[UIImageView(WebCacheDeprecated) setImageWithURL:] + 115\n    8   Instaround                          0x000000010000c8b0 -[MainViewController mediaCollectionViewCellForIndexPath:] + 848\n    9   Instaround                          0x000000010000a383 -[MainViewController collectionView:cellForItemAtIndexPath:] + 131\n    10  UIKit                               0x0000000100da9cae -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:] + 264\n    11  UIKit                               0x0000000100dab30b -[UICollectionView _updateVisibleCellsNow:] + 3581\n    12  UIKit                               0x0000000100daeae1 -[UICollectionView layoutSubviews] + 243\n    13  UIKit                               0x0000000100889993 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 354\n    14  QuartzCore                          0x000000010334d802 -[CALayer layoutSublayers] + 151\n    15  QuartzCore                          0x0000000103342369 _ZN2CA5Layer16layout_if_neededEPNS_11TransactionE + 363\n    16  QuartzCore                          0x00000001033421ea _ZN2CA5Layer28layout_and_display_if_neededEPNS_11TransactionE + 24\n    17  QuartzCore                          0x00000001032b5fb8 _ZN2CA7Context18commit_transactionEPNS_11TransactionE + 252\n    18  QuartzCore                          0x00000001032b7030 _ZN2CA11Transaction6commitEv + 394\n    19  QuartzCore                          0x00000001032b769d _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv + 89\n    20  CoreFoundation                      0x0000000102232dc7 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23\n    21  CoreFoundation                      0x0000000102232d37 __CFRunLoopDoObservers + 391\n    22  CoreFoundation                      0x0000000102212522 __CFRunLoopRun + 946\n    23  CoreFoundation                      0x0000000102211d83 CFRunLoopRunSpecific + 467\n    24  GraphicsServices                    0x0000000103126f04 GSEventRunModal + 161\n    25  UIKit                               0x0000000100829e33 UIApplicationMain + 1010\n    26  Instaround                          0x0000000100011153 main + 115\n    27  libdyld.dylib                       0x0000000103c575fd start + 1\n    28  ???                                 0x0000000000000001 0x0 + 1\n)\n. ",
    "robinsenior": "I'm having the same issue, getting an unrecognized selector error:\n- thread #1: tid = 0x70b7, 0x02e7a960 CoreFoundation-[NSObject(NSObject) doesNotRecognizeSelector:], queue = 'com.apple.main-thread', stop reason = breakpoint 2.2\n  - frame #0: 0x02e7a960 CoreFoundation-[NSObject(NSObject) doesNotRecognizeSelector:]\n    frame #1: 0x02dc39c7 CoreFoundation**_forwarding**_ + 1047\n    frame #2: 0x02dc358e CoreFoundation__forwarding_prep_0___ + 14\n    frame #3: 0x0023aa68 theScore-[UIImageView(self=0x7f99aaf0, _cmd=0x0085ea61) sd_cancelCurrentImageLoad] + 56 at UIImageView+WebCache.m:123\n    frame #4: 0x000b16e3 theScore-[UIImageView(self=0x7f99aaf0, _cmd=0x0085ea13, url=0x00000000, placeholder=0x00000000, options=0, attemptRetina='\\x01', progressBlock=0x00000000, completedBlock=0x00000000) TS_setImageWithURL:placeholderImage:options:attemptRetina:progress:completed:] + 307 at UIImageView+TSSDWebCacheAdditions.m:56\n    frame #5: 0x000b0e34 theScore`-[UIImageView(self=0x7f99aaf0, _cmd=0x0085ac3c, url=0x00000000) TS_setImageWithURL:] + 148 at UIImageView+TSSDWebCacheAdditions.m:16\n...\n. Ah, found the solution here: https://github.com/rs/SDWebImage/issues/785\nAdd the missing files to your project.\n. ",
    "billyjr": "Adding missing file in #785 won't fix my problem.\nI am using\nUIButton sd_setImageWithURL:(NSURL *) forState:(UIControlState)\nand it crashed\n. Sorry for the late reply and yes, I fixed it with reinstalling\n. ",
    "glenwong": "I've run into this same issue. Thanks for posting the solution. I hope a fix can be added soon.\n. ",
    "johncch": "I encountered the same situation and did an investigation. The gist of it is that, at least in my case, the original URL presented a jpg and when we added masking to the transform, the image was saved back into jpg, thus discarding the alpha layer as a result of the mask. Observe in SDImageCache.m\n```\n// But if we have an image data, we will look at the preffix\nif ([imageData length] >= [kPNGSignatureData length]) {\n    imageIsPng = ImageDataHasPNGPreffix(imageData);\n}\nif (imageIsPng) {\n    data = UIImagePNGRepresentation(image);\n}\nelse {\n    data = UIImageJPEGRepresentation(image, (CGFloat)1.0);\n}\n```\nsince imageData is supplied by the downloader, and contains the original data, imageIsPng always returns No and saves it to jpg, thereby discarding the alpha layer. What ideally should happen is to use a method such as CGImageGetAlphaInfo to detect the alpha channel and save as a png, or jpg otherwise, but I don't know the code enough to know if this breaks other use cases. \n. ",
    "yangchenlarkin": "@mythodeia \nSorry that I used the wrong account.\nIf I [[SDImageCache sharedImageCache] initWithNamespace:@\"ns\"];\nThis object will be \"initWithNamespace\" twice. Are you sure this will be OK?\n. OK.\nAnd you'd better add this in 4.0.0 :)\n. ",
    "YauzZ": "My app get the same problem. so i give up sdwebImage...\n. @kidGuo YES, i can\u3002 so... AFNetWorking more better\u3002 And we draw Large Image piece by piece.\n. ",
    "TalhaAkkas": "sorry for late response.\ni totally forgot about it. i send simple fix it resolved in my specific problem. \ni say don't decode any image who is over 1000px for any dimension instead decode it for 1000 px and save the ratio between width and height\n. ",
    "JonasGessner": "It works fine for me. As the error says, the network connection was lost during the request, so that might actually be the real cause!\n. I cloned the latest commit and added the source files to my project. I'm also running it on the Simulator with Beta 6.\n. @KiranPanesar Nope, I don't have iOS 8 on my device. It's probably a bug that will (hopefully) be fixed in a later beta or the GM.\n. ",
    "KiranPanesar": "@JonasGessner I thought that might be the case, but the iOS 7 device was sitting right next to it and was on the same network. \nI installed via Cocoapods, version 3.7.1. What's your setup?\n. It appears to be working on the iOS 8 simulator and iOS 7 device, just not on the iOS 8 device.\n@JonasGessner: Tried this on an iOS 8 device?\n. Running the iOS 8 device through my computer as a proxy and it's all working. I'm presuming it's got something to do with our network setup here at the office.\nClosing this for now.\n. I implemented this in my local branch just to test and it didn't fix the VM: CG raster data memory ballooning. Should be as simple as setting that property to NO on the SDImageCache singleton and then just using -sd_setImageWithURL: method, right?\n. Closing this after discovering the delegate methods on SDWebImageManager which allow you to manipulate the UIImage as soon as it's finished downloading before caching.\n. ",
    "codefei": "@bpoplauschi @mythodeia , I got crashed too, my version of SDWebImage is 3.7.5.\n-[__NSMallocBlock__ getBytes:length:]: unrecognized selector sent to instance 0x157eced0\nIt seems that the parameter type of data may be not NSData type, here is call stack:\n[NSData(ImageContentType) sd_contentTypeForImageData:]\n[UIImage(MultiFormat) sd_imageWithData:]\n[SDWebImageDownloaderOperation connectionDidFinishLoading:]\n. It seems libwebp is still access 'https://chromium.googlesource.com/webm/libwebp/' not 'https://github.com/webmproject/libwebp'. The disk is really enough, and I test create file success.. ",
    "mvoong": "Hi, I just came across this and really like the approach. Any updates on when it will be merged to the 4.0 branch?\n. @LukeDurrant did you have a chance to confirm?\n. ",
    "joamafer": "+1\n. ",
    "cocoCai": "I use it well, maybe you need this(also can see 'readme ' in SDWebImage):\nOpen the \"Build Settings\" tab, in the \"Linking\" section, locate the \"Other Linker Flags\" setting and add the \"-ObjC\" flag.\n. ",
    "eliomartinezb": "Already done, without that the framework doesn't work. At least on my experience. That's not the problem.\n\n. ",
    "melvin7": "I use pod . the version is 3.7.1.\nAlso there is this problem .\n. ",
    "abinop": "Same here, works ok on iOS8, crashes on iOS7.1\n. @bpoplauschi why do I get \n<ld: file not found: SDWebImage.framework/Versions/Current/SDWebImage> ?\nThis is my Podfile\n```\nplatform :ios, '7.1'\npod 'AFNetworking'\npod 'SDWebImage', :head\npod 'SDWebImage/WebP'\n```\n. ",
    "ChengwenY": "+1\n. ",
    "zend": "This is a problem only in the latest 3.7.1, all good after switching to 3.6\n. ",
    "liweiz": "Same here. Thanks, zend, to pointing out we can use the previous version to avoid this for now.\nupdate: well, I tried 3.6 and it still does not work.\n. I don't know how to delete the DerivedData folder. So I removed the app from my device. And still got no luck. I can get the method from auto-complete during editing. And if I type the previous version setImageWithURL:, I get the error message telling me it has been deprecated and suggesting using the sd_ one. I don't know where to go now.\n. @mythodeia \nThanks for the info.\n. I'm a newbie to github. I just copied my whole project to another folder and modified accordingly (init a new pod file and install). And this time, everything works. I have not deleted the DerivedData yet. Hope this helps.\n. Delete DerivedData works for me. Thanks a lot.\n. ",
    "dkc1987": "@bpoplauschi \nI'm using pod and version 3.7.1. I'm getting same crash. flag is already set. I followed steps in #862. No luck.\n\n\n\n. Sorry, I found the issue. In link binary binary with libraries, we need to add the SDWebImage.a file. See the attached image. \n\n. ",
    "Senkada": "I have even tried all the methods. But still having the same issue... Can you please tell me the solution\n. @irineul I have added all the files of SDWebImage folder into project. Its working now. Try this method.\n. ",
    "irineul": "I'm having the same problem too, tried all methods and still getting the error.\n. ",
    "driventokill": "I had the problem and found it's because I set the OTHER_LDFLAGS(aka Other Linker Flags in build settings) before using cocoapods. So after switched to latest cocoapods which already support swift, you should change the OTHER_LDFLAGS to $(inherited). \n. ",
    "anabusy": "hello ,\nI am using sdwebimage for more than 1.5 years for all my applications.. \nnow I have upload new update and apple is requiring arm64 support .. \ni have installed the last sdwebimage 3.7.1 by cocoapods but the application is crashing all the time...\nTerminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[UIImageView sd_setImageWithURL:placeholderImage:]: unrecognized selector sent to instance 0x7fa8c3018240'\nis the last version is working?\nplease help ,I have to know what to do with?\n. thanks i found the problem ... it was build active architecture only. to yes .\n:) \nthanks\n. ",
    "rsardek": "As pointed here above, attaching libSDWebImage.a did the trick. Thanks.\n. ",
    "orikidoz": "Hi \nI'm having the same issue.\nTried all above fixes nothing works.\n\nThanks,\nOri\n. ",
    "bhavik-iottive": "you need to add a libSDWebimage.a framework in linked framework and libraries section.\nits worked for me. . ",
    "soualid": "Sorry it already exists, thanks !\n. ",
    "akirahrkw": "@threeknife are u using xcode6? if so, i think this is because of xcode6 bug, and it seems that this bug hasn't been fixed yet:(  http://stackoverflow.com/questions/24638826/xcode-6-how-to-fix-use-of-undeclared-identifier-for-automatic-property-synthes\ni also got this error yesterday though, upgrading to 3.7.x would resolve this error.because the version declares the vars explicitly.\n@synthesize executing = _executing;\n@synthesize finished = _finished;\nor you can also declare the above directly  if using old version(<3.7.x)\n. ",
    "jrturton": "Fixed by https://github.com/rs/SDWebImage/commit/241dafdd57eef9694f753be3fd50b46ee846ad87 which is in release 3.7.0\n. ",
    "threeknife": "good!  now can build at xcode6 with no errors\n. ",
    "brackmayhall": "gave that a shot. i just abandoned using google maps and used apple maps.\n. it does work now because I am not using google maps\n. i needed to use force_load to get sdimage to compile because of the parse\nlibrary but then when i used that google maps wouldnt load. google maps\nstates that you need to use the objc flag so i added that. but it still\nwould not compile.\nso im just using apple maps since i only need to show a simple location\nOn Mon, Sep 22, 2014 at 2:29 PM, Bogdan Poplauschi <notifications@github.com\n\nwrote:\nI'll close the issue in this case. I am still curious why it didn't\ncompile, it definitely has something to do with the compiler flags.\nforce_load should be used instead of ObjC.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/899#issuecomment-56427272.\n\n\nBrackston Mayhall\n. ",
    "j0sh": "Agreed with this, too much default printing. A configurable log level would be nice.\n. ",
    "jrr363": "Hello, I just implemented your awesomeness SDWebImage in my project and I love love love it! \"I cannot believe its not butter\", because my collectionView is so smooth. Could you be ever so kind and tell me if I can do anything about the Prefetcher having to prefetch urls after view applicationWillEnterForeground? Because If I do-not back-out of the app and call the Prefetcher method it will skip the already fetched urls, but if I do back out SDWebImagePrefetcher will start at zero again. \nThank you so much for your hard work. \n. ",
    "NightIsland": "Hmm, interestingly, it does reproduce in the simulator, but I\u2019m no longer\nconvinced it\u2019s in the SDWebImage code.\nI\u2019ve got a UILabel on the same view that\u2019s taking some JSON data that\nhappens to be null; if I change that to non-null, my app doesn\u2019t crash.\nI can\u2019t explain what\u2019s going on :-( but the app is just crashing with no\nerror message or an exception breakpoint being hit \u2013 even though I\u2019ve got a\nbreakpoint on all exceptions.  The only thread with any source code in,\nhappened to be in the SDWebImage call, so given the weird nature of the\nimage it was trying to load, I think I might have put 2 and 2 together to\nget 5.\nI\u2019ll close the issue now\u2026\nThanks very much for the email and for the whole project BTW \u2013 I use it in\nall fanatix\u2019 apps which have around 10m users and it\u2019s just outstanding.\nIan\nFrom:  Bogdan Poplauschi notifications@github.com\nReply-To:  rs/SDWebImage\nreply@reply.gith\nub.com\nDate:  Monday, 22 September 2014 20:11\nTo:  rs/SDWebImage SDWebImage@noreply.github.com\nCc:  Ian Wellock ian@nightisland.com\nSubject:  Re: [SDWebImage] [NSNull rangeOfCharacterFromSet:] unrecognised\nselector crash when loading image (#902)\nI just tried with the SDWebImage demo project and the url you provided and\nit worked fine (iPhone 6 simulator - iOS 8). Does it reproduce for you in\nthe simulator?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/902#issuecomment-56424754 .\n{\"@context\":\"http://schema.org\",\"@type\":\"EmailMessage\",\"description\":\"View\nthis Issue on \nGitHub\",\"action\":{\"@type\":\"ViewAction\",\"url\":\"https://github.com/rs/SDWebIma\nge/issues/902#issuecomment-56424754\",\"name\":\"View Issue\"}}\n. ",
    "tungvoduc": "Please take a look at it. I've been struggling with it for many days.\n\nAnd here is how it looks without setting image for the UIImageView object(app is very smooth):\n\n. ",
    "manicaesar": "It looks like it is due to overriding readonly properties with the same names from NSOperation.\n. ",
    "reez": "Thanks, was running into this problem too after updating XCode.\nSo the fix is to manually do this for now?:\nYou have to add \n@synthesize executing = _executing;\n@synthesize finished = _finished;\nat SDWebImageDownloaderOperation.m\n. Thanks!\n. BTW, I am using CocoaPods\n. Ah that makes sense, I don't think I was re-using that cell properly.  Solved!\n. ",
    "aaveidt": "2  0x000c3a8b in reabstraction thunk helper from @callee_owned (@owned Swift.ImplicitlyUnwrappedOptional, @owned Swift.ImplicitlyUnwrappedOptional, @unowned C.SDImageCacheType, @owned Swift.ImplicitlyUnwrappedOptional) -> (@unowned ()) to @callee_unowned @objc_block (@unowned Swift.ImplicitlyUnwrappedOptional, @unowned Swift.ImplicitlyUnwrappedOptional, @unowned C.SDImageCacheType, @unowned Swift.ImplicitlyUnwrappedOptional) -> (@unowned ()) at\nHere is my error report.\n. i'm using swift there.\ncan you post in swift syntax?\nI'm using SDWebImageDownloader instead here. and it's ok.\nvar url = NSURL.URLWithString(\"\\(apifileurl)\")\n        SDWebImageDownloader.sharedDownloader().downloadImageWithURL(url, options: nil, progress: nil, completed: {(image: UIImage?, data: NSData?, error: NSError?, finished: Bool) in\n                if (image != nil) {\n                    UIImageWriteToSavedPhotosAlbum(image, self, Selector(\"image:didFinishSavingWithError:contextInfo:\"), nil)\n                    myActivityIndicatorView.removeFromSuperview()\n                    self.DownloadButton.alpha = 1.0\n                }\n        })\nIs it cache image the same with setImageWithURL because i saw the document said its running Independently ?\nThe code above, i used setImageWithURL to create new UIImageView object for save to camera roll.\nAnd is this one work the same?\nWith this way that's so weird that i can't use NSURL like this here\nSDWebImageDownloader.sharedDownloader().downloadImageWithURL(NSURL.URLWithString(\"\\(apifileurl)\"), options: nil, progress: nil, completed: {(image: UIImage?, data: NSData?, error: NSError?, finished: Bool)\nit's return error: relative URL, so i have to create new variable and put it in parameters like the code i post above.\n. ok. so i only need cachedImageExistsForURL to check both memory cache and disk cache?\nso can i control limit of disk cache / memory cache posible to use with my app?\nbecause i ran my app and sometimes received memory warning.\n. Many tks for your support. My trouble solved now!\n. ",
    "belgianwolfie": "same here ... anything (so not just limited to references to 'self') I put in the completion block makes the app crash. (same error as everyone else)\nlet completedBlock: SDWebImageCompletionBlock! = {(image: UIImage?, error: NSError?, cacheType: SDImageCacheType!, imageURL: NSURL?) -> Void in\n                //indicator.stopAnimating()// Crashing \n            }\n. ",
    "Flitskikker": "@donholly Could this be updated to the latest SDWebImage? I'd very much like to use this feature instead of doing everything manually. \ud83d\ude07\n. ",
    "CheneyZJ": "Hi,@bpoplauschi,now i am facing the same problem and I imported   as you said, but it seems not work for me.Here is the error:\n\nin the method of - (void)connection:(NSURLConnection )connection didReceiveData:(NSData )data .\nPlease help fix this issue.thanks very much.\n. ",
    "AndresCianio": "[https://github.com/rs/SDWebImage/issues/651] seems related\n. ",
    "hydex86": "I found the solution here: https://github.com/rs/SDWebImage/issues/785\nI updated to the latest version and forgot adding new files to my iOS project. \n. ",
    "PalTamojit": "Thanks for your reply fast.\nYes  other images also same in size. \nex. https://practo-fabric.s3.amazonaws.com/5280994b965f496d6f2e7e1f705ab5e59c84a6dc009b2.jpg\nBut working fine.\nOnly problem in .JPG.\n. So SDwebImage cant handle 5mb images. \nIs there any solution to handle when image size 4mb+ . Any scaling... in efficient way. \n. Could you please check it\n https://practo-fabric.s3.amazonaws.com/5412e1eb72f21d4e33aa9c013949cf40b7ceea7658494.JPG\nits size 160kb. \nIts also same problem. Just verify once. \n. Ya sorry. @mythodeia \nActually as it lower size image its getting downloaded. I also got.\nStill problem in big size. 4+ mb .\nPlease give any suggestion when its bigger size image. How can I go with sdwebImage. \nBecause this is one of the best library for image caching & downloading.  I want to stick with sdwebimage. Even when image size larger. \nPlease help me. \n. UIImageView+WebCache.h.......\nUIImageView *imageView = [[UIImageView alloc] initWithFrame: CGRectMake( x, 0, 320, 250)];\n[imageView sd_setImageWithURL:getURL placeholderImage:[UIImage imageNamed:kNoImage]];\n..... 10 images... like that in scrollview ...\nSorry I am not downloading just displaying through sdwebimage.\nany suggestion ..\n. @mythodeia \nIs this possible to reduce the pixel quality of the large pixel image at the time of displaying by sdimage.\nIf its possible then this problem will solve. \n. @mythodeia \nActually images coming from server we cant predict resolution,its may be any size.\nAnd andriod some library already handle this large resolution images. Some how I have to use through SdWebImage in iOS apps. \n. ok thanks ..\nI will try yours idea. \n. As you mention previous , get small size image from server . I got small image from server so its working fine, even when .JPG.\nThanks ...its a awesome library.\n. thanks @mythodeia \n. background image will be floating ...means it would be moving .. \nHave you understand the problem..??\n. Sorry I have miss- spell it.\nI want panning image on imageview .\n. Actually  I want to inside scrollview background image will get animate. Is it clear now.\nAnimate infinite scrolling of an image in a seamless loop.\n. I have solve this problem by uiscrolling image automatically. Thanks anyway ...@bpoplauschi\nAnd...@mythodeia\n. ",
    "serkanerkan": "yes i have installed pod. it was successfull. Now i am trying clearly again. If it wont work i ll write you. Thanks.\n. Actually i am working on a little project now. There are 400 cells. (i am storing their images on device) but in their details, there are 10 - 15 images per one cell. i can not store on device. \nso do you have any idea, how can i store and show these 6000 images on my detail screen image scroller?\nBy the way in my project explorer, there is a file \"libpod\" that was red. I have deleted it. Now i have not issues when i am building.\n. Okay. thank you! i ll check it.\n. i have tried but, i dont know how to use it. Is there a basic example?\n. ",
    "jaumevn": "I tried to use one of these methods, but SDImageCache [[SDImageCache sharedImageCache] imageFromDiskCacheForKey:key]; returns a UIImage, a broken GIF. So to use these methods I have to provide a NSData which can only be retrieved using UIImageJPEGRepresentation or UIImagePNGRepresentation which I think that also will broke the GIF.\nThanks,\n. I save them as gif.\n. Yes I can see the animations. I download a zip file with various gifs, then I save all of them using SDImageCache.\n. I found what I was doing wrong. I use the following to save both images and gifs:\nNSData *data = [[NSFileManager defaultManager] contentsAtPath:imagePath];   \n    UIImage *image =[UIImage imageWithContentsOfFile:imagePath];   \n    if (image) {   \n        [[SDImageCache sharedImageCache] storeImage:image forKey:key toDisk:YES];   \n    }\nSo I changed the UIImage constructor to UIImage *image = [UIImage sd_animatedGIFWithData:data]; and now works perfectly.\n@mythodeia thanks you so much!\n. Here again,\nIt only works while it is memory cache. When the gif is retrieved from disk the gif is no loaded as a gif but as a png. [UIImage sd_imageWithData:data] give me the type as image/png. \n. For writing to disk I do the following:\n```\n- (void)_persistImageToDisk:(NSString )imagePath withKey:(NSString )key\n{\n    NSLog(@\"Image key: %@\",key);\nUIImage *image;\nif ([self isAnimatedSticker:key]) {\n    NSData *data = [[NSFileManager defaultManager] contentsAtPath:imagePath];\n    image = [UIImage sd_animatedGIFWithData:data];\n} else {\n    image = [UIImage imageWithContentsOfFile:imagePath];\n}\n\nif (image) {\n    [[SDImageCache sharedImageCache] storeImage:image forKey:key toDisk:YES];\n}\n\n}\n```\nAnd for reading I do:\n```\n[self.stickerImage sd_setImageWithURL:[NSURL URLWithString:stickerURL] placeholderImage:[UIImage imageNamed:@\"sticker_placeholder\"]\n                                    completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL *imageURL) { ... }\n```\n. Hi,\nYes, the method returns true for gifs correctly. The key is the url, so to retrieve it I use the url also.\nSo I use [[SDImageCache sharedImageCache] storeImage:image forKey:key toDisk:YES]; where key = url, image = gif or png. It's something wired, because when the gif is in memory, it animates, but not when comes from disk.\n. I've implemented it with a different approach, but still not working:\nThe following code persist gif to disk, and at this point sd_imageWithData give me image/gif MIME type, so the gif is good.\nNSData *data = [[NSFileManager defaultManager] contentsAtPath:imagePath];\n    image = [UIImage sd_imageWithData:data];\n    if (image) {\n        [[SDImageCache sharedImageCache] storeImage:image forKey:key toDisk:YES];\n    }\nWhen I retrieve the gif I use the following:\nif ([[SDImageCache sharedImageCache] diskImageExistsWithKey:stickerURL]) {\n        UIImage *image = [[SDImageCache sharedImageCache] imageFromDiskCacheForKey:stickerURL];\n    }\nThis returns me a png not a gif, sd_imageWithData give me image/png MIME type...  What can I do now? \n. I would like to use it because provides a nice interface to query images. Sometimes I'll fetch images from disk (because I download a zip file with a bungle of images, including gifs), and sometimes directly from an URL. That's the reason I'd like to use it. \n. ",
    "lokielse": "I found a solution\n``` objective-c\nNSData data = [NSData dataWithContentsOfFile:fileName];\nUIImage image =  [UIImage sd_imageWithData:data];\nNSURL url = [NSURL URLWithString:[[NSString alloc] initWithFormat:@\"http://example.com/emotions/%@\", fname]];\nNSString key = [[SDWebImageManager sharedManager] cacheKeyForURL:url];\n[[SDImageCache sharedImageCache] storeImage:image recalculateFromImage:NO imageData:data forKey:key toDisk:YES];\n//P.S. recalculateFromImage should pass NO, imageData should not pass nil\n```\n. ",
    "hammad": "Thanks @lokielse this solved my problem.\n. ",
    "Maxatma": "Thanks @lokielse \n. ",
    "louis-ly": "Thanks @lokielse\n. ",
    "xiaocheng1985": "sorry, this is wrong fix\n. I think it's more convenience when use block\n. ",
    "schwers": "@bpoplauschi have you had a chance to look into this?\n. ",
    "endrelovas": "Same issue here. Any progress?\n. ",
    "houmie": "I get the same error message with these two images.  I didn't have this problem a week ago, was there any recent update that might have caused it?  Out of 120 images, 20 fail like this.\nhttp://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/29/1435601959164/THouses-of-Parliament-009.jpg?w=300&q=85&auto=format&sharp=10&s=66a23b573e9f018b26c3abb705f3792d\nand\nhttp://i.guim.co.uk/img/media/d126680aca92ff4251536f788b60233b5463af89/1585_707_3685_2210/3685.jpg?w=300&q=85&auto=format&sharp=10&s=5e00d99e290864557620bf175b873462\n. Well the problem is SDWebImage not showing these images, instead the alternate image is shown. \nOther images are shown, so its clearly it has something to do with SDWebImage.\nHere is another example, it works in web browser but not with SDWebimage lib:\nhttp://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/7/2/1435859710434/Smoke-rises-in-the-Syrian-009.jpg?w=645&q=85&auto=format&sharp=10&s=d2fc39fb6c896312e9c02a238871a7ba\nAny advice please?\n. I think I know what it might have caused it.\nCheck out the url above, it seems SDWebimage only reads everything up to *.jpg and everything after is ignored.  Try to do that in webbrowser:\nhttp://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/7/2/1435859710434/Smoke-rises-in-the-Syrian-009.jpg\nAnd you get a Not authorized.   This must be the reason why all these type of images are being ignored by SDWebImage, is there anything that can be done please?\n. @mythodeia this is strange.  I try to load them like this:\n[_newsImage sd_setImageWithURL:imageURL placeholderImage:[UIImage imageNamed:alternative_image_name]];\nI always get the alternative image shown. But only for the links I provided above such as this.\nNormal image urls without all those parameters after *.jpg are working fine.\nTo handle these problematic urls better, I just switched to Haneke and used this instead:\n[_newsImage hnk_setImageFromURL:imageURL];\nAnd guess what it works!  Hence it must be a bug with SDWebImage.\n. @mythodeia I really appreciate your help on this.  I have been now working on this for hours without any step forwards.  I would like to keep SDWebImage since Haneke doesn't seem to support prefetching.\nYes I have used the demo with that URL and it works, but it doesn't work in my app and I am so frustrated. I was wondering if this particular img provider has been blocked because of previous failures. Could it be?\nSo I set the options like this:\n[_newsImage sd_setImageWithURL:imageURL placeholderImage:[UIImage imageNamed:alternative_image_name] options:(SDWebImageProgressiveDownload | SDWebImageRetryFailed)];\nBut still no joy.  Then I tried to to enable the verbose to get a message what is happening.\nIn AppDelegate.m I have set it like this, I'm not sure if this is the right way:\ndefine SD_VERBOSE\nBut I don't see anything verbose when this line is loading:\n[[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:images];\nBut I can already see that some are passing and some are failing:\n2015-07-03 21:55:51.916 news[15844:373605] Prefetched 203 out of 277\n2015-07-03 21:55:51.921 news[15844:373605] Prefetched 204 out of 277\n2015-07-03 21:55:51.934 news[15844:373605] Prefetched 205 out of 277 (Failed)\n2015-07-03 21:55:51.942 news[15844:373605] Prefetched 206 out of 277 (Failed)\nThe ones with urls beginning with these kind of url fail and these ones always pass. I don't know why the former ones always fail and latter always pass.\n. Yes, I have deleted the app from simulator, cleaned the build folder, deleted the pods and reinstalled version 3.7.0 and its still the same problem. I don't understand.  Is there a way to make sure no url is ever blocked no matter how often it had failed?\n. @mythodeia I found the bug and here is the proof: (v 3.7.2)\nCheckout SDWebImageManager.m and set a breakpoint on the line 183.\nSee screenshot 1: (The telegraph url is able to get a downloadedImage instance, which is great !\n\nBut with guardian url the downloadedImage is nil (!)\n\nYou see I wasnt crazy. There is a bug in your code, I just can't pinpoint exactly what is going on.  :)\n. Speaking of which, the NSError for the failed guardian image says this:\nError Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo=0x7fe1a1d836b0 {NSUnderlyingError=0x7fe1a403c420 \"The request timed out.\", NSErrorFailingURLStringKey=http://i.guim.co.uk/img/media/22e3bdb76e11eafa92b3d6abc676ea9e515e643b/0_269_4256_2556/master/4256.jpg?w=645&q=85&auto=format&sharp=10&s=af23d29efa6e0194a41607ba25631aa0, NSErrorFailingURLKey=http://i.guim.co.uk/img/media/22e3bdb76e11eafa92b3d6abc676ea9e515e643b/0_269_4256_2556/master/4256.jpg?w=645&q=85&auto=format&sharp=10&s=af23d29efa6e0194a41607ba25631aa0, NSLocalizedDescription=The request timed out.}\nThere you go, and the same image works fine with Haneke. So it must be somehow how SDWebImage handles this sort of encrypted urls.\n. Internet connection is fine. I have 40 images, 20 from guardian and 20 from Telegraph.  The internet happens to disconnect for all guardians and remain stable for all telegraphs? c'mon. lol\n. I'm going to bang my head against the wall.  Thanks for your help though.. :-/\n. @mythodeia hey you are the star.  You were right, due taking screenshots I was waiting for too long in the breakpoint and reported a red herring.\nI just did it again and got the real NSError for the given Guardian image.\nError Domain=SDWebImageErrorDomain Code=0 \"Downloaded image has 0 pixels\" UserInfo=0x7ff3741379f0 {NSLocalizedDescription=Downloaded image has 0 pixels}\nThere you go, I hope this helps nailing the problem.\n. yeah I'm 100% sure the url is not changing. Because when i use Haneke instead of SDWebimage, it works.  But Haneke is much slower than SDWebimage. :(\nCould this problem be related to this: http://stackoverflow.com/a/21312221/92153\nIn other words, maybe if you could change SDWebImage to accept a parameter to stop ignoring files if the mime type validation had failed, it would be amazing.\n. @cherpake Interesting solution you have provided there.  But I load my images like this:\n[cell.newsImage sd_setImageWithURL:imageURL placeholderImage:[UIImage imageNamed:alternative_image_name]];\nI don't have any data to begin with as you suggested here:\nNSString *imageContentType = [NSData sd_contentTypeForImageData:data];\nif (!imageContentType) return nil;\nAny advice please?\n. Thanks @mythodeia, may you kindly advice how to remove the XMP metadata from an image?\n. ",
    "bgfriend0": "@bpoplauschi The fix you referenced from July 14 does not seem to resolve this issue. With the advent of iOS 8, Apple publicly declared executing and finished properties on NSOperation, and those declarations appear to interfere with the properties declared in SDWebImageDownloaderOperation's class extension. I am using the latest version of SDWebImage and Xcode 6.0.1, and the project fails to compile.\n. Apologies! The particular project I was working on embeds SDWebImage and another of its dependencies embeds SDWebImage and the code being compiled was out of date--one version had the @synthesizes, the other didn't. Issue resolved. Thanks!\n. ",
    "M00ker": "Thanks, but I followed those instructions.  I had no problems installing previous versions and in fact I'm trying to update my project with the latest version as I'm now using XCode 6.\n. I cloned the git repository and added the files to the project as per the instructions.  I'll try using cocopods as you do.  Thanks again for your help.\n. @mythodeia Followed your method using cocoapods and it worked!  Many thanks.\nNot sure what I was doing wrong when trying to install by adding the files to the project, but I think I'll stick to the cocoapods methods.\n. ",
    "iwill": "The crash log comes from crashlytics (16k Crashes from 16k Users), so I donot know how to reproduce.\n. I can not add any code to the main application, because it belongs to my customer.\nThe __has_include works for me -- please make sure the name of UIImage+WebP.h will not be changed.. @bpoplauschi Accept with pleasure.. @bpoplauschiI I found that I have no enough time to work for SDWebImage, so I request to leave this team, sorry :(. ",
    "siburb": "This wasn't a problem with SDWebImage. Closing issue.\n. ",
    "MihalisL": "Actually, this is not a real issue. I have misunderstood the way the framework works and kept loading images that have been already downloaded.\nAs a side note, I have also realized that processing of images -before they are saved in cache- should take place within the delegate method of the SDWebImageManager imageManager:transformDownloadedImage:withURL: \n. ",
    "DarkDarius": "@bpoplauschi How soon you will fix it? :)\n. @bpoplauschi Yes, of course. Use this link to see crash: http://crashes.to/s/ddb48c8cc47\n. ",
    "adamjuhasz": "I added it so that the data could be encrypted before it hit the disk. \n(Not sure this is the right place for it, just seemed to the least intrusive area)\n. ",
    "danielgalasko": "An update on this would be great, really keen to use a feature like this as it definitely makes more sense to use an LRU disk cache than date added... (at least in our case)\n. ",
    "LukeDurrant": "This worked in 2014.\nNot sure if it does now. \n. Yeah thats not the same. @mythodeia\nThat doesn't allow you to make the directory not in the NSCachesDirectory.\nReason for moving this is extensions.\n. ",
    "msmobileapps": "@mythodeia you mean a URL? I get it in the +(UIImageOrientation)sd_imageOrientationFromImageData:(NSData *)imageData method implementation\n. @mythodeia Cant publish it here. Its from a client server.\n. @mythodeia https://www.dropbox.com/s/7ximhdlilx2ru7t/ipad_air_instant_hotspot_hero.jpg?dl=0 thanks!\n. @mythodeia It happened on every device. \n. @mythodeia It does not crash indeed but when debugging stops in a all exception break point\n. Sent from Acompli\nOn Wed, Jan 28, 2015 at 7:54 PM -0800, \"Richard Reyes\" notifications@github.com wrote:\nMay I ask for an update on this?\n\u2014\nReply to this email directly or view it on GitHub.\n. Not solved as far as I know\u00a0\nSent from Acompli\nOn Wed, Jan 28, 2015 at 7:54 PM -0800, \"Richard Reyes\" notifications@github.com wrote:\nMay I ask for an update on this?\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "richardreyes": "May I ask for an update on this?\n. ",
    "jlmendezbonini": "@mythodeia Are you still looking for an image that triggers that exception and console message?  \nHere you go: https://dl.dropboxusercontent.com/u/2336184/banner_layerup_banner.jpg\n. ",
    "fmaylinch": "Maybe some interesting info here:\nhttp://stackoverflow.com/questions/21933837/imageio-createmetadatafromxmpbufferinternal-threw-error\n. Thanks @mythodeia, it's good to know!\nMaybe a \"try/catch\" would avoid the stopping in the iOS simulator? Just in case you want to consider that. Thanks anyway!\n. ",
    "antoinebis": "Hey!\nThanks for the reply. So here is the image itself. However, if my user reboots the app, it will eventually load... \n\n. @mythodeia \nIt works fine most of the time... but it is as if my users need to close and restart the app for it to open. Could it be on the cache has reached its limits kind of thing?\nIt is a custom UIImageView that I add to a TableViewCell. (Custom because I needed a bigger one and few others...) I create it like this:\nnewsFeedCell.newsPicture = [[UIImageView alloc]init];\n        newsFeedCell.newsPicture.contentMode = UIViewContentModeScaleAspectFill;\n        newsFeedCell.newsPicture.clipsToBounds = YES;\nAnd that's it. I am using version 3.6.\n. @mythodeia \nI just changed it to the newest version (3.7.1). We will see how it goes! I never changed the maxMemoryCost, so no chances on that :P!\nThanks for everything!\n. ",
    "chenium": "The author of YLGIFImage has a project that combines SDWebImage and YLGIFImage. The author states that he plans to maintain this fork.\nhttps://github.com/liyong03/SDWebImage-YLGIFImage\n. ",
    "zhw511006": "When we will integrate a 3rd party solution for Gif? Thx!\n. Looking forward to this! \n. When we will have a version for this? Thx!\n. ",
    "wanghengheng": "I modified the methods in file \"UIImage+GIF\" to return a \"YLGIFImage\", and modified the method in file\"SDWebImageCompat\" to do nothing with 'gif' data.\nIt looks work well.\n. ",
    "peterpaulis": "Any progress on this?\n. the solution for https://github.com/liyong03/SDWebImage-YLGIFImage no longer works for current sdwebimage\n. ",
    "neil-wu": "I modify some SDWebImage's source code. And work with FLAnimatedImage very well.\nHere is a demo project\n. I used like this:\n```\nSDWebImageManager.sharedManager().downloadImageWithURL(imgurlpath!,\n    options: SDWebImageOptions.ProgressiveDownload,\n    progress: { (recvSize, totalSize) in\n        //...\n    }, completed: { (image, error, cacheType, finished, imgURL)  in\n        //on image loaded\n        if finished {\n            //do something...\n            //...\n            //\n            var isInCache: Bool = SDWebImageManager.sharedManager().cachedImageExistsForURL(NSURL(string: imgURLString))\n            var data: NSData! = SDWebImageManager.sharedManager().imageCache.diskImageDataBySearchingAllPathsForKey(imgURLString)\n        }\n})\n```\n. It's 0 when data is nil\n. And it become 2 when data is not nil\n. Is there any option to tell SDWebImageDownloader cache image? \n. thank you very much. :+1: \n. ",
    "yuvalDeri": "I don't know if this is known but Brewer Herb gives a nice solution of using FLAnimatedImage with SDWebImage using swizzlling\nhttps://gist.github.com/exherb/1257263e350831d6c205\n. @hjanuschka\nI simply added those 2 files to my project and added a load class method under the implementation part like this\n@implementation SDImageCache (Swizzle)\n\"+ (void)load {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        [self swizzle];\n    });\n}\"\n .....\n@end\nmake sure you are calling \nsd_setImageWithURL:placeholderImage:options: completed:\non a FLAnimatedImageView object and not an UIImageView.\nIt works for me, even the completion block holds a FLAnimatedImage instead of an UIImage when GIFs are involved.\ngood luck\n. ",
    "hjanuschka": "@yuvalDeri  thx for the hint?! - but it actually does not animate the gif, it is loaded but does not run.\nany idea how to start the animation?\nusing the following original sd method to load the image from web\nsd_setImageWithURL:placeholderImage:options:SDWebImageCacheMemoryOnly completed:\n. @yuvalDeri - MANY THX - changing the type from uiimageview to flanimatedimageview did the trick, also nice with the +load() thx - someone should do a POD of this\n. ",
    "jlubeck": "This works great! But how can we use it for buttons? I see that this is only implemented inside the UIImageView+WebCache.h category, but not in the UIButton+WebCache.h \nI'll make a ticket about it\n. Thanks for the response!\nIs closing the issue the proper way to handle this? I'll try to add it myself, but in case I don't get around to it, maybe someone else can see it and do it if it's open.. don't you think?\n. Totally understand. I'm going to try to implement this when I get a chance... Thanks for re-opening\n. Oh nice @kirpa ! I wasn't notified about it. Weird. I'm going back to this project by the end of the week, so I'm going to try it and let you know!\nThanks!\n. ",
    "zhongchao-han": "I fixed other place witch cause bad access,and this crash not hapened ~\nBut I am not sure i fixed it,because the crash not happen always.\n. @mythodeia \n. ",
    "aseemsandhu": "that worked well. thanks.\n. ",
    "tbrknt": "Did you try to give the parameter mentioned in here: https://github.com/rs/SDWebImage#handle-image-refresh? That is, calling setImageWithURL: placeholderImage: with also the parameter/argument options:SDWebImageRefreshCached.\nEven though you give that option, does it still load the previous image?\n. ",
    "GabrielCartier": "I'm having a similar problem. I am indeed using an URL that does not change but the image change. Not sure when exactly the bug started occuring. Either way, if I check my network trace, I clearly see the request being done to the server and new photo returning. \nMy request looks like:\n[self.profilePicture sd_setImageWithURL:profileImageURL\n                           placeholderImage:[UIImage imageNamed:@\"default_friend\"]\n                                    options:SDWebImageHandleCookies | SDWebImageRefreshCached];\nIf I a completed block, I can see that the cache type is of SDImageCacheTypeDisk.\nI tried with the solution above and it does not seem to work. The images are loaded at two different places in the app and they both do that. They are both in a UITableViewCell.\nWill investigate a bit more.\n. Haven't got the chance to check it and the project has changed since then. I'll see if I can validate that it works with an updated version.\nAnyhow, thanks!\n. ",
    "andreaslindahl": "I'm also having this problem. I'm using SDWebImageRefreshCached but I'm not getting the updated image from the server.\n. is it possible to remove the SDWebImageDownloaderUseNSURLCache option without changing something in SDWebImage? I'm using cocoapods and do not want to make changes to any of the code in the pods.\nAlso, is there a reason mythodeia's fix hasn't been included? Surely, that how it should be if you use SDWebImageRefreshCached?\n. I'm still having problems with this. In iOS9 as well. Updated images aren't downloaded.\n. The problem seems to come and go. I reverted to 3.7.4 and things seem to work a little bit better in that version.\n. ",
    "HannuL": "In some cases images are stored to \"NSURLCache sharedCache\" and it causes problems. To empy it  -> call [[NSURLCache sharedURLCache] removeAllCachedResponses]\n. ",
    "nitishmakhija": "@mythodeia i had the same issue and adding this \n        if (image && options & SDWebImageRefreshCached) {\n                // force progressive off if image already cached but forced refreshing                downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n                // remove SDWebImageDownloaderUseNSURLCache flag\n                downloaderOptions &= ~SDWebImageDownloaderUseNSURLCache;\n                // ignore image read from NSURLCache if image is cached but force refreshing\n                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n            }\ndidn't do any trick can you help me out please\n. @mythodeia sure\n[self.profilePictureButton sd_setBackgroundImageWithURL:[NSURL URLWithString:imagePath] forState:UIControlStateNormal placeholderImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@\"placeholder\" ofType:@\"png\"]] options:SDWebImageRefreshCached];\ni am doing something like this in my controller, but for some reason i am not getting the updated image i tried this method also \n- (void)sd_setImageWithURL:(NSURL *)url forState:(UIControlState)state placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options completed:(SDWebImageCompletionBlock)completedBlock; \nCompletion block:\ntypedef void(^SDWebImageCompletionBlock)(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL);\nin the completion block i get the same image and the SDImageCacheType  = SDImageCacheTypeDisk \n. ",
    "standers67": "I see the same issues as mentioned by others:\nEven if specifying SDWebImageRefreshCached, the images are not refreshed even when they have been updated on the backend servers. There are no requests sent to the server to check if the images have actually been updated or not. This was the behaviour in previously projects where we also have used SDWebImage if I remember it correctly.\nPreviously in this thread, there are suggestions to add a line of code to the method downloadImageWithURL:options:progress:completed.\n//remove SDWebImageDownloaderUseNSURLCache flag\ndownloaderOptions &= ~SDWebImageDownloaderUseNSURLCache;\nThis seems to cause the images to be refreshed from the server backend, without checking if they have actually been updated or not.\nCould it be changes to iOS that cause these problems when it comes to refreshing images based on the date they were updated in the backend?\n. Thanks for responding so quickly. \nJust tried to do the same thing in the demo project and the behaviour is the same. I try to prefetch images from the _objects array.\nTwo items in the _objects array works fine, if I add another one - the app hangs..\nI added the call to the sharedImagePrefetcher just after two other statements in the demo app:\n[SDWebImageManager.sharedManager.imageDownloader setValue:@\"SDWebImage Demo\" forHTTPHeaderField:@\"AppName\"];\n    SDWebImageManager.sharedManager.imageDownloader.executionOrder = SDWebImageDownloaderLIFOExecutionOrder;\n[[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:_objects];\nAre there any special conciderations when it comes to when the prefetchURLs method should be called?\n. Some more input, this seems to be the code location where it goes wrong:\nSDWebImagePrefetcher.m:128\ndispatch_apply(maxNumberOfImages/self.maxConcurrentDownloads, self.prefetcherQueue, ^(size_t index) {\n            size_t i = index * self.maxConcurrentDownloads;\n            size_t stop = i + self.maxConcurrentDownloads;\n            do {\n                [weakSelf startPrefetchingAtIndex:i++];\n            } while (i < stop);\n        });\n. I get a type conversion error when I replace this line:\nShould self.prefetcherQueue be type casted?\nSDWebImagePrefetcher.m:131:97: Incompatible pointer to integer conversion passing 'dispatch_queue_t' (aka 'NSObject *') to parameter of type 'long'\n. Yes, just updated the code in my own project. It works - many thanks!\n. ",
    "balkarov": "Oh yeah for sure! Thank you!\n. I resolved this problem! \nI use stringEncoding: \nmyStringUrl = @\"http://i0.wp.com/www.pure-t.ru/wp-content/uploads/2015/04/\u0437\u0437\u0437\u0437\u04372.png\";\nurlSting = [myStringUrl stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n. @dreampiggy thank you for your answer.\nWill be send http headers in sd_setImageWithURL after use headersFilter?\nIf yes, I will update version in my project and will check it. . @dreampiggy thank you very much. \nI will be wait new releases with this feature. . @dreampiggy but I saw source code and I think for sd_setImageWithURL http headers do not use.\nHttp headers use for manager.imageDownloader downloadImageWithURL\nMaybe I wrong?. @dreampiggy thank you!\nSo.... setValues forHTTPHeaderField and headerFilter is different things?. ",
    "lordkev": "Any reason this hasn't been merged yet? It won't affect existing users at all. I'd say a simple note in the documentation that the developer is responsible for calling cleanup within an extension should suffice for now.\n. Note: this also happens when you build the library as a framework with the new version of CocoaPods (and try to use it in an extension), so it's likely about to become a bigger problem for people.\n. ",
    "chuganzy": "+1\n. @rs Thanks for your review.\n. Sometimes, the handlers are added unexpectedly since line 147 has been executed.\n. The unit test failure has been caused by pod update failure because Expecta does not support iOS5 from v.0.3.2.\n. ",
    "0x0c": "+1\n. ",
    "appsforall": "Any plans on when this will be added? As AppBoy has a direct dependency to SdWebImage, we are forced to stay behind on a buggy cocoa pods version as SDWebImage cannot build for extensions. Would be great to hear from you!\n. Any plans on when this will be added? As AppBoy has a direct dependency to SdWebImage, we are forced to stay behind on a buggy cocoa pods version as SDWebImage cannot build for extensions. Would be great to hear from you!\n. ",
    "nickplee": "There's an error.  Submitting a new one.\n. ",
    "masterfego": "Hi,\nI want to know why this small change is not integrated with the last version of SDWebimage (nearly one yer). We need to use personnalized imageManager, imageCache, imageDownloader... Why these preoperties are only {get}?\nThanks.\n. Okay, and for question 1, how many bytes by default or unlimited?\n. ",
    "kartikthapar": "@mythodeia Thanks. That was exactly what I was asking. I've adjusted my core data stack to work accordingly and that's working out just fine. Thanks! :)\n. ",
    "ice6": "1 \u5f1f\u5144\u4eec\uff0c\u6211\u628a  \u795e\u8d50\u7ed9\u9a6c\u5176\u987f\u4f17\u6559\u4f1a\u7684\u6069\u544a\u8bc9\u4f60\u4eec\uff0c2 \u5c31\u662f\u4ed6\u4eec\u5728\u60a3\u96be\u4e2d\u53d7\u5927\u8bd5\u70bc\u7684\u65f6\u5019\uff0c\u4ecd\u6709\u6ee1\u8db3\u7684\u5feb\u4e50\uff1b\u5728\u6781\u7a77\u4e4b\u95f4\uff0c\u8fd8\u683c\u5916\u663e\u51fa\u4ed6\u4eec\u4e50\u6350\u7684\u539a\u6069\u3002\n\u3010\u548c\u5408\u672c\u3011\u6797\u540e8:1-2\n\ud83d\udc7c#\u8bfb\u5723\u7ecf#\u2728\ud83c\udf1b\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2014\u5e7411\u670825\u65e5\uff0c23:05\uff0cBogdan Poplauschi notifications@github.com \u5199\u9053\uff1a\nPlease reopen if it's the case. Thanks @mythodeia\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "perlasivakrishna": "SDWebImageRefreshCached is working  exactly. that is what my requirement too ....\n. My Image sizes are around 100 Kb each...\n. Yeah exactly when im scrolling continuosly getting crash.. \n. Hey all of my pictures resolution is 72 dpi..., Especcially Im getting crash when scrolling continoulsy for         2-3 minutes ..(In demo project if I scrolls for 5 min getting crash)..\n. I Try decompressing images set to NO, But still crasing. here Im providing 2 images for example, plz check those ..\nhttps://www.dropbox.com/s/0l6h78foyfbf2s9/11178288_946703472040923_8971103857414139436_n.jpg?dl=0\nhttps://www.dropbox.com/s/ffms2zu68v6p9xs/11182222_946703485374255_1651310022180919810_n.jpg?dl=0\nHere my cell Image view frame is 220*220 , Here is my screen shot in grid.. \nhttps://www.dropbox.com/s/gxh9zvk38gf4e7t/iOS%20Simulator%20Screen%20Shot%2030-Jun-2015%2012.18.13%20pm.png?dl=0\n. Here I can get any reolsution Image from Service side, After a search Im going to  use this method \n-(UIImage *)imageWithImage:(UIImage *)image scaledToSize:(CGSize)newSize {\n    //UIGraphicsBeginImageContext(newSize);\n    // In next line, pass 0.0 to use the current device's pixel scaling factor (and thus account for Retina resolution).\n    // Pass 1.0 to force exact pixel size.\n    UIGraphicsBeginImageContextWithOptions(newSize, NO, 0.0);\n    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];\n    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return newImage;\n}\nhow can I use this with place holder concept  in Sdwebimage \n. If I saved the transformed image in cache, I may get a problem after clicking image. Bcoz After cliking on image Im showing it in large imageview. (700x700). then can I get the Clear Image \n. Any way thanks for suggestions, I think its finally due to relosutions, \n. k thanks, for  thumbs Im converting in to lower resolution, but saving the original one.\n```\n SDWebImageManager *manager = [SDWebImageManager sharedManager];\n    [manager downloadImageWithURL:url\n                          options:0\n                         progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n                     }\n                    completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n                        if (image) {\n\n                            UIImage *scaledimage =[self imageWithImage:image scaledToSize:CGSizeMake(220, 220)];\n                            completionBlock(YES,scaledimage);\n\n\n                            // do something with image\n                        }\n                        else\n                        {\n                            completionBlock(NO,nil);\n\n\n                        }\n                    }];\n\n```\n. K, I have thousands of urls, \nAt present im using this method to reduce the reolsution of image and showing this in thumbs. \n-(UIImage *)imageWithImage:(UIImage *)image scaledToSize:(CGSize)newSize {\n    //UIGraphicsBeginImageContext(newSize);\n    // In next line, pass 0.0 to use the current device's pixel scaling factor (and thus account for Retina resolution).\n    // Pass 1.0 to force exact pixel size.\n    UIGraphicsBeginImageContextWithOptions(newSize, NO, 0.0);\n    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];\n    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return newImage;\n}\nShall i need to maintain different urls for thumbins/original\n. Also Can I get the Url from the completion block for \"SDWebImageDownloader\" like SDWebImageManager\n. k Thanks for info, I will try All my trails with  the demo project once \n. :+1: \n. ",
    "lovecactus": "I've got random crash in my project.\nThe exception is SEGV_ACCERR in downloadImageWithURL: method.\nrequest.allHTTPHeaderFields = wself.HTTPHeaders;\nException Type:  SIGSEGV\nException Codes: SEGV_ACCERR at 0xf8a7beb8\nCrashed Thread:  0\nThread 0 Crashed:\n0   libobjc.A.dylib                     0x00000001964efbd0 objc_msgSend + 16\n1   CFNetwork                           0x0000000185732ad0 HTTPHeaderValue::isValid(__CFString const_) + 24\n2   CFNetwork                           0x0000000185732a14 HTTPMessage::setHeaderFieldStringValue(__CFString const_, __CFString const_) + 44\n3   CFNetwork                           0x00000001857329a0 HTTPMessage::setMultipleHeaderFields(__CFDictionary const_) + 132\n4   CFNetwork                           0x00000001857502e4 CFURLRequestSetMultipleHTTPHeaderFields + 144\n5   TapatalkFree                        0x00000001000f7cc4 __79-[SDWebImageDownloader downloadImageWithURL:options:progress:completed:dealed:]_block_invoke (SDWebImageDownloader.m:128)\n6   TapatalkFree                        0x00000001000f8918 __84-[SDWebImageDownloader addProgressCallback:andCompletedBlock:forURL:createCallback:]_block_invoke (SDWebImageDownloader.m:208)\n. ",
    "rushabh55": "This seems to happen on newer versions of SDWebImage too! \nHere is the stack trace of crash. There are quite a few instances of the crash \n```\nDate/Time:       2017-11-14T06:27:04Z\nOS Version:      iPhone OS 11.1.2 (15B202)\nReport Version:  124\nException Type:  SIGSEGV\nException Codes: SEGV_ACCERR at 0x31564b4a694\nCrashed Thread:  0\nApplication Specific Information:\nSelector name found in current argument registers: characterAtIndex:\nThread 0 Crashed:\n0   libobjc.A.dylib                      0x00000001826a16bc lookUpImpOrForward + 92\n1   libobjc.A.dylib                      0x00000001826ac758 _objc_msgSend_uncached + 52\n2   CFNetwork                            0x0000000183bad34c HTTPHeaderValue::isValid(CFString const) + 56\n3   CFNetwork                            0x0000000183a91608 HTTPMessage::setHeaderFieldStringValue(__CFString const, __CFString const) + 40\n4   CFNetwork                            0x0000000183a919c8 HTTPMessage::setMultipleHeaderFields(__CFDictionary const) + 800\n5   CFNetwork                            0x0000000183a29004 CFURLRequestSetMultipleHTTPHeaderFields + 136\n6   SDWebImage                           0x0000000107021154 __72-[SDWebImageDownloader downloadImageWithURL:options:progress:completed:]_block_invoke (SDWebImageDownloader.m:179)\n7   SDWebImage                           0x000000010702192c __81-[SDWebImageDownloader addProgressCallback:completedBlock:forURL:createCallback:]_block_invoke (SDWebImageDownloader.m:234)\n8   libdispatch.dylib                    0x0000000182dcd048 _dispatch_client_callout + 12\n9   libdispatch.dylib                    0x0000000182dd5ae8 _dispatch_queue_barrier_sync_invoke_and_complete + 52\n10  SDWebImage                           0x00000001070217d4 -[SDWebImageDownloader addProgressCallback:completedBlock:forURL:createCallback:] (SDWebImageDownloader.m:231)\n11  SDWebImage                           0x0000000107020f40 -[SDWebImageDownloader downloadImageWithURL:options:progress:completed:] (SDWebImageDownloader.m:160)\n12  SDWebImage                           0x0000000107028a4c __65-[SDWebImageManager loadImageWithURL:options:progress:completed:]_block_invoke (SDWebImageManager.m:174)\n13  libdispatch.dylib                    0x0000000182dcd088 _dispatch_call_block_and_release + 20\n14  libdispatch.dylib                    0x0000000182dcd048 _dispatch_client_callout + 12\n15  libdispatch.dylib                    0x0000000182dd9b74 _dispatch_main_queue_callback_4CF$VARIANT$mp + 1012\n16  CoreFoundation                       0x00000001833f1eb0 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE + 8\n17  CoreFoundation                       0x00000001833efa8c __CFRunLoopRun + 2008\n18  CoreFoundation                       0x000000018330ffb8 CFRunLoopRunSpecific + 432\n19  GraphicsServices                     0x00000001851a7f84 GSEventRunModal + 96\n20  UIKit                                0x000000018c8e42e8 UIApplicationMain + 204\n```\nI see you changed the wself instance to sself on the line. request.allHTTPHeaderFields = wself.HTTPHeaders; Will it be worth making the variable HTTPHeaders atomic or synchronizing the http headers on self (SDImageDownloader)? \nThis will avoid any potential multi threading issues that could cause this crash. I don't suspect there being any other reason for this since my application is largely multi threaded. I am also sure that items exist and are non-nil (other than the case when I am removing the headers) \nSDWebImage version used : 4.2.1\nFYI: @bpoplauschi \n. This has happened to me too. ",
    "ymsheng": "In UIImage+GIF.m file, if the gif image each duration not the same(like:0.1s,0.1s,0.1s,2s).when play the image with same duration will show slow. so i add this code:\n```\n+ (UIImage )sd_animatedGIFWithData:(NSData )data {\n    if (!data) {\n        return nil;\n    }\nCGImageSourceRef source = CGImageSourceCreateWithData((__bridge CFDataRef)data, NULL);\n\nsize_t count = CGImageSourceGetCount(source);\n\nUIImage *animatedImage;\n\nif (count <= 1) {\n    animatedImage = [[UIImage alloc] initWithData:data];\n}\nelse {\n    NSMutableArray *images = [NSMutableArray array];\n\n    NSTimeInterval duration = 0.0f;\n\n    for (size_t i = 0; i < count; i++) {\n        CGImageRef image = CGImageSourceCreateImageAtIndex(source, i, NULL);\n        float eachDuration = [self sd_frameDurationAtIndex:i source:source];\n        duration += eachDuration;\n        if (eachDuration>0.1) { //if duration larger than 0.1; repeat input this duration image\n            int repeatCount = eachDuration/0.1;\n            for (int k=0; k<repeatCount; k++) {\n                [images addObject:[UIImage imageWithCGImage:image scale:[UIScreen mainScreen].scale orientation:UIImageOrientationUp]];\n            }\n        }\n        else{\n           [images addObject:[UIImage imageWithCGImage:image scale:[UIScreen mainScreen].scale orientation:UIImageOrientationUp]];\n        }\n\n        CGImageRelease(image);\n    }\n\n    if (!duration) {\n        duration = (1.0f / 10.0f) * count;\n    }\n\n    animatedImage = [UIImage animatedImageWithImages:images duration:duration];\n}\n\nCFRelease(source);\n\nreturn animatedImage;\n\n}\n```\n. ",
    "leiyong316": "@mythodeia \nbut ,  i how to get to the all memory key?\n. @mythodeia  thanks\n. ",
    "disburden": "I put the problem solved.\nit's my fault,Sorry!\npls close this issue.\n. ",
    "GBoyadziev": "Hello, thanks for the fast response. This is not the case. Her's a sample code for one of the cells that I am using.\n- (void)prepareForReuse\n  {\n  [super prepareForReuse];\n[self removeActivityIndicator];\n  self.moviePoster.image = nil;\nself.backgroundColor = [IMSUIAppearanceManager getBackgroundColorStyle01];\n  self.moviePoster.backgroundColor = [IMSUIAppearanceManager getBackgroundColorStyle01];\nself.freeMovieOverlay.hidden = YES;\n  }\nAny other suggestions?\nMaybe some kind of wrong usage of the library or something?\n. I am using 3 custom cells, but at the moment of the reproduction of the problem the list is composed only from one type of cell (the one that uses the code I posted).\n. Perfect, thank You for the advice!\n. Any progress on that issue, my app will benefit greatly if the ETag and last modification date are stored in disc cache?. The idea here is not to resort to NSURLCache, there are a number of issues with it. The more severe once are a race condition, leading to a crash and a problem with the cache size. Lately in my app I was forced to abandon it completely. It has some sort of a bug, there are filed radars about it. The cache does not take into account its size limit and grows uncontrollably or its grow behaviour is undefined. \nHere are links to some of the radars (there are many more):\nhttps://openradar.appspot.com/29945424\nhttp://www.openradar.me/28518369. Same for me too. Next time it happens I will try to debug a bit and see if I can find out something useful.\n. I am encountering the same problem in one of my projects and it is reproducing quite often.\n. ",
    "ianb821": "In your prepareForReuse method you can cancel the image download for the current image.  Adding something like [self.moviePoster sd_cancelCurrentImageLoad]; should do the trick.  Just setting the UIImageView's image to nil will clear an image if it's currently there, but if there is a background download going on, the image will still get set once the download completes.\n. ",
    "namanhams": "Sorry to reopen this, but i don't quite understand what's causes this issue.\nWhen a cell is reused, it will load another image on its imageView, using sd_setImageXXX method. \nCalling sd_setImageXXX will internally call sd_cancelCurrentImageLoad.\nSo why do i need to cancel the image loading myself ? \nAlso this issue seems not happen on UITableView. Only UICollectionView. \n. ",
    "KiryBelasheuski": "Simple adding below code helped me.\n- (void)prepareForReuse {\n    [super prepareForReuse];\n    [self.imageView sd_cancelCurrentImageLoad];\n}\nThank you @ianb821 . ",
    "maheshaarkenea": "This code is awesome....the above one worked for me too. . ",
    "NikunjGangani": "@KirylBelasheuski Thank you. ",
    "odlar": "thanks bensie and KirylBelasheuski,i had solve it. ",
    "ilyanengen": "SWIFT 4\nBefore setting new image to imageView add:\ncell.imageView.sd_currentDownloadTask?.cancel(). Before setting new image to imageView add:\ncell.imageView.sd_currentDownloadTask?.cancel(). ",
    "joeljfischer": "Thanks. Should I write a separate issue for using a BOOL * parameter in the progress block for cancelation?\n. I started a bit of an implementation. It would certainly work, but now I'm reconsidering the BOOL * approach. The only reasons that I can think of to cancel image downloads is if a network connection drops or if the user cancels it in some way. In either case, I think your current approach of NSOperations is better, and the BOOL * approach doesn't really add anything. I would still definitely like to see NSProgress at some point, but I understand wanting to keep backward compatibility.\n. ",
    "ljfantin": "Why do you excluded UIImage+WebP.h in podspec file?\nI want to use SDWebImage with webp support. \n\"exclude_files\": \"SDWebImage/UIImage+WebP.{h,m}\"\n. ",
    "XiangqiTu": "supplement: the image on serve is 200KB, but it display in my app, it become 1.3MB.\n. @mythodeia  UIImagePNGRepresentation(UIImage* image),get the NSData. and it's length equal to 1.3MB.\ni use the NSFileManager write this file in sandbox,and it also shows the transformImage 1.3MB.\nmy question, in my device, 100+KB image resource from server, after using SDWebImage, it display this image for a larger size(this size sometimes may beyond expection). is it necessary to waste performance to show the larger size image? it's easier to receive memory warning,even though you use NSCache to reduce this things happened.\nand i know that \n\n+ (UIImage *)decodedImageWithImage:(UIImage *)image;\n\nit makes image display on screen quickly. but i can't understand  is it necessary to do this...\nmay be you could have a solution to avoid making the transform image larger than the resource(origin) one ...\nthanks a lot. My English is poor, but i hope what i say can help SDWebImageManager become stronger. :-)  O(\u2229_\u2229)O\n. @mythodeia \noh,man... \nmy key point is this....\n\n        UIImage *originImageFromServer = [UIImage sd_imageWithData:data];\n        UIImage *scaledImage = [self scaledImageForKey:key image:originImageFromServer];\n        UIImage *finalUsedImage = [UIImage decodedImageWithImage:scaledImage];\n\n        UIImageView *displayImageView = [UIImageView new];\n\n        [displayImageView setImage:originImageFromServer];//100+KB\n        [displayImageView setImage:finalUsedImage];//300+KB\n\n        //which one is more efficient? which one makes app tiny\uff1f\n\n. ",
    "johnnyghost": "+1 \n. ",
    "princegoyal1987": "Any updates on this? Will it be added to any branch?\n. ",
    "nicolasmuller": "That would be nicer!\n '+ 1'\n. ",
    "siddharthsingh1122": "*** -[NSPathStore2 length]: message sent to deallocated instance 0x7b6a8260\nGetting this error\n. ",
    "shreeshecommstreet": "I am getting this issue at all time.\n. ",
    "athiwatc": "I seem to solve the problem. I patched the function to call it directly. \nfrom\nif (self.cacheKeyFilter) {\n        return self.cacheKeyFilter(url);\n    }\n    else {\n        return [url absoluteString];\n    }\nto\nreturn [[[NSURL alloc] initWithScheme:[url scheme] host:[url host] path:[url path]] absoluteString];\nThis doesn't seem to make sense to me but it works!\n. ",
    "gztchan": "Thank you for merging, it has been 2 years. \ud83d\udc4d \n. ",
    "hungbv": "The online image is exist because after I can't download image by SDWebImage, I used NSURLSession to download that image. my problem is: if I lost internet while downloading by SDWebImage (I used function sd_setImageWithURL: placeholderImage: completed: ), I can't redownload that image by SDWebImage until I close and reopen my app. I think SDWebImage cache download progress somewhere but both SDImageCache.sharedImageCache().clearMemory() and SDImageCache.sharedImageCache().clearDisk() do not solved my problem\n. @mythodeia It's worked, thank you so much\n. When I tried to download image with Japanese words in download url like this \"\u540d\u79f0\u672a\u8a2d\u5b9a-4.png\", error happened: \"Error Domain=NSURLErrorDomain Code=500 \"The operation couldn\u2019t be completed. (NSURLErrorDomain error 500.)\". It works well when I change url with no Japanese words in the URL. How can I download image with Japanese word in my url? please help me, thanks\n. @mythodeia I'll try it, thank you :)\n. ",
    "WenchaoD": "I got this error on this image:\nhttp://img4.imgtn.bdimg.com/it/u=2496578486,2607734154&fm=21&gp=0.jpg\nand add the retry option still not working. But it can be displayed in the web browser. Is there something wrong with that image file?\n. Requests from different countries might have been blocked. Bad thing.\nNever mind. We have changed it to another image file and it seems working now.\nThanks.\n. ",
    "donly": "Yes, I have found this issue and fixed.\nBy adding a header field User-Agent with the value of Mozilla/5.0 (iPod; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1, which same as to the Safari Browser's, everything works well again\n. ",
    "newacct": "@mythodeia I don't think so. That change doesn't touch SDWebImageDownloaderOperation.\n. @mythodeia This is an internal design issue in SDWebImageDownloaderOperation, which occurs even when assuming that the SDWebImageDownloaderOperation API is used 100% correctly by outside code. So fixing bugs in other code will not help.\n. @timkoma So basically, it fixes it by not setting self.thread to nil in the beginning of connectionDidFinishLoading?\n. ",
    "klundberg": "I havent done it but you should just be able to #import <SDWebImage/SDWebImage.h> in your bridging header that is generated if you have a mixed swift/objc-c project. if it's a pure swift project you need to add that header yourself (which i don't know how to do myself, but you can force xcode to do it for you if you add an obj-c file and throw that file away afterwards).\n. ",
    "thedamfr": "Cocoapods support Swift.\nImport via Cocoapods.\nimport SDWebImage in your swift sheet.\nlook for sd_* methods on UIImageView!\n. ",
    "chenenyu": "How to resolve this issue?\n. ",
    "basememara": "The problem is that extensions don't work with Swift frameworks yet. Several CocoaPods are suffering from this :(((\nhttp://stackoverflow.com/questions/24175596/swift-framework-does-not-include-symbols-from-extensions-to-generic-structs\nPlease make some noise in the Apple forums and feedback.\n. ",
    "amacneil": "Here's how I got it working (using CocoaPods and dynamic frameworks, no messy bridging headers):\nPodfile:\n```\nplatform :ios, '8.0'\nuse_frameworks!\ntarget 'MyApp' do\n  pod 'SDWebImage'\nend\n```\nRun pod install. Then, at the top of your source file add:\nimport SDWebImage\nNow it's ready to use!\ncell.imageView.sd_setImageWithURL(myUrl)\n. ",
    "rsahu34": "Hi @amacneil  ,\ni have installed the pod file, but there is no \"SDWebImage\" file , when i am trying to import \"import SDWebImage\" i am getting error\n\n. ",
    "initlifeinc": "aha, my pleasure.\n. @mythodeia sorry, i don't know why travis CI build always failed, i recreate a pull #1322 , is that ok?\nbtw, how to pull request with the check success build.\n. ",
    "Jur4s": "@rromanchuk  Yes, and works like a charme !\n. ",
    "draveness": "I have already forgot what I did then, I saved it in the data base instead of using the SDIMageCahe, - -.\n. ",
    "bitomule": "The problem doesn't appear on device, only simulator.\n. ",
    "AlexChesters": "I'm seeing this on physical devices as well as the simulator for an Objective-C project. Has anyone else had this issue?\n. I fixed this by calling [cell setNeedsLayout] in the completion block.\n. No worries, thanks for the awesome library @bpoplauschi :+1: \n. This also doesn't occur when running an iPhone 4S on iOS 8.4 in the simulator\n. I don't have an iOS4 simulator so I can't say. It's definitely specific to iOS 9 though, iPhone 4S on iOS 8 works fine\n. I'm using 3.7.3, can you reproduce on iOS 9.0.0?\n. Just updated to 3.7.4 and its working fine, strange! Cheers :smile: \n. ",
    "nvdcmptr": "i found my mistake\ntnx\nclose this Issue\n. ",
    "seanLee": "yeah,i know about the methed.What confuses me is which (SDWebImageOptions)options should I use.\nIt has eight values,which one is the default value that you meant automatically caches in memory  and disk.Or should I use nil to set the default value?\n. @mythodeia  thx for soving my problem.\n. @mythodeia  no,I am not loading gif when this issue happened.this is my code ````UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:reuseIdentifier forIndexPath:indexPath];\n``````\n//clear Subviews\n[cell.subviews enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {\n[obj removeFromSuperview];\n\n}];\n[cell setBackgroundColor:[UIColor whiteColor]];\nNSDictionary *dic = [self.resourceArray objectAtIndex:indexPath.row];\nif (self.resourceType == 0) {\nUIImageView *imageView = [[UIImageView alloc] initWithFrame:cell.bounds];\nNSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@\"%@%@\",kNetPath_Code_Base,[dic valueForKey:@\"cover\"]]];\n[imageView sd_setImageWithURL:url placeholderImage:[UIImage imageNamed:@\"gukexiangqing_icon_list_photo\"]];\n[cell addSubview:imageView];\n\n} else {\nBorderView *borderView = [[BorderView alloc] initWithFrame:cell.bounds];\n[borderView setBackgroundColor:[UIColor whiteColor]];\nborderView.borderInsets = UIEdgeInsetsMake(0, Margin_Left, 1.f, 0);\n\nUILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(Margin_Left, 0, borderView.frame.size.width- 50.f, borderView.frame.size.height)];\nlabel.text = [dic valueForKey:@\"name\"];\nlabel.font = [UIFont systemFontOfSize:13.f];\n[borderView addSubview:label];\n\nUIImage *image = [UIImage imageNamed:@\"wodeguke_icon_info\"];\nUIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(label.frame.size.width + (50.f - image.size.width) / 2, (label.frame.size.height - image.size.height) / 2, image.size.width, image.size.height)];\nimageView.image = image;\n[borderView addSubview:imageView];\n\n[cell addSubview:borderView];\n\n}\nreturn cell;````\n``````\nit's really a general use for load a image from server\n. @mythodeia sorry,it's too busy for recent time.For now,I have nothing changed,but it does't print anything in console. \n. @mythodeia  OK!Thanks for the awesome lib.\n. I check the steps of showing gifs,every time i set the animatedImage of FLAnimatedImageView it wll gain the memory.. @dreampiggy Ok~I will check again.Thanks very much.. ",
    "flovilmart": "Doesn't look related to SDWebImage\n. @clevelandlam Can you provide the code that generated those crashes so we can further investigate?\n. @timkoma the thread number doesn't help much. Can you provide the backtrace? \nIn the debugger, type bt and enter. That should print it \n. @cleverlandlam it seems you have an observer firing on the download operation start that leads to the crash. Without having your code, that seems pretty though to help you\n. It still seems unrelated to SDWebImage. Without the context where you call the framework, it's nearly impossible to understand why it triggers a CATransaction commit and that your constraints or views are mutated.\nCan you share the code responsible for the crash?\nOn Fri, Apr 3, 2015 at 1:02 PM, timkoma notifications@github.com wrote:\n\nException Backtrace:\n1 CoreFoundation  exceptionPreprocess + 132\n2 libobjc.A.dylib objc_exception_throw + 56\n3 CoreFoundation  __NSFastEnumerationMutationHandler + 136\n4 Foundation  -[NSISEngine chooseOutgoingRowHeadForIncomingRowHead:] + 296\n5 Foundation  -[NSISEngine minimizeConstantInObjectiveRowWithHead:] + 176\n6 Foundation  -[NSISEngine tryUsingArtificialVariableToAddConstraintWithMarker:rowBody:usingInfeasibilityHandlingBehavior:mutuallyExclusiveConstraints:] + 284\n7 Foundation  -[NSISEngine tryToAddConstraintWithMarker:expression:integralizationAdjustment:mutuallyExclusiveConstraints:] + 680\n8 Foundation  -[NSLayoutConstraint addLoweredExpression:toEngine:integralizationAdjustment:lastLoweredConstantWasRounded:mutuallyExclusiveConstraints:] + 316\n9 Foundation  -[NSLayoutConstraint _addToEngine:integralizationAdjustment:mutuallyExclusiveConstraints:] + 256\n10    UIKit   -[UIView(UIConstraintBasedLayout) _layoutEngine_didAddLayoutConstraint:roundingAdjustment:mutuallyExclusiveConstraints:] + 452\n11    UIKit   -[UIView(UIConstraintBasedLayout) _constraints_didChangeAutoresizingConstraintsArrayForContainedView:] + 248\n12    UIKit   -[UIView(UIConstraintBasedLayout) _updateAutoresizingConstraints] + 104\n13    UIKit   -[UIView(AdditionalLayoutSupport) updateConstraints] + 124\n14    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 244\n15    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n16    CoreFoundation  CFArrayApplyFunction + 64\n17    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n18    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n19    CoreFoundation  CFArrayApplyFunction + 64\n20    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n21    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n22    CoreFoundation  CFArrayApplyFunction + 64\n23    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n24    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n25    CoreFoundation  CFArrayApplyFunction + 64\n26    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n27    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n28    CoreFoundation  CFArrayApplyFunction + 64\n29    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n30    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n31    CoreFoundation  CFArrayApplyFunction + 64\n32    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n33    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n34    CoreFoundation  CFArrayApplyFunction + 64\n35    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n36    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n37    CoreFoundation  CFArrayApplyFunction + 64\n38    UIKit   -[UIView(AdditionalLayoutSupport) _internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 144\n39    UIKit   -[UIView(AdditionalLayoutSupport) _updateConstraintsIfNeededAccumulatingViewsNeedingSecondPass:] + 140\n40    Foundation  -[NSISEngine withBehaviors:performModifications:] + 132\n41    UIKit   -[UIWindow(UIConstraintBasedLayout) updateConstraintsIfNeeded] + 224\n42    UIKit   -[UIWindow(UIConstraintBasedLayout) layoutSublayersOfLayer:] + 88\n43    QuartzCore  -[CALayer layoutSublayers] + 180\n44    QuartzCore  CA::Layer::layout_if_needed(CA::Transaction) + 296\n45    QuartzCore  CA::Layer::layout_and_display_if_needed(CA::Transaction_) + 28\n46    QuartzCore  CA::Context::commit_transaction(CA::Transaction_) + 276\n47    QuartzCore  CA::Transaction::commit() + 420\n48    QuartzCore  CA::Transaction::observer_callback(__CFRunLoopObserver_, unsigned long, void*) + 76\n49    CoreFoundation  __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION + 28\n50    CoreFoundation  __CFRunLoopDoObservers + 368\n51    CoreFoundation  __CFRunLoopRun + 760\n52    CoreFoundation  CFRunLoopRunSpecific + 448\n53    CoreFoundation  CFRunLoopRun + 108\n54    HomeTeam    -SDWebImageDownloaderOperation start\n55    Foundation  __NSOQSchedule_f + 72\n56    libdispatch.dylib   _dispatch_client_callout + 12\n57    libdispatch.dylib   _dispatch_async_redirect_invoke + 148\n58    libdispatch.dylib   _dispatch_client_callout + 12\n59    libdispatch.dylib   _dispatch_root_queue_drain + 552\n60    libdispatch.dylib   _dispatch_worker_thread2 + 72\n61    libsystem_pthread.dylib _pthread_wqthread + 352\n62    libsystem_pthread.dylib start_wqthread + 0\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1013#issuecomment-89354890\n. This is why your code could be helpful.\n\nWhy can\u2019t you share a piece of it?\nKeep in mind that your error is likely to a misusage of SDWebImage, not a bug in the framework.\nI\u2019ll gladly help you to find it.\nOn Fri, Apr 3, 2015 at 2:46 PM, timkoma notifications@github.com wrote:\n\nI can't share the code, but why it starts from SDWebImageDownloaderOperation start?\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1013#issuecomment-89388949\n. And seeing the code you provided, I can assure you that it should be properly working (I have the exact same calls).\u00a0IMHO, something\u2019s going on with the usage more than the framework itself.\n\nAre all your layout constraints properly set? Do you have runtime disabled constraints?\nThe crash is related to the fact that there\u2019s a relayout happening :\n43 QuartzCore -[CALayer layoutSublayers] + 180\nthe relayout is not explicitly called by start] but by\n49 CoreFoundation __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION + 28\nWhen the layoutSublayers occurs, something gets mutated along the way. Likely to be constraints:\n13 UIKit -[UIView(AdditionalLayoutSupport) updateConstraints] + 124\nAnd more precisely:\n12 UIKit -[UIView(UIConstraintBasedLayout) _updateAutoresizingConstraints] + 104\nMy guts tells me that some constraints are broken in you collection view, cells or header view.\nOn Mon, Apr 6, 2015 at 9:57 AM, timkoma notifications@github.com wrote:\n\nI think that it is related to SDWebImage because it starts from SDWebImageDownloaderOperation's start method\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1013#issuecomment-90071989\n. Spec available here; https://wiki.mozilla.org/APNG_Specification, but if the plan is to remove GIF support as per #945  , I don't really see the point in adding that feature now, and it's opened in Flipboard/FLAnimatedImage#4\n. @bpoplauschi : There are some problems with the Travis CI build, but no tests failed.\n\nThe framework is not tested against the test suite, but that should be easy to implement with a simple processor macro to test against the framework instead of the static lib.\nDo you want me to check that? \n. @rromanchuk it's working fine, it's in production in an app now :)\n. @bpoplauschi Looks like adding the WebImage scheme to the workspace did the trick\n. @bpoplauschi NP :)\n. @KoCMoHaBTa  Use the module WebImage instead of the static lib and you should be fine.\n. I've added a framework build scheme that builds WebImage.framework and doesn't break the debugger.\nYou can import it in your swift file with\nimport WebImage\nOn Thu, May 7, 2015 at 5:48 PM, James Hickman notifications@github.com\nwrote:\n\n@flovilmart  @KoCMoHaBTa  Late to the party, but having the same issue. I installed the latest version of SDWebImage using cocoapods yesterday and now having the debugger errors. What did you mean by: \n\nUse the module WebImage instead of the static lib and you should be fine.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1074#issuecomment-100029704\n. Dunno about cocoapods. Works perfectly with Carthage\n\n\nOn Thu, May 7, 2015 at 5:57 PM, James Hickman notifications@github.com\nwrote:\n\nThat's included in the current cocoa pod? Tried adding and failed 'No such module WebImage'.\nDo I still need to import this in the bridging header?: #import \nThanks for the quick response!\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1074#issuecomment-100032407\n. iOS 7 doesn't support dynamic frameworks, so I guess I can't go really forward from there.\n\nIf you're targeting ios7 with swift code, I guess your best option is to use the cocoapods with the broken headers and let the debugger complain :)\nWhat was the fix you provided @Milen ?\nOn Thu, May 7, 2015 at 6:52 PM, James Hickman notifications@github.com\nwrote:\n\n@KoCMoHaBTa Thanks for all the help, I will keep playing around with it.\n@flovilmart Yes, please add support for cocoapods and iOS 7! Still a lot of companies using those combinations and would be super helpful!\nThanks again for the support guys!\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1074#issuecomment-100041523\n. Fork mine, and PR on my branch :)\n\nOn Thu, May 7, 2015 at 7:06 PM, Milen Halachev notifications@github.com\nwrote:\n\n\nThe fix for this is to change line 16 in SDWebImageCompat.h\nfrom: \nif __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_5_0\nerror SDWebImage doesn't support Deployement Target version < 5.0\nendif\nto \nif __IPHONE_OS_VERSION_MIN_REQUIRED != 20000 && >__IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_5_0\nerror SDWebImage doesn't support Deployement Target version < 5.0\n#endif\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1074#issuecomment-100043640\n. Actually you should PR on the master as it affects all versions :)\n. Yeah sure :) I was thinking about my Carthage / WebImage branch, but it's been merged\n\n\nOn Thu, May 7, 2015 at 7:24 PM, Milen Halachev notifications@github.com\nwrote:\n\n@NitWitStudios Thanks\n@flovilmart Your fork's master is few years old. I think to submit PR on the original repository.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1074#issuecomment-100045638\n. This reenables the scheme and fix the carthage build error (Project \"SDWebImage.xcodeproj\" has no shared schemes)\n. There seems to be something odd that Xcode does by itself, moving the shared scheme from project to workspace, instead of duplicating it. I'll put a flag at Carthage for that, to enable build on shared schemes on workspace\n. @bassrock what's the problem with App Extensions? Could we only have 1 framework target that works all round instead of 2 targets?\n. Ok, that make sense.\n\nWe should check at runtime for sharedApplication so we have a single framework that work in every case\nOn Fri, Mar 20, 2015 at 1:54 PM, bassrock notifications@github.com\nwrote:\n\n@flovilmart There are about 4 places where SDWebImage calls sharedApplication for background tasks. sharedApplication can not be used in app extensions, like today views, watch extensions, or other frameworks.\nI made it a seperate target because I did not know of any other way to do this properly.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1082#issuecomment-84087560\n. @bassrock that should not interfere with Carthage as the only thing Carthage needs to build the framework is the shared scheme. \nI'd rather to keep everything under one roof instead of having multiple targets if that makes sense for you.\n\n@bpoplauschi what do you think?\n. Instead of adding the flag we could check for:\nClass UIApplicationClass = NSClassFromString(@\"UIApplication\");\nif(!UIApplicationClass || ![UIApplicationClass respondsToSelector:@selector(sharedApplication)]) {\n    return;\n}\n. Check it out there: https://github.com/flovilmart/SDWebImage/tree/AppExtensionSafe\n. I don't see the issue here\nOn Fri, Mar 20, 2015 at 4:36 PM, bassrock notifications@github.com\nwrote:\n\n@flovilmart so that won't work, when you check the app extension safe box in Xcode for the framework a build will complain because it checks at compile time.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1082#issuecomment-84138081\n. @bassrock with carthage the frameworks are built with the carthage tool so your project doesn't build the frameworks itself. In that case, Xcode can't complaint because it actually never builds the framework.\n. The solution I propose check at runtime the availability of UIApplication and sharedApplication, that can't lead to a rejection. And that disables the UIApplication related features, the same way your compile time flag does. The only difference being that the same framework will work in any environment\n. Ok that makes sense, Do you have treat warnings as error and \u201cRequire Only App-Extension-Safe API\u201d build setting to Yes?\n\nI,ve set the Require Only App-Extension-Safe API to NO and it runs properly\nas you can see there:\nWith the current settings. I believe we can circumvent the use of shared application with a perform selector if that what's you're worried about.\n\n. I've updated my branch with performSelector:@selector(sharedApplication) and the warning goes away, as well as the warning at link time with Require Only App-Extension-Safe-API =  YES\n. I really dunno you should ask them :)\nThe performSelector method is kinda dirty as it\u2019s runtime manipulation\nOn Fri, Mar 20, 2015 at 6:49 PM, bassrock notifications@github.com\nwrote:\n\nOk that sounds better then! Sweet! Now my question would be why did AFNetworking do the compile flags vs. this way. More so curiosity/specific reason for submission or something.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1082#issuecomment-84174214\n. Did you got real life approved apps with that strategy? I don't mind which one we use.\n\nOn Sat, Mar 28, 2015 at 3:20 PM, Ruslan Skorb notifications@github.com\nwrote:\n\n@flovilmart The method that you suggested is not correct, since the class UIApplication is available in App Extension and it responds to the method sharedApplication. But we have no right to use it because Apple will reject an application that will use this method.\nTo resolve this problem, you can use my category and simple condition:\nobj-c\nUIApplication *application = [UIApplication rsk_sharedApplication];\nif (application) {\n    // call any method of the app instance\n}\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1082#issuecomment-87287646\n. In both cases it's tomatos and tomatos.\n\nBoth check for availability of selector at runtime. Your implementation is pretty much the same in the end as the repondsToSelector calls the runtime underneath.\nOn Sat, Mar 28, 2015 at 3:20 PM, Ruslan Skorb notifications@github.com\nwrote:\n\n@flovilmart The method that you suggested is not correct, since the class UIApplication is available in App Extension and it responds to the method sharedApplication. But we have no right to use it because Apple will reject an application that will use this method.\nTo resolve this problem, you can use my category and simple condition:\nobj-c\nUIApplication *application = [UIApplication rsk_sharedApplication];\nif (application) {\n    // call any method of the app instance\n}\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1082#issuecomment-87287646\n. You,re taking a bullet for the team!\n\nI believe the restriction is meant to prevent any calls to sharedApplication from watch kit as it may crash the glance or the extension.\nI don\u2019t think having the code there would actually lead to a rejection, still I may be wrong \u00a0:)\nOn another note, the check is kinda messy and may be wrapped into a [UIApplication safeSharedApplication]\nOn Tue, Mar 31, 2015 at 3:07 PM, bassrock notifications@github.com\nwrote:\n\nI will be trying with @flovilmart's method to submit an app within the next few days with WatchKit and TodayView support. So far it works with Apple's TestFlight so we will see if it can make it past a real review.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1082#issuecomment-88211229\n. Awesome!\n\nOn Wed, Apr 8, 2015 at 5:12 PM, bassrock notifications@github.com wrote:\n\n@flovilmart well my app went into review this morning using this patch. We should have an answer soon.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1082#issuecomment-91038323\n. Hi @justinschier , it's been a while... We met at Gamification Conference at SF back 3 years ago!\n. @cwhstcnn basically when in app extensions, Apple forbids calling to [UIApplication sharedApplication] as it doesn't really make sense. The [UIApplication sharedApplication] is the host app, and an extension can't really call any methods on it as it's likely not being in the same memory space. \n\nSo what I did was make sure that features relying on UIApplication were properly not called at runtime but adding the runtime checks. Mostly it removes the backgroundTask management provided by the application when using SDWebImage into an app extension.\n@gwk I believe Applications and their extensions share the same folders (tmp, documents etc...) (a per documentation) so in all logic, they should share the same cache; therefore, the backgroundCleanDisk won't be skipped by the main application and cache will be properly cleaned. (Still I haven't checked)\n. Yeah, that's exactly the purpose. But why would it lead to instability 'during use'? Do you have examples? We have one extension going to review and live as we speak. We're waiting to hear back from it.\nOn Tue, Apr 14, 2015 at 9:30 AM, A UiBrian notifications@github.com\nwrote:\n\nOn 8.2 at least it is possible to call [UIApplication sharedApplication] inside an extension so these checks will pass when used in an extension. The net result is tricking the compiler into letting you use non-extension safe API which will pass app review (possibly) but could still lead to instability during use.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1085#issuecomment-92835676\n. What\u2019s your point here?\n\nOn Tue, Apr 14, 2015 at 9:54 AM, A UiBrian notifications@github.com\nwrote:\n\n\nA call to applicationDelegate will return nil\nHow openURL is meant to work inside an extension is undefined\n  NS_EXTENSION_UNAVAILABLE was presumably created for a reason, and given that [UIApplication sharedApplication] actually works inside of an extension the assumption is that there were problems there that Apple didn't want to address right now so they made it a compile time error.\n\n\nReply to this email directly or view it on GitHub:\n  https://github.com/rs/SDWebImage/pull/1085#issuecomment-92857699\n. Extensions can\u2019t start background tasks through sharedApplication, as it\u2019s not available.\n\nWe all agree a single build target is the way to go, so all sanity checks have to be performed at runtime. You\u2019re welcome to explore the issue :)\nI believe the current tests showed a proper behaviour on the simulator. As it wasn\u2019t impossible to test on real devices, that was our best shot to get a fellow use to get his extension in review. We\u2019ll see how the submission go and it will be easy to refactor/improve the code once we can confirm/infirm the workaround is properly designed.\nOn Tue, Apr 14, 2015 at 10:24 AM, A UiBrian notifications@github.com\nwrote:\n\nMore specific to this exact commit:\n- what happens when an extension starts a background task?\n- and then the extension is killed?\n  I don't know the answers to these questions, I could speculate, but I have no concrete knowledge. So for the sake of having a singular build target (which I agree is preferable) we're introducing an unknown quantity into our extensions and we're having to fake out the compiler to do so.\n\nReply to this email directly or view it on GitHub:\n  https://github.com/rs/SDWebImage/pull/1085#issuecomment-92870688\n. So what's your solution?\n\nOn Tue, Apr 14, 2015 at 11:30 AM, A UiBrian notifications@github.com\nwrote:\n\nThat's actually what I have been trying to convey: I have explored it further, and they can start background tasks because sharedApplication is available. Here is proof: https://github.com/auibrian/SafeExtension\nThe runtime checks do nothing, they always pass. That's my entire point.\nFurther, from past experience again: Apple don't seem to be checking overly hard for this, because even without using performSelector I've had an app approved where I unintentionally used sharedApplication from an extension. (You can work around the check by changing where/what you link etc) So I won't be surprised at all if the app is accepted but it will mean nothing.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1085#issuecomment-92910493\n. Alright!\n\nOn Tue, Apr 14, 2015 at 7:27 PM, bassrock notifications@github.com\nwrote:\n\nAND APPROVED :+1:\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1085#issuecomment-93109552\n. Good job man! Glad we could help!\n\nOn Tue, Apr 14, 2015 at 7:29 PM, bassrock notifications@github.com\nwrote:\n\nProcessing for the store right now but once its available: https://itunes.apple.com/us/app/disney-wait-times/id963982614?ls=1&mt=8\nIts (hopefully) the first DisneyLand Wait Time app for the \uf8ffWatch.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1085#issuecomment-93110101\n. So what's the alternative?\n\nOn Tue, Apr 14, 2015 at 7:55 PM, A UiBrian notifications@github.com\nwrote:\n\nAs I said, this isn't a surprise. I already had an app approved that uses extension unsafe API. That doesn't mean you should do it, that's the entire problem with this PR.\n\nOn Apr 14, 2015, at 7:27 PM, bassrock notifications@github.com wrote:\nAND APPROVED \n\u2014\nReply to this email directly or view it on GitHub.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1085#issuecomment-93117776\n. Yeah... The goal is that the community don't wonder about compiler warnings, Carthage builds properly, the framework works in all environment and that the framework don't lead to App Store rejection.\n\n\nSo far all of the above are OK. You're welcome to superseed the solution, and PR.\nOn Tue, Apr 14, 2015 at 7:57 PM, bassrock notifications@github.com\nwrote:\n\n@auibrian would be helpful if you could provide a solution\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1085#issuecomment-93117948\n. You're not giving answers. Your solution imposes a preprocessor macro, that leads to incompatibility with Carthage. Therefore, yours should not be accepted either. I'm open to solutions. I'm not blaming you on your PR that you're not Carthage compatible. So please, either be constructive, or let the maintainers decide wether it should be accepted or not. And tested in extensions, the behavior is fine, doesn't lead to instability or crash. provide some code that will force crash the extension or app. We'll refine the solution. I guess we can detect with another runtime attribute, property, class that we're running into an extension.\n\nOn Tue, Apr 14, 2015 at 8:10 PM, A UiBrian notifications@github.com\nwrote:\n\nPR'd in November: https://github.com/rs/SDWebImage/pull/953\nI also can't tell if you are being purposely obtuse: You are purposely circumventing a compiler warning in order to only have to compile something once, and in the process you are doing exactly what Apple have requested you not do: access sharedApplication. I've proven to you that the code WILL run in an extension and that your runtime check is not actually doing anything but your only concern is whether it passes app review. I don't think the community prefers potentially unsafe code to compiler warnings. Whether or not you made it past app review this is not a PR that should be accepted.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1085#issuecomment-93119491\n. The problem is plain simple:\n1. Single framework\n2. No warnings\n3. Extension and watch kit safe, at runtime and review\u00a0\n\nYou're welcome to come with a solution that solves all the above\nOn Tue, Apr 14, 2015 at 8:10 PM, A UiBrian notifications@github.com\nwrote:\n\nPR'd in November: https://github.com/rs/SDWebImage/pull/953\nI also can't tell if you are being purposely obtuse: You are purposely circumventing a compiler warning in order to only have to compile something once, and in the process you are doing exactly what Apple have requested you not do: access sharedApplication. I've proven to you that the code WILL run in an extension and that your runtime check is not actually doing anything but your only concern is whether it passes app review. I don't think the community prefers potentially unsafe code to compiler warnings. Whether or not you made it past app review this is not a PR that should be accepted.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1085#issuecomment-93119491\n. Perfect. Please merge :)\n. @joetam @auibrian There's no cache into the extensions as they share the app's sandbox, so it will be cleaned up by the app :)\n. I recall reading that in an extension programming guide for sharing resources across app and extensions but I may have misread. On another note, from https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionOverview.html#//apple_ref/doc/uid/TP40014214-CH2-SW6 \n: Perform long-running background tasks\nThe specifics of this limitation vary by platform, as described in the extension point chapters in this document.\n. @auibrian I get your point, that makes the system more predictable in any case if you wanna trigger the cache cleaning manually. The fact that it's added as a bg task is just to prevent it to be killed upon entering in background. \nI like your approach to the problem but long running bg tasks are not allowed in extensions as well. And we don't want to add compile time constants.\nFor the folder sharing, I may be mistaken.\n. I'll Check on the Simulator, I'll let you know.\n\nOn Wed, Jun 17, 2015 at 1:45 AM, Konstantinos K. notifications@github.com\nwrote:\n\n@auibrian Actually to be honest it never crossed my mind to manually deal with cleaning the NSCachesDirectory. I always left it to Apple to do the dirty work. As far as the sharing of the cache folder between app & extension if anyone find a definitive answer please share.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/pull/1182#issuecomment-112661690\n. yes, i'll have a look.\n\nWhat's the problem here?\n. Check the PR, we could also add WebP support for everyone right into WebImage\n. Do we want webP by default in every Carthage builds?\n. We could update that, PR welcome\n. ",
    "pjchavarria": "I have the same issue, using Autolayout with UICollectionViewCells, crashes occasionally too. If i remove sd_setImageWithURL it won't crash.\nUsing SDWebImage version 3.7.2\n. My problem was that i was calling collectionView.reloadData() from a background thread!\n. ",
    "TheoJL": "sd_setImageWithURL works excellent! The problem was that I used the same imageView for all three calls. I had the problem in another project with different images, but it wasn't updated or something. \nThanks @mythodeia and sorry for the fuss. Won't happen again. ;)\n. We use version 3.7.2 and we've experience the same thing. Happens very rarely so it's hard to reproduce.\nMaybe related: https://github.com/rs/SDWebImage/issues/1123\n. ",
    "rosamerinoclaros": "I downloaded the DSWebImage version 3.0 and I am getting the linker error. Is it only fixed if using Cocoa Pods? My project does not use it and I would like to add just the compiled framework...\n. ",
    "KeenanCassidy": "@bpoplauschi yes I found that my backend was not setting max_age at all, we assumed that if max_age was not set SDWebImage would act as if max_age is zero, but it is the opposite if max_age SDWebImage falls back to the cached image.\n. ",
    "marcustoy": "@mythodeia Thanks a lot! It solves the problem!!! You save my several hours of debugging and searching online. Thanks again!!\n. ",
    "siddhesh12": "Hi @mythodeia , \nI used above method, I followed almost all the tricks mentions over internet, but still problem exists. Is there any other solution for this ? \n. I got the solution for it. at the beginning I am calling sd_cancelImageLoadForState method. so when image gets download asynchronously  it will never assign it to different cell which was previously reused. This was only used to happen when some cell do not have url from data model. \n. ",
    "wangweiarr": "sorry about this outside topic, but I think either the 'completion block' or the delegate about 'transformDownloadedImage' can't work well.\nThe completion block operation after target.image = image, you can see the changing process of adding rounded corner.\nThe delegate can't controlling with given uiview like completion block..\nI mean a function like '- (void)sd_setImageWithURL:(NSURL *)url completed:(SDWebImageCompletionBlock)completedBlock drawing:(..) drawingBlock',the drawingBlock work before set the image to view and after download image.\n. I know your mean, but maybe I can't make myself clear. \nIn UIImageView+WebCache:\n- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock {\n\u2026\u2026\n    if (url) {\n        __weak UIImageView *wself = self;\n        id  operation = [SDWebImageManager.sharedManager downloadImageWithURL:url options:options progress:progressBlock completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n            if (!wself) return;\n            dispatch_main_sync_safe(^{\n                if (!wself) return;\n                if (image) {\n                    wself.image = image;\n                    [wself setNeedsLayout];\n                } \n                \u2026\u2026\n                if (completedBlock && finished) {\n                    completedBlock(image, error, cacheType, url);\n                }\n            });\n        }];\n        [self sd_setImageLoadOperation:operation forKey:@\"UIImageViewImageLoad\"];\n    } else {\n        \u2026\u2026\n    }\n}\n\nSee? The   after     and your 'completedBlock' maybe take some time, so I really see the transformation process of addCorner.\nOn the other hand, although\ncan work well, but I need deal with many different picture(need addCorner or not), I can't determines witch picture should add corner with the param like 'image' or 'imageURL',I just want to pass a operation block while call sd_setImageWithURL: right away.\nStill thank you for patience answer!\n. ",
    "wangjianxing": "I set imageview to nil, then update the imageView.This work for me.\n[self.imageView sd_setImageWithURL:nil placeholderImage:[UIImage imageNamed:@\"mine_icon_user\"]];   //set nil image\n[self.imageView sd_setImageWithURL:[NSURL URLWithString:rowDic[@\"image\"]] placeholderImage:[UIImage imageNamed:@\"mine_icon_user\"] options:SDWebImageRefreshCached];\n. ",
    "gjritter": "Thanks @mythodeia and @timkoma - I went ahead and created a new prefetcher for situations like this to prevent the shared prefetcher from cancelling the operations started by UIImageView+WebCache.\n. ",
    "Pash237": "I have checked this problem with the latest changes (commit 9cc8269dcdcf7dc5fd42abb5adbd911b835bb21b), and things are the same.\nSimplest testcase:\n```\nUIImageView imageView1 = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];\nUIImageView imageView2 = [[UIImageView alloc] initWithFrame:CGRectMake(100, 0, 100, 100)];\n[self.view addSubview:imageView1];\n[self.view addSubview:imageView2];\nNSString *urlString = @\"http://upload.wikimedia.org/wikipedia/commons/6/6b/Big_Sur_June_2008.jpg\";\nurlString = [urlString stringByAppendingFormat:@\"?%d\", arc4random_uniform(10000)];\n[imageView1 sd_setImageWithURL:[NSURL URLWithString:urlString]];\n[imageView2 sd_setImageWithURL:[NSURL URLWithString:urlString]];\ndispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n    [imageView1 sd_setImageWithURL:[NSURL URLWithString:urlString]];\n});\n```\nThe first ImageView will receive the callback and display an image, but the second ImageView will be left empty.\nAnd sometimes none of the images are displayed \u2013 I haven't seen this in latest CocoaPods version.\n. ",
    "pasevin": "I have noticed this as well, it is very hard to catch this bug thou...\n. you should use sd_setImageWithURL vs setImageWithURL\n. ",
    "MobileMon": "@mythodeia it is definitely SDWebImage\nCatch the error using the method describe here:\nhttp://stackoverflow.com/questions/19411675/ios-animations-stop-working-in-my-app-in-ios7\nAssertion thats thrown is:\nmalloc: * error for object 0x7fcd79b8fb80: pointer being freed was not allocated\n* set a breakpoint in malloc_error_break to debug\n. @mythodeia \nits the progress and completion blocks that dont get called on the main thread. i think this fixes the issue\nUPDATE: Nevermind didn't fix\n```\n progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n                                         dispatch_async(dispatch_get_main_queue(), ^{\n                                             if (!activityIndicator) {\n                                             [activityIndicator startAnimating];\n                                         }\n                                     });\n                                 }\n                                completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                                    dispatch_async(dispatch_get_main_queue(), ^{\n                                        [activityIndicator removeFromSuperview];\n                                        activityIndicator = nil;\n\n                                    });\n                                }];\n\n```\n. ",
    "Japspre": "@MobileMon It seems that adding the dispatch to the main queue does fix the problem for me.\n. @bpoplauschi Good to know. \nAfter adding the dispatch the problem didn't occur anymore\n. ",
    "oday0311": "I have updated to the latest version , the crash above disappear. but i Have a lot of crash like this:\nany idea or does it have any relationship with this crash?\nThread : Crashed: com.apple.root.user-initiated-qos.overcommit\n0  libobjc.A.dylib                0x39063f46 objc_msgSend + 5\n1  UIKit                          0x2e6dc815 -[UIImage dealloc] + 192\n2  libobjc.A.dylib                0x39071d5f objc_object::sidetable_release(bool) + 166\n3  Pinnacle                       0x002a1a75 __destroy_helper_block_17 (UIImageView+WebCache.m)\n4  libsystem_blocks.dylib         0x395feae1 _Block_release + 216\n5  Pinnacle                       0x0029c19d __destroy_helper_block_126 (SDWebImageManager.m)\n6  libsystem_blocks.dylib         0x395feae1 _Block_release + 216\n7  CoreFoundation                 0x2b0c7ffd CFRelease + 600\n8  CoreFoundation                 0x2b0e012f -[__NSDictionaryM dealloc] + 134\n9  libobjc.A.dylib                0x39071d5f objc_object::sidetable_release(bool) + 166\n10 CoreFoundation                 0x2b0c7ffd CFRelease + 600\n11 CoreFoundation                 0x2b0db687 -[__NSArrayI dealloc] + 66\n12 libobjc.A.dylib                0x39071d5f objc_object::sidetable_release(bool) + 166\n13 libobjc.A.dylib                0x390721a9 (anonymous namespace)::AutoreleasePoolPage::pop(void*) + 404\n14 libdispatch.dylib              0x395cc4d1 _dispatch_root_queue_drain + 1724\n15 libdispatch.dylib              0x395cd3c3 _dispatch_worker_thread3 + 94\n16 libsystem_pthread.dylib        0x39728dc1 _pthread_wqthread + 668\n. \nthere is little information about this crash..\nI trace the bug using crashlytics, but by now, it is the most ofter crash cases in my app .\nevery 10k app sesssions, have close to 15 crash , the reproduce rate is 15/10000.\nit may be much low in other app , my app is very heavy in using picture display.\n. you can check the crash stack, It is not from my code, i think it is more related to sdwebImage.\n. not,,,currently not using progressblock nor completedBlock, IF I did so , the crash stack should start from the function i using , besides, i search the project, make sure not using the block currently.\n. not any clue, still the biggest crash source of my app. 0.1% crash rate.\n. nothing todo with the code,\" else\", i try a demo, but much harder to repeat the bug, \nmay be it is the network's problem, please close this, will give your more information if i can  repeat any cases.\nThx\n. ",
    "scottbyrns": "I've noticed a substantial increase in unrecognized selector exceptions with an update to the latest sdk. It may be that this project has relied on apis that are changing underneath it.\n. ",
    "ashfurrow": "I seem to be experiencing this problem, too. The completion block is never actually invoked, either. \n. Oh very cool, thanks! Maybe supplement the existing comment with a pointer to use this? \ud83d\ude3b\n. Super helpful \u2013 thanks @rromanchuk !\n. ",
    "evertonfraga": "That worked! I was using an old version of the lib. I had it updated and now it's working fine.\nThanks man\n. ",
    "syrakozz": "tx\n. ",
    "heistings": "Sorry, I don't know swift very well. But I guess you have used reusable cell. So the logoHome may doing more than one image downloading job.\n. Do you mean the cell always show the wrong image when you scoll down and up?\n. Can you figure out the URL? And then you can set it to a image view without table cell in some other place.\n. Can this bug be reproduced on your test device? And I think the bug has chance to occur on the server as well.\n. Not necessary I think.\n. My pleasure:)\n. Please how can I relate this pull request to issue #1055?\n. I think this is out of our scope.\n. Once this problem occurs, I select a row from tableview, and push to the next view\nthe imageview in next view also NOT display. \nwhy?\nIt seems that the image download is still not finished. Since you use the dequeueReusableCellWithIdentifier method, a cell may be called sd_setImageWithURL many times. I'm thinking of whether this issue can be reproduced by calling the sd_setImageWithURL of image view not on a cell.\n. Oh, I can not reproduce this bug by callingsd_setImageWithRUL 1000 times.\n. @dfing  Never mind :) waiting for your news.\n. Oh, you have to remote the codes:\nSDWebImageManager *sharedManager = [SDWebImageManager sharedManager];\n    [sharedManager cancelAll];\nBecause every time you push the detail, the requests are canceled. And when you come back, the requests have already been canceled, so they will no longer be finished.\n. @mythodeia in viewWillDisappear\nobjective-c\n-(void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:YES];\n    SDWebImageManager *sharedManager = [SDWebImageManager sharedManager];\n    [sharedManager cancelAll];\n}\n. In the ViewController class.\n. I just removed the codes, and the demo works fine for me:\n//    SDWebImageManager.sharedManager.imageDownloader.executionOrder = SDWebImageDownloaderLIFOExecutionOrder;\n-(void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:YES];\n//    SDWebImageManager *sharedManager = [SDWebImageManager sharedManager];\n//    [sharedManager cancelAll];\n}\n- (void)flushCache\n{\n//    [SDWebImageManager.sharedManager.imageCache clearMemory];\n//    [SDWebImageManager.sharedManager.imageCache clearDisk];\n    NSLog(@\"flushCache\");\n}\n. I think there is no need to set SDWebImageManager.sharedManager when you are only using methods like sd_setImageWithURL. \n. Seems there is no bug with SDWebImage? \n. I met the error below, about image not displayed:\nurl : https://s3.buy123.com.tw/images/item/46AAHRK_retina.png : error : Error Domain=NSURLErrorDomain Code=-1100 \"The operation couldn\u2019t be completed. (NSURLErrorDomain error -1100.)\"\nAnd I can not open the url with chrome.\n. @dfing So there is no bug with SDWebImage, is there?\n. You can select the cell, and waiting for the complete block to see what happened with the url\n[self.detailImg sd_setImageWithURL:[NSURL URLWithString:retina_url]\n                       placeholderImage:imageLoading\n                              completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL){\n                                  NSLog(@\"url : %@ : error : %@\", imageURL, error);\n                                  if (error != nil) {\n                                      [self.detailImg sd_setImageWithURL:[NSURL URLWithString:main_url] placeholderImage:imageLoading];\n                                  }\n                              }];\n. Or you can set a load failed image for cells who's url connection could not be finished successfully:\nobjective-c\n    __weak __typeof(cell) weakCell = cell;\n    [cell.imageView sd_setImageWithURL:[NSURL URLWithString:url] placeholderImage:imageLoading completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n        weakCell.imageView.image = [UIImage imageNamed:@\"LoadFailedImage\"];\n    }];\n. @dfing I think @mythodeia has gotten the point.\n. Pleasure with all you guys. :) And you can close this issue.\n. Solves no bug and serves no functional features.\n. -1\n. Do you mean dispatch_main_sync_safe and dispatch_main_async_safe ? Use dispatch_main_sync_safe to set sself.image from web to ensure [self sd_setImageLoadOperation:operation forKey:@\"MKAnnotationViewImage\"]; is run after block of dispatch_main_sync_safe.\n. It's hard to say dispatch_main_async_safe is faster than  dispatch_main_sync_safe, it's about synchronization and asynchronization things.\nIn particular, the NSOperationQueue code you give works just like dispatch_main_async_safe.\n``` objective-c\n    NSLog(@\"Before add queue.\");\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{\n    NSLog(@\"Queue block fired.\");\n}];\n\nNSLog(@\"After add queue.\");\n\n```\nResult\n2015-03-19 10:14:58.492 NSOperationQueueTest[923:32146] Before add queue.\n2015-03-19 10:14:58.493 NSOperationQueueTest[923:32146] After add queue.\n2015-03-19 10:14:58.501 NSOperationQueueTest[923:32146] Queue block fired.\n. I'm sorry, I just hardly to find out where is the method: sd_setImageUsingProgressWithURL ?\n. Some images blinks after appearing for a while when SDWebImageProgressiveDownload. \nIs this issue occurs on particular url?\n. The code below works well for me:\nobjective-c\n    NSString *urlString = @\"http://x1.zhuti.com/down/2013/3/17-win7/lf-1.jpg\";\n    [[self imageView] sd_setImageWithURL:[NSURL URLWithString:urlString] placeholderImage:nil options:SDWebImageProgressiveDownload];\n. What do you see when you are typing pod search SDWebImage in the shell?\n. ",
    "cnordvik": "I can understand that might happen, but when the app is restarted it seems to have the wrong image stored in it's internal cache for the URL. So the user will always see the wrong image for the URL until they delete the cache. Doesn't that indicate that the problem lies somewhere else? I can scroll fast, slow and do whatever and it works great for me. It's just a small part of our users that have this issue (we have about 1 million active ones). \n. Will see what I can do. And yes, once the wrong image is cached for that URL it stays like that. Here is the app but you probably won't be able to spot the error there since it happens for 1-2% of our users: \nhttps://itunes.apple.com/no/app/soccer-scores-pro-fotmob/id488575683?mt=8\n. No it cannot, and the server is static image files on Amazon S3 served via Cloudfront so pretty sure it's not there. I didn't have any issues with my own image downloading code but decided to switch to SDWebImage since it seemed like a good idea at the time :-) But I will try to investigate more what can cause this. \n. I think I had another image download library interfere with it. I removed the other library and the test users says its fine now. Will go live with it next week so hopefully it is fixed. \n. We actually still have this issue for 1% of our users. We hid an \"easter egg\" in the app so if you click a button 5 times it will append a random GUID to all image URLs. So each time we get a user complaining we make him hit the button 5 times to get proper images. It's a nightmarish hack but as nobody else is experiencing this and it's impossible to reproduce then it was the best we could come up with :-/\nAnd just to add, we use the exact same images on Android with Picasso and never had an issue with 4 million users...\n. ",
    "Damol": "@cnordvik Did you find anything while investigating this? :)\nI'm pretty much in the same situation as you were, a small (but growing) portion of our users started reporting this, so I just started investigating, first thing was to see if there's any open issue here, and this one has symptoms just like my case.\nNote: We are currently using 3.7.1, but I plan to upgrade to 3.7.2 in the coming days.\n. I see, that's a good clue I can start with when investigating more. Thanks for your answer! :)\n. ",
    "flashlib": "@cnordvik Why remove other library can fix this issue? Did these libraries integrate SDWebImage?\n. @cnordvik Thanks for your quick reply! I will try some nightmarish hack solution:)\n. ",
    "rakii": "I am facing the same issue when trying to load a gif from bundle to imageView\n. ",
    "thedrick": "@rs can you push a new tag / pod trunk push? thanks.\n. @NKorotkov if you'd like to use the UIImageView with a background color, you can use the [UIView transitionWithView:duration:options:animations:] method. Here's our category on UIImageView which does what you describe\n``` objc\n- (void)md_setImageURL:(NSURL )imageURL\n      placeholderImage:(UIImage )placeholderImage\n              animated:(BOOL)animated\n            completion:(void (^)(NSError ))completion {\n  void (^safeCompletion)(NSError error) = ^(NSError *error){\n    if (completion) {\n      completion(error);\n    }\n  };\nself.backgroundColor = [UIColor grayColor];\nif (!animated) {\n    [self sd_setImageWithURL:imageURL\n            placeholderImage:placeholderImage\n                     options:SDWebImageRetryFailed\n                   completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL imageURL) {\n      safeCompletion(error);\n    }];\n  } else {\n    [self sd_setImageWithURL:imageURL\n            placeholderImage:placeholderImage\n                     options:SDWebImageRetryFailed\n                   completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL imageURL) {\n      if (error) {\n        NSLog(@\"Error loading image with URL %@ -- %@\", imageURL, error);\n        safeCompletion(error);\n      } else if (cacheType != SDImageCacheTypeNone) {\n        // Don't animate in the image if it was cached\n        self.backgroundColor = [UIColor clearColor];\n        safeCompletion(nil);\n      } else {\n        [UIView transitionWithView:self\n                          duration:0.20\n                           options:UIViewAnimationOptionTransitionCrossDissolve\n                        animations:^{\n                          self.backgroundColor = [UIColor clearColor];\n                          self.image = image;\n                        } completion:nil];\n        safeCompletion(nil);\n      }\n    }];\n  }\n}\n```\n. Sorry, I've never actually worked on an existing Pod library, not sure where the merge conflicts are coming from or how to resolve :( \n. ",
    "TAKeanice": "I\u00b4d love to provide you with a pull request! But it will take some time until I have one ready, since the idea for that came to me today, and I have not done anything with APNGs yet. There is some APNG Disassembler, maybe I can use some code from there. Do you know any existing APNG iOS Library or similar? Safari in iOS8 supports APNGs, but I don\u00b4t think it is possible to leverage that (and it would not be compatible with any prior versions, then)\n. Sounds reasonable, so I will close this request and instead look for supporting FLAnimatedImage with this. I've already read the specs, and looked at the code of an APNG disassembler, but I'm not sure ho to leverage all features of the format with UIImage or UIImageView\n. ",
    "aodhol": "Any plan to support APNG?. ",
    "iOSDeveloperL": "I've the same problem. It fails to update the Pods project.\n[!] Unable to satisfy the following requirements:\n- SDWebImage (= 3.7.2) required by Podfile\n. ",
    "zadr": "@rromanchuk Thanks for the note. It's definitely a valid suggestion\u2014 and what wound up happening on the project I needed the tag for.\nMy qualm is that explicitly specifying a hash is nonstandard behavior. Ideally, the pod should be able to match the example spec as much as possible. That isn't to say that specifying a hash is undocumented or unsafe, only that it is undesirable (to me).\n. ",
    "Mutix": "How about adding/opening the API to store (an image's) NSData directly in the cache? \nWe're currently facing a use case where we extract images from a zip and want to add them to the SDImageCache. Right now, we have to create instances on UIImages with the data, then call storeImage: for each. We're dealing with several hundred images, so it would actually be useful to be able to directly store the NSData into the cache instead of having to allocate hundreds of UIImage instances.\n. Thanks, working on a PR as we speak :+1: \n. :+1: \nI'd like to see this merged in, much easier to have this API rather than having to manage all the operations created by downloadImageWithURL:options:progress:completed: ourselves.\nNeeds a few minor changes as indicated in the line comments, apart from that - looks good to me.\n. :+1:\n. @bpoplauschi any thoughts on this?\n. Ok no problem, I'll align to your coding style. Is there a doc somewhere where the style to adhere to is defined?\n. I imagine the change might be due to the version of Cocoapods I used to build the test project. I believe it was 0.39.0. Cocoapods adds these build phases when running 'pod install'\n. See line comment above - this is a build phase generated by Cocoapods pod install\n. I'll also make sure there's a new line here\n. To be coherent with the rest of the project, function name should start with lowercase.\nAlso, might be nice to match function name and comment with the cancel function already exposed in the SDWebImageManager class?\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageManager.h#L225\n. Same observation as header\n. ",
    "NomiJ": "Then why does i see the following image once i click # 9\nhttps://cloud.githubusercontent.com/assets/8808212/6652145/a2bfb2a4-ca86-11e4-8fbd-ef4f0a5a65b3.png \n. ",
    "theprojectabot": "I had this crash on the call back for cancel() btw when I used this pull request in my fork.  Try doing a sd_setImageWithURL nested within the completion block of another sd_setImageWithURL - both setting image on the same weakImageView.\n. ",
    "philipengberg": "How is this pull request coming @timkoma?\n. What is the status? @timkoma \n. ",
    "LeffelMania": "What's the status of this request? I'm seeing this issue quite a bit in my table views, and seems like a generally pretty important fix to incorporate.\n. ",
    "twilly86": "That gist isn't loading for me.  I just see a blank page.\n. ",
    "objectmethod": "That's very helpful, @mythodeia.  I have tried with the latest build and using the advice of @rromanchuk.  Using the latest build and instructing SDWebImage to not decompress the image prevented the crash at that point.  I'm still left with the issue of how to display such a large image, but that seems beyond the scope of this wonderfully-built library!! :)  Thanks everyone for the support and feedback.\n. ",
    "zhangxiaolian1991": "@mythodeia  @objectmethod  I have try @rromanchuk 's advice,but that seem no use. The memory is still very high.Any else solution?\n. @mythodeia  I use @objectmethod 's demo to test. so the size is 10000\u2006\u00d7\u200610000\n.  Thanks @mythodeia ,Sometimes GIF will cause hight memory,any suggestion?\n. I ever use this but scroll is not smooth\n. ",
    "dfing": "@mythodeia  I do not know how to copy better, but I will try...\nI try to do your suggestion\nI remove the SDWebImageHighPriority , and run, I still get same problem.\nAnd after I try to change the queue mode, I can't add code\nSDWebImageManager.sharedManager.imageDownloader.queueMode = SDWebImageDownloaderLIFOQueueMode;\nso I add code like that\nSDWebImageDownloader *imagedownloader = [SDWebImageDownloader sharedDownloader];\nimagedownloader.executionOrder = SDWebImageDownloaderLIFOExecutionOrder;\nI get same problem, did I add wrong code? :( \nOnce this problem occurs, I select a row from tableview, and push to the next view\nthe imageview in next view also NOT display. \nwhy?\nbtw\nAt start, I think the last image has high Priority, so I use SDWebImageHighPriority, is wrong?\n. @mythodeia  @heistings  sorry, I reply late.\nI was run the example project, and It seem to no occur the problem.\nSo I try to reproduce my bug in demo project, but I'm not finished.\nI'm trying\n. I try to reproduce the bug, you can clone demo project from my github\nhttps://github.com/dfing/myDemo\nIt's only 264 items, and It occur the problem\nwhen I scroll down the tableview fast, I will get the bug\nOh, I don't understand why :( \nplease help me, thank you a lot!!!!!\n. I add a few code at viewWillDisappear: , like that\n-(void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:YES];\n    SDWebImageManager *sharedManager = [SDWebImageManager sharedManager];\n    [sharedManager cancelAll];\n}\nI think when I push the next view, I must to cancel all download task\nso that I use sd_setImageWithURL in DetailViewController.m of myDemo, I think It will work.\nBut, I seem to be thinking wrong, because the imageView in DetailViewController also NO reaction.\nWhen I return tableview, I log currentDownloadCount, I get 0 download.\nI scroll the tableview, It will start downloading the image again, right?\nBut the imageView no more display image.\nmn..The reason that is this thread blocking??\n[Edit]\nI found It will start downloading, and a while the downloads are finished!\n(I log currentDownloadCount, when It start downloading that count is 6, after finished count become 0 )\nbut imageView NO display image.\n.  @mythodeia  I don't understand why I do not need to add:\nif (cell == nil) {\n        cell = [[DemoTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@\"ItemCell\"];\n    }\nIs it not for UITableViewCell reuse ??\nI also think about server return time, but sometimes I found even download comeback, it still not display image. \n(I log currentDownloadCount, when It start downloading that count is 6, after finished count become 0 )\n. @heistings  a few retina.png are not exist.\n. I remove the code:\nif (cell == nil) {\n        cell = [[DemoTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@\"ItemCell\"];\n    }\nand \nSDWebImageManager *sharedManager = [SDWebImageManager sharedManager];\n    [sharedManager cancelAll];\nand\nSDWebImageManager.sharedManager.imageDownloader.executionOrder = SDWebImageDownloaderLIFOExecutionOrder;\nbut somethings it still not display image even the currentDownloadCount is 0.\n. @mythodeia  @heistings  I think seem to no bug with SDWebImage, I will think about that if it is the s3 problems. Thank you two, you help me a lot!!  Thanks again!!\n. ",
    "KoCMoHaBTa": "Sorry for the late response.\nOriginally i was not using the static library, but was copying the files into a swift framework, which i created by my own. \nRight now i have migrated the lib to be a dependency for my project and link against the WebImage framework. \nIt appears to be fine for now. \nThanks!\n. Probably the cocoapods version automatically link against the static library, huh?!? and this is why you cannot import the swift module, because it does not exist when you are building.\n@flovilmart Carthage FTW :)\nAnother option will be to manually add WebImage.framework as target dependency and link your target against it, instead of using cocoapods for it.\n. \n\n@NitWitStudios  Just copy or link the SDWebImage project to yours. Then add WebImage.framework as target dependency and link against it.\nIf you are copying the project - make sure you are have all targets unchecked.\n. Umm, yes, you are supporting iOS 7. Well you have 2 options:\n1. Use the workaround that i have provided in the issue definition and manually link against the static lib, without cocoapods in order to avoid changes when updating cocoapods.\n2. Google for a way how to use swift frameworks in iOS 7. There was a way when swift was released initially at version 1.0 w/ Xcode 6.0 w/ iOS 8.0 and it was working for iOS 8.1 w/ Xcode 6.1. Just lookup for this, it may still work.\nI would suggest you the first option.\n. @flovilmart What do you think about applying the fix that i have initially provided? There are still a lot of developers targeting iOS 7 and/or using cocoa pods. \nI personally think that it won't affect/break anything.\n. Its in the issue opening post from me:\n\nThe fix for this is to change line 16 in SDWebImageCompat.h\nfrom: \nif __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_5_0\nerror SDWebImage doesn't support Deployement Target version < 5.0\nendif\nto \nif __IPHONE_OS_VERSION_MIN_REQUIRED != 20000 && __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_5_0\nerror SDWebImage doesn't support Deployement Target version < 5.0\nendif\n. Which one is your branch?\n. @NitWitStudios Thanks\n@flovilmart Your fork's master is few years old. I think to submit PR on the original repository.\n. Submitted a Pull Request: #1138 \n. \n",
    "nandodelauni": "Actually I am not using progressView at all because option SDWebImageProgressiveDownload makes it useless most of the time showing part the image (low/decent quality or most of the image) and the progressView at a time. I am going to edit removing the noise.\n. sorry @mythodeia will check tomorrow morning and come back to you. thanks!\n. Images loaded in a UICollectionView (full width, scroll vertically) works just fine, however the same images blinks when presenting the same cells in UIPageViewController (horizontall scroll) and every page appears (as shown in the initial video) so the issue may be with the page being refreshed or something, the image should be cached and no apparently blink should happen even refreshing the cell tho.\n. I'm closing this and investigate further on the UIPageViewController thing. Will post here if find anything interesting. Thanks! :+1: \n. ",
    "tedyyu": "\nThe linker flags I set, having the exception.\n. @bpoplauschi , I do exactly what you said, and it still failed at the same point.\nYou can get my simple demo project with only a UIImageView from following link:\nhttp://share.weiyun.com/f6d3522da36b8e973a83aa05707179ee\nbtw, my Podfile:\nplatform :ios, '7.0'\npod \"SDWebImage\"\nand cocoapod installs 3.7.2:\nDownloading dependencies\nInstalling SDWebImage (3.7.2)\n. sorry about that. Here is dropbox link:\nhttps://www.dropbox.com/s/jpguvqivu5wfubr/SDWebImageDemo.zip?dl=0\n. ",
    "ruslanskorb": "@flovilmart The method that you suggested is not correct, since the class UIApplication is available in App Extension and it responds to the method sharedApplication. But we have no right to use it because Apple will reject an application that will use this method.\nTo resolve this problem, you can use my category and simple condition:\nobj-c\nUIApplication *application = [UIApplication rsk_sharedApplication];\nif (application) {\n    // call any method of the app instance\n}\n. @flovilmart Not yet, but I don't see any reason that could cause rejection.\n. ",
    "justinschier": "@bassrock @flovilmart Any update on this? Was your app accepted?\n. ",
    "gwk": "Hello, I am wrestling with this issue as well. I'm curious what the implications are of skipping the backgroundCleanDisk calls; does this mean that the cache just grows forever, or is there something that extension code must do manually to trim the cache?\n. @flovilmart thanks; that was what we settled on as well.\n. ",
    "samritchie": "Carthage picks up the most recent github release, and the shared schemes were added after that. As a workaround, you can do:\ngithub \"rs/SDWebImage\" \"master\"\nuntil a new release is created.\n. ",
    "willbin": "@sahabe1 \nDo you import?\n  #import <SDWebImage/SDImageCache.h>\n#import <UIImageView+WebCache.h>\n. Done!\nSteps:\n1: Clone and add WebP.framework\nclone the repository using git clone --recursive https://github.com/rs/SDWebImage.git\nadd full folder of SDWebImage and WebP.framework into your project.\n\n2: in Build Settings -- Preprocessor Macros , add SD_WEBP=1.\n\nps:If using CocoaPods, I don't konw how to add WebP.framework into SDWebImage, so I choose add files into my project.\n@mythodeia Thanks.\n. @lvpengwei Changing to version 3.7.1 will fix this bug.\nBut @rs should do something to fix it in 3.7.2\n. @weibel  I have tested some decode parameters, and make the decode time a little shorter from 1.5s to about 1.0s.\nBut now I found something weird that when my app launch, the decode speed is fast, and after some time, the decode speed slow down.\nWhy does this happen, and how to make is fater?\n. ",
    "cbh2000": "What about moving failedURLs to SDImageCache? That way, we can remove the URL from the failed URLs whenever the user removes the image from the image cache, or if the user replaces the image manually using storeImage(...). This makes more sense to me, because this is fundamentally a caching problem, not something we should have to use SDImageManager for.\n. ",
    "molon": "Maybe failedURLs is unnecessary.\nAt least I don't like it.\nNow I create a category named SDWebImageManager+AlwaysRetryFailed ,then override - (NSMutableArray*)failedURLs to return nil.\nMaybe It can be a switch property for developers , but not default on please.\n. @bpoplauschi  sorry, I'm not too skillful for using github.\nMaybe I misunderstood what you mean, I thought my PR was rejected before.\n:)\n. ",
    "khanhshopback": "Sorry I quite don't understand. So will we have this feature?. ",
    "domasn": "You can reproduce it with image from this url:\nhttp://images3.booztx.com/mango/400x523/man41033663_black_99_11_copy.jpg\n. @mythodeia you're right. This image works just fine... I think it could have fixed itself when making a copy (notice the \"_copy\"). I'll try to reproduce a new one tomorrow and post it's url.\n. @mythodeia we've got one:\nhttp://images3.booztx.com/d-xel/1300x1700/dxe4603370_black.jpg\n. We were using 3.7.1. Seems that 3.7.2 fixed it.\n. ",
    "patniemeyer": "I had the same question.  It sounds from your response above that disk caching is the default, but the docs do not actually say this anywhere.  (I had been looking for a section describing some config parameters or some description of how the disk caching is accomplished or its limitations, etc.  e.g. Does it grow forever?  How do you clean it?)  The section describing the optional separate use of the cache might lead people to assume they have to manually cache to get this feature.  I'm sure it will all become clear as I dig into the code more but just wanted to note this as a new user reading through docs.\n. ",
    "sgtsquiggs": "The memory pressure issues I was seeing were relieved by pre-downloading to disk without decoding and then subsequently decoding on demand from disk cache. This was using commit 704c630567577690fb8745b22e6179990fc461f8, which includes a very important parenthesis fix that was causing crashes when loading images from disk cache (#1104).\nWith the decoding changes in this PR, I did not see any major improvements across the board. With sufficient pressure, there were still crashes.\nAt this time I don't believe that the new decoding method is necessary unless there are other benefits I haven't considered here.\n. Looks like this was just fixed a few days ago by @pollarm in PR #1104. Carry on.\n. ",
    "hccgk": "i also have this problem\uff0chave you solve this problem\uff1f. ",
    "lqthien": "Seems like the line is still causing crashes on 3.7.2. Our project's code runs fine if we specify 3.7.1.\n. ",
    "levieggert": "Hey @mythodeia \nThank you for getting back to me.  I think I see what is going on now.\n1. I tested the same flow this time storing the NSData as UIImageJPEGRepresentation and it does keep the orientation RIGHT when retrieving from disk.  \nNSData *imageData = UIImageJPEGRepresentation(image, 1.0f);\n[imageCache storeImage:image recalculateFromImage:NO imageData:imageData forKey:key toDisk:YES];\n1. I also tried storing the NSData as UIImagePNGRepresentation to see what would happen like so.\nNSData *imageData = UIImagePNGRepresentation(image);\n[imageCache storeImage:image recalculateFromImage:NO imageData:imageData forKey:key toDisk:YES];\nThis gave me the original results where saving to disk the orientation is RIGHT and retrieving from disk the orientation is UP and my image is rotated -90 degrees CCW.\n1. Finally, as a third test I rotated the image 90CW and then stored the image as UIImagePNGRepresentation like so.\nNSData *imageData = UIImagePNGRepresentation(image);\n[imageCache storeImage:image recalculateFromImage:NO imageData:imageData forKey:key toDisk:YES];\nWhen retrieving the image from disk the orientation is UP, but now since I rotated the image before saving to NSFileManager, the image is correctly rotated.\n1. So it seems it comes down to iOS interpreting the image data.  Storing UIImageJPEGRepresentation to NSFileManager will keep the orientation where as UIImagePNGRepresentation will convert the orientation to UP.  So if you want to store NSData to NSFileManager as UIImagePNGRepresentation, be sure to check the orientation before storing the image and apply any rotation as needed.\nDoes this appear to be the case for you?\nI'm wondering if I should leave the image rotation that way I can save the NSData as UIImagePNGRepresentation or am I safe to always store NSData as UIImageJPEGRepresentation?  Could there be any data loss?  Seems risky that way.\nThanks!\n. Okay makes sense now.\nthanks for the help! \n. ",
    "ZalakSA": "I am facing same issue with sd_webimage. Need help. I want to make it work normally though image captured in portrait or landscape it should appear in portrait if viewed in portrait and landscape if viewed in landscape.\n. ",
    "itsthejb": "Any movement on this? I think we're experiencing some issues with this\n. ",
    "onevcat": "@szuniverse \nJust open sourced a project called Kingfisher, it is a simplified \"copy\" of SDWebImage in pure Swift. But only for iOS 8+ (since I want dynamic framework and cancelable block support).\n. ",
    "troypayne": "@mythodeia yes\n. Hmm perhaps it works in theory? I tried doing #define SD_LOG_NONE 1 in my bridge.h file (i'm using swift) above my import of the prefetcher and i'm still getting the logs\n. ",
    "tfonfara": "@mythodeia this is exactly what I'm looking for, but unfortunately it isn't merged yet\n. Thanks, I've already included the snippet from my 1st post :)\nI'll close the issue.\n. ",
    "Janrin": "@mythodeia yes,do you have some way to resolve it?\n. The hardcode 8 still not work.\nCGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 32 bits/pixel; 3-component color space; kCGImageAlphaNoneSkipFirst; 480 bytes/row.\n. could be this image\nhttps://cnodejs.org/agent?url=https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F9914235%3Fv%3D3%26s%3D120\n. https://cnodejs.org/agent?url=https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F6581640%3Fv%3D3%26s%3D120\n. please try the image url above.\n. Thanks,this problem has bean fixed by the code.\n. ",
    "littledogboy": "\u725b\u903c\n. ",
    "1036938520": ": CGBitmapContextCreateImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\n. ",
    "ClegeJJ": "@mythodeia \nstill could be this image . Why?\nhttp://tp3.sinaimg.cn/1130677950/50/5653229811/1\n. @mythodeia \n\u7528\u4e86\u5927\u795e\u7684\u65b9\u6cd5\u3002 \u8fd8\u662f\u4e0d\u80fd\u52a0\u8f7d\u8fd9\u5f20\u56fe\nhttp://tp3.sinaimg.cn/1130677950/50/5653229811/1\n\u9519\u8bef \u4fe1\u606f\u662f\u8fd9\u6837  (Error):\nSep 13 13:45:30 imacdeiMac-33.local WeiBo[3309] : CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 16 bits/pixel; 1-component color space; kCGImageAlphaPremultipliedFirst; 128 bytes/row.\nSep 13 13:45:30 imacdeiMac-33.local WeiBo[3309] : CGContextDrawImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\nSep 13 13:45:30 imacdeiMac-33.local WeiBo[3309] : CGBitmapContextCreateImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\nMessage from debugger: Terminated due to signal 15\n. @mythodeia \n:+1: \nThink you very much!!!\n. ",
    "A1314": "\u7f51\u7edc\u56fe\u7247\u8d44\u6e90\u52a0\u8f7d\u5237\u65b0\u65f6\u4f1a\u51fa\u73b0: CGBitmapContextCreate: unsupported parameter combination: 16 integer bits/component; 64 bits/pixel; 3-component color space; kCGImageAlphaNoneSkipFirst; 960 bytes/row.\n: CGBitmapContextCreate: unsupported parameter combination: 16 integer bits/component; 64 bits/pixel; 3-component color space; kCGImageAlphaPremultipliedFirst; 1216 bytes/row.\n: CGBitmapContextCreate: unsupported parameter combination: 16 integer bits/component; 64 bits/pixel; 3-component color space; kCGImageAlphaNoneSkipFirst; 1216 bytes/row.\n: ImageIO: CGImageSourceCreateWithData data parameter is nil\n\u5927\u795e\u6c42\u89e3\u3002\u3002\u3002\u3002\n. Excause me,I have problems with  file, too.When I download data from internet , the picture can make errors,like initImageAppleJPEG:1325: falling back to libJPEG.I only use \"- (void)sd_setImageWithURL:(NSURL )url placeholderImage:(UIImage )placeholder \" .What can I do? Please help me . Thanks very much!\n. @mythodeia Thanks very much again \n. I test with new SDWebImage like top show , but some error also exit . For example :: CGBitmapContextCreate: unsupported parameter combination: 8 integer bits/component; 40 bits/pixel; 4-component color space; kCGImageAlphaPremultipliedFirst; 1024 bytes/row.\n : CGContextDrawImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\nCGBitmapContextCreateImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update. \nand so on...\nwhat can  I do ? Please help me ,Thanks very much!\n. @mythodeia my url is \" http://joke.luckyamy.com/api/?cat=pic&p=2&ap=joke&ver=1.7\" , but I don't know which's the picture \n. @mythodeia Thanks \n. ok,I test angain.of course ,if I find this problem in the future,I will share it here first.\n. ",
    "dumoko": "Did we understand correctly that if we want WebP to be supported by SDWebImage, then we should remove the whole SDWebImage from Cocoapods and import it manually, together with the steps from the guide?\nOr there is a way to keep SDWebImage as pods, and just add missing files?\n. @mythodeia \nWe tried to follow your advice, but it didn't work. We had issues with SD_WEBP macros.\n. Thanks a lot for the response.\nWell this is what happened, we included it via Cocoapods and it was showing that SD_WEBP macros was not set, and AFAIK there is no way to setup macroses in a pod. Even if there is, it's not going to be tracked by git. \nIf you do have subspecs, can you please provide some documentation for it? Or just help find it?\n. What do you think about putting this in the readme file of the repository? Like \"Using podspecs\", and what are they for, etc.\nI can be a good example, like being a noob, prevents me from using your library in a correct way.\nOr this repo is only advanced cocoapods-users?\n. ",
    "worldligang": "good job\n. ",
    "lixiaoyu": "Anyone can tell me how to get the  WebImage.framework,I take steps as @mythodeia say,but couldn't find the derive data,the  WebImage.framework still shows red,can give me an advice ? pretty thanks! \n\n. ",
    "IvanChan": "just add webp/decode.h manually to your project is ok.....\n. Sorry, my bad.\nLentp is another image format, I will support it myself\n. @skyline75489 that crash in my app, appstore version from other user, so ...\n. @xiaoqi1503928 could build, but decode webp fail? image always nil\n. @theSouthOfSummer \nIf you are using pod, use\n   pod 'SDWebImage/WebP'\ninstead of \n    pod 'SDWebImage'\nThat would fix some marco define for you in xcconfig. I met the same problem and more\nhttps://github.com/rs/SDWebImage/issues/1834. @PhilippeBoisney My problem might NOT be a memory issue, I set the memory cache size only to 5M.\nAnd I think is multi-thread problem for downloader, since 4.0-beta work well for me.. @OmarPedraza 4.0-beta didn't seem to crash that much.. @mythodeia  no api found to erase that image from memory..  \"4.0-beta2\"\nBut I think that might be an illusion. \nI keep using 4.0.0 in my project, the crash come up less and less. \nmay depends on the way you use.\n. @skyline75489 Actually I do NOT know, I think this crash is related with others recently.\nOnly thing I can remember is I reduce the use of progressive-download which cause huge-memory-usage.. ",
    "cr400": "@willbin @mythodeia @shiyingyan   hello, I clone the repository, and stepped above .but still error #import \"webp/decode.h\" please help me.thanks\n. ps: i get the webimage.framework not webp.framewokr\n. ",
    "lvpengwei": "I have the same problem.\n. @timkoma This problem did not happen in 3.7.1.\n. @willbin How you reproduced?\n. ",
    "jjepsen": "I also have this problem. Version 3.7.2 sometimes (error rate around 1/20 for me) sets the wrong image. The issue is not reproducible with version 3.7.1.\n. ",
    "jiekewei": "I,m using Version 3.7.1 also have this problem\n. ",
    "jzaccone": "I have the same problem with 3.7.1. The URL that comes back in sd_setImageWithURL is correct, but the wrong image is cached to that URL. \nThe handler is called with cacheType = SDImageCacheTypeMemory.\n[imageView sd_setImageWithURL:[NSURL URLWithString:url] placeholderImage:placeholderImage completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n// URL is as expected, but Image is wrong\n}];\nThis problem isn't consistent, but of course once it happens, it loads the wrong Image every time until the cache is cleared\n. ",
    "VersionMismatch": "Did anyone found and confirmed a version were this issue is not happening? \n. ",
    "OnurVar": "maybe related with iOS 9 ?\n. We are using version 3.7.4, and yes it's very hard to reproduce \n. It's weird in some of my screens, it works perfectly ? Maybe its related with specific screens of mine ?\n. ",
    "rrallo": "I'm seeing this on 3.7.4 and the only way I've been able to get around this is to clear the cache much more often. :(\nAn idea my colleague suggested is to check the MD5 hashes, but this would require sending these with the payload, which will be a pretty big workaround and not very optimal.\nI'm seeing exactly what @jzaccone is describing.\nMy theory is that maybe there's a race condition when writing the images to the cache, as I don't see threading controls in those methods.\nAny insight is much appreciated.\n. We are on 3.7.4 and get the exact same issue. I've tried using the downloader, the prefetcher and the manager in different ways and on a rare occasion this will still happen. Makes sense since they all use the same downloader.\nI've narrowed it down to what I think is a race condition when storing in the cache. The cache keys are correct, but the image that gets stored in them is not. This leaves a scenario where 2 totally different cache keys point to the same image, and get stored like that, so resetting the image on the view doesn't correct the issue. The only way i've been able to get around this is clearing the cache.\nI'm considering comparing the images' MD5 hashes and sending those with my server payloads to make sure that the image is the correct one, but obviously this is a very suboptimal solution.\nAny insight is much appreciated!\n. Honestly we ended up moving entirely to PinRemoteImage by Pinterest. I was never able to fix this issue and it was wrecking our home page.\nI believe it\u2019s some race condition when multiple images are being downloaded simultaneously.\n\nOn Aug 17, 2016, at 12:03 AM, Sascha Wolf notifications@github.com wrote:\nIs there a solution to this in sight? We had some real trouble with a customer due to a very unlucky wrong picture which let the customer think the app \"had been hacked\".\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/rs/SDWebImage/issues/1344#issuecomment-240330104, or mute the thread https://github.com/notifications/unsubscribe-auth/ACaet18mKE0nuuAmIZ6G4oAuFKFaCjIKks5qgrI_gaJpZM4GTsqe.\n.  #1123  & #1344 seem to be the same issue.\n. \n",
    "ppaulojr": "I'm seeing this bug with 3.7.5 \n[self.badgeView sd_setImageWithURL:[NSURL URLWithString:badge.image_path]];\nSometimes get an empty image\n. Yes, it's happening on 3.7.5 and maybe it's related to https://github.com/rs/SDWebImage/issues/1123\n. It's working for me @mythodeia. Thanks!\n. Yes we can. \n. It might be related to https://github.com/rs/SDWebImage/issues/1123\n. ",
    "drakon": "I think I have the same problem. Using version 3.7.5.\nWas testing lazy loading images in a table view. I figured that if an image loaded, I scroll to another position in the table and back to the start, the first image is replaced with an image from further down the list. It's pretty easy to reproduce on my side when I slow down the internet connection.\nI assume it has something to do with reusing cells and not correctly cancelling downloads. After I added this to the cell it didn't happen again (it works as expected):\noverride func prepareForReuse() {\n    super.prepareForReuse()\n    self.imageView.sd_cancelCurrentImageLoad()\n}\n. Why do you mean?\n. Yeah, I got that. :)\nBut why do you think it makes a difference to just cancelling? Seems to work like that for me (the image itself is later changed if needed). \nThe important point to me seems that the download needs to be cancelled, otherwise it will overwrite the image from the current cell (setting to nil may have the same effect though). Which is what this bug is about since it shouldn't be necessary when I understand SDWebimage correctly.\n. Well, my solution also worked. :) - I don't think it should be necessary though. I'd expected SDWebImage to cancel the previous download if I start a new one on the same UIImageView (or is there a case where you wouldn't want to have this behavior?). The solution with manually resetting works good in general I think. Would need to mention it in the docs (even if it's only until it is fixed).\nI think this is what happend in my case:\n- Start table view\n- First cell is loaded\n- First image is requested \n- First image is downloaded, inserted and cached (<- this is important I think for it to be reproducible)\n- Scroll down\n- Same cell is reused\n- New image is requested\n- Scroll up to first cell\n- First image is requested from cache and inserted immediately\n- Second image is downloaded and replaces the first image that was loaded from cache \n- Now we have the second image in the first cell\nBut again, I don't think it's super urgent to fix this since the workaround works pretty good even without accessing the source.\n. ",
    "arnaudlamy": "Hi All,\nI'm in 3.8 and I still have the same issue, I tried to add the @drakon method to my cellView but without any improvements. I'm a beginner with ios9, so I'm pretty sure I don't understand the workaround here. Any help will be welcome ! :smiley: \nHere's my code:\nController\noverride func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCellWithIdentifier(\"MessageCell\", forIndexPath: indexPath)\n        if let imageView = cell.viewWithTag(104) as? UIImageView {\n            if imageView.image == nil{\n                print(\"Update Image:  \", indexPath.row)\n                if  messages[indexPath.row].user!.avatarURL != nil {\n                    print(\"AVATAR  \", indexPath.row)\n                    imageView.sd_setImageWithURL(messages[indexPath.row].user!.avatarURL)\n                }\n                else{\n                    // TODO: put no avatar image\n                    print(\"NO AVATAR  \", indexPath.row)\n                    imageView.image = UIImage(named: \"no avatar\")\n                }\n            }\n            print(\"-----------------\")\n        }\n        return cell\n    }\nCellView\n```\nclass MessageTableViewCell: UITableViewCell {\n@IBOutlet var avatarView: UIImageView?\n\noverride func awakeFromNib() {\n    super.awakeFromNib()\n    // Initialization code\n}\n\noverride func setSelected(selected: Bool, animated: Bool) {\n    super.setSelected(selected, animated: animated)\n    // Configure the view for the selected state\n}\n\noverride func prepareForReuse() {\n    super.prepareForReuse()\n    self.avatarView!.sd_cancelCurrentImageLoad()\n}\n\n}\n```\n. ",
    "jelenadj": "@mythodeia same issue happens to me on 4.0. ",
    "MrNiceMrGood": "@jelenadj Try this:\nfunc setImageAnimated(imageUrl:URL, placeholderImage:UIImage) {\n        self.sd_setImage(with: imageUrl, placeholderImage: placeholderImage , options:SDWebImageOptions.avoidAutoSetImage, completed: { (image, error, cacheType, url) in\n            if cacheType == SDImageCacheType.none {\n                UIView.transition(with: self.superview!, duration: 0.2, options:  [.transitionCrossDissolve ,.allowUserInteraction, .curveEaseIn], animations: {\n                    self.image = image\n                }, completion: { (completed) in\n                })\n            } else {\n                self.image = image\n            }\n        })\n    }\nWhen reusing cells images download async and are set wrong if you scroll before they are downloaded.\nI got 2 solutions working, stoping current image download and setting imageView.image to nil in prepareForReuse or this extension here.. ",
    "Omeesh": "use .refreshCached in sdWebImage option to resolve this issue\ncell.imageOut.sd_setImage(with: URL(urlPath), placeholderImage: #imageLiteral(resourceName: \"imgPlaceholder\"), options: [.refreshCached], completed: { (image, error, cache, url) in\n                if error == nil{\n                    cell.imageOut.image = image\n                    }\n                }\n            }). ",
    "harin": "It seems to be working now after I migrate to Swift 1.2.\n. ",
    "praveencastelino": "SDWebImageRetryFailed works really well for me. i hope you would accommodate 'kCFURLErrorNetworkConnectionLost' key in the future releases.\n. ",
    "yaliashkevich": "I've got pretty same crash today as well:\n0 libsystem_kernel.dylib pthread_kill (in libsystem_kernel.dylib) + 8\n1 libsystem_c.dylib abort (in libsystem_c.dylib) + 112\n2 libsystem_malloc.dylib _nano_malloc_check_clear (in libsystem_malloc.dylib) + 0\n3 libsystem_malloc.dylib nano_free (in libsystem_malloc.dylib) + 192\n4 CoreFoundation CFRelease (in CoreFoundation) + 1064\n5 CFNetwork ZN27URLConnectionClientClassic29_delegate_didReceiveDataArrayEv_block_invoke (in CFNetwork) + 256\n6 CFNetwork _ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 (in CFNetwork) + 104\n7 CFNetwork RunloopBlockContext::_invoke_block() (in CFNetwork) + 76\n8 CoreFoundation CFArrayApplyFunction (in CoreFoundation) + 68\n9 CFNetwork RunloopBlockContext::perform() (in CFNetwork) + 136\n10 CFNetwork MultiplexerSource::perform() (in CFNetwork) + 312\n11 CFNetwork MultiplexerSource::_perform() (in CFNetwork) + 68\n12 CoreFoundation __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION (in CoreFoundation) + 24\n13 CoreFoundation __CFRunLoopDoSources0 (in CoreFoundation) + 264\n14 CoreFoundation __CFRunLoopRun (in CoreFoundation) + 712\n15 CoreFoundation CFRunLoopRunSpecific (in CoreFoundation) + 396\n16 CoreFoundation CFRunLoopRun (in CoreFoundation) + 112\n17 bullets -SDWebImageDownloaderOperation start (SDWebImageDownloaderOperation.m:117)\n18 Foundation __NSOQSchedule_f (in Foundation) + 228\n19 libdispatch.dylib _dispatch_client_callout (in libdispatch.dylib) + 16\n20 libdispatch.dylib _dispatch_queue_drain (in libdispatch.dylib) + 1448\n21 libdispatch.dylib _dispatch_queue_invoke (in libdispatch.dylib) + 132\n22 libdispatch.dylib _dispatch_root_queue_drain (in libdispatch.dylib) + 720\n23 libdispatch.dylib _dispatch_worker_thread3 (in libdispatch.dylib) + 108\n24 libsystem_pthread.dylib _pthread_wqthread (in libsystem_pthread.dylib) + 816\n25 libsystem_pthread.dylib start_wqthread (in libsystem_pthread.dylib) + 4\n. I have the same issue on iOS8.\nOn iOS9 it works like designed: each time you try to load image with refreshcached option it issues http request with proper cache-control (If-Modifed-Since, ETag in case of AmazonS3) headers and get new image back if it was modified or 304 if it wasn't.\nOn iOS8 no http request is issued, image is loaded from the cache all the time until it is deleted (due to maxAge or maxSize settings) from there.\n. My goal is to setup memory cache limit for let's say ~100mb. How should I use setMaxMemoryCost method to achieve this. What is approximate relation between result of SDCacheCostForImage(UIImage *image) and actual size of memory (bytes) taken by image?\n- (void)setMaxMemoryCost:(NSUInteger)maxMemoryCost {\n    self.memCache.totalCostLimit = maxMemoryCost;\n}\n. It`s clear about image.scale now.\nBut what memory is taken for uncompressed image pixel, isn't it  32-bit RGBA, so each pixel take 4 bytes? So i can set totalCost = {maxMemory} / {4 bytes per pixel} = 100 * 1024 * 1024 / 4 = 26214400 ?\n. ",
    "pr1001": "Thanks, @mythodeia.\nThe only modification I've made to the library is one line to disable animated GIFs. However, it is my understanding that unless you manually set a data protection level when creating files, the app-wide default is used. \nWhile the demo app doesn't seem to have data protection enabled, I tried to reproduce the issue in my app by manually calling cache cleanup in applicationProtectedDataWillBecomeUnavailable: and couldn't cause any crashes, suggesting that the problem may lie elsewhere.\n. ",
    "fresh83": "i got it too.\n. ",
    "reejosamuel": "Happening after iOS 10.1.1\n. ",
    "sainttail": "Thanks @mythodeia for your feedback\nThis is based on the old amazon sdk which is gone already and I have some custom progress animation on UIImageView when downloading. So I use this instead to authorise request and use callback from SDWebImage to update progress.  \nThe only problem here is that I need to add those authorize codes in the library itself which is a bit inconvenient. (i need to copy all the SDWebImage files into the project, cannot use pod)\n. I think sometime we want to have separate process to transform image to whatever we want per uiimageview\nI think method signature like this is very easy to use.. Oh, thank for your response, I've never seen that PR.. ",
    "SpongeBob-GitHub": "Cache files on memory and disk?\nIf we should post to the server, and we can ... ?\n. ",
    "jiangxkwj": "can not find some \u201c*.c\u201d file\n. ",
    "WuKongCoo1": "Thanks, my English is very bad..\n. ",
    "luoyibu": "Maybe you should show some code in \n3 Earthmiles -DataFixture appendBaseValues + 2180\n4 Earthmiles -DataFixture init + 80\n5 Earthmiles -NetworkDataFixture init + 56\n. When I get fps of instrument, it always be high(bigger then 50) while scrolling. And some times I can see the delay, is it possible that the instrument is not exact. \nAnd how can I get the true fps while scrolling, any advice?\n. @bpoplauschi can you help with this issue?\n. SDWebImageOptions is defined by NS_OPTIONS,  so you can try this:   \".RetryFailed | .RefreshCached\"\n. ",
    "abhinav-mudgal": "The same issue replicated on my side as well at -[SDWebImageDownloaderOperation start]\nWe are facing a BAD_ACCESS here due to some reason :\nself.connection = [[NSURLConnection alloc] initWithRequest:self.request delegate:self startImmediately:NO];\n@luoyibu The DataFixture methods are from SplunkMint itself.\n. ",
    "bkvirendra": "@abhinav-mudgal Yes that's correct! That's the line where the issue is raised\n. Any updates?\n. nope! I replaced the SDWebImage library with AFNetworking. It removed that crash. AFNetworking does a good job.\n. wow thanks! \n. @bpoplauschi I faced the issue! Is there something particularly to do with the way we use SDWebImage? \n. @bpoplauschi Hi I'm having the same issue and I am able to reproduce it.\n. So the scenario is, when i minimise the app and reopen it, and try to reload the same image (since the image is cached) it should be coming from the cache, but the success block does not get fired. Following the code snippet\n`[self.imageView sd_setImageWithURL:self.rewardList.rewardImage placeholderImage:nil options:SDWebImageHighPriority completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n    [self initialiseParallaxHeaderWithImage:self.imageView.image forHeight:imageHeight];\n}];`\n. @bpoplauschi I resolved the issue by debugging inside the library, I wrote a small patch that worked for me, since I do some processing of the image once its loaded\nSDImageCache *cache = [SDImageCache sharedImageCache];\nUIImage *inMemoryImage = [cache imageFromMemoryCacheForKey:[self.rewardList.rewardImage absoluteString]];\n// resolves the SDWebImage issue of image missing\nif (inMemoryImage)\n{\n    [self initialiseParallaxHeaderWithImage:inMemoryImage forHeight:imageHeight];\n}\nelse if ([[SDWebImageManager sharedManager] diskImageExistsForURL:self.rewardList.rewardImage])\n{\n    UIImage *image = [cache imageFromDiskCacheForKey:[self.rewardList.rewardImage absoluteString]];\n    [self initialiseParallaxHeaderWithImage:image forHeight:imageHeight];\n}\nelse\n{\n    [self.rewardImageView sd_setImageWithURL:self.rewardList.rewardImage placeholderImage:nil options:SDWebImageHighPriority completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n        [self initialiseParallaxHeaderWithImage:self.rewardImageView.image forHeight:imageHeight];\n    }];\n}\n. ",
    "abuzar-amin-confiz": "@bkvirendra  You are using SDWebImage 3.7, and now latest version of SDWebImage is 4.2.1.\nHave you updated SDWebImage to 4.2.1? \nIf you updated then, updating the library to 4.2.1 removed your crash?\n. @bkvirendra This crash was actually due to a bug in Splunk mint library, its not the fault of SDWebImage, Splunk mint reported this issue on their site see this: \nhttp://docs.splunk.com/Documentation/MintIOSSDK/latest/DevGuide/FixedIssues\nSo updating the splunk mint had removed the crash from my app.\n. ",
    "pawelkata": "I'm having problems with this file, too. Unfortunately @cherpake 's fixes didn't help.\nMy app crashes on iOS8 in\n+(UIImageOrientation)sd_imageOrientationFromImageData:(NSData *)imageData\non this line:\nCFDictionaryRef properties = CGImageSourceCopyPropertiesAtIndex(imageSource, 0, NULL);\nAny help is appreciated.\n. @mythodeia here's a screenshot for you from my appcode debug/code window, hope it helps:\n\nI can't provide the image file :-(\nIt happens in iOS8, on fast scrolling and different images. If you need any additional info I'm here to help.\n. @mythodeia This will sound strange, but... it's working now. All I did was disabling \"Exception Breakpoints -> When any is thrown\".\nThis started to occur, though:\nJun  9 12:48:43 Pawes-MacBook-Pro.local CreditCards[50361] <Error>: ImageIO: CreateMetadataFromXMPBufferInternal  Threw error #203 (Duplicate property or field node)\nJun  9 12:48:44 Pawes-MacBook-Pro.local CreditCards[50361] <Error>: ImageIO: CreateMetadataFromXMPBufferInternal  Threw error #203 (Duplicate property or field node)\nSo probably that's what's causing crashes while debugging.\nI'll confirm if this issue occurs in production in about two weeks.\n. ",
    "jkblgithub": "not helpful advice \n. ",
    "newdev7": "@mythodeia\nAs you told, I used the demo project to troubleshoot the issue. I removed all the other urls and just run it with that one url. Also tried to download the image with different methods. But here also I received the same error in log. I received the same error for all the image url I got from the Kickstarter website. Some other urls also received the same error such as\nhttp://i2.wp.com/venturebeat.com/wp-content/uploads/2015/05/charger-Piq-04.jpg?resize=160%2C140\nhttp://i0.wp.com/venturebeat.com/wp-content/uploads/2013/12/airplane-jet-clouds-flight-shutterstock-kamenetskiy-konstantin.jpg?resize=160%2C140\nCheck out the screenshot\n\n. ",
    "indiandragon": "I can confirm @newdev7  that it happens in my setup too especially for Kickstarter images and few other sites.\n. ",
    "stephanecopin": "@mythodeia indeed, my mistake, I'll update it\n. ",
    "jstart": "This PR breaks offline image support. @mythodeia \n. @olivierplante @mythodeia I am seeing the same thing on iOS 9.  What I am seeing is that when I am offline and make an image request shouldBeFailedURLAlliOSVersion == NO, but shouldBeFailedURLiOS7 == YES.  Then it does this check:\nif (shouldBeFailedURLAlliOSVersion || shouldBeFailedURLiOS7) \nIt should be an && not an OR check correct?\n. @olivierplante @mythodeia This commit resolves the issue we are talking about. \nhttps://github.com/rs/SDWebImage/commit/60cab8b74cb59a79c69957368628c48a3f82a454\nIf you point to master, it will resolve the issue:\n    pod 'SDWebImage', :git => 'git@github.com:rs/SDWebImage.git', :branch => 'master'\n. @mythodeia can we expect a 3.7.4 that contains this fix?\n. ",
    "drinking": "Can you delete this Issue, I don't know who post this question using my account.\n. ",
    "tuantm2014": "+1 same request\n. ",
    "michaelis": "Where and how would be the best way to check if the image is a progressive JPEG so that it doesn't affect performance?\n. ",
    "vijaytholpadi": "+1. Awaiting feature. \nWhen is the 4.0.0 due? So that this can be taken up?\n. ",
    "buithuyen": "+1\n. Same for me\nObjective-C\nAnalyzing dependencies\n[!] The platform of the target `Watch Extension` (watchOS 2.0) is not compatible with `SDWebImage (3.7.4)`, which does not support `watchos`.\n. ",
    "ivany4": "+1\n. ",
    "mave99a": "+1\n. ",
    "gate8team": "+1. ",
    "partho-maple": "I think, this feature has been already implemented(as i can see now). Found the following...\n/**\n     * This flag enables progressive download, the image is displayed progressively during download as a browser would do.\n     * By default, the image is only displayed once completely downloaded.\n     */\n    SDWebImageProgressiveDownload = 1 << 3,\n. Currently, i am working on this. Hopefully, will have some update on next few weeks. . ",
    "cyrilzakka": "+1. ",
    "tirrorex": "Any updates on that?. The method i finally used was to create a custom class which is directly link to sdwebimage.\nBasically what i do is placing an imageKey, an imageURL and a transform method as parameter.\nI will store both original and modified pictures and set the modify picture for my imageview.\nThis way i will try to query first the modify picture, if not set in cache query the original picture and if not set i will download.\nStill have some issues to solve but so far so good.. Yes, precisely this . Sorry i don't get why you are linking something about a javascript reader.. Oh i get it, implement it myself :)\nGuess it makes sense, thanks. Makes sense, i will look into that once i have more time, currently on the verge to launch so...\nThanks. Thanks, will update if and when i have issues to plug my framework, keep up the good work :). bumping this, since ios 11 will support heif out of the box, is this now in the roadmap for a future version of the framework?\nOr should i make a pr if i have the time? (dunno if i have the skill to do it since i code in swift but i can try if i have the time). For those interested i added an extension with computed properties to UIImageView, i then compare the value i have as parameter and the property store in my UIImageView before setting the image.\nDirty but does the trick. I needed to customize the caching behaviour, to put it simply we reuse a lot our images but with different format, so in order to improve performances and reduce data consumption we cache both the original and the modified image, a behaviour i couldn't get to work without customizing everything.\nSo yup, i ended up shutting a lot of behaviour :) \nMight try to fork in the future if i have more time (i'm also open to a different solution to the original problem) and if we do not move to react-native.. @bpoplauschi i didn't need to subclass anything, instead i call directly SDImageCache and SDWebImageDownloader\nThe code is done and working, but it's not what i would call clean though.\nI will not set the image only if the current cell is not the one that initiated the download, i am not using UIImage related functions and instead use lower level functions provided by sdwebimage.. Will think about it and get back to you as soon as we have time to work on this project again.\nThanks. ",
    "lucare": "+1. +1. ",
    "rex-remind101": "Yes, but the latest tagged release is 3.7.2 which does not include this PR.\n. ",
    "weibel": "+1 because of the recent support for system memory notifications\n. In my experience encoding/decoding WebP images using libwebp can be very CPU intensive. Try playing a bit with the decoding parameters to see if you can gain any performance. See https://developers.google.com/speed/webp/docs/api#advanced_decoding_api\n. It's difficult for me to say what happens in your case, but try asking in the webp group https://groups.google.com/a/webmproject.org/forum/#!forum/webp-discuss\n. ",
    "kautaleksei": "Please update cocoapods to latest commit ASAP.\nI have bug with current cocoapods version 3.7.2 (same issue #1156 ), and I tested your example from \"master\" branch and it's working.\nWhen I set: pod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git', :branch => 'master' \nstill not working for me.\nI don't want to include SDWebImage project manually without cocoapods.\n. I made a tests: installed Cocoapods v. 3.7.2 to your Example project and it's not working with webp files (http://www.ioncannon.net/wp-content/uploads/2011/06/test2.webp and other).\nSo issue with Cocoapod v. 3.7.2: https://github.com/CocoaPods/Specs/blob/master/Specs/SDWebImage/3.7.2/SDWebImage.podspec.json\nCan somebody look to it?\n. I think I understand why I have issues with webp images.\nBy default: pod 'SDWebImage' doesn't set up WebP support. We need to add this dependencies: pod 'SDWebImage/WebP' to Podfile. Now it's working in v. 3.7.2.\nIn the documentation we don't have anything related to it.\n. ",
    "jiangmingz": "fix : ImageIO: CGImageSourceCreateWithData data parameter is nil bug\n. ",
    "takasek": "Sorry, they were reported by Bugsnag and I cannot figure out how to reproduce them.\n. ",
    "DanisFabric": "My device download 90 images, about 50kb per image\n. thank you, let me have a try \ud83d\ude04\n. There is no bugs in my demo project. I'm trying to fix my code in my project. thank u so much ! @mythodeia \n. ",
    "st3fan": "Just a note that this is a pretty important fix. Without it, the project does not check out properly anymore.\n. ",
    "terut": "Oops, I found duplicated PR https://github.com/rs/SDWebImage/pull/1175 . So sorry.\n. ",
    "samsonjs": "Just spent way too long tracking down this problem, as our server got webp support recently and suddenly images stopped working in our app. Nasty one. Glad it's fixed now.\n. ",
    "justinbeatz": "I made a new project and added via cocoapods and build without any issue.\n. ",
    "alwaystrong": "@mythodeia The demo project have errors\uff1a\nclang: error: no such file or directory: '/Users/wangfq/Downloads/SDWebImage-3.7.2/Vendors/libwebp/src/dsp/upsampling_sse2.c'\nclang: error: no input files\nclang: error: no such file or directory: '/Users/wangfq/Downloads/SDWebImage-master/Vendors/libwebp/src/utils/utils.c'\nclang: error: no input files\nI use the Xcode 6.3.1 or Xcode 7\n. @mythodeia I hava find the reason today\u3002That's because there's a \",\" in the URL(\"http://img0.imgtn.bdimg.com/it/u=4034231403,1124015911&fm=23&gp=0.jpg)\u3002\nThanks a lot for help!\n. @mythodeia It's so hard to find it\u3002The safari is so strong to load it out\u3002\nThank you anyway.\n. ",
    "WizzzI": "i installed through cocoapods\n. ",
    "luangaolei": "@mythodeia hi, After pod 'SDWebImage/WebP', WebP is still not loaded in the project. Is there any additional configuration required?\nError Domain=MWSDWebImageErrorDomain Code=0 \"Downloaded image has 0 pixels\" UserInfo={NSLocalizedDescription=Downloaded image has 0 pixels}\nSDWebImage (4.4.3)\nLibwebp (0.6.1). http://feed.youshu.cc/readwith/media/picture/5c47e69a6ffb4.png?x-oss-process=image/format,webp @kinarob . http://feed.youshu.cc/readwith/media/picture/5c47e69a6ffb4.png?x-oss-process=image/format,webp,\n@dreampiggy - [SDWebImageWebPCoder decodedImageWithData:], This method is not executed, What could have caused it?\n. Well,There is no problem with cocoapods.\nOk, I will try to add coder manually using the method you provided. @dreampiggy  yeah,I found setting SD_WEBP=1 in build setting->preprocessor Macros\n\n-[UIView(MWWebCache) \nsd_internalSetImageWithURL:placeholderImage:options:operationKey:setImageBlock:progress:completed:]\n\nWhat does this method do? Is it in SDWebImage?There is also the MWSDWebImageErrorDomain returned by error.\n. @dreampiggy hi, I found that the problem was caused by the UIView(MWWebCache) method imported from other libraries in the project. The problem was solved after deleting that library. Thank you for your help.. ",
    "kinarob": "@luangaolei Would you mind providing a URL for a picture of Webp?. @bpoplauschi  Thank you very much. I'd be honor to be a maintainer of SDWebImage. I'm looking SDWebImage 3.x to 4.x and beta,  It's very pleasant to make SDWebImage better. such as some fixes, optimizations, features or other things. I love have a try to make SDWebImage more better.\nThanks again! \nkinarob. @bpoplauschi Thank you very much!. Hi, @kyleYang Thank you providing crash log. What's the version of SD you use? Can you give info like below?\nInfo | Value\n-- | --\nPlatform Name | e.g. ios / macos / tvos / watchos\nPlatform Version | e.g. 12.0 / 10.13.0 / 11.0 / 4.0\nSDWebImage Version | e.g. 4.4.2 / 4.3.0\nIntegration Method | e.g. carthage / cocoapods / manually\nXcode Version | e.g. Xcode 9 / Xcode 10\nRepro rate | e.g. all the time (100%) / sometimes x% / only once\nRepro with our demo prj | e.g. does it happen with our demo project?\nDemo project link | e.g. link to a demo project that highlights the issue\n.  statusCode is 403  \n\nhttp://img2.imgtn.bdimg.com/it/u=4158051125,1333702261&fm=21&gp=0.jpg\n. @abhijith2smb  Maybe you should fill the template table at the top. You should at least provide the SDWebImage version && Platform && OS Version, and it's better to provide a demo that can reproduce this issue. thus, someone can help you!\n.  Maybe you should run Demo to test this problem!. The table of observations contains weak pointers which are zeroed when the observers get garbage collected. so\uff0cThe object will release quickly if you don't call removeObserver?. @zhongwuzw Hi brother\uff0cI'm testing on real device\uff08iOS 8.1.3) today, and if you forget to removeObserver, it still won't cause crash.. Thank you for your reply, I'm so dumb. What we can be sure is that iOS 9 or above devices don't cause crash. I'm curious why we don't remove observer and still don't cause crash on iOS 8 devices. I think if unsafe_unretained is on iOS 8 devices, it will cause crash, but in fact It didn't cause crash, so I created this issues, guessing that unsafe_unretained was not used on iOS 8 devices, and that there would be no need to remove the observer later. The following is the source of research \n- postNotificationName:object: GUN  Foundation (for reference only) .\n\n```javascript\n/\n * Private method to perform the actual posting of a notification.\n * Release the notification before returning, or before we raise\n * any exception ... to avoid leaks.\n /\n- (void)_postAndRelease:(NSNotification)notification\n{\n  Observation   o;\n  unsigned  count;\n  NSString  name = [notification name];\n  id        object;\n  GSIMapNode    n;\n  GSIMapTable   m;\n  GSIArrayItem  i[64];\n  GSIArray_t    b;\n  GSIArray  a = &b\nif (name == nil) {\n      RELEASE(notification);\n      [NSException raise: NSInvalidArgumentException\n          format: @\"Tried to post a notification with no name.\"];\n    }\n  object = [notification object];\n/\n   * Lock the table of observations while we traverse it.\n   \n   * The table of observations contains weak pointers which are zeroed when\n   * the observers get garbage collected.  So to avoid consistency problems\n   * we disable gc while we copy all the observations we are interested in.\n   * We use scanned memory in the array in the case where there are more\n   * than the 64 observers we allowed room for on the stack.\n   */\n  GSIArrayInitWithZoneAndStaticCapacity(a, _zone, 64, i);\n  lockNCTable(TABLE);\n/\n   * Find all the observers that specified neither NAME nor OBJECT.\n   /\n  for (o = WILDCARD = purgeCollected(WILDCARD); o != ENDOBS; o = o->next) {\n      GSIArrayAddItem(a, (GSIArrayItem)o);\n    }\n/\n   * Find the observers that specified OBJECT, but didn't specify NAME.\n   /\n  if (object) {\n      n = GSIMapNodeForSimpleKey(NAMELESS, (GSIMapKey)object);\n      if (n != 0) {\n          o = purgeCollectedFromMapNode(NAMELESS, n);\n          while (o != ENDOBS) {\n              GSIArrayAddItem(a, (GSIArrayItem)o);\n              o = o->next;\n          }\n      }\n  }\n/\n   * Find the observers of NAME, except those observers with a non-nil OBJECT\n   * that doesn't match the notification's OBJECT).\n   /\n  if (name) {\n      n = GSIMapNodeForKey(NAMED, (GSIMapKey)((id)name));\n      if (n){\n          m = (GSIMapTable)n->value.ptr;\n      } else {\n          m = 0;\n      }\n      if (m != 0) {\n      /\n       * First, observers with a matching object.\n       /\n      n = GSIMapNodeForSimpleKey(m, (GSIMapKey)object);\n      if (n != 0) {\n          o = purgeCollectedFromMapNode(m, n);\n          while (o != ENDOBS) {\n          GSIArrayAddItem(a, (GSIArrayItem)o);\n          o = o->next;\n          }\n      }\n  if (object != nil) {\n      /*\n       * Now observers with a nil object.\n       */\n      n = GSIMapNodeForSimpleKey(m, (GSIMapKey)nil);\n      if (n != 0) {\n          o = purgeCollectedFromMapNode(m, n);\n          while (o != ENDOBS) {\n              GSIArrayAddItem(a, (GSIArrayItem)o);\n              o = o->next;\n          }\n      }\n    }\n  }\n}\n\n/ Finished with the table ... we can unlock it,\n   /\n  unlockNCTable(TABLE);\n/\n   * Now send all the notifications.\n   /\n  count = GSIArrayCount(a);\n  while (count-- > 0) {\n      o = GSIArrayItemAtIndex(a, count).ext;\n      if (o->next != 0) {\n          NS_DURING {\n              [o->observer performSelector: o->selector\n                                withObject: notification];\n          }\n          NS_HANDLER {\n              NSLog(@\"Problem posting notification: %@\", localException);\n          }\n          NS_ENDHANDLER\n      }\n  }\n  lockNCTable(TABLE);\n  GSIArrayEmpty(a);\n  unlockNCTable(TABLE);\nRELEASE(notification);\n}\n. \ud83d\ude02\ud83d\ude02\uff0cYou're right. I think I should check the assembly and Xcode to debug\uff0cThank you @zhongwuzw .Ruby\n- (void)safelyRemoveOperationFromRunning:(nullable SDWebImageCombinedOperation*)operation {\n    @synchronized (self.runningOperations) {\n        if (operation) {\n            [self.runningOperations removeObject:operation];\n        }\n    }\n}\nThis method release the `id <SDWebImageOperation> operation`. @zjutwhw . @zhongwuzw  Is there a situation like this:  When the app enter background, the image download   background, If so the app goes into the foreground, this moment need to end background task at `start` method ?. @pengzhiqiang110  Maybe you should fill the issue template, instead of totally removing it. \ud83d\ude01\ud83d\ude01That way we can help you better !.  If the key is `TaggedPointer`, the key will not follow the strong (retain + 1) semantic behavior, According to [https://opensource.apple.com/source/objc4/objc4-723/runtime/NSObject.mm.auto.html](https://opensource.apple.com/source/objc4/objc4-723/runtime/NSObject.mm.auto.html)Objc\nobjc_retain(id obj)\n{\n    if (!obj) return obj;\n    if (obj->isTaggedPointer()) return obj;\n    return obj->retain();\n}\n``. Yeah, This should not be a problem for TaggedPointer,  I try to debug this issue on my iOS8 device for firmware reasons.. @chittelalavanya18  It seems a OOM issue\uff01I suggest to disable the decompress feature on low-memory device.SDImageCache.sharedImageCache.config.shouldDecompressImage = NO;\nSDWebImageDownloader.sharedDownloader.shouldDecompressImages = NO;`\nIf you are decoding a lot of images, the app will run out of memory . You need to stop  decompression like instructed above.\n. @lhnoah Thank you interest in SDWebImage, and thank you spend time to do this work. If you have other questions and ideas with SDWebImage, feel free to fire issue  or crate a PR.. I have a deeply look in this code, As @dreampiggy said:\nself -> imageIndicator -> End\nself -> progressBlock -> imageIndicator -> End\nI also have a try with FBRetainCycleDetector,  It' s ok. Maybe I was wrong about something, I will careful next time. Thanks guys have a look, I will close it. \n. @dreampiggy You are right. I will follow you advice, Thank you! . Hello, I run the image url https://firebasestorage.googleapis.com/v0/b/vkclub-c861b.appspot.com/o/explore%2Faccommodation%2FAccommodation3.webp?alt=media&token=54a7f1c5-f601-44a1-9416-d1672bd85f5f in our SDWebImage Demo project , and it can be displayed normally. Since the image url you requested is webp format, I would like to know if you have imported  SDWebImage/WebP\uff1f. Hi @ZachGuoMingyu, Please fill the issue template,  We need to know the basic information to identify the issue. Including image url, SDWebImage version, platform OS version. Thank you!. OK. I will close this issue!. @puhahalx Hi, Could you provide the picture url from you server ?.  The cell instance is reused and clear previous image loading, It's normal when you reload cell.. Good job!. TBO, I'm very much in favor of it.\n. Thank you for your explanation. I know the difference between the Image/IO's decode and static WebP's decode. But, I'd like to know more about why WebP's image decode was pre-drawed directly after it was decoded, which was not consistent with Image/IO. \ud83d\ude02\ud83d\ude02. @abdullahumer V4.0 is too old. I suggest you could use the latest version 5.x,  And see if this crash happens again.. See if this method can help you \uff1f. Objc\n- (void)sd_cancelCurrentImageLoad;. @YasinTian  Would you mind posting some integrity stack crash logs? . @zhongwuzw pod 'SDWebImage', '~> 5.0.0-beta4', This is pod code I execute, I meet the same issues.. @applejian Is it in your pch file had import SDWebImage?\n. @dreampiggy Hi, Could you explain more detailed What's the reason  when #import \"SDWebImage.h\" in pch file, and  also used DEFINES_MODULE,  It will cause this problem. That makes it easier for users to understand\uff01. @luangaolei After, You provide the image URL http://feed.youshu.cc/readwith/media/picture/5c47e69a6ffb4.png?x-oss-process=image/format,webp,  Running in demo project is OK!. Yeah, I encountered this problem. When I used SDWebImage 4.4 in my project, because SDWebImagePrefetcher had a maximum number of limit in 4.x, it did not block threads, But only when our project was upgraded to 5.0, the first time we started our App and Disk had cached these pictures, there were many picture delayed to display  when scroll a lot of cells.. Fix via #2631. Thanks @dreampiggy . @GengJian  You mean there's a problem with this method\uff1a\nNSString * _Nonnull SDDiskCacheFileNameForKey(NSString * _Nullable key)\nCould you provide the URL of your picture?\n. Since submodule(libwebp and FLAnimatedImage) was used in project, \nYou should use this way\uff1a\ngit clone --recurse https://github.com/SDWebImage/SDWebImage.git. I test 120's images form https://unsplash.com/, And verify that many completed are not called\uff01This means that there is a bug with SDAsyncBlockOperation.\n. Forgive me for being stupid, Will  SD_UNLOCK(self.HTTPHeadersLock)  be executed ?.  I think we use coders in reverseObjectEnumerator,  but calling coders  returns @[IOCoder, GIFCoder, MyCrazyCoder]. Hi bro, How about removing this judgment in 35 lines\uff1f\n```Objc \nif (operation) {            \n}\n``. Since this isinternalSetImageBlock, and we also associated the image url, is it necessary for thisimageURL parameter to exist? Or is there some other place use for this parameter ?. Thanks, I get it!. I agree with @zhongwuzw opinion.. Once executeWebPDemuxGetChunk,  you should releasechunk_iter . (\u2299v\u2299).. Why did you give up draw on CGBitmapContext?. @zhongwuzw  When code execute[self.callbackBlocks removeAllObjects];, It will affect the normal pictureSDWebImageDownloaderProgressiveLoad` logic. Right\uff1f\n. @zhongwuzw You can see issue #2630.. ",
    "fjhfjhfjh": "No detection to determine the picture is complete, because the call is download successfully callback\n. Download has been successful, how do I know whether the picture is complete, the situation is, the picture only shows part of the\n. ",
    "huoyi2000": "I\u2019m sorry for my wrong issue.I finally found it\u2019s because my TableviewCell contains different number of images,so when i create a Cell,i remove all the imageViews first and then create new imageViews whose url is the same with the previous one.At last,I found a lot of imageViews has been download although they are with the same url.This happens only for big image(>3M).You can have a try.Can you ensure when a imageView is loading a image with a url,then another imageView with the same url needn\u2019t load image with this url again?\n. I have to design a page like Twitter,each cell contains different number of photos,i write the cellForRowAtIndexPath method like this.\n- (UITableViewCell *)tableview:(UITableView *)tableview cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n     static NSString *identifier = @\u201ccell\u201d;\n    UITableViewCell *cell = [tableView dequenceReusableCellWithIdentifier: identifier];\n   if(cell == nil)\n   {\n   cell =[ [UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:idendifier];\n  }\n //remove all subviews to avoid duplication\n  for(UIView *v in cell.contentView.subviews) {[v removeFromSuperView];};\n  for(int i = 0;i < imageNum;i++)\n{\n//create imageViews\u2026};\nreturn cell;\n}\nAs for the image bigger than 3MB, it\u2019s because our background designer didn\u2019t notice it.\nMaybe i didn\u2019t download the latest version,so i find a url loaded more than once.Thanks.\n. ",
    "zigadolar": "@bpoplauschi I am sorry for the late replies. The prefetchURLs is not mutable, that's why in adding additional urls it is replaced in it's entirety with a new array, with the new urls appended to the end of the previous one.\n@mythodeia I don't see where it would be enumerated, as all methods only check the prefetchURLs count or request an url by index from the array, where I suppose an issue would be, if we were removing urls from the array, and would be risking and index out of bounds crash. Where do you suspect this crash would happen - and any idea how to test for it? \n. @mythodeia at the start of the startPrefetchingAtIndex: method there is a check for array bounds, that returns, if the index is in fact out of bounds. But the user can not actually interfere with the prefetchURLs array directly anyway - that is the purpose of the addPrefetchURLs: method: to only be able to add more URLs to the existing array (or creating a new one from the previously already existing method prefetchURLs:, if it doesn't exist yet), so there would always only be more items in the array and never fewer.\n. ",
    "genaks": "I hope so.. I'll check and let you know\n. Cell identifier has been defined like - #define CELL_IDENTIFIER @\"solutionCell\"\nand the code for cell-reuse\nCSTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CELL_IDENTIFIER];\n    cell.cellDelegate = self;\n    if (!cell) {\n        cell = [[CSTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CELL_IDENTIFIER];\n        cell.selectionStyle = UITableViewCellSelectionStyleNone;\n    }\n. Ok.. Demo project.. Thanks\nOh and I have the prepareToReuse method in my cell and I am emptying my imageView there.\nI'll look into it.. Thanks for your help \n. ",
    "mlijin9011": "I empty the imageview in method prepareReuse, but it does not work.The image is still not correct used sd_setImageWithURL when the network is not good.\n@genaks, have you solved this problem?\n. ",
    "stasix": "@mythodeia thanks for the link. It has fixed the issue on iOS9.\n. ",
    "ivela": "I had the same problem and the link also fixed the issue for iOS 9 for me\n. ",
    "qaavi": "(y)\n. ",
    "unlucio": "@mythodeia ouch yes: I found the compile problem on a private project but I guess the webp filer name changes mean while.\nMy bad.\n. ",
    "maheshm504": "please give me the code or referal link it can help me thanks for reply\n\u1427\nOn Thu, Jun 25, 2015 at 6:40 PM, Konstantinos K. notifications@github.com\nwrote:\n\nyou can use the prefetcher to download an array of images without\nattaching them to imageviews\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1197#issuecomment-115250281.\n. Okay got it i will try it now\n\n\u1427\nOn Thu, Jun 25, 2015 at 6:43 PM, Konstantinos K. notifications@github.com\nwrote:\n\nsee my post above for sample code\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1197#issuecomment-115252589.\n. [[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:[fetchArray valueForKey:@\"backImage\"]];\n\nI given this in viewWillAppear does this effect in any case and is this downloads every time or only one time\n. every time view will appear it is working like this\nPrefetched 1 out of 120\nPrefetched 2 out of 120\nPrefetched 3 out of 120\nPrefetched 4 out of 120\nPrefetched 5 out of 120\nPrefetched 6 out of 120\ni like this one but every time it is calling so does this effect\n. Great this was really help full thanks so much\n. so after giving that line and in the cellforrowatindexpath\ncan i give like this\n[backgroundImage setImageWithURL:_backImageURL placeholderImage:placeHolder usingActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];\n. yes i understand \ni given this in viewWillAppear\n[[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:[fetchArray valueForKey:@\"backImage\"]];\nand in cellforatindexpath\n[cell.mainImage setImageWithURL:[NSURL URLWithString:[deal frontImage]] placeholderImage:placeHolder usingActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];\nso this is enough right ?\n. Okay i will check this thanks for help it was really helpfull\n. Hi i understand what you are saying i can give setImageWithURL for cell for row at index path\nI have done this\nBut why i want the prefetch is for Detail Screen when user opens the detail screen i dont want user to see the image is downloading so i want to download the images in the main screen itself so now tell me this prefetcher will help me or not ? \n. Okay then i can give this in tableview cellforrow\n[cell.mainImage setImageWithURL:[NSURL URLWithString:[deal frontImage]] placeholderImage:placeHolder usingActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];\n. and this in Detail Screen  viewWill appear and give this line for showing image\n//viewDidLoad\n  [backgroundImage sd_setImageWithURL:_backImageURL];\n//viewWillAppear\n[[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:[fetchArray valueForKey:@\"backImage\"]]; \n. [[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:[fetchArray valueForKey:@\"backImage\"]];\nthis line i given in the viewWillAppear (MAIN SCREEN or MAIN CLASS)\n so even though user not opens the detail screen images are prefetching\n. MAIN CLASS --- > DETAIL CLASS\nin MAIN  CLASS ==== viewWillAppear\nthis line \n[[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:[fetchArray valueForKey:@\"backImage\"]];\nin DETAIL CLASS === viewDidLoad\n[backgroundImage sd_setImageWithURL:_backImageURL];\nthis is working \n. in tableView cellForRow \ni given \n[cell.mainImage setImageWithURL:[NSURL URLWithString:[deal frontImage]] placeholderImage:placeHolder usingActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];\n. So now i understand one thing that i am downloading images (frontimage and backimage) in two types\nfrontimage == > setimageWithURL\nbackimage == > prefetcher\nthis is right ?\n. I understand but i am doing lot of stuff in my class in the first installation of application 150 records are downloading from the JSON and storing to the Core Data and once download finished then am calling one method there i am fetching the images array and i am prefetching the images so \nam confused what to do\n. how can i check if the image is not present in imageView  so that i can call again to download the image\n. Okay thanks\n. ",
    "iMinder": "I hava the same problem\n. ",
    "swizzersweet": "Also happening to me,\nHappens on iphone 6 simulator @ iOS 8.4 as well as device iPhone 6 @ iOS 8.3\n. ",
    "zhgw01": "We have similar issue but due to object over release which also happen in connectionDidFinishLoading\n\n. ",
    "anywayfly": "i have the same problem\n. ",
    "SongDaBei": "@zhgw01 ,\u563f\uff0c\u54e5\u4eec\uff0c\u662f\u4e2d\u56fd\u4eba\u5427\uff1f\u6211\u4e5f\u78b0\u5230\u548c\u4f60\u4e00\u6a21\u4e00\u6837\u7684\u95ee\u9898\uff0c\u4e0d\u77e5\u9053\u4f60\u662f\u600e\u4e48\u89e3\u51b3\u7684\u5440\uff1f. Also meet in release 4.0.0.. ",
    "aimobier": "Hello, I'm using swift, actually, I'm here is to run everything possible, but submit appStore, feedback to me is on the iphone 4 collapse, then, I saw the show my log is SwWeb have a problem.\nI am using CocoaPods added\uff0cI didn't add twice... I am also very upset \n. I think it should be.\nAt least I hand the 5S,touch,6plus, 6 real machine running no problem. Here I no 4S, only the virtual machine, virtual machines running if no problem, so I think is not only real 4S will appear in this issue.\nI don't know why this is a problem, and I don't know what 4S is like.\nI intend to file a, have a look will not have this problem.\n. ",
    "cytryn": "This is an example of URL:\nhttps://res.cloudinary.com/saidacerta-staging/image/upload/v1433442235/cities/1/pictures/6b60dc6841e44a6a8ce4d7f6246088ae\nIt load perfectly on browser and on the app also...\n. Just tested and still get the same errors.\n@mythodeia have you tried using the same code block?\n. @mythodeia actually I have just downloaded the demo project and cannot run because I am getting some errors:\nclang: error: no such file or directory: '/Users/acytryn/Downloads/iOS/SDWebImage-master/Vendors/libwebp/src/dsp/upsampling_sse2.c'\nclang: error: no input files\n. Did it, in the example it is doing fine, no warnings even with the code block that I used in my code.\nI just tested in my code passing nil to the imageURL, I still get tons of warnings...\nBut if I remove the image download block I get no warnings at all.... so it is pretty much this code block that is causing the warnings, but why?\n. Great!\n. ",
    "rnewman": "Should this be reopened until the fix is applied?\n. ",
    "takdol": "@mythodeia I've tried the code you posted here and it removes the warnings. Thanks!!!\n. @mythodeia still getting the errors. Asked my colleague and he told me that our images are using SRGB color space\n. Can't seem to find the version of the repo, but I cloned it 4 days ago. Will update the build and get back to you\n. @mythodeia updated to the latest commit, still having the issues. \ntry this url:\nhttps://static.spuul.com/uploads/video/horizontal_cover/1928/small_6589ee9d42_5e4c053111_special26_banner.jpg\n. Ok will do.\n. hey @mythodeia, I've tried the url in the demo project and no problems there. It's working fine now. THANKS!\n. Yes, I've just cloned the repo yesterday\n. Works! Thanks @mythodeia!!!\n. ",
    "ayakunin": "Hello, I have a same problem with with image http://alfa-dev.allychat.ru/static/upload/cf2ea3bf-3f29-4c93-a063-ffa686ca4445.png\n. Thx for answer, it solved my problem,\n. ",
    "silver619": "that did the trick, thanks.\n. ",
    "lixin147741": "I'm sorry,it's not works.\nMacBook-Air:Libraries lixin$ git clone --recursive https://github.com/rs/SDWebImage.git\nCloning into 'SDWebImage'...\nremote: Counting objects: 3514, done.\nremote: Total 3514 (delta 0), reused 0 (delta 0), pack-reused 3514\nReceiving objects: 100% (3514/3514), 3.91 MiB | 101.00 KiB/s, done.\nResolving deltas: 100% (2112/2112), done.\nChecking connectivity... done.\nSubmodule 'Vendors/libwebp' (https://chromium.googlesource.com/webm/libwebp) registered for path 'Vendors/libwebp'\nCloning into 'Vendors/libwebp'...\nfatal: unable to access 'https://chromium.googlesource.com/webm/libwebp/': Failed to connect to chromium.googlesource.com port 443: Operation timed out\nClone of 'https://chromium.googlesource.com/webm/libwebp' into submodule path 'Vendors/libwebp' failed\n. ",
    "solszl": "\u56fd\u60c5\u539f\u56e0,\u65e0\u6cd5\u8bbf\u95eegooglesource~\n. ",
    "Ailix": "I met a similar Issue about SDWebImageRefreshCached option\nAfter I upload a new avatar and refresh,the image is still the previous one\nRight now my solution is : remove the cache before I upload\nSDImageCache *cache = [SDImageCache sharedImageCache];   \n[cache removeImageForKey:imageUrl];\n[self.imageView sd_setImageWithURL:imageUrl placeholderImage:placeholder];\n. ",
    "AbelIngrand": "Hi,\nYes I tried to set the contentMode to AspectFit but it didn't work.\nWhat I think is happening:\n1. My code resizes the images by taking into account the scale factor of the current device. So images on an scale factor of 3 end up being 3 times the size of factor 1\n2. When displaying the images, SDWebImage selects the cached image but the size is 3x to big..\n. Good idea, it's kind of a hacky workaround but it works great. Thanks !\n. Yes, that worked. The other workaround i found is telling my UIImageView that the image it is loading is for a @2x or @3x resolution by setting the image to imageView.image = [UIImage imageWithCGImage:image.CGImage scale:[[UIScreen mainScreen] scale] orientation:image.imageOrientation];\n. ",
    "kmiloaguilar": "I'm having the same problem. Callback is not getting called.\n. @mythodeia the solution you provided worked for me, but the completion callback doesn't work.\n. [cell.imageView sd_setImageWithURL:[NSURL    URLWithString:@\"http://www.domain.com/path/to/image.jpg\"]\n                  placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]\n                         completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {... completion code here ...}];\nThat one ^ it never get into there. The one for SDWebImageDownloader works fine. I ended up using that one.\n. I can try later.\n. @bpoplauschi sorry, didn't try it. I keep using sharedDownloader.\n. ",
    "pantkarun75": "shared downloader works fine but imageview category is not working \n. ",
    "AncAinu": "I would like to put an update on this post, we use SDWebImage as our main image lib (our app have millions of users), and this is a recurring problem which ruin the UX.\nBasically completion is sometime never called (on first download of the image), but the image does download and go to cache.\nIt makes the library unreliable... . ",
    "tamoyal": "Just curious - why is this closed? The suggestion seems like a good one (setting the scale based in the screen) but it never made it into the codebase?. ",
    "raheelahmad786": "My app is storing images locally. i don't want it to remove from cache when app come from background. So what is needed exactly for this?\n. ",
    "asifbilal-vteams": "Alright @mythodeia i'll give it a try. But, this library should resolve this issue itself.\n. ",
    "ny8080": "I have the same error @ygweric @mythodeia \n. ",
    "johnzhu12": "I have the same error:\nfatal: unable to access 'https://github.com/rs/SDWebImage.git/': Failed to connect to apn.huanhuba.com port 8800: Operation timed out. ",
    "dengbin9009": "refer to http://blog.csdn.net/dengbin9009/article/details/71125250. @mythodeia \nall image like :\nhttps://imgqn6.fruitday.com/images/2017-04-28/7cf04bd9965b0c11e4b47c32430d4aec.webp\n    https://imgjd4.fruitday.com/images/2017-05-03/dca5894445c21e8c409a12b6c12a0263.webp\n    https://imgjd2.fruitday.com/images/2017-04-24/6870da70fd115f886eda5f1c333475d9.webp\nThere are about 100 pictures. \nThe problem is the same picture if replaced by jgp format there is no such problem\nThis question bothered me for a long time and I am eager to get your help\uff01\nthx\uff01. @EugeneGoloboyar \nAs you said, I have done this, but it does not work for me.\nIn version 4.0.0, I can not change the config in SDImageCache,So I have tried to change the source code\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];. @tiwariammit I met the same problem as you ,Did you solve this problem?\n1885 . @tiwariammit\nIs there the problem in the old versions?\n. ",
    "ShadyNinja": "I ain't saying the one offered in this repo is incorrect. It is definitely correct. But our Great Fire-Wall blocked us users in China from any Google resources. Well, Fxxk Chinese Gov. I can access google source through proxy such as ShadowsocksX with Browsers. But cannot with SourceTree for Mac due to some unknown technical problem. What a pity! Now I'm using version 3.7.3 as final version currently. I just wanna know whether there is another way to use SDWebImage freely. Hmmmm, perhaps I need to consider stay abroad. \n. Alright, I'll try. Thanks. \n. ",
    "purnimaSingh": "hey @bpoplauschi, Version 4.0 when will be live?\nPlease let me know ASAP.\n. hey @bpoplauschi any progress?\nOne more thing when gifs are loading in uicollectionview then memory size automatically increase and this memory leak increase the crash rate if you have any solution please suggest\n. ",
    "graygrayh": "sd_setImageWithURL load gif ,but memorys can not  be released ,when back to last viewController . You met this problem ?\n. yes,I use FLAnimatedImage,but memory will Constantly Rising until app crash\nlast year, it's well.  after ios10.3 ,this issue is appear\n Xcode7.3\n ios10.3. the file size is 892k .  I promise you will find this issue ,when you build a project loading gif with Xcode 7.3 and run it on the platform whose version is ios 10.3 . I think it's a bug from apple , but i cant resolve it. i have replicate this in demo project (please use xcode 7.3 , ios 10 later , you will find it). another, language version swift 2.2.  there  is not the issue in iOS 9. this happen not only on FLAnimatedImage, but also SwiftyGif, YLGIFImage, UIImageView. I think i should upgrade Xcode version and swift version to avoid it. It will be a huge project --!. ",
    "johnxiao": "how\uff1fdo you know how now\uff1ftsk\n. ",
    "sunbohong": "@johnxiao  You can use SDWebImageRefreshCached option.\n. @skytraveler  is there a solid way to reproduce this crash?\n. @mythodeia  For some reason,i couln't use notification instead.Post a notification will increase the complexity.\n. I found the reason just now.\nthe doneBlock is called at main queue,so i can't wait a semaphore at main queue.\ni have't to find a new solution to accomplish the goal.\ndispatch_async(dispatch_get_main_queue(), ^{\n            doneBlock(diskImage, SDImageCacheTypeDisk);\n        });\n. You can use imageView.image=image.images?image.images.firstObject:image; after you download the gif.\n. can you reproduce it with the latest version on the demo project?\n. maybe,your image is expaired,the default cache age is one week.\n\nstatic const NSInteger kDefaultCacheMaxCacheAge = 60 * 60 * 24 * 7; // 1 week\n. Maybe,you can get it by assign your own's operationClass\n. Maybe,the server ride make some issue.\n\nYou can insert follow code before start a request.\n[[SDWebImageManager sharedManager].imageDownloader setValue:@\"text/html\" forHTTPHeaderField:@\"Accept\"];\n. can  you show some demo code?\n. Please try follow code.\n[cell.carIcon sd_setImageWithURL:[NSURL URLWithString:[dict valueForKey:@\"iconUrl\"]] placeholderImage:[UIImage imageNamed:@\"headImage\"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n         if (image) {\n             [cell.carIcon setImage:image];\n             [cell.carIcon setNeedsLayout];\n         }\n     }];\n. Have you try to reinstall CocoaPods from your project by pod deintegrate &&  pod install?\n. can you give us some urls from this function?\n. Can you supply a url of your image?\n. This is a broken API,so can we use a new method,such as  -- (void)addPrefetchURLs:(nullable NSArray<NSURL *> *)urls. ",
    "SummerTree": "Got it, thanks\n. ",
    "qingmu213": "because is need User-Agent\nin SDWebImageDownloader.m method init  replace by\n```\n- (id)init {\n    if ((self = [super init])) {\n        _operationClass = [SDWebImageDownloaderOperation class];\n        _shouldDecompressImages = YES;\n        _executionOrder = SDWebImageDownloaderFIFOExecutionOrder;\n        _downloadQueue = [NSOperationQueue new];\n        _downloadQueue.maxConcurrentOperationCount = 6;\n        _URLCallbacks = [NSMutableDictionary new];\n    NSString *userAgent = @\"\";\n\npragma clang diagnostic push\npragma clang diagnostic ignored \"-Wgnu\"\nif defined(__IPHONE_OS_VERSION_MIN_REQUIRED)\n    // User-Agent Header; see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43\n    userAgent = [NSString stringWithFormat:@\"%@/%@ (%@; iOS %@; Scale/%0.2f)\", [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString *)kCFBundleExecutableKey] ?: [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString *)kCFBundleIdentifierKey], [[[NSBundle mainBundle] infoDictionary] objectForKey:@\"CFBundleShortVersionString\"] ?: [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString *)kCFBundleVersionKey], [[UIDevice currentDevice] model], [[UIDevice currentDevice] systemVersion], [[UIScreen mainScreen] scale]];\n\nelif defined(__MAC_OS_X_VERSION_MIN_REQUIRED)\n    userAgent = [NSString stringWithFormat:@\"%@/%@ (Mac OS X %@)\", [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString *)kCFBundleExecutableKey] ?: [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString *)kCFBundleIdentifierKey], [[[NSBundle mainBundle] infoDictionary] objectForKey:@\"CFBundleShortVersionString\"] ?: [[[NSBundle mainBundle] infoDictionary] objectForKey:(__bridge NSString *)kCFBundleVersionKey], [[NSProcessInfo processInfo] operatingSystemVersionString]];\n\nendif\npragma clang diagnostic pop\n    if (userAgent) {\n        if (![userAgent canBeConvertedToEncoding:NSASCIIStringEncoding]) {\n            NSMutableString *mutableUserAgent = [userAgent mutableCopy];\n            if (CFStringTransform((__bridge CFMutableStringRef)(mutableUserAgent), NULL, (__bridge CFStringRef)@\"Any-Latin; Latin-ASCII; [:^ASCII:] Remove\", false)) {\n                userAgent = mutableUserAgent;\n            }\n        }\n        [self setValue:userAgent forHTTPHeaderField:@\"User-Agent\"];\n    }\n\nifdef SD_WEBP\n    _HTTPHeaders = [@{@\"Accept\": @\"image/webp,image/*;q=0.8\",@\"User-Agent\":userAgent} mutableCopy];\n\nelse\n    _HTTPHeaders = [@{@\"Accept\": @\"image/*;q=0.8\",@\"User-Agent\":userAgent} mutableCopy];\n\nendif\n    _barrierQueue = dispatch_queue_create(\"com.hackemist.SDWebImageDownloaderBarrierQueue\", DISPATCH_QUEUE_CONCURRENT);\n    _downloadTimeout = 15.0;\n}\nreturn self;\n\n}\n```\n. ",
    "jiangyancong": "Excuse me, the solution works very well, but is there any plan to fix it in the branch?  Thanks.\n. @AndreaVitale Have you tried qingmu213's solution above?\n. ",
    "AndreaVitale": "Same problem with this sample url: https://static.pexels.com/photos/1475/food-vegetables-italian-restaurant-large.jpg.\nAny helps?\n. Yep, I tried setting the userAgent. It was loaded only for the first, second time. After that the server always return 403.\n. +1\n. ",
    "junjielu": "request this feature,too\n. ",
    "Onetaway": "Yes   Thanks :+1: \n. ",
    "isaced": ":+1:\n. ",
    "justme1": "Hi there,\nSo sorry, I meant to write setNeedsLayout.\nUIImage+WebCache.m uses it several times. \nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/UIImageView%2BWebCache.m\n. Hi, \nThanks for your comment. I'd really appreciate if someone could give a real example why it's being used in the lib.\nThanks\n. ",
    "Adlai-Holler": "I agree with @justme1 this is extraneous. If UIImageView classes want to invalidate their layout when an image is set, they should override setImage: and call setNeedsLayout there. \n. :+1: \n. ",
    "susieyy": "+1\n. ",
    "Nirma": ":+1: \n. ",
    "vivekshah05": "I have the same memory issue in my app , so I store image to disk by \nshouldCacheImagesInMemory = NO;\nBut after that images in my tableView Flashes when i reload the table. Any work around for that ?\n Any help or guidance will be very helpful.\n. Hello @zqpmaster  i am facing the same issue, if you found the solution can you pls help me ?\n. ",
    "sleroux": "Thanks for merging this in! @mythodeia \n. ",
    "wenxp": "dsdsf\n. ",
    "songdh": "thank you\n. In the same method in line 46, I got another error with the image: http://img.stuhui.com/b18d86248007bebbf0741a2298373406\nThe error message:: CGContextDrawImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\n. i modify my code and the error is still exist.\nthis is my code:\nimgUrl = @\"http://img.stuhui.com/b18d86248007bebbf0741a2298373406\";\n            [imgView sd_setImageWithURL:[NSURL URLWithString:imgUrl]\n                       placeholderImage:Thumbnail\n                              completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                                  if (error) {\n                                      DDLogError(@\"show detail image error:%@.remove cache imageKey=%@\",error.localizedDescription,key);\n                                  }else {\n                                      //\u56fe\u7247\u4e0b\u8f7d\u6210\u529f\u3002\u901a\u77e5\u754c\u9762\u91cd\u65b0\u5237\u65b0\n                                      NSValue* sizeValue = [NSValue valueWithCGSize:image.size];\n                                      [slDNFC postNotificationName:topicDetailImageLoadFinishedNotification object:sizeValue];\n                                  }\n                              }];\nthe error log is :show detail image error:Downloaded image has 0 pixels.remove cache imageKey=http://img.stuhui.com/b18d86248007bebbf0741a2298373406\n. I am sorry. I found the image has some problem.I can open the image in Chrome but safari and firefox. When I download it with Chrome, I can not open it with the \"preview\".\nI am really puzzled by you cannot replicate the error.\nhere is my demo. There are two demos. They use the latest version and an old version,which i got one year ago. also, I have replaced the code you told me in the latest version.\nThe old-version demo only show the error message:image error:Downloaded image has 0 pixels.\nThe latest-version demo show the error message:\nImageDemo_lastVersion[35908] : CGContextDrawImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\n2015-08-05 15:31:13.999 ImageDemo_lastVersion[35908:1891145] image error:Downloaded image has 0 pixels\nThank you.\nthe demo: http://pan.baidu.com/s/1c0AW0X6\n. I run the demo and it can show the image correctly. I think there is something missed in my demo, or something wrong with my config. I will test it. Thanks a lot.\n. ",
    "kamabhavik": "i have tried all this thing but still some of images not showing in my application.\n. yes we are using the latest updated version. let me share you my code\n [imgView sd_setImageWithURL:url\n                               placeholderImage:[UIImage imageNamed:@\"\"]];\nwe have 3 diffrent url \n1. http://www.akerbrygge.no/wp-content/uploads/2015/06/L-86-2-1540-edit2.jpg\n2.http://www.akerbrygge.no/wp-content/uploads/2015/06/b%C3%B8ker-mann.jpg\n3.http://www.akerbrygge.no/wp-content/uploads/2015/06/Ark.jpg\nThe first image is some how now coming by changing the following code in SDWebImageDecoder.m\n```\n+ (UIImage )decodedImageWithImage:(UIImage )image {\n    // do not decode animated images\n    if (image.images) { return image; }\nCGImageRef imageRef = image.CGImage;\n\nCGImageAlphaInfo alpha = CGImageGetAlphaInfo(imageRef);\nBOOL anyAlpha = (alpha == kCGImageAlphaFirst ||\n                 alpha == kCGImageAlphaLast ||\n                 alpha == kCGImageAlphaPremultipliedFirst ||\n                 alpha == kCGImageAlphaPremultipliedLast);\n\nif (anyAlpha) { return image; }\n\nsize_t width = CGImageGetWidth(imageRef);\nsize_t height = CGImageGetHeight(imageRef);\n\n// default RGB\nCGColorSpaceRef RGBcolorSpace = CGColorSpaceCreateDeviceRGB();\n\n// current\n//CGColorSpaceModel imageColorSpaceModel = CGColorSpaceGetModel(CGImageGetColorSpace(imageRef));\n\nCGContextRef context = CGBitmapContextCreate(NULL, width,\n                                             height,\n                                             CGImageGetBitsPerComponent(imageRef),\n                                             0,\n                                             RGBcolorSpace,\n                                             kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);\n\n// Draw the image into the context and retrieve the new image, which will now have an alpha layer\nCGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);\nCGImageRef imageRefWithAlpha = CGBitmapContextCreateImage(context);\nUIImage *imageWithAlpha = [UIImage imageWithCGImage:imageRefWithAlpha];\n\nCGColorSpaceRelease(RGBcolorSpace);\nCGContextRelease(context);\nCGImageRelease(imageRefWithAlpha);\n\nreturn imageWithAlpha;\n\n}\n```\nbut still the 2nd and 3rd images not loading.if you can guide us.\nThanks & Regards\n. Still it's not working. i am troubleshooting. \n. ",
    "pengxuyuan": "i see you do some change about dispatch_main_async_safe\ndefine dispatch_main_async_safe(block)\\\nif ([NSThread isMainThread]) {\\\n    block();\\\n} else {\\\n    dispatch_async(dispatch_get_main_queue(), block);\\\n}\n\n->\nifndef dispatch_main_async_safe\ndefine dispatch_main_async_safe(block)\\\nif (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) {\\\n    block();\\\n} else {\\\n    dispatch_async(dispatch_get_main_queue(), block);\\\n}\n\nendif\nhow this change can resolve this problem \uff1f. why\uff1f which you SD version? 3.X or 4.0.0?. ",
    "weipinglii": "@bpoplauschi I'am a little confused, why we need this macro dispatch_main_async_safe? \n. Call dispatch_async(dispatch_get_main_queue(), block) on main_queue seems fine for me since i won't block mainqueue like dispatch_sync(). Is this macro defined for performance or something else? . figure it out now,  the \"safe\" part is about execute the block directly on current queue, not about dispatch_async when current queue is main queue, am i right? . ",
    "ryo-ogata": "Why failed Travis CI build? :cry:\n. ",
    "rcodddow": "I get a similar error when trying to prefetch a large number of images, namely 18,000. The first 4,100 images are fetched quickly and then badness happens. \n: CGBitmapContextInfoCreate: unable to allocate 1971200 bytes for bitmap data\n: CGContextDrawImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\n: CGBitmapContextCreateImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability. This notice is a courtesy: please fix this problem. It will become a fatal error in an upcoming update.\nPrefetched 4141 out of 18034 (Failed)\nmalloc: * mach_vm_map(size=561152) failed (error code=3)\n* error: can't allocate region\n*** set a breakpoint in malloc_error_break to debug\n. Yes, I updated yesterday.\n. ",
    "aslam9691": "i'm also getting same issue. i'm using pod version (4.2.3). ",
    "ElfSundae": "So in my pch file, I have already defined NSLog to blank, then the \"NSLog macro redefined\" warning shows up when release building.\n```\n// in my project pch file\nif DEBUG\n#define NSLog(fmt, ...) NSLog((@\"%@:%d %s \" fmt), [[NSString stringWithUTF8String:__FILE__] lastPathComponent], __LINE__, __PRETTY_FUNCTION__, ##__VA_ARGS__)\n\nelse\n#define NSLog(fmt, ...)\n\nendif\n```\n. +1 #1253 \n. ",
    "Agenric": "CGBitmapContextCreateImage: invalid context 0x0. This is a serious error. This application, or a library it uses, is using an invalid context  and is thereby contributing to an overall degradation of system stability and reliability.\n. ",
    "AndyZhaoHe": "ok\n. ",
    "Coeur": "I've kept the old names as deprecated methods: there won't be issue with backwards compatibility\n. ",
    "crarau": "Are you using cocoapods 0.38.2? Run pod --version.\nThanks,\nCiprian.\nOn Tue, Aug 18, 2015 at 1:54 AM Konstantinos K. notifications@github.com\nwrote:\n\n@crarau https://github.com/crarau i cloned your repo and did a pod\ninstall and everything is working fine. The project compiles and runs just\nfine. Is there a step i am missing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1261#issuecomment-132081416.\n. Created a pull request to integrate into master from my fork.\n. It seems that the travis-ci build it's failing with\n/Users/travis/build/rs/SDWebImage/SDWebImage/UIImage+WebP.m:11:9: fatal error: 'libwebp/webp/decode.h' file not found\n\nimport \nThat's what I was afraid it would happen. \nPlease advise what might be a better solution to this issue.\nThanks\n. ",
    "qingpengchen2011": "I encountes same problem. \n. ",
    "strivingboy": "this issue recurrence after pod 'SDWebImage', '~> 3.7.3'\n. ",
    "vidcina": "I have the same problem. It appears randomly and really hard to reproduce.\n. ",
    "armnotstrong": "Hi, we came to the same issue with the latest version(3.7.3), when scrolling the Cells of UITableView very fast. randomly the scrolling may be frozen.\nWe invoke SDWebImage like this:\n- (void)configureImageWitURL:(NSURL *)imageURL\n{\n    @weakify(self);\n    [self sd_setImageWithURL:imageURL placeholderImage:nil options:SDWebImageRetryFailed progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n        @strongify(self);\n        [self.progressView setProgress:receivedSize / (float)expectedSize];\n    } completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n        @strongify(self);\n        self.progressView.hidden = YES;\n        if (cacheType != SDImageCacheTypeMemory) {\n            self.alpha = 0;\n            [UIView animateWithDuration:0.3 animations:^{\n                self.alpha = 1;\n            }];\n        }\n    }];\n}\nAnd here is the screenshot of Xcode when the list got frozen and crashs:\n\nHope this may help figuring out where the problem is.\n. @timkoma I tried dispatch_async, and it seems problem solved, (Though I'm not very certain of that, because this happened randomly, but I haven't came to that problem since change the code with dispatch_async). Thanks\n. ",
    "follyxing": "I have the same problem\n. ",
    "victorBaro": "I have read other issues and it works okay using the following code:\n```\n    [self.productImageView sd_setImageWithURL:thumbnailURL\n                                    completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL imageURL){\n                                        [SDWebImageDownloader.sharedDownloader downloadImageWithURL:largeImageURL\n                                                                                            options:0\n                                                                                           progress:^(NSInteger receivedSize, NSInteger expectedSize)\n                                         {\n                                             // progression tracking code\n                                         }\n                                                                                          completed:^(UIImage image, NSData data, NSError error, BOOL finished)\n                                         {\n                                             if (image && finished)\n                                             {\n                                                 self.productImageView.image = image;\n                                             }\n                                         }];\n                                }];\n\n```\n. It works only if you have 1 image. But in case of using it on a tableView/collectionView it doesn't work. It is not a good solution.\n. Same here. Solved it with Dispatch after and forgot to post it.\n. ",
    "com314159": "I have met this problem too. In my case , the first load thumbnailURL is failed , and the second load complete block will not be called, and it will failed load image. It sees cancelled by the first load operation . my code is like this \n```\n - (void) loadImage:(UIImageView ) imageView withUrl:(NSString )url buildUrl:(NSString )buildUrl placeholderImage:(UIImage)image loadingImageMode:(UIViewContentMode)mode successImageMode:(UIViewContentMode)loadMode  ani:(LoadImageAnimation)ani   success:(void(^)(SDImageCacheType cacheType))successblock failure:(void (^)(NSError *))failureblock {\nif (buildUrl == nil) {\n    [self loadImage:imageView withUrl:url placeholderImage:image loadingImageMode:mode successImageMode:loadMode ani:ani success:successblock failure:failureblock];\n    return ;\n}\n@weakify(self);\n[self loadImage:imageView withUrl:buildUrl placeholderImage:image loadingImageMode:mode successImageMode:loadMode ani:ani success:^(SDImageCacheType cacheType){\nif (successblock) {\n    successblock(cacheType);\n}\n\n} failure:^(NSError *error) {\n    KSLog(@\"failure buildUrl %@\",buildUrl);\n@strongify(self);\n\n[self loadImage:imageView withUrl:url placeholderImage:image loadingImageMode:mode successImageMode:loadMode ani:ani success:^(SDImageCacheType type) {\n\n    KSLog(@\" \u7b2c\u4e8c\u6b21\u52a0\u8f7d\u56fe\u7247\u6210\u529f %@\",url);\n\n    if (successblock) {\n        successblock(type);\n    }\n\n} failure:^(NSError *e){\n\n    KSLog(@\" \u7b2c\u4e8c\u6b21\u52a0\u8f7d\u56fe\u7247\u5931\u8d25 %@\",url);\n\n    if (failureblock) {\n        failureblock(e);\n    }\n\n}];\n\n}];\n  }\n\n(void) loadImage:(UIImageView ) imageView withUrl:(NSString ) url placeholderImage:   (UIImage)image loadingImageMode:(UIViewContentMode)mode successImageMode:(UIViewContentMode)loadMode ani:(LoadImageAnimation)ani success:(void(^)(SDImageCacheType cacheType))success failure:(void (^)(NSError ))failure {\n\nif (imageView == nil) {\n    if (failure) {\n        NSError *error = [[NSError alloc] initWithDomain:@\"ks\" code:0 userInfo:@{@\"error\":@\"imageView is nil\"}];\n        failure(error);\n    }\n    return ;\n}\nimageView.contentMode = mode;\nNSString *urlDecode = [url decodedURLString];\nif ([urlDecode isEqualToString:url]){\n    url = [url encodedURLString];\n}\n[imageView sd_setImageWithURL:[NSURL URLWithString:url] placeholderImage:image completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL *imageURL) {\n    if (!error) {\n    imageView.contentMode = loadMode;\n    if (cacheType == SDImageCacheTypeNone) {\n        [self aniImage:imageView ani:ani];\n    }\n\n    if (success) {\n        success(cacheType);\n    }\n\n    KSLog(@\"\u52a0\u8f7d\u56fe\u7247\u6210\u529f %@\",url);\n}\nelse {\n    KSLog(@\"\u52a0\u8f7d\u56fe\u7247\u9519\u8bef,Url:%@, \u9519\u8bef\u4fe1\u606f%@\",url,error);\n    if (failure){\n        failure(error);\n    }\n}\n\n}];\n  }\n```\n. I sovled it by add a dispath after, like this \nif ([self isCacheExist:url]) {\n        [self getCache:url done:^(UIImage *image) {\n            imageView.image = image;\n        }];\n    } else {\n                   dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)),     dispatch_get_main_queue()\n              // do second load image\n    }\n }\n. ",
    "AntiMoron": "@mythodeia  This should be labeled a bug. And I don't think this should be closed with a 'workaround' instead of a 'bugfix'.\n. @mythodeia  Hey, have we fixed this issue in 4.x?\nI can not pod search a 4.x version.\n. ",
    "guidev": "still there in 3.8.1\n. I believe that the best way to solve this is to disable the in-memory cache just for the prefetcher. Is there any way to do it? \n. +1. +1. Apparently this has already been fixed (https://github.com/rs/SDWebImage/pull/1911), but not yet on master.. ",
    "nickfl": "Project[39121:248990] CFNetwork SSLHandshake failed (-9824)\nProject[39121:248990] NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9824)\n. ",
    "holgersindbaek": "@mythodeia @nickfl It's not working with me neither. How did you guys fix it?!\n. @mythodeia I have checked the links above... I need a \"here's what you need to do to fix this problem\"-link, not a \"read these many pages and you might be able to google your way to a solution somewhere in the future\"-link. Is this a fixable problem or?! \n. @mythodeia You're right... sorry for the impatience.\n. ",
    "izackp": "No idea why its failing travis\n. ",
    "arielelkin": "@bpoplauschi:\n- Swift can read C preprocessor macros, but cannot set them. See the Preprocessor Directives section of the documentation. So Swift users cannot control this logging. This \"feature\" is effectively not compatible with Swift, so I guess that's a strong reason to remove it. \n- Another reason to remove it is that SDWebImagePrefetcher is the only class in SDWebImage that logs to the console. Why should this completely auxiliary class log anything to the console if core classes, such as, SDImageCache, SDWebImageDownloader, or UIImageView+WebCache don't log anything to the console? Consistency is another strong reason to remove this \"feature\".\nWhat are your thoughts? \n. Resubmitting this again (see https://github.com/rs/SDWebImage/pull/1269), as I believe this addresses worthwhile issues that should be dealt with. \n- Consistency is a reason to remove this logging: SDWebImagePrefetcher is the only class in SDWebImage that logs to the console. Why should this completely auxiliary class log anything to the console if core classes, such as, SDImageCache, SDWebImageDownloader, or UIImageView+WebCache don't log anything to the console? \n- Lack of control for this logging is another reason for this pull request. The only way to control SDWebImagePrefetcher's logging is by setting its C preprocessor macros, but that can't be done from a Swift project. Swift can read C preprocessor macros, but cannot set them. See the Preprocessor Directives section of the documentation. So Swift users cannot control this logging. This \"feature\" is effectively not compatible with Swift.\nBasically, SDWebImagePrefetcher is doing unnecessary and inconsistent logging that can't be controlled with Swift. \n. @bpoplauschi \n@mythodeia \n@harishkashyap \nWe've been waiting to hear back from you about concrete objections against this pull request.. Let us know if there are any, otherwise, could you please consider merging it? \nCheers\n. This has been going on for more than a year now.\nhttps://github.com/rs/SDWebImage/issues/823\nhttps://github.com/rs/SDWebImage/issues/1318\nIt would be good to have some clarity. We need to know if and when the migration to NSURLSession is planned for, and if it'll depend on AFNetworking. Could we please have an update? \n. \ud83d\udc4d \n. ",
    "ashchan": "Perhaps try import SDWebImage instead.\n. ",
    "pmcguane": "Using CocoaPods\nPodfile\nplatform :ios, '6.1'\npod 'SDWebImage', '~>3.7\u2019\npod install\nUpdating local specs repositories\nCocoaPods 0.39.0.beta.3 is available.\nTo update use: gem install cocoapods --pre\n[!] This is a test version we'd love you to try.\nFor more information see http://blog.cocoapods.org\nand the CHANGELOG for this version http://git.io/BaH8pQ.\nAnalyzing dependencies\nDownloading dependencies\nUsing SDWebImage (3.7.3)\nGenerating Pods project\nIntegrating client project\nSending stats\n[!] The CoffeeSVP User [Debug] target overrides the OTHER_LDFLAGS build setting defined in Pods/Target Support Files/Pods/Pods.debug.xcconfig'. This can lead to problems with the CocoaPods installation\n    - Use the$(inherited)` flag, or\n    - Remove the build settings from the target.\n[!] The CoffeeSVP User [Release] target overrides the OTHER_LDFLAGS build setting defined in Pods/Target Support Files/Pods/Pods.release.xcconfig'. This can lead to problems with the CocoaPods installation\n    - Use the$(inherited)` flag, or\n    - Remove the build settings from the target.\n\nOn 30 Aug 2015, at 6:32 PM, Konstantinos K. notifications@github.com wrote:\nhow are you installing the library? follow the steps shown here https://github.com/rs/SDWebImage#installation\n\u2014\nReply to this email directly or view it on GitHub https://github.com/rs/SDWebImage/issues/1273#issuecomment-136098013.\n. solved by updating the platform iOS from 6.1 to 6.0\nOn 30 Aug 2015, at 7:58 PM, Konstantinos K. notifications@github.com wrote:\ndid you add the $(inherited) flag like the installation notes suggest?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/rs/SDWebImage/issues/1273#issuecomment-136123072.\n. \n",
    "gongqiuwei": "memory cache using NSCache, in SDImageCache.m , it has a provide property named memCache, i think the author don not allow others to change the memory cache\n. ",
    "KittenYang": "@gongqiuwei  Thanks, but I get the image in [SDWebImageManager downloadImageWithURL...], but I don't need the image right now,I need the diskcache path and  send it to a UIWebView.How can I get the cache path in [SDWebImageManager downloadImageWithURL...]?\n. Hi,Thanks @mythodeia  What is the param path? I see the doc says @param path : the cach path root  folder ,but I don't know what's my root folder.Actually,I get disk cache path like this:\n``` objc\n        [manager downloadImageWithURL:[NSURL URLWithString:_url] options:SDWebImageHighPriority progress:nil completed:^(UIImage image, NSError error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n            if (image && finished) {\n            NSString *key = [manager cacheKeyForURL:imageURL];\n            NSString *source = [manager.imageCache defaultCachePathForKey:key];\n        }\n    }\n\n```\nBut unluckily,the source may be nil. I think it's because the image not really cache in disk so I get nil.So how can I get disk cache path in - (id <SDWebImageOperation>)downloadImageWithURL:(NSURL *)url\n                                         options:(SDWebImageOptions)options\n                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                       completed:(SDWebImageCompletionWithFinishedBlock)completedBlock; this method? Does - (NSString *)cachePathForKey:(NSString *)key inPath:(NSString *)path; will face the some problem of - (NSString *)defaultCachePathForKey:(NSString *)key; which I met? Thanks for you help.\n. ",
    "ibnusina": "Hi,\nI have image with link : https://harper.bridestory.com/image/upload/fl_progressive,f_auto,c_scale,q_80,w_134,dpr_2/v1500286382/k9pjbfqfidjvp5ccfwhr.png, it can be accessed from browser but, it failed to load when using sd_setImageWithURL:placeholderImage:options:completed:.\nI also get no image data in \nObjective-C\nSDWebImageDownloadToken *subOperationToken = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage *downloadedImage, NSData *downloadedData, NSError *error, BOOL finished) {\n                __strong __typeof(weakOperation) strongOperation = weakOperation;\n                if (!strongOperation || strongOperation.isCancelled) {\n                    // Do nothing if the operation was cancelled\n                    // See #699 for more details\n                    // if we would call the completedBlock, there could be a race condition between this block and another completedBlock for the same object, so if this one is called second, we will overwrite the new data\n                } else if (error) {\n                    [self callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];\nCan you help me regarding to this problem? Thank you.. @mythodeia ok, thanks for your help.. ",
    "VikasPrajapati27": "I am facing the same issue, getting \"Downloaded image has 0 pixels\" error message.\nUsing SDWebImage 4.3.3. ",
    "MohamedSaad": "Also if \"/Library/Caches\" can be deleted by iOS for any reason, can i switch cache path for some of my images to Document folder instead Caches?\n. Thanks!\n. ",
    "cristi1900": "@mythodeia  Thanks for the answer, I did not see that line. Yes, I have the latest version from the pod.\nBut there is the second condition   \nBOOL shouldBeFailedURLiOS7 = (NSFoundationVersionNumber > NSFoundationVersionNumber_iOS_6_1 && error.code != NSURLErrorInternationalRoamingOff && error.code != NSURLErrorCallIsActive && error.code != NSURLErrorDataNotAllowed);\nWhich returns true , since the error code is -1009 for not connected to the internet,\nand it checks if the code is neither of the [-1018,-1019,-1020] and i'm running this on iOS 8.1.\nSo we end up having one flag true, and the other one false in the following if \nshouldBeFailedURLAlliOSVersion = NO;\nshouldBeFailedURLiOS7 = YES;\nif (shouldBeFailedURLAlliOSVersion || shouldBeFailedURLiOS7) {\n                         @synchronized (self.failedURLs) {\n                             [self.failedURLs addObject:url];\n                         }\n                    } \n\nIn the end , it just adds my urls to the failed urls, and never downloads them after I connect back to the internet, until I restart the app.\n. ",
    "fjorn": "I added the library via visual studio through adding a component. The file\nis added once to references.\nOn Thursday, September 3, 2015, Konstantinos K. notifications@github.com\nwrote:\n\n@fjorn https://github.com/fjorn this is from UIImage+WebP.h file\nhttps://github.com/rs/SDWebImage/blob/master/SDWebImage/UIImage%2BWebP.h\n.\nhave you added the file twice? how are you installing the library?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1283#issuecomment-137653908.\n. I will ask the question on the Xamarin forum. Thank you!\n. \n",
    "sushipan": "@mythodeia \nI know , But if I get it with  Firefox or Safari , I can get the right image\n. Thank you very much  ! @mythodeia \n. ",
    "longxianlin": "libSDWebImageARC.a\n. ",
    "rraghul": "i am not supposed to share the urls but these are indeed happening, i am able to replicate the issue again and again\n. ",
    "alexchan1680": "UIImage+MultiFormat.m  should be changed like this\n```\nimport \"UIImage+FixOrient.h\"\n\n\n(UIImage )sd_imageWithData:(NSData )data {\n    if (!data) {\n        return nil;\n    }\nUIImage image;\nNSString imageContentType = [NSData sd_contentTypeForImageData:data];\nif ([imageContentType isEqualToString:@\"image/gif\"]) {\n    image = [UIImage sd_animatedGIFWithData:data];\n}\nifdef SD_WEBP\nelse if ([imageContentType isEqualToString:@\"image/webp\"])\n{\n    image = [UIImage sd_imageWithWebPData:data];\n}\nendif\nelse {\n    image = [[UIImage alloc] initWithData:data];\n    UIImageOrientation orientation = [self sd_imageOrientationFromImageData:data];\n    if (orientation != UIImageOrientationUp) {\n        image = [image fixOrientation];\n    }\n}\nreturn image;\n}\n```\n. \n\n",
    "hovox": "Why not to use raw NSURLSession ? I think there is no need to add dependency to other network for that\n. ",
    "macdrevx": "+1 against adding AFNetworking as a dependency.\n. ",
    "justindhill": "Another +1 against adding AFNetworking as a dependency.\n. ",
    "adle29": "+1 against adding AFNetworking as a dependency. \n. I need this fixed! Have no idea how to solve it. \n. ",
    "kconner": "+1 against. I would probably find another image cache if SDWebImage depended on AFNetworking. NSURLSession is capable, won't add code size, and typically only requires you to call a convenience method or two.\n. Yeah, I'd say that adding AFNetworking as a dependency is the issue. The code you write for NSURLSession would be almost as short, if that helps. I'd rather not have child dependencies, because I use SDWebImage as a drop-in solution for fetching images. I like it because it feels fast and light and won't complicate my build products more than necessary. Libraries like AFNetworking are useful to me, some of the time, but I'd rather make that decision per-app. SDWebImage, on the other hand, I want to use in nearly every app, so I don't want it to feel like it will cost more code size, link time, security risk, etc.\n. ",
    "flightblog": "I agree with @kconner. \n. ",
    "prachigauriar": "I\u2019d also find another image cache if AFNetworking were added as a dependency. Because NSURLConnection is deprecated, people will be migrating to NSURLSession anyway, so supporting both isn\u2019t really that important, right?\n. @bpoplauschi I avoid using AFNetworking in basically all my projects now. It\u2019s a lot of code that doesn\u2019t really do much that can\u2019t also be accomplished with NSURLSession. But SDWebImage is still something I like and rely on. Having it bring along a huge dependency (and its potential bugs) makes SDWebImage less attractive. \nFWIW, I was able to strip all of AFNetworking out of a project and replace it with NSURLSession in about a day. AFNetworking\u2019s value is much diminished at this point.\n. ",
    "Ge0rges": "Seems like using AFNetworking would be more work then just fixing the single depreciation no?\n. I also get this error on the latest version.\nSDWebImage/SDWebImageDownloaderOperation.m:96:52: 'initWithRequest:delegate:startImmediately:' is deprecated: first deprecated in iOS 9.0 - Use NSURLSession (see NSURLSession.h)\n. What's necessary to implement until support for WatchOS is added?\n. ",
    "portellaa": "Until the release comes out, we are using the master version. \n. The version from master.\nInstead of pod 'SDWebImage', '~>3.7.3' use pod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git', :branch => 'master'\n. ",
    "MuthurajMuthulingam": "I copied all source files into my project and build for Device (not simulator, since simulator works fine).\n\n[UIApplication performSelector:@selector(sharedApplication)];\n. Please find screenshot of Demo Project\n\n. How Could I SDWebImage without pods dependancies, Since I need to maintain  pods free version of my custom framework.\nWhat exactly the issue means ?\n. ",
    "Crementae": "@mythodeia thanks for your answer! I'm still a beginner programmer. Can you provide me some example please.\n. @mythodeia thanks for reply, i will upload my project demo later.\n. @mythodeia \n```\nUIImageView * thumbnail = [[UIImageView alloc] init];\n    NSURL *urlToPicture1 = [NSURL URLWithString:currentMarker.thumbnail];\n    [thumbnail sd_setImageWithURL:urlToPicture1 placeholderImage:[UIImage imageNamed:@\"placeholder.png\"] options:SDWebImageProgressiveDownload completed:^(UIImage * image, NSError * error,SDImageCacheType cachedType, NSURL * imageURL){\n    if(image){\n        [thumbnail setImage:image];     \n        NSLog(@\"Complete = %d, error = %@\",cachedType, error);\n\n    }\n}];\n\n```\nFrom the code above I figured it out from NSLog that URL image will start download after I clicked pin marker for the first time.\nHere is NSLog image after clicked pin marker for the first time.\n\nAfter I clicked pin marker for the second time it will display URL image that was downloaded after the first clicked. \nHere is NSLog image after clicked pin marker for the second time.\n\nWhat I need to do is I need to make UIImageView replace the place holder image to URL image after URL image finished download but I don't know how to do it.\n. @mythodeia  here is my project.\nhttps://github.com/Crementae/-Project---Demo\n. @mythodeia ok, I got it. thanks for your answer.\n. ",
    "IlyaBaudin": "marker.tracksInfoWindowChanges = true\nmapInfoView.configureMarker(withUser: markerData) { (complete) in\n     if complete {\n          marker.tracksInfoWindowChanges = false\n     }\n}\nconfiureMarker function with completionHandler\navaImage.sd_setImage(with: imageUrl,\n                     placeholderImage: #imageLiteral(resourceName: \"placeholder\"),\n                     options: SDWebImageOptions(rawValue: 0), \n                     completed: { (image, error, cacheType, imageUrl) in\n                        completionHandler(true)\n})\nsomething like this.\nfound some information in stackoverflow and make my code.\nsimple and clear.\n. ",
    "NaiyerAghaz": "Please check the info.plist is added these code or not\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSAllowsArbitraryLoads</key>\n    <true/>\n    <key>NSExceptionDomains</key>\n    <dict>\n        <key>example.com</key>\n        <dict>\n            <key>NSExceptionAllowsInsecureHTTPLoads</key>\n            <true/>\n            <key>NSIncludesSubdomains</key>\n            <true/>\n        </dict>\n    </dict>\n</dict>\nthen you can add these codes as you need.\nlet imageURL = URL(string: driverImg)!\n       cell.imgDrivers.sd_setShowActivityIndicatorView(true)\n        cell.imgDrivers.sd_setIndicatorStyle(.gray)\n        cell.imgDrivers.sd_setImage(with: imageURL). ",
    "yakubbaev": "+1\n. Related #530 \n. ",
    "renssies": "When cocoapods supports tvOS it should add the s.tvos.deployment_target = '9.0' to the podspec and exclude the MapKit subspec for tvOS.\n. I gave it go yesterday but it does not yet support it. If nobody is working on it, I might do it later. \nCurrently I solved it by having my image locally, since it's only one image. \n. ",
    "alejandro-isaza": "It works with carthage as long as you delete files that reference MapKit\n. ",
    "hoseking": "The above PR adds a tvOS framework target, it is working for us using Carthage.\n. @syedabdulsamad the above PR has been merged, point your pod to 30e9e0b516cca03d9f2abe75a91512d75b846406 to get tvOS support.\n. No problem.\n. A tag has not been made with these changes yet. You need to point your pod to a specific commit, https://guides.cocoapods.org/using/the-podfile.html\n. No problem :)\n. ",
    "martnst": "Using a custom podspec so I could add s.tvos.deployment_target = '9.0' it also works seamless with Cocoapods. \n. ",
    "waterclock": "Does SDWebImage caching properly handle the lack of a persistent cache on tvOS?\n. Cocoapods won't work yet as far as I know. I simply copied the classes and manually added the frameworks. Works well on Simulator, haven't tested on actual device. As far as Swift, once integrated into the project it should be like accessing any other Objective-C code.\n. ",
    "ehynds": "Also wondering if SDWebImage supports remote download of the new lsr layered images. A quick test shows that it does not, but haven't been able to dig into it too far.\n. ",
    "syedabdulsamad": "Can some one guide me how i can integrate it in my TVOS project either by cocoapod or code copying? I am writing this project in Swift? So some steps will be a great help. \nThanks\n. ",
    "antoniocasero": ":+1: \n. ",
    "dWoeckel": "hi and thanks for adding tvos support :) could you please add the updated podspec to the CocoaPods spec repo? though the version number is the same, sadly the tvos support is still missing there. I would like to add SDWebImage as a dependency, but could not integrate it due to CocoaPods lacking support of git references. Thanks a lot! :)\n. @orta thanks for your reply :) I know how it works in the podfile, but I need it in my podspec , because I'm trying to add SDWebImage as a dependency for a private pod I'm working on\n. ",
    "Yexinglong": "Sorry, I do not know SDWebImage problem, ios8 system data and presentation is normal, I look at the data in the cache simulator inside SDWebimage above, we found no repetition! But now the project which does not use any associated storage method, simply load SDWebImage big picture on the TableView, use ios9 real machine,\nExample unable to show demo\nOnly code block\n```\n WS(ws)\n        __weak MiYiTagEditorImageView *weakImageView =tagEditorImageView;\n        dynamicScrollView.imageRefreshBlock= ^(NSString * imageIndex ,id image)\n        {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0      \u00a0//Inside the operation did not use any storage\n        [weakImageView removeTag];\n        NSString *imageString =image;\n        [weakImageView.previewsImage sd_setImageWithURL:[NSURL URLWithString:imageString] placeholderImage:nil completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n            [weakImageView imageTagFrame:YES];\n            MiYiPostsImageSModel *model =[MiYiPostsImageSModel objectWithKeyValues:ws.postDetailsModel.images[[imageIndex intValue]]];\n            for(int i =0 ; i<model.tags.count ;i++){\n                MiYiPostsImageTagIdsModel *tagModel = [MiYiPostsImageTagIdsModel objectWithKeyValues: model.tags[i]];\n                if (tagModel.tag_content.length!=0) {\n                    [weakImageView addtagViewimageClickinit:CGPointZero isClick:NO mode:tagModel];\n                }\n            }\n        }];\n    };\n\n```\n. Sorry, not SDWebimage question, I seemingly found the problem! But I do not understand is that this document is doing?\n2015-09-21 23:25:08.966 MiYi[2370:415781] dir /var/mobile/Containers/Data/Application/D3FF105B-8F1A-49CB-AE5F-B565B5804E84/tmp/stack-logs.2167.1004d8000.MiYi.mPFLnu.index subfiles (null)  att {\n    NSFileCreationDate = \"2015-09-21 14:20:58 +0000\";\n    NSFileExtensionHidden = 0;\n    NSFileGroupOwnerAccountID = 501;\n    NSFileGroupOwnerAccountName = mobile;\n    NSFileModificationDate = \"2015-09-21 14:22:54 +0000\";\n    NSFileOwnerAccountID = 501;\n    NSFileOwnerAccountName = mobile;\n    NSFilePosixPermissions = 384;\n    NSFileProtectionKey = NSFileProtectionCompleteUntilFirstUserAuthentication;\n    NSFileReferenceCount = 1;\n    NSFileSize = 16523496;\n    NSFileSystemFileNumber = 26564899;\n    NSFileSystemNumber = 16777219;\n    NSFileType = NSFileTypeRegular;\n}\n2015-09-21 23:25:08.967 MiYi[2370:415781] dir /var/mobile/Containers/Data/Application/D3FF105B-8F1A-49CB-AE5F-B565B5804E84/tmp/stack-logs.2240.100478000.MiYi.yolYij.index subfiles (null)  att {\n    NSFileCreationDate = \"2015-09-21 14:48:53 +0000\";\n    NSFileExtensionHidden = 0;\n    NSFileGroupOwnerAccountID = 501;\n    NSFileGroupOwnerAccountName = mobile;\n    NSFileModificationDate = \"2015-09-21 14:49:16 +0000\";\n    NSFileOwnerAccountID = 501;\n    NSFileOwnerAccountName = mobile;\n    NSFilePosixPermissions = 384;\n    NSFileProtectionKey = NSFileProtectionCompleteUntilFirstUserAuthentication;\n    NSFileReferenceCount = 1;\n    NSFileSize = 9935376;\n    NSFileSystemFileNumber = 26568525;\n    NSFileSystemNumber = 16777219;\n    NSFileType = NSFileTypeRegular;\n}\n. I found out what the reasons are, and also thank you for attention to my problem\nThis problem is the reason I opened MallocStack  (^__^) \u563b\u563b\u2026\n. ",
    "davidlin7876": "Fixed\ninfo.plist add\n    NSAppTransportSecurity\n\nNSAllowsArbitraryLoads\n\n\n. ",
    "serkrapiv": "@mythodeia Well, according to https://github.com/rs/SDWebImage/issues/1252, https://github.com/rs/SDWebImage/issues/821 and https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageManager.h#L39 it should still respect HTTP cache headers. And, if they are correct, don't load new image.\n. @mythodeia It seems that to get 304 status code we have to send last modified date in If-Modified-Since request header anyway, or ETag in If-None-Match. So, as I understand, there is no way to receive 304 status code with current implementation anyway? And yes, in that case we should store ETag and last modification date with each image.\n. ",
    "joelekstrom": "I'm not sure this is an issue (anymore at least). When looking at the source code, using SDWebImageRefreshCached will make SDWebImage use NSURLCache for caching. This means that etags and last modified should be handled by NSURLCache, which should mean that they work.\nOr am I missing something here?. ",
    "Fabs": "I think this could be related:\nhttp://stackoverflow.com/questions/32675319/sdwebimage-stopped-after-swift2\n. I have disabled App Transport Security as stated here (http://www.fiveminutewatchkit.com/blog/?category=NSURLSession) and for me it solved the problem. \n. ",
    "funkyLover": "@mythodeia the library is latest version,\nand use the __weak doesn't make it work too,\n. ",
    "MickeyHub": "I also get it in iOS9, below is console log:\ntext\nThis application is modifying the autolayout engine from a background thread, which can lead to engine corruption and weird crashes.  This will cause an exception in a future release.\n Stack:(\n    0   CoreFoundation                      0x0000000110a78f65 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x00000001104efdeb objc_exception_throw + 48\n    2   CoreFoundation                      0x0000000110a78e9d +[NSException raise:format:] + 205\n    3   Foundation                          0x000000010e4ec3b5 _AssertAutolayoutOnMainThreadOnly + 79\n    4   Foundation                          0x000000010e34d1be -[NSISEngine withBehaviors:performModifications:] + 31\n    5   UIKit                               0x000000010f8f9637 -[UIView(AdditionalLayoutSupport) _withAutomaticEngineOptimizationDisabledIfEngineExists:] + 58\n    6   UIKit                               0x000000010f8fa17a -[UIView(AdditionalLayoutSupport) updateConstraintsIfNeeded] + 254\n    7   UIKit                               0x000000010f62d498 -[UITableViewCellContentView updateConstraintsIfNeeded] + 185\n    8   UIKit                               0x000000010f8fae8f -[UIView(AdditionalLayoutSupport) _updateConstraintsAtEngineLevelIfNeeded] + 272\n    9   UIKit                               0x000000010f11960c -[UIView(Hierarchy) _updateConstraintsAsNecessaryAndApplyLayoutFromEngine] + 159\n    10  UIKit                               0x000000010f12911c -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 710\n    11  QuartzCore                          0x000000010edf936a -[CALayer layoutSublayers] + 146\n    12  QuartzCore                          0x000000010ededbd0 _ZN2CA5Layer16layout_if_neededEPNS_11TransactionE + 366\n    13  QuartzCore                          0x000000010ededa4e _ZN2CA5Layer28layout_and_display_if_neededEPNS_11TransactionE + 24\n    14  QuartzCore                          0x000000010ede21d5 _ZN2CA7Context18commit_transactionEPNS_11TransactionE + 277\n    15  QuartzCore                          0x000000010ee0f9f0 _ZN2CA11Transaction6commitEv + 508\n    16  QuartzCore                          0x000000010ee10154 _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv + 92\n    17  CoreFoundation                      0x00000001109a49d7 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23\n    18  CoreFoundation                      0x00000001109a4947 __CFRunLoopDoObservers + 391\n    19  CoreFoundation                      0x0000000110999ebc CFRunLoopRunSpecific + 524\n    20  CoreFoundation                      0x0000000110a4d061 CFRunLoopRun + 97\n    21  Apollon                             0x000000010c52f51c -[SDWebImageDownloaderOperation start] + 1868\n    22  Foundation                          0x000000010e30a167 __NSOQSchedule_f + 194\n    23  libdispatch.dylib                   0x0000000111ab149b _dispatch_client_callout + 8\n    24  libdispatch.dylib                   0x0000000111a97988 _dispatch_queue_drain + 2215\n    25  libdispatch.dylib                   0x0000000111a96ea9 _dispatch_queue_invoke + 601\n    26  libdispatch.dylib                   0x0000000111a99af2 _dispatch_root_queue_drain + 1420\n    27  libdispatch.dylib                   0x0000000111a99561 _dispatch_worker_thread3 + 111\n    28  libsystem_pthread.dylib             0x0000000111de2a9d _pthread_wqthread + 729\n    29  libsystem_pthread.dylib             0x0000000111de03dd start_wqthread + 13\n. demo project ? where\n. Oh, have not tried, I got this in my project.\n. wow, does iOS9 feature ? I haven't got this in iOS7&8.\n. YES, thanks very much, I got reason, for I set imageview's image property in background thread like:\nobjc\n[self.friendsViewModel obtainAvatarForType:self.type atIndexPath:(NSIndexPath*)indexPath success:^(UIImage *avatar) {\n         //current thread is not main thread\n         cell.headImageView.image = avatar;\n }, failure:nil];\nso I wrap code with dispatch_async(dispatch_get_main_queue(), ^{}, I got successful\n. ",
    "webliupeng": "same problem +1\nit doesn't work on iOS 9\n. ",
    "MarcSky": "Yes, I use inside the table. I did not understand the second question. what could be the problem of speed?\n. If I use sd_setImageWithURL as I scale the image before the show.\n. Please tell me how to run the demo project I wrote that there is no file in the folder vendor.\n. I'm trying to say is that when I run the application the images are not loading.\n. \nI really want to see the project, but can not open it because of these errors, there is no Podfile how to download dependencies.\n. All ! I'll see! I have one question - can there be a reason that the images are not loaded until I have to scroll the table - the choice RestKit framework? Just tell me to use AFNetworking but this is nonsense. By the way I looked at the code in your project, but it is currently copied my problem not solved, you are loaded very small pictures, and I have big - can be a problem - the image size (> 1 MB).\n. All good, my mistake - ignore placeholder image.\nBut I was faced with a new challenge when I put a placeholder image - it breaks my cell layout. That is the image - obtained from the cache starts to change its position, and errors appear in the console. As I put nil in the placeholder the layout is not broken but the image is almost not loaded from the cache.\n(\n    \"NSLayoutConstraint:0x146827a0 V:[UILabel:0x1466b560'\\U0424\\U041e\\U0422\\U041e\\U041f\\U0420\\U041e\\U0415\\U041a\\U0422\\U042b'(21)]\",\n    \"NSLayoutConstraint:0x14612330 V:[UIImageView:0x146853b0(255)]\",\n    \"NSLayoutConstraint:0x14619bd0 V:[UILabel:0x1464bf50'\\U0427\\U0443\\U043a\\U043e\\U0442\\U043a\\U0430. \\U0417\\U043d\\U0430\\U043a\\U043e\\U043c\\U044b\\U0435 \\U0432\\U0441\\U0435 \\U043b\\U0438\\U0441...'(62)]\",\n    \"NSLayoutConstraint:0x146891e0 V:[UILabel:0x1467bc10'\\U00ab\\U0415\\U0441\\U043b\\U0438 \\U0437\\U0432\\U0435\\U0440\\U044c \\U0442\\U0435\\U0431\\U044f \\U0437\\U0430\\U043c\\U0435\\U0442\\U0438\\U043b ...'(81)]\",\n    \"NSLayoutConstraint:0x14689570 V:|-(0)-UIImageView:0x146853b0\",\n    \"NSLayoutConstraint:0x146610a0 V:[UIImageView:0x146853b0]-(NSSpace(8))-[UILabel:0x1466b560'\\U0424\\U041e\\U0422\\U041e\\U041f\\U0420\\U041e\\U0415\\U041a\\U0422\\U042b']\",\n    \"NSLayoutConstraint:0x14661160 V:[UILabel:0x1466b560'\\U0424\\U041e\\U0422\\U041e\\U041f\\U0420\\U041e\\U0415\\U041a\\U0422\\U042b']-(NSSpace(8))-[UILabel:0x1464bf50'\\U0427\\U0443\\U043a\\U043e\\U0442\\U043a\\U0430. \\U0417\\U043d\\U0430\\U043a\\U043e\\U043c\\U044b\\U0435 \\U0432\\U0441\\U0435 \\U043b\\U0438\\U0441...']\",\n    \"NSLayoutConstraint:0x14647600 V:[UILabel:0x1464bf50'\\U0427\\U0443\\U043a\\U043e\\U0442\\U043a\\U0430. \\U0417\\U043d\\U0430\\U043a\\U043e\\U043c\\U044b\\U0435 \\U0432\\U0441\\U0435 \\U043b\\U0438\\U0441...']-(NSSpace(8))-[UILabel:0x1467bc10'\\U00ab\\U0415\\U0441\\U043b\\U0438 \\U0437\\U0432\\U0435\\U0440\\U044c \\U0442\\U0435\\U0431\\U044f \\U0437\\U0430\\U043c\\U0435\\U0442\\U0438\\U043b ...']\",\n    \"NSLayoutConstraint:0x14685890 UITableViewCellContentView:0x1458b290.bottomMargin == UILabel:0x1467bc10'\\U00ab\\U0415\\U0441\\U043b\\U0438 \\U0437\\U0432\\U0435\\U0440\\U044c \\U0442\\U0435\\U0431\\U044f \\U0437\\U0430\\U043c\\U0435\\U0442\\U0438\\U043b ...'.bottom - 2\",\n    \"NSLayoutConstraint:0x14679f60 'UIView-Encapsulated-Layout-Height' V:[UITableViewCellContentView:0x1458b290(379.5)]\"\n)\nWill attempt to recover by breaking constraint \nNSLayoutConstraint:0x14612330 V:[UIImageView:0x146853b0(255)]\n. thanx ! all working wonderful!\n. ",
    "Farhadsaadatpei": "@mythodeia Update the Issue. But I also upload the same photo into Facebook, twitter and they seems to be Correct Orientated. :/\n. I manage to fix it with PHP ImageMagick and erase the EXIF file and add new orientation to it. I believe SDWebImage is okay. Thank you anyway.\n. ",
    "superdev89": "I have same issue\nWhen app is loaded the gif file is showing up correctly in the table cell, but when it reloads again by scrolling up and back again, it shows in wrong orientation.\nHere is the gif I used: https://giphy.com/gifs/teamwork-WOHu2b3HP0Hu0. @mythodeia I am using the latest version using cocoapod and yes I am using FLAnimatedImage. Gifs are showing fine but sometimes in wrong orientation.. ",
    "keegho": "@superdev89 I have the exact same issue....any solutions???\n@mythodeia Yes i installed the SDWebImage/Gif pod\npostCaptionImg.sd_setImage(with: URL(string:picUrlStr), placeholderImage: nil, options: SDWebImageOptions.continueInBackground, progress: { (received, expected, url) in }. ",
    "Je14": "I have the same! Can anyone give me some hints?\n. ",
    "brandonkehl": "Just passing through, I had this same problem. Instead of using NSURLConnection you must use NSURLSession.Since I don't know what your code looks like here is a basic outline of what needs to be there. If you have any trouble consult the class reference . \n`NSURLSession *session = [NSURLSession sharedSession]; \nNSURLSessionDataTask dataTask = [session dataTaskWithRequest:request\n        completionHandler:^(NSData data, NSURLResponse response, NSError error)\n        {\n            // do something with the data \n        }];\n[dataTask resume];`\n. ",
    "dreamgo": "@brandonkehl still doesn't work. can you show more details?\n. ",
    "mastermyx": "@mythodeia It's working, thank you! \n. ",
    "nhatlee": "@mythodeia yes, I am using SDWebImage, as you can see it in the list warning message above.\n. @mythodeia Yes I checked the link you advice to check. But still don't know why get those warning. I think it's relate to the SDWebImage library, cause as the message of the warning said.\n. @mythodeia I check those build setting and it right as you advice. But still cannot remove those warning\n. I don't know but I will return to your advice at weaken\n. ",
    "ohadschn": "See here: https://forums.developer.apple.com/thread/17921. When generating DSYM (presumably for distribution to other machines) you should disable CLANG_ENABLE_MODULES and CLANG_ENABLE_MODULE_DEBUGGING.\n. ",
    "gregorpichler": "You are right, it turned out that there needs to be authorization. I've tried it only in my browser, which had the login credentials cached. Cheers!\n. ",
    "qq6931850": "But I use a browser to access is no problem.Sdwebimage before ios9 can also be accessed\n. I have a lot of link like this.\n. ## is this the image you are trying to access? \nyes\uff0cit is\ndebugged the issue and it seems to be triggering the following warning when CGBitmapContextCreate is running in SDWebImageDecoder.m file\n\ni debugged the url have the same warning\n. Before I use ios8 xcode6 is not the problem, and the picture can also be a correct view\n. i have another warning , i think this may have a relationship\n: CGBitmapContextCreate: unsupported parameter combination: set CGBITMAP_CONTEXT_LOG_ERRORS environmental variable to see the details\n: CGContextDrawImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\n: CGBitmapContextCreateImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\n. thank you . The problem is solved.\n. ",
    "Piyush08": "http://static2.dmcdn.net/static/video/328/648/51846823:jpeg_preview_small.jpg?20121105214944\nplease check this\n. hello @mythodeia \nit is for large.\nby the way, it has valid image\n. ",
    "dhruv-russmediatech": "Hello @mythodeia ,\nPlease check your URL after opening.\nHere is what you are seeing \nhttp://static2.dmcdn.net/static/video/328/648/51846823:jpeg_preview_small.jpg\nBut the way the Actual Image is this one and has ID appended. \nhttp://static2.dmcdn.net/static/video/328/648/51846823:jpeg_preview_small.jpg?20121105214944\n. @mythodeia \nMay be it is not working on your end.\n\n:+1: \n. ",
    "CokeBear": "@mythodeia   thank you very much .  I use  the version  3.7.4  and   try your code .  The problem is solved.\n. ",
    "haifuyun": "@mythodeia  Thank you for your answer to help me solve this problem\uff01\n. ",
    "dengzhp": "+1, same problem here. why not commit this patch to repo?\n. @mythodeia yes, specifying ':head' in Podfile fix this problem, while the latest release '3.7.5' still has this problem. Thanks.\n. ",
    "solidfox": "For those using CocoaPods 1.0 :head was removed. Use :git instead:\npod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git'\n. ",
    "StYaphet": "Thank you. @mythodeia the same problem and solved\n. ",
    "mamaral": "I'm having this same issue with images I have no problem viewing in the browser. I am also using pod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git' as @solidfox suggested, which upped my version from 3.7.5 to 3.8.1, but I still can't download any images. Any ideas on this one - this is unfortunately effecting one of my production clients. Note, I am using SDWebImageManager:\n[[SDWebImageManager sharedManager] downloadImageWithURL:imageURL options:SDWebImageHighPriority progress:nil completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n    handler(image);\n}];\n. Interesting part is that loading the images normally in things like table view cells works fine using the normal sd_setImage methods, but trying to use the SDWebImageManager results in these failures.\n. Apparently the issue was the image was WebP (I had no idea) and I didn't have that part of the library installed.\n. ",
    "SrdjanSpasojevic": "@mythodeia Thank you so much! :). ",
    "Pluto-Y": "I have disable the ATS, but the SDWebImage still not work.\nThis is what i have set.\n        NSAppTransportSecurity\n\nNSAllowsArbitraryLoads\n\n\nError Domain=NSURLErrorDomain Code=-1200 \"An SSL error has occurred and a secure connection to the server cannot be made.\"\nThis is what i get.\nThe image url:https://i.cern.cc/moin_static197/common/moinmoin.png\n. <key>NSAppTransportSecurity</key>\n    <dict>\n        <key>NSAllowsArbitraryLoads</key>\n        <true/>\n    </dict>\nThis is what i have set.\n. Yeah, I need load a image from this server, Does the SDWebImage can load image like this situation?\n. Thanks, you save me!!!\n. ",
    "byejuner": "The version of CocoaPods is (0.39) but i got the errors\ni removed this library's pod, but my project didn't works\n. Thanks bpoplauschi  I solved the problem. It is an issue with ruby\n. ",
    "mihaiserban": "SDWebImage already supports SDNetworkActivityIndicator. SDWebImageDownloader initialize function checks wether SDNetworkActivityIndicator exists and adds the indicator as observer for downloader start and stop operations.\n. ",
    "NKorotkov": "It works, but why would you not include SDNetworkActivityIndicator in the actual SDWebImage package? Seems like it would be needed almost every time.\n. With help from stackoverflow community I've changed my category to this:\n``` objective-c\n- (void)scrb_setImageAnimatedWithURL:(NSURL *)url {\n[self sd_cancelCurrentImageLoad];\n\nself.alpha = 0;\n\n[self sd_setImageWithURL:url placeholderImage:nil options:SDWebImageRetryFailed completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n\n    if (image) {\n\n        BOOL animated = NO;\n\n        if (cacheType == SDImageCacheTypeDisk || cacheType == SDImageCacheTypeNone) {\n            animated = YES;\n        }\n\n        self.image = image;\n\n        if (animated) {\n\n            [UIView animateWithDuration:ANIMATION_DURATION animations:^{\n\n                self.alpha = 1;\n\n            }];\n\n        } else {\n\n            self.alpha = 1;\n\n        }\n    }\n\n}];\n\n}\n```\nSeems to work just as fine, but without nasty associated objects magic. The only downside is that UIImage view is hidden while image is loading, so you can't use it for background/placeholder purpose. But it's a minor issue and seems like a better solution overall.\n. ",
    "dimohamdy": "not work \n. i fix it  here \nhttps://github.com/Navirize/SDWebImage/compare/3.7.4...master\n. ",
    "coderyi": "SDWebImageDownloadReceiveResponseNotification and SDWebImageDownloadFinishNotification, i think need removeobeserver\n. ",
    "jackrex": "Dear bpoplauschi : \ni wonder is this a bug on version 3.7.3 cause load wrong image? And it will be fixed next release (version 4.0.0)?\n. It will be very hard to reproduce on the demo. Our apps have almost 4 million users to use. There almost a billion pictures on our server. We got this problem by users' feedback when they saw the wrong pictures.\nWhen we debug when found the A picture store to disk be come to B picture. we check our code, and even remove the code objc_setAssociatedObject but the wrong picture is still happen.\nI check out the SDWebImage and i found 3.7.2 -> 3.7.3 have some disk cache changes on code, so we guess may be the SDWebImage bug which make the wrong image.\nAnd it is there be possible  two different pictures cache to disk but use same filename?(because we have thousands of pictures)\nThanks for your answer :) \n. ",
    "yingqiangh": "I have the same problem on version 3.7.4 \u3002 when can fix this issue?\n. i have  the same problem in version 3.7.5\n. ",
    "Zeeker": "Is there a solution to this in sight? We had some real trouble with a customer due to a very unlucky wrong picture which let the customer think the app \"had been hacked\".\n. ",
    "bmurmistro": "downloadImageWithURL solved my problem\n. Using downloadImageWithURL doesn't appear to be caching any of the requests.\nSDWebImageDownloader.sharedDownloader().downloadImageWithURL(NSURL(string: picUrl)!, options: .LowPriority, progress: nil, completed: {(image: UIImage?, data: NSData?, error: NSError?, finished: Bool)....\nAny ideas?\n. Thank you @mythodeia \n. ",
    "yirenjun": "The 'IF' logic is not rigorous enough! \nTo load an image, cancel immediately and load another, sometimes the previous image may be appear for a little while.\nfirst\nif (!weakOperation.isCancelled)\nchanged to\nif (strongOperation && !strongOperation.isCancelled)\nsecond\nif (weakOperation.isCancelled) {\nchanged to  \nif (!strongOperation || strongOperation.isCancelled) {\n. ",
    "eikemeier": "Thanks @bpoplauschi for the quick response\n. Guys, you are doing shotgun debugging here. dispatch_get_global_queue(self.prefetcherQueue, \u2026 might work by accident, because it's getting a concurrent queue with random priority, but this doesn't make it right. Either revert commit 6406d8e526c3c19878a490aac3056dad5b5faf74 or check why it does prefetcherQueue = dispatch_get_main_queue(), but dispatch_get_global_queue(dispatch_get_main_queue(), \u2026 seems stupid to me, even when it \u2018works\u2019.\n. Let's see what 6406d8e526c3c19878a490aac3056dad5b5faf74 did:\nBefore we had\ndispatch_async(self.prefetcherQueue, ^{     \n    [self startPrefetchingAtIndex:self.requestedCount];\n});\nSo, something was queued asynchronously on the main queue.\nAfter, we had\ndispatch_apply(\u2026, ^(size_t index) {\n    [weakSelf startPrefetchingAtIndex:i++];\n});\nsince dispatch_apply waits for all iterations of the task block to complete, it will never return when called from the queue it is dispatching on. So, calling this function from the main thread will hang in default configuration.\nProbably it was meant to be queued on some asynchronous queue, and the bug with dispatch_get_global_queue(self.prefetcherQueue, \u2026 masked the error, I have no idea how the code should really work. I would suggest to revert 6406d8e526c3c19878a490aac3056dad5b5faf74 and think about this again.\n. Or, if you prefer random changes, change\n_prefetcherQueue = dispatch_get_main_queue();\nto\n_prefetcherQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_SOMETHING, 0);\nwhich will \u2018work\u2019.\n. ",
    "alloy": "I wonder if a simplification could be to have -[UIImageView sd_setImageWithURL:] and friends just return the internal SDWebImageOperation? This way the user can control it as they see fit, in our case that would be keeping an array of operations on the VC that can be cancelled when the view disappears.\n. ",
    "WWLJ": "The issue is still exists. It is difference between this error with these error.\nAnd some properties have changed.\n. pod 'SDWebImage', '~> 3.7.3'\n. It is a same issue  #1335\nbut i do not find  unsupportedColorSpace in SDWebImageDecoder.m\nif (!context) {\n        if (unsupportedColorSpace){\n            CGColorSpaceRelease(colorspaceRef);\n        }\n        return image;\n    }\n. ",
    "frankpolkm": "same issue. I changed #import \"webp/decode.h\" to #import \"libwebp/webp/decode.h\" in file UIImage+WebP.m. Now, it works. I know it's not a good way, but .....   : )\n. ",
    "515783034": "tks a lot .I'll try it\n. To be honest ,It does not fix..\n. ",
    "ejoebstl": "Exactly. 4096 * 4096 pixels, jpeg. \n. That's true, but what's the reason for the spike to not occur when the image is loaded from the disk? \n. bump \nIs there anything I could do to help with this issue? \n. I agree, It's not logical. It's larger than it should be. It also happens for small images (the spike is just smaller). \n. ",
    "johnboiles": "SDWebImagePrefetcher loads a set of URLs. I want to load the a specific SDImageCache's disk cache into memory.\nThis would work somewhat similar to cleanDiskWithCompletionBlock in that it'd iterate through all files in the diskCachePath and load them into memory. Maybe the method could be called - (void)preloadDiskCacheWithCompletionBlock:(SDWebImageNoParamsBlock)completionBlock;\n. ",
    "tiagomartinho": "I receive the following message: [!] The platform of the target X (tvOS 9.0) is not compatible with SDWebImage (3.7.3), which does not support tvos.\nI'm missing something?\n. Thanks for the help! I thought that cocoapods used the master if no version was specified in the pod file. \n. welcome! \ud83d\udc4d . ",
    "ldi13": "Hello guys !\nAbout the tvOS support, do you know if it's possible to point on the specific commit dealing with tvOS support a podspec ?\nThank you all,\nBest,\nLorenzo\n. ",
    "mcgomez": "\nThat is in the build settings for the libAmazingPicturesIOS.a\n. I used a Podfile to install the SDWebImage library into the libAmazingPicturesIOS.a as well.\n. I tried importing the library using the framework, and not the pod, and I get the same error. Any thoughts?\n. There was an issue on my part that I missed. Thanks for the help, and sorry for any inconveniences! \n. ",
    "sallyahmed": "any update the same here ?\n. ",
    "zhangao0086": "Any updates on this one?. ",
    "SergeyDevUA": "any update?\n. ",
    "burniejm": "i have the same issue as @livyathan.. it just downloads 3 images (or whatever maxConcurrentDownloads is) until i call prefetchURLS again.  Am i missing something here?\n. ",
    "fxwx23": "All right. I'll try to use :head.\nThank you for your response.\n. @mvpaudrey Same error still occurred. Did you find any solutions for this?\n. @jkrzemie Thank you so much. \n. ",
    "mvpaudrey": "I added the line pod 'SDWebImage', :head in the Podfile but i got this message:\n[!] The platform of the target``Pods``(tvOS 9.0) is not compatible with``SDWebImage (HEAD based on 3.7.3)``, which does not support``tvos``.\nDid i miss something too ?\nThank you.\n. @fxwx23 no didn't find any other solution\n. @jkrzemie thanks a lot\n. ",
    "jkrzemie": "Not released yet so you need to\n pod 'SDWebImage', :git => 'https://github.com/rs/SDWebImage.git'\n. ",
    "lhecker": "Sorry @bpoplauschi at some point I just forgot about this PR.. ",
    "ogezue": "I have the same problem and recognized that has to do with the server. Sometimes it works on all ios9 apps at the same time and sometimes not. \n. ",
    "BharatAgarSoftTech": "I have the same problem I am using Cloudinary and need to perform clear cache operation every time when user launch app otherwise it's not loading the latest image from URL.\nlet me know if anyone knows the solution.\nThanks :). @yvesbastos Nup, right now I am doing clear cache operation at app launch time so its load the latest image from Cloudinary.. ",
    "yvesbastos": "@BharatAgarSoftTech same here using Cloudinary services. Did you find a solution for this? . ",
    "AnkitGupta87": "Have been facing this issue in our App Store build at a very large scale.. unable to reproduce on our end\n. any updates?\n. ",
    "robinmonjo": "To reproduce this, on a table view with 230 cell, I just scroll really fast in both directions (down and top) and this eventually happens. My images are loaded from a UITableViewCell subclass, will check if there is a similar demo project. cc @GuillaumeLaubier\n. There is no sample with SDWebImageView getting called from within a custom UITableViewCell, so for me it's a bug from the library. Won't have time to dig more though.\n. Limiting the number of concurrent fetches with SDWebImageManager.sharedManager.imageDownloader.maxConcurrentDownloads = 2; solved the issue for me.\n. ",
    "xinwo": "same  proplem here. \n any update?\nUpdate:\nIt turns out the crash is caused by TestFairy.\n. ",
    "olivierplante": "Yes, I'm currently using the version 3.7.3 from cocoapod.\n. @jstart Thank you for your answer, that was exactly what I was looking for.\n. ",
    "slashburn": "In my case in Swift it doesn't, even though I've tried to call the exact same methods. The trick is to reload all cells in the callback as I did above but not on the main thread. Then the app does not crash. However this is kind of a workaround and not really tackling the problem. Maybe it's a Swift issue.\n. ",
    "edisongz": "This link can be opened in Chrome,maybe it is a Anti-Leech. I solved it by this.\n```\n- (void)loadForbiddenImage:(NSString )key imageView:(UIImageView )imageView\n{\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n[manager GET:key parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) {\n    if (responseObject != nil) {\n        UIImage *image = [[UIImage alloc] initWithData:responseObject];\n\n        if (image != nil) {\n            imageView.image = image;\n        }\n        else\n        {\n            imageView.image = [UIImage imageNamed:@\"default_xxx\"];\n        }\n    }\n\n} failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\n}];\n\n}\n```\nor add request Header refer, i don't test it.\n. @IvanChan  In SDImageCache,\n/**\n* Remove the image from memory and optionally disk cache asynchronously\n*\n* @param key      The unique image cache key\n* @param fromDisk Also remove cache entry from disk if YES\n*/\n- (void)removeImageForKey:(NSString *)key fromDisk:(BOOL)fromDisk;.  upsampling_sse2.c is a file of libwebp , append this,\n pod 'SDWebImage/WebP'. ",
    "AhmedOsamaOsman": "I know thats not supported i'm asking about the ability to support it because it's really important.\n. ok i will add it as soon as possible\n. ",
    "zats": ":+1: \n. hey, wanted to ping to see if there is anything I can do to improve this PR?\n. thank you!\n. hi @bpoplauschi, I checked your solution again and it seems like I'd need to reimplement entire UIKit layer on top of the manager. \n[UIImageView sd_setImageWithURL] provides a lot of additional functionality I would want to avoid of implementing. Also most of the implementation is private so I'd need to implement entire category including cancelation etc. Or am I missing another, less involved solution using SDWebImageManager?\n. I'm trying to understand your reasoning against being able to configure UIImageView with a particular instance of SDWebImageManager - seems like an optional parameter that doesn't affect any of existent code\n. ",
    "ttgb": "I already test this with the scenario you said: I first pod install the origin libwepp with VPN\uff0cand then change the new spec file I modified, It works just as I expected. so this change should not impact any existing users.\n. ",
    "mrxiaobin": "still like that:\n ......unable to access 'https://chromium.googlesource.com/webm/libwebp/': Could not resolve host: chromium.googlesource.com\n. ",
    "mengkeer": "It seems libwebp is still access 'https://chromium.googlesource.com/webm/libwebp/'   , can you fix it?  or can you provide a solution\uff1f. ",
    "GuillaumeRossolini": "Agreed, that would be nice. Including \":head\" as a dependency is not what I would recommend long-term.\nThanks,\n. Thanks, worked like a charm.\n. ",
    "Ruckt": "This does not seem to be a problem anymore for us.\n. ",
    "levibostian": "Thank you @mythodeia. Your suggestion works well for me so far. \n. ",
    "albyho": "NSURLCache?\n. ",
    "mberube09": "I am currently experiencing the exact same problem. I am stuck using AFNetwork 1.X due to RestKit dependency. Does anyone have an idea where I could start digging? I'm having a hard time reproducing it locally but I see in the logs that some of my clients are experiencing the problem.\nThe images are fetched from an AWS-S3 bucket. Since S3 gives us some cache instructions, the response is cached, but for the wrong request. Then, everytime the call is made, an image is returned from the cache...\n. Well I discovered that in release 3.8.x, SDWebImage switched from using NSURLConnection to NSURLSession, which seems to have fixed the issue. I was able to reproduce my problem fairly often by automating some task inside my app and letting it run for a few minutes. After upgrading to 3.8.x, I let it go for almost an hour without any issue. I considered it case closed! \ud83d\udc83 \n. ",
    "enwar3": "Whoa it's been a while!\n@mberube09 we tried a few things at the time to try and fix it, I think the main fix for us was to turn off the SDWebImageRefreshCached option because it was using NSURLCache, which might've shared state with AFNetworking. We also switched our API class to a singleton pattern.\nI remember this was really frustrating/perplexing, I hope you figure it out! \ud83d\ude00 Would love to hear how you fix it!\n. Woo hoo!! \ud83c\udf89\ud83d\ude4c\n. ",
    "a13xb": "@mythodeia I see the same with 3.7.4 decoding a PNG image:\nCGBitmapContextCreate: unsupported parameter combination:\n    16 integer bits/component;\n    64 bits/pixel;\n    RGB color space model; kCGImageAlphaPremultipliedFirst;\n    1024 bytes/row.\nValid parameters for RGB color space model are:\n    16  bits per pixel,      5  bits per component,      kCGImageAlphaNoneSkipFirst\n    32  bits per pixel,      8  bits per component,      kCGImageAlphaNoneSkipFirst\n    32  bits per pixel,      8  bits per component,      kCGImageAlphaNoneSkipLast\n    32  bits per pixel,      8  bits per component,      kCGImageAlphaPremultipliedFirst\n    32  bits per pixel,      8  bits per component,      kCGImageAlphaPremultipliedLast\n    64  bits per pixel,      16 bits per component,      kCGImageAlphaPremultipliedLast\n    64  bits per pixel,      16 bits per component,      kCGImageAlphaNoneSkipLast\n    128 bits per pixel,      32 bits per component,      kCGImageAlphaNoneSkipLast |kCGBitmapFloatComponents\n    128 bits per pixel,      32 bits per component,      kCGImageAlphaPremultipliedLast |kCGBitmapFloatComponents\nSee Quartz 2D Programming Guide (available online) for more information.\n. @mythodeia \n. @mythodeia Yes, it's not supported, but it happens when SDWebImage creates output context with the wrong pixel format, taking some parameters from input image, hardcoding other parameters, so sometimes they don't match.\nMoreover, this image used to work on previous versions of SDWebImage, so it's definitely a regression.\n. ",
    "abdullahumer": "using pod 'SDWebImage', '~>3.7'\n. I have encountered the same crash again. This time its increasing.. I double checked and the version is the latest. Its v4.4.3. I was using a fork of v3.7.4 and it was pretty stable. But I updated it for the latest release of my app and this crash is happening a lot. So far over 9k crashes for over 7k users.\nI have made the issue to be publicly visible here.. I disabled progressive feature but the the downloading was still too slow. Then I reverted back to version 3.7.4 and then it was fine even with progressive download feature. For me the older version is working fine. I'm not sure if its only for me but something has gone wrong over the updates.. Visually the images appear too slow compared to the older library. I'm not sure if its due to slow downloading or during setImage.\nI further investigated the issue and found some urls that are causing the issue.\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/900x506-1_-1DUrD1GNUswxi6.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/675x900-1_-pBaPD1EASKakCV.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/675x900-1_-8XPUYpYf6YM2Uu.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/675x900-1_-nM0wgnku0gi60r.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/675x900-1_-BGBJTA71JEnYoN.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/675x900-1_-Jz1wKyKtP36X2j.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/900x506-1_-1DUrD1GNUswxi6.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/320x320-1_-2N3iFykQugzZny.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/480x442-1_-DKUUFNJlw4IjKh.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/640x480-1_-9z7xy7GzOCpkTq.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/900x506-1_-dH4sQsrwDZK1o2.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/900x506-1_-RS3H2E2kjxNeSh.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/900x506-1_-nJQq10cw7tatWW.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/900x506-1_-88dklCGXJVnC1m.jpg\nhttps://s3-eu-west-1.amazonaws.com/mimg.haraj.com.sa/userfiles30/2019-1-23/480x640-1_-kqADue43cbUucQ.jpg\nTry copying these images in an array and try downloading them all at once setting high priority.. ",
    "cocoZ": "I met the same problem!!\n\n. ",
    "YYDD": "ok ~  4.x branch works well. thanks\n. I know this method can  replace of cause.\nBut this situation may happen, when someone not realise the method sd_setImageWithURL: enough.\n. catch it.. ",
    "sbiermanlytle": "This only gets called once per app launch. Don't I need to initialize SDImageCache with a namespace before calling the storeImage function?\n. Its an HTTPS url, so I shouldn't need to add exceptions. Also, if that were the problem it would fail for all attempts, and using dataWithContentsOfURL works fine.\nI have a feeling its something to do with the URL format: https://i.groupme.com/638x640.jpeg.d4f31c747b534baca03d12db5a2b6193\nmaybe something in SDWebImage fails when the image extension is not at the end?\n. ",
    "abhi2412shek": "What is this Namespace actually in  SDImageCache *imageCache = [[SDImageCache alloc] initWithNamespace:@\"LookAppInc\"]; ?\na folder name inside project or something else?\n. ",
    "Rotemy": "Oh I didn't notice.\nSo do you have any thoughts about how can I display animated gif with UIImagePickerController ?\n. ",
    "GuoZhiQiang": "You mean it can load image form the memoryCache ? I used the function sd_setImageWithURL: in my tableView and it did load image from the Internet, but when i switched my iPhone into Flight Mode and scrolled the tableView ,the image disappeared. I debug the project and found that the value was nil when it loaded the image from cache by using [self.memCache objectForKey:myURL] in Flight Mode. So i scrolled the tableView and it loaded image from Internet again every time.\n. Does SDWebImage support the OSS url \uff1f\n. ",
    "jballer": "@bpoplauschi Thanks for following up. As far as I can tell, this issue is particular to your release's Podspec and unrelated to the libwebp project.\nThe Podspec is telling the compiler to flatten the directory structure instead of preserving it, and this creates a naming conflict.\nAre you suggesting that the libwebp project should rename these files?\n. ",
    "barbaramartina": "@jballer I'm having the same issue. Was you able to solve it? I'm using SDWebImage/WebP 3.8.\n. ",
    "chlebta": "I've solved the first issue but now the image is always downloaded so how to cache it I mean download image only first time then use it from cache \n```\n                    imageDownloader.downloadImageWithURL(\n                        NSURL(string: urlString!),\n                        options: SDWebImageDownloaderOptions.UseNSURLCache,\n                        progress: nil,\n                        completed: { (image, data, error, bool) -> Void in\n                            if image != nil {\n                                self.bannerImageView.image = image\n                        }\n                })\n\n```\n. ",
    "doingy": "@mythodeia\nThanks a lot for your answer.\nbut I have another question.\nUse this method [m1]\n[imageView sd_setImageWithURL:url placeholderImage:nil options:SDWebImageRefreshCached progress:nil completed:nil]\nsave file to below path [p1]\n/Caches/projectname/fsCachedData\nbut use this method below  [m2]\n[[SDImageCache sharedImageCache] storeImage:image forKey:imageURL];\nsave file here. [p2]\n/Caches/default/com.hackemist.SDWebImageCache.default/\nThe two pathes are different. I cannot use method [m1] to set  the picture which is downloaded by  method [m2]\n. Both version are used 3.7.5, and I haven't changed anything about sdwebimage.\n. @mythodeia using the library just for store images, and I haven't create any custom cache folders.\n[[SDWebImageDownloader sharedDownloader]\n  downloadImageWithURL:@\"some_image_url\"\n  options:SDWebImageDownloaderContinueInBackground | SDWebImageDownloaderLowPriority | SDWebImageDownloaderAllowInvalidSSLCertificates\n  progress:nil\n  completed:^(UIImage *image, NSData *data, NSError *error, BOOL finished) {\n    [[SDImageCache sharedImageCache] storeImage:image forKey:@\"some_image_url\"];\n  }];\n@sunbohong Maybe, have no idea about that.\n. ",
    "menushka": "@doingy Might be a little late but I was having the same problem as you.  \nMy problem was that the key I was passing in had a folder structure (e.g. folder1/folder2/imageName.png) and SDWebImage didn't create the folders to store the image in so it failed.  \nI added this in the  SDImageCache.m in the disk storeImageDataToDisk method after cachePathForKey\n// creates folders for folder passed in key\nNSString *cachePathForKeyFolder = [cachePathForKey stringByDeletingLastPathComponent];\n\nif (![_fileManager fileExistsAtPath: cachePathForKeyFolder]) {\n    [_fileManager createDirectoryAtPath: cachePathForKeyFolder withIntermediateDirectories:YES attributes:nil error:NULL];\n}\n\n. ",
    "mariohahn": "Ok thx. Because i would like to use it for TVOS (: \n. thx (:\n. +1\n. ",
    "adomanico": "This is definitely an issue. Our production users are seeing incorrect images for the correct cache key\n. Was able to dig in a little bit and confirm that the keys are correct but the image is incorrect\n. ",
    "realaboo": "In most cases this should be fine if the images could be downloaded again. But in my case I use SDWebImageCache also as permanent file storage and the images are volatile, they are probably not there anymore. Would be fine if have fallback lookup or rename the files automatically.\n. Current implementation of SDWebImageDownloader follows HTTP redirect directly without calling delegate method on custom SDWebImageDownloaderOperation set by setOperationClass:. This PR fixes this issue.. ",
    "marksands": "I ran into this as well. +1 to the solution, the nil check fixed the error for me.\n. ",
    "chinamty": "platform is tvOS\n. ",
    "chengchao12138": "Can someone help me \uff1f\n. Me too\n. ",
    "AniOSDeveloper": "It works for me! Thanks very much! \n. ",
    "zmorris": "Hi just wanted to follow up, I solved the issue and it had nothing to do with SDWebImage.  It was caused by content hugging and compression resistance priorities in Interface Builder.  The issue was that the UITabBar had a content hugging priority of 250 but an image had a content hugging priority priority of 251 (or vice versa, I might not be remembering right).\nAnyway, once SDWebImage received the image and called setNeedsLayout(), the layout broke because the UIImageView tried to expand around it.  I think that 2.7.4 may have slightly different timing so the layout didn't break at first, but after a while it started happening again.\nI hadn't been aware that UIImageView could resize this way based on its content image.  I fixed it by setting content hugging and compression resistance priorities on the UIImageView to 125 in Interface Builder so that the surrounding layout prevents the UIImageView from growing when its image changes.\nP.S. The UITabBar was in the cell for legacy reasons, to avoid putting it in the header view or having to refactor the UITableViewController to be a UIViewController with UITableViewDelegate, UITableViewDataSource and nested UITableView (to make room for the UITabBar above the table).\n. ",
    "CaiChenghan": "Hi man , I find a good class to load gif image which wont use large memory. Here it's link https://github.com/ibireme/YYWebImage . \n. ",
    "lianchengjiang": "All checks have failed?  why?  does anything have problem?\n. maybe something is wrong. i have create a new one at https://github.com/rs/SDWebImage/pull/1438\n. sorry, it's my mistake, i have fix it\n. The same issue is bothering me too.\ndoes anybody have solution\uff1f. ",
    "mpkupriyanov": "Hello Mutix.\nFixed.\n. ",
    "YJie": "in the same image i got 220_220 in 3.7.4 but i got 440_440 in 3.7.2 the original is 440*440   the demo i send  you can change the version in Podfile you will find \n. but i got different size in demo what you said is the right size  i have tried many times in demo i just change the version i don't know why. i can find nothing difference except the verson of SDWebImage in3.7.2 is right but over3.7.3 is the wrong size\n. yeah i can got the image  you can find in simulator different version of SDWebImage you will find different size of image in simulator just tried 3.7.2 and over 3.7.3 \n. in jxphoto class the download image method you can find different size of image in complete block in different version of SDWebImage\n. maybe\uff01 i just change the version of SD i will try later . No matter what thank you very much. \n. ",
    "findyam": "\nline 18 should be #import \"libwebp/webp/mux_types.h\", change it and works\n. ",
    "neworiginou": "we found that animated webp play fast than normal gif\n. ",
    "ArthurChi": "@mythodeia I think the url should be checked, because the reason why I got this error is my url has been redirected, so I propose checked the HTTP status code first and then checked the image's size. if the HTTP status code is not 200 or image's size is zero, it's a bad image\n. @yrx0910 yes, it can work, but my team uses pod, I can't fix it in the file, so I have to write category, I hope it can be fixed in the source code\n. ",
    "yrx0910": "I have met the same problem.    I  add the code at the first line of this method.\nif (!image) {\n            return nil;\n        } \n. ",
    "laojiawei": "Apr 26 21:06:56  LJWQuanZi[6574] : CGContextDrawImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\nApr 26 21:06:56  LJWQuanZi[6574] : CGBitmapContextCreateImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\nApr 26 21:06:56  LJWQuanZi[6574] : CGContextDrawImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\nApr 26 21:06:56  LJWQuanZi[6574] : CGBitmapContextCreateImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\nApr 26 21:06:56  LJWQuanZi[6574] : CGContextDrawImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\nApr 26 21:06:56  LJWQuanZi[6574] : CGBitmapContextCreateImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\nApr 26 21:06:56  LJWQuanZi[6574] : CGContextDrawImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\nApr 26 21:06:56  LJWQuanZi[6574] : CGBitmapContextCreateImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.\nwhat s happen?\n. yes,Using SDWebImage (3.7.5)\n. I am such use :[self.pictureImageView sd_setImageWithURL:[NSURL URLWithString:status.cover_image_url]];\nThe ImageView is set  the Frame...\n. I using the latest commit now...\n. http://i.kuaikanmanhua.com/image/160202/a3ljbucwd.webp-w750\n. I try it again...Thx\n. ",
    "madordie": "xxx = project name\n. ",
    "barumrho": "I'm getting the same issue when using :head with use_frameworks! option for Cocoapods.\nI'm using the latest beta 1.0.0.beta.6.\n. ",
    "fen-x": "New version of CocoaPods does not make symlinks of public headers in case of frameworks are used instead of static libraries (use_frameworks!).\nLooks like that is why header is not found. So it is impossible to use SDWebImage/WebP over CocoaPods 1.0 in Swift projects.\n. @kenmaz Thanks a lot. It is great before official fix.\n. ",
    "kenmaz": "My workaround is here:\nhttps://github.com/kenmaz/SDWebImage/commit/5034c334be50765dfe4e97c48bcb74ef64175188\nI solved it, but I think this workaround is too adhoc.\n. ",
    "liuyaodong": "Getting the same issue using cocoapods 1.0. It seems the only solution without workaround is downgrading cocoapods to 0.39. Will this be fixed officially? \n. ",
    "gonghao": "The same issue when using Cocoapods 1.0.0. Please fix it.\n. ",
    "minoue10": "I know this is closed, but +1 on this.\nWe define the cacheKeyFilter on the SDWebImageManager.sharedManager, but the images I was prefetching using the SDWebImagePrefetcher weren't caching for when I actually needed them. I realized that because the SDWebImagePrefetcher uses its own instance of SDWebImageManager, we realized we have to redefine the cacheKeyFilter so that the two SDWebImageManagers are using the same filter to generate the unique image file names for caching.\nNot a huge deal for us, but it took longer than I expected to figure this out.. ",
    "bluesky0109": "@sunbohong did you find a solution fix it?. @sunbohong @dreampiggy \nI found a solution, use dispatch_group for example:\n__block BOOL sendSuccess = NO;\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_enter(group);\n[SDWebImageManager.sharedManager downloadImageWithURL:[NSURL URLWithString:thumbImageURL] options:SDWebImageRetryFailed progress:nil completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\nif (finished && image) {\n    sendSuccess = true;\n} else{\n    sendSuccess = false;\n}\ndispatch_group_leave(group);\n}];\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n        if(sendSuccess) {\n               // your logic  code\n        }\n});\nwish help you \ud83d\ude0a. ",
    "willice9527": "anyone for help?\n. sorry for response so late. it's nearly impossible to reproduce (the probability of crash for this reason was 0.1% or even less. we got millions of user). we have not do anything to deal with it , cause we haven't a clue about it.\nbut the good thing is , crashes caused by this seems disappeared recently. now we are using sdwebimage version 3.8.1 from which we have found some new issue ,maybe i'll open an another issue later.\nthx\n@bpoplauschi \n. ",
    "sean9keenan": "I can also change this to use a separate data-structure to sort images when coming from the callback. But this solution seemed more elegant/space/speed efficient, and much better than what was currently there. The only disadvantage to the way it's implemented is that images that are returned out of order can be displayed on the screen for longer than they should be until the image that was supposed to return before it is returned. Let me know if you have any feedback! :smile: \n. @bpoplauschi - Not sure if you're the best person to look over this change. I'd really appreciate it!\n. The loop should only execute when the images are out of order.\neg if the images (1 indexed) are returned in the order : 1, 4, 3, 2\n[1] -> [1, 4, 4, 4] -> [1, 4, 3, 4] -> [1, 2, 3, 4]\nIn order to have the array construct itself like this\n[1] -> [1, 4] -> [1, 3, 4] -> [1, 2, 3, 4] \nit would require a separate data-structure, which I could change it to, but in practice doesn't seem to make much of a difference.\nI also have been using this change for a few months now and haven't seen any issues. Thanks for taking a look at it! \n. The reason I picked the same image was so that something that roughly belongs in the gif (in approximately the right location) would be visible (although for longer than expected), instead of a gap in the playback - which I expect would look more jarring. I also didn't see any harm in using the same image since they should just be pointer references to the image - and not full copy's\n. Just wanted to bump this PR - If it counts for anything we've been using this modification (in the form of a category that only overrides this one function in SDWebImage) for over a year in production now.\nWill rebase my changes in a little bit.. Gone ahead and rebased \ud83d\udc4d. ",
    "codecov-io": "Codecov Report\n\nMerging #1452 into master will decrease coverage by -0.24%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1452      +/-\n==========================================\n- Coverage    77.3%   77.07%   -0.24%   \n==========================================\n  Files          27       27            \n  Lines        2653     2661       +8   \n==========================================\n  Hits         2051     2051            \n- Misses        602      610       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImageView+WebCache.m | 16.94% <\u00f8> (-2.66%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0df32ea...9e3e566. Read the comment docs.. # Codecov Report\nMerging #1597 into master will increase coverage by 0.05%.\nThe diff coverage is 83%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1597      +/-\n==========================================\n+ Coverage      76%   76.06%   +0.05%   \n==========================================\n  Files          27       27            \n  Lines        2513     2586      +73   \n==========================================\n+ Hits         1910     1967      +57   \n- Misses        603      619      +16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 70.63% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.92% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 79.42% <79.62%> (-1.26%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 72.26% <86.66%> (+3.19%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 041842b...e428ee4. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@ad9f1a2). Click here to learn what that means.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1645   +/-\n=========================================\n  Coverage          ?   77.38%         \n=========================================\n  Files             ?       27         \n  Lines             ?     2658         \n  Branches          ?        0         \n=========================================\n  Hits              ?     2057         \n  Misses            ?      601         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 82.73% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...3e3edce. Read the comment docs.. ## Current coverage is 77.37% (diff: 85.04%)\nNo coverage report found for 4.x at 36e5e3c.\nPowered by Codecov. Last update 36e5e3c...b44f4b8\n. ## Current coverage is 36.48% (diff: 50.00%)\nMerging #1684 into master will decrease coverage by 40.43%\n\ndiff\n@@             master      #1684   diff @@\n==========================================\n  Files            26         22      -4   \n  Lines          2470       1365   -1105   \n  Methods           0        419    +419   \n  Messages          0          0           \n  Branches          0        217    +217   \n==========================================\n- Hits           1900        498   -1402   \n- Misses          570        783    +213   \n- Partials          0         84     +84\n\nPowered by Codecov. Last update d6fa29c...b67130e\n. ## Current coverage is 77.15% (diff: 100%)\nNo coverage report found for master at 032ab1d.\nPowered by Codecov. Last update 032ab1d...154144a\n. ## Current coverage is 77.15% (diff: 100%)\nNo coverage report found for master at 032ab1d.\nPowered by Codecov. Last update 032ab1d...45c0387\n. # Codecov Report\nMerging #1721 into master will decrease coverage by -0.64%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1721      +/-\n==========================================\n- Coverage   77.73%   77.09%   -0.64%   \n==========================================\n  Files          27       27            \n  Lines        2654     2655       +1   \n==========================================\n- Hits         2063     2047      -16   \n- Misses        591      608      +17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIButton+WebCache.m | 50% <\u00f8> (-1.32%) | :x: |\n| SDWebImage/SDImageCache.m | 72.41% <\u00f8> (-3.7%) | :x: |\n| SDWebImage/SDWebImageManager.m | 71.14% <\u00f8> (-0.15%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1f52288...612538a. Read the comment docs.. ## Current coverage is 77.07% (diff: 0.00%)\nNo coverage report found for master at 032ab1d.\nPowered by Codecov. Last update 032ab1d...970d5b4\n. ## Current coverage is 77.15% (diff: 100%)\nNo coverage report found for master at 032ab1d.\nPowered by Codecov. Last update 032ab1d...113cccc. ## Current coverage is 77.85% (diff: 94.11%)\nNo coverage report found for master at 032ab1d.\nPowered by Codecov. Last update 032ab1d...d400124. ## Current coverage is 77.72% (diff: 100%)\nNo coverage report found for master at 032ab1d.\nPowered by Codecov. Last update 032ab1d...3b8f70a. ## Current coverage is 77.17% (diff: 85.71%)\nMerging #1742 into master will increase coverage by 0.01%\n\ndiff\n@@             master      #1742   diff @@\n==========================================\n  Files            27         27          \n  Lines          2653       2659     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2047       2052     +5   \n- Misses          606        607     +1   \n  Partials          0          0\n\nPowered by Codecov. Last update 5ea33a7...14b6dfa. ## Current coverage is 77.17% (diff: 85.71%)\nMerging #1759 into master will increase coverage by 0.01%\n\ndiff\n@@             master      #1759   diff @@\n==========================================\n  Files            27         27          \n  Lines          2653       2659     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2047       2052     +5   \n- Misses          606        607     +1   \n  Partials          0          0\n\nPowered by Codecov. Last update 5ea33a7...34c478e. ## Current coverage is 77.16% (diff: 100%)\nMerging #1767 into master will increase coverage by <.01%\n\ndiff\n@@             master      #1767   diff @@\n==========================================\n  Files            27         27          \n  Lines          2653       2654     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2047       2048     +1   \n  Misses          606        606          \n  Partials          0          0\n\nPowered by Codecov. Last update 5ea33a7...57502a9. ## Current coverage is 77.15% (diff: 100%)\nMerging #1770 into master will not change coverage\n\ndiff\n@@             master      #1770   diff @@\n==========================================\n  Files            27         27          \n  Lines          2653       2653          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2047       2047          \n  Misses          606        606          \n  Partials          0          0\n\nPowered by Codecov. Last update 5ea33a7...8f06947. # Codecov Report\nMerging #1781 into master will decrease coverage by 1.88%.\nThe diff coverage is 94.11%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1781      +/-\n==========================================\n- Coverage   77.93%   76.05%   -1.89%   \n==========================================\n  Files          27       27            \n  Lines        2656     2514     -142   \n==========================================\n- Hits         2070     1912     -158   \n- Misses        586      602      +16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 82.12% <100%> (+1%) | :arrow_up: |\n| SDWebImage/SDWebImageDecoder.m | 96.57% <100%> (+0.08%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 70.63% <100%> (-5.48%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 80.62% <66.66%> (-2.01%) | :arrow_down: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 83.17% <0%> (-6.05%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 90.76% <0%> (-4.89%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 93.15% <0%> (-3.31%) | :arrow_down: |\n| SDWebImage/UIView+WebCacheOperation.m | 62.06% <0%> (-2.22%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 69.07% <0%> (-2.22%) | :arrow_down: |\n| ... and 17 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...e0603e3. Read the comment docs.. # Codecov Report\nMerging #1790 into master will increase coverage by 0.04%.\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1790      +/-\n=========================================\n+ Coverage   77.16%   77.2%   +0.04%   \n=========================================\n  Files          27      27            \n  Lines        2654    2650       -4   \n=========================================\n- Hits         2048    2046       -2   \n+ Misses        606     604       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 53.7% <100%> (\u00f8) | :white_check_mark: |\n| SDWebImage/UIButton+WebCache.m | 51.38% <100%> (+0.07%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74ee9c0...bb7a7bb. Read the comment docs.. # Codecov Report\nMerging #1802 into master will not change coverage.\nThe diff coverage is 0%.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1802   +/-\n=======================================\n  Coverage   77.16%   77.16%         \n=======================================\n  Files          27       27         \n  Lines        2654     2654         \n=======================================\n  Hits         2048     2048         \n  Misses        606      606\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 53.7% <\u00f8> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e53e6c...25e19a2. Read the comment docs.. # Codecov Report\nMerging #1805 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1805   +/-\n=======================================\n  Coverage   77.16%   77.16%         \n=======================================\n  Files          27       27         \n  Lines        2654     2654         \n=======================================\n  Hits         2048     2048         \n  Misses        606      606\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 72.41% <\u00f8> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e53e6c...add652e. Read the comment docs.. # Codecov Report\nMerging #1810 into master will increase coverage by 0.54%.\nThe diff coverage is 80.35%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1810      +/-\n=========================================\n+ Coverage   77.16%   77.7%   +0.54%   \n=========================================\n  Files          27      27            \n  Lines        2654    2687      +33   \n=========================================\n+ Hits         2048    2088      +40   \n+ Misses        606     599       -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 57% <\u00f8> (+3.3%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 82.63% <0%> (+0.38%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 71.28% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+MultiFormat.m | 52% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 75.96% <52.63%> (+3.54%) | :arrow_up: |\n| Tests/Tests/SDImageCacheTests.m | 96.29% <96.77%> (-0.16%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.m | 70% <0%> (-20%) | :arrow_down: |\n| SDWebImage/UIImage+GIF.m | 87.09% <0%> (-9.68%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.12% <0%> (+0.17%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e53e6c...031c17f. Read the comment docs.. # Codecov Report\nMerging #1826 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1826   +/-\n======================================\n  Coverage    77.3%   77.3%         \n======================================\n  Files          27      27         \n  Lines        2653    2653         \n======================================\n  Hits         2051    2051         \n  Misses        602     602\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0df32ea...799926e. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@ad9f1a2). Click here to learn what that means.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1838   +/-\n=========================================\n  Coverage          ?   77.38%         \n=========================================\n  Files             ?       27         \n  Lines             ?     2657         \n  Branches          ?        0         \n=========================================\n  Hits              ?     2056         \n  Misses            ?      601         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 81.21% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...fda4232. Read the comment docs.. # Codecov Report\nMerging #1847 into master will decrease coverage by 0.56%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1847      +/-\n==========================================\n- Coverage   77.93%   77.37%   -0.57%   \n==========================================\n  Files          27       27            \n  Lines        2656     2656            \n==========================================\n- Hits         2070     2055      -15   \n- Misses        586      601      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 72.41% <0%> (-3.7%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...ba3a5b5. Read the comment docs.. # Codecov Report\nMerging #1849 into master will decrease coverage by 0.56%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1849      +/-\n==========================================\n- Coverage   77.93%   77.37%   -0.57%   \n==========================================\n  Files          27       27            \n  Lines        2656     2656            \n==========================================\n- Hits         2070     2055      -15   \n- Misses        586      601      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 72.41% <100%> (-3.7%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...e6536d2. Read the comment docs.. # Codecov Report\nMerging #1858 into master will decrease coverage by 0.56%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1858      +/-\n==========================================\n- Coverage   77.93%   77.37%   -0.57%   \n==========================================\n  Files          27       27            \n  Lines        2656     2656            \n==========================================\n- Hits         2070     2055      -15   \n- Misses        586      601      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 82.63% <66.66%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 72.41% <0%> (-3.7%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...41d7447. Read the comment docs.. # Codecov Report\nMerging #1860 into master will decrease coverage by 0.47%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1860      +/-\n==========================================\n- Coverage   77.93%   77.46%   -0.48%   \n==========================================\n  Files          27       27            \n  Lines        2656     2813     +157   \n==========================================\n+ Hits         2070     2179     +109   \n- Misses        586      634      +48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDecoder.m | 96.98% <100%> (+0.5%) | :arrow_up: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 84.91% <0%> (-4.31%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 92.2% <0%> (-3.45%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 93.67% <0%> (-2.79%) | :arrow_down: |\n| SDWebImage/UIView+WebCacheOperation.m | 62.06% <0%> (-2.22%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 81.69% <0%> (-0.95%) | :arrow_down: |\n| SDWebImage/UIImageView+WebCache.m | 18.86% <0%> (-0.74%) | :arrow_down: |\n| SDWebImage/UIImage+WebP.m | 43.8% <0%> (-0.74%) | :arrow_down: |\n| SDWebImage/UIImage+MultiFormat.m | 51.48% <0%> (-0.52%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 71.1% <0%> (-0.19%) | :arrow_down: |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...ad6b511. Read the comment docs.. # Codecov Report\nMerging #1863 into master will decrease coverage by 1.49%.\nThe diff coverage is 37.5%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1863     +/-\n=========================================\n- Coverage   77.93%   76.44%   -1.5%   \n=========================================\n  Files          27       27           \n  Lines        2656     2509    -147   \n=========================================\n- Hits         2070     1918    -152   \n- Misses        586      591      +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 69.07% <100%> (-2.22%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 80% <16.66%> (-1.13%) | :arrow_down: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 83.17% <0%> (-6.05%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 90.76% <0%> (-4.89%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 93.15% <0%> (-3.31%) | :arrow_down: |\n| SDWebImage/UIView+WebCacheOperation.m | 62.06% <0%> (-2.22%) | :arrow_down: |\n| SDWebImage/UIButton+WebCache.m | 49.27% <0%> (-2.05%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 80.62% <0%> (-2.01%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.m | 88% <0%> (-2%) | :arrow_down: |\n| ... and 15 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...991edd6. Read the comment docs.. # Codecov Report\nMerging #1865 into master will decrease coverage by 0.6%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1865      +/-\n=========================================\n- Coverage    76.6%     76%   -0.61%   \n=========================================\n  Files          27      27            \n  Lines        2513    2521       +8   \n=========================================\n- Hits         1925    1916       -9   \n- Misses        588     605      +17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 80.54% <75%> (-0.14%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 70.63% <0%> (-3.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 041842b...98f59a3. Read the comment docs.\n. # Codecov Report\nMerging #1879 into master will decrease coverage by 1.94%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1879      +/-\n==========================================\n- Coverage   77.93%   75.99%   -1.95%   \n==========================================\n  Files          27       27            \n  Lines        2656     2512     -144   \n==========================================\n- Hits         2070     1909     -161   \n- Misses        586      603      +17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 80.68% <100%> (-1.95%) | :arrow_down: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 83.17% <0%> (-6.05%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 70.55% <0%> (-5.56%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 90.76% <0%> (-4.89%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 93.15% <0%> (-3.31%) | :arrow_down: |\n| SDWebImage/UIView+WebCacheOperation.m | 62.06% <0%> (-2.22%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 69.07% <0%> (-2.22%) | :arrow_down: |\n| SDWebImage/UIButton+WebCache.m | 49.27% <0%> (-2.05%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.m | 88% <0%> (-2%) | :arrow_down: |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...f258e9b. Read the comment docs.\n. # Codecov Report\nMerging #1880 into master will decrease coverage by 1.95%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1880      +/-\n==========================================\n- Coverage   77.93%   75.98%   -1.96%   \n==========================================\n  Files          27       27            \n  Lines        2656     2511     -145   \n==========================================\n- Hits         2070     1908     -162   \n- Misses        586      603      +17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDownloaderTests.m | 83.17% <0%> (-6.05%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 70.55% <0%> (-5.56%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 90.76% <0%> (-4.89%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 93.15% <0%> (-3.31%) | :arrow_down: |\n| SDWebImage/UIView+WebCacheOperation.m | 62.06% <0%> (-2.22%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 69.07% <0%> (-2.22%) | :arrow_down: |\n| SDWebImage/UIButton+WebCache.m | 49.27% <0%> (-2.05%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 80.62% <0%> (-2.01%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.m | 88% <0%> (-2%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 78.26% <0%> (-1.74%) | :arrow_down: |\n| ... and 13 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad9f1a2...c4a1a22. Read the comment docs.\n. # Codecov Report\nMerging #1891 into master will increase coverage by 0.02%.\nThe diff coverage is 81.25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1891      +/-\n==========================================\n+ Coverage      76%   76.03%   +0.02%   \n==========================================\n  Files          27       27            \n  Lines        2513     2520       +7   \n==========================================\n+ Hits         1910     1916       +6   \n- Misses        603      604       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 82.06% <81.25%> (+0.14%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 041842b...395a400. Read the comment docs.\n. # Codecov Report\nMerging #1894 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1894   +/-\n======================================\n  Coverage      76%     76%         \n======================================\n  Files          27      27         \n  Lines        2513    2513         \n======================================\n  Hits         1910    1910         \n  Misses        603     603\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 041842b...577d58a. Read the comment docs.\n. # Codecov Report\nMerging #1898 into master will increase coverage by 0.3%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1898     +/-\n========================================\n+ Coverage      76%   76.3%   +0.3%   \n========================================\n  Files          27      28      +1   \n  Lines        2513    2545     +32   \n========================================\n+ Hits         1910    1942     +32   \n  Misses        603     603\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDImageCacheTests.m | 93.82% <100%> (+0.67%) | :arrow_up: |\n| Tests/Tests/MockFileManager.m | 100% <100%> (\u00f8) | |\n| SDWebImage/SDImageCache.m | 71.24% <80%> (+0.6%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 041842b...03b6d1b. Read the comment docs.\n. # Codecov Report\nMerging #1910 into 4.x will decrease coverage by 0.32%.\nThe diff coverage is 92.16%.\n\n\n```diff\n@@            Coverage Diff            @@\n4.x   #1910      +/-\n=========================================\n- Coverage   76.92%   76.6%   -0.33%   \n=========================================\n  Files          26      27       +1   \n  Lines        2470    2513      +43   \n=========================================\n+ Hits         1900    1925      +25   \n- Misses        570     588      +18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheConfig.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 64.28% <100%> (\u00f8) | |\n| Tests/Tests/SDCategoriesTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 74.6% <100%> (-1.51%) | :arrow_down: |\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 56.88% <55.55%> (+3.17%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 80.68% <71.42%> (-2.5%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 69.07% <80%> (-1.79%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.92% <85.71%> (+0.96%) | :arrow_up: |\n| SDWebImage/SDWebImageDecoder.m | 96% <95.39%> (-4%) | :arrow_down: |\n| ... and 22 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d6fa29c...041842b. Read the comment docs.\n. # Codecov Report\nMerging #1911 into master will decrease coverage by 0.57%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1911      +/-\n==========================================\n- Coverage    76.6%   76.02%   -0.58%   \n==========================================\n  Files          27       27            \n  Lines        2513     2515       +2   \n==========================================\n- Hits         1925     1912      -13   \n- Misses        588      603      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 82.12% <100%> (+0.2%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 70.63% <0%> (-3.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 041842b...cf963c0. Read the comment docs.\n. # Codecov Report\nMerging #1940 into master will decrease coverage by 0.58%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1940      +/-\n==========================================\n- Coverage    76.6%   76.01%   -0.59%   \n==========================================\n  Files          27       27            \n  Lines        2513     2518       +5   \n==========================================\n- Hits         1925     1914      -11   \n- Misses        588      604      +16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 80.67% <81.81%> (-0.02%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 70.63% <0%> (-3.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 041842b...1f33e95. Read the comment docs.\n. # Codecov Report\nMerging #1952 into master will increase coverage by 0.82%.\nThe diff coverage is 79.31%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1952      +/-\n==========================================\n+ Coverage    76.6%   77.42%   +0.82%   \n==========================================\n  Files          27       27            \n  Lines        2513     2631     +118   \n==========================================\n+ Hits         1925     2037     +112   \n- Misses        588      594       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/UIImageMultiFormatTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+WebP.m | 75% <72.89%> (+31.7%) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.m | 88.23% <90%> (+0.23%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 70.63% <0%> (-3.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 041842b...e3ed82f. Read the comment docs.\n. # Codecov Report\nMerging #2020 into master will decrease coverage by 0.13%.\nThe diff coverage is 59.21%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2020      +/-\n==========================================\n- Coverage   78.88%   78.74%   -0.14%   \n==========================================\n  Files          33       33            \n  Lines        3367     3435      +68   \n==========================================\n+ Hits         2656     2705      +49   \n- Misses        711      730      +19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImagePrefetcher.m | 76.25% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImageView+WebCache.m | 18.33% <15.38%> (+0.15%) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 68.42% <22.22%> (-3.01%) | :arrow_down: |\n| SDWebImage/UIButton+WebCache.m | 48.83% <25%> (-1.17%) | :arrow_down: |\n| SDWebImage/MKAnnotationView+WebCache.m | 56.52% <25%> (-3.48%) | :arrow_down: |\n| SDWebImage/UIImageView+HighlightedWebCache.m | 61.9% <28.57%> (-4.77%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 58.46% <50%> (-0.92%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 80.82% <57.14%> (-1.69%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 91.66% <80%> (+0.2%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 78.89% <81.25%> (+1.57%) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 85cb2fd...feb475c. Read the comment docs.\n. # Codecov Report\nMerging #2047 into master will increase coverage by 0.01%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2047      +/-\n==========================================\n+ Coverage   78.61%   78.63%   +0.01%   \n==========================================\n  Files          33       33            \n  Lines        3334     3360      +26   \n==========================================\n+ Hits         2621     2642      +21   \n- Misses        713      718       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 79.59% <100%> (\u00f8) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 71.42% <100%> (+7.14%) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 59.37% <82.35%> (+2.49%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6628977...4b8d39f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@e1a76d7). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2066   +/-\n=========================================\n  Coverage          ?   76.76%         \n=========================================\n  Files             ?       33         \n  Lines             ?     3271         \n  Branches          ?        0         \n=========================================\n  Hits              ?     2511         \n  Misses            ?      760         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 82.56% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e1a76d7...23a174d. Read the comment docs.\n. # Codecov Report\nMerging #2068 into master will increase coverage by 3.49%.\nThe diff coverage is 98.8%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2068      +/-\n==========================================\n+ Coverage   74.96%   78.45%   +3.49%   \n==========================================\n  Files          33       33            \n  Lines        3283     3323      +40   \n==========================================\n+ Hits         2461     2607     +146   \n+ Misses        822      716     -106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDTestCase.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImagePrefetcherTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageManagerTests.m | 91.46% <100%> (+0.21%) | :arrow_up: |\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDCategoriesTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 83.4% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDImageCacheTests.m | 94.36% <98.03%> (+14.57%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 64.55% <0%> (-5.03%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 76.8% <0%> (+2.57%) | :arrow_up: |\n| SDWebImage/NSData+ImageContentType.m | 67.44% <0%> (+6.97%) | :arrow_up: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 30275b4...f55635d. Read the comment docs.\n. # Codecov Report\nMerging #2069 into master will increase coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2069      +/-\n==========================================\n+ Coverage   74.96%   75.11%   +0.15%   \n==========================================\n  Files          33       33            \n  Lines        3283     3331      +48   \n==========================================\n+ Hits         2461     2502      +41   \n- Misses        822      829       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 68.75% <100%> (+4.46%) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 69.28% <100%> (+12.4%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.03% <0%> (-2.05%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.71% <0%> (-0.52%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 30275b4...516c98d. Read the comment docs.\n. # Codecov Report\nMerging #2071 into master will decrease coverage by 0.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2071      +/-\n==========================================\n- Coverage   78.61%   78.52%   -0.09%   \n==========================================\n  Files          33       33            \n  Lines        3334     3334            \n==========================================\n- Hits         2621     2618       -3   \n- Misses        713      716       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 81.74% <0%> (-0.82%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 04855c9...30fd6cc. Read the comment docs.\n. # Codecov Report\nMerging #2074 into master will increase coverage by 0.16%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2074      +/-\n==========================================\n+ Coverage   78.61%   78.77%   +0.16%   \n==========================================\n  Files          33       33            \n  Lines        3334     3341       +7   \n==========================================\n+ Hits         2621     2632      +11   \n+ Misses        713      709       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 80.95% <100%> (+1.36%) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 81.74% <0%> (-0.82%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 74.41% <0%> (+6.97%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd37ef6...d62e965. Read the comment docs.\n. # Codecov Report\nMerging #2078 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #2078   +/-\n======================================\n  Coverage    78.3%   78.3%         \n======================================\n  Files          35      35         \n  Lines        3383    3383         \n======================================\n  Hits         2649    2649         \n  Misses        734     734\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 77.31% <0%> (-1.04%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.26% <0%> (+0.52%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2e5317...6b4eba1. Read the comment docs.\n. # Codecov Report\nMerging #2079 into master will decrease coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2079      +/-\n==========================================\n- Coverage   78.88%   78.83%   -0.06%   \n==========================================\n  Files          33       33            \n  Lines        3367     3368       +1   \n==========================================\n- Hits         2656     2655       -1   \n- Misses        711      713       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.11% <100%> (+0.03%) | :arrow_up: |\n| SDWebImage/SDWebImageImageIOCoder.m | 80.45% <0%> (-0.51%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 85cb2fd...5773bfe. Read the comment docs.\n. # Codecov Report\nMerging #2080 into master will decrease coverage by 0.86%.\nThe diff coverage is 15.55%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2080      +/-\n==========================================\n- Coverage   78.83%   77.96%   -0.87%   \n==========================================\n  Files          33       33            \n  Lines        3368     3403      +35   \n==========================================\n- Hits         2655     2653       -2   \n- Misses        713      750      +37\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 76.07% <0%> (-4.38%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 55.93% <30.43%> (-18.49%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 292078c...decb5dc. Read the comment docs.\n. # Codecov Report\nMerging #2081 into master will decrease coverage by 0.06%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2081      +/-\n==========================================\n- Coverage   77.93%   77.86%   -0.07%   \n==========================================\n  Files          33       33            \n  Lines        3404     3407       +3   \n==========================================\n  Hits         2653     2653            \n- Misses        751      754       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/NSData+ImageContentType.m | 53.22% <0%> (-2.71%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 77.31% <0%> (-1.04%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.26% <0%> (+0.52%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 28d21d2...a71b7b6. Read the comment docs.\n. # Codecov Report\nMerging #2082 into master will increase coverage by 0.37%.\nThe diff coverage is 70.27%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2082      +/-\n=========================================\n+ Coverage   77.92%   78.3%   +0.37%   \n=========================================\n  Files          33      35       +2   \n  Lines        3407    3383      -24   \n=========================================\n- Hits         2655    2649       -6   \n+ Misses        752     734      -18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImage+MultiFormat.m | 50% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageFrame.m | 100% <100%> (\u00f8) | |\n| SDWebImage/SDWebImageWebPCoder.m | 85.98% <100%> (+3.42%) | :arrow_up: |\n| SDWebImage/SDWebImageCoderHelper.m | 61.59% <61.59%> (\u00f8) | |\n| SDWebImage/SDWebImageImageIOCoder.m | 84.67% <75%> (+8.78%) | :arrow_up: |\n| SDWebImage/SDWebImageGIFCoder.m | 81.9% <95.23%> (-0.67%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.73% <0%> (-0.53%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3064ef6...079ec72. Read the comment docs.\n. # Codecov Report\nMerging #2085 into master will increase coverage by 0.01%.\nThe diff coverage is 26.31%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2085      +/-\n==========================================\n+ Coverage   77.92%   77.94%   +0.01%   \n==========================================\n  Files          33       33            \n  Lines        3407     3409       +2   \n==========================================\n+ Hits         2655     2657       +2   \n  Misses        752      752\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 76% <26.31%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3064ef6...bfbe1d4. Read the comment docs.\n. # Codecov Report\nMerging #2089 into master will decrease coverage by 0.53%.\nThe diff coverage is 37.25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2089      +/-\n==========================================\n- Coverage    78.3%   77.76%   -0.54%   \n==========================================\n  Files          35       35            \n  Lines        3383     3409      +26   \n==========================================\n+ Hits         2649     2651       +2   \n- Misses        734      758      +24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 78.96% <37.25%> (-7.02%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 77.31% <0%> (-1.04%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.26% <0%> (+0.52%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2e5317...2dadac7. Read the comment docs.\n. # Codecov Report\nMerging #2091 into 5.x will increase coverage by 0.14%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2091      +/-\n==========================================\n+ Coverage   78.45%   78.59%   +0.14%   \n==========================================\n  Files          36       36            \n  Lines        3420     3420            \n==========================================\n+ Hits         2683     2688       +5   \n+ Misses        737      732       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/NSData+ImageContentType.m | 53.22% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 77.31% <0%> (-1.04%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.8% <0%> (+0.51%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.79% <0%> (+0.68%) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 85.98% <0%> (+1.13%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd17cb8...f7f7cb1. Read the comment docs.\n. # Codecov Report\nMerging #2093 into master will decrease coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2093      +/-\n==========================================\n- Coverage    78.3%   78.22%   -0.09%   \n==========================================\n  Files          35       35            \n  Lines        3383     3384       +1   \n==========================================\n- Hits         2649     2647       -2   \n- Misses        734      737       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 59.37% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.h | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 84.84% <0%> (-1.14%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2e5317...0eff98e. Read the comment docs.\n. # Codecov Report\nMerging #2095 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2095      +/-\n==========================================\n+ Coverage    78.3%   78.37%   +0.06%   \n==========================================\n  Files          35       35            \n  Lines        3384     3385       +1   \n==========================================\n+ Hits         2650     2653       +3   \n+ Misses        734      732       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 86.03% <100%> (+0.05%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 64.73% <0%> (-0.53%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.79% <0%> (+0.68%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 78.35% <0%> (+1.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 821c2f3...98f020f. Read the comment docs.\n. # Codecov Report\nMerging #2096 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #2096   +/-\n======================================\n  Coverage    78.3%   78.3%         \n======================================\n  Files          35      35         \n  Lines        3384    3384         \n======================================\n  Hits         2650    2650         \n  Misses        734     734\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 64.73% <0%> (-0.53%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 78.35% <0%> (+1.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 821c2f3...17616c9. Read the comment docs.\n. # Codecov Report\nMerging #2101 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2101      +/-\n==========================================\n+ Coverage   78.31%   78.34%   +0.02%   \n==========================================\n  Files          35       35            \n  Lines        3385     3389       +4   \n==========================================\n+ Hits         2651     2655       +4   \n  Misses        734      734\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 86.14% <100%> (+0.1%) | :arrow_up: |\n| SDWebImage/SDWebImageImageIOCoder.m | 84.76% <100%> (+0.08%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 64.73% <0%> (-0.53%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 78.35% <0%> (+1.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0f73155...81a7c3a. Read the comment docs.\n. # Codecov Report\nMerging #2106 into master will increase coverage by 0.09%.\nThe diff coverage is 97.29%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2106      +/-\n==========================================\n+ Coverage   80.89%   80.98%   +0.09%   \n==========================================\n  Files          35       35            \n  Lines        3407     3418      +11   \n  Branches      299      302       +3   \n==========================================\n+ Hits         2756     2768      +12   \n+ Misses        631      629       -2   \n- Partials       20       21       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 84.97% <\u00f8> (-0.08%) | :arrow_down: |\n| SDWebImage/SDWebImageCodersManager.m | 69.69% <\u00f8> (+2.04%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.46% <\u00f8> (-0.06%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.m | 76.66% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 67.36% <\u00f8> (-0.09%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 62.58% <100%> (+2.9%) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 73.8% <94.73%> (+2.38%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f09463...e972c90. Read the comment docs.\n. # Codecov Report\nMerging #2111 into master will increase coverage by 2.51%.\nThe diff coverage is 93.75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2111      +/-\n==========================================\n+ Coverage   78.49%   81.01%   +2.51%   \n==========================================\n  Files          35       35            \n  Lines        3390     3402      +12   \n  Branches        0      299     +299   \n==========================================\n+ Hits         2661     2756      +95   \n+ Misses        729      626     -103   \n- Partials        0       20      +20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImagePrefetcher.m | 90.12% <93.75%> (+13.87%) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.m | 76.66% <0%> (-12.62%) | :arrow_down: |\n| SDWebImage/SDWebImageWebPCoder.m | 83.27% <0%> (-2.77%) | :arrow_down: |\n| SDWebImage/SDWebImageGIFCoder.m | 79.43% <0%> (-2.47%) | :arrow_down: |\n| SDWebImage/SDWebImageImageIOCoder.m | 83.05% <0%> (-1.54%) | :arrow_down: |\n| SDWebImage/SDWebImageCoderHelper.m | 61.42% <0%> (-0.17%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.h | 100% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 59.68% <0%> (+0.31%) | :arrow_up: |\n| SDWebImage/NSData+ImageContentType.m | 55% <0%> (+1.77%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 67.45% <0%> (+2.19%) | :arrow_up: |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2cbbfd...4f65117. Read the comment docs.\n. # Codecov Report\nMerging #2114 into master will decrease coverage by 0.55%.\nThe diff coverage is 40.42%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2114      +/-\n==========================================\n- Coverage   78.34%   77.79%   -0.56%   \n==========================================\n  Files          35       35            \n  Lines        3389     3431      +42   \n==========================================\n+ Hits         2655     2669      +14   \n- Misses        734      762      +28\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 45.07% <40.42%> (-17%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.73% <0%> (-0.53%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 78.35% <0%> (+1.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5872bd6...8f43d3e. Read the comment docs.\n. # Codecov Report\nMerging #2115 into master will increase coverage by 2.6%.\nThe diff coverage is 58.33%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2115     +/-\n=========================================\n+ Coverage   78.34%   80.94%   +2.6%   \n=========================================\n  Files          35       35           \n  Lines        3389     3412     +23   \n  Branches        0      301    +301   \n=========================================\n+ Hits         2655     2762    +107   \n+ Misses        734      629    -105   \n- Partials        0       21     +21\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImageView+WebCache.m | 18.18% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 85.42% <40%> (+8.1%) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 60.44% <83.33%> (+1.07%) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.m | 76.66% <0%> (-12.62%) | :arrow_down: |\n| SDWebImage/SDWebImageWebPCoder.m | 83.27% <0%> (-2.88%) | :arrow_down: |\n| SDWebImage/SDWebImageGIFCoder.m | 79.43% <0%> (-2.47%) | :arrow_down: |\n| SDWebImage/SDWebImageImageIOCoder.m | 83.05% <0%> (-1.71%) | :arrow_down: |\n| SDWebImage/SDWebImageCoderHelper.m | 61.42% <0%> (-0.17%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5872bd6...085b082. Read the comment docs.\n. # Codecov Report\nMerging #2116 into master will increase coverage by 0.13%.\nThe diff coverage is 71.42%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2116      +/-\n==========================================\n+ Coverage   78.34%   78.47%   +0.13%   \n==========================================\n  Files          35       35            \n  Lines        3389     3396       +7   \n==========================================\n+ Hits         2655     2665      +10   \n+ Misses        734      731       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDownloaderTests.m | 83.54% <100%> (+0.14%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 84.57% <60%> (+2.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5872bd6...f8142a1. Read the comment docs.\n. # Codecov Report\nMerging #2119 into master will decrease coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2119      +/-\n==========================================\n- Coverage   78.47%   78.43%   -0.04%   \n==========================================\n  Files          35       35            \n  Lines        3396     3390       -6   \n==========================================\n- Hits         2665     2659       -6   \n  Misses        731      731\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 86.03% <100%> (-0.11%) | :arrow_down: |\n| SDWebImage/SDWebImageImageIOCoder.m | 84.59% <100%> (-0.18%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dbc6b69...935eb1d. Read the comment docs.\n. # Codecov Report\nMerging #2120 into master will increase coverage by 2.49%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2120      +/-\n==========================================\n+ Coverage   78.49%   80.99%   +2.49%   \n==========================================\n  Files          35       35            \n  Lines        3390     3409      +19   \n  Branches        0      299     +299   \n==========================================\n+ Hits         2661     2761     +100   \n+ Misses        729      628     -101   \n- Partials        0       20      +20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCoder.m | 86.95% <77.77%> (-6.38%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.m | 76.66% <0%> (-12.62%) | :arrow_down: |\n| SDWebImage/SDWebImageWebPCoder.m | 83.27% <0%> (-2.77%) | :arrow_down: |\n| SDWebImage/SDWebImageGIFCoder.m | 79.43% <0%> (-2.47%) | :arrow_down: |\n| SDWebImage/SDWebImageImageIOCoder.m | 83.05% <0%> (-1.54%) | :arrow_down: |\n| SDWebImage/SDWebImageCoderHelper.m | 61.42% <0%> (-0.17%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.h | 100% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 59.68% <0%> (+0.31%) | :arrow_up: |\n| SDWebImage/NSData+ImageContentType.m | 55% <0%> (+1.77%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 67.45% <0%> (+2.19%) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2cbbfd...d835685. Read the comment docs.\n. # Codecov Report\nMerging #2123 into master will decrease coverage by 0.12%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2123      +/-\n==========================================\n- Coverage   81.04%   80.91%   -0.13%   \n==========================================\n  Files          35       35            \n  Lines        3402     3406       +4   \n  Branches      300      299       -1   \n==========================================\n- Hits         2757     2756       -1   \n- Misses        625      630       +5   \n  Partials       20       20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 85.49% <0%> (-1.81%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.51% <0%> (-0.35%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 97ec1e2...d7861d8. Read the comment docs.\n. # Codecov Report\nMerging #2127 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2127      +/-\n=========================================\n+ Coverage   80.89%   80.9%   +0.01%   \n=========================================\n  Files          35      35            \n  Lines        3407    3409       +2   \n  Branches      299     299            \n=========================================\n+ Hits         2756    2758       +2   \n  Misses        631     631            \n  Partials       20      20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.56% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f09463...f042afc. Read the comment docs.\n. # Codecov Report\nMerging #2129 into master will increase coverage by 0.12%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2129      +/-\n==========================================\n+ Coverage   80.89%   81.02%   +0.12%   \n==========================================\n  Files          35       35            \n  Lines        3407     3409       +2   \n  Branches      299      299            \n==========================================\n+ Hits         2756     2762       +6   \n+ Misses        631      627       -4   \n  Partials       20       20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 60.3% <100%> (+0.61%) | :arrow_up: |\n| SDWebImage/UIView+WebCacheOperation.m | 75.86% <0%> (+13.79%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f09463...1a43fde. Read the comment docs.\n. # Codecov Report\nMerging #2132 into master will decrease coverage by 0.16%.\nThe diff coverage is 39.02%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2132      +/-\n==========================================\n- Coverage   80.92%   80.76%   -0.17%   \n==========================================\n  Files          35       35            \n  Lines        3429     3441      +12   \n  Branches      304      304            \n==========================================\n+ Hits         2775     2779       +4   \n- Misses        632      640       +8   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIButton+WebCache.m | 52.63% <\u00f8> (+2.63%) | :arrow_up: |\n| SDWebImage/UIImageView+WebCache.m | 14.49% <0%> (-3.69%) | :arrow_down: |\n| SDWebImage/UIView+WebCacheOperation.m | 70.96% <69.56%> (+8.89%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df7ed34...ac5ec69. Read the comment docs.\n. # Codecov Report\nMerging #2140 into 5.x will decrease coverage by 1.53%.\nThe diff coverage is 73.52%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2140      +/-\n==========================================\n- Coverage   76.17%   74.63%   -1.54%   \n==========================================\n  Files          47       50       +3   \n  Lines        5138     6372    +1234   \n  Branches      449      576     +127   \n==========================================\n+ Hits         3914     4756     +842   \n- Misses       1181     1558     +377   \n- Partials       43       58      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDTestCase.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 95.79% <\u00f8> (-0.07%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 83.84% <0%> (-0.61%) | :arrow_down: |\n| SDWebImage/NSImage+Additions.m | 100% <100%> (+3.84%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.98% <100%> (+0.4%) | :arrow_up: |\n| SDWebImage/UIImage+GIF.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDAnimatedImageTest.m | 100% <100%> (\u00f8) | |\n| SDWebImage/UIImage+WebP.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 24 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34cca58...920d61f. Read the comment docs.\n. # Codecov Report\nMerging #2143 into master will decrease coverage by 0.87%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2143      +/-\n=========================================\n- Coverage   81.57%   80.7%   -0.88%   \n=========================================\n  Files          36      35       -1   \n  Lines        3674    3446     -228   \n  Branches      346     308      -38   \n=========================================\n- Hits         2997    2781     -216   \n+ Misses        654     643      -11   \n+ Partials       23      22       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageGIFCoder.m | 79.43% <66.66%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 67.79% <0%> (-6.11%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 100% <0%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDMockFileManager.m | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 47c1248...8b3c4c2. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@cc9265e). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2146   +/-\n=========================================\n  Coverage          ?   80.32%         \n=========================================\n  Files             ?       35         \n  Lines             ?     3462         \n  Branches          ?      306         \n=========================================\n  Hits              ?     2781         \n  Misses            ?      659         \n  Partials          ?       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 79.52% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cc9265e...08b913e. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@e7cf414). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2147   +/-\n======================================\n  Coverage       ?   80.53%         \n======================================\n  Files          ?       36         \n  Lines          ?     3499         \n  Branches       ?      308         \n======================================\n  Hits           ?     2818         \n  Misses         ?      659         \n  Partials       ?       22\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7cf414...caafe27. Read the comment docs.\n. # Codecov Report\nMerging #2148 into 5.x will increase coverage by 0.03%.\nThe diff coverage is 95.23%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2148      +/-\n==========================================\n+ Coverage   80.53%   80.56%   +0.03%   \n==========================================\n  Files          36       36            \n  Lines        3499     3515      +16   \n  Branches      308      312       +4   \n==========================================\n+ Hits         2818     2832      +14   \n- Misses        659      661       +2   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 79.67% <\u00f8> (+0.15%) | :arrow_up: |\n| SDWebImage/SDImageCacheConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDImageCacheTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDMockFileManager.m | 91.66% <91.66%> (-8.34%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 68.42% <94.73%> (+0.13%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7be0bbe...0d7c93d. Read the comment docs.\n. # Codecov Report\nMerging #2149 into 5.x will decrease coverage by 0.93%.\nThe diff coverage is 49.17%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2149      +/-\n=========================================\n- Coverage   74.63%   73.7%   -0.94%   \n=========================================\n  Files          50      51       +1   \n  Lines        6372    6613     +241   \n  Branches      575     597      +22   \n=========================================\n+ Hits         4756    4874     +118   \n- Misses       1558    1681     +123   \n  Partials       58      58\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCodersManager.m | 70.31% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageAPNGCoder.m | 43.26% <43.26%> (\u00f8) | |\n| SDWebImage/SDAnimatedImageRep.m | 86.53% <82.14%> (-5.13%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update beb958b...5da5ec9. Read the comment docs.\n. # Codecov Report\nMerging #2150 into 5.x will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2150      +/-\n==========================================\n+ Coverage   80.56%   80.62%   +0.06%   \n==========================================\n  Files          36       36            \n  Lines        3515     3526      +11   \n  Branches      312      312            \n==========================================\n+ Hits         2832     2843      +11   \n  Misses        661      661            \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.73% <100%> (+0.27%) | :arrow_up: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 97.89% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7c14f41...c7c572d. Read the comment docs.\n. # Codecov Report\nMerging #2151 into 5.x will increase coverage by 0.03%.\nThe diff coverage is 64%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2151      +/-\n==========================================\n+ Coverage   80.35%   80.38%   +0.03%   \n==========================================\n  Files          36       36            \n  Lines        3517     3528      +11   \n  Branches      314      315       +1   \n==========================================\n+ Hits         2826     2836      +10   \n- Misses        669      670       +1   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 69.51% <64%> (+0.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 85e389e...030a337. Read the comment docs.\n. # Codecov Report\nMerging #2152 into 5.x will increase coverage by 0.03%.\nThe diff coverage is 75.75%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2152      +/-\n==========================================\n+ Coverage   80.53%   80.57%   +0.03%   \n==========================================\n  Files          36       37       +1   \n  Lines        3586     3588       +2   \n  Branches      320      321       +1   \n==========================================\n+ Hits         2888     2891       +3   \n+ Misses        675      674       -1   \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageGIFCoder.m | 79.43% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+WebP.m | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 83.33% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImageView+WebCache.m | 15.38% <\u00f8> (+0.89%) | :arrow_up: |\n| SDWebImage/UIImage+GIF.m | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+MultiFormat.m | 0% <\u00f8> (-50%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 68.26% <100%> (+0.38%) | :arrow_up: |\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+ForceDecode.m | 90% <100%> (\u00f8) | :arrow_up: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55d0822...cde5d5f. Read the comment docs.\n. # Codecov Report\nMerging #2153 into master will decrease coverage by 0.98%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2153      +/-\n==========================================\n- Coverage   81.24%   80.26%   -0.99%   \n==========================================\n  Files          36       35       -1   \n  Lines        3690     3451     -239   \n  Branches      345      306      -39   \n==========================================\n- Hits         2998     2770     -228   \n+ Misses        669      659      -10   \n+ Partials       23       22       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 66.84% <100%> (-7.06%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.46% <0%> (-0.35%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 100% <0%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDMockFileManager.m | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5f3a8c...7704c1e. Read the comment docs.\n. # Codecov Report\nMerging #2154 into master will decrease coverage by 1.02%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2154      +/-\n==========================================\n- Coverage   81.24%   80.22%   -1.03%   \n==========================================\n  Files          36       35       -1   \n  Lines        3690     3464     -226   \n  Branches      345      309      -36   \n==========================================\n- Hits         2998     2779     -219   \n+ Misses        669      663       -6   \n+ Partials       23       22       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 84.61% <50%> (-0.36%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 67.79% <0%> (-6.11%) | :arrow_down: |\n| SDWebImage/SDWebImageWebPCoder.m | 82.22% <0%> (-1.12%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.46% <0%> (-0.35%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 100% <0%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDMockFileManager.m | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5f3a8c...ff8d23d. Read the comment docs.\n. # Codecov Report\nMerging #2155 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2155      +/-\n==========================================\n- Coverage   80.31%   80.28%   -0.04%   \n==========================================\n  Files          35       35            \n  Lines        3465     3464       -1   \n  Branches      307      308       +1   \n==========================================\n- Hits         2783     2781       -2   \n  Misses        660      660            \n- Partials       22       23       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageGIFCoder.m | 78.3% <0%> (-1.14%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 61703fc...f7c6e1b. Read the comment docs.\n. # Codecov Report\nMerging #2157 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2157      +/-\n==========================================\n+ Coverage   80.31%   80.36%   +0.05%   \n==========================================\n  Files          35       35            \n  Lines        3464     3474      +10   \n  Branches      307      307            \n==========================================\n+ Hits         2782     2792      +10   \n  Misses        660      660            \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 73.8% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 63.19% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.71% <100%> (+0.24%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f456ff...fcc544c. Read the comment docs.\n. # Codecov Report\nMerging #2159 into master will increase coverage by 0.3%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2159     +/-\n=========================================\n+ Coverage   80.31%   80.61%   +0.3%   \n=========================================\n  Files          35       35           \n  Lines        3464     3472      +8   \n  Branches      307      308      +1   \n=========================================\n+ Hits         2782     2799     +17   \n+ Misses        660      651      -9   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.59% <100%> (+0.12%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 84.84% <100%> (+0.23%) | :arrow_up: |\n| SDWebImage/NSData+ImageContentType.m | 65% <0%> (+15%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f456ff...28ba3be. Read the comment docs.\n. # Codecov Report\nMerging #2160 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2160      +/-\n==========================================\n+ Coverage   80.31%   80.31%   +<.01%   \n==========================================\n  Files          35       35            \n  Lines        3464     3465       +1   \n  Branches      307      306       -1   \n==========================================\n+ Hits         2782     2783       +1   \n  Misses        660      660            \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.49% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f456ff...31a87af. Read the comment docs.\n. # Codecov Report\nMerging #2162 into master will decrease coverage by 0.14%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2162      +/-\n=========================================\n- Coverage   80.34%   80.2%   -0.15%   \n=========================================\n  Files          35      35            \n  Lines        3454    3480      +26   \n  Branches      308     307       -1   \n=========================================\n+ Hits         2775    2791      +16   \n- Misses        657     667      +10   \n  Partials       22      22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 79.18% <\u00f8> (-0.34%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 85.07% <100%> (-0.36%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 63.94% <100%> (+0.75%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 69.19% <100%> (+2.34%) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 76.59% <100%> (+2.78%) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.m | 53.33% <0%> (-23.34%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.15% <0%> (-1.37%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 261a1dc...9420a20. Read the comment docs.\n. # Codecov Report\nMerging #2164 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2164      +/-\n==========================================\n+ Coverage   80.49%   80.57%   +0.08%   \n==========================================\n  Files          35       35            \n  Lines        3465     3465            \n  Branches      310      308       -2   \n==========================================\n+ Hits         2789     2792       +3   \n+ Misses        654      651       -3   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 85.42% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 83.33% <0%> (+1.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6c0570...8032109. Read the comment docs.\n. # Codecov Report\nMerging #2166 into 5.x will increase coverage by 5.03%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2166      +/-\n==========================================\n+ Coverage   75.51%   80.55%   +5.03%   \n==========================================\n  Files          42       37       -5   \n  Lines        4121     3625     -496   \n  Branches      353      328      -25   \n==========================================\n- Hits         3112     2920     -192   \n+ Misses        987      683     -304   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDownloaderTests.m | 97.07% <\u00f8> (+1.2%) | :arrow_up: |\n| SDWebImage/UIView+WebCacheOperation.m | 59.45% <0%> (-11.51%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 85.2% <100%> (+2.12%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 83.25% <100%> (+1.08%) | :arrow_up: |\n| SDWebImage/UIImage+GIF.m | 0% <0%> (-100%) | :arrow_down: |\n| SDWebImage/UIImage+WebP.m | 0% <0%> (-100%) | :arrow_down: |\n| SDWebImage/UIImage+MultiFormat.m | 0% <0%> (-100%) | :arrow_down: |\n| SDWebImage/UIImage+WebCache.m | 81.81% <0%> (-18.19%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 50% <0%> (-11.67%) | :arrow_down: |\n| SDWebImage/SDWebImageCoderHelper.m | 61.42% <0%> (-6.55%) | :arrow_down: |\n| ... and 24 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0fa6e88...de63c77. Read the comment docs.\n. # Codecov Report\nMerging #2169 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #2169   +/-\n=======================================\n  Coverage   80.25%   80.25%         \n=======================================\n  Files          35       35         \n  Lines        3454     3454         \n  Branches      307      306    -1   \n=======================================\n  Hits         2772     2772         \n  Misses        660      660         \n  Partials       22       22\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5667d67...4f4a330. Read the comment docs.\n. # Codecov Report\nMerging #2172 into master will increase coverage by 0.23%.\nThe diff coverage is 98%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2172      +/-\n==========================================\n+ Coverage   80.09%   80.32%   +0.23%   \n==========================================\n  Files          35       35            \n  Lines        3466     3512      +46   \n  Branches      310      314       +4   \n==========================================\n+ Hits         2776     2821      +45   \n- Misses        667      669       +2   \n+ Partials       23       22       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDTestCase.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 67.87% <100%> (+4.68%) | :arrow_up: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 97.89% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageManagerTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDCategoriesTests.m | 99.15% <96%> (-0.85%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08bc07f...412d2a8. Read the comment docs.\n. # Codecov Report\nMerging #2173 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #2173   +/-\n======================================\n  Coverage    80.1%   80.1%         \n======================================\n  Files          35      35         \n  Lines        3464    3464         \n  Branches      308     308         \n======================================\n  Hits         2775    2775         \n  Misses        667     667         \n  Partials       22      22\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09e90b5...9256b51. Read the comment docs.\n. # Codecov Report\nMerging #2174 into master will increase coverage by <.01%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2174      +/-\n==========================================\n+ Coverage    80.1%   80.11%   +<.01%   \n==========================================\n  Files          35       35            \n  Lines        3464     3470       +6   \n  Branches      308      309       +1   \n==========================================\n+ Hits         2775     2780       +5   \n- Misses        667      668       +1   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 91.97% <90.9%> (-0.18%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09e90b5...86d056f. Read the comment docs.\n. # Codecov Report\nMerging #2175 into master will decrease coverage by 0.05%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2175      +/-\n==========================================\n- Coverage   80.17%   80.12%   -0.06%   \n==========================================\n  Files          35       35            \n  Lines        3466     3466            \n  Branches      311      311            \n==========================================\n- Hits         2779     2777       -2   \n- Misses        664      666       +2   \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.49% <0%> (-0.69%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 44cddbf...6c32cc4. Read the comment docs.\n. # Codecov Report\nMerging #2177 into master will decrease coverage by 0.06%.\nThe diff coverage is 76%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2177      +/-\n==========================================\n- Coverage   80.32%   80.26%   -0.07%   \n==========================================\n  Files          35       35            \n  Lines        3518     3511       -7   \n  Branches      316      316            \n==========================================\n- Hits         2826     2818       -8   \n- Misses        670      671       +1   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 82.58% <16.66%> (-2.03%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 85.78% <94.73%> (+1.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c79155e...154d9dd. Read the comment docs.\n. # Codecov Report\nMerging #2178 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #2178   +/-\n=======================================\n  Coverage   80.09%   80.09%         \n=======================================\n  Files          35       35         \n  Lines        3466     3466         \n  Branches      310      310         \n=======================================\n  Hits         2776     2776         \n  Misses        667      667         \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImageView+WebCache.m | 14.49% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08bc07f...3d1d9f2. Read the comment docs.\n. # Codecov Report\nMerging #2181 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2181      +/-\n==========================================\n+ Coverage   80.32%   80.35%   +0.03%   \n==========================================\n  Files          35       35            \n  Lines        3512     3523      +11   \n  Branches      315      312       -3   \n==========================================\n+ Hits         2821     2831      +10   \n- Misses        669      670       +1   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 81.81% <100%> (+6.81%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 83.74% <0%> (-0.99%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 68.13% <0%> (-0.26%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.49% <0%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9048f3b...61670d3. Read the comment docs.\n. # Codecov Report\nMerging #2182 into master will decrease coverage by 1.73%.\nThe diff coverage is 40.16%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2182      +/-\n==========================================\n- Coverage   80.49%   78.75%   -1.74%   \n==========================================\n  Files          35       36       +1   \n  Lines        3532     3629      +97   \n  Branches      320      319       -1   \n==========================================\n+ Hits         2843     2858      +15   \n- Misses        667      748      +81   \n- Partials       22       23       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageTransition.m | 0% <0%> (\u00f8) | |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 82.75% <100%> (+0.94%) | :arrow_up: |\n| SDWebImage/UIImageView+WebCache.m | 19.17% <100%> (+4.68%) | :arrow_up: |\n| SDWebImage/UIButton+WebCache.m | 59.09% <100%> (+6.45%) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 64.46% <56.81%> (-3.42%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 50% <0%> (-15%) | :arrow_down: |\n| SDWebImage/SDWebImageWebPCoder.m | 82.22% <0%> (-0.87%) | :arrow_down: |\n| SDWebImage/SDWebImageGIFCoder.m | 79.43% <0%> (-0.37%) | :arrow_down: |\n| SDWebImage/SDWebImageImageIOCoder.m | 79.18% <0%> (-0.32%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 84.73% <0%> (-0.32%) | :arrow_down: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0faf0db...829d54f. Read the comment docs.\n. # Codecov Report\nMerging #2183 into master will increase coverage by 0.02%.\nThe diff coverage is 47.36%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2183      +/-\n==========================================\n+ Coverage    78.7%   78.72%   +0.02%   \n==========================================\n  Files          36       36            \n  Lines        3620     3624       +4   \n  Branches      322      322            \n==========================================\n+ Hits         2849     2853       +4   \n  Misses        749      749            \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIButton+WebCache.m | 55% <47.36%> (+2.36%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9be6ba4...bccdd2a. Read the comment docs.\n. # Codecov Report\nMerging #2184 into master will decrease coverage by 0.03%.\nThe diff coverage is 89.47%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2184      +/-\n==========================================\n- Coverage   80.26%   80.23%   -0.04%   \n==========================================\n  Files          35       35            \n  Lines        3522     3531       +9   \n  Branches      313      315       +2   \n==========================================\n+ Hits         2827     2833       +6   \n- Misses        672      676       +4   \n+ Partials       23       22       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 81.9% <89.47%> (-0.69%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5946727...1d7238c. Read the comment docs.\n. # Codecov Report\nMerging #2185 into 5.x will decrease coverage by 1.41%.\nThe diff coverage is 17.35%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x    #2185      +/-\n=========================================\n- Coverage   78.8%   77.39%   -1.42%   \n=========================================\n  Files         38       39       +1   \n  Lines       3718     3795      +77   \n  Branches     343      343            \n=========================================\n+ Hits        2930     2937       +7   \n- Misses       766      836      +70   \n  Partials      22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageIndicator.m | 0% <0%> (\u00f8) | |\n| SDWebImage/UIView+WebCache.m | 68.87% <53.84%> (+4.69%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.75% <0%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update af282c1...89babbb. Read the comment docs.\n. # Codecov Report\nMerging #2186 into master will increase coverage by 0.02%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2186      +/-\n=========================================\n+ Coverage   80.18%   80.2%   +0.02%   \n=========================================\n  Files          35      35            \n  Lines        3533    3537       +4   \n  Branches      314     317       +3   \n=========================================\n+ Hits         2833    2837       +4   \n  Misses        678     678            \n  Partials       22      22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 85.05% <80%> (+0.31%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b758c97...c95e139. Read the comment docs.\n. # Codecov Report\nMerging #2190 into master will decrease coverage by 1.98%.\nThe diff coverage is 64.28%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2190      +/-\n=========================================\n- Coverage   80.49%   78.5%   -1.99%   \n=========================================\n  Files          35      36       +1   \n  Lines        3532    3634     +102   \n  Branches      320     322       +2   \n=========================================\n+ Hits         2843    2853      +10   \n- Misses        667     759      +92   \n  Partials       22      22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 66.66% <62.96%> (-1.47%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 50% <0%> (-15%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 63.81% <0%> (-4.06%) | :arrow_down: |\n| SDWebImage/SDWebImageTransition.m | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0faf0db...fbcfa28. Read the comment docs.\n. # Codecov Report\nMerging #2191 into 5.x will increase coverage by 0.35%.\nThe diff coverage is 90.3%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2191      +/-\n==========================================\n+ Coverage   75.61%   75.97%   +0.35%   \n==========================================\n  Files          43       43            \n  Lines        4175     4278     +103   \n  Branches      366      365       -1   \n==========================================\n+ Hits         3157     3250      +93   \n- Misses        995     1007      +12   \n+ Partials       23       21       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImagePrefetcherTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImagePrefetcher.m | 85.24% <84.31%> (-5%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4557278...69bc9cb. Read the comment docs.\n. # Codecov Report\nMerging #2195 into 5.x will increase coverage by 4.73%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2195      +/-\n==========================================\n+ Coverage   43.15%   47.89%   +4.73%   \n==========================================\n  Files          51       55       +4   \n  Lines        6087     6886     +799   \n==========================================\n+ Hits         2627     3298     +671   \n- Misses       3460     3588     +128\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageManagerTests.m | 96.47% <\u00f8> (+3.13%) | :arrow_up: |\n| Tests/Tests/SDWebImagePrefetcherTests.m | 98.97% <\u00f8> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDAnimatedImageTest.m | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDMockFileManager.m | 57.14% <100%> (-26.2%) | :arrow_down: |\n| Tests/Tests/SDWebImageTestCache.m | 27.45% <27.45%> (\u00f8) | |\n| SDWebImage/SDMemoryCache.m | 36.14% <36.14%> (\u00f8) | |\n| SDWebImage/SDWebImageManager.m | 78.37% <60%> (-2.14%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 63.93% <61.7%> (+11.83%) | :arrow_up: |\n| SDWebImage/SDWebImageCachesManager.m | 77.66% <77.66%> (\u00f8) | |\n| SDWebImage/SDDiskCache.m | 79.57% <79.57%> (\u00f8) | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a710bc5...816901f. Read the comment docs.\n. # Codecov Report\nMerging #2196 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2196      +/-\n==========================================\n+ Coverage   78.61%   78.62%   +<.01%   \n==========================================\n  Files          36       36            \n  Lines        3634     3635       +1   \n  Branches      323      323            \n==========================================\n+ Hits         2857     2858       +1   \n  Misses        755      755            \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImagePrefetcher.m | 90.24% <100%> (+0.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2052557...7e96b77. Read the comment docs.\n. # Codecov Report\nMerging #2197 into master will decrease coverage by 0.21%.\nThe diff coverage is 78.94%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2197      +/-\n==========================================\n- Coverage   78.59%   78.38%   -0.22%   \n==========================================\n  Files          36       36            \n  Lines        3635     3641       +6   \n  Branches      322      335      +13   \n==========================================\n- Hits         2857     2854       -3   \n- Misses        756      765       +9   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 81.65% <71.42%> (-1.11%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.41% <88.23%> (+0.44%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 82.38% <0%> (-3.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a9a123f...9080afd. Read the comment docs.\n. # Codecov Report\nMerging #2199 into master will decrease coverage by 0.11%.\nThe diff coverage is 96.82%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2199      +/-\n==========================================\n- Coverage   78.27%   78.15%   -0.12%   \n==========================================\n  Files          36       36            \n  Lines        3664     3676      +12   \n  Branches      338      340       +2   \n==========================================\n+ Hits         2868     2873       +5   \n- Misses        773      780       +7   \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.25% <96.82%> (-1.6%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 48.33% <0%> (-1.67%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a54d1d7...7eff696. Read the comment docs.\n. # Codecov Report\nMerging #2204 into master will increase coverage by 0.03%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2204      +/-\n==========================================\n+ Coverage   78.38%   78.41%   +0.03%   \n==========================================\n  Files          36       36            \n  Lines        3641     3651      +10   \n  Branches      335      335            \n==========================================\n+ Hits         2854     2863       +9   \n- Misses        765      766       +1   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 82.01% <92.3%> (+0.36%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5b7f669...7f6dbd4. Read the comment docs.\n. # Codecov Report\nMerging #2206 into master will decrease coverage by 0.06%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2206      +/-\n==========================================\n- Coverage   78.41%   78.35%   -0.07%   \n==========================================\n  Files          36       36            \n  Lines        3651     3654       +3   \n  Branches      336      335       -1   \n==========================================\n  Hits         2863     2863            \n- Misses        766      769       +3   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 78.86% <0%> (-0.65%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 406220b...3ba496c. Read the comment docs.\n. # Codecov Report\nMerging #2208 into master will decrease coverage by 0.1%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2208      +/-\n==========================================\n- Coverage   78.35%   78.24%   -0.11%   \n==========================================\n  Files          36       36            \n  Lines        3654     3659       +5   \n  Branches      336      338       +2   \n==========================================\n  Hits         2863     2863            \n- Misses        769      773       +4   \n- Partials       22       23       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 90.84% <75%> (-1.57%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bd22ad8...6ec285f. Read the comment docs.\n. # Codecov Report\nMerging #2218 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2218      +/-\n==========================================\n+ Coverage   78.24%   78.27%   +0.02%   \n==========================================\n  Files          36       36            \n  Lines        3659     3664       +5   \n  Branches      338      338            \n==========================================\n+ Hits         2863     2868       +5   \n  Misses        773      773            \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 67.07% <100%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2646b3a...45f8082. Read the comment docs.\n. # Codecov Report\nMerging #2219 into 5.x will increase coverage by 0.1%.\nThe diff coverage is 75.56%.\n\n\n```diff\n@@           Coverage Diff            @@\n5.x   #2219     +/-\n========================================\n+ Coverage   76.09%   76.2%   +0.1%   \n========================================\n  Files          43      47      +4   \n  Lines        4347    5132    +785   \n  Branches      370     446     +76   \n========================================\n+ Hits         3308    3911    +603   \n- Misses       1018    1177    +159   \n- Partials       21      44     +23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageManagerTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageTestTransformer.m | 100% <100%> (\u00f8) | |\n| SDWebImage/SDImageCache.m | 70.68% <100%> (+0.37%) | :arrow_up: |\n| SDWebImage/SDWebImageTransformer.m | 53.73% <53.73%> (\u00f8) | |\n| SDWebImage/UIImage+Transform.m | 74.9% <74.9%> (\u00f8) | |\n| SDWebImage/SDWebImageManager.m | 84.44% <87.5%> (+0.48%) | :arrow_up: |\n| Tests/Tests/SDWebImageTransformerTests.m | 98.11% <98.11%> (\u00f8) | |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ff999f...ec7927b. Read the comment docs.\n. # Codecov Report\nMerging #2220 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #2220   +/-\n=======================================\n  Coverage   78.27%   78.27%         \n=======================================\n  Files          36       36         \n  Lines        3664     3664         \n  Branches      338      339    +1   \n=======================================\n  Hits         2868     2868         \n  Misses        773      773         \n  Partials       23       23\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a54d1d7...26e77d0. Read the comment docs.\n. # Codecov Report\nMerging #2223 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2223      +/-\n==========================================\n- Coverage   78.27%   78.24%   -0.03%   \n==========================================\n  Files          36       36            \n  Lines        3664     3664            \n  Branches      339      338       -1   \n==========================================\n- Hits         2868     2867       -1   \n- Misses        773      774       +1   \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCoderHelper.m | 61.42% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageGIFCoder.m | 78.84% <100%> (-0.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3054a38...fc1fd0a. Read the comment docs.\n. # Codecov Report\nMerging #2225 into master will not change coverage.\nThe diff coverage is 78.57%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #2225   +/-\n=======================================\n  Coverage   78.32%   78.32%         \n=======================================\n  Files          36       36         \n  Lines        3673     3673         \n  Branches      338      338         \n=======================================\n  Hits         2877     2877         \n  Misses        773      773         \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 67.07% <78.57%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 47b77b7...ad02e3e. Read the comment docs.\n. # Codecov Report\nMerging #2228 into master will decrease coverage by 0.01%.\nThe diff coverage is 85.18%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2228      +/-\n=========================================\n- Coverage   78.42%   78.4%   -0.02%   \n=========================================\n  Files          36      36            \n  Lines        3685    3733      +48   \n  Branches      340     341       +1   \n=========================================\n+ Hits         2890    2927      +37   \n- Misses        772     783      +11   \n  Partials       23      23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 70.96% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 68.8% <84.9%> (+1.72%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 91.2% <0%> (-0.98%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1986669...216dfeb. Read the comment docs.\n. # Codecov Report\nMerging #2231 into master will increase coverage by 0.37%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2231      +/-\n=========================================\n+ Coverage   78.03%   78.4%   +0.37%   \n=========================================\n  Files          36      36            \n  Lines        3733    3733            \n  Branches      339     341       +2   \n=========================================\n+ Hits         2913    2927      +14   \n+ Misses        795     783      -12   \n+ Partials       25      23       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 91.2% <100%> (+4.23%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 82.38% <0%> (+0.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 71caeb8...a2eb895. Read the comment docs.\n. # Codecov Report\nMerging #2232 into master will increase coverage by 0.25%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2232      +/-\n=========================================\n+ Coverage   78.24%   78.5%   +0.25%   \n=========================================\n  Files          36      36            \n  Lines        3733    3735       +2   \n  Branches      341     342       +1   \n=========================================\n+ Hits         2921    2932      +11   \n+ Misses        789     780       -9   \n  Partials       23      23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 82.17% <100%> (+0.15%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.18% <0%> (+2.93%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6318776...776ce2b. Read the comment docs.\n. # Codecov Report\nMerging #2242 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #2242   +/-\n======================================\n  Coverage    78.5%   78.5%         \n======================================\n  Files          36      36         \n  Lines        3735    3735         \n  Branches      342     342         \n======================================\n  Hits         2932    2932         \n  Misses        780     780         \n  Partials       23      23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 68.8% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5147ae5...3ceb830. Read the comment docs.\n. # Codecov Report\nMerging #2243 into 5.x will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\n5.x   #2243   +/-\n=====================================\n  Coverage   75.7%   75.7%         \n=====================================\n  Files         43      43         \n  Lines       4223    4223         \n  Branches     367     366    -1   \n=====================================\n  Hits        3197    3197         \n  Misses      1003    1003         \n  Partials      23      23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 83.07% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a54f412...d8be03a. Read the comment docs.\n. # Codecov Report\nMerging #2244 into master will decrease coverage by 0.37%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2244      +/-\n==========================================\n- Coverage    78.5%   78.12%   -0.38%   \n==========================================\n  Files          36       36            \n  Lines        3735     3735            \n  Branches      342      340       -2   \n==========================================\n- Hits         2932     2918      -14   \n- Misses        780      792      +12   \n- Partials       23       25       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 81.86% <100%> (-0.52%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.94% <0%> (-4.24%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5147ae5...09639a8. Read the comment docs.\n. # Codecov Report\nMerging #2245 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2245      +/-\n==========================================\n+ Coverage    78.5%   78.56%   +0.06%   \n==========================================\n  Files          36       36            \n  Lines        3735     3746      +11   \n  Branches      344      340       -4   \n==========================================\n+ Hits         2932     2943      +11   \n  Misses        780      780            \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 83.33% <100%> (+0.94%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 92cb7cd...51024a3. Read the comment docs.\n. # Codecov Report\nMerging #2246 into master will increase coverage by 0.03%.\nThe diff coverage is 57.14%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2246      +/-\n==========================================\n+ Coverage    78.5%   78.53%   +0.03%   \n==========================================\n  Files          36       36            \n  Lines        3735     3741       +6   \n  Branches      344      343       -1   \n==========================================\n+ Hits         2932     2938       +6   \n  Misses        780      780            \n  Partials       23       23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 82.91% <57.14%> (+0.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 92cb7cd...f364962. Read the comment docs.\n. # Codecov Report\nMerging #2249 into master will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2249      +/-\n==========================================\n- Coverage   78.53%   78.48%   -0.05%   \n==========================================\n  Files          36       36            \n  Lines        3741     3742       +1   \n  Branches      343      342       -1   \n==========================================\n- Hits         2938     2937       -1   \n- Misses        780      783       +3   \n+ Partials       23       22       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCodersManager.m | 70.14% <100%> (+0.45%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 91.53% <0%> (-0.66%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 91e4118...381e578. Read the comment docs.\n. # Codecov Report\nMerging #2250 into 5.x will decrease coverage by 0.03%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2250      +/-\n==========================================\n- Coverage   76.09%   76.06%   -0.04%   \n==========================================\n  Files          43       43            \n  Lines        4334     4336       +2   \n  Branches      371      368       -3   \n==========================================\n  Hits         3298     3298            \n- Misses       1015     1017       +2   \n  Partials       21       21\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 81.62% <0%> (-0.71%) | :arrow_down: |\n| SDWebImage/SDWebImageCodersManager.m | 71.21% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.25% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+MultiFormat.m | 100% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDImageCacheTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 70.31% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+ForceDecode.m | 90% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 95.86% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6fc140...c9dfe39. Read the comment docs.\n. # Codecov Report\nMerging #2255 into master will decrease coverage by 0.04%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2255      +/-\n==========================================\n- Coverage   78.01%   77.96%   -0.05%   \n==========================================\n  Files          36       36            \n  Lines        3752     3758       +6   \n  Branches      341      344       +3   \n==========================================\n+ Hits         2927     2930       +3   \n- Misses        801      802       +1   \n- Partials       24       26       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 82.93% <0%> (-0.4%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 68.92% <90%> (+0.12%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.01% <0%> (-0.33%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dc5c974...2f552ee. Read the comment docs.\n. # Codecov Report\nMerging #2256 into 5.x will decrease coverage by 0.14%.\nThe diff coverage is 74.76%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2256      +/-\n=========================================\n- Coverage   68.95%   68.8%   -0.15%   \n=========================================\n  Files          46      48       +2   \n  Lines        6417    6537     +120   \n=========================================\n+ Hits         4425    4498      +73   \n- Misses       1992    2039      +47\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.97% <74.76%> (-0.13%) | :arrow_down: |\n| #macOS | 67.48% <73.8%> (-0.28%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageLoadersManager.m | 46.15% <46.15%> (\u00f8) | |\n| SDWebImage/SDWebImageManager.m | 75.42% <62.5%> (-5.09%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.51% <88.88%> (+1.74%) | :arrow_up: |\n| SDWebImage/SDWebImageLoader.m | 89.74% <89.74%> (\u00f8) | |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.62% <91.66%> (-0.36%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 66.66% <0%> (-0.48%) | :arrow_down: |\n| SDWebImage/SDWebImageWebPCoder.m | 78.79% <0%> (+0.2%) | :arrow_up: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5426a72...d507442. Read the comment docs.\n. # Codecov Report\nMerging #2260 into master will increase coverage by 0.58%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2260      +/-\n==========================================\n+ Coverage   78.01%   78.59%   +0.58%   \n==========================================\n  Files          36       36            \n  Lines        3752     3752            \n  Branches      341      343       +2   \n==========================================\n+ Hits         2927     2949      +22   \n+ Misses        801      780      -21   \n+ Partials       24       23       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCodersManager.m | 69.69% <75%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 83.8% <0%> (+0.47%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 92.18% <0%> (+6.84%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dc5c974...bb5bd74. Read the comment docs.\n. # Codecov Report\nMerging #2261 into 5.x will increase coverage by 0.37%.\nThe diff coverage is 92.92%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2261      +/-\n==========================================\n+ Coverage   73.86%   74.24%   +0.37%   \n==========================================\n  Files          53       54       +1   \n  Lines        6804     6884      +80   \n  Branches      618      633      +15   \n==========================================\n+ Hits         5026     5111      +85   \n+ Misses       1718     1714       -4   \n+ Partials       60       59       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDefine.m | 43.54% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 93.27% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCacheOperation.m | 59.45% <0%> (-11.51%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 83.89% <100%> (+5.2%) | :arrow_up: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 83.47% <87.5%> (-0.22%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderRequestModifier.m | 91.66% <91.66%> (\u00f8) | |\n| SDWebImage/SDAnimatedImageView.m | 58.13% <0%> (+0.93%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 01e75cf...55256d0. Read the comment docs.\n. # Codecov Report\nMerging #2263 into 5.x will increase coverage by 0.12%.\nThe diff coverage is 83.47%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2263      +/-\n==========================================\n+ Coverage   73.76%   73.88%   +0.12%   \n==========================================\n  Files          51       52       +1   \n  Lines        6620     6666      +46   \n  Branches      601      605       +4   \n==========================================\n+ Hits         4883     4925      +42   \n- Misses       1679     1683       +4   \n  Partials       58       58\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDownloaderTests.m | 98.39% <100%> (+2.59%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 78.92% <74.19%> (-2.7%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderConfig.m | 88.88% <88.88%> (\u00f8) | |\n| SDWebImage/SDWebImageDownloaderOperation.m | 93.27% <0%> (+0.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f1b5e94...43ad13d. Read the comment docs.\n. # Codecov Report\nMerging #2265 into 5.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\n5.x    #2265   +/-\n=======================================\n  Coverage   68.84%   68.84%         \n=======================================\n  Files          48       48         \n  Lines        6551     6551         \n=======================================\n  Hits         4510     4510         \n  Misses       2041     2041\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.94% <\u00f8> (-0.06%) | :arrow_down: |\n| #macOS | 67.36% <\u00f8> (-0.17%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/WebP/SDWebImageWebPCoder.m | 78.79% <\u00f8> (\u00f8) | |\n| SDWebImage/MapKit/MKAnnotationView+WebCache.m | 70.37% <\u00f8> (\u00f8) | |\n| SDWebImage/WebP/UIImage+WebP.m | 100% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 31b3726...9c11886. Read the comment docs.\n. # Codecov Report\nMerging #2266 into 5.x will decrease coverage by 0.42%.\nThe diff coverage is 61.5%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2266      +/-\n==========================================\n- Coverage   73.86%   73.43%   -0.43%   \n==========================================\n  Files          53       53            \n  Lines        6804     6950     +146   \n  Branches      618      634      +16   \n==========================================\n+ Hits         5026     5104      +78   \n- Misses       1718     1784      +66   \n- Partials       60       62       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCodersManager.m | 72.13% <\u00f8> (+1.81%) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 67.21% <0%> (-0.84%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 83.69% <100%> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+WebCache.m | 94% <100%> (+1.89%) | :arrow_up: |\n| SDWebImage/SDWebImageDefine.m | 29.72% <2.94%> (-13.82%) | :arrow_down: |\n| SDWebImage/SDWebImageGIFCoder.m | 78.24% <47.05%> (-1.5%) | :arrow_down: |\n| SDWebImage/SDWebImageAPNGCoder.m | 43.63% <50%> (+0.36%) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 76.43% <56.06%> (-3.11%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 69.86% <66.66%> (-0.12%) | :arrow_down: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 01e75cf...cbf8581. Read the comment docs.\n. # Codecov Report\nMerging #2271 into 5.x will decrease coverage by 0.31%.\nThe diff coverage is 59.7%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2271      +/-\n==========================================\n- Coverage   73.48%   73.17%   -0.32%   \n==========================================\n  Files          53       53            \n  Lines        6986     7012      +26   \n  Branches      640      639       -1   \n==========================================\n- Hits         5134     5131       -3   \n- Misses       1791     1820      +29   \n  Partials       61       61\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 67.21% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageAPNGCoder.m | 44.01% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDefine.m | 29.72% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 69.86% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageGIFCoder.m | 78.45% <25%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 76.56% <50%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCoderHelper.m | 75.75% <54.28%> (-4.21%) | :arrow_down: |\n| SDWebImage/SDWebImageImageIOCoder.m | 61.8% <66.66%> (-2.12%) | :arrow_down: |\n| SDWebImage/NSImage+Additions.m | 83.33% <80.64%> (-6.25%) | :arrow_down: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8801138...e2c99f4. Read the comment docs.\n. # Codecov Report\nMerging #2272 into master will decrease coverage by 0.14%.\nThe diff coverage is 93.75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2272      +/-\n==========================================\n- Coverage   78.22%   78.07%   -0.15%   \n==========================================\n  Files          36       36            \n  Lines        3752     3745       -7   \n  Branches      343      339       -4   \n==========================================\n- Hits         2935     2924      -11   \n- Misses        792      795       +3   \n- Partials       25       26       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageImageIOCoder.m | 78.17% <92.85%> (-0.69%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.97% <0%> (-0.98%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0f36f97...46e5b19. Read the comment docs.\n. # Codecov Report\nMerging #2274 into master will decrease coverage by 2.65%.\nThe diff coverage is 73.8%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2274      +/-\n==========================================\n- Coverage   78.53%   75.87%   -2.66%   \n==========================================\n  Files          36       36            \n  Lines        3745     3747       +2   \n  Branches      343        0     -343   \n==========================================\n- Hits         2941     2843      -98   \n- Misses        780      904     +124   \n+ Partials       24        0      -24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCodersManager.m | 70.37% <73.8%> (+0.67%) | :arrow_up: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 82.84% <0%> (-14.23%) | :arrow_down: |\n| SDWebImage/SDWebImagePrefetcher.m | 79.26% <0%> (-10.98%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.8% <0%> (-10%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 92.13% <0%> (-7.87%) | :arrow_down: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 74.57% <0%> (-6.78%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 94.59% <0%> (-5.41%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.34% <0%> (-3.84%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 78.35% <0%> (-3.82%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.34% <0%> (-3.47%) | :arrow_down: |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e549e1a...dfe4a66. Read the comment docs.\n. # Codecov Report\nMerging #2275 into 5.x will decrease coverage by 0.15%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2275      +/-\n==========================================\n- Coverage   69.11%   68.95%   -0.16%   \n==========================================\n  Files          48       48            \n  Lines        6698     6706       +8   \n==========================================\n- Hits         4629     4624       -5   \n- Misses       2069     2082      +13\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.01% <\u00f8> (-0.11%) | :arrow_down: |\n| #macOS | 68.04% <\u00f8> (-0.28%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDDiskCache.m | 52.94% <0%> (-4.11%) | :arrow_down: |\n| SDWebImage/SDImageLoadersManager.m | 44% <0%> (-2.16%) | :arrow_down: |\n| SDWebImage/SDImageCodersManager.m | 69.86% <0%> (-0.81%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.62% <0%> (-0.77%) | :arrow_down: |\n| SDWebImage/SDMemoryCache.m | 73.49% <0%> (-0.63%) | :arrow_down: |\n| SDWebImage/SDAnimatedImage.m | 69.2% <0%> (-0.37%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 70.66% <0%> (-0.21%) | :arrow_down: |\n| SDWebImage/WebP/SDImageWebPCoder.m | 79.71% <0%> (-0.11%) | :arrow_down: |\n| SDWebImage/SDImageCacheConfig.m | 100% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 76215d7...a42577c. Read the comment docs.\n. # Codecov Report\nMerging #2276 into 5.x will increase coverage by 0.11%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2276      +/-\n=========================================\n+ Coverage   43.18%   43.3%   +0.11%   \n=========================================\n  Files          51      51            \n  Lines        6092    6083       -9   \n=========================================\n+ Hits         2631    2634       +3   \n+ Misses       3461    3449      -12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 53.65% <78.57%> (+1.96%) | :arrow_up: |\n| Tests/Tests/SDImageCacheTests.m | 73.59% <87.5%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 80.5% <0%> (-0.85%) | :arrow_down: |\n| Tests/Tests/SDWebImagePrefetcherTests.m | 98.97% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e829637...f8e9dd3. Read the comment docs.\n. # Codecov Report\nMerging #2277 into 5.x will decrease coverage by 0.19%.\nThe diff coverage is 78.12%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x    #2277     +/-\n=========================================\n- Coverage   43.23%   43.03%   -0.2%   \n=========================================\n  Files          51       51           \n  Lines        6083     6060     -23   \n=========================================\n- Hits         2630     2608     -22   \n+ Misses       3453     3452      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDMockFileManager.m | 57.14% <100%> (-26.2%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 52.68% <73.68%> (-0.98%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 71.67% <81.81%> (-1.93%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.35% <0%> (+0.84%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 76.64% <0%> (+1.45%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db646df...e1d96e7. Read the comment docs.\n. # Codecov Report\nMerging #2278 into 5.x will increase coverage by 0.23%.\nThe diff coverage is 71.3%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2278      +/-\n==========================================\n+ Coverage   68.72%   68.95%   +0.23%   \n==========================================\n  Files          44       46       +2   \n  Lines        5902     6423     +521   \n==========================================\n+ Hits         4056     4429     +373   \n- Misses       1846     1994     +148\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.09% <71.3%> (+0.1%) | :arrow_up: |\n| #macOS | 67.68% <66.44%> (+0.37%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 67.14% <55.55%> (-4.96%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 80.5% <61.53%> (-0.37%) | :arrow_down: |\n| SDWebImage/SDWebImageCache.m | 65.62% <65.62%> (\u00f8) | |\n| SDWebImage/SDWebImageCachesManager.m | 77.66% <77.66%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f7af36f...5a32da7. Read the comment docs.\n. # Codecov Report\nMerging #2280 into 5.x will decrease coverage by 0.07%.\nThe diff coverage is 36.95%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2280      +/-\n==========================================\n- Coverage   43.03%   42.96%   -0.08%   \n==========================================\n  Files          51       53       +2   \n  Lines        6060     6098      +38   \n==========================================\n+ Hits         2608     2620      +12   \n- Misses       3452     3478      +26\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDefine.m | 65.62% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCacheKeyFilter.m | 0% <0%> (\u00f8) | |\n| SDWebImage/SDWebImageCacheSerializer.m | 0% <0%> (\u00f8) | |\n| SDWebImage/SDWebImageManager.m | 80.8% <77.27%> (-0.56%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 53.09% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7272cf7...3d7896f. Read the comment docs.\n. # Codecov Report\nMerging #2281 into master will decrease coverage by 2.78%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2281      +/-\n==========================================\n- Coverage   78.53%   75.74%   -2.79%   \n==========================================\n  Files          36       36            \n  Lines        3745     3736       -9   \n  Branches      343        0     -343   \n==========================================\n- Hits         2941     2830     -111   \n- Misses        780      906     +126   \n+ Partials       24        0      -24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 74.88% <100%> (-8.93%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.13% <80%> (-3.68%) | :arrow_down: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 82.84% <0%> (-14.23%) | :arrow_down: |\n| SDWebImage/SDWebImagePrefetcher.m | 79.26% <0%> (-10.98%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 92.13% <0%> (-7.87%) | :arrow_down: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 74.57% <0%> (-6.78%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 94.59% <0%> (-5.41%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.37% <0%> (-4.81%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 78.35% <0%> (-3.82%) | :arrow_down: |\n| ... and 11 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e549e1a...0dfeebe. Read the comment docs.\n. # Codecov Report\nMerging #2282 into 5.x will increase coverage by 0.75%.\nThe diff coverage is 54.16%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2282      +/-\n==========================================\n+ Coverage   42.93%   43.69%   +0.75%   \n==========================================\n  Files          51       54       +3   \n  Lines        6063     6214     +151   \n==========================================\n+ Hits         2603     2715     +112   \n- Misses       3460     3499      +39\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDImageCacheTests.m | 74.01% <100%> (+2.34%) | :arrow_up: |\n| Tests/Tests/SDWebImageTestCache.m | 27.45% <27.45%> (\u00f8) | |\n| SDWebImage/SDMemoryCache.m | 36.14% <36.14%> (\u00f8) | |\n| SDWebImage/SDDiskCache.m | 56.33% <56.33%> (\u00f8) | |\n| SDWebImage/SDImageCache.m | 65.48% <71.42%> (+12.68%) | :arrow_up: |\n| SDWebImage/SDImageCacheConfig.m | 91.66% <88.88%> (-8.34%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 75.09% <0%> (-1.47%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 80.5% <0%> (-0.85%) | :arrow_down: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5647c8...56fea37. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@1367b18). Click here to learn what that means.\nThe diff coverage is 25%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2283   +/-\n======================================\n  Coverage       ?   42.75%         \n======================================\n  Files          ?       51         \n  Lines          ?     6063         \n  Branches       ?        0         \n======================================\n  Hits           ?     2592         \n  Misses         ?     3471         \n  Partials       ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheConfig.m | 100% <\u00f8> (\u00f8) | |\n| SDWebImage/SDWebImageDownloaderConfig.m | 88.88% <\u00f8> (\u00f8) | |\n| SDWebImage/SDWebImageDownloader.m | 79.77% <\u00f8> (\u00f8) | |\n| SDWebImage/SDImageCache.m | 53.2% <0%> (\u00f8) | |\n| SDWebImage/SDWebImageDownloaderOperation.m | 73.26% <50%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1367b18...781c079. Read the comment docs.\n. # Codecov Report\nMerging #2286 into master will decrease coverage by 2.8%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2286      +/-\n==========================================\n- Coverage   78.53%   75.72%   -2.81%   \n==========================================\n  Files          36       36            \n  Lines        3745     3732      -13   \n  Branches      343        0     -343   \n==========================================\n- Hits         2941     2826     -115   \n- Misses        780      906     +126   \n+ Partials       24        0      -24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDownloaderTests.m | 82.84% <0%> (-14.23%) | :arrow_down: |\n| SDWebImage/SDWebImagePrefetcher.m | 79.26% <0%> (-10.98%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.8% <0%> (-10%) | :arrow_down: |\n| Tests/Tests/SDWebImageManagerTests.m | 92.13% <0%> (-7.87%) | :arrow_down: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 74.57% <0%> (-6.78%) | :arrow_down: |\n| Tests/Tests/SDImageCacheTests.m | 94.59% <0%> (-5.41%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.37% <0%> (-4.81%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 78.35% <0%> (-3.82%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.34% <0%> (-3.47%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 46.77% <0%> (-1.56%) | :arrow_down: |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e549e1a...6831a09. Read the comment docs.\n. # Codecov Report\nMerging #2287 into 5.x will increase coverage by 0.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2287      +/-\n==========================================\n+ Coverage   68.74%   68.81%   +0.07%   \n==========================================\n  Files          44       44            \n  Lines        5897     5891       -6   \n==========================================\n  Hits         4054     4054            \n+ Misses       1843     1837       -6\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.05% <\u00f8> (+0.07%) | :arrow_up: |\n| #macOS | 67.7% <\u00f8> (+0.12%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheConfig.m | 100% <\u00f8> (+8.33%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderConfig.m | 100% <\u00f8> (+11.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb7d528...77426d1. Read the comment docs.\n. # Codecov Report\nMerging #2290 into 5.x will not change coverage.\nThe diff coverage is 40%.\n\n\n```diff\n@@           Coverage Diff           @@\n5.x    #2290   +/-\n=======================================\n  Coverage   68.74%   68.74%         \n=======================================\n  Files          44       44         \n  Lines        5897     5897         \n=======================================\n  Hits         4054     4054         \n  Misses       1843     1843\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.89% <40%> (-0.08%) | :arrow_down: |\n| #macOS | 67.66% <40%> (+0.08%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 61.44% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 81.59% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.98% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 79.77% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb7d528...60d58ef. Read the comment docs.\n. # Codecov Report\nMerging #2292 into 5.x will decrease coverage by 0.01%.\nThe diff coverage is 97.64%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2292      +/-\n==========================================\n- Coverage   68.95%   68.94%   -0.02%   \n==========================================\n  Files          46       46            \n  Lines        6417     6417            \n==========================================\n- Hits         4425     4424       -1   \n- Misses       1992     1993       +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.19% <97.64%> (+0.1%) | :arrow_up: |\n| #macOS | 67.6% <95.29%> (-0.15%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheDefine.m | 65.62% <100%> (\u00f8) | |\n| SDWebImage/SDImageCache.m | 66.66% <100%> (-0.48%) | :arrow_down: |\n| SDWebImage/SDImageCachesManager.m | 77.66% <100%> (\u00f8) | |\n| SDWebImage/SDWebImageManager.m | 79.66% <60%> (-0.85%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.4% <0%> (-0.58%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 80.14% <0%> (+0.37%) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 70.2% <0%> (+0.92%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5426a72...a6bdba7. Read the comment docs.\n. # Codecov Report\nMerging #2293 into 5.x will increase coverage by 0.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2293      +/-\n==========================================\n+ Coverage   68.95%   69.03%   +0.07%   \n==========================================\n  Files          46       46            \n  Lines        6417     6417            \n==========================================\n+ Hits         4425     4430       +5   \n+ Misses       1992     1987       -5\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.09% <\u00f8> (\u00f8) | :arrow_up: |\n| #macOS | 67.81% <\u00f8> (+0.05%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 64.14% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/NSImage+Compatibility.m | 86.79% <\u00f8> (\u00f8) | |\n| SDWebImage/UIImage+Transform.m | 80.15% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 78.58% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCoderHelper.m | 75.33% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 70.2% <\u00f8> (+0.92%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.98% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCodersManager.m | 72.13% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 69.56% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDefine.m | 32.87% <\u00f8> (\u00f8) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5426a72...7cf58ad. Read the comment docs.\n. # Codecov Report\nMerging #2294 into 5.x will decrease coverage by 0.01%.\nThe diff coverage is 71.42%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2294      +/-\n==========================================\n- Coverage   69.08%   69.07%   -0.02%   \n==========================================\n  Files          48       48            \n  Lines        6557     6557            \n==========================================\n- Hits         4530     4529       -1   \n- Misses       2027     2028       +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.18% <71.42%> (\u00f8) | :arrow_up: |\n| #macOS | 67.86% <71.42%> (+0.14%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.39% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.09% <100%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 82.27% <50%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ac47ce3...425d78d. Read the comment docs.\n. # Codecov Report\nMerging #2296 into 5.x will increase coverage by 0.25%.\nThe diff coverage is 84.24%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2296      +/-\n==========================================\n+ Coverage   68.82%   69.07%   +0.25%   \n==========================================\n  Files          48       48            \n  Lines        6550     6558       +8   \n==========================================\n+ Hits         4508     4530      +22   \n+ Misses       2042     2028      -14\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.23% <84.24%> (+0.27%) | :arrow_up: |\n| #macOS | 67.81% <82.87%> (+0.45%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 82.27% <83.7%> (+6.85%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.71% <90.9%> (-0.75%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.84% <0%> (+0.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf85c53...cfd6842. Read the comment docs.\n. # Codecov Report\nMerging #2299 into 5.x will decrease coverage by <.01%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2299      +/-\n==========================================\n- Coverage   68.83%   68.83%   -0.01%   \n==========================================\n  Files          48       48            \n  Lines        6550     6555       +5   \n==========================================\n+ Hits         4509     4512       +3   \n- Misses       2041     2043       +2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.01% <83.33%> (+0.05%) | :arrow_up: |\n| #macOS | 67.37% <83.33%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 67.13% <75%> (-0.01%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.51% <0%> (-0.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c478cb...8269a0c. Read the comment docs.\n. # Codecov Report\nMerging #2301 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #2301   +/-\n=======================================\n  Coverage   75.81%   75.81%         \n=======================================\n  Files          36       36         \n  Lines        3751     3751         \n=======================================\n  Hits         2844     2844         \n  Misses        907      907\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8154d16...745dc38. Read the comment docs.\n. # Codecov Report\nMerging #2303 into 5.x will decrease coverage by 0.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2303      +/-\n==========================================\n- Coverage   69.09%   69.02%   -0.08%   \n==========================================\n  Files          48       48            \n  Lines        6572     6557      -15   \n==========================================\n- Hits         4541     4526      -15   \n  Misses       2031     2031\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.17% <\u00f8> (-0.11%) | :arrow_down: |\n| #macOS | 67.63% <\u00f8> (-0.17%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 63.04% <\u00f8> (-1.28%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 69.28% <0%> (-0.93%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.44% <0%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5f85848...8f49d75. Read the comment docs.\n. # Codecov Report\nMerging #2304 into 5.x will decrease coverage by 0.03%.\nThe diff coverage is 58.62%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2304      +/-\n==========================================\n- Coverage   69.02%   68.99%   -0.04%   \n==========================================\n  Files          48       48            \n  Lines        6557     6557            \n==========================================\n- Hits         4526     4524       -2   \n- Misses       2031     2033       +2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.22% <58.62%> (+0.03%) | :arrow_up: |\n| #macOS | 67.38% <58.62%> (-0.24%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDefine.m | 32.87% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 67.13% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 82.27% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageTransformer.m | 54.47% <56.52%> (\u00f8) | |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.71% <0%> (-0.69%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5d7625f...a5616e2. Read the comment docs.\n. # Codecov Report\nMerging #2305 into 5.x will increase coverage by 0.01%.\nThe diff coverage is 89.36%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2305      +/-\n==========================================\n+ Coverage   69.02%   69.04%   +0.01%   \n==========================================\n  Files          48       48            \n  Lines        6557     6557            \n==========================================\n+ Hits         4526     4527       +1   \n+ Misses       2031     2030       -1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.25% <90.9%> (+0.06%) | :arrow_up: |\n| #macOS | 67.7% <77.77%> (+0.08%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/NSImage+Compatibility.m | 84.9% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCoderHelper.m | 75.55% <100%> (\u00f8) | |\n| SDWebImage/SDWebImageGIFCoder.m | 80.23% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+ForceDecode.m | 93.33% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageImageIOCoder.m | 63.04% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/WebP/SDWebImageWebPCoder.m | 79.05% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageFrame.m | 100% <100%> (\u00f8) | |\n| SDWebImage/SDImageCache.m | 67.13% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCacheDefine.m | 65.62% <50%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageLoader.m | 90% <66.66%> (\u00f8) | :arrow_up: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5d7625f...9ee3dac. Read the comment docs.\n. # Codecov Report\nMerging #2306 into 5.x will increase coverage by 0.06%.\nThe diff coverage is 78.33%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2306      +/-\n==========================================\n+ Coverage   69.02%   69.08%   +0.06%   \n==========================================\n  Files          48       48            \n  Lines        6557     6557            \n==========================================\n+ Hits         4526     4530       +4   \n+ Misses       2031     2027       -4\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.25% <77.77%> (+0.06%) | :arrow_up: |\n| #macOS | 67.61% <72.03%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageLoader.m | 90% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImage+GIF.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCacheDefine.m | 65.62% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 67.13% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDAnimatedImageRep.m | 86.79% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/WebP/UIImage+WebP.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageAPNGCoder.m | 42.73% <47.36%> (\u00f8) | |\n| SDWebImage/UIImage+MultiFormat.m | 75% <50%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 69.56% <55.55%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCodersManager.m | 70.66% <77.77%> (\u00f8) | |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5d7625f...0423cc2. Read the comment docs.\n. # Codecov Report\nMerging #2308 into master will decrease coverage by 0.04%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2308      +/-\n==========================================\n- Coverage   75.81%   75.77%   -0.05%   \n==========================================\n  Files          36       36            \n  Lines        3751     3756       +5   \n==========================================\n+ Hits         2844     2846       +2   \n- Misses        907      910       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 71.87% <50%> (-2.71%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 22e532c...8092c4a. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@ebfe2ce). Click here to learn what that means.\nThe diff coverage is 86.07%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2311   +/-\n======================================\n  Coverage       ?   69.23%         \n======================================\n  Files          ?       48         \n  Lines          ?     6630         \n  Branches       ?        0         \n======================================\n  Hits           ?     4590         \n  Misses         ?     2040         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.36% <77.21%> (?) | |\n| #macOS | 67.83% <86.07%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/WebP/SDImageWebPCoder.m | 79.82% <86.07%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ebfe2ce...9bf79ab. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@ebfe2ce). Click here to learn what that means.\nThe diff coverage is 80%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2312   +/-\n======================================\n  Coverage       ?   68.84%         \n======================================\n  Files          ?       48         \n  Lines          ?     6565         \n  Branches       ?        0         \n======================================\n  Hits           ?     4520         \n  Misses         ?     2045         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.07% <80%> (?) | |\n| #macOS | 67.64% <80%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 67.51% <80%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ebfe2ce...d7ceb27. Read the comment docs.\n. # Codecov Report\nMerging #2313 into master will decrease coverage by 0.33%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2313      +/-\n==========================================\n- Coverage   75.81%   75.48%   -0.34%   \n==========================================\n  Files          36       36            \n  Lines        3751     3716      -35   \n==========================================\n- Hits         2844     2805      -39   \n- Misses        907      911       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDecoderTests.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageImageIOCoder.m | 81.43% <\u00f8> (+0.43%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 84.46% <0%> (-2.92%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.45% <0%> (-1.43%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.57% <0%> (+0.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 22e532c...c6fa6e3. Read the comment docs.\n. # Codecov Report\nMerging #2314 into master will decrease coverage by 0.17%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2314      +/-\n==========================================\n- Coverage   75.81%   75.64%   -0.18%   \n==========================================\n  Files          36       36            \n  Lines        3751     3736      -15   \n==========================================\n- Hits         2844     2826      -18   \n- Misses        907      910       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 81.04% <\u00f8> (+0.04%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.76% <0%> (-1.62%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.45% <0%> (-1.43%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.57% <0%> (+0.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 22e532c...ab854e3. Read the comment docs.\n. # Codecov Report\nMerging #2315 into master will decrease coverage by 0.15%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2315      +/-\n==========================================\n- Coverage   75.81%   75.65%   -0.16%   \n==========================================\n  Files          36       36            \n  Lines        3751     3751            \n==========================================\n- Hits         2844     2838       -6   \n- Misses        907      913       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageTransition.m | 0% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-1.95%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 22e532c...ec37a48. Read the comment docs.\n. # Codecov Report\nMerging #2317 into master will decrease coverage by 0.13%.\nThe diff coverage is 76.47%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2317      +/-\n==========================================\n- Coverage   75.59%   75.45%   -0.14%   \n==========================================\n  Files          36       36            \n  Lines        3774     3781       +7   \n==========================================\n  Hits         2853     2853            \n- Misses        921      928       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 73.85% <76.47%> (-0.09%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 84.46% <0%> (-0.98%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.13% <0%> (-0.44%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55d6556...6319b68. Read the comment docs.\n. # Codecov Report\nMerging #2318 into master will increase coverage by 0.01%.\nThe diff coverage is 78.48%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2318      +/-\n==========================================\n+ Coverage   75.81%   75.83%   +0.01%   \n==========================================\n  Files          36       36            \n  Lines        3701     3774      +73   \n==========================================\n+ Hits         2806     2862      +56   \n- Misses        895      912      +17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 83.87% <78.48%> (-1.95%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 12fe445...18ee235. Read the comment docs.\n. # Codecov Report\nMerging #2319 into 5.x will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2319      +/-\n==========================================\n- Coverage   69.25%   69.21%   -0.05%   \n==========================================\n  Files          48       48            \n  Lines        6638     6639       +1   \n==========================================\n- Hits         4597     4595       -2   \n- Misses       2041     2044       +3\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.32% <100%> (-0.03%) | :arrow_down: |\n| #macOS | 68% <100%> (+0.07%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCodersManager.m | 70.66% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 67.59% <100%> (+0.07%) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 69.28% <0%> (-0.93%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.09% <0%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.39% <0%> (+0.68%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df69e8c...55584b7. Read the comment docs.\n. # Codecov Report\nMerging #2323 into master will decrease coverage by 0.07%.\nThe diff coverage is 22.72%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2323      +/-\n==========================================\n- Coverage   75.59%   75.52%   -0.08%   \n==========================================\n  Files          36       36            \n  Lines        3774     3795      +21   \n==========================================\n+ Hits         2853     2866      +13   \n- Misses        921      929       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 60% <22.72%> (-14.58%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.34% <0%> (+2.91%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55d6556...e9527b3. Read the comment docs.\n. # Codecov Report\nMerging #2326 into 5.x will increase coverage by 0.1%.\nThe diff coverage is 68.42%.\n\n\n```diff\n@@           Coverage Diff            @@\n5.x    #2326     +/-\n========================================\n+ Coverage   69.2%   69.31%   +0.1%   \n========================================\n  Files         48       48           \n  Lines       6690     6657     -33   \n========================================\n- Hits        4630     4614     -16   \n+ Misses      2060     2043     -17\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.42% <72.22%> (+0.15%) | :arrow_up: |\n| #macOS | 68.14% <64.7%> (+0.17%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/NSButton+WebCache.m | 0% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageLoader.m | 90% <100%> (\u00f8) | |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.71% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImageView+HighlightedWebCache.m | 75.86% <100%> (\u00f8) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 76.81% <100%> (+13.47%) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 63.09% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/MapKit/MKAnnotationView+WebCache.m | 70.37% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIButton+WebCache.m | 62.26% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.44% <100%> (-0.07%) | :arrow_down: |\n| SDWebImage/UIImageView+WebCache.m | 21.42% <100%> (\u00f8) | :arrow_up: |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7571f89...1343a65. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@0a0bdc9). Click here to learn what that means.\nThe diff coverage is 75%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2327   +/-\n======================================\n  Coverage       ?   69.24%         \n======================================\n  Files          ?       48         \n  Lines          ?     6642         \n  Branches       ?        0         \n======================================\n  Hits           ?     4599         \n  Misses         ?     2043         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.31% <100%> (?) | |\n| #macOS | 67.91% <75%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/NSImage+Compatibility.m | 84.9% <0%> (\u00f8) | |\n| SDWebImage/SDAnimatedImageView.m | 69.95% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0a0bdc9...a34133b. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@42e9376). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2328   +/-\n======================================\n  Coverage       ?   69.31%         \n======================================\n  Files          ?       48         \n  Lines          ?     6641         \n  Branches       ?        0         \n======================================\n  Hits           ?     4603         \n  Misses         ?     2038         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.32% <100%> (?) | |\n| #macOS | 67.96% <100%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCompat.h | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 42e9376...6d7d89c. Read the comment docs.\n. # Codecov Report\nMerging #2329 into master will decrease coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2329      +/-\n==========================================\n- Coverage   75.59%   75.49%   -0.11%   \n==========================================\n  Files          36       36            \n  Lines        3774     3774            \n==========================================\n- Hits         2853     2849       -4   \n- Misses        921      925       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCompat.h | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 84.46% <0%> (-0.98%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.45% <0%> (-0.48%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55d6556...7515f06. Read the comment docs.\n. # Codecov Report\nMerging #2330 into 5.x will increase coverage by 0.04%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2330      +/-\n==========================================\n+ Coverage   69.26%   69.31%   +0.04%   \n==========================================\n  Files          48       48            \n  Lines        6641     6641            \n==========================================\n+ Hits         4600     4603       +3   \n+ Misses       2041     2038       -3\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.34% <\u00f8> (+0.01%) | :arrow_up: |\n| #macOS | 67.93% <\u00f8> (-0.58%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImage+WebCache.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.09% <0%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 70.87% <0%> (+0.91%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3ee6c01...0471861. Read the comment docs.\n. # Codecov Report\nMerging #2331 into 5.x will increase coverage by 0.05%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2331      +/-\n==========================================\n+ Coverage   69.29%   69.35%   +0.05%   \n==========================================\n  Files          48       48            \n  Lines        6641     6657      +16   \n==========================================\n+ Hits         4602     4617      +15   \n- Misses       2039     2040       +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.29% <86.95%> (-0.09%) | :arrow_down: |\n| #macOS | 68.02% <79.16%> (+0.12%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 59.45% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImageView+WebCache.m | 21.42% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 63.09% <87.5%> (+1.65%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.09% <0%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.39% <0%> (+0.68%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 522e729...bf3c0b4. Read the comment docs.\n. # Codecov Report\nMerging #2336 into master will decrease coverage by 0.12%.\nThe diff coverage is 82.6%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2336      +/-\n==========================================\n- Coverage   75.44%   75.32%   -0.13%   \n==========================================\n  Files          36       36            \n  Lines        3837     3826      -11   \n==========================================\n- Hits         2895     2882      -13   \n- Misses        942      944       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDWebImageDownloaderTests.m | 83.18% <100%> (+0.34%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 76.75% <81.81%> (-1.7%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.87% <0%> (-1.36%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.02% <0%> (+0.42%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e98a941...2338871. Read the comment docs.\n. # Codecov Report\nMerging #2340 into master will decrease coverage by <.01%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2340      +/-\n==========================================\n- Coverage   75.83%   75.82%   -0.01%   \n==========================================\n  Files          36       36            \n  Lines        3774     3785      +11   \n==========================================\n+ Hits         2862     2870       +8   \n- Misses        912      915       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 73.87% <75%> (-1.01%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.57% <0%> (+0.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 76f7eac...3ee1b60. Read the comment docs.\n. # Codecov Report\nMerging #2343 into master will decrease coverage by 0.21%.\nThe diff coverage is 86.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2343      +/-\n==========================================\n- Coverage   75.43%   75.22%   -0.22%   \n==========================================\n  Files          36       36            \n  Lines        3806     3814       +8   \n==========================================\n- Hits         2871     2869       -2   \n- Misses        935      945      +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 70.96% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImageView+WebCache.m | 14.49% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 64.39% <86.66%> (+1.44%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 84.46% <0%> (-2.92%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.42% <0%> (-0.46%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfe0102...799ef18. Read the comment docs.\n. # Codecov Report\nMerging #2346 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2346      +/-\n==========================================\n+ Coverage   75.56%   75.57%   +<.01%   \n==========================================\n  Files          36       36            \n  Lines        3814     3815       +1   \n==========================================\n+ Hits         2882     2883       +1   \n  Misses        932      932\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 78.44% <100%> (+0.09%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5062a76...48acb8e. Read the comment docs.\n. # Codecov Report\nMerging #2348 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2348      +/-\n==========================================\n+ Coverage   75.59%   75.66%   +0.06%   \n==========================================\n  Files          36       36            \n  Lines        3815     3825      +10   \n==========================================\n+ Hits         2884     2894      +10   \n  Misses        931      931\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 84.33% <100%> (+0.45%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 65.13% <0%> (-0.44%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.34% <0%> (-0.33%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 75.22% <0%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e13f503...0437759. Read the comment docs.\n. # Codecov Report\nMerging #2349 into master will decrease coverage by 0.32%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2349      +/-\n==========================================\n- Coverage   75.59%   75.27%   -0.33%   \n==========================================\n  Files          36       36            \n  Lines        3815     3822       +7   \n==========================================\n- Hits         2884     2877       -7   \n- Misses        931      945      +14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 84.19% <100%> (+0.32%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 84.46% <0%> (-4.21%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.42% <0%> (-0.46%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e13f503...edea0c5. Read the comment docs.\n. # Codecov Report\nMerging #2357 into master will decrease coverage by 0.28%.\nThe diff coverage is 6.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2357      +/-\n==========================================\n- Coverage   75.71%   75.42%   -0.29%   \n==========================================\n  Files          36       36            \n  Lines        3825     3837      +12   \n==========================================\n- Hits         2896     2894       -2   \n- Misses        929      943      +14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 64.02% <0%> (-1.55%) | :arrow_down: |\n| SDWebImage/SDImageCacheConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 73.87% <0%> (-1.36%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b05959d...268d6d6. Read the comment docs.\n. # Codecov Report\nMerging #2359 into 5.x will decrease coverage by 0.07%.\nThe diff coverage is 55.55%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2359      +/-\n==========================================\n- Coverage   69.22%   69.14%   -0.08%   \n==========================================\n  Files          48       48            \n  Lines        6690     6690            \n==========================================\n- Hits         4631     4626       -5   \n- Misses       2059     2064       +5\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.22% <55.55%> (-0.02%) | :arrow_down: |\n| #macOS | 68.12% <55.55%> (+0.17%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 68.75% <55.55%> (+1.15%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.32% <0%> (-3.08%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.45% <0%> (-0.81%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.5% <0%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 997bf8f...a57e0f7. Read the comment docs.\n. # Codecov Report\nMerging #2360 into 5.x will decrease coverage by 0.11%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2360      +/-\n=========================================\n- Coverage   69.22%   69.1%   -0.12%   \n=========================================\n  Files          48      48            \n  Lines        6690    6690            \n=========================================\n- Hits         4631    4623       -8   \n- Misses       2059    2067       +8\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.07% <50%> (-0.17%) | :arrow_down: |\n| #macOS | 68.03% <50%> (+0.08%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDefine.m | 32.87% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 82.25% <50%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.32% <0%> (-3.08%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.5% <0%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 997bf8f...e5bee68. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@fcc53f9). Click here to learn what that means.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2361   +/-\n======================================\n  Coverage       ?   69.24%         \n======================================\n  Files          ?       48         \n  Lines          ?     6688         \n  Branches       ?        0         \n======================================\n  Hits           ?     4631         \n  Misses         ?     2057         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.32% <88.88%> (?) | |\n| #macOS | 68.04% <88.88%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImage+GIF.m | 100% <100%> (\u00f8) | |\n| SDWebImage/WebP/UIImage+WebP.m | 100% <100%> (\u00f8) | |\n| SDWebImage/UIImage+MultiFormat.m | 80% <83.33%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fcc53f9...e533a3d. Read the comment docs.\n. # Codecov Report\nMerging #2362 into 5.x will decrease coverage by 0.13%.\nThe diff coverage is 5%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2362      +/-\n=========================================\n- Coverage   69.24%   69.1%   -0.14%   \n=========================================\n  Files          48      48            \n  Lines        6688    6704      +16   \n=========================================\n+ Hits         4631    4633       +2   \n- Misses       2057    2071      +14\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.17% <6.25%> (-0.13%) | :arrow_down: |\n| #macOS | 67.99% <0%> (+0.17%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/NSButton+WebCache.m | 0% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIButton+WebCache.m | 60% <0%> (-2.27%) | :arrow_down: |\n| SDWebImage/UIImageView+WebCache.m | 20.83% <0%> (-0.6%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView+WebCache.m | 61.76% <0%> (-3.87%) | :arrow_down: |\n| SDWebImage/MapKit/MKAnnotationView+WebCache.m | 65.51% <0%> (-4.86%) | :arrow_down: |\n| SDWebImage/UIImageView+HighlightedWebCache.m | 70.96% <33.33%> (-4.9%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.45% <0%> (-0.81%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 70.87% <0%> (+0.91%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab75235...e5716db. Read the comment docs.\n. # Codecov Report\nMerging #2363 into 5.x will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\n5.x   #2363   +/-\n=====================================\n  Coverage   69.1%   69.1%         \n=====================================\n  Files         48      48         \n  Lines       6704    6704         \n=====================================\n  Hits        4633    4633         \n  Misses      2071    2071\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.2% <\u00f8> (+0.01%) | :arrow_up: |\n| #macOS | 68.14% <100%> (+0.15%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImage+Transform.m | 80.15% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 81.45% <0%> (-0.81%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.39% <0%> (+0.68%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24861d2...4dbb157. Read the comment docs.\n. # Codecov Report\nMerging #2364 into 5.x will increase coverage by 0.08%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2364      +/-\n==========================================\n+ Coverage   69.06%   69.15%   +0.08%   \n==========================================\n  Files          48       48            \n  Lines        6704     6704            \n==========================================\n+ Hits         4630     4636       +6   \n+ Misses       2074     2068       -6\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.22% <100%> (+0.03%) | :arrow_up: |\n| #macOS | 68.14% <92.3%> (+0.03%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheDefine.m | 65.62% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 68.75% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/WebP/SDImageWebPCoder.m | 79.82% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageAPNGCoder.m | 42.73% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCodersManager.m | 70.66% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageLoader.m | 90% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 69.56% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 82.25% <\u00f8> (+0.8%) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 70.87% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDefine.m | 32.87% <\u00f8> (\u00f8) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9452012...a82a4e1. Read the comment docs.\n. # Codecov Report\nMerging #2370 into 5.x will increase coverage by 0.12%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2370      +/-\n==========================================\n+ Coverage   68.98%   69.11%   +0.12%   \n==========================================\n  Files          48       48            \n  Lines        6704     6706       +2   \n==========================================\n+ Hits         4625     4635      +10   \n+ Misses       2079     2071       -8\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.19% <50%> (+0.12%) | :arrow_up: |\n| #macOS | 68.12% <50%> (-0.06%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 81.29% <50%> (-0.22%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 82.25% <0%> (+0.8%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.71% <0%> (+2.38%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5fc84db...c294beb. Read the comment docs.\n. # Codecov Report\nMerging #2371 into 5.x will increase coverage by 0.19%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2371      +/-\n==========================================\n+ Coverage   68.98%   69.18%   +0.19%   \n==========================================\n  Files          48       48            \n  Lines        6704     6704            \n==========================================\n+ Hits         4625     4638      +13   \n+ Misses       2079     2066      -13\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.12% <100%> (+0.04%) | :arrow_up: |\n| #macOS | 68.28% <100%> (+0.1%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCacheConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.16% <0%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 83.46% <0%> (+2.01%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.39% <0%> (+3.07%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5fc84db...d84e656. Read the comment docs.\n. # Codecov Report\nMerging #2372 into 5.x will increase coverage by 0.04%.\nThe diff coverage is 28.57%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2372      +/-\n==========================================\n+ Coverage   69.08%   69.13%   +0.04%   \n==========================================\n  Files          48       48            \n  Lines        6706     6696      -10   \n==========================================\n- Hits         4633     4629       -4   \n+ Misses       2073     2067       -6\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.21% <66.66%> (+0.09%) | :arrow_up: |\n| #macOS | 68.42% <0%> (+0.28%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageIOCoder.m | 64.8% <0%> (+1.76%) | :arrow_up: |\n| SDWebImage/SDImageCoderHelper.m | 74.83% <50%> (-0.72%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 80.95% <0%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.39% <0%> (+0.68%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 82.25% <0%> (+0.8%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3dad550...dd6e4a1. Read the comment docs.\n. # Codecov Report\nMerging #2373 into 5.x will increase coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2373      +/-\n=========================================\n+ Coverage   68.98%   69.1%   +0.11%   \n=========================================\n  Files          48      48            \n  Lines        6704    6704            \n=========================================\n+ Hits         4625    4633       +8   \n+ Misses       2079    2071       -8\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.22% <100%> (+0.14%) | :arrow_up: |\n| #macOS | 68.13% <100%> (-0.06%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageLoadersManager.m | 46.15% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.16% <0%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.39% <0%> (+3.07%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5fc84db...6d295c2. Read the comment docs.\n. # Codecov Report\nMerging #2374 into master will decrease coverage by 0.77%.\nThe diff coverage is 72.22%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2374      +/-\n==========================================\n- Coverage   75.44%   74.67%   -0.78%   \n==========================================\n  Files          36       36            \n  Lines        3837     3961     +124   \n==========================================\n+ Hits         2895     2958      +63   \n- Misses        942     1003      +61\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 64.39% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageImageIOCoder.m | 81.73% <100%> (+0.22%) | :arrow_up: |\n| SDWebImage/SDWebImageGIFCoder.m | 79.8% <100%> (+0.19%) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 84.46% <100%> (+0.13%) | :arrow_up: |\n| SDWebImage/UIImage+MultiFormat.m | 73.52% <100%> (+23.52%) | :arrow_up: |\n| SDWebImage/SDWebImageCodersManager.m | 71.08% <100%> (+0.71%) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.m | 63.33% <50%> (-0.96%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 48.14% <52.63%> (+1.37%) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 51.67% <62.22%> (-8.33%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.42% <88.88%> (+0.82%) | :arrow_up: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e98a941...bf9b15f. Read the comment docs.\n. # Codecov Report\nMerging #2376 into 5.x will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2376      +/-\n==========================================\n+ Coverage   69.07%   69.12%   +0.04%   \n==========================================\n  Files          48       48            \n  Lines        6704     6698       -6   \n==========================================\n- Hits         4631     4630       -1   \n+ Misses       2073     2068       -5\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.22% <100%> (+0.03%) | :arrow_up: |\n| #macOS | 68.29% <100%> (+0.16%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImagePrefetcher.m | 81.95% <100%> (+0.27%) | :arrow_up: |\n| SDWebImage/SDImageCoderHelper.m | 74.83% <0%> (-0.72%) | :arrow_down: |\n| SDWebImage/SDWebImageCompat.h | 100% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.29% <0%> (+0.12%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.39% <0%> (+0.68%) | :arrow_up: |\n| SDWebImage/SDImageIOCoder.m | 64.8% <0%> (+1.76%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 35e31c9...ab86065. Read the comment docs.\n. # Codecov Report\nMerging #2378 into master will decrease coverage by 0.01%.\nThe diff coverage is 63.63%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2378      +/-\n==========================================\n- Coverage   75.17%   75.15%   -0.02%   \n==========================================\n  Files          36       36            \n  Lines        3847     3856       +9   \n==========================================\n+ Hits         2892     2898       +6   \n- Misses        955      958       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 60.67% <63.63%> (+0.67%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f665fd...98c28a4. Read the comment docs.\n. # Codecov Report\nMerging #2379 into master will decrease coverage by 0.04%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2379      +/-\n=========================================\n- Coverage   75.44%   75.4%   -0.05%   \n=========================================\n  Files          36      36            \n  Lines        3837    3847      +10   \n=========================================\n+ Hits         2895    2901       +6   \n- Misses        942     946       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 63.44% <63.63%> (-0.16%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e98a941...bfa9403. Read the comment docs.\n. # Codecov Report\nMerging #2381 into 5.x will decrease coverage by 0.13%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2381      +/-\n==========================================\n- Coverage   69.14%   69.01%   -0.14%   \n==========================================\n  Files          48       48            \n  Lines        6696     6696            \n==========================================\n- Hits         4630     4621       -9   \n- Misses       2066     2075       +9\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.06% <\u00f8> (-0.15%) | :arrow_down: |\n| #macOS | 68.28% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 81.29% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.32% <0%> (-3.08%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8dc39b1...28eb1b4. Read the comment docs.\n. # Codecov Report\nMerging #2382 into master will increase coverage by 0.23%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2382      +/-\n==========================================\n+ Coverage   75.15%   75.38%   +0.23%   \n==========================================\n  Files          36       36            \n  Lines        3856     3856            \n==========================================\n+ Hits         2898     2907       +9   \n+ Misses        958      949       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 75.22% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.34% <0%> (+2.91%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 53ef5e5...d908a1c. Read the comment docs.\n. # Codecov Report\nMerging #2385 into 5.x will decrease coverage by 0.22%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2385      +/-\n==========================================\n- Coverage   68.98%   68.76%   -0.23%   \n==========================================\n  Files          48       47       -1   \n  Lines        6706     6607      -99   \n==========================================\n- Hits         4626     4543      -83   \n+ Misses       2080     2064      -16\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.82% <\u00f8> (-0.17%) | :arrow_down: |\n| #macOS | 68.12% <\u00f8> (-0.14%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 56.34% <0%> (-6.75%) | :arrow_down: |\n| SDWebImage/SDImageLoader.m | 87.77% <0%> (-2.23%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 80.82% <0%> (-0.35%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8fe886...c797279. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@98a2d9a). Click here to learn what that means.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2386   +/-\n=========================================\n  Coverage          ?   75.17%         \n=========================================\n  Files             ?       36         \n  Lines             ?     3895         \n  Branches          ?        0         \n=========================================\n  Hits              ?     2928         \n  Misses            ?      967         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 71.87% <60%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 98a2d9a...593feb6. Read the comment docs.\n. # Codecov Report\nMerging #2388 into 5.x will decrease coverage by 0.17%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2388      +/-\n==========================================\n- Coverage   68.88%   68.71%   -0.18%   \n==========================================\n  Files          47       47            \n  Lines        6634     6607      -27   \n==========================================\n- Hits         4570     4540      -30   \n- Misses       2064     2067       +3\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.72% <\u00f8> (-0.23%) | :arrow_down: |\n| #macOS | 68.11% <\u00f8> (-0.52%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 56.34% <0%> (-3.04%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.62% <0%> (-0.69%) | :arrow_down: |\n| SDWebImage/SDImageIOCoder.m | 64.8% <0%> (-0.59%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 68.75% <0%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDImageCoderHelper.m | 74.83% <0%> (-0.12%) | :arrow_down: |\n| SDWebImage/SDImageAPNGCoder.m | 42.73% <0%> (-0.06%) | :arrow_down: |\n| SDWebImage/UIImage+Metadata.m | 100% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/WebP/SDImageWebPCoder.m | 79.71% <0%> (+0.06%) | :arrow_up: |\n| SDWebImage/SDImageGIFCoder.m | 80.23% <0%> (+0.23%) | :arrow_up: |\n| SDWebImage/SDWebImageDefine.m | 32.87% <0%> (+0.44%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5b60c6...ffad516. Read the comment docs.\n. # Codecov Report\nMerging #2389 into 5.x will decrease coverage by 0.19%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x    #2389     +/-\n=========================================\n- Coverage   68.77%   68.58%   -0.2%   \n=========================================\n  Files          47       47           \n  Lines        6607     6608      +1   \n=========================================\n- Hits         4544     4532     -12   \n- Misses       2063     2076     +13\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.66% <0%> (-0.08%) | :arrow_down: |\n| #macOS | 68.08% <0%> (-0.05%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 57.89% <0%> (-1.57%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.22% <0%> (-3.1%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.3% <0%> (-0.82%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 80.82% <0%> (-0.35%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 957de6d...820f13e. Read the comment docs.\n. # Codecov Report\nMerging #2390 into master will increase coverage by 0.03%.\nThe diff coverage is 78.26%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2390      +/-\n==========================================\n+ Coverage   75.12%   75.16%   +0.03%   \n==========================================\n  Files          36       36            \n  Lines        3856     3901      +45   \n==========================================\n+ Hits         2897     2932      +35   \n- Misses        959      969      +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 84.46% <100%> (+0.13%) | :arrow_up: |\n| SDWebImage/SDWebImageCodersManager.m | 71.08% <100%> (+0.71%) | :arrow_up: |\n| SDWebImage/UIImage+MultiFormat.m | 73.52% <100%> (+23.52%) | :arrow_up: |\n| SDWebImage/SDWebImageImageIOCoder.m | 81.61% <100%> (+0.11%) | :arrow_up: |\n| SDWebImage/SDWebImageGIFCoder.m | 79.8% <100%> (+0.19%) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.m | 63.33% <50%> (-0.96%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 48.14% <52.63%> (+1.37%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 39a2879...bb41dbc. Read the comment docs.\n. # Codecov Report\nMerging #2391 into master will increase coverage by 0.23%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2391      +/-\n==========================================\n+ Coverage   75.12%   75.36%   +0.23%   \n==========================================\n  Files          36       36            \n  Lines        3856     3864       +8   \n==========================================\n+ Hits         2897     2912      +15   \n+ Misses        959      952       -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 63.84% <88.88%> (-0.03%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 78.87% <0%> (+0.43%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 75.22% <0%> (+1.35%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.37% <0%> (+1.94%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 39a2879...5e52585. Read the comment docs.\n. # Codecov Report\nMerging #2392 into 5.x will not change coverage.\nThe diff coverage is 85.71%.\n\n\n```diff\n@@           Coverage Diff           @@\n5.x    #2392   +/-\n=======================================\n  Coverage   68.76%   68.76%         \n=======================================\n  Files          47       47         \n  Lines        6608     6608         \n=======================================\n  Hits         4544     4544         \n  Misses       2064     2064\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.76% <85%> (+0.01%) | :arrow_up: |\n| #macOS | 68.09% <85.71%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageGIFCoder.m | 80.23% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCoderHelper.m | 74.83% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageIOCoder.m | 64.8% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageAPNGCoder.m | 42.73% <70%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 56a8684...b291351. Read the comment docs.\n. # Codecov Report\nMerging #2393 into master will decrease coverage by 0.04%.\nThe diff coverage is 76.19%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2393      +/-\n==========================================\n- Coverage   75.21%   75.16%   -0.05%   \n==========================================\n  Files          36       36            \n  Lines        3909     3894      -15   \n==========================================\n- Hits         2940     2927      -13   \n+ Misses        969      967       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 61.37% <100%> (-3.02%) | :arrow_down: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 54.44% <73.68%> (-6.23%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.87% <0%> (-1.36%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.25% <0%> (+0.41%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.34% <0%> (+2.91%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0f4b7d...3863052. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@98a2d9a). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2394   +/-\n=========================================\n  Coverage          ?   75.16%         \n=========================================\n  Files             ?       36         \n  Lines             ?     3894         \n  Branches          ?        0         \n=========================================\n  Hits              ?     2927         \n  Misses            ?      967         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCoderHelper.m | 61.59% <\u00f8> (\u00f8) | |\n| SDWebImage/SDWebImageGIFCoder.m | 79.8% <100%> (\u00f8) | |\n| SDWebImage/SDWebImageImageIOCoder.m | 81.61% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 98a2d9a...61800a8. Read the comment docs.\n. # Codecov Report\nMerging #2395 into 5.x will increase coverage by 0.03%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2395      +/-\n==========================================\n+ Coverage   68.88%   68.91%   +0.03%   \n==========================================\n  Files          47       47            \n  Lines        6634     6634            \n==========================================\n+ Hits         4570     4572       +2   \n+ Misses       2064     2062       -2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70% <71.42%> (+0.04%) | :arrow_up: |\n| #macOS | 68.55% <75%> (-0.07%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCoderHelper.m | 74.94% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageGIFCoder.m | 80% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/NSData+ImageContentType.m | 56.79% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageIOCoder.m | 65.38% <50%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageAPNGCoder.m | 42.79% <50%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 82.11% <0%> (+0.81%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5b60c6...6398eed. Read the comment docs.\n. # Codecov Report\nMerging #2397 into master will decrease coverage by 0.28%.\nThe diff coverage is 95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2397      +/-\n==========================================\n- Coverage   75.25%   74.96%   -0.29%   \n==========================================\n  Files          36       36            \n  Lines        3895     3894       -1   \n==========================================\n- Hits         2931     2919      -12   \n- Misses        964      975      +11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 61.49% <100%> (+0.12%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 78.54% <94.44%> (+0.09%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-2.92%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.87% <0%> (-1.36%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0ab6bc7...16a1960. Read the comment docs.\n. # Codecov Report\nMerging #2399 into 5.x will increase coverage by 0.86%.\nThe diff coverage is 77.31%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2399      +/-\n==========================================\n+ Coverage   67.59%   68.45%   +0.86%   \n==========================================\n  Files          47       47            \n  Lines        6714     6781      +67   \n==========================================\n+ Hits         4538     4642     +104   \n+ Misses       2176     2139      -37\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.28% <77.31%> (+0.68%) | :arrow_up: |\n| #macOS | 68.29% <77.08%> (+0.95%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 59.11% <100%> (+0.15%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.04% <100%> (-0.38%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 69.91% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageAPNGCoder.m | 42.51% <44.44%> (+0.53%) | :arrow_up: |\n| SDWebImage/SDImageCacheDefine.m | 66.66% <50%> (+4.5%) | :arrow_up: |\n| SDWebImage/SDImageGIFCoder.m | 79.92% <77.77%> (+1.49%) | :arrow_up: |\n| SDWebImage/SDImageIOCoder.m | 56.22% <80%> (+27.64%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 81.3% <90%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageLoader.m | 85.71% <91.66%> (+4.71%) | :arrow_up: |\n| SDWebImage/WebP/SDImageWebPCoder.m | 79.78% <93.33%> (+0.14%) | :arrow_up: |\n| ... and 11 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83b5d22...30d077b. Read the comment docs.\n. # Codecov Report\nMerging #2400 into 5.x will increase coverage by 0.16%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2400      +/-\n==========================================\n+ Coverage   68.72%   68.88%   +0.16%   \n==========================================\n  Files          47       47            \n  Lines        6634     6634            \n==========================================\n+ Hits         4559     4570      +11   \n+ Misses       2075     2064      -11\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70% <\u00f8> (+0.18%) | :arrow_up: |\n| #macOS | 68.62% <\u00f8> (+0.06%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.31% <0%> (+3.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fe2fede...4dba37d. Read the comment docs.\n. # Codecov Report\nMerging #2404 into master will decrease coverage by 0.44%.\nThe diff coverage is 67%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2404      +/-\n==========================================\n- Coverage   74.43%   73.99%   -0.45%   \n==========================================\n  Files          36       36            \n  Lines        3947     4014      +67   \n==========================================\n+ Hits         2938     2970      +32   \n- Misses       1009     1044      +35\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 52.08% <59.21%> (-1.77%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 65.17% <91.66%> (+3.67%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-2.92%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.87% <0%> (-1.36%) | :arrow_down: |\n| Tests/Tests/SDTestCase.m | 100% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 64.25% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 205e376...ec60e26. Read the comment docs.\n. # Codecov Report\nMerging #2405 into 5.x will increase coverage by 0.1%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x    #2405     +/-\n=========================================\n+ Coverage   68.72%   68.82%   +0.1%   \n=========================================\n  Files          47       47           \n  Lines        6634     6649     +15   \n=========================================\n+ Hits         4559     4576     +17   \n+ Misses       2075     2073      -2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.94% <66.66%> (+0.1%) | :arrow_up: |\n| #macOS | 68.67% <66.66%> (+0.06%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheDefine.m | 62.16% <50%> (-3.47%) | :arrow_down: |\n| SDWebImage/SDImageLoader.m | 86% <75%> (-1.78%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 80.82% <0%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.62% <0%> (+3.09%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 919751f...ef31239. Read the comment docs.\n. # Codecov Report\nMerging #2406 into master will increase coverage by <.01%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2406      +/-\n==========================================\n+ Coverage   74.96%   74.96%   +<.01%   \n==========================================\n  Files          36       36            \n  Lines        3894     3895       +1   \n==========================================\n+ Hits         2919     2920       +1   \n  Misses        975      975\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 53.84% <25%> (-0.6%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 63.84% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 75.22% <0%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9d1d38b...31896ff. Read the comment docs.\n. # Codecov Report\nMerging #2407 into 5.x will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2407      +/-\n==========================================\n+ Coverage   68.83%   68.86%   +0.03%   \n==========================================\n  Files          47       47            \n  Lines        6649     6649            \n==========================================\n+ Hits         4577     4579       +2   \n+ Misses       2072     2070       -2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.97% <\u00f8> (+0.06%) | :arrow_up: |\n| #macOS | 68.53% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 81.3% <0%> (-0.82%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 70.66% <0%> (+0.92%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aff324b...45324ef. Read the comment docs.\n. # Codecov Report\nMerging #2409 into master will decrease coverage by 0.08%.\nThe diff coverage is 78.57%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2409      +/-\n=========================================\n- Coverage   75.09%     75%   -0.09%   \n=========================================\n  Files          36      36            \n  Lines        3895    3905      +10   \n=========================================\n+ Hits         2925    2929       +4   \n- Misses        970     976       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 78.09% <78.57%> (-0.45%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-1.95%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 63.84% <0%> (-0.42%) | :arrow_down: |\n| Tests/Tests/SDWebImageDownloaderTests.m | 83.75% <0%> (+0.9%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 75.22% <0%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f18747...36cd96a. Read the comment docs.\n. # Codecov Report\nMerging #2412 into 5.x will increase coverage by 0.09%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2412      +/-\n==========================================\n+ Coverage   68.83%   68.93%   +0.09%   \n==========================================\n  Files          47       47            \n  Lines        6649     6669      +20   \n==========================================\n+ Hits         4577     4597      +20   \n  Misses       2072     2072\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.02% <81.81%> (+0.06%) | :arrow_up: |\n| #macOS | 68.61% <81.81%> (+0.07%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 69.84% <100%> (+0.75%) | :arrow_up: |\n| SDWebImage/SDImageCacheDefine.m | 62.16% <50%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageLoader.m | 86% <75%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDDiskCache.m | 54.32% <77.77%> (+1.37%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 82.11% <0%> (+0.81%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 217510e...1cbab33. Read the comment docs.\n. # Codecov Report\nMerging #2413 into 5.x will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2413      +/-\n==========================================\n- Coverage   68.86%   68.83%   -0.04%   \n==========================================\n  Files          47       47            \n  Lines        6649     6649            \n==========================================\n- Hits         4579     4577       -2   \n- Misses       2070     2072       +2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.89% <\u00f8> (-0.02%) | :arrow_down: |\n| #macOS | 68.74% <\u00f8> (+0.13%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.62% <0%> (-0.69%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 03434c5...cb8879f. Read the comment docs.\n. # Codecov Report\nMerging #2414 into 5.x will increase coverage by 0.05%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2414      +/-\n=========================================\n+ Coverage   68.74%   68.8%   +0.05%   \n=========================================\n  Files          47      47            \n  Lines        6649    6652       +3   \n=========================================\n+ Hits         4571    4577       +6   \n+ Misses       2078    2075       -3\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.92% <66.66%> (+0.09%) | :arrow_up: |\n| #macOS | 68.53% <66.66%> (-0.06%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 81.01% <100%> (-0.15%) | :arrow_down: |\n| SDWebImage/SDImageCacheDefine.m | 62.16% <40%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageLoader.m | 86% <70%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 69.74% <0%> (-1.16%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.3% <0%> (-0.82%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.31% <0%> (+3.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c89282...892267a. Read the comment docs.\n. # Codecov Report\nMerging #2415 into 5.x will decrease coverage by 1.36%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2415      +/-\n==========================================\n- Coverage   68.74%   67.38%   -1.37%   \n==========================================\n  Files          47       47            \n  Lines        6649     6669      +20   \n==========================================\n- Hits         4571     4494      -77   \n- Misses       2078     2175      +97\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 68.38% <83.33%> (-1.44%) | :arrow_down: |\n| #macOS | 67.23% <83.33%> (-1.36%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 83.93% <80%> (-0.61%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.48% <88.88%> (+0.31%) | :arrow_up: |\n| SDWebImage/SDImageIOCoder.m | 28.57% <0%> (-36.82%) | :arrow_down: |\n| SDWebImage/SDImageLoader.m | 81% <0%> (-5%) | :arrow_down: |\n| SDWebImage/SDImageGIFCoder.m | 78.43% <0%> (-1.57%) | :arrow_down: |\n| SDWebImage/SDImageCoderHelper.m | 73.39% <0%> (-1.56%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 69.74% <0%> (-1.16%) | :arrow_down: |\n| SDWebImage/SDImageAPNGCoder.m | 41.97% <0%> (-0.83%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.3% <0%> (-0.82%) | :arrow_down: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c89282...6a3aa48. Read the comment docs.\n. # Codecov Report\nMerging #2416 into 5.x will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2416      +/-\n==========================================\n+ Coverage   68.74%   68.76%   +0.01%   \n==========================================\n  Files          47       47            \n  Lines        6652     6652            \n==========================================\n+ Hits         4573     4574       +1   \n+ Misses       2079     2078       -1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.84% <\u00f8> (+0.01%) | :arrow_up: |\n| #macOS | 68.53% <\u00f8> (-0.02%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 81.01% <0%> (-0.34%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.22% <0%> (+0.68%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d1d43aa...475e9a5. Read the comment docs.\n. # Codecov Report\nMerging #2417 into 5.x will decrease coverage by 0.01%.\nThe diff coverage is 85%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2417      +/-\n==========================================\n- Coverage   68.78%   68.77%   -0.02%   \n==========================================\n  Files          47       47            \n  Lines        6648     6686      +38   \n==========================================\n+ Hits         4573     4598      +25   \n- Misses       2075     2088      +13\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.81% <85%> (-0.06%) | :arrow_down: |\n| #macOS | 68.68% <85%> (+0.17%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 69.91% <100%> (+0.82%) | :arrow_up: |\n| SDWebImage/SDDiskCache.m | 56.42% <76.92%> (+3.48%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 84.53% <0%> (-3.1%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.3% <0%> (-0.82%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 70.66% <0%> (+0.92%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e400d22...3863264. Read the comment docs.\n. # Codecov Report\nMerging #2421 into 5.x will increase coverage by 0.06%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2421      +/-\n==========================================\n+ Coverage   67.41%   67.48%   +0.06%   \n==========================================\n  Files          47       47            \n  Lines        6668     6676       +8   \n==========================================\n+ Hits         4495     4505      +10   \n+ Misses       2173     2171       -2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 68.44% <50%> (+0.07%) | :arrow_up: |\n| #macOS | 67.21% <\u00f8> (-0.02%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDMemoryCache.m | 71.42% <50%> (-2.07%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.3% <0%> (-0.82%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.08% <0%> (-0.34%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.88% <0%> (+2.95%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1d4823e...42caecf. Read the comment docs.\n. # Codecov Report\nMerging #2423 into master will decrease coverage by 0.77%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2423      +/-\n==========================================\n- Coverage   74.97%   74.19%   -0.78%   \n==========================================\n  Files          36       36            \n  Lines        3892     3934      +42   \n==========================================\n+ Hits         2918     2919       +1   \n- Misses        974     1015      +41\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 73.8% <0%> (-7.82%) | :arrow_down: |\n| SDWebImage/NSData+ImageContentType.m | 43.82% <0%> (-4.33%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 63.84% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 75.22% <0%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 676a4b5...7ddb757. Read the comment docs.\n. # Codecov Report\nMerging #2424 into master will decrease coverage by 0.2%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2424      +/-\n==========================================\n- Coverage    74.4%   74.19%   -0.21%   \n==========================================\n  Files          36       36            \n  Lines        3934     3934            \n==========================================\n- Hits         2927     2919       -8   \n- Misses       1007     1015       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-2.92%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 63.84% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 75.22% <0%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3378cc3...1c0ae2c. Read the comment docs.\n. # Codecov Report\nMerging #2425 into master will increase coverage by 0.13%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2425      +/-\n==========================================\n+ Coverage    74.4%   74.54%   +0.13%   \n==========================================\n  Files          36       36            \n  Lines        3934     3916      -18   \n==========================================\n- Hits         2927     2919       -8   \n+ Misses       1007      997      -10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 77.74% <0%> (+3.94%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-2.92%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 63.84% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 75.22% <0%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3378cc3...4e913e8. Read the comment docs.\n. # Codecov Report\nMerging #2426 into 5.x will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2426      +/-\n==========================================\n+ Coverage   67.52%   67.61%   +0.09%   \n==========================================\n  Files          47       47            \n  Lines        6676     6714      +38   \n==========================================\n+ Hits         4508     4540      +32   \n- Misses       2168     2174       +6\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 68.54% <100%> (+0.01%) | :arrow_up: |\n| #macOS | 67.33% <100%> (+0.11%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 58.97% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.41% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.88% <0%> (-0.66%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 82.11% <0%> (+0.81%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 69.91% <0%> (+0.82%) | :arrow_up: |\n| SDWebImage/SDDiskCache.m | 56.42% <0%> (+3.48%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3b1219c...9a63520. Read the comment docs.\n. # Codecov Report\nMerging #2432 into 5.x will increase coverage by 1.61%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2432      +/-\n==========================================\n+ Coverage   67.37%   68.98%   +1.61%   \n==========================================\n  Files          47       47            \n  Lines        6773     6717      -56   \n==========================================\n+ Hits         4563     4634      +71   \n+ Misses       2210     2083     -127\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 70.03% <100%> (+1.95%) | :arrow_up: |\n| #macOS | 68.67% <100%> (+1.65%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.66% <100%> (+0.12%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 81.08% <0%> (-0.27%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 82.11% <0%> (+0.81%) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 70.66% <0%> (+0.92%) | :arrow_up: |\n| SDWebImage/SDDiskCache.m | 56.42% <0%> (+1.47%) | :arrow_up: |\n| SDWebImage/SDImageCoderHelper.m | 74.94% <0%> (+1.55%) | :arrow_up: |\n| SDWebImage/NSData+ImageContentType.m | 56.79% <0%> (+5.67%) | :arrow_up: |\n| SDWebImage/SDImageIOCoder.m | 65.38% <0%> (+41.08%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bbee297...647dfc6. Read the comment docs.\n. # Codecov Report\nMerging #2433 into 5.x will increase coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2433      +/-\n=========================================\n+ Coverage   67.69%   67.7%   +0.01%   \n=========================================\n  Files          47      47            \n  Lines        6714    6717       +3   \n=========================================\n+ Hits         4545    4548       +3   \n  Misses       2169    2169\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 68.68% <0%> (+0.22%) | :arrow_up: |\n| #macOS | 67.27% <0%> (-0.35%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDDiskCache.m | 54.94% <0%> (-1.48%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 69.74% <0%> (-0.93%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 81.08% <0%> (-0.34%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.88% <0%> (+2.95%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 802e19b...3a22bcf. Read the comment docs.\n. # Codecov Report\nMerging #2434 into 5.x will increase coverage by 5.79%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2434      +/-\n==========================================\n+ Coverage   67.37%   73.16%   +5.79%   \n==========================================\n  Files          47       47            \n  Lines        6773     6659     -114   \n==========================================\n+ Hits         4563     4872     +309   \n+ Misses       2210     1787     -423\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 74.6% <\u00f8> (+6.52%) | :arrow_up: |\n| #macOS | 72.74% <\u00f8> (+5.73%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageTransformer.m | 53.78% <0%> (-0.69%) | :arrow_down: |\n| SDWebImage/SDMemoryCache.m | 70.78% <0%> (-0.65%) | :arrow_down: |\n| SDWebImage/SDWebImageDefine.m | 32.35% <0%> (-0.08%) | :arrow_down: |\n| SDWebImage/SDWebImageIndicator.m | 0% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageTransition.m | 0% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 59.53% <0%> (+0.14%) | :arrow_up: |\n| SDWebImage/SDDiskCache.m | 55.49% <0%> (+0.54%) | :arrow_up: |\n| SDWebImage/WebP/SDImageWebPCoder.m | 80.25% <0%> (+0.6%) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 70.61% <0%> (+0.87%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 82.5% <0%> (+1.15%) | :arrow_up: |\n| ... and 15 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bbee297...8b26091. Read the comment docs.\n. # Codecov Report\nMerging #2435 into 5.x will decrease coverage by 0.18%.\nThe diff coverage is 27.77%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2435      +/-\n=========================================\n- Coverage   67.69%   67.5%   -0.19%   \n=========================================\n  Files          47      47            \n  Lines        6714    6721       +7   \n=========================================\n- Hits         4545    4537       -8   \n- Misses       2169    2184      +15\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 68.44% <27.77%> (-0.02%) | :arrow_down: |\n| #macOS | 67.2% <27.77%> (-0.41%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDAnimatedImageView.m | 67.95% <27.77%> (-2.72%) | :arrow_down: |\n| SDWebImage/SDImageLoader.m | 81% <0%> (-5%) | :arrow_down: |\n| SDWebImage/SDImageGIFCoder.m | 78.43% <0%> (-1.57%) | :arrow_down: |\n| SDWebImage/SDImageAPNGCoder.m | 41.97% <0%> (-0.83%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 58.95% <0%> (-0.44%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.54% <0%> (+3.6%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 802e19b...6e79ef5. Read the comment docs.\n. # Codecov Report\nMerging #2437 into 5.x will decrease coverage by 0.31%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2437      +/-\n==========================================\n- Coverage   67.37%   67.06%   -0.32%   \n==========================================\n  Files          47       47            \n  Lines        6773     6773            \n==========================================\n- Hits         4563     4542      -21   \n- Misses       2210     2231      +21\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 67.93% <100%> (-0.15%) | :arrow_down: |\n| #macOS | 66.81% <66.66%> (-0.21%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageIndicator.m | 0% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 58.95% <100%> (-0.44%) | :arrow_down: |\n| SDWebImage/SDImageLoader.m | 81% <0%> (-5%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 84.59% <0%> (-2.96%) | :arrow_down: |\n| SDWebImage/SDImageGIFCoder.m | 78.43% <0%> (-1.57%) | :arrow_down: |\n| SDWebImage/SDImageAPNGCoder.m | 41.97% <0%> (-0.83%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bbee297...41b0a04. Read the comment docs.\n. # Codecov Report\nMerging #2438 into 5.x will increase coverage by 4.23%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2438      +/-\n==========================================\n+ Coverage   68.33%   72.57%   +4.23%   \n==========================================\n  Files          47       47            \n  Lines        6781     6781            \n==========================================\n+ Hits         4634     4921     +287   \n+ Misses       2147     1860     -287\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 71.92% <\u00f8> (+2.64%) | :arrow_up: |\n| #macOS | 71.79% <\u00f8> (+3.8%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.45% <0%> (+0.66%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 83.33% <0%> (+1.21%) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 69.77% <0%> (+1.81%) | :arrow_up: |\n| SDWebImage/UIImageView+WebCache.m | 23.61% <0%> (+2.77%) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 87.55% <0%> (+28.44%) | :arrow_up: |\n| SDWebImage/NSButton+WebCache.m | 56.57% <0%> (+56.57%) | :arrow_up: |\n| SDWebImage/SDWebImageTransition.m | 63.15% <0%> (+63.15%) | :arrow_up: |\n| SDWebImage/SDWebImageIndicator.m | 86.06% <0%> (+86.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ea8074...0ff95e2. Read the comment docs.\n. # Codecov Report\nMerging #2439 into 5.x will decrease coverage by 3.6%.\nThe diff coverage is 76.92%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2439      +/-\n==========================================\n- Coverage   72.54%   68.94%   -3.61%   \n==========================================\n  Files          47       47            \n  Lines        6781     6803      +22   \n==========================================\n- Hits         4919     4690     -229   \n- Misses       1862     2113     +251\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.96% <76.92%> (-2.1%) | :arrow_down: |\n| #macOS | 68% <\u00f8> (-3.66%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImageView+WebCache.m | 76.59% <76.92%> (+52.98%) | :arrow_up: |\n| SDWebImage/SDWebImageIndicator.m | 0% <0%> (-86.07%) | :arrow_down: |\n| SDWebImage/SDWebImageTransition.m | 0% <0%> (-63.16%) | :arrow_down: |\n| SDWebImage/NSButton+WebCache.m | 0% <0%> (-56.58%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 59.11% <0%> (-28.45%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 83.82% <0%> (-3.64%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 81.3% <0%> (-1.22%) | :arrow_down: |\n| SDWebImage/SDWebImageDefine.m | 35.13% <0%> (+2.7%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3966200...a5a52cf. Read the comment docs.\n. # Codecov Report\nMerging #2441 into master will decrease coverage by 0.09%.\nThe diff coverage is 84.78%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2441     +/-\n=========================================\n- Coverage   74.43%   74.33%   -0.1%   \n=========================================\n  Files          36       36           \n  Lines        3947     3975     +28   \n=========================================\n+ Hits         2938     2955     +17   \n- Misses       1009     1020     +11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 64% <100%> (+2.5%) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 58.49% <78.12%> (+4.64%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-2.92%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 07d3d1e...14391eb. Read the comment docs.\n. # Codecov Report\nMerging #2443 into master will decrease coverage by 0.31%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2443      +/-\n==========================================\n- Coverage   74.43%   74.12%   -0.32%   \n==========================================\n  Files          36       36            \n  Lines        3947     3957      +10   \n==========================================\n- Hits         2938     2933       -5   \n- Misses       1009     1024      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 63.36% <\u00f8> (-0.49%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-2.92%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 205e376...afd4cdd. Read the comment docs.\n. # Codecov Report\nMerging #2444 into master will decrease coverage by 0.11%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2444      +/-\n==========================================\n- Coverage   74.43%   74.32%   -0.12%   \n==========================================\n  Files          36       36            \n  Lines        3947     3957      +10   \n==========================================\n+ Hits         2938     2941       +3   \n- Misses       1009     1016       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 63.76% <\u00f8> (-0.08%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.87% <0%> (-1.36%) | :arrow_down: |\n| Tests/Tests/SDTestCase.m | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 205e376...7c408ce. Read the comment docs.\n. # Codecov Report\nMerging #2449 into 5.x will decrease coverage by 0.02%.\nThe diff coverage is 64.28%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x   #2449      +/-\n=========================================\n- Coverage   68.33%   68.3%   -0.03%   \n=========================================\n  Files          47      47            \n  Lines        6781    6781            \n=========================================\n- Hits         4634    4632       -2   \n- Misses       2147    2149       +2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 69.12% <81.81%> (-0.17%) | :arrow_down: |\n| #macOS | 68.12% <66.66%> (+0.13%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/NSButton+WebCache.m | 0% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIButton+WebCache.m | 60% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIImageView+HighlightedWebCache.m | 70.96% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/MapKit/MKAnnotationView+WebCache.m | 65.51% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 59.11% <55.55%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 83.82% <0%> (-2.98%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloader.m | 80.71% <0%> (-0.33%) | :arrow_down: |\n| SDWebImage/SDAnimatedImageView.m | 69.77% <0%> (+1.81%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ea8074...04becbb. Read the comment docs.\n. # Codecov Report\nMerging #2450 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #2450   +/-\n=======================================\n  Coverage   74.43%   74.43%         \n=======================================\n  Files          36       36         \n  Lines        3947     3947         \n=======================================\n  Hits         2938     2938         \n  Misses       1009     1009\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDTestCase.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Tests/Tests/SDCategoriesTests.m | 98.31% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 205e376...50b6a09. Read the comment docs.\n. # Codecov Report\nMerging #2451 into 5.x will increase coverage by 0.37%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2451      +/-\n==========================================\n+ Coverage   76.97%   77.35%   +0.37%   \n==========================================\n  Files          47       47            \n  Lines        6659     6659            \n==========================================\n+ Hits         5126     5151      +25   \n+ Misses       1533     1508      -25\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.22% <100%> (+0.41%) | :arrow_up: |\n| #macOS | 76.63% <100%> (+0.58%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 86.99% <100%> (+2.43%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.46% <0%> (-2.98%) | :arrow_down: |\n| SDWebImage/SDImageGIFCoder.m | 87.79% <0%> (+0.39%) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 80.08% <0%> (+0.41%) | :arrow_up: |\n| SDWebImage/SDImageLoader.m | 91.83% <0%> (+4.08%) | :arrow_up: |\n| SDWebImage/SDWebImageCacheKeyFilter.m | 91.66% <0%> (+91.66%) | :arrow_up: |\n| SDWebImage/SDWebImageCacheSerializer.m | 91.66% <0%> (+91.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 39893fb...0fb7268. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@5a2b9b2). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2452   +/-\n======================================\n  Coverage       ?   77.27%         \n======================================\n  Files          ?       47         \n  Lines          ?     6659         \n  Branches       ?        0         \n======================================\n  Hits           ?     5146         \n  Misses         ?     1513         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.13% <100%> (?) | |\n| #macOS | 76.56% <100%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDDiskCache.m | 55.49% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5a2b9b2...8c5db94. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@8b21041). Click here to learn what that means.\nThe diff coverage is 82.6%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2453   +/-\n======================================\n  Coverage       ?   77.48%         \n======================================\n  Files          ?       47         \n  Lines          ?     6661         \n  Branches       ?        0         \n======================================\n  Hits           ?     5161         \n  Misses         ?     1500         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.41% <82.6%> (?) | |\n| #macOS | 76.64% <82.6%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 86.88% <\u00f8> (\u00f8) | |\n| SDWebImage/SDAnimatedImage.m | 80.4% <100%> (\u00f8) | |\n| SDWebImage/SDImageLoader.m | 91.83% <100%> (\u00f8) | |\n| SDWebImage/SDImageCacheDefine.m | 66.66% <33.33%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8b21041...7c5c114. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@6246c0e). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2459   +/-\n======================================\n  Coverage       ?   78.01%         \n======================================\n  Files          ?       47         \n  Lines          ?     6614         \n  Branches       ?        0         \n======================================\n  Hits           ?     5160         \n  Misses         ?     1454         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.95% <\u00f8> (?) | |\n| #macOS | 76.55% <\u00f8> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIImageView+WebCache.m | 62.96% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6246c0e...349bec4. Read the comment docs.\n. # Codecov Report\nMerging #2461 into 5.x will increase coverage by 0.13%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2461      +/-\n==========================================\n+ Coverage   77.24%   77.38%   +0.13%   \n==========================================\n  Files          47       47            \n  Lines        6659     6659            \n==========================================\n+ Hits         5144     5153       +9   \n+ Misses       1515     1506       -9\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.13% <0%> (\u00f8) | :arrow_up: |\n| #macOS | 76.7% <0%> (+0.15%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDDiskCache.m | 55.49% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.43% <0%> (+2.97%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6246c0e...9afbc8b. Read the comment docs.\n. # Codecov Report\nMerging #2462 into 5.x will increase coverage by 0.07%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2462      +/-\n==========================================\n+ Coverage   77.24%   77.32%   +0.07%   \n==========================================\n  Files          47       47            \n  Lines        6659     6659            \n==========================================\n+ Hits         5144     5149       +5   \n+ Misses       1515     1510       -5\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.23% <0%> (+0.09%) | :arrow_up: |\n| #macOS | 76.55% <0%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDDiskCache.m | 55.49% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageGIFCoder.m | 87.79% <0%> (+0.39%) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 80.08% <0%> (+0.41%) | :arrow_up: |\n| SDWebImage/SDImageLoader.m | 91.83% <0%> (+3.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6246c0e...1f3d837. Read the comment docs.\n. # Codecov Report\nMerging #2463 into master will decrease coverage by 0.25%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2463      +/-\n==========================================\n- Coverage   74.43%   74.18%   -0.26%   \n==========================================\n  Files          36       36            \n  Lines        3947     3947            \n==========================================\n- Hits         2938     2928      -10   \n- Misses       1009     1019      +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 64.25% <0%> (+0.41%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.43% <0%> (-2.92%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.87% <0%> (-1.36%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 07d3d1e...ce27aac. Read the comment docs.\n. # Codecov Report\nMerging #2466 into 5.x will decrease coverage by 0.21%.\nThe diff coverage is 33.33%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2466      +/-\n==========================================\n- Coverage   78.05%   77.83%   -0.22%   \n==========================================\n  Files          47       47            \n  Lines        6616     6619       +3   \n==========================================\n- Hits         5164     5152      -12   \n- Misses       1452     1467      +15\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.78% <33.33%> (-0.21%) | :arrow_down: |\n| #macOS | 76.62% <33.33%> (-0.04%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDAnimatedImageView.m | 70.35% <33.33%> (-0.27%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.46% <0%> (-2.98%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 86.88% <0%> (-0.82%) | :arrow_down: |\n| SDWebImage/SDAnimatedImage.m | 80% <0%> (-0.41%) | :arrow_down: |\n| SDWebImage/SDImageGIFCoder.m | 87.4% <0%> (-0.4%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1ed0b8c...c76b9e3. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@9de56b0). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2467   +/-\n=========================================\n  Coverage          ?   74.33%         \n=========================================\n  Files             ?       36         \n  Lines             ?     3947         \n  Branches          ?        0         \n=========================================\n  Hits              ?     2934         \n  Misses            ?     1013         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9de56b0...76454fd. Read the comment docs.\n. # Codecov Report\nMerging #2468 into 5.x will decrease coverage by 0.09%.\nThe diff coverage is 71.42%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x   #2468     +/-\n======================================\n- Coverage    78%   77.9%   -0.1%   \n======================================\n  Files        47      47           \n  Lines      6619    6621      +2   \n======================================\n- Hits       5163    5158      -5   \n- Misses     1456    1463      +7\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.82% <71.42%> (-0.11%) | :arrow_down: |\n| #macOS | 76.63% <71.42%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDAnimatedImageView.m | 70.49% <71.42%> (+0.13%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.46% <0%> (-2.98%) | :arrow_down: |\n| SDWebImage/SDImageGIFCoder.m | 87.79% <0%> (+0.39%) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 80.4% <0%> (+0.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d989549...3dc5b0a. Read the comment docs.\n. # Codecov Report\nMerging #2472 into 5.x will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2472      +/-\n==========================================\n+ Coverage   77.87%   77.89%   +0.02%   \n==========================================\n  Files          47       47            \n  Lines        6621     6619       -2   \n==========================================\n  Hits         5156     5156            \n+ Misses       1465     1463       -2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.83% <100%> (+0.04%) | :arrow_up: |\n| #macOS | 76.65% <100%> (+0.02%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageAPNGCoder.m | 86.72% <100%> (-0.06%) | :arrow_down: |\n| SDWebImage/SDImageGIFCoder.m | 87.74% <100%> (+0.34%) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 80.4% <0%> (+0.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0f14258...b1b48cc. Read the comment docs.\n. # Codecov Report\nMerging #2473 into 5.x will increase coverage by 0.14%.\nThe diff coverage is 55%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2473      +/-\n==========================================\n+ Coverage   77.87%   78.01%   +0.14%   \n==========================================\n  Files          47       47            \n  Lines        6621     6610      -11   \n==========================================\n+ Hits         5156     5157       +1   \n+ Misses       1465     1453      -12\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.8% <55%> (\u00f8) | :arrow_up: |\n| #macOS | 76.62% <55%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDAnimatedImageView.m | 70.19% <55%> (-0.3%) | :arrow_down: |\n| SDWebImage/SDImageGIFCoder.m | 87.79% <0%> (+0.39%) | :arrow_up: |\n| SDWebImage/SDAnimatedImage.m | 80.4% <0%> (+0.4%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.1% <0%> (+2.64%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0f14258...aeca363. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@f22a698). Click here to learn what that means.\nThe diff coverage is 93.33%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2474   +/-\n======================================\n  Coverage       ?   78.01%         \n======================================\n  Files          ?       47         \n  Lines          ?     6623         \n  Branches       ?        0         \n======================================\n  Hits           ?     5167         \n  Misses         ?     1456         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.95% <93.33%> (?) | |\n| #macOS | 76.81% <93.33%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.5% <92.3%> (\u00f8) | |\n| SDWebImage/SDWebImageManager.m | 87.8% <94.11%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f22a698...703631d. Read the comment docs.\n. # Codecov Report\nMerging #2481 into 5.x will increase coverage by 1.56%.\nThe diff coverage is 97.95%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2481      +/-\n==========================================\n+ Coverage   75.53%   77.09%   +1.56%   \n==========================================\n  Files          43       45       +2   \n  Lines        5240     6095     +855   \n==========================================\n+ Hits         3958     4699     +741   \n- Misses       1282     1396     +114\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #iOS | 77.57% <97.95%> (?) | |\n| #macOS | 75.51% <97.95%> (-0.03%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 82.35% <100%> (+0.01%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderConfig.m | 100% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.09% <97.67%> (-0.21%) | :arrow_down: |\n| SDWebImage/SDWebImageDefine.m | 32.35% <0%> (-4.49%) | :arrow_down: |\n| SDWebImage/SDWebImageIndicator.m | 87.5% <0%> (-2.98%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 72.94% <0%> (-2.41%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 87.9% <0%> (-1.63%) | :arrow_down: |\n| SDWebImage/SDImageTransformer.m | 53.78% <0%> (-0.55%) | :arrow_down: |\n| ... and 16 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb7adac...c2a28d4. Read the comment docs.\n. # Codecov Report\nMerging #2486 into master will decrease coverage by 0.19%.\nThe diff coverage is 52.17%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #2486     +/-\n========================================\n- Coverage   74.89%   74.7%   -0.2%   \n========================================\n  Files          36      37      +1   \n  Lines        3999    4016     +17   \n========================================\n+ Hits         2995    3000      +5   \n- Misses       1004    1016     +12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 63.36% <18.18%> (-1.06%) | :arrow_down: |\n| SDWebImage/UIImage+CacheMemoryCost.m | 83.33% <83.33%> (\u00f8) | |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2cebcb7...c586429. Read the comment docs.\n. # Codecov Report\nMerging #2497 into master will decrease coverage by 0.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2497      +/-\n==========================================\n- Coverage   74.41%   74.15%   -0.26%   \n==========================================\n  Files          36       36            \n  Lines        3951     3951            \n==========================================\n- Hits         2940     2930      -10   \n- Misses       1011     1021      +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.53% <0%> (-2.9%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.25% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 88d3e28...85f27cc. Read the comment docs.\n. # Codecov Report\nMerging #2510 into master will increase coverage by 0.05%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2510      +/-\n==========================================\n+ Coverage   74.33%   74.38%   +0.05%   \n==========================================\n  Files          36       36            \n  Lines        3951     3951            \n==========================================\n+ Hits         2937     2939       +2   \n+ Misses       1014     1012       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 53.84% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 64.25% <66.66%> (+0.41%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.42% <0%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f9d05d9...8d3becf. Read the comment docs.\n. # Codecov Report\nMerging #2511 into master will decrease coverage by 0.22%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2511      +/-\n==========================================\n- Coverage   74.38%   74.15%   -0.23%   \n==========================================\n  Files          36       36            \n  Lines        3951     3951            \n==========================================\n- Hits         2939     2930       -9   \n- Misses       1012     1021       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.53% <0%> (-2.9%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab06c90...2c6ee46. Read the comment docs.\n. # Codecov Report\nMerging #2512 into master will decrease coverage by 0.15%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2512      +/-\n==========================================\n- Coverage   74.38%   74.23%   -0.16%   \n==========================================\n  Files          36       36            \n  Lines        3951     3951            \n==========================================\n- Hits         2939     2933       -6   \n- Misses       1012     1018       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.53% <0%> (-2.9%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab06c90...54e60ec. Read the comment docs.\n. # Codecov Report\nMerging #2514 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2514      +/-\n==========================================\n- Coverage   74.33%   74.32%   -0.02%   \n==========================================\n  Files          36       36            \n  Lines        3951     3953       +2   \n==========================================\n+ Hits         2937     2938       +1   \n- Misses       1014     1015       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.53% <100%> (+0.08%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.25% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b5afc32...056356a. Read the comment docs.\n. # Codecov Report\nMerging #2516 into master will increase coverage by 0.05%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2516      +/-\n==========================================\n+ Coverage   74.33%   74.38%   +0.05%   \n==========================================\n  Files          36       36            \n  Lines        3951     3955       +4   \n==========================================\n+ Hits         2937     2942       +5   \n+ Misses       1014     1013       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 64.34% <75%> (+0.5%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.42% <0%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b5afc32...41214cc. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (5.x@f5cc328). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\n5.x    #2518   +/-\n======================================\n  Coverage       ?   75.31%         \n======================================\n  Files          ?       43         \n  Lines          ?     5238         \n  Branches       ?        0         \n======================================\n  Hits           ?     3945         \n  Misses         ?     1293         \n  Partials       ?        0\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #macOS | 75.31% <100%> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.08% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f5cc328...e14fb79. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@6c6d848). Click here to learn what that means.\nThe diff coverage is 25%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #2520   +/-\n========================================\n  Coverage          ?   74.5%         \n========================================\n  Files             ?      36         \n  Lines             ?    3966         \n  Branches          ?       0         \n========================================\n  Hits              ?    2955         \n  Misses            ?    1011         \n  Partials          ?       0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCompat.m | 54.83% <25%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6c6d848...2ac9b2f. Read the comment docs.\n. # Codecov Report\nMerging #2528 into master will increase coverage by 0.42%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2528      +/-\n==========================================\n+ Coverage   74.53%   74.96%   +0.42%   \n==========================================\n  Files          36       37       +1   \n  Lines        3994     4018      +24   \n==========================================\n+ Hits         2977     3012      +35   \n+ Misses       1017     1006      -11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 69.49% <87.5%> (+11%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 63.86% <0%> (-0.69%) | :arrow_down: |\n| SDWebImage/UIImage+MemoryCacheCost.m | 80% <0%> (\u00f8) | |\n| SDWebImage/UIView+WebCache.m | 65% <0%> (+1%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.64% <0%> (+1.21%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e056218...e4b590f. Read the comment docs.\n. # Codecov Report\nMerging #2529 into master will increase coverage by <.01%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2529      +/-\n==========================================\n+ Coverage   74.53%   74.54%   +<.01%   \n==========================================\n  Files          36       36            \n  Lines        3994     3995       +1   \n==========================================\n+ Hits         2977     2978       +1   \n  Misses       1017     1017\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 64% <50%> (-0.55%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e056218...5611863. Read the comment docs.\n. # Codecov Report\nMerging #2530 into master will decrease coverage by 0.14%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2530      +/-\n==========================================\n- Coverage   74.53%   74.38%   -0.15%   \n==========================================\n  Files          36       36            \n  Lines        3994     3998       +4   \n==========================================\n- Hits         2977     2974       -3   \n- Misses       1017     1024       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 60% <81.81%> (+1.5%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 85.53% <0%> (-2.9%) | :arrow_down: |\n| SDWebImage/UIView+WebCache.m | 65% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e056218...7e7a332. Read the comment docs.\n. # Codecov Report\nMerging #2531 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2531      +/-\n==========================================\n+ Coverage   74.36%   74.38%   +0.01%   \n==========================================\n  Files          36       36            \n  Lines        3999     4001       +2   \n==========================================\n+ Hits         2974     2976       +2   \n  Misses       1025     1025\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 65.34% <100%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 944c57e...c95c35d. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@a54af63). Click here to learn what that means.\nThe diff coverage is 78.26%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2534   +/-\n=========================================\n  Coverage          ?   75.29%         \n=========================================\n  Files             ?       37         \n  Lines             ?     4100         \n  Branches          ?        0         \n=========================================\n  Hits              ?     3087         \n  Misses            ?     1013         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 67.85% <62.5%> (\u00f8) | |\n| SDWebImage/UIView+WebCache.m | 67.88% <95.45%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a54af63...abfb58d. Read the comment docs.\n. # Codecov Report\nMerging #2535 into 5.x will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2535      +/-\n==========================================\n+ Coverage   75.61%   75.65%   +0.03%   \n==========================================\n  Files          44       44            \n  Lines        5253     5249       -4   \n==========================================\n- Hits         3972     3971       -1   \n+ Misses       1281     1278       -3\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #macOS | 75.65% <100%> (+0.03%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCacheConfig.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 75.77% <100%> (+0.59%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b15abdd...95dba73. Read the comment docs.\n. # Codecov Report\nMerging #2536 into master will increase coverage by 0.12%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2536      +/-\n==========================================\n+ Coverage    74.4%   74.53%   +0.12%   \n==========================================\n  Files          36       36            \n  Lines        4001     4001            \n==========================================\n+ Hits         2977     2982       +5   \n+ Misses       1024     1019       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCacheOperation.m | 71.87% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.41% <0%> (+0.4%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.45% <0%> (+1.92%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4fd0e83...31f1a29. Read the comment docs.\n. # Codecov Report\nMerging #2543 into master will increase coverage by 0.44%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2543      +/-\n==========================================\n+ Coverage    74.4%   74.85%   +0.44%   \n==========================================\n  Files          36       36            \n  Lines        4001     4001            \n==========================================\n+ Hits         2977     2995      +18   \n+ Misses       1024     1006      -18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 68.18% <100%> (+8.18%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.42% <0%> (+2.89%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4fd0e83...f47d60a. Read the comment docs.\n. # Codecov Report\nMerging #2548 into master will increase coverage by 0.28%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2548      +/-\n==========================================\n+ Coverage   74.53%   74.81%   +0.28%   \n==========================================\n  Files          36       36            \n  Lines        4001     3999       -2   \n==========================================\n+ Hits         2982     2992      +10   \n+ Misses       1019     1007      -12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/UIView+WebCache.m | 65% <100%> (-0.35%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.41% <0%> (+0.4%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+0.44%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.45% <0%> (+2.89%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2bdc51e...1b1cf60. Read the comment docs.\n. # Codecov Report\nMerging #2549 into master will increase coverage by 0.22%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2549      +/-\n==========================================\n+ Coverage   74.53%   74.75%   +0.22%   \n==========================================\n  Files          36       36            \n  Lines        4001     4001            \n==========================================\n+ Hits         2982     2991       +9   \n+ Misses       1019     1010       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-0.9%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.41% <0%> (+0.4%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.45% <0%> (+2.89%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2bdc51e...72a34cf. Read the comment docs.\n. # Codecov Report\nMerging #2556 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2556      +/-\n=========================================\n+ Coverage   74.59%   74.6%   +0.01%   \n=========================================\n  Files          36      36            \n  Lines        3999    4001       +2   \n=========================================\n+ Hits         2983    2985       +2   \n  Misses       1016    1016\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageCache.m | 64.56% <100%> (+0.14%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c527f0...216ba9c. Read the comment docs.\n. # Codecov Report\nMerging #2558 into master will increase coverage by 0.16%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2558      +/-\n==========================================\n+ Coverage   74.91%   75.08%   +0.16%   \n==========================================\n  Files          37       37            \n  Lines        4010     4021      +11   \n==========================================\n+ Hits         3004     3019      +15   \n+ Misses       1006     1002       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 71.9% <100%> (+3.71%) | :arrow_up: |\n| SDWebImage/UIImage+MemoryCacheCost.m | 100% <0%> (+20%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c95be09...3b19e76. Read the comment docs.\n. # Codecov Report\nMerging #2562 into master will decrease coverage by 0.06%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2562      +/-\n==========================================\n- Coverage   74.83%   74.76%   -0.07%   \n==========================================\n  Files          36       36            \n  Lines        4001     4007       +6   \n==========================================\n+ Hits         2994     2996       +2   \n- Misses       1007     1011       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 78.22% <83.33%> (+0.12%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.45% <0%> (-0.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 87f5f8b...47c0da1. Read the comment docs.\n. # Codecov Report\nMerging #2563 into master will increase coverage by 0.16%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2563      +/-\n==========================================\n+ Coverage   74.91%   75.07%   +0.16%   \n==========================================\n  Files          37       37            \n  Lines        4010     4008       -2   \n==========================================\n+ Hits         3004     3009       +5   \n+ Misses       1006      999       -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Tests/Tests/SDTestCase.m | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 66.66% <100%> (+1.66%) | :arrow_up: |\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 63.63% <50%> (-4.55%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 63.86% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 80.99% <0%> (+2.89%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c95be09...fc50f1b. Read the comment docs.\n. # Codecov Report\nMerging #2570 into master will decrease coverage by 0.11%.\nThe diff coverage is 68.75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2570      +/-\n==========================================\n- Coverage   74.83%   74.71%   -0.12%   \n==========================================\n  Files          36       36            \n  Lines        4001     3999       -2   \n==========================================\n- Hits         2994     2988       -6   \n- Misses       1007     1011       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.73% <68.75%> (-1.7%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.15% <0%> (-0.41%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 87f5f8b...9725c8d. Read the comment docs.\n. # Codecov Report\nMerging #2572 into master will increase coverage by 0.35%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2572      +/-\n==========================================\n+ Coverage   74.91%   75.26%   +0.35%   \n==========================================\n  Files          37       37            \n  Lines        4010     4039      +29   \n==========================================\n+ Hits         3004     3040      +36   \n+ Misses       1006      999       -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 72.07% <100%> (+3.89%) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 66.01% <100%> (+1.01%) | :arrow_up: |\n| Tests/Tests/SDCategoriesTests.m | 98.58% <100%> (+0.26%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.67% <0%> (-0.98%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.5% <0%> (+1.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c95be09...77063a9. Read the comment docs.\n. # Codecov Report\nMerging #2574 into master will decrease coverage by 0.22%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2574      +/-\n==========================================\n- Coverage   74.91%   74.68%   -0.23%   \n==========================================\n  Files          37       37            \n  Lines        4010     4010            \n==========================================\n- Hits         3004     2995       -9   \n- Misses       1006     1015       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 78.09% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.73% <0%> (-2.92%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c95be09...6becff0. Read the comment docs.\n. # Codecov Report\nMerging #2575 into master will decrease coverage by <.01%.\nThe diff coverage is 71.42%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2575      +/-\n=========================================\n- Coverage   74.91%   74.9%   -0.01%   \n=========================================\n  Files          37      37            \n  Lines        4010    4017       +7   \n=========================================\n+ Hits         3004    3009       +5   \n- Misses       1006    1008       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 77.91% <71.42%> (-0.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c95be09...8a74395. Read the comment docs.\n. # Codecov Report\nMerging #2576 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2576      +/-\n==========================================\n+ Coverage   74.91%   74.93%   +0.02%   \n==========================================\n  Files          37       37            \n  Lines        4010     4010            \n==========================================\n+ Hits         3004     3005       +1   \n+ Misses       1006     1005       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.64% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloader.m | 78.51% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c95be09...3a470fc. Read the comment docs.\n. # Codecov Report\nMerging #2581 into master will decrease coverage by 0.19%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2581     +/-\n=========================================\n- Coverage   74.91%   74.71%   -0.2%   \n=========================================\n  Files          37       37           \n  Lines        4010     4010           \n=========================================\n- Hits         3004     2996      -8   \n- Misses       1006     1014      +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 73.8% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.73% <0%> (-2.92%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 63.86% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60f4365...ae1390f. Read the comment docs.\n. # Codecov Report\nMerging #2585 into master will decrease coverage by 0.19%.\nThe diff coverage is 86.36%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2585     +/-\n=========================================\n- Coverage   74.91%   74.71%   -0.2%   \n=========================================\n  Files          37       37           \n  Lines        4010     4026     +16   \n=========================================\n+ Hits         3004     3008      +4   \n- Misses       1006     1018     +12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 84.32% <86.36%> (-0.14%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.73% <0%> (-2.92%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60f4365...73b7a26. Read the comment docs.\n. # Codecov Report\nMerging #2588 into master will increase coverage by 0.45%.\nThe diff coverage is 95.12%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2588      +/-\n==========================================\n+ Coverage   74.91%   75.37%   +0.45%   \n==========================================\n  Files          37       37            \n  Lines        4010     4040      +30   \n==========================================\n+ Hits         3004     3045      +41   \n+ Misses       1006      995      -11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...age/FLAnimatedImage/FLAnimatedImageView+WebCache.m | 71.81% <100%> (+3.63%) | :arrow_up: |\n| Tests/Tests/SDCategoriesTests.m | 98.58% <100%> (+0.26%) | :arrow_up: |\n| SDWebImage/UIView+WebCache.m | 66.34% <88.23%> (+1.34%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 65.09% <0%> (+0.82%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60f4365...759e02e. Read the comment docs.\n. # Codecov Report\nMerging #2591 into 5.x will increase coverage by 0.52%.\nThe diff coverage is 89.18%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2591      +/-\n==========================================\n+ Coverage   75.85%   76.37%   +0.52%   \n==========================================\n  Files          45       45            \n  Lines        5285     5330      +45   \n==========================================\n+ Hits         4009     4071      +62   \n+ Misses       1276     1259      -17\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #macOS | 76.37% <89.18%> (+0.52%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDefine.m | 36.84% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 78.6% <\u00f8> (+2.83%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 89.03% <89.18%> (+1.78%) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.69% <0%> (+0.35%) | :arrow_up: |\n| SDWebImage/SDImageTransformer.m | 55.11% <0%> (+0.78%) | :arrow_up: |\n| SDWebImage/SDImageCacheDefine.m | 75% <0%> (+8.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 45b4d64...87e523a. Read the comment docs.\n. # Codecov Report\nMerging #2592 into master will decrease coverage by <.01%.\nThe diff coverage is 93.33%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2592      +/-\n=========================================\n- Coverage    74.8%   74.8%   -0.01%   \n=========================================\n  Files          37      37            \n  Lines        4029    4012      -17   \n=========================================\n- Hits         3014    3001      -13   \n+ Misses       1015    1011       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.7% <100%> (+1.02%) | :arrow_up: |\n| SDWebImage/SDWebImageWebPCoder.m | 83.24% <92.3%> (-0.14%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 64.27% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3cb42b2...7bfc950. Read the comment docs.\n. # Codecov Report\nMerging #2596 into master will decrease coverage by 0.15%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2596      +/-\n=========================================\n- Coverage   74.96%   74.8%   -0.16%   \n=========================================\n  Files          37      37            \n  Lines        4026    4029       +3   \n=========================================\n- Hits         3018    3014       -4   \n- Misses       1008    1015       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 83.37% <25%> (-0.95%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.67% <0%> (-0.98%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bc50621...c3b0f64. Read the comment docs.\n. # Codecov Report\nMerging #2602 into 5.x will increase coverage by 0.21%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\n5.x    #2602      +/-\n==========================================\n+ Coverage   75.68%   75.89%   +0.21%   \n==========================================\n  Files          45       45            \n  Lines        5292     5294       +2   \n==========================================\n+ Hits         4005     4018      +13   \n+ Misses       1287     1276      -11\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #macOS | 75.89% <60%> (+0.21%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDImageGIFCoder.m | 85.58% <0%> (-0.4%) | :arrow_down: |\n| SDWebImage/SDImageAPNGCoder.m | 85.71% <100%> (+0.56%) | :arrow_up: |\n| SDWebImage/SDImageCodersManager.m | 70% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageIOCoder.m | 70.79% <0%> (+0.49%) | :arrow_up: |\n| SDWebImage/SDAnimatedImageView.m | 66.84% <0%> (+2.65%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2864fe3...e303b7a. Read the comment docs.\n. # Codecov Report\nMerging #2604 into master will decrease coverage by 0.27%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2604      +/-\n==========================================\n- Coverage   75.44%   75.17%   -0.28%   \n==========================================\n  Files          37       37            \n  Lines        4060     4060            \n==========================================\n- Hits         3063     3052      -11   \n- Misses        997     1008      +11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.71% <0%> (-3%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.09% <0%> (-0.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e8dc82...b01bbbc. Read the comment docs.\n. # Codecov Report\nMerging #2606 into master will decrease coverage by 0.28%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2606      +/-\n==========================================\n- Coverage   75.44%   75.15%   -0.29%   \n==========================================\n  Files          37       37            \n  Lines        4060     4061       +1   \n==========================================\n- Hits         3063     3052      -11   \n- Misses        997     1009      +12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.75% <100%> (-2.95%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e8dc82...f0a4014. Read the comment docs.\n. # Codecov Report\nMerging #2607 into master will decrease coverage by 0.12%.\nThe diff coverage is 57.14%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2607      +/-\n==========================================\n- Coverage   75.44%   75.31%   -0.13%   \n==========================================\n  Files          37       37            \n  Lines        4060     4063       +3   \n==========================================\n- Hits         3063     3060       -3   \n- Misses        997     1003       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 82.56% <57.14%> (-0.69%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e8dc82...5199c05. Read the comment docs.\n. # Codecov Report\nMerging #2608 into master will decrease coverage by 0.27%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2608      +/-\n==========================================\n- Coverage   75.44%   75.17%   -0.28%   \n==========================================\n  Files          37       37            \n  Lines        4060     4060            \n==========================================\n- Hits         3063     3052      -11   \n- Misses        997     1008      +11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageImageIOCoder.m | 73.8% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 86.71% <0%> (-3%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.09% <0%> (-0.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e8dc82...5dab8f0. Read the comment docs.\n. # Codecov Report\nMerging #2611 into master will decrease coverage by 0.09%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2611     +/-\n=========================================\n- Coverage   75.39%   75.29%   -0.1%   \n=========================================\n  Files          37       37           \n  Lines        4060     4060           \n=========================================\n- Hits         3061     3057      -4   \n- Misses        999     1003      +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.7% <0%> (-1%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.5% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7567f74...642a343. Read the comment docs.\n. # Codecov Report\nMerging #2612 into master will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2612      +/-\n==========================================\n- Coverage   75.39%   75.36%   -0.03%   \n==========================================\n  Files          37       37            \n  Lines        4060     4060            \n==========================================\n- Hits         3061     3060       -1   \n- Misses        999     1000       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.5% <0%> (+0.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7567f74...5facf00. Read the comment docs.\n. # Codecov Report\nMerging #2621 into master will increase coverage by 0.06%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2621      +/-\n=========================================\n+ Coverage   75.24%   75.3%   +0.06%   \n=========================================\n  Files          37      37            \n  Lines        4064    4066       +2   \n=========================================\n+ Hits         3058    3062       +4   \n+ Misses       1006    1004       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 82.11% <0%> (-0.45%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.09% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.73% <0%> (+0.99%) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 16b780b...5076a1d. Read the comment docs.\n. # Codecov Report\nMerging #2622 into master will decrease coverage by 0.12%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2622      +/-\n==========================================\n- Coverage   75.39%   75.27%   -0.13%   \n==========================================\n  Files          37       37            \n  Lines        4064     4064            \n==========================================\n- Hits         3064     3059       -5   \n- Misses       1000     1005       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.74% <0%> (-1%) | :arrow_down: |\n| SDWebImage/SDImageCache.m | 65.09% <0%> (-0.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ccb8b53...4c743c7. Read the comment docs.\n. # Codecov Report\nMerging #2623 into master will increase coverage by 0.5%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2623     +/-\n=========================================\n+ Coverage   75.06%   75.56%   +0.5%   \n=========================================\n  Files          37       37           \n  Lines        4066     4072      +6   \n=========================================\n+ Hits         3052     3077     +25   \n+ Misses       1014      995     -19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageCompat.m | 54.83% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 89.93% <100%> (+3.18%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 65.09% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 78.57% <0%> (+5.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a54af63...2768817. Read the comment docs.\n. # Codecov Report\nMerging #2624 into master will increase coverage by 0.27%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2624      +/-\n==========================================\n+ Coverage   75.06%   75.33%   +0.27%   \n==========================================\n  Files          37       37            \n  Lines        4066     4066            \n==========================================\n+ Hits         3052     3063      +11   \n+ Misses       1014     1003      -11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 90.06% <100%> (+3.31%) | :arrow_up: |\n| SDWebImage/SDImageCache.m | 65.09% <0%> (-0.42%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 74.55% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a54af63...50f9ddd. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@bede907). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2625   +/-\n=========================================\n  Coverage          ?   75.11%         \n=========================================\n  Files             ?       37         \n  Lines             ?     4066         \n  Branches          ?        0         \n=========================================\n  Hits              ?     3054         \n  Misses            ?     1012         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bede907...7050a79. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@bede907). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2627   +/-\n=========================================\n  Coverage          ?   75.19%         \n=========================================\n  Files             ?       37         \n  Lines             ?     4072         \n  Branches          ?        0         \n=========================================\n  Hits              ?     3062         \n  Misses            ?     1010         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 80.8% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bede907...8c3cfbd. Read the comment docs.\n. # Codecov Report\nMerging #2629 into master will decrease coverage by 0.29%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2629     +/-\n=========================================\n- Coverage   75.27%   74.97%   -0.3%   \n=========================================\n  Files          37       37           \n  Lines        4072     4072           \n=========================================\n- Hits         3065     3053     -12   \n- Misses       1007     1019     +12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageWebPCoder.m | 80.8% <0%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 87.08% <0%> (-2.99%) | :arrow_down: |\n| SDWebImage/SDWebImageManager.m | 73.21% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f023c9b...31856f3. Read the comment docs.\n. # Codecov Report\nMerging #2633 into master will increase coverage by 0.18%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2633      +/-\n==========================================\n+ Coverage      75%   75.18%   +0.18%   \n==========================================\n  Files          37       37            \n  Lines        4072     4074       +2   \n==========================================\n+ Hits         3054     3063       +9   \n+ Misses       1018     1011       -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloader.m | 77.29% <0%> (-0.63%) | :arrow_down: |\n| SDWebImage/SDWebImageDownloaderOperation.m | 90.06% <0%> (+2.98%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 44b3971...ba11319. Read the comment docs.\n. # Codecov Report\nMerging #2647 into 5.x will increase coverage by 0.1%.\nThe diff coverage is 94.52%.\n\n\n```diff\n@@            Coverage Diff            @@\n5.x    #2647     +/-\n=========================================\n+ Coverage   76.02%   76.12%   +0.1%   \n=========================================\n  Files          51       54      +3   \n  Lines        5342     5370     +28   \n=========================================\n+ Hits         4061     4088     +27   \n- Misses       1281     1282      +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #macOS | 76.12% <94.52%> (+0.1%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SDWebImage/SDWebImageDownloaderOperation.m | 88.69% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageCompat.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| SDWebImage/Private/SDInternalMacros.m | 0% <0%> (\u00f8) | |\n| SDWebImage/Private/metamacros.h | 100% <100%> (\u00f8) | |\n| SDWebImage/SDWebImageDownloader.m | 82.31% <100%> (+0.32%) | :arrow_up: |\n| SDWebImage/Private/SDInternalMacros.h | 100% <100%> (\u00f8) | |\n| SDWebImage/UIView+WebCache.m | 89.52% <100%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDWebImageManager.m | 87.25% <90.9%> (\u00f8) | :arrow_up: |\n| SDWebImage/SDImageCachesManager.m | 80.57% <93.33%> (+0.25%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d76dd08...e9a1c83. Read the comment docs.\n. \n",
    "fabiosoft": "How can I retrieve the stored NSData? Now only methods returning UIImage are available. I'm using  v4.3.3, I need to save a downloaded NSData (it's a gif) and use a memory cache (no persisting on disk needed)\nusing \n[[SDImageCache sharedImageCache]storeImage:nil imageData:data forKey:item.identifier toDisk:NO completion:^{}];\nI hope it's stored, but how can I retrieve the NSData saved?\nI can only see methods returning UIImages\n- (nullable UIImage *)imageFromMemoryCacheForKey:(nullable NSString *)key;\n- (nullable UIImage *)imageFromDiskCacheForKey:(nullable NSString *)key;\n- (nullable UIImage *)imageFromCacheForKey:(nullable NSString *)key;\n. Cool, but it seems to use disk cache only... is possible to use memory cache?. ",
    "sanshanchuns": "SDWebImage (3.7.5):\n    - SDWebImage/Core (= 3.7.5)\n. platform ios9 ios8  xcode7.2\n. plus:\n: CGContextDrawImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable\n: CGBitmapContextCreateImage: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable\n. ",
    "juyka": "@mythodeia I got the same problem with image http://l-userpic.livejournal.com/125411728/70934036 \n. ",
    "caldofran": "I am having the same issue with version 3.7.5. Downloading the same image on version 3.7.3 worked without problems.\nThis is the image: https://s3.amazonaws.com/jobandtalent_production/assets/default_logos/logo.large.N.2D8D2B.png\nAnd I get the same error as @juyka:\nCGBitmapContextCreate: unsupported parameter combination:\n        16 integer bits/component;\n        64 bits/pixel;\n        RGB color space model; kCGImageAlphaPremultipliedFirst;\n        1184 bytes/row.\n    Valid parameters for RGB color space model are:\n        16  bits per pixel,      5  bits per component,      kCGImageAlphaNoneSkipFirst\n        32  bits per pixel,      8  bits per component,      kCGImageAlphaNoneSkipFirst\n        32  bits per pixel,      8  bits per component,      kCGImageAlphaNoneSkipLast\n        32  bits per pixel,      8  bits per component,      kCGImageAlphaPremultipliedFirst\n        32  bits per pixel,      8  bits per component,      kCGImageAlphaPremultipliedLast\n        64  bits per pixel,      16 bits per component,      kCGImageAlphaPremultipliedLast\n        64  bits per pixel,      16 bits per component,      kCGImageAlphaNoneSkipLast\n        128 bits per pixel,      32 bits per component,      kCGImageAlphaNoneSkipLast |kCGBitmapFloatComponents\n        128 bits per pixel,      32 bits per component,      kCGImageAlphaPremultipliedLast |kCGBitmapFloatComponents\n    See Quartz 2D Programming Guide (available online) for more information.\n. ",
    "nejra": "I have the same issue and I fixed it by downgrading to 3.7.3 version, as @caldofran suggested. Hopefully it will be fixed in the future.\n. ",
    "pljhonglu": "I have the same problem.\nCGImageGetBitsPerComponent result is 16, and the context is 0x0.\nI have the same opinion as @mythodeia . check if the bits per component result in an unsupported combination and if it does then roll back to the original image.\n. @mythodeia it works for me. Thanks!\n. ",
    "sunilsharma08": "I am also getting the same error. I tried latest version but error is still appearing.\nI tried to replicate in demo project by adding in array image url \"http://staging.theooru.com/uploads/star/profile_image/4/Screen_Shot_2016-02-19_at_5.19.01_PM.png\"\nError displayed are : \": CGContextDrawImage: invalid context 0x0.\"\nand \": CGBitmapContextCreateImage: invalid context 0x0.\"\n. Is it possible to handle such situtation by library like if image downloaded is nil then I can avoid this error\n. Thanks, now everything is working fine.\n. ",
    "venky284": "@mythodeia  I use this for my Xamarin project as a component. How could I get this fix? Generally I download it from Xamarin Component store, and as I see there is no patch released so far.\n. @mythodeia  Any Estimated date for Xamarin 3.7.6 release?\n. ",
    "rushk2112": "As of SDWebImage (3.7.5) this appears to be an issue still. I fed a list of 36 images to the prefetched but they do not report 36 done, nor does the process seem to update. I am try to isolate this to a possible threading issue in my code but the prefetched does not report the number of images in the original array.\n. ",
    "kirou": "We had to modify the copyright notation LBGIFImage.\nhttps://github.com/larcus94/LBGIFImage/issues/8\nThis will also give me a fix.\n. ",
    "briancaw": "Hey @sdwebimage,\nWe're running into issues with this name discrepancy, as it's making it less seamless for folks to transition between Cocoapods/Carthage, amongst things (and depending on how we solve this issues, could cause us to have to code around it in an undesirable way).  These issues would be solved if the Framework was named SDWebImage.  Is it possible to make that change?  Is there a compelling reason not to?\nThanks,\nBrian\n. ",
    "Wenzhi": "Cannot wait for this pull being merged in! Thanks for the pull~\n. Reproduce the exact same issue in SDWebImage 4.0.0 in Xcode 8.2.1, integrated through Cocoapods. The above code doesn't fix the issue. Please let me know if you want more detail :). I found the reason, it was caused by my own code. Sorry for the false alarm!. ",
    "yongyeanng": "Here is the sample project i test with. I test on simulator for ipad air and ipad 2 the resolution return is different from the same image\nTestImageWebCache.zip\n. yup, 3.7.5 rite ? \n. oh,  so is the ios issue. Thanks ya \nI think i have to use CGImageGetWidth and CGImageGetHeight for the actual size. \n. ",
    "beribas": "Ok, after a little bit more digging I found out that the response can be accessed through the downloadOperation which is returned by the downloadImageWithURL... call, eg:\noperation = SDWebImageManager.sharedManager().downloadImageWithURL(url, options: SDWebImageOptions(), progress: progressBlock, completed: completionBlock)\nIn the completion block the full response can be accessed with operation.response\nI close the issue.\n. Seems like there were some changes done since the time I opened this issue. I think there still must be a way to access the download operation and its response property. . ",
    "Insider77": "... completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) { ...\nhow to get the response from here?. ",
    "jeromeDms": "Hi There\nIs there any news about this ?\nI'm using sd_setImageWithURL to download an image, and I need to retrieve the session cookie, any tip to achieve this?\nAny help would be greatly appreciated as I'm stuck on this issue.\nThanks. ",
    "jcampbell05": "@mythodeia  I was meaning the ability to pass it some custom NSOperationQueue for it to execute on.\n. ",
    "joridor": "@mythodeia So how can I get the original image without taking scale in mind?\n. @mythodeia That's a bit of a problem since we are using Cocoapods & the build server updates these on build. :)\nRequest: add an option/param for this\nIn my opinion, scale should not be applied on ALL images downloaded from a URL (eg. photo viewers)\n. Any idea when the issue Tinghui mentions gets fixed?\nSetting the options as a temp workaround for now.\n. @billionbucks Had the same for my list with images, the first ones were loaded, after a while it stopped loading pictures.\nSet the options to low priority (eg. options: [.continueInBackground, .lowPriority]) and it seemed to be fixed.\nDon't think it was caused by Swift 3, maybe it's the iOS 10 SDK, or a combo.\nUPDATE\nScratch that, still happening for me. It's not occurring on iOS9, but it is on iOS 10.\n. @bpoplauschi My situation: I have a tableview filled with images. The first +- 50 pictures were working correctly. But if you kept scrolling, the images would stop loading.\nIn the cells, I call .sd_cancelCurrentImageLoad() in prepareForReuse.\nI used sd_setImage(with:placeholderImage:options:completed) to load an image url when setting up the cells.\nTo make the list work again, I had to specify the option [.continueInBackground, .lowPriority] in the options. (think previous value was: SDWebImageOptions(rawValue:0))\n. ",
    "davidear": "@mythodeia I have met the same issue, and I think I can understand the purpose of this change.  My concern is that since this change will influence many user's apps, so will you insist the change or revert back in future?\nIf this change is surely confirmed\uff0cthen I will change my code to fit this change. What my worry is that I change my code to fit this version and in some day the change revert back.\n. ",
    "wanghaihan": "@mythodeia , Could you use a argument to enable it. And by default, it should be disabled,\n. ",
    "nirsalon": "I also hit the issue, and it took me time to understand that SDWebImage is the cause. I'm not interested in scaling. I changed it back, but have the same concern as @davidear that next pod install would revert it.\nI'd prefer a flag as well.\n. ",
    "EvgenyKarkan": "@mythodeia ok, thanks that is clear, but what if API will return image data in bytes?\n. ",
    "mangireddy58": "@mythodeia . you are correct! it's my fault.\n. ",
    "a5978445": "thank you very much  !  i  will update SDWebImage .and then confirm again \u3002\n. ",
    "greatjam": "Signal info we got:SIGBUS (BUS_ADRALN)\n. ",
    "kidsid49": "@mythodeia\nIf you look at afnetwork UIImageView cataogry. It takes care it very neat way.\nSo if you pass placeholder image to API, It will set only if image is downloaded from the web otherwise its sets the cached image directly. I do want to achieve the same thing here.\nEg. some check that can tell me that image is in memory or disk and I can avoid this line.\nmovieStoryCell.backdropImageView.image = [UIImage imageNamed:@\"poster_placeholder_image\"];\nFlickering happens because it sets placeholder image first then sets the cached image instantly whether with animation or not. So this changes of UIImage in UIImageview is causing this flickering, Animation has nothing to do with that.\n. ",
    "coryoso": "How exactly do you scale images down with SDWebImagePrefetcherDelegate? \npublic func imagePrefetcher(imagePrefetcher: SDWebImagePrefetcher!, didPrefetchURL imageURL: NSURL!, finishedCount: UInt, totalCount: UInt) does not allow transforming the image\n. ",
    "viljamik": "You should not be linking that file to your project so you should be fine.\n. Has there been any progress on this issue?. ",
    "nurmerey": "yes, i've tried all the combinations: using both, using one of each at the time. I've also tried \n-force_load SDWebImage.framework/Versions/Current/SDWebImage\nwith and without $(inherited)\n. Yep, that makes sense. I might give it a go. Thank you for your time @mythodeia! \n. --------UPDATE--------\nAfter further tweaking, before I finished testing with other libraries, I found solution that doesn't involve other libraries. \nBasically instead of using \nimport SDWebImage/UIImageView+WebCache.h\nuse \nimport \"UIImageView+WebCache.h\"\nI've seen this fix before in other forums, but at the time when I tried it, it didn't help. So I assume its that and other settings that you need for stars to align:\nIn the Build Settings, under Other Linker Flags instead of having $(inherited) AND \n-force_load $(TARGET_BUILD_DIR)/libPods.a\nI only have $(inherited)\nAlso, current architecture is armv7 armv7s arm64, Build Active Architecture Only - Yes for Debug and No for release.\nHope this helps someone.\nN\n. ",
    "nselimko": "my version is 3.7, should i update the version ?\n.  This is my code. it's not producing error but debugging it's stoping always in this method,and sometimes it's crashing.\nI think it's a problem,can you help me ?\n```\n    SDImageCache imageCache = [[SDImageCache alloc] init];\n    [imageCache queryDiskCacheForKey:carmodel.Id done:^(UIImage image,SDImageCacheType cachetype)\n    {\n        // image is not nil if image was found\n        if(image == nil)\n        {\n            [self.imageDownloader downloadImageWithURL:imagePath\n                                                    options:SDWebImageDownloaderHighPriority\n                                                   progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n                                                       // progression tracking code\n                                                   }\n                                                  completed:^(UIImage image, NSData data, NSError *error, BOOL finished) {\n                                                      if (image && finished) {\n                                                          cell.img.image = image;\n                                                          [[SDImageCache sharedImageCache] storeImage:image forKey:carmodel.Id];\n                                                          image = nil;\n                                                      }\n                                                  }];\n    }\n    else\n    {\n        cell.img.image = image;\n    }\n\n}];\n```\n. As i saw it was \"Run only on main thread\" something like that.\n. ",
    "wuyongrui": "I think it can use A counter or something to make sure it  have download\nall the images and then starting animation\n2016\u5e743\u670815\u65e5 \u4e0b\u534810:54\uff0c\"Konstantinos K.\" notifications@github.com\u5199\u9053\uff1a\n\nso you say we put the [sself startAnimating]; inside the if (sself &&\nimage) {\nto make sure that we have an image to animate before we do it, right?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rs/SDWebImage/issues/1497#issuecomment-196854735\n. \n",
    "zhujinlong": "I already added NSAllowsArbitraryLoads in my Info.plist, as I post above, my Info.plist like belowing:\n<key>NSAppTransportSecurity</key>\n    <dict>\n        <key>NSAllowsArbitraryLoads</key>\n        <true/>\n        <key>NSExceptionDomains</key>\n        <dict>\n            <key>123.456.789.12</key>\n            <dict>\n                <key>NSExceptionAllowsInsecureHTTPLoads</key>\n                <true/>\n                <key>NSExceptionRequiresForwardSecrecy</key>\n                <false/>\n                <key>NSIncludesSubdomains</key>\n            </dict>\n        </dict>\n    </dict>\nI also did re-install, but still cannot get image.\nActually, when I use Alamofire to get json string from server, I also get this error, after I modified Info.plist like this, I can get json string successfully, but still cannot get image with SDWebImage.\n. Alamofire can get the image, it needs NSAllowsArbitraryLoads and sessionDidReceiveChallenge config, NSExceptionDomains is not necessary. Could you give me a personal email so I send you a demo project with url and session token to test?\n. The image is ok, if you save it to local and load it, it will show.\n```\nclass ViewController: UIViewController {\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    let uiAvatar = UIImageView()\n    uiAvatar.frame = CGRectMake(100, 100, 100, 100)\n    self.view.addSubview(uiAvatar)\n\n    uiAvatar.image = UIImage(named: \"gopher\")\n}\n\n}\n```\nAnd finally I found the reason, this url uses http2 protocol, but http2 is only supported by NSURLSession since iOS 9.\nhttp://stackoverflow.com/questions/31238354/nsurlconnection-on-ios-9-does-not-use-http-2-protocol\n. This url can be load by SDWebImage correctly, and has no relationship with China's GFW, this url is not blocked.\n. ",
    "zqpmaster": "@vivekshah05 I deeply look the sdImage soure code and I found that the second piece code asyn two twice in main queue.But the first piece code not. Maybe it is the reason why the image flash in second piece code. Hope to help you.\n. ",
    "wuzer": "thanks for you reply me,i don't write code,only import header have a error\n. @mythodeia yes\n. @mythodeia delete #import SDWebImageManager.h\" run ok\n. @mythodeia jump to this code #pragma mark - Deprecated\ntypedef void(^SDWebImageCompletedBlock)(UIImage *image, NSError *error, SDImageCacheType cacheType) __deprecated_msg(\"Block type deprecated. UseSDWebImageCompletionBlock\");\ntypedef void(^SDWebImageCompletedWithFinishedBlock)(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished) __deprecated_msg(\"Block type deprecated. UseSDWebImageCompletionWithFinishedBlock\");\n. @mythodeia first i use newest version,but error,return 3.7 version\n. @mythodeia yes,i mean,my project also use UIImage + webCache,is work right, today use SDWebImageManager show error. method not call.\n. @mythodeia Thanks for you help,i try to find error by myself.\n. @mythodeia i find my project have third framework MWPhotoBrowser,may be third framework conflict. have EMSDWebImageManager.h.\n. ",
    "patelmayank": "@bpoplauschi  ok thanks i will check this and let you know \n. Ok thanks @bpoplauschi \n. ",
    "Lidalu": "WebWork.zip\n. Why it can't work without a placeholderImage?\nwhen I use  sd_setImageWithURL:  instead of sd_setImageWithURL:placeholderImage, the image also can't show at the moment , and need to click the cell\n. yeah\uff0cthank u\n. ",
    "tangzzz-fan": "well.i netted a project to show my difficulty in using SDWebImage ,maybe there are some mistakes.this is  the git url:https://github.com/tangzzz-fan/testUseSDWebImage.git .thankes for your help\n. thanks ,the question has been solved\n. ",
    "Kemenger": "The answer  is at https://forums.developer.apple.com/thread/38934\n. ",
    "1966767119": "I am sorry,the project is bigger,and I think I can describe it clearly.the problem is that ,I have a tableView ,and the cell has an image ,then set the image .\n[mainImgView sd_setImageWithURL:[NSURL URLWithString:dict[@\"poster_img\"]]placeholderImage:[UIImage imageNamed:@\"pic\"]];\nI scroll to the bottom ,(the table has about 50 rows ,that is to say it has 50 pics)\nthen  i select one row ,and then jump to the detail page,but when I back to the tableView ,I scroll to the top slowly,the pic in the row request from the web again. hope your help.\n@mythodeia \n. I will make a demo only for  that ,could you leave your email for me ?\n@mythodeia \n. ok,wait a moment\n. I am very sorry for that ,I find the problem,some people in my team clear the image data,and not tell me .thank you for your help.@mythodeia\n. ",
    "GauravNamaWedig": "How did you created the Fat framework with Bit code enabled using command line function as I am also facing this problem.. ",
    "medisean": "My mistake. Sorry.\n. ",
    "perfectChao": "@mythodeia \nThank you for your answer.\n. ",
    "pegurov": "Yes they look the same, but in fact they are not the same. If you download and open the second image, you will see this. There is a 1-pixel wide row of pixels that are clear on the right side of the image, that is not present in the original.\n\n. Wait, again - http://46.101.27.143:8080/uploads/avatars/70/myfilname here is the original image. Tried all kinds of browsers, everywhere I get no clear pixels for the original.\nhttps://youtu.be/C6Ki55ivnIc - video\n. ",
    "yebw": "why just use kCGImageAlphaNoneSkipLast in the CGBitmapContextCreate method?\n. \nhttp://easyread.nos.netease.com/pic/2016/03/16/73955b4996d6411a96766592b35b263c.jpg\n. Yes\uff0cit works for me, I have tried dozens of images, and no new issues were created.\nIt seems that kCGImageAlphaNoneSkipLast is better than kCGImageAlphaPremultipliedFirst.\n. ",
    "MichaelHuyp": "@bpoplauschi Because The code already exists in [self cancelInternal] function;\n. ",
    "zhangmingjing": "Thanks\n. ",
    "MISSAJJ": "I can install other pos\uff0cfor example AFNETWORKING\uff0cMBPROGRESSHUD\uff0cbut SDWebImage\u2026\u2026:-(\nWarm Regards\uff0c\n\u7eaf\u5b50(^_~)\u2606MISSAJJ\n\n\u5728 2016\u5e745\u67082\u65e5\uff0c16:42\uff0cBogdan Poplauschi notifications@github.com \u5199\u9053\uff1a\nThis sounds like an issue with CocoaPods, not SDWebImage.\nCan you provide more details?\nFor example, can you install other pods?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. Sorry, I have found that something wrong with my CocoaPods, after updated my pods, it had been run well....\n\n1)    Do these:\n $ sudo rm -fr ~/Library/Caches/CocoaPods/\n $ rm -fr ~/.cocoapods/repos/master/\n $ sudo rm -fr Pods/\n $ sudo gem install cocoapods\n $ pod setup \nSetting up CocoaPods master repo\nUpdating 02f873f..1ee6599\nFast-forward\n Specs/GRKAnalytics/2.0.1/GRKAnalytics.podspec.json | 51 ++++++++++++++++++++++\n .../1.0.0/Segment-UrbanAirship.podspec.json        | 28 ++++++++++++\n 2 files changed, 79 insertions(+)\n create mode 100644 Specs/GRKAnalytics/2.0.1/GRKAnalytics.podspec.json\n create mode 100644 Specs/Segment-UrbanAirship/1.0.0/Segment-UrbanAirship.podspec.json\nFrom https://github.com/CocoaPods/Specs\n   02f873f..1ee6599  master     -> origin/master\n2)    And then run the $ pod install \n```\nUpdating local specs repositories\nAnalyzing dependencies\nDownloading dependencies\nUsing AFNetworking (2.6.0)\nInstalling DACircularProgress (2.3.1)\nInstalling MJExtension (2.5.12)\nInstalling MJRefresh (2.4.10)\nInstalling NJKWebViewProgress (0.2.3)\nInstalling SDWebImage (3.7.3)\nInstalling SVProgressHUD (1.1.3)\nInstalling pop (1.0.8)\nGenerating Pods project\nIntegrating client project\nSending stats\nPod installation complete! There are 8 dependencies from the Podfile and 8 total\npods installed.\n```\n^_^ \n. ",
    "martinpilch": "@bpoplauschi Will do it and let you know\n. ",
    "niuxianbin": "I am so sorry to Send wrong Image Url , this one I have double checked it ,it does not work well,  forward your reply~thanks http://img.xm9m.com/static/XDkZia38/PRODUCT/xZgxgELK/xZgxgELK_1460714571202.jpg@1e_400w_400h_1c_0i_1o_1x.jpg|watermark=1&object=c3RhdGljL0RFRkFVTFQvUFJPRFVDVF9BUkVBL3Rlc3QyMDE2MDQwNC9MOEVTRmhOaF8xNDYwNDQzNDQwNzQxLnBuZw==&t=90&p=3&x=0&y=0 \n. ",
    "mime29": "Did you try to activate the address sanitizer in your scheme? I have myself a crash because of sdwebimage when i activate it.\n. ",
    "ynotski": "We have also been monitoring an issue with RAM usage being way to high. We upgraded to v3.7.6 and followed the example above. e.g.:\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\n[[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO];\nWhat we found is this significantly increased the RAM usage by a factor of 2-2.5. We decided to downgrade to v3.7.3 and changed the following:\n[[SDImageCache sharedImageCache] setShouldDecompressImages:YES];\n    [[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:YES];\n    [[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO];*** METHOD   UNAVAILABLE IN v3.7.3.\nOur previous code using v3.7.3 was:\n[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];\n   [[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\nBy downgrading to v3.7.3 and setting the two above methods to YES we saw a significant reduction in the the RAM usage.\n. @SpaceStar2016 \nsetShouldCacheImagesInMemory: is a method not available in v 3.7.3, so I am fairly sure you're not running v 3.7.3.\nIf you're using cocoapods to add dependencies to your project, change your podfile to:\npod 'SDWebImage', '3.7.3'\nthen run pod install\nRemove the line:\n[[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO] or you will get compile errors.\nHopefully this will help.\n. ",
    "SpaceStar2016": "I am using 3.7.3 and did the code like\n [[SDImageCache sharedImageCache] setShouldDecompressImages:YES];\n    [[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:YES];\n    [[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO]\nit didn't work for me. How to solve the problem??\n. @ynotski I am sure I am using 3.7.3 I can code [[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO] in my project.\n\n. ",
    "dipkasyap": "Having same issue here, I am on xcode 9.4, swift 4.X, and tested on ios 11(Simulator) \n\n. \nIssue Info\nInfo                    | Value                               |\n-------------------------|-------------------------------------|\n Platform Name          | ios \n Platform Version         |11.0 \n SDWebImage Version    |4.0\n Integration Method      |cocoapods\n Xcode Version            |Xcode 9 \n Repro rate              | all the time (100%) \n Repro with our demo prj |NA\n Demo project link       | NA\nIssue Description and Step\nLoading image normally with SDSebImage on UITableview Cell \n. ",
    "smindia1988": "After lots of R&D and applying all kind of options for SDImageCache, I have finalized below options to set to avoid crash on heavy images load with the Best performance on RAM cache load:\nHope this will help you all !!!\nAdd below code into your AppDelegate class:\nimport SDWebImage\n```\nSDImageCache.shared().config.maxCacheAge = 3600 * 24 * 7 //1 Week\nSDImageCache.shared().maxMemoryCost = 1024 * 1024 * 20 //Aprox 20 images\n//SDImageCache.shared().config.shouldCacheImagesInMemory = false //Default True => Store images in RAM cache for Fast performance\nSDImageCache.shared().config.shouldDecompressImages = false\nSDWebImageDownloader.shared().shouldDecompressImages = false\nSDImageCache.shared().config.diskCacheReadingOptions = NSData.ReadingOptions.mappedIfSafe\n```\nHow to use:\n//MARK:- Load Image with Activity Indicator\n```\n    func loadImageWith(imgView: UIImageView, url: String?) {\n    imgView.sd_setShowActivityIndicatorView(true)\n    imgView.sd_setIndicatorStyle(UIActivityIndicatorViewStyle.gray)\n    if url != nil {\n        imgView.sd_setImage(with: URL.init(string: url!), placeholderImage: UIImage.init(named: \"ic_placeholder\"), options:SDWebImageOptions.scaleDownLargeImages, completed: { (image: UIImage?, error: Error?, cacheType: SDImageCacheType, url: URL?) in\n\n            if ((error) != nil) {\n                imgView.image = UIImage.init(named: \"ic_placeholder\")\n            }\n        })\n    }\n    else{\n        imgView.image = UIImage.init(named: \"ic_placeholder\")\n    }\n}\n\n``loadImageWith(imgView: cell.imgViewProduct, url: product.p_image)`\n. ",
    "jokerYellow": "great work.Thanks @smindia1988 . ",
    "Sneakr": "Hi , thanks for the quick reply,\nI have tried that already, I set the imageView.image to nil, \nI also tried setting it hidden = YES and unhide it after the image is found and set in the queryDiskCacheForKey, it doesnt help neither. \nThis problem is harder to reproduce on the latests iphones since the calculation is faster. If you try it on an iphone 6, you need to scroll down like 50 images, then I scroll really fast, or press the status bar for autoscroll to top. But If I try this on an older Ipad or 4s , you dont need to scroll as fast to generate the problem.\nAs I mentioned earlier, the queryDiskCacheForKey runs even when the cell is out of view, so the solution I think is to somehow stop the query if the cell is out of view, or in prepareForReuse (?)\nI am testing this on Ipad, 4s, and iphone6 all latest iOS version.\n. I will give it a try now\n. Unfortunately I cant run the demo project it seems , since I import the class files manually to my project and not installed anything else other than Xcode. \nBut the bug seems to take a couple times to reproduce, while scrolling 40+ images and letting all the images load so it saves to disk with :\n[[SDImageCache sharedImageCache] storeImage:image forKey:mediaContentKey toDisk:YES];\nAfter I have scrolled to the bottom, I just press the status bar for autoscroll to top, and the top cell image sometimes end up with the wrong image. Ive set a breakpoint in -\n[_cellImageCache queryDiskCacheForKey:mediaContentKey done:^(UIImage *image, SDImageCacheType cacheType) {\n        if (image) {\n                _cellImageView.image = image;\n                _cellImageView.hidden = NO;\n        } \nWhen pressing the status bar to scroll to the top, above code seems to run 3-4 times seeing it with breakpoint. It isnt always reproducable and for the most part works fine, but occurs fairly enough to become a problem.\nFurther investigation to easier reproduce the problem:\nWhen scrolling down and loading like 40+ images, I scroll back top, and i quickly scroll down and press the statusbar so it autoscrolls back to top WHILE i was in a fast scroll down. Then the top image sets to the wrong one. It is very easy to reproduce on older devices (iphone 4s , ipad etc) , but iphone 6 seems to calculate fast enough and have lower reproducable rates.\nIs there any way to cancel the query request ? I tried assigning the SDImageCache to a property, and setting it to nil in \"prepareForReuse\", but it seems to have same issue.\n. @mythodeia I have now managed to try out the demo. I had to subclass the tableViewCell and the error is reproducable, even worse than on my own project.\nAllso on the side note, i commented in the project youll see in MasterViewController.m , that on older devices, the didRecevieMemoryWarning causes app crash and black screen. (same with both my ipad and 4s testing devices) I had to set cache limit there as I show you in the demo project how to avoid that crash. I thought this only happened in my project but seem to happen in the demo project too. \nThe demo-project is here:\nhttps://www.dropbox.com/sh/62604g89td1x3d1/AABWBwoCzqfqms8wI79tqNo9a?dl=0\nThanks for your support and otherwise a great package! \n. Tutorial to reproduce error:\nVisual error 1 (multiple changes in image, but correct image in the end gets set):\n1: Scroll down to bottom, let all the images finish loading and get cached on the way.\n2: Press status bar for quick scroll to top.\nVisual error 2 (multiple changes in image, and wrong image sets in the end):\n1: Scroll down to bottom, let all the images finish loading and get cached on the way.\n2: Scroll back to top. \n3: Scroll down really fast, while scrolling, once press status bar and see the top image sets to wrong one.\n. I missed out that the sd_setimage... had a progress count too, I tried to change the code to \n[_mediaImageView sd_setImageWithURL:mediaurl placeholderImage:nil options:0 progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n        } completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n        }];\nand now it works fine! Thank you :) Awesome!!!! I didnt know the sd_setImageWithUrl saves the file to disk (?) If it does, then everything is fine this way Ill change my code! Thanks again\nEdit:\nIt does save the file to disk right?\n. Awesome bro! Really great. Thanks again for taking your time! :) \n. ",
    "iOSPandaLee": "Recently, many people encountered this problem and, if necessary, then please merge\n. ",
    "MarkTangs": "in SDWebImageDecoder.m\n. I was just updated\n. ",
    "xiaoxiaoguang": "hello I want to know the function SDScaledImageForKey in SDScaledImageForKey.h;\nwhy when the image.images.count == 0 need to do this\n```\n            if (key.length >= 8) {\n                NSRange range = [key rangeOfString:@\"@2x.\"];\n                if (range.location != NSNotFound) {\n                    scale = 2.0;\n                }\n            range = [key rangeOfString:@\"@3x.\"];\n            if (range.location != NSNotFound) {\n                scale = 3.0;\n            }\n        }\n\n```\n. key.length >= 8      how can i know\n. ",
    "Qingzhaowang": "First ,click the home button, enter the background. Then enter again, has follow problem.\n\"\nlet houseImageView = UIImageView()\nhouseImageView.sd_setImageWithURL(NSURL(string: item.housePicUrl))\"\nhouseImageView.image is nil.\n. but ,open the url can see the image.\nWhat requirement should the image url  satisfy\uff1f\n. The problem has been solved. The solution is follow:\nhousePicUrl = \"http://7xrx6o.com1.z0.glb.clouddn.com/House-78348ed3-1188-4c67-bde5-788bbac73c3d_0_1_0_FD.png\"\nlet houseImageView = UIImageView()\nhouseImageView.sd_setImageWithURL(NSURL(string: housePicUrl), completed: { completed in\n      //  Here, houseImageView.image is not  nil\n})\n. ",
    "khoren93": "+1\n. ",
    "gorbat-o": "Hi,\nThis issue is still valid. \nLast version on this library and it is still change the content mode for some reason.\nThanks. ",
    "biluncloud": "@bpoplauschi Do you have any idea? \n. @bpoplauschi I've already updated to the newer version, but this fix still seems strange to me. \n. ",
    "kobe1941": "I will update it,thanks\n. ",
    "JanzTam": "so can support\uff1f\n. Thanks,man.\n. Nice~\n. ",
    "YangYouYong": "so can support ?\n. ",
    "yu275184637": "excuse me\uff0cI would like to know SDWebImage 4 when it is expected to release?\n. I've had the same problem. half is gray.\n. \n@flexih @bpoplauschi  point to the image, half is gray.\nversion 3.8.1\n. ",
    "tehnoir": "Starting June 1st (today/tomorrow), Apple requires all app submissions to support IPv6. Apps not supporting IPv6 may be rejected. https://developer.apple.com/news/?id=05042016a\n. ",
    "HWSTS": "Hi there, my app was rejected 3 times for the IPV6 issue .\ni only use Backendless  as backend & SDWebImage for download images (Vresion 3.8) from the Backend \ni just wanna be sure if any 1 still has this issue . the backendless support team replay ensure that their SDK fully support for IPV6 \n. ",
    "ryandailey100": "Hi I am on the latest 4.0 version and I am having this problem. Apple rejects my app due to a lack of IPv6 support. When will this be fixed?. ",
    "hw20101101": "ok\uff0cthank you\n. ",
    "Jasonmax1314": "I found out the root cause reason : I'm in china!!! sorry...\n. ",
    "Syhpox": "ok,I didn't notice,Thank you!\n. ",
    "NSKevin": "@mythodeia I have a lot of Gif in my UITableView and When I select one it will turn into big photo browse mode. It still crash with some gif and the log shows that\uff1a\n\nType:  00000020\nException Codes: 0x000000008badf00d\nException Note:  SIMULATED (this is NOT a crash)\nHighlighted by Thread:  0\nApplication Specific Information:\ncom.XXX.XXX failed to launch after 20.00s (launchIntent: foreground-interactive)\nElapsed total CPU time (seconds): 1.770 (user 1.770, system 0.000), 4% CPU \nElapsed application CPU time (seconds): 0.000, 0% CPU\nFiltered syslog:\nNone found\nThread 0:\n0   dyld                            0x0000000120051000 _dyld_start + 0\nNo thread state (register information) available\nBinary Images:\n0x120050000 - 0x12007ffff dyld arm64   /usr/lib/dyld\n. Terminated due to Memory Pressure\n. @bpoplauschi First of all, thank you for your working on SDWebImageView with  FLAnimatedImageView. Yesterday\uff0cI copyed your code(SDWebImage with FLAnimatedImageView) into my project and the SDWebImage is the newest one. Then I used your commit code to cover it (https://github.com/rs/SDWebImage/pull/1575/files). And I have a UITableView with a lot of gif. Then I scrolled it fast, it crashed at SDWebImageManager.m line 61. The log shows that url is nil. Then I add a safe check on url . Everything goes well. So I created a pull request #1585. Hope it can be merged\n: )\n\nIssue Info\n| Info | Value |\n| --- | --- |\n| Platform Name | ios |\n| Platform Version | 8.0 |\n| SDWebImage Version | 3.7.6 |\n| Integration Method | manually |\n| Xcode Version | Xcode 7.1 |\n| Repro rate | all the time |\n| Repro with our demo prj | no |\n| Demo project link | null |\n. ",
    "eggswift": "@bpoplauschi \nWhy you change sd_animatedGIFWithData: method to return 1frame image?\nMaybe need compatibility with UIImageView.\n1836\n. @bpoplauschi \nThanks for this help very much : ) \nI know that you recommend people to use FLAnimatedImage for the GIFs, but as I know, FLAnimatedImage still have some todo works, especially support other animated image formats such as APNG or WebP, this requirement hit me so much in our project.\nI think there r lots of people using UIImageView to display GIFs now, and it seems that UIImageView can not display GIFs in SDWebImage 4.x.x. It's hard for us to upgrade it.\nSo I think we need to do a compatibility with UIImageView until FLAnimatedImage can works well with WebP or APNG and other requirement.\nWhat do you think? Thanks : )\n. #1745 . @bpoplauschi\n@mythodeia\n@harishkashyap\nPlease take a look. Thanks. @bpoplauschi  It seems to be a thorny issue , thanks! . ",
    "bernikowich-cedoni": "@mythodeia Is it bug or feature?\nI've found in SDWebImageDownloader.m:165-171 that all callbacks are removed when only one is canceled.\n. Yes.\n. @mythodeia removed all requests, but I expect removing one.\nMaybe this is related: https://github.com/rs/SDWebImage/pull/883\n. @mythodeia @bpoplauschi sorry for late answer. I've tested version 4.x and everything OK there. Thanks.\n. ",
    "lifayu27": "but i see, you change the libwebp git url ,people from China can access it!\n. ",
    "343415207": "If you are from china.\nhttp://www.jianshu.com/p/b2f4df042e62. ",
    "manajay": "@343415207 \u6587\u7ae0\u5df2\u7ecf\u88ab\u5c4f\u853d\u4e86. ",
    "yunzixun": "new link: http://www.swifty.cc/2110.htm. ",
    "ksi1024": "The performance has degraded considerably...\nOne session per operation doesn't look effecient...\n. This is what I did...\n`\n-(void)testDownload\n{\n    const int NUM = 100;\n    SDImageCache *imageCache = [SDImageCache sharedImageCache];\n    [imageCache clearMemory];\n    [imageCache clearDisk];\n```\nNSMutableArray ma = [NSMutableArray array];\nfor(int i = 0; i < NUM; i++){\n    NSURL url = [NSURL URLWithString:[NSString stringWithFormat:@\"http://192.168.0.4/imgtest/%04d.jpg\", i]];\n    [ma addObject:url];\n}\ndouble walltime = CACurrentMediaTime();\n[[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:ma\n                                                  progress:^(NSUInteger nFinished, NSUInteger nTotal){\n                                                  }\n                                                 completed:^(NSUInteger nFinished, NSUInteger nSkipped){\n                                                     double elapsed = CACurrentMediaTime() - walltime;\n                                                     NSLog(@\"prefetch complete %ld:%ld, time:%.5f\", (long)nFinished, (long)nSkipped, elapsed);\n                                                 }];\n```\n}\n`\nAll my images are in my local network, so they are not downloaded over the internet.\nThe results of 10 tests of this function call on each version are ...\nOn the new NSURLSession version\nprefetch complete 100:0, time:5.85780\nprefetch complete 100:0, time:5.91026\nprefetch complete 100:0, time:5.87697\nprefetch complete 100:0, time:5.81416\nprefetch complete 100:0, time:5.86340\nprefetch complete 100:0, time:5.92389\nprefetch complete 100:0, time:5.83060\nprefetch complete 100:0, time:5.82697\nprefetch complete 100:0, time:5.88768\nprefetch complete 100:0, time:5.81552\nOn the old NSURLConnection version\nprefetch complete 100:0, time:4.99280\nprefetch complete 100:0, time:5.03693\nprefetch complete 100:0, time:5.02878\nprefetch complete 100:0, time:4.98112\nprefetch complete 100:0, time:4.99763\nprefetch complete 100:0, time:5.08970\nprefetch complete 100:0, time:5.10741\nprefetch complete 100:0, time:5.05379\nprefetch complete 100:0, time:4.98516\nprefetch complete 100:0, time:5.00968\nSo, prefetching 100 pics on the old version performs roughly 0.8sec better.\nAlthough testing only shows a slight difference,\nthe performance degrade is clearly noticable when it comes to calling\n[UIImageView sd_setImageWithURL: placeholderImage: options: completed:]\non UITableViewCells while scrolling them down a UITableView.\n. Tried single session for all task and session per task on the new code...\noperation = [[wself.operationClass alloc] initWithRequest:request\n                                                    inSession:self.session  <-- switch this with nil\n                                                      options:options\n                                                     progress:^(NSInteger receivedSize, NSInteger expectedSize) {...\nOnly made slight difference when batch downloading 100 images in my environment, but the image downloading in UITableView cells are now responsive again!  So it is performing as expected.  Thank you all! \ud83d\udc4d\n. ",
    "oanapopescu": "Thank you @ksi1024 \nI'll take a look this weekend and attempt to use a single session for all operations.\n. @ksi1024 I updated the implementation and we're now using a single session for all the image tasks. Please take a look at #1586 \nThanks again for your feedback!\nI profiled the single url session version and it took 32 seconds on an iPhone 5 (WiFi) to download 100 images over the internet. This is an improvement as using multiple url sessions took 54 seconds under the same conditions.\n. Done. Thanks!\n. ",
    "neilabdev": "+1  (Retraction: I thought this was the issue, but was something else. 4.0 is working in this regard for me). ",
    "sauchye": "@CavalcanteLeo  Hi, the same issues, but now version not method\n[[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO];\nVersion 4.3.3 when i reload cell imageView Flickering, if you know please tell me, thank u :). @bpoplauschi @CavalcanteLeo Hi , same issues, but Version 4.3.3 not  this method \n[[SDImageCache sharedImageCache] setShouldCacheImagesInMemory:NO];\nif you know, please tell me ,thank u  :). ",
    "fysteven": "Not sure how large the image was, since the bug happened on a user's device.\n. \u54a6\uff1f\u4f60\u600e\u4e48\u77e5\u9053\u6211\u662f\u4e2d\u56fd\u4eba\uff1f\n\u6682\u65f6\u6ca1\u6709\u4ec0\u4e48\u89e3\u51b3\u601d\u8def\u3002\u53ef\u80fd\u662f\u56e0\u4e3a\u5360\u7528\u8fc7\u591a\u5185\u5b58\uff0c\u7136\u540e\u5c31\u5d29\u4e86\u3002\n\u56e0\u4e3a\u5185\u5b58\u5360\u7528\u60c5\u51b5\u6ca1\u6cd5\u91cd\u73b0\uff0c\u6240\u4ee5\u4e5f\u4e0d\u662f\u6bcf\u6b21\u90fd\u80fd\u5d29\u6e83\u3002\n\u53e6\u5916\u4e00\u70b9\u662fiOS 7\u53ef\u80fd\u6bd4\u8f83\u8001\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u88ab\u540e\u7eed\u7684\u7248\u672c\u4fee\u590d\u4e86\u3002\n. ",
    "xxg90s": "\u6211\u9047\u5230\u4e86\u540c\u6837\u7684\u95ee\u9898\uff0c\u51fa\u73b0\u4e864s\u8bbe\u5907\u4e0a\uff0c\u56fe\u7247\u5927\u5c0f106kb\uff0c\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u65e0\u6cd5\u91cd\u73b0\uff0c\u6709\u89e3\u51b3\u601d\u8def\u5417\uff1f\n. ",
    "myriky": "@bpoplauschi It works good at 3.8.1. Thank you :)\n. ",
    "indieshack": "That's odd, I created a new TVOS project and imported SDWebImage source\nfiles and don't see the error there. I wonder why I'm getting this error in\nmy code? Without SDWebImage my code compiles/runs fine. Any suggestions why\nthis particular protocol interface would bomb? I've even deleted the\nSDWebImageOperation.h file and re-wrote it in case it was a file corruption\nissue. But using SDWebImage either by manually installing or CocoaPods\ngives the same issue.\nOn Fri, Jun 10, 2016 at 6:54 AM, Bogdan Poplauschi <notifications@github.com\n\nwrote:\nCould you create a demo project with this issue?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1592#issuecomment-225187824, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AIJ455BNTUoBGzffcNwsQF1N_bS2I9hAks5qKWyCgaJpZM4Iy7Is\n.\n\n\nGreg Quinn\nIndieshack Studios\nOffice: (858) 876-4023  Mobile: (760) 612 4808\n. OK, my bad - another file (nothing to do with SDWebImage) had no closure. It's rank amateur time folks...\nApologies for the post.\n. ",
    "corydolphin": "Hi Bogdan,\nSorry but I don\u2019t have cycles to help out on this since I\u2019ve shifted away\nfrom iOS for the time being.\nThank you for your work, sorry I\u2019m not better equipped to help out at this\ntime.\nCory\nOn Mon, Nov 5, 2018 at 5:12 AM Bogdan Poplauschi notifications@github.com\nwrote:\n\nPing @corydolphin https://github.com/corydolphin\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/SDWebImage/SDWebImage/pull/1593#issuecomment-435868696,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAbRqWX3LjqcaS7zI6ftFLF3t-kc8uQMks5usDlBgaJpZM4IztG_\n.\n. \n",
    "mingyue1991": "by the way , i find SD observe UIApplicationDidReceiveMemoryWarningNotification and removeAllObject two times, one is in AutoPurgeCache init method. another is SDImageCache init method then call clearMemory.they do the same thing ,is it duplicate?(it does't relate my issue)\n. ",
    "iosnatarajan": "Resolved the image Cache issues #821 and #1305.\n. Resolved the image Cache issues #821 and #1305.\n. @bpoplauschi How long will it take to merge this pull request?\nThanks!\n. ",
    "MoridinBG": "I tried this fork, as I needed a cache aware way to fetch large images, that may change behind a static URL.\nI am using the sd_setImageWithURL method on UIImageView with the RefreshCached option.\nFetches fine the first time after app restart and monitoring the network it looks like it downloads the full image only if it is changed, otherwise uses the cache.\nBut on follow up calls to sd_setImageWithURL within  the same app run it sets an empty image? If I restart the app it sets the correct image the first time, then again empty.\nThis affects any UIImageView that I try to set the image on with an URL that has already been fetched.\nI am severely time pressed, so I can't dive into this right now and will just force reload the image every time I fetch it, but will try to get back to this in a few days.\n. ",
    "revolter": "Any news for this PR?\n. ",
    "757388559": "@bpoplauschi  i have update the problem\n. @mythodeia  yeah ! i have tested another demo with real,it don't work also and  have the same error.\ni use the real test. \n. @mythodeia i have known the reasons, because of our searvers. very thanks for you\n. ",
    "haoxueren": "Thank you for you answer, if I can not get cookies directly, can I modify the source code to provide a enter method?\n. ",
    "gitspider": "I've checked the url mentioned is working. Could you test with this one? http://api.limologs.com/v1/limo/vehicle_diagram?cls_id=3\n. I can download image from redirecting url by default methods such as NSData(contentsOfURL: url) or NSURLConnection.\nI hope you will update the library to work with such redirecting urls.\n. ",
    "HuiiChong": "yes, when I clean the Derived Data and rebuild it. and it's ok now. this reason is I update form older version. so it's my misstake. I feel sorry about it.\n. ",
    "tzm529": "@HuiiChong Thank you very mach\n. ",
    "salimgcet": "Can anyone update if you know the issue ?\n. Thanks for the quick response.\nPlease find the attached demo code for the issue.\ntestCarApp.zip\n. ",
    "kudocc": "@bpoplauschi Hope it can be added in. : )\n. ",
    "aartivarma": "Neither of those fixed the issue, even trying various permutations of closing xcode, deleting DerivedData, and pod install-ing. But I also suspect this is an Xcode issue. Thanks for the help!\n. ",
    "ikovalisko": "I've fixed these errors by using @import SDWebImage; everywhere in the project. Make sure you don't import a single header from this framework manually.\n. ",
    "nahlam": "I don't want to disable for all images requests i need to cache only specific ones\n. ",
    "smogun": "We have also plenty of exactly the same crashes. It started to happen after updating to a version with NSURLSession\n. Thanks. Will test it. However this issue very hard to reproduce.\nI also did some investigation and found that there are different NSOperation objects being used by SDWebImageManager and SDWebImageDownloader. The Manager uses NSOperation while Downloader uses sublcass of it and it has implementation very similar to a workaround suggested here:  http://stackoverflow.com/questions/9409994/cancelling-nsoperation-from-nsoperationqueue-cause-crash\nI'm using Manager object and I have crashes there. So I think this might be the problem.\n. ",
    "romk1n": "@smogun have you manage to reproduce it, I am wondering if that's relevant to the url query changes which were revered in 3.8.1 and if it fixes the crash?\n. i am just curios if it is safe to downgrade to 3.7.6 \n. @bpoplauschi here the one i found http://crashes.to/s/4af2fa1f4c7\n. ",
    "asenchuk": "Confirm. After updating to 3.8.1 (from 3.7.6) getting lots of crashes with same reason:\nCrashed: NSOperationQueue 0x144ff0570 :: NSOperation 0x14602c890 (QOS: LEGACY)\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS 0x0000000000000000\nInteresting that all crashes even don't have SDWebImage in the stack trace so found that ticket only after investigation what I updated since previous version so getting so many crashes. Don't think it's a coincidence.\n. ",
    "leosjcho": "luckily I had this happen while I was debugging. here's the output of bt all. hopefully it's of some help.\n```\nwarning: could not load any Objective-C class information. This will significantly reduce the quality of type information available.\nthread #1: tid = 0x10e731, 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8, queue = 'com.apple.main-thread'\nframe #0: 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8\n\nframe #1: 0x0000000188d731bc libsystem_kernel.dylib`mach_msg + 72\n\nframe #2: 0x00000001891ade64 CoreFoundation`__CFRunLoopServiceMachPort + 192\n\nframe #3: 0x00000001891aba80 CoreFoundation`__CFRunLoopRun + 1132\n\nframe #4: 0x00000001890de2e4 CoreFoundation`CFRunLoopRunSpecific + 292\n\nframe #5: 0x000000018aab715c GraphicsServices`GSEventRunModal + 180\n\nframe #6: 0x000000018eff26fc UIKit`-[UIApplication _run] + 692\n\nframe #7: 0x000000018efed438 UIKit`UIApplicationMain + 208\n\nframe #8: 0x000000010016f550 Project`main(argc=1, argv=0x000000016fd3ba18) + 124 at main.m:16\n\nframe #9: 0x0000000188c80600 libdyld.dylib`start + 4\n\nthread #3: tid = 0x10e782, 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\nframe #0: 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\n\nframe #1: 0x0000000188e52298 libsystem_pthread.dylib`_pthread_wqthread + 956\n\nframe #2: 0x0000000188e51ed0 libsystem_pthread.dylib`start_wqthread + 4\n\nthread #4: tid = 0x10e783, 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\nframe #0: 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\n\nframe #1: 0x0000000188e5247c libsystem_pthread.dylib`_pthread_wqthread + 1440\n\nframe #2: 0x0000000188e51ed0 libsystem_pthread.dylib`start_wqthread + 4\n\n\n\nthread #5: tid = 0x10e784, 0x000000018880aa50 libobjc.A.dylib`objc_msgSend + 16, queue = 'NSOperationQueue 0x174025e60 :: NSOperation 0x17425bc90 (QOS: LEGACY)', stop reason = EXC_BAD_ACCESS (code=1, address=0xcb1d0beb8)\nframe #0: 0x000000018880aa50 libobjc.A.dylib`objc_msgSend + 16\nframe #1: 0x0000000189976948 CFNetwork`-[NSURLCache cachedResponseForRequest:] + 124\n\n\nframe #2: 0x0000000103711574 SDWebImage`-SDWebImageDownloaderOperation URLSession:task:didCompleteWithError: + 748 at SDWebImageDownloaderOperation.m:407\nframe #3: 0x000000010370d8a0 SDWebImage`-SDWebImageDownloader URLSession:task:didCompleteWithError: + 184 at SDWebImageDownloader.m:306\nframe #4: 0x000000018996dee8 CFNetwork`__51-[NSURLSession delegate_task:didCompleteWithError:]_block_invoke.185 + 72\nframe #5: 0x0000000189c58428 Foundation`NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK + 16\nframe #6: 0x0000000189ba61ac Foundation`-[NSBlockOperation main] + 96\nframe #7: 0x0000000189b967a4 Foundation`-[__NSOperationInternal _start:] + 620\nframe #8: 0x0000000189c5a810 Foundation`__NSOQSchedule_f + 224\nframe #9: 0x0000000103ffd1d4 libdispatch.dylib`_dispatch_client_callout + 16\nframe #10: 0x000000010400ae70 libdispatch.dylib`_dispatch_queue_serial_drain + 1132\nframe #11: 0x0000000104000db8 libdispatch.dylib`_dispatch_queue_invoke + 744\nframe #12: 0x000000010400d058 libdispatch.dylib`_dispatch_root_queue_drain + 584\nframe #13: 0x000000010400cda8 libdispatch.dylib`_dispatch_worker_thread3 + 140\nframe #14: 0x0000000188e523d8 libsystem_pthread.dylib`_pthread_wqthread + 1276\nframe #15: 0x0000000188e51ed0 libsystem_pthread.dylib`start_wqthread + 4\n\n\nthread #6: tid = 0x10e785, 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\nframe #0: 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\n\nframe #1: 0x0000000188e5247c libsystem_pthread.dylib`_pthread_wqthread + 1440\n\nframe #2: 0x0000000188e51ed0 libsystem_pthread.dylib`start_wqthread + 4\n\nthread #7: tid = 0x10e786, 0x0000000103b78090 libswiftCore.dylib`@objc Swift._NSContiguousString._fastCharacterContents () -> Swift.UnsafeMutablePointer, queue = 'com.apple.NSURLSession-work'\nframe #0: 0x0000000103b78090 libswiftCore.dylib`@objc Swift._NSContiguousString._fastCharacterContents () -> Swift.UnsafeMutablePointer<Swift.UInt16>\n\nframe #1: 0x00000001890ec260 CoreFoundation`CFStringCompareWithOptionsAndLocale + 1620\n\nframe #2: 0x0000000189b99174 Foundation`-[NSString isEqualToString:] + 76\n\nframe #3: 0x0000000189b9910c Foundation`-[NSString isEqual:] + 68\n\nframe #4: 0x00000001890db94c CoreFoundation`CFEqual + 380\n\nframe #5: 0x00000001890dc904 CoreFoundation`CFBasicHashAddValue + 852\n\nframe #6: 0x00000001890dd8bc CoreFoundation`CFDictionaryAddValue + 256\n\nframe #7: 0x0000000189846394 CFNetwork`__CFURLCache::CreateAndStoreCacheNode(__CFURLCacheNode*, _CFCachedURLResponse const*, __CFString const*, _CFURLRequest const*, void const*, bool, bool&) + 724\n\nframe #8: 0x0000000189845ffc CFNetwork`__CFURLCache::AddCacheTask0(std::__1::unique_ptr<__CFURLCacheNode, std::__1::default_delete<__CFURLCacheNode> >&) + 472\n\nframe #9: 0x0000000189845df8 CFNetwork`__CFURLCache::AddCacheTask(std::__1::unique_ptr<__CFURLCacheNode, std::__1::default_delete<__CFURLCacheNode> >&) + 52\n\nframe #10: 0x00000001898480d8 CFNetwork`__CFURLCacheAddCachedResponseForRequestWithSession(_CFURLCache const*, NSURLSession const*, _CFCachedURLResponse const*, _CFURLRequest const*, void const*) + 732\n\nframe #11: 0x000000018987870c CFNetwork`__57-[__NSCFURLLocalSessionConnection afterDelegateWithTick:]_block_invoke + 72\n\nframe #12: 0x0000000103ffd214 libdispatch.dylib`_dispatch_call_block_and_release + 24\n\nframe #13: 0x0000000103ffd1d4 libdispatch.dylib`_dispatch_client_callout + 16\n\nframe #14: 0x000000010400ae70 libdispatch.dylib`_dispatch_queue_serial_drain + 1132\n\nframe #15: 0x0000000104000db8 libdispatch.dylib`_dispatch_queue_invoke + 744\n\nframe #16: 0x000000010400d058 libdispatch.dylib`_dispatch_root_queue_drain + 584\n\nframe #17: 0x000000010400cda8 libdispatch.dylib`_dispatch_worker_thread3 + 140\n\nframe #18: 0x0000000188e523d8 libsystem_pthread.dylib`_pthread_wqthread + 1276\n\nframe #19: 0x0000000188e51ed0 libsystem_pthread.dylib`start_wqthread + 4\n\nthread #9: tid = 0x10e791, 0x0000000188d912f0 libsystem_kernel.dylib`__semwait_signal + 8, name = 'gputools.smt_poll.0x174021b40'\nframe #0: 0x0000000188d912f0 libsystem_kernel.dylib`__semwait_signal + 8\n\nframe #1: 0x0000000188cb0774 libsystem_c.dylib`nanosleep + 212\n\nframe #2: 0x0000000188cb0694 libsystem_c.dylib`usleep + 64\n\nframe #3: 0x0000000104095874 GPUToolsCore`smt_poll_thread_entry(void*) + 136\n\nframe #4: 0x0000000188e549bc libsystem_pthread.dylib`_pthread_body + 240\n\nframe #5: 0x0000000188e548cc libsystem_pthread.dylib`_pthread_start + 276\n\nframe #6: 0x0000000188e51ed8 libsystem_pthread.dylib`thread_start + 4\n\nthread #10: tid = 0x10e794, 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8, name = 'com.apple.uikit.eventfetch-thread'\nframe #0: 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8\n\nframe #1: 0x0000000188d731bc libsystem_kernel.dylib`mach_msg + 72\n\nframe #2: 0x00000001891ade64 CoreFoundation`__CFRunLoopServiceMachPort + 192\n\nframe #3: 0x00000001891aba80 CoreFoundation`__CFRunLoopRun + 1132\n\nframe #4: 0x00000001890de2e4 CoreFoundation`CFRunLoopRunSpecific + 292\n\nframe #5: 0x0000000189b8893c Foundation`-[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 304\n\nframe #6: 0x0000000189ba9460 Foundation`-[NSRunLoop(NSRunLoop) runUntilDate:] + 96\n\nframe #7: 0x000000018f928134 UIKit`-[UIEventFetcher threadMain] + 136\n\nframe #8: 0x0000000189c73b9c Foundation`__NSThread__start__ + 1052\n\nframe #9: 0x0000000188e549bc libsystem_pthread.dylib`_pthread_body + 240\n\nframe #10: 0x0000000188e548cc libsystem_pthread.dylib`_pthread_start + 276\n\nframe #11: 0x0000000188e51ed8 libsystem_pthread.dylib`thread_start + 4\n\nthread #11: tid = 0x10e79c, 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8, name = 'com.apple.NSURLConnectionLoader'\nframe #0: 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8\n\nframe #1: 0x0000000188d731bc libsystem_kernel.dylib`mach_msg + 72\n\nframe #2: 0x00000001891ade64 CoreFoundation`__CFRunLoopServiceMachPort + 192\n\nframe #3: 0x00000001891aba80 CoreFoundation`__CFRunLoopRun + 1132\n\nframe #4: 0x00000001890de2e4 CoreFoundation`CFRunLoopRunSpecific + 292\n\nframe #5: 0x0000000189887a18 CFNetwork`+[NSURLConnection(Loader) _resourceLoadLoop:] + 336\n\nframe #6: 0x0000000189c73b9c Foundation`__NSThread__start__ + 1052\n\nframe #7: 0x0000000188e549bc libsystem_pthread.dylib`_pthread_body + 240\n\nframe #8: 0x0000000188e548cc libsystem_pthread.dylib`_pthread_start + 276\n\nframe #9: 0x0000000188e51ed8 libsystem_pthread.dylib`thread_start + 4\n\nthread #12: tid = 0x10e79f, 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8, name = 'com.squareup.SocketRocket.NetworkThread'\nframe #0: 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8\n\nframe #1: 0x0000000188d731bc libsystem_kernel.dylib`mach_msg + 72\n\nframe #2: 0x00000001891ade64 CoreFoundation`__CFRunLoopServiceMachPort + 192\n\nframe #3: 0x00000001891aba80 CoreFoundation`__CFRunLoopRun + 1132\n\nframe #4: 0x00000001890de2e4 CoreFoundation`CFRunLoopRunSpecific + 292\n\nframe #5: 0x0000000189b8893c Foundation`-[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 304\n\nframe #6: 0x00000001038febf0 SocketRocket`-[_SRRunLoopThread main](self=0x00000001702893d0, _cmd=\"main\") + 360 at SRWebSocket.m:1903\n\nframe #7: 0x0000000189c73b9c Foundation`__NSThread__start__ + 1052\n\nframe #8: 0x0000000188e549bc libsystem_pthread.dylib`_pthread_body + 240\n\nframe #9: 0x0000000188e548cc libsystem_pthread.dylib`_pthread_start + 276\n\nframe #10: 0x0000000188e51ed8 libsystem_pthread.dylib`thread_start + 4\n\nthread #13: tid = 0x10e7a0, 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8, name = 'com.apple.CoreMotion.MotionThread'\nframe #0: 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8\n\nframe #1: 0x0000000188d731bc libsystem_kernel.dylib`mach_msg + 72\n\nframe #2: 0x00000001891ade64 CoreFoundation`__CFRunLoopServiceMachPort + 192\n\nframe #3: 0x00000001891aba80 CoreFoundation`__CFRunLoopRun + 1132\n\nframe #4: 0x00000001890de2e4 CoreFoundation`CFRunLoopRunSpecific + 292\n\nframe #5: 0x000000018912b904 CoreFoundation`CFRunLoopRun + 112\n\nframe #6: 0x000000018fe030d4 CoreMotion`___lldb_unnamed_function2430$$CoreMotion + 824\n\nframe #7: 0x0000000188e549bc libsystem_pthread.dylib`_pthread_body + 240\n\nframe #8: 0x0000000188e548cc libsystem_pthread.dylib`_pthread_start + 276\n\nframe #9: 0x0000000188e51ed8 libsystem_pthread.dylib`thread_start + 4\n\nthread #14: tid = 0x10e7a1, 0x0000000188e51ecc libsystem_pthread.dylib`start_wqthread\nframe #0: 0x0000000188e51ecc libsystem_pthread.dylib`start_wqthread\n\nthread #15: tid = 0x10e7a2, 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8, name = 'AVAudioSession Notify Thread'\nframe #0: 0x0000000188d7334c libsystem_kernel.dylib`mach_msg_trap + 8\n\nframe #1: 0x0000000188d731bc libsystem_kernel.dylib`mach_msg + 72\n\nframe #2: 0x00000001891ade64 CoreFoundation`__CFRunLoopServiceMachPort + 192\n\nframe #3: 0x00000001891aba80 CoreFoundation`__CFRunLoopRun + 1132\n\nframe #4: 0x00000001890de2e4 CoreFoundation`CFRunLoopRunSpecific + 292\n\nframe #5: 0x00000001a24a8e60 AVFAudio`GenericRunLoopThread::Entry(void*) + 164\n\nframe #6: 0x00000001a24c6804 AVFAudio`CAPThread::Entry(CAPThread*) + 84\n\nframe #7: 0x0000000188e549bc libsystem_pthread.dylib`_pthread_body + 240\n\nframe #8: 0x0000000188e548cc libsystem_pthread.dylib`_pthread_start + 276\n\nframe #9: 0x0000000188e51ed8 libsystem_pthread.dylib`thread_start + 4\n\nthread #16: tid = 0x10e7a3, 0x0000000188d91218 libsystem_kernel.dylib`__select + 8, name = 'com.apple.CFSocket.private'\nframe #0: 0x0000000188d91218 libsystem_kernel.dylib`__select + 8\n\nframe #1: 0x00000001891b4d08 CoreFoundation`__CFSocketManager + 640\n\nframe #2: 0x0000000188e549bc libsystem_pthread.dylib`_pthread_body + 240\n\nframe #3: 0x0000000188e548cc libsystem_pthread.dylib`_pthread_start + 276\n\nframe #4: 0x0000000188e51ed8 libsystem_pthread.dylib`thread_start + 4\n\nthread #17: tid = 0x10e7a9, 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\nframe #0: 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\n\nframe #1: 0x0000000188e5247c libsystem_pthread.dylib`_pthread_wqthread + 1440\n\nframe #2: 0x0000000188e51ed0 libsystem_pthread.dylib`start_wqthread + 4\n\nthread #18: tid = 0x10e7ab, 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\nframe #0: 0x0000000188d91a88 libsystem_kernel.dylib`__workq_kernreturn + 8\n\nframe #1: 0x0000000188e5247c libsystem_pthread.dylib`_pthread_wqthread + 1440\n\nframe #2: 0x0000000188e51ed0 libsystem_pthread.dylib`start_wqthread + 4\n\n```\n. ",
    "ryancrunchi": "Same here from Fabric/Crashlytics for multiple users :\n```\nCrashed: NSOperationQueue 0x13f82c3d0 :: NSOperation 0x13e7a05c0 (QOS: LEGACY)\n0  libobjc.A.dylib                0x182f8c0b0 objc_retain + 16\n1  SDWebImage                     0x1005a1a6c -[SDWebImageDownloader URLSession:dataTask:willCacheResponse:completionHandler:] (SDWebImageDownloader.m:289)\n2  Foundation                     0x1842c8540 NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK + 16\n3  Foundation                     0x18421a870 -[NSBlockOperation main] + 96\n4  Foundation                     0x18420ae48 -[__NSOperationInternal _start:] + 604\n5  Foundation                     0x1842ca934 __NSOQSchedule_f + 224\n6  libdispatch.dylib              0x18335947c _dispatch_client_callout + 16\n7  libdispatch.dylib              0x1833654c0 _dispatch_queue_drain + 864\n8  libdispatch.dylib              0x18335cf80 _dispatch_queue_invoke + 464\n9  libdispatch.dylib              0x183367390 _dispatch_root_queue_drain + 728\n10 libdispatch.dylib              0x1833670b0 _dispatch_worker_thread3 + 112\n11 libsystem_pthread.dylib        0x183571470 _pthread_wqthread + 1092\n12 libsystem_pthread.dylib        0x183571020 start_wqthread + 4\n--\n5. com.hackemist.SDWebImageCache\n0  libsystem_kernel.dylib         0x183490724 mkdir + 8\n1  Foundation                     0x18421451c __49-[NSFileManager _URLForReplacingItemAtURL:error:]_block_invoke + 44\n2  Foundation                     0x184213efc -[NSFileManager _URLForReplacingItemAtURL:error:] + 1008\n3  Foundation                     0x1842cd854 _NSCreateTemporaryFile_Protected + 500\n4  Foundation                     0x184212fa8 _NSWriteDataToFileWithExtendedAttributes + 420\n5  Foundation                     0x184299b50 -[NSFileManager createFileAtPath:contents:attributes:] + 84\n6  SDWebImage                     0x10059c440 -[SDImageCache storeImageDataToDisk:forKey:] (SDImageCache.m:275)\n7  SDWebImage                     0x10059c21c __72-[SDImageCache storeImage:recalculateFromImage:imageData:forKey:toDisk:]_block_invoke (SDImageCache.m:245)\n8  libdispatch.dylib              0x1833594bc _dispatch_call_block_and_release + 24\n9  libdispatch.dylib              0x18335947c _dispatch_client_callout + 16\n10 libdispatch.dylib              0x1833654c0 _dispatch_queue_drain + 864\n11 libdispatch.dylib              0x18335cf80 _dispatch_queue_invoke + 464\n12 libdispatch.dylib              0x18335947c _dispatch_client_callout + 16\n13 libdispatch.dylib              0x183367914 _dispatch_root_queue_drain + 2140\n14 libdispatch.dylib              0x1833670b0 _dispatch_worker_thread3 + 112\n15 libsystem_pthread.dylib        0x183571470 _pthread_wqthread + 1092\n16 libsystem_pthread.dylib        0x183571020 start_wqthread + 4\n10. Crashed: NSOperationQueue 0x13f82c3d0 :: NSOperation 0x13e7a05c0 (QOS: LEGACY)\n0  libobjc.A.dylib                0x182f8c0b0 objc_retain + 16\n1  SDWebImage                     0x1005a1a6c -[SDWebImageDownloader URLSession:dataTask:willCacheResponse:completionHandler:] (SDWebImageDownloader.m:289)\n2  Foundation                     0x1842c8540 NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK + 16\n3  Foundation                     0x18421a870 -[NSBlockOperation main] + 96\n4  Foundation                     0x18420ae48 -[__NSOperationInternal _start:] + 604\n5  Foundation                     0x1842ca934 __NSOQSchedule_f + 224\n6  libdispatch.dylib              0x18335947c _dispatch_client_callout + 16\n7  libdispatch.dylib              0x1833654c0 _dispatch_queue_drain + 864\n8  libdispatch.dylib              0x18335cf80 _dispatch_queue_invoke + 464\n9  libdispatch.dylib              0x183367390 _dispatch_root_queue_drain + 728\n10 libdispatch.dylib              0x1833670b0 _dispatch_worker_thread3 + 112\n11 libsystem_pthread.dylib        0x183571470 _pthread_wqthread + 1092\n12 libsystem_pthread.dylib        0x183571020 start_wqthread + 4\n```\n. ",
    "nitikorndev": "I have the same issues too.\n\n. ",
    "alexisbronchart": "I'm also having this issue. Critical. Downgraded to 3.7.6.\n. ",
    "yshrkt": "I got same issue too.\n1623 looks like same issue.\n. this issue is happening on my app too.\nCrashed: NSOperationQueue 0x17d8b8e0 :: NSOperation 0x17dcc990 (QOS: LEGACY)\n0  libobjc.A.dylib                0x24bbba86 objc_msgSend + 5\n1  CFNetwork                      0x259e58e7 -[NSURLCache cachedResponseForRequest:] + 114\n2  SDWebImage                     0x10538b5 -[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:] + 460\n3  SDWebImage                     0x1051913 -[SDWebImageDownloader URLSession:task:didCompleteWithError:] + 92\n4  CFNetwork                      0x259de6fd __51-[NSURLSession delegate_task:didCompleteWithError:]_block_invoke170 + 76\n5  Foundation                     0x25c0684d __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__ + 8\n6  Foundation                     0x25b6787f -[NSBlockOperation main] + 146\n7  Foundation                     0x25b59f8f -[__NSOperationInternal _start:] + 774\n8  Foundation                     0x25c08b0d __NSOQSchedule_f + 192\n9  libdispatch.dylib              0x24f8de7f _dispatch_queue_drain + 1762\n10 libdispatch.dylib              0x24f86e17 _dispatch_queue_invoke + 282\n11 libdispatch.dylib              0x24f8f20d _dispatch_root_queue_drain + 400\n12 libdispatch.dylib              0x24f8f07b _dispatch_worker_thread3 + 94\n13 libsystem_pthread.dylib        0x25122e0d _pthread_wqthread + 1024\n14 libsystem_pthread.dylib        0x251229fc start_wqthread + 8\niPhone 5c / iOS 9.3.2 / SDWebImage 3.8.1 / Xcode 7.3.1\n. ",
    "bestwnh": "Hope anyone can try this https://github.com/rs/SDWebImage/issues/1623#issuecomment-236508764 , I just can't reproduce the crash by myself.\n. I don't know is this related issue, but more information always helpful, right? and seem the v3.8.1 actually have this issue.\nhttps://github.com/pinterest/PINRemoteImage/issues/92#issuecomment-163073075\na fix for the issue I mention is easy, but the bug is hard to reproduce by myself.(But it does reproduce again and again by user \ud83d\ude35  )\n. Sorry I post the wrong information. Just want to make some help for this weird issue. At least you get rid of one possibility, right? Let's stay positive. \ud83d\ude05 \n. ",
    "nearllopez": "Hi guys, \nSame problem (3.8.1)\nAny updates about it?\nThanks!\n. Hi guys,\nSame problem (3.8.1). Any updates about it?\nThanks!\n. ",
    "kaspermunck": "@bpoplauschi Did you file a radar on that race condition in NSURLCache (if yes, can you provide a link to it so I can dupe)? Recently we have received similar crash reports that seem to happen internally in NSURLCache -- not an SDWebImage issue, don't worry :-)\n0  CFNetwork                      0x2480f0a4 __CFURLCache::checkMemoryCache(__CFString const*, _CFURLRequest const*, NSURLSession const*) + 139\n1  libswiftCore.dylib             0x1a958f7 -[SwiftObject retain] + 10\n2  CFNetwork                      0x2480cd49 __CFURLCache::CopyResponseForRequestWithCompletionHandler(_CFURLRequest const*, bool, NSURLSession const*, void (_CFCachedURLResponse const*) block_pointer) + 336\n3  CFNetwork                      0x2480cf65 __CFURLCacheCopyResponseForRequest + 180\n4  CFNetwork                      0x2480d7cd __CFURLCacheCopyResponseForRequestInternalWithSession(_CFURLCache const*, _CFURLRequest const*, unsigned char, NSURLSession const*) + 104\n5  CFNetwork                      0x248c18b7 -[NSURLCache cachedResponseForRequest:] + 66\n. Dug a little deeper (i.e. actually studied the documentation of NSURLCache) and unfortunately it looks like the race condition is expected in certain cases (read more here).\n. ",
    "text2012": "\n\n. ",
    "lindow2009": "I've had the same problem.but when i clear cache and download again,it works done.so why and how to fix?\n. ",
    "knighthb": "me too , my SDWebImage version is 3.7.1.  It's there a little chance that this situation will happen when  the network jitter\uff0cand reach the success callback, in this case imageData.length may less than self.exceptedSize ?\n. ",
    "wanrui": "@knighthb update \n. @knighthb \u8bb2\u4e2d\u6587\u7684\u4eba\u5728\u8fd9\u91cc\u804a\u82f1\u6587\uff1f\n. ",
    "flexih": "@yu275184637  Same problem, hard to replicate.\n@knighthb the size is equal.\n. ",
    "zhouXiaoR": "me too,   but  we donnot find the reason.  is this a  BUG of \"SDWebimage\" ? The picture decode error sometimes.  help ! help! help !. When loading the images, sometimes the images appear black figure, white figure, or the image is not completely, Xcode will show the warning (JPEGDecompressSurface : Picture decode failed:).Whether for thread safety problem ?\n\n\n. @huangqiaobo \u6211\u4e5f\u5728\u63a7\u5236\u53f0\u770b\u5230\u4e86\u8fd9\u6837\u7684\u8b66\u544a\u9519\u8bef\uff08Picture decode failed:\uff09\uff0c\u6240\u4ee5\u6211\u4e5f\u5728\u6000\u7591\uff0c\u662f\u6211\u4eec\u670d\u52a1\u7aef\u6570\u636e\u4f20\u8f93\u7684\u9519\u8bef\uff0c\u8fd8\u662fSDWebImage\u7684Bug,\u6216\u8005\uff0c\u80fd\u4e0d\u80fd\u6709\u4e00\u4e2a\u7cfb\u7edf\u7684\u6216\u8005\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\u6765\u5224\u65ad\u67d0\u4e2a\u89e3\u7801\u51fa\u6765\u7684\u56fe\u7247\u662f\u5426\u6709\u8bef\uff0c\u8fd9\u6837\u4fbf\u4e8e\u518d\u6b21\u8bf7\u6c42\u3002. @mythodeia \uff0cthanks your reply, we are  looking for the cause of \"Picture decode failed\".Looking forward to your reply again!Thanks.. ",
    "KatkayApps": "wow, great information, thanks!\nOn Thu, Jul 7, 2016 at 8:12 PM, Konstantinos K. notifications@github.com\nwrote:\n\nyou can use this:\n```- (UIImage )imageManager:(SDWebImageManager )imageManager\ntransformDownloadedImage:(UIImage )image withURL:(NSURL )imageURL;\ndo your transforms inside and the result image will be the one that SDWebImage will cache\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1615#issuecomment-231178103, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AB9IukUWasKqhKwqI3A9SiOe7299PgJyks5qTU-6gaJpZM4JHRQS\n.\n. \n",
    "ad0ma": "how to resolve it?\n. ",
    "allanmacatingrao": "Any update on this?. ",
    "kpavankotesh": "Check this thread AFNetworking/AFNetworking#3595. ",
    "chinnuios": "@mythodeia , Thank you for reply. In demo project working is fine. But here not working, actually we are developing chat app .whenever we have send image to user, its going with blank image and its shown after scrolling ..i don't know where i am mistake . please help me\nThank you\n. ",
    "jjj2mdd": "\nSomething wrong occurred in place \"1\", this could cause resourceValues with nil value, thus, cause place \"2\" set a nil value into cacheFiles dictionary\n. @rs @JasF @jparise \n. @jimmaye You've found out the scene where the crash happened. Anyway, rule out the reason of system's version, I think author shoud do something to prevent it and keep the code stronger.\n. @jimmaye , - resourceValuesForKeys:error: seems too weird, your PR might not fix the issue\n\n. @jimmaye , sorry bro.\nYet there is a risk, that value will return nil as well as error. \n. ",
    "fengyecsg": "\u6211\u4e5f\u9047\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u89e3\uff1f\u6c42\u6559\u3002\n. ",
    "jimmaye": "I'm seeing a rise in these exceptions due to public beta and an imminent release of iOS10. \nUsually happens when an user sends the app to the background. \nI don't have a demo project with 100% chance to reproduce, but setting the cache timeout to 1 second and sending the app into the background(after some images have been cached) seems to make the app crash quite frequently(to then be able to reproduce and fix of course).\n. @wujichao \nI'll submit a PR later today with my correction of the bug. After this fix, I no longer see any crashes. For your convenience, I've pasted a screenshot of the diff below:\n\n. @wujichao Seems like we're having different issues then. I've submitted a PR which fixes the problem I'm seeing, and added a unit test that actually touches the code which cleans up images. I was unable to reproduce the error in the unit test.\n. @jjj2mdd \nI've shipped a new release of the app I'm working at weeks ago, and according to crash reports, the crash is not happening anymore, hence I believe it fixes it (at least the crash we've experienced).\n. @wujichao I saw around 200 crashes/day when it peaked - now I have 0. I guess there could be a bug which Apple hopefully will fix at some point\n@jjj2mdd Np bro, I guess one still has to guard against nil\n. @jeffctown \nMy comment from 9th september in this issue explains the steps I took to be able to reproduce the issue. Could be something like [[SDImageCache sharedImageCache] setMaxCacheAge:1]; to set a very short max cache age(remember to revert this change). I hope it can help you reproduce the crash somehow.\n. Forgot to update my fork, should be able to merge w/o conflicts now.. ",
    "wujichao": "@jjj2mdd It seems not working. I changed my code as you noted, link, but it still crashes on line NSDictionary *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&error]; itself. It seems a bug of Apple not SDWebImage.\nCrashed: com.hackemist.SDWebImageCache\n0  libsystem_kernel.dylib         0x1888fe014 pthread_kill + 8\n1  libsystem_pthread.dylib        0x1889c5460 pthread_kill + 112\n2  libsystem_c.dylib              0x1888723f4 abort + 140\n3  libsystem_malloc.dylib         0x188942a38 nano_vet_and_size_of_live + 330\n4  libsystem_malloc.dylib         0x188943db8 nano_free + 220\n5  CoreFoundation                 0x1898dfe8c _CFRelease + 1264\n6  CoreServicesInternal           0x19f7e2ba0 SetNameAndExtensionLengthFromCString(__CFAllocator const, char const_, long, FileAttributes) + 48\n7  CoreServicesInternal           0x19f7e1ee0 parseAttributeBuffer(__CFAllocator const_, unsigned char const_, unsigned char, attrlist const_, void const_, void, FileAttributes, unsigned int_) + 320\n8  CoreServicesInternal           0x19f7e0148 corePropertyProviderPrepareValues(CFURL const_, __FileCache_, __CFString const_ const_, void const, long, void const_, __CFError) + 804\n9  CoreServicesInternal           0x19f7d9ac8 prepareValuesForBitmap(__CFURL const_, __FileCache_, _FilePropertyBitmap*, __CFError) + 256\n10 CoreServicesInternal           0x19f7d80e8 FSURLCopyResourcePropertiesForKeysInternal(__CFURL const, __CFArray const_, void_, __CFError_*, unsigned char) + 832\n11 CoreFoundation                 0x189905948 CFURLCopyResourcePropertiesForKeys + 300\n12 CoreFoundation                 0x189967684 -[NSURL resourceValuesForKeys:error:] + 192\n13 HiPDA                          0x10021e0f0 __45-[SDImageCache cleanDiskWithCompletionBlock:]_block_invoke (SDImageCache.m:497)\n14 libdispatch.dylib              0x1887b9200 _dispatch_call_block_and_release + 24\n15 libdispatch.dylib              0x1887b91c0 _dispatch_client_callout + 16\n16 libdispatch.dylib              0x1887c7444 _dispatch_queue_serial_drain + 928\n17 libdispatch.dylib              0x1887bc9a8 _dispatch_queue_invoke + 652\n18 libdispatch.dylib              0x1887c7940 _dispatch_queue_override_invoke + 360\n19 libdispatch.dylib              0x1887c938c _dispatch_root_queue_drain + 572\n20 libdispatch.dylib              0x1887c90ec _dispatch_worker_thread3 + 124\n21 libsystem_pthread.dylib        0x1889c12c8 _pthread_wqthread + 1288\n22 libsystem_pthread.dylib        0x1889c0db4 start_wqthread + 4\n. @jimmaye  I do the same thing as you, in my fork, but it still crash. It seems a bug of Apple not SDWebImage.\nYou can see it crash on 13 HiPDA 0x10021e0f0 __45-[SDImageCache cleanDiskWithCompletionBlock:]_block_invoke (SDImageCache.m:497) itself.\n. @jimmaye  I think you do fix it. \nIt is a crash that hard to reproduce. My app, 6k daily activity users, only crash 16 times for about one month. 7 crashes because of SDImageCache.m line 497(link), 9 crashes because of SDImageCache.m line 551 (link) which you already fixed. All iOS10.\nI do believe it is a bug of Apple not SDWebImage.\n. ",
    "jeffctown": "@jimmaye - i'm seeing this same exact crash in an app of mine, but i am not sure how to reproduce it to find out if this commit fixes our problem.  are you able to explain what steps you took to reproduce this crash?\n. ",
    "noviceQ": "add support for iOS10 MSStickerView\n. ",
    "zaczh": "We encountered same crash.\ncrash_log.txt\n. Hey guys. I think the problem is that when calling [[NSURLCache sharedURLCache] cachedResponseForRequest:, the iOS system will do some cache merging. See the last line of the crash log:\n-[NSCachedURLResponse _reestablishInternalCFCachedURLResponse:]\nThis implies that every time you call this method, the response caches will be reestablished. I think this is the cause of our problem. If we are caching multiple responses on different threads, then it may cause a crash.\nAfter digging into the code, I found that this call is reductant. If we specify to use system cache, then the system will do it correctly, which means what you get in - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error is already handled. If you specified to only use cached response, and there is no local data available, then you will get nil.\nBusiness level cache is always a bad idea, which we should avoid.\nI have submit a patch to workaround this. Any idea on it is welcome.\nThis is the patch\n. ",
    "worthbak": "Seeing a similar crash in my app - can't speak the severity, as only a small portion of our user base is using SDWebImage v3.8.1. Here's a sample stack trace: \nCrashed: NSOperationQueue 0x15785ce90 :: NSOperation 0x15a9c13b0 (QOS: LEGACY)\n0  libobjc.A.dylib                0x182349b9c objc_msgSend + 28\n1  CFNetwork                      0x1833e899c -[NSURLCache cachedResponseForRequest:] + 124\n2  SDWebImage                     0x101753e88 -[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:] + 428\n3  SDWebImage                     0x101751c10 -[SDWebImageDownloader URLSession:task:didCompleteWithError:] + 128\n4  CFNetwork                      0x1833e0930 __51-[NSURLSession delegate_task:didCompleteWithError:]_block_invoke170 + 72\n5  Foundation                     0x18368c540 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__ + 16\n6  Foundation                     0x1835de870 -[NSBlockOperation main] + 96\n7  Foundation                     0x1835cee48 -[__NSOperationInternal _start:] + 604\n8  Foundation                     0x18368e934 __NSOQSchedule_f + 224\n9  libdispatch.dylib              0x18271d47c _dispatch_client_callout + 16\n10 libdispatch.dylib              0x1827294c0 _dispatch_queue_drain + 864\n11 libdispatch.dylib              0x182720f80 _dispatch_queue_invoke + 464\n12 libdispatch.dylib              0x18272b390 _dispatch_root_queue_drain + 728\n13 libdispatch.dylib              0x18272b0b0 _dispatch_worker_thread3 + 112\n14 libsystem_pthread.dylib        0x182935470 _pthread_wqthread + 1092\n15 libsystem_pthread.dylib        0x182935020 start_wqthread + 4\n. ",
    "anafinotti": "Anyone had lucky?\n. ",
    "Zigzag968": "same problem here, with 3.8.1 version\n. ",
    "iamqk": "same crash here\nSIGSEGV\nSEGV_ACCERR\n0   libobjc.A.dylib 0x0000000180865b90  objc_msgSend + 16\n1   CFNetwork   0x000000018190499c  -[NSURLCache cachedResponseForRequest:] + 124\n2   MicroRun    0x0000000100683a38  -[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:]  SDWebImageDownloaderOperation.m:407\n. ",
    "zheck": "Just deployed with  3.8.2, still got the same error:\nCrashed: NSOperationQueue 0x1706217a0 :: NSOperation 0x174654460 (QOS: DEFAULT)\n0  libobjc.A.dylib                0x193082f30 objc_msgSend + 16\n1  SDWebImage                     0x1011ebdd0 -[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:] (SDWebImageDownloaderOperation.m:405)\n. @bpoplauschi unfortunately, we are using SDWebImage without any option, only simple calls: sd_setImageWithURL() and sd_cancelCurrentImageLoad()\nSince the issue is very hard to reproduce, we are removing the completionBlock for production, and continue to investigate in dev/pre-prod\nWill post if we find any ways to reproduce the issue (network condition, activity etc.)\n. ",
    "jz709u": "when is version 4.1.0 going public. ",
    "stardustWK": "@bpoplauschi  can you test for this url https://v4.api.kmg.goms.com.cn/public/images/default.png\nyeah I agree with @pechn ,  may be \n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler\nneed change to @pechn  says \uff0cjust like AFNetworking doing\n. @mythodeia, I found work failed on simulator sometimes, work fine on device.. ",
    "brendanjerwin": "The images were fairly large. ~1mb\nReducing the size helped, things seem to be behaving better once we made the images smaller. So, I think there is something going on here with the cache(s).\n. ",
    "choipd": "I have the same issue.  After entering this strange state, clear disk or memory not work. I've changed to 4.0 beta but still failed.\n. ",
    "JohnWickham": "I'm having this issue as well on iOS 8.4.1, iOS 9.3.3, and iOS 10.0 beta 3.\nThe crash occurs at +[NSData sd_contentTypeForImageData:]: and produces \n\nreason: '+[NSData sd_contentTypeForImageData:]: unrecognized selector sent to class 0x37abb54c'\n\nLike yunjinghui123, data is present, but image and imageContentType are both nil.\nEdit 30 July: This issue isn't present in an empty test project, so I've determined that it is caused by something in my existing project and is not a bug.\n. ",
    "Tinghui": "There is a problem when using SDWebImage with Swift3.\nAfter updating to Swift 3.0, the Swift compiler translates the ObjC headers for UIImageView+WebCache.h into Swift, then it occurs a naming collision.\nPlease see this stackoverflow question for more details: http://stackoverflow.com/questions/38949214/ambiguous-use-of-sd-setimagewithplaceholderimagecompleted-with-swift-3\n. ",
    "billionbucks": "images are not loading anymore after updating to swift 3 ? am i at right place ? \n. ",
    "ducmaxime": "I confirm, it's not working with Swift 3.0, SDWebImageCompletionBlock not recognized. :(\n. ",
    "Toolenaar": "having the same issues after updating my app to swift 3.0 images stopped loading. Joridor's solution does not work for me. The completion block is fired but when the image that I get back wont seem to load into the UIImageView\n. ",
    "fmello": "Hi, is it possible you post this sample project. I am also having the same difficulty. tks\n. ",
    "supreetuf": "Hi @bpoplauschi I had the same issue, images were not loading in swift 3. I had an existing project in swift 2.3 and converted it to swift 3. After that, this issue started. In my case, it was for few ImageViews the images were not showing, while for others they were showing. After much try and debugging what worked for me was, to remove the ImageView from the storyboard not showing image and add a new ImageView, connect it to view controller and do the code. That fixed it for me. \n. ",
    "henry0475": "Recently i used swift 3.0 and also have same problem.  Used SDWebImageManager.shared().imageDownloader?.downloadImage,Xcode 8.0 tell me Cannot convert value of type '(UIImage, Data, NSError, Bool) -> ()' to expected argument type 'SDWebImageDownloaderCompletedBlock?' ...\n. @bpoplauschi  Hi, I'm using 4.0.0 version. I don't know how to resolve this problem.My code:\nSDWebImageManager.shared().imageDownloader?.downloadImage(with: photoURL, options: SDWebImageDownloaderOptions.allowInvalidSSLCertificates, progress: { (min: Int, max: Int, nil) in\n                    print(\"loading\u2026\u2026\")\n                    }, completed: { (image: UIImage, data: Data, error: NSError, finished: Bool) in\n                        if image != nil {\n                            print(\"finished\")\n                        } else {\n                            print(\"wrong\")\n                       }\n                })\nThen Xcode has error,likes above.\n. @bpoplauschi Thanks!! Using your suggestion code, error has been solved. But Xcode showed a new waring,  \"Expression of type 'SDWebImageDownloadToken?' is unused\" .   :(\n. ",
    "Antilopez": "Hi!\nI'm using your library on version 4.0.0 beta 2 (its great btw). And i was experiencing issues with swift 3.0 as well.\nTried all your options and while in most cases the problem was solved, the case where the profile picture had a circular corner radius kept showing an empty image.\nI tackled the problem by removing the ciruclar radius layer and the library was working again. Maybe it helps you find the problem (or maybe its just my case i dont know).\nThis was my problematic code:\nself.profileImageView.layer.cornerRadius = self.profileImageView.frame.size.width / 2; \nI solved the problem by removing that line and adding another image on top with static png croped circular (horrible, i know, but deadlines are my priority right now).\nHope it helps someone!\n. ",
    "chrisl777": "I had issues with the compiler finding \"sd_setImage\" until I added an \"import WebImage\" at the top of my file. Just an FYI if some people are having some build errors in their Swift 3 project. \n. ",
    "thedp": "Any update on this issue?. ",
    "zhizi12": "in 3.7 version ,I can change code like this to show httpsImage,but in 3.8.1 I can not find the function:\n- (void)connection:(NSURLConnection )connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge )challenge{\nif ([challenge previousFailureCount]== 0) {\nNSURLCredential* cre = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n  [challenge.sender useCredential:cre forAuthenticationChallenge:challenge];\n}\n  else{\n  }\n  }\n. ",
    "idage": "you can  set SDWebImageOptions in SDWebImageManager\n. ",
    "simalone": "I have tried following code:\nNSData data = [[NSData alloc] initWithContentsOfURL:[NSURL URLWithString:model.bgImageUrl]\n                                                 options:NSDataReadingMappedIfSafe\n                                                   error:nil];\n    if (data) {\n        UIImage image = [UIImage imageWithData:data scale:2.0f];\n        self.contentBgView.image = [image stretchableImageWithCenter];\n    }\nstretch image correctly.\nIf replacing [UIImage imageWithData:data scale:2.0f];with [UIImage imageWithData:data scale:1.0f]; , the image can't be stretched. So what I should do with SDWebImage to stretch image correctly.\n. ",
    "qiaoming1990321": "what can i do?Looking forward to your reply, thank you\n. ",
    "formeforyouok": "@mythodeia \nI have already test the url in the demo project,but it doesn't work. \nAttach my demo:\nSDWebImageTest.zip\n. ",
    "andyden9": "I tracked one of the url and it seems remote server responses a correct 301 redirection message all time (below). \nBut Safari, SDWebImage (on iPhone Simulator) and FireFox will NOT parse it correctly (timeout, not responding....). Only Chrome and Opera handled it well (the redirected picture gets shown). \nIs there any known problem has anything to do with this issue?\n\ud83d\udc47 \ud83d\udc47 \ud83d\udc47 \nHTTP/1.1 301 Moved Permanently\nDate: Wed, 31 Aug 2016 06:02:54 GMT\nServer: Apache\nX-Powered-By: PHP/5.4.45-0+deb7u4\nVary: User-Agent\nPragma: \nCache-control: max-age=31536000, private\nExpires: Thu, 31 Aug 2017 06:02:54 GMT\nLast-Modified: Wed, 20 Aug 2014 09:23:46 GMT\nETag: \"14656\"\nAccept-Ranges: bytes\nContent-disposition: inline; filename=\"028.JPG\"\nContent-transfer-encoding: binary\nX-Content-Type-Options: nosniff\nX-Permitted-Cross-Domain-Policies: none\nContent-Length: 1754588\nLocation: http://cx500forum.com/forum/attachments/general-discussion/14656-ciao-tutti-dallitalia-028.jpg\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: image/jpeg\n. Found the problem the url I posted, Safari, SDWebImage (on iPhone Simulator) and FireFox can't handle 301 properly. When I rewrite the response 301 to 302 using Charles, everything works just, just fine!\nBut now the problem is.... how to make SDWebImage support these \u2018301 permanently redirection\u2018 responses? \n. Sorry my bad, actually this PR @mythodeia posted fixed something.\nFor url1, in SDWebImage, remote response was '406 Not Acceptable', failed on downloading image, with request: \nHTML\nGET /system/cdn/services/redirect/mybesti-dev/ca5f6c6276b24544a182890f09fbff20/3ac255eae33e64a82c6703fbdedd654e/cp_file HTTP/1.1\nHost: www.ctyle.com\nAccept: image/*;q=0.8\nUser-Agent: xctest (unknown version) CFNetwork/758.3.15 Darwin/15.6.0\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nWhile in Chrome, remote server response was '307 Temporary Redirect', successed on downloading image, with request: \nHTML\nGET /system/cdn/services/redirect/mybesti-dev/ca5f6c6276b24544a182890f09fbff20/3ac255eae33e64a82c6703fbdedd654e/cp_file HTTP/1.1\nHost: www.ctyle.com\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: zh-CN,zh;q=0.8\nFor url2, this PR fixed issue to send out request for image after receiving '301 Permanently Redirection', HUGE THANKSSSS!!\n~~Sadly it didn't... Maybe something wrong with the logic that deals 301 response in SDWebImage or WebKit? (I also clear Safari data in Simulator everytime I test cuz it seems Safari and SDWebImage both cache redirects)~~\n. BTW even if the image successfully downloaded (Charles shows that the image is downloaded and image SHOWN in my own demo) but this very test STILL fails and reports error, on Travis I saw the same error in all several errors. \nMight be the problem with this test itself, or maybe some internal instance naming issue, I guess. I post the error message below, hope it helps with your test.\n``` Objective-C\nTest Suite 'Selected tests' started at 2016-09-01 12:08:37.613\nTest Suite 'SDWebImageManagerTests' started at 2016-09-01 12:08:37.614\nTest Case '-[SDWebImageManagerTests testTestThatItCanDownloadAnImageWithARedirection]' started.\n-waitForExpectationsWithTimeout: timed out but was unable to run the timeout handler because the main thread was unresponsive (0.5 seconds is allowed after the wait times out). Conditions that may cause this include processing blocking IO on the main thread, calls to sleep(), deadlocks, and synchronous IPC.\n2016-09-01 12:10:39.673 xctest[76226:9073983]/Users/andyden9/Desktop/SDWebImage/SDWebImage/Tests/Tests/SDWebImageManagerTests.m:81: error: -[SDWebImageManagerTests testTestThatItCanDownloadAnImageWithARedirection] : expected: not http://cx500forum.com/forum/attachment.php?attachmentid=14656&d=1408526626, got: http://cx500forum.com/forum/attachment.php?attachmentid=14656&d=1408526626\n```\n\nBTW.no2 \ud83d\ude02  If there's anything I can help with... What's the plan on merging this PR and release? \n. The image successfully downloaded (Charles shows that the image is downloaded and image SHOWN in my own demo) but this very test STILL fails and reports error.\nMight be the problem with this test itself, or maybe some internal instance naming issue\nexpect(originalImageURL).toNot.equal(imageURL);\nI think 'originalImageURL' is always the same with 'imageURL'(sd_imageURL also won't work), maybe imageURL didn't change the whole time.\nI post the error message below, hope it helps with your test.\n``` Objective-C\nTest Suite 'Selected tests' started at 2016-09-01 12:08:37.613\nTest Suite 'SDWebImageManagerTests' started at 2016-09-01 12:08:37.614\nTest Case '-[SDWebImageManagerTests testTestThatItCanDownloadAnImageWithARedirection]' started.\n-waitForExpectationsWithTimeout: timed out but was unable to run the timeout handler because the main thread was unresponsive (0.5 seconds is allowed after the wait times out). Conditions that may cause this include processing blocking IO on the main thread, calls to sleep(), deadlocks, and synchronous IPC.\n2016-09-01 12:10:39.673 xctest[76226:9073983]/Users/andyden9/Desktop/SDWebImage/SDWebImage/Tests/Tests/SDWebImageManagerTests.m:81: error: -[SDWebImageManagerTests testTestThatItCanDownloadAnImageWithARedirection] : expected: not http://cx500forum.com/forum/attachment.php?attachmentid=14656&d=1408526626, got: http://cx500forum.com/forum/attachment.php?attachmentid=14656&d=1408526626\n```\n. ",
    "iblacksun": "same issue here.\n. ",
    "devtofu": "I will try the new version and give you feedback\uff0cthanks . @bpoplauschi \n. @bpoplauschi pods didn't update the version number? \n. ",
    "lsgeek": "have  a  look ?\n. when I use the option SDWebImageDownloaderProgressiveDownload to loading a very large image,you use the CGImageSourceCreateWithData() function to make the image every time,and I can\u2019t set the UIImageView backgroundcolor,because the image always in lightgray color,when use the function CGImageSourceUpdateData()  can fix the problem\ne.x\n [Incrementally Loading an Image]\nhttps://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/ImageIOGuide/imageio_source/ikpg_source.html#//apple_ref/doc/uid/TP40005462-CH218-SW3 \n. ",
    "Nestordu": "+1\n. ",
    "RajeshKumar7": "-Bridging-Header.h:12:9: 'SDWebImage/UIImageView+WebCache.h' file not found\nI have updated my iOS App with the latest pods and I am using same Xcode 7.3\nSame issue.\n. ",
    "MaeseppTarvo": "I can say that I think the problem is with umlauts e.g(\u00e4. \u00fc, \u00f6) since other images seems to be caching. Can you check the code and tell me if I am doing it right?\n```\nif productsValue[indexPath.row][\"productUrl\"] != nil {\n            cell.snusProductImageView!.sd_setImageWithURL(NSURL(string: productsValue[indexPath.row][\"productUrl\"] as! String)!)\n        }\n        else {\n            let productImageref = productsValue[indexPath.row][\"Products\"] as! String\n        let decomposedPath = productImageref.decomposedStringWithCanonicalMapping\n\n        cell.snusProductImageView.image = nil\n\n\n        FIRStorage.storage().reference().child(\"\\(decomposedPath).png\").downloadURLWithCompletion({(url, error)in\n\n            FIRDatabase.database().reference().child(\"Snuses\").child(decomposedPath).child(\"productUrl\").setValue(url!.absoluteString)\n\n            let resource = Resource(downloadURL: url!, cacheKey: decomposedPath)\n\n            cell.snusProductImageView.sd_setImageWithURL(url)\n\n        })\n\n```\nThe url for example one item with umlaut is: https://firebasestorage.googleapis.com/v0/b/snuspedia.appspot.com/o/Go%CC%88teborgs%20Prima%20Fint%20Loose.png?alt=media&token=511fe6c4-19ad-4416-a877-ef399d1a5ed1\nAnd without umlaut some other: https://firebasestorage.googleapis.com/v0/b/snuspedia.appspot.com/o/Catch%20Dry%20Eucalyptus%20White%20Mini.png?alt=media&token=2cab8682-d936-4d81-a325-a6402fa23863\n. ",
    "lixiang1994": "Picture in the news list , Seems to have no relationship with url , 2.7.6 the following has never happened .\n. ",
    "6david9": "I found some crash was by calling block like this:\nif (self.completedBlock) {\n  self.completedBlock(nil, nil, error, YES);\n}\nthe NSURLSession delegate was not calling in the main thread, and the other thread cancel the operation.\nAfter checking self.completedBlock, operation was canceled and self.completedBlock assigned to nil, calling nil as a block will crash. \nAnd the crash address will always be 0x10.\nthis can be fix like this:    \nBlockType completedBlock = self.completedBlock\nif (completedBlock) {\n  completedBlock(nil, nil, error, YES);\n}\n. ",
    "kirpa": "@jlubeck I've added PR for this feature, not sure if you got notification about it\n. ",
    "thomstark": "What is the demo project?\n. Ah. Gotchya. Will test and get back to you.\n. I couldn't get that working but I found a duplicate of my issue here: https://github.com/rs/SDWebImage/issues/9\nChanging: cell.imageView!.sd_setImageWithURL(NSURL(string:self.Avatars[indexPath.section][indexPath.row]))\nTo: cell.imageView!.sd_setImageWithURL(NSURL(string: self.Avatars[indexPath.section][indexPath.row]), placeholderImage: UIImage(named:\"add-user\"))\nsolved the problem. \n. ",
    "zfha": "Yeah, In the old version(3.7.x), we can use the NSURLProtocl to intercept image request to load native images\uff0cbecause of using of NSURLConnection. But now, we can't. So, this milestone NSURLSessionConfiguration.protocolClasses can support us. \nMy question:\n     1. When can we use sepecify NSURLSessionConfiguration for Downloader?\n     2. When the 4.0.0 version release?\n. I ever used NSURLProtocol then used SDImageCache to get image data.\nbut now ,there is not this API, i can only get the UIImage.\nthen, because UIImage has many formats.\nI don't know how to convert UIImage to NSData.\njpg, jpeg, use                  imageData = UIImageJPEGRepresentation(image, 1.0);\npnd          use                  imageData = UIImagePNGRepresentation(image);\nbut what for webp?gif?\n. ",
    "mackoj": "It's work locally but not on travis.\n. I think it's just an issue with Travis.\n@bpoplauschi could you take a look at this please ? The code is working the test is working locally but not on Travis.\n. I will remove the test\n. I think the best way to do a good test is to host an image behind a redirection ourself. \nBecause I try with facebook it's work locally but not on travis because I think facebook may have block them ?\n. Hi @luohui8891,\nIt's does not seems to work for me either even with curl.\n```\n\u279c  curl http://cx500forum.com/forum/attachment.php\\?attachmentid\\=14656\\&d\\=1408526626 -v -o 028.JPG \n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0   Trying 50.97.177.71...\n TCP_NODELAY set\n* Connected to cx500forum.com (50.97.177.71) port 80 (#0)\n\nGET /forum/attachment.php?attachmentid=14656&d=1408526626 HTTP/1.1\nHost: cx500forum.com\nUser-Agent: curl/7.51.0\nAccept: /\n< HTTP/1.1 301 Moved Permanently\n< Date: Fri, 17 Feb 2017 08:43:12 GMT\n< Server: Apache\n< X-Powered-By: PHP/5.4.45-0+deb7u6\n< Vary: User-Agent\n< Pragma: \n< Cache-control: max-age=31536000, private\n< Expires: Sat, 17 Feb 2018 08:43:12 GMT\n< Last-Modified: Wed, 20 Aug 2014 09:23:46 GMT\n< ETag: \"14656\"\n< Accept-Ranges: bytes\n< Content-disposition: inline; filename=\"028.JPG\"\n< Content-transfer-encoding: binary\n< X-Content-Type-Options: nosniff\n< X-Permitted-Cross-Domain-Policies: none\n< Content-Length: 1754588\n< Location: http://cx500forum.com/forum/attachments/general-discussion/14656-ciao-tutti-dallitalia-028.jpg\n< Content-Type: image/jpeg\n< \n  0 1713k    0     0    0     0      0      0 --:--:--  0:00:05 --:--:--     0{ [0 bytes data]\n transfer closed with 1754588 bytes remaining to read\n Curl_http_done: called premature == 1\n  0 1713k    0     0    0     0      0      0 --:--:--  0:00:05 --:--:--     0\n* Closing connection 0\ncurl: (18) transfer closed with 1754588 bytes remaining to read\n```. \n",
    "xiaowu1225": "I have solve this problem by add the following code:\n[[SDWebImageManager sharedManager].imageDownloader setValue:@\"*/*\" forHTTPHeaderField:@\"Accept\"];\nHope to be able to help people who meet this problem\uff01. ",
    "Mina-R-Meshriky": "Dear @bpoplauschi , Relating To that Question, If I already have the image data (webp case) and want to use sdwebImage to show it.... is there is a way?   . @bpoplauschi , yes but as I mentioned it is webP formate.. and iOS does not natively support that ... I am using SDWebImage in getting images from the internet as you said \"download and cash\", but I have only one use case where the image comes encoded within a JSON response, I can decode it easily but then it is not recognizable by imageView.image  . ",
    "FergalMohan": "Never mind it looks like it was an undocumented change by one of my colleagues. Sorry about the confusion.\n. ",
    "welsonxue": "In my opinion, the property shouldScaleImage or shouldDecompressImages is related with single image. If we set them in SDImageCache, all the images are using this setting, maybe not satisfy our requirements. Can we move these property to SDWebImageOptions?. Thanks for your reply, I think I'd like to make this into PR later. : )\n\u53d1\u81ea\u7f51\u6613\u90ae\u7bb1\u5927\u5e08\nOn 02/09/2017 15:13, Bogdan Poplauschi wrote:\nThe reason for doing this (and the library is doing it for quite some time) is this:\nif you display a 60x60 image on an iPhone 6 Plus in a 60x60 frame, the image will be pixelated. It's the way retina works. You need an image 3 times that size to look good. That's why we split the size by the scale, so we get an image that looks good.\nIf you really need to display at the original resolution, ignoring scale, I guess we could add a new option like SDWebImageIgnoreScale that when set, will just ignore the scale.\nAnyone interested in making this into a PR?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.. SDWebImage version is 3.8.2, yet most of my code is still using sd instead of FLAnimatedImageView. Here is my simple demo, I'd appreciate it very much if this problem could be solved, or at least let me known the reason about this phenomenon.\nIssueAboutGifDemo.zip\n. ok i'll have a try soon later with 4.0.0, but i think maybe it's not the key point.. ",
    "nilotic": "@mythodeia  Thank you for your reply.\nUnfortunately, I can't check and change all photos color profile in server. Because those photos were uploaded by user. \nI think,  Adding exception handler is better solution than changing color profile\nLike this\n```\n        // kCGImageAlphaNone is not supported in CGBitmapContextCreate.\n        // Since the original image here has no alpha info, use kCGImageAlphaNoneSkipLast\n        // to create bitmap graphics contexts without alpha info.\n        CGContextRef context = CGBitmapContextCreate(NULL,\n                                                     width,\n                                                     height,\n                                                     bitsPerComponent,\n                                                     bytesPerRow,\n                                                     colorspaceRef,\n                                                     kCGBitmapByteOrderDefault|kCGImageAlphaNoneSkipLast);\n    // Exception handling\n    if (context == NULL) {\n        return image;\n    }\n\n```\n. ",
    "vinguan": "There is another way that i can hide an ActivityIndicator or another loading when all downloads finished? I am using a reference for each downloads that had started and checking a count for a NSArray.\n. ",
    "superk589": "New Issue Checklist\n\n[x] I have read and understood the CONTRIBUTING guide\n[x] I have read the Documentation\n[x] I have searched for a similar issue in the project and found none\n\nIssue Info\nInfo                    | Value                               |\n-------------------------|-------------------------------------|\n Platform Name           | iOS\n Platform Version        | 10.2\n SDWebImage Version      | 3.8.2\n Integration Method      | cocoapods\n Xcode Version           | Xcode 8.2\n Repro rate              | all the time (100%) \n Repro with our demo prj | no\n Demo project link       | https://github.com/superk589/SDWebImageDemo_ProgressiveDownloadIssue\nIssue Description and Steps\nWhen using sd_setImage and set options \"progressiveDownload\", the image is not displayed progressively(use a large web image here and make sure it's not cached before), but shows suddenly after download finished. \nUsing simulator of iOS 9.x or 8.x in the same environment, \"progressiveDownload\" works correctly.\n. @mythodeia \nI tried in iOS 10.3, the bug disappeared. Everything works fine just as in iOS 9.x.. ",
    "KosarevYaroslav": "update\n. ",
    "armandsavotins": "Not tested with Demo project. Just tested with new clean project and random image url from web. Same results, everything works fine in iOS8 and iOS9, in iOS10 image not set, at least does not shows up in imageView.\np.s. getting same results with UIKit+AFNetworking setImageWithURL\n. Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. \n. ",
    "hamentmiglani": "Its not working in tableview,if i m using imageWithPlaceholder and then image not show untill it is not scroll.even placeholder image is not showing\n. ",
    "diejmon": "Just use import SDWebImage in .swift files. \n. ``` objective-c\n- (void)testFLAnimatedImageViewSetImageWithURL {\n    XCTestExpectation *expectation = [self expectationWithDescription:@\"FLAnimatedImageView setImageWithURL\"];\nFLAnimatedImageView *imageView = [[FLAnimatedImageView alloc] init];\nNSURL *originalImageURL = [NSURL URLWithString:@\"https://raw.githubusercontent.com/liyong03/YLGIFImage/master/YLGIFImageDemo/YLGIFImageDemo/joy.gif\"];\n\n[imageView sd_setImageWithURL:originalImageURL\n                    completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n                        expect(image).toNot.beNil();\n                        expect(error).to.beNil();\n                        expect(originalImageURL).to.equal(imageURL);\n\n                        expect(imageView.image).to.equal(image);\n                        [expectation fulfill];\n                            }];\n[self waitForExpectationsWithTimeout:kAsyncTestTimeout handler:nil];\n\n}\n```\nFailing test is expect(imageView.image).to.equal(image);\nThis test is wrong, but not sure how I can replace it of fix. \nimageView.image returns static image.\nimage is UIAnimatedImage\nimageView.animatedImage is FLAnimatedImage\nAll these images are different. \n. The reason why it worked before is that GIF implementation didn't work and used category method implementations from UIImageView.\n. ",
    "GeRyCh91": "Thanks. I used CocoaPods to able importing SDWebImage as module.\n. ",
    "psnt143": "Your Sincerely,\nPrashant Patel\niOS Developer\n+91 97129 91261\nOn Mon, Oct 3, 2016 at 9:51 PM, Konstantinos K. notifications@github.com\nwrote:\n\ncan this be replicated in the demo project?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1688#issuecomment-251152413, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQmQV1q1SA-7VKtwjLCib2CoV-y26OgVks5qwSuIgaJpZM4KMmKW\n.\n. hello,\n         when i run the app viewdidload are call and view are open but\nimages not load,but when i scroll all images load and show.\n\nYour Sincerely,\nPrashant Patel\niOS Developer\n+91 97129 91261\nOn Tue, Oct 4, 2016 at 5:56 PM, Bogdan Poplauschi notifications@github.com\nwrote:\n\n@psnt143 https://github.com/psnt143 we cannot understand what you are\nsaying.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1688#issuecomment-251373423, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQmQVyy3WWURaA1ojcnVbI1LzbKf1P-Tks5qwkX8gaJpZM4KMmKW\n.\n. i attach my source code in above mail please check them.\n\nYour Sincerely,\nPrashant Patel\niOS Developer\n+91 97129 91261\nOn Tue, Oct 4, 2016 at 6:19 PM, prashant patel psnt143@gmail.com wrote:\n\nhello,\n         when i run the app viewdidload are call and view are open but\nimages not load,but when i scroll all images load and show.\nYour Sincerely,\nPrashant Patel\niOS Developer\n+91 97129 91261\nOn Tue, Oct 4, 2016 at 5:56 PM, Bogdan Poplauschi \nnotifications@github.com wrote:\n\n@psnt143 https://github.com/psnt143 we cannot understand what you are\nsaying.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1688#issuecomment-251373423,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQmQVyy3WWURaA1ojcnVbI1LzbKf1P-Tks5qwkX8gaJpZM4KMmKW\n.\n. thanks for your support.it's run well.\n\n\nYour Sincerely,\nPrashant Patel\niOS Developer\n+91 97129 91261\nOn Wed, Oct 5, 2016 at 2:16 PM, codalamanp notifications@github.com wrote:\n\nJust call this method [self.iconView layoutIfNeeded] before make it circle.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1688#issuecomment-251617157, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQmQV0yOXvTbQhcyswj5McRwAJ0esgX-ks5qw2PQgaJpZM4KMmKW\n.\n. \n",
    "tylerjames": "I think I'm having a similar problem, but I'm not sure SDWebImage is the culprit.\nI have a custom UITableViewCell subclass. In it I have a UIImageView which is embedded in a UIView that is used as a coloured background to the image. \nWhen I attempt to configure the cell, either in cellForRowAtIndexPath: or in willDisplayCell: the initial size of the subviews is shown as 1000x1000. I try to set an image into the image view using [self.iconView sd_setImageWithURL:iconURL placeholderImage:placeholder]; I also set a background colour of the enclosing UIView.\nThe result is that the image does not get set and even the background colour of the UIView does not get set until the cells are dequeued a second time, either by scrolling or switching to a different view. \nIt seems like the cells are not ready to be configured. I bet it's a quirk of iOS 10, but man is it annoying.  \nEdit:\nThis Stack Overflow response seems to offer some insight.\nhttp://stackoverflow.com/a/39643829/415219\nIf you are using clipsToBounds/maskToBounds then it doesn't seem to work properly.\n. If you're going to add code that accesses the layers of the such as adding a corner radius you can add that code into the cell's -layoutSubviews method and everything should work. \nIt seems that accessing the layer, or at least settings masksToBound=YES from inside willDisplayCell: or cellForRowAtIndexPath: will cause the image view to not load properly on the first pass. Putting it in -layoutSubviews works.\n. ",
    "codalamanp": "Just call this method [self.iconView layoutIfNeeded] before make it circle.\n. ",
    "Jeyhey": "Thanks a lot. Did miss that configuration.\n. ",
    "nateboxer": "I'm a little confused. I've never had to add libwebp directly to my project before. Is it a separate framework? I see it in your project added via pods, but the instructions for adding SDWebImage via Carthage simply say to add the github \"rs/SDWebImage\" directive and that's all. I must be missing something. Thanks!\n. I updated my main app and my simple test project to use the latest 4.0.x release of SDWebImage and I still get the zero pixels error on all webp images.\n. I ran your sample project and the images did load. I ran the carthage command with several options and nothing helped. I still can't load webp images. Here is my simple project:\nZeroPixels.zip\nthanks!\n. So others are having this issue. It seems like it should be reopened.\n. I finally got it to work correctly. I was going down the path of building SDWebImage manually and ran across a link to an older version of the framework (WebImage instead off SDWebImage). I corrected all references including the list of frameworks under Build Phases/Link Binary With Libraries and especially the carthage copy-frameworks script. All webp images are now downloading correctly.\n. I'm trying to publish to itunesconnect (for TestFlight testing) and am getting these errors:\n- This bundle is invalid. The value for key CFBundleShortVersionString '4.0.0-beta2' in the Info.plist file must be a period-separated list of at most three non-negative integers.\n- This bundle Payload/.../SDWebImage.framework is invalid. The Info.plist is missing the required key: CFBundleVersion.\n. I am having this problem too.\n. When I install SDWebImage via Carthage, webp images fail to download with the \"image has 0 pixels\" error. I opened an issue about this: https://github.com/rs/SDWebImage/issues/1691 - but it was closed immediately as fixed in v4.0.0. I have tried v4.0.0 but the problem persists.\n. As I noted in #1691, I fixed this problem by removing all references to the old pre 4.0 version of SDWebImage. It was confusing as the the framework name I was using was slightly different and I had both in my project settings.\n. ",
    "Cao-Yu": "go to sd_imageWithData method, try to confirm \"image/webp\" branch is executed right. If not, clean xcode DerivedData.. ",
    "scottrhoyt": "Thanks for the great library, guys. It has saved me so much time over the years.\nJust started a new Swift 3 project and using Carthage to install 4.0.0-beta2, I get the following build warning:\n\nEverything is working fine--but I don't utilize the animated GIF support, so I'm not sure to what degree that is affected.\n. ",
    "ivedeneev": "@bpoplauschi still getting error with \"The Info.plist is missing the required key: CFBundleVersion.\". any solutions?. ",
    "weiminghuaa": "Is like This? @bpoplauschi @rs @CavalcanteLeo @KanybekMomukeyev @bmurmistro @mythodeia   @andodelauni @heistings\n``- (void)sd_setImageWithURL:(NSURL )url placeholderImage:(UIImage )placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock {\n    [self sd_cancelCurrentImageLoad];\nNSURL *oldURL = [self sd_imageURL];\n\nobjc_setAssociatedObject(self, &imageURLKey, url, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n\n if (!(options & SDWebImageDelayPlaceholder) && (oldURL == nil || ![oldURL.absoluteString isEqualToString:url.absoluteString])) {\n        dispatch_main_async_safe(^{\n              self.image = placeholder;\n        });\n }\n .....\n\n}`\n```\n. @bpoplauschi  Thank you very much for you reply. I knew this feature. The question has troubled me for long time. Can I ask you: how to avoid this?\nBeacuse the memory clearing up, and cell reuse not follow the fixed order\uff0clike this: \n`1st loadData\n2016-09-30 15:55:28.764 MYAPP[12950:384498] PosterCell-0: <PosterCell: 0x7fdd3c57cf90>\n\n2016-09-30 15:55:28.782 MYAPP[12950:384498] PosterCell-1: <PosterCell: 0x7fdd3c4cc0c0>\n\n2016-09-30 15:55:28.807 MYAPP[12950:384498] PosterCell-2: <PosterCell: 0x7fdd3c5815e0>\n\n2nd reloadData\n2016-09-30 15:55:28.959 MYAPP[12950:384498] PosterCell-0: <PosterCell: 0x7fdd3c5815e0>\n\n2016-09-30 15:55:28.961 MYAPP[12950:384498] PosterCell-1: <PosterCell: 0x7fdd3c57cf90>\n\n2016-09-30 15:55:28.962 MYAPP[12950:384498] PosterCell-2: <PosterCell: 0x7fdd3c4cc0c0>`\n\nSo, when app Re-enter foreground, the imageView's image is right. Then reload, the imageView set placehold first, and load image from disk, at last, set the right image again. That cause flicker when cpu is lower. \nLook forward to your answer again. Thank you.. ```\n- (void)sd_setImageWithURL:(nullable NSURL )url\n          placeholderImage:(nullable UIImage )placeholder\n                   options:(SDWebImageOptions)options\n                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                 completed:(nullable SDExternalCompletionBlock)completedBlock {\n    if (![self.image.accessibilityIdentifier isEqualToString:@\"placeholder\"]) {\n        NSString *key = [[SDWebImageManager sharedManager] cacheKeyForURL:self.sd_imageURL];\n        if (![[SDImageCache sharedImageCache] imageFromMemoryCacheForKey:key]) {\n            [[SDImageCache sharedImageCache] storeImage:self.image forKey:key toDisk:NO completion:nil];\n        }\n    }\nplaceholder.accessibilityIdentifier = @\"placeholder\";\n\n[self sd_internalSetImageWithURL:url\n                placeholderImage:placeholder\n                         options:options\n                    operationKey:nil\n                   setImageBlock:nil\n                        progress:progressBlock\n                       completed:completedBlock];\n\n}\n```\nThis way may fix the problem. Right?. Sometimes not work, beacuse chaotic reuse cell when reloadData. The images is in memory when reenter foreground. But memory cache in SDImageCache is cleared. Is there any way to find image from memory? Or don't evict image which is still display when app enter background.. ",
    "swapnil-vuclip": "I have the same related issue mentioned by @weiminghuaa , \nI am using SDWebImage+WebP to load my webp images from my server in list of collection in UItableView \nEvery time I re-enter foreground imageView in cell will re-fetch images from disk(mean while image view will be blank) and reload UIImageview with same image,  even though data haven't changed. \nBut When I used jpg format with the same code base it will work as I expected, their is no black out on re-enter foreground it will shows the cached images. but not with webp \nCode I used :\n        [videoV.imageViewVideo sd_setImageWithURL:[NSURL URLWithString:imageUrl]\n                                 placeholderImage:nil options:SDWebImageRefreshCached|SDWebImageRetryFailed ];\n\nany idea? . @dreampiggy  Thanks for your reply and detailed description on same, Adding the\u00a0SDWebImageQueryDiskSync\u00a0worked perfectly for me  along with SDWebImageRefreshCached so whenever their is change in server image sdk will fetch and update latest one in disk cache.\nUpdated Code : \n[cell.cellImageView sd_setImageWithURL:[NSURL URLWithString:toolsModel.thumbImgUrl] placeholderImage:[UIImage imageNamed:@\"background\"] options: SDWebImageQueryDiskSync|SDWebImageRefreshCached|SDWebImageRetryFailed];\nAlso thanks for version 4.3.1 available with improvement on Cache.  .  I struggling with one issue related to as we discussed in above thread, When I test with sample app where I added 4-5 UIImageView and load both the format images (jpg & webp) from server, performance wise work fine for me.\n But when we try with our own app where we load more than 100 thumbnails in my UITableView having list of horizontal image view collection, I face few issue listed below\n1] With WebP images :\n  - using SDWebImageQueryDiskSync as option on every kill and relaunch the app or on Re-enter foreground images would be render up-front as they fetch from disk, but scrolling is not smooth, there is noticeable jerk in the cells until scroll all the way down then after no jerk observed for that session. \n- Not using SDWebImageQueryDiskSync as option, not seen any jerk smooth scroll but every time app render all images(even they cached) and it will take noticeable time to load on image view.  \n2] With jpg images : \n  - using SDWebImageQueryDiskSync as option on every kill and relaunch the app or on Re-enter foreground images would be render up-front with smooth scroll, there is jerk but not easily noticeable in the cells.\n- Not using SDWebImageQueryDiskSync as option, not seen any jerk smooth scroll but on kill and relaunch the app will take time to render images and after few ms render all images at once.\n@dreampiggy specially need your help on WebP front\n. When I try with transition gives me that error\n\n. one more how to use in my case NSDataReadingMappedIfSafe in diskCacheReadingOptions. When would available 4.3.3 via pod?\n . @dreampiggy  Thanks for #2245, I replace both .h&.m files for SDWebImageManager in my pod project but still facing few issues \n@dreampiggy can you plz provide some help on below concern\n- Is their any code change required in my own image loader singleton class where I had method to load Async images from server \n\n,\n to encode the image to another format such like JPEG or PNG when storing to disk cache.\n\n\nI still notice jerk on both JPEG & WebP when I used SDWebImageQueryDiskSync, scroll more jerky on WebP stuck many time, also tried as you suggested using transition animation but again it will not help us. Are those jerk avoidable.  \n\n\nRelated transition animation it shows only first time load images then after it wont shows me animation when we relaunch and re-enter foreground as they load from memory or disk\n\n\nspecifically with JPEG as I mentioned early, Not using SDWebImageQueryDiskSync as option, not seen any jerk smooth scroll but on kill and relaunch the app will take time almost 4-5sec to render images and after that time render all images at once.\n\n\n. @dreampiggy Agreed and thanks for detailed description, how to use/set NSDataReadingMappedIfSafe on SDImageCache.shared.cacheConfig.diskReadingOptions in my case\nCan I only set that like this ?\nSDImageCache *imgCache = [[SDImageCache alloc] init];\nimgCache.config.diskCacheReadingOptions = NSDataReadingMappedIfSafe;\n                                       OR\nSDWebImageManager *manager = [SDWebImageManager sharedManager];\nmanager.imageCache.config.diskCacheReadingOptions = NSDataReadingMappedIfSafe;\n\nimageView.sd_imageTransition = SDWebImageTransition.fadeTransition;\n[imageView sd_setImageWithURL:imgUrl\n                         placeholderImage:nil options:SDWebImageRetryFailed|SDWebImageRefreshCached];. @dreampiggy Thanks for 4.3.3 release,\n\nFor WebP loading to convert the original WebP data from the server to JPEG format and store to cache. how to change the config to store the encoded image into disk cache instead of the original data from the server. \n. ",
    "NancyZY": "I am sorry for reply so late. I try to print the image and the data type of newData.avatar_mid, it shows not-nil and NSString, respectively.\n. ",
    "andrey-morozov": "a similar issue. I'm trying to integrate SDWebImage using CocoaPods without use_frameworks! but failed at:\n ld: framework not found SDWebImage for architecture arm64\n1. Platform Version SDWebImage 3.8.2\n2. IOS dep target 8.1\n3. CocoaPods 1.1.1\n. ",
    "xiaoqi1503928": "https://github.com/rs/SDWebImage#subspecs\n. ",
    "zgsCodingLife": "SDWebImageDownloaderOperation crash,  report  EXC_BAD_ACCESS  when  run with CFRunLoopRun();  how can i  deal it ?\n. ",
    "zjutwhw": "@skyline75489 \n[[SDWebImageManager sharedManager] downloadImageWithURL:[NSURL URLWithString:imageUrl] options:SDWebImageRetryFailed progress:nil completed:^(UIImage image, NSError error, SDImageCacheType cacheType, BOOL finished, NSURL imageURL) {\n        __block UIImage complete_image = image;\n        __block NSError *complete_error = error;\n        dispatch_main_sync_safe(^{\n            // \u5bf9\u4e8e\u56fe\u50cf size \u4e3a 0 \u7684\u4ee5 error \u5904\u7406\n            if (!complete_image.size.height || !complete_image.size.width) {\n                complete_image = nil;\n                complete_error = [NSError errorWithDomain:@\"\u56fe\u50cf\u4e3a\u7a7a\" code:-1024 userInfo:nil];\n                [[SDImageCache sharedImageCache] removeImageForKey:[[SDWebImageManager sharedManager] cacheKeyForURL:[NSURL URLWithString:imageUrl]]];\n            }\n            if (completedBlock) {\n                completedBlock(complete_image, complete_error);\n            }\n        });\n    }];\n. > ```ruby\n\n\n(void)safelyRemoveOperationFromRunning:(nullable SDWebImageCombinedOperation*)operation {\n    @synchronized (self.runningOperations) {\n        if (operation) {\n            [self.runningOperations removeObject:operation];\n        }\n    }\n}\n```\n\nThis method release the id <SDWebImageOperation> operation. @zjutwhw\n\nfor each SDWebImageCombineOperation, there are two object will retain it.\nThis problem has been fixed in the version 4.2.3. > This does not cause a retain cycle. Let me tell the reason.\n\nFirst, for each SDWebImageCombineOperation, there are two object will retain it. The first one, it a NSArray in SDWebImageManager.runningOperation. Which hold a strong reference to all pending loading tasks, until it been finished or cancelled. This one should keep, or the operation will been dealloced.\nSecond one, it the UIView+WebCacheOperation, each view use a strong-weak NSMapTable in associated object (strong property). Because the maptable is a weak reference to the operation, after the runnningOperation array remove the operation, the opeartion will be dealloced.\nYour question, maybe related to your business code. For example, if you want to immediatelly cancel the network loading after your VC been poped or dismissed, you should not capture self in the completionBlock. Instead, use a weak capture list for Swift, or Strong-Weak pair in Objective-C, to make the completionBlock does not capture your self to cause a retain cycle. Note even it's a retain cycle, after loading finished or cancel, all will be dealloced, is just a temporary state.\nBut however, sometimes you need to keep self alive, for example, later you may request the same URL, so you want to cache it and do some logic after loading, even if your VC disappeared. You should capture the self in the completion, to avoid your businese code which may call [self xxMethod] fail. It's also a possible use case, it does not means retain cycle is always bad, it's important to keep instance alive for some reason.\nIf you still have questions, see Common Problems: Handle self capture in completion block\n\nOK, It's a very nice explanation,I upgrade  the version of SDWebImage, and fix it. ",
    "JianboYan": "actually, the guassianBlurProcess:withProgress method is not call by myself, its called automatically on iOS 10. I add a symbolic break point, there is my lldb bt instruction prints:\n\n* thread #4: tid = 0x17dce, 0x004ece34 WorkBench+[TBImageUtility guassianBlurProcess:withProgress:](self=<unavailable>, _cmd=<no value available>, inputImage=<unavailable>, progress=<unavailable>) + 40 at TBImageUtility.m:103, queue = 'NSOperationQueue 0x1ae69d0 :: NSOperation 0xe6d1d50 (QOS: USER_INTERACTIVE)', stop reason = breakpoint 3.1\n  \\* frame #0: 0x004ece34 WorkBench+TBImageUtility guassianBlurProcess:withProgress: + 40 at TBImageUtility.m:103 [opt]\n    frame #1: 0x004e480e WorkBench-[SDWebImageDownloaderOperation connection:didReceiveData:](self=0x0e6d1d50, _cmd=<unavailable>, connection=<unavailable>, data=<unavailable>) + 1174 at SDWebImageDownloaderOperation.m:443 [opt]\n    frame #2: 0x1b9f2172 CFNetwork**65-[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:]_block_invoke + 56\n    frame #3: 0x1b9f212c CFNetwork-[NSURLConnectionInternal _withConnectionAndDelegate:onlyActive:] + 182\n    frame #4: 0x1b9f221c CFNetwork-[NSURLConnectionInternal _withActiveConnectionAndDelegate:] + 36\n    frame #5: 0x1b9bbf2a CFNetwork_NSURLConnectionDidReceiveData(_CFURLConnection*, __CFData const*, long, void const*) + 76\n    frame #6: 0x1b9408da CFNetworkZN27URLConnectionClientClassic29_delegate_didReceiveDataArrayEv_block_invoke + 214\n    frame #7: 0x1b93fe30 CFNetwork___ZN27URLConnectionClient_Classic18_withDelegateAsyncEPKcU13block_pointerFvP16_CFURLConnectionPK33CFURLConnectionClientCurrent_VMaxE_block_invoke_2 + 70\n    frame #8: 0x017a0d52 libdispatch.dylibdispatch_client_callout + 22\n    frame #9: 0x017aa472 libdispatch.dylib_dispatch_block_invoke_direct + 338\n    frame #10: 0x1b9d3986 CFNetworkRunloopBlockContext::_invoke_block(void const, void_) + 18\n    frame #11: 0x1b202a84 CoreFoundationCFArrayApplyFunction + 36\n    frame #12: 0x1b9d3870 CFNetworkRunloopBlockContext::perform() + 180\n    frame #13: 0x1b9d482e CFNetworkMultiplexerSource::perform() + 208\n    frame #14: 0x1b9d4640 CFNetworkMultiplexerSource::_perform(void*) + 46\n    frame #15: 0x1b2b5c8a CoreFoundation__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION** + 12\n    frame #16: 0x1b2b5794 CoreFoundationCFRunLoopDoSources0 + 438\n    frame #17: 0x1b2b3a6a CoreFoundation__CFRunLoopRun + 762\n    frame #18: 0x1b203072 CoreFoundationCFRunLoopRunSpecific + 486\n    frame #19: 0x1b245528 CoreFoundationCFRunLoopRun + 104\n    frame #20: 0x004e35aa WorkBench-SDWebImageDownloaderOperation start + 1850 at SDWebImageDownloaderOperation.m:161 [opt]\n    frame #21: 0x1bbfd10a Foundation__NSOQSchedule_f + 190\n    frame #22: 0x017aced8 libdispatch.dylib_dispatch_queue_serial_drain + 980\n    frame #23: 0x017a4214 libdispatch.dylib_dispatch_queue_invoke + 556\n    frame #24: 0x017aede0 libdispatch.dylib_dispatch_root_queue_drain + 408\n    frame #25: 0x017aebe8 libdispatch.dylib_dispatch_worker_thread3 + 112\n    frame #26: 0x1ab55946 libsystem_pthread.dylib_pthread_wqthread + 1168\n    frame #27: 0x1ab5549c libsystem_pthread.dylib`start_wqthread + 8\n. the good news is, i pass a empty completion block, won't crash, it may be a bug, better fix it!\n. \n",
    "timbroder": "@bpoplauschi I'm interested but going to be a bit underwater for the next month or so on my current engagement. Can we touch base in Jan?. @bpoplauschi I hate to do this but I just started a new job and need to focus on that. I'll circle back but for now please remove me from the maintainer group\nthanks. ",
    "duckls": "http://img5.imgtn.bdimg.com/it/u=2253484101,1253799674&fm=21&gp=0.jpg  \u5b8c\u6574\u8def\u5f84\n. ",
    "dxk611": "I have the same question.. ",
    "steven0610": "And I also crash in the [SDWebImageDownloaderOperation cancelInternal],I think the 2 bug maybe the same problem.  \nCould you please give me some issues. Thank you very much.\n0   libobjc.A.dylib\nobjc_msgSend + 5\n1   Foundation\n+[NSConcreteNotification newTempNotificationWithName:object:userInfo:] + 119\n2   Foundation\n-[NSNotificationCenter postNotificationName:object:userInfo:] + 47\n3   Foundation\n-[NSNotificationCenter postNotificationName:object:] + 31\n4   my app\n**_47-[SDWebImageDownloaderOperation cancelInternal]_block_invoke + 73\n5   libdispatch.dylib\n__dispatch_call_block_and_release + 11\n6   libdispatch.dylib\n__dispatch_client_callout + 23\n7   libdispatch.dylib\n_dispatch_main_queue_callback_4CF + 1532\n8   CoreFoundation\nCFRUNLOOPIS_SERVICING_THE_MAIN_DISPATCH_QUEUE** + 9\n9   CoreFoundation\n_CFRunLoopRun + 1591\n10  CoreFoundation\nCFRunLoopRunSpecific + 516\n11  CoreFoundation\nCFRunLoopRunInMode + 108\n12  GraphicsServices\nGSEventRunModal + 160\n13  UIKit\nUIApplicationMain + 144\n14  my app\nmain (main.m:14)\n. The reason of crash ,is here .    The crash is not happen usually,only  0.1%. \nBut I think we must resove it.\nTrapped fatal signal 'SIGSEGV(11)' ( \"0 libobjc.A.dylib 0x00000001800d1b90 objc_msgSend + 16\", \"1 Foundation 0x00000001813428b4 0x000000018133c000 + 26804\", \"2 Foundation 0x00000001813427f0 0x000000018133c000 + 26608\", \"3  0x0000000100a5c5cc 0x0000000100040000 + 10601932\", \"4 libdispatch.dylib 0x00000001804a54bc 0x00000001804a4000 + 5308\", \"5 libdispatch.dylib 0x00000001804a547c 0x00000001804a4000 + 5244\", \"6 libdispatch.dylib 0x00000001804aab84 _dispatch_main_queue_callback_4CF + 1844\", \"7 CoreFoundation 0x0000000180a10d50 0x0000000180930000 + 920912\", \"8 CoreFoundation 0x0000000180a0ebb8 0x0000000180930000 + 912312\", \"9 CoreFoundation 0x0000000180938c50 CFRunLoopRunSpecific + 384\", \"10 GraphicsServices 0x0000000182220088 GSEventRunModal + 180\", \"11 UIKit 0x0000000185c22088 UIApplicationMain + 204\", \"12    my app 0x000000010044c280 0x0000000100040000 + 4244096\", \"13 libdyld.dylib 0x00000001804d68b8 0x00000001804d4000 + 10424\" )\n. I think there maybe some error ,when SD be used in UITableVIew, and much cancel action.\nBut I did not find it.\n. A ho.  You take it,  I think you have to patch it in cancel and receaving data.. Sure,I already use the latest version,in the master.\nI think there was some thing wrong. The url to be used in the dictionary for key,Then the task is not to be done, released.. You can try my demo project,you will see it.  . I think the problem is that,  in the SDWebImageDownloader class, it will remove SDWebImageDownloaderOperation,  but the operation is working in the other thread.  . I also meet the bug,but did not find good way to resolve it.. ",
    "bennyguitar": "I am also seeing both of these issues, with pretty identical stack traces. Any info?\n. ",
    "JamieScanlon": "I also Have this issue and also using the library in a UITableView. Triggered by a call to sd_cancelImageLoadOperationWithKey when i attempt to load an image in my cellForRowAtIndexPath method. Seems likely to do with cell reuse and canceling an operation from a reused cell.. ",
    "delox": "I'm having the same problem.... ",
    "hejun-lyne": "Still have this issue in 4.0.0\nThread 0 (crashed)\n 0  CoreFoundation!_CFRelease + 0x556\n     r0 = 0x3744fb94    r1 = 0x1babd593    r2 = 0x00000000    r3 = 0x38363ab0\n     r4 = 0x130ec994    r5 = 0x01601d80    r6 = 0x38362578    r7 = 0x01ba2bbc\n     r8 = 0x00000124    r9 = 0x44d58a00   r10 = 0x01012480   r12 = 0x34c47edc\n     fp = 0x130ec990    sp = 0x01ba2b88    lr = 0x1bdd5add    pc = 0x1b85c64a\n    Found by: given as instruction pointer in context\n 1  CFNetwork!HTTPRequestParserClient::~HTTPRequestParserClient() + 0x21\n     r7 = 0x01ba2bc8    sp = 0x01ba2bc4    lr = 0x1bdd5add    pc = 0x1bdd5add\n    Found by: previous frame's frame pointer\n 2  CFNetwork!HTTPRequestParserClient::~HTTPRequestParserClient() + 0x21\n     r7 = 0x01ba2bd8    sp = 0x01ba2bd0    lr = 0x1bf40b7d    pc = 0x1bdd5add\n    Found by: previous frame's frame pointer\n 3  CFNetwork!HTTPRequestMessage::~HTTPRequestMessage() + 0x37\n     r7 = 0x01ba2c14    sp = 0x01ba2be0    lr = 0x1b85c299    pc = 0x1bf40b7d\n    Found by: previous frame's frame pointer\n 4  CoreFoundation!_CFRelease + 0x1a3\n     r7 = 0x01ba2c24    sp = 0x01ba2c1c    lr = 0x1be6dddf    pc = 0x1b85c299\n    Found by: previous frame's frame pointer\n 5  CFNetwork!URLRequest::~URLRequest() + 0x6d\n     r7 = 0x01ba2c60    sp = 0x01ba2c2c    lr = 0x1b85c299    pc = 0x1be6dddf\n    Found by: previous frame's frame pointer\n 6  CoreFoundation!_CFRelease + 0x1a3\n     r7 = 0x01ba2c74    sp = 0x01ba2c68    lr = 0x1bf317f1    pc = 0x1b85c299\n    Found by: previous frame's frame pointer\n 7  CFNetwork!-[NSURLRequestInternal dealloc] + 0x1b\n     r7 = 0x01ba2ca0    sp = 0x01ba2c7c    lr = 0x1ab19195    pc = 0x1bf317f1\n    Found by: previous frame's frame pointer\n 8  libobjc.A.dylib!objc_object::sidetable_release(bool) + 0xed\n     r7 = 0x01ba2cb4    sp = 0x01ba2ca8    lr = 0x1bf32bfb    pc = 0x1ab19195\n    Found by: previous frame's frame pointer\n 9  CFNetwork!-[NSURLRequest dealloc] + 0x25\n     r7 = 0x01ba2ce0    sp = 0x01ba2cbc    lr = 0x1ab19195    pc = 0x1bf32bfb\n    Found by: previous frame's frame pointer\n10  libobjc.A.dylib!objc_object::sidetable_release(bool) + 0xed\n     r7 = 0x01ba2d00    sp = 0x01ba2ce8    lr = 0x1aafe047    pc = 0x1ab19195\n    Found by: previous frame's frame pointer\n11  libobjc.A.dylib!object_cxxDestructFromClass(objc_object, objc_class) + 0x73\n     r7 = 0x01ba2d10    sp = 0x01ba2d08    lr = 0x1ab08ec5    pc = 0x1aafe047\n    Found by: previous frame's frame pointer\n12  libobjc.A.dylib!objc_destructInstance + 0x21\n     r7 = 0x01ba2d1c    sp = 0x01ba2d18    lr = 0x1ab08ee5    pc = 0x1ab08ec5\n    Found by: previous frame's frame pointer\n13  libobjc.A.dylib!object_dispose + 0xd\n     r7 = 0x01ba2d34    sp = 0x01ba2d24    lr = 0x1c0ef9a1    pc = 0x1ab08ee5\n    Found by: previous frame's frame pointer\n14  Foundation!-[NSOperation dealloc] + 0x59\n     r7 = 0x01ba2d44    sp = 0x01ba2d3c    lr = 0x0054095b    pc = 0x1c0ef9a1\n    Found by: previous frame's frame pointer\n15  ourtimes + 0x53c959\n     r7 = 0x01ba2d70    sp = 0x01ba2d4c    lr = 0x1ab19195    pc = 0x0054095b\n    Found by: previous frame's frame pointer\n16  libobjc.A.dylib!objc_object::sidetable_release(bool) + 0xed\n     r7 = 0x01ba2d7c    sp = 0x01ba2d78    lr = 0x1af8fba7    pc = 0x1ab19195\n    Found by: previous frame's frame pointer\n17  libsystem_blocks.dylib!_Block_release + 0x81\n     r7 = 0x01ba2d8c    sp = 0x01ba2d84    lr = 0x1af45083    pc = 0x1af8fba7\n    Found by: previous frame's frame pointer\n18  libdispatch.dylib!_dispatch_client_callout + 0x15\n     r7 = 0x01ba2dd8    sp = 0x01ba2d94    lr = 0x1af495fd    pc = 0x1af45083\n    Found by: previous frame's frame pointer\n19  libdispatch.dylib!_dispatch_main_queue_callback_4CF + 0x379\n     r7 = 0x01ba2de0    sp = 0x01ba2de0    lr = 0x1b85aa17    pc = 0x1af495fd\n    Found by: previous frame's frame pointer\n20  CoreFoundation!CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE + 0x7\n     r7 = 0x01ba3a88    sp = 0x01ba2de8    lr = 0x1b858cff    pc = 0x1b85aa17\n    Found by: previous frame's frame pointer\n21  CoreFoundation!__CFRunLoopRun + 0x58d\n     r7 = 0x01ba3b70    sp = 0x01ba3a90    lr = 0x1b7a8073    pc = 0x1b858cff\n    Found by: previous frame's frame pointer\n22  CoreFoundation!CFRunLoopRunSpecific + 0x1e5\n     r7 = 0x01ba3b98    sp = 0x01ba3b78    lr = 0x1b7a7e81    pc = 0x1b7a8073\n    Found by: previous frame's frame pointer\n23  CoreFoundation!CFRunLoopRunInMode + 0x67\n     r7 = 0x01ba3bb8    sp = 0x01ba3ba0    lr = 0x1cf54bfd    pc = 0x1b7a7e81\n    Found by: previous frame's frame pointer\n24  GraphicsServices!GSEventRunModal + 0x9b\n     r7 = 0x01ba3bec    sp = 0x01ba3bc0    lr = 0x2096282f    pc = 0x1cf54bfd\n    Found by: previous frame's frame pointer\n25  UIKit!-[UIApplication _run] + 0x23d\n     r7 = 0x01ba3c10    sp = 0x01ba3bf4    lr = 0x2095cf61    pc = 0x2096282f\n    Found by: previous frame's frame pointer\n26  UIKit!UIApplicationMain + 0x95\n     r7 = 0x01ba3c28    sp = 0x01ba3c18    lr = 0x002a3fb5    pc = 0x2095cf61\n    Found by: previous frame's frame pointer\n27  ourtimes + 0x29ffb3\n     r7 = 0x00000000    sp = 0x01ba3c30    lr = 0x1af7250b    pc = 0x002a3fb5\n    Found by: previous frame's frame pointer\n28  libdyld.dylib!start + 0x1\n     r7 = 0x00000000    sp = 0x01ba3c30    lr = 0x00000000    pc = 0x1af7250b\n    Found by: previous frame's frame pointer. ",
    "martin-key": "Still crashes\n\n. @bpoplauschi If you have a multiple target project you need to specify on each pod the deployment version. On all my WatchOS pods the minimum target was 3.0 and only SDWebImage is 2.0. That is the way I found that this is the problem. I can attach screenshots and make an issue in the repo if it is needed so the people know at least how to fix it.\n@dreampiggy I have specified the version 2.0 in the podfile, however in my Xcode I still had 2.0.\nI have cleaned the repo then installed the pods again and the generated SDWebImage framework had minimum target of 2.0 again. That is why I am making this PR. \nIf you want you can try to reproduce it on your environment. I have a project with 5 different targets (iOS, watchOS, iMessage, Notification and Spotlight).. Exactly the same issue. I am currently building so I can show you screenshots. . \n. I have no problems with the Legacy build system. However I don't know if it is a bug, or Apple just enforce using the new operational systems. All the Apple watches support watchOS 3.0 and IMO it is highly possible Apple not to change this requirement. However if you decide that it is not needed to bump the minimal version I will not mind to have the PR closed.. @dreampiggy OK! I will keep using my fork (that is what the forks are for :lay). \nIf you need any help on something from me please let me know. I will help with what I can.\nAwesome work on SDWebImage, guys! . It seems to be fine. Let\u2019s close this. \nBest regards,\nMartin Kuvandzhiev\nmobile: +359 887 458 634\nus: +1 301 886 0544\nemail: martinkuvandzhiev@gmail.com\ntelegram: @MartinKey\ntwitter: @mkuvandzhiev\n\nOn 19 Dec 2018, at 9:47, DreamPiggy notifications@github.com wrote:\nDoes this still happend ? We've upload the new Apps update which use the watchOS deployment target version 2.0. I think we can close this now.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SDWebImage/SDWebImage/pull/2497#issuecomment-448500326, or mute the thread https://github.com/notifications/unsubscribe-auth/ADrjrSjtPjDZGpsX37CsNuy_p7h8vudbks5u6e8hgaJpZM4W4U9y.\n\n\n. ",
    "chenzhuolin1002": "Still crashes in 4.0.0. @bpoplauschi Sorry, I forgot the crash stacktrace.\n\nLooks like the same issue.. ",
    "ytqh": "Still Crashes in 4.0.0\n0 Thread\nSIGSEGV\nSEGV_ACCERR\n0 libobjc.A.dylib objc_object::release() + 8\n1 CFNetwork HTTPRequestParserClient::~HTTPRequestParserClient() + 52\n2 CFNetwork HTTPRequestMessage::~HTTPRequestMessage() + 84\n3 CoreFoundation __CFRelease + 216\n4 CFNetwork URLRequest::~URLRequest() + 168\n5 CoreFoundation __CFRelease + 216\n6 CFNetwork -[NSURLRequestInternal dealloc] + 40\n7 CFNetwork -[NSURLRequest dealloc] + 44\n8 libobjc.A.dylib object_cxxDestructFromClass(objc_object, objc_class) + 148\n9 libobjc.A.dylib objc_destructInstance + 92\n10 libobjc.A.dylib object_dispose + 28\n11 Foundation -[NSOperation dealloc] + 92\n12 OurApp -[SDWebImageDownloaderOperation dealloc] (SDWebImageDownloaderOperation.m:85)\n13 libsystem_blocks.dylib _Block_release + 144\n14 libdispatch.dylib __dispatch_client_callout + 16\n15 libdispatch.dylib _dispatch_main_queue_callback_4CF + 1000\n16 CoreFoundation CFRUNLOOPIS_SERVICING_THE_MAIN_DISPATCH_QUEUE + 12\n17 CoreFoundation ___CFRunLoopRun + 1660\n18 CoreFoundation CFRunLoopRunSpecific + 444\n19 GraphicsServices GSEventRunModal + 180\n20 UIKit -[UIApplication _run] + 684\n21 UIKit UIApplicationMain + 208\n22 OurApp main (main.m:18)\n23 libdyld.dylib _start + 4\n. ",
    "annamalairaj": "Getting crash very often. More than 200 crashes in a month.\n\n. Too many crashes. But I am not able to replicate the issue. Crashes observed on the end user's device. More than 200 crashes in a month.\n\n. ",
    "Cooriyou": "I used v4.1 have a same crash .  I used v4.0 facing same issue. . @skyline75489 how to  fix it \uff1f. @skyline75489  I use  #1858 try to fixed it \uff0c better than last version\uff0c but there is still a crash \uff0cdifferent error\u3002\nyou can try used UITableView have 100+ cells to show web image \uff0c move up and down quickly \uff0cwill crashed\n\n. ",
    "justXyS": "0   CoreFoundation                  0x1e0320da _CFRelease + 1366\n1   CFNetwork                       0x1e5aa9ec HTTPRequestParserClient::~HTTPRequestParserClient() + 34\n2   CFNetwork                       0x1e72d704 HTTPRequestMessage::~HTTPRequestMessage() + 56\n3   CoreFoundation                  0x1e031d28 _CFRelease + 420\n4   CFNetwork                       0x1e6535ae URLRequest::~URLRequest() + 110\n5   CoreFoundation                  0x1e031d28 _CFRelease + 420\n6   CFNetwork                       0x1e71b590 -[NSURLRequestInternal dealloc] + 28\n7   libobjc.A.dylib                 0x1d2f1194 objc_object::sidetable_release(bool) + 238\n8   CFNetwork                       0x1e71c99a -[NSURLRequest dealloc] + 38\n9   libobjc.A.dylib                 0x1d2f1194 objc_object::sidetable_release(bool) + 238\n10  libobjc.A.dylib                 0x1d2d6046 object_cxxDestructFromClass(objc_object, objc_class) + 116\n11  libobjc.A.dylib                 0x1d2e0ec4 objc_destructInstance + 34\n12  libobjc.A.dylib                 0x1d2e0ee4 object_dispose + 14\n13  Foundation                      0x1e8ed150 -[NSOperation dealloc] + 90\n14  SDWebImage                      0x0267797e -[SDWebImageDownloaderOperation dealloc] . ",
    "Robot2037": "The very same issue is bothering me too.\n\n. @zhongwuzw There are 32 crashes reported during last 4 days in Crashlytics, which started to appear after new app release, which uses SDWebImage 4.4.2. However I'm not able to reproduce issue myself in Xcode.\nThanks for the info, I will remove clearMemory call when entering background, since is not needed. Anyway I call this function also in didReceiveMemoryWarning, which could cause crash as well.. @zhongwuzw Ok, I din't even know that. It should be stated somewhere in the documentation that clearMemory function is called automatically and you don't need to call it yourself.\nI uploaded crash logs here.. I don't set any configuration for SD, I just use it as it is.. @dreampiggy Hard to say, I don't force any version in Cocoapods, so I always use the last available version. I just know date when I made release build and uploaded it to iTunes. Every time before making release build, I run pod update command to update all libraries.\nThere are dates for three last app builds:\napp version | build date\n------------ | -------------\n2.4.5 | 2018-10-01\n2.4.4 | 2018-07-20\n2.4.3 | 2018-05-18\nRegarding Relases page, SD 4.4.2 was released 2018-07-18, that means app version 2.4.4 and 2.4.5 uses SD 4.4.2. This crash started to appear 5 days ago for both versions. Strange there were no crashes until then and also there is no crash in our other apps using the same SD version. There is screenshot from Crashlytics.\n. Any news on this one? It is very strange there are no more crashes since I reported it here. It suddenly appeared on 15th October and lasted until 18th October, caused 36 crashes in total, and then disappeared. No more reports for last week and also there were no reports before 15th October. At first I thought it was related to new app release, but later I realized even the previous app version was using same SD version. This issue probably only happens during very specific application state or situation.. @dreampiggy Issue was reported on devices running iOS 10 up to iOS 12, both iPhone and iPad. There were no jailbroken devices reported.. ",
    "paulz": "```\nHardware Model:      iPhone7,1\nProcess:             OurApp [5738]\nPath:                /private/var/containers/Bundle/Application/4D0FF6DF-21BF-4702-9023-112CA424F59D/OurApp.app/OurApp\nIdentifier:          com.omadahealth.OurApp\nVersion:             3 (2.4.1)\nCode Type:           ARM-64 (Native)\nRole:                Foreground\nParent Process:      launchd [1]\nDate/Time:           2017-06-29 14:43:17.0516 -0700\nLaunch Time:         2017-06-29 14:43:13.3465 -0700\nOS Version:          iPhone OS 10.1.1 (14B100)\nReport Version:      104\nException Type:  EXC_BAD_ACCESS (SIGSEGV)\nException Subtype: KERN_INVALID_ADDRESS at 0x0000000c13b2bec8\nTermination Signal: Segmentation fault: 11\nTermination Reason: Namespace SIGNAL, Code 0xb\nTerminating Process: exc handler [0]\nTriggered by Thread:  0\nThread 0 name:\nThread 0 Crashed:\n0   libobjc.A.dylib                 0x0000000187ef1704 objc_object::release() + 8 (objc-object.h:531)\n1   CFNetwork                       0x0000000189aac694 HTTPRequestParserClient::~HTTPRequestParserClient() + 52 (AutoTypes.h:29)\n2   CFNetwork                       0x0000000189c72c48 HTTPRequestMessage::~HTTPRequestMessage() + 84 (HTTPRequestMessage.cpp:38)\n3   CoreFoundation                  0x000000018944da74 _CFRelease + 216 (CFRuntime.c:1891)\n4   CFNetwork                       0x0000000189b631f4 URLRequest::~URLRequest() + 168 (CFObject.h:220)\n5   CoreFoundation                  0x000000018944da74 _CFRelease + 216 (CFRuntime.c:1891)\n6   CFNetwork                       0x0000000189c5f814 -[NSURLRequestInternal dealloc] + 40 (NSURLRequest.mm:75)\n7   CFNetwork                       0x0000000189c60b3c -[NSURLRequest dealloc] + 44 (NSURLRequest.mm:445)\n8   libobjc.A.dylib                 0x0000000187ed6f10 object_cxxDestructFromClass(objc_object, objc_class) + 148 (objc-class.mm:462)\n9   libobjc.A.dylib                 0x0000000187ee36e0 objc_destructInstance + 92 (objc-runtime-new.mm:6483)\n10  libobjc.A.dylib                 0x0000000187ee3744 object_dispose + 28 (objc-runtime-new.mm:6502)\n11  Foundation                      0x0000000189ea1b20 -[NSOperation dealloc] + 92 (NSOperation.m:1113)\n12  SDWebImage                      0x00000001005921a4 -[SDWebImageDownloaderOperation dealloc] + 44 (SDWebImageDownloaderOperation.m:85)\n13  libsystem_blocks.dylib          0x000000018837ea28 _Block_release + 144 (runtime.c:175)\n14  libdispatch.dylib               0x00000001883291c0 _dispatch_client_callout + 16 (object.m:455)\n15  libdispatch.dylib               0x000000018832dd6c _dispatch_main_queue_callback_4CF + 1000 (inline_internal.h:2421)\n16  CoreFoundation                  0x000000018944bf2c CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE + 12 (CFRunLoop.c:1793)\n17  CoreFoundation                  0x0000000189449b18 __CFRunLoopRun + 1660 (CFRunLoop.c:3004)\n18  CoreFoundation                  0x0000000189378048 CFRunLoopRunSpecific + 444 (CFRunLoop.c:3113)\n19  GraphicsServices                0x000000018adfe198 GSEventRunModal + 180 (GSEvent.c:2245)\n20  UIKit                           0x000000018f3642fc -[UIApplication _run] + 684 (UIApplication.m:2649)\n21  UIKit                           0x000000018f35f034 UIApplicationMain + 208 (UIApplication.m:4091)\n22  OurApp                          0x000000010008b390 main + 84 (main.m:7)\n23  libdyld.dylib                   0x000000018835c5b8 start + 4\n```. ",
    "bigbangvn": "Hi StarbuckBG,\nHow do you reproduce the crash?. ",
    "IOSDeveloperProgrammer": "@mythodeia  Hi.. !!! Thank you for given great lib.i has been developing chat app.I need to send image with progress like whatsapp. Here, 1. first image sending perfectly with progress. 2. Progress calling repeatedly,while sending 3rd , 4th etc.. image to friend. 3. what did i wrong here please help me\nmy code here: \n```\n SDWebImageManager *manager = [SDWebImageManager sharedManager];\n    [manager downloadImageWithURL:url1\n                          options:SDWebImageRefreshCached\n                         progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n                            CGFloat domandeFloat = [[NSNumber numberWithInt:(int) receivedSize] floatValue];\n                             CGFloat corretteFloat = [[NSNumber numberWithInt: (int)expectedSize] floatValue];\n                         float currentProgress = domandeFloat/corretteFloat;\n\n                                                     [self.circleProgressBar setProgress:currentProgress animated:YES];\n                     }\n                    completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n\n                            self.circleProgressBar.hidden=YES;\n                            [self.circleProgressBar stopAnimation];\n\n                            msg.thumbnail=image;\n\n                            if (_isNewMessage==YES) {\n                                _isNewMessage=NO;\n                            }\n\n\n                        else\n\n                        {\n                            self.circleProgressBar.hidden=YES;\n                            [self.circleProgressBar stopAnimation];\n\n                            NSData *imageLoadingData = [[NSData alloc] initWithBase64EncodedString:placeholderData options:NSDataBase64DecodingIgnoreUnknownCharacters];\n\n                            msg.thumbnail=[UIImage imageWithData:imageLoadingData];\n                        }\n\n\n                    }];\n\n```\n. @mythodeia  is it 3.8 latest version ? what is latest version ? \n. @mythodeia  Thank you for the response. FYI,  I updated v3.8 (was in  3.7. ) but I having same problem. how to solve it. and one more thing  how to show image without blur effect after completed progress. ? Why it's calling again again using block in method. please help me\n. ",
    "holyhan": "Yon did not pass the \"completedBlock\" param. Is to want to prefetch image? you can use [SDWebImagePrefetcher prefetchURLs] method retry.. ",
    "baight": "But why UIImageView+Webcache has setted the placeholder when the url is nil.\nAt least, I think UIButton+Webcache and UIImageView+Webcache should have the same behavior, isn't it ? @bpoplauschi . ",
    "cdstamper": "Found my solution: SDWebImageDownloader allows setting custom header values:\nSDWebImageDownloader.sharedDownloader().setValue(\"token\", forHTTPHeaderField: \"Authorization\")\n. ",
    "wwwjfy": "The bug is still here, though it's not related to SDWebImage or FLAnimatedImage.\nI found that it's a UIImage bug, that if the UIImage is created by UIImage's animatedImageWithImages:duration: i.e. UIImage.images is set, during interactive pop gesture, it'll become blank, or a pre-set UIImage (if any, in SDWebImage case, maybe a placeholder image)\nI've filed a bug report to Apple.\nJFYI if anyone meets the same issue.. ",
    "PerfectShen": "\u6211\u4e5f\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898  \u8fd9\u4e2a\u5e94\u8be5\u600e\u4e48\u5904\u7406\u5462 . \u8fd9\u4e2a\u95ee\u9898 \u6211\u7528iphone6 ios10.3 \u6d4b\u8bd5\u7684\u4f1a\u6709\u8fd9\u4e2a\u95ee\u9898\uff0cios11 \u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\uff0c\u76ee\u524d\u6211\u5b9e\u73b0gif\u7528\u7684\u662f\u5176\u4ed6\u65b9\u5f0f\uff0c\u5bf9\u5185\u5b58\u548ccpu\u5360\u7528\u90fd\u505a\u4e86\u4f18\u5316. \u4f4d\u7f6e\u4e71\u53d8\uff1f\u5e27\u53d8\u5316\u7684\u65f6\u5019\u6df7\u4e71\u4e86\u5417 . FLA\u6ca1\u6709\u95ee\u9898 \u8981\u5347\u7ea7\u4ec0\u4e48\u7248\u672c\uff1f\n. \u597d\u5427 \u6211\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528fla\u4f1a\u597d\u4e00\u70b9\uff0cfla\u5c55\u793agif\u56fe\u65f6\u5bf9\u5185\u5b58\u505a\u4e86\u4f18\u5316\u3002 sd\u53ea\u662f\u521d\u59cb\u5316\u4e00\u4e2a UIIamge\uff0c\u5e76\u6ca1\u6709\u5bf9\u663e\u793a\u505a\u4f18\u5316\uff0c\u5982\u679c\u663e\u793a\u5e27\u6570\u5728100\u591a\u5f20\u7684gif\u56fe\u65f6\uff0c\u5185\u5b58\u5360\u7528\u4f1a\u5f88\u9ad8\uff0c\u5c24\u5176\u662f\u5217\u8868\u91cc\u663e\u793a\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u5e94\u7528\u95ea\u9000. ",
    "szqxjf": "\u600e\u4e48\u5904\u7406\u5462\u3002. \u7528\u90a3\u4e2a\u7b2c\u4e09\u65b9\u5e93 \u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\u4f46\u662f\u6211\u4eec\u4f4d\u7f6e\u662f\u4e71\u53d8\u7684\u3002\u7c89\u5751\u3002. \u4e0d\u662f\u7684\u3002\u8fd8\u662f\u6d88\u5931\u7684\u3002 \u7528\u7b2c\u4e09\u65b9FLAnimatedImage \u8fd9\u4e2a\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u7684\u3002\u4f46\u662f\u5f97\u5347\u7ea7\u7248\u672c\u3002\u6211\u7684\u7248\u672c \u8fd8\u662f 3.8.2\u7684\u3002\u5347\u7ea7\u7684\u6210\u672c\u5f88\u9ad8\u554a\u3002\u4e5f\u4e0d\u61c2\u54ea\u4e2a\u7248\u672c\u6bd4\u8f83\u7a33\u5b9a\u3002. sd \u5f97\u5347\u7ea7\u52304.0.0.  \u3002\u5c31\u662f\u4e0d\u61c2 4.0.0-4.2.3 \u54ea\u4e2a\u7248\u672c\u6bd4\u8f83\u7a33\u5b9a\u3002. \u6069\u3002\u5173\u952e \u6211\u4eec\u7684\u4f4d\u7f6e\u4e0d\u56fa\u5b9a\u7684\u3002\u518duicollectionview\u7684\uff0c\u8fd8\u6709\u5404\u79cd\u6837\u5f0f\u3001\u4f4d\u7f6e\u662f\u4e0d\u56fa\u5b9a\u3002\u4e0d\u7136\u6211\u5c31\u53ef\u4ee5\u4e0b\u8f7d\u4e0b\u6765\u3002\u7136\u540e\u7528fla\u63a5\u7ba1\u4e86\u3002    \u6539\u52a8\u5f88\u5927\u3002 \u6240\u4ee5 \u624d\u60f3\u76f4\u63a5\u7528 sd 4.0.0\u7248\u672c\u8d77\u3002. ",
    "vikram-gupta": "Thanks @mythodeia . ",
    "srxboys": "My project, there are many such pictures. for example:\nhttps://raw.githubusercontent.com/srxboys/RXImages/master/GHS/play.png. Now every time from the new download (SDWebImageRefreshCached).. yes!. Not every time to add a white background, my project at least 20 pictures downloaded at the same time, if fast browsing app will be more.\nThe version I use is the latest.. ",
    "mistak": "3.7.3 @mythodeia . i need update ? it's can reslove my problem?. ",
    "xiaolinmao": "[self.imageView sd_setImageWithPreviousCachedImageWithURL:photo.url placeholderImage:photo.sourceImageView.image options:SDWebImageRetryFailed progress:^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {\n    } completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n\n\n         [weakSelf setMaxAndMinZoomScales];\n    }];\n\n. ",
    "948769029": "\u4ec0\u4e48\u65f6\u5019\u66f4\u65b0https\u554a \u73b0\u5728\u90fd\u5728\u9002\u914dhttps \u7fa4\u4e3b\u4ec0\u4e48\u65f6\u5019\u66f4\u6539\u5462. ",
    "304164084": "hi, here is a problem. please help. \nerror: Error Domain=NSURLErrorDomain Code=-1022 \"The resource could not be loaded because the App Transport Security policy requires the use of a secure connection\nmy project has used https, but my friends told me close ATS  which is not take effect. \n .    [_headerView.avatarImageView sd_setImageWithURL:[AppConfig imageUrlWithStr:CURRENT_USER.avatar] placeholderImage:kAVATAR_IMAGE_P options:0 completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                // here back error\n            }]; . \n  Looking forward to your reply!. ",
    "liaodalin19903": "@Rob Ryan, Rob, bro, How do you think this memory leak to solve?. ",
    "Cylix": "Any news about this leak?\nI got the same and the leak is particularly severe (currently the thing that leaks the most in our app).\nBest. ",
    "ashishprasadgit": "perhaps this can help\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:false]\nDecompressing Image is good for performance but consumes a lot of memory.. ",
    "0xxxD": "where? Why don't you capture?. ",
    "FelixYin66": "\u53ef\u4f7f\u7528 SDWebImageContinueInBackground \u53ef\u4e0b\u8f7d\u56fe\u7247\uff0cATS\u73af\u5883\u4e0b. https://ii.pod100.com/uf/UploadFiles/20160301/8c763ec4ccb34a3c83684dbd9d503975.jpg  \u8fd9\u4e2a\u56fe\u7247\u94fe\u63a5\u6709\u95ee\u9898\uff0c\u4e0d\u662fhttps\u800c\u662fhttp... \u6d4f\u89c8\u5668\u4f1a\u7ed9\u51fa\u63d0\u793a\u4e3a\u975e\u5b89\u5168\u94fe\u63a5\u3002\u3002\u3002\u3002 \u5982\u679c\u56fe\u7247\u662fhttps\u7684\u94fe\u63a5\uff0c\u4e5f\u65e0\u9700\u5355\u72ec\u914d\u7f6e\n. ",
    "yupuyang": "https://ii.pod100.com/uf/UploadFiles/20160301/8c763ec4ccb34a3c83684dbd9d503975.jpg\nError Domain=NSURLErrorDomain Code=-1200 \"An SSL error has occurred and a secure connection to the server cannot be made.\" UserInfo={NSURLErrorFailingURLPeerTrustErrorKey=, NSLocalizedRecoverySuggestion=Would you like to connect to the server anyway?, _kCFStreamErrorDomainKey=3, _kCFStreamErrorCodeKey=-9802, NSErrorPeerCertificateChainKey=(\n    \"\",\n    \"\"\n), NSUnderlyingError=0x17405a9a0 {Error Domain=kCFErrorDomainCFNetwork Code=-1200 \"(null)\" UserInfo={_kCFStreamPropertySSLClientCertificateState=0, kCFStreamPropertySSLPeerTrust=, _kCFNetworkCFStreamSSLErrorOriginalValue=-9802, _kCFStreamErrorDomainKey=3, _kCFStreamErrorCodeKey=-9802, kCFStreamPropertySSLPeerCertificates=(\n    \"\",\n    \"<cert(0x100883400) s: Syman. @FelixYin66 \u5982\u4f55 \u975e\u5b89\u5168\u94fe\u63a5\u4e5f\u80fd \u52a0\u8f7d\u51fa\u6765\uff1f\uff0c\u63a5\u53e3 \u5c31\u53ef\u4ee5\u52a0\u8f7d\u51fa\u6765\u554a. ",
    "CoderFM": "same to you @yupuyang . ",
    "theSouthOfSummer": "Thank\n2017-01-28 3:23 GMT+08:00 Bogdan Poplauschi notifications@github.com:\n\nClosed #1755 https://github.com/rs/SDWebImage/issues/1755.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1755#event-939775139, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AXjXKkAIrPmKswC30FCrFFs6hZxwJWZHks5rWkQYgaJpZM4LS2WF\n.\n. \n",
    "al-liu": "I also want to know.. Hello, You're right. This is the StarUML. Thank you very much.\nlittlesome notifications@github.com\u4e8e2017\u5e741\u670824\u65e5 \u5468\u4e8c12:53\u5199\u9053\uff1a\n\nGuess it's StarUML, since there's a SDWebImage.mdj file in Docs directory\n(mdj = metadata-json).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1761#issuecomment-274709496, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AGh8Q_baypPXPSmDzGs7P1FSluqR8X0Pks5rVYPDgaJpZM4LXbuO\n.\n. \n",
    "littlesome": "Guess it's StarUML, since there's a SDWebImage.mdj file in Docs directory (mdj = metadata-json).\n. ",
    "gaopeipeiok": "do you mean this key? in 2017,the key cannot use,and must open ATS.\nNSAppTransportSecurity\n\nNSAllowsArbitraryLoads\n\n. ",
    "Mosaics": "No response?. @rs . @rs  @phiren  As I said, via swift class point into your method You will find, as shown in figure, your options option is that there is a default empty array value, based on the characteristics of swift have default values are not pass parameters will be at the time of writing this method automatically appear two kinds, one kind is with this parameter, one kind is not belt, when he appeared with no arguments, in fact just write another way to conflict with you, it don't understand what you are using which method (is to ignore parameters method with options or no options that method), since the OC can be identified, suggest the swift, don't give this method directly the option of the initial value, forcing the incoming.This may be a solution.In fact, because of swift this feature, I was surprised that the other way to solve this problem.But I don't know this change whether the framework has big influence on you?\n\n\n. @phiren  Maybe you understand the wrong I mean, this is not a framework user error, but the framework itself is a defect.If must avoid, also for your usage, I didn't find there is a mistake.As shown in figure:\n\n. ",
    "phiren": "@Mosaics facing same problem, any workaround you found?. @Mosaics got your point, i was trying without the options. As i tried with options, now it giving me other error \n\n. ",
    "chariotsystems": "Please add \"import SDWebImage\" to the swift instructions.\nThis simple thing cost me an hour.\nThanks for providing this great framework :). ",
    "huangqiaobo": "I see the log at 3.8.2\nJPEGDecompressSurface : Picture decode failed: e00002d1. ",
    "iOSGeekerOfChina": "@zhouXiaoR \u4f60\u662f\u4e0d\u662f\u4f7f\u7528\u4e86 SDWebImageOptions \u4e2d\u8bbe\u7f6e\u4e86 SDWebImageProgressiveDownload \u5982\u679c\u662f \u53ef\u4ee5\u53bb\u6389\u5c31\u4e0d\u62a5\u9519\u4e86 \u5e94\u8be5\u662f\u6709\u4e9b\u56fe\u7247\u7c7b\u578b\u4e0d\u5141\u8bb8 \u901a\u8fc7SDWebImageProgressiveDownload \u8fd9\u79cd\u6e10\u8fdb\u5f0f\u7684\u65b9\u5f0f\u4e0b\u8f7d\u3002. ",
    "ankit-betterbutter": "Yes i m using the latest version of SDWebImage.\nSorry can't make a demo at the moment. \nMy scenario is that i m loading feeds in tableview.\nA cell has a collectionview and has 4 images in horizontal scroll. . for anyone facing similar issue -\nThe mistake i was doing was setting the showActivityIndicator after the webservice call.\nKindly follow this while adding activity indicator\ncell.imageView.setShowActivityIndicator(true)\ncell.imageView.setIndicatorStyle(.gray)\ncell.imageView?.sd_setImage(with: url) .\n",
    "ivan-konov": "There you go.. This is a useful read on the issue:\nhttp://stackoverflow.com/questions/32923483/umbrella-header-for-module-myframework-does-not-include-header-otherframework\nPeople who use the \"raw\" source code should be able to fix it themselves. I prefer to use Carthage to add frameworks to my projects so I would wait for it to be fixed in the repo :). Nice, thanks a lot! :). Yeah. I'd suggest you just go over all of the different targets' Build Settings and chamge Current Project Version value or go to the Info.plist an change it there. Just make sure all targets have one of these set to something meaningful to your progress on the project.. @omatty198 I did the same thing :). Sure, glad to help!. @jfsagasti by \"update to the latest version\" you mean cloning master branch or downloading latest release?. @jfsagasti If you are in a rush and need to submit soon I would suggest you stick to the manual change solution and not really rely on master as a stable codebase.. @zhongwuzw thanks for the clarification!. ",
    "lauracalinoiu": "Hi guys,\nIt has been a while with this. What is the status of this issue? \nDo you need help?\nI can not use your library because of \"Umbrella header for module 'SDWebImage' does not include header 'FLAnimatedImage.h''.\nThank you very much,\nCALINOIU Laura. ",
    "charliefancelli": "Hi,\nIf you check the Apple official documentation you will see that we need to use these news keys on ios 10. Normally the NSAllowsArbitraryLoads limit use was in January 2017 (but they announced to add a delay), so in future the key will be removed.\nlink. I don't think so, in next month, NSAllowsArbitraryLoads will be remove and only NSAllowsArbitraryLoadsForMedia (and  will work NSAllowsArbitraryLoadsInWebContent).\nAnd actually with these keys this library not working.\n. Yes of course, i will send it in the week (i can't send this project so i need time to create a demo app). ",
    "dunqi": "Same problem here. So, do I have to change it manually?. I checked out the pull request #1784\nWorked fine for me. ",
    "omatty198": "Same problem...\nI screamed and directly it edited. \ud83d\ude31 \n$(SRCROOT)/Carthage/Build/iOS/SDWebImage.framework/info.plist\n\n. ",
    "JKercheval": "I am using Carthage and am hitting this exact error - ERROR ITMS-90056: \"This bundle .../SDWebImage.framework is invalid. The Info.plist file is missing the required key: CFBundleVersion.\"\nIs there a workaround for this?  Branch, fix - need help :). ",
    "jfsagasti": "I've updated with latest version, but still happening.... I've modified the Info.plist manually to make the upload as @omatty198 pointed out.. You are right. Carthage picked the latest release I guess (I don't have \"master\" specified in the cartfile). Sorry for the oversight!. That's exactly what I did, thanks! I needed to submit a new version today \ud83d\udc4d . ",
    "mitch10e": "I had this same problem today. Manually edited the SDWebImage.framework/Info.plist file to set the CFBundleVersion. ",
    "LanYanQin": "I use this on the simulator download image method is ok, but I'm really on board with this method will cause the program card dead flash back.\nIf I set SDWebImageDownloaderProgressBlock nil, there is no problem.. \n@bpoplauschi  I create a new demo found unable to reproduce this issue.May be the cause of my own project.. @boycechang You also like this?I have a problem now used in the project, if you are creating a new DEMO, there is no problem.. @boycechang I solved the problem of your idea.. ",
    "boycechang": "@LanYanQin @bpoplauschi  This problem seems caused by Xcode project cache. Follow the steps bellow can fix this issue.\n1. Clean Build.\n2. Restart Xcode.\n3. Delete your DerivedData folder in ~/Library/Developer/Xcode/DerivedData.\n4. Delete the contents (not the whole folder) of /var/folders.\n5. Restart Computer.. ",
    "qmkCamel": "thanks . ",
    "ws752958369": "i hope that this problem could be solved as soon.. Thanks,use  #951 (comment) solutions,it does work well.. ",
    "SylarRuby": "@bpoplauschi I'll pre-fill if v4 is the same. Will update in a bit. Thanks.. @bpoplauschi Apologies for the new issue. My incompetence got the best of me this morning. I forgot to build my project before importing :(. ",
    "freezy7": "I have the same Problem \ud83d\udc4d. ",
    "Binusz": "@bpoplauschi  Sorry. it's my fault that i didn't mention which version i use. \nYes, i've already upgraded to 4.0.0 . I said that i'd already upgraded. Eventually, i modifed podfile and that problem fixed. (adding use_frameworks!). ",
    "warpling": "I had no idea! Thank you :). ",
    "asd8855": "platform: ios,'8.0'. XCode:8.2.1. sorry,this is my question. ",
    "PabloLerma": "@talkaboutdesign do you have the subspec GIF in your podfile like this?:\npod 'SDWebImage/GIF'. ",
    "JEKos": "I have the same issue. I added pod 'SDWebImage' and pod 'FLAnimatedImage' into podfile, and I changed the UIImageView to FLAnimatedImageView but nothing happend.It still at the 1st frame of the gif.. I added pod 'SDWebImage/GIF' but it's installing SDWebImage like the pod 'SDWebImage'. Oh yeah, you don't need to add pod 'FLAnimatedImage' but the pod 'SDWebImage' and pod 'SDWebImage/GIF' only,also you need to add FLAnimatedImageView to your UIImageView in storyboard (if you use storyboards). Now it works! Thanks!. Ok, done. I tried with SDImageFormat to convert it from UIImage to FLAnimatedImage but it doesn't work too. Problem solved!\nJust called again MyFLAnimatedImageView.sd_setImage(with: imageUrl) in both times, instead of MyFLAnimatedImageView.image = image\n. I think will be better to use your own method for GIFs like back then 3.x.x version without the need to use different class for GIFs. I'll upload the demo soon.. Demo is done! You can download it here. I'm using sd_setImage because I want the GIFs load with animation only once when load the collection view and scroll back to the same GIFs without animation. I opened Issue about that #2073. I can't use your pod, when I'am adding it like that\npod 'SDWebImage'\npod 'SDWebImage/GIF', :git => 'git@github.com:dreampiggy/SDWebImage.git', :branch => 'trick_code_fix_FLAnimatedImageView_fade'\nIt says: \n``\n[!] There are multiple dependencies with different sources forSDWebImageinPodfile`:\n\nSDWebImage\nSDWebImage/GIF (from git@github.com:dreampiggy/SDWebImage.git, branch trick_code_fix_FLAnimatedImageView_fade)\nand when I use only your pod\npod 'SDWebImage/GIF', :git => 'git@github.com:dreampiggy/SDWebImage.git', :branch => 'trick_code_fix_FLAnimatedImageView_fade'\n```\n\nIt says:\n[!] Error installing SDWebImage\n[!] Failed to download 'SDWebImage'.\n. It keeps saying \n[!] Error installing SDWebImage\n[!] Failed to download 'SDWebImage'.. This is very weird...\nJEKs-iMac:Documents jek$ git clone -b trick_code_fix_FLAnimatedImageView_fade git@github.com:dreampiggy/SDWebImage.git\nCloning into 'SDWebImage'...\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n. I changed from git@github.com:dreampiggy/SDWebImage.git  to https://github.com/dreampiggy/SDWebImage.git and it works. @dreampiggy What exactly want me to test with our branch? Can you give me an example?. Oh, ok. I tested and there is not any difference. Something to mention is even when I use images(png, jpg etc) with FLAnimatedImageView, to use one UIViewController for my both (Photos and Gifs category) in my project, fade animation doesn't work. I thought it was because of the Gif, but the problem is the FLAnimatedImageView. (Propably @dreampiggy you knew that but might help someone else :P ). Can you give me an example how to use that?. It gives that error :\n\n. Yes! It works!! Thank you very much for the help and the work you do on SDWebImage!. FLAnimatedImageView is very laggy when you scroll a Grid of Photos or Gifs in collectionView, better to get rid of it. But the fade animation works.. ",
    "vishal-i4gs": "Following all the instructions given, inspirationImageView.sd_setImage(with: imageUrl) call still doesnt play the gif but just shows the first frame of the gif. @bpoplauschi the completion handler of sd_setImage returns an image of type of UIImage? or FLAnimatedImage?. I usually crop images in the completion handler. Since its an UIImage and cropping an image will give back an UIImage as well. We do not have an FlLAnimatedImage to be put into the FLAnimatedImageView. So whats the possible way to crop the gif Image derived from the completion handler?. ",
    "Yuzeyang": "we have an instance of SDWebImageDownloaderOperation for each image download, why you name callbackBlocks, name callbackBlock is the better?\n@property (strong, nonatomic, nonnull) NSMutableArray<SDCallbacksDictionary *> *callbackBlocks;\nmaybe i don't understand the intention..... thanks for your explain\ud83d\ude01. ",
    "truemetal": "@bpoplauschi we're having set of crashes with very similar symptoms. Cannot get it to reproduce, happens on 1% of user sessions. I'm attaching some of the crashed threads, maybe this would help you spot the issue. \n\n\n\n\n\n\n. @bpoplauschi Interestingly enough, in summary we have 1000 crashes like this. We're also getting crashes in random networking foundation places, and none of our code appears in stack traces. Something similar happens in some (but not all) SDWebImage related crashes. Do you think it is just an issue in CFNetwork / Foundation which is just invoked by SDWebImage? . As mentioned above, we've been experiencing massive amounts of crashes like this, and others, that does not seem related to SDWebImage at all. After downgrading to SDWebImage 3.8.1 all of those seem to stop: we're seeing 13.5 thousands crash-free sessions, while with previous trend we'd have around 200 crashes for this number of sessions. . Our baby-bug turned five months just a couple of days ago! \ud83c\udf89 \ud83c\udf82 \n\n. ",
    "Nishant-goibibo": "@bpoplauschi  We are getting same issue. we have 1000 crashes like this.  We have a big number of user. So this is very critical for us.. We are facing same issue.. ",
    "billyto": "I'm not familiar with the code base, but the self looks suspicious in here\nhttps://github.com/rs/SDWebImage/blob/00bf467eb79bb97024eba7393169030a17b98018/SDWebImage/SDWebImageDownloaderOperation.m#L207\n\nAny hints about in what conditions self could be nil? \nWould a weakSelf/StongSelf dance in the block fix the issue? but any collateral problems if so?\n. @skyline75489 I would need to look with more detail to the code, but I have the hunch that the same issue that this PR fixes is happening in other methods/classes; basically cancelling operations that pass selfs around when the 'self' is already deallocated. We are running a this branch in prod for a considerably image intense app and the issue gets fixed but we still see other crashes related to SDWebImage.. https://github.com/rs/SDWebImage/pull/1858 should fix it, we didn't use the weak/strong ref dance because the notification object is not being used anywhere.. @zengql512 are you getting the same stack trace? . You are correct, the #1858 only fixes https://github.com/rs/SDWebImage/issues/1807 , both seems like both are related.. \n",
    "testmesut": "We are getting same issue. (nearly 2K times). This is critical. We are facing same issue (when we have 200+ cells in our tableview). We can reproduce it everytime. (going to downgrade sdwebimage). Hi @1oo1 ,\nI can reprudce with these steps.\n- Load a tableview with over 200+ cells first time (images should be un-cached) \n- Scroll to bottom fastly\n- Gone. ",
    "pmiaskiewicz": "I would suggest changing self to nil, as object doesn't seem to be used anywhere.\nobjective-c\n[[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:nil];. ",
    "stevenojo": "We're seeing this issue in our pre production builds as well.\nI'm noticing it in code where I am rapidly swapping out the data in a collection view view about 10 images. Seems like the pointer to self has gone bad. \nWe could set a flag in the dealloc method of the SDWebImageDownloaderOperation, and if that flag has been set, return from the cancelInternal method prior to posting that notification?\n. ",
    "Nick-R": "We're getting ~500 crashes since Feb 5. Can you please fix?. ",
    "brstgt": "Same here: http://crashes.to/s/4da556ee579\nPlease fix!\n+1 for not passing self to notification\nEven https://github.com/rs/SDNetworkActivityIndicator/blob/master/SDNetworkActivityIndicator.m does not make use of it and it is the only observer for that notification as far as i can see.. Another crash with kind of the same cause: http://crashes.to/s/6137b904bf2. I personally preferred to downgrade to 3.x. ",
    "niallwatchorn": "This is also crashing for me on a new app I am building. I am using sdWebImage to set the image on a cell. If I scroll too quickly it crashes. ",
    "shuhrat10": "I have the same issue. Please fix it. \nSDWebImageDownloaderOperation.m line 207 in __47-[SDWebImageDownloaderOperation cancelInternal]_block_invoke (SDWebImageDownloaderOperation.m:207). ",
    "Makxs": "Unfortunately I'm not able to replicate the issue sistematically, but after upgrading to 4.0 I'm having  a lot of crashes like this.. ",
    "benski": "@bpoplauschi The object:self in the NSNotificationCenter postNotificationName call can definitely cause this. It creates a reference to the SDWebImageDownloaderOperation object that gets deallocated on another queue that is listening to the notification (in this case the main queue), which might be unexpected. I have seen similar crashes in the past, although it's typically the other way around (releasing the last reference on a background thread of an object that's doing things that need to happen on main queue). If you don't need the reference to the SDWebImageDownloaderOperation in the notification listener, you should definitely pass nil!\nWe are also seeing a significant amount of crashes due to this in 4.0.0 in a heavily-used application.. Here is a better stack trace from within Xcode\n\n. ",
    "wb145230": "I have the same issue. Please fix it.\n[SDWebImageDownloaderOperation cancelInternal]_block_invoke (SDWebImageDownloaderOperation.m:207). ",
    "piercifani": "All joking aside: what's going on here? Do we need to file a PR to remove the self reference from the notification? \nBut more importantly: what is the current status for this project? 5 months with a crash like this out there seems like an awful long time. @bpoplauschi I'm still seeing this crash after the changes in #1940 are applied.\nLooking at the code in reset, shouldn't the block dispatched to dispatch_barrier_async be retaining a weak self?. Here's the full stack trace out of Crashlytics (I redacted some info, off course)\ncom.hostapp.hostapp_issue_1165_crash_567b2d42fcb145f18709320b204a6a47_4fce22b77c1b11e784ae56847afe9799_0_v2.txt\nIt appears to be happening a lot more on iOS 10 than iOS 9 (99% vs 1%), Only 24% when \"App In Focus\" and all devices are experiencing this issue.. Thanks! I'll try this on my next release and let you know what I find. I can confirm that this made the crash disappear on Fabric/Crashlytics so I think it's safe to merge. Can we assign this to the 4.1.1 release and merge it?. I also saw this behaviour and I agree with @yutiandesan that ideally, it should not display. Any ETA on this?. +1. I can confirm that this crash goes away when you configure SDWebImage like this:\nSDWebImageManager.shared().imageCache?.config.shouldDecompressImages = false\nSDWebImageDownloader.shared().shouldDecompressImages = false\nHopefully, https://github.com/rs/SDWebImage/milestone/25 will fix it. I didn't want to imply that it's an SDWebImage bug \ud83d\ude04 \nJust that if you want to tradeoff performance for less crashes, you can do it by disabling the decode feature. ",
    "Jorc": "\n. ",
    "pak-amsiq": "+1. ",
    "XcqRomance": "+1. ",
    "aofeng2009": "+1. ",
    "siliconprime-hoangho": "Thank @mythodeia , I'll try it.\nSo I'll close this issue now and inform you if any update.\nThanks.. ",
    "songxing10000": "@mythodeia I want to say means the method\n[[SDWebImageDownloader sharedDownloader] downloadImageWithURL:(nullable NSURL *)url                                                       options:(SDWebImageDownloaderOptions)options\nprogress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\ncompleted:(nullable SDWebImageDownloaderCompletedBlock)completedBlock\nis the latest ,before the version \n[[SDWebImageManager sharedManager] downloadImageWithURL:(NSURL *)url\n                                         options:(SDWebImageOptions)options\n                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock\n                                       completed:(SDWebImageCompletionWithFinishedBlock)completedBlock\nwill be cached, and now the latest version of the method is not cached, as if it is real-time download. When I returned to the 3.8.2 version, everything actually normal, but once the switch to 4.0.0, there is a problem, how is it, ah, is my use is wrong?. \n. @dreampiggy thanks,I'll be try. ",
    "g001613001": "@bpoplauschi\nPlatform Name   ios \nPlatform Version     8.1/ 9.0/ 10.1 \nSDWebImage Version  3.8.2\nIntegration Method   cocoapods\nXcode Version   Xcode 8.2.1\nRepro rate  sometimes when fail will never success\nRepro with our demo prj demo project can't run.\nDemo project link   no.\nthis is Error report:\n(Error Domain=NSURLErrorDomain Code=-999 \"cancelled\" UserInfo={NSErrorFailingURLKey=https://itvcloud.org/KFAAppService/MAM/Thumbnail/Promo/Home/31298515-29f8-4f7a-a422-252afb5d5470.png, NSLocalizedDescription=cancelled, NSErrorFailingURLStringKey=https://itvcloud.org/KFAAppService/MAM/Thumbnail/Promo/Home/31298515-29f8-4f7a-a422-252afb5d5470.png})\nsorry for late reply.\n. @bpoplauschi \nI think it's our  server SSL proplem.\nso I use allowInvalidSSLCertificates.\nIt's not working too.\nBTW, Kingfisher this lib can work for download image success.\nI don't know why?\n. ",
    "WangRuiChn": "I have the same problem in 3.8.2.. ",
    "zhungxd": "my crash is same \uff0cwhen i update the sdk from 3.76 to  4.0.0\nCrashed: NSOperationQueue Serial Queue\n0  Foundation                     0x3101e5e4 __NSOQSchedule + 339\n1  Foundation                     0x3101e4cd __NSOQSchedule + 60\n2  Foundation                     0x30f7e057 +[__NSOperationInternal _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:] + 966\n3  Foundation                     0x30f7db9b NSKeyValueNotifyObserver + 90\n4  Foundation                     0x30f7d8f5 NSKeyValueDidChange + 344\n5  Foundation                     0x30f69ef5 -[NSObject(NSKeyValueObserverNotification) didChangeValueForKey:] + 88\n6  Fanli                          0x493f25 -[SDWebImageDownloaderOperation done] (SDWebImageDownloaderOperation.m:221)\n7  Fanli                          0x4944c7 -[SDWebImageDownloaderOperation URLSession:dataTask:didReceiveResponse:completionHandler:] (SDWebImageDownloaderOperation.m:291)\n8  Fanli                          0x49264d -[SDWebImageDownloader URLSession:dataTask:didReceiveResponse:completionHandler:] (SDWebImageDownloader.m:271)\n9  CFNetwork                      0x302cd49d __75-[__NSCFURLSession delegate_dataTask:didReceiveResponse:completionHandler:]_block_invoke + 36\n10 Foundation                     0x30f8ca37 -[NSBlockOperation main] + 130\n11 Foundation                     0x30f7cc35 -[__NSOperationInternal _start:] + 772\n12 Foundation                     0x31020afd __NSOQSchedule_f + 60\n13 libdispatch.dylib              0x3ae30e77 _dispatch_queue_drain + 374\n14 libdispatch.dylib              0x3ae2df9b _dispatch_queue_invoke + 42\n15 libdispatch.dylib              0x3ae31751 _dispatch_root_queue_drain + 76\n16 libdispatch.dylib              0x3ae319d1 _dispatch_worker_thread2 + 56\n17 libsystem_pthread.dylib        0x3af5bdff _pthread_wqthread + 298\n18 libsystem_pthread.dylib        0x3af5bcc4 start_wqthread + 8. ",
    "dabing1022": "We are facing the same issue.. ",
    "wstyres": "Using some fixes mentioned in the comments of #1764 actually allows me to build and run the Xcode project at all.  Without them I can't use SDWebImage without getting an unrecognized selector error.  But with or without the fixes I added, the travis build will still fail. Turns out travis-ci was using an outdated pod repo and was downloading version 3.8.6 as opposed to version 4.0.0. By adding pod update repo into my travis build file the issue is resolved (despite having a significantly longer build time).. ",
    "gshe": "We are facing same issue.. ",
    "1oo1": "In fact I didn't reproduce these crashes, just found them on CrashReports. \n@testmesut , If you can reproduce it, please provide examples to help.. ",
    "aldolazuardi": "@testmesut have you try downgrade sdwebimage? I'm still use version 3.7 and reproduce same crash. Crash did not happen in iphone 6s and up. I tried to put this below line in didMemoryWarning, it helps for several scroll but still got crash after several fast scroll\n\nSDImageCache.shared().clearMemory(). \n",
    "PhilippeBoisney": "Facing same issue with a tableview fills with +200 rows.\nHappening every time user performs fast scrolling with a slow device (iPod Touch for example).. @testmesut @IvanChan @1oo1 Hey guys ! I've performed a lot of test and find out that problem also occurred with other libraries like Nuke or Kingfisher. Actually, I don't know why but didReceiveMemoryWarning method was never called when app run out of memory.\nFinally, after 10 hours of multiple tests, I've checked if crash with \"fast scrolling\" happened with other apps (Facebook, Instagram, etc...). And those apps crashed too, especially when image was loaded from cache (but not during first loading from url)\nSo I realized that was my device that caused the problem. Actually, my iPod touch wasn't reboot since a while, so I simply rebooted it.. and problem disappears. \nI mean It's fucking weird isn't ? I feel like I'm really stupid now.... ",
    "OmarPedraza": "@IvanChan, 4.0 works for you?\nIt still crashes sometimes in my app.... @roeeAsaf, does version 3.8 not crash?\nIf not, it looks like a workaround (for the time being) for me.. ",
    "CodeStage": "We have this issue too, but not in huge numbers (0,007% of active users every day). Still it's number one in our crash list. I assume it happens in combination with collection views. So far we have not been able to reproduce it or force it.\n\n. ",
    "roeeAsaf": "I back to 3.8 )-:\nwhen are you think that be a fix for this? \n . ",
    "archpan": "We are facing same issue.. ",
    "paktree": "We are seeing something like for 8 minutes screen time of the app, it was running 2 minutes in background which seems quite significant.. ",
    "twhaolee": "@bpoplauschi I don't get your point here.\nIs it possible to affect non-CocoaPods user via modifying podspec?\nCould you please give me an example how it would happend?. I still do not understand.\nWhich user use podspec to install SDWebImage, but not via CocoaPods?. Usually, PODS_ROOT is wrote as ${SRCROOT}/Pods.\nIf you use SRCROOT and FLAnimatedImage at the same time, USER_HEADER_SEARCH_PATHS will not found header file of FLAnimatedImage.. @dreampiggy Indeed, the current setting can run successfully. Even this problem is not a problem in the current Xcode. I fixed a variable problem.. Mainly, I cannot repeat the problem at that time.\nIn my memory, when I used FLAnimatedImage via CocoaPods, Xcode had an error.\nIf I can repeat the problem and record the steps, I will reopen it.. ",
    "huipengo": "\nhi, I also met it, how resolve ? I used version 4.0\n. We also met this crash , v4.0, \n how to fix this crash?. We are facing same issue. I used v4.0. ",
    "hadanischal": "I have been using 'SDWebImage', '~>3.8'\n. ",
    "JCarlosR": "@mythodeia The demo project is in Objective-C, right?\nI am learning Swift but I have never used Objective-C.\nI read that the images that are after scrolling are not loading because iOS stops the loading for performance.\nSo I am trying to avoid that and load all the images initially:\npublic func tableView(_ tableView: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {\n        let urls = indexPaths.map { categories[$0.row].image }\n        print(urls)\n        SDWebImagePrefetcher.shared().prefetchURLs(urls)\n    }\nOnly the latest images are not loading.\nCan you give me some idea please?. ",
    "west0r": "I use SDWebImage v3.8.2 and now i need version with backward compatibility. ",
    "jiangxk2015": "I also met this problem\uff0cfast sliding a list of images \nerror message\uff1a\nCoreFoundation  CFRelease + 120\n1 myAPP -[SDWebImageDownloaderOperation URLSession:dataTask:didReceiveData:] (SDWebImageDownloaderOperation.m:380)\n2 myAPP -[SDWebImageDownloader URLSession:dataTask:didReceiveData:] (SDWebImageDownloader.m:279)\n3 CFNetwork 67-[NSURLSession delegatedataTask:didReceiveData:completionHandler:]_block_invoke.242 + 36\n4 Foundation    _NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__ + 16\n5 Foundation    -[NSBlockOperation main] + 96\n6 Foundation    -[__NSOperationInternal _start:] + 620\n7 Foundation    NSOQSchedulef + 228\n8 libdispatch.dylib dispatch_client_callout + 16\n9 libdispatch.dylib __dispatch_queue_serial_drain + 928\n10 libdispatch.dylib    __dispatch_queue_invoke + 652\n11 libdispatch.dylib    __dispatch_root_queue_drain + 572\n12 libdispatch.dylib    __dispatch_worker_thread3 + 124\n13 libsystem_pthread.dylib  _pthread_wqthread + 1288. @bpoplauschi Ok,I will check the problem after update.. ",
    "zqxiaojin": "try to fix https://github.com/rs/SDWebImage/issues/1706. ",
    "inigo333": "This keeps happening to me. What info do you need?. ",
    "Voldemarus": "On my mind it happens while big image is loaded and downloadImageWithURL: method is called. Message is generated before completion block is invoked (error = nil, finished = NO. . ",
    "O-mkar": "It happens with this URL\nhttp://gogoanow.com/wp-content/uploads/2018/02/The-Ganesha-series-\u2013-a-solo-exhibition-by-Hesham-Malik-e1519806035827.jpg. Sure i will do that. ",
    "VioletHill": "I think SDWebImageDownloaderLIFOExecutionOrder only work in a lot of tasks,\nSo if you add two different image url, such as \n[imageViewA sd_setImageWithURL:urlA];\n[imageViewB sd_setImageWithURL:urlB];\nI think these two SDWebImageOperation will start together.  Because _downloadQueue.maxConcurrentOperationCount = 5;\nBut if you try like this:\n```\n    //Reset the Concurrent Count\n    _downloadQueue.maxConcurrentOperationCount = 2;\nNSArray *image = @[\n                   @\"http://www.weipet.cn/bixiong/images/pic/43.jpg\",\n                   @\"http://www.weipet.cn/bixiong/images/pic/9086309.jpg\",\n                   @\"http://c1.cdn.goumin.com/cms/petschool/day_141210/20141210_8ae7939.png\",\n                   @\"http://desk.fd.zol-img.com.cn/t_s1680x1050c5/g5/M00/02/03/ChMkJ1bKxtqIXy1OAAi9LK5qQwgAALHrQK3PAoACL1E420.jpg\",\n                   @\"http://www.redmaplenews.com/bbs/data/attachment/forum/201301/30/223812ejfibjevvj3n3ldh.jpg\",\n                   @\"http://www.weipet.cn/bixiong/images/pic/b2-1.jpg\",\n                   @\"https://4.bp.blogspot.com/-Uc1cshYSKy0/VyFnyanxMqI/AAAAAAAAAGM/JB2IH9UuTSIJ1CCqLHwOFIGIIUL7GRlVACKgB/s1600/201404211123518834.jpg\"];\n[SDWebImageManager sharedManager].imageDownloader.executionOrder = SDWebImageDownloaderLIFOExecutionOrder;\nfor (int i = 0; i < image.count; i++) {\n    UIImageView *imageView = [[UIImageView alloc] init];\n    [imageView sd_setImageWithURL:image[i]];\n}\n\n```\nI think you will see the dependency on last 5 imageUrl (no first and second dependency).  @bpoplauschi Sorry for that didn't fill the issue template well. I will update soon\nand  thanks for @dreampiggy.\n. ",
    "danrudolf1": "I can confirm that this is still an issue in V 4.0.0. ",
    "cbedoy": "Yes, I tried but I can available to import #import \nI was compiling with 3.8 . ",
    "GibaPadavan": "No, order is right. The scales of graphs is different. You can see that peak on first graph is 1.07 Gb. And on second one peak is 252 Mb. \nThis is how it looks when I compare them both in the same scale.\n\nSorry for inconvinience.. ",
    "Asution": "I know now~ it's my sdwebimage version is not new. OMG!   My version is '3.7.3' , It can't load this URL, but the new version can load. Thanks bro!. The image information.\n\n. @mythodeia When i use github demo reload this image that can't crash, But my Podfile use SDWebImage like this pod 'SDWebImage'  Using SDWebImage (3.8.2).. ",
    "ligun123": "I have the same question.\nCan you help us?. ",
    "kata017": "I use 3.7.6 in SDWebImage. And i can replicated in your demo project.. I upgrade the new version. But i received the same error. My network connection is good, I am not use proxy. . If I change HTTPHeaders - don't receive NSURLErrorDomain Code=-1005 error. But sometimes give a NSURLErrorDomain Code=-1008 \"resource unavailable\" error. \n_HTTPHeaders = [@{@\"Accept\": @\"image/*;q=0.9\", @\"Accept-Encoding\": @\"\"} mutableCopy];. ",
    "Feng-xp": "I have the same question. both 3.7.6 and 4.1.0\nreceive -1005 error, but imageData size is ok.\n. solved by using keep-alive. ",
    "g-enius": "Thank you for the reply, but I think that's not the function I was asking for. In latest code of addProgressCallback: completedBlock: forURL: createCallback, there is really a token need to be returned. but I was asking addProgressCallback:andCompletedBlock:forURL:createCallback, which maybe has been deleted. I paste the following code in version 3.7.1, there was no token to return or code wait to execute.\n```\n- (void)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock andCompletedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock forURL:(NSURL *)url createCallback:(SDWebImageNoParamsBlock)createCallback {\n    // The URL will be used as the key to the callbacks dictionary so it cannot be nil. If it is nil immediately call the completed block with no image or data.\n    if (url == nil) {\n        if (completedBlock != nil) {\n            completedBlock(nil, nil, nil, NO);\n        }\n        return;\n    }\ndispatch_barrier_sync(self.barrierQueue, ^{\n    BOOL first = NO;\n    if (!self.URLCallbacks[url]) {\n        self.URLCallbacks[url] = [NSMutableArray new];\n        first = YES;\n    }\n\n    // Handle single download of simultaneous download request for the same URL\n    NSMutableArray *callbacksForURL = self.URLCallbacks[url];\n    NSMutableDictionary *callbacks = [NSMutableDictionary new];\n    if (progressBlock) callbacks[kProgressCallbackKey] = [progressBlock copy];\n    if (completedBlock) callbacks[kCompletedCallbackKey] = [completedBlock copy];\n    [callbacksForURL addObject:callbacks];\n    self.URLCallbacks[url] = callbacksForURL;\n\n    if (first) {\n        createCallback();\n    }\n});\n\n}\n```. ",
    "Phenek": "Same issue here,\n```\n- (void)cancelInternal {\n    if (self.isFinished) return;\n    [super cancel];\nif (self.dataTask) {\n    [self.dataTask cancel];\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:self];\n    });\n\n    // As we cancelled the connection, its callback won't be called and thus won't\n    // maintain the isFinished and isExecuting flags.\n    if (self.isExecuting) self.executing = NO;\n    if (!self.isFinished) self.finished = YES;\n}\n\n[self reset];\n\n}\n```\nEXC_BAD_ACCESS when dispatch_async stop notification. I fix this by using AlamofireImage instead..\nIt's more effective with more possibility.\nSame use as SDWebImage:\nSDWebImage:\n_imageView.sd_setImage(with: URL: url, placeholderImage: UIImage(named: \"placeholder.png\"))\nAlamofireImage:\n_imageView.af_setImage(withURL: url, placeholderImage: UIImage(named: \"placeholder.png\")). ",
    "zengql512": "We also met this crash SDWebImageDownloaderOperation.m:85, how to fix?. it doesn't work for changing object:self to object:nil, and SDWebImageDownloaderOperation.m:85 crashes again.. @billyto  yes, crash stack info is the same as before.. Is there any solution to fix this crash?. ",
    "SurajSundar": "Hi,\nStarted seeing this issue after updating to SDWebImage 4.0 in the latest version of our app. Please have a look at the attached log. Also is there a fix coming soon?\ncrashreport.txt\nThanks,\nSuraj\n. ",
    "rami-ihr": "We are also seeing this crash happening in a heavily-used application. Any thoughts on a fix for it?. ",
    "worldofnick": "+1. Awesome, how long until this is in?. ",
    "liuliangju": "@mythodeia \nIn line 175 completed  the downloadedImage or downloadedData  is nil but finished is YES. I find the 3.7.2 version is ok, completed downloadedImage and downloadedData.. ",
    "SimonCY": "When I use SDWebImageRefreshCached as the  option key in a viewcontroller,  it worked in the first time, but in second time  I open the viewcontroller ,the imageView showed nothing, the url is still right.  . ",
    "Shanti-SR": "@mythodeia thank you very much.. ",
    "ghughes": "Looks like the test failure was environmental, FYI.. I fixed a typo: \"tokent\". ",
    "03128crz": "@mythodeia yes, Testing is ok. ",
    "gpluscat": "@03128crz \u4f60\u73b0\u5728\u89e3\u51b3\u4e86\u5417\uff1f\u6211\u73b0\u9047\u5230\u4f60\u7684\u95ee\u9898. ",
    "Westacular": "Fair enough.\nAccording to NSURLSession documentation,\n\nChanging mutable values within the configuration object has no effect on the current session, but you can create a new session with the modified configuration object.\n\nSo I think what would make sense is to expose a readwrite computed sessionConfiguration property, where\n- the getter just returns self.session.configuration\n- the setter calls finishTasksAndInvalidate on the current self.session and creates a new one with the specified configuration to replace it.\nI can go ahead an create a PR with this change.. Could we get this merged sometime soon?. ",
    "tigerZhang86": "@mythodeia\nThis is image url that produces this broken image :\nhttps://www.vlor.net/airing/o/files?fileId=58dddc36165b0dab74c395bb. ",
    "AbhishekChourasia16690": "Hey,\nWhen can we have that feature. I have code for creating thubnail from video url.\nThanks.. ",
    "writer0713": "@gpluscat do you think others can understand chinese question? \u600e\u4e48\u76f4\u63a5\u5199\u4e2d\u6587\u5462\u3002\u3002\uff1f. ",
    "YueLiXing": "\nThis image is in my project,just like that.. ###  I find my bug!\nobjective-c\n_webImageDownloadOp = [[SDWebImageManager sharedManager] loadImageWithURL:url options:SDWebImageProgressiveDownload progress:^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {\n        if (expectedSize > 0) {\n            float progress = receivedSize / (float)expectedSize;\n            MWLog(@\"%p %.3f %@\", self, progress, [url lastPathComponent]);\n            NSDictionary* dict = [NSDictionary dictionaryWithObjectsAndKeys:\n                                   [NSNumber numberWithFloat:progress], @\"progress\",\n                                      self, @\"photo\", nil];\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    [[NSNotificationCenter defaultCenter] postNotificationName:MWPHOTO_PROGRESS_NOTIFICATION object:dict];\n                });\n            }\n        } completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {\n            if (error) {\n                MWLog(@\"SDWebImage failed to download image: %@\", error);\n            }\n            if (finished && image) {\n            // this 'finished' sometime maybe <nil> or NO\n            // sorry,this is my mistake!\n                _webImageDownloadOp = nil;\n                self.underlyingImage = image;\n                [self imageLoadingComplete];\n            }\n        }];\n this block is called by SDWebImageDownloaderOperation.m:L371. ",
    "tan2547": "I have not used cocoapods.. I only cloned sdwebimage then build SDWebImage iOS Demo target .errors 1. no such file or directory: ~/Vendors/libwebp/src/utils/huffman.c'  2.~ idec.c  3.~quant_levels.c 4.~upsampling_sse2.c\nSDWebImage iOS Demo can not use to simulator\uff1f\n. ",
    "hbhpeng": "on a 32bit machine,long long type transfer to NSInteger may become negative. \ne.g. (NSInteger)9223372036854775807.\nresult in crash on self.imageData = [[NSMutableData alloc] initWithCapacity:expected];. ",
    "evliu": "Hoping for this to get merged soon; it fixes this https://github.com/rs/SDWebImage/issues/1882 , which I need for a carthage install. Looks like they fixed it. It was an empty repo while the issue was up. ditto. Did quick check, this should fix it https://github.com/rs/SDWebImage/pull/1880. ",
    "bharath2020": "Same here, we are currently blocked by this issue. Hopefully, we can get this merged soon.. ",
    "guodong000": "Looks like Github mirror's problem. ",
    "rileygelwicks": "Can confirm I am also getting this when running carthage.. ",
    "ThorinHanson": "Same issue. ",
    "ChristianPraiss": "Also experiencing this issue!. ",
    "yukitoto": "Also facing this issue.. ",
    "Achilles1988": "I come a cross to this issue in pressure test frequently\n\n. ",
    "JordanMcCulloch": "Same issue here! Caught using Fabric.io Crashlytics during a user session.\nIssue Info:\n- Platform Name:             iOS\n- Platform Version:         10.3.1 (14E304)\n- SDWebImage Version:   4.0.0\n- SDWebImage/Core:       4.0.0\n- Integration Method:      Cocoapods\n- Device Version:          iPad Mini 2\n- Repro rate:                  Once so far (just pushed to TestFlight last night).\n- Repro:                          Caused when scrolling fast through a table of images. Each table cell's image is retrieved from the cloud and saved into mem via SDWebImage when the cell is loaded. \nMethods used in tableView 'cellForRowAt':\n1. SDImageCache.shared().imageFromMemoryCache()  // First try to get from RAM.\n2. SDImageCache.shared().queryCacheOperation()  // Then try to get from Disk.\n3. SDWebImageDownloader.shared().downloadImage()  // Finally download from cloud.\n\nThread #0:\nCrashed: com.apple.main-thread EXC_BAD_ACCESS KERN_INVALID_ADDRESS 0x00000004bbcbbeb8\n0  libobjc.A.dylib                0x181a78150 objc_msgSend + 16\n1  Foundation                     0x1839f29c8 +[NSConcreteNotification newTempNotificationWithName:object:userInfo:] + 132\n2  Foundation                     0x1839f2904 -[NSNotificationCenter postNotificationName:object:userInfo:] + 40\n3  SDWebImage                     0x100b5b2ec __47-[SDWebImageDownloaderOperation cancelInternal]block_invoke + 72\n4  libdispatch.dylib              0x181eba9e0 _dispatch_call_block_and_release + 24\n5  libdispatch.dylib              0x181eba9a0 _dispatch_client_callout + 16\n6  libdispatch.dylib              0x181ebf5e8 _dispatch_main_queue_callback_4CF + 996\n7  CoreFoundation                 0x182fb10c0 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE_ + 12\n8  CoreFoundation                 0x182faecdc __CFRunLoopRun + 1572\n9  CoreFoundation                 0x182eded94 CFRunLoopRunSpecific + 424\n10 GraphicsServices               0x184948074 GSEventRunModal + 100\n11 UIKit                          0x189190130 UIApplicationMain + 208\n12 AppName                       0x100048900 main (AppDelegate.swift:18)\n13 libdyld.dylib                  0x181eed59c start + 4\n\nThread #9:\ncom.apple.NSURLConnectionLoader\n0  libsystem_kernel.dylib         0x181fdf224 mach_msg_trap + 8\n1  libsystem_kernel.dylib         0x181fdf09c mach_msg + 72\n2  CoreFoundation                 0x182fb0e88 __CFRunLoopServiceMachPort + 192\n3  CoreFoundation                 0x182faeadc __CFRunLoopRun + 1060\n4  CoreFoundation                 0x182eded94 CFRunLoopRunSpecific + 424\n5  CFNetwork                      0x1836eaca4 +[NSURLConnection(Loader) resourceLoadLoop:] + 404\n6  Foundation                     0x183af62c8 __NSThread__start_ + 996\n7  libsystem_pthread.dylib        0x1820c575c _pthread_body + 240\n8  libsystem_pthread.dylib        0x1820c566c _pthread_body + 282\n9  libsystem_pthread.dylib        0x1820c2d84 thread_start + 4\n. ",
    "hei9gag": "We also facing the same issue and the crash only happens in iOS 10 devices.. ",
    "VidhyaJain": "Hi, I am facing the same crash issue in 4.1.0 release. When will be 4.1.1 available with this fix? I want to submit my app to app store.. @bpoplauschi :Thanks for release . @dreampiggy  Thanks! Will take 4.1.2. ",
    "EugeneEl": "I can suggest you to load images lazily (only when user explicitly need it).\nIt might cause some delay for big images but suppose you try to preload some heavy images to avoid this delay.\nit is good to look into SDImageCache and SDWebImageDownloader configuration. \nespecially at shouldDecompressImages (default is \"YES\") \nswift\nSDWebImageDownloader.shared().shouldDecompressImages = false\nSDImageCache.shared().config.shouldDecompressImages = false\nSDImageCache.shared().config.shouldCacheImagesInMemory = false\nthis might be helpful\nalso try to clear cache when screen with images disappear and test your app on different devices \n(as old devices have less RAM memory). ",
    "MiguelArber": "Sure, as I stated above I cloned the project recursively using coping and pasting the line from the ManualInstallation, but it just won't work. I did it several times with the same result... :/\nEDIT: I solved it, for some reason I wasn't able to retrieve the libwebp library, now it seems to have been downloaded correctly. Thanks!. ",
    "maibou8888": "but I can't find NSImageView+WebCached file,so I don't know how to solve it. i see the code use NSImageView+Webcache file,how to use NSImage_Webcache . ",
    "tiwariammit": "No i didn't solve yet. I found on latest version\nOn Tue, May 9, 2017 at 7:24 AM, FlyingChickenWings <notifications@github.com\n\nwrote:\n@tiwariammit https://github.com/tiwariammit I met the same problem as\nyou ,Did you solve this problem?\n1885 https://github.com/rs/SDWebImage/issues/1885\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1889#issuecomment-300037283, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AVVStCaNssgOf7vqrjMhpEyay5PJWYsFks5r38PdgaJpZM4NRtNS\n.\n. Nope. Its on the current version.. \n",
    "REWNing": "@bpoplauschi Thanks your reply.\nI tried to call cancel, but the operation block is still actioning after cancel on certain condition: tapping very fast. App crashed because of Zombie action: action send to dealloced object.\n. ",
    "aaaamruta": "@bpoplauschi :Sorry its not 3.7.6 ..please help. @mythodeia yes i had checked the same.please help . version is 4.0,I installed this library by adding the files manually (dragging ) and then importing in the bridge header file . version 4.0 ,I tried installing through terminal via pod install still getting the same issue ...please help cant proceed without this ..below is the code in  pod file \nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, \u20189.0\u2019\nuse_frameworks!\ntarget 'SideMenu' do\npod 'SDWebImage', '~> 4.0\u2019\nend. It got resolved yesterday thanks guys... ",
    "feibufei": "\u8bf7\u95ee\u4f60\u662f\u600e\u4e48\u4fee\u590d\u7684\uff0c\u6211\u4e5f\u9047\u5230\u4e86\u540c\u6837\u7684\u95ee\u9898. ",
    "ytmoye": "@tirrorex hello, i found that in latest version. It is declared in \"SDImageCacheConfig.h\". You can update your version, but there are some unsolved crashes.. @grundmanise  hello, it desn't utilizes LRU strategy. It's memory cache is implemented by NSCache.. ",
    "walkline": "Thanks everyone for the feedback \ud83d\ude42\n@bpoplauschi can you review latest changes, please?. @bpoplauschi done. @bpoplauschi I've made rebase, and this PR was closed. Should I open a new one?). @dreampiggy great job \ud83d\udc4d\nI've also tried to use -[NSData writeToFile:options:error:] but had some difficulties with mocking for tests. \nSo, yeah, great job \ud83d\ude42. ",
    "yutiandesan": "If I want the images that unloaded completely do not display. What should I do?. ",
    "dannypier": "After digging deeper, it appears that most of the MKAnnotationView methods have been deprecated for 4.0.0. I was mistaken in that the category did not exist in the Pod.\nHowever, I'm unable to extract the replacement behavior given the documentation. For example, when setting the annotation image, my best option appears to be\nif let profileImagePath = sproutAnnotation.user?.profileImageUrlSmall, let profileImageUrl = URL(string: profileImagePath) {\n                annotationView?.sd_internalSetImage(with: profileImageUrl, placeholderImage: #imageLiteral(resourceName: \"tab_bar_family_unselected\"), options: [], operationKey: nil, setImageBlock: nil, progress: nil, completed:nil)\n            }\nbut this produces no results. If I set the image in the completion block as follows, the image will appear, but this does not seem like the intended use of this category\nif let profileImagePath = sproutAnnotation.user?.profileImageUrlSmall, let profileImageUrl = URL(string: profileImagePath) {\n                annotationView?.sd_internalSetImage(with: profileImageUrl, placeholderImage: #imageLiteral(resourceName: \"tab_bar_family_unselected\"), options: [], operationKey: nil, setImageBlock: nil, progress: nil, completed: { (image, error, type, url) in\n                    annotationView?.image = image\n                })\n            }. ",
    "anushkmittal": "What's EKPhotoManagerhere?. ",
    "disaabler": "Patch file with the suggested fix is here: https://drive.google.com/open?id=0BwOwqtvU2djzY3VMYnlERGhWclE. Sorry, created pull request in a wrong way. Please delete it.. ",
    "qclmnt": "+1 for the Pull Request, we do have the same crash on [SDWebImageDownloader addProgressCallback:completedBlock:forURL:createCallback:]. ",
    "antonbremer": "Hi Konstatinos,\nThanks for your quick response.\nI had not seen this part in the documentation.\nI will go and try this out straight away, and get back to you when I have the results\nThanks again,\nAnton\n\nOn 29 May 2017, at 06:17, Konstantinos K. notifications@github.com wrote:\n@antonbremer https://github.com/antonbremer does this happen in the demo project too? Did you use FLAnimatedImage https://github.com/rs/SDWebImage#animated-images-gif-support for the gif?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/rs/SDWebImage/issues/1917#issuecomment-304574318, or mute the thread https://github.com/notifications/unsubscribe-auth/AGApp9qcSBLaVXmzDFi3Oy2__JdHpL3kks5r-lTzgaJpZM4NoukV.\n\n\n. Hi Konstatinos\nI am very happy to tell you that using FLAnimatedImage it works.\nSorry I missed that part of the documentation\nCheers,\nAnton\n\nOn 29 May 2017, at 06:17, Konstantinos K. notifications@github.com wrote:\n@antonbremer https://github.com/antonbremer does this happen in the demo project too? Did you use FLAnimatedImage https://github.com/rs/SDWebImage#animated-images-gif-support for the gif?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/rs/SDWebImage/issues/1917#issuecomment-304574318, or mute the thread https://github.com/notifications/unsubscribe-auth/AGApp9qcSBLaVXmzDFi3Oy2__JdHpL3kks5r-lTzgaJpZM4NoukV.\n\n\n. I did not use use FLAnimatedImage. \nUsing FLAnimatedImage it works.. ",
    "cdunkel": "@bpoplauschi, I know this issue was closed long ago, but I'm just migrating to 4.3.3 and I'm looking for best practices for checking if an image is in the cache synchronously. I have many places in my code where I just want to verify if an image has been downloaded, but modifying the code to do that asynchronously will require a large amount of re-architecting.\nSo far the only alternative I can see is using imageFromDiskCacheForKey: to actually load the whole image into memory and see if that was successful. That seems very inefficient.\nThank you for any guidance you can provide!. Thanks! I didn't see that in the docs.. @dreampiggy we are implementing controls on our server to prevent images like this from being uploaded.\nMy intent in posting this wasn't so much that I expect SDWebImage to be able to display such things - I don't - but that I found it odd that on the other platforms tested (iPod Touch and iPhone X) the system was able to handle the memory allocation rejection without the app being killed by the kernel, while on the iPhone XS Max it wasn't. I thought perhaps that there was some case that the XS Max is hitting that hadn't come up before with other devices that SDWebImage might be able to handle by failing gracefully.\nSo, just to be clear, I posted this here because I was getting different behavior on different devices and wanted to bring it to the attention of the developers. I'm not expecting SDWebImage to be able to display the image I referenced in my example.\nEDIT: Thank you for the thumb API recommendation as well. That's something I had not seen before.. @zhongwuzw, I did try the SDWebImageScaleDownLargeImages option when trying to address this issue, but I still got the crash \ud83d\ude1e . The only thing I didn't try was the option to not decompress images on download, but I figured in this case it would just move the problem to when the image is being displayed.\n@dreampiggy, yeah, I found this to be a very frustrating crash to duplicate, since it was only by random luck that one of my co-workers has an XS Max that he tested on. The crash did not show up in the simulator, but I assume that's because the simulator has access to the resources of the machine on which its running. I wish Xcode had a way to simulate a specific memory load condition (e.g. 5% RAM available, etc).\nI have not tested it on the regular XS, the XR, or even the 8 because no one in our office has those models \ud83d\ude15.. @dreampiggy and @zhongwuzw, thank you both for your help with this issue. For now we are going to implement some safeguards and checks to make sure that our customers don't upload images that are too large. However, if you do implement a fix I'll be happy to test on my end as well.. ",
    "MR-Marsal": "how to closing, i just use . ",
    "HaleyYuQing": "@mythodeia I tried to user the SDWebImage version(4.0.0 and 3.8.2), it still doesn't work. This URL seems that it is different from others. When click the URL, Web browse will pop up to download it in web. But other URLs is displayed in the Web browse.. @mythodeia Thanks your help. The demo works for the link. However, I copied the SDWebImage framework from demo to my project, and use FLAnimatedImageView, it still returned NSURLErrorCancelled. Do I miss something?. @mythodeia  I got the point of why it got different result. In the demo, it used the code [SDWebImageManager sharedManager].imageDownloader.username = @\"httpwatch\"; [SDWebImageManager sharedManager].imageDownloader.password = @\"httpwatch01\"; If you remove the two lines code, the demo also returned the NSURLErrorCancelled error. And I add the two lines code to my project, it works.\nOne question, what's effect is the two lines code? It is magical\u3002 . ",
    "RamChandraReddy": "It's\nhttps://lorealusa.app.box.com/representation/file_version_76631532073/image_2048_jpg/1.jpg?shared_name=minpjkejz8ogyd3ie9m06340dye94f6d\nOn Mon, 19 Jun 2017 at 3:39 PM, Konstantinos K. notifications@github.com\nwrote:\n\nplease share the image url\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1935#issuecomment-309396780, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AESjlfjvd-L7s4_Uw_nXFDumP3atVUduks5sFki5gaJpZM4N9-CF\n.\n-- \nThanks & Regards\nRam\n. Yeah.. All I can do is to keep a check condition in error care as mentioned below and download the image manually and send it through completion block.\n\nobjective-c\nif (error.code == NSURLErrorHTTPTooManyRedirects) {\n    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0ul);\n    dispatch_async(queue, ^{\n        NSError * error = nil;\n        NSData * imageData = [NSData dataWithContentsOfURL:url options:0 error:&error];\n        if (error)\n            NSLog(@\"error is %@\",error);\n        dispatch_async(dispatch_get_main_queue(), ^{\n            UIImage *image = [UIImage imageWithData:imageData];\n            completedBlock(image, nil, cacheType, YES, url);\n        });\n    });\n}\nBut I need to update this logic so that Image cache is also handled in this case.. ",
    "RamChandraNagalapelli": "Thank you\n:)\nOn Tue, Jun 20, 2017 at 4:21 PM, Konstantinos K. notifications@github.com\nwrote:\n\nClosed #1938 https://github.com/rs/SDWebImage/issues/1938.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rs/SDWebImage/issues/1938#event-1130751582, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AYQPTbi0TmvFRCLfX12UVK3NgHsBSPrEks5sF6RAgaJpZM4N_ZCm\n.\n. \n",
    "christopherhwood": "Can we please merge this? The dangling pointer is causing a large number of crashes across many projects. . ",
    "gabzsa": "+1. ",
    "SanjithKanagavel": "Call the function inside main thread.  That fixed me this problem.. ",
    "muccy": "Looking at stacktrace it seems everything happens inside main thread. I don't know. I downgraded to 3.8.2 to temporarily reduce crashes.. ",
    "taylorwrynn": "+1. As I know, SDImageCache will auto purge cached image on UIApplicationDidReceiveMemoryWarningNotification.\nAnd you can use [SDImageCache clearMemory] if you still want to clear memory.\n. ",
    "dourgulf": "I want to use an individual timeout option for my download(maybe very short,like only 3s).\nAnd I want to cancel previous downloading progress, when other download request is comming. So I need manually allloc SDWebImageDownloader, is there any other choise?. ",
    "jeffersonsetiawan": "what version do you use @MicMat68 ?\nI even can't use method \ncell.image.sd_setImage(with: reference, placeholderImage: placeholder_image)\nthe error is:\nCannot invoke 'sd_setImage' with an argument list of type '(with: StorageReference, placeholderImage: UIImage?)'. Thanks @MicMat68 !! never know there should be another dependency for it.. ",
    "MicMat68": "It's with firebase :\nInstalled with :\n pod 'FirebaseUI/Storage'\nimport SDWebImage\nimport FirebaseStorageUI. Hi,\nNo error, function don't stop loading.. ",
    "zdl51go": "#1940   didn't fix this.\nBut I can't find a way to reproduce it.\nMaybe it relates to #1744 or #1978 . ",
    "iHTCboy": "@skyline75489  Thank you, because I don't even know strong-weak dance, so don't start, thank you\uff01 the next time I go to Stack Overflow questions.. ",
    "KaushalElsewhere": "Thanks. \nyes you are right I am facing similar with other cocoapods as well.. ",
    "scott-lydon": "I'm having this issue while my teammate is creating a pod and my pod will be installing a using his pod.  If it is on the side of the person making the pod to be consumed by the other pod. What can that person do about this?. ",
    "AIHELP-NET": "\n. I only change the file name , class name and variable related to Elva+xxx, can anyone find me a solution, thanks a lot. ",
    "sonnyback": "I'm not sure which folder is the derived data. I did do a clean, then build and that did not make any difference.. Thanks!. Yep, that worked...thanks!. ",
    "UmaMadhavi": "@MysteryRan .. how can i display gif using SDWebImage can u please  help me in achieving this?. ",
    "MysteryRan": "the offical introduction \n\n. ",
    "xuchuandong": "I have dealed this problem which is I used an error SVN tool(Lantern) by my friend,when I redownload a SVN tool(RedSVN) from  Mac App Store,and reinstall cocoapods, it works. Thanks for you help.. ",
    "ZB0106": "when i test use instrument ,i found that it is still has memory leak with the following code(- decodedAndScaledDownImageWithImage), although has released memory with the following code(f( destContext == NULL ) {\n        free( destBitmapData ); \n        return image\n    }      \n), however, i think that  we should release memory when release destcontext  ,the code is like this \uff08   CGImageRef destImageRef = CGBitmapContextCreateImage(destContext);\n        CGContextRelease(destContext);\n        free( destBitmapData ); \n\uff09 or  past null\nthe test ihone is iphone6  system is 10.2.1. ",
    "MolierQueen": "Theme same with https://github.com/rs/SDWebImage/issues/1862   . ",
    "tlb123456": "This issue is solved?. I met the same issue. ",
    "btxkenshin": "sorry, didn't saw the new version 4.1.0 which exactly solved the problem. ",
    "SevenHL": "SDWebImage version is 4.0.0 and then I try to comment out from podfile file SDWebImage, pod install, but SDWebImage didn't delete from my project.. Very thanks for your reply, I think I have already solved the problem, is due to rely on in the pod 'SDCycleScrollView SDWebImage, cause I can't delete this library to import.. ",
    "ufosky": "Before I upgrade this library to 4.1.0, it's no problem.. When a image is display first time, the completed callback will be invoked twice.\nThe first invoke has no error and the image is set to the view.\nThe second invoke get an error like below and the image is nil, but the view is not changed.\nError Domain=NSURLErrorDomain Code=-1008 \"resource unavailable\" UserInfo={NSUnderlyingError=0x6080002481f0 {Error Domain=kCFErrorDomainCFNetwork Code=-1008 \"(null)\"}, NSErrorFailingURLStringKey=https://raw.githubusercontent.com/liyong03/YLGIFImage/master/YLGIFImageDemo/YLGIFImageDemo/joy.gif, NSErrorFailingURLKey=https://raw.githubusercontent.com/liyong03/YLGIFImage/master/YLGIFImageDemo/YLGIFImageDemo/joy.gif, NSLocalizedDescription=resource unavailable}\nAfter first displaying, when show the same image again, the callback will get an error like this:\nError Domain=NSURLErrorDomain Code=-1100 \"(null)\". By the way, the progress callback block is invoked in a background thread, but do some UI operation in like this is not safe.\nhttps://github.com/rs/SDWebImage/blob/master/Examples/SDWebImage%20Demo/DetailViewController.m#L47. I have move to using kingfisher\uff0cwhich has a good code quality. ",
    "parth51": "When we get the solution for this issue? I want to upload the application on app store let me know if any quick fix available.. ",
    "SuperDannyBoy": "i have the same problem.. ",
    "frootloops": "@dreampiggy I'm facing this problem too. Waiting for #1994. ",
    "vandutran": "Do you have an release ETA for this? We're supposed to release a new app update for iOS 11 but this is holding us back. Wonder if we should revert to older version of SDWebImage or wait for a fix?. ",
    "dtzxdf": "When can i fix this bug by Carthage?I use \"Carthage update --platform iOS\" there is nothing happend.... Good job. When can i fix this bug by Carthage?I use \"Carthage update --platform iOS\" there is nothing happend.... ",
    "lujie001122": "show your code. ",
    "hongruqi": "@bpoplauschi \nFatal Exception: NSInvalidArgumentException\n0  CoreFoundation                 0x18292efe0 exceptionPreprocess\n1  libobjc.A.dylib                0x181390538 objc_exception_throw\n2  CoreFoundation                 0x182935ef4 __methodDescriptionForSelector\n3  CoreFoundation                 0x182932f54 forwarding\n4  CoreFoundation                 0x18282ed4c _CF_forwarding_prep_0\n5  XXXXX                       0x1004fb44c -[SDWebImageDownloaderOperation URLSession:dataTask:didReceiveData:] (SDWebImageDownloaderOperation.m:301)\n6  XXXXX                       0x1004f92a4 -[SDWebImageDownloader URLSession:dataTask:didReceiveData:] (SDWebImageDownloader.m:304)\n7  XXXXXX                      0x101300b78 -[_priv_NBSLensAllMethodsDlgt_urlSess nbs_URLSession:dataTask:didReceiveData:]\n8  CFNetwork                      0x183108a20 __67-[NSURLSession delegate_dataTask:didReceiveData:completionHandler:]_block_invoke.242\n9  Foundation                     0x1833fe854 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK\n10 Foundation                     0x1833437b0 -[NSBlockOperation main]\n11 Foundation                     0x183333b68 -[__NSOperationInternal _start:]\n12 Foundation                     0x183400bf0 __NSOQSchedule_f\n13 libdispatch.dylib              0x1817e69a0 _dispatch_client_callout\n14 libdispatch.dylib              0x1817f4ad4 _dispatch_queue_serial_drain\n15 libdispatch.dylib              0x1817ea2cc _dispatch_queue_invoke\n16 libdispatch.dylib              0x1817f6a50 _dispatch_root_queue_drain\n17 libdispatch.dylib              0x1817f67d0 _dispatch_worker_thread3\n18 libsystem_pthread.dylib        0x1819ef100 _pthread_wqthread\n19 libsystem_pthread.dylib        0x1819eecac start_wqthread\n. ",
    "groupds": "0\u00a0CoreFoundation | exceptionPreprocess\u00a0+\u00a0124\n-- | --\n1\u00a0libobjc.A.dylib | objcexception_throw\u00a0+\u00a056\n2\u00a0CoreFoundation | -[NSException initWithCoder:]\n3\u00a0Foundation | NSAllocateMemoryPages\u00a0+\u00a0100\n4\u00a0Foundation | NSDataCreateVMDispatchData\u00a0+\u00a036\n5\u00a0Foundation | -[_NSPlaceholderData initWithBytes:length:copy:deallocator:]\u00a0+\u00a0248\n6\u00a0UIKit | UIImageRefFromData\u00a0+\u00a0364\n7\u00a0UIKit | -[UIImage(UIImagePrivate) _initWithData:preserveScale:cache:]\u00a0+\u00a0124\n8\u00a0SDWebImage | +[UIImage(MultiFormat) sd_imageWithData:]\u00a0+\u00a0152\n9\u00a0SDWebImage | -[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:]\u00a0+\u00a0464\n10\u00a0SDWebImage | -[SDWebImageDownloader URLSession:task:didCompleteWithError:]\u00a0+\u00a0128\n11\u00a0CFNetwork | 51-[NSURLSession delegatetask:didCompleteWithError:]_block_invoke.185\u00a0+\u00a072\n12\u00a0Foundation | _NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK\u00a0+\u00a016\n13\u00a0Foundation | -[NSBlockOperation main]\u00a0+\u00a096\n14\u00a0Foundation | -[__NSOperationInternal _start:]\u00a0+\u00a0620\n15\u00a0Foundation | NSOQSchedulef\u00a0+\u00a0228\n16\u00a0libdispatch.dylib | dispatch_client_callout\u00a0+\u00a016\n17\u00a0libdispatch.dylib | __dispatch_queue_serial_drain\u00a0+\u00a0928\n18\u00a0libdispatch.dylib | __dispatch_queue_invoke\u00a0+\u00a0652\n19\u00a0libdispatch.dylib | __dispatch_root_queue_drain\u00a0+\u00a0572\n20\u00a0libdispatch.dylib | __dispatch_worker_thread3\u00a0+\u00a0124\n21\u00a0libsystem_pthread.dylib | _pthread_wqthread\u00a0+\u00a01288\n22\u00a0libsystem_pthread.dylib | start_wqthread\u00a0+\u00a04\n. \n0\u00a0CoreFoundation | CFRelease\u00a0+\u00a0120\n-- | --\n1\u00a0SDWebImage | -[SDWebImageDownloaderOperation URLSession:dataTask:didReceiveData:]\u00a0+\u00a01108\n2\u00a0SDWebImage | -[SDWebImageDownloader URLSession:dataTask:didReceiveData:]\u00a0+\u00a0128\n3\u00a0CFNetwork | 67-[NSURLSession delegatedataTask:didReceiveData:completionHandler:]_block_invoke.242\u00a0+\u00a036\n4\u00a0Foundation | _NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__\u00a0+\u00a016\n5\u00a0Foundation | -[NSBlockOperation main]\u00a0+\u00a096\n6\u00a0Foundation | -[__NSOperationInternal _start:]\u00a0+\u00a0620\n7\u00a0Foundation | NSOQSchedulef\u00a0+\u00a0228\n8\u00a0libdispatch.dylib | dispatch_client_callout\u00a0+\u00a016\n9\u00a0libdispatch.dylib | __dispatch_queue_serial_drain\u00a0+\u00a0928\n10\u00a0libdispatch.dylib | __dispatch_queue_invoke\u00a0+\u00a0652\n11\u00a0libdispatch.dylib | __dispatch_root_queue_drain\u00a0+\u00a0572\n12\u00a0libdispatch.dylib | __dispatch_worker_thread3\u00a0+\u00a0124\n13\u00a0libsystem_pthread.dylib | _pthread_wqthread\u00a0+\u00a01288\n. ",
    "David-dai-ubnt": "OK, I will try.. ",
    "Taillook": "Thank you\nThe problem was solved.\nIf you have plenty of time, update the image please.. ",
    "Josscii": "You may not fully understand my problem, I do know A delegate do not need to subclass SDWebImageManager, but the problem is that  SDWebImageManager's singleton can have only one delegate, but I have multiple transform style to one image and cache it separately, can you come up some ideas about this case?. I don't think that can solve it, cause for one image, SDWebImageManager's singleton would just cache it once in one place, while I do want to cache all transformed image of that image to disk, and use it in its right place.\nMaybe the core issue is that I want the SD do the most things for me, like download(which is ok to use the shared instance), cache(which is not ok for this case to use the shared cache instance), find cache..., and then I would just use the api on SDWebImageManager's to load image:\n- (nullable id <SDWebImageOperation>)loadImageWithURL:(nullable NSURL *)url\n                                              options:(SDWebImageOptions)options\n                                             progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                                            completed:(nullable SDInternalCompletionBlock)completedBlock;. sorry, I will close it.. let me check it, thanks for your nice work, I'll feed back!. @dreampiggy I watched your implementation and thought about it, I don't know If it is a good solution to this common problem, when you want to download a image once, while you want to transform it to multiple style,  and even cache all the transformed image separately.\nYou might see the Swift image load framework kingfisher, it has a Processor options to specify, and it will automatically transform and cache it separately. Thanks your effort again.. @dreampiggy yes, I totally understand your idea, we have to manage multiple manager because of the historic limit. One remain problem is that, if we want to download one image and transform it to multiple style and cache it separately, we might have to download it multiple times?. @dreampiggy  Ok, I got it. Thanks.. @dreampiggy hey, after diving into this problem and sd source code, I still think use custom sdwebimagemanager for processing purpose is not the best way.\nI think we should add a processor for this, just like kingfisher.\nwhat do you think?. @dreampiggy \ud83d\udc4c, nice work, I ignored the above messages, sorry.. @dreampiggy I looked into 5.0 feature, and I got a question, why didn't you query the memory cache using the transformed key here ?\n. ",
    "nazmulkp": "not working . do I miss anything?\n```\nlet url = URL(string: urlString)\n        let manager = SDWebImageDownloader()\n    manager.setValue(\"image/png\" , forHTTPHeaderField: \"Content-Type\")\n    manager.setValue(Global.account?.token ?? \"\" , forHTTPHeaderField: \"Authorization\")\n\n    _ = manager.downloadImage(with: url, options: SDWebImageDownloaderOptions.allowInvalidSSLCertificates, progress: { (d, d2, d3) in\n\n        print(\"loading..\")\n\n    }, completed: { (image, data, error, status) in\n        if image != nil{\n            print(\"finish..\")\n            completionHandler(image)\n        }else{\n            print(\"\\(error) : flowing-Url:- \\(urlString)\")\n        }\n    })\n\n```. Yes I was tested it is working fine here I my test  code with token .\n```\n   let url = URL(string: urlString)\n        var request = URLRequest(url:url!)\n        request.setValue(\"image/png\" , forHTTPHeaderField: \"Content-Type\")\n    // Adding common parameters//\n    if    Global.account?.token != nil {\n        request.setValue(Global.account?.token ?? \"\" , forHTTPHeaderField: \"Authorization\")\n\n    }\n\n    URLSession.shared.dataTask(with: request,\n                               completionHandler: { (data, respones, error) in\n                                if error != nil {\n                                    print(\"\\(error) : flowing-Url:- \\(urlString)\")\n                                    return\n                                }else {\n                                    print(respones?.url ?? \"\")\n                                    print(data ?? \"\")\n                                }\n\n                                let imageToCache = UIImage(data: data!)\n                                DispatchQueue.main.async(execute: {\n                                    completionHandler(imageToCache)\n                                })\n    }).resume()\n\n```\nbut when trying with this SDWebImage \n```\n let url = URL(string: urlString)\n        let manager = SDWebImageDownloader()\n    manager.setValue(\"image/png\" , forHTTPHeaderField: \"Content-Type\")\n    manager.setValue(Global.account?.token ?? \"\" , forHTTPHeaderField: \"Authorization\")\n\n    _ = manager.downloadImage(with: url, options: SDWebImageDownloaderOptions.allowInvalidSSLCertificates, progress: { (d, d2, d3) in\n\n        print(\"loading..\")\n\n    }, completed: { (image, data, error, status) in\n        if image != nil{\n            print(\"finish..\")\n            completionHandler(image)\n        }else{\n            print(\"\\(error) : flowing-Url:- \\(urlString)\")\n        }\n    })\n\n```\nit is give me error:\n\nError: Optional(Error Domain=NSURLErrorDomain Code=500 \"(null)\") : flowing-Url:- https://www.xxxx.world/images/r2.png\n\n. I did but current I remove my dependancy with Alamofilre. \nalso I test it is working fine :\n\ncurl -X GET https://www.xxxxxxx.world/images/r8.png  -H \"Content-Type: image/png\" -H 'Authorization: 883a097e-9f4a-4678-8aac-a20146ea2a83'\n\nhere is my full working code with token\n```\nlet imageCache = NSCache()\nclass URLSessionImageDownload: ImageDownloadProtocol {\nfunc downloadImageUsing(_ urlString: String ,\n                        completionHandler: @escaping (UIImage?) -> () ){\n\n    let url = URL(string: urlString)\n    var request = URLRequest(url:url!)\n    request.setValue(\"image/png\" , forHTTPHeaderField: \"Content-Type\")\n\n    // Adding common parameters//\n    if    Global.account?.token != nil {\n        request.setValue(Global.account?.token ?? \"\" , forHTTPHeaderField: \"Authorization\")\n\n    }\n\n    URLSession.shared.dataTask(with: request,\n                               completionHandler: { (data, respones, error) in\n                                if error != nil {\n                                    print(\"\\(error) : flowing-Url:- \\(urlString)\")\n                                    return\n                                }else {\n                                    print(respones?.url ?? \"\")\n                                    print(data ?? \"\")\n                                }\n\n                                let imageToCache = UIImage(data: data!)\n                                DispatchQueue.main.async(execute: {\n                                    completionHandler(imageToCache)\n                                })\n    }).resume()\n\n}\n\n    func removeImageUsingUrlString(_ urlString: String) {\n        if imageCache.object(forKey: urlString as NSString) != nil {\n            imageCache.removeObject(forKey: urlString as NSString)\n            return\n        }\n    }\n\n}\n```. Ok I will do ! but I have an question. is there any problem the  curl request with SDWebImage? \nalso I test it is working fine :\n\ncurl -X GET https://www.xxxxxxx.world/images/r8.png -H \"Content-Type: image/png\" -H 'Authorization: 883a097e-9f4a-4678-8aac-a20146ea2a83'\n\n. No Luck for me : \nI have been trying with \n    let manager: SDWebImageDownloader? = SDWebImageManager.shared().imageDownloader\n    manager?.setValue(\"image/webp,image/*;q=0.8\" , forHTTPHeaderField: \"Accept\")\n    manager?.setValue(Global.account?.token ?? \"\" , forHTTPHeaderField: \"Authorization\")\n\naslo I was trying to set that header filed to nil\nnot working same result \n. ",
    "superarts": "The imageDownloader code works for me, maybe double check your HTTP requests to make sure it looks valid to you:\nif let manager = SDWebImageManager.shared().imageDownloader, let token = CredentialManager.sharedInstance.bearer {\n                manager.setValue(\"Bearer \" + token, forHTTPHeaderField: \"Authorization\")\n            }. ",
    "BlueVirusX": "First I thought that using SDWebImageDownloaderHeadersFilterBlock might work, but in my case I need to set different header values for each request and I need the returned headers from the response. So using SDWebImageDownloaderHeadersFilterBlock isn't working for my case.\nTo avoid breaking API changes I can add public methods without the additionalHeaders parameter.\nBut I am not sure about the SDInternalCompletionBlock:\nTo get access to the response headers I have to add it as block parameter, but this will break -[SDWebImageManager loadImageWithURL:options:progress:completed].\nBut adding another SDInternalCompletionBlock like\ntypedef void(^SDInternalCompletionWithHeadersBlock)(UIImage * _Nullable image, NSData * _Nullable data, SDHTTPHeadersDictionary * _Nullable responseHeaders, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL);\nmight be confusing?\nSame for SDWebImageDownloaderCompletedBlock in SDWebImageDownload.. I understand your arguments against adding more HTTP request/response related because this will bloat the API. But I though sharing these additions with other users of your API would be a good idea, because others requested this feature too.\nMaybe someone else can join the discussion and share his/her opinion on adding this to the API or have some better ideas about HTTP headers.\nMaybe it's worth it \ud83d\udc4d . BTW: I have removed all breaking changes in public API except this interface:\n-[SDWebImageDownloaderOperationInterface addHandlersForProgress:completed:]\n-[SDWebImageDownloaderOperation addHandlersForProgress:completed:]. I really like your approach in #2166 \ud83d\udc4d \nIs it possible to add the download token to the operation returned by -[SDWebImageManger loadImageWithURL:options:progress:completed:context:]?\nLike this:\n```\n@interface SDWebImageCombinedOperation : NSObject \n...\n@property (strong, nonatomic, nullable) SDWebImageDownloadToken *downloadToken;\n@end\nAnd set it here:\n- (id )loadImageWithURL:(nullable NSURL )url\n                                     options:(SDWebImageOptions)options\n                                    progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                                   completed:(nullable SDInternalCompletionBlock)completedBlock\n                                     context:(nullable SDWebImageContext )context {\n...\noperation.downloadToken = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage downloadedImage, NSData downloadedData, NSError *error, BOOL finished) {\n...\n``\nThen it would be possible to access theNSURLResponsewhen using theSDWebImageMangerinstead of theSDWebImageDownloader`.\n. @bpoplauschi Thanks for your invite! I would be glad if I could help you.\nFrom November to December I'm quite busy, but maybe I can work some basic tasks like PR reviews, documentation.. Can't wait to see this in version 5.x! :)\nI think PR #2020 can be closed if this is the way to go.. @dreampiggy Looks good, I think this will work for my usage.\nThanks for implementing this interface \ud83d\udc4d . ",
    "tsheaff": "Looks like this has been fixed here: https://github.com/rs/SDWebImage/commit/4d99ca6c86493003e44d4ecb5c69f31eb9303655\n@DwayneCoussement can we get a new version with these changes pushed up to cocoapods?. ",
    "GBChain": "remove this line  will make zhe table smooth and fast. ",
    "PengfeiWang666": "Sorry I have no heic format image url, because the current social software does not support the format, but you can use iPhone 7 + iOS11 shooting \"live\" format picture, that is heic format. \nAlthough the current SDWebImage does not support downloading heic format images, but I can use the scene is this: send the original image, I through the Category to determine the type of picture, if it is \". Heic\" format picture, I will be converted to jpg format. Sorry, after checking, the reason for finding the problem is to save the code in the picture section. AVFileTypeHEIC is defined in AVFoundation via iOS 11 and A9 above CPU(iPhone 7 above models). AVFileTypeHEIC is defined in AVFoundation via iOS 11 and A9 above CPU(iPhone 7 above models). ",
    "Gargo": "@dreampiggy sorry but the issue is obvious so no additional info is needed - I just embed this library and run.\n@bpoplauschi especially for you uninstalled all pods and installed again - SDWebImage (4.1.0).\nInserted into tableviewcell, run on simulator and scroll the table - log:\n\n2017-10-07 21:13:29.862520+0300 Avalanche Aliexpress[26401:2855209] Task .<6> finished with error - code: -999\n2017-10-07 21:13:29.954731+0300 Avalanche Aliexpress[26401:2855210] Task <79A00E62-0478-4B2D-98B5-4873FD0BD783>.<7> finished with error - code: -999\n2017-10-07 21:13:30.021877+0300 Avalanche Aliexpress[26401:2855209] Task <7FA3EDDA-7C55-4195-99C2-721119018779>.<8> finished with error - code: -999\n2017-10-07 21:13:30.350819+0300 Avalanche Aliexpress[26401:2855599] Task <3F4BA822-29EC-4671-BCDE-3202625A4197>.<12> finished with error - code: -999\n2017-10-07 21:13:30.377140+0300 Avalanche Aliexpress[26401:2855265] Task <5ED6D2A0-7F8E-4D0E-993C-FD9F23929746>.<13> finished with error - code: -999\n2017-10-07 21:13:30.455598+0300 Avalanche Aliexpress[26401:2855210] Task .<14> finished with error - code: -999\n2017-10-07 21:13:30.504954+0300 Avalanche Aliexpress[26401:2855599] Task <8D05DC16-B657-485D-A620-150CE1B2DAF5>.<16> finished with error - code: -999\n2017-10-07 21:13:30.854790+0300 Avalanche Aliexpress[26401:2855210] Task <0045E041-29F1-4335-AA4F-85D58F49A7ED>.<17> finished with error - code: -999. \n",
    "sryze": "I too see these logs, though I don't use SDWebImage (this thread is literally the only result I got in Google on the subject). It seems to come from NSURLSession whenever you cancel a NSURLDataTask. I haven't found a way to disable them.\nEdit:\nFound an explanation by an Apple employee: https://forums.developer.apple.com/thread/88020.\nIt looks like this can't be disabled.. ",
    "mtf211": "I had this issue as well, that selector is now called loadImageWithURL and the completion block adds an NSData *data return.. ",
    "wuxiyang-iOS": "@HTOne \nDo This :\n```\n[btn sd_setImageWithURL:[NSURL URLWithString:imgUrl] forState:UIControlStateNormal placeholderImage:[[UIImage imageNamed:@\"icon-\u9ed8\u8ba4\u5934\u50cf60-email\"]scaledToFitSize:CGSizeMake(30, 30)]];\nUIView vie = [UIView new];\nvie.frame = CGRectMake(0, 0, 40, 40);\n[vie addSubview:btn];\nUIBarButtonItem leftBarButton = [[UIBarButtonItem alloc] initWithCustomView: vie];\ndon't this\nUIBarButtonItem *leftBarButton = [[UIBarButtonItem alloc] initWithCustomView: btn];\n```\n. ",
    "lemarian": "But why can't i load it? it can neither load png or gif. \nThis for instance is a gif : https://amojee-icons-production.s3.amazonaws.com/2017/08/16/TXa9UVzdpAd1QkQX18kw8Q.png?AWSAccessKeyId=AKIAIVS2WNLFM4XXFU6A&Expires=1523343346&Signature=A2S%2BwyaWK5P5YqHYLIGRIsuAs2Q%3D. \ncell.imgView.sd_setImage(with: urlImage!, placeholderImage: ImageNames.placeholderImage, options: [SDWebImageOptions.transformAnimatedImage], completed:  {(image, error, cacheType, url) in\n    if error != nil\n\n\n    {\n        print(error?.localizedDescription ?? \"\")\n    }\n\n})\n\nThis is my code and it always gives me the error Optional(\"The operation couldn\u2019t be completed. (NSURLErrorDomain error 400.)\")\nI am using pod 'SDWebImage/GIF',pod 'SDWebImage' \n. I am using version 3.8.2. self.imgView.sd_setImage(with: self.urlImage!, placeholderImage: nil, options: [SDWebImageOptions.continueInBackground, SDWebImageOptions.lowPriority, SDWebImageOptions.refreshCached, SDWebImageOptions.handleCookies, SDWebImageOptions.retryFailed,.transformAnimatedImage], completed:  {(image, error, cacheType, url) in\n        if error == nil && image != nil  {\n\n            self.acIn.isHidden = true\n            self.acIn.stopAnimating()\n\n}\n})\nThis is my block of code \n. I am loading gif in a imageview and I want to count the total number of frame in a gif to calculate the total duration of gif, How will image.images.count resolve what i want to attain?. This still doesn't solve my problem. I want to calculate the total duration of the gif. The total duration  of gif playing. . I want to calculate the total duration a particular gif plays.. as soon as it finishes playing, I have to switch to another view. So i need to calculate the exact time frame of the gif . ",
    "cp3hnu": "I found in MKAnnotationView+WebCache.h\nimport \nMay I exclude this file when build?. ",
    "dvkch": "Actually it will not fall back to NSString because the NSURL will not be nil and will correctly return an empty extension, fixing the invalid file name that was previously generated.\nEDIT: saw your updated comment. this is the desired behaviour yes, thanks for adding to the 4.2.0 milestone !. ",
    "thechaudharysab": "@dreampiggy I'm not using it in table view. For tableView this works great you can say I'm downloading the image from web and when it is downloading I'm storing it in a UIImage array.. ",
    "Tracydeng": "Get, thanks \u3002 . ",
    "juliusbtesh": "Well I wasn't going to use NSData *imageData = [NSData dataWithContentsOfURL:url]; - I know that it would not work right. I just wanted to see memory comparison between the two of them.\nI'm not entirely sure the memory was being evicted though because I was seeing a lot of Out-Of-Memory crashes and I can only assume this was due to the memory usage from these images. I have checked out the other areas of the app and I can't place it on any other area.. ",
    "lastcc": "@juliusbtesh This is because the image is too large and iOS may have hardware limitations and too many draw calls can crash the app. \n@bpoplauschi \nThere are ways to down scale a large image into a smaller version without decoding. You can use ImageIO APIs. And you can serialized draw calls if the images are really really large. \nAre u loading large images from high speed network?. ",
    "xiu619544553": "Currently my pods version is 1.3.1, but I can't search for SDWebImae latest version 4.1.2.   The version I searched for was 4.1.1. ",
    "snamrata007": "I also have same problem & trying with latest version but unfortunately its not working. . ",
    "bianzhifeng": "now, i update latest version 4.1.2.\ni can't find setShouldDecompressImages in SDImageCache.\n. i will try this:\nSDWebImageDownloader.shared().shouldDecompressImages = false\nSDImageCache.shared().config.shouldDecompressImages = false\nWish me luck..  yes  i find , thank you very mach.\nnow  i will use : \nSDWebImageDownloader.shared().downloadImage(with: URL(string: \"\"), options:.scaleDownLargeImages, progress: nil) { [weak self] (downImg,\n   data, error, finished) in\n       self?.CollectionView?.reloadItems(at: [indexPath])\n    } \nand give up sd_setImage(with: URL(string: \"\"), placeholderImage: UIImage(named: \"\")). ",
    "Zulqarnain-Mustafa": "I shutdown my system and then turn it on and I just replace pod 'SDWebImage', '~> 4.0' with pod 'SDWebImage' and it starts to build. I almost wasted 3 hours to get it worked.. ",
    "Pearapps": "@dreampiggy Sounds good - I think I will add to + utilize your helpers once they are in master. That make sense to everyone?\nThanks!. @dreampiggy sgtm . Hmmm I have to think about how to do this... I am gonna close this PR and open a new one.... I will almost certainly have to do a similar thing to this PR, however as I don\u2019t see a way to get around the GCD stuff even with a subclass of SDWebImageWebPCoder since I really just want the SDWebImageFrame array and not a UIImage of the combined frames at all . > If you do not want an UIImage at all, you can try to totally custom coder to perform this. This coder plugin can bypass all SD procedure. You can use your imagination to do so.\nYeah - but i will still have to add hooks in, or add functionality to this coder (my current approach) and exposing it to clients. https://github.com/rs/SDWebImage/pull/2089. That code will still use the GCD method that we do not desire. This can share a lot of logic with the decodedImageWithData method . Just a simple model that allows us to get frame durations . ",
    "ghowen": "Thanks. Clean-build did it.. ",
    "krishnameena": "Hi, As I mentioned earlier that I am loading static image with sdwebimage library so I have set url to nil.. Hi, Apology for mistake, It is some other issue and I got it resolved. . Thanks for the information.. ",
    "yichengchen": "I found when we use the FLAnimateedImageView which enable shouldUseGlobalQueue by default still cause imageview blink and flash when tableview/collection reload. especially obviously in iOS9. I thought it's bette to make it user configurable.. @dreampiggy I have create issue here #2102 . After I delete the line:128 [self.layer setNeedsDisplay]. It still blink when I reload the tableView.\ud83d\ude02. ",
    "chengyinglpl": "Thank you for your answer\uff0c\nBut why does a port appear 404 .\nI found that android can load images.. ",
    "Daemonson": "I resolved my problem\u3002Before the completionBlock callback, Application has thrown an exception because of not set a root view controller at the end of application launch.. ",
    "AnilkumarRabhasa": "I tried, but showing \"SDWebImageManager\" is not declared identifier like that, for that do I need to download any other pod from SDWebImage?. ",
    "santhoshs5": "How can i get a thumbnail of an image from local URL.. SDWebImageScaleDownLargeImages , is only for images or will it work with videos too?. ",
    "osbornZ": "@dreampiggy  For that idea 1\uff0cthe demo code  something  with else block  isn't  in  main queue to reduce frame rate\uff0c update  the  UI  \u3001  and    when is it expected to be completed  \uff1f\n. ",
    "emptywalker": "find reason\uff1a\n\n\nStarting with the 4.0 version, we rely on FLAnimatedImage to take care of our animated images.\nIf you use cocoapods, add pod 'SDWebImage/GIF' to your podfile.> 8\nTo use it, simply make sure you use FLAnimatedImageView instead of UIImageView.\nNote: there is a backwards compatible feature, so if you are still trying to load a GIF into a UIImageView, it will only show the 1st frame as a static image.\nImportant: FLAnimatedImage only works on the iOS platform. For OS X, use NSImageView with animates set to YES to show the entire animated images and NO to only show the 1st frame. For all the other platforms (tvOS, watchOS) we will fallback to the backwards compatibility feature described above\n. \n\n",
    "shaljam": "@dreampiggy I'm trying to only cache image data with storeImageData. For now I'm using store(UIImage(), imageData:  forKey: , toDisk: ,completion: nil) with a dummy UIImage.. @dreampiggy Yes, that's encrypted image data.\nThanks for the info. I think I should go for a general data cache.. ",
    "domanc": "Handed the images back to the server URL with sdwebimage loading is showed  JPEGDecompressSurface : Picture decode failed: e00002d1 \nWhen you use the web page to load the url is a data flow, and then use sdwebimage decoding failure load. ",
    "lolgear": "@dreampiggy maybe it is better to copy url instead?\nobjective-c\nNSURL *currentURL = [self.prefetchURLs[index] copy];. @dreampiggy notes to your previous question:\nI call \nobjective-c\n[self.prefetcher prefetchURLs:urls];\nin core data private context ( a.k.a background ).. @dreampiggy so, the current fix would be dispatching invocation of set prepared urls on main thread?. @dreampiggy I mean the fix on current version.. ",
    "terasupernova": "Thanks @dreampiggy, will try that :) . ",
    "itatawy": "I'm not using Fabric and I'm sure it's not because of any other thing \nHere is where it crashes\n\n. Yes, it's been there forever but from version 4.1.2 it became much more than before. \nHere is a chart about last week that increase was after updating to version 4.1.2 \n\n. Good. I just need to know is there any timeline for that fix. As as you see there is a lot of crashes and our customers are complaining so, We want to take a decision if it's going to be a quick fix will wait if not will downgrade to 4.0.0 till the fix is done.. No we don't What i call is just \nimageView.sd_setImage(with: Foundation.URL(string: encodedURL)!, placeholderImage: placeholderImage, options: SDWebImageOptions.retryFailed , completed: { (image, error, type, url)\nfrom UIView I'll make it in a main block to be 100% sure but it's a straight forward call from CollectionVIewCell. ",
    "JoshJacobAtHanson": "That makes sense. This fix recovers from a flaw but doesn't prevent the flaw. I'll try to get some logging in place to see why a canceled operation would be left in the array. Thanks for the feedback!\n\njosh jacob. \n",
    "Thememont": "@dreampiggy provided. @dreampiggy \nFor -[UIImageView(WebCache) sd_setAnimationImagesWithURLs:], requires a variable to calculate the completed operation to ensure that the array of operations is not remove until all operations have been completed. \nLike this\n```\n__block NSUInteger uncompletedOperationCount = arrayOfURLs.count;\n[arrayOfURLs enumerateObjectsUsingBlock:^(NSURL logoImageURL, NSUInteger idx, BOOL * _Nonnull stop) {\n    id  operation = [SDWebImageManager.sharedManager loadImageWithURL:logoImageURL options:0 progress:nil completed:^(UIImage image, NSData data, NSError error, SDImageCacheType cacheType, BOOL finished, NSURL imageURL) {\n        if (!wself) return;\n        dispatch_main_async_safe(^{\n            __strong UIImageView sself = wself;\n            [sself stopAnimating];\n            if (sself && image) {\n                NSMutableArray *currentImages = [[sself animationImages] mutableCopy];\n                if (!currentImages) {\n                    currentImages = [[NSMutableArray alloc] init];\n                }\n            // We know what index objects should be at when they are returned so\n            // we will put the object at the index, filling any empty indexes\n            // with the image that was returned too \"early\". These images will\n            // be overwritten. (does not require additional sorting datastructure)\n            while ([currentImages count] < idx) {\n                [currentImages addObject:image];\n            }\n\n            currentImages[idx] = image;\n\n            sself.animationImages = currentImages;\n            [sself setNeedsLayout];\n        }\n        [sself startAnimating];\n\n        uncompletedOperationCount--;\n        if (uncompletedOperationCount == 0) {\n            [self sd_removeImageLoadOperationWithKey:@\"UIImageViewAnimationImages\"];\n        }\n    });\n}];\n[operationsArray addObject:operation];\n\n}];\n```\nBut I'm worried that this solution may not be safe in some situations. So what do you think about it?. @dreampiggy I agree with your solution! By Instruments, I confirm operations can auto release after completed or canceled.\nAbout  the UIView+WebCacheOperation APIs, ordinary use will not find them here,  users must have to call these APIs for some special purposes. However you hide them , there is always a solution if users want to do. So I think needn't change code for this case.. ",
    "Silence-GitHub": "Thank you! I solved the problem by implementing custom image coder.. ",
    "AaronV5V5": "when can SDWebImage support HEIC images? Or I can show HEIC images? Thank you..  I am glad to receive you messages quickly, thank you all right. So I have to give up to go this way and I will transform HEIC to jpg or png when users submit images, how dou think about it? Thank you. Thank you.But my company upload images to aliyun server, so only the client do this work.. ",
    "JamesHealdUK": "@dreampiggy How do I resize the images? (if you dont mind me asking!) They take up the full height of the UITableViewCell which is undesired behaviour.\nId like to have a set width and height for every image so it doesnt collide with my labels.\nhttps://i.imgur.com/aOezIpK.png. ",
    "LululuSir": "I found that, HEIC decode will invalid in iOS simulator. We should return NO when the API can't decode a file format, instead of return YES but do nothing ,just return nil when others call \"decodedImageWithData:\". Sorry , I ignore other platforms such as tvos, mac. . For a user, we should know if we can decode HEIF, before we request data via network. Such as:\nNSString *urlPath = @\"http://***\";\n    NSString *targetUrlString;\n    if ([[SDWebImageCodersManager sharedInstance] canDecodeFromat:SDImageFormatHEIC]) {\n        targetUrlString = [NSString stringWithFormat:@\"%@/hello.heic\", urlPath];\n    } else {\n        targetUrlString = [NSString stringWithFormat:@\"%@/hello.png\", urlPath];\n    }\n    [[SDWebImageDownloader sharedDownloader] downloadImageWithURL:[NSURL URLWithString:targetUrlString]\n                                                          options:SDWebImageDownloaderLowPriority\n                                                         progress:NULL\n                                                        completed:NULL];\n  . FLAnimated has same issue, and I pull a request too:\nhttps://github.com/Flipboard/FLAnimatedImage/pull/198/files. This is the case  without loop count extension:\nhttp://monkeytest.oss-cn-shanghai.aliyuncs.com/TB1tpGTmPihSKJjy0FlXXadEXXa-286-286%20%281%29.gif\n. Thanks for the loop count behavior info. And in our team, the Designer and H5 Engineer use Chrome far more than Safari, so we will use the Chrome standard. . Yes, I think you don't have to add 1 loop count, it could consistent with safari. And I will change it just in our inner version.\nPS: Can I have you contact information, please? My weChat: Q_lu0330\n. @bpoplauschi \nReiteration path:\n       Decompress the same image in multi-thread at the same time.\n       One way to increase the probability of crash , is to decompress an animated image(gif/apng).\nReason(Speculation):\n      This function is not thread safe:\n      CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image);\nVerification:\n      It was very easy to crash when decompress the same imageRef in two thread at the same time. And it was fixed when I add the thread protection.. @dreampiggy I think it will work too.\n@bpoplauschi I find it in product environment, and it fix that crash.But, I can't reiteration in a demo or unit test. My misstake,ignore it.. ",
    "iNoles": "I believe it was 4.2.2 from cocoapods. . ",
    "DarkoDamjanovic": "I can't find ratio informations in Crashlytics. But it's rare, so it's not severe.. Why don't you just synchronize the access on this one line? If sharedURLCache is a global std::map then (as you already said) other libraries could just set another sharedURLCache exactly at the moment when you want to access it. As this is not an atomic operation the sharedURLCache could be nil exactly at that time. \nI only use:\nSDWebImageManager.shared().loadImage\nAnd the extension methods on UIImage.. I see. Well, global shared mutable state.. the root of all multithreading evil. How about using just your own instance of an NSURLCache instead of the shared one?. ",
    "adityativ-issart": "@mythodeia I have the same issue. When I login in my app it works correct. But after force stop the app,  sd_setImageWithURL: is returning this error. I'm using https channel for images.. @mythodeia where can I find your demo project?. @mythodeia I need this files: http://take.ms/D1tLv. @mythodeia I found problem in the my code. I need to call     [SDWebImageDownloader.sharedDownloader setValue:tokenString forHTTPHeaderField:@\"X-Access-Token\"]; every time when token is setting. But I called it one time.\n. ",
    "OceanHorn": "@dreampiggy Thanks! That's my fault.. Check fails because the version of libwebp in current repository is below 0.5.0. Update to 0.6.0 is considerable.. ",
    "ShaharHD": "@dreampiggy Sure thing.\nI\u2019ll update the package tomorrow.. hi, still having issue updating the libwebp.\ngetting errors on missing h files for some reason.. ",
    "jzern": "As you mentioned we changed the library source files to include from the top level of the project; examples still use the installed directories for the public headers, e.g., webp/decode.h. The include path for the library sources should be changed to reference the top-level directory rather than libwebp/src.\nWhat's the remaining failure for use-frameworks?. The email update seems different than the path I'm seeing in the above comment.\nwas it: ${PODS_ROOT}/libwebp/src/\"\nor: ${PODS_ROOT}/libwebp/\"\nmaybe adding --verbose to xcodebuild line if possible would show the command lines in use to help debug the include path problem.. Let's try again with code formatting...\n${PODS_ROOT}/libwebp/src/**\"\n${PODS_ROOT}/libwebp/**\". Thanks for investigating. For the src/... missing includes from the command line it looks like a framework search path is added for libwebp/ (-F), but not a -I.\nFor mips_macro.h, the include should be guarded by #if WEBP_USE_MIPS*. That might be a deficiency of the lint check.. ",
    "sahibhussain": "Sorry for the mistyping but i am already using the latest version as i am using cocoapods so don't really keep track of the versions. I also contacted apple for this and they said to clarify it with you guys. . ",
    "joshinn": "YES 100% . here is the demo:\nDemoSDCrash.zip\nthe simple main code:\nfile ViewController.m\n```\n  - (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\nNSMutableArray *list = [NSMutableArray array];\n\nNSString *path = [[NSBundle mainBundle] pathForResource:@\"url\" ofType:@\"json\"];\nNSData *data = [NSData dataWithContentsOfFile:path];\nNSError *error = NULL;\nNSDictionary *dic = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:&error];\n\nNSArray *url = dic[@\"url\"];\nfor(NSUInteger i = 0; i < 40; ++i){\n    for(NSString *s in url) {\n        [list addObject:[[NSURL alloc] initWithString:s]];\n    }\n}\n\n[[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:list];\n\n}\nfile `url.json`\n   {\n  \"url\": [\n    \"https://image.flaticon.com/icons/png/512/701/701997.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702023.png\",\n    \"https://image.flaticon.com/icons/png/512/701/701989.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702010.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702016.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702003.png\",\n    \"https://image.flaticon.com/icons/png/512/701/701993.png\",\n    \"https://image.flaticon.com/icons/png/512/701/701988.png\",\n    \"https://image.flaticon.com/icons/png/512/701/701996.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702014.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702011.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702005.png\",\n    \"https://image.flaticon.com/icons/png/512/701/701990.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702018.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702002.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702004.png\",\n    \"https://image.flaticon.com/icons/png/512/701/701995.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702013.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702021.png\",\n    \"https://image.flaticon.com/icons/png/512/702/702009.png\"\n  ]\n}\n```\n. ",
    "Zhangyunjiang123": "I've solved this problem! But thank you very much for your reply.. ",
    "Ankish": "Firebase has a support with SDWebImage. But FLAnimatedImageView and firebase is not linked.\nCheck doc at : https://firebase.google.com/docs/storage/ios/download-files. ",
    "jenjia": "Adding the [weak self] worked perfectly. \nNever known about this trick.\nWe are always learning. Sorry to bother. \nYou also need to add ? after in the self, as shown:\nself?.imageView.image = image\nI also advice to add that to the common problems, I guess a lot of people will/is missing this.\nNevertheless, in the example I provided, the closure just finished correctly. The image is shown correctly. Sometimes it passed a bit of time before I go back. \nThat said, I am trying to figure out why it is really happening, that it takes so long to release the self. Mere curiosity.\nCheers\n. ",
    "mnvr": "@dreampiggy Thank you for that detailed explanation!\nYou've clarified the issue for me. I've opened a PR with a link to your comment from\nthe documentation, you can merge it if you think it is useful, otherwise feel free to close\nit too \ud83d\udc4d\ud83c\udffc, or reword it as you see fit.\nThank you again, for your work on such a useful library.. ",
    "internalG": "So the final conclusion is:\nsd_cancelCurrentImageLoad is deprecated, use sd_setImageWithURL:nil in cellForRowAtIndex instead?. ",
    "BakaYang": "I'm sorry I didn't provide some important information.The following are detailed information:\nxcode version 9.2,and libwebp(version 0.6.1)  I manually downoad from google ,\n\nThen I manually imported it into the project\n\nthen i add it to libraries\n\nand I change project configuration :target\uff0d>build setting\uff0d>preprocessor add SD_WEBP=1\n\nI download SDWebImageWebPCoder(.h.m) and  UIImage+WebP(.h.m) from github,then I add they to my project,\n\ncommand + b   ,then appear errors\n.  I run iosbuild.sh,genertate WebP.framework and WebPDecoder.framework ,but  I can't find mux.h and demux.h inside.\n\n. Thank you for your answer\uff0cbut I am not familiar with makefile and shell script.I try to change iosbuild.sh with configure --enable-libwebpmux --enable_libwebpdemux,but in the end it failed.Can you tell me more detailed steps or send iosbuild.sh to my mailbox(baka6005@163.com).. ",
    "zhangjingfeng": "@BakaYang this framework file may help you\n. ",
    "HaileApp": "I want to use SDWebImage Library in my iOS app.I have more than 160 images found in the Assets folder.So how can I use it to load the images?. I can't get the code with Swift format..can you please give me the code snapshot? Here I did the images in a new Group and use this code and it works but i have no idea how it impacts the memory.\nlet bundlePath = Bundle.main.path(forResource: imageList[imageIndex], ofType: \"jpg\") imageView.sd_setImage(with: nil, placeholderImage: UIImage(contentsOfFile: bundlePath!)). ",
    "kushaseum": "@dreampiggy Thanks for replay.\nI want to go ahead for 1st case.\ncan you please give example code for swift 3.. Hello,\nThanks for swift Reply. \ngetting one issue - Please check screen sort\nI had write below code.\n```\nSDWebImageManager.shared().delegate = self\n        SDWebImageManager.shared().loadImage(with: URL(string: (arrInternationPackageModel.object(at: indexPath.row) as! NSDictionary).value(forKey: \"image\") as! String)!, options: [], progress: nil) { (image, data, error, cacheType, finished, url) in\n            // Do something\n            cell.imgPackage.image = image\n        }\nfunc imageManager(_ imageManager: SDWebImageManager, transformDownloadedImage image: UIImage?, with imageURL: URL?) -> UIImage? {\n        let targetSize = CGSize(width: 320, height: 150)\n        UIGraphicsBeginImageContextWithOptions((image?.size)!, !SDCGImageRefContainsAlpha(image?.cgImage), image!.scale)\n        image?.draw(in: CGRect(origin: .zero, size: targetSize))\n       let scaledImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        return scaledImage\n    }\n```\n\n. ",
    "mikemike396": "Do either of these get ran automatically? Also has there been any thoughts of running these once the size gets to a default amount to keep things cleaned up?. Ah okay I see now you have the expiration date set to 7 days. \nstatic const NSInteger kDefaultCacheMaxCacheAge = 60 * 60 * 24 * 7; // 1 week\n\nThanks again for all the info. This helps greatly! Amazing library!. ",
    "liakhandrii": "@dreampiggy created a demo and added it to the table above.. I tried it, and SDWebImageQueryDataWhenInMemory works, but not always. For some images data is still nil. I can reproduce this only in iPhone 8 simulator, though. In iPhone 8 Plus simulator it works fine. I updated my demo project to demonstrate this issue.. Update: I checked on a real device, Adding SDWebImageQueryDataWhenInMemory makes no difference on it. The data is nil.. ",
    "YasinZhou": "In FLAnimatedImageView+WebCache , the default value for  options is 0\uff0c\nthere isn't have the sd_FLAnimatedImage assignment when other views load the image first, and then load cache ,it will don,t have the imageData,GIF will be nil. Yes, that's right.\nand then GIF will be displayed as a static image.. Thank you very much for your answer!\ni'm using three Kinds of imageView,FL/UI/ASDK, only FL need sd_FLAnimatedImage, and i've encapsulation FL, there's a unified call entry, so i can set all the FL reques's options is SDWebImageQueryDataWhenInMemory.  though it's not so great too.. SDAnimatedImageView\uff1f it's great, it's very exciting, expect.\nYour suggestion was right, I judged images's url rangeOfString:@\".gif\"\nand there is a performance question, i found the image cache loading slowly, loading 21 disk caches in about 6 seconds. I found that the larger the picture, the slower the load.. yes, it's webp. didFinishLaunchingWithOptions:\n[SDWebImageManager sharedManager].cacheSerializer = ^NSData * _Nullable(UIImage * _Nonnull image, NSData * _Nullable data, NSURL * _Nullable imageURL) {\n        if ([NSData sd_imageFormatForImageData:data] == SDImageFormatWebP) {\n            return [[SDWebImageWebPCoder sharedCoder] encodedDataWithImage:image format:SDImageFormatWebP];\n        }\n        return data;\n    };\nMost of pictures in my APP are webp. i found this code makes the CPU very high, and then it will be more carton. Is it wrong for me?\n.  I don't understand how to solve the slow loading of webp images from disk.\nI'm very confused.... OK, I see! Thank you very much.. ",
    "rpstro02": "UIImage.sd_animatedGIF(with: animatedPlaceholderData)\nThis works.  Thank you for the reply.. ",
    "keith": "Thanks!. ",
    "Augustyniak": "That was fast. Thanks!. ",
    "a455455b": "@dreampiggy Thank you for your answer, I also see that issue.I will try.. @Ewg777 This bug will be fixed in iOS 12.  the issue  can close now.. ",
    "flyweights": "Look for answers. ",
    "MrQQQQQQQQQQ": "Get the same issue on iOS 11.2.x, is anyone find answers?. ",
    "lianleven": "@dreampiggy This problem is after iOS 11.2, what is the solution or reduce the crash?. @enteris85 You can do this the way @dreampiggy  provides.\nYou configure SDWebImage like this:\nSDWebImageManager.shared().imageCache?.config.shouldDecompressImages = false\nSDWebImageDownloader.shared().shouldDecompressImages = false\nand:\n deinit {\n     SDImageCache.shared().clearMemory()\n}\nReduce the crash.\n. ",
    "enteris85": "I'm suffering from this crash.\nI look forward to modifying.. ",
    "Ewg777": "The same here. Thread 12!\n```Incident Identifier: BBE2561C-1353-49B7-A01C-E6B7CB5B7EB3\nCrashReporter Key:   ffe647cc3872eed42ce8baf0aa887f41515ce15a\nHardware Model:      iPhone10,5\nProcess:             MYAPPNative [3828]\nPath:                /private/var/containers/Bundle/Application/3F23C889-EB06-4FBD-BB60-C3BF687EE7D2/MYAPPNative.app/MYAPPNative\nIdentifier:          ru.MYAPP.app\nCode Type:           ARM-64 (Native)\nRole:                Foreground\nParent Process:      launchd [1]\nCoalition:           ru.MYAPP.app [1291]\nDate/Time:           2018-09-09 22:25:14.1432 +0300\nLaunch Time:         2018-09-09 10:43:03.7159 +0300\nOS Version:          iPhone OS 11.4.1 (15G77)\nBaseband Version:    1.04.80\nReport Version:      104\nException Type:  EXC_BAD_ACCESS (SIGSEGV)\nException Subtype: KERN_INVALID_ADDRESS at 0x0000000000000000\nVM Region Info: 0 is not in any region.  Bytes before following region: 4300750848\n      REGION TYPE                      START - END             [ VSIZE] PRT/MAX SHRMOD  REGION DETAIL\n      UNUSED SPACE AT START\n--->\n      __TEXT                 0000000100584000-0000000100588000 [   16K] r-x/r-x SM=COW  ...tmasterNative\nTermination Signal: Segmentation fault: 11\nTermination Reason: Namespace SIGNAL, Code 0xb\nTerminating Process: exc handler [0]\nTriggered by Thread:  0\nThread 0 name:\nThread 0 Crashed:\n0   CoreGraphics                    0x000000018390b818 ERROR_CGDataProvider_BufferIsNotReadable + 16 (CGDataProviderBufferCheck.h:36)\n1   CoreGraphics                    0x000000018390b538 CGDataProviderRetainBytePtr + 216 (CGDataProvider.c:516)\n2   QuartzCore                      0x0000000185fe9774 CA::Render::(anonymous namespace)::create_image_from_image_data(CGImage, CGColorSpace, unsigned int, unsigned int, double) + 196 (render-image-cache.cpp:465)\n3   QuartzCore                      0x0000000185fe79ac CA::Render::create_image(CGImage, CGColorSpace, unsigned int, double) + 868 (render-image-cache.cpp:1443)\n4   QuartzCore                      0x0000000185fea5cc CA::Render::copy_image(CGImage, CGColorSpace, unsigned int, double, double) + 472 (render-image-cache.cpp:1576)\n5   QuartzCore                      0x0000000185fea990 CA::Render::prepare_image(CGImage, CGColorSpace, unsigned int, double) + 20 (render-image-cache.cpp:1665)\n6   QuartzCore                      0x00000001860fa704 CA::Layer::prepare_commit(CA::Transaction) + 420 (CALayer.mm:2484)\n7   QuartzCore                      0x000000018605c7c8 CA::Context::commit_transaction(CA::Transaction) + 576 (CAContextInternal.mm:1855)\n8   QuartzCore                      0x00000001860841b0 CA::Transaction::commit() + 580 (CATransactionInternal.mm:425)\n9   QuartzCore                      0x0000000186085030 CA::Transaction::observer_callback(CFRunLoopObserver, unsigned long, void) + 92 (CATransactionInternal.mm:795)\n10  CoreFoundation                  0x0000000181f0a910 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION + 32 (CFRunLoop.c:1824)\n11  CoreFoundation                  0x0000000181f08238 __CFRunLoopDoObservers + 412 (CFRunLoop.c:1934)\n12  CoreFoundation                  0x0000000181f08884 __CFRunLoopRun + 1436 (CFRunLoop.c:2948)\n13  CoreFoundation                  0x0000000181e28da8 CFRunLoopRunSpecific + 552 (CFRunLoop.c:3245)\n14  GraphicsServices                0x0000000183e0e020 GSEventRunModal + 100 (GSEvent.c:2245)\n15  UIKit                           0x000000018be48758 UIApplicationMain + 236 (UIApplication.m:3965)\n16  MYAPPNative                 0x0000000100595fb0 main + 56 (1.swift:52)\n17  libdyld.dylib                   0x00000001818b9fc0 start + 4\nThread 1 name:\nThread 1:\n0   libsystem_kernel.dylib          0x00000001819c7de8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x00000001819c7c60 mach_msg + 72 (mach_msg.c:103)\n2   CoreFoundation                  0x0000000181f0ae40 CFRunLoopServiceMachPort + 196 (CFRunLoop.c:2613)\n3   CoreFoundation                  0x0000000181f08908 __CFRunLoopRun + 1568 (CFRunLoop.c:2969)\n4   CoreFoundation                  0x0000000181e28da8 CFRunLoopRunSpecific + 552 (CFRunLoop.c:3245)\n5   Foundation                      0x000000018289d674 -[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 304 (NSRunLoop.m:367)\n6   Foundation                      0x000000018289d51c -[NSRunLoop(NSRunLoop) runUntilDate:] + 148 (NSRunLoop.m:411)\n7   UIKit                           0x000000018bb2d768 -[UIEventFetcher threadMain] + 136 (UIEventFetcher.m:437)\n8   Foundation                      0x00000001829adefc __NSThread__start + 1040 (NSThread.m:1181)\n9   libsystem_pthread.dylib         0x0000000181b89220 _pthread_body + 272 (pthread.c:740)\n10  libsystem_pthread.dylib         0x0000000181b89110 _pthread_start + 292 (pthread.c:799)\n11  libsystem_pthread.dylib         0x0000000181b87b10 thread_start + 4\nThread 2 name:\nThread 2:\n0   libsystem_kernel.dylib          0x00000001819c989c write + 8\n1   MYAPPNative                 0x000000010097f43c CLSSDKFileLog + 288 (CLSInternalLogging.c:0)\n2   MYAPPNative                 0x0000000100976b08 CLSMachExceptionServer + 904 (CLSMachException.c:249)\n3   libsystem_pthread.dylib         0x0000000181b89220 _pthread_body + 272 (pthread.c:740)\n4   libsystem_pthread.dylib         0x0000000181b89110 _pthread_start + 292 (pthread.c:799)\n5   libsystem_pthread.dylib         0x0000000181b87b10 thread_start + 4\nThread 3:\n0   libsystem_kernel.dylib          0x00000001819e90e8 __psynch_cvwait + 8\n1   libsystem_pthread.dylib         0x0000000181b8fed8 _pthread_cond_wait$VARIANT$armv81 + 628 (pthread_cond.c:579)\n2   libc++.1.dylib                  0x00000001810a025c std::__1::condition_variable::wait(std::__1::unique_lock&) + 24 (__threading_support:278)\n3   JavaScriptCore                  0x00000001895b145c void std::__1::condition_variable_any::wait >(std::__1::unique_lock&) + 104 (condition_variable:204)\n4   JavaScriptCore                  0x00000001895b1070 bmalloc::Scavenger::threadRunLoop() + 164 (condition_variable:213)\n5   JavaScriptCore                  0x00000001895b0e18 bmalloc::Scavenger::threadEntryPoint(bmalloc::Scavenger) + 12 (Scavenger.cpp:143)\n6   JavaScriptCore                  0x00000001895b1234 void std::__1::__thread_proxy >, void ()(bmalloc::Scavenger), bmalloc::Scavenger> >(void) + 44 (type_traits:4323)\n7   libsystem_pthread.dylib         0x0000000181b89220 _pthread_body + 272 (pthread.c:740)\n8   libsystem_pthread.dylib         0x0000000181b89110 _pthread_start + 292 (pthread.c:799)\n9   libsystem_pthread.dylib         0x0000000181b87b10 thread_start + 4\nThread 4 name:\nThread 4:\n0   libsystem_kernel.dylib          0x00000001819c7de8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x00000001819c7c60 mach_msg + 72 (mach_msg.c:103)\n2   CoreFoundation                  0x0000000181f0ae40 CFRunLoopServiceMachPort + 196 (CFRunLoop.c:2613)\n3   CoreFoundation                  0x0000000181f08908 __CFRunLoopRun + 1568 (CFRunLoop.c:2969)\n4   CoreFoundation                  0x0000000181e28da8 CFRunLoopRunSpecific + 552 (CFRunLoop.c:3245)\n5   CFNetwork                       0x00000001827366e0 -[__CoreSchedulingSetRunnable runForever] + 220 (CoreSchedulingSet.mm:1365)\n6   Foundation                      0x00000001829adefc __NSThread__start + 1040 (NSThread.m:1181)\n7   libsystem_pthread.dylib         0x0000000181b89220 _pthread_body + 272 (pthread.c:740)\n8   libsystem_pthread.dylib         0x0000000181b89110 _pthread_start + 292 (pthread.c:799)\n9   libsystem_pthread.dylib         0x0000000181b87b10 thread_start + 4\nThread 5 name:\nThread 5:\n0   libsystem_kernel.dylib          0x00000001819c7de8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x00000001819c7c60 mach_msg + 72 (mach_msg.c:103)\n2   CoreFoundation                  0x0000000181f0ae40 CFRunLoopServiceMachPort + 196 (CFRunLoop.c:2613)\n3   CoreFoundation                  0x0000000181f08908 __CFRunLoopRun + 1568 (CFRunLoop.c:2969)\n4   CoreFoundation                  0x0000000181e28da8 CFRunLoopRunSpecific + 552 (CFRunLoop.c:3245)\n5   Foundation                      0x000000018289d674 -[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 304 (NSRunLoop.m:367)\n6   Foundation                      0x00000001829121a8 -[NSRunLoop(NSRunLoop) run] + 88 (NSRunLoop.m:389)\n7   MYAPPNative                 0x00000001008e3e74 +[GAI threadMain:] + 64 (GAI.m:240)\n8   Foundation                      0x00000001829adefc __NSThread__start + 1040 (NSThread.m:1181)\n9   libsystem_pthread.dylib         0x0000000181b89220 _pthread_body + 272 (pthread.c:740)\n10  libsystem_pthread.dylib         0x0000000181b89110 _pthread_start + 292 (pthread.c:799)\n11  libsystem_pthread.dylib         0x0000000181b87b10 thread_start + 4\nThread 6 name:\nThread 6:\n0   libsystem_kernel.dylib          0x00000001819c7de8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x00000001819c7c60 mach_msg + 72 (mach_msg.c:103)\n2   CoreFoundation                  0x0000000181f0ae40 __CFRunLoopServiceMachPort + 196 (CFRunLoop.c:2613)\n3   CoreFoundation                  0x0000000181f08908 __CFRunLoopRun + 1568 (CFRunLoop.c:2969)\n4   CoreFoundation                  0x0000000181e28da8 CFRunLoopRunSpecific + 552 (CFRunLoop.c:3245)\n5   CoreFoundation                  0x0000000181e78b28 CFRunLoopRun + 116 (CFRunLoop.c:3269)\n6   CoreMotion                      0x000000018741f9dc CLMotionCore::runMotionThread(void*) + 1120 (CLMotionCore.mm:316)\n7   libsystem_pthread.dylib         0x0000000181b89220 _pthread_body + 272 (pthread.c:740)\n8   libsystem_pthread.dylib         0x0000000181b89110 _pthread_start + 292 (pthread.c:799)\n9   libsystem_pthread.dylib         0x0000000181b87b10 thread_start + 4\nThread 7 name:\nThread 7:\n0   libsystem_kernel.dylib          0x00000001819c7de8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x00000001819c7c60 mach_msg + 72 (mach_msg.c:103)\n2   CoreFoundation                  0x0000000181f0ae40 __CFRunLoopServiceMachPort + 196 (CFRunLoop.c:2613)\n3   CoreFoundation                  0x0000000181f08908 __CFRunLoopRun + 1568 (CFRunLoop.c:2969)\n4   CoreFoundation                  0x0000000181e28da8 CFRunLoopRunSpecific + 552 (CFRunLoop.c:3245)\n5   AVFAudio                        0x0000000187924398 GenericRunLoopThread::Entry(void) + 164 (GenericRunLoopThread.h:92)\n6   AVFAudio                        0x000000018794e7a8 CAPThread::Entry(CAPThread) + 88\n7   libsystem_pthread.dylib         0x0000000181b89220 _pthread_body + 272 (pthread.c:740)\n8   libsystem_pthread.dylib         0x0000000181b89110 _pthread_start + 292 (pthread.c:799)\n9   libsystem_pthread.dylib         0x0000000181b87b10 thread_start + 4\nThread 8 name:\nThread 8:\n0   libsystem_kernel.dylib          0x00000001819c7de8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x00000001819c7c60 mach_msg + 72 (mach_msg.c:103)\n2   CoreFoundation                  0x0000000181f0ae40 __CFRunLoopServiceMachPort + 196 (CFRunLoop.c:2613)\n3   CoreFoundation                  0x0000000181f08908 __CFRunLoopRun + 1568 (CFRunLoop.c:2969)\n4   CoreFoundation                  0x0000000181e28da8 CFRunLoopRunSpecific + 552 (CFRunLoop.c:3245)\n5   WebCore                         0x000000018a0ec2d4 RunWebThread(void*) + 592 (WebCoreThread.mm:624)\n6   libsystem_pthread.dylib         0x0000000181b89220 _pthread_body + 272 (pthread.c:740)\n7   libsystem_pthread.dylib         0x0000000181b89110 _pthread_start + 292 (pthread.c:799)\n8   libsystem_pthread.dylib         0x0000000181b87b10 thread_start + 4\nThread 9:\n0   libsystem_kernel.dylib          0x00000001819e9d78 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181b87eb4 _pthread_wqthread + 928 (pthread.c:0)\n2   libsystem_pthread.dylib         0x0000000181b87b08 start_wqthread + 4\nThread 10:\n0   libsystem_kernel.dylib          0x00000001819e9d78 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181b87eb4 _pthread_wqthread + 928 (pthread.c:0)\n2   libsystem_pthread.dylib         0x0000000181b87b08 start_wqthread + 4\nThread 11:\n0   libsystem_kernel.dylib          0x00000001819e9d78 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181b87eb4 _pthread_wqthread + 928 (pthread.c:0)\n2   libsystem_pthread.dylib         0x0000000181b87b08 start_wqthread + 4\nThread 12 name:\nThread 12:\n0   AppleJPEG                       0x0000000183f89678 aj_prog_decode_AC_refine + 628 (aj_block_dec.c:513)\n1   AppleJPEG                       0x0000000183f8960c aj_prog_decode_AC_refine + 520 (aj_block_dec.c:492)\n2   AppleJPEG                       0x0000000183f81f44 aj_mcu_decode_progressive + 1704 (aj_mcu_dec.c:647)\n3   AppleJPEG                       0x0000000183f83070 fill_coeff_buffer + 452 (aj_dec.c:689)\n4   AppleJPEG                       0x0000000183f82a4c aj_decode_all + 272 (aj_dec.c:883)\n5   AppleJPEG                       0x0000000183f83f78 aj_decode_all_mt + 652 (aj_dec.c:1213)\n6   AppleJPEG                       0x0000000183fa6a68 applejpeg_decode_image_all + 724 (applejpeg_dec.c:1963)\n7   ImageIO                         0x0000000184164c0c AppleJPEGReadPlugin::copyImageBlockSet(InfoRec, CGImageProvider, CGRect, CGSize, __CFDictionary const) + 2108 (imageAppleJPEG.cpp:2812)\n8   ImageIO                         0x0000000184163690 AppleJPEGReadPlugin::CopyImageBlockSetProc(void, CGImageProvider, CGRect, CGSize, __CFDictionary const) + 132 (imageAppleJPEG.cpp:3783)\n9   ImageIO                         0x0000000183feb684 IIOImageProviderInfo::copyImageBlockSetWithOptions(CGImageProvider, CGRect, CGSize, __CFDictionary const) + 632 (CGImagePlus.cpp:2107)\n10  ImageIO                         0x0000000183fe8e98 IIOImageProviderInfo::CopyImageBlockSetWithOptions(void, CGImageProvider, CGRect, CGSize, __CFDictionary const*) + 596 (CGImagePlus.cpp:2405)\n11  CoreGraphics                    0x00000001839f5360 img_blocks_create + 272 (CGSImage.c:306)\n12  CoreGraphics                    0x00000001839fcb8c img_data_lock + 1776 (CGSImage.c:6532)\n13  CoreGraphics                    0x00000001839fc444 CGSImageDataLock + 184 (CGSImage.c:7131)\n14  CoreGraphics                    0x000000018381a440 ripc_AcquireRIPImageData + 308 (RIPImage.c:134)\n15  CoreGraphics                    0x0000000183a10f5c ripc_DrawImage + 652 (RIPContext.c:1314)\n16  CoreGraphics                    0x0000000183a00de8 CGContextDrawImageWithOptions + 660 (CGContextImage.c:291)\n17  SDWebImage                      0x0000000101d95520 -[SDWebImageImageIOCoder sd_decompressedImageWithImage:] + 240 (SDWebImageImageIOCoder.m:235)\n18  SDWebImage                      0x0000000101d953f4 -[SDWebImageImageIOCoder decompressedImageWithImage:data:options:] + 436 (SDWebImageImageIOCoder.m:183)\n19  SDWebImage                      0x0000000101d8e3c8 -[SDWebImageCodersManager decompressedImageWithImage:data:options:] + 468 (SDWebImageCodersManager.m:125)\n20  SDWebImage                      0x0000000101d93698 __70-[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:]_block_invoke.279 + 556 (SDWebImageDownloaderOperation.m:439)\n21  libdispatch.dylib               0x0000000181854aa0 _dispatch_call_block_and_release + 24 (init.c:994)\n22  libdispatch.dylib               0x0000000181854a60 _dispatch_client_callout + 16 (object.m:507)\n23  libdispatch.dylib               0x00000001818931d4 _dispatch_queue_serial_drain$VARIANT$armv81 + 568 (inline_internal.h:2500)\n24  libdispatch.dylib               0x0000000181893af8 _dispatch_queue_invoke$VARIANT$armv81 + 328 (queue.c:5290)\n25  libdispatch.dylib               0x000000018189449c _dispatch_root_queue_drain_deferred_wlh$VARIANT$armv81 + 332 (queue.c:5908)\n26  libdispatch.dylib               0x000000018189c46c _dispatch_workloop_worker_thread$VARIANT$armv81 + 612 (source.c:2529)\n27  libsystem_pthread.dylib         0x0000000181b87e70 _pthread_wqthread + 860 (pthread.c:2218)\n28  libsystem_pthread.dylib         0x0000000181b87b08 start_wqthread + 4\nThread 13:\n0   libsystem_pthread.dylib         0x0000000181b87b04 start_wqthread + 0\nThread 14:\n0   libsystem_kernel.dylib          0x00000001819e9d78 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181b880a0 _pthread_wqthread + 1420 (pthread.c:0)\n2   libsystem_pthread.dylib         0x0000000181b87b08 start_wqthread + 4\nThread 15:\n0   libsystem_pthread.dylib         0x0000000181b87b04 start_wqthread + 0\n```. ",
    "mzgreat521": "@mythodeia @dreampiggy Get it. Thank you very much!. @dreampiggy OK. Thank you!. ",
    "bembem1011": "Thanks @dreampiggy,\nI set \nimgView.animationRepeatCount = 1\nHowever, my webp animation doesn't stop, it loops forever :(. May you help me to give the example for using KVO to watch animating property on UIImageView ? :( Thanks very much Y_Y\nTherefore, When is the release of branch 5.x? . Hi @dreampiggy \nWill this issue be handled in branch 5.x's SDAnimatedImageView ? May you tell me the 5.x's final release time ?\nThanks very much :(. Thanks very much @dreampiggy . @dreampiggy Thanks for your answer, but using \"Custom Download Operation\" seems doesn't match with my idea. I see SDWebImageManager has method \n- (id <SDWebImageOperation>)loadImageWithURL:(nullable NSURL *)url\n                                     options:(SDWebImageOptions)options\n                                    progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                                   completed:(nullable SDInternalCompletionBlock)completedBlock {\nI see below code in downloaded completion block\nif (downloadedImage && finished) {\n                            [self.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:nil];\n                        }\nMay I extend SDImageCache to store the \"downloadedImage\" instead of storing \"downloadedData\" ? Is it the right solution and does it make any bad performance for webp Image ?. @dreampiggy  Thanks for you answer, I agree with you about providing \n\nextra abstract layer to allow user to return a modified version NSData before acually store it to disk(Like Kingfisher's CacheSerializer\n\nHow about providing it in next version 5.x in April ?. @dreampiggy Thx :D:D:D:D. @dreampiggy  once more question ? why not support for using FLAnimatedImageView with webp image because some webp images are so large to decode which makes app waiting a long time to construct UIImageView.animationImages. @dreampiggy  Thank you :). ",
    "loveNoodles": "I encountered the same question . \nMy Xcode is 10.0 . platform :ios,  '10.0' .Both OS_OBJECT_HAVE_OBJC_SUPPORT and OS_OBJECT_USE_OBJC are defined in usr/include->os->object.h .\nBut l still got this error ! Any help is appreciated .. ",
    "KiritoBeater": "@dreampiggy .Sorry, something wrong you understand. I mean that  I want to save another image to the cache with the same cache key when the imageURL is bad. But SDWebImageManager.sharedManager can't remove the imageURL from SDWebImageManager.sharedManager.failedURLs when [SDWebImageManager.sharedManager saveImageToCache:image forURL:imageURL]. So Next time, [imageView sd_setImageWithURL: imageURL] is still failed. It is not that I want.. Thanks. Expectedly.. ",
    "noticeboard-priyansh": "Hi\nWhile running from Xcode, it works fine, so while debugging it works.\nWhen app launched from the launcher, they arent loading.\nI am getting this error as -\n\"Downloaded image has 0 pixels.\"\nAlso, I checked in the debug scheme and I am not passing any arguments.. ",
    "filipealva": "I'm facing the Downloaded image has 0 pixels error too often. I can't relate to launching it via Xcode or launcher,  but it is happening a lot and I can't find any reason. . ",
    "Zedd0202": "Thank You!! \ud83d\udc4d . ",
    "janardhanmupparaju": "now using iOS-11.2, Xcode-9.2 and 'SDWebImage', '~> 4.0'. when i load 200 images using SDWebImage its downloading all after app calling applicationDidReceiveMemoryWarning() method and getting this Message from debugger: Terminated due to memory issue and after app crashing.\nThis is my code\ncell.ReportImage.sd_setImage(with: imageURL, placeholderImage: UIImage(named: \"docImage\"))\n. jpg, jpeg, png and sizes in bytes 34184, 10366947, 7945, .... I find the solution. loading high resolution images into tableview, so that is the problem.\n. ",
    "BlessNeo": "image size more than 500k cause app crashed, same reason:memory issue. ",
    "sberrevoets": "Thanks for the fast response!. ",
    "bshirley": "It still appears, if in the build settings for pods:\n(Xcode 9.4.1)\nApple LLVM 9.0 Warnings - Objective-C and ARC\nImplicit retain of 'self' within blocks = YES. ",
    "lzylzy1991": "\nOccupies memory close to 100M\u3002\nWhen you continue to slide the UICollectionView will crash\nAnimated WebP images size 200 -300 KB \nWebp URL:\nhttps://pic.huke88.com/video/cover/2017-10-19/9DDFAEC0-E926-137F-0107-82CF55D1F14F.gif!/fw/432/format/webp\n. ",
    "PrakashMaharjan": "Hi @lzylzy1991, \nI also got this issue while loading 150 - 200 images from URL in collection view and scrolling.\nNot sure exactly but till now, did not got this issue in real device, while i tested.. but issue often occurs is simulator...\nI am still testing.. Can you share your findings till now? Would be helpful.. \n. HI @dreampiggy, I am not using animated WebP, but its just normal images from url.\nThe images are about 150 - 200 in numbers from JSON array. While loading on collection view and then scrolling in collection view, it crashes. I often got this issue in iOS simulator but have not encountered in real device, when i checked. I feel its the memory issue as mentioned by @shaktiprakash099 and @lzylzy1991 \n. Hi @mythodeia ,\nthey are thumbnail images and are just about 40 - 50 KB  and 300 X 408.\nI have JSON array that returns around 150 - 200 thumbnail images that is meant to shown in UICollectionview. But while loading and scrolling often it crashes.\n. ",
    "shaktiprakash099": "i am also having this issues, while collection view  reloading or i am scrolling it crossed 400 Mb and app got crashed \n\n . @mythodeia  my images are 250 to  300 Kb ,the problem is that when the images are completely downloaded the memory impact drastically getting changed from 45 to 400 Mb ,in simulator it not happening as its using MAC memory but in real device its getting crashed ,i have also tried to use \ncache clear ,but  nothing happened .i am very close to my app lunch   . @mythodeia  yes its 125* 125. @lzylzy1991  did you find any solution for this . @PadmaPreethi  where did you write shoudCacheInMemory ,in Viewdidapper or in collection view delegates methods could you please share your code snippet which reduces to 100 mb i am still having 450 Mb memor impact @randarnold  hey i checked with instruments also the reason of high memory impact is SDwebimage . @PadmaPreethi  ,here is my App delegate application did finish lunching \n func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: \n     [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n     SDWebImageManager.shared().imageCache?.deleteOldFiles(completionBlock: nil)\n     SDImageCache.shared().clearMemory()\n     SDImageCache.shared().clearDisk()\n     URLCache.shared.removeAllCachedResponses()\n     return true\n  }\n\nhave you added any thing extra . @PadmaPreethi  ,letting performance down its not a good idea ,at the same time i am unable to reduce  memory impact ,what to do ??. ",
    "PadmaPreethi": "I'm also facing the same issue , memory grows till 1 GB and crashes. But it does not throws memory warning. Instead the log shows \"Terminated due to memory error\" . I tried disabling shoudCacheInMemory, and the memory usage drastically reduced to 100 MB.. \nI tried disabling decompressing , but the image consumption is still the same just that now it shows in Image_IO_Jpeg_Data (Instead of raster data) .Refer above image.\n\nI tried enabling decompression and disabled in memory cache. Memory usage reduced a lot and is always around 200 MB. But when i scroll fast, image views goes blank and loads again (which is expected as in memory cache is disabled). \nWhen i disabled both decompression and in memory caching, memory consumption even reduced to 100 MB (But again performance lags).  \nPS: Each image size is of 100 KB.\n. @shaktiprakash099 : I added it in AppDelegate didFinishLaunchWithOptions.. @shaktiprakash099 : You just need to set decompression to false,\nobjc\n[[[SDImageCache sharedImageCache] config] setShouldDecompressImages:NO];\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\nBut remember , if you set this to false, the decompression will be done by the UIKit in main thread which will cause a drop in FPS. it's a trade off between memory and performance. Choose according to your need.\n. @dreampiggy : Please take a look at the allocations screen shot and let me know if i'm missing something.. Adding a screen shot when Decompression and in memory caching is enabled.\n\nTo give more information about the issue,\ni'm using SDWebImage - 4.3.2\nXcode - 9.2\niOS version - Tested on 11.2.1 & 11.2.6\n. @randarnold : Verified leaks as well. There is no major leak. Maximum leak is around 600KB thorugh out app usage. My question is why is Raster data or the image jpeg is not getting released from memory during memory warnings.  Does setting totalCostLimit to SD cache helps ?. @dreampiggy : Tried downgrading to 4.3.0 , But still the raster data takes up lot of memory. I checked the references of UIIMage object through visual debugger. References seems to be fine (Nothing is retaining it) Also, when i noticed the size of raster data for each uiimage, it's size is between 3-5 MB. That's huge !!\n\n. @dreampiggy : Yes, i get that point. So SDWebImage  decompression part taking up MB's of data for each image is expected ? If i disable decompression, then it will affect FPS . Is there a better way to handle this situation ?. @dreampiggy : Sorry if i'm missing something. I have a question. Will SDWbImage retains the raster data as well ? When does  raster data gets deallocated from memory?\nI noticed the following behavior in visual memory graph,\n1) While UIImage has proper reference as expected , there are few isntances of VM raster data which has more than one reference ( one from UIImage, and another from some malloc region).\n2) Also in some instances of VM raster data, intermediate components like CGImage, CFData are also referred by more than one.. @dreampiggy : And check this, so SDWebImage cache maintains the image in cache. That also keeps the raster data in memory which is 5MB. Does that mean, caching each image in memory will cost in MB's? Am i missing something ?\n\n. Nope, we don't use animated images.. @dreampiggy : Just a thought , will you be able to provide support for adding delegate to the memory cache to get notification when it evicts objects(which NSCache already provides) ? Will be useful to debug when we set some certain parameters like maxMemoryCountLimit or maxMemoryCost.\nCurrently i have set maxMemoryCountLimit and it seems to be better than before. . @dreampiggy : Thanks !. @dreampiggy : valueForKey:@\"memCache\" always returns nil.. ",
    "randarnold": "I suggest that you spend some time with Instruments and find out exactly where your problem lies. If you can identify that the issue lies with SDWebImage code and not your code, then propose a fix.. So your allocations go up and up. You need to look at why. What are the retain counts? Who owns those allocations? Do you have any retain cycles? What is the life cycle of your objects? Any leaks?\nYou can call methods to dump objects when you get a memory warning, but if those objects still have a positive retain count they will not go away.\nYou are working in a constrained environment, you have to understand the constraints and work within them. It can be a long hard process to track down memory issues, but the tools available today it much easier. Try figuring all that out without instruments! (I have, thankfully I don't have to do that anymore).. Try looking at the retain history of the objects. In normal use, the count goes up and then down to zero when it is released. There is probably a strong reference in there someplace that should be weak or another object that is holding a strong reference that in itself is not being released.\nIs your code objective-c? Are you referencing self within any blocks?. ",
    "wucanqi": "same issue. ",
    "nvduc2910": "I got the same issue. \nLook like when I am loading many WebP at the time then it will be crashed without raised memory warning. Because I see sometimes the memory was taken about 200mb but It crashed immediately without memory warning.\nCould you please check this issue?\n. \n\nThank for your reply, I will check.\nAt the time I must load about ten webp. I think it's really large and take huge memory then it will be crashed without raise memory warning. this is bad so any solution, please. \nCould you take a look this screen?. > > \n\n\n\nCould you take a look this screen?\n\nThis is a designed behavior.\nYou must loading Animated WebP. And maybe your animated webp resolution is too large (260MB, assume RGBA8888, the pixel count is 68,157,440, nearly like a 8255x8255 pixels). It\u2019s really not recommaned to load such an image. It\u2019s better to let your inage server to do a thumb and scale before loading.\nFor that CGBitmapContext RAM usage. The animated webp, must keeping a canvas the same size as plaeceholder (in iOS, it\u2019s the CGContext) to draw frames, it\u2019s WebP standard. Maybe there are no better way to avoid this.\n\nAll Webp I am loading always less 2MB. but the behavior is loading many webp at the time ( about 15 - 20 webp) . The UI like this screen. \nAn example webp: https://storage.googleapis.com/myscoop/scoops/webp/5d5o3jqjsmkshry3ilkcew_320.webp\n\nEven I loaded on iphone xs but it's still crash. \nPlease check. \n. > > the memory was taken about 200mb\n\nThis is the App Process memory. If the other process like Render server process, occupy too much memory, the Jetsam is still be triggered and your App get killed.\nAnd, the memory warning is always dispatched on the main queue, so if you're alloacting large memory in the global queue outside the main queue, your app may already been killed before you receive memory warning... \ud83d\ude25\nYou can using Xcode, to check the Free Memory in memory footprint tabs, but not only about App Process.\nYou can also using Instruments, which have a Allocation template, to check all the memory footprint used by your App. When your app is terminated, you can check all persistent object which occupy the large memory.\n\n\nI follow by your instruction and got crashed. then I see that. . I think the problem here is the memory consume suddenly so it crashed without raise memory warning because I already set limit cache but it still crashes.  . https://storage.googleapis.com/myscoop/scoops/webp/zztnkorims5k6fexsw7q_320.webp\nhttps://storage.googleapis.com/myscoop/scoops/webp/w9yihxxutqsrjzp6drbtfw_320.webp\nhttps://storage.googleapis.com/myscoop/scoops/webp/stcis6rctzcjafckbtfng_320.webp\nhttps://storage.googleapis.com/myscoop/scoops/webp/mtu1mtm0otu3ms44mjg5oty_320.webp\nhttps://storage.googleapis.com/myscoop/scoops/webp/5d5o3jqjsmkshry3ilkcew_320.webp\nI share you some webp that I am loading in my application. some link like that about 15-20 webp load at the time will be crashed. \nPlease check. . Thanks. it works now.. ",
    "Baolv": "I got same issue. When i try load about 10->20 WebP at the same time, my app crashed and show this message: \"Message from debugger: Terminated due to memory issue\". Although memory just 70mb \nBtw: I test on iphone 6 and I config on Appdelagate like this:\nSDImageCache.shared().maxMemoryCost = 1024 * 1024 * 120\n        SDImageCache.shared().config.shouldDecompressImages = false\n        SDWebImageDownloader.shared().shouldDecompressImages = false\n        SDImageCache.shared().config.diskCacheReadingOptions = NSData.ReadingOptions.mappedIfSafe. ",
    "OneSman7": "Yes, I do not use FLAnimatedImageView+WebCache\nIt indeed uses tricky logic that will solve the same problem, but by keeping whole GIF in memory. I prefer more disk operations to large memory footprint in my case.\nYou say that decompress logic will change in 5.x. Can you please tell what will be changed?\nI came to an idea that I can design my own SDWebImageCoder, a subclass of SDWebImageImageIOCoder which can simply check what I need before calling - (nullable UIImage *)decompressedImageWithImage:(nullable UIImage *)image data:(NSData * _Nullable * _Nonnull)data options:(nullable NSDictionary<NSString*, NSObject*>*)optionsDict;.\nWill decoder management logic change in 5.x?. Thank you for your rich explanation!\nI guess I should consider spending some time refactoring when 5.x comes out. I looked through the PR and performance screenshots (against YYImage) look very promising. It would be great to see more performance comparisons against other libs when 5.x is released.\nAs for my current problem, the idea with custom coder worked. I subclassed SDWebImageImageIOCoder and in overridden methods made sure that data is checked for format and GIFs are not going through decompression. Thus UTI parameters stays intact.\nI will be closing this issue since the problem is solved. Thank you again!\n. ",
    "SSDIAshokPathak": "Thanks you for your reply.\nYour information is helped me.. ",
    "Lee827": "Thank you!!!\n\nAnd I have a new question.\nI want to synchronous download images and cache the image to disk, because my project needs download image first, then show the home view.\nSDWebImageManager.shared().diskImageExists(for: imageURL, completion: { (isExist) in\n  guard isExist != true else { return; } \n  SDWebImageDownloader.shared().downloadImage(with: imageURL, options: SDWebImageDownloaderOptions(rawValue: 0), progress: nil, completed: { (image, data, error, finished) in\n    guard let image = image, let data = data else { return; }\n    SDImageCache.shared().store(image, imageData: data, forKey: imageURL.absoluteString, toDisk: true, completion: nil);\n  })\n})\nCheck disk Image Exists first, then download the image. Finally, cache the image to disk.\nLoop this code to download the images.\nHow to synchronous and confirm download all image?\n\nThank you!!!!\n. ",
    "vinayakpal": "@mythodeia i'm currently using SDWebImage (4.3.3) version via pods. i will revert back to you after check in demo project. Thanks for responding\n. @dreampiggy  Yes im using an UIImage which is in my UITableView Cell in an table view.\nhere's the sample of the particular image\ncell.feedImage.sd_setImage(with: URL(string : \"http://res.cloudinary.com/purnesh/image/upload/f_auto/v1520249635/shiv-tikki-wala-final-header-1.png\"), completed: { (image, error, type, url) in\n                        print(String(describing: error?.localizedDescription))\n                        print(String(describing: error.debugDescription))\n                        print(type)\n                        print(url!)\n                        print(image!)\n                    })\nWhere cell.feedImage is he instance of the table view cell image. Other images in my table view are loading correctly well I have issue with previous mention URL as i tested in a demo app as well but with this URL I'm not able to load the image as well.\n. yes, I call for UIImage size in completion block and it starts giving height and width but still it some times returns 0.0 and but again returns original value when cell refreshed. ",
    "webMing": "fast. en ..en . I will make myself as good as you. come on  @dreampiggy . ",
    "wangjufan": "OK . I will do it recently . . It is my pleasure .  I will try my best to do it  in the coming two months . . ",
    "hulizhen": "@dreampiggy @wangjufan I don't think it's appropriate to use dispatch_semaphore for the runningOperations array in SDWebImageManager, since the dispatch_semaphore isn't recursive.\nIn the -[SDWebImageManager cancelAll] method,  each individual operation in runningOperations array is sent a -cancel message. And in the -cancel method, it calls -safelyRemoveOperationFromRunning, which also acquires the same dispatch_semaphore lock. Thus causes a dead lock.\nI've created a PR which uses a pthread_mutex_t lock to do the job.. @dreampiggy I just double-checked the code in SDWebImageManager and updated that PR, thanks :). @hms111111 If you were trying to build the demo, this could be caused by the missing of the FLAnimatedImage & libwebp submodules.\nIn terminal, change your working directory to the root directory of SDWebImage, and enter the following commands:\nbash\ngit submodule init\ngit submodule update\nThen try to build the demo again. Gook luck :). @UZheng This is an expected behavior.\nAs the error description you provided indicates, it's caused by ErrorCancelled. When you set image with SDWebImage, it tries to cancel the previous download task, which is kind of class NSURLSessionTask, before moving on.\nJust for test, try to comment out the [self.dataTask cancel]; line in -[SDWebImageDownloaderOperation cancelInternal], then the -999 errors should gone. Don't forget to uncomment that line when you have got it figured out :). Replace @synchronized lock with dispatch_semaphore lock for SDWebImageCombinedOperation.. Code updated, please check it out :). But it's a bit better and no harm done, right? \ud83d\ude05. It's indeed better :). Wow, That's thoughtful about the @synchronized. I've benefited from it, Thanks :)\nI will revert it.. ",
    "XiaoYiS": "my SDWebImage version is 4.2.2 , \ncode ://\u7f13\u5b58\u6587\u4ef6\u5927\u5c0f\u8bfb\u53d6\n- (NSString *) getFileSize\n{\n    //\u7f13\u5b58\u5927\u5c0f\u8bfb\u53d6\n    CGFloat sizeLength = (CGFloat)[[SDImageCache sharedImageCache] getSize]/1024/1024;\n    if (sizeLength == 0) {\n        return @\"0.0M\";\n    }\n    return [NSString stringWithFormat:@\"%.2f M\",sizeLength];\n}\nin simulator, I can  get sizeLength is not zero, but in my iPhone  6s(device) sizeLength is zero, so I can't make clean memory.\nI update template information   @dreampiggy  @bpoplauschi . @dreampiggy ,   I find folder that you say the path,but I can't find com.hackemist.SDWebImageCache.default, I just find com.hackemist.xxxSDWebImageCache.default, maybe I use the third party led to the conflict SDWebimageCache, what can I do setting ?. \n. @dreampiggy  I just use third party, maybe it swizzle my SDWebImage, I can't revise the third party code. so ,what can I do for clean cache?. @dreampiggy , I try to revise SDImageCache source code , it is clean success. can you give me better advice? . @dreampiggy ,ok  thanks for your patience. ",
    "Cone1989": "iOS display alpha info(BRGA8888/BRGX8888),why choose two 'First' options instead of two 'Last' options?. two 'first' means kCGImageAlphaPremultipliedFirst : kCGImageAlphaNoneSkipFirst;\ntwo 'last' means kCGImageAlphaPremultipliedLast : kCGImageAlphaNoneSkipLast;\nIn the previous version,SDWebImage used kCGBitmapByteOrderDefault|kCGImageAlphaNoneSkipLast;\nI read this 'The most universally used is RGBA format (True colour format) where the Alpha byte is located at the last byte describing the pixel. - kCGImageAlphaPremultipliedLast (32 bits). ' from Stack Overflow,is it wrong?. ",
    "LiuDeng": "@dreampiggy This is really necessary. When i have a lot of large image in local and want to show it in a UICollectionView, then it broken. Hope you can add this support for disk image~\nBest Regards.\nThank you for you great work~. @dreampiggy This really necessary and i think it is better to make the option to work for both for local and network.Thank you~. @dreampiggy Thank you very much~I will try it later and feedback to you~. @dreampiggy I have download your branch and try it. I have a image original size is {1054, 12663} and after sd_decompressedAndScaledDownImageWithImage called the return image size is still {1054, 12663}. So the scale here is not scale the size but reduce the quality\uff1f. @dreampiggy Thank you so much for your replay\uff0c currently i will scale the image in complete block and will replace it after 5.x release. \nBest Regards.\n. ",
    "chiahsien": "Hi @dreampiggy ,\nSay I want to download a hi-res progressive JPEG and want to resize down resolution before displaying it progressively, can SDWebImageProgressiveDownload option work with imageManager:transformDownloadedImage:withURL:?. ",
    "intoxicated": "It's because SDWebImage doesn't have Cartfile to handle dependency for carthage. So when someone install SDWebImage with carthage, SDWebImage produces the framework that contains FLAnimatedImage source files. . > @zhongwuzw\n\n\nThat string define, it's marked as internal usage and may be changed in the future, and the PR for this, it's a bugfix for the 4.2.2 changes. So I think it's no need to create another same string define, to just for the compatible code. Use that it's OK\nRemove unnecessary dispatch_group_enter/leave pair, only apply to GIF data.. This is wrong. Because we always call dispatch_group_enter before setImage, for example, the placeholderImage. If the user provide a placeholderImage with GIF (Bind it one FLAnimatedImage), this change will cause a un-balanced of group enter && leave. So we must always call dispatch_group_leave in the setImageBlock.\n\n\nFor 2. Where can I find you call dispatch_group_enter with a group is corresponding to dispatch_group_leave in FLAniamtedImageView+WebCache.m? \nAll I can see is creating a new group with dispatch_group_createin the beginning of\n- (void)sd_setImageWithURL:(nullable NSURL *)url\n           placeholderImage:(nullable UIImage *)placeholder\n           options:(SDWebImageOptions)options\n          progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n          completed:(nullable SDExternalCompletionBlock)completedBlock {\n ...\n} \nand leave that group, and cannot find dispatch_group_enter with that newly created group.\n. \nnot sure exactly this related to this thread, but seems kinda weird. (Note. group = nil and). ",
    "Bucimis": "Hi @dreampiggy, are there any publicly available timelines for 5.x release?. ",
    "itdongbaojun": "libwebp to 1.0.0. ",
    "IljaDaderko": "@dreampiggy I resolved it by cleaning build folder, must've been something weird there.. @dreampiggy Interesting. Looking at your first example:\nswift\nlet transformer = SDImageResizingTransformer(size: .init(width: 100, height: 100), scaleMode: .aspectFit)\nWe assume width and height of 100. What if dimensions of images are not known beforehand? i.e we only know dimensions after fetching image via prefetch and want to reduce its width by 50% for example?. Ohhhh! This makes so much sense now, thank you! Sorry if this was obvious, I'm coming from react-native project, so my main area lies within JS development, I'm just dipping my toes into Swift now.\nBut I think I grasped what you mean by designed to be customized. This is very powerful.. @dreampiggy I believe completed is not working when using image prefetcher through init() method, code below doesn't print anything.\nswift\n    let prefetcher = SDWebImagePrefetcher.init()\n    prefetcher.prefetchURLs(\n        urls as [URL],\n        progress: nil,\n        completed: { finished, skipped in\n          pring(\"Finished\")\n        }\n      )\nThis implementation works and prints \"Finished\"\nswift\n    SDWebImagePrefetcher.shared.prefetcher.prefetchURLs(\n        urls as [URL],\n        progress: nil,\n        completed: { finished, skipped in\n          onComplete([finished, skipped])\n        }\n      ). That solved it, once again. Thank You :). ",
    "supermanmwg": "thanks a lot. and it only crashed OS>11.2. I will see #2273 soon. thank again.. ",
    "dennisxu1014": "Sorry , SDWebImage Version is 4.3.0.\nThis is a very common problem on our app.\nWhich stable version is recommended\uff1f. ",
    "avershelaecom": "Thank you for getting back to me both of you.  This issue was caused by an issue with Xcode referencing dependencies on another server.  Deleting Xcode and redownloading the most recent version worked for me with 4.3.3.  Thank you again!. ",
    "shenjuneng": "Thanks Dreampiggy. You said right. In pod spec file, add \"s.platform     = :ios, \"9.0\"\", the error is gone.. ",
    "plokijuhhb": "\ud83d\ude00 . ",
    "annjawn": "I think it's a good idea to have .allowUserInteraction set by default because for any transition, developers will put some delay for the transition to be vieweable by the user. That delay will also delay the interaction enablement, which will cause confusing behavior for the user. The more the transition delay the longer the interaction stays disabled, which is kind of unexpected from a user/usability perspective. Having it set to .allowUserInteraction by default and then allowing to disable that as an option would be the proper way to go (unless there is some drawing related issue that might prevent us to do so within the library).. By the way I am going to give it a try setting the sd_imageTransition?.animationOptions with .allowUserInteraction right now.. Yup, it has worked perfectly. But I had to do animationOptions.insert(.allowUserInteraction) at too many places \ud83d\ude0a. ",
    "BeihaoZhang": "I'm wrong, sorry\ud83d\ude22\n\u83b7\u53d6 Outlook for iOShttps://aka.ms/o0ukef\n\nFrom: DreamPiggy notifications@github.com\nSent: Monday, May 7, 2018 6:14:16 PM\nTo: rs/SDWebImage\nCc: BeihaoZhang; Manual\nSubject: Re: [rs/SDWebImage] remove running operation with a already method (#2316)\n@dreampiggy requested changes on this pull request.\n\nIn SDWebImage/SDWebImageManager.mhttps://github.com/rs/SDWebImage/pull/2316#discussion_r186382599:\n\n@@ -140,9 +140,7 @@ - (void)diskImageExistsForURL:(nullable NSURL *)url\n         return operation;\n     }\n\n\n@synchronized (self.runningOperations) {\n[self.runningOperations addObject:operation];\n\n...I think this should be safelyAddOperationToRunning. Not safelyRemoveOperationFromRunning :)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/rs/SDWebImage/pull/2316#pullrequestreview-117947550, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AVnSA-E2ME-bxNdptMconoxXeQe5f9mXks5twB54gaJpZM4Tznmy.\n. ",
    "gukemanbu": "@dreampiggy I was wrong to say hold, From architectural design, @interface and @implementation should put together. With enough memory, I think architecture design should be a priority, not memory\uff0cThat's just my opinion.. OK\uff0cI respect your comment.. @dreampiggy I don't think the original code is good design. The first thing I saw was createCallback code,  while the main logic is in addProgressCallback method, which not conducive to reading.. @dreampiggy I don't think the original code is good design. The first thing I saw was createCallback code, while the main logic is in addProgressCallback method, which not conducive to reading.. @dreampiggy I don't think the original code is good design. The first thing I saw was createCallback code, while the main logic is in addProgressCallback method, which not conducive to reading.. I don't think the original code is good design. The first thing I saw was createCallback code, while the main logic is in addProgressCallback method, which not conducive to reading.. Thank you all!. > @gukemanbu did you see my invitation addressed to you above?\n@bpoplauschi I'm too busy these days to see it in time, Sorry for the late reply, I'd love to become a maintainer.. @bpoplauschi  Thank you very much\uff0cI have accepted the invitation\u3002. ",
    "zbluephoenix": "Version is 4.3.3. ",
    "zfx5130": "how to resove it .thanks. [SDWebImageDownloader.sharedDownloader setValue:@\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8\"\n                                 forHTTPHeaderField:@\"Accept\"];\nresoved ,. ",
    "ngAvaddon": "Hey @dreampiggy, we use Bitrise.io and it spins completely new virtual machine for each build - no need to clean anything. \nIssue is probably related to new build improvements\\optimizations Apple is doing. \nYou can check out linked GitHub project for more details.\nI just wanted to share experience in case you'll have to dig it deeper like I did.  :) . ",
    "Eddiegooo": "Downloaded picture will have a white background frame\u3002 right\uff1f\uff1f@victordengx \n Try to comment out this code UIImageJPEGRepresentation(image, 1). ",
    "master-nevi": "I was able to stress test the downloader from within the SDWebImage demo project (iOS).\nPlease checkout and run this branch from my fork using the iOS simulator:\nhttps://github.com/master-nevi/SDWebImage/tree/download-race-repro\nDiff:\nhttps://github.com/rs/SDWebImage/compare/master...master-nevi:download-race-repro?expand=1\nBasically attempts 1000 downloads of the same URL and there's consistently 1-4 cases where the completion block never returns. Results may vary being a race condition ;)\nWhen running the project, it will print to console all of the instances where the completion block was not called at the end of the test.. Confirmed https://github.com/rs/SDWebImage/pull/2346 appears to fix the issue. Closing this issue. @dreampiggy do you have an approximation for when 4.4.1 would be released?. I\u2019ll try this today. My only concern with this change is that it doesn\u2019t look thread safe. \u2018finished\u2019 is set on the concurrent download queue, and your change checks the value of \u2018finished\u2019 on the serial main queue. \nI haven\u2019t had a lot of time to think about it but my thought was to check if there were any handlers left on the operation from within the operation completion block (\u2018NSOperation.completionBlock\u2019) and if so, call SDWebImageDownloader.addProgressCallback:completedBlock:forURL:createCallback on the main thread. . This is what I was thinking: https://github.com/master-nevi/SDWebImage/commit/d5444a182cc91e13a7cac9db394bbc2ce02bdfcb\nIt requires fine tuning but that's the gist.. Alternatively we could just call the leftover handlers within the NSOperation.completionBlock, since we know it finished. . Your solution would also start another download when the previous operation still exists in memory and therefore there still exists an opportunity to call the handlers.\nSomething like this (non-working pseudo code) maybe?:  https://github.com/master-nevi/SDWebImage/commit/345962ef86637e67ee63c10c6a13697210c25d25. I agree, my solution is not ideal. \nI would just try to confirm that your solution is thread safe, I still believe the race condition will exist since the 'finished' property would be set and retrieved on two different operation queues but I could be wrong. . @dreampiggy I was able to confirm that your fix works when used on my stress test, even with 10,000 downloads. I am getting completions for each one. Thanks for investigating and responding to my comments. Seems like a good fix.. ",
    "d-date": "@dreampiggy  Sorry for my misunderstanding, this is occurred on the latest.. @dreampiggy Yes, I've checked on my iPhoneX and also happened.. This is run on my iPhone X.\n\n. @dreampiggy  5.x branch works well for me!\nSimulator:\n\nPhysical Device (iPhone X): \n\n. @dreampiggy LGTM\ud83d\ude0eI tested on Simulator and my iPhone X and works well! Thank you for your great job!. ",
    "siddheshC": "Hello guys, \nI am facing the same problem. v4.4.1 - Whose version are you talking about?\nWhat should I do to get away from this issue?. ",
    "sbxfc": "work well for me.   :-). ",
    "tjcsr": "@dreampiggy Whether to find a solution\uff1f. ",
    "kyleYang": "I meet this problem.\nThe fabric crash log is that!\n0 | libsystem_malloc.dylib | szone_free + 2944\n1 | libsystem_malloc.dylib | szone_free + 1744\n2 | CoreFoundation | CFRelease + 1088\n3 | CoreFoundation | _CFStringCreateWithFormatAndArgumentsAux2 + 268\n4 | Foundation | -[NSPlaceholderString initWithFormat:locale:arguments:] + 168\n5 | Foundation | +[NSString stringWithFormat:] + 68\n6 | SDWebImage | SDImageCache.m\u00a0line\u00a0186-[SDImageCache cachedFileNameForKey:]\n7 | SDWebImage | SDImageCache.m\u00a0line\u00a0167-[SDImageCache cachePathForKey:inPath:]\n8 | SDWebImage | SDImageCache.m\u00a0line\u00a0172-[SDImageCache defaultCachePathForKey:]\n9 | SDWebImage | SDImageCache.m\u00a0line\u00a0337-[SDImageCache diskImageDataBySearchingAllPathsForKey:]\n10 | SDWebImage | SDImageCache.m\u00a0line\u00a0370-[SDImageCache diskImageForKey:]\n11 | SDWebImage | SDImageCache.m\u00a0line\u00a0412__42-[SDImageCache queryDiskCacheForKey:done:]_block_invoke\n12 | libdispatch.dylib |\nand the line 186\nobjc\n    NSString *filename = [NSString stringWithFormat:@\"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%@\",\n                          r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10],\n                          r[11], r[12], r[13], r[14], r[15], [[key pathExtension] isEqualToString:@\"\"] ? @\"\" : [NSString stringWithFormat:@\".%@\", [key pathExtension]]];. ",
    "lohenyumnam": "can you please give a sample code in swift?. \nThanks for the reply @dreampiggy  , \nall I want is to download the image once then use the image from the cache for as long as I can.\nI don't want to re-download the image again and again.\neven if I set the cache age to 7 days or longer, in my app it lasts for like few hours and then it starts downloading the image again. am I missing something here?\n// Setting disk cache age\nSDImageCache.shared().config.maxCacheAge = 60 * 60 * 24 * 7 // 7 days. ",
    "huanghe810229530": "This situation has led to my APP hundreds of times crash\u3002 crying. I change the option from SDWebImageDownloaderProgressiveDownload to SDWebImageDownloaderLowPriority, so that this bug hasn't appeared.\nWhen I use option SDWebImageDownloaderProgressiveDownload, the picture of the 1 MB or more may cause crash, I don't know why. @bpoplauschi . ",
    "luochaojing": "thanks a lot!. ",
    "paulosaure": "Awesome.\nThank you ! . @dreampiggy \nHello,\nThank you for your answer.\nEnum SDImageCacheExpireType was not available in SDImageCacheConfig.h file, also I moved this enum to SDImageCacheConfig.h and I refactored the enum name to SDImageCacheConfigExpireType.\nIs it good for you ? . Thanks for your feedback :)\nI fixed cacheClearBy property name and I easily understand your opinion. Have you any other suggestion  ? . Awesome.\nThank you very much :D. Hello @dreampiggy,\nDo you know when will be the next release ?. It's better to minimize release number, let's see and wait.\nAccording to PR #2374, do you need any help ?. ",
    "larsacus": "I implemented the above workaround and it does in fact work for the images in question. Since this method affects all image requests in my application, it will require a regression on images. I'm confident this is the better method for image fetching for my application, though.\nAny timeline on 5.0 release date?. ",
    "GaevYuriy": "Hi, maybe some additional info can help to solve this problem. Al first, as it was mentioned by @xiaopeijun, image artifacts appear only, when you kill app several times. As I understand, it downloads image multiple times and  SDWebImage saves it to the local cache, using image compression. However, these artifacts appear only at the moment, when image compression goes So, the first idea was to turn off image decompression by this methods \nswift\nSDWebImageManager.shared().imageDownloader?.shouldDecompressImages = false\nSDWebImageManager.shared().imageCache?.config.shouldDecompressImages = false\nHowever, it didn't help and they again appeared. So, I decided to delete the app and reinstall (as I thought, that I will clean local cache), in the result, all image artifacts have disappeared. However, it is not the full solution, as, in some period of time, they have appeared again.. @dreampiggy No, neither cacheSerializer nor any transformer is specified for image display. I use this method to download it. Also, when I checked the cache type in the response handler, it was the memory. And, when I set refreshCached options the problem has disappeared, however it is not a solution, as SDWebImage redownloads the image and save to cache. @dreampiggy, I'm not sure if I did it correctly, so I will write my steps\n\n\nReproduced bug\n\n\nCheck, image from disk and from memory cache with cacheKey(for URL)\n\n\nlet diskCachedImage = self.imageCache?.imageFromDiskCache(forKey: self.cacheKey(for: url))\nlet memoryCachedImage = self.imageCache?.imageFromMemoryCache(forKey: self.cacheKey(for: url))\nBoth of them were with artifacts.\n\nWhen I called, SDImageCache.shared().clearMemory(), I received disk cache type in response handler and image was still with artifacts. @dreampiggy Now, I can say, that these bugs appear, when SDWebImage saves it to cache. So I did step 1 and 2, but on step 2 I fetched the image from HomeDirectory. To my surprise, it has already had artifacts.\n\nAlso, I didn't mention before, but I have the method DispatchQueue.global().async { self.saveImage(toCache: image, for: url) }, which was added before, as I thought, that we don't save it to cache \ud83d\ude05. But, it made things worse and it let me say, that this bug appears in saving images to cache.\nSo, every time, I download the image, I saved it to cache. But, my mark \u261d\ufe0f, that image was with small artifacts after first downloading, made me think, that this effect has a scalable nature, so the more save to cache, the more artifacts on the image. \nProviding data:\nOriginal\n\nComparison:\n\n\nWill it be correct to remove self.saveImage(toCache: image, for: url)?. ",
    "papanton": "@dreampiggy I disabled the weak memory cache on the didFinish call in Appdelegate but this did not seem to fix the crash. One thing that might be creating problems is that the system memory warning never actually gets triggered. I updated my test project if you want to take a look.. @zhongwuzw Setting the maxMemoryCountLimit actually works, but also limits the cache for regular images. I would prefer if I relied on the actual memory warnings for purge caching instead. If we find no solution I will probably go with your suggestion, too many crashes in production from this.. @zhongwuzw are you using my test project? @dreampiggy have you been able to replicate from the issue? My memory increases to between 500m - 2.x G before the crash with an iPhone X. I just check forcing memory warnings and they work fine. Memory deallocates properly. I think the system for some reason doens't automatically trigger them,. @dreampiggy opened up that endpoint, the project should work now. I apologize for that.. Hey @dreampiggy thanks for all the help, I ended up setting the maxmemory cost and it seems to be performing well. You can close this issue.. ",
    "x2rider": "Hope this explains it.\nThe urls contain the users unique login id to fetch their image from the web api.\n```objective-c\n/* PersonCollectionViewController */\nPersonCollectionViewController : UIViewController\n\n(UICollectionViewCell )collectionView:(UICollectionView )collectionView cellForItemAtIndexPath:(NSIndexPath )indexPath{\n  PersonCell cell=[collectionView dequeueReusableCellWithReuseIdentifier:@\"MyCell\" forIndexPath:indexPath];\n  Person * person = self.people[indexPath.row];\n  [cell.personPhoto loadImageForPerson:person];\n  cell.personName.text=person.FullName;\n  cell.personTitle.text=person.title;\n  return cell;\n}\nobjective-c\n/* UIImageView+LoadPersonImage.m */\n\n-(void) loadImageForPerson:(Person *)person {\nUIImage photoNotAvailableImage = [UIImage imageNamed:@\"PhotoNotAvailable.jpg\"];\n  [self sd_setImageWithURL:person.hiResImageURL\n          placeholderImage:photoNotAvailableImage\n                   options:SDWebImageRefreshCached\n                 completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL imageURL) {\n    if(image != nil){\n      self.image = image;\n      NSLog(@\"Hi Res Image Loaded from '%@'\", imageURL);\n    } else {\n      NSLog(@\"2 Photo Not Available, fetch '%@'\", person.loResImageUrl);\n      [self sd_setImageWithURL:person.loResImageUrl\n              placeholderImage:photoNotAvailableImage\n                       options:SDWebImageRefreshCached\n                     completed:^(UIImage image, NSError error, SDImageCacheType cacheType, NSURL *imageURL) {\n                       if(image != nil) {\n                         NSLog(@\"Lo Res Image Loaded by %ld from '%@'\", (long)cacheType, imageURL);\n                         self.image = image;\n                       } else {\n                         self.image = photoNotAvailableImage;\n                       }\n                     }];\n    }\n  }];\n}\n```. Ok, so are you saying that I should not attempt to assign image if it comes back as status SDImageCacheTypeNone?  Because a refresh of the cache from the downloader would update the image?. I did get it working by setting SDWebImageAvoidAutoSetImage\n// if image not in cache/expired\n[self sd_setImageWithURL:person.hiResImageURL\n    placeholderImage:photoNotAvailableImage\n                      options:SDWebImageAvoidAutoSetImage\n                 completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *hiResImageURL)\n{\n    if(image == nil){\n        [self sd_setImageWithURL:person.loResImageURL\n                placeholderImage:photoNotAvailableImage\n                         options:SDWebImageAvoidAutoSetImage\n                       completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL)\n             {\n                  if(image != nil)\n                  {\n                      NSLog(@\"Lo Res Image Loaded by %ld from '%@'\", (long)cacheType, loResImageURL);\n                      self.image = image;\n                  }\n                  else\n                  {\n                      self.image = photoNotAvailableImage;\n                  }\n             }];\n          });\n      }\n      else\n      {\n          self.image = image;\n          NSLog(@\"Hi Res Image Loaded from '%@'\", hiResImageURL);\n      }\n}. ",
    "ypaulovich": "@halilyuce add to prepareForReuse()\nself.yazarAvatar.sd_cancelCurrentImageLoad()\nor digg into your code for any other mistakes. ",
    "halilyuce": "thanks for replies guys, I changed wordpress api for images and its working now without any changes :) Maybe you know wordpress does not give you post image url directly, its giving image id and you must to call second api for get image url so its problem for this. I installed \"Better REST API Featured Images\" plugin for solve it and its workin well. Thanks for your effort for this amazing pod, best regards :). ",
    "yunjinghui123": "I turned on the image hard-coder to play the gif in the UIImageView, which seems to be because by this reason.i don't want to use the FLAnimatedImage frameworks,because it will replace UIImageView in project. Thank you very much, I will take your suggestions to optimize the code.. ",
    "ericeddy": "Even easier way to reproduce it is, \nI select a JPG from my Photo library & load it into an image view, then I select a gif from my photo library and load it into the same image view, the displayed Gif is rotated.. Here's a test repo link:\nhttps://github.com/ericeddy/FLAnimatedImage-RotationIssue\nI've noticed that using just any jpg doesn't cause it, like random jpgs from the internet cause it to occur sporadically,\nBut using images taken with the phone's camera will cause it 100% of the time, and using a landscape photo vs using a portrait photo will add an extra 90 degrees to the rotation. Thank you for such a thought out and fast response!\nI think for the meantime I'm going to go ahead with your suggestion and use 5.0.0-beta, I tried out how it works in the demo and it seems to be working well, \nAgain, Thank you for all this work, I really appreciate it!. ",
    "ghostfeng": "@mythodeia Thank you for your reply,I have completed the issues info and provide the sample url.I had an urge to solve the problem\uff0cThanks~. @dreampiggy This image can be open by the browser, I use SDWebImage to load image on iOS,now it can not show correctly, What should I do to load this image ? Any other settings should be set?. @zhongwuzw  this is a demo:   https://git.coding.net/LiuYongfeng/SDWebImageDemo.git. ",
    "desperadocarl": "@zhongwuzw  Yes ,it is actually a problem and works like you said.\n@dreampiggy  You can try use a new demo.\nobjc\n [[SDWebImageDownloader sharedDownloader] setValue:@\"iPhone\" forHTTPHeaderField:@\"User-Agent\"];\nwe can use above  to solve the problem\uff0cYYImage have the same problem\uff0cbut  I don't know the deep reason . ",
    "SamboVisal": "Thank for your reply. I will try to fix this. But i have another question, when images are loading and i have seen some images are in not correct order and some images are duplicate in different cells. But after, images are loaded successfully then all images are in correct order. I wonder why?. Thank for your reply! \nIf you don't mind, could you share me a sample code with createNewSessionWithConfiguration. Because i am quite familiar with that part.\nYes, i will not provide .retryFailed and .continueInBackground when i use .fromCacheOnly\nThank you.\n. Thank you. \nwaitsForConnectivity is available of iOS 11 only.\nWhat about iOS below 11 like iOS 10 or something. What should i do sir?. Thank you for your explanation. I appreciate it.. Hello @kinarob. I just figured it out that my image format is WebP . Now i just added pod SDWebImage/WebP in my project and i run my app and it works perfectly. Thank you..\nI am closing issue now..... ",
    "fschaus": "Hi guys,\nI am having a very similar issue (using GIFs with v5.0 Beta 2) but can't get hold of the of the shouldDecompress method/ variable in Swift (went through the doc but couldn't find it)... \nDo you mind letting me know how to set off the decompression in Swift? I'll try to see if this works before opening a new issues (if necessary).\nThanks!\nFrancois . Thanks for the input, I should have looked in the migration guide. \nSo I profiled a bunch of tests on my app to get to the bottom of this and see really weird behavior. See the link below for the details:\n\u2022 My debug version runs as expected - once loaded my app allocates ~70Mb in memory (which is in line with what I saw previously when I was using KF). After a bit of usage (message loading + images) it goes up to 120-13Mb, rarely above (maxCache works) and flushes itself once the app enters background.\n\u2022 My release/ prod scheme however shots straight to 160Mb at load, quickly goes to 300Mb (or more if I keep loading but then more often than not crashes) which doesn't respect my cache limit. If I don't turn off decoding the memory doesn't get flushed once the app enters the background (it decoding is off but still retains more than expected at 120-140Mb vs. 20-30Mb w/ my debug scheme).\n\u2022 I use 5.0 beta 2, with a mix of fixed images and gifs (the initial loading screens only have fixed images). I also tested with UIImageView and AnimatedImgView but that makes no difference\n\u2022 I also used Kingfisher to compare and its behavior with my prod release was similar to SDWI with my debug scheme. In all cases I use the \"default\" manager settings (except decode that I toggle on/ off for one of my use case).\nMy detailed tests are here: https://drive.google.com/open?id=1HIRHttQYn1NIJr0Omb9BG2FLOeWa8E_9\nI am not deep enough in this library nor in iOS image frameworks to understand how they differ between the debug and the release scheme but I feel like the culprit is likely there (given the vastly different behavior observed).\nI really like SDWebImg as it is the only library with a strong gif manager which allows me to have a single cache/ image processor for PGN & Gifs (I had a weird convoluted kingfisher + FLAnimatedImg setup before) and like how more flexbile SDWebImg is (e.g., add fade, progress bar, etc.) so really hope we can get to the bottom of this together J \nThanks!\nFrancois. Thanks for the quick reply dream piggy! \n\u2022 My test were run with v 5.0.0 and used SDAnimatedImageView. As you can see however it doesn't seem to be the culprit (as the performance was the same whether I used SDAnimatedImgView or UIImageView)\n\u2022 Yes, they are run on a physical iPhone X. None of them were performed on the simulator.\n\u2022 Let me give it a try tomorrow as it takes a bit of time (since I run my test on an actual project for consistency and will need to swap things around). \nThanks for your help!!\nFrancois. Fixed! Well done and thanks for that!\nThe memory usage now kicks in at 50Mb or so and gradually/ slowly increases as more pictures get displayed/ cached. Bringing the app to the background nicely flushes everything. I tried with both UIImage and SDAnimatedImage and both give me the right profile.\nThe only thing that continues to go above my cache limit (100Mb) is when I display GIFs - it easily brings the memory to 200-300Mb but I suspect that's the decoding vs. the cache. \nGreat job!\nFrancois. The new commit fixed the issue! I didn\u2019t make any other changes - just used the new commit and the default settings.\nThanks again!. ",
    "rushilMethsof": "you can close this issue if you like, just wanted to help if someone else is facing a similar problem\nI used postman to initially get image using the URL \"/path/to/image/{id}\", it returns the image as expected.The http response and content-type were correct. however the same did not work with SDWebImage\nAfter appending a filename and modifying the route , it worked on SDWebImage.\nI am using the latest version of SDWebImage, IOS 11.3 \nThis is great library, thanks for your continuous effort improving it. . because of the nature of the project, I will not be able to post the actual URL here.\nI may have to create a dummy local server and allow access to it from my home laptop.\nthat might take some time  . ",
    "oceanfive": "Sorry, I forgot. It works.\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\n[[[SDImageCache sharedImageCache] config] setShouldDecompressImages:NO];\nI use  autoreleasepool to release autorelease objects like #2474, it can reduce the frequency of this problem.\n. ",
    "ToLengSon": "Sorry, i'm mistake, my company's server is bad. now, i will close the issue.. ",
    "mthole": "I solved this for myself by removing a separate pod 'libwebp' in my Podfile, which wasn't necessary anyway. If you run into this issue, try that!. ",
    "turkeyaa": "Yeat\uff0cIt's strange, but it's not the APP, it's the service problem.. ",
    "yjh1313": "@bpoplauschi The Travis CI build failed, I confused about some unit tests ,like  testFLAnimatedImageViewSetImageWithURL, expected: not nil/null, got: nil/null .. @bpoplauschi yeah\uff0cThe tests run normally.. yeah thx mention @dreampiggy . ",
    "bradmuzza": "Not not initially , but then I set these property in my app delegate see of it would fix the issues ,however, it didn't so I have since removed . also updated the post  with the categories I understand\n. ",
    "mallikarjuna-skyhigh": "this is minku with pull review comment. ",
    "daydayfree": "@dreampiggy Thank you for your reply.\nWhen I use UIImageView display a local gif image which size is 40 * 40.\nExample:\n```\nUIImageView imageView = [[UIImageView alloc] init];\nNSData data = [NSData dataWithContentsOfFile:@\"/path/to/gif\"];\nimageView.image = [UIImage sd_animatedGIFWithData:data];\nimageView.frame = CGRectMake(0, 0, 20, 20);\nUIBarButtonItem *item = [[UIBarButtonItem alloc] initWithCustomView:imageView];\n```\nimageView's size will changed to 40 * 40.\nIt's correct when using FLAnimatedImageView. I think this has nothing to do with SDWebImage. So I closed the issue.. @dreampiggy Yes. But it's worked fine with 4.2.2. Maybe the navigationBar draw UIBarButtonItem custom view by image's scale.. ",
    "cuiyu8580": "\u55ef\uff0c\u6211\u8c03\u8bd5\u786e\u5b9e\u6ca1\u6709\u95ee\u9898\uff0c\u5c31\u662f\u7ebf\u4e0a\u7684\u5d29\u4e86\u3002\u6211\u67e5\u770b\u4e86\u4e00\u4e0b\u5c31\u662furl\u7ed9\u7a7a\u4e86\uff0c\u8c03\u8bd5\u7684\u65f6\u5019\u80fd\u6b63\u786e\u663e\u793aplaceholderImage. ",
    "edenman": "This happens even if I set the .retryFailed option :(. 5.0.0-beta2 does seem to fix the issue.  Is it ready for production usage?\nThe 4.4.2 version has this in the logs, I wonder if it's related:\nSDWebImagePrefetcherCompletionBug[10406:3581742] Cannot start load of Task <7801FA63-D619-411A-A3CC-E05EC0CE3448>.<2> since it does not conform to ATS policy\n2018-08-28 12:37:22.679380-0700 SDWebImagePrefetcherCompletionBug[10406:3581747] Task <7801FA63-D619-411A-A3CC-E05EC0CE3448>.<2> finished with error - code: -1022. I've pushed a commit that changes my sample app to an https url.  the new error code is indeed -1003, but the callbacks are still not firing the second time.. Gotcha.  I couldn't find anywhere else that explains the \"don't use SDWebImagePrefetcher.shared() on 4.x\" thing.  Might be worth marking it deprecated or something?  Or adding it to the docs?  Maybe not worth it bc 5.x is happening soon enough, though.  Up to yall.. ",
    "anks62": "@bpoplauschi Sorry Apologize No issue from SDWebImage. sorry raise issue against your great job.\nI close my issue\nplease give me a your email id. I request you.\n . @bpoplauschi\nThanks for your co - operation.\nI am successfully fired notification to watch app using watchkit app\nif watch app has many notifications. How can we identify that user click on specific on watch app.\nMeans I want to get data of specific notification that is clicked by user.  \nif you need i can share my code demo link\n. @bpoplauschi \nno its not related SDWebImage.\nPlease share your view about my question\n. ",
    "SuperMarioBean": "@dreampiggy thanks for reply~. ",
    "Marwan88": "Thank you @dreampiggy i filled the template\ni didn't set any configuration, \ni'm use default UIImageview\nsample code:\n```swift\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cell = tableView.dequeueReusableCell(withIdentifier: \"RecommendProductCell\", for: indexPath) as! RecommendProductCell          \n    let object = products[indexPath.row]\n    cell.setproduct(pro :object )\n    \u2028\u2028return cell\n}\n// cell code\nfunc setproduct(prod : ProductModel) {\n    let url1 =  URL.init(string :\"(prod.url)?w=140&h=(140)anchor=middlecenter&mode=crop\" )\n    self.productImage.sd_setImage(with: url1,\n                                  placeholderImage:Helper.sharedInstance.getPlaceholderImg())\n}\n```  . ",
    "pandapancake": "I think you might did something wrong? Mine code is working.\n`cell.newsImageView.sd_setImage(with: URL(string: newsArticles[indexPath.row].thumbnail ?? \"\"), placeholderImage: UIImage(named: \"\"))\n\n    cell.newsImageView.layer.cornerRadius = 10\n    cell.newsImageView.layer.masksToBounds = true`\n\n\n. ",
    "yidongAndOther": "```obj-c\n/\n * This file is part of the SDWebImage package.\n * (c) Olivier Poitrey rs@dailymotion.com\n\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport \"SDWebImageImageIOCoder.h\"\nimport \"SDWebImageCoderHelper.h\"\nimport \"NSImage+WebCache.h\"\nimport \nimport \"NSData+ImageContentType.h\"\nimport \"UIImage+MultiFormat.h\"\nif SD_UIKIT || SD_WATCH\nstatic const size_t kBytesPerPixel = 4;\nstatic const size_t kBitsPerComponent = 8;\n/\n * Defines the maximum size in MB of the decoded image when the flag SDWebImageScaleDownLargeImages is set\n * Suggested value for iPad1 and iPhone 3GS: 60.\n * Suggested value for iPad2 and iPhone 4: 120.\n * Suggested value for iPhone 3G and iPod 2 and earlier devices: 30.\n /\nstatic const CGFloat kDestImageSizeMB = 60.0f;\n/\n * Defines the maximum size in MB of a tile used to decode image when the flag SDWebImageScaleDownLargeImages is set\n * Suggested value for iPad1 and iPhone 3GS: 20.\n * Suggested value for iPad2 and iPhone 4: 40.\n * Suggested value for iPhone 3G and iPod 2 and earlier devices: 10.\n /\nstatic const CGFloat kSourceImageTileSizeMB = 20.0f;\nstatic const CGFloat kBytesPerMB = 1024.0f * 1024.0f;\nstatic const CGFloat kPixelsPerMB = kBytesPerMB / kBytesPerPixel;\nstatic const CGFloat kDestTotalPixels = kDestImageSizeMB * kPixelsPerMB;\nstatic const CGFloat kTileTotalPixels = kSourceImageTileSizeMB * kPixelsPerMB;\nstatic const CGFloat kDestSeemOverlap = 2.0f;   // the numbers of pixels to overlap the seems where tiles meet.\nendif\n@implementation SDWebImageImageIOCoder {\n        size_t _width, _height;\nif SD_UIKIT || SD_WATCH\n    UIImageOrientation _orientation;\n\nendif\n    CGImageSourceRef _imageSource;\n\n}\n\n\n(void)dealloc {\n@synchronized(self){\n    if (_imageSource) {\n        CFRelease(_imageSource);\n        _imageSource = NULL;\n    }\n}\n}\n\n\n(instancetype)sharedCoder {\n    static SDWebImageImageIOCoder *coder;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        coder = [[SDWebImageImageIOCoder alloc] init];\n    });\n    return coder;\n}\n\n\npragma mark - Decode\n\n\n(BOOL)canDecodeFromData:(nullable NSData *)data {\n    switch ([NSData sd_imageFormatForImageData:data]) {\n        case SDImageFormatWebP:\n            // Do not support WebP decoding\n            return NO;\n        case SDImageFormatHEIC:\n            // Check HEIC decoding compatibility\n            return [[self class] canDecodeFromHEICFormat];\n        default:\n            return YES;\n    }\n}\n\n\n(BOOL)canIncrementallyDecodeFromData:(NSData *)data {\n    switch ([NSData sd_imageFormatForImageData:data]) {\n        case SDImageFormatWebP:\n            // Do not support WebP progressive decoding\n            return NO;\n        case SDImageFormatHEIC:\n            // Check HEIC decoding compatibility\n            return [[self class] canDecodeFromHEICFormat];\n        default:\n            return YES;\n    }\n}\n\n\n(UIImage )decodedImageWithData:(NSData )data {\n    if (!data) {\n        return nil;\n    }\nUIImage *image = [[UIImage alloc] initWithData:data];\nimage.sd_imageFormat = [NSData sd_imageFormatForImageData:data];\nreturn image;\n}\n\n\n(UIImage )incrementallyDecodedImageWithData:(NSData )data finished:(BOOL)finished {\n    if (!_imageSource) {\n        _imageSource = CGImageSourceCreateIncremental(NULL);\n    }\n    UIImage *image;\n// The following code is from http://www.cocoaintheshell.com/2011/05/progressive-images-download-imageio/\n// Thanks to the author @Nyx0uf\n// Update the data source, we must pass ALL the data, not just the new bytes\nCGImageSourceUpdateData(_imageSource, (__bridge CFDataRef)data, finished);\nif (_width + _height == 0) {\n    CFDictionaryRef properties = CGImageSourceCopyPropertiesAtIndex(_imageSource, 0, NULL);\n    if (properties) {\n        NSInteger orientationValue = 1;\n        CFTypeRef val = CFDictionaryGetValue(properties, kCGImagePropertyPixelHeight);\n        if (val) CFNumberGetValue(val, kCFNumberLongType, &_height);\n        val = CFDictionaryGetValue(properties, kCGImagePropertyPixelWidth);\n        if (val) CFNumberGetValue(val, kCFNumberLongType, &_width);\n        val = CFDictionaryGetValue(properties, kCGImagePropertyOrientation);\n        if (val) CFNumberGetValue(val, kCFNumberNSIntegerType, &orientationValue);\n        @synchronized(self){\n        CFRelease(properties);\n    }\n\n    // When we draw to Core Graphics, we lose orientation information,\n    // which means the image below born of initWithCGIImage will be\n    // oriented incorrectly sometimes. (Unlike the image born of initWithData\n    // in didCompleteWithError.) So save it here and pass it on later.\n\nif SD_UIKIT || SD_WATCH\n    _orientation = [SDWebImageCoderHelper imageOrientationFromEXIFOrientation:orientationValue];\n\nendif\n}\n\n}\nif (_width + _height > 0) {\n    // Create the image\n    CGImageRef partialImageRef = CGImageSourceCreateImageAtIndex(_imageSource, 0, NULL);\nif (partialImageRef) {\n\nif SD_UIKIT || SD_WATCH\n    image = [[UIImage alloc] initWithCGImage:partialImageRef scale:1 orientation:_orientation];\n\nelif SD_MAC\n    image = [[UIImage alloc] initWithCGImage:partialImageRef size:NSZeroSize];\n\nendif\n    @synchronized(self){\n\n        CGImageRelease(partialImageRef);\n\n    }\n\n    image.sd_imageFormat = [NSData sd_imageFormatForImageData:data];\n}\n\n}\n@synchronized(self){\n    if (finished) {\n\n    if (_imageSource) {\n        CFRelease(_imageSource);\n        _imageSource = NULL;\n    }\n}\n\n}\nreturn image;\n}\n\n\n(UIImage )decompressedImageWithImage:(UIImage )image\n                                   data:(NSData __autoreleasing  _Nullable )data\n                                options:(nullable NSDictionary*)optionsDict {\n\n\nif SD_MAC\nreturn image;\n\nendif\nif SD_UIKIT || SD_WATCH\nBOOL shouldScaleDown = NO;\nif (optionsDict != nil) {\n    NSNumber *scaleDownLargeImagesOption = nil;\n    if ([optionsDict[SDWebImageCoderScaleDownLargeImagesKey] isKindOfClass:[NSNumber class]]) {\n        scaleDownLargeImagesOption = (NSNumber *)optionsDict[SDWebImageCoderScaleDownLargeImagesKey];\n    }\n    if (scaleDownLargeImagesOption != nil) {\n        shouldScaleDown = [scaleDownLargeImagesOption boolValue];\n    }\n}\nif (!shouldScaleDown) {\n    return [self sd_decompressedImageWithImage:image];\n} else {\n    UIImage *scaledDownImage = [self sd_decompressedAndScaledDownImageWithImage:image];\n    if (scaledDownImage && !CGSizeEqualToSize(scaledDownImage.size, image.size)) {\n        // if the image is scaled down, need to modify the data pointer as well\n        SDImageFormat format = [NSData sd_imageFormatForImageData:*data];\n        NSData *imageData = [self encodedDataWithImage:scaledDownImage format:format];\n        if (imageData) {\n            *data = imageData;\n        }\n    }\n    return scaledDownImage;\n}\n\nendif\n}\nif SD_UIKIT || SD_WATCH\n\n\n(nullable UIImage )sd_decompressedImageWithImage:(nullable UIImage )image {\n    if (![[self class] shouldDecodeImage:image]) {\n        return image;\n    }\n// autorelease the bitmap context and all vars to help system to free memory when there are memory warning.\n// on iOS7, do not forget to call [[SDImageCache sharedImageCache] clearMemory];\n@autoreleasepool{\nCGImageRef imageRef = image.CGImage;\n// device color space\nCGColorSpaceRef colorspaceRef = SDCGColorSpaceGetDeviceRGB();\nBOOL hasAlpha = SDCGImageRefContainsAlpha(imageRef);\n// iOS display alpha info (BRGA8888/BGRX8888)\nCGBitmapInfo bitmapInfo = kCGBitmapByteOrder32Host;\nbitmapInfo |= hasAlpha ? kCGImageAlphaPremultipliedFirst : kCGImageAlphaNoneSkipFirst;\n\nsize_t width = CGImageGetWidth(imageRef);\nsize_t height = CGImageGetHeight(imageRef);\n\n// kCGImageAlphaNone is not supported in CGBitmapContextCreate.\n// Since the original image here has no alpha info, use kCGImageAlphaNoneSkipLast\n// to create bitmap graphics contexts without alpha info.\nCGContextRef context = CGBitmapContextCreate(NULL,\n                                             width,\n                                             height,\n                                             kBitsPerComponent,\n                                             0,\n                                             colorspaceRef,\n                                             bitmapInfo);\nif (context == NULL) {\n    return image;\n}\n\n// Draw the image into the context and retrieve the new bitmap image without alpha\nCGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);\nCGImageRef imageRefWithoutAlpha = CGBitmapContextCreateImage(context);\nUIImage *imageWithoutAlpha = [[UIImage alloc] initWithCGImage:imageRefWithoutAlpha scale:image.scale orientation:image.imageOrientation];\n\n @synchronized(self){\n CGContextRelease(context);\n CGImageRelease(imageRefWithoutAlpha);\n }\n\nreturn imageWithoutAlpha;\n\n}\n}\n\n\n(nullable UIImage )sd_decompressedAndScaledDownImageWithImage:(nullable UIImage )image {\n    if (![[self class] shouldDecodeImage:image]) {\n        return image;\n    }\nif (![[self class] shouldScaleDownImage:image]) {\n    return [self sd_decompressedImageWithImage:image];\n}\nCGContextRef destContext;\n// autorelease the bitmap context and all vars to help system to free memory when there are memory warning.\n// on iOS7, do not forget to call [[SDImageCache sharedImageCache] clearMemory];\n@autoreleasepool {\n    CGImageRef sourceImageRef = image.CGImage;\nCGSize sourceResolution = CGSizeZero;\nsourceResolution.width = CGImageGetWidth(sourceImageRef);\nsourceResolution.height = CGImageGetHeight(sourceImageRef);\nfloat sourceTotalPixels = sourceResolution.width * sourceResolution.height;\n// Determine the scale ratio to apply to the input image\n// that results in an output image of the defined size.\n// see kDestImageSizeMB, and how it relates to destTotalPixels.\nfloat imageScale = kDestTotalPixels / sourceTotalPixels;\nCGSize destResolution = CGSizeZero;\ndestResolution.width = (int)(sourceResolution.width*imageScale);\ndestResolution.height = (int)(sourceResolution.height*imageScale);\n\n// device color space\nCGColorSpaceRef colorspaceRef = SDCGColorSpaceGetDeviceRGB();\nBOOL hasAlpha = SDCGImageRefContainsAlpha(sourceImageRef);\n// iOS display alpha info (BGRA8888/BGRX8888)\nCGBitmapInfo bitmapInfo = kCGBitmapByteOrder32Host;\nbitmapInfo |= hasAlpha ? kCGImageAlphaPremultipliedFirst : kCGImageAlphaNoneSkipFirst;\n\n// kCGImageAlphaNone is not supported in CGBitmapContextCreate.\n// Since the original image here has no alpha info, use kCGImageAlphaNoneSkipLast\n// to create bitmap graphics contexts without alpha info.\ndestContext = CGBitmapContextCreate(NULL,\n                                    destResolution.width,\n                                    destResolution.height,\n                                    kBitsPerComponent,\n                                    0,\n                                    colorspaceRef,\n                                    bitmapInfo);\n\nif (destContext == NULL) {\n    return image;\n}\nCGContextSetInterpolationQuality(destContext, kCGInterpolationHigh);\n\n// Now define the size of the rectangle to be used for the\n// incremental blits from the input image to the output image.\n// we use a source tile width equal to the width of the source\n// image due to the way that iOS retrieves image data from disk.\n// iOS must decode an image from disk in full width 'bands', even\n// if current graphics context is clipped to a subrect within that\n// band. Therefore we fully utilize all of the pixel data that results\n// from a decoding opertion by achnoring our tile size to the full\n// width of the input image.\nCGRect sourceTile = CGRectZero;\nsourceTile.size.width = sourceResolution.width;\n// The source tile height is dynamic. Since we specified the size\n// of the source tile in MB, see how many rows of pixels high it\n// can be given the input image width.\nsourceTile.size.height = (int)(kTileTotalPixels / sourceTile.size.width );\nsourceTile.origin.x = 0.0f;\n// The output tile is the same proportions as the input tile, but\n// scaled to image scale.\nCGRect destTile;\ndestTile.size.width = destResolution.width;\ndestTile.size.height = sourceTile.size.height * imageScale;\ndestTile.origin.x = 0.0f;\n// The source seem overlap is proportionate to the destination seem overlap.\n// this is the amount of pixels to overlap each tile as we assemble the ouput image.\nfloat sourceSeemOverlap = (int)((kDestSeemOverlap/destResolution.height)*sourceResolution.height);\nCGImageRef sourceTileImageRef;\n// calculate the number of read/write operations required to assemble the\n// output image.\nint iterations = (int)( sourceResolution.height / sourceTile.size.height );\n// If tile height doesn't divide the image height evenly, add another iteration\n// to account for the remaining pixels.\nint remainder = (int)sourceResolution.height % (int)sourceTile.size.height;\nif(remainder) {\n    iterations++;\n}\n// Add seem overlaps to the tiles, but save the original tile height for y coordinate calculations.\nfloat sourceTileHeightMinusOverlap = sourceTile.size.height;\nsourceTile.size.height += sourceSeemOverlap;\ndestTile.size.height += kDestSeemOverlap;\nfor( int y = 0; y < iterations; ++y ) {\n    @autoreleasepool {\n        sourceTile.origin.y = y * sourceTileHeightMinusOverlap + sourceSeemOverlap;\n        destTile.origin.y = destResolution.height - (( y + 1 ) * sourceTileHeightMinusOverlap * imageScale + kDestSeemOverlap);\n        sourceTileImageRef = CGImageCreateWithImageInRect( sourceImageRef, sourceTile );\n        if( y == iterations - 1 && remainder ) {\n            float dify = destTile.size.height;\n            destTile.size.height = CGImageGetHeight( sourceTileImageRef ) * imageScale;\n            dify -= destTile.size.height;\n            destTile.origin.y += dify;\n        }\n        CGContextDrawImage( destContext, destTile, sourceTileImageRef );\n\n        @synchronized(self){\n\n            CGImageRelease( sourceTileImageRef );\n        }\n    }\n}\n\nCGImageRef destImageRef = CGBitmapContextCreateImage(destContext);\n\n@synchronized(self){\n\n    CGContextRelease(destContext);\n}\n\nif (destImageRef == NULL) {\n    return image;\n}\nUIImage *destImage = [[UIImage alloc] initWithCGImage:destImageRef scale:image.scale orientation:image.imageOrientation];\n@synchronized(self){\n\n    CGImageRelease(destImageRef);\n}\nif (destImage == nil) {\n    return image;\n}\nreturn destImage;\n\n}\n}\nendif\n\n\npragma mark - Encode\n\n\n(BOOL)canEncodeToFormat:(SDImageFormat)format {\n    switch (format) {\n        case SDImageFormatWebP:\n            // Do not support WebP encoding\n            return NO;\n        case SDImageFormatHEIC:\n            // Check HEIC encoding compatibility\n            return [[self class] canEncodeToHEICFormat];\n        default:\n            return YES;\n    }\n}\n\n\n(NSData )encodedDataWithImage:(UIImage )image format:(SDImageFormat)format {\n    if (!image) {\n        return nil;\n    }\nif (format == SDImageFormatUndefined) {\n    BOOL hasAlpha = SDCGImageRefContainsAlpha(image.CGImage);\n    if (hasAlpha) {\n        format = SDImageFormatPNG;\n    } else {\n        format = SDImageFormatJPEG;\n    }\n}\nNSMutableData *imageData = [NSMutableData data];\nCFStringRef imageUTType = [NSData sd_UTTypeFromSDImageFormat:format];\n// Create an image destination.\nCGImageDestinationRef imageDestination = CGImageDestinationCreateWithData((__bridge CFMutableDataRef)imageData, imageUTType, 1, NULL);\nif (!imageDestination) {\n    // Handle failure.\n    return nil;\n}\nNSMutableDictionary *properties = [NSMutableDictionary dictionary];\nif SD_UIKIT || SD_WATCH\nNSInteger exifOrientation = [SDWebImageCoderHelper exifOrientationFromImageOrientation:image.imageOrientation];\n[properties setValue:@(exifOrientation) forKey:(__bridge NSString *)kCGImagePropertyOrientation];\nendif\n// Add your image to the destination.\nCGImageDestinationAddImage(imageDestination, image.CGImage, (__bridge CFDictionaryRef)properties);\n// Finalize the destination.\nif (CGImageDestinationFinalize(imageDestination) == NO) {\n    // Handle failure.\n    imageData = nil;\n}\n@synchronized(self){\nCFRelease(imageDestination);\n\n}\nreturn [imageData copy];\n}\n\n\npragma mark - Helper\n\n\n(BOOL)shouldDecodeImage:(nullable UIImage *)image {\n    // Prevent \"CGBitmapContextCreateImage: invalid context 0x0\" error\n    if (image == nil) {\n        return NO;\n    }\n// do not decode animated images\nif (image.images != nil) {\n    return NO;\n}\nreturn YES;\n}\n\n\n(BOOL)canDecodeFromHEICFormat {\n    static BOOL canDecode = NO;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n\n\npragma clang diagnostic push\npragma clang diagnostic ignored \"-Wunguarded-availability\"\nif TARGET_OS_SIMULATOR || SD_WATCH\n    canDecode = NO;\n\nelif SD_MAC\n    NSProcessInfo *processInfo = [NSProcessInfo processInfo];\n    if ([processInfo respondsToSelector:@selector(operatingSystemVersion)]) {\n        // macOS 10.13+\n        canDecode = processInfo.operatingSystemVersion.minorVersion >= 13;\n    } else {\n        canDecode = NO;\n    }\n\nelif SD_UIKIT\n    NSProcessInfo *processInfo = [NSProcessInfo processInfo];\n    if ([processInfo respondsToSelector:@selector(operatingSystemVersion)]) {\n        // iOS 11+ && tvOS 11+\n        canDecode = processInfo.operatingSystemVersion.majorVersion >= 11;\n    } else {\n        canDecode = NO;\n    }\n\nendif\npragma clang diagnostic pop\n});\nreturn canDecode;\n\n}\n\n(BOOL)canEncodeToHEICFormat {\n    static BOOL canEncode = NO;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        NSMutableData *imageData = [NSMutableData data];\n        CFStringRef imageUTType = [NSData sd_UTTypeFromSDImageFormat:SDImageFormatHEIC];// Create an image destination.\nCGImageDestinationRef imageDestination = CGImageDestinationCreateWithData((__bridge CFMutableDataRef)imageData, imageUTType, 1, NULL);\nif (!imageDestination) {\n    // Can't encode to HEIC\n    canEncode = NO;\n} else {\n    // Can encode to HEIC\n     @synchronized(self){\n       CFRelease(imageDestination);\n     }\n    canEncode = YES;\n}\n\n});\nreturn canEncode;\n}\n\n\nif SD_UIKIT || SD_WATCH\n\n\n(BOOL)shouldScaleDownImage:(nonnull UIImage *)image {\n    BOOL shouldScaleDown = YES;\nCGImageRef sourceImageRef = image.CGImage;\nCGSize sourceResolution = CGSizeZero;\nsourceResolution.width = CGImageGetWidth(sourceImageRef);\nsourceResolution.height = CGImageGetHeight(sourceImageRef);\nfloat sourceTotalPixels = sourceResolution.width * sourceResolution.height;\nfloat imageScale = kDestTotalPixels / sourceTotalPixels;\nif (imageScale < 1) {\n    shouldScaleDown = YES;\n} else {\n    shouldScaleDown = NO;\n}\nreturn shouldScaleDown;\n}\nendif\n\n\n@end\n. You need to addobjc\n@synchronized(self){\n    CFRelease ();\n}\n```\nin the CFRelease space\nAvoid premature release of objects when multiple threads are invoked. ",
    "JKjiangnan": "@zhongwuzw Thanks for your translation. @dreampiggy Yes, except for these logs, everything else can be used normally, but before iOS12, there would be no such logs.\nAnd I will try your suggestion, thanks.. @bpoplauschi Sorry, I will describe it in English next time.  -_-. ",
    "shoaibnomani": "\n@shoaibnomani - yes. See #2494 - not merged yet.\n\nThank you for the quick response. . ",
    "goyalsaurabh1988": "is the library updated ?  As I am still facing the issue in iOS 12 and xcode 10 . Please help !!. ",
    "ZNBmm": "When I used SDWebImage to load images, I found that the images couldn't be loaded. \n- This is the link to the images:\n https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=106923273548799&height=50&width=50&ext=1540115123&hash=AeSK9xhuO4DiFfHW\nBut This link can be downloaded in Safari.\nThen I used the method to see the error message\n```\n[[SDWebImageDownloader sharedDownloader] downloadImageWithURL:[NSURL URLWithString:@\"https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=106923273548799&height=50&width=50&ext=1540115123&hash=AeSK9xhuO4DiFfHW\"] options:SDWebImageDownloaderAllowInvalidSSLCertificates progress:^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {\n} completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, BOOL finished) {\n\n}];\n\nWrong information:\nError Domain=kCFErrorDomainCFNetwork Code=310 \"(null)\" UserInfo={_NSURLErrorFailingURLSessionTaskErrorKey=LocalDataTask <68D6BE96-B0D2-4855-97A7-AE5B4170D2BF>.<1>, _kCFStreamErrorDomainKey=4, _NSURLErrorRelatedURLSessionTaskErrorKey=(\n    \"LocalDataTask <68D6BE96-B0D2-4855-97A7-AE5B4170D2BF>.<1>\"\n), _kCFStreamErrorCodeKey=-2096}\n```. ",
    "dreamahui": "\u8bf7\u95ee\u600e\u4e48\u89e3\u51b3. ",
    "puhahalx": "\nCheck Using cache key filter. You can provide a custom logc to generate the cache key for URLs\n\nThank you for your prompt and effective reply. https://ohappcore-stable.sh1a.qingstor.com/mr/U2018020814264699800000305/a679a4be1b234ec68d36208fbbb7f341.jpg?access_key_id=XPFSZGJKGAGBAPNQRSDY&expires=1544581519&signature=x16cMunV3iFfHMsS2GCFGAOEyRlwfQe2d3Lj84wn70o%3D\nI have set the query string of the image to ignore. The image url is successful when opened in the browser, which should not be the server url problem, and the problem is accidental when I browse through the album and select the photos\n. But all I have to do is call the tableview's reloadData method again, and the image will load successfully. By the way, for the reused collectionviewcell, I want to do something to the cell after the imageview in the cell loads the image, and whether that makes sense in the complete block of the asynchronous callback\n\n. So what caused this accidental loading of the image to fail, and as long as I don't trigger the reloaddata method, the image will always show placeholder images.\n\n. @kinarob do you have any idea about the phenomenon?. @dreampiggy \u6211\u6309\u4f60\u7684\u65b9\u6cd5\u4fee\u6539\u597d\u50cf\u8fd8\u662f\u4f1a\u5b58\u5728\u6211\u4e4b\u524d\u7684\u95ee\u9898.\u4f46\u662f\u6211\u53d1\u73b0\u4e00\u4e2a\u73b0\u8c61,\u5c31\u662f\u6211\u5237\u65b0\u9875\u9762\u7684\u65b9\u6cd5\u5728\u6d4f\u89c8\u76f8\u518c\u9009\u62e9\u5b8c\u56fe\u7247\u70b9\u51fb\u786e\u5b9a\u4e4b\u540e\u89e6\u53d1\u7684,\u4e5f\u5c31\u662f\u9875\u9762\u5728\u5f00\u59cb\u52a0\u8f7d\u56fe\u7247\u7684\u52a8\u4f5c\u662f\u5728\u9875\u9762\u8fd8\u88ab\u76f8\u518c\u9875\u9762\u6321\u4f4f\u7684\u65f6\u5019,\u5728\u6253\u65ad\u70b9\u8c03\u8bd5\u7684\u65f6\u5019\u6211\u53d1\u73b0\u9875\u9762\u8fdb\u5165\u4e86\u52a0\u8f7d\u56fe\u7247\u7684\u52a8\u4f5c,\u4f46\u662f\u6ca1\u8fdb\u5165compeleted block.\u5f53\u6211\u8bbe\u7f6e\u5237\u65b0\u9875\u9762\u7684\u65b9\u6cd5\u662f\u4e00\u79d2\u540e\u6267\u884c,\u4e5f\u5c31\u662f\u9009\u5b8c\u7167\u7247\u76f8\u518c\u9875\u9762\u6d88\u5931,\u6211\u7684\u9700\u8981\u52a0\u8f7d\u56fe\u7247\u7684\u9875\u9762\u5b8c\u5168\u51fa\u73b0\u540e\u5f00\u59cb\u52a0\u8f7d\u56fe\u7247,\u8fd9\u65f6\u5019\u5c31\u4e0d\u4f1a\u51fa\u73b0\u90a3\u8fdb\u5165\u4e0d\u4e86complete block\u7684\u73b0\u8c61.\n\u4e0b\u9762\u662f\u6211\u6ca1\u8bbe\u7f6e\u5ef6\u8fdf\u6267\u884c\u7684\u8c03\u8bd5\u73b0\u8c61:\n1.\u6211\u6539\u7248\u4e4b\u540e\u7684\u4ee3\u7801,\u56fe\u7247\u4e0b\u8f7d\u5b8c\u6210\u540e\u5237\u65b0\u6570\u636e\u6e90,\u518d\u5237\u65b0\u89c6\u56fe,\u89c6\u56fe\u6839\u636e\u6570\u636e\u6e90\u6e32\u67d3\n\n2.\u6211\u5728\u76f8\u518c\u9009\u5b8c\u56fe\u7247\u4e4b\u540e \u63a7\u5236\u53f0\u6253\u5370\u7684\u4ee3\u7801 \n\n\n3.\u6211\u9875\u9762\u4e00\u76f4\u5c55\u793a\u9ed8\u8ba4\u56fe\u7247,\u5373\u56e0\u4e3a\u6ca1\u6709\u8fdb\u5165\u8fc7complete block\n\n. ",
    "CocoaML": "@bpoplauschi Thanks for your quick reply. And I  I have added the issue info.  I set local Image and enable  FaceAware code, The memory is Fine, but when I use SDWebImage to load net Image, the memory is growing.  and I try to set the code.\nobjc\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\n[[[SDImageCache sharedImageCache] config] setShouldDecompressImages:NO];\nbut it does not work. and I think what cause A circular reference Or Something not destruction.\nThanks for your quick reply.\n. > @CocoaML what do you mean by\n\n\nI try to set the code. but it does not work.\n\nWhat doesn't work? Doesn't compile? Doesn't run? The issue still happens with this code?\n\nSorry , I mean I use the code: \nobjc\n[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];\n[[[SDImageCache sharedImageCache] config] setShouldDecompressImages:NO];\nand the memory also grows , not reduce my memory issue.. > @dreampiggy  Hi.\nThanks, Now I have a try.. @dreampiggy @bpoplauschi Hi.\nAbout The memory issue, I did a demo, link is Here,   \nhttps://github.com/CocoaML/SDWebImageAndFaceAwareDemo \nThe memory report shows memory used so high.\nWhat can do to reduce memory ?. ",
    "tanghaiyang1992": "Images in webp format cannot be loaded properly on devices in iOS12 system.. ",
    "chittelalavanya18": "When i load 100 or more images in tableview using SDWebImage getting Message from debugger: Terminated due to memory issue, and after app is crashing.. Could you plz provide how to handle memory issue when ever I loaded more images in tableview scrolling time app crash. it's showing very hight in Energy Impact, How to handle energy impact is low. \n. I am using DecompressImage in sdwebimage , its getting high memory impact.\nHow to reduce low memory impact.. ",
    "grimmdaniel": "I have encountered the same issue (it crashes instantly, with \"Message from debugger: Terminated due to memory issue\"), but for me, the problem only occurred when I used in the options this: options: [.progressiveDownload]. Without this, it's working normally.. > @zhongwuzw  of course :)\n\nPlatform Name:    iOS\nPlatform Version: 10.3 and above\nSDWebImage Version:   4.0\nIntegration Method:   cocoapods\nXcode Version:    latest Xcode 10.0 (10A255)\nRepro rate:   all the time (100%)\nRepro with our demo prj:  haven't tested with demo project\nDemo project link:    e.g. link to a demo project that highlights the issue\n. \n",
    "purepure": "In my case when I download a large image, it consume so much memory, much larger than the actual image\nThis is the screenshot for memory usage. Whenever it download an Image, it increasing to ~500mb. my (actual)image used around 3MB\nscreenshot. ",
    "lhnoah": "\n@lhnoah thanks for your contribution. I see you are interested in this project (you also created #2519).\nWe would like to invite you to become a maintainer \u2013 no pressure to accept! At this point we are only a handful of people doing this in our spare time.\nI am working on writing down the expectations from contributors, but basically we want contributors to provide ideas, keep the ship shipping and to take some of the load from others. It is non-obligatory; we\u2019re here to get things done in an enjoyable way.\nPitch in with what seems comfortable: comment on open issues/PRs, triage, improve documentation, write your own PRs.\nLet us know.\nQuote from Moya Contributing guider.\n\nOK! I am glad to be a maintainer.. ",
    "zhongguoming": "yes, this is line.i try to understand deadlock occur. but ignor the disaptch_semaphore_wait.\nThank you!\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"DreamPiggy\"notifications@github.com;\n\u53d1\u9001\u65f6\u95f4: 2018\u5e7410\u670831\u65e5(\u661f\u671f\u4e09) \u4e0b\u53485:21\n\u6536\u4ef6\u4eba: \"SDWebImage/SDWebImage\"SDWebImage@noreply.github.com;\n\u6284\u9001: \"\u5d14\u5fd7\u4f1f\"2213139162@qq.com; \"State change\"state_change@noreply.github.com; \n\u4e3b\u9898: Re: [SDWebImage/SDWebImage] addOperation:` \u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b7b\u9501\uff1f (#2521)\nYou mean this line ? https://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/SDWebImageDownloader.m#L307\nJust as the comment shows, we use a GCD semaphore disaptch_semaphore_wait at the beginning of that function call, and we also use disaptch_semaphore_wait inside the operation.compltionBlock.\nIf Apple call your operation.compltionBlock after you call NSOperationQueue.addOperatation in synchronously, what will happen ?  There may be two serail call to disaptch_semaphore_wait, and so that the semaphore count will +2. But each of them waiting for another to release the lock. This cause a dead lock.\nIf Apple does not call it synchronously, the first semaphore (from the SDWebImagDownloader) will be released. And then the NSOperation.completionBlock's semaphore can balance it as well. No dead lock occur.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.. the semaphore count will reduce  after call disaptch_semaphore_wait ,i disagree ' so that the semaphore count will +2'. i think the semaphore count will -1.\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"DreamPiggy\"notifications@github.com;\n\u53d1\u9001\u65f6\u95f4: 2018\u5e7410\u670831\u65e5(\u661f\u671f\u4e09) \u4e0b\u53485:21\n\u6536\u4ef6\u4eba: \"SDWebImage/SDWebImage\"SDWebImage@noreply.github.com;\n\u6284\u9001: \"\u5d14\u5fd7\u4f1f\"2213139162@qq.com; \"State change\"state_change@noreply.github.com; \n\u4e3b\u9898: Re: [SDWebImage/SDWebImage] addOperation:` \u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b7b\u9501\uff1f (#2521)\nYou mean this line ? https://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/SDWebImageDownloader.m#L307\nJust as the comment shows, we use a GCD semaphore disaptch_semaphore_wait at the beginning of that function call, and we also use disaptch_semaphore_wait inside the operation.compltionBlock.\nIf Apple call your operation.compltionBlock after you call NSOperationQueue.addOperatation in synchronously, what will happen ?  There may be two serail call to disaptch_semaphore_wait, and so that the semaphore count will +2. But each of them waiting for another to release the lock. This cause a dead lock.\nIf Apple does not call it synchronously, the first semaphore (from the SDWebImagDownloader) will be released. And then the NSOperation.completionBlock's semaphore can balance it as well. No dead lock occur.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.. please say detail about the result of the semphore count\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"DreamPiggy\"notifications@github.com;\n\u53d1\u9001\u65f6\u95f4: 2018\u5e7410\u670831\u65e5(\u661f\u671f\u4e09) \u665a\u4e0a6:14\n\u6536\u4ef6\u4eba: \"SDWebImage/SDWebImage\"SDWebImage@noreply.github.com;\n\u6284\u9001: \"\u5d14\u5fd7\u4f1f\"2213139162@qq.com; \"State change\"state_change@noreply.github.com; \n\u4e3b\u9898: Re: [SDWebImage/SDWebImage] addOperation:` \u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b7b\u9501\uff1f (#2521)\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.. addOperation()\u6dfb\u52a0\u4e0d\u7ba1\u662f\u540c\u6b65\u64cd\u4f5c\u8fd8\u4ee5\u5f02\u6b65\u64cd\u4f5c\uff0cqueue\u90fd\u4f1a\u6709\u5355\u72ec\u7684\u7ebf\u7a0b\u53bb\u5f02\u6b65\u6267\u884c\u3002\u6240\u4ee5\u611f\u89c9\u6b7b\u9501\u5e94\u8be5\u4e0d\u4f1a\u53d1\u751f\u3002\n\u6211\u5199\u4e86\u4e00\u4e2aoperation\u7684\u5b50\u7c7b\uff0c\u76f4\u63a5\u91cd\u5199main()\u65b9\u6cd5\uff0c\u7136\u540e\u6dfb\u52a0\u5230queue\u91cc\uff0c\u53d1\u73b0\u5b83\u4ecd\u7136\u4e0d\u4f1a\u540c\u6b65\u6267\u884coperation\u3002\u6240\u4ee5\u731c\u6d4b\uff0c\u5728\u8c03\u7528addOperatation\u4e4b\u540e,\u4e0d\u4f1a\u540c\u6b65\u8c03\u7528operaion\u3002\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"DreamPiggy\"notifications@github.com;\n\u53d1\u9001\u65f6\u95f4: 2018\u5e7410\u670831\u65e5(\u661f\u671f\u4e09) \u4e0b\u53485:21\n\u6536\u4ef6\u4eba: \"SDWebImage/SDWebImage\"SDWebImage@noreply.github.com;\n\u6284\u9001: \"\u5d14\u5fd7\u4f1f\"2213139162@qq.com; \"State change\"state_change@noreply.github.com; \n\u4e3b\u9898: Re: [SDWebImage/SDWebImage] addOperation:` \u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b7b\u9501\uff1f (#2521)\nYou mean this line ? https://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/SDWebImageDownloader.m#L307\nJust as the comment shows, we use a GCD semaphore disaptch_semaphore_wait at the beginning of that function call, and we also use disaptch_semaphore_wait inside the operation.compltionBlock.\nIf Apple call your operation.compltionBlock after you call NSOperationQueue.addOperatation in synchronously, what will happen ?  There may be two serail call to disaptch_semaphore_wait, and so that the semaphore count will +2. But each of them waiting for another to release the lock. This cause a dead lock.\nIf Apple does not call it synchronously, the first semaphore (from the SDWebImagDownloader) will be released. And then the NSOperation.completionBlock's semaphore can balance it as well. No dead lock occur.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.. ",
    "AndyIbanez": "Thanks. I reinstalled 4.4.2 and gave it the SDWebImageQueryDataWhenInMemory option and it works as I intend it now.. ",
    "sunforcode": "\n@sunforcode I suggest you don't use lock to block any thread, it potentially dangerous. And completed block would not always be called, for example, you cancel all loading operations, so please don't do this. If you want to do some logical handler only if image be loaded, I suggest you do it in completed block, just like :\n[[SDWebImageManager sharedManager]loadImageWithURL:url options:SDWebImageRefreshCached progress:nil completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {\n        __strong __typeof(wself) sself = wself;\n        if (!sself) { return; }\n        [sself handleCustomThingsIfLoadOperationCompleted:image:url:....];\n    }];\n\nty,i want to asyn request imagedata ,and block the main thread by use dispatch_semaphor ,and when request finished , the main thread continue,i use nsurlsession instead thank u anyway. ",
    "ZachGuoMingyu": "Thank you,I've solved this problem by turning the url into UTF-8.. ",
    "wanhmr": "@dreampiggy Thx. I'll use it later.. ",
    "sureshcapternal": "Hello,\nThank for quick reply, I had implemented it using CIImage and its working\nas expected. What i thought is, Our library should support some image\nprocessing like aplying some filters. But you are righ SDWebImagd is not an\nimage processing library. Thanks for correction, keep giving us such great\nsupport. Thanks once again.\nOn Thu 29 Nov, 2018, 6:52 PM DreamPiggy <notifications@github.com wrote:\n\nIt's a 5.x feature, Image Transformer\nhttps://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#image-transformer-50\n.\nYou can use any Core Image Filter\nhttps://developer.apple.com/documentation/coreimage or even your own\ncustom implementation for image processing since it's a protocol.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/SDWebImage/SDWebImage/issues/2544#issuecomment-442831346,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/APPWToWYSKps3X9z3OJVaUXsjScIu1Ceks5uz9-DgaJpZM4Y435I\n.\n. \n",
    "fishycx": "There are many crash records about FLAnimatedImage\n0\u00a0libsystem_platform.dylib | _platform_memmove\u00a0+\u00a080\n-- | --\n1\u00a0ImageIO | GIFReadPlugin::copyImageBlockSet(InfoRec, CGImageProvider, CGRect, CGSize, __CFDictionary const)\u00a0+\u00a03244\n2\u00a0ImageIO | GIFReadPlugin::copyImageBlockSet(InfoRec, CGImageProvider, CGRect, CGSize, __CFDictionary const)\u00a0+\u00a03244\n3\u00a0ImageIO | GIFReadPlugin::CopyImageBlockSetProc(void, CGImageProvider, CGRect, CGSize, __CFDictionary const)+\u00a0124\n4\u00a0ImageIO | IIOImageProviderInfo::copyImageBlockSetWithOptions(CGImageProvider, CGRect, CGSize, __CFDictionary const)\u00a0+\u00a0496\n5\u00a0ImageIO | IIOImageProviderInfo::CopyImageBlockSetWithOptions(void, CGImageProvider, CGRect, CGSize, __CFDictionary const)\u00a0+\u00a0356\n6\u00a0CoreGraphics | _img_blocks_create\u00a0+\u00a0260\n7\u00a0CoreGraphics | _img_data_lock\u00a0+\u00a01896\n8\u00a0CoreGraphics | CGSImageDataLock\u00a0+\u00a0152\n9\u00a0CoreGraphics | _ripc_AcquireImage\u00a0+\u00a0712\n10\u00a0CoreGraphics | _ripc_DrawImage\u00a0+\u00a0676\n11\u00a0CoreGraphics | CGContextDrawImageWithOptions\u00a0+\u00a0636\n12\u00a0FLAnimatedImage | +[FLAnimatedImage predrawnImageFromImage:]\u00a0+\u00a0328\n13\u00a0FLAnimatedImage | -[FLAnimatedImage imageAtIndex:]\u00a0+\u00a0148\n14\u00a0FLAnimatedImage | __42-[FLAnimatedImage addFrameIndexesToCache:]_block_invoke_3\u00a0+\u00a0132\n15\u00a0Foundation | NSIndexSetEnumerate\u00a0+\u00a0824\n16\u00a0FLAnimatedImage | _42-[FLAnimatedImage addFrameIndexesToCache:]_block_invoke_2\u00a0+\u00a0136\n17\u00a0libdispatch.dylib | dispatch_call_block_and_release\u00a0+\u00a024\n18\u00a0libdispatch.dylib | __dispatch_client_callout\u00a0+\u00a016\n19\u00a0libdispatch.dylib | __dispatch_queue_serial_drain\u00a0+\u00a0928\n20\u00a0libdispatch.dylib | __dispatch_queue_invoke\u00a0+\u00a0652\n21\u00a0libdispatch.dylib | __dispatch_queue_override_invoke\u00a0+\u00a0360\n22\u00a0libdispatch.dylib | __dispatch_root_queue_drain\u00a0+\u00a0572\n23\u00a0libdispatch.dylib | __dispatch_worker_thread3\u00a0+\u00a0124\n24\u00a0libsystem_pthread.dylib | _pthread_wqthread\u00a0+\u00a0128\n. yes, i use a tableView to show pictures\uff0c and I use third-party software (buggly) to record this crash log, and I can't provide complete crash information. . SEGV_ACCERR\n. When I turned off the predrawing\uff08self.sd_predrawingEnabled = NO\uff09, the problem was no longer reported.\n. ",
    "visionsIT": "Thanks . ",
    "michaeleisel": "Ok thanks. It would be great if the readme was updated with this info. Ah I see there\u2019s a PR. Nice, that\u2019s an interesting way to do it. I\u2019m in favor of any explanation in the readme that either discourages dynamic libraries or makes it clear that they impact startup time, as I see so many apps pay the price for dylib loading unnecessarily. IMO one second is quite large but I understand. I think that adding \u2018use_frameworks!\u2019 is the exception rather than the norm and so it should be removed from the code block below this change. Also, the wording is saying basically \u201chere\u2019s a special case where you could maybe use this other thing\u201d, but static libraries are imo a best practice and consumers should be encouraged towards that. Something like \u201cif you need to support below Xcode 9 etc., or you need to use dynamic libraries for some other reason, you can use \u2018use_frameworks!\u2019\u201d seems ideal. ",
    "gholias": "hey @dreampiggy thanks a lot, this looks like exactly what I need\nbut Im having a hard time to make cocoapods to use the branch\nIf I try\npod 'SDWebImage/WebP', :git => 'https://github.com/SDWebImage/SDWebImage.git', :branch => '5.x'\nI got an error CocoaPods could not find compatible versions for pod \"SDWebImage/WebP\"\nBut if I try only SDWebImage like this it works\npod 'SDWebImage', :git => 'https://github.com/SDWebImage/SDWebImage.git', :branch => '5.x'\nAnd if I use pod 'SDWebImage' only, the conversion always returns nil \nAny idea what Im missing? \n. ",
    "CapricornRJ": "I use SDWebImage v4.4.2 is good. @zhongwuzw  I found that using SDWebImage could not display GIF images of HTTP type\nHTTPS can display\nI don't know if it is a problem with my project settings.. @zhongwuzw  This problem is caused by my code error, please ignore this problem. I found that the crash situation happened on iOS 10.x. Is this accidental?. ",
    "rostopira": "Nope, it's now SDWebImage issue. It's actually cocoapods problem\nhttps://github.com/CocoaPods/CocoaPods/issues/8206. ",
    "jerelevine": "Thanks for responding! First, let me describe my use-case. I prefetch (with a low priority) a server page of image urls (approximately 20). And then as a user scrolls, I fetch the image urls (with a high priority) that correspond to the data onscreen. I want the onscreen images to get high priority even if I've already started to prefetch them.\n\nIt does no effect if the operation is already started.\n\nThat is the case but just because the operation exists, doesn't mean it's been started. If I check the operation.isExecuting where this priority is set, the values are not always YES. The operation was added to the queue but it hasn't started executing yet.\nSee nshipster.\n\nTo kick off an NSOperation, either call start, or add it to an NSOperationQueue, to have it start once it reaches the front of the queue. \n\nSo the operation can be added to the operation queue without it having been started or the main method being called. . Thoughts on my commment?. Hey @skyline75489, thanks for asking. At my work, I have been tasked with more quickly downloading images for our content. As part of that, I'm prefetching all images that may be displayed in the near future. If a user is changing tabs quickly, that can queue 100+ images to prefetch. The newest images are the last in the queue so there becomes a bottleneck when those items get displayed. By updating the priority for currently displayed items, the images are moved to the front of the queue and there is no longer a bottleneck for those items. \nIf prefetching regularly causes bottlenecks for current items, then it defeats the purpose of prefetching unless all the prefetches can be completed before any items need to be displayed.. Commenting to keep this request alive.. Not stale. I'm not sure that we want to check for low priority in this case. I think that we should always use the highest requested priority possible. If we request an image with high priority and then low priority, I believe we should still use high priority in this case.. Also thank you for taking the time to create this PR!. ",
    "jeyremy": "I got the exact same issue. when i switch screen or app goes background / foreground. ",
    "cntrump": "the test case testFLAnimatedImageViewSetImageWithURL failed because of remote resource is not available.. > @cntrump Please clone and check whether this PR solve your use case. I write a test case to simulate your code. Am I right ?\nTested, it works!. Some code like below\nGif downloaded and run it again, gif will be freezed.\n```objc\nimport \"ViewController.h\"\nimport \n@interface ViewController () {\n    FLAnimatedImageView *_imageView;\n}\n@end\n@implementation ViewController\n\n\n(void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n_imageView = [[FLAnimatedImageView alloc] initWithFrame:CGRectMake(50, 100, 200, 200)];\n_imageView.contentMode = UIViewContentModeScaleAspectFit;\n_imageView.backgroundColor = UIColor.lightGrayColor;\n[self.view addSubview:_imageView];\n}\n\n\n(void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\nNSURL url = [NSURL URLWithString:@\"https://github.com/cntrump/pics/raw/master/SDWebImage/giphy.gif\"];\nUIImage cacheImage = [[SDWebImageManager sharedManager].imageCache imageFromCacheForKey:url.absoluteString];\n[_imageView sd_setImageWithURL:url placeholderImage:cacheImage options:SDWebImageRetryFailed completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n}];\n}\n\n\n@end\n```. This bug triggered when placeholder image is a GIF same as the url.\nActually, I just want display a poster like this:\nFirst time, cache the image as poster\n```objc\n    NSURL *url = [NSURL URLWithString:@\"https://github.com/cntrump/pics/raw/master/SDWebImage/giphy.gif\"];\n[_imageView sd_setImageWithURL:url placeholderImage:_posterImage options:SDWebImageRetryFailed completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n    self->_posterImage = image;\n}];\n\n```\nSecond time, using the poster as placeholder\n```objc\n    NSURL *url = [NSURL URLWithString:@\"https://github.com/cntrump/pics/raw/master/SDWebImage/giphy.gif\"];\n[_imageView sd_setImageWithURL:url placeholderImage:_posterImage options:SDWebImageRetryFailed completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) {\n}];\n\n```. OK, thanks.. ",
    "SwordJason": "Maybe we could change README.md to let more people know about this.. ",
    "lly4155": "\n@lly4155 What your desired behavior ? If the operation is dealloced, don't send notification ? Or any other use case. Provide information can help us find the solution.\n\nI create a singleton to get more image download information through notification, such as image size, duration, result etc.  the StartDownload and StopDownload notification is alright, but only the cancel and failed(maybe) notification's operation is nil, so I cannot collect the information under those case.. ",
    "tebriz159": "@bpoplauschi I designed 2 logo and I used similar colors that you used on current design. If you like it I will send you all files to use it.\n\n\nWhich variation and colors do you want?. @bpoplauschi I've made some variations as I understand. If you like one of these designs, which variation and colors do you want?\n\n\n. All files here for 4th variation: https://drive.google.com/open?id=1f8DQujotWZloDnKfXg4Ah7g4AmFkeriZ. ",
    "xiangwangfeng": "Another issue: The point we consider to download scale image is not only the memory usage. Maybe we should also consider the max height/width of image. For example if the height of image is greater than 20000 pixels, it can't be rendered in a simple UIView/UIImageView even if the memory usage of bitmap is less than 60MB.. already changed: use sqrtf instead of sqrt. However in fact in arm64 CGFloat means double.. ",
    "alexandre-g": "Still an issue. @dreampiggy I think you misunderstand the issue. What I meant is in the older version of SDWebImage, if the server returned, for example, 403 on image download, SDWebImage would show 403 as the error in the callback. Now, whatever the error is, it's shown as -999 cancelled.\nThis means we can't have any logic to handle these errors, and, if I remember right, can't even distinguish a cancellation caused by user scrolling an image off screen in a UICollectionView from a real error.. Yes, I believe it's this code here that generates this behaviour:\n```\n    BOOL valid = statusCode < 400;\n    //'304 Not Modified' is an exceptional one. It should be treated as cancelled if no cache data\n    //URLSession current behavior will return 200 status code when the server respond 304 and URLCache hit. But this is not a standard behavior and we just add a check\n    if (statusCode == 304 && !self.cachedData) {\n        valid = NO;\n    }\nif (valid) {\n    for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) {\n        progressBlock(0, expected, self.request.URL);\n    }\n} else {\n    // Status code invalid and marked as cancelled. Do not call `[self.dataTask cancel]` which may mass up URLSession life cycle\n    disposition = NSURLSessionResponseCancel;\n}\n\n```\nBasically if the status code is > 400, then the task is cancelled. ",
    "jiutianhuanpei": "ok\uff0cthank you very much. ",
    "winfredzen": "I have the same issue.\nWhen I change sdwebimage version to 4.4.2 , everything is ok. ",
    "applejian": "Xcode 10.1\ncocoapods 1.5.3\nnot use 'use_frameworks!'\nproject ios 8.0+\ni try\n\npost_install do |installer|\n     installer.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '8.0'\n            config.build_settings['DEFINES_MODULE'] = 'NO' \n        end\n    end\nend\n\nthe issue is also\n. \nclang_2019-01-28-174938-3_skyme.crash.zip\n. Podfile \n```\nplatform :ios, '8.0'\ninstall! 'cocoapods', :deterministic_uuids => false\nworkspace 'BaseProject'\nxcodeproj 'BaseProject.xcodeproj'\ninhibit_all_warnings!\nabstract_target 'LearnFunny' do\n    pod 'SDWebImage/Core' \n    pod 'SDWebImage/GIF'\n    pod 'CocoaLumberjack'\ntarget 'BaseProject-Game' do\n\nend\n\nend\n```\npod update or pod install is ok\nxcode build will appear error\n. Maybe itundefineds another problem.\n 4.4.4 version not build success\n@zhongwuzw . No. @dreampiggy \n@zhongwuzw\nSolution by rollback to 4.4.3 \nbut in new tmp project the issue not appear . ",
    "iliaskarim": "You're correct @zhongwuzw that there is not necessarily a need to add this default value name so much as it is a nicety that improves the interface for client programmers much like the Apple example you\u00a0provided. An engineer would either be able to pass 0 as UIViewAnimationOptionLayout which would then a reader of that code would have to look up via the enum declaration/documentation, or the original engineer could pass the combination of UIViewAnimationOptionLayoutSubviews, UIViewAnimationOptionCurveEaseInOut and UIViewAnimationOptionTransitionNone for future readers of the code to see or even better to future proof the code in case the default values change. In this case as multiple values are set, all of which are 0, and to avoid the use of excessive boilerplate, a convenience method can be declared that provides these default values.\n@dreampiggy this PR is intended to improve the objective-c interface by changing a the sentinel value 0 into a human readable text description.\nWe can see both from the Apple enum posted above and from UIViewAutoresizing that the established convention in objective-c is in to provide a name for the default setting of an enum just as in the .\ntypedef NS_OPTIONS(NSUInteger, UIViewAutoresizing) {\n        UIViewAutoresizingNone                 = 0,\n        UIViewAutoresizingFlexibleLeftMargin   = 1 << 0,\n        UIViewAutoresizingFlexibleWidth        = 1 << 1,\n        UIViewAutoresizingFlexibleRightMargin  = 1 << 2,\n        UIViewAutoresizingFlexibleTopMargin    = 1 << 3,\n        UIViewAutoresizingFlexibleHeight       = 1 << 4,\n        UIViewAutoresizingFlexibleBottomMargin = 1 << 5\n};\nThis convention improves code readability.\nA further improvement would be to prefix all of the enum value names with the same prefix as is also established objective-c convention.\nThank you to both reviewers for your feedback thus far. That's perfectly clear @zhongwuzw. I understand. Both options seem good but for clarities sake the first that you suggested, to add all default options to SDWebImageDownloaderOptions like UIViewAnimationOption seems clearest for users.\nAnother idea is how about a convenience interface? E.g.\n- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url\n                                                 completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock;\nbecause progressive download is disabled by default, we can omit the progress block parameter.. @dreampiggy please re-review at your leisure.. No, @dreampiggy we are not using Swift yet. I appreciate your thoughts. There have been a couple of times that this interface could have come in handy. Please merge at your discretion.. Ok, thanks @dreampiggy. If you'd like I can open a separate PR to add this file or ignore it. My understanding is files in xcshareddata are intended to be version controlled.. ",
    "keynsianets": "How can i set HTTP/2 connection? It's not internet or server issue - this image loads successfully in browsers or with using other libraries. I will make test project in several minutes. \n\nCan not reproduce...Are you sure it's not the server issue or network issue ? The image downloaded, is a normal PNG image, and the connection use HTTP/2.\n\n\nCan you show code, that you use for download this image? Maybe i am doing something wrong?\n. https://www.dropbox.com/s/dknfhxvuyksye4j/SDWebImageTest.zip?dl=0  - test project. \nI get an error: \n\"2019-02-01 12:16:23.788275+0200 SDWebImageTest[9807:99077] Task <3683275B-1CD7-4520-B70A-ED08D16A8D36>.<1> load failed with error Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={_kCFStreamErrorCodeKey=-2102, NSUnderlyingError=0x6000024d7630 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, _NSURLErrorFailingURLSessionTaskErrorKey=LocalDataTask <3683275B-1CD7-4520-B70A-ED08D16A8D36>.<1>, _NSURLErrorRelatedURLSessionTaskErrorKey=(\n    \"LocalDataTask <3683275B-1CD7-4520-B70A-ED08D16A8D36>.<1>\"\n), NSLocalizedDescription=The request timed out., NSErrorFailingURLStringKey=https://d2bnh4l4ivgux0.cloudfront.net/outfits/bfe8cf33-8b2f-4678-9a7a-81b6ecf477bd.png, NSErrorFailingURLKey=https://d2bnh4l4ivgux0.cloudfront.net/outfits/bfe8cf33-8b2f-4678-9a7a-81b6ecf477bd.png, _kCFStreamErrorDomainKey=4} [-1001]\nOptional(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={_kCFStreamErrorCodeKey=-2102, NSUnderlyingError=0x6000024d7630 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, _NSURLErrorFailingURLSessionTaskErrorKey=LocalDataTask <3683275B-1CD7-4520-B70A-ED08D16A8D36>.<1>, _NSURLErrorRelatedURLSessionTaskErrorKey=(\n    \"LocalDataTask <3683275B-1CD7-4520-B70A-ED08D16A8D36>.<1>\"\n), NSLocalizedDescription=The request timed out., NSErrorFailingURLStringKey=https://d2bnh4l4ivgux0.cloudfront.net/outfits/bfe8cf33-8b2f-4678-9a7a-81b6ecf477bd.png, NSErrorFailingURLKey=https://d2bnh4l4ivgux0.cloudfront.net/outfits/bfe8cf33-8b2f-4678-9a7a-81b6ecf477bd.png, _kCFStreamErrorDomainKey=4}) \"my error\"\". I don't think it's problem with headers - this image only one from several thousand on this server, that doesn't load. I try to load this image directly with swift (test project - https://www.dropbox.com/s/1ecu4ytq83t9ukx/SDWebImageTest%202.zip?dl=0) and it works. Image load very long, but has loaded successfully. . ",
    "kostyleteam": "Have same issue with your code.. ",
    "Insofan": "@kostyleteam @keynsianets @dreampiggy I used the test project encountered this error.\n2019-03-16 00:55:29.860806+0800 SDWebImageTest[5516:324854] Task <1AD0CB64-E7E8-4156-B7D2-BA148E9CECFC>.<1> finished with error - code: -1001\n....some logs\n), NSLocalizedDescription=The request timed out., NSErrorFailingURLStringKey=https://d2bnh4l4ivgux0.cloudfront.net/outfits/bfe8cf33-8b2f-4678-9a7a-81b6ecf477bd.png, NSErrorFailingURLKey=https://d2bnh4l4ivgux0.cloudfront.net/outfits/bfe8cf33-8b2f-4678-9a7a-81b6ecf477bd.png, _kCFStreamErrorDomainKey=4}) \"my error\"\nI think this caused by sd's default downloadTimeout is 15 seconds. The url takes a long time even on my chrome. Just set the downloadTimeout longer like sub code, successfully loaded image.\nlet  manager =  SDWebImageManager.shared()\n        manager.imageDownloader?.downloadTimeout = 60.0\n        let url = URL(string: \"https://d2bnh4l4ivgux0.cloudfront.net/outfits/bfe8cf33-8b2f-4678-9a7a-81b6ecf477bd.png\")\n        imageView.sd_setImage(with: url) { (image, error, cacheType, url) in\n            if error != nil {\n                debugPrint(error, \"my error\")\n            }\n        }. > ? I\u2019m using the New Build System with the latest 5.x branch, anything works fine. Is this caused by beta version Xcode ?\nNope, stand version 10.1 (10B61). Is your team sign equal personal signing certificate? I use my compony's certificate as team sign. This code sign error occurred on building on device, but not appear on simulator. I switch to legacy, it disappear. I wanna contribute to this lib, I fork a repo, but on my repo travis build it failed compile as same as this pull request, I have to switch back to New Build System. So sd's examples only running on my simulator.. > Ourself, does not use anything Developer Team certificate. When running on real device, myself using the free or personal developer certificate.\n\nFor certifcate config, SDWebImage 5.0 using the xcconfig files to manage any configuration used by Xcode. We don't relay on the GUI part of build settings. Maybe you can check the App-Release.xcconfig files ?\n\nOk, Thx for ur contribution to sd. I'll check it later.. @dreampiggy Why SD ci says failed. I have test this code on my repo's travis and  it passed.How to save this pr travis build?. > @Insofan Our Travis-CI build script, now always using the latest version of CocoaPods (including the beta version), and I guess some test case have thread-safe issue to cause the test case crahsed. I'll try to investigate and fix it.\n\nCurrent, you can do a travis-CI retry after you login the Travis-CI.org with GitHub account. If you can not restart the test, try to ammend a empty change commit and force push to your remote branch, this will trigger the retry.\n\nThis pr has passed.I didn't find  restart trigger on SD's travis, maybe I don't have the permission. I know how to restart my fork repo's travis. Recently I'm reading the source code, I'll investigate this part too. \nBTW:\nI'm working on 5.x branch, every pr I'll merge sd's 5.x branch to my fork, should I check 'I have updated this branch with the latest master to avoid conflicts'?. > Currently, we have many weak-strong dances to break retain cycle. But the code looks not good, we can borrow some macros to simplify code style, like @weakify from libextobjc.\n\nhttps://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/FLAnimatedImage/FLAnimatedImageView%2BWebCache.m#L173-L188\nI think this is a Good first issue, anyone who wants to contribute can take a stab about this.\nRelated #2642 (comment).\n\nI'll do my best for this part if you determine to do this, recently I'm reading the source code, I found many formats for strong and weak. Likely sself strongSelf and so on.. @zhongwuzw @dreampiggy There're massive dummy code. Should add tests for these retain cycle codes? I thought it's just repeat labor. And I wanna commit codes by directories order(there're 7 directories and I have read three of them). Do you have any advise for this issue.. @dreampiggy  How to avoid pr history commit, I rebase latest 5.x branch before I modified project. Should I fork the repo everytime before modification?. > The metamacros.h is from the libextobjc with MIT licence.\nYeah, I found it use the MIT Licence, RAC also use the EXTScope.h and metamacros.h. Do u think the unsafeify macro is useless? I haven't read this part in the Podspec Syntax. I'll read it right now and google related results. And I prefer prefix_header_file then contents.I'll reply you as soon as possible.. I guess the \"This attribute is not recommended...\" quote isn't mean private pch, I think the private pch file only applied on specific pod. I will create a test pod for pch on tomorrow. Now I don't have any OS X laptop.. > Don't add these....Put all the internal macro into the private headers. Then using the pch files instead.\n\nIf we put macro here, this will effect the user application who dependency SDWebImage.\n\nOk, I'll refactor these macros. Should I fork repo every pr? Why there some history commits.. Actruly I have done this operation before pr. Yeah u mr a preheader file maybe a better way I don't familiar with the project structure. I will finish the rest code. The implementation as while as  I reading the source code, so it maybe a little long time. But I will do my best And when is the 5.0ver deadline. > This pch is internal only. So does not port to any publc APIs or effect any other Pod or Application outside SDWebImage/Core.\nI'm creating a test pod. I suggest don't move the dispatch_main_async_safe and SD_LOCK macros into private pch, as I known some project using this macro to protect thread. One of my projects depend on  dispatch_main_async_safe macro.. I have discussed with other guys, I thought your opinion is right. And I created a test pod, tried prefix_header_contents way, then used s.prefix_header_file,  pod auto copy SDTestMacros.h's content to SDTest-prefix.pch file. I prefer prefix_header_contents.. ",
    "abdallahnh": "Hi,\nwhen i used  imageView.sd_cancelCurrentImageLoad() the completion block still calling any help?\n. ",
    "Softy101": "Well done!\nSent from my iPhone\n\nOn Mar 7, 2019, at 10:15 PM, stale[bot] notifications@github.com wrote:\nThis issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, please make sure it is up to date and if so, add a comment that this is still an issue to keep it open. Thank you for your contributions.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "kbabulrao": "When I tried to see the response on \"Charles Proxy\" I am able to see some response if I give \u201chttps://www.charlesproxy.com/\u201c.  Please find the attached image for the response\u2026\n\nWhen I give the actual image url on \"Charles Proxy\", I didn't see any data when we click on \u2018Execute\u2019. We tried with giving authorization parameters and tried without adding any parameters.\n\n. I am facing the issue. Didn't solved the issue still.\nTried to download the image using post man.\nThe same image URL is working on SDWebImage v3.5.4 after i upgraded to SDWebImage v4.4.5, it is  not lodging the image.\nIs there any configurations am i missing? Installed pod 'SDWebImage/WebP' also, added SD_WEBP=1 in Build settings -> Preprocessor macros.\n\nError:  Error Domain=SDWebImageErrorDomain Code=0 \"Downloaded image has 0 pixels\" UserInfo={NSLocalizedDescription=Downloaded image has 0 pixels}\n\n\nhttp://testingurl.net/api/Image?ActionFlagId=20&id=864\nAuthorization:\nEmail: kkk1@ler.com ,\nToken: A-BE3D-WER3-847F-ER6YG5678G\n. > @kbabulrao Hey, the domain you provided is reachable?\nhttp://testingurl.net/api/Image?ActionFlagId=20&id=864\nAuthorization:\nEmail: kkk1@ler.com ,\nToken: A-BE3D-WER3-847F-ER6YG5678G. it's working, Added to convert the response image in \"SDWebImageDownloaderOperation.m\" Once i got the response, converted to image and assigned to the same.\nAdded the following code in \"- (void)URLSession:(NSURLSession )session task:(NSURLSessionTask )task didCompleteWithError:(NSError *)error\"\nNSDictionary *responseObject = [NSJSONSerialization JSONObjectWithData:self.imageData\n                                                                       options:0\n                                                                         error:nil];\n        if (![[responseObject objectForKey:@\"Value\"] isEqual:[NSNull null]] &&\n            [responseObject objectForKey:@\"Value\"]) {\n            self.imageData  = [[NSData alloc] initWithBase64EncodedString:[responseObject objectForKey:@\"Value\"] options:0];\n    }\n\n. ",
    "SuperCup": "Hello, I have encountered the same problem, I would like to ask you how to solve this problem in the end.. ",
    "introin": "same error with me, did manaul linking in ios. \n@ramprasadios have you been able to find workaround?. ",
    "dirtmelon": "We received the same crashes in v4.4.5 and v4.4.4. We also use WebP.\nThe crash of v4.4.4:\n\n\nThe crash of v4.4.5:\n```\nCrashed: com.hackemist.SDWebImageCache\n0  ColorSync                      0x1a2e489d4 CMMProfile::MakeTag(icTagSignature, CMMTagDataAccess, CMMTag) + 1324\n1  ColorSync                      0x1a2e43830 CMMProfile::GetTag(icTagSignature) + 188\n2  ColorSync                      0x1a2e49c84 CMMProfile::InnerGetMatrixTags(CMMXYZTag (&) [3], CMMCurveTag (&) [3]) + 44\n3  ColorSync                      0x1a2e4b89c CMMMatrixDisplayProfile::GetMatrixTags(CMMXYZTag (&) [3], CMMRGBCurves&) + 64\n4  ColorSync                      0x1a2e411c8 ConversionManager::MakeConversionSequence(CMMProfileInfoContainer, CMMColorConversionInfo*) + 748\n5  ColorSync                      0x1a2e3dfc0 DoInitializeTransform + 792\n6  ColorSync                      0x1a2e3fdf8 AppleCMMInitializeTransform + 168\n7  ColorSync                      0x1a2e2fad4 ColorSyncTransformCreate + 668\n8  CoreGraphics                   0x1a16e5a88 CGCMSConverterCreate + 536\n9  CoreGraphics                   0x1a1940154 CGColorTransformCacheGetConversionType + 220\n10 CoreGraphics                   0x1a194ef4c CGColorTransformConvertRequired + 196\n11 CoreGraphics                   0x1a193d6b8 CGDataProviderCreateForDestination + 132\n12 CoreGraphics                   0x1a172db18 CGDataProviderCreateForDestinationWithImage + 1412\n13 CoreGraphics                   0x1a18ac8a0 img_image + 1596\n14 CoreGraphics                   0x1a18ac0dc CGSImageDataLock + 824\n15 CoreGraphics                   0x1a16b8224 ripc_AcquireRIPImageData + 344\n16 CoreGraphics                   0x1a18c8d80 ripc_DrawImage + 612\n17 CoreGraphics                   0x1a18b2c70 CGContextDrawImageWithOptions + 476\n18 SDWebImage                     0x1030e8da0 -[SDWebImageImageIOCoder sd_decompressedImageWithImage:] (SDWebImageImageIOCoder.m:242)\n19 SDWebImage                     0x1030e8c74 -[SDWebImageImageIOCoder decompressedImageWithImage:data:options:] (SDWebImageImageIOCoder.m:189)\n20 SDWebImage                     0x1030ed950 -[SDWebImageWebPCoder decompressedImageWithImage:data:options:] (SDWebImageWebPCoder.m:233)\n21 SDWebImage                     0x1030e1938 -[SDWebImageCodersManager decompressedImageWithImage:data:options:] (SDWebImageCodersManager.m:125)\n22 SDWebImage                     0x1030ddc48 -[SDImageCache diskImageForKey:data:options:] (SDImageCache.m:489)\n23 SDWebImage                     0x1030de008 __55-[SDImageCache queryCacheOperationForKey:options:done:]_block_invoke (SDImageCache.m:541)\n24 libdispatch.dylib              0x19f55b6c8 _dispatch_call_block_and_release + 24\n25 libdispatch.dylib              0x19f55c484 _dispatch_client_callout + 16\n26 libdispatch.dylib              0x19f503c18 _dispatch_lane_serial_drain$VARIANT$mp + 592\n27 libdispatch.dylib              0x19f504760 _dispatch_lane_invoke$VARIANT$mp + 432\n28 libdispatch.dylib              0x19f50cf00 _dispatch_workloop_worker_thread + 600\n29 libsystem_pthread.dylib        0x19f73e0f0 _pthread_wqthread + 312\n30 libsystem_pthread.dylib        0x19f740d00 start_wqthread + 4\nCrashed: com.hackemist.SDWebImageDownloaderOperationCoderQueue\n0  ColorSync                      0x1c173b714 CMMProfile::MakeTag(icTagSignature, CMMTagDataAccess, CMMTag) + 1332\n1  ???                            0x27e81c1736404 (Missing)\n2  ???                            0x4d3481c173ca58 (Missing)\n3  ???                            0x668e01c173e758 (Missing)\n4  ???                            0x1de301c1733c38 (Missing)\n5  ???                            0xffe01c1730880 (Missing)\n6  ???                            0x423c81c17327c4 (Missing)\n7  ???                            0x25681c175a760 (Missing)\n8  ???                            0x53981c1722478 (Missing)\n9  ???                            0x31f401bff89fd4 (Missing)\n10 ???                            0x112d81c01e9020 (Missing)\n11 ???                            0x37a81c01f8354 (Missing)\n12 ???                            0x189481c01e6510 (Missing)\n13 ???                            0x47ef01bffd28dc (Missing)\n14 ???                            0xd7881c0155844 (Missing)\n15 ???                            0x3a0581c0155078 (Missing)\n16 ???                            0x36e281bff5b7ac (Missing)\n17 ???                            0x4c4501c01722cc (Missing)\n18 ???                            0x201101c00ced80 (Missing)\n19 ???                            0x4dee81c015bb8c (Missing)\n20 ???                            0x624d8106bd8da0 (Missing)\n21 SDWebImage                     0x106bd8c74 -[SDWebImageImageIOCoder decompressedImageWithImage:data:options:] (SDWebImageImageIOCoder.m:189)\n22 SDWebImage                     0x106bdd950 -[SDWebImageWebPCoder decompressedImageWithImage:data:options:] (SDWebImageWebPCoder.m:233)\n23 SDWebImage                     0x106bd1938 -[SDWebImageCodersManager decompressedImageWithImage:data:options:] (SDWebImageCodersManager.m:125)\n24 SDWebImage                     0x106bd6eb4 __70-[SDWebImageDownloaderOperation URLSession:task:didCompleteWithError:]_block_invoke.279 (SDWebImageDownloaderOperation.m:428)\n25 libdispatch.dylib              0x1bdd8fb9c _dispatch_call_block_and_release + 32\n26 ???                            0x487501bdd91134 (Missing)\n27 ???                            0x3c681bdd9864c (Missing)\n28 ???                            0x5de281bdd99194 (Missing)\n29 ???                            0x3c1601bdda1480 (Missing)\n30 ???                            0x1a6901bdf92b20 (Missing)\n31 ???                            0x714701bdf98dd4 (Missing)\n```\n. @dreampiggy I can't reproduce in v4.4.5 either, but can reproduce in v4.4.4.\nI will show the console output later.\nThese are statistics of crashes in v4.4.5, iOS 12 only:\n```\nCrash 1 - SDWebImageImageIOCoder.m line 189\ndevice: \n49% iPhone XS Max\n31% iPhone XR\n20% iPhone XS\nsystem:\n46% iOS 12.1.2\n16% iOS 12.1.4\n13% iOS 12.1.3\n25% other (4) (also iOS 12)\nCrash 2 - SDWebImageImageIOCoder.m line 242\ndevice\n35% iPhone X\n16% iPhone 7 Plus\n12% iPhone 7\n37% other (11)\nsystem:\n51% iOS 12.1.2\n13% iOS 12.0.0\n10% iOS 12.1.3\n26% other (5) (also iOS 12)\n```. Here is the console output:\n [Unknown process name] create_icc: ColorSyncTransformCreate failed!\nThe crash happened when I loaded a lot of different images.. After I set these settings:\nSwift\nSDImageCache.shared().config.shouldDecompressImages = false\nSDWebImageDownloader.shared().shouldDecompressImages = false\nThe app crashed in ASImageNode \ud83d\ude02, ASImageNode.mm, we use the Texture heavily.\nThanks for your reply:). I found the picture that will trigger a crash.\nThe png url: http://carben.b0.upaiyun.com/Images/1510913905.png\nThe WebP url: http://carben.b0.upaiyun.com/Images/1510913905.png!/format/webp\nHowever, in the case of directly loading this image, it does not trigger a crash.. @dreampiggy Thanks a lot.I will test it on my project.. ",
    "pranavkth": "I have also encountered this issue and this is resolved by adding \n$(SRCROOT)/libwebp/src and $(inherited) \nin SDWebImageFramework in Pods target under User Header Search Paths in build settings.\nBut I need to do this manually everytime I make a pod install.\nPlease resolve this asap team.\nUsing cocoaPods version 1.6. ",
    "cj1024": "\n@cj1024 Should be fixed via #2622.\n\nThat's great. ",
    "krze": "We will be using 4.4.5 in the next release. I also discovered that due to the way we are using our own cache, there's essentially no chance that we'd be hitting the in-memory cache at all. We check our own disk cache for an image, and only call loadImageWithImageURL:options:progress: if we don't have the image already cached. So I decided to disable the in-memory cache entirely with [SDImageCache sharedImageCache].config.shouldCacheImagesInMemory = NO;. Local testing showed that disabling the memcache reduces memory pressure with no affect on image loading with our setup.\nEventually we'll be removing our own disk cache, this is only temporary. We'll investigate limiting the max concurrent downloads to see if that helps as well. Thank you for the tips.. I'm able to reproduce the issue with a bit of effort in 4.4.5 in our app with the above settings applied (no in-memory cache, 4 concurrent downloads). I also tried a few fixes on our end to ensure we're not using too many threads but the issue still persists.\nBreakpointing for malloc_error_break will catch the issue in SDWebImageDownloaderOperation.m. I read through the discussion on #2477 but it's not the same scenario we're facing. We're not using progressive JPEG but we can still reproduce this crash. The progressive jpeg decoder doesn't come into play in our case.. Thanks for the explanation.\nWe released our latest update with 4.4.5 and the aforementioned config settings to reduce memory pressure. We're still seeing a significant number of crashes. It hasn't been out for 24 hours yet but it's looking on track to be a little less than before, but certainly not fixed.\nWe're going to give 4.4.6 a shot in the next release.. ",
    "mynameissujie": "is it fixed?. ",
    "KeymonWong": "\ud83d\ude30. ",
    "ducnv2910": "Hello . \nI can not play webP with this link: https://storage.googleapis.com/myscoop/scoops/webp/mtu1mdcxnju3ns40mju4ntuy_320.webp\n- some : Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={_kCFStreamErrorCodeKey=-2102, NSUnderlyingError=0x2837563d0 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, _NSURLErrorFailingURLSessionTaskErrorKey=LocalDataTask <18471379-5B42-4074-9C2F-18B5844EC0DF>.<14>, _NSURLErrorRelatedURLSessionTaskErrorKey=(\n    \"LocalDataTask <18471379-5B42-4074-9C2F-18B5844EC0DF>.<14>\"\n), NSLocalizedDescription=The request timed out., NSErrorFailingURLStringKey=https://storage.googleapis.com/myscoop/scoops/webp/mtu1mdcxnju3ns40mju4ntuy_320.webp, NSErrorFailingURLKey=https://storage.googleapis.com/myscoop/scoops/webp/mtu1mdcxnju3ns40mju4ntuy_320.webp, _kCFStreamErrorDomainKey=4}\n. @dreampiggy which version that you are using. I am using 4.4.6 \nAnd can you show me your code load webp. \nThank you so much. ",
    "GengJian": "\n. > @GengJian You mean there's a problem with this method\uff1a\n\nNSString * _Nonnull SDDiskCacheFileNameForKey(NSString * _Nullable key)\nCould you provide the URL of your picture?\n\n\u57285.0.0\u7248\u672c\u4e0a\u5fc5\u73b0\uff0c\u7136\u540e\u6211\u4eec\u56de\u6eda\u5230\u4e864.4.5\u7248\u672c\u5c31\u6ca1\u6709crash\u4e86\u3002. > It this reproducable ? Maybe we have to fix it before final release.\n\nYour uploaded image seems down, could you please re-upload your screenshot ?\nAnd, the image url is necessary for us to investigate the issue.\n\n\u57285.0.0\u7248\u672c\u4e0a\u5fc5\u73b0\uff0c\u7136\u540e\u6211\u4eec\u56de\u6eda\u5230\u4e864.4.5\u7248\u672c\u5c31\u6ca1\u6709crash\u4e86\u3002\n\u56fe\u7247\u5730\u5740\u5f53\u65f6\u6ca1\u6709\u5b58\uff0c\u6211\u5c1d\u8bd5\u53bb\u627e\u4e00\u4e0b. ",
    "Calvin-Shen": "@kinarob thanks a lot! it works,\u4f46\u662f\u4e3a\u4ec0\u4e48\u901a\u8fc7github\u4e0a\u9762\u90a3\u4e2aclone and donwlond\u6309\u94ae\uff0c\u5c31\u5728\u4e0b\u8f7d\u4e0d\u4e86libwebp \u548c FLAnimatedImage\u5462?\u975e\u5f97\u5fc5\u987b\u7528\u547d\u4ee4\u884c. ",
    "xuvw": "\nI found you're using SDWebImage 4.4.5 with WebP, is this issue related to #2621 ? Did you try the 4.4.6 version ?\n\nI've tried 4.4.6 but still crash. > @xuvw Is there any WebP image url for testing ? Could you set a exception break point and find the image url (or if your break point have only image data, using lldb to write the image data to temp folder and upload here)\n\nexpr [imageData writeToFile:\"/tmp/1.webp\" atomically:YES];\nWe need to investigate whether this is a bug of libwebp, or the use code of SDWebImage.\n\nthis is crash screen short:https://github.com/xuvw/SDWebImageCrash/blob/master/10_36_37__03_19_2019.jpg. ",
    "gabro": "The reason completedBlock is required is exactly to prevent such kind of API misuse.\nIf you want to prefetch the images so that they will be a cache hit in the future, use SDWebImagePrefetcher instead.\n. This method is meant for downloading an image and doing something with it.\nIf nothing needs to happen when the download has finished, it means you should be using SDWebImagePrefetcher instead.\n. Please note also that this PR only made this design choice explicit: the previous implementation simply bailed out in case of a nil completedBlock, without warning about the API misuse.\n. Agreed: https://github.com/rs/SDWebImage/pull/854\n. @bpoplauschi to you :+1: \n. ",
    "sukeban": "If you add a check for nil here, you can also protect against crashes when the frame is malformed. \ni.e. if (image == nil)\n         continue;\n. ",
    "VinceXu": ".... ",
    "AgentFeeble": "That makes sense, I can't see it causing any issues. And if you detect if it's nil, and replace it with an empty string (instead of asserting), it will cause less issues for users who are new to the library. "
}