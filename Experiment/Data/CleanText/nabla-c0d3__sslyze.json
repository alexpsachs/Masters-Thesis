{
    "nabla-c0d3": "Strange... will look into it.\n. I installed sslyze in /usr/local and didn't have any problems. If this is still a problem and you have more details (such as the permissions on the folder), please reopen this issue. Thanks!\n. I'll look into it but this will be low priority. I can foresee headaches with doing this cross-platform (incl. Windows) and with the fact that sslyze requires a native Python extension (nassl)\n. Pypi doesn't support uploading pre-compiled linux binaries (such as nassl) https://bitbucket.org/pypa/pypi/issue/120/binary-wheels-for-linux-are-not-supported. \nThis makes it impossible for me to distribute sslyze using pypi on Linux since a source distribution of sslyze would require building nassl at install, which requires a very specific version of OpenSSL (that is unlikely to be available on the system).\nI may look at a Linux package manager instead (like apt) but this is pretty annoying.\n. I don't mind having them as separate packages as they already have their own repos. However, I think building nassl from scratch is a non-starter as it needs to statically link a very specific version of OpenSSL and zlib.\n. https://pypi.python.org/pypi/SSLyze\n. Very cool! I'll review this pull request in a couple weeks. Thanks!\n. Thanks! I'll review this in a couple weeks. Touching trust store paths may cause issues on Windows/py2exe builds so I need to do some testing first.\n. This change breaks Windows / py2exe builds so I'll leave this open for now. On which platforms did you have problems?\n. This should be fixed as described in issue #37 \n. It seems to be working... What results were you expecting instead ?\n. It should but I haven't tried so I didn't put it as an officially supported platform... You will have to compile nassl yourself (should be easy): https://github.com/nabla-c0d3/nassl\n. It's the compilation of OpenSSL that fails. Does it compile fine outside of nassl ?\n. The cipher suite preference test is not 100% reliable anyway (and on SSLscan as well) because the server may not have a preference set, in which case it will pick the first cipher within the client's list of supported cipher suites. It's an indication but not something you should rely on. \nWhat does SSL Labs say for the server you're testing?\nThe reason why DES-CBC3-SHA isn't sent within the preference test is that specific servers will not reply at all if the client hello is larger than 255 bytes (due to a bug in a specific brand of load balancers). To reduce the size of the hello, I had to disable some stuff including specific cipher suites.\n. Yes I thought of adding the exact check you described but that's pretty much at the bottom of my TODO list...\n. The test for heartbleed is not 100% reliable and may trigger a timeout. The methodology used by SSLyze is described here: https://blog.mozilla.org/security/2014/04/12/testing-for-heartbleed-vulnerability-without-exploiting-the-server/\n. This was fixed in #217 . @glestel can you post or send me the domain? I am working on a better fix in the raw-tls-parsing branch so I want to try it.. Thanks\n. Dane is now supported by OpenSSL 1.1.0 ( https://www.openssl.org/docs/man1.1.0/ssl/SSL_dane_enable.html ) so it is feasible to add it to SSLyze.. It most likely has to do with the fact that 0.6 doesn't try to find which TLS version the server will accept - it just always uses TLS 1.0 even if the server doesn't support it:\nhttps://github.com/nabla-c0d3/sslyze/blob/ctypes-openssl-wrapper/plugins/PluginCertInfo.py#L354\nYou would have to first try a bunch of versions and figure out which one to use like here in the current version of sslyze:\nhttps://github.com/nabla-c0d3/sslyze/blob/master/utils/ServersConnectivityTester.py#L226\n. I will just switch to canonical cipher suite names, as described in issue #66 \n. Hi!\nYes I've seen that a few times but never had time to figure it out. My guess is that one of the CA certs in the microsoft trust store has expired, although the trust store in sslyze was updated very recently. I'll look into it when I have time.\n. This was fixed in v0.11\n. Thanks! This is now fixed.\n. Yeah I can imagine how annoying the changes to the XML output can be... sorry about that - it shouldn't change that much anymore\n. Yeah, I didn't think of that; I'll change the nodes' names.\n. It's something I should have done a long time ago, but I actually don't have a DTD... I should be able to create one.\n. I created an xml_out.xsd schema which passes all the test cases in ./test/. It cannot handle all possible XML documents generated by SSLyze because of the infinite number of X509 extensions and certificate fields in general. If I missed something important feel free to open a new issue or a pull request.\n. This looks good. The  key comes straight from OpenSSL so there isn't much we can do...\nThanks!\n. Hi,\nI will need more details... it might be that the many connections opened by sslyze killed the proxy.\n. Actually SSLyze does not honor environment variables for proxy configuration. You will have to use the --https_tunnel option (see --help for more details).\n. Feel free to re-open this if --https_tunnel didn't address your problem.\n. I'm pretty open as I've never received any feedback regarding the XML output. Feel free to add more comments.\nThanks!\n. BTW I think cipherSuite is more suitable than cipher ? That's how they're called, since it's a group of crypto ciphers (AES + SHA1 + RSA for ex).\n. I think this is fixed? The only  elements are tlsv1_1 and tlsv1_2, because they are supposed to mirror the command line options (--tlsv1_1 and --tlsv1_2).\n. Thanks - sure can you add nabla.c0d3@gmail.com ? I have no idea how pip works so any help is greatly appreciated! It seems like there is no way to upload a binary build of a package for Linux, which will make things difficult. Can you confirm?\n. Same problem with OpenSSL's s_client on www.yahoo.com:\nRENEGOTIATING\n601:error:14094458:SSL routines:SSL3_READ_BYTES:tlsv1 unrecognized name:/SourceCache/OpenSSL098/OpenSSL098-52/src/ssl/s3_pkt.c:1125:SSL alert number 112\n601:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:/SourceCache/OpenSSL098/OpenSSL098-52/src/ssl/s3_pkt.c:546:\nI think this is the Yahoo way of not accepting renegotiations, but hard to know for sure... As a general rule anything that doesn't work in OpenSSL won't work in SSLyze . \n. I'll flag this behavior as \"renegotiation rejected\" tho.\n. I'm curious on why you need tu suppress stdout? Is ignoring it not an option?\n. This doesn't seem to be really needed and I try to keep the number of command line options as low as possible (and there's too many of them already).\n. True, I can add something like a isSupported attribute and use error when there's an actual error.\n. It is not really the protocol itself but the reason why the connection failed (specifically the layer where something failed): TLS usually means sslyze received a TLS alert, TCP usually means the connection was abruptly closed, etc. The whole string (protocol, error message) is the \"error\" so I don't think there's value in splitting this. Also, the information by itself is not really useful unless you're like debugging an SSL stack.\n. Fair enough :p. They don't all have the \"Protocol / Message\" format... careful when parsing \"Timeout on HTTP GET\"\n. Agreed\n. I will have to add another node because the parent node ( < sslv2 > here) is always the name of the SSLyze command (--sslv2) and I can't touch that. \nSo it would be something like \n<sslv2><sslProtocol version=\"SSL 2.0\" supported=\"True\">[list of cipher suites]</sslProtocol></sslv2>.\nThoughts?\n. Fixed in https://github.com/nabla-c0d3/sslyze/pull/23\n. Agreed\n. Agreed\n. These strings come straight from OpenSSL; I'd rather not try to \"sanitize\" what OpenSSL gives us as there may be lots of algorithm strings, defined somewhere in OpenSSL's code base.\n. The issue was that Cloudflare requires SNI otherwise it doesn't know which hostname the client is trying to talk to.\n. The key size \"bit\" was fixed a few weeks ago, but the dates come straight from OpenSSL and I'd rather not try to sanitize OpenSSL's output. Also, the date in its current format is not ambiguous.\n. Thanks, will look into it\n. Yeah it happens because there are non obvious differences in how Python import modules on Linux, OS X, Windows and Windows/py2exe builds. Getting all these scenarios to work perfectly is not trivial but I'll look into it.\n. Feel free to re-open this if you still have issues.\n. Thanks - do you know of a public jetty server that I could use for a quick test ?\n. Thanks but I was unable to connect to it. Let me know if it's back on and I'll do some testing\n. Hi,\nOn my system (OS X 10.10) I get:\nenv: python2: No such file or directory\nSeems like python2 is not going to work everywhere so I can't make that change.\nThanks,\n. I added this functionality in 0.14.0.\n. Thanks!\n. Hi,\nIs the server externally available so I can do my own testing ? If that's the case can you email it to me? Otherwise I can create a test server myself but it will take more time.\nThanks\n. I just checked and there is some logic in ServersConnectivityTester.py to stop all scans if the server doesn't support starttls so I can't reproduce this.\n. Thanks!\n. Hi,\nI checked the headers returned by https://www.facebook.com and didn't HSTS.\n. Try again when you're not logged in ?\n. I did a quick investigation and www.facebook.com doesn't always send the HSTS header; it is based on the User-Agent received (perhaps so that they don't send the HSTS header for user agents that don't support it anyway). Not really something I can fix, unless I change sslyze's user agent, which doesn't seem like a good idea.\n. Hi,\nThese two domains point to different hosts and most likely have a different SSL configuration:\nWWW.MINT.COM:443 - 172.230.104.222:443\nMINT.COM:443 - 38.81.36.15:443\n. If I remember well file will not work properly in frozen/py2exe builds (since all the files are packed in a .exe)\n. Nice and clean... thanks!\n. Is the server IIS 7 ? If not this is a different issue and I would need a test server.\n. Closing this as I can't reproduce it\n. Yes I will and it sounds like this would actually be useful. Everything is printed at the end of sslyze.py so it shouldn't be too much work.\nI always ask for a good reason before adding a new command line option otherwise we would probably have 60+ options by now.\nThanks,\n. Thanks!\n. Yes I would but it can't add a new dependency to sslyze (like the previous pull request for json). I'll look into it at some point.\nThanks,\n. Unfortunately the build/packaging process for nassl and sslyze is very complex already, especially on Windows. I don't want to add another layer of complexity (ie. optional dependencies/features) just for JSON support...\n. Interesting - can you email me the host ? Email is on my github profile.\nThanks!\n. Closing this as I can't reproduce it\n. Thanks and sounds good. I'll look into this.\n. Thanks for the contribution. What is the use case for this ? As mentioned in your code, the server may be sending back the same cert regardless of SNI, so I'm not sure there's value in checking for this. Also knowing that a server uses SNI doesn't seem to be very useful either, or is it ?\nThanks!\n. There does not seem to be a way to check for SNI without prior knowledge of the names supported by the server (http://serverfault.com/questions/506177/how-can-i-detect-if-a-server-is-using-sni-for-https ). Providing a fake name may or may not work. Hence, this check is too unreliable.\n. Thanks for the contribution. However PluginOpenSSLCipherSuites already gives us this info... why another plugin ?\n. I agree it does apply to chrome_sha1, which will disappear as soon as there's a nice tool that can process the XML results and display them nicely. SSLyze already has too many command line options and I don't want to make it even more complicated.\n. Duplicate of #111 \n. Done in 5ed70d8, thanks to your pull request on nassl.\n. Someone made a pull request for arm https://github.com/nabla-c0d3/nassl/pull/21/commits but maintaining compatibility with OS X, Linux and Windows is already pretty complex and time-consuming. I don't think I have time to add yet another platform.\n. I would definitely merge a pull request on nassl to add support for arm in buildAll_unix; it sounds like it only requires switching the OPENSSL_TARGET ?\n. Closing this here as it is purely an nassl issue, specifically its C extension. I would be willing to merge a pull request on the nassl repo for compiling on an ARM platform; the build script is a lot cleaner now and it should be easy to add it.\n. Closing this as a duplicate of issue #66 \n. Fixed in https://github.com/nabla-c0d3/nassl/commit/1ad33d0b65e84550c2ff15189bf284f2e6a85d01\n. This is most likely caused by a buggy server as OpenSSL is complaining about the server's SSL response.\n. Or a really slow/buggy network...\n. TLS 1.0 is now outdated anyway, so I don't see a lot of value in writing the Poodle TLS check now.. Agreed, will look into it\n. Rather than supporting a specific/arbitrary database technology, this will be solved by using sslyze as a Python module (available in the next version).\n. Since SSLyze 0.13.0, this can be implemented by calling SSLyze directly as a Python module. I don't want to make the list of command line options even more complicated.\n. Same result when using OpenSSL directly:\n$ openssl s_client -connect  www.onlineabs.barclays.co.uk:443 -CAfile plugins/data/trust_stores/mozilla.pem -verify 5\nverify depth is 5\nCONNECTED(00000003)\ndepth=2 /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=(c) 2006 VeriSign, Inc. - For authorized use only/CN=VeriSign Class 3 Public Primary Certification Authority - G5\nverify error:num=20:unable to get local issuer certificate\nverify return:1\ndepth=2 /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=(c) 2006 VeriSign, Inc. - For authorized use only/CN=VeriSign Class 3 Public Primary Certification Authority - G5\nverify error:num=27:certificate not trusted\nverify return:1\ndepth=1 /C=US/O=Symantec Corporation/OU=Symantec Trust Network/CN=Symantec Class 3 EV SSL SGC CA - G2\nverify return:1\ndepth=0 /1.3.6.1.4.1.311.60.2.1.3=GB/businessCategory=Private Organization/serialNumber=01026167/C=GB/postalCode=E14 5HP/ST=London/L=London/street=1 Churchill Place/O=Barclays Bank PLC/OU=Web and Infrastructure Service EXGL-LI06 SHA1\nverify return:1\nMy guess is that it has to do with this: https://community.qualys.com/thread/14754. Basically it sounds like \"VeriSign Class 3 Public Primary Certification Authority - G5\" should not be sent by the server (but removing it from the chain might break the website for older clients?).\n. Which Linux distro and version are you using ? I've tested the pre-compiled packages on Debian 7 only.\n. I just fixed this in nassl (https://github.com/nabla-c0d3/nassl/commit/5c0a57bc831c93d8e9e43f93f5bbe6a32f606623) and uploaded new packages in the release page for 0.11.\nPlease re-download the Linux packages, they should work fine now.\n. What exception are you getting ? Seems to be working fine on my side.\n. Which Linux distro are you using? I'm unable to reproduce this.\n. Just ran SSLyze 0.11 on Ubuntu 15.04, no issues...\n$ uname -a\nLinux ubuntu15 3.19.0-15-generic #15-Ubuntu SMP Thu Apr 16 23:32:37 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n$ python --version\nPython 2.7.9\n. Very interesting - indeed my guess was that the Equifax cert had been removed. \nIf you try to validate the chain with openssl s_client and the GeoTrust certificate as the CA store, the validation still fails because OpenSSL does not stop at the GeoTrust cert and looks for the Equifax one anyway (as explained in the link); this is exactly what I was seeing when trying to troubleshoot this. I didn't know this behavior was specific to OpenSSL but that explains why browsers give a different result when validating this chain.\n. It seems like OpenSSL will fix this in 1.0.2b; when it gets released I can re-build SSLyze with this new version. Thanks @tam7t for figuring this out :)\n. Confirmed this was fixed in OpenSSL 1.0.2d (https://github.com/nabla-c0d3/nassl/commit/836ff18b300d8202a13339230345ef1e0bd210fd).\n. Thanks for the pull request! I ended up fixing this issue in 79cc9ecfd3e747ff5997d17dd9cb3ed038819e77 and wanted to avoid using regular expressions as it would have added the re module as a dependency to SSLyze.\n. Thanks, will look into it\n. This will be fixed when I release 0.12.\n. I can add something like \"--xm_out -\" for outputting to stdout\n. Yes - this is next on my list. It will be pretty easy now that all the results are basically Python dictionaries (since v0.13).\n. This should be a separate tool that parses SSLyze's XML output and displays the list of issues.\n. This was because yahoo's ocsp response doesn't seem to be trusted by SSLyze... this might be another bug but at least the XML output is back.\n. Sure - I'll remove the white spaces.\n. Actually this is what I'm seeing in 0.11:\n<oid-1.3.6.1.5.5.7.1.12>&lt;Not Supported&gt;</oid-1.3.6.1.5.5.7.1.12>\nWhile not very pretty, this is valid XML as \"<Not Supported>\" is actually not an XML node but just a value (which is properly XML-escaped). Closing this as it doesn't seem to be an issue; please re-open if I missed something.\nThanks,\n. This is already detected by SSLyze as it will show the length of the DH parameters for each supported cipher suite.\n. Yeah that's correct, but it is safer to assume that any DH group below 2048 bits can be broken:\n\"We further estimate that an academic team can break a 768-bit prime and that a nation-state can break a 1024-bit prime. \" - https://weakdh.org/\n. Hi,\nThis is too specific to one vendor (Cisco), and it can already be identified with SSLyze as the tool will return an error when trying to negotiate StartTLS if there's a device that's disabling StartTLS.\n. Timeouts might mean that the server can't handle so many connections. Can you try with just one tls version (--tlsv1_1 for example) ?\n. SSLyze was mistakenly detecting a timeout, although a different network error was happening. Thanks for the feedback\n. I tried this scanning this host over IPv6 and it seemed to be working fine. Is it just a display issue in the output ? \nIe. Showing \nsufix.cz -> [2a01:9420:41:100::1]:443\nInstead of\nsufix.cz -> 2a01:9420:41:100::1:443\n. It works for me over IPv6:\n```\n$ python sslyze.py --certinfo=basic sufix.cz\n[...]\nCHECKING HOST(S) AVAILABILITY\n\nsufix.cz:443                        => 2a01:9420:41:100::1:443\nSCAN RESULTS FOR SUFIX.CZ:443 - 2A01:9420:41:100::1:443\n\n[...]\n```\nAre you sure you can connect to the server from your host ? Do you have a lot of simultaneous connections open?\n. Thanks!\n. Most likely in plugins.PluginBase.PluginResult ? This class gets instantiated as soon as a plugin task is over in order to pass the results around.\n. If you want something less sneaky, you could also do it at the end of sslyze.py\n. Most likely September.\n. I stopped providing 64 bits builds for Windows (they're really hard to compile). I will try to release 0.12 asap.\n. thanks :)\n. The server should be sending back all the intermediate certificates along with the leaf/server cert. If you have to manually add it via -CAfile, it means the server is misconfigured; when SSLyze tries to build the chain, it can't as this intermediate cert is missing. Browsers still work because they cache all the intermediate certs they see (specifically as a workaround for misconfigured servers).\n. It's not really the intent of ca_file to use the other trust stores for validation (as it is meant to validate against a custom store). Here, the server is misconfigured so I think SSLyze returning a validation error is acceptable.\n. Debugging invalid certificate chains is always a bit tricky. You would have to look at the error message returned by SSLyze (which is one OpenSSL returns): \"unable to get local issuer certificate\". AFAIK this one means one of the two following things:\n- The CA/anchor cert is not in the trust store\n- An intermediate cert is missing so the full chain can't be built\n  Somewhat unrelated but certificate validation will be slightly better in the next version as I'll update to OpenSSL 1.0.2 which performs certificate validation in a way that's closer to what browsers do.\n. This seems like a lot of work and I think it's just better (and easy anyway?) to return the proper certificate chain to the clients, who also may not be browsers (mobile Apps, etc.). I will close this issue for now but if you have time, I would be curious to know what SSL Labs (https://www.ssllabs.com/ssltest/) says about the chain (valid VS invalid).\nThanks!\n. The corresponding commit in nassl is at https://github.com/nabla-c0d3/nassl/commit/1d4915228fde0da9040e7165fa65aedbd0ae6984\nThanks for the feedback!\n. This seems very cool as a lot of people have been asking about HTML reports! I will have a look as soon as I some free time.\n. Hi,\nWhy do you want to specifically disable these errors, instead of ignoring them?\n. For now I will not implement this as I can see a use case for having the validation result of both a custom trust store and the regular ones; if more people ask for this I will look into it. Thanks for feedback!\n. Awesome, thanks!\n. Fixed in  bfd7ea4 ; the province name in the certificate is Virginia \\x08\\x08, which contains illegal characters for XML (\\x08).\nThanks!\n. yes!\n. Thanks for the feedback\n. Thanks! fixed in 010ea84d7611bcd244de0b01406032d72db3b152\n. Hi - thanks for doing this. Using the OS' OpenSSL is not something I plan on officially supporting (I've tried before and there are too many moving parts). However, the current version of nassl should work with the 1.0.2 branch of OpenSSL. Some checks might still fail if OpenSSL was not compiled with compression enabled. Do you need more information ?\n. Using the system library will definitely no longer be supported because of #116. Nassl is now using a fork of OpenSSL 1.0.2e in order to get extra features (but it's still binary compatible with 1.0.2e). \nHowever, I have finally put nassl on PyPi and will add SSLyze soon, meaning that it can be installed by just using pip install sslyze. That should enable users to get it on Gentoo and it should solve your packaging problems, I think ?\n. Just to clarify, what do you mean by cloning it with a different name ? In the build script for nassl ?\n. Yes, I did get rid of the OpenSSL fork. Right now nassl uses:\n\nZlib 1.2.11\nOpenSSL 1.0.2e\nOpenSSL 1.1.1 beta\n\nI honestly don't have time to figure out how to build the whole thing using system libraries instead of source. \nIs there anything on your side that prevents building from source? All gets statically linked into nassl and the final binary is pretty small (only a few mB), so it should be fine? It also avoids having to install two different versions of OpenSSL on the system just to run nassl.. That's one of the problems with using the systems libraries. Nassl needs to be compiled with both exact versions of OpenSSL: 1.0.2e and 1.1.1 beta. Any other version will not work, and both are needed. \nAll in all I have no plans to support building with system libraries - it is too unlikely to even work due to how different nassl's use case is.. There's an exponential backoff algorithm where it will keep on trying to connect a few times (4 by default) if a timeout happened. This is why the whole thing takes 60s. You can control the number of retry attempts using --nb_retries.\n. Thanks a lot ! This is something a lot of people have been asking for.\n. Yes, DNS resolution seems wrong since google.com is pointing to localhost - check your computer's DNS settings and host file as this is unrelated to SSLyze.\n. Hi,\nThe first cipher list is only used to do a connection to see if the server is up and running.\nMy reasoning is that if the server doesn't support the \"usual\" cipher suites, no normal clients can connect to it which would seem like a bug anyway.\nWhat do you think ? What's the use case for this server?\nThanks\n. Yeah that makes sense - will make the change.\n. Hello,\nNot sure what Qualys is doing but a manual check confirmed SSLyze's output:\n```\ncurl https://fox-it.com -v\n Rebuilt URL to: https://fox-it.com/\n   Trying 185.6.85.2...\n Connected to fox-it.com (185.6.85.2) port 443 (#0)\n TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n Server certificate: www.fox-it.com\n Server certificate: GlobalSign Extended Validation CA - SHA256 - G2\n* Server certificate: GlobalSign\n\nGET / HTTP/1.1\nHost: fox-it.com\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 301 Moved Permanently\n< Server: nginx\n< Date: Sun, 13 Dec 2015 09:35:35 GMT\n< Content-Type: text/html\n< Content-Length: 178\n< Connection: keep-alive\n< Location: http://www.fox-it.com/\n< X-Frame-Options: SAMEORIGIN\n< X-Content-Type-Options: nosniff\n<\n\n301 Moved Permanently\n\n301 Moved Permanently\nnginx\n\n\n```\n. Hello, \nIt's already there, as you mentioned. Presenting a \"curated\"/easy-to-read list of SSL issues and information is not really part of SSLyze's goal, as it should only return \"raw\" information about the server's configuration - trying to keep things simple. \nA wrapper that parses the XML output would be better for this, and it would only take a few lines of code.\nThanks\n. Hi,\nThanks for the bug report - can you send me the hosts ? My email is on my github profile.\n. Fixed in aec1a4357c4242b034cb547146ebeb6a79503121\n. Cool! I don't have specific plans but it would be something that only returns output when there is an issue with the server's configuration. It would be different than the current output, which just kind of returns everything. \n\nAlso, you should not use the XML file but instead directly process the PluginResult objects directly from Python (these objects did not exist at the time the issue was created). It will be much easier and cleaner.. This is issue is no longer relevant. The CLI output was significantly improved (it usually says VULNERABLE or OK for each issue), BEAST is no longer a threat (https://blog.qualys.com/ssllabs/2013/09/10/is-beast-still-a-threat) and the best mitigation to POODLE is to disable SSL 3.0 and TLS 1.0. Yes - the fix will be released in 0.13. It happens when the server requests a client certificate. Thanks for looking into it.\n. Fixed in 5ed70d8.\n. Thanks for figuring this out! I will probably go for approach 2 because being able to pass a chain (instead of a single cert) was a feature request. I'll also figure out the password issue.\n. If you can please try the fix (you will need the new nassl) and let me know if run into issues. Thanks!\n. Can you try the latest master and let me know if it improved the output (back to how it was) ?\nThanks!\n. It should be fixed now\n. Pushed some of your changes, but I need the exact exception returned by Netty so I can catch it in the plugin. Do you have the error message you've been seeing? \nCatching all exceptions and returning ERROR would hide other issues (no internet connection, server is slow, etc.). Thanks!\n. Can you send me a URL so I can reproduce it?\nThanks\n. I tried a scan on a few IIS servers with the latest sslyze and couldn't reproduce this.\n. For now I will use this fork: https://github.com/PeterMosmans/openssl\n. Did you try with the latest commit of the fork ? It has some fixes for SSL_Shutdown (https://github.com/PeterMosmans/openssl/commit/64193c8218540499984cd63cda41f3cd491f3f59) ?\n. The fork causes some problems ( https://github.com/PeterMosmans/openssl/issues/37 ) so I will revert back to the official OpenSSL for now\n. Also, OpenSSL 1.0.2g disables SSLv2 and has removed SSL2 weak ciphers, so it can't be used either.\n. That's the plan - I started this work some time ago on the following branch in nassl https://github.com/nabla-c0d3/nassl/tree/double-trouble\nit will use both OpenSSL 1.0.1e and the latest 1.1.0 version.. Closing this as a duplicate of #211. Can you send me the host's URL (via email)?\n. You are probably using nassl 0.12 which is not compatible with bleeding edge SSLyze. If you want to do some testing, please build nassl (bleeding edge) first; it should be straightforward on a Linux or OS X system.\n. It looks like F5 is not returning the right TLS alert (it should be \"inappropriate fallback\")... Not the first time they're doing things their way. I'll think about how to handle this.\n. Yes this sounds good - let's start with what you described and add to the result to the output as something like this:\nCipher suite preference: Server order / Client order\nSorting the accepted_cipher_list seems very tricky if the server uses its own order so I don't think it's worth implementing it.\n. Awesome!\nTo answer your question, there is no need to add --check_server_preference, let's just always check (to avoid making the command line even more complex).\nFor some reason GitHub isn't letting me assign this issue to you (your name does not show up in the Assignees list), but I think it will be possible once you open the pull request?\nThanks!\n. Closing this as a duplicate of #111\n. Thanks\n. This looks very useful - will merge once I've had time to look at your changes. Thanks!\n. I haven't had time to look into what SLOTH is but my rule for plugins is that I will reject plugins that redo the same thing as existing ones, but provide a different UI/output. \nOne example would be a new plugin that checks a specific field in the server's certificate (redundant with CertinfoPlugin) and then displays some text in the output about an issue with this field. \nProviding a better output is already tracked in #111.\n. Sounds good - yeah that sounds definitely like a valid, new plugin. This might require some changes to https://github.com/nabla-c0d3/nassl to add some new OpenSSL bindings for the signature_algorithms extension.\n. Thanks\n. Hi,\nThe change that happened here is that in 0.13.x, SSLyze will try all possible ciphers and ssl versions at the very beginning, in order to find which ones work with the server. If none of them work, it means that SSLyze is basically unable to complete an SSL handshake with the server and there is no point in actually trying to scan it (with --sslv3 and other commands), hence the ServerConnectivityError.\n. Can you try with the master branch ? This might be a duplicate of a bug I fixed recently.\n. I am waiting for a few more bugs to surface so I can fix them, but it should be soon.\n. It's released now - let me know if it fixed the bug.\n. Thanks for looking into this; closing this issue as a duplicate of #139. \n. What kind of server are you scanning ? Are you using client certificates ?\n. I am unable to reproduce this; which version of Windows are you using ? Are you running the 32 bits or 64 bit Python interpreter ?\n. Fixed in https://github.com/nabla-c0d3/nassl/commit/86472251002da685871f40e2ed13537f252268e8#diff-f52ec599d1b6e820081949c345efa3a1L548 and nassl 0.13.4.\n. No - because of the C extension.\n. http://security.stackexchange.com/questions/76993/now-that-it-is-2015-what-ssl-tls-cipher-suites-should-be-used-in-a-high-securit/77018#77018\n. Good catch and analysis - thanks! I'll remove it.\n. It might be useful to add the Android \"stock\" trust store.\n. Yeah I saw - it makes having the AOSP trust store in SSLyze a lot more useful.\n. Why platform are you using? Windows ?\n. Can be reproduced by running (on OS X / Linux but not Windows):\npython sslyze_cli.py --hsts billing.mayngames.com\n. Hi,\nThanks for the link - I hadn't heard of this project and it is very interesting. However, SSLyze is about finding configuration issues affecting SSL servers; finding errors within X509 certificates, while very related to SSL issues, is a whole different (and complex) beast. Hence it is better to have that in a separate tool.\nThanks!\n. It is Python 2.7 - Python3 support is not on the roadmap.\n. The biggest part is the C extension, which needs to be ported to Python 3: https://github.com/nabla-c0d3/nassl\n. If the work of porting is done, I can try maintaining sslyze/nassl for Python 3. Nassl is especially a concern because Python 3 support doubles the number of builds/platforms I need to validate every time I make a release, but I'm willing to give it a try.. I've completed Python 3 support for the nassl C extension ( https://github.com/nabla-c0d3/nassl/pull/48 ). SSLyze is next... \nI will most likely only support Python 3.6 on macOS and Linux (not Windows until I fully drop Python 2 support, which could be very soon).. It's ongoing, you can see the progress in the Python3 branch: https://github.com/nabla-c0d3/sslyze/tree/python3. It is very close to being done. Once I release the new version of nassl and merge the python3 branch into master (probably today) you will be able to test it,. It's on master now.. It's released.. Thanks for looking into this! I am guessing it is the OpenSSL fork nassl is now using ( #116 ) that does not work well on Windows. I might have to revert to OpenSSL 1.0.1e.\n. Fixed in https://github.com/nabla-c0d3/nassl/commit/0ff01d0b7ff099c613f189804cdd81be7c325d74 and nassl 0.13.4.\n. @fabian-z Let's move the discussion in #116 here as it relates to this issue. I'm not able to reproduce this on Linux (Debian) 64 bits with the OpenSSL fork. Can you confirm that you are seeing this issue? Which Linux are you using?\nThanks!\n. This error with the latest 1.0.2 is most likely because they've removed the LOW cipher suites and SSLv2 starting with 1.0.2f or g. These can only be re-enabled with special compilation directives (and I don't think SSLv2 can be re-enabled ever), hence the \"no cipher match\" error. \nBut it seems like you are getting the \"routines:SSL_shutdown:shutdown while in init\" error too so this might be due to a change that was introduced in 1.0.2f or g?\n. Thanks for checking - I will look into this when I have time.\n. Yes, I tried that too yesterday :). SSLv2 was removed for security reasons.\n. Here it is: https://github.com/openssl/openssl/issues/710\n. Yes - sorry about that!\n. Hi,\nWhat prevents you from updating? I did several changes/commits in v0.13 to handle this specific scenario.\n. It is surprising because v0.12 was for Python 2.7 only. How did you get it to run on 2.6? Regardless, the fixes for client certificate handling are both in https://github.com/nabla-c0d3/nassl and sslyze and in several separate commits. I don't think I use anything that's specific to 2.7, so your best bet would be to compile nassl for 2.6 (which should be easy on Linux) and use the current version of SSLyze.\n. Yes, look at the --https_tunnel command\n. Sure - this is more of a UI issue as SSLyze already checks for that. Closing this as a duplicate of #111.\n. Hello,\nI am unable to reproduce this when scanning www.yahoo.com:443; where are you scanning this host from ?\nThanks!\n. I am still unable to reproduce this so I tried to commit a \"blind\" fix based on what I think the problem is. Can you test the current master branch to see if the fix solved that issue ? Thanks!\n. Hi,\nNo that's not possible right now. Do you know what the limit is for Courier-MTA ? Can you try setting DEFAULT_MAX_PROCESSES_NB and DEFAULT_PROCESSES_PER_HOSTNAME_NB to 1 in this file: https://github.com/nabla-c0d3/sslyze/blob/master/sslyze/plugins_process_pool.py#L15 . Does it fix the issue?\nThanks!\n. Good catch... Fixed in https://github.com/nabla-c0d3/sslyze/commit/83ec8d9f63c4b1a41930e90c9953c342757bb5fb\nThanks!\n. Do you know of a public server which I can use to reproduce this issue? You could email the hostname to me if that's the case. Otherwise it will be difficult for me to troubleshoot this issue.\nThanks!\n. Thanks!\n. Fixed in https://github.com/nabla-c0d3/sslyze/commit/3124a2e6eb560564daa2cbdbe1f29c1c3d62deef. Thanks!\n. The server is not able to handle the many connections initiated when running --regular. In that scenario it is better to run each commands separately.\n. The certificate seems trusted when running:\n$ python sslyze_cli.py --certinfo_basic www.godaddy.com\n. It's there: https://github.com/nabla-c0d3/sslyze/blob/master/sslyze/init.py#L4 and also in a git tag (https://github.com/nabla-c0d3/sslyze/tree/0.13.5)\n. Thanks @rdegraaf :). \n@Theory5 it is not feasible currently but you could write your own custom logic by either using sslyze as a Python module (you can look at api_sample.py) or by parsing sslyze's XML output.\nGood luck!\n. The check already ensures that if the certificate is signed with SHA1, it must not be in the (Mozilla) trust store ( https://github.com/nabla-c0d3/sslyze/blob/master/sslyze/plugins/certificate_info_plugin.py#L352 ). \nDo you have any examples of SSLyze reporting the wrong result? Google is special because multiple certificate chains can be built (via cross-signing); based on the trust store used, the SHA-1-signed CA can sometimes be an intermediate. You can also see this on SSL Labs: https://www.ssllabs.com/ssltest/analyze.html?d=www.google.com&s=2607%3af8b0%3a4005%3a805%3a0%3a0%3a0%3a2004&hideResults=on.\nThanks!\n. The GeoTrust Global CA is not self-signed; it is signed by the legacy Equifax CA certificate that will expire in 2018. Hence, there is a certificate chain where GeoTrust Global CA is not the root certificate. Still, I think SSLyze should report the same thing as Firefox (since it uses the same trust store).\n. Yes - this is what the next version will do.\nThanks!\n. I am unable to reproduce this and --ca_file works fine on my machine. Are you sure the file actually exists?\n. Thanks - I updated the trust store and now the certificate chain is trusted.\n. Yeah - it is not great that it broke backward compatibility, but the name sslyze.py would clash with the sslyze module/folder (newly added in 0.13 for using SSLyze directly from Python).\n. Thanks for the report - do you have a specific hostname that is causing this issue?\n. I meant the full hostname so I can reproduce the issue by scanning it. It is most likely some kind of utf8 character returned somewhere (probably the server's certificate).\nThanks!\n. Ok - can find you one that triggers the bug and post the output?\n. This was caused by certificates with no Common Names in the Issuer field; it should work now but let me know if you still see this issue.\nThanks!\n. Thanks!\n. The subject alternative name returned by OpenSSL has an ambiguous field, which confuses SSLyze when parsing, it leading to an iit@va.gov (invalid) XML tag:\nX509v3 extensions:\n        X509v3 Subject Alternative Name:\n            email:gerald.mcmanus@va.gov, iit@va.gov\nIf there are multiple emails, it should be:\nemail:gerald.mcmanus@va.gov, email:iit@va.gov\nIt is probably because the actual field in the certificate is gerald.mcmanus@va.gov, iit@va.gov. I'll think of a solution when I have time.\n. Fixed in https://github.com/nabla-c0d3/nassl/commit/2d33bc06220967cd9bbdb0db28221e4c2ca59022 . This will be released with nassl 0.14.2.. Thanks!\n. Thanks!\n. As far as I know this is a problem with your pip/python installation (perhaps a conflict between Python 32 and 64 bits?). SSLyze does nothing special in its setup.py that could lead to this error.\n. Duplicate of #160 - will be fixed in the next release.\n. Awesome, thanks!\n. Duplicate of #13 . Thanks! The issue here has to do with the version of OpenSSL I'm embedding in nassl, but haven't had time to look into it.\n. You cannot use --regular for non-HTTPS servers. Try instead --starttls=smtp --certinfo_basic?\n. It wasn't - thanks!\n. Yep - Let's Encrypt is only trusted with Java >= JDK 8u101 ( https://letsencrypt.org/docs/certificate-compatibility/ ). The previous version was using the default macOS Java installation, which might have used a trust store customized by Apple with the Let's Encrypt cert in it.\n. The user agent should now have SSLyze in it.\n. That key is internal to SSLyze and is getting removed ( #173 ).\n. Thanks. I think it's in SSLyze so please leave it here. Same issue with the XML output:\n\nTraceback (most recent call last):\n  File \"sslyze_cli.py\", line 689, in \n    main()\n  File \"sslyze_cli.py\", line 596, in main\n    xml_output_list.append(_format_xml_target_result(server_info, result_list))\n  File \"sslyze_cli.py\", line 413, in _format_xml_target_result\n    target_xml.append(plugin_result.as_xml())\n  File \"/Users/nabla/Documents/github/sslyze/sslyze/plugins/certificate_info_plugin.py\", line 525, in as_xml\n    cert_xml.append(_keyvalue_pair_to_xml(key, value))\n  File \"/Users/nabla/Documents/github/sslyze/sslyze/plugins/certificate_info_plugin.py\", line 710, in _keyvalue_pair_to_xml\n    key_xml.append(_keyvalue_pair_to_xml(subkey, value[subkey]))\n  File \"/Users/nabla/Documents/github/sslyze/sslyze/plugins/certificate_info_plugin.py\", line 694, in _keyvalue_pair_to_xml\n    key_xml = _create_xml_node(key, value)\n  File \"/Users/nabla/Documents/github/sslyze/sslyze/plugins/certificate_info_plugin.py\", line 687, in _create_xml_node\n    xml_node.text = value.decode(\"utf-8\").strip()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/utf_8.py\", line 16, in decode\n    return codecs.utf_8_decode(input, errors, True)\nUnicodeDecodeError: 'utf8' codec can't decode byte 0xd0 in position 55: invalid continuation byte\n. Fixed by 876b340763f9581e62e9d168079c27cf2feb7742. This should only affect 0.14.1 - will fix it soon.\n. Use SSLyze as a Python module, store the results in a dabatase.\n. Thanks! It should work now.. This is by design: SSLyze is an SSL/TLS scanner and is not specific to HTTPS (as it supports other protocols). Hence the \"input\" is a host:port, not a URL.\n. Hi,\nIt would be nice indeed; unfortunately there is no easy way of doing this in a way that will work on all supported platforms (especially Windows). It could be added in a separate Unix-only wrapper ( #111  ).. Nice and thanks! Will look at it some time next week.\n. It looks good! Please make the following changes and I will merge the PR:\n Switch the result's attribute from cipher_order_pref (which can be server or client) to follows_client_cipher_suite_preference (which can be True or False) and document it in the docstring. It will make the result even simpler to process.\n Same thing for the XML output.\n* If you have time (but no worries if not), please find a server that follows the client's order, and one that doesn't, and use them to have a test for each value. This will ensure your check fully works.\n\nThanks!. Thanks!. FYI and just in case you have interested, I did some refactoring of some of my code and some of your code: https://github.com/nabla-c0d3/sslyze/commit/882f6e37a3ef6b0dd94411a2fb0d683125443df3 .. Hello,\nI think SSLyze and SSL Labs are saying the same thing: \n The server will let a client start a renegotiation\n The server supports secure renegotiation\nHowever SSL Labs has an extra check where it actually tries to do a client-initiated insecure renegotiation although it already knows that the server supports secure renegotiation. I'm guessing it is to make sure that insecure renegotiations are really blocked.. The hasSha1SignedCertificate tag is meant to let you know if the server's certificate chain will cause problems with the deprecation of SHA1 in browsers ( https://blog.qualys.com/ssllabs/2014/09/09/sha1-deprecation-what-you-need-to-know ). That's the case if a certificate in the chain has been signed with SHA1 but it does not apply to the anchor/CA certificate. Hence, SSLyze needs to first build the verified chain in order to know which certificate is the anchor certificate (which can't be done for self-signed certificates).\nIf you're only interested in finding any SHA1 certificate, you can directly read the certificates' attributes using --certinfo_basic .. Thanks for the report. Hello,\nYes - I am cleaning up the API to use sslyze as a library and will also generate documentation so it's more accessible. This will all be done for the next release.. Are you running the tests on Windows 64 ? The last one will always fail on that platform. The first two are connectivity issues and I can fix the third one.. The tests should be fixed now - can you confirm?. Thanks for looking into this. \nI can't support older versions of macOS. \nI will release a new version with the fix for test_not_trusted_by_mozilla_but_trusted_by_apple (but still want to a wait a bit to see if there are other bugs). The connectivity errors are because the box failed to connect to the server; it is the downside of using live hosts in the test suite.. I only test SSLyze on the latest version (so right now it would be macOS Sierra).. The 16632 runs only failed because of a connectivity issue, so it looks like SSLyze might work fine on Yosemite / El Capitan? Not sure what happened with 16633 (but it looks like it was a custom build?).. Can you try again with 1.1.0? Feel free to re-open this issue if it still fails.. Does it still happen if you instantiate the SynchronousScanner outside of the loop? Do you have numbers? How long does it take and how much memory?. The concurrent scanner uses multiple processes, so the memory leak may not be as obvious, but the code for scanning is exactly the same. I will get rid of cert.as_dict() in the next release (for other reasons) so that should help.. So just to recap, you are running the \u2014tlsv1 (and similar) commands against a very long list of host names, and the process gets killed when it runs out of memory?. I did some testing to find memory leaks:\n\nWhen testing connectivity- https://gist.github.com/nabla-c0d3/4d08bf2cdebfef2b75aea493eab09817\nWhen using the synchronous scanner - https://gist.github.com/nabla-c0d3/fc633194f7a8509a7e68c931f1fbc471\nWhen doing an SSL handshake - https://gist.github.com/nabla-c0d3/02ffe4b6e34c5248a343f24af69ffcf3\n\nNone of these tests showed any obvious leaks so I am guessing it is happening in the C code, within nassl. I opened an issue there: https://github.com/nabla-c0d3/nassl/issues/21. I fixed some big memory leaks in nassl - the fixes have been released as part of nassl 1.0.2. Memory usage should be a lot better now.. Good question. This was done for historical reasons and I don't quite remember exactly why we picked GPLv2.\nI would say that my intent when it comes to the choice of a license is to prevent companies from being able to extend/fork SSLyze and use it in their own commercial products (standalone tool or Saas), without contributing back to the original project. This specifically has happened with some other open source projects I've worked on, and I don't want it to happen with SSLyze. Using the exact same, unmodified library is fine tho. \nIt seems like the LGPL license works well for these kinds of restrictions?. Yeah your use case is fine. I'll keep thinking about the proper license to use for what I want, but it will not be something that prevents what you described (Saas that uses the unmodified library).. I ended up switching the license to AGPL. This still allows using the unmodified library in the Saas case.\nThanks for starting this useful discussion!. You said that AGPL \"pretty much kills any commercial use of AGPL'd software\", but from my understanding that's only true if the library gets modified (source: https://news.ycombinator.com/item?id=1273231).. Sure - this means that the previous versions of SSLyze cannot be re-licensed, which makes sense and I am fine with it.\nThanks!. Yeah I noticed too but from what I read, it does not seem to apply if the others's contributions were very minor. In the case of SSLyze, the number 2 contributor has 300 lines, where if have 300 000.. Thanks for double checking tho. Following this discussion, I spoke to a lawyer and he confirmed my understanding of the various licenses I could use. Hence, I am going to stick with AGPL; I am fine with SSLyze being used as it is for any purpose, but I don't want companies to build commercial products (Saas or not) by modifying the tool/library and never contributing back.\nThere's some uncertainty as to what \"derivative work\" means in the context of AGPL. To clarify and as stated above, my intent is the following: if you modify the core SSLyze/nassl source code, the goal is that you have to contribute those modifications back to the community. However, it is NOT required that applications using SSLyze/nassl be published. This is the same intent as MongoDB's: https://www.mongodb.com/blog/post/the-agpl.\nAs @c0r0n3r said, switching to a new license is also not a trivial thing to do because of the multiple contributors outside of me. What counts as copyright-able work is not a clear cut (and can never be) but I've spent time looking at the repo and the commits, to try to see if there is any code I need to remove in order to be able to change the license myself. I am describing this process here so it's documented as I will forget. Most of the contributor's code was removed over the last few years as I was refactoring the code base and removing a lot of code. The biggest / most unique contribution I found was adding the ability to extract the Diffie-Helmann details of a cipher suite, which I removed not too long ago for other reasons (https://github.com/nabla-c0d3/nassl/commit/ea5c3612a4d999dda570a32adaba6236cd11a618).\nWhen looking at the current tip of master, other contributors have very few lines of code:\n$ git fame\nTotal loc: 69608\n+-----------------------+-------+------+------+----------------+\n| Author                |   loc | coms | fils |  distribution  |\n+=======================+=======+======+======+================+\n| Alban Diquet          | 69408 |  799 |  123 | 99.7/69.8/83.7 |\n| Alban D.              |    46 |   72 |    3 |  0.1/ 6.3/ 2.0 |\n| Raheela Khan          |    32 |    3 |    2 |  0.0/ 0.3/ 1.4 |  <- Committed after the license change\n| Richard Godbee        |    24 |    1 |    1 |  0.0/ 0.1/ 0.7 |\n| lxcode                |    19 |    2 |    1 |  0.0/ 0.2/ 0.7 |\n| tykkz                 |    17 |    5 |    2 |  0.0/ 0.4/ 1.4 |\n| David Guillen Fandos  |    14 |    1 |    1 |  0.0/ 0.1/ 0.7 |\n| Szil\u00e1rd Pfeiffer      |    13 |    5 |    2 |  0.0/ 0.4/ 1.4 |\n| Alban D               |    11 |  192 |    3 |  0.0/16.8/ 2.0 |\n| Cyrill Bannwart       |     6 |    6 |    1 |  0.0/ 0.5/ 0.7 |\n| Postmodern            |     4 |    3 |    1 |  0.0/ 0.3/ 0.7 |\n| Russell Keith-Magee   |     4 |    1 |    1 |  0.0/ 0.1/ 0.7 |\n| Gerwout van der Veen  |     3 |    2 |    1 |  0.0/ 0.2/ 0.7 |\n| Hung Nguyen Viet      |     3 |    2 |    1 |  0.0/ 0.2/ 0.7 |\n| C\u00e9dric Jeanneret      |     1 |    2 |    1 |  0.0/ 0.2/ 0.7 |\n| Daniel Gopar          |     1 |    1 |    1 |  0.0/ 0.1/ 0.7 |\n| bcyrill               |     1 |    1 |    1 |  0.0/ 0.1/ 0.7 |\n| Wolfgang Karall       |     1 |    2 |    1 |  0.0/ 0.2/ 0.7 |\n| Ari Rubinstein        |     0 |    1 |    0 |  0.0/ 0.1/ 0.0 |\n| BlueC0re              |     0 |    2 |    0 |  0.0/ 0.2/ 0.0 |\n<more contributors with 0 lines>\nThere will always be room for debate but with these numbers, I feel reasonable about the license change.. This is the last plugin that I haven't updated for Python3 yet. The whole python3 branch is still under development as you can tell. \nOnly had one question in the PR and then I'll merge it. Thanks for the help!. Thanks! \nWere you able to confirm that the HPKP pin is the right one? Depending on how it works public_bytes() may or may not return the exact fields needed (although it should).. Thanks. Thanks - this was a timing issue.. Thanks!. This is already fixed on master; will close this issue when I release 1.1.0.. It's released.. This is already fixed on master; will close this issue when I release 1.1.0.. It's because this domain is a bit flaky (but usually works) - I might have to find a different one.. Hello,\nYou need to update pip and setuptools.. pip install --upgrade setuptools. I will add it back once I add support for Python 3 on Windows (next release).. This is fixed in 1.1.3 https://github.com/nabla-c0d3/sslyze/releases/tag/1.1.3. I will add experimental support for TLS 1.3 by extending https://github.com/nabla-c0d3/tls_parser , instead of leveraging OpenSSL (which right now cannot be upgraded due to #116 ) ; a test server is available at https://tls13.crypto.mozilla.org/. The plan is now to embed another version of OpenSSL that supports TLS 1.3, as described in #116.\nI started this work some time ago on the following branch in nassl https://github.com/nabla-c0d3/nassl/tree/double-trouble. Thanks! When I have some time I will add a test for this and merge your PR..  I don't think the port number has any impact on the results (except that the web server might be different), but it looks like this is a duplicate of #217 ? @ericrange can you confirm?. @ericrange can you try with the fix I pushed for #217 ?. I just had a discussion about this on the pyca IRC channel and the certificate is bad; the character \":\" in \"https://\" is not allowed in a DNS entry of the SubjectAltName. Other tools may be able to parse it but it is wrong, and the cryptography library just rejects it as bad input. \nNot much I can do on my side, but I am also fine with rejecting certificates that don't follow the (very loosely-defined) spec.. Yeah it was a different error, that I just fixed.. @dylanjbarth the issue you are running into is #286 ; the server you sent me dies under the number of concurrent connections initiated by SSLyze. It will be fixed in the next release if you use --slow_connection when running the tool. . Unfortunately we need the verified chain because the SHA1 check is only useful for anchor and leaf certificates; a SHA1-signed root certificate is not a problem.. I don't think all root certificates have \"root\" in their name, and some non-root certificates may have it. . Unfortunately some of the root certificates in the store have been cross-signed (as a way to transit to a new cert) and then put in the store so their subject and issuer is actually not the same.\nThe code in your fork is what I had initially in SSLyze (about a year ago), and I had to change it to what we have now because of all the wrong results.. Yes - in the case of SSLyze, it's the same as building the verified chain.. This wouldn't work because there might be extra certificates sent by the server that are actually not needed to build the chain.\nWhat about this instead: try to build the verified chain by swapping the order of certificates after the leaf cert (at index 0).. It will appear in one of the pathValidation nodes, with a preference for Mozilla's. If there is no verifiedCertificateChain, it means that the chain could not be built using any of the trust stores. . I have removed the position attribute because it's ambiguous in most cases. The received and verified chains XML nodes now follow the same order as what the documentation states.. Instructions are at the bottom of the README. This is useful - just hadn't had the time to look into it.. This is something that will be in SSLyze eventually.... On Linux the cryptography package does not require any dependency (https://cryptography.io/en/latest/installation/) so you should not have to install libss-dev if you followed the instructions in the README. You only need these dependencies if you are trying to build cryptography but that's a more advanced use case.  \nThe typing module is specified in the requirements file so that should be fine too. \nHence I don't think there's anything missing from the README?. Yes you are right. This seems like a niche feature and  support for HTTP proxies should be more than enough, so there is no plan to support SOCKS proxies.. But is this OpenSSH proxy feature a SOCKS proxy? And why not use a normal HTTP proxy (which is already supported by SSLyze)?. This could be used https://github.com/Anorov/PySocks. UDP is not supported and is not on the roadmap.. What's the certificate on localhost:443?. I am not able to reproduce this. Which version of the cryptography package are you guys using?. This is caused by very old versions of cryptography.. This looks an issue with your pip setup.. Hello and thanks for the PR.\nUnfortunately it is not possible to check for SHA1 certificates if we haven't been able to build the verified certificate chain; it's all explained here: https://github.com/nabla-c0d3/sslyze/pull/218. Hello,\nI am not able to reproduce this. Can you try with what's on master instead of the version on Homebrew?\nThanks. I tried with homebrew and I am still unable to reproduce this.. It could be that you are hitting a different Cloudflare IP/server based on where you are connecting from. What is the IP address that you see when it fails?. Thanks, I am now able to reproduce it.. What prevents you from parsing the PEM certificate in the language you're using to process the XML output?. Hello,\nThanks for the pull request - however this is a very specific feature which will bloat the SSLyze command line tool even more, and that I am not ready to maintain. \nI would suggest using SSLyze as a library or generating a text file with all the IPs in it (to pass to --targets_in ), instead of supporting this directly in SSLyze. \nHence and unfortunately I will not merge the PR.. Python 3.6 is not supported yet on Windows. It will be in the next release.. The master branch of SSLyze should already support Python 3.6 on Windows (but I haven't done any testing yet :p ). This is fixed in 1.1.3 https://github.com/nabla-c0d3/sslyze/releases/tag/1.1.3. Did you build nassl yourself? . Re-opening this as SSLyze should never use the system's OpenSSL library - it embeds its own custom version of OpenSSL.. @Jackeriss just to confirm, all you did was pip install sslyze ?. Nassl now has binary wheels for Linux ( https://legacy.pypi.io/pypi/nassl ) - @Jackeriss can you try:\npip uninstall nassl sslyze\npip install sslyze\nAnd let me know if SSLyze is working correctly? Thanks!. This is fixed in 1.1.3 https://github.com/nabla-c0d3/sslyze/releases/tag/1.1.3. Good catch, thanks!. Hello,\nI no longer manually parse the DNS entries specifically because of this. They may contain characters that don't work well with XML; this is why it was removed from the XML output in newer versions of SSLyze. My advice is to parse the PEM certificate with the programming language you are using, and then process it directly.. The certificate details (such as extensions) have been removed from the XML output for a few versions actually... parsing it yourself is a better approach as XML is not good for that. Closing this issue.. Thanks!. Thanks for the report. Hello,\nI don't think I will add support for anything but OCSP stapling. Both CRLs and regular OCSP are a bit messy and most browsers ignore them.. Thanks for the suggestions!\nA missing intermediate is a configuration error in the server's config, and it is the expected behavior for SSLyze to fail to validate the chain when this happens. The server operator must include all needed certificates instead of relying on browsers to fix it for them.\nAs for adding support for OCSP  or CRL, I have no plan in doing this as it is a lot of work, and OCSP stapling seems to be the way forward anyway.. SSLyze only supports the \"old\" (pre-RFC) CHACHA20 cipher suites. The new ones will be supported once #116 has been addressed.. No problem. Hello,\nWhat is the OpenVPN protocol like? Pure TLS or maybe StartTLS?. This seems out of scope for SSLyze.. Sure, that would be useful. Thanks!. Thanks! Was it causing a crash or?. SSLyze on Lambda sounds pretty cool. \nFrom looking at https://stackoverflow.com/questions/8463008/python-multiprocessing-pipe-vs-queue , it seems like the concurrent scanner would be need to be drastically changed as a Pipe does not support multiple consumers? We use the Queue specifically to dispatch scan tasks across subprocesses.. Sounds good - I would have done it if it was an easy change, but it's not the case and would be too AWS-centric for this to be part of SSLyze.. Hello,\nWhile this would be useful, there is no simple way to detect the version of OpenSSL and fingerprinting it falls outside of the goals I have for SSLyze.\nHope this makes sense... Thanks!. I couldn't reproduce this issue specifically, but nassl definitely was not ready to handle non-successful OCSP responses; your test servers returns a \"Try again later\" response.\nIt should be fixed by https://github.com/nabla-c0d3/nassl/commit/71097b8c3afcf2a5f2e03a94ddc6bed964f4427d. It looks like you did not run pip install --upgrade setuptools first.. Thanks!. Thanks @gopar - @jsjohns can you confirm?. Hello,\nAs you noticed, SSLyze relies on the cryptography module to extract the serial number; if this number is wrong, it is most likely a bug in cryptography .. Hello,\nActually cryptography should link with whatever OpenSSL is available on the system - not the ones embedded in SSLyze. Why do you ask?. Sounds good. My only concern is that the OpenSSL 1.1.x in SSLyze is still in development (its test suite does not succeed) so that might cause problems. Why not use the cryptography binary wheel (ie. precompiled)? Otherwise, it might be better to use OpenSSL 1.0.x as this one is stable/released. Once I release a new version of SSLyze with the final/release of OpenSSL 1.1.x we can switch to it.. SSLyze no longer relies on the ./libfolder (as it is not very \"Python-esque\"). I tested just now and the script seems to work fine as long as you install the dependencies in your Python install.. It's a warning from the OpenSSL binary at https://github.com/nabla-c0d3/sslyze/tree/master/tests/plugin_tests/openssl_server . We can safely ignore it.. Thanks for the contribution. Why the change tho? I don't want to test for TLS 1.3 first as it is barely supported by any servers right now, so it's a waste of a connection for most scans.\nLet me know and thanks!. Yes, I need to adapt the test script and to find a vulnerable server so I can test it.. Cool! That will be very helpful!!. @glestel I have pushed a first implementation (needs to be cleaned etc) to the branch - can you try it out on your servers?\npython -m sslyze --robot www.google.com  - make sure to update tls_parser to 1.2.0.\nThanks!. This was released as part of 1.3.0. @ericrange the test server was very helpful. Do you have domain names that you could email me?. And can you try with Python 3 ?. It should be fixed for the domain you sent me in v1.3.1 that I just released.. It looks like the wrong versions of cryptography and tls_parser are used?. The --ca_file can be used to test another trust store. Supporting every Java version is too specific for most users.. The server's certificate chain had changed.. CRIME already has a plugin, BEAST and Lucky13 can be checked via the cipher suite plugin and shellshock affects bash so it's not in scope for SSLyze.. Hello,\nThanks for the contribution. However, I am not sure I see the value of this change? Additionally the Nose project page states:\n\nNose has been in maintenance mode for the past several years and will likely cease without a new person/team to take over maintainership. New projects should consider using Nose2, py.test, or just plain unittest/unittest2.\n\nHence it is very unlikely that I will accept this pull request... sorry!. Hello,\nSorry I don't support Cygwin and older versions of SSLyze - try using Python 3.6 for Windows and SSLyze 1.3.1?. Thanks!. Always make sure to run pip install -r requirements.txt --upgrade first. Your error seems to be caused by an outdated version of the cryptography module.. Hi and thanks for the notification!\nWhen running the script, we get different TLS alerts back depending on the ROBOT payload that was sent (ordered the same as the payload in the ROBOT poc script):\nTLS Alert 20 2\nTLS Alert 50 2\nTLS Alert 20 2\nTLS Alert 20 2\nTLS Alert 20 2\nThis is what causes SSLyze to return the server as vulnerable. \nI think this also follows the \"intent\" of the initial poc test script, which is to detect if the responses are different. \nWhat is the fix here? Should one of the responses be a non-TLS alert for the server to be vulnerable? Or should there be more than 2 different kinds of answers (two different alerts + another type of response)?\nThanks!\n. Thanks @bhushan5640 for the insight!. As you saw, I was hoping for a quick fix but there's more to this issue. Thanks for the details, it will be very helpful.. Should be fixed by https://github.com/nabla-c0d3/tls_parser/commit/dc32fdb03ff9dcb7fd6f819d6fdc2d014e5e4915. Fixed in nassl 1.1.0.. Thanks!!. Does it work better if you only run one scan command (such as --tlsv1 instead of --regular) ?\nIf yes it means that the server cannot handle all the concurrent connections, in which case I might need to add a new flag for this.. Can you send me a hostname so I can test this myself? Thanks!. Yeah SSLyze requires a fast Internet connection, and not even the number of retries of timeouts can really help. I could add an option to have it use less resources if the connection (or the server) is slow (like --slow-connection),. Once it's released, please try --slow_connection and let me know if it worked. I removed --nb_retries and --timeout because they don't work very well and are a bit too complex. They're still available tho when using the Python API.. Yes it mainly affects the ConcurrentScanner (hence the change with --slow_connection), but some servers that are really limited in resources can't handle the cipher suites scan (even with the SynchronousScanner), which is why I reduced the number of threads in my commit above (which makes a cipher suite scan open less concurrent connections).\nAs for --slow-connection, yes your understanding is correct. \n. The right approach is to extend CertificateInfoPluginto to use the server's verified certificate chain, and then look at the CA certificate to see if it is Symantec. Then, the plugin can check the date when the leaf certificate was issued and return the right information to the user on when the certificate will stop working. \nThe code is there basically: https://github.com/nabla-c0d3/sslyze/blob/master/sslyze/plugins/certificate_info_plugin.py#L302\nI would definitely merge a pull request that provides this functionality!. Hello and thanks for the report. I will first have to setup a test server with client authentication so that I can reproduce this.. It should be fixed in v1.4.0.. Thanks for the report.. Thanks @glestel =). This is because the server does not support ciphers with forward secrecy (EDH / ECDHE): https://support.mozilla.org/en-US/questions/1143320 . You can see this by looking at the list of supported cipher suites (which does not include the ones that have forward secrecy). I'll make it more obvious in the text output.. How did you install and SSLyze and which system are you on? Your cryptography Python library is outdated.. Can you try installing SSLyze with pip instead?. Sure. This might be a duplicate of #289 . Client authentication was broken but it's almost fixed now. Can you try with master? If not it should work fine in the next release (I already added unit tests specifically for the code that crashes here).. I closed this as a duplicate, but the issue will be fixed soon.. Thanks!. Released as part of 2.0.0. Thanks @moyaldror for your help :). This seems to be a problem with your environment. There is no reference to java.yaml anywhere in SSLyze or trust_store_observatory,. Hello,\nAs far as I know there is no mechanism to pass both a hostname and its IP address to use to a CONNECT proxy; the proxy will always do DNS resolution itself, based on URL's hostname. It's not a limitation in SSLyze but in how proxies work.\nOne workaround in your example would be to pass an IP address as the hostname; this will force the proxy to connect using this IP address. . Thanks for the report. Hello,\nThe timeouts seem to be because of the speed of your connection. Try running the scans again with --slow_connection ?. Thanks for the report. Fixed in https://github.com/nabla-c0d3/nassl/commit/9095e41b889794c1421ca3de6349f481ddc7e3ac. It's released now.. Thanks. Something is wrong with the nassl Linux wheel for 2.7. All I did was use manylinux to build it (like for the other versions of python) and I don\u2019t think I\u2019ll have the time to debug it.. I fixed the Linux wheel for Python 2.7 so it works now (https://travis-ci.org/nabla-c0d3/sslyze/jobs/363564491). I will still drop support for Python 2 on the next major release.. Something is wrong with the nassl Linux wheel for 2.7. If possible you should switch to python 3.6.. I fixed the Linux wheel for Python 2.7 (https://travis-ci.org/nabla-c0d3/sslyze/jobs/363564491) so it should now work fine if you get the latest nassl.\nOn macOS I've only built a Python 3.6 wheel hence your error.. It works for me on MacOS on both Python 2.7 and Python 3.6.. If you have Python 3.6 you can do \nPip install sslyze\n\nYou don\u2019t need to build the tool.. I just add custom code or use the debugger when I need to do something like this; there\u2019s no built in mechanism.. Something is wrong with the nassl Linux wheel for 2.7. If possible you should switch to python 3.6.. I fixed the Linux wheel for Python 2.7 (https://travis-ci.org/nabla-c0d3/sslyze/jobs/363564491) so it should now work fine if you get the latest nassl.. Fixed in https://github.com/nabla-c0d3/nassl/commit/9095e41b889794c1421ca3de6349f481ddc7e3ac. It's released now.. This is usually because of an outdated version of cryptography.. I tried just now with v2.0.0:\npython -m sslyze  --certinfo server.spruceland.ca:30333 server.spruceland.ca:30334 server.spruceland.ca:33899 \nIt worked fine.. Fixed in https://github.com/nabla-c0d3/sslyze/commit/161376923b322819ae41c41b2c3d10f18855d3d3. Fixed in 1.4.2.. The latest release now has a Windows executable: https://github.com/nabla-c0d3/sslyze/releases/tag/2.0.1. Fixed in https://github.com/nabla-c0d3/sslyze/commit/eeffed5b4c70a152b9bc5d8e966ace088dba1f2a. It will be released with v2.0.0.. Released as part of 2.0.0.. Which version of pyca/cryptography has been installed?. It looks like cryptography does not always support parsing Certificate Transparency extensions, perhaps depending on the OpenSSL version that's available. I've asked for more details on the cryptography IRC channel.. Is it the same error? I can't reproduce it so it is difficult to fix it.. Thanks for looking into this; I just pushed your fix. Can you confirm that it works?\nAs for OpenSSL, yes sslyze (more specifically nassl) embeds two versions of OpenSSL. However the code in this issue uses the cryptoraphy module to parse certificates, and this module uses the system's OpenSSL.. Cool to know that it's fixed. Thanks for the help!\nFor the OpenSSL version, I don't know. The cryptography module is unable to parse the Certificate Transparency extension which is why it returns an UnrecognizedExtension; this is a problem in cryptography and not SSLyze. I asked on their IRC channel and they said that if the OpenSSL that was used with cryptography does not support CT, cryptography would not able to parse the CT extension.. Released as part of 2.0.0.. This is a problem in your environment; looks like you have multiple versions of Python installed but not sure.. It's a duplicate of #320. The cryptography module may or may not support features depending on the OpenSSL version installed on the system (even when using the latest version of cryptography).\nAs for macOS, only Python 3.6 is supported at the moment. Python 3.7 will be supported in the next release.. The root cause is that SSLyze uses cryptography to parse the Certificate Transparency extension of certificates. Cryptography can only do it if OpenSSL is recent enough on the system.. Ultimately this is a bug in cryptography and not SSLyze. The discussion has moved to #323 so I am closing this as a duplicate.. The cryptography issue is at https://github.com/pyca/cryptography/issues/4373 . Thanks @blshkv for letting them know. \nManually parsing of SCTs will definitely not be implemented in SSLyze (too difficult to maintain). \nI can make the \"openssl too old\" message in the CLI more specific, but I don't think this will really help users; I don't picture someone changing the version of OpenSSL on their system just for this. I will think about it tho and it is a small change anyway, but hopefully cryptography fixes the main issue.. Haha from my perspective that's actually the perfect example as to why it's better to build your own library:\n\nNassl will work 100% the same regardless of what version of OpenSSL is on the system; all the features will work, no surprises. \nCryptography on the other hand uses the system's OpenSSL which directly led to the bug we're talking about here: different features depending on the version of OpenSSL on the system.\n\nOf course I am not saying shared libraries should never be used, but in the case of \"advanced\"/new features of OpenSSL, it's great that nassl does not use the system's libraries. 99% of users (including myself) do not care about what version of OpenSSL is on their system, and changing it is always a time-consuming ordeal.. Python 3.7 is not supported; it will be in the next release.. Pypy is not supported as sslyze has a native/C module (https://github.com/nabla-c0d3/nassl).. Python 3.7 is now available as part of 2.0.0.. Released as part of 2.0.0.. Hi,\nIt depends how the SMTP server is configured. It's either a normal TLS service running on a different port, or a StartTLS service (more details at https://www.fastmail.com/help/technical/ssltlsstarttls.html). Both are supported by SSLyze; for scanning StartTLS servers, check out the --starttls=smtp command line option.. This is intended to work only when using the CLI tool; the code parsing the XML or JSON data can easily filter rejected ciphers out.. I want to bring it back but the previous code was too difficult to maintain.. The problem was that the code that was reading the DH information was using \"private\" APIs and data structures; hence it would only work on specific versions of OpenSSL, and it also required some heavy lifting to be done during the build process. \nWhen I had to add OpenSSL 1.1.1 (for TLS 1.3 support) in the new version of SSLyze, the DH code did not work with that version of OpenSSL. Then I decided to remove the DH code.\nThe right way to bring the functionality back would be to find an \"official\"/public API to retrieve the DH info in OpenSSL 1.1.1.. Thanks!. Sounds good - how do I do this?. Should be all set. Thanks for the help!. What system are you on? Only Linux and macOS are supported right now.. I think macOS 10.13 is required.. Yeah that's fair; I've updated the documentation.. @scovetta Windows is now supported again (but with Python 64 bits only).. Thanks!. It's all explained in the README. Which OS are you using?. It should work on macOS now.. It's one line of code in Python using the certificates returned by SSLyze: https://github.com/nabla-c0d3/sslyze/blob/master/sslyze/plugins/certificate_info_plugin.py#L517. Sorry, I haven't had time to look at this yet.. Feel free to re-open this issue if it still doesn't work.. You are probably using an older version (pre 2.0..0). The current version does not support Python 2 at all.. Hello,\nCan you send me an example of a certificate (or domain with that kind of certificate)?\nThanks!. As you noted, this is a bug in the certificate parsing library (ie. cryptography); if it is unable to parse the certificate, there's nothing SSLyze can do to recover from the error.. Thanks!. Duplicate of #347. Duplicate of #347. It looks like the servers can only handle a very small number of concurrent connections, so they just die when running SSLyze with a lot of commands (even with --slow_connection).. Hello,\nwww.domain.com and domain.com are just two different domains which is why you are seeing different results. A DNS record can be set to automatically redirect the naked domain to www, but this is not something that has to do with Sslyze; it will scan whatever domain it is given and that\u2019s the \u201ccorrect\u201d behavior.. Thanks for the heads up. It seems unlikely to me that this standard will ever get any traction (I can\u2019t imagine any of the major browsers implementing eTLS as they\u2019re 100% against traffic interception) but I will leave this open just in case.. It is already returned or do you mean something else?\n```\npython -m sslyze --certinfo www.google.com\n[...]\nKey Size:                          256\n[...]\n``. You need to parse the certificate (provided in PEM format by SSLyze) using the cryptography library.. It sounds like this host's certificate chains up to a private CA cert, which SSLyze doesn't know about. Have you tried passing the CA cert using--ca_file? I would need more details to be able to reproduce this (such as a host that I can reach).. I can now reproduce this; it happens inTrustStore.build_verified_certificate_chain()when the server sent the certificate chain in the wrong order. We should use OpenSSL to build the verified chain.. Good catch, thanks!. Fix released with v2.0.4.. Fix released with v2.0.4.. Fix released with v2.0.4.. Thanks!. Thanks :). Thanks =). Hello,\nThis looks like a problem with your environment; https://stackoverflow.com/questions/2009278/python-multiprocessing-permission-denied. Sure, it's there now. Can you put theraw_expect_ct_headerargument right afterraw_hpkp_header(for consistency)?. Can you put theexpect_ct_headerreturn value right afterhpkp_header(for consistency)?. Can you also do some basic checking of theexpect_ct_header's attributes (max age, etc.)? Just usingself.assertTrue()` (to make sure there's a value) is probably enough.. Yes that's better \ud83d\udc4d . ",
    "jfqd": "If installed in /usr/local on a mac it need to be run with sudo or by running a chown to the current user.\n. ",
    "postmodern": "Ah ignore my last comment. unzip appears to preserve permissions instead of setting sane default permissions. Many of the directories were missing r-x permissions for group/other.\n. I guess it would only be useful when generating XML output.\n. I'm going to split them anyways.\n. I would avoid adding redundant nested nodes. Maybe just add a <supported> element? Or maybe add an element outside of <sslv2> that lists supported protocols?\n. Fair enough. Should mention in the DTD which Strings are defined by SSL and which come from SSLyze.\n. Actually, it appears most of the analysis fails due to this exception:\nutils.SSLyzeSSLConnection.SSLHandshakeRejected - TLS / Alert handshake failure\n. Disregard this.\n. Ah, apparently the FOO-BAR names are an artifact of OpenSSL. https://www.openssl.org/docs/apps/ciphers.html\n. Currently, I'm just using crude regexps to pull out the values from the string.\n. Actually this doesn't make sense.\n. Here's the translation table I adapted from testssl.sh table.\n. FYI, you can add an <?xml-stylesheet href=\"file:///path/to/stylesheet.xsl\" type=\"text/xsl\"?> directive to the XML output to automatically convert the XML into HTML when opened in a web browser. Nmap does this.. @nabla-c0d3 upgraded to python 3.5.2 and sslyze 1.4.1, and this is still occasionally happening 8/10 times when invoking sslyze repeatedly.\nAttributeError: 'ConnectionResetError' object has no attribute 'server_info'. @nabla-c0d3 awesome! Any idea when nassl-1.1.3 will be released?. @nabla-c0d3 I'm still getting this with sslyze 1.4.3, cryptography 2.3.1, nassl 1.1.3.\n$ sslyze --certinfo --xml_out=sslyze.xml mail.proptaxappeal.net:4044\n\nTraceback (most recent call last):\n  File \"/home/postmodern/sslyze/bin/sslyze\", line 11, in <module>\n    sys.exit(main())\n  File \"/home/postmodern/sslyze/lib/python3.6/site-packages/sslyze/__main__.py\", line 121, in main\n    output_hub.server_scan_completed(CompletedServerScan(server_info, plugin_result_list))\n  File \"/home/postmodern/sslyze/lib/python3.6/site-packages/sslyze/cli/output_hub.py\", line 67, in server_scan_completed\n    out_generator.server_scan_completed(server_scan_result)\n  File \"/home/postmodern/sslyze/lib/python3.6/site-packages/sslyze/cli/xml_output.py\", line 93, in server_scan_completed\n    server_scan_node.append(plugin_result.as_xml())\n  File \"/home/postmodern/sslyze/lib/python3.6/site-packages/sslyze/plugins/certificate_info_plugin.py\", line 596, in as_xml\n    for cert_xml in self._certificate_chain_to_xml(self.certificate_chain):\n  File \"/home/postmodern/sslyze/lib/python3.6/site-packages/sslyze/plugins/certificate_info_plugin.py\", line 566, in _certificate_chain_to_xml\n    key_attrs['exponent'] = str(public_key.public_numbers().e)\nAttributeError: 'DSAPublicNumbers' object has no attribute 'e'\n\n. Oops, wrong project.. ",
    "dbaxa": "@nabla-c0d3 you can use setup.py to determine the various platform in use and pull down the correct version of nassl.\n. @nabla-c0d3 perhaps can you release a new 0.11.X version that includes the fixes you have made since 0.11.x was released (such as #73) ?\n. ",
    "hickford": "Yes please.\nIf it helps https://packaging.python.org/en/latest/distributing.html#uploading-your-project-to-pypi\n. ",
    "szepeviktor": "It is not so hard detect platforms and dependecies.\nhttp://pip.readthedocs.org/en/latest/user_guide.html#requirements-files\n. Is it possible to package sources only and download binaries (from GitHub) with a special option?\n. Thanks.\n. Thank you.\n. @nabla-c0d3 I meant to assess of a proxy server itself.\nLater I've realized ATS has to be told to listen with ssl, then it works without any options.\n. > Do you know what the limit is for Courier-MTA ?\nIt was 4/IP. I've raised that to 40 and the sslyze ran well.\nThanks.\nps. Later I've found your constants.\n. ",
    "dguido": ":+1: \nEven linux-only would be cool.\n. ",
    "hummus": "could you have nassl and sslyze as separate packages? I tried to do this on my two forks but I know windows compat is an issue. I'd be willing to look at that more(and osx) if you think this direction could allow for eventual pypi support.\n. ",
    "konklone": "Support for TLS_FALLBACK_SCSV would be very welcome.\n. Tracking whether SNI is required by a site is very helpful, especially when looking at changes in a dataset over time. This is something SSL Labs provides.\n. This would be very helpful. I'm integrating sslyze into a domain scanning tool which has its own methods for taking output from STDOUT and writing the output to predictable directories, creating directories automatically when need be, etc. It's inconvenient to have sslyze do that work internally, without any hooks to manage persistence.\n. Thank you!\n. A new release would help me out too -- I'm integrating sslyze into something, and #73 is making it harder to understand SHA-1 deprecation.\n. (I think you mean 4faaecbaf29dddeba8972f5bf94507b5b97c2de8.)\nThank you!\n. (Also, as Google notes, Android gets customized by manufacturers around the world and there's no guarantee that being included in the AOSP root store will get you into all Android phones. But that's basically the same situation as the Mozilla root store and ordinary Linux, so it's probably fine to go with.)\n. It looks like Google has made the CA Store standard across Android (through its Compatibility Document), as of Android N (Nougat):\nhttps://android-developers.blogspot.com/2016/07/changes-to-trusted-certificate.html\nThey link to https://android.googlesource.com/platform/system/ca-certificates/ as the official location.\n. I wanted to ring in and say I'm experiencing a very similar memory leak in 1.1.4 (current release). Definitely using the synchronous scanner, and I think the concurrent scanner as well (though it's more subtle, as you said -- I believe it generates stuck processes that way, whereas the synchronous scanner just gets fully killed in-process). I'm using pretty much the same scans @ericrange is (plus the cert info scanner).\nI'll see if I can dig into it more, but it's definitely making batch scans challenging. Scanning ~20K hostnames on an EC2 server with 8GB of RAM consistently fails.. Actually -- I also can only reproduce the memory leak with the synchronous scanner. And it happens even if I don't use the certificate info plugin and only check for the main 5 protocol versions. But using a concurrent scanner, even over a large batch, doesn't demonstrate a memory leak.. @nabla-c0d3 Not quite, I'm using the sslyze library in Python, and initializing the scanner objects and executing/queueing commands there.\nsslyze is invoked by 1 or more workers in a ThreadPoolExecutor. Each threaded worker can initialize either a SynchronousScanner or a ConcurrentScanner, depending on options passed to the worker orchestrator. (Yes, this is also a recipe for deadlocks, which is an issue I've been working on separately.)\nEach threaded worker runs this code (sslyze-lib usage starting at about here):\nhttps://github.com/18F/domain-scan/blob/master/scanners/sslyze.py#L137\nI have noticed the memory leak even when only using 1 worker, but only when using the synchronous scanner.. Thank you for tracking these down! . @nabla-c0d3 You may want to get some actual legal advice on this, if you intend to ever enforce your license on a proprietary web service making use of the newer/relicensed version of SSLyze.\nIt sounds like you're making some off-the-cuff assessments -- about how your outside contributions have been minor enough to not merit getting their permission, and referencing a 7-8 year old HN comment by a non-lawyer on ambiguity around whether the AGPL would bind the use of modified vs unmodified versions of SSLyze -- that may not be accurate.\nIf this is an important area for you, then given SSLyze's fairly widespread and authoritative use in a variety of enterprise/corporate/government settings, you should take the time to pay a knowledgeable lawyer in these areas for a couple hours of their time.. (And as a small logistical note, the repo and README still say GPLv2 on it. If you're going to switch the license to AGPL, you should be very loud about it, since it potentially changes the calculus of various organizations making use of your tool or not compared to the GPLv2.). If #217 is related, then that would suggest the port is not an issue -- that hangs forever on port 443.\nI also tried running the same set of plugins (I expanded the --regular scan to the full set of flags it represents) but without the --sslv2 flag, and it hung just the same.. I did some more poking, and removing the --heartbleed scan was what fixed it and allowed the scan to complete. Give that a shot.. I filed a corresponding bug to the cryptography module, since it looks like their API is inconsistent: https://github.com/pyca/cryptography/issues/3540\nHowever, this may be workaroundable with public_key.curve.key_size for EC keys in the meantime.\ncc @alex. I can also get sslyze to fully crash if I add the --json_out flag, which may give more information:\nsslyze --regular safetyact.gov --json_out=test.json\n```\n AVAILABLE PLUGINS\n\nCompressionPlugin\n  HttpHeadersPlugin\n  OpenSslCcsInjectionPlugin\n  SessionRenegotiationPlugin\n  CertificateInfoPlugin\n  FallbackScsvPlugin\n  HeartbleedPlugin\n  OpenSslCipherSuitesPlugin\n  SessionResumptionPlugin\nCHECKING HOST(S) AVAILABILITY\n\nsafetyact.gov:443                       => 216.81.81.241 \nSCAN RESULTS FOR SAFETYACT.GOV:443 - 216.81.81.241\n\n\n\nDowngrade Attacks:\n      TLS_FALLBACK_SCSV:                 OK - Supported\n\n\nSSLV2 Cipher Suites:\n      Server rejected all cipher suites.\n\n\nOpenSSL CCS Injection:\n                                         OK - Not vulnerable to OpenSSL CCS injection\n\n\nSSLV3 Cipher Suites:\n      Server rejected all cipher suites.\n\n\nTLSV1 Cipher Suites:\n      Preferred:                     \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  256 bits      HTTP 200 OK                                               \n      Accepted:                      \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  256 bits      HTTP 200 OK                                               \n        TLS_DHE_RSA_WITH_AES_256_CBC_SHA                  DH-2048 bits   256 bits      HTTP 200 OK                                                 \n\n\nSession Renegotiation:\n      Client-initiated Renegotiation:    OK - Rejected\n      Secure Renegotiation:              OK - Supported\n\n\nUnhandled exception while running --certinfo:\nInvalidCodepoint - Codepoint U+003A at position 6 of u'https://www' not allowed\n\n\nDeflate Compression:\n                                         OK - Compression disabled\n\n\nResumption Rate:\n      With Session IDs:                  OK - Supported (5 successful, 0 failed, 0 errors, 5 total attempts).\n      With TLS Tickets:                  OK - Supported\n\n\nTLSV1_1 Cipher Suites:\n      Preferred:                     \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  256 bits      HTTP 200 OK                                               \n      Accepted:                      \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  256 bits      HTTP 200 OK                                               \n        TLS_DHE_RSA_WITH_AES_256_CBC_SHA                  DH-2048 bits   256 bits      HTTP 200 OK                                                 \n\n\nTLSV1_2 Cipher Suites:\n      Preferred:                     \n        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             ECDH-256 bits  256 bits      HTTP 200 OK                                               \n      Accepted:                      \n        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             ECDH-256 bits  256 bits      HTTP 200 OK                                               \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384             ECDH-256 bits  256 bits      HTTP 200 OK                                               \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  256 bits      HTTP 200 OK                                               \n        TLS_DHE_RSA_WITH_AES_256_CBC_SHA256               DH-2048 bits   256 bits      HTTP 200 OK                                               \n        TLS_DHE_RSA_WITH_AES_256_GCM_SHA384               DH-2048 bits   256 bits      HTTP 200 OK                                               \n        TLS_DHE_RSA_WITH_AES_256_CBC_SHA                  DH-2048 bits   256 bits      HTTP 200 OK                                               \n        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             ECDH-256 bits  128 bits      HTTP 200 OK                                                 \n\n\nUnhandled exception while running --heartbleed:\ntimeout - timed out\nSCAN COMPLETED IN 5.33 S\n\nTraceback (most recent call last):\n  File \"/home/eric/.pyenv/versions/2.7.11/bin/sslyze\", line 11, in \n    load_entry_point('SSLyze==1.1.0', 'console_scripts', 'sslyze')()\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/site-packages/sslyze/main.py\", line 136, in main\n    output_hub.scans_completed(exec_time)\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/site-packages/sslyze/cli/output_hub.py\", line 62, in scans_completed\n    out_generator.scans_completed(total_scan_time)\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/site-packages/sslyze/cli/json_output.py\", line 65, in scans_completed\n    ensure_ascii=True)\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/init.py\", line 251, in dumps\n    sort_keys=sort_keys, **kw).encode(obj)\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/encoder.py\", line 209, in encode\n    chunks = list(chunks)\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/encoder.py\", line 434, in _iterencode\n    for chunk in _iterencode_dict(o, _current_indent_level):\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/encoder.py\", line 332, in _iterencode_list\n    for chunk in chunks:\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\n    for chunk in chunks:\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/json/encoder.py\", line 442, in _iterencode\n    o = _default(o)\n  File \"/home/eric/.pyenv/versions/2.7.11/lib/python2.7/site-packages/sslyze/cli/json_output.py\", line 77, in _object_to_json_dict\n    elif isinstance(obj, cryptography.hazmat.backends.openssl.x509._Certificate):\nAttributeError: 'module' object has no attribute 'openssl'\n``. That makes sense, and thanks for looking into it. Though,AttributeError: 'module' object has no attribute 'openssl'(which only appears on using--json_out, as shown above) is less graceful error handling than I'd expect for a malformed cert. . :+1: Thank you!. Looks like expanding--regularto its full set of flags, and then removing--heartbleed, was enough to fix this. Unclear why the Heartbleed scan might be hanging indefinitely on certain domains.. That's true, it sounds like you would need to manage multiplePipes yourself (basically reimplementing aQueue`). \nI haven't looked at the source code for Queue, but based on Amazon's post, it looks like Queue is implemented using /dev/shm to share memory between the generated processes. So I guess one way to do that would be to either reimplement or fork a version of multiprocessing.Queue that doesn't use shared memory.\nIt's not the end of the world to not use a concurrent scanner in a Lambda environment, and potentially if I cared about it enough, I could splinter out the Lambda processes so I was running a Lambda container per-scanner rather than per-hostname. In practice, for my own purposes (where I run 6 scanners), I'm likely to just eat the time cost of using the synchronous scanner instead, but I could see this being a bigger deal for use cases involving more scanners.. Yep, understood. For reference for the thread, I ended up implementing a Lambda pipeline:\nhttps://github.com/18F/domain-scan/blob/master/docs/lambda.md#using-domain-scan-with-amazon-lambda\nWhich uses SSLyze with a SynchronousScanner:\nhttps://github.com/18F/domain-scan/blob/master/scanners/sslyze.py\nRunning many SSLyze scans at once using a pool of hundreds simultaneous Lambda functions is quite fast, and reasonably reliable. I ran ~22,000 SSLyze scans using a rolling pool of 800 Lambda functions in about 9 and a half minutes (~38 scans / second).\nI still have a small set of scans which will get killed for running out of memory, but from what I've seen so far, I think this is related to a specific set of pathological cases that balloon the memory, and it ca generally be run with 128MB or 256MB containers.. Sure, this will reproduce the issue:\n```python\nimport sslyze\nfrom sslyze.synchronous_scanner import SynchronousScanner\nfrom sslyze.plugins.certificate_info_plugin import CertificateInfoScanCommand\nhostname = \"ephtsecure.cdc.gov\"\nserver_info = sslyze.server_connectivity.ServerConnectivityInfo(hostname=hostname, port=443)\nserver_info.test_connectivity_to_server()\nscanner = SynchronousScanner()\ncerts = scanner.run_scan_command(server_info, CertificateInfoScanCommand())\n```\nWhen running that in an ipython session, I get:\n```\nIndexError                                Traceback (most recent call last)\n in ()\n      2 scanner = SynchronousScanner()\n      3 \n----> 4 certs = scanner.run_scan_command(server_info, CertificateInfoScanCommand())\n~/.pyenv/versions/3.6.3/lib/python3.6/site-packages/sslyze/synchronous_scanner.py in run_scan_command(self, server_info, scan_command)\n     50         plugin_class = self._plugins_repository.get_plugin_class_for_command(scan_command)\n     51         plugin = plugin_class()\n---> 52         return plugin.process_task(server_info, scan_command)\n~/.pyenv/versions/3.6.3/lib/python3.6/site-packages/sslyze/plugins/certificate_info_plugin.py in process_task(self, server_info, scan_command)\n    157         # All done\n    158         return CertificateInfoScanResult(server_info, scan_command, certificate_chain, path_validation_result_list,\n--> 159                                          path_validation_error_list, ocsp_response)\n    160 \n    161 \n~/.pyenv/versions/3.6.3/lib/python3.6/site-packages/sslyze/plugins/certificate_info_plugin.py in init(self, server_info, scan_command, certificate_chain, path_validation_result_list, path_validation_error_list, ocsp_response)\n    260         if ocsp_response:\n    261             # We only keep the dictionary as a nassl.OcspResponse is not pickable\n--> 262             self.ocsp_response = ocsp_response.as_dict()\n    263             if self.successful_trust_store:\n    264                 try:\n~/.pyenv/versions/3.6.3/lib/python3.6/site-packages/nassl/ocsp_response.py in as_dict(self)\n     61         response_dict = {\n     62             'responseStatus': self._get_value_from_text_output_no_p('OCSP Response Status:', response_text),\n---> 63             'version' : self._get_value_from_text_output_no_p('Version:', response_text),\n     64             'responseType': self._get_value_from_text_output('Response Type:', response_text),\n     65             'responderID': self._get_value_from_text_output('Responder Id:', response_text),\n~/.pyenv/versions/3.6.3/lib/python3.6/site-packages/nassl/ocsp_response.py in _get_value_from_text_output_no_p(key, text_output)\n    102         # type: (Text, Text) -> Text\n    103         value = text_output.split(key)\n--> 104         value = value[1].split('\\n')[0].strip()\n    105         return value.split('(')[0].strip()\n    106 \nIndexError: list index out of range\n``. @nabla-c0d3 Just to confirm, this problem would only affect uses of SSLyze that use theConcurrentScanner, not theSynchronousScanner`, right? \nDoes the change you made (to use max_processes_nb=1 for --slow-connection) mean that --slow-connection is effectively just using a SynchronousScanner even though it's initializing a ConcurrentScanner?. I haven't tested yet, but completely agree it's presumed fixed unless I see it crop up again in future. Thanks!. Confirmed this is still the case with SSLyze v1.4.1.. I observed (on a coworker's computer) this exact error message happening on native OS X, under Python 3.5. \nInstalling SSLyze 1.3.4 solved the issue (for the time being) for this person, but I think it may not just be a Linux/2.7 issue.. ",
    "Ashex": "You're correct, this is just bad reading comprehension on my part. the tool is simply reporting the HTTP Status when testing each cipher, I was expecting to see an OK somewhere in there.\nClosing the issue.\n. ",
    "mr-gosh": "I really haven\u2019t tried it yet - but I will and drop an info here... - so you could extend the readme...\n. the compile script interrupts cause of the platform check - but even if this is replaced through \"freebsd10\" the compile interrupts with the some error messages:\n\nStop.                                                                        \nmake[1]: stopped in /tmp/nassl/openssl-1.0.2c/crypto                         \n*** Error code 1\n\nStop.                                                                        \nmake: stopped in /tmp/nassl/openssl-1.0.2c                                   \nTraceback (most recent call last):                                           \n  File \"buildAll_unix.py\", line 84, in                               \n    main()                                                                   \n  File \"buildAll_unix.py\", line 62, in main                                  \n    perform_build_task('OPENSSL', OPENSSL_BUILD_TASKS, OPENSSL_DIR)          \n  File \"/tmp/nassl/buildAll_config.py\", line 35, in perform_build_task       \n    subprocess.check_call(command, shell=True, cwd=cwd)                      \n  File \"/usr/local/lib/python2.7/subprocess.py\", line 540, in check_call     \n    raise CalledProcessError(retcode, cmd)                                   \nsubprocess.CalledProcessError: Command 'make' returned non-zero exit status 1\n\n. ",
    "exploresecurity": "Thanks for the reply. SSLyze would know if the cipher suite chosen was the one at the top of the list and could then send a second Client Hello with that cipher suite further down the order to check. On the point of the buggy load balancers (life is never easy, is it?) a further Client Hello could be sent. If a preference seemed to be expressed from the first set, that cipher suite could be included with the remaining set. I guess this all adds overhead and you may have chosen to skip this kind of work in favour of speed, as in the majority of cases SSLyze should get it right.\n. I thought as much! Thanks for continuing to maintain the project.\n. ",
    "six8": "Is the timeout an indication that the server is not vulnerable? This times out every time for me.. ",
    "mhuuhka": "im getting the timeout aswell. Would be nice to get an answer to earlier question.. ",
    "glestel": "With the migration to 1.1.1. I'm getting [u'Unhandled exception while running --heartbleed:', u'timeout - timed out'] on a domain that never triggered error with previous version. Sent you a mail with domains of interest . Yes it's the Not Supported tag, it's not a valid xml one and some parser won't process it (fortunately not python).\nNo other problem to report. \n. Indeed this explains why python was able to parse the xml. This happened when I displayed the xml with firefox, once I copy/paste the xml the escaping is lost. \nI think dropping the \"< >\" would makes things less error-prone.\nThanks for the explanation.\n. I have some similar issues, and it's because an intermediate certificate is signed with SHA-1\n. I use the XML report as data to parse in another tool (a plugin I wrote for Mozilla's Minion). It checks for each \"path_validation\" raise an issue if an error is found. I could always add a condition in my tool to check only some specific trust store but that's less generic.\nI get your point of view, so that would be more of a feature request if ever other people have the same need.\nThanks for your quick reply \n. You can inspire from my work that parse the xml output and raise issues for bad results. It's what I do to integrate SSLyze with Mozilla Minion. It's part of Minion SSLyze Plugin\n. Thanks for your work\n. I think it shifted the issue when changing the key when https://github.com/nabla-c0d3/sslyze/commit/61328eac359e1b8584d38c1f0619f41078b6aaf4 : \n-     RESULT_KEY_FORMAT = '{hostname}:{port}'.format\n+    RESULT_KEY_FORMAT = '{ip_address}:{port}'.format\nI suppose the fix could be using both hostname and ip in the key like {hostname-ip_address}:{port}\n. I've come to the same error with the 1.1.0 and it's because of the certificate chain that is sent in incorrect order (sslyze didn't manage to build_verified_certificate_chain() after careful debugging). \nHowever the custom CA does validate the server certificate (with sslyze or directly with openssl), so I am wondering how the certificate could be trusted if there's an issue with the certificate chain ? (I know it's relative to the way openssl works but I did not manage to find an explication on the web). Yes, that's why I added an exception to avoid checking the root certificate.\nTo my understanding sha1 signature should be found nowhere except in root certificate. Yes you're right, some have \"root\" in their name, some \"authority\". But I have implemented a more robust check to avoid root certificate by comparing subject and issuer of the certificate.\nI even added a case for self-signed certificate, but I don't think it is possible to have a self-signed certificate trusted by a trust store.\nWould you agree with a Pull Request containing this code modification ? (it's already done at https://github.com/glestel/sslyze/blob/ec819726c7f205641429aa7bf32bb1913bb02ae0/sslyze/plugins/certificate_info_plugin.py#L314 ). Okay, thanks for the explanation of the trickiest corner cases, I understand better the situation.\nJust a final thought before I give up : to find out if a certificate having a SHA1 signature is a root certificate, it should be present in the validating trust store ?. Using this logic, checked every certificate against the validating truststore to avoid sha1 signed root certificate. My updated code is at https://github.com/glestel/sslyze/blob/master/sslyze/plugins/certificate_info_plugin.py#L310 would you accept it if I made a PR ?. On a clean linux install, I run into some hiccups with unable to execute 'x86_64-linux-gnu-gcc': No such file or directory meaning I had to install gcc and build-essential, then nassl/_nassl/nassl.c:1:20: fatal error: Python.h: No such file or directory meaning I had to install python-dev, and finally c/_cffi_backend.c:15:17: fatal error: ffi.h: No such file or directory needing to install libffi-dev,  in addition to your issue.\nLooking up the cryptography requirement for installation, before installing sslyze you might need to install build-essential libssl-dev libffi-dev python-dev on a fresh Linux installation\nEdit : my bad, python-dev was already in the README.\nBut then, trying to run a slyze --version with python 2.7.6 I got\npkg_resources.DistributionNotFound: The 'typing' distribution was not found and is required by SSLyze\nafter installing it with pip install typing I finally got a sslyze up and running . I have access to domains hosted by Semi vulnerable and Totally vulnerable F5, I can check if the test works if you release it on an early branch, if it can helps. Thanks for the works. However it's giving me false negatives on my targets (hosted by some F5), but both testssl.sh and the robot-detect script are giving me a vulnerable status.\nI've notified that the sslyze scan runs very quickly compared to others tools. Could it be linked to the fact that I'm running sslyze with python 2.7 ?. I'll try with python 3.\nSent you a mail with a supposed vulnerable domain\nEdit : I've got the same behavior with python3. It's working fine with your bug fix, thank you !. I got this also on my ubuntu if I install sslyze with a sudo pip install (I know, bad practice). But creating a new virtualenv with forced download, it works.\nMight be a compatibility issue with old dependencies . Convert your root CA to .pem and then when you call sslyze : \nsslyze --certinfo --ca_file=Path/To/CA.pem test.evil.corp. ",
    "ericrange": "this \"exception\" is already in 1.0.0\nbut as @nabla-c0d3 said, you get an exception if u are not vulnerable to heartbleed.. Maybe its possible to combine other approaches.\nhttps://github.com/mjol/TLScan/blob/master/TLScan3.py\nUse the \"old\" openssl (nassl) for things like Heartbleed and \"no\" openssl to scan ciphers.. we need python 3! :(. what does that mean? python 3 project canceled?. any updates so far?. here is the go script: https://gist.github.com/FiloSottile/fc7822b1f5b475a25e58d77d1b394860\nis it possible to convert it to python?. https://testssl.sh/ticketbleed.sh. here is a python script:\nhttps://github.com/0x00string/oldays/blob/master/CVE-2016-9244.py. there are 3 conditions which must be apply:\n1. tls12\n2. cbc mode\n3. aes ni\n1 and 2 is easy to check, but what about 3?. Here is an implementaion:\nhttps://blog.cloudflare.com/yet-another-padding-oracle-in-openssl-cbc-ciphersuites/\n\"Detecting a vulnerable server is as easy as sending an encrypted message which decrypts to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, and checking if the TLS alert is DATA_LENGTH_TOO_LONG (vulnerable) or BAD_RECORD_MAC (not vulnerable).\"\nhttps://github.com/FiloSottile/CVE-2016-2107/blob/master/LuckyMinus20/CVE-2016-2107.go. yes it happens also there. well i have 6 threads... each threads got a infinite loop (6 ips).\nit starts with ca 200mb and then grows after a whole loop, ca 50mb.\nso i takes ca. 2 hours to fill 2gb ram.. i tried https://pythonhosted.org/Pympler/muppy.html\nand u can see there that lists objects increases drastically. for reproduce:\nfrom sslyze.synchronous_scanner import SynchronousScanner\nfrom sslyze.plugins.openssl_cipher_suites_plugin import Tlsv12ScanCommand, Tlsv11ScanCommand, Tlsv10ScanCommand, Sslv30ScanCommand, Sslv20ScanCommand\nfrom sslyze.server_connectivity import ServerConnectivityInfo, ServerConnectivityError\nserver_info = ServerConnectivityInfo(hostname='www.test.de', port=443)\nserver_info.test_connectivity_to_server()\nsslv20 = { 'version': 'SSLv20', 'command': Sslv20ScanCommand() }\nsslv30 = { 'version': 'SSLv30', 'command': Sslv30ScanCommand() }\ntlsv10 = { 'version': 'TLSv10', 'command': Tlsv10ScanCommand() }\ntlsv11 = { 'version': 'TLSv11', 'command': Tlsv11ScanCommand() }\ntlsv12 = { 'version': 'TLSv12', 'command': Tlsv12ScanCommand() }\nwhile True:\n        for protocol in [sslv20, sslv30, tlsv10, tlsv11, tlsv12]:\n                scanner = SynchronousScanner(network_timeout=2, network_retries=2)\n                scan_result = scanner.run_scan_command(server_info, protocol['command'])\n                print(scan_result)\nyou can see that that every 3 seconds there is 1mb ram less.. seems to be a nassl topic. the memory infinitly increases when i do:\n```\n!/usr/bin/python2.7\nimport os\nimport sys\nsys.path.insert(1, os.path.join(os.path.dirname(file), u'lib'))\nfrom nassl.ssl_client import OpenSslVersionEnum\nimport socket\nfrom nassl.debug_ssl_client import DebugSslClient\nwhile True:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)\n        sock.connect((u'test.com', 443))\n    ssl_client = DebugSslClient(ssl_version=OpenSslVersionEnum.TLSV1_2, sock=sock, ssl_verify_locations=u'mozilla.pem')\n    #ssl_client.set_tlsext_status_ocsp()\n    ssl_client.do_handshake()\n\n    print(u'Certificate chain')\n    for cert in ssl_client.get_peer_cert_chain():\n            print(cert.as_dict()[u'subject'][u'commonName'])\n\n    print(u'\\nCipher suite')\n    print(ssl_client.get_current_cipher_name())\n\n```. is there a global var which never gets cleaned?. try this:\nyou will see that each round adds each 2 list and str objects.\n```\n!/usr/bin/python2.7\nfrom pympler import muppy, summary\nimport os\nimport sys\nsys.path.insert(1, os.path.join(os.path.dirname(file), u'lib'))\nfrom nassl.ssl_client import OpenSslVersionEnum\nimport socket\nfrom nassl.debug_ssl_client import DebugSslClient\nwhile True:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)\n        sock.connect((u'test.com', 443))\n    ssl_client = DebugSslClient(ssl_version=OpenSslVersionEnum.TLSV1_2, sock=sock, ssl_verify_locations=u'mozilla.pem')\n    #ssl_client.set_tlsext_status_ocsp()\n    ssl_client.do_handshake()\n\n    print(u'Certificate chain')\n    for cert in ssl_client.get_peer_cert_chain():\n            print(cert.as_dict()[u'subject'][u'commonName'])\n\n    print(u'\\nCipher suite')\n    print(ssl_client.get_current_cipher_name())\n\n    all_objects = muppy.get_objects()\n    sum1 = summary.summarize(all_objects)\n    summary.print_(sum1)\n    all_objects = None\n    sum1 = None\n\n``\n. sorry for all the spam. i just random remove some functions.cert.as_dict()` produces the memory leak.\nbut i guess that is not the only function.. ok... seems there is no memory issue with the concurrent scanner :O\nbut still with sync scanner.. ok. i just want to say, that (finally) the concurrent scanner do not produce any memory leaks.\ni have been running my script now for 1 week and the memory is stable.\nreally strange that the sync scanner behaves so differently. cant reproduce that. make sure u installed sslyze with all necessary deps.\ne.g. gcc, python-dev, .... this is not reproducible. seems there is something wrong with your env.\ntry it on another host.. MIT :+1: . +1. +1. at the time i cant reproduce the error because the failure occurs for a website which is down due to wannecry updates^^\nbut as i already suggested, there is defintly an issue with sslv2, therefore very likly that the heartbleed plugin is responsible for this.. but i dont think that the heartbleed check, in particular, causes the stuck. i think there is a broken exception handling that causes an endless loop which is responsible for the 100% cpu usage and therefor for the infinite hang.. perhabs the same issue as #213 . I did not find anything about StartTLS for OpenVPN. I think its pure TLS but not sure :/\nhttps://openvpn.net/index.php/open-source/documentation/security-overview.html. what do you mean? is it ethical to scan a persons clothes or behaviour to get an impression of that person? you dont steal  anything. you dont hack anything. you just watch what features are enabled.\nall browsers or other type of software do \"nearly\" the same thing as sslyze.\na browser needs to know which ciphers or features the server supports and afterswards use this to communicate with it.. so, actually you asked \"if its ethical to visit a website without the consent of website owner?\"\ni think, yes^^. good point. in general, i do not really understand the law at this point. (either in us, uk or germany).\nvarious bots are scanning all websites they can find to inject remote scripts or etc.\nthere is nobody who cares... it is just like \"the web is like it is\"...\nbut if you want to detect vulnerabitlities to tell the organisation (maybe they book your services to prevent this vulnerabilities) this is strictly prohibited...\nbad guys: who cares???\ngood guys: legal proceedings :D. I sent you a vulnerable server per mail. but please dont use the address in public tests. On a 5 min old ubuntu (16.04) machine (aws): for reproduction\n\n. This is what i did after vm setup:\napt update && apt upgrade -Y\napt-get install python3-pip\napt-get install python3-setuptools\napt-get install python3-dev\napt-get install libffi-dev\napt-get install libssl-dev\napt-get install libmpc-dev\napt-get install libgmp3-dev\npip3 install gmpy2\npython3 setup.py install\nsslyze --regular www.kpn.com. ok... if i do the same on debian... its works... mh :/. ",
    "xychix": "Great works now :) \nthanks for the quick response.\np.s. would you be so kind to keep the XML interface as is or explicitly stating in release notes when changing :) I'm relying on the XML for automated processing.\ncheers,\nxychix\n. Superb. The change I found was (testing on an older version default in Kali) the addition of the full Certificate Chain, a very valuable addition! I was just about to code that myself when I decided to first look you up on GitHub :)\nthanks and regards,\nXychix\nDate: Mon, 1 Dec 2014 08:53:12 -0800\nFrom: notifications@github.com\nTo: sslyze@noreply.github.com\nCC: xychix@hotmail.com\nSubject: Re: [sslyze] Key error on scanning facebook.com (#17)\nYeah I can imagine how annoying the changes to the XML output can be... sorry about that - it shouldn't change that much anymore\n\u2014\nReply to this email directly or view it on GitHub.\n=\n. ",
    "blshkv": "this should be probably related:\nhttps://github.com/iSECPartners/sslyze/issues/42\n. In gentoo, a package can influence on system libraries and  enable required options. That's the reason why we unbundle all dependences if possible. The system is \"cleaner\" in this way.  So I found the requirements in the buildAll_config.py file and here what I did: https://github.com/pentoo/pentoo-overlay/commit/3ae076f12d3dadd2152386efb0f69e4eb1ef55d4 := will also force recompiling sslyze after openssl upgrade which could be an overkill.\nAnyway, it would really help if it would be a legal switch, something like \"--use-unsupported-system-libraries\" would do it.\n. no problem at all. Please clone it with a different name so we could add that package as a dependency and replace system openssl\n. In Gentoo, we use slots and can install multiple versions if required.\nHere is the openssl example:\ndev-libs/openssl\n     Available versions:  \n     (0.9.8)  0.9.8z_p7 0.9.8z_p8\n     (0)        1.0.1p ~1.0.2a ~1.0.2b ~1.0.2c 1.0.2 ~1.0.2d-r2 1.0.2e\nI guess, we will have 1.1.0 slot soon because it were some major changes.\nAs you can see we still can install 0.9.8 line and I'm not sure what was the purpose of the fork. But if you worry that the 1.0.2 line will just disappear I suggest to fork it with openssl102 name or similar. You would need to maintain it and backport all security patches\n. can we come back to this topic?\nThe tool seems does no longer use forks. \nIt requires legacy openssl-1.0.2e and zlib-1.2.11 without any modifiction.\nIt is also requires modern openssl (a snapshot).\nCan you introduce additional switches which would allow to enable each system library individually?\n. well, the thing is we don't like static libs since we can recompile a dynamic lib and enable whatever is required.\nSo if you could introduce a flag to look for a system library that would be perfect.\nSomething like \"--system-legacy-openssl-andIknowWhatImDoing will do it ;-)\n. btw, I'm not sure why, but both openssl 1.0.2o and 1.1.1_pre7 are under the same slot in Gentoo, meaning both can't be installed at the same time, at least for now. That probably means that they are compatable and 1.1.1 can be used without 1.0.2 requirement? Can you review it please?\n[I] dev-libs/openssl\n     Available versions:  \n     (0.9.8) 0.9.8z_p8^d 0.9.8z_p8-r1^d\n     (0)    1.0.2o-r3^d ~1.0.2o-r6^d [M]~1.1.0h-r2(0/1.1)^d [M]**1.1.1_pre7-r1(0/1.1)^d\n . ok, that explains. I will stop trying to make it right since the tool is so tied to specific versions.\n. Agreed,  but  can you make it clear too?  The report says  \"vulnerable\" and takes a lot effort to understand  that it is NOT vulnerable . dev-python/cryptography-2.2.2\n. ping?. I tried to downgrade to sslyze-1.3.4, nassl-1.0.3, cryptography-2.1.4. The error is still there.\n. the commit fa32ee143ef8e04ac86e97c2f698e19e062a2c97 changed nothing. I'm still getting the same error\nP.S. I have downloaded sslyze-drop-python2-support branch and ran it with the following:\npython3.6 -m sslyze --certinfo www.pentest.co.uk. yes, the error is exactly the same, I suspect I have a different dependency (after a recent update), but I can't figure out which one.\n```\nbash$ python3.6 -m sslyze --certinfo www.pentest.co.uk\nAVAILABLE PLUGINS\n\nCertificateInfoPlugin\n  OpenSslCcsInjectionPlugin\n  RobotPlugin\n  FallbackScsvPlugin\n  HttpHeadersPlugin\n  SessionResumptionPlugin\n  SessionRenegotiationPlugin\n  OpenSslCipherSuitesPlugin\n  HeartbleedPlugin\n  CompressionPlugin\nCHECKING HOST(S) AVAILABILITY\n\nwww.pentest.co.uk:443                       => 31.193.5.173 \nSCAN RESULTS FOR WWW.PENTEST.CO.UK:443 - 31.193.5.173\n\n\nCertificate Information:\nUnhandled exception while running --certinfo:\nTypeError - object of type 'UnrecognizedExtension' has no len()\n\nSCAN COMPLETED IN 2.46 S\n\n. I tried to upgrade few python packages to the latest, listed in https://github.com/nabla-c0d3/sslyze/blob/drop-python2-support/Pipfile.lock\nIt did not help either... ok, found it!\nhttps://github.com/nabla-c0d3/sslyze/commit/fa32ee143ef8e04ac86e97c2f698e19e062a2c97#diff-91184cf30395d747bc33b5eea5149c57R121\n-           if isinstance(sct_ext, cryptography.x509.UnrecognizedExtension):\n+           if isinstance(sct_ext.value, cryptography.x509.UnrecognizedExtension):\n```\nCan you explain which version of openssl is too old mentioned in the comment?\nI believe sslyze uses its own build-in versions, no?\nopenssl on both my systems and a remove server is up-to-dated.\n. ok, confirm the issue is fixed.\nas for the openssl, I have dev-libs/openssl-1.0.2o on both client and server, so the message about \"old\" openssl is confusing. sslyze should not hit that exception since this version of openssl should support the extension.\n. Ok, thanks. I'll try to investigate further . I actually have the latest system openssl and this message is not correct. It would be good to know how to enable whatever is required . Also, see: https://github.com/pyca/cryptography/issues/4333\n. ok, I have reported the issue to the upstream as well, but it is possible to parse it from sslyze (if openssl is \"too old\", referring to 1.0 line wrongly). Here is a tool which does that:\nhttps://github.com/pierky/sct-verify/blob/master/sct-verify.py\n. This bug is classic example why you should not use/build your own libraries. Nassl builds 2 versions openssl and yet complain that the system openssl is too old. Don't build the latest version of the library then \ud83d\ude02. if you follow your logic you should also build cryptography and compile it against bundled openssl library. The next thing you will bring the entire OS with one little tool (sslyze) and call it bloatware\nEDIT: I forgot to mention that you also need to track security and other bugs of each bundled library.\nFor example, feel free to help with the following mistery bug https://github.com/pentoo/pentoo-overlay/issues/300. ",
    "stuarthicks": "Ok, what details would you like? Is there a recommended way to debug sslyze to see exactly what connections are failing?\n. Huh. Ok, didn't spot that option, works perfectly when I add --https_tunnel=$https_proxy. Out of curiosity, what's the reason for not using the environment variables?\n. ",
    "kiwidude": "Same problem here. Fix should be fairly easy (use symlink target to locate own files). Would really appreciate a fix so the program can be installed in a maintainable way (just plastering a bunch of random files over /usr/bin may be traditional unix but hasn't been acceptable for quite some time. Thanks!\n. ",
    "memoryoverride": "if using *nix system a simple workarround is to start sslyze using\nuser@host:~/bin/sslyze-master$ python ./sslyze.py example.com\n. however sslyze does not show if the DH group is commonly used one, like the test on https://weakdh.org/sysadmin.html does (i.e. no difference between individually generated 1024 bit DH group and a pre-installed one) \nor did I miss something?\n. ",
    "asudhak": "unfortunately, no I do not have a public facing Jetty Server.\nEDIT: https://104.155.238.78:8443/\nI will probably keep this up for the next 10 days.\n. ",
    "tuftedocelot": "Should this actually verify the keys pinned instead of just reporting what the pins are present?\n. https://github.com/nabla-c0d3/sslyze/issues/25\n. ",
    "azet": "@tuftedocelot \nAgreed. Will add in the next week or so (currently traveling).\n. @tuftedocelot \nHad some time to take a look at that. To the best of my judgement this cannot be easily done with the current nassl lib as is. The problem really is parsing and converting of DER encoded certificate data for HPKP verification to work. For now I suggest just to check this field and export any value that has been set (this can be manually verified with e.g. a script).\n. ",
    "Xurcr0h": "If I check them with Live HTTP headers (or firebug) I get a Strict-Transport-Security:max-age=15552000:preload\nThats strange\n. Still the same\n. Checked on another notebook and got the same result\n. ",
    "lllama": "I believe it is IIS7. I shall confirm tomorrow.\n. ",
    "cjeanneret": "darn\u2026 \"This doesn't seem to be really needed\" \u00ad\u2014 wrong. Especially when we can drop an XML file: what's the use of the output?\nUsing redirections might be possible, but in my case isn't an option (call with perl \"system\" command, no output management at all)\u2026\nA --quiet won't explode user's capabilities to understand how to run the script :/\nWould @nabla-c0d3 at least consider a pull-request for that?\n. And here you are :). Pretty easy indeed. Lemme know if this suites your coding style.\n. hmm. this \"limitation\" will make this feature almost impossible I think? I'll give it a try though.\nIt might be an optional dependency? like, \"by default no json support, but doesn't break anything\" ?\n. makes sense. I'll stick to my XML2JSON conversion then :)\n. ",
    "okoeroo": "I work for a telco with older and newer systems, SNI configured and not. SNI could be misconfigured, but to understand this might be the case a scan result like this could help. Also, we're busy with vulnerability scanners and the scanners can do a check by IP-address pretty well, but when Virtual Hosting on SSL is enabled this is a must-scan-by-hostname fix case. I'd like to catch those cases explicitly with this plugin.\n. ",
    "bluec0re": "The same applies to chrome_sha1 and certinfo, doesn't it? I found it more convenient for quick and automated checks.\n. ",
    "carstenhag": "Same issue on a ARMv7l server. There should be an ARM build/release :+1: \nLinux c1-10-1-4-39 3.17.0-119 #1 SMP Thu Nov 20 14:15:44 CET 2014 armv7l armv7l armv7l GNU/Linux\n. ",
    "fabian-z": "It seems to me if you let aside cross-compilation, the needed parts are already there since this should be only an architectural flavor of linux. You'll just have to replace OPENSSL_TARGET with 'linux-armv4' in buildAll_unix.py.\nAfterwards, copy the built files manually from nassl/build/lib.linux-arm[..]/* to nassl/test/ and run the tests manually by doing \"python2.7 -m unittest discover --pattern=*_Tests.py\" in the test directory.\nIf you copy the directory nassl/test/nassl to the root directory of sslyze afterwards, it should be working fine for ARM (tested on Raspberry Pi Model B armv6h & Cubietruck armv7l, both running Arch Linux ARM).\nThere may be a better way to do this, but it in my tests it worked fine. If needed, I can provide explanatory build instructions.\nThat being said, if you just want a working, current build of sslyze 0.11 for ARM, you may use mine (working on both armv6 & armv7):\nhttps://cloud.nf-design.eu/d/009a0e61bb/\n. Sorry for the late answer - I think it should be enough to switch OPENSSL_TARGET to \"linux-armv4\" when running on ARM. I don't know enough about pythons architecture() and sys/platform to suggest a value to check for here, though.\nAdditionally, as pointed out above, the built files will be in a different directory, which should be the case for every different architecture anyway if I grasp the code correctly.\nThis would make building on the target platform feasible - I think cross-compilation would introduce to much overhead to the sslyze build.\n. +1\nQualys latest SSL Pulse shows that ~6% of scanned servers were vulnerable to POODLE over TLS.\nExample test implementation in Python can be found here:\nhttp://www.exploresecurity.com/testing-for-poodle_tls-manually/\nThe author mentions that testing for this would require a patched version of openssl, so I suspect that changes to nassl are needed for this Plugin.\n. Works perfectly here over IPv6. Are you sure you don't have a broken IPv6 config? Please check here http://test-ipv6.com/ and provide only the summary from the tab \"For the Help Desk\" on the right. Please do not include the link at the very bottom of the tab, as this will share your IP address.\n. Using the fork you specified instead of the official openssl 1.0.2 source, build runs fine and I get the following error on runtime (trying a regular scan):\n```\n[fabian@host sslyze-git]$ sslyze --regular example.org\nAVAILABLE PLUGINS\n\nSessionRenegotiationPlugin\n  OpenSslCcsInjectionPlugin\n  SessionResumptionPlugin\n  OpenSslCipherSuitesPlugin\n  CompressionPlugin\n  CertificateInfoPlugin\n  HstsPlugin\n  FallbackScsvPlugin\n  HeartbleedPlugin\nCHECKING HOST(S) AVAILABILITY\n\nTraceback (most recent call last):\n  File \"/usr/bin/sslyze\", line 676, in \n    main()\n  File \"/usr/bin/sslyze\", line 551, in main\n    raise exception\n_nassl.OpenSSLError: \nerror:140E0197:SSL routines:SSL_shutdown:shutdown while in init\n```\nScan runs fine when compiled with https://www.openssl.org/source/old/1.0.2/openssl-1.0.2e.tar.gz.\n. Sure, I was using HEAD of branch 1.0.2-chacha as of yesterday (PeterMosmans/openssl@69f9e32) and built with the master branches of sslyze/nassl checked out at the same time. \nThe commit you pointed out must have been included in my build.\nEDIT: If I can do anything to assist you in debugging this issue (build logs, system information, debug build, etc.) I'd be glad to help.\n. Since I saw mentions of Windows in #139 and https://github.com/nabla-c0d3/nassl/commit/0ff01d0b7ff099c613f189804cdd81be7c325d74, I just wanted to note that this issue presents itself on Linux x86-64 for me. As mentioned above, using official OpenSSL 1.0.2e works well for me.\n. @PeterMosmans I just tried a build with official OpenSSL 1.0.2f, which seems to be the latest version on https://www.openssl.org/source/old/1.0.2/. This test build does not show the error:140E0197:SSL routines:SSL_shutdown:shutdown while in init error~~, so I suspect it is specific to your fork.~~\nAnyways, @nabla-c0d3 requested that discussion of this issue shall continue in #139.\nThanks for looking into this.\n. I see this behaviour when compiling with the suggested openssl fork instead of the official 1.0.2e sources. (Wrote it up in #116 before seeing this issue.)\nMaybe you could try compiling from source with the original openssl to see if that fixes your problem?\nIf you need some pointers on the build process, you can get an idea from my sslyze-git PKGBUILD\n. @nabla-c0d3 Sure, no problem.\nI could reproduce this on an up to date Arch Linux 64bit box. Was trying to use the recommended 1.0.2-chacha fork for my PKGBUILD instead of the official old OpenSSL 1.0.2e source.\nThe package works fine as is with the official OpenSSL source, but if trying to use the OpenSSL fork, the now well-known SSL routines:ssl3_shutdown:shutdown while in init appears for every scan attempt (also without client certificates).\nEDIT: This occurs although nassl tests run fine after build..\n. @janderse The new release reverts to using the official version of OpenSSL instead of the problematic fork, which is why it works for you again. See the reasons for the inital switch to the fork here: #116. This was fixed in binary release for Win32/64, but the issue apparently exists at least for Linux, too, and just reverting to the old version is no long term option because of the reasons outlined in #116.\nSo it seems like the differences between OpenSSL 1.0.2f and the 1.0.2-chacha branch of @PeterMosmans fork have to be bisected to find the offending change and hopefully fix the underlying issue.\nAs the bug at hand does not exhibit any relation to specific servers for me, your offer of a test endpoint is generous, but imho not needed at the moment. Thank you anyway!\n. @PeterMosmans  I just tried rebuilding with https://github.com/openssl/openssl/commit/e76f48539109829819aabc03953cf2cfd4612961, which seems to be the latest commit to the OpenSSL_1_0_2-stable branch. \nUnfortunately, the build succeeded, but the test suite failed with\n```\nERROR: test_set_cipher_list (SSL_Tests.SSL_Tests)\nTraceback (most recent call last):\n  File \"/tmp/sslyze-git/src/nassl/tests/SSL_Tests.py\", line 107, in test_set_cipher_list\n    self.assertIsNone(test_ssl.set_cipher_list(\"LOW\"))\nOpenSSLError: \nerror:140C5042:SSL routines:ssl_undefined_function:called a function you should not call\nerror:1410F0B9:SSL routines:SSL_set_cipher_list:no cipher match\n```\nHowever, when ignoring the tests, the scan in fact fails with\nerror:140E0197:SSL routines:SSL_shutdown:shutdown while in init. So the main difference between https://github.com/openssl/openssl/commit/e76f48539109829819aabc03953cf2cfd4612961 and HEAD of 1.0.2-chacha is not erroring out on a scan attempt (as both versions do that identically), but that as of the latest commit for 1.0.2, the official version fails the test suite, too.\n. That seems logical. The change must have happened between 1.0.2f (which should correspond to https://github.com/openssl/openssl/commit/95605f3ae1ec8857e8cb612ce35805a3b0207d21) and https://github.com/openssl/openssl/commit/e76f48539109829819aabc03953cf2cfd4612961. As I wrote in #116, 1.0.2f passes the test suite and has no errors during scan for me.\n. Sure, you're welcome. Maybe it will help you to know that I tried 1.0.2g (https://github.com/openssl/openssl/commit/902f3f50d051dfd6ebf009d352aaf581195caabf) and both the test suite and regular scan attempts fail with multiple ImportError: _nassl.so: undefined symbol: SSLv2_method errors.\n. The baffling part is that I can run a scan attempt when building against the current HEAD of OpenSSL_1_0_2-stable, even though the attempt will error out with error:140E0197:SSL routines:SSL_shutdown:shutdown while in init.\nWhen building against OpenSSL_1_0_2g, I get the ImportError: _nassl.so: undefined symbol: SSLv2_method.\n~~I wonder if they somehow re-added SSLv2 functions..~~\nEDIT:\nIt turns out that SSLv2 methods were recently re-added as functions that return NULL in order to improve ABI compatibility:\nhttps://github.com/openssl/openssl/commit/133138569f37d149ed1d7641fe8c75a93fded445\nhttps://github.com/openssl/openssl/commit/fcedd2d69d950af8fcde05206ee35e8a2b1cfb0b\n. ",
    "AshleyPoole": "I'd like to see this too! Along with a new field showing if the server is vulnerable or not.\n. That would be cool.\n. ",
    "feralfenrir": "+1 I'd love to see this and BEAST checks\n. ",
    "nottheend": "+1 I would also be happy if this would be available in sslyze\n. I just saw that a similar issue came up already.\n#39 in nassl is somehow related to that topic, but here the error message appears after \"Successfully installed nassl\".\n. It is correct, there was a problem with the python installation.\nThis site for centOS was helping to resolve the issue:\nhttp://toomuchdata.com/2014/02/16/how-to-install-python-on-centos/\nThanks.\n. Ok, thanks.\n. Thanks. Tried to build it as described in README.md: python.exe setup_py2exe.py py2exe\nIt is not successful, receiving the following error:\nFile \"sslyze\\setup_py2exe.py\", line 7, in <module>\n    import py2exe\nModuleNotFoundError: No module named 'py2exe'. Was able to install sslyze on Windows only with Python 2.7, environment managed by Anaconda. While waiting sslyze can be run on Windows with a python2.7 enviroment, created by Anaconda\nIssue #210 is also windows-concerned. Work in progress: updating sslyze to Python 3.6 for Windows. See here: #240. Nice! It works.. It works fine with Python 3.6. A virtual Python environment may help. It's possible to use the right versions then.\nLike Anaconda on Windows. Which version of Python are you using?. This is actually true. And strange...\nI found other domains, which can't be testet directly:\nbund.de\nI am wondering how this is possible. Because opening the website in browser is actually possible. It's true, they seem to accept only very few connection per time.\nBut some, e.g. otto.de can be tested via ssllabs.\nIs it possible to even reduce the number of connections with the option --slow_connection?. Exactly that value of key size - but want to access it via python library and I couldn't find it in the documentation of the scan command\nIs it possible to access it via library?. Thanks! That's what I was looking for. :+1:. ",
    "thomai": "Do you use the compatible nassl release for SSLyze v0.11?\nhttps://github.com/nabla-c0d3/nassl/releases/tag/v0.11\n. Yes, that's right. I don't use the pre-compiled versions, sorry.\nThe readme file says:\n\nThe pre-compiled packages for SSLyze contain a compiled version of this wrapper in sslyze/nassl. If you want to clone the SSLyze repo, you will have to get a compiled version of nassl from one of the SSLyze packages and copy it to sslyze-master/nassl, in order to get SSLyze to run.\n. \n",
    "abtreece": "is the compatible nassl version not included with the version release?\nOn Apr 18, 2015 9:34 PM, \"Thomas Maier\" notifications@github.com wrote:\n\nDo you use the compatible nassl release for sslyze 0.11?\nhttps://github.com/nabla-c0d3/nassl/releases/tag/v0.11\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nabla-c0d3/sslyze/issues/70#issuecomment-94225978.\n. RHEL 6.5 (and variants)... l0.10 works w/out issue. 0.11 is the one i'm having issues with.\n. confirmed. thanks!\n. \n",
    "landscape-bot": "\nRepository health decreased by 0.75% when pulling 0cda2c4 on kyprizel:master into 1d3784e on nabla-c0d3:master.\n- 10 new problems were found (including 0 errors and 10 code smells).\n- No problems were fixed.\n. \nRepository health increased by 0.58% when pulling 51c67c1 on kyprizel:master into 1d3784e on nabla-c0d3:master.\n- 1 new problem was found (including 0 errors and 1 code smell).\n- No problems were fixed.\n. \nCode quality remained the same when pulling a1b17e0 on ingben:fix/chrome_sha1_mozilla_cacerts into 1d3784e on nabla-c0d3:master.\n. \nRepository health decreased by 0.37% when pulling d89218b on ZenSecurity:master into 80a8298 on nabla-c0d3:master.\n- 2 new problems were found (including 0 errors and 2 code smells).\n- No problems were fixed.\n. \nRepository health increased by 0.27% when pulling 7309443 on ZenSecurity:master into 80a8298 on nabla-c0d3:master.\n- No new problems were introduced.\n- 1 problem was fixed (including 0 errors and 0 code smells).\n. \nCode quality remained the same when pulling 5ffa570 on glestel:master into b1c2ac8 on nabla-c0d3:master.\n. ",
    "laurarosenberg": "I get the following exception: \nUnhandled exception when processing --chrome_sha1:\nexceptions.TypeError - Incorrect padding\nplease check your mozilla.pm file in version 0.11 - there are titles between the certificates - this cause the exception.\nexample:\nEquifax Secure CA\n=================\n-----BEGIN CERTIFICATE-----\nMIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJVUzEQMA4GA1UE\nChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlmaWNhdGUgQXV0aG9yaXR5\nMB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoT\nB0VxdWlmYXgxLTArBgNVBAsTJEVxdWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCB\nnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPR\nfM6fBeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+AcJkVV5MW\n8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kCAwEAAaOCAQkwggEFMHAG\nA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UE\nCxMkRXF1aWZheCBTZWN1cmUgQ2VydGlmaWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoG\nA1UdEAQTMBGBDzIwMTgwODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvS\nspXXR9gjIBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQFMAMB\nAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUAA4GBAFjOKer89961\nzgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y7qj/WsjTVbJmcVfewCHrPSqnI0kB\nBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee95\n70+sB3c4\n-----END CERTIFICATE-----\n. ",
    "ashleyblackmore": "Ubuntu 15.04 \nOn 7 May 2015 7:45:11 PM GMT+02:00, Alban Diquet notifications@github.com wrote:\n\nWhich Linux distro are you using? I'm unable to reproduce this.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nabla-c0d3/sslyze/issues/74#issuecomment-99956352\n. Yeah seems to be fixed, likely pebkac somehow. Thanks.\n. \n",
    "tam7t": "I'm having the same results with sslyze and getting the same error when using homebrew's openssl as well:\n``` bash\n~ $ openssl s_client -connect fonts.googleapis.com:443 -verify 5\nverify depth is 5\nCONNECTED(00000003)\ndepth=2 /C=US/O=GeoTrust Inc./CN=GeoTrust Global CA\nverify error:num=20:unable to get local issuer certificate\nverify return:1\ndepth=2 /C=US/O=GeoTrust Inc./CN=GeoTrust Global CA\nverify error:num=27:certificate not trusted\nverify return:1\ndepth=1 /C=US/O=Google Inc/CN=Google Internet Authority G2\nverify return:1\ndepth=0 /C=US/ST=California/L=Mountain View/O=Google Inc/CN=*.googleapis.com\nverify return:1\n\n```\nIt does succeed when using the equifax ca pem:\n``` bash\n~ $ openssl s_client -connect fonts.googleapis.com:443 -verify 5 -CAfile /usr/local/etc/openssl/certs/Equifax_Secure_Certificate_Authority.pem\nverify depth is 5\nCONNECTED(00000003)\ndepth=3 /C=US/O=Equifax/OU=Equifax Secure Certificate Authority\nverify return:1\ndepth=2 /C=US/O=GeoTrust Inc./CN=GeoTrust Global CA\nverify return:1\ndepth=1 /C=US/O=Google Inc/CN=Google Internet Authority G2\nverify return:1\ndepth=0 /C=US/ST=California/L=Mountain View/O=Google Inc/CN=*.googleapis.com\nverify return:1\n\n```\nHomebrew openssl says\n``` bash\nA CA file has been bootstrapped using certificates from the system\nkeychain. To add additional certificates, place .pem files in\n  /usr/local/etc/openssl/certs\nand run\n  /usr/local/opt/openssl/bin/c_rehash\n```\nThe equifax pem was already in my openssl/certs folder but running c_rehash does not change the output of openssl.\n. Relevant openssl discussion on the Equifax Cert being removed from 10.10.3: https://www.mail-archive.com/openssl-dev@openssl.org/msg38674.html\n\nGoogle cross-sign their GeoTrust root with an old Equifax root\n\nGeoTrust root is in the keychain, but openssl 1.0.2a keeps trying to verify the Equifax root.\n. This command works in 0.11, it looks like the error was introduce in https://github.com/nabla-c0d3/sslyze/commit/375d103326c9e419b487a493747c55f48f9997ac. ocsp_response.verify is called when it is None.\n. PR for update in homebrew: https://github.com/Homebrew/homebrew/pull/44303\n. ",
    "LordMike": "I get the following against a relatively new ubuntu/nginx server. The version is 0.11 (I downloaded a binary release) on a Windows 7 Client.\nDHE-RSA-AES256-SHA256               KeyError - 'PKCS#3_DH_Parameters'\n             DHE-RSA-AES256-SHA                  KeyError - 'PKCS#3_DH_Parameters'\n             DHE-RSA-AES256-GCM-SHA384           KeyError - 'PKCS#3_DH_Parameters'\n             DHE-RSA-AES128-SHA256               KeyError - 'PKCS#3_DH_Parameters'\n             DHE-RSA-AES128-SHA                  KeyError - 'PKCS#3_DH_Parameters'\n             DHE-RSA-AES128-GCM-SHA256           KeyError - 'PKCS#3_DH_Parameters'\nSuccesfull algorithms on this server are:\nECDHE-RSA-AES256-SHA384       ECDH-256 bits  256 bits                                       \n             ECDHE-RSA-AES256-SHA          ECDH-256 bits  256 bits                                       \n             ECDHE-RSA-AES256-GCM-SHA384   ECDH-256 bits  256 bits                                       \n             ECDHE-RSA-AES128-SHA256       ECDH-256 bits  128 bits                                       \n             ECDHE-RSA-AES128-SHA          ECDH-256 bits  128 bits                                       \n             ECDHE-RSA-AES128-GCM-SHA256   ECDH-256 bits  128 bits\nThe server in question is specifically configured with a 4096-bit DH parameters file.\n. I realized my error regarding what I said on them repeating, and edited it shortly after. I must have been sleeping when I compared the two lists. :).\n. ",
    "janderse": "Michael,\nDHE and ECDHE are related but different algorithms.  So it isn't\nrepeating.   sslyze 0.11 has a bug with DHE but not ECDHE algorithms.\nOn May 28, 2015 11:00 AM, \"Michael Bisbjerg\" notifications@github.com\nwrote:\n\nI get the following on a relatively new server. The version is 0.11 (I\ndownloaded a binary release) on a Windows 7 Client.\nDHE-RSA-AES256-SHA256               KeyError - 'PKCS#3_DH_Parameters'\n         DHE-RSA-AES256-SHA                  KeyError - 'PKCS#3_DH_Parameters'\n         DHE-RSA-AES256-GCM-SHA384           KeyError - 'PKCS#3_DH_Parameters'\n         DHE-RSA-AES128-SHA256               KeyError - 'PKCS#3_DH_Parameters'\n         DHE-RSA-AES128-SHA                  KeyError - 'PKCS#3_DH_Parameters'\n         DHE-RSA-AES128-GCM-SHA256           KeyError - 'PKCS#3_DH_Parameters'\nSuccesfull algorithms on this server are:\nECDHE-RSA-AES256-SHA384       ECDH-256 bits  256 bits\n         ECDHE-RSA-AES256-SHA          ECDH-256 bits  256 bits\n         ECDHE-RSA-AES256-GCM-SHA384   ECDH-256 bits  256 bits\n         ECDHE-RSA-AES128-SHA256       ECDH-256 bits  128 bits\n         ECDHE-RSA-AES128-SHA          ECDH-256 bits  128 bits\n         ECDHE-RSA-AES128-GCM-SHA256   ECDH-256 bits  128 bits\nActually. Looking at it, it seems the suites repeat. So a suite is both\naccepted and with errors, at the same time?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nabla-c0d3/sslyze/issues/77#issuecomment-106380432.\n. Is it just the Not Supported tag?  Are there other problems?\n. Technically it should be  right, since there is no closing\ntag?\nOn May 18, 2015 8:09 AM, \"Alban Diquet\" notifications@github.com wrote:\nSure - I'll remove the white spaces.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nabla-c0d3/sslyze/issues/82#issuecomment-103039641.\n. Ugh, autocorrect:\n\n\nOn May 18, 2015 8:40 AM, \"Jon Andersen\" janderse@gmail.com wrote:\n\nTechnically it should be  right, since there is no\nclosing tag?\nOn May 18, 2015 8:09 AM, \"Alban Diquet\" notifications@github.com wrote:\n\nSure - I'll remove the white spaces.\n\u2014\nReply to this email directly or view it on GitHub.\n. Unfortunately I can't provide the URL since it is a proprietary server that is not on the public internet.  But I'll see if I can get it to reproduce on another server.\n. The error seems to occur for any host.  For example:\n./sslyze.py --regular google.com\n\n\nAVAILABLE PLUGINS\n\nPluginHSTS\n  PluginCompression\n  PluginChromeSha1Deprecation\n  PluginSessionRenegotiation\n  PluginCertInfo\n  PluginOpenSSLCipherSuites\n  PluginSessionResumption\n  PluginHeartbleed\nCHECKING HOST(S) AVAILABILITY\n\nTraceback (most recent call last):\n  File \"./sslyze.py\", line 348, in \n    main()\n  File \"./sslyze.py\", line 244, in main\n    print ServersConnectivityTester.get_printable_result(targets_OK, targets_ERR)\n  File \"/Users/jonathana/sslyze2/utils/ServersConnectivityTester.py\", line 184, in get_printable_result\n    result_str += exception.get_error_txt()\nAttributeError: 'exceptions.TypeError' object has no attribute 'get_error_txt'\nRepro steps:\ngit clone https://github.com/nabla-c0d3/sslyze.git sslyze2\ncd sslyze2\npython setup.py build\npython sslyze.py --regular google.com\nI get this on Mac OS X 10.9.2 running Python 2.7.10, and also Windows 7 Enterprise SP1 64-bit running Python 2.7.10.  Do you see the same thing using these repro steps?\n. Any comments?  I'm not sure which type of vulnerability scanners will be accepted and which won't.\n. SLOTH is about MD5 and/or SHA1 hash algorithms being used in signatures.  TLS 1.2 adds the new signature_algorithms extension and the client and server can negotiate which hash algorithms are used for signatures.  \nThis is separate from the cipher suites.  So the information about which signature algorithms the server supports is not already available in the XML or text display.  No existing plug-in does this.\nClients or servers allowing MD5 in signature_algorithms is a vulnerability, and the SLOTH attack exploits it to break TLS.  In addition, some TLS implementations have a related vulnerability where the client or server will accept MD5/SHA1 even when it does not advertise it, which means it can still be exploited.  The MD5 attack is cheap enough for anyone to perform.  The SHA1 attack is within the reach of intelligence agencies.\n. I can confirm that I see the same error with the latest Windows release.\nTry it yourself:\nsslyze_cli.exe --regular q103.qckr.net\nI get:\n_nassl.OpenSSLError:\nerror:1418C197:SSL routines:ssl3_shutdown:shutdown while in init\nThis only seems to happen when the server requests a client certificate on the initial connection (not a renegotiation). \nSo this succeeds:\nsslyze_cli.exe --regular google.com\n. The bug doesn't happen on Mac OS X.  Ran v0.13.3 on Mac OS X:\n./sslyze_cli.py --regular q103.qckr.net\nAnd got the proper output, including this appropriate warning:\nWARNING: Server requested optional client authentication\nSo this may be a nassl bug on Windows?\n. Sure.  You can scan this public host for debugging:\nsslyze_cli.exe --regular q103.qckr.net\n. This appears to be fixed for Windows by SSLyze v0.13.5.  It is working for me...  This works:\nsslyze_cli.exe --regular q103.qckr.net\n@fabian-z are you able to scan q103.qckr.net using the latest release?\n. ",
    "jmdesp": "There's a patch on 0.11 according to which the string \"PKCS#3_DH_Parameters\" doesn't occur anymore in the source since 'DH_Parameters' is used instead to retrieve the DH parameters :\nhttps://github.com/nabla-c0d3/nassl/commit/9e9d4061356a7e1d370621cac2e5030aa32461f3\nWell, I decompressed the content of the windows executable version of 0.11, and if I'm correct, it seems that the patch even if present in github is actually missing from the windows 0.11 release. Which would explain the mismatch with the openssl 1.0.2 release.\n. ",
    "StephenShamakian": "+1 ! \nI too would love this capability! I had to wrote a tool that parses the XML and converts it to a C# object then from that into JSON via WebAPI. It would be great to just pass the exact JSON output from the tool removing the need for the extra computation!\n. Great thanks! It looks like SSLLabs.com shows when F5 devices have it enabled. Though granted no idea how they are going about their testing.\n. This isn't exactly a duplicate of XML outpu request. I mentioned wrapping code as a work around.\n. Having issues building the python to exe and also running it natively as python. Can't use pip either as our proxy is blocking its access. Curious when is the next release with the latest fixes?\n. Thanks! Will test it tomorrow and report back.\n. Still errors out:\n`\nsslyze_cli.exe --regular 167.69.70.101\nAVAILABLE PLUGINS\n\nSessionRenegotiationPlugin\n  HstsPlugin\n  HeartbleedPlugin\n  CertificateInfoPlugin\n  FallbackScsvPlugin\n  OpenSslCipherSuitesPlugin\n  SessionResumptionPlugin\n  CompressionPlugin\n  OpenSslCcsInjectionPlugin\nCHECKING HOST(S) AVAILABILITY\n\nTraceback (most recent call last):\n  File \"sslyze_cli.py\", line 675, in \n  File \"sslyze_cli.py\", line 551, in main\n_nassl.OpenSSLError:\nerror:1418C197:SSL routines:ssl3_shutdown:shutdown while in init`\n. ",
    "arjones67": "Was anything ever found on this issue?  I'm seeing the same thing with using --regular with only TLSv1.1 or TLSv1.2 (just 1 of them) enabled on Apache 1.2.15 on RHEL 6.6.  I'm using sslyze  0.11 with Python 2.7.5.  \nWith only tlsv1.2 and using --tlsv1_2, I get the results for tlsv1.2, but --regular times out.  I get this same behavior with only tlsv1.1 enabled (--tlsv1_1 works, but not --regular).  With TLSv1 only enabled both --regular and --tlsv1 work.  As soon as I enable a 2nd protocol, --regular works with any combination.\n. ",
    "Vilican": "No, it does not work. It shows timeout.\n. Are you sure you can connect to the server from your host? Yes, I can.\nDo you have a lot of simultaneous connections open? What exactly mean a lot of?\n. ",
    "fishouttah20": "Similarly I could really do with a 0.12 to resolve #77 on 64bit Windows. I'd build it myself but the Readme states \"If you want to clone the SSLyze repo, you will have to get a compiled version of nassl from one of the SSLyze packages and copy it to sslyze-master/nassl, in order to get SSLyze to run.\" but I don't see a compiled version of nassl in the Windows release. Maybe I'm misinterpreting.\n. Ah, that explains it. Thanks very much.\n. ",
    "elvanderb": "Vulnerable to client-initiated renegotiations this is not the same thing than unsafe renegotiation.\nClient initiated renegotiation can be used to perform DoS attacks.\nUnsafe renegotiation can be used to inject arbitrary data in encrypted messages.\nThis is not a sslyze bug and not a JBoss one neither.\n. ",
    "tr4nc3": "Interesting point.  So it's not even a false positive too.  I'd imagine to be not vulnerable then one would have to disable all renegotiations - secure and insecure.  Do you happen to know how often modern browsers issue SSL renegotiation requests?  I'd imagine this wouldn't be so frequent. \n. ",
    "henshin": "In this case the certificate was in fact signed using SHA-1. But is there any workaround for this?\n. I see. Thanks for the explanation.\nSo it means that for SSLyze to validate the host correctly, the cert file provided in the --ca_file option should have the complete chain inside, right?\nI think it would be nice for it to use that certificate along with the others in the stores to validate the target. Or is it a bad idea?\n. Yes, I agree that it's acceptable. \nBefore closing this issue, just one more question. Does SSLyze has the capability of recognizing when the server sends the complete chain or not and warn about it when it doesn't (instead of just reporting it as invalid)? \nI'm currently parsing the xml output of SSLyze to feed another script and it would be very helpful if I can infer this situation.\nThanks for the feedback\n. In my case, the problem is the second thing you mentioned. The intermediate certificates are missing and that makes it invalid. However because browsers can fetch the intermediate certificates on-the-fly through the information on AIA extension, they validate the cert successfully.\nI downloaded the latest version of OpenSSL 1.0.2d, and ran the validation check again and unfortunately it still marks it as invalid. I tried to check if there any options related to the AIA extension, but I didn't found any.\nSo far the only thing that makes SSLyze mark the certificate as valid is to download the intermediate certificate, add it to a pre-existing cert bundle file and use that file with the --ca_file option:\n\n  * Certificate - Trust:\n      Hostname Validation:               OK - Subject Alternative Name matches\n      Mozilla NSS CA Store (04/2015):    FAILED - Certificate is NOT Trusted: unable to get local issuer certificate\n      Microsoft CA Store (04/2015):      FAILED - Certificate is NOT Trusted: unable to get local issuer certificate\n      Java 6 CA Store (Update 65):       FAILED - Certificate is NOT Trusted: unable to get local issuer certificate\n      Custom --ca_file CA Store (N/A):   OK - Certificate is trusted\n      Apple CA Store (OS X 10.10.3):     FAILED - Certificate is NOT Trusted: unable to get local issuer certificate\n      Certificate Chain Received:        ['host']\n\nMaybe someday you can find some time to implement some checks to do this automatically :)\n. You're right and after further investigation, I conclude if a server doesn't send the complete chain, this should be reported as a misconfiguration, otherwise we are encouraging lazy sys admins because a properly configured server should always send the complete chain. There's actually a issue open on BugZilla that goes back to 2007 where this problem is being discussed in detail (https://bugzilla.mozilla.org/show_bug.cgi?id=399324). After reading some comments, I also agree that the browser/client shouldn't be responsible for fetching intermediate certs.\nThanks for the support.\n. ",
    "Archstacker": "Now I have wrapped the sslyze to a web server with the help of tornado and this XSLT stylesheet : https://github.com/Archstacker/sslyze-web\n. ",
    "happyc0ding": "Hi,\nI completely agree with you: This configuration does not make any sense. However, I see strange SSL configurations on a regular basis - and some of these services make sslyze fail and it would be nice if they didn't.\nWhat do you think? Is it too much effort to try another handshake with a different cipher list?\nThanks.\n. ",
    "ikarus23": "Hey there,\nI come across strange SSL configurations like this too (although they make no sense). It would be really cool if I could use sslyze even for these strange servers...\n. ",
    "benji1000": "Nice, thanks!\n. ",
    "tykkz": "I want to work on this @nabla-c0d3, what do you have in mind?\nIf you have any plans regarding this issue, other than \"reading the XML file\" & \"generating one-page HTML file\", I can help in the implementation.. I want to work on this request.\nSome servers obey the client side cipher suite order and select the first one from the list offered by the client. But some other servers prefer to select the cipher based on their own selection list (prefer to use -arguably- better ciphers). For example; Google has its own selection order for ciphers and omits the order from the client.\nTherefore, the first thing to do is to check whether the server has its own cipher suite preference order or not. I think the following method will help us in this matter:\n- We select two ciphers (e.g. cipherA and cipherB) from the accepted_cipher_list and initiate two SSL connections using these ciphers (one connection with cipherA-cipherB as the client order and another connection with cipherB-cipherA as the client order).\n- If the server obeys the client order, then it would select the first cipher from these two connection requests. If not, then the server will select either the cipherA or cipherB for both connection requests, based on its preference list.\n- This way, we will know whether the server keeps its own preference list or not.\nIf this works out for you @nabla-c0d3, then I will do the implementation and send a PR.\nBtw, I am also thinking on the best method to sort the accepted_cipher_list according to the server side cipher preference list. I will write here when I find a reasonable solution.\n. I am almost done with the implementation. I would be very glad if you can assign this Github issue to me @nabla-c0d3? My instructor wants to make sure that I am the only person working on this feature request. Thank you!\nNow, I would like to point out the modifications that I've done, before sending a PR:\n1. Only modified the OpenSslCipherSuitesPlugin plugin to add this feature.\n2. Introduced an option  named as --check_server_preference that triggers this feature. (If you want, I can remove this option and check for \"cipher suite preference\" at every run of sslyze.)\n3. Added openssl_cipher_name to the AcceptedCipherSuite class. (I need this to create two SSL connections that I have mentioned earlier. It's costly to find the openssl name from OPENSSL_TO_RFC_NAMES_MAPPING dictionary.)\n4. Printed the result in the way you requested. It's before the prefered cipher. You can see the sample output below.\nIf this works out for you, I will send the pull request in a few days.\n\n. I have done the changes that you have requested.\nI selected sogou.com domain as test case by analyzing domains in top100.txt file. :). I actually wanted to make similar changes but did not want to interfere extensively with the existing code base. It looks much clear now :). ",
    "kevinoid": "Good to know, thanks!\n. Thanks @nabla-c0d3!\n. ",
    "clfnk": "Great! And thanks for providing this handy tool!\n. I have tried the fix and it works, thanks! \nAlso with an encrypted key, as long as it is encrypted with a compatible cipher - not all encryption schemes worked for me, some gave an error as shown below, the first line states that the cipher seems unknown.\nerror:060740A0:digital envelope routines:EVP_PBE_CipherInit:unknown cipher\nerror:23077073:PKCS12 routines:PKCS12_pbe_crypt:pkcs12 algor cipherinit error\nerror:2306A075:PKCS12 routines:PKCS12_item_decrypt_d2i:pkcs12 pbe crypt error\nerror:0907B00D:PEM routines:PEM_READ_BIO_PRIVATEKEY:ASN1 lib\nerror:140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib\nNote: With the most recent version, output is a bit restricted without specifying the client certificate/key when compared to the version before. The first sample is my old version run without client certificate/key, the second is the trunk version without a certificate/key (note that I can life with that as I have to give the certificate/key to sslyze anyway to test what I want to).\n== BEFORE ==\n```\nAVAILABLE PLUGINS\n\nPluginOpenSSLCipherSuites\n  PluginChromeSha1Deprecation\n  PluginCompression\n  PluginSessionRenegotiation\n  PluginHSTS\n  PluginSessionResumption\n  PluginHeartbleed\n  PluginCertInfo\nCHECKING HOST(S) AVAILABILITY\n\nlocalhost:12345                     => 127.0.0.1:12345\nSCAN RESULTS FOR LOCALHOST:12345 - 127.0.0.1:12345\n\n\n\nSession Renegotiation:\n      Client-initiated Renegotiations:   ERROR\n      Secure Renegotiation:              ERROR\n\n\nDeflate Compression:\n      OK - Compression disabled\n\n\nUnhandled exception when processing --heartbleed:\nutils.SSLyzeSSLConnection.SSLHandshakeRejected - TLS / Unexpected EOF\n\n\nCertificate - Content:\n      SHA1 Fingerprint:                  a9774f4738926d2ce0682dee7bad510711c362e1\n      Common Name:                       Web Service\n      Issuer:                            Web Service\n      Serial Number:                     A7E94E4BA81C6B0F542ADF72705A924BABFDBF71\n      Not Before:                        Jan 11 12:54:07 2016 GMT\n      Not After:                         Jan  8 12:54:07 2026 GMT\n      Signature Algorithm:               sha256WithRSAEncryption\n      Public Key Algorithm:              rsaEncryption\n      Key Size:                          4096 bit\n      Exponent:                          65537 (0x10001)\n\n\nCertificate - Trust:\n      Hostname Validation:               FAILED - Certificate does NOT match localhost\n      Google CA Store (09/2015):         FAILED - Certificate is NOT Trusted: self signed certificate\n      Java 6 CA Store (Update 65):       FAILED - Certificate is NOT Trusted: self signed certificate\n      Microsoft CA Store (09/2015):      FAILED - Certificate is NOT Trusted: self signed certificate\n      Mozilla NSS CA Store (09/2015):    FAILED - Certificate is NOT Trusted: self signed certificate\n      Apple CA Store (OS X 10.10.5):     FAILED - Certificate is NOT Trusted: self signed certificate\n      Certificate Chain Received:        ['Web Service']\n\n\nCertificate - OCSP Stapling:\n      NOT SUPPORTED - Server did not send back an OCSP response.\n\n\nTLSV1_2 Cipher Suites:\n      Undefined - An unexpected error happened:\n                 ECDHE-RSA-AES256-GCM-SHA384         ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n                 ECDHE-RSA-AES128-GCM-SHA256         ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n                 DHE-RSA-AES256-GCM-SHA384           ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n                 DHE-RSA-AES128-GCM-SHA256           ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n\n\nSession Resumption:\n      With Session IDs:                  ERROR (0 successful, 0 failed, 5 errors, 5 total attempts).\n        ERROR #1: ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n        ERROR #2: ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n        ERROR #3: ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n        ERROR #4: ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n        ERROR #5: ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n      With TLS Session Tickets:          ERROR: ClientCertificateRequested - Server requested a client certificate issued by one of the following CAs: '/C=CH/O=MYORG/CN=database', '/C=CH/O=MYORG/OU=SASS/CN=Web Service'.\n\n\nSSLV2 Cipher Suites:\n      Server rejected all cipher suites.\n\n\nTLSV1_1 Cipher Suites:\n      Server rejected all cipher suites.\n\n\nTLSV1 Cipher Suites:\n      Server rejected all cipher suites.\n\n\nSSLV3 Cipher Suites:\n      Server rejected all cipher suites.\n```\n\n\n== NEW ==\n```\nAVAILABLE PLUGINS\n\nPluginHeartbleed\n  PluginChromeSha1Deprecation\n  PluginOpenSSLCipherSuites\n  PluginSessionResumption\n  PluginCertInfo\n  PluginSessionRenegotiation\n  PluginCompression\n  PluginHSTS\nCHECKING HOST(S) AVAILABILITY\n\nlocalhost:12345                     => 127.0.0.1:12345\nSCAN RESULTS FOR LOCALHOST:12345 - 127.0.0.1:12345\n\nUnhandled exception when processing --reneg:\nutils.SSLyzeSSLConnection.SSLHandshakeRejected - TLS / Unexpected EOF\nUnhandled exception when processing --compression:\nutils.SSLyzeSSLConnection.SSLHandshakeRejected - TLS / Unexpected EOF\nUnhandled exception when processing --heartbleed:\nutils.SSLyzeSSLConnection.SSLHandshakeRejected - TLS / Unexpected EOF\n\nTLSV1_2 Cipher Suites:\n      Server rejected all cipher suites.\n\nUnhandled exception when processing --certinfo:\nutils.SSLyzeSSLConnection.SSLHandshakeRejected - TLS / Unexpected EOF\n\n\nSSLV2 Cipher Suites:\n      Server rejected all cipher suites.\n\n\nTLSV1_1 Cipher Suites:\n      Server rejected all cipher suites.\n\n\nSession Resumption:\n      With Session IDs:                  ERROR (0 successful, 0 failed, 5 errors, 5 total attempts).\n        ERROR #1: SSLHandshakeRejected - TLS / Unexpected EOF\n        ERROR #2: SSLHandshakeRejected - TLS / Unexpected EOF\n        ERROR #3: SSLHandshakeRejected - TLS / Unexpected EOF\n        ERROR #4: SSLHandshakeRejected - TLS / Unexpected EOF\n        ERROR #5: SSLHandshakeRejected - TLS / Unexpected EOF\n      With TLS Session Tickets:          ERROR: SSLHandshakeRejected - TLS / Unexpected EOF\n\n\nTLSV1 Cipher Suites:\n      Server rejected all cipher suites.\n\n\nSSLV3 Cipher Suites:\n      Server rejected all cipher suites.\n```\n. Unfortunately, the new OpenSSL base seems to break some things:\n\n\nHTTPS with client authentication leads to error\nBefore (sslyze commit 7eacc67d51fe89967d000d67e4f73afebf79c83a)\n=> As stated previously.\nNew (sslyze commit 7d6fc64fdae2a972adea4a955b7c1de3acfd510d)\nTraceback (most recent call last):\n  File \"./sslyze_cli.py\", line 630, in <module>\n    main()\n  File \"./sslyze_cli.py\", line 532, in main\n    raise exception\n_nassl.OpenSSLError:\nerror:1418C197:SSL routines:ssl3_shutdown:shutdown while in init\nThe error does not occur when checking HTTPS without client authentication.\nI have observed the same error when attempting to check XMPP (server).\nPostgres check fails\nbefore (sslyze commit 7eacc67d51fe89967d000d67e4f73afebf79c83a)\nBy using --starttls=postgres, check went fine.\nNew (sslyze commit 7d6fc64fdae2a972adea4a955b7c1de3acfd510d)\n```\nCHECKING HOST(S) AVAILABILITY\n\nlocalhost:5432                      => WARNING: Postgres AUTH TLS was rejected; discarding corresponding tasks.\n```\n. It leads to a socket.timeout exception. Note that this exception has to be handled before the socket.error (as socket.timeout is a suberror of socket.error).\nUnhandled exception when processing --reneg:\nsocket.timeout - timed out\n. ",
    "servomekanism": "@clfnk what command line arguments are you using to use the .p12 file as input, as shown in the second try?. ",
    "PeterMosmans": "Hi, thanks for reporting the issues. I'll look into it (see https://github.com/PeterMosmans/openssl/issues/37 for more information).\n@fabian-z have you tried the latest build of the vanilla OpenSSL version (1.0.2e is not the latest version and doesn't align with the fork) ? They should have similar results.\n. Thanks for researching this @nabla-c0d3 - this means that for this issue the 1.0.2-chacha fork performs 'the same' as the official fork :wink: - as expected :wink:\nI'm removing this issue for the 1.0.2-chacha branch.\n. ",
    "itlabitto": "Any alternatives for adding modern ciphers? dumb question, any option for using 2 different version of OpenSSL? Tx.. I couldn't manage to make it work in version 1.1.4 by updating the original \"openssl_cipher_suites_plugin.py\" with your changes, result on error:\n\"RuntimeError: Scan command failed: [' * TLSV1_2 Cipher Suites:', 'Unhandled exception while running --tlsv1_2:', \"AttributeError - 'HTTPSConnection' object has no attribute 'set_cipher_list'\"]\"\nUPDATE: Working now, changed \"ssl_connection.set_cipher_list\" with \"ssl_connection.ssl_client.set_cipher_list\" at lines 190, 191, 236, 262, 319, 320, 322 and 324. I would check OCSP and show that cert is revoked. It would be good to advise users to take care of it when revoked. User may have some hours to get a new one till CRL is published and avoid a bigger impact. \nBy my experience, they usually realize when is late and have many end users complaining, then rush to get a new one. \nI will check if the cryptography library has something working, I get the CRL and OCSP url so far.. hmmm, I see. The mess is when you have missing intermediate certificates in the chain.\nWhat about building a repository (store) of intermediate certificates where to append each intermediate that you find when you test the certificates. It will help for having a local copy of the intermediate for checkign CRL/OCSP. In Windows MMC you can find a folder for Trusted intermediate certificates, kind of play this role.\nHaving an intermediate certificate store may help to provide extra functionalities, like providing the intermediate to the user when detecting the missing intermediates.\nTalking about cert stores, I added a Private Root CA store in a local test, where I can add a Private Root manually. It helps to have a dedicated output when testing certs under private CA, while trusted stores of different platforms show the 'untrusted' as expected.. Thank you, sorry for duplicating it. Regards, . ",
    "tjanssl": "Hi,\nnow I've got an error while runnig \npython api_sample.py \nthe error message:\n\nAttributeError: 'PluginRaisedExceptionResult' object has no attribute 'accepted_cipher_list'\n\nif I try to run \npython sslyze_cli.py 192.168.1.249 --tlsv1_2\nI've go an error\nUnhandled exception when processing --tlsv1_2:\nTypeError - Invalid session\nWith the version  0.12 it was working\nAny suggestions?\nThanks in advance\n. Anyways if I try to scan any host I got the same results:\n\n. Windows 7 64 bit with Python 2.7.9 64bit\n. The problem is with the nassl.\nFor the command \"python run_tests.py\" it throws error\n\n. ",
    "krajorama": "Fair enough, I'll update my test case. \nHowever, please make sure to only use the associated error text (\"Could not complete an SSL handshake\") with this specific case so that it doesn't start to show up in some unrelated case.\nregards, krajo\n. ",
    "acdha": "A colleague just encountered this error while locking down a Java app where some clients (Mac, Ubuntu 14.04 LTS) couldn't connect using old versions of OpenSSL or gnutls \u2013 would it be a reasonable amount of work to have it display the received ciphersuite for troubleshooting?\n. I just ran into a situation where it would be extremely useful to be able to run sslyze using OpenSSH's dynamic proxy mode through a bastion host where I'd prefer not to have to install the entire build toolchain. I tried using proxychains-ng but that crashes partway through the scan.. Yes: it's a full SOCKS 5 proxy: https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding#Dynamic_Port_Forwarding\nThe main selling point is not needing to install anything on the bastion host, especially not a new network service on what should be a very locked down system, and there are related points about reusing your existing authentication, logging, etc.. @BenjaminHae the advantage of the dynamic proxy mode is that it works for more than one host/port and doesn't break hostname validation. I never encourage that in standard usage since training admins to ignore security warnings inevitably leads to false negatives.. ",
    "pzb": "Note that Android seems to have moved the trust anchors here: https://android.googlesource.com/platform/system/ca-certificates/+/master\n. ",
    "clviper": "No. Debian x64 (Kali).\nEm 24/02/2016 7:52 da tarde, \"Alban Diquet\" notifications@github.com\nescreveu:\n\nWhy platform are you using? Windows ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nabla-c0d3/sslyze/issues/136#issuecomment-188428293.\n. \n",
    "tuler": "Can you give a hint on what needs to be done to support python 3?\n. Development is under way at https://github.com/siteblindado/nassl/tree/python3\n. It's compiling without errors or warnings.\nBut tests are not passing yet.\n. Our first goal is to get it to work (to pass all tests).\nThen we'll review the changes to make them as little as possible and compatible with both 2 and 3.. Great news! We didn't have enough time to work on it :-(. ",
    "garrettr": "@nabla-c0d3 Would you be opposed to maintaining sslyze for Python 3, if the initial work of porting it were done by external contributors? @tuler seems to be making progress on their branch. If so, could we reopen this issue (or open a new issue) to track integration into upstream?\nI'm also happy to help with the transition in any way that I can.. @tuler Any progress on the port to Python 3?. ",
    "gabimaxi": "What would be the status of the conversion, is it possible to run some test (testing purposes only). thank you. That is great, much appreciated your work on this. Thank you.. ",
    "gregoryR": "That was fast :)\nWorks for me, thanks \n. ",
    "burgerzoid": "Hello, the python 2.7 dependency prevents us from updating.\nOur relevant servers are Centos 6 with python 2.6 which version 0.12 runs on. It is not feasible to either install python 2.7 or upgrade servers at this stage.\nAm just looking for some pointers as to where in 0.12 changes are required to deal with or ignore optional client cert requests. Any assistance much appreciated. \n. ",
    "vrecan": "looks like this is fixed if you install python-devel, might want to add that to the readme\n. ",
    "sqqqs": "Update.\nIf\nsslyze_cli.py --regular www.google.com\nthen the execution is without error.\nIf\nsslyze_cli.py --regular www.yahoo.com:443\nthen the execution is with UnicodeDecodeError.\n. Hello,\n\nwhere are you scanning\n\nWhat do you want me to say? Country? ISP? DNS? Windows code page?\nMay be Ukraine. System code page for non-unicode program - Windows 1251.\n\nI am unable to reproduce this when scanning\n\nAround 10% of cases, yahoo scanning works without error. Try several times to start the scan.\nHere's a video with this bug: https://youtu.be/pwsSLZq_ZMk\n. Your patch did not help :(\nI added the following lines\n```\n!/usr/bin/env python2.7\n-- coding: utf-8 --\nimport json\nimport os\nimport sys\nreload(sys) \nsys.setdefaultencoding('cp1251')\nfrom sslyze import version, PROJECT_URL\n```\nNow everything is working correctly, but it's a bad decision.\n. ",
    "c0r0n3r": "patch can be testes with www.f\u0151g\u00e1z.hu\n. patch can be testes with www.fogaz.hu\n. You may find important the followings in the context of your decision.\n\nHowever, you can't simply relicense code from the GNU GPL (with or without \u201cor later\u201d) to the GNU Affero GPL, or vice versa; neither of these licenses gives permission for that.\n--- Richard Stallman (License Compatibility and Relicensing )\n\n. As far as I know if you have contributors you have to ask them or remove their codes, especially that AGPL is less permissive and incompatible with AGPL.\n\nMoving to an incompatible licence requires that current code is relicenced with permission from the copyright holders, or is removed.\n--- Ciaran O\u2019Riordan((About GPLv3) Can the Linux Kernel Relicense)\n\np.s.: I don't want to argue with your decision, just infrom you about the possible legal issues to avoid any problems which may hinder the development of your very usefull project.. You are right! TLS 1.3 is barely supported. If you do not put the check on the first place the ServerConnectivityInfo.highest_ssl_version_supported will be wrong when TLS1.3 is supported.\nIf the server supports TLS 1.3 only value of the ServerConnectivityInfo.highest_ssl_version_supported is correct.. ",
    "rdegraaf": "Hello,\nTLS_FALLBACK_SCSV applies to all TLS/SSL versions, not just SSLv2 and SSLv3.  By not supporting TLS_FALLBACK_SCSV, your clients may be vulnerable to downgrade attacks from TLSv1.2 to TLSv1.1, which removes their ability to use AEAD ciphers and SHA-2 hash functions.  Just because TLSv1.1 is not currently known to be broken (in a practical, rather than theoretic, sense) is not a reason to allow downgrades.\nFrom the RFC:\nIf TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the\n  highest protocol version supported by the server is higher than\n  the version indicated in ClientHello.client_version, the server\n  MUST respond with a fatal inappropriate_fallback alert\nSee https://tools.ietf.org/html/rfc7507#section-3 for more details.\n. I cloned the latest sslyze and nassl sources and scanned Google just now and got a SHA1 error:\n```\n[degraaf@ancalagon sslyze]$ python2.7 sslyze_cli.py  --certinfo_basic www.google.com\nAVAILABLE PLUGINS\n\nOpenSslCipherSuitesPlugin\n  CertificateInfoPlugin\n  HeartbleedPlugin\n  FallbackScsvPlugin\n  CompressionPlugin\n  SessionRenegotiationPlugin\n  HstsPlugin\n  OpenSslCcsInjectionPlugin\n  SessionResumptionPlugin\nCHECKING HOST(S) AVAILABILITY\n\nwww.google.com:443                       => 172.217.2.228 \nSCAN RESULTS FOR WWW.GOOGLE.COM:443 - 172.217.2.228:443\n\n\n\nCertificate Basic Information:\n      SHA1 Fingerprint:                  40f3a50148e1ee529704e0c3dd89aadad2b95649\n      Common Name:                       www.google.com\n      Issuer:                            Google Internet Authority G2\n      Serial Number:                     2AA409FFF5BF940B\n      Not Before:                        Jun 16 08:36:55 2016 GMT\n      Not After:                         Sep  8 08:29:00 2016 GMT\n      Signature Algorithm:               sha256WithRSAEncryption\n      Public Key Algorithm:              rsaEncryption\n      Key Size:                          2048 bit\n      Exponent:                          65537 (0x10001)\n      X509v3 Subject Alternative Name:   {'DNS': ['www.google.com']}\n\n\nCertificate - Trust:\n      Hostname Validation:               OK - Subject Alternative Name matches www.google.com\n      Mozilla NSS CA Store (02/2016):    OK - Certificate is trusted\n      Microsoft CA Store (02/2016):      OK - Certificate is trusted\n      Apple CA Store (OS X 10.11.3):     OK - Certificate is trusted\n      Java 6 CA Store (Update 65):       OK - Certificate is trusted\n      AOSP CA Store (N Preview 2):       OK - Certificate is trusted\n      Weak Signature:                    INSECURE - SHA1-signed certificate in the chain\n      Certificate Chain Received:        www.google.com --> Google Internet Authority G2 --> GeoTrust Global CA\n      Certificate Chain Order:           OK - Order is valid\n\n\nCertificate - OCSP Stapling:\n                                     NOT SUPPORTED - Server did not send back an OCSP response.\n\n\nSCAN COMPLETED IN 0.37 S\n\n```\nLooking at their certificate in Firefox, the leaf (\"www.google.com\") is signed using \"PKCS #1 SHA-256 With RSA Encryption\".  So is the intermediate CA (\"Google Internet Authority G2\").  Only the root CA (\"GeoTrust Global CA\") is signed using \"PKCS #1 SHA-1 With RSA Encryption\".  As a root CA, it is self-signed.\nHere's a dump of the certificate chain:\n```\n[degraaf@ancalagon sslyze]$ openssl s_client -showcerts -connect www.google.com:443 > certs.pem 2>/deb/null\n[degraaf@ancalagon sslyze]$ vi certs.pem \n[degraaf@ancalagon sslyze]$ openssl crl2pkcs7 -nocrl -certfile certs.pem | openssl pkcs7 -print_certs -text -noout      \nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 3072591840717804555 (0x2aa409fff5bf940b)\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=US, O=Google Inc, CN=Google Internet Authority G2\n        Validity\n            Not Before: Jun 16 08:36:55 2016 GMT\n            Not After : Sep  8 08:29:00 2016 GMT\n        Subject: C=US, ST=California, L=Mountain View, O=Google Inc, CN=www.google.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:93:3c:66:87:76:2e:9b:d8:42:49:9e:e8:b4:3c:\n                    8c:aa:1c:ff:e2:e4:bf:49:7e:6b:d1:ae:f6:32:1c:\n                    0b:57:37:ff:bc:2e:2e:95:2b:c9:15:50:7d:2d:32:\n                    ec:34:32:fe:a6:26:03:fb:f0:0a:be:1e:09:13:74:\n                    d4:60:5a:c4:f5:28:65:95:e9:c1:f1:1f:88:2a:d8:\n                    a6:25:c4:7c:bb:b1:fc:cd:77:d7:c4:34:72:59:5a:\n                    ab:74:28:f7:04:b0:e1:5c:b3:34:6c:1a:91:6c:79:\n                    67:b3:a8:1f:6d:0e:28:5f:04:d2:1e:45:4f:7d:aa:\n                    7a:9f:3b:75:f0:5e:99:15:0f:fd:f4:3b:8a:ca:33:\n                    62:53:12:ff:bb:0a:12:ce:db:32:91:c4:64:7e:90:\n                    a4:a7:2a:74:f2:58:db:51:23:6d:66:83:a4:ac:67:\n                    67:78:06:80:cc:04:e4:cf:16:84:67:e5:9a:34:22:\n                    0b:df:09:94:36:4c:9c:a4:50:64:3a:43:04:a9:8b:\n                    95:51:68:dc:31:87:ba:a9:00:37:4c:68:60:71:69:\n                    35:ae:c4:b9:75:82:41:61:b7:67:0e:f1:50:1a:5b:\n                    d2:64:de:91:f9:a9:16:82:e9:1e:6d:fe:43:25:c3:\n                    73:71:85:fa:96:83:eb:b5:1a:fc:b1:d7:3a:99:a5:\n                    7c:53\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Extended Key Usage: \n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 Subject Alternative Name: \n                DNS:www.google.com\n            Authority Information Access: \n                CA Issuers - URI:http://pki.google.com/GIAG2.crt\n                OCSP - URI:http://clients1.google.com/ocsp\n        X509v3 Subject Key Identifier: \n            05:41:08:6E:CB:40:80:A2:2C:AD:AA:B8:2B:00:95:5A:DA:30:EE:DB\n        X509v3 Basic Constraints: critical\n            CA:FALSE\n        X509v3 Authority Key Identifier: \n            keyid:4A:DD:06:16:1B:BC:F6:68:B5:76:F5:81:B6:BB:62:1A:BA:5A:81:2F\n\n        X509v3 Certificate Policies: \n            Policy: 1.3.6.1.4.1.11129.2.5.1\n            Policy: 2.23.140.1.2.2\n\n        X509v3 CRL Distribution Points:\n\n            Full Name:\n              URI:http://pki.google.com/GIAG2.crl\n\nSignature Algorithm: sha256WithRSAEncryption\n     1c:93:31:54:8f:25:d5:a0:4b:b5:af:2a:55:cc:44:36:36:5e:\n     20:e1:6f:f0:ec:b6:ea:e6:96:28:77:1c:b1:28:eb:6b:3c:76:\n     64:09:54:d2:ab:db:8c:e5:c7:98:4b:f5:74:4c:e2:d0:19:d5:\n     40:3b:08:15:a3:19:aa:55:5c:86:b5:82:19:0c:47:11:fc:14:\n     3c:11:13:63:f0:4c:c2:7f:2d:c1:f9:08:64:ef:43:89:f3:6c:\n     8c:31:3c:3b:99:61:3d:4e:e2:24:6a:46:2f:58:fe:a3:c5:03:\n     22:2e:d5:68:aa:75:c7:37:b5:41:51:b8:d5:58:5c:e4:1f:f0:\n     81:89:44:6b:a5:ca:94:95:9d:44:a9:e4:e9:5d:f7:37:5c:e5:\n     f9:a1:1d:26:0d:68:07:c1:28:e1:c8:35:c1:61:da:a2:fc:3b:\n     2a:6b:c0:ae:0c:09:3b:e3:c9:1f:70:e6:d8:ae:cb:2a:50:f7:\n     d9:94:f5:d9:11:72:30:50:74:d1:65:e9:3f:7f:36:30:cb:80:\n     a8:a5:ce:58:4e:b6:76:d8:07:5d:d0:ab:13:6b:4b:d0:c6:2b:\n     0f:81:b5:28:3e:f9:6d:46:f8:7b:29:06:a9:12:7f:dd:69:f5:\n     e9:1a:c9:45:2f:83:0d:f5:21:b8:2d:01:09:dd:6f:2e:80:fb:\n     b6:b0:0b:6b\n\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 146051 (0x23a83)\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=US, O=GeoTrust Inc., CN=GeoTrust Global CA\n        Validity\n            Not Before: Apr  5 15:15:56 2013 GMT\n            Not After : Dec 31 23:59:59 2016 GMT\n        Subject: C=US, O=Google Inc, CN=Google Internet Authority G2\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:9c:2a:04:77:5c:d8:50:91:3a:06:a3:82:e0:d8:\n                    50:48:bc:89:3f:f1:19:70:1a:88:46:7e:e0:8f:c5:\n                    f1:89:ce:21:ee:5a:fe:61:0d:b7:32:44:89:a0:74:\n                    0b:53:4f:55:a4:ce:82:62:95:ee:eb:59:5f:c6:e1:\n                    05:80:12:c4:5e:94:3f:bc:5b:48:38:f4:53:f7:24:\n                    e6:fb:91:e9:15:c4:cf:f4:53:0d:f4:4a:fc:9f:54:\n                    de:7d:be:a0:6b:6f:87:c0:d0:50:1f:28:30:03:40:\n                    da:08:73:51:6c:7f:ff:3a:3c:a7:37:06:8e:bd:4b:\n                    11:04:eb:7d:24:de:e6:f9:fc:31:71:fb:94:d5:60:\n                    f3:2e:4a:af:42:d2:cb:ea:c4:6a:1a:b2:cc:53:dd:\n                    15:4b:8b:1f:c8:19:61:1f:cd:9d:a8:3e:63:2b:84:\n                    35:69:65:84:c8:19:c5:46:22:f8:53:95:be:e3:80:\n                    4a:10:c6:2a:ec:ba:97:20:11:c7:39:99:10:04:a0:\n                    f0:61:7a:95:25:8c:4e:52:75:e2:b6:ed:08:ca:14:\n                    fc:ce:22:6a:b3:4e:cf:46:03:97:97:03:7e:c0:b1:\n                    de:7b:af:45:33:cf:ba:3e:71:b7:de:f4:25:25:c2:\n                    0d:35:89:9d:9d:fb:0e:11:79:89:1e:37:c5:af:8e:\n                    72:69\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Authority Key Identifier: \n                keyid:C0:7A:98:68:8D:89:FB:AB:05:64:0C:11:7D:AA:7D:65:B8:CA:CC:4E\n        X509v3 Subject Key Identifier: \n            4A:DD:06:16:1B:BC:F6:68:B5:76:F5:81:B6:BB:62:1A:BA:5A:81:2F\n        X509v3 Key Usage: critical\n            Certificate Sign, CRL Sign\n        Authority Information Access: \n            OCSP - URI:http://g.symcd.com\n\n        X509v3 Basic Constraints: critical\n            CA:TRUE, pathlen:0\n        X509v3 CRL Distribution Points:\n\n            Full Name:\n              URI:http://g.symcb.com/crls/gtglobal.crl\n\n        X509v3 Certificate Policies: \n            Policy: 1.3.6.1.4.1.11129.2.5.1\n\nSignature Algorithm: sha256WithRSAEncryption\n     aa:fa:a9:20:cd:6a:67:83:ed:5e:d4:7e:de:1d:c4:7f:e0:25:\n     06:00:c5:24:fb:a9:c8:2d:6d:7e:de:9d:82:65:2c:81:63:34:\n     66:3e:e9:52:c2:08:b4:cb:2f:f7:5f:99:3a:6a:9c:50:7a:85:\n     05:8c:7d:d1:2a:48:84:d3:09:6c:7c:c2:cd:35:9f:f3:82:ee:\n     52:de:68:5f:e4:00:8a:17:20:96:f7:29:8d:9a:4d:cb:a8:de:\n     86:c8:0d:6f:56:87:03:7d:03:3f:dc:fa:79:7d:21:19:f9:c8:\n     3a:2f:51:76:8c:c7:41:92:71:8f:25:ce:37:f8:4a:4c:00:23:\n     ef:c4:35:10:ae:e0:23:80:73:7c:4d:34:2e:c8:6e:90:d6:10:\n     1e:99:84:73:1a:70:f2:ed:55:0e:ee:17:06:ea:67:ee:32:eb:\n     2c:dd:67:07:3f:f6:8b:c2:70:de:5b:00:e6:bb:1b:d3:36:1a:\n     22:6c:6c:b0:35:42:6c:90:09:3d:93:e9:64:09:22:0e:85:06:\n     9f:c2:73:21:d3:e6:5f:80:e4:8d:85:22:3a:73:03:b1:60:8e:\n     ae:68:e2:f4:3e:97:e7:60:12:09:68:36:de:3a:d6:e2:43:95:\n     5b:37:81:92:81:1f:bb:8d:d7:ad:52:64:16:57:96:d9:5e:34:\n     7e:c8:35:d8\n\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 1227750 (0x12bbe6)\n    Signature Algorithm: sha1WithRSAEncryption\n        Issuer: C=US, O=Equifax, OU=Equifax Secure Certificate Authority\n        Validity\n            Not Before: May 21 04:00:00 2002 GMT\n            Not After : Aug 21 04:00:00 2018 GMT\n        Subject: C=US, O=GeoTrust Inc., CN=GeoTrust Global CA\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:da:cc:18:63:30:fd:f4:17:23:1a:56:7e:5b:df:\n                    3c:6c:38:e4:71:b7:78:91:d4:bc:a1:d8:4c:f8:a8:\n                    43:b6:03:e9:4d:21:07:08:88:da:58:2f:66:39:29:\n                    bd:05:78:8b:9d:38:e8:05:b7:6a:7e:71:a4:e6:c4:\n                    60:a6:b0:ef:80:e4:89:28:0f:9e:25:d6:ed:83:f3:\n                    ad:a6:91:c7:98:c9:42:18:35:14:9d:ad:98:46:92:\n                    2e:4f:ca:f1:87:43:c1:16:95:57:2d:50:ef:89:2d:\n                    80:7a:57:ad:f2:ee:5f:6b:d2:00:8d:b9:14:f8:14:\n                    15:35:d9:c0:46:a3:7b:72:c8:91:bf:c9:55:2b:cd:\n                    d0:97:3e:9c:26:64:cc:df:ce:83:19:71:ca:4e:e6:\n                    d4:d5:7b:a9:19:cd:55:de:c8:ec:d2:5e:38:53:e5:\n                    5c:4f:8c:2d:fe:50:23:36:fc:66:e6:cb:8e:a4:39:\n                    19:00:b7:95:02:39:91:0b:0e:fe:38:2e:d1:1d:05:\n                    9a:f6:4d:3e:6f:0f:07:1d:af:2c:1e:8f:60:39:e2:\n                    fa:36:53:13:39:d4:5e:26:2b:db:3d:a8:14:bd:32:\n                    eb:18:03:28:52:04:71:e5:ab:33:3d:e1:38:bb:07:\n                    36:84:62:9c:79:ea:16:30:f4:5f:c0:2b:e8:71:6b:\n                    e4:f9\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Authority Key Identifier: \n                keyid:48:E6:68:F9:2B:D2:B2:95:D7:47:D8:23:20:10:4F:33:98:90:9F:D4\n        X509v3 Subject Key Identifier: \n            C0:7A:98:68:8D:89:FB:AB:05:64:0C:11:7D:AA:7D:65:B8:CA:CC:4E\n        X509v3 Basic Constraints: critical\n            CA:TRUE\n        X509v3 Key Usage: critical\n            Certificate Sign, CRL Sign\n        X509v3 CRL Distribution Points:\n\n            Full Name:\n              URI:http://crl.geotrust.com/crls/secureca.crl\n\n        X509v3 Certificate Policies: \n            Policy: X509v3 Any Policy\n              CPS: https://www.geotrust.com/resources/repository\n\nSignature Algorithm: sha1WithRSAEncryption\n     76:e1:12:6e:4e:4b:16:12:86:30:06:b2:81:08:cf:f0:08:c7:\n     c7:71:7e:66:ee:c2:ed:d4:3b:1f:ff:f0:f0:c8:4e:d6:43:38:\n     b0:b9:30:7d:18:d0:55:83:a2:6a:cb:36:11:9c:e8:48:66:a3:\n     6d:7f:b8:13:d4:47:fe:8b:5a:5c:73:fc:ae:d9:1b:32:19:38:\n     ab:97:34:14:aa:96:d2:eb:a3:1c:14:08:49:b6:bb:e5:91:ef:\n     83:36:eb:1d:56:6f:ca:da:bc:73:63:90:e4:7f:7b:3e:22:cb:\n     3d:07:ed:5f:38:74:9c:e3:03:50:4e:a1:af:98:ee:61:f2:84:\n     3f:12\n\n```\n. Right you are... I don't know how I missed that.  So maybe the correct thing to do would be to ignore SHA-1 signatures on trusted CA certificates?\n. ",
    "Theory5": "Ah, gotcha, thanks! Given the whole situation with SSL and TLS 1.0, Allowing a downgrade from TLS 1.2 to 1.1 isn't that big of a vulnerability for our server configurations at this point in time. Not everything can run on TLS 1.2, or even 1.1, so exceptions are occasionally made, but recorded by my team for 'legacy' configurations. Is there a way to configure the output so you're told what encryption protocols the highest level protocol can be downgraded to? I.e. from TLS 1.2 to 1.1? Or is this not feasible currently?\nThanks again!\n. ",
    "meshach007m": "not supporting TLS_FALLBACK_SCSV is not necessarily a serious issue, depending on how well the client and server implement TLS 1.0 (by not supporting SSL 3.0 you already avoid the most glaring problems). However, good implementations cannot be guaranteed, and not supporting TLS_FALLBACK_SCSV is formally a weakness, even if it is not necessarily a vulnerability. That the weakness cannot be turned into a full exploit by attackers does not mean it does not exist.\nIn any case, you won't implement TLS_FALLBACK_SCSV because you want security; you will implement TLS_FALLBACK_SCSV because you want an A+. If you do not, then you will spend inordinate amounts of time explaining to many people that the \"A+\" grade is meaningless in that respect and that you can afford not to take it. In the long term, not howling with the wolves is too expensive.\nThe detailed description for the above said can be read from \"https://security.stackexchange.com/questions/112531/is-tls-fallback-scsv-useless-if-only-tls-1-0-1-1-1-2-is-supported\" which was answered by Tom Leek. ",
    "swdream": "Hello,\nIs this a know issue or do you know what I can do to make default java store trusts my dev.bkya.co?\n. ",
    "unamuno": "I found a work around. It's much slower.\nwhile read p; do \nsslyze_cli.py $p --certinfo_basic \ndone < hosts.txt\nThe error is still occuring but all hosts were scanned.\n. Nothing special. Just a-z and 1-9 \n. Sorry, you can't reach the servers from the internet.\n. I tried but single hosts don't generate the bug, only when I used a list.\n. Great tested 846 hosts. Everything works now! Thanks. :+1: :)\n. ",
    "rwg": "For whatever it's worth, I wrote the following program to make a cipher suite name map based on the data in OpenSSL, then did a side-by-side diff with the map in the plugin and merged missing entries into the plugin's source by hand:\nhttps://gist.github.com/rwg/bc1bbb97267402c08a283712e6d02ae7\nNote: You will have to configure OpenSSL with the enable-ssl-trace option before building in order for the SSL_CIPHER_standard_name() function (and the table it depends on in OpenSSL) to exist.\n. ",
    "ilovezfs": "@nabla-c0d3 ping on this as it still seems to be an issue. Also FYI I just shipped 0.14.0 for Homebrew :) https://github.com/Homebrew/homebrew-core/commit/d5068f0f854fc4a912750cb5c6b2fe39fb456ec7\n. Thanks @nabla-c0d3 \n. This is macOS 10.11.6. The above was running the tests locally.\nHere are the logs from the CI boxes:\nhttps://bot.brew.sh/job/Homebrew%20Core/16490/version=sierra/console\nhttps://bot.brew.sh/job/Homebrew%20Core/16490/version=el_capitan/console\nhttps://bot.brew.sh/job/Homebrew%20Core/16490/version=yosemite/console\nSo test_not_trusted_by_mozilla_but_trusted_by_apple fails on 10.11 and 10.10 but not on 10.12. And 10.12 had the failure\n```\n======================================================================\nERROR: test_1000_sans_chain (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20170215-78349-nmc9mi/sslyze-1.0.0/tests/plugin_tests/test_certificate_info_plugin.py\", line 104, in test_1000_sans_chain\n    server_info.test_connectivity_to_server()\n  File \"/private/tmp/sslyze-20170215-78349-nmc9mi/sslyze-1.0.0/sslyze/server_connectivity.py\", line 191, in test_connectivity_to_server\n    raise ServerConnectivityError(self.CONNECTIVITY_ERROR_REJECTED)\nServerConnectivityError\n. locally I'm seeing\n======================================================================\nERROR: test (plugin_tests.test_trust_store.TrustStoreTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20170217-72245-13nl90o/tests/plugin_tests/test_trust_store.py\", line 23, in test\n    verified_chain = trust_store.build_verified_certificate_chain(certificate_chain)\n  File \"/private/tmp/sslyze-20170217-72245-13nl90o/sslyze/plugins/utils/trust_store/trust_store.py\", line 128, in build_verified_certificate_chain\n    anchor_cert = self._get_certificate_with_subject(cert.as_dict[u'issuer'])\n  File \"/private/tmp/sslyze-20170217-72245-13nl90o/sslyze/plugins/utils/trust_store/trust_store.py\", line 87, in _get_certificate_with_subject\n    self._subject_to_certificate_dict = self._compute_subject_certificate_dict()\n  File \"/private/tmp/sslyze-20170217-72245-13nl90o/sslyze/plugins/utils/trust_store/trust_store.py\", line 66, in _compute_subject_certificate_dict\n    cert_dict[self._hash_subject(cert.as_dict[u'subject'])] = cert\n  File \"/private/tmp/sslyze-20170217-72245-13nl90o/sslyze/plugins/utils/trust_store/trust_store.py\", line 79, in _hash_subject\n    decoded_value = value.decode(encoding=u'utf-16')\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/utf_16.py\", line 16, in decode\n    return codecs.utf_16_decode(input, errors, True)\nUnicodeDecodeError: 'utf16' codec can't decode bytes in position 72-73: illegal encoding\n\nRan 64 tests in 65.231s\nFAILED (errors=1)\n/usr/local/Homebrew/Library/Homebrew/debrew.rb:11:in `raise'\nBuildError: Failed executing: python run_tests.py\n1. raise\n2. ignore\n3. backtrace\n4. irb\n5. shell\n```\nTest is now running on CI as well: https://bot.brew.sh/job/Homebrew%20Core/16630/. And locally using\n```\nresource \"nassl\" do\n  url \"https://github.com/nabla-c0d3/nassl/archive/0.15.1.tar.gz\"\n  sha256 \"b25020074d0838837531b2ed30635ec715f60e13f11f416a89588edd08653f1f\"\nend\n\nresource \"openssl\" do\n  url \"https://github.com/PeterMosmans/openssl.git\",\n      :revision => \"2622e9bff72f4949c285f2d955c2f78663d79776\"\nend\n\ninstead of\n    resource \"nassl\" do\n      url \"https://github.com/nabla-c0d3/nassl.git\"\n    end\nresource \"openssl\" do\n  url \"https://github.com/PeterMosmans/openssl.git\",\n      :branch => \"1.0.2-chacha\"\nend\n\nI see\ntest_verify_cert_error_string (X509_Tests.X509_Tests_Online) ... ok\n======================================================================\nERROR: test_as_text (OCSP_RESPONSE_Tests.OCSP_RESPONSE_Tests_Online)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze--nassl-20170217-94461-13ecpmn/nassl-0.15.1/tests/OCSP_RESPONSE_Tests.py\", line 25, in setUp\n    self.ocsp_response = ssl_client.get_tlsext_status_ocsp_resp()._ocsp_response\nAttributeError: 'NoneType' object has no attribute '_ocsp_response'\n\nRan 86 tests in 1.275s\nFAILED (errors=1)\n/usr/local/Homebrew/Library/Homebrew/debrew.rb:11:in `raise'\nBuildError: Failed executing: python run_tests.py\n1. raise\n2. ignore\n3. backtrace\n4. irb\n5. shell\n```. On CI, ce662d0b9c88d1fbbce97a4c79dc5864978ab5fc +  https://github.com/nabla-c0d3/nassl/archive/0.15.1.tar.gz + \"https://github.com/PeterMosmans/openssl.git\",:revision => \"2622e9bff72f4949c285f2d955c2f78663d79776\" was successful: https://bot.brew.sh/job/Homebrew%20Core/16630/\nOn CI, ce662d0b9c88d1fbbce97a4c79dc5864978ab5fc + https://github.com/nabla-c0d3/nassl.git + https://github.com/PeterMosmans/openssl.git, :branch => \"1.0.2-chacha\" had some failures:\nhttps://bot.brew.sh/job/Homebrew%20Core/16632/\nhttps://bot.brew.sh/job/Homebrew%20Core/16632/version=el_capitan/console\nhttps://bot.brew.sh/job/Homebrew%20Core/16632/version=yosemite/console\n```\nERROR: test_unicode_certificate (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20170217-63244-16nql8d/tests/plugin_tests/test_certificate_info_plugin.py\", line 146, in test_unicode_certificate\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20170217-63244-16nql8d/sslyze/plugins/certificate_info_plugin.py\", line 151, in process_task\n    raise RuntimeError(u'Could not connect to the server; last error: {}'.format(last_exception))\nRuntimeError: Could not connect to the server; last error: TCP / Received RST\n. I ran ce662d0 + https://github.com/nabla-c0d3/nassl/archive/0.15.1.tar.gz + \"https://github.com/PeterMosmans/openssl.git\",:revision => \"2622e9bff72f4949c285f2d955c2f78663d79776\"  through CI again, and this time it turned up one failure:\nhttps://bot.brew.sh/job/Homebrew%20Core/16633/\nhttps://bot.brew.sh/job/Homebrew%20Core/16633/version=yosemite/console\nERROR: test (plugin_tests.test_trust_store.TrustStoreTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20170217-37192-1k65qm6/tests/plugin_tests/test_trust_store.py\", line 23, in test\n    verified_chain = trust_store.build_verified_certificate_chain(certificate_chain)\n  File \"/private/tmp/sslyze-20170217-37192-1k65qm6/sslyze/plugins/utils/trust_store/trust_store.py\", line 128, in build_verified_certificate_chain\n    anchor_cert = self._get_certificate_with_subject(cert.as_dict[u'issuer'])\n  File \"/private/tmp/sslyze-20170217-37192-1k65qm6/sslyze/plugins/utils/trust_store/trust_store.py\", line 87, in _get_certificate_with_subject\n    self._subject_to_certificate_dict = self._compute_subject_certificate_dict()\n  File \"/private/tmp/sslyze-20170217-37192-1k65qm6/sslyze/plugins/utils/trust_store/trust_store.py\", line 66, in _compute_subject_certificate_dict\n    cert_dict[self._hash_subject(cert.as_dict[u'subject'])] = cert\n  File \"/private/tmp/sslyze-20170217-37192-1k65qm6/sslyze/plugins/utils/trust_store/trust_store.py\", line 79, in _hash_subject\n    decoded_value = value.decode(encoding=u'utf-16')\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/utf_16.py\", line 16, in decode\n    return codecs.utf_16_decode(input, errors, True)\nUnicodeDecodeError: 'utf16' codec can't decode bytes in position 122-123: illegal encoding\n``. which macOS would you like to be the minimum requirement?. So we can probably just limit running the test-suiteif MacOS.version >= :sierra` to avoid false positives.. Here's how we build it: https://github.com/Homebrew/homebrew-core/blob/master/Formula/sslyze.rb\nhttps://bot.brew.sh/job/Homebrew%20Core/16630/ and https://bot.brew.sh/job/Homebrew%20Core/16633/ should have been identical, so I think that 16633 is some kind of intermittent failure.. @nabla-c0d3 with 1.1.0, testing locally I see an intermittent failure like this:\n```\n======================================================================\nERROR: test_unicode_certificate (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20170415-47898-1iqj2a7/sslyze-1.1.0/tests/plugin_tests/test_certificate_info_plugin.py\", line 145, in test_unicode_certificate\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20170415-47898-1iqj2a7/sslyze-1.1.0/sslyze/plugins/certificate_info_plugin.py\", line 155, in process_task\n    raise last_exception\nSSLHandshakeRejected: TCP / Received RST\n\n```. @nabla-c0d3 re-opened here https://github.com/nabla-c0d3/sslyze/issues/207 because it failed on CI, too.. @nabla-c0d3 due to https://github.com/Homebrew/homebrew-core/pull/21047/files\nI have all of the python resources for sslyze vendored, and had cryptography using the same openssl as nassl. But now that nassl has multiple versions of openssl, I wasn't sure which to go with, so I just went with 1.1. But I could add a depends_on \"openssl\" or depends_on \"openssl@1.1\" to the formula itself and use that as you're saying.. @nabla-c0d3 incidentally it looks like if we build cryptography against OpenSSL 1.0 then the tests fail:\n```\n==> python run_tests.py\nskipped \"Skip Common_SSL_CTX_Tests tests, it's a base class\"\ntest_check_private_key (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_check_private_key_bad (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_load_verify_locations (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_load_verify_locations_bad (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_new (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_new_bad (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_set_private_key_password_null_byte (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_set_verify (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_set_verify_bad (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_use_PrivateKey_file (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_use_PrivateKey_file_bad (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_use_certificate_file (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_use_certificate_file_bad (SSL_CTX_tests.Legacy_SSL_CTX_Tests) ... ok\ntest_check_private_key (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_check_private_key_bad (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_load_verify_locations (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_load_verify_locations_bad (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_new (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_new_bad (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_set_private_key_password_null_byte (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_set_verify (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_set_verify_bad (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_tlsv1_3 (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_use_PrivateKey_file (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_use_PrivateKey_file_bad (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_use_certificate_file (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\ntest_use_certificate_file_bad (SSL_CTX_tests.Modern_SSL_CTX_Tests) ... ok\nskipped \"Skip Common_SSL_Tests tests, it's a base class\"\ntest_do_handshake_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_do_handshake_bad_eof (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_available_compression_methods_has_zlib (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_cipher_bits (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_cipher_list (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_cipher_name (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_client_CA_list_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_current_compression_method (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_peer_certificate_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_secure_renegotiation_support (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_session (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_tlsext_status_type (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_get_verify_result (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_new (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_new_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_pending (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_read_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_renegotiate (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_bio (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_bio_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_cipher_list (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_cipher_list_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_connect_state (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_options_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_session_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_tlsext_host_name (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_tlsext_host_name_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_tlsext_status_type (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_verify (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_set_verify_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_shutdown_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_write_bad (SSL_tests.Legacy_SSL_Tests) ... ok\ntest_do_handshake_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_available_compression_methods_has_zlib (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_cipher_bits (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_cipher_list (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_cipher_name (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_client_CA_list_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_current_compression_method (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_peer_certificate_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_secure_renegotiation_support (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_session (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_tlsext_status_type (SSL_tests.Modern_SSL_Tests) ... ok\ntest_get_verify_result (SSL_tests.Modern_SSL_Tests) ... ok\ntest_new (SSL_tests.Modern_SSL_Tests) ... ok\ntest_new_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_pending (SSL_tests.Modern_SSL_Tests) ... ok\ntest_renegotiate (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_bio (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_bio_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_cipher_list (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_cipher_list_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_connect_state (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_options_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_session_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_tlsext_host_name (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_tlsext_host_name_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_tlsext_status_type (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_verify (SSL_tests.Modern_SSL_Tests) ... ok\ntest_set_verify_bad (SSL_tests.Modern_SSL_Tests) ... ok\ntest_shutdown_bad (SSL_tests.Modern_SSL_Tests) ... ok\nskipped \"Skip tests, it's a base class\"\nskipped \"Skip tests, it's a base class\"\ntest_new_bad (X509_EXTENSION_tests.Legacy_X509_EXTENSION_Tests) ... ok\ntest (X509_EXTENSION_tests.Legacy_X509_EXTENSION_Tests_Online) ... ok\ntest_new_bad (X509_EXTENSION_tests.Modern_X509_EXTENSION_Tests) ... ok\ntest (X509_EXTENSION_tests.Modern_X509_EXTENSION_Tests_Online) ... ok\nskipped \"Skip tests, it's a base class\"\nskipped \"Skip tests, it's a base class\"\ntest_new_bad (X509_NAME_ENTRY_tests.Legacy_X509_NAME_ENTRY_Tests) ... ok\ntest (X509_NAME_ENTRY_tests.Legacy_X509_NAME_ENTRY_Tests_Online) ... ok\ntest_new_bad (X509_NAME_ENTRY_tests.Modern_X509_NAME_ENTRY_Tests) ... ok\ntest (X509_NAME_ENTRY_tests.Modern_X509_NAME_ENTRY_Tests_Online) ... ok\nskipped \"Skip tests, it's a base class\"\nskipped \"Skip tests, it's a base class\"\ntest_as_pem (X509_tests.Legacy_X509_Tests) ... ok\ntest_digest (X509_tests.Legacy_X509_Tests) ... ok\ntest_from_pem (X509_tests.Legacy_X509_Tests) ... ok\ntest_from_pem_bad (X509_tests.Legacy_X509_Tests) ... ok\ntest_get_extensions (X509_tests.Legacy_X509_Tests) ... ok\ntest_get_issuer_name_entries (X509_tests.Legacy_X509_Tests) ... ok\ntest_get_notAfter (X509_tests.Legacy_X509_Tests) ... ok\ntest_get_notBefore (X509_tests.Legacy_X509_Tests) ... ok\ntest_get_spki_bytes (X509_tests.Legacy_X509_Tests) ... ok\ntest_get_subject_name_entries (X509_tests.Legacy_X509_Tests) ... ok\ntest_get_version (X509_tests.Legacy_X509_Tests) ... ok\ntest (X509_tests.Legacy_X509_Tests_Online) ... ok\ntest_verify_cert_error_string (X509_tests.Legacy_X509_Tests_Online) ... ok\ntest_as_pem (X509_tests.Modern_X509_Tests) ... ok\ntest_digest (X509_tests.Modern_X509_Tests) ... ok\ntest_from_pem (X509_tests.Modern_X509_Tests) ... ok\ntest_from_pem_bad (X509_tests.Modern_X509_Tests) ... ok\ntest_get_extensions (X509_tests.Modern_X509_Tests) ... ok\ntest_get_issuer_name_entries (X509_tests.Modern_X509_Tests) ... ok\ntest_get_notAfter (X509_tests.Modern_X509_Tests) ... ok\ntest_get_notBefore (X509_tests.Modern_X509_Tests) ... ok\ntest_get_spki_bytes (X509_tests.Modern_X509_Tests) ... ok\ntest_get_subject_name_entries (X509_tests.Modern_X509_Tests) ... ok\ntest_get_version (X509_tests.Modern_X509_Tests) ... ok\ntest (X509_tests.Modern_X509_Tests_Online) ... ok\ntest_verify_cert_error_string (X509_tests.Modern_X509_Tests_Online) ... ok\nskipped \"Skip tests, it's a base class\"\ntest (ocsp_response_tests.LegacySslClientOcspResponseOnlineTests) ... ok\ntest_sct_parsing (ocsp_response_tests.LegacySslClientOcspResponseOnlineTests) ... ok\ntest (ocsp_response_tests.ModernSslClientOcspResponseOnlineTests) ... ok\ntest_sct_parsing (ocsp_response_tests.ModernSslClientOcspResponseOnlineTests) ... ok\ntest_new_bad (ocsp_response_tests.OcspResponseTests) ... ok\ntest_client_certificate_requested (ssl_client_tests.CommonSslClientOnlineClientAuthenticationTests) ... ok\ntest_ignore_client_authentication_requests (ssl_client_tests.CommonSslClientOnlineClientAuthenticationTests) ... ok\ntest_get_certificate_chain_verify_result (ssl_client_tests.CommonSslClientOnlineTests) ... ok\ntest_get_ecdh_param (ssl_client_tests.CommonSslClientOnlineTests) ... ok\ntest_get_peer_cert_chain (ssl_client_tests.CommonSslClientOnlineTests) ... ok\ntest_get_peer_certificate (ssl_client_tests.CommonSslClientOnlineTests) ... ok\ntest_read (ssl_client_tests.CommonSslClientOnlineTests) ... ok\ntest_write (ssl_client_tests.CommonSslClientOnlineTests) ... ok\nskipped \"Skip tests, it's a base class\"\ntest_client_certificate_requested (ssl_client_tests.LegacySslClientOnlineClientAuthenticationTests) ... ok\ntest_ignore_client_authentication_requests (ssl_client_tests.LegacySslClientOnlineClientAuthenticationTests) ... ok\ntest_do_ssl2_iis_handshake (ssl_client_tests.LegacySslClientOnlineTests) ... ok\ntest_get_certificate_chain_verify_result (ssl_client_tests.LegacySslClientOnlineTests) ... ok\ntest_get_ecdh_param (ssl_client_tests.LegacySslClientOnlineTests) ... ok\ntest_get_peer_cert_chain (ssl_client_tests.LegacySslClientOnlineTests) ... ok\ntest_get_peer_certificate (ssl_client_tests.LegacySslClientOnlineTests) ... ok\ntest_read (ssl_client_tests.LegacySslClientOnlineTests) ... ok\ntest_write (ssl_client_tests.LegacySslClientOnlineTests) ... ok\ntest_use_private_key (ssl_client_tests.LegacySslClientPrivateKeyTests) ... ok\ntest_use_private_key_bad (ssl_client_tests.LegacySslClientPrivateKeyTests) ... ok\ntest_client_certificate_requested (ssl_client_tests.ModernSslClientOnlineClientAuthenticationTests) ... ok\ntest_ignore_client_authentication_requests (ssl_client_tests.ModernSslClientOnlineClientAuthenticationTests) ... ok\ntest_get_certificate_chain_verify_result (ssl_client_tests.ModernSslClientOnlineTests) ... ok\ntest_get_ecdh_param (ssl_client_tests.ModernSslClientOnlineTests) ... ok\ntest_get_peer_cert_chain (ssl_client_tests.ModernSslClientOnlineTests) ... ok\ntest_get_peer_certificate (ssl_client_tests.ModernSslClientOnlineTests) ... ok\ntest_read (ssl_client_tests.ModernSslClientOnlineTests) ... ok\ntest_write (ssl_client_tests.ModernSslClientOnlineTests) ... ok\ntest_tls_1_3 (ssl_client_tests.ModernSslClientOnlineTls13Tests) ... ok\ntest_use_private_key (ssl_client_tests.ModernSslClientPrivateKeyTests) ... ok\ntest_use_private_key_bad (ssl_client_tests.ModernSslClientPrivateKeyTests) ... ok\n\nRan 157 tests in 5.454s\nOK (skipped=10)\n==> /usr/local/Cellar/sslyze/1.3.0/libexec/bin/pip install -v --no-deps --no-binary :all: --ignore-installed /private/tmp/sslyze--nassl-20171218-80344-foe2ud/nassl-1.0.2\nProcessing /private/tmp/sslyze--nassl-20171218-80344-foe2ud/nassl-1.0.2\n  Running setup.py (path:/private/tmp/pip-5yIBiy-build/setup.py) egg_info for package from file:///private/tmp/sslyze--nassl-20171218-80344-foe2ud/nassl-1.0.2\n    Running command python setup.py egg_info\n    running egg_info\n    creating pip-egg-info/nassl.egg-info\n    writing requirements to pip-egg-info/nassl.egg-info/requires.txt\n    writing pip-egg-info/nassl.egg-info/PKG-INFO\n    writing top-level names to pip-egg-info/nassl.egg-info/top_level.txt\n    writing dependency_links to pip-egg-info/nassl.egg-info/dependency_links.txt\n    writing manifest file 'pip-egg-info/nassl.egg-info/SOURCES.txt'\n    reading manifest file 'pip-egg-info/nassl.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    warning: no files found matching 'lib' under directory 'bin/openssl-legacy'\n    warning: no files found matching 'lib' under directory 'bin/openssl-modern'\n    warning: no files found matching 'lib' under directory 'bin/zlib'\n    writing manifest file 'pip-egg-info/nassl.egg-info/SOURCES.txt'\n  Source in /private/tmp/pip-5yIBiy-build has version 1.0.2, which satisfies requirement nassl==1.0.2 from file:///private/tmp/sslyze--nassl-20171218-80344-foe2ud/nassl-1.0.2\nSkipping bdist_wheel for nassl, due to binaries being disabled for it.\nInstalling collected packages: nassl\n  Running setup.py install for nassl: started\n    Running command /usr/local/Cellar/sslyze/1.3.0/libexec/bin/python -u -c \"import setuptools, tokenize;file='/private/tmp/pip-5yIBiy-build/setup.py';f=getattr(tokenize, 'open', open)(file);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, file, 'exec'))\" install --record /tmp/pip-Dp5w2P-record/install-record.txt --single-version-externally-managed --compile --install-headers /usr/local/Cellar/sslyze/1.3.0/libexec/include/site/python2.7/nassl\n    running install\n    running build\n    running build_py\n    copying nassl/init.py -> build/lib.macosx-10.11-intel-2.7/nassl\n    copying nassl/ssl_client.py -> build/lib.macosx-10.11-intel-2.7/nassl\n    copying nassl/legacy_ssl_client.py -> build/lib.macosx-10.11-intel-2.7/nassl\n    copying nassl/ocsp_response.py -> build/lib.macosx-10.11-intel-2.7/nassl\n    running build_ext\n    running install_lib\n    creating /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl\n    copying build/lib.macosx-10.11-intel-2.7/nassl/init.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl\n    copying build/lib.macosx-10.11-intel-2.7/nassl/_nassl.so -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl\n    copying build/lib.macosx-10.11-intel-2.7/nassl/_nassl_legacy.so -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl\n    copying build/lib.macosx-10.11-intel-2.7/nassl/legacy_ssl_client.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl\n    copying build/lib.macosx-10.11-intel-2.7/nassl/ocsp_response.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl\n    copying build/lib.macosx-10.11-intel-2.7/nassl/ssl_client.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl/init.py to init.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl/legacy_ssl_client.py to legacy_ssl_client.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl/ocsp_response.py to ocsp_response.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl/ssl_client.py to ssl_client.pyc\n    running install_egg_info\n    running egg_info\n    writing requirements to nassl.egg-info/requires.txt\n    writing nassl.egg-info/PKG-INFO\n    writing top-level names to nassl.egg-info/top_level.txt\n    writing dependency_links to nassl.egg-info/dependency_links.txt\n    reading manifest file 'nassl.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    warning: no files found matching 'lib' under directory 'bin/openssl-legacy'\n    warning: no files found matching 'lib' under directory 'bin/openssl-modern'\n    warning: no files found matching 'lib' under directory 'bin/zlib'\n    writing manifest file 'nassl.egg-info/SOURCES.txt'\n    Copying nassl.egg-info to /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/nassl-1.0.2-py2.7.egg-info\n    running install_scripts\n    writing list of installed files to '/tmp/pip-Dp5w2P-record/install-record.txt'\n    Running setup.py install for nassl: finished with status 'done'\n  Removing source in /private/tmp/pip-5yIBiy-build\nSuccessfully installed nassl-1.0.2\nCleaning up...\n==> /usr/local/Cellar/sslyze/1.3.0/libexec/bin/pip install -v --no-deps --no-binary :all: --ignore-installed /private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0\nProcessing /private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0\n  Running setup.py (path:/private/tmp/pip-djFByH-build/setup.py) egg_info for package from file:///private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0\n    Running command python setup.py egg_info\n    running egg_info\n    creating pip-egg-info/SSLyze.egg-info\n    writing requirements to pip-egg-info/SSLyze.egg-info/requires.txt\n    writing pip-egg-info/SSLyze.egg-info/PKG-INFO\n    writing top-level names to pip-egg-info/SSLyze.egg-info/top_level.txt\n    writing dependency_links to pip-egg-info/SSLyze.egg-info/dependency_links.txt\n    writing entry points to pip-egg-info/SSLyze.egg-info/entry_points.txt\n    writing manifest file 'pip-egg-info/SSLyze.egg-info/SOURCES.txt'\n    reading manifest file 'pip-egg-info/SSLyze.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    writing manifest file 'pip-egg-info/SSLyze.egg-info/SOURCES.txt'\n  Source in /private/tmp/pip-djFByH-build has version 1.3.0, which satisfies requirement SSLyze==1.3.0 from file:///private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0\nSkipping bdist_wheel for SSLyze, due to binaries being disabled for it.\nInstalling collected packages: SSLyze\n  Running setup.py install for SSLyze: started\n    Running command /usr/local/Cellar/sslyze/1.3.0/libexec/bin/python -u -c \"import setuptools, tokenize;file='/private/tmp/pip-djFByH-build/setup.py';f=getattr(tokenize, 'open', open)(file);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, file, 'exec'))\" install --record /tmp/pip-OCWiOW-record/install-record.txt --single-version-externally-managed --compile --install-headers /usr/local/Cellar/sslyze/1.3.0/libexec/include/site/python2.7/SSLyze\n    running install\n    running build\n    running build_py\n    creating build\n    creating build/lib\n    creating build/lib/sslyze\n    copying sslyze/init.py -> build/lib/sslyze\n    copying sslyze/main.py -> build/lib/sslyze\n    copying sslyze/concurrent_scanner.py -> build/lib/sslyze\n    copying sslyze/server_connectivity.py -> build/lib/sslyze\n    copying sslyze/ssl_settings.py -> build/lib/sslyze\n    copying sslyze/synchronous_scanner.py -> build/lib/sslyze\n    creating build/lib/sslyze/cli\n    copying sslyze/cli/init.py -> build/lib/sslyze/cli\n    copying sslyze/cli/command_line_parser.py -> build/lib/sslyze/cli\n    copying sslyze/cli/console_output.py -> build/lib/sslyze/cli\n    copying sslyze/cli/json_output.py -> build/lib/sslyze/cli\n    copying sslyze/cli/output_generator.py -> build/lib/sslyze/cli\n    copying sslyze/cli/output_hub.py -> build/lib/sslyze/cli\n    copying sslyze/cli/xml_output.py -> build/lib/sslyze/cli\n    creating build/lib/sslyze/utils\n    copying sslyze/utils/init.py -> build/lib/sslyze/utils\n    copying sslyze/utils/http_request_generator.py -> build/lib/sslyze/utils\n    copying sslyze/utils/http_response_parser.py -> build/lib/sslyze/utils\n    copying sslyze/utils/python_compatibility.py -> build/lib/sslyze/utils\n    copying sslyze/utils/ssl_connection.py -> build/lib/sslyze/utils\n    copying sslyze/utils/thread_pool.py -> build/lib/sslyze/utils\n    copying sslyze/utils/tls12_workaround.py -> build/lib/sslyze/utils\n    copying sslyze/utils/worker_process.py -> build/lib/sslyze/utils\n    creating build/lib/sslyze/plugins\n    copying sslyze/plugins/init.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/certificate_info_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/compression_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/fallback_scsv_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/heartbleed_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/http_headers_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/openssl_ccs_injection_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/openssl_cipher_suites_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/plugin_base.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/plugins_repository.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/robot_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/session_renegotiation_plugin.py -> build/lib/sslyze/plugins\n    copying sslyze/plugins/session_resumption_plugin.py -> build/lib/sslyze/plugins\n    creating build/lib/sslyze/plugins/utils\n    copying sslyze/plugins/utils/init.py -> build/lib/sslyze/plugins/utils\n    copying sslyze/plugins/utils/certificate_utils.py -> build/lib/sslyze/plugins/utils\n    creating build/lib/sslyze/plugins/utils/trust_store\n    copying sslyze/plugins/utils/trust_store/init.py -> build/lib/sslyze/plugins/utils/trust_store\n    copying sslyze/plugins/utils/trust_store/trust_store.py -> build/lib/sslyze/plugins/utils/trust_store\n    copying sslyze/plugins/utils/trust_store/trust_store_repository.py -> build/lib/sslyze/plugins/utils/trust_store\n    creating build/lib/sslyze/plugins/utils/trust_store/pem_files\n    copying sslyze/plugins/utils/trust_store/pem_files/aosp.pem -> build/lib/sslyze/plugins/utils/trust_store/pem_files\n    copying sslyze/plugins/utils/trust_store/pem_files/apple.pem -> build/lib/sslyze/plugins/utils/trust_store/pem_files\n    copying sslyze/plugins/utils/trust_store/pem_files/java.pem -> build/lib/sslyze/plugins/utils/trust_store/pem_files\n    copying sslyze/plugins/utils/trust_store/pem_files/microsoft.pem -> build/lib/sslyze/plugins/utils/trust_store/pem_files\n    copying sslyze/plugins/utils/trust_store/pem_files/mozilla.pem -> build/lib/sslyze/plugins/utils/trust_store/pem_files\n    running install_lib\n    creating /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze\n    copying build/lib/sslyze/init.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze\n    copying build/lib/sslyze/main.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze\n    creating /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli\n    copying build/lib/sslyze/cli/init.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli\n    copying build/lib/sslyze/cli/command_line_parser.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli\n    copying build/lib/sslyze/cli/console_output.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli\n    copying build/lib/sslyze/cli/json_output.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli\n    copying build/lib/sslyze/cli/output_generator.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli\n    copying build/lib/sslyze/cli/output_hub.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli\n    copying build/lib/sslyze/cli/xml_output.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli\n    copying build/lib/sslyze/concurrent_scanner.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze\n    creating /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/init.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/certificate_info_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/compression_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/fallback_scsv_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/heartbleed_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/http_headers_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/openssl_ccs_injection_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/openssl_cipher_suites_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/plugin_base.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/plugins_repository.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/robot_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/session_renegotiation_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    copying build/lib/sslyze/plugins/session_resumption_plugin.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins\n    creating /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils\n    copying build/lib/sslyze/plugins/utils/init.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils\n    copying build/lib/sslyze/plugins/utils/certificate_utils.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils\n    creating /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store\n    copying build/lib/sslyze/plugins/utils/trust_store/init.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store\n    creating /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/pem_files\n    copying build/lib/sslyze/plugins/utils/trust_store/pem_files/aosp.pem -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/pem_files\n    copying build/lib/sslyze/plugins/utils/trust_store/pem_files/apple.pem -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/pem_files\n    copying build/lib/sslyze/plugins/utils/trust_store/pem_files/java.pem -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/pem_files\n    copying build/lib/sslyze/plugins/utils/trust_store/pem_files/microsoft.pem -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/pem_files\n    copying build/lib/sslyze/plugins/utils/trust_store/pem_files/mozilla.pem -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/pem_files\n    copying build/lib/sslyze/plugins/utils/trust_store/trust_store.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store\n    copying build/lib/sslyze/plugins/utils/trust_store/trust_store_repository.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store\n    copying build/lib/sslyze/server_connectivity.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze\n    copying build/lib/sslyze/ssl_settings.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze\n    copying build/lib/sslyze/synchronous_scanner.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze\n    creating /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    copying build/lib/sslyze/utils/init.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    copying build/lib/sslyze/utils/http_request_generator.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    copying build/lib/sslyze/utils/http_response_parser.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    copying build/lib/sslyze/utils/python_compatibility.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    copying build/lib/sslyze/utils/ssl_connection.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    copying build/lib/sslyze/utils/thread_pool.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    copying build/lib/sslyze/utils/tls12_workaround.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    copying build/lib/sslyze/utils/worker_process.py -> /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/init.py to init.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/main.py to main.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli/init.py to init.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli/command_line_parser.py to command_line_parser.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli/console_output.py to console_output.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli/json_output.py to json_output.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli/output_generator.py to output_generator.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli/output_hub.py to output_hub.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/cli/xml_output.py to xml_output.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/concurrent_scanner.py to concurrent_scanner.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/init.py to init.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/certificate_info_plugin.py to certificate_info_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/compression_plugin.py to compression_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/fallback_scsv_plugin.py to fallback_scsv_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/heartbleed_plugin.py to heartbleed_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/http_headers_plugin.py to http_headers_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/openssl_ccs_injection_plugin.py to openssl_ccs_injection_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/openssl_cipher_suites_plugin.py to openssl_cipher_suites_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/plugin_base.py to plugin_base.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/plugins_repository.py to plugins_repository.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/robot_plugin.py to robot_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/session_renegotiation_plugin.py to session_renegotiation_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/session_resumption_plugin.py to session_resumption_plugin.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/init.py to init.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/certificate_utils.py to certificate_utils.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/init.py to init.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/trust_store.py to trust_store.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/plugins/utils/trust_store/trust_store_repository.py to trust_store_repository.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/server_connectivity.py to server_connectivity.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/ssl_settings.py to ssl_settings.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/synchronous_scanner.py to synchronous_scanner.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils/init.py to init.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils/http_request_generator.py to http_request_generator.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils/http_response_parser.py to http_response_parser.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils/python_compatibility.py to python_compatibility.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils/ssl_connection.py to ssl_connection.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils/thread_pool.py to thread_pool.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils/tls12_workaround.py to tls12_workaround.pyc\n    byte-compiling /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/sslyze/utils/worker_process.py to worker_process.pyc\n    running install_egg_info\n    running egg_info\n    creating SSLyze.egg-info\n    writing requirements to SSLyze.egg-info/requires.txt\n    writing SSLyze.egg-info/PKG-INFO\n    writing top-level names to SSLyze.egg-info/top_level.txt\n    writing dependency_links to SSLyze.egg-info/dependency_links.txt\n    writing entry points to SSLyze.egg-info/entry_points.txt\n    writing manifest file 'SSLyze.egg-info/SOURCES.txt'\n    reading manifest file 'SSLyze.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    writing manifest file 'SSLyze.egg-info/SOURCES.txt'\n    Copying SSLyze.egg-info to /usr/local/Cellar/sslyze/1.3.0/libexec/lib/python2.7/site-packages/SSLyze-1.3.0-py2.7.egg-info\n    running install_scripts\n    Installing sslyze script to /usr/local/Cellar/sslyze/1.3.0/libexec/bin\n    writing list of installed files to '/tmp/pip-OCWiOW-record/install-record.txt'\n    Running setup.py install for SSLyze: finished with status 'done'\n  Removing source in /private/tmp/pip-djFByH-build\nSuccessfully installed SSLyze-1.3.0\nCleaning up...\n==> python run_tests.py\ntest_command_line_parsed (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_scans_completed (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_scans_started (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_server_connectivity_test_failed (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_server_connectivity_test_succeeded (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_server_connectivity_test_succeeded_with_http_tunneling (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_server_connectivity_test_succeeded_with_optional_client_auth (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_server_connectivity_test_succeeded_with_required_client_auth (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_server_scan_completed (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest_server_scan_completed_with_http_tunneling (cli_tests.test_console_output_generator.ConsoleOutputGeneratorTestCase) ... ok\ntest (cli_tests.test_json_output_generator.JsonOutputGeneratorTestCase)\nThe final output only gets written at the end, when calling scans_completed(). Hence we need to call all the ... ok\ntest (cli_tests.test_xml_output_generator.XmlOutputGeneratorTestCase)\nThe final output only gets written at the end, when calling scans_completed(). Hence we need to call all the ... ok\ntest_with_http_tunneling (cli_tests.test_xml_output_generator.XmlOutputGeneratorTestCase) ... ok\ntest_1000_sans_chain (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest_ca_file (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest_ca_file_bad_file (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest_certificate_with_no_cn (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/case.py:422: FutureWarning: The behavior of this method will change in future versions.  Use specific 'len(elem)' or 'elem is not None' test instead.\n  if not expr:\nok\ntest_certificate_with_no_subject (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ERROR\ntest_certificate_with_scts (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ERROR\ntest_chain_with_anchor (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ERROR\ntest_ecdsa_certificate (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ERROR\ntest_invalid_chain (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest_not_trusted_by_mozilla_but_trusted_by_microsoft (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest_only_trusted_by_custom_ca_file (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest_sha1_chain (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest_sha256_chain (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ERROR\ntest_unicode_certificate (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest_valid_chain_with_ev_cert (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ERROR\ntest_valid_chain_with_ocsp_stapling_and_must_staple (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase) ... ok\ntest (plugin_tests.test_certificate_utils.CertificateUtilsTestCase) ... ok\ntest_compression_disabled (plugin_tests.test_compression_plugin.CompressionPluginTestCase) ... ok\ntest_compression_enabled (plugin_tests.test_compression_plugin.CompressionPluginTestCase) ... ok\ntest_fallback_bad (plugin_tests.test_fallback_scsv_plugin.FallbackScsvPluginTestCase) ... WARNING:root:WARNING: Not on Linux - skipping test_fallback_bad() test\nok\ntest_fallback_good (plugin_tests.test_fallback_scsv_plugin.FallbackScsvPluginTestCase) ... ok\ntest_heartbleed_bad (plugin_tests.test_heartbleed_plugin.HeartbleedPluginTestCase) ... WARNING:root:WARNING: Not on Linux - skipping test_heartbleed_bad() test\nok\ntest_heartbleed_good (plugin_tests.test_heartbleed_plugin.HeartbleedPluginTestCase) ... ok\ntest_hpkp_enabled (plugin_tests.test_http_headers_plugin.HttpHeadersPluginTestCase) ... ok\ntest_hsts_and_hpkp_disabled (plugin_tests.test_http_headers_plugin.HttpHeadersPluginTestCase) ... ok\ntest_hsts_enabled (plugin_tests.test_http_headers_plugin.HttpHeadersPluginTestCase) ... ok\ntest_ccs_injection_bad (plugin_tests.test_openssl_ccs_injection_plugin.OpenSslCcsInjectionPluginTestCase) ... WARNING:root:WARNING: Not on Linux - skipping test_ccs_injection_bad() test\nok\ntest_ccs_injection_good (plugin_tests.test_openssl_ccs_injection_plugin.OpenSslCcsInjectionPluginTestCase) ... ok\ntest_follows_client_cipher_suite_preference (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_null_cipher_suites (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_rc4_cipher_suites (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_rc4_md5_cipher_suites (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_smtp_post_handshake_response (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_sslv2_disabled (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_sslv2_enabled (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... WARNING:root:WARNING: Not on Linux - skipping test_sslv2_enabled() test\nok\ntest_sslv3_disabled (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_sslv3_enabled (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... WARNING:root:WARNING: Not on Linux - skipping test_sslv3_enabled() test\nok\ntest_tls_1_3_cipher_suites (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_tlsv1_0_disabled (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_tlsv1_0_enabled (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_tlsv1_1_enabled (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_tlsv1_2_enabled (plugin_tests.test_openssl_cipher_suites_plugin.OpenSslCipherSuitesPluginTestCase) ... ok\ntest_robot_attack_bad (plugin_tests.test_robot_plugin.RobotPluginPluginTestCase) ... ok\ntest_robot_attack_good (plugin_tests.test_robot_plugin.RobotPluginPluginTestCase) ... ok\ntest_renegotiation_bad (plugin_tests.test_session_renegotiation_plugin.SessionRenegotiationPluginTestCase) ... ok\ntest_renegotiation_good (plugin_tests.test_session_renegotiation_plugin.SessionRenegotiationPluginTestCase) ... ok\ntest_resumption_rate (plugin_tests.test_session_resumption_plugin.SessionResumptionPluginTestCase) ... ok\ntest_resumption_support (plugin_tests.test_session_resumption_plugin.SessionResumptionPluginTestCase) ... ok\ntest (plugin_tests.test_trust_store.TrustStoreTestCase) ... ok\ntest_https_tunneling (test_https_tunnel.HttpsTunnelTestCase) ... WARNING:root:Connecting to ('www.google.com', 443)\n127.0.0.1 - - [18/Dec/2017 09:15:22] \"CONNECT www.google.com:443 HTTP/1.1\" 200 -\nWARNING:root:Connecting to ('www.google.com', 443)\nWARNING:root:Finished do_CONNECT()\n127.0.0.1 - - [18/Dec/2017 09:15:23] \"CONNECT www.google.com:443 HTTP/1.1\" 200 -\nWARNING:root:Finished do_CONNECT()\nWARNING:root:Connecting to ('www.google.com', 443)\nWARNING:root:Connecting to ('www.google.com', 443)\nWARNING:root:Connecting to ('www.google.com', 443)\nWARNING:root:Connecting to ('www.google.com', 443)\nWARNING:root:Connecting to ('www.google.com', 443)\n127.0.0.1 - - [18/Dec/2017 09:15:23] \"CONNECT www.google.com:443 HTTP/1.1\" 200 -\n127.0.0.1 - - [18/Dec/2017 09:15:23] \"CONNECT www.google.com:443 HTTP/1.1\" 200 -\n127.0.0.1 - - [18/Dec/2017 09:15:23] \"CONNECT www.google.com:443 HTTP/1.1\" 200 -\n127.0.0.1 - - [18/Dec/2017 09:15:23] \"CONNECT www.google.com:443 HTTP/1.1\" 200 -\n127.0.0.1 - - [18/Dec/2017 09:15:23] \"CONNECT www.google.com:443 HTTP/1.1\" 200 -\nWARNING:root:Finished do_CONNECT()\nWARNING:root:Finished do_CONNECT()\nWARNING:root:Finished do_CONNECT()\nWARNING:root:Finished do_CONNECT()\nWARNING:root:Finished do_CONNECT()\nok\ntest_https_tunneling_bad_arguments (test_https_tunnel.HttpsTunnelTestCase) ... ok\ntest_international_names (test_protocols.ProtocolsTestCase) ... ERROR\ntest_ipv6 (test_protocols.ProtocolsTestCase) ... WARNING:root:WARNING: IPv6 not available - skipping test\nok\ntest_optional_client_authentication (test_protocols.ProtocolsTestCase) ... ERROR\ntest_smtp_custom_port (test_protocols.ProtocolsTestCase) ... ok\ntest_starttls (test_protocols.ProtocolsTestCase) ... ok\ntest_tls_1_only (test_protocols.ProtocolsTestCase) ... ok\ntest_xmpp_to (test_protocols.ProtocolsTestCase) ... ok\ntest_concurrent_scanner (test_scanner.ScannerTestCase) ... ok\ntest_synchronous_scanner (test_scanner.ScannerTestCase) ... ok\n======================================================================\nERROR: test_certificate_with_no_subject (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/tests/plugin_tests/test_certificate_info_plugin.py\", line 247, in test_certificate_with_no_subject\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 164, in process_task\n    path_validation_error_list, ocsp_response)\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 292, in init\n    self.certificate_included_scts_count = CertificateUtils.count_scts_in_sct_extension(self.certificate_chain[0])\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/utils/certificate_utils.py\", line 131, in count_scts_in_sct_extension\n    scts_count = len(sct_ext.value)\nTypeError: object of type 'UnrecognizedExtension' has no len()\n======================================================================\nERROR: test_certificate_with_scts (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/tests/plugin_tests/test_certificate_info_plugin.py\", line 262, in test_certificate_with_scts\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 164, in process_task\n    path_validation_error_list, ocsp_response)\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 292, in init\n    self.certificate_included_scts_count = CertificateUtils.count_scts_in_sct_extension(self.certificate_chain[0])\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/utils/certificate_utils.py\", line 131, in count_scts_in_sct_extension\n    scts_count = len(sct_ext.value)\nTypeError: object of type 'UnrecognizedExtension' has no len()\n======================================================================\nERROR: test_chain_with_anchor (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/tests/plugin_tests/test_certificate_info_plugin.py\", line 185, in test_chain_with_anchor\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 164, in process_task\n    path_validation_error_list, ocsp_response)\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 292, in init\n    self.certificate_included_scts_count = CertificateUtils.count_scts_in_sct_extension(self.certificate_chain[0])\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/utils/certificate_utils.py\", line 131, in count_scts_in_sct_extension\n    scts_count = len(sct_ext.value)\nTypeError: object of type 'UnrecognizedExtension' has no len()\n======================================================================\nERROR: test_ecdsa_certificate (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/tests/plugin_tests/test_certificate_info_plugin.py\", line 170, in test_ecdsa_certificate\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 164, in process_task\n    path_validation_error_list, ocsp_response)\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 292, in init\n    self.certificate_included_scts_count = CertificateUtils.count_scts_in_sct_extension(self.certificate_chain[0])\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/utils/certificate_utils.py\", line 131, in count_scts_in_sct_extension\n    scts_count = len(sct_ext.value)\nTypeError: object of type 'UnrecognizedExtension' has no len()\n======================================================================\nERROR: test_sha256_chain (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/tests/plugin_tests/test_certificate_info_plugin.py\", line 140, in test_sha256_chain\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 164, in process_task\n    path_validation_error_list, ocsp_response)\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 292, in init\n    self.certificate_included_scts_count = CertificateUtils.count_scts_in_sct_extension(self.certificate_chain[0])\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/utils/certificate_utils.py\", line 131, in count_scts_in_sct_extension\n    scts_count = len(sct_ext.value)\nTypeError: object of type 'UnrecognizedExtension' has no len()\n======================================================================\nERROR: test_valid_chain_with_ev_cert (plugin_tests.test_certificate_info_plugin.CertificateInfoPluginTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/tests/plugin_tests/test_certificate_info_plugin.py\", line 64, in test_valid_chain_with_ev_cert\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 164, in process_task\n    path_validation_error_list, ocsp_response)\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 292, in init\n    self.certificate_included_scts_count = CertificateUtils.count_scts_in_sct_extension(self.certificate_chain[0])\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/utils/certificate_utils.py\", line 131, in count_scts_in_sct_extension\n    scts_count = len(sct_ext.value)\nTypeError: object of type 'UnrecognizedExtension' has no len()\n======================================================================\nERROR: test_international_names (test_protocols.ProtocolsTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/tests/test_protocols.py\", line 65, in test_international_names\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 164, in process_task\n    path_validation_error_list, ocsp_response)\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 292, in init\n    self.certificate_included_scts_count = CertificateUtils.count_scts_in_sct_extension(self.certificate_chain[0])\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/utils/certificate_utils.py\", line 131, in count_scts_in_sct_extension\n    scts_count = len(sct_ext.value)\nTypeError: object of type 'UnrecognizedExtension' has no len()\n======================================================================\nERROR: test_optional_client_authentication (test_protocols.ProtocolsTestCase)\n\nTraceback (most recent call last):\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/tests/test_protocols.py\", line 110, in test_optional_client_authentication\n    plugin_result = plugin.process_task(server_info, CertificateInfoScanCommand())\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 164, in process_task\n    path_validation_error_list, ocsp_response)\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/certificate_info_plugin.py\", line 292, in init\n    self.certificate_included_scts_count = CertificateUtils.count_scts_in_sct_extension(self.certificate_chain[0])\n  File \"/private/tmp/sslyze-20171218-80344-1flx7lt/sslyze-1.3.0/sslyze/plugins/utils/certificate_utils.py\", line 131, in count_scts_in_sct_extension\n    scts_count = len(sct_ext.value)\nTypeError: object of type 'UnrecognizedExtension' has no len()\n\nRan 73 tests in 65.223s\nFAILED (errors=8)\n```. Thanks @nabla-c0d3! Fixed.. @nabla-c0d3 any ideas here?. ",
    "stoennies": "I'm sorry to ask again...\nNow I'm working in a nother network and tried your approch: sslyze --starttls=smtp --certinfo_basic and I get an Connection rejected. So still not working. And now for ALL servers, e.g. mx.noris.net\nI am working under windows in the console and no proxy active.\n. ",
    "zlaoz": "Still getting \"-\" as agent using version 1.2.0. ",
    "kacpern": "I'm sorry, but this is most likely a bug in nassl, rather then sslyze. Do you want me to open an issue in the other repo?\n. As far as I can tell the issues start from calling:\n_nassl.get_issuer_name_entries() and\n_nassl.get_subject_name_entries()\nThese in turn call the following two C functions:\nnassl_X509_get_subject_name_entries() and\nnassl_X509_get_issuer_name_entries()\nand then:\ngeneric_get_name_entries()\nwhich seems to be where the bug is.\n. ",
    "bratkartoffel": "Same here, tested versions:\n0.14.1\n0.14.0\n0.13.6\n0.13.5\n0.13.4\n0.13.3\n0.13.2 (could not test as no .exe available / found)\n0.13.1 (could not test as no .exe available / found)\nLast working version for me is the 0.12 release.\n. ",
    "DinaHkr": "Can i get any reference website?\nOn 24-Oct-2016 9:13 PM, \"Alban Diquet\" notifications@github.com wrote:\n\nUse SSLyze as a Python module, store the results in a dabatase.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nabla-c0d3/sslyze/issues/181#issuecomment-255778758,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AVivuIx84A6026kdsfqIyeT0TYzCQOyuks5q3NImgaJpZM4KedF6\n.\n. \n",
    "pfreitag": "Also had this issue, it only seams to happen if you specify --http_headers. ",
    "asana12": "Same problem:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/runpy.py\", line 174, in _run_module_as_main\n    \"__main__\", fname, loader, pkg_name)\n  File \"/usr/lib/python2.7/runpy.py\", line 72, in _run_code\n    exec code in run_globals\n  File \"/usr/local/ns/nscti/lib3rd/sslyze/sslyze/__main__.py\", line 138, in <module>\n    main()\n  File \"/usr/local/ns/nscti/lib3rd/sslyze/sslyze/__main__.py\", line 134, in main\n    output_hub.scans_completed(exec_time)\n  File \"sslyze/cli/output_hub.py\", line 58, in scans_completed\n    out_generator.scans_completed(total_scan_time)\n  File \"sslyze/cli/xml_output.py\", line 92, in scans_completed\n    xml_final_string = tostring(self._xml_root_node, encoding='UTF-8')\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 1126, in tostring\n    ElementTree(element).write(file, encoding, method=method)\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 820, in write\n    serialize(write, self._root, encoding, qnames, namespaces)\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 939, in _serialize_xml\n    _serialize_xml(write, e, encoding, qnames, None)\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 939, in _serialize_xml\n    _serialize_xml(write, e, encoding, qnames, None)\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 939, in _serialize_xml\n    _serialize_xml(write, e, encoding, qnames, None)\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 939, in _serialize_xml\n    _serialize_xml(write, e, encoding, qnames, None)\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 932, in _serialize_xml\n    v = _escape_attrib(v, encoding)\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 1092, in _escape_attrib\n    _raise_serialization_error(text)\n  File \"/usr/lib/python2.7/xml/etree/ElementTree.py\", line 1052, in _raise_serialization_error\n    \"cannot serialize %r (type %s)\" % (text, type(text).__name__)\nTypeError: cannot serialize 31536000 (type int). All of the requirements are installed.\npip2 install sslyze. \n`sslyze --regular www.yahoo.com\nAVAILABLE PLUGINS\nSessionResumptionPlugin\nOpenSslCipherSuitesPlugin\nFallbackScsvPlugin\nHeartbleedPlugin\nCompressionPlugin\nOpenSslCcsInjectionPlugin\nHttpHeadersPlugin\nCertificateInfoPlugin\nSessionRenegotiationPlugin\nCHECKING HOST(S) AVAILABILITY\nTraceback (most recent call last):\nFile \"/usr/local/bin/sslyze\", line 11, in \nsys.exit(main())\nFile \"/usr/local/lib/python2.7/dist-packages/sslyze/main.py\", line 98, in main\nfailed_scan = FailedServerScan(tentative_server_info.server_string, exception)\nFile \"/usr/local/lib/python2.7/dist-packages/sslyze/cli/init.py\", line 18, in init\nraise connection_exception\nAttributeError: 'int' object has no attribute 'value'`. The problem is still continuing. I'm waiting for your help.\n. ",
    "freakboy3742": "I completely understand your desire to prevent exploitation of your work.\nHowever, I don't think LGPL or GPL meets the requirements you've described. For a standalone tool, either would work, depending on how you want to draw the line for \"using\" SSLyze. If you want to prevent a proprietary tool from even using using sslyze as a library, then GPL works fine; but if you're fine with a proprietary tool that uses sslyze, but publishes any modifications they make to sslyze itself, then LGPL would be better.\nHowever, neither LGPL or GPL prevents use of sslyze in a SaaS configuration. If I (or anyone else, for that matter) was to write a website that uses sslyze, then I won't be distributing a binary - and so, I won't trigger any of the clauses of the GPL that would also require distribution of my source code. \nThat's what the AGPL is designed to achieve - to force anyone who writes a web service that uses an AGPL'd library to also release the source code for the entire web service. However, there's no \"Lesser AGPL\" to my knowledge, so there is no middle ground - I either have to release all the code for my web service, or not use your AGPL'd library. As you may expect, this pretty much kills any commercial use of AGPL'd software. Which might be your intent - and it's your software, so that's your prerogative.\nSo - lets put this in concrete terms. I'm working on a SaaS which hopes to offer, amongst many other things, verification of SSL configuration of web servers and certificates. My intention is to essentially use sslyze as-is - and any changes I made would be returned to sslyze itself (as I've already done with #200). \nBy the strict letter of the law, there's nothing stopping me from using your code right now under the terms of the GPL, because the GPL doesn't cover the SaaS use case. But I'd rather adhere to the spirit of the law and honour your wishes. \nIf I'm understanding your reply correctly, licensing terms notwithstanding, this is the sort of usage you're OK with. Have I misunderstood your intent? \n. I completely support @konklone's advice here. My understanding of AGPL does not match your read at all, and you shouldn't be taking legal advice from HN.\nCompletely aside of who is correct - I can tell you that moving to AGPL would comprehensively squash any possibility of using SSLyse in any commercial project I've ever been involved in. Everywhere I have ever been employed has had very liberal policy of using open source software in general, but licensing guidelines have always been prefaced with an emphatic DO NOT UNDER ANY CIRCUMSTANCES USE (A)GPL SOFTWARE WITHOUT CONSULTING MANAGEMENT clause. \nIt is completely your right to pick whatever license you wish. However, you should be aware of the consequences of some choices. Picking AGPL will almost guarantee that your code will not be used at all in any commercial setting. If this is your intention, that's completely fine. But if it is not, then it's obviously a problem.. For my test cases, it returned the same values as the current mainline version; is there a particular test case that is worth checking?. ",
    "cdvv7788": "@nabla-c0d3 I think that this discussion or at least the conclusions should be in the README. The AGPL license seems to have a lot of different interpretations and some clarification could actually boost the usage of the library.. ",
    "mmclean636jr": "Is there a projected release date for 1.1.0?. ",
    "spawankumar": "@nabla-c0d3 please advice . ",
    "tk421": "The following Dockerfile fails\nPython 2\nFROM debian:8\nENV TERM linux\nRUN apt-get -qq update; apt-get -qy install build-essential curl python-pip python-dev\nRUN pip install SSLyze\nPython 3\nFROM debian:8\nENV TERM linux\nRUN apt-get -qq update; apt-get -qy install build-essential curl python3-pip python3-dev\nRUN pip3 install SSLyze\nCould you please confirm what has to be updated to install it ?\n. ",
    "dylanjbarth": "I am still able to replicate this issue with 1.3.4. @nabla-c0d3 just sent you an email with a domain to try. . ",
    "savahu": "Thanks a lot for explaining the undocumented dependencies!. ",
    "redtrumpet": "Maybe this is a bug in the cryptography package, but I also run into these issues. I used pip install sslyze --user to install. I also had to install libffi-dev. Not sure if pip tries to build the cryptography package?. ",
    "BenjaminHae": "I just tried\nssh -L 8443:localhost:443 server\nThen doing\nsslyze --regular 127.0.0.1:8443\nworks great.. Nothing. But it seems pointless to duplicate something that's already available.\nI mostly keep the xml files of hosts I scanned as I thought they contained all/more information of/than the text output. I just expected that the xml file contained all information of the text output ( yes I know technically it is in the pem, but I hope you get my point ). This time it identified\n```\nRSA_WITH_AES_256_CCM_8\nRSA_WITH_AES_256_CCM\nRSA_WITH_AES_128_CCM\nRSA_WITH_AES_128_CCM_8\n```. ",
    "miradam": "In attachment.\n172.16.10.254-with-chain.crt.zip\n. ",
    "cr41g1w": "I am getting the same error no matter what site I scan, though I am trying to run it on bash on ubuntu on windows.. After further testing, only --regular and --certinfo throw the error given above.  All other options that I have tried work successfully.. Commenting out line 573 of sslyze/plugins/certificate_info_plugin.py lets --regular and --certinfo complete successfully, just without getting the certificate serial number.. ",
    "ghost": "Thanks, I'm going to reinstall pip, to see if it works!. I was right, I have reinstalled pip and it worked!\n\nsolution: [1] 11334 segmentation fault pip install sslyze\n- Reinstall pip:\nUninstall python-pip:\n# apt remove --purge python-pip\nUpdate system:\n# apt update; apt upgrade; apt autoremove\nInstall required packages:\n# apt install python-dev build-essential\nInstall python-pip:\n# apt install python-pip\nUpdate pip to the latest version:\n# pip install --upgrade pip\nInstall SSLyze:\n# pip install --upgrade SSLyze\n\n@nabla-c0d3 Thank you for your project!\n. ",
    "MikeLund": "Thanks, but did you try with the version on Homebrew?\nUnsure when I will have time to mess with pip to try version on master, so would be good to know if it's just a possible error with Homebrew's build.. Hi again, sorry for delay getting back on this.\nI have figured out it must be something my ISP is doing. If I use any VPN, sslyze tests Heartbleed fine. But if I test with my normal IP, it always gives the TlsRecordTypeByte error.\nDo you know the best way I can debug this/help you out? I tried running http://rehmann.co/projects/heartbeat/ssltest.py - worked on my VPN (Received alert!), but on my normal IP it gave Sending heartbeat request...\nUnexpected EOF receiving record header - server closed connection.\nPS: as I said in my first post, sslyze --heartbleed says OK - Not vulnerable to Heartbleed when I test with my IP on Google. But if I run the script I linked above against Google (or any other site) using my IP, I get the same EOF error.\nSo for some reason sslyze is thinking the response I get from Google is okay, but the response from Cloudflare isn't okay. But this also makes no sense, because my ISP must be dropping the HB payload or something??? \ud83d\ude15 . Forgot to mention, already checked that; I made sure it tested against the same IP (198.41.215.162) all the different times. So I'm almost 100% sure it must be something sneaky my ISP is doing regarding the HB payload.. ",
    "jvolli": "Hi, I'm getting a similar error when trying to test \"sslyze --regular webmail.vocons.de\":\n * OpenSSL Heartbleed:\nUnhandled exception while running --heartbleed:\nValueError - 11 is not a valid TlsRecordTypeByte\n...\n * OpenSSL CCS Injection:\nUnhandled exception while running --openssl_ccs:\nValueError - 11 is not a valid TlsRecordTypeByte\nMaybe you can reproduce with this site? Thanks in advance, Juergen. ",
    "Jackeriss": "@nabla-c0d3  I tried to build nassl by running python3 build_from_scratch.py, but the test didn't pass:\n======================================================================\nERROR: test_sct_parsing (tests.ocsp_response_tests.OcspResponseOnlineTests)\n\nTraceback (most recent call last):\n  File \"/tmp/nassl/tests/ocsp_response_tests.py\", line 74, in test_sct_parsing\n    self.assertIsNotNone(ocsp_response.as_dict()['responses'][0]['singleExtensions']['ctCertificateScts'])\nKeyError: 'singleExtensions'\n======================================================================\nERROR: test_get_ecdh_param (tests.ssl_client_tests.SslClientOnlineTests)\n\nTraceback (most recent call last):\n  File \"/tmp/nassl/tests/ssl_client_tests.py\", line 142, in test_get_ecdh_param\n    self.assertIsNotNone(self.ssl_client.get_ecdh_param())\n  File \"/tmp/nassl/nassl/debug_ssl_client.py\", line 88, in get_ecdh_param\n    d = self._openssl_str_to_dic(self._ssl.get_ecdh_param(), '        ')\nTypeError: Unable to get server public key.\n======================================================================\nFAIL: test_get_available_compression_methods_has_zlib (tests.SSL_tests.SSL_Tests)\n\nTraceback (most recent call last):\n  File \"/tmp/nassl/tests/SSL_tests.py\", line 93, in test_get_available_compression_methods_has_zlib\n    self.assertEqual(['zlib compression'], test_ssl.get_available_compression_methods())\nAssertionError: Lists differ: ['zlib compression'] != []\nFirst list contains 1 additional elements.\nFirst extra element 0:\n'zlib compression'\n\n['zlib compression']\n[]\n\n======================================================================\nFAIL: test_read (tests.ssl_client_tests.SslClientOnlineTests)\n\nTraceback (most recent call last):\n  File \"/tmp/nassl/tests/ssl_client_tests.py\", line 130, in test_read\n    self.assertRegexpMatches(self.ssl_client.read(1024), b'google')\nAssertionError: Regex didn't match: b'google' not found in b'HTTP/1.0 200 OK\\r\\nAccept-Ranges: bytes\\r\\nCache-Control: no-cache\\r\\nContent-Length: 14720\\r\\nContent-Type: text/html\\r\\nDate: Fri, 25 Aug 2017 05:15:28 GMT\\r\\nLast-Modified: Mon, 21 Aug 2017 07:02:00 GMT\\r\\nP3p: CP=\" OTI DSP COR IVA OUR IND COM \"\\r\\nPragma: no-cache\\r\\nServer: BWS/1.1\\r\\nSet-Cookie: BAIDUID=4E18E0007599901B0748E1FD6B5C5F74:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com\\r\\nSet-Cookie: BIDUPSID=4E18E0007599901B0748E1FD6B5C5F74; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com\\r\\nSet-Cookie: PSTM=1503638128; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com\\r\\nVary: Accept-Encoding\\r\\nX-Ua-Compatible: IE=Edge,chrome=1\\r\\n\\r\\n<!DOCTYPE html>STATUS OK\\r\\n\\r\\n\\r\\n\\t\\r\\n\\t\\r\\n\\t\\r\\n\\t\\r\\n\\t<link rel=\"dns-pre'\n\nRan 78 tests in 5.784s\nFAILED (failures=2, errors=2)\nTraceback (most recent call last):\n  File \"build_from_scratch.py\", line 164, in \n    main()\n  File \"build_from_scratch.py\", line 156, in main\n    perform_build_task('NASSL Tests', NASSL_TEST_TASKS)\n  File \"build_from_scratch.py\", line 34, in perform_build_task\n    subprocess.check_call(command, shell=True, cwd=cwd)\n  File \"/usr/local/python3.6/lib/python3.6/subprocess.py\", line 291, in check_call\n    raise CalledProcessError(retcode, cmd)\nsubprocess.CalledProcessError: Command '/usr/local/python3.6/bin/python3 setup.py test' returned non-zero exit status 1.. @nabla-c0d3 I have tested my code on many platforms. The Segmentation fault only occurs on Debian(I tried Debian 6 and Debian 7). But not on Mac OS El Capitan or CentOS 6.8.. Problem solved by updating openssl to openssl 1.0.2l. @nabla-c0d3 Yes.. ",
    "kiran-dp": "Went ahead with parsing DNS entries using Openssl module in Ruby. \nDo you meant newer version won't have extensions information in XML output at all? if thats the case we can close this issue.. ",
    "IanLee1521": "@konklone do you have a short code snippet to attempt to reproduce this?. ",
    "vaibhavmule": "is there anything that I can contribute, please let me know.. @ericrange \nI get your point. I was just curious because I was looking at https://law.stackexchange.com/questions/2033/legality-of-scanning-a-site-with-ssllabs-ssl-server-test-in-order-to-find-and-re. Okay, This I feel resolved my issues and Thanks.. Okay, Thanks Alban.. ",
    "gopar": "The 2nd error should be fixed in 1.1.5. ",
    "egyptiankarim": "Are there major incompatibilities preventing us from just bumping up requirements.txt? Recent changes to pyOpenSSL may have just raised the importance on this, no? From pyOpenSSL:\n\nRelease Information\n17.5.0 (2017-11-30)\nBackward-incompatible changes:\nThe minimum cryptography version is now 2.1.4.. Glad this pull made it in :) \n\n@nabla-c0d3 any ideas on when we might see this updated in PyPI?. ",
    "Reamer": "Python 3.7 was release this June and your Dockerfile with latest tag doesn't work. I tried a little bit, but with this Dockerfile it works really great\nFROM python:3.6-slim\nRUN pip install sslyze\nENTRYPOINT [\"sslyze\"]\nCMD [\"-h\"]\nImage is only 173MB big :-D\n. ",
    "bhushan5640": "In case of sslyze, Client key exchange looks malformed when it receives TLS Alert 50 (Decode error) for guide.duo.com. Encrypted PMS size should be the exact size of modulus_bytes (server public key).. ",
    "davidben": "That fix doesn't look right. It's just re-rolling the dice. A different RSA key will hit the problem with the new input. Rather, the bug is in this function and int_to_bytes:\nhttps://github.com/nabla-c0d3/tls_parser/blob/master/tls_parser/handshake_protocol.py#L91\nWhen you serialize your RSA ciphertext, it must have the same length as the modulus, zero-padded as necessary. (A production RSA implementation would get that padding for free by way of using fixed-width integers throughout, rather than explicitly zero-padding.)\nPS: As for the \"Not sure what this is?\" comment in that file, that's the length of the ciphertext, which that file is currently incorrectly hardcoding at 256 bytes or 2048 bits. That would give the wrong answer for, say, a 3072-bit RSA key. Instead, you need to take the length and encode it as a big-endian 16-bit number. See RFC 5246, section 4.7:\n\nIn public key encryption, a public key algorithm is used to encrypt\n  data in such a way that it can be decrypted only with the matching\n  private key.  A public-key-encrypted element is encoded as an opaque\n  vector <0..2^16-1>, where the length is specified by the encryption\n  algorithm and key.\n\n(That <0..2^16-1> means there is a 16-bit length prefix.). ",
    "RaheelaKhan1172": "Hi! I wanted to let you know that I'm working on a PR for this and am almost done-- I'm writing some tests right now. I'll submit the PR after that! . Updated! I left out tests for report-uri and enforce since those directives are optional-- let me know what you think \ud83e\udd1e!. Woohoo \ud83c\udf89 !!! No problem! I'll definitely be looking out for more features/issues seem doable for me \ud83d\ude05. I'm trying to improve my knowledge in Python and your project has been really cool to learn from so far-- for Python and info sec as a bonus! . The types are misaligned because of raw_expect_ct_header:\n\nI think it'd improve readability to add in extra spacing to the rest of the comments so everything is aligned again: \n\nNot sure how you'd feel about the extra empty spaces! What do you think? . I realized the test will fail if the value is zero \ud83d\ude05 . ",
    "koczkatamas": "I tried to run sslyze-1_3_2\\sslyze --timeout=120 --nb_retries=50 --json_out=result_tresorit.com.json --tlsv1 tresorit.com and I got on the first try:\n```\n SCAN RESULTS FOR TRESORIT.COM:443 - 191.235.160.13\n\n\nTLSV1 Cipher Suites:\n     Preferred:\n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  256 bits\n     Accepted:\n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  256 bits\n        TLS_RSA_WITH_AES_256_CBC_SHA                      -              256 bits\n        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  128 bits\n        TLS_RSA_WITH_AES_128_CBC_SHA                      -              128 bits\n     Undefined - An unexpected error happened:\n        TLS_RSA_WITH_CAMELLIA_256_CBC_SHA                 timeout - timed out\n        TLS_ECDH_anon_WITH_NULL_SHA                       timeout - timed out\n        TLS_ECDH_RSA_WITH_NULL_SHA                        timeout - timed out\n        TLS_ECDH_RSA_WITH_AES_128_CBC_SHA                 timeout - timed out\n        TLS_ECDH_ECDSA_WITH_NULL_SHA                      timeout - timed out\n     Rejected:\n        TLS_RSA_WITH_SEED_CBC_SHA                         TCP / Received FIN\n        TLS_RSA_WITH_RC4_128_SHA                          TCP / Received FIN\n        TLS_RSA_WITH_RC4_128_MD5                          TCP / Received FIN\n...\n```\n\nSecond try:\nUndefined - An unexpected error happened:\n        TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA             timeout - timed out\n        TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA                 timeout - timed out\nThird try:\nUndefined - An unexpected error happened:\n        TLS_DH_RSA_WITH_AES_128_CBC_SHA                   timeout - timed out\n        TLS_DH_DSS_WITH_AES_128_CBC_SHA                   timeout - timed out\nI tried to track down the issue with Wireshark, for example on one try the TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA cipher failed. Usually sslyze makes ~124 request for a full test (only one domain, --tlsv1) and this failed request was the 61st TCP connection (so there were a ton of good connections before and after this one), and even with --nb_retries=50 and --timeout=120 it finished in 19.33 seconds, while it only tried to test the TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA cipher once (without any retry). Although as you can see on the screenshot below that only try failed miserably on TCP level:\n\nSo I think the retry logic does not work correctly or at least not in all cases. (Or I misunderstood the purpose of the nb_retries parameter).\nI attached the whole Wireshark capture: sslyze_time_out_issue.zip\nThe website is a standard Azure Web App (hosting only static pages): https://azure.microsoft.com/en-us/services/app-service/web/. Yeah sure, it's tresorit.com.\nYou can find the exactly command line I used for my tests in my previous comments.. Hmmm, I tried to run on my current internet (which is a more robust one than I used previously), and here it does not time out.\n~So I presume the server itself can handle the test / traffic~*, the problem if you are on an unreliable network then and a request times out because the network and then sslyze does not try it again somehow. So maybe the retry logic does not work if the timeout (exception?) comes at the wrong time.\n*Edit: I just tried it out on the original, \"unreliable\" network and now it works without timeout errors. So maybe it has something to do with the server less loaded due to weekend. This means that we cannot trigger the error that easily now, but I am pretty sure there is no retry.\nI will try to debug it out what code path runs when the exception happens when I will be on the unreliable network again.. I think the main priority should be make the retry work.\nI haven't got the time to track it down why sslyze doesn't try it again if the connection times out once. Do you have any idea?\nIf the retry logic would work then I think it would be possible to run the test without errors (it would finish I little slower I presume, but that's okay).. ",
    "marcb": "Thanks! I'll give it ago.. ",
    "FreifunkerEZ": ":+1: . ",
    "hackerabhinavverma": "I am using MAC OS, I have check my python library it is updated to version 2.1.4 and i have installed the sslyze with the help of brew. I didnt had this problem with the older release of sslyze. but getting this in this version.\nBelow is the terminal snip of python cyptography, sslyze and python version\n\nabhinav:~ averma5$ pip show cryptography\nName: cryptography\nVersion: 2.1.4\nSummary: cryptography is a package which provides cryptographic recipes and primitives to Python developers.\nHome-page: https://github.com/pyca/cryptography\nAuthor: The cryptography developers\nAuthor-email: cryptography-dev@python.org\nLicense: BSD or Apache License, Version 2.0\nLocation: /Library/Python/2.7/site-packages\nRequires: six, cffi, enum34, idna, asn1crypto, ipaddress\nabhinav:~ averma5$ brew install sslyze --update\nWarning: sslyze 1.3.4 is already installed\nabhinav:~ averma5$ python --version\nPython 2.7.10. Resolved Used below commands.\nsudo pip wheel sslyze\nsudo pip install SSLyze-1.3.4-py2-none-any.whl\nsudo python -m sslyze --update_trust_stores\n\nThank You for support :). ",
    "refayathaque": "@konklone did you find this fixed in the latest version of sslyze? If I use the newest version of the dockerized pshtt Lambda will it work?. > @konklone did you find this fixed in the latest version of sslyze? If I use the newest version of the dockerized pshtt Lambda will it work?\nIt does! :). ",
    "joequery": "Looks like it did!. ",
    "moyaldror": "Glad to help! Sorry I didn't find the time to add the sslyze plugin. ",
    "jsf9k": "@nabla-c0d3 Any chance of pushing a new release to PyPI with this fix?  This is also an issue for me.. See #311.  I haven't seen this myself, but apparently it can be caused by an out of date version of cryptography.. I confirmed that I'm seeing the same behavior.. I confirmed that I'm seeing the same behavior.. I can confirm that I'm seeing the same behavior.. @swarooppatra, I don't think it means the ciphers are not accepted necessarily.  It could be an internal error, but I haven't been able to track down the exact cause yet.. Thanks @nabla-c0d3!. I did some testing just now, and that host appears to be available only very intermittently.  Even if I try to simply load it in a browser, it only comes up every once in a while.. ",
    "vdeturckheim": "I had the same issue and ended up using pip install sslyze==1.3.4\nseems that the issue is only present in python2. Python3 seems fine to use. ",
    "zarquon5": "For the record, the version for Windows/Python 2.7 is still broken, and when I tried to install version 1.3.4 using pip (Python 2.7.15), I got the following error.\nsslyze build failure.txt\n. ",
    "wsargent": "Same problem on OS X:\n\u2771 pip install --upgrade sslyze\nCollecting sslyze\n  Using cached https://files.pythonhosted.org/packages/73/a6/424284342a49c1be7669c7620de53fa736b6b0785dd07a6edcf0008d8ef0/SSLyze-1.4.2.tar.gz\nCollecting nassl<1.2.0,>=1.1.0 (from sslyze)\n  Could not find a version that satisfies the requirement nassl<1.2.0,>=1.1.0 (from sslyze) (from versions: 0.13.4.win32, 0.13.1, 0.13.2, 0.13.4, 0.13.5, 0.13.6, 0.13.7, 0.14.0, 0.14.1, 0.14.2, 0.15.0, 0.15.1, 0.16.0, 0.16.1, 0.16.2, 0.16.3, 0.17.0, 1.0.1, 1.0.2, 1.0.3)\nNo matching distribution found for nassl<1.2.0,>=1.1.0 (from sslyze). ",
    "regenscheid": "@nabla-c0d3 -\nI've got the same problem as @wsargent when trying to install via pip/pip3 in Mac OS 10.12.  I get the same error message whether I'm using brew-installed Python 2.7.15 or working in a Python 3.7.0 virtualenv.\nFor what it's worth, I can install via brew, but then I run into the certinfo errors described in #320. I've been trying to find some sort of fix.. I've been struggling with this, too, on Mac 10.12.  When I installed Sslyze 1.4.2 via homebrew, I get these same errors.  It doesn't seem like its old cryptography or OpenSSL.  As far as I can tell, I'm running cryptography v2.2.2, and OpenSSL 1.0.2o.  But, it's hard to tell what packages are using what versions of OpenSSL that are scattered around everywhere.\nHave you tried installing via pip?\nI largely gave up on using brew, figuring I had more control over pip.  But I can't get sslyze 1.4.2 to install using pip, as described in #306.  It looks like nassl might not be compatible with Python 3.7, so that might explain why I can't do it from my python3 virtualenv.  But I also can't install it via pip with Python 2.7.15.\nBy the way, I think it is pretty well-established that this error is a problem with processing the SCTs in certificates (supporting Certificate Transparency).  I didn't check all your examples, but it looks like all the ones that break include SCTs in the server certificate.  The servers that don't either don't support CT at all or they support it via the TLS extension.. I'm not sure what to make of the behavior I'm seeing.  \nFirst, I'll note that if I install sslyze v1.3.4 via pip, I don't see these certinfo errors. They only happen when I'm on sslyze 1.4.2 (which I can only install via brew).  Under 1.3.4, sslyze correctly identifies the SCTs.\nSecond, I'm confused about what version of OpenSSL is being used by cryptography. I know Apple includes an old version in Mac OS, but python seems to be using the newer version I installed:\n(p3env) macmachine:.virtualenvs user$ python -c \"import ssl; print(ssl.OPENSSL_VERSION)\"\nOpenSSL 1.0.2o  27 Mar 2018\nI'm hoping the next release that supports Python 3.7 will work fine when I install it via pip.  But, I don't understand why sslyze v1.3.4 works (when installed via pip), but v1.4.2 doesn't (when installed via brew).. ",
    "secusbot": "Python 2.7.5. ",
    "muellermartin": "I seem to have the same error on macOS:\npip install --upgrade sslyze\nCollecting sslyze\n  Downloading SSLyze-1.4.1.tar.gz (1.0MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.0MB 407kB/s \nCollecting nassl<1.2.0,>=1.1.0 (from sslyze)\n  Could not find a version that satisfies the requirement nassl<1.2.0,>=1.1.0 (from sslyze) (from versions: 0.13.4.win32, 0.13.1, 0.13.2, 0.13.4, 0.13.5, 0.13.6, 0.13.7, 0.14.0, 0.14.1, 0.14.2, 0.15.0, 0.15.1, 0.16.0, 0.16.1, 0.16.2, 0.16.3, 0.17.0, 1.0.1, 1.0.2, 1.0.3)\nNo matching distribution found for nassl<1.2.0,>=1.1.0 (from sslyze)\npip version: pip 9.0.3 from /usr/local/lib/python3.6/site-packages (python 3.6)\nEdit: This seems to be related with #306. ",
    "uwe347": "same problem for me. I am using ubuntu 18.04 and installed:\nsudo apt install python-pip\npip install --upgrade setuptools\npip install --upgrade sslyze\n...with no warnings. The tailing lines of this installation were:\nSuccessfully built sslyze tls-parser pycparser\nInstalling collected packages: enum34, typing, nassl, pycparser, cffi, idna, asn1crypto, six, ipaddress, cryptography, tls-parser, sslyze\nSuccessfully installed asn1crypto-0.24.0 cffi-1.11.5 cryptography-2.2.2 enum34-1.1.6 idna-2.6 ipaddress-1.0.22 nassl-1.1.3 pycparser-2.18 six-1.11.0 sslyze-1.4.1 tls-parser-1.2.1 typing-3.6.4\nDon't know where to look for... Thanks for any hint!\n. Works fine now... Thanks!. ",
    "rishisingh05": "Thanks for fixing the issue!!. ",
    "swarooppatra": "I am also observing same issue. Below is snippet of output. Can I consider this as below ciphers are not accepted.\n\nSSLV2 Cipher Suites:\n      Server rejected all cipher suites.\n     Undefined - An unexpected error happened:\n        SSL_CK_RC4_128_WITH_MD5                           RuntimeError - A socket was already set\n        SSL_CK_RC4_128_EXPORT40_WITH_MD5                  RuntimeError - A socket was already set\n        SSL_CK_RC2_128_CBC_WITH_MD5                       RuntimeError - A socket was already set\n        SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5              RuntimeError - A socket was already set\n        SSL_CK_IDEA_128_CBC_WITH_MD5                      RuntimeError - A socket was already set\n        SSL_CK_DES_64_CBC_WITH_MD5                        RuntimeError - A socket was already set\n        SSL_CK_DES_192_EDE3_CBC_WITH_MD5                  RuntimeError - A socket was already set\n\nThanks,\nSwaroop. Thanks @jsf9k.. Thanks @nabla-c0d3 . Can you please let me know which version of sslyze will have this feature. I just updated to 1.4.3 and I see same error. Thanks for this tool.. ",
    "Glitched": "I'm also having this issue with the same versions. ",
    "stefanb": "Generally I have no problems with other homebrew packages. \nMaybe adding some path to $PATH here and there.... I have opened a ticket https://github.com/Homebrew/homebrew-core/issues/30489. As i understand the solution to #320 was to provide only available data instead of crashing, not really ensuring that the details could be provided.\nIs there really no way to define which OpenSSL version should be used and make sure that one is installed?\nI have chaos at the moment:\n$ brew search openssl\n==> Formulae\nglib-openssl                                                openssl@1.1 \u2714\nopenssl \u2714                                                   homebrew/portable-ruby/portable-openssl\n$ brew upgrade openssl\nError: openssl 1.0.2o_2 already installed\n$ brew upgrade openssl@1.1\nError: openssl@1.1 1.1.0h already installed\n$ which openssl\n/usr/bin/openssl\n$ openssl version\nLibreSSL 2.2.7\n:). This was fixed in scope of https://github.com/Homebrew/homebrew-core/issues/30489 via https://github.com/Homebrew/homebrew-core/pull/30794. ",
    "SMillerDev": "Your which openssl returns the system openssl, you could force the openssl homebrew keg to link and trying again. That should at least make openssl version return the last version.. ",
    "kjbeeman": "Just another user here who has been fighting this for the past hour or so. \nthere isn't a version of Nassl available for Python3.7.  1.0.3 is the latest version that Python3.7 will install. \nWork around for now: use python3.6\nI started looking into building Nassl for Python3.7, but my docker image was based on alpine and well, ran into other issues before I pulled ubuntu and python3.6 \nGood luck. . ",
    "lazorgator": "I am also experiencing this with Python 3.5.3 under PyPy.\nshell\n[latrans@canis ~]$ python3 --version\nPython 3.7.0\n[latrans@canis ~]$ pypy3 --version\nPython 3.5.3 (fdd60ed87e941677e8ea11acf9f1819466521bf2, Jun 22 2018, 02:39:05)\n[PyPy 6.0.0 with GCC 8.1.1 20180531]\n[latrans@canis ~]$ pypy3 -m venv .venv\n[latrans@canis ~]$ source .venv/bin/activate\n(.venv) [latrans@canis ~]$ python --version\nPython 3.5.3 (fdd60ed87e941677e8ea11acf9f1819466521bf2, Jun 22 2018, 02:39:05)\n[PyPy 6.0.0 with GCC 8.1.1 20180531]\n(.venv) [latrans@canis ~]$ pypy3 --version\nPython 3.5.3 (fdd60ed87e941677e8ea11acf9f1819466521bf2, Jun 22 2018, 02:39:05)\n[PyPy 6.0.0 with GCC 8.1.1 20180531]\n(.venv) [latrans@canis ~]$ pip install sslyze\nCollecting sslyze\n  Cache entry deserialization failed, entry ignored\n  Using cached https://files.pythonhosted.org/packages/53/67/c8dc163326a4cafc31e2b37a11090d6d98e4811b8820aac87452d82dd205/SSLyze-1.4.3.tar.gz\nCollecting nassl<1.2.0,>=1.1.0 (from sslyze)\n  Cache entry deserialization failed, entry ignored\n  Could not find a version that satisfies the requirement nassl<1.2.0,>=1.1.0 (from sslyze) (from versions: 0.13.4.win32, 0.13.1, 0.13.2, 0.13.4, 0.13.5, 0.13.6, 0.13.7, 0.14.0, 0.14.1, 0.14.2, 0.15.0, 0.15.1, 0.16.0, 0.16.1, 0.16.2, 0.16.3, 0.17.0, 1.0.1, 1.0.2, 1.0.3)\nNo matching distribution found for nassl<1.2.0,>=1.1.0 (from sslyze)\nYou are using pip version 9.0.1, however version 18.0 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n(.venv) [latrans@canis ~]$ pip install --upgrade pip\nCollecting pip\n  Using cached https://files.pythonhosted.org/packages/5f/25/e52d3f31441505a5f3af41213346e5b6c221c9e086a166f3703d2ddaf940/pip-18.0-py2.py3-none-any.whl\nInstalling collected packages: pip\n  Found existing installation: pip 9.0.1\n    Uninstalling pip-9.0.1:\n      Successfully uninstalled pip-9.0.1\nSuccessfully installed pip-18.0\n(.venv) [latrans@canis ~]$ pip install sslyze\nCollecting sslyze\n  Using cached https://files.pythonhosted.org/packages/53/67/c8dc163326a4cafc31e2b37a11090d6d98e4811b8820aac87452d82dd205/SSLyze-1.4.3.tar.gz\nCollecting nassl<1.2.0,>=1.1.0 (from sslyze)\n  Could not find a version that satisfies the requirement nassl<1.2.0,>=1.1.0 (from sslyze) (from versions: 0.13.4.win32, 0.13.1, 0.13.2, 0.13.4, 0.13.5, 0.13.6, 0.13.7, 0.14.0, 0.14.1, 0.14.2, 0.15.0, 0.15.1, 0.16.0, 0.16.1, 0.16.2, 0.16.3, 0.17.0, 1.0.1, 1.0.2, 1.0.3)\nNo matching distribution found for nassl<1.2.0,>=1.1.0 (from sslyze). ",
    "conorsch": "Fantastic, thanks for the update, @nabla-c0d3 !. ",
    "warburtron": "Any chance this issue can be re-evaluated? Code/JSON parsing is fine for a small number of scans, but when performing scans at a large scale the time taken to write and parse the file is considerable, and the extra disk space consumed is significant.. ",
    "faldridge": "I need this as well. Was the problem with both the C code and the Python usage of it?\nI ask because I'm interested in submitting a PR and was wondering if simply restoring the low-level Python extensions, and then using them in the new Python SSL client code would be a valid approach.. Thanks for the update! I'll try to work on this as I have time.. On latest master of sslyze, on MacOS (Darwin-17.7.0-x86_64-i386-64bit), I am experiencing the same problem.. Unfortunately this fix does not work for me on fully updated MacOS High Sierra. It fails differently now, though, so progress!  \ud83d\ude03 \nI received the error output captured below in my working copy, and was able to replicate the exact same behavior with a fresh clone of master into a clean directory.\n```bash\n[faldridge@faldridge sslyze-test-mac-fix (master)]$ pipenv install --dev\nCreating a virtualenv for this project...\nPipfile: /Users/faldridge/projects/security/sslyze-test-mac-fix/Pipfile\nUsing /Users/faldridge/.pyenv/versions/3.6.3/bin/python3.6m (3.6.3) to create virtualenv...\n\u280bRunning virtualenv with interpreter /Users/faldridge/.pyenv/versions/3.6.3/bin/python3.6m\nUsing base prefix '/Users/faldridge/.pyenv/versions/3.6.3'\nNew python executable in /Users/faldridge/.virtualenvs/sslyze-test-mac-fix-obAXc8Hp/bin/python3.6m\nAlso creating executable in /Users/faldridge/.virtualenvs/sslyze-test-mac-fix-obAXc8Hp/bin/python\nInstalling setuptools, pip, wheel...done.\nSetting project for sslyze-test-mac-fix-obAXc8Hp to /Users/faldridge/projects/security/sslyze-test-mac-fix\nVirtualenv location: /Users/faldridge/.virtualenvs/sslyze-test-mac-fix-obAXc8Hp\nInstalling dependencies from Pipfile.lock (88aac1)...\nAn error occurred while installing nassl==2.1.1! Will try again.\nIgnoring colorama: markers 'sys_platform == \"win32\"' don't match your environment\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 49/49 \u2014 00:00:12\nInstalling initially failed dependencies...\nCollecting nassl==2.1.1 \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 0/1 \u2014 00:00:00\n  Using cached https://files.pythonhosted.org/packages/37/a4/c0fc842291a0784f950b557e5d5c24921dce56bdfc64a64781967d96f661/nassl-2.1.1-cp36-cp36m-macosx_10_13_x86_64.whl\nTHESE PACKAGES DO NOT MATCH THE HASHES FROM Pipfile.lock!. If you have updated the package versions, please update the hashes. Otherwise, examine the package contents carefully; someone may have tampered with them.\n    nassl==2.1.1 from https://files.pythonhosted.org/packages/37/a4/c0fc842291a0784f950b557e5d5c24921dce56bdfc64a64781967d96f661/nassl-2.1.1-cp36-cp36m-macosx_10_13_x86_64.whl#sha256=54f80cd9f8a3fdf248ebf42d9fbe6077fa3f5504b0057075f24f24e2fd9b12a7 (from -r /var/folders/n1/7fmdft1d3q1brfzzyv7p_vvrm4xtjn/T/pipenv-ka7bvo8f-requirements/pipenv-ifdgeouu-requirement.txt (line 1)):\n        Expected sha256 02c769a0f11f1fddd397ee3cc51d8d5bafa673c00f2d90d250b201ff14e08ed6\n        Expected     or 169c26a4c97d97b9139664425273d3e3cbb94ca891b0efe09f659bb52a2376a8\n        Expected     or 5d3ce1369a4fa4c19d1aeebbfae58681a20a4be4eb86fed91530cd893514747a\n        Expected     or 6322f04444f029913536f2ba6546e917b9e950dd27537310398d614b0d3c4537\n        Expected     or d271a3bc3dbb66e57a5b320481e9ea5bfd3022ad272c5c07786abd6e2266751b\n        Expected     or ebac22f37e96e1862d29b42aae2e9932bdb5461462463a60f53b8a8b7e7a4854\n             Got        54f80cd9f8a3fdf248ebf42d9fbe6077fa3f5504b0057075f24f24e2fd9b12a7\n\u2624  \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 0/1 \u2014\n```. I have a PR with a green build up for this, #339, but I haven't been able to get any feedback on it.. My apologies for the failing test; it is skipped on my platform (Darwin-17.7.0-x86_64-i386-64bit). I will try running the development environment in a container to debug the issue.. @nabla-c0d3 : I fixed the bug in my change, and added an additional convenience Dockerfile for testing on 64-bit Linux platforms. Please let me know if you need anything further from me on this!. And the build is broken again after rebasing latest changes onto upstream/master, but the failing test seems to be unrelated to my changes.\nAlso, I cannot reproduce the new failure locally on OS X or inside the Linux container. I am currently trying to determine what is different between my platforms and the Travis CI environment.\nUpdate 2018-10-09:\nAs part of debugging this CI-only failure, I re-ran the tests, and a different unrelated test that uses the network failed this time. The error was an inability to reach www.google.com, which may indicate a networking issue on the Travis agent:\npython\nE           sslyze.server_connectivity_tester.ServerNotReachableError: <ServerNotReachableError: server=(www.google.com, 108.177.112.147, 443), error=\"Could not connect (timeout)\">. I believe there was a bug (?) on line 302, where the modern_supported_cipher_count was reset back to 0 with every iteration, so that the modern client would never be used. The new code does invoke the modern client as needed, so there are some additional changes below around handling new corner cases.. ",
    "SQ-SEN": "A fix for this would be really appreciated. Currently I have to run all tests twice - with 1.4.1 and 2.0.1. A lot of setups have issues with DH param strength.... ",
    "circa10a": "@nabla-c0d3 Don't forget to setup the automated build on docker hub! \ud83d\ude04 . @nabla-c0d3 \nHere's a reference: https://docs.docker.com/docker-hub/builds/#link-to-a-hosted-repository-service\nBasically just need to create an account on docker hub and point to the sslyze github repo. ",
    "bknowles": "I'm running on macOS Sierra 10.12.6.. @scovetta --\nIf the documentation says that it has been tested on Sierra (10.12), then I would expect it to actually work on Sierra.\nIf the code has been updated and no longer works on Sierra, then I would think that the documentation needs to be updated to reflect that fact.\nThanks!. ",
    "scovetta": "Also, I noticed that the README.md implies that this should work on Windows.\n\nSSLyze has been tested on the following platforms: Windows 10 (32 and 64 bits), Debian 7 (32 and 64 bits), macOS Sierra.\n\nIt fails the same way on Windows 10 / Python 3.6.5:\nPS C:\\test> pip install --upgrade sslyze\nCollecting sslyze\n  Downloading https://files.pythonhosted.org/packages/08/db/7f5e3aaefd126318e41717fa4f72bbb2fdb6b5563413b7ff56002b58e59a/sslyze-2.0.0.tar.gz (1.1MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.1MB 4.3MB/s\nCollecting nassl<2.2.0,>=2.1.0 (from sslyze)\n  Could not find a version that satisfies the requirement nassl<2.2.0,>=2.1.0 (from sslyze) (from versions: 0.13.4.win32, 0.13.1, 0.13.2, 0.13.4, 0.13.5, 0.13.6, 0.13.7, 0.14.0, 0.14.1, 0.14.2, 0.15.0, 0.15.1, 0.16.0, 0.16.1, 0.16.2, 0.16.3, 0.17.0, 1.0.1, 1.0.2, 1.0.3, 1.1.0, 1.1.3)\nNo matching distribution found for nassl<2.2.0,>=2.1.0 (from sslyze). ",
    "ahrib": "\n@scovetta Windows is now supported again (but with Python 64 bits only).\nAwesome work! Confirming OK for me using Python 3.7 64 bit.. \n",
    "lanmaster53": "Fully updated MacOS High Sierra.. Also on Ubuntu 16.04 with fully upgraded Python3.6 and pip3.\n$ pip3 install --upgrade sslyze --no-cache-dir\nCollecting sslyze\n  Downloading https://files.pythonhosted.org/packages/15/d0/680d28e132e297e20869d736be5c41b79aec1798c41ac22afbf7283fb152/sslyze-2.0.1.tar.gz (1.1MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.1MB 2.0MB/s \nCollecting nassl<2.2.0,>=2.1.0 (from sslyze)\n  Could not find a version that satisfies the requirement nassl<2.2.0,>=2.1.0 (from sslyze) (from versions: 0.13.4.win32, 0.13.1, 0.13.2, 0.13.4, 0.13.5, 0.13.6, 0.13.7, 0.14.0, 0.14.1, 0.14.2, 0.15.0, 0.15.1, 0.16.0, 0.16.1, 0.16.2, 0.16.3, 0.17.0, 1.0.1, 1.0.2, 1.0.3, 1.1.0, 1.1.2, 1.1.3)\nNo matching distribution found for nassl<2.2.0,>=2.1.0 (from sslyze). ",
    "Jacopo": "I have some C code that does this, would sslyze be open to integrating it?. ",
    "andresriancho": "Ah, you're correct. Thanks!. ",
    "joyride9999": "not sure i can do that, it's a work related machine. \nBut the country oid field is set to net, and searching for more info i found this :\nhttps://www.digicert.com/ssl-certificate-country-codes.htm\nhere at the end of the listing there are some 3 letters codes .\nCOM US Commercial\nEDU US Educational\nGOV US Government\nINT International\nMIL US Military\nNET Network\nORG Non-Profit Organization\nARPA Old style Arpanet. ",
    "dfundingsland": "@nabla-c0d3 You're welcome!. ",
    "weddige": "eTLS does not need to be implemented in the browser. From the point of view of the browser eTLS is 100% compatible to TLS 1.3.\nBut I agree with you to the extent that I don't expect it to be widespread in the near future either. However, it would be nice not to overlook the fact that a server supports eTLS.. ",
    "wondex": "Hi,\nNice that this issue could be reproduced.\nIs there any roadmap to solve this issue? \nBest regards. ",
    "lordmulder": "Thanks!. "
}