{
    "coreyti": "Hi Remy,\nThanks for the comment.\nAs an aside (sort of), I'm not actually the author of Showdown.  I simply found it a while back and wanted to see it on GitHub.  Your comment, and a recent message, alerted me to the fact that I was unintentionally representing myself as such (the author).\nPlease see my updated README for more clarification.\nThat said, as you pointed out, developers are forking and improving Showdown on GitHub. I will try to be an active maintainer the GitHub-hosted version.\nCheers,\nCorey\n. Hi again,\nPulled in remy's changes and applied his heading #id extension to Setext-style headings as well.\nCheers,\nCorey\n. Hi Rui,\nApologies for the delay.  I'll look around to see if I can pull your changes in from another fork.\nCheers,\nCorey\n. Hi,\nApologies for the delay.\nI looks to me like wmd actually added the Attacklab namespace (I did not remove it).  My suggestion for now:\n// in application code, map the two:\nAttacklab.showdown = Showdown;\nLet me know how this goes.  I'd be happy to revisit this more.\n. merged and add kkaefer as contributor (thanks).\n. Hi, should be all set now.  If you could give it a test, that'd be great.  Thanks for the help.\n. have updated the README with a link to the wayback machine for attacklab.\n. deepest apologies for the long delay. i was hoping to pull in a nice test suite, like those at https://github.com/chjj/marked and https://github.com/evilstreak/markdown-js, but can't find the time just yet.\ni've manually pulled in the changes from @CatChen, as the patch include DOS-style carriage returns on every line.\n. deepest apologies for the long delay. i was hoping to pull in a nice test suite, like those at https://github.com/chjj/marked and https://github.com/evilstreak/markdown-js, but can't find the time just yet.\n. deepest apologies for the long delay.  i was hoping to pull in a nice test suite, like those at https://github.com/chjj/marked and https://github.com/evilstreak/markdown-js, but can't find the time just yet.\n. @waynew, apologies for the delay.  if you've found a solution, please do let me know.\n. @tstone's test has been pulled in. looks like we're all good here :)\n. @focusaurus, apologies for the delay.  i'm finally getting around to resolving pull requests and such.  if you have the time and inclination to look into a fix for the issue, please do.  otherwise, i'll try to take a look when i can.\n. @roberocity apologies for the delay on reviewing this.\ni'm unsure about the idea of including twitter-specific autolinking.  for example, if github were to use showdown for this textarea, they'd want the handles to go to github accounts.  thoughts?\n. @tstone i like that suggestion a lot.  i imagine the extensions could still \"ship\" with showdown core, but not be enabled without the explicit config.  also, i'm thinking the following signature would be nice, allowing for other config options:\njavascript\nnew showdown.converter({ extensions : [showdown.twitter] });\nthoughts?\n. hi. just a quick note to say that i've been swamped lately, but hope to look at this soon.\n. hey @roberocity, @tstone, and all.  sorry for the (gross) delay.  i just now finally merged the pull request for @tstone's extension mechanism. that pull includes the twitter extensions, so take a look.\n. @rahulsom, with this commit I've added a \"stub\" of a github-flavored extension, based on the extension mechanism added by @tstone. so far, it handles the ~~strike~~, and nothing else, but give it a try.\n. @tstone thanks!  trying that out now.\n. @tstone pull completed and published version 0.2.0\nthanks so much for you awesome contributions!\n. @tstone working on publishing the update now.\n. @tstone just published 0.1.0 to npm.  if you could give it a try and let me know how it goes, that would be great.\nwill take a look now out your other pull request... love that you've added mocha coverage!  i'll let you know if i have any trouble.\n. 0.2.0 released with addition fixes from @tstone.\n. closed with this pull request.  thanks for the awesome work, @tstone!\n. hi.  @tstone, thanks for driving here.  i've been swamped lately, but if there's more to follow up on, let me know and i'll try to do so soon.\n. ah, I forgot about the link in the header.  thx!\n. hi. just a quick note to say that i've been swamped lately, but hope to look at this soon.\n. hi @abackstrom and @joemccann, I've merged in the pull request with the fix for this.  Give it a try.  And, thanks!\n. hi. just a quick note to say that i've been swamped lately, but hope to look at this soon.\n. hi. just a quick note to say that i've been swamped lately, but hope to look at this soon.\n. I agree that it's time to allow showdown to evolve further and be unshackled from legacy requirements.  Am definitely a fan of stacked, focused commits\u2026 thanks!\nRelated: I think it would be nice to move some of the legacy stuff (examples, Perl) into an \"archive\", perhaps simply a \"docs/archive\" or \"docs/legacy\" directory. Also, I'm a fan of spaces over hard tabs.  Thoughts on a \"whitespace-only\" commit?  \n\nCorey Innis\nOn Friday, November 2, 2012 at 5:27 AM, Pascal Desch\u00eanes wrote:\n\nI agree that the base code could benefit some love. @coreyti (https://github.com/coreyti) I understand that the original author intendant to keep the ability to do diff between javascript and perl but I would favor to depart from this requirement.\nI'll try to bring in @andrewluetgers (https://github.com/andrewluetgers) 's modif along with some other refactoring that I think would render the code as much readable, maintainable and faster. I could possibly do stacked modif so you can clearly see the changes.\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/coreyti/showdown/issues/31#issuecomment-10012724).\n. Hi @norzechowicz, I've just updated showdown with a newly generated compressed version, including a bunch of improvements and bugfixes. For now, it's still compressed with uglifyjs. Give it a try.\n. @cwalker107, I'd like to consider your contribution. Unfortunately, your pull request appears to contain a large number of whitespace changes and may, additionally, be based on a slightly out-of-date (since I just merged some other pull requests) version of showdown.js\n\nSorry to be a pain but, if you would reproduce your changes based on the latests (and be sure to maintain tabs instead of spaces), that would be great.\nThanks!\n. Hi @brianherbert, thanks for the heads-up.\n1. I've corrected the README per your catch.\n2. I suspect you were testing in a browser that does not support Array.forEach (e.g., IE8).  I've updated showdown to use the forEach helper it defines and think that should resolve the issue for you.\nPlease take a look and let me know how it goes.\n. @pdeschen, awesome! thanks!\n. @pdeschen, thanks for the input... love your enthusiasm.  I'll start the process of moving things to an organization this weekend and we can take it from there.\n. Hi all,\nApologies for the fact that I have been unable to keep up with maintaining Showdown.  I've moved the project to a Github organization here and am looking for maintainers to take over the project.  Please see this issue to express interest or comment on this change.\n. Hi all,\nApologies for the fact that I have been unable to keep up with maintaining Showdown.  I've moved the project to a Github organization here and am looking for maintainers to take over the project.  Please see this issue to express interest or comment on this change.\n. Hi all,\nApologies for the fact that I have been unable to keep up with maintaining Showdown.  I've moved the project to a Github organization here and am looking for maintainers to take over the project.  Please see this issue to express interest or comment on this change.\n. @pdeschen great!   Sorry for the long delay... I've added you to the organization's owners.\n. Hi @sirakoff, thanks for raising your hand.  I'm glad to hear of your interest.  I feel somewhat inclined to see if any of the other previous contributors, such as @tstone and @remy, would want to form the initial core.  @pdeschen, thoughts?\n. @tivie just added you.\n. ",
    "kkaefer": "Perfect, thanks!\n. ",
    "Potherca": "An example is available at http://www.showdown.im/ although, at second glance, not connected to \nJohn Fraser/Attack Lab.\n. ",
    "zachwill": "+1\nI'm now using this fork for Markdrop, and haven't run into any problems.\n. ",
    "rogerbraun": "Any chance of getting this merged? It's okay if it won't, but it would be good to know.\n. I don't want to get pushy, but if there is no reaction I have to assume that this repo is not maintained any longer. That would not be a problem, but if this was the case I would maintain a fork myself.\n. ",
    "omarkhan": "+1\n. ",
    "hoffmann": "+1\n. ",
    "focusaurus": "+1\n. ",
    "jameswyse": "Looks good, though it doesn't seem to be stripping HTML characters like '<' to <, '>' to >, '&' to &, etc for html code examples like _DoCodeBlocks() does.\nIt should be like this:\n<h1>Example</h1> = <code>&lt;h1&gt;Example&lt;/h1&gt;</code>\nHowever it renders as:\n<code><h1>Example</h1></code>\n. ",
    "neersighted": "Fixed on my fork\n. This project hasn't been maintained in a year, I (shamelessly) suggest looking at my fork, showdown2.\n. http://github.com/neersighted/showdown2\nYou can open the pull there. wink\n. @ferentchak What link is that? Is it the link to AttackLab? If so, it's meant to be broken, that was the original author's site, but it is now down.\n. Cross fit? Can you please post the link? I am quite confused.\nOn Fri, Jul 27, 2012 at 11:37 AM, Charles Ferentchak <\nreply@reply.github.com\n\nwrote:\nAs long as you know. I was trying to figure out how the code in your site\nrelated to that cross-fit page.\nCheers,\nCharles\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/coreyti/showdown/issues/27#issuecomment-7312850\n. Yeah, that's the AttackLab one. It's been down for a year or two now (it's\nthe original author's site).\n\nOn Fri, Jul 27, 2012 at 12:15 PM, Charles Ferentchak <\nreply@reply.github.com\n\nwrote:\n\nThe link in the header not the readme. :)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/coreyti/showdown/issues/27#issuecomment-7313733\n. \n",
    "waynew": "Well, apparently I'm wrong - that completely hoses that formatting. I'll let you know if I find a solution.\n. ",
    "roberocity": "Not a problem, I take a look. I didn't pay attention to the date. Should have. huh?\n. Where is the fork showdown2?\n. @tstone I'm all for the extension idea. Very flexible for both the markdown enhancements/additions and the output modification type as well. \n@coreyti While I originally proposed adding the code directly to the core, that may not be the right idea. The \"Second\" point in @tstone post might be the better solution. Adding it directly to the core - just not enabled by default - just adds additional code to the core. Having a build process - maybe even how Twitter's Bootstrap or jQuery builders work. Check what features you want and download a .js with just that content. \n. ",
    "tstone": "@coreyti agreed that it shouldn't be part of showdown core.  At the same time there clearly needs to be a way to do this.  I've been thinking about some kind of \"syntax extender\" plugin model.  What if the converter took a list of syntax extenders?  Here's some conceptual code:\n``` javascript\n// Syntax extension, somewhere\nvar twitter = function(convertor) {\n    return [\n        // Match @user names\n        { '\\b(?!\\)@([\\S]+)\\b': function(match){\n            return '' + match[0] + '';\n        }},\n        // Escaped @ signs\n        {'\\@': function(match) {\n            return '@';\n        }}\n    ];\n};\nvar showdown = new Showdown();\nvar convertor = new showdown.converter([twitter]);\nvar html = convertor.makeHtml('Hello @andstuff');\n// html === 'Hello @andstuff'\n```\nA syntax extender returns an array of tuples, where the key of the tuple is a regular expression string, and the function is a callback whenever that expression is found.\nAs an aside with a setup like this, things like github markdown extensions could be moved to a separate syntax extension for those who wanted it.  Those who don't could leave it out.\n. I've been thinking about this more since I suggested it a few days ago and some of the bug fixes gave me a better idea of what might be needed.\nFirst, there are likely two types of extensions:\n- Ones which extend the markdown syntax (language extension)\n- Ones which manipulate the HTML after rendering (output modification)\nDepending on which type of extension is being built, it would need to be specified by the extension somewhere because of the way showdown is written.  This was actually the bug behind why HTML wasn't being encoded when inside of a github style codeblock Reference: commit;.  As such, the type of extension will influence where showdown executes it.\nAs an example of the difference, a language extension would be adding strikethrough support (ie. ~~st~~).  An extension that manipulates HTML might be one which adds Google Prettify hints (ie. <pre><code> to <pre class=\"prettify\" tabIndex=\"0\"><code>).\nSecond, it would probably be nice to at some point have a build process where the extensions themselves are contained within the showdown repository, but users can opt to do a custom build which includes only the extensions they want.  Something like...\n$ jake build[github,twitte]\nWhich would result in showdown.custom.min.js bundling only the github and twitter but not, for example, include the strikethrough or facebook extensions..\nThird I think your idea about calling out extensions as a key of an object is probably a smart idea, future thinking.\nThe next step in this is probably to formalize the syntax for how an extension is defined.  My simple version above didn't account for the two types of extensions.  I'll create a new issue for that instead of having the design conversation in this ticket.\n. This is actually part of github's markdown syntax extensions.  I'm not sure if showdown is supporting all of those.\n. I made a suggestion to coreyti about how we could implement syntax extensions for showdown that could be chosen/loaded by the user but still be outside of showdown core.  This would be a great use of such a system.  If he/she responds to my pull request w/ fixes I'll look into implementing something like this.\n. Scratch that.  I was missing a line return in my nested block.  This is in fact working.\n. Corey,\nYou probably saw the mega pull request I did a few days ago.  In addition\nto the handful of fixes there was also the new mocha testing framework.  I\nrealize this is kind of a big thing to drop on a project if it wasn't there\nrecently.  If you'd like, I'd be available next week to do a Skype screen\nsharing section in which I could walk you through how it's setup and show\nsome of the benefits it'll add to the project.\nAlso, I saw you were using Uglify for compressing the the final minified\nversion of showdown.  I could also setup a Jakefile for building that with\nuglify automatically.  What that would look like is...\n$ jake build\nAnd /src/showdown-min.js would automatically appear.\nLet me know.\n-Titus.\nOn Fri, Jun 15, 2012 at 11:51 AM, Corey Innis <\nreply@reply.github.com\n\nwrote:\n@tstone working on publishing the update now.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/coreyti/showdown/issues/19#issuecomment-6362518\n. Here is a first pass.  Why the different syntax's?  I think different types of extensions will need different ways to do things.  Some people just want to have a simple regex/replace and other extensions will need to do a whole ton of weird stuff themselves.\n\nRegex / Replace Syntax\nvar pattern = new RegExp('\\b~~([\\s\\S]*?)~~\\b', 'g');\nvar myextension = function(converter) {\n    return [\n        { type: 'language', regex: pattern, replace: '<strike>$1</strike>' }\n    ];\n};\nRegex(string, assumed global) / Replace Syntax\nvar myextension = function(convertor) {\n    return [\n        { type: 'language', regex: '\\b~~([\\s\\S]*?)~~\\b', replace: '<strike>$1</strike>' }\n    ];\n};\nRegex/Function Syntax\nvar myextension = function(convertor) {\n    return [\n        { type: 'language', regex: '\\b~~([\\s\\S]*?)~~\\b', replace: function(match){ \n           return '<strike>' + match[1] + '</strike>';\n        }}\n    ];\n};\nCallback Syntax\nvar myextension = function(convertor) {\n    return [\n        { type: 'language', filter: function(source){ \n           return source.replace(/\\b~~([\\s\\S]*?)~~\\b/g, '<strike>$1</strike>');\n        }}\n    ];\n};\n. I should mention, the syntax I'm writing it in right now is a bit ugly as-is.  With some boilerplate it could be cleaned up to be more readable.  ie...\n```\nvar italics = function(converter) {\nvar underscoreFormat = new RegExp('(?:^|\\b)__([\\\\s\\\\S]*?)__(?:\\b|$)'),\n    asteriskFormat = new RegExp('(?:^|\\b)\\\\*([^\\\\*]+)\\\\*(?:\\b|$)'),\n    _ = function(regex) {\n        return { regex: regex, replace: '<em>$1</em>', type: 'language' };\n    };\n\n// Return extensions\nreturn [\n    _(underscoreFormat),    // __foo__   -> <em>foo</em>\n    _(asteriskFormat)       // *foo*     -> <em>foo</em>\n];\n\n};\nif (typeof module !== 'undefined') { module.exports = myextension; }\n```\n. Do you have an example of a given input and what output it should produce?\n. I created a test case for your example and the current version of showdown in trunk looks to already be producing the output.\n. ",
    "rahulsom": "Reddit uses them too. Double tilde is a popular thing. Is it possible to write extensions using a json config? Or planned?\n. Thanks!\n. ",
    "kevinschaul": "Sure, here's an example:\ncode:\ncode can go here\nthis is rendered on a second line\nrendered:\ncode can go here\nthis is rendered on a second line\n. Hmm, yes it does. We'll, I'll close. I was using a plugin that uses showdown for its rendering engine, and the devs there said it was out of their control. I'll circle back to them. Thanks.\n. ",
    "ferentchak": "As long as you know. I was trying to figure out how the code in your site related to that cross-fit page.\nCheers,\nCharles\n. \nThe link in the header not the readme. :)\n. ",
    "joemccann": "Yeah this is the same issue here with github.com/joemccann/dillinger\nhttps://github.com/joemccann/dillinger/issues/25\n. ",
    "pdeschen": "I agree that the base code could benefit some love. @coreyti I understand that the original author intendant to keep the ability to do diff between javascript and perl but I would favor to depart from this requirement.\nI'll try to bring in @andrewluetgers 's modif along with some other refactoring that I think would render the code as much readable, maintainable and faster. I could possibly do stacked modif so you can clearly see the changes. \nThoughts?\n. Im all in.\n\nRelated: I think it would be nice to move some of the legacy stuff (examples, Perl) into an \"archive\", perhaps \nsimply a \"docs/archive\" or \"docs/legacy\" directory.\n\nTo be frank, .doc/.archive/.deep/.down would be nice as well ;-)\n\nAlso, I'm a fan of spaces over hard tabs.  Thoughts on a\n\"whitespace-only\" commit?\n\nI'm definitely in for whitespace-only.\n. @coreyti Nice to see you leading on this!\n+1 for showdownjs organization\n+1 for legacy branch (readme could mention that original is available under such branch)\nOther than that \n- coding standard (sic!) could be enforced through linting (within grunt) including spacing, and such\n- if refactoring endup changing the API, delegation should be provided (for some time at least) so that existing code isn't broken in the process.\n- once a core repo is in place, should extensions be in their own repo and made available through submodules? (maybe to much complexity for not much).\nMaybe I'm pushing a bit to far ahead but:\n- what about a micro web site (like http://handlebarsjs.com/ for instance) simply via gh-pages?\n- logo? (any designer in this community?)\nI really think showdown can surf the markdown wave! :-)\n. Excellent! Keep us posted.\n. I don't think this is a bug. Markdown syntax do not support html entities. Otherwise we would end up with so many corner cases. Unless I'm missing something...\n. Am I correct in saying that this would produce the equivalent html output? This is already documented in divergences\n. Ok invalid for now then.\n. Support for issue and PR would be nice as well :-)\n. That would make a nice addition. options could follow some namespace within the options hash such as \n{\n  extension1: {\n    optionA: 'foo',\n    optionB: 'bar'\n  }\n  ...\n}\n. This is definitely not the responsibility of a converter to protect against XSS. I would defer to using a XSS filter on showdown output. See https://github.com/leizongmin/js-xss.\nThat being said, I think we should add a note about XSS aspects.\n. Best way to handle this would be to have a showdown-xss output type extension dealing with such matter. Anyone up to the task? I've added a reference in Contributing wiki page.\nClosing for now.\n. @markgeraty nice! you should add unit test and bower support eventually, with a dep over xss (which is already available within bower)\n. We're slowly migrating most of documentation bits out of the readme file into the project wiki.\nWe'll also try to better support code documentation through jsdoc in a near future.\n. @SyntaxRules done. \nEventually, we should create a yeoman generator for extensions :-) There's much boilerplate that could be leveraged.\n. @mehulkar as a phoenix, with hard work from @tivie ! \n. @mehulkar thanks for pointing that out. We'll be adding test cases before publish so no worry we'll catch this. \ncc @SyntaxRules \n. @nicovalencia I think duplicate headers should be allowed and is all fine. What if I have something like\n```\nChapter 1\nIntroduction\n...\nChapter 2\nIntroduction\n...\n```\nNow you're idea about using a suffix counter is an interesting workaround. As an addition: would it make sense to add the original section title as a class (for invariable styling)?\n. Would need own repo.\n. Indeed. That would be cleaner. But not a big deal as it simply covers both browser and node this way.\n. We're now back accepting PR. Feel free to send over. Otherwise, I'll just redo. Let us know.\n. This has already been fixed in commit 387978acf8734469d82cf802236265486bd92ada\n. @zachad thanks for posting the work around!\n. I thought meteor-markdown was actually using showdown underneath?\n. That's interesting. Not clear how the dep over fa and glyphicon is handled. Adding test case would be nice.\n@tivie what do you about adding a wiki page to list extensions? We could link to it from the readme and move extension related details in there. \n. @dbtek as you see fit. We'll create a section in the extensions wiki for a list of available extension including yours.\n. Done. Added to Extensions wiki\nupdate: link\n. Closing\n. fixed by 387978acf8734469d82cf802236265486bd92ada\n. @tonylampada John Fraser is the original contributor for the perl version. Why would you need his email?\n. Indeed you're right. Got confused. But it seems he's been out of the loop for a long time. @coreyti has taken over for some time. \n. @coreyti now that repo as been moved to organization, I'm in!\n. @tivie would you mind opening a PR? I'll give it a shot at reviewing\n. @tivie @all maybe it's time we open a google group for general discussion (both dev and user)?\n. fixes #102\n. I would suggest renaming nodedown.js to cli.js and then add the following package details \n\"bin\": {\n        \"showdown\": \"src/cli.js\"\n    }\nSupport for stdin/stdout pipe and help would be nice as well. node cli is a nice module helper for this kind of stuff.\n. @rain1024 you may follow the cookbook about writing extensions\nhttps://github.com/showdownjs/showdown/wiki/extensions\nMathjax would be a nice addition!\n. @GlassGhost I understand you're impatient of getting this working but bumping after less than one day is a bit rude. Anyhow, I've manage to get this working but it is clearly far from perfect:\nhttp://jsfiddle.net/uauct8vy/16/\nSome work is required to get this extension fully in.\n. Would you mind having your extension into its own showdown-mathjax repo? We're in the process of extracting all extensions into their own repository and would like the community to do so as well. Have a look at twitter extension for inspiration.\n. @GlassGhost you may create your own repo within your user space. Then we'll add a reference to it within the wiki section\n. @SyntaxRules On one hand, I would be tempted to leave this aside as a self-protective reaction to the way @GlassGhost rudely behave regarding support for this. On the other hand, mathjax is really a nice use case for extensions. @tivie Thoughts?\n. Nice\n. @ErisDS I like your idea of strict mode. Or maybe quirks would be more appropriate. But then again, which of the rendering is the quirk one? :smile: \n. @tivie as it is not a breaking change addition, maybe it could be part of core?\n. Disabling would be a nice addition. What about an id prefix as well? Something like 'showdown-' or  'sdn-' \n. Related to #145 which is related to #82. Should be fixed once merged.\n. @johnjelinek do you have suggestion regarding the documentation setup that we could improve in order for people like you to easily spot extensions besides our wiki page\n. @JonathanHayward Hum interesting. You just cut us in the middle of our release, where we have component that haven't been updated completed and hence the out of sync issue you're facing. Hang in tight, we'll resolve those bumps shortly.\nNew instance from 1.x are now using the following construction\nvar converter = new showdown.Converter();\nThat being said, I thought we were backward compatible in terms of API. @tivie ?\n. @tivie Right forget about those bits. I just added a link to the changelog into the Help section of the website. Key here was to at least have the code sample in the \"Use It\" section to be valid. My bad!\n. thanks @Kriegslustig . Done. Can you also add a link from your readme to this repo?\n. ",
    "someshinyobject": "Corey,\nNot a problem. I think my text editor converted all tabs to spaces automatically.\nOn Oct 31, 2012, at 5:31 PM, Corey Innis notifications@github.com wrote:\n@cwalker107, I'd like to consider your contribution. Unfortunately, your pull request appears to contain a large number of whitespace changes and may, additionally, be based on a slightly out-of-date (since I just merged some other pull requests) version of showdown.js\nSorry to be a pain but, if you would reproduce your changes based on the latests (and be sure to maintain tabs instead of spaces), that would be great.\nThanks!\n\u0081\\\nReply to this email directly or view it on GitHub.\n. ",
    "tivie": "It is supposed to work like this. markdown is space sensitive. I've tested your function and breaks a number of tests.\n. https://github.com/showdownjs/showdown/commit/eae5f0e01fd086cfee87de5a547fcd057f59a460\n. @pdeschen Yes, it is documented\n. Fixed in 24716d3520089ce88127ace39d55d8b217a89512\n. Fixed on https://github.com/showdownjs/showdown/commit/053288f2feb6b1db36044b212bb24294fb305df1\n. Should be fixed in https://github.com/showdownjs/showdown/commit/eae5f0e01fd086cfee87de5a547fcd057f59a460\n. Also check the wiki article about this issue. Fixed in 24716d3520089ce88127ace39d55d8b217a89512\n. fixed on https://github.com/showdownjs/showdown/commit/053288f2feb6b1db36044b212bb24294fb305df1\n. Fixed in https://github.com/showdownjs/prettify-extension/issues/2\n. I'm currently looking into this. Showdown will have a major rewriting as keeping up with the perl version doesn't make much sense now. Since we'll probably move each\nextension to its own repository, there will be no reason to call fs.\nRegardless, the ideal way to approach the problem is abstracting the\nlibrary from the platform it's running on, in a similar fashion to\nunderscore.js method. This will make it compatible with node and browser\nout of the box and, consequently, compatible with browserify. It will also\nbe easier to make the lib compatible with AMD and commonjs.\n. fixed in eae5f0e\n. fixed on https://github.com/showdownjs/showdown/commit/053288f2feb6b1db36044b212bb24294fb305df1\n. https://github.com/showdownjs/showdown/issues/50\n. fixed in eae5f0e\n. This is a necro issue, but I got the time to play around with showdown and XSS.\nIn short, my conclusion is that you can't really prevent XSS attacks with markdown and claiming to do so will probably give some sense of false security, which is worse.\nThe 2 rules of thumb are: \n- filter for XSS after Showdown has processed any input, not before\n- preferably server side, not client side\nThis excellent post by Michael Fortin provices more in-depth explanation\n. @JakobKallin I agree. The problem is assuring that by URL encoding, well, URLs, we won't break the parser. I will look into it.\n. Feature added in 33f64f60c94c561776c848c375fa49b19d6c3883\nThe new extension mechanism passes the full options object to extensions. So you can do something like this:\njs\nvar options = { \n    extensions: [mine],\n    condition: 'a'\n },\n    converter = new showdown.Converter(options);\nand retrieve conditions: a from within the extension\n. Can you provide a markdown example where this bug happens?\n. This was fixed in https://github.com/showdownjs/showdown/commit/fd9bb36583104ab3e5104db7d101a5b96d93cede (also see https://github.com/showdownjs/showdown/pull/147)\n. Fixex at eae5f0e\n. Should be fixed with the new extension loading mechanism. \n. 24716d3520089ce88127ace39d55d8b217a89512\n. Fixed on https://github.com/showdownjs/showdown/commit/053288f2feb6b1db36044b212bb24294fb305df1\n. Hello. The perl src code has been removed from the repository in the new versions.\n. Fixed at eae5f0e\n. Added this feature in  b84ac67\nTo set the header level start to 3 (<h3>) just pass it as an option. Example:\njs\nvar conv = new showdown.Converter({headerLevelStart: 3})\n. @tgienger @jorilallo Maybe some simple xss prevention is a good idea.  A couple of approaches come to mind:\n1. Adding some basic XSS escaping that you can activate through options. This can run after the conversions are done and over the produced HTML. We could also provide a way to change the XSS escaping function so that users can run more sophisticated algorithms.\n2. Providing a simple hook system that enables you to switch in place a determined sub converter.\n3. Adding a pre parser that cleans the input directly.\nHowever, I'm a bit averse to add this kind of protection into the core converters because:\n- I don't think it's the job of a converter/parser. A converter's output should match the input as closely as possible.\n- This puts the extra burden of assuring security into the library, something I don't feel confident (or competent) enough to do.\n- This does not prevent XSS attacks if showdown is used as a client-side rich text editor (nothing prevents me from inspecting and altering the library in such way that input is no longer escaped).\n  - This can lead to a false sense of security\n- Also, since markdown allows embeded html tags, Showdown would need to start parsing and escaping those too.\n- npm has a great many number of security libraries and filters that deal with this kind of issues. Those can be run on Showdown output (which is pure html)\nOpinions and feedback are welcome.\n. @markgeraty Awesome! Kudos!\n. For more information, please see the wiki page about Markdown's XSS Vulnerability and how to mitigate it\n. You're right, the documentation is a bit sparse. We're restructuring the code and some breaking changes will be introduced so the documentation will need to be changed accordingly.\n. @pdeschen Documentation is getting a bit outdated.\n. I don't really know what you're referring to. There is no licensing restrictions in using Showdown.\nTo install showdown you can download a release zip (or tarball), clone the repository or use Bower.\n. Extensions will live in their own repository from now on. I will crate a new repo with your contribution\n. Fixed on https://github.com/showdownjs/showdown/commit/053288f2feb6b1db36044b212bb24294fb305df1\n. @SyntaxRules Would be awesome if you could take a look into this.\n. Fixed at eae5f0e\n. This should be fixed in version 0.3.3\nThe main attribute points to src/showdown,js file (uncompressed/unconcatenated).\nIf you want to include any extension or the angular integration, you still need to add them manually.\n. Fixed in 3c7589d1d020af287e4a25bcbba45f4034fdaff1\n. This should be fixed in the new version 0.3.3\n. I've disabled the jshint in the grunt test job. No use to \"fix\" the code formatting since a major re-factor is on it's way anyway.\n. Once we merge the v2 branch, c367a4b will close this. @nicovalencia contribution should be mentioned though, somewhere appropriate.\n. According to the spec:\n\nEmphasis can be used in the middle of a word:\nun*frigging*believable\nBut if you surround an * or _ with spaces, it\u2019ll be treated as a literal asterisk or underscore.\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\\*this text is surrounded by literal asterisks\\*\n\nI would like to add that this only happens if there are two underscored words in the same block:\nExamples\nThis:\n``` md\nThis is a paragraph with_a word\nThis is another p with another_word\n```\nparses into this:\n``` html\nThis is a paragraph with_a word\nThis is another p with another_word\n```\n\nThis:\nmd\na paragraph with_a word and then another_word with underscores\nparses into this:\nhtml\n<p>a paragraph with<em>a word and then another<em>word with underscores</p>\nTo prevent this just e scape the underscores:\nmd\na paragraph with\\_a word and then another\\_word with underscores\nThere is no same way to allow midword emphasis (like the original spec requires) while, at the same time, automatically prevent this behavior.\n. I will look into adding these extensions to their own repo. Some of them are really worth saving.\n. https://github.com/showdownjs/youtube-extension/commit/07d02e6db4f7ee5be6c88cffb9a0fb31d5ce9d8f\n. This should be fixed in v 1.0.* since now showdown explicitly registers itself into windowon browser context.\nSee https://github.com/showdownjs/showdown/blob/1.0.0/dist/showdown.js#L1685\n. This is fixed with the introduction of bower.json and official package release\n. 24716d3520089ce88127ace39d55d8b217a89512\n. fixed in 24716d3\n. Fixed in  b3c056e\n. @pdeschen It's not a bug, it's by design\n\nAs described in Github flavoured markdown, it makes no sense to italicise parts of a word.\n\nShowdown is vanilla markdown. As stated in the original specifications:\n\nEmphasis can be used in the middle of a word:\nmd\nun*frigging*believable\nBut if you surround an * or _ with spaces, it\u2019ll be treated as a literal asterisk or underscore.\n\nThe correct way to prevent the behavior (or to create a literal asterisk or underscore) is to escape it with backslash, as stated in the specs:\n\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\\*this text is surrounded by literal asterisks\\*\n. Also I could not reproduce the issue @shhQuiet refers to! \n\nPlease provide an example where showdown incorrectly parses links and images with underscore so we can have a better understanding of the issue.\n. @SystemParadox @pdeschen https://github.com/showdownjs/showdown/issues/164\n. You can use a trim polyfill for IE8: http://jsperf.com/trim-polyfill\n. I will look into it\n. I can't really reproduce this issue... this is probably an issue with moustachejs being used with showdown (if that is moustachejs).\nMore info needed.\n. I will close it for now. If more info is provided I can reopen and try to find a solution\n. @pdeschen I think it's a very good idea.\n. That's an interesting feature. I will have a look into it as soon as I'm able to.\n. Commit d079154260f80ed71e9dbadbcf9613f2a2eb6d62 introduces a cli tool.\n. https://github.com/showdownjs/showdown/issues/50\n. fixed in eae5f0e\n. 24716d3520089ce88127ace39d55d8b217a89512\n. This \"fix\" doesn't pass the tests\n. @geekgao This is the intended behaviour. According to the original spec\n\nEmphasis can be used in the middle of a word:\nun*frigging*believable\nBut if you surround an * or _ with spaces, it\u2019ll be treated as a literal asterisk or underscore.\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\\*this text is surrounded by literal asterisks\\*\n. I will look into it as soon as possible.\n. @varfoo yes. We are restructuring showdown. Since we'll probably move each\nextension to its own repository, there will be no reason to call fs.\n\nRegardless, the ideal way to approach the problem is abstracting the\nlibrary from the platform it's running on, in a similar fashion to\nunderscore.js method. This will make it compatible with node and browser\nout of the box and, consequently, compatible with browserify. It will also\nbe easier to make the lib compatible with AMD and commonjs.\n\nEstev\u00e3o Soares dos Santos\n\n2014-12-11 17:33 GMT+00:00 varfoo notifications@github.com:\n\nSounds good. There are probably 4 other pull requests that attempt to fix\nthe same/similar issues. This one is just a super simple check the fs has\nthe method we are trying to use.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/showdownjs/showdown/pull/108#issuecomment-66656441.\n. https://github.com/showdownjs/showdown/issues/50\n. Please have a look at eae5f0e\n. https://github.com/showdownjs/showdown/issues/50\n. fixed in eae5f0e\n. thanks for your contribution. You're changes have been used in version 0.3.3\n. This should be fixed in version 0.3.3\n. Fixed on https://github.com/showdownjs/showdown/commit/053288f2feb6b1db36044b212bb24294fb305df1\n. @coreyti, I'm also interested. Been using Showdown for a while, fixing some\nbugs and adding support for some frameworks, such as AngularJS, in my local\nrepo.\n\n\nEstev\u00e3o Soares dos Santos\n\n2014-10-11 18:49 GMT+01:00 Corey Innis notifications@github.com:\n\nHi @sirakoff https://github.com/sirakoff, thanks for raising your hand.\nI'm glad to hear of your interest. I feel somewhat inclined to see if any\nof the other previous contributors, such as @tstone\nhttps://github.com/tstone and @remy https://github.com/remy, would\nwant to form the core. @pdeschen https://github.com/pdeschen, thoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/showdownjs/showdown/issues/114#issuecomment-58758103.\n. @coreyti Thanks. I have a couple of bug fixes and features (such as AngularJS integration) that should be ready to push. This repo only has a master branch though. What is the model you guys adopt? The standard Feature/Hotfix -> Develop -> Master -> Release? Or Fork(and branch) -> Push request?\n. @florenthobein It's already available in the feature branch Angular_Integration. I haven't merged it in the development branch yet because I'm waiting for some feedback from @coreyti or @pdeschen.\n\nRegardless, you can download the source file ng-angular.js and include it in your page after angular and showdown.\nSome feedback and testing is appreciated =)\n. @al-the-x I should be able to release a very alpha version of the re-factored version of showdown in the next couple of days. I would really appreciate your help and @tracend too, if @coreyti agrees.\n. I've just pushed a very very alpha version of the showdown refactoring. Love if you could have a look.\nhttps://github.com/showdownjs/showdown/tree/showdown2\n. @SyntaxRules I'm fine with you coming aboard, if @pdeschen and @coreyti agree. \nRegarding migrating to gulp, my question is: why?! The best thing would be dropping grunt (or gulp, or brocolli, or whatever) altogether and switch to pure NPM based tasks. =P\n. The original project (in which this repo is based on) is no longer available.\nYou can check a snapshot here http://web.archive.org/web/20110128090938/http://attacklab.net/showdown/?\nThe link is maintained there for historical purposes.\n. This would be a better fit as an extension maybe.\n. Related issues and pull requests: \n- https://github.com/showdownjs/showdown/issues/93\n- https://github.com/showdownjs/showdown/pull/113\n- https://github.com/showdownjs/showdown/pull/74\n- https://github.com/showdownjs/showdown/pull/66\n. https://github.com/showdownjs/showdown/issues/50\n. fixed in eae5f0e\n. fixed at eae5f0e\n. fixed in 24716d3520089ce88127ace39d55d8b217a89512\n. https://github.com/showdownjs/showdown/issues/50\n. fixed in eae5f0e\n. Fixed at eae5f0e\n. Closed in 1c8c928d0acf589952219a51c52ce09f77139f18\n. Can you provide a little more context? \n. Well, Showdown follows the markdown specification which, as stated by its creator, adds a line before the ending tags of code. (you can check the original spec here). I don't really see the reason behind that, but we try to adhere to the specification as much as possible.\nI can, however, add a feature to skip the line addition. Maybe through showdown's options. I will think about it and post something as soon as I can.\n. Feature added in version 1.0.0 https://github.com/showdownjs/showdown/commit/e6f40e19\n. Thanks for the report. The error was caused by the angular integration module. Should be fixed now.\n. @spockz Thanks for your contribution. Can you make the pull request against the develop branch please? (and maybe add a test case, while you're at it =P)\n. Thanks for your contribution. Can you please make this pull request against the the branch feature/cli?\n. Commit d079154260f80ed71e9dbadbcf9613f2a2eb6d62 introduces a cli tool.\n. Commit d079154260f80ed71e9dbadbcf9613f2a2eb6d62 introduces a cli tool.\n. Nice catch. We will add a note to the release referring this.\n. @herby The change in case was a mistake (i'm not sure why it happened). The next release will revert back to lowercase. Also, dist files will live in a \"dist\" directory instead of \"compressed\".\n. Sorry for the delayed response (been extra busy at work). Seems this is a problem with SopurceTree on Windows (does not respect the case of the files). I will fix this as soon as possible.\n. This is indeed weird. As you can see, the files are lowercased in local branch but get uppercase in remote.\n\n. Yeah, I need a commit without dist files though. Seems git ignores case in windows.\n. Should be fixed now, in release 0.5.0\n. @rain1024 @GlassGhost is right. You would need a custom extension for that.\n. It should work with vanilla showdown, albeit with an extension deprecation warning,\n. @GlassGhost I'm sorry, maybe we didn't explain it properly.\nCurrently, we're moving all extensions previously bundled with showdown to their own repository since we feel it's better to separated extensions from the main library. This helps us to focus on developing the core library better and more swiftly while maintaining the core library compliant with the original specs and the ability to add extra features as extensions. Those extensions would then be listed in our wiki, so that users could quickly find them.\nAlso, we do think MathJax support is a great idea. However, as I explained before, we simply can't be responsible for developing the MathJax extension. What we suggested was that you could create a repository with the extension. Then we would add it as a \"sponsored\" extension in our wiki and provide you some help in developing it.\n. My only issue is maintaining the extension. (writing tests, documentation, etc...) Although I do agree mathjax support is an excellent feature, so if anyone takes charge of it, that would be awesome.\n. merged at 31d62380cd65b06982f8f75d6768c8f18d736c6b\n. Thanks @ErisDS. SOrry for the delayed respnse but I've extra busy at work. \nDo you mind making the pull request against the develop branch? I can make it myself but it will lose the reference to your contribution.\nThanks\n. Damn my hastiness. Thanks @ErisDS \n. Thanks @ErisDS. Sorry for the delayed respnse but I've extra busy at work. \nDo you mind making the pull request against the develop branch? I can make it myself but it will lose the reference to your contribution.\n. Yeah, this is a known issue. We still haven't come to an agreement if we should stick to the original behaviour or not.\nPersonally I think this should be seen as a bug, as it doesn't really make sense. (same goes for adding paragraphs in lists)\n. related to https://github.com/showdownjs/showdown/issues/41\n. So, I've tried to reach John Gruber by email to ask what it's opinion on this particular issue but he didn't answer (go figures =P). So I say we fix this in the next release.\n@pdeschen @SyntaxRules what's your take on this?\n. @ErisDS The commit 0bdd02b partially fixes the issue. \nNow\n``` md\n item 1\n item 2\n\nitem 1\nitem 2\n```\n\nis parsed into\nhtml\n<ul>\n    <li>Item 1</li>\n    <li><p>Item 2</p></li>\n</ul>\n<ol>\n    <li><p>Item 1</p></li>\n    <li>Item 2</li>\n</ol>\nI couldn't pinpoint the origin of the issue with the extra paragraphs, I will have a look as soon as possible\n. 7720c88 now totally fixes this issue.\n``` md\n item 1\n item 2\n\nitem 1\nitem 2\n```\n\ngets parsed into\nhtml\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n</ul>\n<ol>\n    <li>Item 1</li>\n    <li>Item 2</li>\n</ol>\n. Hello @Dexus. Although it is a nice feature, the original specification does not include it. I believe this should be implemented as post-processing extension and not in the core library.\n. This will probably make it in the next release, as an opt in feature. (means you have to enable it explicitly through options)\n. Added this feature as an opt in. \nTo enable it you must use the option parseImgDimensions. Example:\njs\nvar conv = new showdown.Converter({parseImgDimensions: true});\nIt supports both inline and reference styles:\nmd\n![my image](foo.jpg =100x80 \"some title\")\nor\n``` md\n\n1: foo.jpg =100x80 \"some title\"\n```\nAlso you can set the units the dimensions are in (default is pixels (px))\nmd\n![my image](foo.jpg =100%x80dpi \"some title\")\n. fixed in https://github.com/showdownjs/showdown/commit/b63f602fff8dcabf4403f1431265a6a06bdb20f0\n. > Did you just steal my work?\nNo, there was already a pull request similar to yours.\nhttps://github.com/showdownjs/showdown/pull/139\n2015-04-22 15:22 GMT+01:00 Adam Beck notifications@github.com:\n\nDid you just steal my work?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/showdownjs/showdown/pull/144#issuecomment-95201955.\n. No prob mate\n\nSent from my iPhone\n\nOn 23/04/2015, at 01:22, Adam Beck notifications@github.com wrote:\nWhich is why I deleted my comment before you commented. Sorry for making a mistake.\n\u2014\nReply to this email directly or view it on GitHub.\n. Related to https://github.com/showdownjs/showdown/issues/82.\nId clash should be solved in https://github.com/showdownjs/showdown/commit/c367a4b9a18530ac662bb67ca4b09419680f0c34 \n(from v2 branch)\n\nWorth backporting to legacy, maybe?\n. @wkonkel Many thanks!\nI've back-ported this to the legacy branch (commit 82746c62900db7cc15b511a00232ef9608a5aba5).\nI've also manually marged this into the new repository for ng-showdown.\n. For more information, please see the wiki page about Markdown's XSS Vulnerability and how to mitigate it\n. What build are you using? I cannot reproduce in develop or master.\n. @jcbrand is right. Closing\n. @johnjelinek Not at all. This type of table syntax is non-standard. In fact, the original markdown spec does not include tables at all (just through html inclusion). Showdown core library tries to follow this spec as much as possible. This is why tables are provided as an extension, not int he core\n. Thanks @acourtiol Tested locally seems the issue is fixed with your PR\n. Thanks. I've tested locally, seems the issue is fixed.\n. @JonathanHayward  v 1.0.0 breaks compatibility in a few key points.\nsee CHANGELOG.md. \n@pdeschen maybe we should add CHANGELOG.md contents to the webpage? make it visible so that people can find it easily? \n. @be-next-hotdog showdown does indeed support ordered lists. In fact i could not reproduce the bug you described. Can you provide more context?\nHeres a working fiddle with showdown parsing correctly a ordered list...\nhttp://jsfiddle.net/7reex9sq/1/\n. @be-next-hotdog yes, this is a known bug/gotcha/feature (we haven't really decided was that is).\nJohn Gruber's (the markdown creator) lib had this odd behavior. According to the author, it is in fact intended. I doubt it... but we haven't yet decided to \"fix\" this since we want to adhere to the original spec as much as possible.\nAs a workaround, you can add any character bewteen the 2 lists (as @8Miles-Mai suggested).\n. Duplicate of https://github.com/showdownjs/showdown/issues/142\n. Interesting extension. Seems the code can be simplified a bit to remove the dependency on jquery.\nThanks for the contribution\n. If you need help let me know. you may also want to check the extension boilerplate. Although it's not really ready, (we're building it for the next release of showdown that will contain major changes to the extension mechanism) it can help you speed up development, specially with tests\ngithub.com/showdownjs/extension-boilerplate\n. AH! Great catch. I was scratching my head why the new extension loading mechanism was failing. @cybercase Thank you very much!\n. @theking-laptop this is already possible. You can use two methods:\n- the documented one, by using a showdown (output) extension.\n- the undocumented one, by overriding a subparser completely.\nYou can override a subparser by redifining it. Check https://github.com/showdownjs/showdown/tree/master/src/subParsers\nfor the available parsers. If you need help with a specific question let me know.\nThe extension mechanism is also being rewritten and simplified. Those changes will prolly make it to the next release in the next couple of weeks.\n. Closing as there was no reply in 6 days\n. @bsansouci thanks. \nI've been working on this. Unfortunately this breaks extensions that rely on img tag, such ass youtube extension. However, this would be a fine addition to the extension universe.\n. Bumping @pdeschen @SyntaxRules \n. @SyntaxRules Yeah, I agree. The only thing is that some features have to be included directly in core, since they would need to be run in a specific order, something that showdown extensions don't support.\n. In short:\nGFM (and other syntax extras) are supported by showdown via options. Those options are disabled by default, to use them activate them via options. No extensions are needed.\n\n\nI see in the documentation on the front page it mentions that tables and strikethrough are valid options for a convertor, which imply that showdown supports them by default. \n\nShowdown supports them if you activate them via options. Else, you get vanilla markdown. Give it a try.\n\nHowever looking on the wiki and at this issue imply that they are actually separate addons, so are the docs wrong or is there some mix up?\n\nWhere in the wiki? Please add a link so we can update to make things a bit more clear.\nThis issue might confuse people since it refers to \"plugins\" which isn't accurate. Extra markdown features are implemented in separate subParsers. This means they can easily be turned on/off at will. That's what SyntaxRules was talking about.\n. Are you using version 1.2.0 ?\nEnviado do meu iPhone\nNo dia 20/07/2015, \u00e0s 16:22, LP notifications@github.com escreveu:\n\nhttps://github.com/showdownjs/showdown/wiki/extensions\nThat lists the extensions for table etc.\nI did try to use the options and they didnt seem to change anything.\nnew showdown.Converter({\n        simplifiedAutoLink: true,\n        strikethrough: true,\n        tables: true\n    });\nThen if I were to add\n| foo | bar | ~~baz~~ |\n| :-- | :-: | --: |\n| 100 | a |  |\nas shown in the example, it does not get processed, it just outputs it within a p tag, unless I am doing something wrong.\n\u2014\nReply to this email directly or view it on GitHub.\n. thanks\n. thanks =)\n. Thanks @jeromecovington for the suggestion. We actually thought of using lodash as a dependency.However, we decided against it for the time being. \n\nThe problem of having a dependency on a monolithic library such as underscore/lodash is that it can make showdown incompatible with other libraries that use a different version of said library in a browser environment.\nOne way of preventing version clash is to use the modularized version of lodash, using only the functions you really need and then embedding them directly into showdown, in their own namespace.\nWe will probably do that in the future, when we have the time.\n. @grofit RegExp interprets $ (dollar sign) as a special character when it's in a replacement string so we need to escape it. This happens before the language extensions are run so they need to take into account this behavior. In fact, it is needed because language extensions might recursively call showdown.makeHtml().\nHowever, special chars are unescaped before output extensions are run so they are \"safe\" in that regard. =P\nThis was documented in the source but, as you rightly pointed out, it should be mentioned in the documentation itself.\nI've added a paragraph to the extension wiki explaining this: https://github.com/showdownjs/showdown/wiki/Extensions#gotchas\n. ## Quick fix\nTo prevent underscores to be parsed by showdown, escape them with a backslash.\nmy \\_literal\\_ underscores\nUsing output extensions\nOutput Extensions are ran only after all core parsers and lang extensions are ran.\nexample:\njs\nvar demo = function() {\n  return [\n    { type: 'output', regex: '/<(\\/)?div/', replace: '<$1span' }\n  ];\n}\n. ### Composite extensions\nIf you need to use a language extension, you can defer modifications for last using a combination of a language extension and a output extensions.\nFor instance, let's say you want to parse/capture every char sequence between %start% and %end%. However, that content should not be modified by showdown (all chars must be literal)\nYou can create a lang extension that looks for the pseudo tags %start% and %end%, capture everything in between and save it in a variable. \nLater, in the output extension, after showdown has finished parsing everything, you can put the content back unaltered.\nSimple example (Fiddle here: http://jsfiddle.net/tivie/1rqr7xy8/)\njs\nshowdown.extension('myExt', function() {\n    var matches = [];\n    return [\n        { \n            type: 'lang',\n            regex: /%start%([^]+?)%end%/gi,\n            replace: function(s, match) { \n                matches.push(match);\n                var n = matches.length - 1;\n                return '%PLACEHOLDER' + n + '%';\n            }\n        },\n        {\n            type: 'output',\n            filter: function (text) {\n                for (var i=0; i< matches.length; ++i) {\n                    var pat = '<p>%PLACEHOLDER' + i + '% *<\\/p>';\n                    text = text.replace(new RegExp(pat, 'gi'), matches[i]);\n                }\n                //reset array\n                matches = [];\n                return text;\n            }\n        }\n    ]\n});\n. @grofit yeah. I added a fiddle and a code example. Easier to demonstrate.\n. Marking as closed since the issue seems to be resolved.\n. It seems to be the xss filter. Just disable it and check if fixes the issue.\n. The issue is browser related and not showdown related\ncheck https://github.com/showdownjs/showdown/issues/171 for more info\n. Actually, it does not work in ANY browser, the output is just different.\nThe problem does not have anything to do with Showdown... it is caused by a mXSS filter in modern browsers.\nBasically, everything you feed to the innerHTML property gets XSS filtered, which your example falls perfectly into.\nFor instance, you can observe this behaviour without using showdown at all:\nCODEPEN\njs\n  var html = \"<a class='some-link' data-bind='click: function(){ someMethod('one', 'two'); }'>two</a>\"\n  document.getElementById('foo').innerHTML = html;\n  console.log(document.getElementById('foo').innerHTML);\nYour fiddle showing that showdown's output is correct: https://jsfiddle.net/06ngvj00/3/\n. thanks\n. We still maintain support for old extensions, nothing changed. But from what I could gather, it seem ghost is using a fork from an old version of showdown, that made a couple of changes directly into core. \nYour best bet is to ask directly in the ghost project issue tracker\n. Ghost's Showdown is too far behind (and different) to backport all modifications and improvements.\nHowever, I had a good look at Ghost's source code and it shouldn't be too hard to use Showdown (original!?) instead of showdown-ghost.\n. @Sophie-OS follow up on https://github.com/ErisDS/showdown/issues/5\nClosing issue here\n. @dipskakadiya thank you\n. You can call the default subParsers inside an extension.\nFor instance, in your case, you can create a lang extension that looks for :> and then, in that extension, call the default blockquote subParser:with:\nshowdown.subParser('blockquote')(text, options, globals);\n. GFM fenced codeblocks\n```\nsomecode\n```\nget parsed before calling language extensions (a necesssary evil to prevent nasty bugs). So, in order to parse the same markup, you need to disable GFM fenced blocks by default. \nYou do that by passing converter.setOption('ghCodeBlocks', false);\nThen your extension will grab woop woop.\nInside your extension, you can call subParser('githubCodeBlocks')(text, options, globals),to grab \"normal\" GFM code blocks.\nKeep in mind that options param passed to subParser('githubCodeBlocks') must have, at least, the property ghCodeBlocks set to true or the subParser will bail before parsing anything.\n. You can't get options and globals from converter\nsubParser('githubCodeBlocks') calls hashBlock subparser that uses globals.gHtmlBlocks to extract and save references to previously parsed HTML blocks. https://github.com/showdownjs/showdown/blob/master/src/subParsers/hashBlock.js\nSo if you want to call a core subParser you need to make some adjustments.\nYou need to replicate the globals var (https://github.com/showdownjs/showdown/blob/master/src/converter.js#L189). \nThen you need to change the replacement with your own token, for instance:\n'\\n\\n~\u00c7' + <replacement number > + '\u00c7\\n\\n';\nThen on a output extension, you need to replace your \"replacement\" with the extracted code.\nYou should check how  https://github.com/showdownjs/showdown/blob/master/src/subParsers/githubCodeBlocks.js and https://github.com/showdownjs/showdown/blob/master/src/subParsers/hashBlock.js work.\n. Another way is to replace the existing githubCodeBlock suybParser with your own but..\nWARNING\nThat is an undocumented feature that should NEVER, and i repeat, SHOULD NEVER be used in an EXTENSION, specially in extensions available for third parties\nAlso, you should not rely too much on that feature because it can change in the feature.\nExample\nbasically, you replace the subparser with your own (OUTSIDE THE RUNNING CODE OF THE EXTENSION)\n``` js\nvar oldParser = subParser('githubCodeBlocks');\nvar newParser = function (text, options, globals) {\n  // do the thing with your regex\n  // (?:\\s?diagram[s]?)(.*)(?:```)/gm\nreturn oldParser((ext, options, globals);\n}\nshowdown.subParser('githubCodeBlocks', newParser);\n`````\n. @grofit Can you make a fiddle or codepen with that?\n. Your parsed content is actually indummyGlobals.gHtmlBlocks` array. But  need to simulate every parse count to obtain the right element.\nI think your best bet is to call the converter object instead.\ncheck the updated http://codepen.io/anon/pen/xGoYmw\n. @grofit That's actually a problem with your regex and parsing. \nsee http://codepen.io/tivie/pen/eNqOzP for a working example.\nNote:\nI incidentally found a \"quirk\" in how showdown behaves regarding headings following blockquotes, see https://github.com/showdownjs/showdown/issues/191 for more info\nregardless, this example I gave you is working properly\n. Actually, according to spec, elements inside html blocks should not be parsed by md engine. It is assumed anything inside an HTML block is already in HTML so it shouldn't need to be parsed.\nThe original markdown.pl, however, had a way of parsing HTML blocks by \"marking\" them with markdown=\"1\".\nExample:\n```\nsome markdown\nblabla\nThis is not parsed\nThis is parsed\n```\nThis was one of the project's original milestones. However, since no one has requested it yet I haven't thought of a way to implement it.\nDo you think this is an important feature?\n. @rodrigogoncalves No, the original official spec, https://daringfireball.net/projects/markdown/\n. @SyntaxRules Added the feature just now to develop branch. Mind taking a look?\n. Actually, this is by design since it follows md tables spec1. However spec 2 does allow span elements in the titles. see https://michelf.ca/projects/php-markdown/dingus/\nI will add a milestone and implement it in a future release.\n. Ah, good catch\n. Fixed it in the README.md\n. give it a shot \nhttps://github.com/showdownjs/showdown/pull/180\n. you need to use the tivie-patch-1 branch https://github.com/showdownjs/showdown/tree/tivie-patch-1\n. Squashed in #181\n. See  https://github.com/showdownjs/showdown/wiki/Markdown's-XSS-Vulnerability-(and-how-to-mitigate-it)\nalso check related issues:\n- https://github.com/showdownjs/showdown/issues/57\n- https://github.com/showdownjs/showdown/issues/70\n- https://github.com/showdownjs/showdown/issues/171\n. Sure, seems a valid enhancement when not used as a security feature.\nFrom the top of my head i think this can actually be implemented as an extension.\n. @phw Thanks for your contribution. As far as I can tell, it's working fine.\nWe're also planning on adding a new event system to showdown that might actually help you simplify your code.\nI will let you know when it's ready to release.\n. This issue should be fixed in 7720c88. @callmehiphop If you could have a look please\n. Great! Thanks!\n. related to #183 \n. I'm on it. I've fixed the issue locally, I will push when a few edge cases are fixed\n. @SimonButtazzi What version are you using?\nCheck http://showdownjs.github.io/demo/. It uses showdown latest (currently v 1.2.2) and is working properly with your example\n. Directly in markdown you can't. You can, however, use the normal html syntax:\nhtml\n<img src=\"myImg.jpg\" class=\"left\">\n. Closing as no followup for 6 days\n. should be fixed now\n. @stevemao thanks for your contribution. I will review the changes as soon as I can\n. Yes, a lang extension would be suitable for this. \nFor instance, if all you want is to parse span elements (suchs as bold, italics, inline code, etc...) you can create a lang extension that catches all text and then passes it through spanGamut subSparser.\nUntested code\njs\nshowdown.extension('myExt', function() {\n  return [{\n    type: 'lang',\n    regex: /[\\s\\S]*/g,\n    replace: function(txt) {\n        var globals = {\n          gHtmlBlocks: [],\n          gUrls: {},\n          gTitles: {},\n          gDimensions: {}\n        };\n        return showdown.subParser('spanGamut')(txt, {}, globals);\n    }\n  }];\n});\nThis is just a crude example, but you get the idea.\n. Another less hackish way is to use an output extensions that replaces the <p> tags\nuntested code: works only in browser\nFor this to work on node, you must use a DOM parser\njs\nshowdown.extension('myExt', function() {\n  return [{\n    type: 'output',\n    filter: function(txt, conv, opts) {\n      var div = document.createElement('div');\n      var finalTxt = '';\n      div.innerHTML = txt;\n      for (var i=0; i<div.children.length; ++i) {\n      if (div.children[i].tagName.toLowerCase() === 'p') {\n        finalTxt += div.children[i].innerHTML;\n      }\n      return finalTxt;\n    }\n  }];\n});\n. @soubok Then the solutions I gave you should work.\n. No follow up in over 2 months, closing this up\n. @d-sko In the replace function no. But you can get them in the filter function\nexample:\njs\nshowdown.extension('myExt', function() {\n  return [\n    type: 'lang', //or output\n    filter: function(txt, conv, opts) {\n      var rgx = /someRx/g;\n      txt.replace(rgx, function(matches) {\n        //do something with opts\n        return matches;\n      });\n    }\n  ];\n});\n. The reason githubCodeBlock is not called inside blockGamut is because it needs to be parsed and hashed before  parsing linkDefinitions.\n. @thanks for your contribution. I've merged it into develop branch\n. @yaniswang Thanks. \nYou shouldn't need to call showdown.subParser('hashBlock') since blocks are not really allowed inside tables.\n\nExtenstion api is not strong enough, can't use subParser,globals.gHtmlBlocks...\n\nAlso, in extensions, you should not call subParser directly at all since it's not meant for that. \n. @yaniswang Sorry, do you mind explaining a bit further the problem you're having?\n. The demo Uses h3 for design purposes. Showdown uses h1 by default and you can chance that behaviour thoughts options. It's explained in the documentation.\n. @twitwi Ah! I see. I think you're right, people might get confused. I will close this issue and open a new one in the demo.\n. @alanguir Thanks for the suggestion. Showdown tries to keep faithful to the original spec. The new features and changes we introduced were always as \"opt-in\" and based on the discussions found at the \"official\" markdown mailing list.\nHowever, showdown is extensible exactly with the purpose of letting people create and use non standard features. It shouldn't be very hard to implement inline attribute lists a lang extension.\nIf you're up to it, I can give you a hand.\n. you can use this extension as boilterplate: https://github.com/showdownjs/youtube-extension/blob/master/src/showdown-youtube.js\nAlthough this extension should be a 'lang' extension\n. This bug was introduced recently. I'm still trying to figure out which commit introduced this.\nI expect to be able to fix this in 3 weeks or so.\n. I've tracked the problem to version 1.2.1, commit 5f043ca46d20eb88240c753ae7f7c7429f4ee27 introduced the problem\n. This should be fixed in the latest develop\n. Verified: http://showdownjs.github.io/demo/#/%E2%80%8Bpointer%20ptr%20thing\n@twitwi thanks. I will look into this as soon as possible. \n. @be-next-hotdog Hi. What do you mean?\nCarriage return?!? If you're referring to newlines, showdown is line ending agnostic: \\r\\n(win), \\r(old mac) and \\n(*nix) will be converted into \\n in the output.\nForward slashes don't have any special meaning in Markdown or HTML. The space rule follows the HTML spec: multiple spaces are collapsed into one.\n. No activity for more than 6 days, closing.\n. Hey @nikz. Thank you for your kind words.\nIt seems the best way is not to include a src map for the concatenated files in the bower package (it does not make much sense since it points to non existent files).\nThe regular package would keep them.\n. @nikz No grunt modifications needed. The only thing needed is to make bower ignore map files. Although I'm kind of conflicted about it since map files are extremely useful for debugging. \n. @nikz If we remove the map files from bower but keep the sourcemap comments, would it fix the problem?\n. OK, so after some thought I think it might be better to include the src files in bower distributions. It increases download size a bit but, apart from that, I don't see any inconveniente.\n@nikz What do you think?!\n. Should be fixed now.\n. Hi @yaniswang. I cannot seem to reproduce the issue you getting.\nSee demo here\n. @yaniswang That's the correct behavior. To put the HTML code inside a code block you need to either:\n- Indent it 4 spaces\n- wrap it in  - use the triple  (GitHub style code blocks)\nSee example here\n. e928622 commit should fix the issue permanently. Now when building files with grunt, a new line is added AFTER the files are concatenated and uglified and the sourcemaps are generated.\n. Hey @PaulBGD \nI could not reproduce the issue. Take a look at the demo. It seems to parse correctly.\nAre you using any extensions?\n. Thanks @allanhortle. \nThe problem here is the logic used to detect email addresses. \nAccording to rfc6531, in the local part of the email (the part that comes before the @ symbol) the following characters are allowed:\n- Uppercase and lowercase English letters (a-z, A-Z)\n- Digits 0 to 9\n- Characters ! # $ % & ' * + - / = ? ^ _ ` { | } ~\n- Character . (dot, period, full stop) provided that it is not the first or last character, and provided also that it does not appear two or more times consecutively.\nThis means something like this is a valid email website.com/img@x2.jpg\nRight now, we basically allowed every character in the email's local part. A possible fix is to be explicit email parsing regex.\nThis will fix http://website.com/img@x2.jpg but not website.com/img@x2.jpg, since it's impossible to know if it's an email or a link\n. should be fixed now\n. Fenced code blocks (aka github code blocks) should use 3 accents and not 4 accents like you're using in the exemple\n. html\n<script type=\"text/javascript\" src=\"htmlhint.js\"></script>\n<script type=\"text/javascript\">\n    var messages = HTMLHint.verify('<ul><li></ul>', {'tag-pair': true});\n</script>\n. Github ignores the extra tick but it is not the correct syntax\n. See example here http://showdownjs.github.io/demo/#/Test%0A%0A%60%60%60html%0A%3Cscript%20type%3D%22text%2Fjavascript%22%20src%3D%22htmlhint.js%22%3E%3C%2Fscript%3E%0A%3Cscript%20type%3D%22text%2Fjavascript%22%3E%0A%20%20%20%20var%20messages%20%3D%20HTMLHint.verify('%3Cul%3E%3Cli%3E%3C%2Ful%3E'%2C%20%7B'tag-pair'%3A%20true%7D)%3B%0A%3C%2Fscript%3E%0A%60%60%60\n. To create a simple line break, add 2 spaces to the end of line.\n. Hey\nThanks for your contrubution.\nYou can also use a otp extension. Since newlines are kept in the final document, you can iterarate over all paragraphs and replace \\n with br tags. @ospfranco I believe that, in our effort to fully support a Github's Flavored Markdown \"mode\" this should be an option in core. So I'm reopening the issue and adding this feature in the near future. You should ask this question in the meteor repo\n. You need to indent blocks 4 spaces in order for them to \"travel down\" 1 level in the list.\nFor instance:\n`````` md\n1. Foo\n```\nI'm indented 4 spaces so I belong to Foo\n```\n\n2. Bar\n\n    ```\n    I'm indented 8 spaces so I belong to bar\n    ```\n\n``````\nHere's your corrected sample\n. There's no way to cherry pick syntax elements you want to parse, but you might be able to achieve this with a lang extension.\n. I couldn't reproduce the exact output you're getting (neither with showdown latest or v 1.2.3)\nSee demo here\n. To further add to the answer:\nSince v 1.2, showdown applies the following rules to lists:\n1. A list is single paragraph if it has only 1 line-break separating items:\nmd\n   - foo\n   - bar\n   - baz\nbecomes\nhtml\n   <ul>\n    <li>foo</li>\n    <li>bar</li>\n    <li>baz</li>\n   </ul>\n2. A list becomes multi paragraph if ANY of its items is separated by 2 line-breaks:\n``` md\n   - foo\n\nbar\nbaz\n   ```\n\nbecomes\nhtml\n   <ul>\n    <li><p>foo</p></li>\n    <li><p>bar</p></li>\n    <li><p>baz</p></li>\n   </ul>\nThis new ruleset is based on the comments of Markdown's author John Gruber in the Markdown discussion list.\n. @kossnocorp In order to prevent underscores to be treated as emphasis tags in mid of words you can do one of 2 things:\n1. Escape the underscores with \\:\nhttps://en.wikipedia.org/wiki/ISO_week_date`\n2. Use the option literalMidWordUnderscores:\njavascript\n   var converter = new showdown.Converter({\n     simplifiedAutoLink: true,\n     literalMidWordUnderscores: true\n   })\nYou can use the demo to test\n. I believe npm install --save-dev showndown is a typo since the library is called showdown\nRegardless, more information is  needed. What file is \"required\" by webpack? Are you using the dist files or src files?\nCan you post the relevant part of your code?\n. @Kreozot  no prob, glad I could help\n. @hbCyber thanks. Bug confirmed! \nhttp://showdownjs.github.io/demo/#/Your%20friend%20~~%5Btes%5C*t%5D(www.google.com)~~%20(~~%5B%40test%5D(www.google.com)~~)%20updated%20his%2Fher%20description\n. Should be fixed in 5669317\n. Check https://github.com/showdownjs/prettify-extension\n. @vithar What do you mean by highlighting code in NodeJS?!\n. I'm not sure what kind of HTML wizardry pandoc does. However, Showdown already adds classes to code blocks pertaining the language used.\nfor instance, this block...\n```javascript\nfunction foo() {\n  var bar = 'bar';\n  return bar;\n}\n```\ngets converted into the following HTML:\nhtml\n<pre><code class=\"javascript language-javascript\">function foo() {\n  var bar = 'bar';\n  return bar;\n}</code></pre>\n. @matatk Ah I see. Well, this is the kind of job for an extension.\n. Making an extension for code highlighting would be kind of easy with the new showdown's extended RegExp engine.\nexample using https://highlightjs.org/ library:\njavascript\nshowdown.extension('codehighlight', function() {\n  function htmlunencode(text) {\n    return (\n      text\n        .replace(/&amp;/g, '&')\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n      );\n  }\n  return [\n    {\n      type: 'output',\n      filter: function (text, converter, options) {\n        // use new shodown's regexp engine to conditionally parse codeblocks\n        var left  = '<pre><code\\\\b[^>]*>',\n            right = '</code></pre>',\n            flags = 'g',\n            replacement = function (wholeMatch, match, left, right) {\n              // unescape match to prevent double escaping\n              match = htmlunencode(match);\n              return left + hljs.highlightAuto(match).value + right;\n            };\n        return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);\n      }\n    }\n  ];\n});\n. @IonicaBizau Check the highlight documentation. https://highlightjs.org/usage/ \n. Showdown doesn't sanitize the input. This is by design since markdown relies on it to allow certain features to be correctly parsed into HTML. This, however, means XSS injection is quite possible.\nFurther reference:\n- #57\n- #70 \n- #71 \n- #182 \n- Markdown's XSS Vulnerability (and how to mitigate it)\n. showdown does not exclude iframes. You can see an example here:\nhttp://showdownjs.github.io/demo/#/%3Ciframe%20src%3D%22http%3A%2F%2Fwww.w3schools.com%22%3E\nWhat version are you using?\n. That version is very outdated (current version is 1.3.*)\nYou should ask BTF to use a more updated version.\nAlternatively, you might want to check ng-showdown (https://github.com/showdownjs/ng-showdown) the official angular integration for showdown.\n. Hey @heejongahn. Thank you!\nRegarding your issue, Maybe I'm miss-understanding you but I couldn't reproduce it. I've tested with every release from 1.0.0 onward and could not reproduce the behavior you describe.\nYou can test it yourself with our demo\n. no problem glad you worked it out\n. What version of showdown are you using?\nFrom v1.2.0 onward, table support was moved into showdown core. As such the extension is deprecated.\nTo activate support for tables you just need to use the \"table\" option. Example:\njs\nvar converter = new showdown.Converter({tables: true});\n. The extension loading mechanism was changed in 1.2.0. \nThe converter object is no longer available globally. It is now injected directly into the filter function.\nExample:\n``` js\nshowdown.extension('myext', function() {\n  return {\n    type: 'lang', //or output\n    filter: function (text, converter, options) {\n      // converter available here\n      return text;\n    }\n  };\n});\nvar conv = new showdown.Converter({extensions: ['myext']};\n```\n. Keep in mind, however, that extensions are attached to the converter object at initialization which means, all extensions activated in a showdown.converter options instance share the same converter object inside filter function, as you can see in the following test (fiddle here)\n``` js\nvar foo;\nshowdown.extension('myExt', function() {\n  return {\n    type: 'lang',\n    filter: function (text, converter, options) {\n      foo = converter;\n      console.log(options.extensions);\n      return text;\n    }\n  };\n});\nshowdown.extension('otherExt', function() {\n  return {\n    type: 'lang',\n    filter: function (text, converter, options) {return text;}\n  };\n});\nvar A = new showdown.Converter({extensions: ['myExt']}),\n      B = new showdown.Converter({extensions: ['myExt', 'otherExt']});\nA.makeHtml('#bla');\nconsole.log('foo is A:', foo === A); //true\nconsole.log('foo is B:', foo === B); //false\nA.makeHtml('#bla');\nconsole.log('foo is A:', foo === A); //still true\nB.makeHtml('#bla');\nconsole.log('foo is A:', foo === A); //false\nconsole.log('foo is B:', foo === B); //true\n```\nOutput:\n\n[\"myExt\"]\nfoo is A: true\nfoo is B: false\n[\"myExt\", \"otherExt\"]\nfoo is A: false\nfoo is B: true\n. Yes, I'm currently looking into it, I expect to have a fix soon.\n. Ok, this issue took a lot longer than expected. I had to make quite some changes in hashHTMLBlock in order to make it work smarter.\n\nThis issue should be fixed now in commit 2746949. \n@ferllings Do you mind testing it a bit further?\n. thanks @matatk \n. Hey @SekibOmazic.\nThis \"option\" makes more sense as an extension rather than something embeded on core.\n. Adding extra syntax to the link element is not a good idea as it diverts  from the markdown spec and breaks compatibility.\nHowever, there are 2 easy ways to add this to links:\nUsing embeded html\nfiddle\nmd\nsome text with a link <a href=\"http://www.google.com\" target=\"blank\">google</a>\nCreate an extension\nfiddle\n``` js\nshowdown.extension('targetlink', function() {\n  return [{\n    type: 'lang',\n    regex: /[((?:[[^]]]|[^[]]))]([ \\t]<?(.?(?:(.?).?)?)>?[ \\t]((['\"])(.?)\\4[ \\t])?){\\:target=([\"'])(.)\\6}/g,\n    replace: function(wholematch, linkText, url, a, b, title, c, target) {\n  var result = '<a href=\"' + url + '\"';\n\n  if (typeof title != 'undefined' && title !== '' && title !== null) {\n    title = title.replace(/\"/g, '&quot;');\n    title = showdown.helper.escapeCharacters(title, '*_', false);\n    result += ' title=\"' + title + '\"';\n  }\n\n  if (typeof target != 'undefined' && target !== '' && target !== null) {\n    result += ' target=\"' + target + '\"';\n  }\n\n  result += '>' + linkText + '</a>';\n  return result;\n}\n\n}];\n});\n```\n. I've updated showdown's syntax wiki page.\nhttps://github.com/showdownjs/showdown/wiki/Showdown's-Markdown-syntax\nIf you feel there's something missing please let me know\n. You're absolutely right. I will update the documentation as soon as possible.\n. My fault. I've updated the wiki to reflect the new extension loading mechanism.\nRegardless,  I'm also posting here some boilerplate code for extensions, with conditional loading and showdown's new proper loading mechanism, for quick reference.\n``` js\n(function (extension) {\n  if (typeof showdown !== 'undefined') {\n    // global (browser or nodejs global)\n    extension(showdown);\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['showdown'], extension);\n  } else if (typeof exports === 'object') {\n    // Node, CommonJS-like\n    module.exports = extension(require('showdown'));\n  } else {\n    // showdown was not found so we throw\n    throw Error('Could not find showdown library');\n  }\n}(function (showdown) {\n// loading extension into shodown\n  showdown.extension('myext', function () {\n    var myext = { / ... actual extension code ... / };\n    return [myext];\n  });\n}));\n``\n. The lines must start and end with|`\nhttp://showdownjs.github.io/demo/#/%7C%20Markdown%7Cless%7CPreety%7C%0A%7C---%7C---%7C---%7C%0A%7Cstill%7Crenders%7Cnicely%7C%0A%7C1%7C2%7C3%7C\nThis table syntax is based on the original spec on the showdown's mailing list. This syntax, however, is different from Github Flavoured Markdown and should be, at least, mentioned in the documentation.\n. https://github.com/showdownjs/showdown/wiki/Showdown's-Markdown-syntax\n. Should be fixed in f58f014\n. https://github.com/tivie/showdown-footnotes\n. Thanks\n. Thanks @DoumanAsh \nYou are correct, the bug is verified. (can see in demo page here)\nI will post a fix as soon as possible.\n. @DoumanAsh \n\nPlease note that markdown code symbols are missing inside of html <code>.\n\nWhat do you mean?\n. @DoumanAsh I thought that was precisely the issue you were talking about.\n. Both are consequence of the same issue that is the fact that GitHub code blocks insede HTML Code blocks get parsed by markdown engine while they shouldn't.\n. Should be fixed now\nSee demo\n. Duplicate: https://github.com/showdownjs/showdown/issues/226\nAlso check the wiki page: https://github.com/showdownjs/showdown/wiki/Showdown's-Markdown-syntax#tables\n\nKeep in mind that, contrary to GFM, the outer pipes (|) are NOT optional. But you don't need to make the raw Markdown line up prettily.\n. You should be able to use GH spec with tables now\n. default, as the older table style is fully supported as well.\n. See #229 \n\nAlso see demo\n. Couldn't reproduce in the demo page\ncan you provide a demo with the issue?\n. @Gacnt Check on each step if changes are being made to the text.\nMaybe the > character is being escaped prior to markdown rendering\n. No\n. @smoleniuch It's a feature we're developing for version 2.0. @charlie-s The bidirectional is available in master and develop branches and to the soon to be released version 2.0-alpha-1. @smoleniuch @Gacnt @charlie-s @mattkwiecien @DougBeney  @jdempster @Blaza @matthew-inamdar @jdhankins @circleart @ryantuck\nJust pushed the reverse converter to 1.x branch. You can expect a 1.9.0 release with an [EXPERIMENTAL] reverse parser tomorrow.\n\nDonate\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like my work and find the library useful, please donate through Patreon or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.\n. version 1.9.0 released. Either use an HTML a tag\n\n<a href=\"example.com\" rel=\"no-follow\">foo</a>\nOr create an extension\n. The following cases behave as expected:\nCase 1\nmd\nThere is not a missing word < Test > here!\nconverts to:\nhtml\n<p>There is not a missing word &lt; Test &gt; here!</p>\nCase 2\nmd\nThere is not a missing word <test> here!\nconverts to:\nhtml\n<p>There is not a missing word <test></test> here!</p>\n\nThe bug lies in in case 3:\nCase 3\nmd\nThere is not a missing word <test here!\nshould be converted to:\nhtml\n<p>There is not a missing word &lt;test here!</p>\ninstead it's being converted into:\nhtml\n<p>There is not a missing word <test here!<p></test></p>\n. Html, namely xhtml, allows custom html tags.\n. Update: I'm still working on this bug as it's proving a little more difficult to tackle as first expected.\nFor now, a workaround is to add a space after <\nmd\nThere is not a missing word < test here!\n. Currently, I couldn't find a simple way of fixing this without rewriting the parsing engine. The problem is that the fix slows down the parsing engine too much, since it requires a bunch of lookaheads.\nI can't give you a ETA on this, but for now the issue is in \"pending\" status.\n. This issue should be fixed now. Took me a lot of time because I had to rewrite a bit of the parser logic.\nHere's how it works now:\nCase 1\nmd\nThere is not a missing word < Test > here!\nconverts to:\nhtml\n<p>There is not a missing word &lt; Test &gt; here!</p>\nCase 2\nmd\nThere is not a missing word <test> here!\nconverts to:\nhtml\n<p>There is not a missing word <test> here!</p>\nCase 3\nmd\nThere is not a missing word test> here!\nconverts to:\nhtml\n<p>There is not a missing word test&gt; here!</p>\nCase 4\nmd\nThere is not a missing word <test here!\nconverts to:\nhtml\n<p>There is not a missing word &lt;test here!</p>. Can you provide more info on the error?\nI don't think it's showdown's fault since the npm release of showdown includes all source and all map files\n. No activity for 4 days, closing for now\n. Out of the box no.\nBut you can try to hack around the subparsers with extensions.\n1. Create a lang extension that calls the following subparsers:\n   - italicsAndBold\n   - strikethrough\n2. Store the parsed text in a var and return empty string from that extension\n3. Create an otp ext that returns the stored text\nFiddle\nhttps://jsfiddle.net/tivie/053f2j7z/\nExtension code\njs\nshowdown.extension('myext', function () {\n  var store = '';\n  var lngExt = function (text, converter, options) {\n    var globals = {converter: converter};\n    options.strikethrough = true;\n    text = showdown.subParser('italicsAndBold')(text, options, globals);\n    text = showdown.subParser('strikethrough')(text, options, globals);\n    store = text;\n    return \"\";\n  };\n  var otpExt = function (text, converter, options) {\n    return store;\n  };\n  return [\n    {\n      type: 'lang',\n      filter: lngExt\n    },\n    {\n      type: 'output',\n      filter: otpExt\n    }\n  ];\n});\n. The second link is invalid\n. Thanks @anion155. However I'm not sure how this applies to showdown.\nCan you elaborate further? What exactly is your request? How would it apply to showdown? And how it would benefit showdown users? \n. Closing as there is no activity in 22 days\n. Depends on your definition of simple.\nYou would have to create a lang extension that escapes # characters. See fiddle\njavascript\nshowdown.extension('myext', function() {\n  return [{ type: 'lang', regex: /^#/gm, replace: '\\\\#' }];\n});\n. The parsers depend on one another and the inorder they're called so, at the moment, it's not possible to cherry pick.\n. What tutorial are you referring to?\nAnyways, it's working fine with me. Check the fiddle\n. This issue is, in fact, related to npm packaging system that does not convert Windows Line Ending \\r\\n in *nix line endings \\n.\nThe git version is working properly.\nI'm going to introduce a new step in the packaging cycle that changes crlf for lf.\nThe next version of showdown's npm package should be fixed.\n. Do not close the issue.\nThis will be closed automatically when I push the update that fixes it.\n. @sculley4 The issue should be fixed now. Do you mind checking?\n. For some reason, building in windows changes the line endings from /n to /r/n. While git compensates for that, npm does not.\nI guess I need to create a VMachine with *nix and publish to npm from there.\nThe next npm release will have this fixed, I hope.\nAs a workaround, and until that, replacing line in the cli command file should fix the issue.\n. Ok, I've finally figure out what was happening. Git was globally configured as push:LF, pull: CRLF (as it should on windows environment). I was using my IDE to specifically auto convert CRLF to LF after a pull, since node works just as fine with LF in windows and that should solve the NPM problem.\nHowever, IDE was ignoring what it considered \"binary\" files, while git wasn't, so bin/showdown was being ignored.\nI've published 1.4.2 to NPM and hopefully it is fixed now.\n. Since it's fixed, I'm closing the issue\n. ## Short version\nYou miss typed the function's name. It's converter.makeHtml\nA bit longer version\nYou're using an outdated version of showdown. You should be using the latest:\nhtml\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/showdown/1.3.0/showdown.js\"></script>\nSecondly, you don't really need to encode html entities, since showdown does that for you.\nCheck a working fiddle here\n. I've figure out the problem. Line endings were getting \"altered\" prior to npm release.\nThis should be fixed now.\n. SInce it seems fixed, closing the issue\n. https://github.com/showdownjs/showdown/issues/222\n. Adding extra syntax to the link element is not a good idea as it diverts  from the markdown spec and breks compatibility.\nHowever, there are 2 easy ways to add this to links:\nUsing embeded html\nfiddle\nmd\nsome text with a link <a href=\"http://www.google.com\" target=\"blank\">google</a>\nCreate an extension\nSyntax\n[adjustable](http://google.com \"Giiidd\"){:target=\"_blank\"}\n\nTest online\nfiddle\nCode\n``` js\nshowdown.extension('targetlink', function() {\n  return [{\n    type: 'lang',\n    regex: /[((?:[[^]]]|[^[]]))]([ \\t]<?(.?(?:(.?).?)?)>?[ \\t]((['\"])(.?)\\4[ \\t])?){\\:target=([\"'])(.)\\6}/g,\n    replace: function(wholematch, linkText, url, a, b, title, c, target) {\n  var result = '<a href=\"' + url + '\"';\n\n  if (typeof title != 'undefined' && title !== '' && title !== null) {\n    title = title.replace(/\"/g, '&quot;');\n    title = showdown.helper.escapeCharacters(title, '*_', false);\n    result += ' title=\"' + title + '\"';\n  }\n\n  if (typeof target != 'undefined' && target !== '' && target !== null) {\n    result += ' target=\"' + target + '\"';\n  }\n\n  result += '>' + linkText + '</a>';\n  return result;\n}\n\n}];\n});\n```\n. Hi\nDid you activate table support in the options, as stated in the documentation?\n. Closing as no update for 8 days\n. Thanks @samb0t \n. yes\n. Showdown allows for any html tag to be embedded. This includes <script> tags. see demo\nIn order to limit the scripts to specific domains, (or any kind of other filter), you need to create an output extension that checks for script tags.\n. Ah, but that is not showdown's fault but rather the browser's.\ninnerHTML does not allow execution at runtime of inserted scripts. That is to mitigate XSS attacks.\n. @ishankhare07 Closing as there is no update.\nCheck http://stackoverflow.com/questions/2592092/executing-script-elements-inserted-with-innerhtml\n. hi @fkorak \nI don't have anything against having unofficial (or semi-official) showdown nuget packages. In fact, I think it might be the best option.\nAre you voluntering? =P\n. Bump\n. @fkorak Thank you very much. \nI will add a referecence to the NuGet package in the wiki and readme.md so people know about it.\n. To prevent underscores to be parsed as <em> in the middle of words you need to activate the option literalMidWordUnderscores.\njs\nvar showdown  = require('showdown'),\n    converter = new showdown.Converter(),\n    converter.setOption('literalMidWordUnderscores', true)\n    text      = '[snook.ca/archives/html_and_css/specificity-graphs](http://snook.ca/archives/html_and_css/specificity-graphs)',\n    html      = converter.makeHtml(text);\nAs a side note, npm and \"browser\" version of showdown are the same, so you can use the demo to test showdown.\n. ## Demo options and default configuration\n\nThe showdown demo does not use the default config?\n\nIf you click on menu (top left corner), you can see the configuration used by the demo. You can also enable and disable options and features and change the showdown version used.\nShowdown's default behavior\nShowdown follows the original markdown spec as closely as possible:\n\nEmphasis can be used in the middle of a word:\nun*frigging*believable\nBut if you surround an * or _ with spaces, it\u2019ll be treated as a literal asterisk or underscore.\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an \nemphasis delimiter, you can backslash escape it:\n\\*this text is surrounded by literal asterisks\\*\n\nliteralMidWordUnderscores\n\nIt's not just about underscores, I would like to know if the same problem comes up with * or - with\ndefault config?\n\n* follows the spec above, regardless of literalMidWordUnderscores being activated or not.\nThis means some*asterisk*text will ALWAYS be converted to some<em>asterisk</em>text.\nRegarding - I'm not sure what you're talking about. - always have their literal meaning unless they are the first character in a line, in which they will be converted to an unordered list. In the middle of a word or a setence, they will not be converted.\nWith literalMidWordUnderscores option enabled, both _ and __ will not be converted to <em> or <strong> when they appear in the middle of a string.\n. Since showdown version 1.4.0, to enable parsing inside an html block, you can use the attribute markdown (or data-markdown).\nreplace: '<div markdown=\"1\" class=\"notice notice-$1\">$2</div>'\nThis will work in lang extensions\n. @ciel Thanks!\nYou mean, the text inside the div gets wrapped inside a paragraph right? Something like this:\nhtml\n<div markdown class=\"notice\">\n<p>some long text</p>\n</div>\n. That is a pickle indeed. Since the default markdown behavior is to treat blocks of text as paragraphs, that can't easily be changed.\nHowever, I can think of two ways around it:\n- Leave the <p> tags and format them with css. Example:\ncss\n  .notice p {\n    line-height: normal;\n    margin-bottom: 0;\n  }\n- Use an output extension to remove the <p> tags inside <div class=\"notice\">\njs\nshowdown.extension('myext', [{\n  type: 'output',\n  filter: function(text) {\n    var replacement = function (wholeMatch, inner, left, right) {\n      return left + inner.replace(/^\\s*<p>/, '').replace(/<\\/p>\\s*$/, '') + right;\n    };\n    return showdown.helper.replaceRecursiveRegExp(text, replacement, '<div markdown class=\"notice.*\">', \"</div>\", \"gi\");\n  }\n}]);\nThe first approach only \"styles\" the issue. However, it is semantically correct to have p tags inside divs. And it's a lot simpler and faster.\nThe second approach removes the p tags altogether but is a bit slower. However, it's a lot faster than the output extension you proposed, since it only parses the appropriate divs.\n. It seems the new tables regexes make table header separators require 3 dashes instead of 2.\nThis should work properly:\nmd\n|key|value|\n|---|---| \n|My Key|My Value|\nThis behavior was not intended, and I will release a fix as soon as possible.\n. Issue should be fixed now\n. New release for this fix https://github.com/showdownjs/showdown/releases/tag/1.4.1\n. Thank you!\n. The issue is with meteor and not showdown.\nMeteor uses it's own fork of showdown, based on an old deprecated version of our library.\n. I see your point but this is hardly a showdown issue.\nI can't think of any sane way showdown core can ignore tabs smartly without breaking the tab code blocks.\nTo further elaborate... \nTabs and spaces at the beginning of lines are meaningful in markdown syntax.\nThis makes it impossible for showdown to know for sure that, in your specific case, those \"tabs\" at the beginning are not intentional. Showdown might try to guess, let's say, if all lines of the text are indented the same way but this would break a perfectly valid case like this one:\njs\nvar conv = new showdown.Converter();\nconv.makeHtml(\n`\n    this is\n    a multiline\n    piece of code\n`);\nAlso, the indentation at the beginning of lines is arbitrary, depending of your code style and how deep in the code is the markdown text. This makes it hard to implement at best....\n@jhicken Do you have any suggestion?\n. To fix your specific issue, however, you have several options:\nMove es6 template strings to a new line\nYou can fix the issue by moving the es6 opening mark to a new line that respects your indentation:\njs\nfunction masterRunner() {\n  var conv = new showdown.Converter()\n  return conv.makeHtml(\n    `## markdown doc\n     you can use markdown for card documentation\n      - foo\n      - bar`);\n}\nUse a wrapper function\nyou can also use a wrapper function, although I think is really an overkill and potentially breaks tab code blocks:\n`` js\nfunction masterRunner(){\n  var conv = new showdown.Converter()\n  return conv.makeHtml(t(\n    ## markdown doc\n    you can use markdown for card documentation\n    - foo\n    - bar\n  `));\n}\nfunction t(txt) {\n  return txt.replace(/^\\s+/gm, '');\n}\n```\nMake the above t function a lang extension\nThis would remove the need to pre-parse the text but, again, I think is an overkill.\n. > My proposal is that showdown could let you pass an argument that would try to intelligently fix your es6 string.\nYeah, but how would we accomplish that? Right trimming would not work as it would remove important right whitespaces. \nPassing the indentation level would be kind of useless since it would tighly couple the text with the code style, which is crazy!!\nThe only way I can think of is guessing by the the \"indentation\" level of the first line of the text, but that would also break under some circumstances such as:\n- first line of text not indented but the rest is\n- a list or a code block as first element in a string\n- etc...\nSo what did you have in mind to tackle the problem?\n. Check 261f127 and see if it fixes your problem,\nIts on it's own branch since I would like further testing before introducing this feature on core.\nThis type of \"smart\" indentation fixing is problematic and I don't think we can create a system that reliably can identify indented text. \n. @jhicken  Have you had time to check and test 261f127 ?\n. the bit at the top is YAML so you need a yaml parser\n. I've decided that a simple metadata parser would be useful in markdown documents.\nThe syntax is:\n\n--- or \u00ab\u00ab\u00ab at the beginning of the markdown document\noptionally followed by a alphanumeric designation of the format (anything you like as long as it does not have any white spaces or newlines and stuff)\nfollowed by a newline\nfollowed by key value pairs separated by a colon and a space : and a newline at the end\nClosed by --- or \u00bb\u00bb\u00bb and a newline\n\nlike this:\n```md\ntitle: document title\nsome meta name: some meta content\n\nmy markdown document\nrest of the document\n```\nor\n```md\n\u00ab\u00ab\u00ab\ntitle: document title\nsome meta name: some meta content\n\u00bb\u00bb\u00bb\nmy markdown document\nrest of the document\n```\nor even this:\n```md\n---FORMAT-IDENTIFIER\ntitle: document title\nsome meta name:\n - a list\n - of values\n---\nmy markdown document\nrest of the document\n```\nTo enable metadata parsing, one must enable the option metadata.\njs\nvar conv = new showdown.Converter({metadata: true});\nShowdown will expose a method for retrieving the document's metadata after parsing:\njs\nvar conv = new showdown.Converter({metadata: true});\nvar html = conv.makeHtml(someMd);\nvar metadata = conv.getMetadata(); // returns an object with the document metadata\nNote that showdown won't support YAML (or any other data format) out of the box, but you can retrieve the raw metadata and parse it yourself.\n```js\nvar conv = new showdown.Converter({metadata: true});\nvar html = conv.makeHtml(someMd);\nvar metadata = conv.getMetadata(true); // returns a string with the raw metadata\nvar metadataFormat = conv.getMetadataFormat(); // returns the format of the metadata\n// do stuff with the metadata var\n```. This feature should be implemented now\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. @ye-will Verified and reproducible. I will look into it as soon as possible\n\ndemo\n. @ye-will should be fixed now in 73206b0, develop branch\n. Showdown depends on parser order to function properly.\nIt is possible to use the parsers individually, but there is no garantee they will work as inteded.\n. No activity for 10 days, closing\n. @jahtalab more information needed please\n. @jahtalab Can you give a concrete example?\n. I think your issue is related to this one https://github.com/showdownjs/showdown/issues/260\n. @Sleashe thank you. I'm really glad you like showdown.\nTL;DR;\n\nYour underline regex is too broad and captures lots of stuff (see fiddle here)  \nChange your underline regex to /(?:\\s|^)(\\-)(?=\\S)([\\s\\S]+?\\S)\\1/gm and it should fix your problem. (see fiddle here)\nTo make it more robust I would make the underline rule use two dashes insetad of one: --underlined word--; regex -> /(?:\\s|^)(\\-\\-)(?=\\S)([\\s\\S]+?\\S)\\1/gm (see fiddle here)\n\nExplanation\nWhat's happening is that all lang extensions are called (by the order they are passed in showdown's constructor) before showdown tokenizes html code. This is by design, to enable lang extensions to modify the \"raw\" input as they see fit (including HTML code).\nThe problem with your \"underline\" extension is that the regex is too broad and will transform everything that is inside two - (dashes).\nFor instance, with your extension this:\n``` md\nthis is some text with a dashed-word.\nanother paragraph.\nanother dashed-word down below.\n```\nwill be converted to\n``` html\nthis is some text with a dashedword.\nanother paragraph.\nanother dashedword down below.\n```\nWhich I reckon it should not happen. (see fiddle here).\nChanging your regex a bit to prevent matching mid word dashes should fix the problem: (?:\\s|^)(\\-)(?=\\S)([\\s\\S]+?\\S)\\1. (see fiddle here)\nAlso, I would change the underline rule to use 2 dashes instead of one to prevent corner cases, since one dash is too common and is already used in markdown for a number of things.: (?:\\s|^)(\\-\\-)(?=\\S)([\\s\\S]+?\\S)\\1 (see fiddle here)\n. Extension are enough for almost every scenario, so I would go with that.\nAdding subparsers and overriding showdown might introduce some nasty bugs that become very hard to debug.\n. No problem. Closing the issue. If you need more help, feel free to ask\n. This is one of the (not so) edge cases in which the original markdown spec is omissive. This means each implementation out there parses this specific case differently differently. see comparison here \nWhile showdown follows the original markdown spec as much as possible, dillinger seems to follow the Common mark spec (which is not markdown, but rather a variant!!!).\nRegardless, internally we've debated this extensively, and couldn't come to an agreement. However, I think it's possible to add an option to treat consecutive lists separated by 3 or 4 linebreaks as separated lists.\nRight now, you can work around this by adding a silent element in between the lists\n``` md\n - a\n - b\n - c\n \n\nbla\nbli\nblu\n```\n. For instance, github does not separate lists like that:\n\n```\n1. a\n1. b\n1. c\n\nd\n```\na\nb\nc\nd\n. This is a tricky situation because parenthesis are allowed in urls and there can be situations where the rules used by RedCarpet will wrongly exclude the parentehsis from the url.\n\nFor instance:\nThe url is http://www.example.com/a/link/that/ends/in/parenthesis)\nSo this:\nmd\n(http://www.example.com/a/link/that/ends/in/parenthesis) is a link with parentehsis)\ngets converted into this:\n(http://www.example.com/a/link/that/ends/in/parenthesis) is a link with parentehsis)\nhtml\n<p>(<a href=\"http://www.example.com/a/link/that/ends/in/parenthesis\">http://www.example.com/a/link/that/ends/parenthesis</a>) is a link with parentehsis)</p>\nwhich is wrong.\nSure, this is an edge case, and it's highly unlikely that an URL will end in a single unpaired parenthesis but...\n. on the other hand, it's really easy to workaround this issue:\nmd\n(<https://www.something.com/1234>)\n. Regardless, since we have a \"GitHub markdown flavour\", that tries to follow github rules, I will create an option that implements the rules of github regarding parentehsis in autolinks.\nThis option will be disabled by default, and you would need to explicitely enable it.\n. This was added as a new option called excludeTrailingPunctuationFromURLs. Enabling this option will remove trailing punctuation and parenthesis from URL parsing in auto linking.. Duplicate. Check https://github.com/showdownjs/showdown/issues/244\n. This is weird. Can you help me, step by step, reproducing the issue?\n. Might be related to this commit: https://github.com/showdownjs/showdown/commit/413511c73125907d31d0050b8f0d340efa0cb9f2\n. I will keep an eye on both issues\n. I've never used Electron so i'm far from being an expert but:\nWouldn't forcing showdown to load \"browser style\" create problems for other modules (like nodejs modules) that expect showdown to load via CommonJS? \nIn your case, you're using a library that uses showdown in browser context, but there might be an Electron user that is using a npm module which expects showdown to be loeaded with require.\n. @gbaumgart I've just tested showdown with your PR under Electron. With another library, IonicaBizau/github-portfolio, it fails since showdown is no longer loaded via \"require\".\nLike I said, I'm no Electron wizard so I might be doing something wrong.\n@gbaumgart Would you mind testing this also? with this 2 libraries?\n. Not really no. But alas, poluting the global namespace with variables does not seem a good solution too.\nThis really has to be addressed from Electron side. I don't see another way.. Thanks @butchmarshall \n. I couldn't reproduce the issue you refer to. Both in demo and in this fiddle is working properly.\n- demo\n- fiddle\n. You need to add the property markdown to the tag In order to allow markdown parsing inside a specific html tag.\n<p markdown=\"1\">this is **bold**</p>\n. @cmpilato You are right. Thank you.\nFixed the documentation\n. @jyio Thanks. I will have a look. Maybe change it to defaultValue. It's mostly used internally, so I doubt that change would affect anyone.\n. Should be fixed now\n. It has something to do with the comment, since the table works properly, when parsed alone.\nIt only happens when there is no new line between the comment and the table.\n. I will look into it as soon as possible\n. Ok, after further inspection, it seems the problem lied with a regex lookahead that was taking too long to complete. The regex was modified and simplified and the issue seems fixed now. \n. Issue is fixed, check this link\n. According to the spec, a space is not required between # and the rest of the text.\nFor this reason (and because it's a breaking change) making this an option is preferable.\n. Showdown follows the original markdown spec. https://daringfireball.net/projects/markdown/syntax\nIn markdown.pl, created by the original author, spaces are explicitely optional.\ncommonmark is a variant of the markdown spec\n. Yes, that would be the best option. I ask you, however, to make the MPR against develop branch instead of master\n. Since there's no update on this, I'm gonna implement this as a feature myself.. @mazeappleton What do you mean by editor?\nI couldn't reproduce your problem. The editor is working fine\n. It must be a problem with ghost then. Try to ask in their issue tracker.\n. https://github.com/TryGhost/Ghost/issues/5625\n. ?\n. Really? IE8 complains? Why?\n. this is mental... But does this only happen with console object? or with any other variable?\n. So if I understand you correctly, wordpress converts:\nhtml\n<p>hi\nthere</p>\ninto\nhtml\n<p>hi<br/>\nthere</p>\nSo you wish showdown's output to be\nhtml\n<p>hi there</p>\ninstead. Is that right?\n. Well, it's actually easy to fix the issue, without requiring any modification to showdown's source code.\nSimply run a beautifier in showdown's output, for instance: https://github.com/beautify-web/js-beautify\nHere's a working fiddle example\nExample:\n``` html\nInput\n\nThis is some\ntext with a new line\nthis is another\nparagraph with a break\n\nShowdown's Output\n\nAfter beautify\n\n\n\n\n\n```\njs\nvar conv = new showdown.Converter();\nvar html = conv.makeHtml(document.getElementById('src').value);\ndocument.getElementById('trg').value = html;\ndocument.getElementById('trg2').value = html_beautify(html);\nTake note that you might need to tweak beautifier options a little bit to fit your needs\n. Please check the documentation about this topic in the wiki\nhttps://github.com/showdownjs/showdown/wiki/Markdown's-XSS-Vulnerability-(and-how-to-mitigate-it)\n. This should be fixed now um latest release\n. This test is not testing autolink function \n. More information is needed. Please create a fiddle to exemplify the issue.\n. Closing the issue as no update in 30 days\n. Can you post an example with the issue? So we can verify and test this?\n. Closing as no update in 30 days\n. Can you create a snippet showing the issue?\n. Confirmed in the online demo.\nI will look into this as soon as possible\n. This should be fixed now.\n. @siriscac, this update was not released yet.\nThe next showdown version should include it\n. Released v 1.4.4 that includes this fix\nhttps://github.com/showdownjs/showdown/releases/tag/1.4.4\n. I'm not quite sure what you mean but the converter is getting passed correctly to extensions.\nThe documentation clearly states that the \"converter\" object is passed as the second argument to \"filter\" type extensions.\nYou can see that behavior in this fiddle\n``` js\nshowdown.extension('test', function () {\n  return {\n    type: 'lang',\n    filter: function(text, converter, options) {\n      console.log('text', text);\n      console.log('converter', converter);\n      console.log('options', options);\n      return text;\n    }\n  };\n});\nnew showdown.Converter({extensions: ['test']}).makeHtml('some text');\n``\n. You are correct, listeners are still very experimental, they don't even have proper testcases\n. @msfragala The bug you referred was fixed. However, if you're interested in helping developing listeners, that would be great. What do you mean? More linebreaks in the html output?\nWhy does it make any difference?\n. Yes, this is used to speed up the parser engine (blocks are wrapped in double linebreaks).\nLinebreaks in HTML code are ignored anyways.\nWhy is it an issue to have extra linebreaks in the output?\n. should be fixed at f97e072, at least partially.\nLists still retain double linebreaks, but those are needed for quickness of the internal parser.\nI'm working on a way to remove them without hindering performance\n. Ok, lists now should be fixed too.\n. No, the problem is that the urls aren't properly encoded (and possibly wrong). I've removed the space betweenuberandapi` and the images display properly.\nCheck the example\n. As a sidenote, showdown does not encode/decode urls automatically. But it might be a useful feature/enhancement.\n. After looking through this for a while, I couldn't find a sure way of automatically encoding URLs.\nFor starters, there's no foolproof way of knowing if a URL is encoded or not. For instance, this URL http://example.com/20foo%20bar might be an encoded form of http://example.com/20foo bar or not be encoded at all. The only way to know is through testing the URL itself or thwough human intervention.\nSo, i'm afraid this feature won't be implemented, at least in the near future, so i will be closing this.. @LeahPike I've been trying, but couldn't reproduce the issue you describe.\n. @LeahPike have you found out what the problem was?\n. You need to use html \n. As per the readme and the documentation you need to turn on the tables option.\n- through the constructor\njs\n  var converter = new showdown.Converter({tables: true});\n- through the setOption() method\njs\n  var converter = new showdown.Converter();\n  converter.setOption('tables', true);\n. In the wiki. https://github.com/showdownjs/showdown/wiki\nI've added your extension\n. Hi @TheNofx68! It's not in our plans to port the library into another programming language as it would be very time consuming and meant we need to keep parallel development of the two libraries while maintaining the output identical.\nIf you don't mind using nodejs in conjunction with PHP or Python, you can call showdown's CLI from your application and read the output. It's pretty straightforward and should work pretty much out of the box.\nHowever, if you REALLY wanna get rid of installing nodejs altogether you might try:\n- Convert JS to Python\n- Compile showdown's library - Doesn't get rid of nodejs per se, but comes bundled with the app iteself in a single binary, so you don't really need to install or configure it.\nAs a last resort, you might wanna try https://github.com/michelf/php-markdown. The output should be very similar, although tehre are some features in showdown not supported in php-markdown and vice versa.\n. > How to remove prefix-bash from the class  (I've tried with showdown.getOptions() I have seen no related options to setup)\nThrough showdown options you can't remove the class language-bash. The only only is with a output extension.\nBut what is the problem of having an extra class there?\n. According to the documentation, nested elements must have, at least, 4 spaces indentation.\nmd\n* aaa\n   1. bbb\nYou can check the demo with your example working \n. You are absolutely right, it's a bug. I will take a look a soon as possible.\nRegardless, the 3 space indentation rule should apply to both ordered and unordered lists. They should behave exactly the same.\n. should be fixed now in latest development\n. ALso check the documentation regarding extensions https://github.com/showdownjs/showdown/wiki/Extensions\n. @icymind Are you using the latest showdown version? This issue was fixed in showdown version 1.2.2\n. I've just noticed something in your command. By default, the CLI tool has all options turned off. This means github's fenced codeblocks (a non standard markdown feature) is turned off.\nSo, the appropriate command should be:\nbash\nshowdown makehtml -i demo.md -o demo.html --ghCodeBlocks=true\nJust tested locally and is working fine\n. As stated in #269 this will break modules that, under Electron, expect showdown to load as a npm module.. This is a question out of scope for this issue tracker since it's PHP related and not at all related to showdown (you can try www.stackoverflow.com, for instance).\nHowever, the problem is that your string has linebreaks.\nSo the resulting code is something like this:\n```javascript\n\nvar converter = new showdown.Converter(),\n    text = '#Hello</p>\n<p>How are you\n    jjjjjjjj',\n    target = document.getElementById('output'),\n    html = converter.makeHtml(text);\n    target.innerHTML = html;\n\n```\nwhich is invalid javascript.. @ibenschop Need more context. Please provide an example with input, expected result and actual result.. So the problem is that MS Word is interpreting strikethrough as something else?. That is a tricky one.\nHostnames without a trailing dot are potentially ambiguous. A trailing dot means that the hostname is fully qualified and may not be relative to the local search domain.\nSee this stackexchange link for a funny example.\nAlso, a URI can have a dot at the end of the \"path\"portion. For instance, https://en.wikipedia.org/wiki/Washington,_D.C.\nThis means you can't safely assume that the final dot is not part of the URL.\nHowever, you rarely need to use fully qualified domains. Only in very specific situations where a URL might be ambiguous. Also, URLs with trailing period are very rare.. So I really don't know if we should go for practicality or correctness. \nThe practicality argument is that you rarely need periods at the end of the url and in most cases the period marks the end of the sentence.\nThe correctness argument is that you can't safely assume the period isn't needed at the end of the URL.\nThere's also the compatibility argument, since showdown as a GitHub flavor, which tries to follow GFM as much as possible, so I think the compromise would be to create an option that treats URLs as GitHub does (in which trailing punctuation marks are left outside the URL), see #266\nAlso, there's an interesting discussion at http://ux.stackexchange.com/questions/15226/should-a-sentence-ending-with-a-url-terminate-with-a-period\n. This was added as a new option called excludeTrailingPunctuationFromURLs. Enabling this will remove trailing punctuation and parenthesis from URL parsing in auto linking.. This would not make sense since Showdown is as parser and is used in browsers, nodejs and offline.\nMore importantly, showdown is not asynchronous, so ajax calls would not be possible.\nYou can, however, implement your own extension to give a placeholder for an ajax call. Check fiddle here https://jsfiddle.net/tivie/neqmojL2/\nExample:\n```html\n\nsome text\n{{https://raw.githubusercontent.com/showdownjs/showdown/master/README.md}}\n{{https://raw.githubusercontent.com/showdownjs/showdown/master/CREDITS.md}}\n\n\n```\n```js\nshowdown.extension('mdinclude', function () {\n    var myGb = [];\n    return [\n    {\n      type: 'lang',\n      filter: function(text) {\n        text = text.replace(/\\n{{(.*)}}\\n/g, function(wm, url) {\n          var n = myGb.push('') - 1;\n          return '\\n\\n~M~I' + n + '~M~I\\n\\n';\n        });\n        return text;\n      }\n    },\n    {\n        type: 'output',\n      filter: function(text) {\n        text = text.replace(/~M~I(\\d+)~M~I<\\/p>/g, function (wm, n) {\n            var otp = myGb[n];\n          return otp;\n        });\n        myGb = [];\n        return text;\n      }\n    }\n  ];\n});\nvar cnv = new showdown.Converter({extensions: ['mdinclude']});\ndocument.getElementById('trg').innerHTML = cnv.makeHtml(document.getElementById('src').value);\n// Cicle through all md-includes\nvar mdIncludeList = document.getElementsByTagName('md-include');\nfor (var i = 0; i < mdIncludeList.length; i++) {\n        var url = mdIncludeList[i].getAttribute(\"data-url\");\n    replaceMd(url, mdIncludeList[i])\n}\n//AJAX CALL - You can use jquery or something else\nfunction replaceMd(url, DOMObj) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', url);\n  xhr.onload = function() {\n      if (xhr.status === 200) {\n        var myDiv = document.createElement(\"div\");\n        myDiv.innerHTML = cnv.makeHtml(xhr.responseText);\n        DOMObj.parentNode.replaceChild(myDiv, DOMObj);\n      }\n      else {\n          alert('Request failed.  Returned status of ' + xhr.status);\n      }\n  };\n  xhr.send();\n}\n```\n. You can use an extension that alters rendered tables and adds the proper class to them.. js\nconverter.addExtension(<extension code>, <extension name>)\nhttps://github.com/showdownjs/showdown/blob/master/src/converter.js#L344. The bug was verified. For some reason, nbsp breaks the hr algorithm and dashes are interpreted as list marks! I'm looking into it. Upon further inspection, it seems the bug occurs with any character (and not only with nbsp) after a series of dashes or asterisks.\nFrom what I could gather, this bug is present from the beginning of showdown and is common to other markdown parsers (such as marked or commonmark).\nThe problem lies with the list parser. Basically it interprets the line as a series of nested lists (which is wrong).\nI'm currently working on a fix, but I have to rewrite the list parser.. 10b3410 and 6e90f7c should address this issue. already did, :). Yes, it seems that, although the output is now correct, something is still slowing down the library in this specific context.\nI'm investigating. However, I would ask you to open a new issue. @yurikhan \n\nnbsp causes trouble in older browsers and some regex flavors\n\nActually, I can rollback the \"nbsp fix\", since the issue was not caused by nbsp but rather a logic bug in the parser, which was fixed.\nI ask you to open a new issue with this, and I will roll a option for allowing nbsp. Use an ouput extension. You can check the wiki about extensions here.\nThere are a couple of examples in the issue tracker too.\nExample fiddle:\njs\nshowdown.extension('myext', function() {\n  return [{\n    type: 'output',\n    regex: /<ul>/g,\n    replace: '<ul browser-default>'\n  }];\n});\n. Please take a look at the documentation, wiki or README.md, namely the option literalMidWordUnderscores that does exactly what you're asking for.. I've narrowed the problem (and found the culprit) but I'm really not sure how to fix it. In fact, I don't even know why it is so slow.\nI've opened a question in codereview, asking for help. Maybe the collective knowledge can find an answer or, at least, shed some light on this strange behavior.. Should be fixed now.. Bug verified.. Do you notice this behavior with other elements aside from spans and blocks in list?. @nemoDreamer This should be fixed now. Do you mind testing it?. @schoettler It's working fine. Was fixed in 113f5f6. no prob. version 1.5.1 had a bug with simpleLineBreaks in lists (see #316 )\nThe regex was changed to only add line breaks in word boundaries.\nEdit: It seems javascript \\b does not recognise anything other that ASCII characters as, well \"word characters\" which is idiotic.. Related to #323 \nShould be fixed in latest develop. Showdown's demo page uses foundation css with a few tweeks here and there. (http://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/css/foundation.min.css)\nCheck the updated fiddle\nhttp://jsfiddle.net/tivie/oLofqLzf/3/\n. @veggiemonk thanks! \nI will be adding an option for this soon (replacing spaces with dashes).\n. I did. latest version should address this and more.\nWe're replacing spaces with dashes and removing the following characters: ][&~$!@#*()=:/,;?+'.%\\\nCan you check if these characters are enough or if there are more that github replaces?. I've grabbed the replaced chars from github's redcarpet. https://github.com/vmg/redcarpet/blob/v3.4.0/ext/redcarpet/html.c#L276\nAdded < and > so this should cover every character github removes from header ids.\nThe improved version is available from commit d499feb2 onward\n. Thank you very much @veggiemonk \nInstead of letting users pass a regex, I prefer to mimic github id parsing rules directly.. Due to the nature of markdown itself, each block, to be parsed correctly, requires context.\nFor instance, \n- bar\ncan either mean:\n\na sub list\n    ```\nfoo\nbar\n```\n\n\n\n\nor a block of code\n\nThis means the parsing, to catch all possible edge cases, must be done sequentially. \nTurning showdown in async would prove extremely dificult.\nHowever, I think you can pre parse the text with math-jax and then parse it through showdown. Since html is valid in markdown, showdown would leave those blocks alone.\n. @Awk34 I think I might be missunderstanding you (or failing to grasp the concept), but I don't see how it can be accomplished properly.\nI mean, sure, I can wrap every subparser in a promise, since you can \"inject\" an extension before or after any subparser, but it seems you had a simpler way in mind...\n. Since parser order is mandatory, and they have to run sequentially, in your example the text = syncParser2(text); can only run after the extension completes execution or the extension might not work.\nSo, I can only think of 2 ways of allowing async extensions properly:\n\nblock the execution of the parser and wait for said extensions to finish processing (effectively turning async into sync)\nRewriting the library, making each sub-parser async,\n\nScenario 1\nasync / await browser support is currently very limited and showdown should be reasonable cross browser compatible (ES5).\nWith ECMAScript 5, I don't know how to block execution and wait for promises to resolve. \n@Awk34 Maybe there is a way?\nScenario 2\nThis is possible, obviously, \nBut it would require a complete refactoring of the library and respective tests, something I would rather not do.\n@Awk34 I was hoping I've missed something, and there was a 3rd option.. I will put this on pending. Although I think I found a way to implement this, this requires a bit of rewriting in the library and an overhaul of the testing framework too, to support async tests.\n@Awk34 I welcome any PR though, so if you're interested!. verified. Related to #318\nShould be fixed in latest Develop. Duplicate of: #241 #238 #209\n. hey @unional \n\nIs an extension needed / possible / available?\n\nYes, the support for github fenced code blocks is available by default\n\nIt seems like --ghCodeBlocks is disabled by default in contrary to the README.\nversion: 1.5.5\n\nThat is not correct. ghCodeBlocks is enabled by default. \nIf you are refereing to the cli tool, however, then you are right.\nIn the cli tool, --ghCodeBlocks is disabled by default.\nThe cli tool, for simplicity reasons, assume default flavor is vanilla and each option must be enabled by hand, wither with a config file or using the command flags.\nThat isn't mentioned in the documentation, so I will be adding a note as soon as possible,\n. The new CLI tool now follows showdowns behavior since v 1.6.0.\nCLosing this. as per documentation:\n\nWhen option parseImgDimension is activated\nmd\n![Alt text][id]\n[id]: url/to/image =250x250. As per documentation\n\njs\nconverter = new showdown.Converter({parseImgDimension: true});\nor\njs\nconverter.setOption('parseImgDimension', true);. As per Github documentation, github markdown flavor requires a space between # and title text.\nShowdown mimics this through the option requireSpaceBeforeHeadingText which gets enabled when you activate github flavor.\nEither disable this option, disable github flavor or add a space between # and title text.. 1. Showdown follows the original markdown spec and not commonmark (which is a spinoff or flavor).\n\n\n# followed by text is only interpreted as an header if # starts a newline, not in the middle of the text\n\n\nA space between # and the text can become mandatory for headers if you enable the option requireSpaceBeforeHeadingText, as stated in showdown's documentation:\n\nrequireSpaceBeforeHeadingText: (boolean) [default false] Makes adding a space between # and the header text mandatory (since v1.5.3). Duplicate #277 . Hey @alfhenrik It makes me sad no one reads the awesome documentation we wrote. :P\n\n\n\nCommonmark is not the markdown spec, but rather a markdown flavor. Showdown does not follow commonmark spec, it follows the original spec, as stated in our documentation.\n\nAlthough Showdown has evolved since its inception, in \"vanilla mode\", it tries to follow the [original markdown spec][md-spec] (henceforth refereed as vanilla) as much as possible.\n\n\nRegardless, that is indeed a bug. If an URL containing spaces is found between < and > it should be left alone. I will look into it as soon as possible\n[md-spec]: http://daringfireball.net/projects/markdown/. @alfhenrik I had a look and it turns out the problem only arrises if you turn the option simplifiedAutoLinks on. (I was hasty claiming this was a bug =P)\nThis happens because the parser will look for links enclosed in <> first.\nThen, since it does not find anything that matches completely, it proceeds.\nWhen simplifiedAutoLinks is on, the parser will then look for un enclosed links as well.\nIn your case it finds a match and so, it will parse it.\nThis means showdown's behavior is correct. In fact it matches Github's behavior.\nmd\n<http://www.google.com foo>\nhttp://www.google.com foo\n\nSo, to match commonmark behavior, you need to turn off the option simplifiedAutoLinks.\n. @obedm503 yes. Space is not a valid character in a URI.. Verified. It seems v1.3.0 introduced this bug. This only happens with mail addresses though.. Should be fixed now. The correct output should be:\nhtml\n<p>pointer *ptr *thing</p>\n<p>pointer **ptr **thing</p>\n<p>something _else _bla</p>\n<p>something __else __bla\u200b</p>. Duplicate of #249 #247 #222 . Adding extra syntax to the link element is not a good idea as it diverts  from the markdown spec and breks compatibility.\nHowever, there are 2 easy ways to add this to links:\nUsing embeded html\nfiddle\nmd\nsome text with a link <a href=\"http://www.google.com\" target=\"blank\">google</a>\nCreate an extension\nSyntax\n[adjustable](http://google.com \"Giiidd\"){:target=\"_blank\"}\n\nTest online\nfiddle\nCode\n``` js\nshowdown.extension('targetlink', function() {\n  return [{\n    type: 'lang',\n    regex: /[((?:[[^]]]|[^[]]))]([ \\t]<?(.?(?:(.?).?)?)>?[ \\t]((['\"])(.?)\\4[ \\t])?){\\:target=([\"'])(.)\\6}/g,\n    replace: function(wholematch, linkText, url, a, b, title, c, target) {\n  var result = '<a href=\"' + url + '\"';\n\n  if (typeof title != 'undefined' && title !== '' && title !== null) {\n    title = title.replace(/\"/g, '&quot;');\n    title = showdown.helper.escapeCharacters(title, '*_', false);\n    result += ' title=\"' + title + '\"';\n  }\n\n  if (typeof target != 'undefined' && target !== '' && target !== null) {\n    result += ' target=\"' + target + '\"';\n  }\n\n  result += '>' + linkText + '</a>';\n  return result;\n}\n\n}];\n});\n``. this specific extension no. But this one will make all links in the page open astarget=\"_blank\"`:\nfiddle\nCode:\njs\nshowdown.extension('targetlink', function() {\n  return [{\n    type: 'html',\n    regex: /(<a [^>]+?)(>.*<\\/a>)/g,\n    replace: '$1 target=\"_blank\"$2'\n  }];\n});. You SHOULD NOT enable both, enable just one since they will colide.\nYou also have to activate them:\nvar conv = new showdown.Converter({extensions: ['targetlink']});. you're missing an s in extensions. it's:\n\nshowdown.Converter({extensions: ['targetlink']});\n\nAlso you don't need to set all those options if you use showdown.setFlavor('github'), since github flavor sets the following options to true:\nomitExtraWLInCodeBlocks:              true,\n        prefixHeaderId:                       'user-content-',\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true\nand encodeEmails is set to true by default\n. So, to make it clear, you want to parse markdown inside HTML tags?\n\nLike this:\n```md\n\nheader\n\n```\nbecomes:\nhtml\n<div>\n<h1>header</h1>\n</div>. As explained in the [documentation][], to enable markdown parsing inside an HTML block, use the attribute markdown or  markdown=\"1\"  or data-markdown=\"1\"\n[documentation]: https://github.com/showdownjs/showdown/wiki/Showdown's-Markdown-syntax#handling-html-in-markdown-documents. > pretty much. I want to be able to say \"treat < like a letter\". (Which is subtly different from \"parsing inside HTML tags\", although not on an implementation level - I don't even want it to think it's looking at HTML tags at it, it's just more \"not markdown\" =)\nWhat?. It's the same for node or browser.\n```md\n\nthis becomes strong\n\n\nthis does **not**\n\n```\nHere's working in the demo\n. well, directly no, but if you want showdown to \"ignore\" embeded HTML  you can achieve that using an extension or using some preparsing.\nPreparsing\nThe preparsing option is a lot simpler, albeit a bit hackish. You can just replace < and > with some other character, before running the text throgh showdown, and then replace back that character.\nsee fiidle here\nThis will treat < and > as 'a letter', like you asked. Please note that no< character will be escaped, which can have some side effects.\nYou can twink with the replacing rules, so it will only match certain conditions.\nextension\nWIth an extension you can control how HashHTMLCode subparser behaves, telling it to treat every HTML  tag has having the attribute markdown. If you feel the preparsing solution is not enough, I can post a basic extension too. Showdown does not wrap the output in any div. However, you can do it yourself 2 ways:\nin the input\nmd\n<div class=\"some-class\" markdown=\"1\">\nsome *markdown*\n</div>\ndon't forget to add markdown=\"1\" attribute or markdown won't be parsed inside the div\nwrapping the output in a div\njs\nvar otp = converter.makeHtml(input);\nvar div = document.createElement(\"div\");\ndiv.innerHTML = otp;. No answer in 7 days. Closing. @discordianfish You need to add markdown=\"1\" to each block element you wish to be parsed as markdown.\nsee live example\nmd\n<div markdown=\"1\">\n<div markdown=\"1\">\n<div markdown=\"1\">\n<div markdown=\"1\">**foo**</div>\n</div>\n</div>\n</div>\nKeep in mind, however, that the parser will exponentially slow down for each level. The stylesheet is not added to the document but rather to the editor itself.\nYou can inspect http://showdownjs.github.io/demo/ (by pressing F12 in your browser) to see how the demo was done.. Not out of the box. But it's quite possible with an extension (check fiddle https://jsfiddle.net/tivie/knf9nb8f/)\n```js\n// Extension\nshowdown.extension('header-anchors', function() {\nvar ancTpl = '$1<a id=\"user-content-$3\" class=\"anchor\" href=\"#$3\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$4';\n\nreturn [{\n    type: 'html',\n    regex: /()(.*<\\/h\\2>)/g,\n    replace: ancTpl\n  }];\n});\n```\n. Bug verified. Should be fixed now. \nNOTE: Leave the issue open. It will be closed automatically when develop is merged into master. Well, yes. You can use the cli tool for that.\nIn this example showdown is installed globally but you can achieve the same thing with a local installation.\nWindows\ncmd\necho ^<html^>^<head^>^</head^>^<body^> > otp.html\nshowdown makehtml -i \"path/to/source/file.dm\" >> otp.html\necho ^</body^>^</html^> >> otp.html\nunix\ncmd\necho \"<html><head></head><body>\" > otp.html\nshowdown makehtml -i \"path/to/source/file.dm\" >> otp.html\necho \"</body></html>\" >> otp.html\n. Verified!. Should be fixed now. If you don't mind me asking, what's the problem with showdown depending on yargs for the cli?. No answer for 24 days, closing. that is strange... what version of showdown are you using?\nI've tested this on: showdown 1.6.4 on node 6.10-win-64x and it's working fine:\n\n. Tested on:\n - Windows 10\n - node 7.7.1\n - showdown 1.6.4\nAnd it's still working fine:\n\n. you can also try running this command instead:\nbash\nshowdown makehtml -i README.md\nand check if it works. it seems showdown is able to find the README.d file but it is unable to read from it.\nCan you try doing this:\necho \"# foobar\" | showdown makehtml\n\n. I've been testing this and could not reproduce the issue. \nAnd it's really bothering me!. please elaborate. well, this is a hard one to tackle.\nBecause this is a valid address http://example.com/foo), albeit strange.\nThe only way to know whether the trailing parenthesis belongs to the URL or not is by context.\nSo I will need to think about this issue for a bit.\n. Minor update: The issue is not forgotten, but I haven't figure out an efficient way of doing this...\nI have a partial fix: It trims the url of punctuation marks. Example:\nmd\nCool site (see http://example.com).!?;,\nhtml\n<p>Cool site (see <a href=\"http://example.com\">http://example.com</a>).!?;,</p>\nbut it fails in this case\nmd\nFor a cool site see http://example.com/(cool_site).\nhtml\n<p>For a cool site see <a href=\"http://example.com\">http://example.com/(cool_site</a>).</p>\n. Should be fixed now.\n@jendewalt @rugk Can you test please? Let me know if it worked for you.\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Thank you very much. Fixed. This is indeed a bug but a hard one to tackle, due to efficiency constraints. I have a fix, but it slows down the parser considerably. . Until I can find a suitable fix, that doesn't slow down the parser too much, the workaround is not indenting html code.. Yes, they have to be processed AFTER HTML is hashed. If you install dev dependencies, you can run the command grunt performance and compare the results with previous implementations. Although performance degradation, in this case, is best seen with documents with \"indented HTML\".. This should (hopefully) be fixed now, without much performance issues.. I need to add a proper test case for this and will merge when done. Please provide an example with:\n  - showdown configuration\n  - input\n - expected output\n - actual output. Showdown, by default, removes spaces in titles to generate the ids. \n\n```md\nsome header\n```\nhtml\n<h1 id=\"someheader\">some header</h1>\nGithub has a different behavior. It replaces spaces (and other disallowed id chars) with dashes -.\nTo use the github behavior, use the option ghCompatibleHeaderId. No prob. Duplicate of #337 #249 #247 #222. Since this is a feature that's been requested over and over again, I will add this as a feature. Should be implemented. Use develop branch. what FIrefox version and for what OS?. We really need automated browser testing. I've tested and this is a bug of firefox 53. See https://bugzilla.mozilla.org/show_bug.cgi?id=1147371. @simov thanks.\nDo you mind issuing a PR with a testcase for this issue?. Should be implemented. Well, the original spec states that, in lists, sub-blocks must be indented 4 spaces (a sub-list is a sub-block). But that was miss implemented in showdown's original version. The rule we used was that sub-lists required 3 spaces indentation.\nWe fixed the bug but created the option disableForced4SpacesIndentedSublists for backward compatibility for people upgrading versions. The option is not meant to be used in \"production\" and we can't really fix it as it would defeat the purpose of backwards compatibility.\nCheck the demo:\n. I will have a look and think in a way of making this work with 2 spaces and not break past behavior.. Meanwhile, check the comparison of implementations. This issue is quite complex because how other sub blocks behave. For instance, it becomes quite problematic with sublists which have a code sub-block:\ninput\n```md\n - this is indented 1 space\n    - this is indented 4 spaces\n      code needs 10 spaces indentation. Why?\n\n - this is indented 5 spaces\n\n       code needs 11 spaces indentation. Why?\n\n  - this is indented 6 spaces\n\n        code needs 12 spaces indentation\n\n   - this is indented 7 spaces (why is it level 2)\n\n         code needs 13 spaces indentation\n\n    - this is indented 8 spaces (why is it still level 2)\n\n          code needs 14 spaces indentation\n\n     - this is indented 9 spaces (why is it still level 2)\n\n           code needs 15 spaces indentation\n\n```\nresult\n\n\nthis is indented 1 space\n\n\nthis is indented 4 spaces\ncode needs 10 spaces indentation. Why? \n\n\nthis is indented 5 spaces\ncode needs 11 spaces indentation. Why?\n\n\nthis is indented 6 spaces\ncode needs 12 spaces indentation\n\n\n\nthis is indented 7 spaces (why is it level 2)\n code needs 13 spaces indentation\n\n\n\nthis is indented 8 spaces (why is it still level 2)\ncode needs 14 spaces indentation\n\n\nthis is indented 9 spaces (why is it still level 2)\ncode needs 15 spaces indentation\n\n\n\n\n\n\nAs you see, even github gets this wrong. Showdown, on the other hand, always behaves consistently (when disableForced4SpacesIndentedSublists is off). (see the demo)\nThat being said, I have a partial fix, but still haven't had the time to properly address all the issues regarding this.\ndemo: http://demo.showdownjs.com/#/-%20this%20is%20indented%202%20spaces%0A%20%20%20%20-%20this%20is%20indented%204%20spaces%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20this%20is%20code%20and%20indented%20with%2012%20spaces%20(4%2B8)%0A%0A%20%20%20%20%20-%20this%20is%20indented%205%20spaces%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20this%20is%20code%20and%20indented%20with%2012%20spaces%20(4%2B8).%20Also%20works.%0A%20%20%20%20%20%0A%20%20%20%20%20%20-%20this%20is%20indented%206%20spaces%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20this%20is%20code%20and%20indented%20with%2012%20spaces%20(4%2B8).%20Also%20works.%0A%0A%20%20%20%20%20%20-%20this%20is%20indented%207%20spaces%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20this%20is%20code%20and%20indented%20with%2012%20spaces%20(4%2B8).%20Also%20works.%0A%0A%20%20%20%20%20%20%20%20-%20this%20is%20indented%208%20spaces%20(becomes%20sub%20sub%20list)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20Text%20is%20indented%2012%20spaces%20(4%2B4%2B4)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Code%20needs%2016%20indentation%20of%2016%20spaces%20to%20work. can you please provide more information?. related to #374. Closing in favor o #374 . thank you very much @brecke . What do you mean?\nThis input:\n<code-example>\n  ...\n</code-example>\nproduces the following html output:\n<code-example>\n  ...\n</code-example>\nas it should...\n. Ah, you want to prevent showdown from parsing the \"contents\" of custom blocks?\nYou need to use a Lang Extension or a Listener Extension that captures these custom blocks and hashes them\n. >I am indeed currently using a lang extension to workaround this problem, but I believe that it will become increasingly common to have custom elements in our HTML and that support for this should be built in.\nHTML5 does not support custom elements. XHTML does, however.\n\nIf you didn't want to treat all custom elements as block level, one option would be to provide users with a configurable white list of matching element names to check...\n\nWell, that would make the parser extremely slow since each element added would require to check for balanced tags to make sense of them, effectively turning Showdown into an HTML parser as well.\nFor simple cases, like <foo>bar</foo> it would not be a problem, but complex cases, like:\nxml\n<foo>\n  <bar>\n    <baz>bazinga</baz>\n    <baz>bazinga2</baz>\n    <bar>blabla</bar>\n  </bar>\n</foo>\nwould be a nightmare.\nRight now Showdown uses some clever tricks to enhance parsing speed. For instance, it separates blocks from spans and does not look for nested block elements inside span elements (as those do not make sense). With custom elements, those rules could not be applied, so each element added would exponentially slow down the parser.\nAlso, letting users add custom elements would be extremely error prone. (f they m,iss a closing tag showdown would choke)\nAnd since extensions are supported, it's actually very simple to make an extension for specific use cases. ?. You can use an output extension to accomplish this (see fiidle)\njavascript\nshowdown.extension('headerlink', function() {\n  return [{\n    type: 'output',\n    regex: /(<h(\\d) id=\"(.+)\">(.+?))(<\\/h\\2>)/g,\n    replace: function (wm, g1, g2, id, g4, g5) {\n    return g1 + ' <a href=\"#' + id + '\">link</a>' + g5;\n    }\n  }];\n});. That's actually a non standard implementation. But since GFM (github) also uses it, we will implement it as a feature.. Yes, I know. But, according to the markdown spec, escaping with backslash is reserved for characters that have special meaning in markdown context, not HTML. < is a \"normal\" character to markdown, it has no special meaning.\nIn markdown, escaping with backslash tells the parser that it should ignore the character and leave it as it is. For example, \\*\\*foo\\*\\* will be parsed as **foo** and not <strong>foo</strong>.\nThere's also the problem with unintended escapes. Example: 'This sentence uses a backslash \\followed by a strong tag`\nHowever, since GFM supports escaping html entities, this will be implemented as an option.. Yeah, they changed it a bit in favor of commonmark. .  - [ ] #394 A backslash at the end of the line is a hard line break\n - [x] #374 Review allowed character escaping\n-  [ ] #377 Use numbered lists that start at a specific number. Thank you @zusamann \nIt is indeed a great idea to add this to the cookbook, which I will do as soon as possible.\n. Added this to the wiki. https://github.com/showdownjs/showdown/wiki/Add-default-classes-for-each-HTML-element\nThank you very much for your contribution!!. > I suppose the proposed solution doesn't take into account code blocks, whose content shouldn't be modified at all.\nWhile this is technically true since, per the HTML spec, code tags allow any phrasing content, showdown always html-encodes html tags inside code blocks (as per markdown's own specification).\nThis means that:\n```md\nsome text\nthis is some<b>code</b>\n<span>block</span>\n\n```\nwill be literally converted into:\nhtml\n<p>some text</p>\n<pre><code>\nthis is some&lt;b&gt;code&lt;/b&gt;\n&lt;span&gt;block&lt;/span&gt;\n</code></pre>\nthe only way you can have proper html tags inside code tags is when HTML is present in the source/input:\nhtml\n<pre><code>\nthis is some<b>code</b>\n<span>block</span>\n</code></pre>\nWhile the last case is perfectly fine and valid, it's a rather odd edge case.. humm... you can only do that by hijacking the list parser through an extension... but the list parser is very complex, so it's no easy task. Github supports this feature (and it's even mentioned in the original spec) so it will be implemented in the next minor release.. Implemented on 9cdc35e and should be available next release @ v1.8.0.\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.\n. Verified. Should be fixed now. Verified. should be fixed now. Soon. I'm planning the next release but wanted to merge https://github.com/showdownjs/showdown/pull/358 this PR that is dependent on creating a couple of tests. As soon as #358 is merged, a new showdown release will be published.. ?. glad you figure it out. While it's possible to enable/disable subparsers, Showdown parser, as a whole, relies on sequential parsing (as it simplifies regex rules and improves speed a lot)\nThis means in some cases, disabling a determined subparser produces errors in another subparser.\nFor instance, disabling the \"anchors parser\" produces parsing errors in \"Emphasis and strong parser\".\nSo, unless showdown is completely rewrote, such a feature os not possible, as it would make showdown very unreliable.\n. Instead of making a parser from scratch, you can try to use showdown's subparsers and create a new logic around them. For instance (see working fiddle):\n```js\nfunction myConverter (text) {\n        var options = {};\n    var globals = {\n        converter: {\n        _dispatch: function (a, text) {\n            return text;\n        } \n      }\n    }\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n    // transform bold and italics\n    text = showdown.subParser('italicsAndBold')(text, options, globals);\nreturn text;\n\n}\nvar html = myConverter('some bold and italic');\nconsole.log(html);\n```\n. I'm currently looking into this and will try to merge before next release. merged this PR with some changes. The custom ID will be the last bracketed text.\n```md\nsome header {foo} {bar} {baz}\n```\nresults in:\nhtml\n<h1 id=\"baz\">some header {foo} {bar}</h1>. ## TL;DR;\nHey @vitosamson. It's not broken. To disable underscores being interpreted as emphasis you should enable the option literalMidWordUnderscores\nfurther explanations\nUnderscores are markdown magic characters and delimit emphasis. Mid word emphasis is allowed in markdown. empahasis and strong take precedence over auto links.\nThe option literalMidWordUnderscores disables this behavior, so that autolinking takes precedence over emphasis and strong.\n. http://showdownjs.github.io/demo/#/http%3A%2F%2Fgoogle.com%2Flink_foo_bar. This feature is currently only available in develop branch.. There are a couple of small fixes we want to push before the next release.\nIt should be up by the end of the week. New release published that includes this feature. https://github.com/showdownjs/showdown/releases/tag/1.7.0. Related to #357 . This should (hopefully) be fixed now, without much performance issues.. Check this post in our website:\nhttp://showdownjs.com/#!/blog/annoucement-showdown-2.0. #233. (Not tested)\nReplace this\nshowdown.extension('imagePath', function() {\n  return steps;\n});\n\nWith this:\nreturn steps;\n\nAnd then see if it works and give feedback here. Closing as no activity for 1 month. verified. Showdown hangs with malformed HTML. The bug was introduced with the new HTML parser.\nI will publish a hotfix as soon as possible\n\nWe're currently looking to improve showdown with automated tests in all browsers and a proper domain and webpage. If you like our work, please donate!! Your contribution will be greatly appreciated.\nhttps://www.paypal.me/tiviesantos. should be fixed now. verified. Introduced on v 1.6.0. Should be fixed now.\n\nWe're currently looking to improve showdown with automated tests in all browsers and a proper domain and webpage. If you like our work, please donate!! Your contribution will be greatly appreciated.\nhttps://www.paypal.me/tiviesantos. confirmed. literalMidWordsAsterisk option was only introduced in version 1.7.0, so in version 1.3.0 it does nothing.. Should be fixed now. Hi @devEngine \nIt's like this by design and required by markdown spec, or else code snippets could end up messing the generated html. \nAll markdown implementations do this (check babelmark2\nFor instance:\n```\n</code></pre>\n```\n\nThis would generate:\n<pre><code>\n</code></pre>\n</code></pre>\nIn fact, it is required by HTML spec that, at least, < symbols should be escaped, even inside code blocks.\n. you need to activate the table parser through options\nSee the README or the wiki. @tsndr Thank you very much. Seems implementations do not agree between them (and this rule is not specified in the original spec).\nhttps://johnmacfarlane.net/babelmark2/?normalize=1&text=foo%0A-+list+text+here. ## TL;DR\nDisable the option simpleLineBreaks\njs\nconverter.setOption('simpleLineBreaks', false);\nExplanation:\nGithub uses simple line breaks in most places, like comments:\nThis is a wrapped\ntext line\nThis is a wrapped\ntext line\nBy default, showdown does not beahve like this. However, when you use GFM flavor, simpleLineBreaks gets activated. So you need to deactivate that option again.\n. Should be fixed now. Thanks.. Duplicate of:\n382 #241 . According to the HTML spec:\n\nID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens (\"-\"), underscores (\"_\"), colons (\":\"), and periods (\".\").\n\n. Showdown supports both HTML4 and HTML5 spec (with some restrictions).. I don't know how we could make showdown compliant with HTML4 and HTML5, honestly. @baileyherbert You now have 2 options to fix this:\n\nuse option rawHeaderId which removes only spaces, ' and \" from titles.\nuse option rawPrefixHeaderId which leaves the prefix alone (doesn't change any character from the prefix)\n\nKeep in mind that both options might result in malformed IDs. For instance, when you use rawPrefixHeaderId and use a prefix with \" or . There's already an option for opening in a new window. Although that would make sense, showdown has been adding IDs to headers for a long time and most users rely on that. We try to make as few as possible backwards compatibility breaking changes... only when they are really needed.\nAnother reason is that the original parser for John Gruber used header ids. Although the original spec didn't specify that, the unofficial original spec (vanilla markdown) is based off the original parser.\nSince you can disable them pretty easily with an option, we think disabling headerIds by default would create more confusion than fix any problems users would run into.. Closing this issue. Feel free to reopen the issue if something new arises. The bug is in the code, rather than in the documentation.. should be fixed now. Try with version 1.7.2 and with option backslashEscapesHTMLTags enabled\n. That's strange because the regex is correct. What version of showdown are you using?. That is the expected behavior.\n<, > and & need to be escaped in HTML, <code> tags are not an exception.\n\nYou always represent an ampersand in HTML content as &amp; or &#38;, never a bare &. This includes both text between an element's tags, as well as attribute values. No exceptions.\nThis is because & itself denotes the start of an HTML entity reference (as seen above) and can often cause problems when appearing in the middle of text that could be interpreted as an entity reference.\n. Actually, there is no bug.\n\nIf you want a span element to be parsed as is, you can wrap it in a block (a div for instance)\n<div>\n  <code>\n  <div class=\"someClass\">This is some HTML</div>\n  </code>\n</div>\n. Well, it's not a problem \"per se\".\nThere are two kinds of HTML elements in showdown, semantically speaking):\n\nspan (inline html elements)\nblock\n\nBlock elements are not parsed unless you add markdown=1 attribute to it.\nSpan elements are always parsed, unless they are inside a block\nThis happens for a number of reasons:\n\n\nhistorical: the original parser, written by John Gruber, worked like that so showdown replicated it.\n\n\npratical: almost all parsers behave like that, so people expect this kind of behavior\n\n\ntehcnical: since span elements can appear interpolated in text, it would be hard to parse them\n\n\n. Because almost all use cases expect code inside <pre><code> tags to be a respresentation of said code.\nFor instance, if the code is not escaped...\nthis:\n<pre><code>\n<div>foobar</div>\n</code></pre>\nis interpreted as this:\n\nfoobar\n\n. fiddle\nTHis happens because of indentation. As you are aware, markdown is sensitive to indentation. In the provided code, there are two spaces before the # symbol. If you remove them, you get the desired result.\n```html\n\nHi\n\n```\nIf want/need to keep indentation, showdown might try to remove them for you, if you use the option smartIndentationFix. However, this feature is experimental and produces unreliable results.. There's already a TOC extension https://github.com/ravisorg/showdown-toc. no problem. One column tables are supported in latest develop, commit fef110c .\nCheck the demo\nRelated to #406. @webbery Use version 1.7.3 It fixes this bug.\nJust a question, where are you from? China? Why is your country blocking showdown's demo page?!?!. That's really strange. Showdown demo does not have any kid of propaganda.... Thank you very much. merged. @jasonmit Thanks for your contribution. Code highlight is provided through an extension. https://github.com/showdownjs/prettify-extension\nhttps://stackoverflow.com/questions/21785658/showdown-highlightjs-extension\n. @gene-l-thomas did you check those extensions?\nClosing as no response for 12 days. According to babelmark2, almost all parsers (marked included) parse this the same way showdown does.. @alkorgun As stated in the original spec links and images urls cannot be wrapped (that is, cannot contain newline characters).\nThe original spec is silent about this regarding inline link definitions, but explicit in reference style links.\nMost Markdown implementations respect the original spec, and do not support linebreaks in urls. Github does not support base64 at all. (either inline or reference)\nThe ones that do, however, are inconsistent. \nFor instance, marked does support linebreaks in inline link definitions, but does not support them in reference style \n(see fiddle)\n\nShowdown can implement a special case for base64 encoded images, so that line wrapping is supported.\nSee the updated wiki for more information.\n. As stated in the documentation, you need to use the option disableForced4SpacesIndentedSublists.. If all content is parsed through Showdown (as it seems the case), you can escape the \"magic\" markdown characters to prevent anything to be parsed as markdown.\nThis is best accomplished by a pre parser or an extension, dependeing on use case. (See fiddle)\njs\nshowdown.extension('escapemd', function() {\n  return [{\n    type: 'lang',\n    regex: /[\\][=~`#|()*_-]/g,\n    replace: \"\\\\$&\"\n  }];\n});\n\nWe're currently looking to improve showdown with automated tests in all browsers and a proper domain and webpage. If you like our work, please donate!! Your contribution will be greatly appreciated.\nhttps://www.paypal.me/tiviesantos\n1: https://jsfiddle.net/tivie/pydka770/. @projectitis Did this help you?. As it stated in the documentation:\n\nTables aren't part of the core Markdown spec, but they are part of GFM and Showdown supports them by turning on the option tables.\n\nSo you need to turn on the option tables;\njs\nvar converter = new showdown.Converter({tables: true});\n. ----\nWe're currently looking to improve showdown with automated tests in all browsers and a proper domain and webpage. If you like our work, please donate!! Your contribution will be greatly appreciated.\nhttps://www.paypal.me/tiviesantos. @t1m0t It's both in the wiki and in the README.md. What is the error you're getting? You have to be more specific. The guidelines for posting an issue is:\nInput: (followed by relevant code/input markdown)\nexpected output: (The output that was supposed to show)\nactual output: (The actual output). Closing as no update in 6 days. Did you initialize showdown?\nvar conv = new showdown.Converter();\nvar html = conv.makeHtml('**some** *text*');\nalert(html);\n. If you want to convert files, there's a CLI imbued in showdown. You need to install nodejs though. Multiple lines? Of course you can...\nsee the demo page\nsee a fiddle doing exactly that\n. > Oh ok, so it's working in a text area, but it doesn't work here: var html = conv.makeHtml('<?php echo $markdown; ?>');\n?!? You're trying to render a PHP variable into a Javascript variable?!?\nObviously that will not work... a newline character will \"break\" the string literal. Multiline strings are not supported in javascript.\nBut that is outside the scope of showdown.\n\n\nAnd there is no CSS formatting at all.\n\nShowdown is not a plugin... showdown is a full fledged library. \n\n\nAnd I saw that document too, but it's almost pointless? What is it just syntax?https://daringfireball.net/projects/markdown/syntax\n\nYes, that's the original spec defining the original syntax for markdown.\n\n\nI mean it looks pretty bad: https://coding.corp-mjbcode.com/test.php\n\nThe styling is up to you.\n. The demo uses foundation (http://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/css/foundation.min.css) and a custom style made for the demo (http://showdownjs.github.io/demo/css/style.css). Showdown works both client (browser) and server (nodejs) side so it won't make much sense to add that feature.\nFeel free, however, to design an \"editor\", based on showdown, that supports file import and export. You can grab the demo as a basic template https://github.com/showdownjs/demo. As @obedm503 poited out, you can pass an initialized object to showdown (instead of a reference).\nThis gives you the power to initialize and configure the extension to your hearts content.\nYou can even create a \"class\" and change properties on the fly, in the case your config object is not available at showdown initialization. Here's an example: (fiddle here)\n```js\nvar FooExtension = function(version) {\n  // to have a valid \"pointer\" in case of binding\n  self = this;\n  this.configversion = version || '1.0.0';\nthis.extension = function () {\n    return [{\n      type: 'lang',\n      regex: /{{([\\s\\S]+)}}/g,\n      replace: function (wm, theVar) {\n        var otp = '';\n        if (theVar.trim() === 'config.version') {\n          otp = self.configversion; // this is obviously simplified\n        }\n        return otp;\n      }\n    }];\n  }\n};\n```\nand then somewhere around in your code...\n```js\n// Extension\nvar myExt = new FooExtension();\nshowdown.extension('foo', myExt.extension);\n// initialize converter\nvar conv = new showdown.Converter({\n  extensions: ['foo']\n});\n// pass the config object (or string or something)\nmyExt.configversion = '2.0.0';\n//convertion\nvar html = conv.makeHtml('Please install version {{ config.version }}');\nconsole.log(html);\n```\n\nWe're currently looking to improve showdown with automated tests in all browsers and a proper domain and webpage. If you like our work, please donate!! Your contribution will be greatly appreciated.\nhttps://www.paypal.me/tiviesantos. try copy/pasting this to the issue comment box here and hit preview:\ngithub default behavior \nis to treat\neach linebreak\nas a `<br>`\ntag, at least\nin comments.\n:)\ngithub default behavior \nis to treat\neach linebreak\nas a <br>\ntag, at least\nin comments.\n:)\n\nWe're currently looking to improve showdown with automated tests in all browsers and a proper domain and webpage. If you like our work, please donate!! Your contribution will be greatly appreciated.\nhttps://www.paypal.me/tiviesantos. > Yes you are right, it does it this way in comment editor. However when it parses .md files (like README.md) it does it different.\nYeah, it's inconsistent in how it parses markdown, so we aren't really sure which behavior to implement. \nI think, maybe, we should point this out in the wiki so users won't be surprised by this behavior.. Should be fixed in v 1.7.5\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.. Verified. The issue is not that serious and it should be an easy fix.\n. Should be fixed in v 1.7.6\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.. Verified. Bug introduced in version 1.4.4 https://github.com/showdownjs/showdown/compare/1.4.3...1.4.4. Should be fixed in version 1.7.6\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.. Try the option literalmidwordunserscores. As stated in the documentation...\nliteralMidWordUnderscores: (boolean) [default false] Turning this on will stop showdown from interpreting underscores in the middle of words as <em> and <strong> and instead treat them as literal underscores.. As I stated in my answer, you need to use the option literalMidWordUnderscores to prevent mid sentence underscores to be parsed as <em>.\nIf you check the options in the demo page (black panel on the left), you will see that, by default, literalMidWordUnderscores and simplifiedAutoLinks are turned on.\nso this will work...\nshowdownMarker = new showdown.Converter({\n    tasklists: true,\n    simplifiedAutoLinks: true,\n    literalMidWordUnderscores: true \n});\nlet testDivElem = document.querySelector(\"#testdiv\");\ntestDivElem.innerHTML = showdownMarker.makeHtml(\"http://test_web_page.html\");. Showdown is now smarter fetching links. You should be able to use simplifiedAutoLinks without literalMidWordUnderscores to parse links such as http://www.example.com/some__foo__bar. You need to indent subblocks 4 spaces. # TL;DR;\nIt's not a bug in showdown, but rather a problem thwith the input. List's Sub-blocks must be indented 4 spaces (or they will be treated as a \"root block\")  \nExplanation\nA bunch of things are happening here:\nList's Sub-blocks must be indented 4 spaces\nAccording to the original markdown spec a sub-block, in a list, must be indented to be considered part of the list.\nExample: (see showdown's live demo)\ninput MD:\n1. Does every software system have an architecture?  Why or why not?\n\n    ```\n    _________________________________________________________________________\n    _________________________________________________________________________\n    ```\n\n2. You are designing a climate control system, which accepts inputs from a variety...\n\n    ```\n    _________________________________________________________________________\n    _________________________________________________________________________\n    ```\n\ngenerated HTML:\nhtml\n<ol>\n<li><p>Does every software system have an architecture?  Why or why not?</p>\n<pre><code>_________________________________________________________________________\n_________________________________________________________________________</code></pre></li>\n<li><p>You are designing a climate control system, which accepts inputs from a variety...</p>\n<pre><code>_________________________________________________________________________\n_________________________________________________________________________</code></pre></li>\n</ol>\nIn your md source, your code blocks are not indented so each list item is interpreted as  \"new\" list. see demo\nThis happens in every markdown implementation, even in github's implementation. ([see babelmark2 for comparison in implementations][bb2_1])\nhtml\n<ol>\n<li>Does every software system...</li>\n</ol>\n<pre><code>_____________________________________________________________</code></pre>\n<ol>\n<li>You are designing a climate control system...</li>\n</ol>\nThe numbering in lists is not important\nAccording to the same spec:\n\nIt\u2019s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. (...)\nThe point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don\u2019t have to.\n\nYour input \"seems\" to work in github's\nThe issue, however, arises when you consider the next paragraph the spec:\n\nIf you do use lazy list numbering, however, you should still start the list with the number 1. At some point in the future, Markdown may support starting ordered lists at an arbitrary number. \n\nGithub supports this \"planned feature\" where the number you in the first list item counts as the starting value of the ordered list. For instance, copy/paste the following markdown in a comment here in github and click preview:\nInput:\nmd\n2. foo\n6. bar\n2. baz\n9. bazinga\nOutput:\n\nfoo\nbar\nbaz\nbazinga\n\nThis feature is non standard and not implemented in showdown (although it's planned for a soonish future release),\nSo, in your MD, every list item is considered a new list, rather than a list item. But since github supports defining the starting number of ordered lists, the output seems correct (although it's not)\n[bb2_1]: https://johnmacfarlane.net/babelmark2/?normalize=1&text=1.+Does+every+software+system+have+an+architecture%3F++Why+or+why+not%3F%0A%0A%60%60%60%0A__________%0A%0A%60%60%60%0A%0A2.+You+are+designing+a+climate+control+system%2C+which+accepts+inputs+from+a+variety+of+distributed+sensors+(e.g.%2C%0AOf+the+architectural+styles+listed+in+Tsui+et+al%2C+which+one+would+be+best+for+this+kind+of+system%3F++Why%3F%0A%0A%60%60%60%0A__________%0A%0A____________%0A%60%60%60. @KirkMunro Although I see your point, what's the downside of getting that functionality through an extension?\ngithub way\nAs far as I can tell, github uses HTML5 custom elements for emojis:\nmd\n:bulb: IDEA: Since showdownjs has native GFM support, complete it by adding GFM emoji support to showdownjs!\nhtml\n<p><g-emoji alias=\"bulb\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a1.png\" ios-version=\"6.0\">\ud83d\udca1</g-emoji> IDEA: Since showdownjs has native GFM support, complete it by adding GFM emoji support to showdownjs!</p>\nwhich won't work for showdown since it would end up generating non compliant HTML5.\nShowdown way\nSo, if this feature is implemented, we would only replace :emoji-name: with the appropriate unicode character and without fallback option.\nmd\n:bulb: IDEA: Since showdownjs has native GFM support, complete it by adding GFM emoji support to showdownjs!\nhtml\n<p>\ud83d\udca1 IDEA: Since showdownjs has native GFM support, complete it by adding GFM emoji support to showdownjs!</p>\nProblem\nThere are also a few github  \"non standard\" emojis that have no unicode correspondence. Ex: :couplekiss_man_man: which translates to \ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc68\n. Feature implemented in 5b8f1d3 and should be released @ v1.8.0.\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.. Yeah, the culprits are showdown and octocat emojis.\nShowdown emoji was a bit of vanityware.\nIt can be replaced with an SVG that will reduce the size considerably.\nOr maybe remove them altogether.\n. @obedm503 is totally right.\n<a> is not a self closing tag, so your input is invalid HTML. However, showdown just ignores that malformed HTML and leaves it alone as <a name=\"section2\"/>.\nYou can actually see in this (fiddle) that showdown's output is actually:\nhtml\n<h2 id=\"section1headers\">Section 1 Headers</h2>\n<p><a name=\"section2\"/></p>\n<h2 id=\"section2headers\">Section 2 Headers</h2>\nWhat you're experiencing is probably a browser trying to \"fix\" your output HTML.\n. that's strange. It seems the CDN is pulling a previous commit... We don't have any control over the CDNjs, so we can't really fix this.. Published version 1.8.1 which should be available shortly in CDNjs. Please use this version (1.8.1) instead.. I will leave the issue open in case someone else stumbles upon this. @LeaVerou Thank you.\nWe've written an succint but complete article about Markdown's XSS Vulnerability (and how to mitigate it).\nAlso, showdown does not filter out script tags (you can check that in this fiddle). That's actually a browser feature that removes script tag insertion when setting innerHTML (and other DOM manupulation methods).\nTo summarize:\nShowdown tries to convert the input text as closely as possible, without any concerns for XSS attacks or malicious intent. So, the basic rules are:\n\nremoving HTML entities from markdown does not prevent XSS. Markdown syntax can generate XSS attacks.\nXSS filtering should be done AFTER Showdown has processed any input not before or during. If you filter before, it\u2019ll break some of Markdown\u2019s features and will leave security holes.\nperform the necessary filtering server-side, not client side. XSS filtering libraries are useful but shouldn't be used blindly.\n\n. That is non-standard syntax, not supported in any flavor showdown supports (see babelmark2).\nAs such, is better suited for an extension, namely a listener extension (you can check a working example in this fiddle)\njs\n// Extension of type listener\nshowdown.extension('ins', function() {\n  return [{\n    type: 'listener',\n    listeners: {\n      // the extension is called right AFTER the parser parses italicsAndBold\n      // and only during span gamut\n      'italicsAndBold.after': function (event, text, options, globals) {\n        return text.replace(/(?:\\+){2}([\\s\\S]+?)(?:\\+){2}/g, function (wm, txt) {\n          if (options.simplifiedAutoLink) {\n            txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n          }\n          return '<ins>' + txt + '</ins>'\n        });\n      }\n    }\n  }];\n});\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.\n. Tilde fenced blocks is, indeed, a feature implemented (not so) recently in github that is missing from showdown. I will implement it in the next showdown release.\nCurrently there is no way to include code for a fenced code block inside a fenced code block.\nBut meanwhile,  you can include code for a fenced code block inside an indented code block*, like so:\n~~~\n    ```markup\n    \n### Heading\n    This is bold This is italic \n    Here\u2019s a link!\nAnd some code:\n\n    ```js\n    foo.bar();\n    ```\n</div>\n</div>\n```\n\n~~~\n. @LeaVerou right. Should be fixed now (c956ede) (version 1.8.2)\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.. Although there isn't a perfect solution for this issue (since that would require showdown to be aware of URL context), showdown can disable target=\"__blank\" for relative urls that start with a #.. Should be fixed now (version 1.8.2)\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.. Showdown supports auto-generated headings by default (which I reckon does not meet your needs). Since that type of syntax is non standard, it's best suited for an extension, which can be easily created.\nHere's an extension that accomplishes exactly what you want (See working fiddle here).\n```js\n// a listener extension that supports custom ids with the following syntax\n// # Header text {: #the-custom-id}\nshowdown.extension('custom-header-id', function () {\n  var rgx = /^(#{1,6})[ \\t](.+?) {: #([\\S]+?)}[ \\t]#*$/gmi;\nreturn [{\n    type: 'listener',\n    listeners: {\n      'headers.before': function (event, text, converter, options, globals) {\n        text = text.replace(rgx, function (wm, hLevel, hText, hCustomId) {\n          // find how many # there are at the beginning of the header\n          // these will define the header level\n          hLevel = hLevel.length;\n      // since headers can have markdown in them (ex: # some *italic* header)\n      // we need to pass the text to the span parser\n      hText = showdown.subParser('spanGamut')(hText, options, globals);\n\n      // create the appropriate HTML\n      var header = '<h' + hLevel + ' id=\"' + hCustomId + '\">' + hText + '</h' + hLevel + '>';\n\n      // hash block to prevent any further modification\n      return showdown.subParser('hashBlock')(header, options, globals);\n    });\n    // return the changed text\n    return text;\n  }\n}\n\n}];\n});\n```\nLet me know if this works for you.\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.\n. Sadly no. I haven't had the time to write proper documentation yet.\nAnd with version 2.0 around the corner, it's hard to make time for both.\n. Since it's a block parser, you can always override the blockquote parser, like this (see working fiddle):\njs\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n//... more code\n// initialize showdown as usual\nvar conv = new showdown.Converter();\n. ---\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.. @110Percent did this work for you?. Should be fixed now.\n\n\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money. Currently, we're looking to improve showdown with automated tests in all browsers and a proper domain and webpage. 500$ should be enough to to keep showdown testing framework running for a year or two.\n\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated.\n. You can easily style lists with css. see this example fiddle\ncss\nol>li>ol {list-style-type: upper-roman;}\nol>li>ol>li>ol {list-style-type: lower-alpha;}\n. > Does your library include stylings or is just an HTML converter?\nShowdown is just an html converter, no style is applied.\nI really dont' know why the content is not styled. Can you reproduce the issue in a fiddle?\n. @eavestn You mean the demo page? https://demo.showdownjs.com. The demo page uses foundation. Found the issue. Code spans are not being hashed after parsing. Instead, we're only escaping \"magic\" markdown chars inside. Since the character + is not magic in markdown, it's not being escaped. @ctsears This should be fixed now. Please give it a try and tell me if it works.. This is indeed a bug.\nAs a workaround, for now, you can escape the pipe char, like this:\n|PowerShell command|Example|\n|--|--|\n|Get-Service| `Get-Service \\| Stop-Service -WhatIf` |\nKeep in mind though that github also fails properly parsing this:\n|PowerShell command|Example|\n|--|--|\n|Get-Service| Get-Service | Stop-Service -WhatIf |. Should be fixed now in latest develop. Please give it a try and let me know.\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. What do you mean? By default, ids are added to all headings. Check the fiddle. It's also in the README.md (https://github.com/showdownjs/showdown#options) \ud83d\ude04 . Added this to the wiki pages: https://github.com/showdownjs/showdown/wiki/Showdown-Options. > ## Donate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Hello @ivanhjc \n\nShowdown does not follow the CommonMark spec (although if, in some instances, it does, it's just a coincidence).\nThe issue with URLs is that the URI spec does not allow URLs to have spaces. https://tools.ietf.org/html/rfc3986. A lang extensions knows nothing about context (unless you provide it). It's run before any of the subparsers and so takes precedence over them. It's supposed to work like that or you wouldn't have a way to change code blocks, for instance.\nSo, for your use case, since context matter, you should use an event extension and listen to a \"span\" event, for instance, the italicsAndBold.after event. \nSee an example in this fiddle\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.\n. See #459 . Confirmed. This bug was introduced in version 1.7.6. Actually it's related to #443 . Should be fixed now\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. That effect can be accomplished trough CSS. . Using the pseudo selector :nth-child(2), for instance. Check this working fiddle\n\nExample:\nmarkdown:\n```md\nthis is paragraph right aligned\nthis paragraph is centered\nthis paragraph is left aligned\n```\ncss:\ncss\np:nth-child(1) { text-align: right; }\np:nth-child(2) { text-align: center; }\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.\n\n. Well, if I understand you correctly, you need new \"markup\" to align text. That can be accomplished through an extension.\nNow, align only works in block elements (you can't have partial alignments in the same line), but you can create an extension that does what you want.\nCheck this fiddle for an example.\nExtension\njs\nshowdown.extension('palign', function() {\n  return [{\n    type: 'listener',\n    listeners: {\n      'blockGamut.before': function (event, text, converter, options, globals) {\n        text = text.replace(/^--:([\\s\\S]+?)--:$/gm, function (wm, txt) {\n          return '<div style=\"text-align: right;\">' + converter.makeHtml(txt) + '</div>';\n        });\n        text = text.replace(/^-:-([\\s\\S]+?)-:-$/gm, function (wm, txt) {\n          return '<div style=\"text-align: center;\">' + converter.makeHtml(txt) + '</div>';\n        });\n       text = text.replace(/^:--([\\s\\S]+?):--$/gm, function (wm, txt) {\n          return '<div style=\"text-align: left;\">' + converter.makeHtml(txt) + '</div>';\n        });\n        return text;\n      }\n    }\n  }];\n});\nSyntax\n```md\n--:right align--:\n-:-center align-:-\n:--left align:--\n```\n. @savsharma2 Glad I could help.\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. ?. Closing issue. @JasonsCPL  thanks for your contribution. This piece of code is currently just as a temporary hack around dependencies in nodejs.\n\n. Should be available in version 1.8.6\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Pledgie or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.\n. Verified. Introduced in 1.8.3. Should be fixed now in fe70e45\n\n@ctsears Please test it and give feedback\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.\n. @tbroadley Thank you for your contribution. Thanks. Fixed. Sorry, I got lost. So, no problem with showdown?. plain text?. You can wrap the generated markdown in an html element with an id and style from there.\nOr even attach a <style> tag directly in the markdown source\n\nsimple example\n```html\n\nh1 {\n  color: red;\n}\n\nthis is an heading\n```\nif you need control over specific elements, you need an extension that creates \"new syntax\", for example.\nThere are a few examples out there, have a look\nhttps://github.com/showdownjs/showdown/issues/300\nhttps://github.com/showdownjs/showdown/issues/376\nhttps://github.com/showdownjs/showdown/wiki/Add-default-classes-for-each-HTML-element\nhttps://github.com/showdownjs/showdown/issues/310\n. What options have you enabled?. I assume you're using literalmidwordsunderscore option.\nSeems this bug was introduced in version 1.6.4. It's a bug nonetheless.\nIt happens with two words, in the same sentence, with \"double\" or \"tripe\" underscores. dupe of https://github.com/showdownjs/showdown/issues/469. Showdown does not allow for selective parsing. You can, however, create an extension that replaces <p> tags with something else (or remove them entirely).. confimed!. This shouldbe fixed for version 2.0. Unfortunately I cannot backport for version 1.x\nThe problem is that showdown thinks that those are 2 codeblocks instead of one.... humm... This one is \"interesting\".\nThe \"correct\" way of doing this should be:\n```md\n- Increase the number of water changes.\n\n\nProtein skimmers:\nThis remove dissolved...\n\n\nChemical filter media:\nWhen placed in your filter, ...\n```\n\n\nWhy? Because in lists, blocks should be separated by an empty line and indented four spaces. (Both header and paragraph are blocks)\nOutside lists, blocks should also be separated by an empty line. The only exception to this rule are headers.\nSo, you have 2 syntax rules that clash with eachother. \nIMHO, users expect that headers, in this regard, work the same way inside and outside list blocks.\nSo we probably should treat this as a \"bug\" (mostly because GFM supports your syntax style)\n. Should be fixed now. I believe we can work around this in order to make showdown at least somewhat compatible with IE7.\n@jasper2virtual Is it the only thing that's breaking in IE7?\n. @priyaarora1989 you can use a polyfill service, like https://polyfill.io/v2/docs/features/ to work around the issue.\n. Humm... literalMidWordAsterisks is a non standard feature and buggy, nonetheless. It will probably be dropped in showdown 2.0\nThe reason is we can't agree in how it should work and creates more support problems than it solves. As I'm currently the only active mantainer of the project, it's hard to support this kind of features.\n. > Since this is the first I've heard you mention showdown 2.0, do you have an approximate timeframe when you hope to get to that version?\n\n\"We expect to release a stable version of Showdown 2.0 somewhere around June 2018\"\nI'm curious who you are referring to when you mention \"we can't agree\", since you mention you are the only active maintainer of this project.\n\nThe markdown discussion group. I usually pick their collective brain regarding certain edge cases and how they should be parsed. This feature was seen as a bit \"duh!\" since midword asterisks are not really a thing and, for these situations, you can simply escape the asterisk character.. > I read your CONTRIBUTING doc, and may be able to contribute to some of the issues I find/report, but the doc mentions running all test cases without instructions describing how?\nAh! I will add those. It's actually simple. Just:\n\nclone repo\ninstall npm dependencies\ninstall grunt-cli globally (or locally if you prefer)\nrun grunt test\n. This feature was removed. There is a shim available here: https://gist.github.com/tivie/7f8a88c89ffb00d2afe6c59a25528386. Please open this issue in the showdownjs demo repository. Oh @KirkMunro and to \"fix\" that issue, just click in the 3 bars 2 times.. SHowdown works perfectly in node and in browser. \nwhat version are you using?. 1.8.6 is the latest version and works fine under node.. Can you please elaborate? I don't understand what you mean. Closing as no more feedback was given. Thank you very much for this fix.. This will be fixed in the next release (that, hopefully, will be v 2.0.0-alpha1)\n\nThe custom emojis were an interesting idea, but will be removed alltogether since they increase the size of the package by a lot.\n. Thanks @JonSn0w . thanks. We're currently looking into alternatives for donations.. In the meanwhile, donations can be done directly through paypal https://www.paypal.me/tiviesantos. I've just created a patreon page at https://www.patreon.com/showdownjs. Thank you. Will update as soon as possible.. Updated. https://github.com/showdownjs/showdown/wiki/Add-default-classes-for-each-HTML-element\nThank you for your contribution. verified. This is weird. Every parser in babelmark produces empty string https://johnmacfarlane.net/babelmark2/?normalize=1&text=%5B%5E1%5D%3Aa. After talking with some markdown experts, that is the intended behavior. The commonmark spec is explicit in this regard: https://spec.commonmark.org/0.28/#link-reference-definitions\nSo it's not a bug, but actually the intended behavior. If you wish to write that specific sequence of characters, you need to either escape the opening square bracket or the colon: \\[^1]:a or [^1]\\:a\n. I will have to look into this carefully, since the metadata module is a very simplified version of yml.. You need to use css to style it. A reverse conversion tool will be available in version 2.0.0-alpha. You can use extensions to accomplish that.. @KirkMunro Sorry for the delay in answering, but I've been extra busy lately, and the little time I get for showdown is all spent on trying to release an alpha version 2 of showdown.\n\nAlso, another related question when talking about listeners: can a listener be written to take each formatted output (HTML output) from one of the builtin markdown converters and modify what is generated before it is added to the HTML output document?\nFor example, if I wanted to add extra handling over how a code block is formatted, could I write a listener that would receive only the HTML code block ( ) text, where what I return from that listener would be what is actually output in the document? Or is that what lang/output extensions are for (but those are going away in showdown 2.0)?\n\nRight now you can't, because listener extensions are actually just event listeners. Each subparser broadcasts 2 events: before it runs and after it runs. Showdown makes the all \"raw text\" available to listeners, not the \"partial text\" that was caught by the regex and actually changed by the subparser.\nHowever, I have planned adding more events to listener extensions in v2.0 which will include that: partial text caught and partial text rendered by each parser, giving users a finer degree of control.\nOutput extensions will be dropped in v2.0, and replaced with a BeforeAll and AfterAll events (or something like that) which, effectively, behave exactly as Lang and Output extensions.\n\n\nThe problem I've run into is figuring where to put this in the listener event resolution order.\nHow do I define this extension to get the following behavior:\n\n<div ...> is never, ever wrapped in a paragraph tag;\n</div> is never picked up as part of a list/list item, unless the entire div is inside of the list item;\n</div> is never picked up at the end of a table as another row;\n\n\n\nTo achieve that behavior, you need to take into consideration some important things:\n\n\nShowdown relies on parsing order. That means you can't switch parser order because, for instance, the paragraph subparser assumes that all HTML code was already tokenized. So, in order to prevent the output of your extension to be parsed any further, you should tokenize it (have a look into 'hashHTMLBlocks' subparser).\n\n\nIs the \"div parser\" a block parser? Or a span parser? Or both? From your example it seems it can be both, so you would need actually 2 extensions: one for blocks and one for spans. You shouldn't try to make rules that apply to both. While that might be possible, it's a lot harder than treating them separately.\n\n\nYou have to decide the priority of the div parsing. For instance, should github blocks take precedence, or divs? Example:\n~~~\n:::\n:::\n~~~\nShould this be parsed as <div>```</div>``` or  :::<pre><code>:::</code></pre>?\n\n\n. I would say it has a good chance of finishing in time for first alpha. I have implement it already, but don't have the proper testing cases yet. \n. @GenaBitu Thank you very much. This would fix Issue #508 indeed in a very clean way.. thanks @trickypr . verified\n. Should be fixed now.\n@ewalpole can you please test it?\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Thank you @DanielRuf . We will drop support for node <4 for showdown v2.0. Yeah, I was getting a local conflict and was in a rush to test it locally. I usually just fix them in local, push the changes and then merge, so people won't lose credit for changes :)\n\nIt's lazy but it's faster (appveyor takes a long time testing). fixed. Thank you very much @ozzywalsh and @su8 . so, use npm ci in travis, but cache on appveyor?\n. thank you. fixed. thank you. > I did not find a way to edit the wiki myself (if this is not possible, why is it called a wiki? \ud83e\udd14)\nYou can, of course, edit the wiki. You just have to clone https://github.com/showdownjs/showdown.wiki.git and make a pull request.\nThat is already documented in: https://github.com/showdownjs/showdown/wiki/CLI-tool#option--e--extensions\nHowever, I added what you proposed to the documentation. :)\n. Confirmed. Related to other link parser bugs.. #355 . Should be fixed now.\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. you need to add a \"markdown\" attribute. demo\n\n<table markdown=\"1\">\n<tr>\n<td>**Header**</td>\n</tr>\n<tr>\n<td>- Content</td>\n</tr>\n</table>. master is unstable. I will look into it as soon as possible.. it will, of course. \nI actually cannot reproduce the issue you having. \nI'm behind schedule for v 2.0 ALPHA 1 release so I'm putting all my effort into it.\nI will come back to this issue in the near future and will ask for your help in trying to reproduce it.. @GenaBitu Can you produce a small example of showdown failing to work in a webworker?. ah, it's the JSDOM shim that is breaking the webworker...\nThat code was provisory but that should be easy to fix.. Because of the new feature of reverse coverting. We use the DOM parser to parse HTML into Markdown.. Mainly for 2 reasons: They share a considerable portion of code and it's harder to maintain 2 libraries instead of one.. Please share the output html.\nFrom the images you posted, it seems showdown is working properly. The only difference is in styling.. No styling is provided. You must add it yourself. In the demo we are using foundation. This can be easily accomplished by an extension. Shouldn't be too hard to implement. Although, it's also trivial to actually concatenate the files prior to feeding them to showdown:\nunix\nbatch\ncat file1.md file2.md | showdown ...\nwindows\ncmd\ntype file1.md file2.md | showdown .... bug introduced in 1.6.4\n. https://johnmacfarlane.net/babelmark2/?normalize=1&text=%5Bhttp%3A%2F%2Fya.ru%5D+(http%3A%2F%2Fya.ru)\nMarkdown original spec allows spaces or newlines between brackets.\n. Well caught. We will need to revamp the internals a bit. I believe this happens with other javascript \"magic\" words.. Yes, this is a limitation of showdown's HTML pre-code block parser, for performance reasons.\nI'm not sure if we can \"fix\" this without hindering performance too much. But I will leave it open and pending for v2.0\n. I couldn't reproduce your issue. In the demo it's working fine. What version are you using?\n1: http://demo.showdownjs.com/#/This%20is%20a%20simple%20text%20surrounding%20%3Cdiv%20id%3D%22someId%22%3Ea%20div%3C%2Fdiv%3E%20with%20an%20id%20attribute%0Aor%20this%20is%20an%20%3Caccardion%3EAccacrdion%3C%2Faccardion%3E%20tag%20which%20is%20ignored%20totally%20in%20output.. Closing as no update provided. thank you\nI will look into it\n. > Showdown tries to convert the input text as closely as possible, without any concerns for XSS attacks or malicious intent. So, the basic rules are:\n\n\nremoving HTML entities from markdown does not prevent XSS. Markdown syntax can generate XSS attacks.\nXSS filtering should be done AFTER Showdown has processed any input, not before or during. If you filter before, it\u2019ll break some of Markdown\u2019s features and will leave security holes.\nperform the necessary filtering server-side, not client side. XSS filtering libraries are useful but shouldn't be used blindly.\n\n\nhttps://github.com/showdownjs/showdown/wiki/Markdown's-XSS-Vulnerability-(and-how-to-mitigate-it). # TL;DR;\nAlthough your event order is wrong, and it's perfectly possible to call Prism from within Showdown, it won't achieve the effect you're after.\nThe correct order of things that must happen is:\n\n[X] Feed the input into showdown\n[X] Perform the desired alterations with an extension\n[ ] Get the output from showdown\n[ ] Insert the output into the page\n[ ] Run Prism\n\nSo, as you see, a showdown extension will never be able to solve your issue, since showdown has to finish execution AND you need to insert its output into the page in order for Prism to do its thing.\nHOWEVER, nothing prevents you from using an angular event to run prism, AFTER showdown performs it's modifications.\n\nThere are a few problems here, I will try to walk you through them:\nEvent order\nThe event encodeCode.after is triggered after showdown's encodeCode subparser is run.\nThe output extension is run right at the end of everything.\nThis means encodeCode.after happens BEFORE output extensions.\nHow showdown  work\nShowdown takes a piece of text (in markdown) and converts it to HTML. \nWhen you can the converter.makeHtml() it returns the converted text. Showdown doesn't insert anything in the page.\nSo, basically, until you insert it in the page, prism won't see it and will not perform any alterations on the code.\nI'm not sure if it's possible to feed HTML to Prism and get the output, though.\nShowdown supports prism out of the box... with a caveat\nAs you can see in this fiddle, showdown supports prism out of the box. Without you requiring to perform any alterations to showdown's output.\nhttps://jsfiddle.net/tivie/fphe4vsn/\nAt least for GH Style blocks where you specify a language. Indented code blocks, since they don't have language attribute, prism won't work out of the box.\n. Closing as no update for a while. Feel free to reopen if you think you need more help.\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. thanks. You should issue a PR for develop branch.. thanks. Yes, it's a known issue. And its a hard problem to tackle.\n\nRelated #355 . Should be fixed now.\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. yes. I'm no expert in licenses but I would reckon it isn't incompatible. The license we use is fairly permissive.\n\nAs long as you keep the following it's fine:\n\n\nRedistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n\nRedistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n\nNeither the name \"Markdown\" nor the names of its contributors may\n  be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\n\nBasically, showdown's name copyright belongs to John Fraser. Markdown's name copyright belongs to John Gruber. \nNeither the names of John Fraser or John Gruber should be used as endorsers (or programmers, or whatever) of your piece of software.. The last NPM package (v1.8.6) does not support MD->HTML conversion. But the readme for that version (that figures in the NPM) does not state that. \nThe current master / develop branches (which tag for v2.0.0-alpha1, not released yet) do support MD to HTML conversion.\n. Version 1.9.0 was released today and add an experimental feature that supports Markdown to HTML conversion.\n\nDonate\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Patreon or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. > Header tags don't seem to work inside tables, is there a way to get them to work?\n\nUsing HTML directly inside tables.\n| <h1>header1</h1> |\n| --- |\n| **bold** |\n| *italic* |\n\nAdditionally, is there a way to create a table without it using the  for the first row which formats the data as a table header?\n\nNo. We needed to standardize the table output and using thead and th seemed the semantically correct way, . To add to the explanation, there are 2 reasons why you can't use headings inside tables.\nAccording to the HTML living standard, the th element's content model only allows\nfor \"Flow content, but with no header, footer, sectioning content, or heading content descendants.\" This means h1 isn't allowed inside th elements. So this...\n| # Header 1 |\n| --- |\n| foo |\nwould result in non compliant generated HTML. \nThe other reason is that headings, in markdown, are treated as block elements (not span/inline elements). Block elements require, at least, one line break (\\n) or a EOF at the end. \nDue to the nature of markdown tables' syntax, this is not possible, and that's the reason why only inline/span markdown elements are allowed in markdown's table cells.\nPlease note that, concerning HTML spec, and contrary to th elements, heading elements are perfectly valid in table bodies (td elements). So you can \"cheat\" around this using HTML directly. \nAs a final note, I don't know of any other markdown specification or implementation that allows headings in tables.\n. I will be closing this issue. If you feel there's something else you wish to add, please feel free to reopen it.. We do lower case comparisons because some mobile browsers and older browsers, ids are case insensitive. So, in order to prevent id duplication (and weird issues), we lower case the id attribute value.\nAlso, Github, and most markdown implementations lowercase generated ids\n. Soonish I hope.I'm working as often as I'm able to in the version 2.0 which should address all this. Unfortunately my free time is rather limited lately.\nHope I can release a version 2.0 alpha in the next few months.. @GenaBitu http://showdownjs.com/#!/blog/rewriting-the-parser-challenges-and-opportunities. I felt that version 2.0 should have a shinny and proper new parser that read the code sequentially and was aware of context (use more code logic and less RexExp wizardry :tada:). The new parser is, in fact, a lot more similar to a PEG parser than a RegExp converter with in place substitutions.\nSome key features include:\n\n\nSequential\nThe new parser reads the input sequentially. When a syntax element match is found, it \"stores\" the element without changing the original string. This means that Showdown no longer relies on (nor needs) a specific order in which sub parsers are invoked.\n\n\nFull separation of the parsing and conversion steps\nInstead of making in place substitutions of the original input, the new parser creates an intermediary abstract layer, an object that is a node tree of elements, similar to the DOM Tree in the browser, which makes it easy to manipulate each node before outputting it as a string again, in other format.\n\n\nOutput manipulation is extremely easy and customizable through templates\nThe node tree (and each individual node) can be manipulated as you see fit since it's, in practice, an agnostic representation of an element. Each node has a template for each supported format: HTML and Markdown. But you can even add more formats if you wish. \nWhat is cool is that, not only can you can manipulate the tree (add, delete or swap nodes), you can also tweak or completely change the output of all nodes of a type or even a specific, individual node.\n\n\nExtensions are a lot more powerful now\nYou can pretty much change every aspect on how showdown runs and ties really well with the new parser, event system and reverse converter.\n\n\nFaster (it seems)\nRegExps, specially the complex ones, are slow. So, moving away from them, and only using RegExp for quick checks, should speed up the parser a lot. Well, at least in theory.. @notlee thank you very much for you contribution.. Using the latest version, you have 2 options. Either:\n\n\nActivate option backslashEscapesHTMLTags and use backslash to escape <:\nmd\nIt is true that a\\<b and b>a, so lorem ipsum dolor sit.\n\n\nAdd a space after <: \nmd\nIt is true that a< b and b>a, so lorem ipsum dolor sit\n. Those characters are already escaped by showdown automatically.\nThe reason why the particular case a<b is not escaped is because showdown does not escape a < when the character after it is an alphanumeric character.\nThat's why adding a space after < escapes the character. Also, you already have a way of escaping those characters, and that's by using a backslash before it.\n\n\nIf showdown did escape ALL <, it would be impossible to use HTML with markdown, which is required by the spec, making showdown non compliant.\nThat being said, you can use an extension to escape the characters yourself, in your particular use case.. @LeJared Closing issue as no update was given. If you feel you still need help, feel free to reopen the issue.\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Hey @Dygerati \n\nShowdown does not support selective conversion (the ability to only parse and convert certain markdown elements).\nDepending on your requirements, though, you can create an extension that removes disallowed \"tags\".\nexample (fiddle here):\n```js\nshowdown.extension('only-inline-stuff', function () {\n  return [{\n    type: 'output',\n    filter: function (text) {\n      // remove paragraphs\n      text = text.replace(/<\\/?p[^>]*>/g, '');\n  // remove code (if you want)\n  text = text.replace(/<\\/?code[^>]*>/g, '');\n\n  //add other stuff here that you want to remove\n  // text = text.replace(, '');\n  return text;\n}\n\n}];\n});\n```\n. @Dygerati Closing issue (no activity for 26 days). Feel free to reopen the issue, if you feel you still need help.\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Github only allows dashes in the middle of the name.. I will make showdown allow dashes, underscores and dots in the middle of the username, since that seems a valid usecase scenario. Should be fixed now. Soonish I hope. Version 2.0-alpha will be the next release.. ---\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. well, the error message is certainly cryptic. That is something I will fix in version 2.0 #576\n\nRegarding your specific issue, I couldn't reproduce it. see this fiddle, it's working fine\nAlso, it works fine in the demo\n. This issue #585 reports the same issue as you. It should be fixed now in master.. ---\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Duplicate of #427 #325 . > Please note that I am not using Node.js, but rather a js file linked to an HTML file on a Github Pages site, so I do not believe that extensions are possible for me.\n\nI don't think that's true at all. Extensions work in the browser and in node, so if you can load Showdown, you can probably load extensions.\nHere a couple of custom extensions working on the browser:\n\nhttps://jsfiddle.net/tivie/5jd4nr2a/\nhttps://jsfiddle.net/tivie/6sstvfku/\nhttps://jsfiddle.net/tivie/vdkegtjs/. @jacobcxdev that particular extension you linked is made exclusively for node because the author is using a non conventional way to load it.\n\nHowever, it's trivial to refactor it to make it work in the browser (see fiddle in action)\njs\nshowdown.extension('highlight', function () {\n  return [{\n    type: \"output\",\n    filter: function (text, converter, options) {\n      var left = \"<pre><code\\\\b[^>]*>\",\n          right = \"</code></pre>\",\n          flags = \"g\";\n      var replacement = function (wholeMatch, match, left, right) {\n        var lang = (left.match(/class=\\\"([^ \\\"]+)/) || [])[1];\n        left = left.slice(0, 18) + 'hljs ' + left.slice(18);\n        if (lang && hljs.getLanguage(lang)) {\n          return left + hljs.highlight(lang, match).value + right;\n        } else {\n          return left + hljs.highlightAuto(match).value + right;\n        }\n      };\n      return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);\n    }\n  }];\n});\n. ---\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Thank you. Fixed!. Thank you. Closes #581 . Fixed!. HTML to MD converter is a new feature, available only in master branch. The documentation hasn't been written yet.\n\nTo use it you can clone the master branch and use converter.makeMarkdown(htmlText). Thanks for you contribution. The CLI tool is, in fact, undertested, as I haven't had the time to implement proper unit testing for them.. Should be fixed now.\n@pgengler can you please test if it's working for you?\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Which version?. @yuanjilee The issue you report is not related to this one. It has to do with \"parentheses priority\". \n\nYou should open a new issue\n. @Songkeys Which environments are incompatible with JSDOM?. Paragraph happy!! \ud83e\udd23 That made me laugh!\nOn a serious note, Showdown differentiates between block and inline HTML elements. Block elements are encoded as soon as possible while inline elements are \"left alone\". The fact that they end up being wrapped as a paragraph is kind of a side effect.\nSince you can mix inline elements with markdown, this would need to be carefully studied:\nsome stuff <input id=\"bash\" name=\"language\" type=\"radio\"> other stuff <b>yeah!</b>\nI do think that this is actually a worthwhile addition, though. \nAnd from the top of my head, the rule could be: \n\"naked self closing html inline elements are left alone while the rest of inline elements (that are not self closing or have markdown) would be wrapped in <p> tags.\"\nI will consider it for version 2.0, not because it's hard to change the parser but because: \n - it will require a LOT of proper testing in order to make sure all edge cases are thought of (the devil is always in the details)\n - it won't slow down the parser much \nThat being said, you can implement this with an extension quite easily: https://jsfiddle.net/tivie/ypjzcuLv/\njs\nshowdown.extension('myext', function() {\n  return [{\n    type: 'listener',\n    listeners: {\n      'hashHTMLBlocks.after': function (event, text, converter, options, globals) {\n        text = text.replace(/^ {0,3}<[a-z]+\\b[^>]*>$/gmi, function (wm) {\n          return '\\n\\n\u00a8K' + (globals.gHtmlBlocks.push(wm) - 1) + 'K\\n\\n';\n        });\n        return text;\n      }\n    }\n  }];\n});\nhope it helps\n\n\nDonate \nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate ~~through Pledgie or~~ directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.\n. You're welcome. Well, it depends. PRs are always welcome but I usually avoid merging PRs that introduce non standard new syntax elements, if hey are very different. What would be your strategy?\n\nYou should also note that showdown is currently in a \"feature freeze\", since version 2.0 is around the corner and the parser will suffer substantial refactoring.\nIf you wish to make a PR, that might get merged in a timely fashion, I would suggest doing it against version_1.x branch. \n. In version 2.0, with the new template system, an option won't be needed as you would have full control over the output of the parser.\nHowever, for version 1.x, that option would be very useful and pretty straightfoward. Also it won't impact in BC. So I don't why why not.\nPlease feel free to make a PR against the version 1.x branch. And if you throw a couple of test cases, I could merge as fast as possible.. http://showdownjs.com/#!/blog/rewriting-the-parser-challenges-and-opportunities. The error is here:\n\nat Object../node_modules/showdown/src/showdown.js\n\nYou cannot import directly from the src directory. You need to import from the dist directory, where all library files are concatenated.. It's impossible to know for sure what the problem is since you don't provide any details but,  I can make an educated guess of the situation.\nRegardless, the issue is not caused by showdown and it cannot be fixed by changing showdown because:\n\nShowdown does not use iframes at all so you're including an HTML element directly or using a third party extension.\n\"Live previews\" are... well... live. This usually means the \"reparse\" all text everytime there's a change in the source text in order to be updated.\nThe iframe disappearance/reappearance is not caused by showdown but rather by the browser that performs an async request to the page that the iframe points at. If the HTML node is removed/change and then reinserted, the browser need to reload the iframe.\n\nIf that is annoying, I recommend making the preview not so live, but rather only update when the user performs an action (like clicking a button).. In version 2.0 you will have full control over the output of a subparser via templates (and other awesome goodies).\nRight now you can:\n 1. use a output extension to change the HTML generated OR...\n 2. copy/paste the subparser source and re-register the subparser, making the changes as you see fit. https://jsfiddle.net/tivie/qeLrxzcn/\nThe second solution is faster but the first one is better. Yes. I would probably add more context to the regex, just to make sure only tasklists are affected. Something like\nregex: /<input type=\"checkbox\" disabled(?:=\"disabled\")?/,\nreplace: '<input type=\"checkbox\"'\n\n. @asbjornu Did you manage to work this out?. You can check a working fiddle here: https://jsfiddle.net/e5af9kdr/1/\n```js\nvar taskListEnablerExtension = function() {\n    return [{\n        type: 'output',\n        regex: /<input type=\"checkbox\" disabled(=\"\")?/g,\n        replace: '<input type=\"checkbox\"'\n    }];\n};\nvar converter = new showdown.Converter({\n    tasklists: true,\n    smoothLivePreview: true,\n    extensions: [taskListEnablerExtension]\n});\n```. #\n\nDonate\nAs you know, ShowdownJS is a free library and it will remain free forever. However, maintaining and improving the library costs time and money.\nIf you like our work and find our library useful, please donate through Patreon or directly through paypal!! Your contribution will be greatly appreciated and help us continue to develop this awesome library.. Can you please provide a bug report in the format: \n - input\n - expected\n - actual\n\nI've just tested in the demo, and it seems to be working as intended\n. @MarkPatt89 Closing as no feedback was produced in 11 days. Feel free to reopen the issue if you have something to add.. @oscarmorrison can you elaborate a bit? What do you mean by emojis broken in minified build?\nI've just tested in a fiddle, with the minified version and emojis seems to be working ok.\nhttps://jsfiddle.net/tivie/w9bd7rot/1/\n. @oscarmorrison Closing as no feedback was produced in 11 days. If you feel this was premature, feel free to reopen the issue.. Oh, I see. Thanks. @oscarmorrison thank you for your suggestion but... There's already an option to open links in external windows \ud83d\ude05 \ud83e\udd23  openLinksInNewWindow\nor... do you mean opening ONLY links that point to external URLs in a new window?\nIf it's the second, unfortunately that cannot be put into showdown since it doesn't make sense in nodejs environment (and the 'window' object is not available in Node).\nBut as you rightly pointed out, that can easily be achieved with an output extension (with the side bonus of said extension being able to also change tags that the user wrote in HTML in the original document).\n. @oscarmorrison Did you manage to find a solution for your problem?. Thank you. Fixed. thanks. Those events are not supported yet. I'm in the middle of a complete reqriting of the parser and event systems for version 2.0.. No problem. I pushed those updates because I was having troubles with my local disk and didn't want to lose the code changes.. You need to deactivate simpleLineBreaks option after enabling the the github flavor. \nvar converter = new showdown.Converter();\nconverter.setFlavor('github');\nconverter.setOption('simpleLineBreaks', false);\nWhy?\nWell, because github, for some reason, is inconsistent in how it treats linebreaks. For instance, in comments it treats linebreaks as <br/>. (You can try it here in the comment section)\nThis text\nhas only\nsoft breaks\nBut in reamde.md and other places, it ignores soft linebreaks (unless you add 2 spaces at the end of the line). It's correct. The commit fe70e45 (the one with the midWordsAsterisk fix) is after commit a8bcde1 (v 1.8.6 commit).\nSince version 2.0 is taking a lot more time than expected, I will backport some of the fixes from 2.0 and release a version 1.8.7 today if possible.\n. @KirkMunro Btw, do you feel literalMidWordAsterisk is an essential option? Cause for version 2.0 I was really thinking about droping that option since it's causing a lot of trouble in the new parser. Version 1.8.7 is available now and should include that (and other) bugfixes.. > What needs to be done to make 1.8.7 available on cdnjs?\ncdnjs should update automatically. This update is taking longer, I don't know why. You can try to post an issue in the CDNJS repository so that devs might have a look why the package is not being updated.\nYou also have https://unpkg.com/#/ CDN: https://unpkg.com/showdown@1.8.7/dist/showdown.min.js\n\nAlso I just looked at the change log and it doesn't show any changes for 1.8.6 or 1.8.7\n\nWhat do you mean? https://github.com/showdownjs/showdown/blob/version_1.x/CHANGELOG.md\n. Yes. I will update that . Can you please elaborate?. You can make an extension.\nAlso, if you're willing to wait for version 2.0, creating a TOC will be trivial, sicne showdown will have a proper parser that outputs an abstract node tree that represents the document tree (and you can grab all the headings to create a TOC).. Thanks. Thanks. Thanks!. Nice catch. The document is pulled from the wiki https://github.com/showdownjs/showdown/wiki/Showdown's-Markdown-syntax\nshould be fixed now. fixed. If you're refering to showdown being vulnerable to XSS attacks, please check the following link: https://github.com/showdownjs/showdown/wiki/Markdown's-XSS-Vulnerability-(and-how-to-mitigate-it)\n\nShowdown tries to convert the input text as closely as possible, without any concerns for XSS attacks or malicious intent. So, the basic rules are:\n\nremoving HTML entities from markdown does not prevent XSS. Markdown syntax can generate XSS attacks.\nXSS filtering should be done AFTER Showdown has processed any input, not before or during. If you filter before, it\u2019ll break some of Markdown\u2019s features and will leave security holes.\nperform the necessary filtering server-side, not client side. XSS filtering libraries are useful but shouldn't be used blindly.\n\n\n\nIf you're referring to the Demo page, it's not possible (as far as I know) to use that page to target other people, only yourself. Even if you share a malicious composite link, the input gets sanitized.\nexample:\nhttp://demo.showdownjs.com/#!/%3Cimg%20src%3D%22dummy.png%22%20onerror%3D%22alert()%22%2F%3E\nBesides, the demo page doesn't store any relevant user information (just the last used options in the website), so an attack would be rather pointless.\n\nDuplicate of: #555 #454 #446 #283 #282 #252 #216 #182 #71 #70 #57 \n. According to markdown spec, in lists, sub-blocks need to be indented 4 spaces. That includes sub-lists:\n- foo\n    - bar\nHowever, almost all implementations (for historical reasons) accept 2 space indentations in sublists.\nYou can enabled this feature in showdown with option disableForced4SpacesIndentedSublists\n. I just noticed that with the last update the Demo Page is broken (options won't stick). I will fix that as fast as possible. Hi @neooblaster \nThe newline between * **Edition Tags** : and the fenced codeblock is required according to the original spec.\nSome markdown implementations are more lax and don't require this (namely commonmark)\nNote: Showdown version 2.0 which have a fully compliant commonmark \"mode\".\n. Hope I can launch an alpha until the end of the year. thank you for your contribution. \nI've been swamped in work lately, but will use the xmas vacations to look into this.\nOne important thing though, version 2.0 will have templates, which will enable users to easily and completely change the HTML output.\n. Thanks. ? Can you please elaborate?. I know these are markdown flavors. \nRegarding CommonMark and GFM, showdown already supports all the features (although there are some differences in output in edge cases). \nIn fact, some of the features of those specs were borrowed from showdown.\nAs for non standard implementations, that's what extensions are for. With showdown it's trivial to add new syntax.\nWith version 2.0, the new template system will make it even easier to add new synatx and even completely change the output of existing subparsers.\n. Thanks. I will look into it.. Thank you very much @ggboy-shakalaka \nCan you please add a testcase for this?. @fkorak Version 1.9.0 lives in a different branch than master. However I don't see any problem of updating the master changelog, although I won't track to changes in master branch.. @edgewood1 Can you specify exactly the input, expected output and actual output?. The file you provided is in RTF format. Sorry, maybe I wasn't clear. In order for me to help you, I need the markdown input, the output from showdown and the output you expected.\nExample:\ninput\nmd\n*foo* **bar**\nexpected output\nhtml\n<p><em>foo</em> <strong>bar</strong></p>\nactual output\nhtml\n<p>foo bar</p>. Yes, sorry, you're right, I missed it.\nWhat version of showdown are you using?  In the latest version 1.9.0 I could not reproduce the issue. demo\n\nHowever, upon rendering in chrome and firefox, this line is not in bold even though a similar line set for italics renders fine.\n\nFrom what you say, I reckon it must be something that is changing showdown's output after it parses the text.. oof. Thank you for reporting this. Should be an easy fix. thanks for your contribution. I will review this as soon as possible. Some minor changes need to be done, namely in only using the \"polyfill\" if the native method is not present (since the native method is much faster than the polyfill).. Version 2.0.0-alpha1 is not out yet. I'm assuming you're using the master branch. \nCan you point me to the line numbers that error?\n. confirmed. Thanks. I will be removing this feature since it's too much work figuring out when it's ok to make the replacement and where it isn't.. @Dam-Buty That is a damn good reason! \ud83d\ude2e . @dchester Thank you. I've made some minor changes in order to match markdown's spec.\n. Can you give an input and expected output of what you're trying to achieve?. confirmed. Is the output the same with literalMidWordUnderscores enabled?. Metadata is similar to YAML but it's not YAML. It's supposed to be a way for defining HTML metadata.. While I understand the appeal of supporting full YAML, I don't think the pros outweigh the cons.\nThe metadata feature is meant for defining HTML metadata which is rather simple and does not support most YAML features (like arrays, lists, etc...). It's not \nAlso, it would slow down the parser just for those extra features, which most users don't really care about.\n\nThen I don't have to use a different tool to parse front matter just because the built-in one is worse.\n\nIn order for fully support YAML I would need to add an extra dependency (a YAML parser) to showdown so you would be using a different tool anyways, you just wouldn't notice it.\nAs @jcc10 pointed out, using getMetadata(true) is more flexible. You get the raw stuff and can parse it however you want. \n. thank you. Humm... I've just tested your input and I got a different output:\n```html\n\ntest\ntest\n\ntest\ntest\n\n\ntest\ntest\n\n```\nHowever your issue remains more or less the same (<my-element markdown> is treated as inline).\nThere's no easy way to force showdown to treat custom html elements as blocks since those elements are... well... custom!\nHowever, you can work around that issue using extensions. One simple hackish way is to make an output extension that replaces <p><my-element markdown> with <my-element markdown> and </my-element></p> with <my-element markdown>.\n. Glad your worked it out. thanks. That's because D:\\Program Files\\dom_screennail.png is not a valid URL. The correct way to use it is: D:\\Program%20Files\\dom_screennail.png or even file://D:/Program%20Files/dom_screennail.png\n. Shwodown doesn't currently support empty list items, but will probably support in version 2.0. Thank you. It's indeed a bug. I will look into it, but I've performed a quick test and couldn't reproduce the issue.. @Johns3n You mean relative links in autolinks?. I will look into it. Thanks,. I'm sorry what?. This library is a markdown to HTML converter. Are you sure you're in the right repository?\nhttps://showdownjs.com. You can achieve this with an extension, although currently makeMarkdown is still an experimental feature.. Sorry for the delay in answering the question. That is, in fact, a mistake. I've checked the code and previous versions are under BSD. I will fix the readme as soon as possible.. Thanks for your contribution. I will have a look as soon as possible, when I have the time.. Glad you figure it out. :). This would require showdown to become async, which is something we won't be implementing, at least in the near future. However, you make make showdown async yourself (by running it in a webworker, for instance, or wrapping it in a async process). This way you could achieve what you want without any changes to showdown's source code.. Where you expecting multiple empty paragraphs? Or the html output to have 2 paragraphs separated by multiple empty lines?\nMarkdown spec ignores multiple empty lines (meaning they don't get converted into paragraphs). Some markdown implementations keep those line breaks in the output (without them getting converted to paragraphs), but since those are \"silent\" in HTML, we opted to remove them.\n. Yes, to avoid ambiguous situations, tables syntax requires at least 2 hyphens as separators.\n. > @tivie Can you provide an example of one of those ambiguous situations?\nSure.\na | b\n - | -\n c | d\nshould this be rendered as a table? or as a paragraph followed by a list? in fact github thinks it's the later...\na | b\n - | -\n c | d\nwhile with 2 dashes is unabiguous:\na | b\n -- | --\n c | d\n. TL;DR;\nIt's a pain because I think Showdown's implementation is better than GFM's and GFM Implementation will eventually be changed (maybe?). We need a lot of changes to make tables fully GFM compliant and some are clearly backwards incompatible (such as blank line after table requirement).\nThis particular fix you point out requires a lot of code change.\n\n\nThe table I posted doesn't have such ambiguity, since the divider row starts with a pipe and not with an hyphen this enforced double-hyphen rule seems to break some perfectly valid and unambiguous tables to me, right?\n\nYes, there is no ambiguity in your specific example, since it clearly seems a table \ud83d\ude05. But since our spec states that leading and trailing pipes are optional, it becomes ambiguous if you remove the optional leading and trailing pipes.\nAlso, there are more examples of ambiguity in GFM.\n| |\n|-|\n4x0r\nGFM parses this like this:\n| |\n|-|\n4x0r\nOf course this is super edge case and a super weird way of writing \"pipe haxor\", but you get the point.\nThis also hints other cases which, IMHO, are ambiguous in GFM Table spec, although they are not directly related to the number of dashes...\n| foo |\n|-|\nbar\nbaz\nbazinga\n| foo |\n|-|\nbar\nbaz\nbazinga\n\nThis syntax for writing tables isn't specced in the original Markdown spec\n\nYes, tables are not a standard syntax of markdown. Showdown's implementation is based off the commonmark tables syntax, which is not part of core spec yet (it's just a proposed extension), but it's reasonable to expect it will become part of core sooner or later.\n\nsince showdown supposedly supports the gfm spec, which defines a syntax for tables, I guess tables should be rendered the same way they are rendered here on GitHub otherwise those are not gfm tables but showdown-formatted-markdown tables, whatever that means, no?\n\nThat is technically true. However there are some issues that make me kind of resistant to the change...\n - GFM became commonmark compliant a while ago. That means it should support the full commonmark testcase (whihc it does). But since tables syntax is not core spec yet, GFM retained their old RedCarpet implementation. \n - If we switch to GFM tables, we would need to change our spec and later change it again, when commonmark spec eventually moves tables to core spec.\n - GFM implementation is slower and more complex, since it has a couple of extra rules to prevent ambiguity.\n - Showdown's set of rules are faster and simpler, since you don't need to test for \"lists\".\n - It might be confusing for users, since they might expect that leading and trailing are totally optional, and become confused when they aren't. The showdown's case in which leading and trailing pipes are required is pretty much self explanatory in human terms (one column tables).\n - Lastly, there are other changes that we would need to make in order to be fully compliant with GFM tables, namely:\n    - GFM doesn't need any characters inside |, showdown needs at least one character.\n    - Showdown requires an empty line after tables, GFM doesn't.\n    - In GFM, | are mandatory or optional on a case by case basis (basically GFM turns everything into tables except if it's turned into something else, like a list). In showdown are always optional EXCEPT in one column tables, in which they are ALWAYS required in ALL lines. \n. As per the original spec, sub blocks in lists require an empty line before and an indentation of 4 spaces.. Can you provide an input example?\nhttps://github.com/showdownjs/showdown/blob/4da93e8e136e5cc1f13ad2b3d5477c14e11aaafd/src/subParsers/makehtml/hashHTMLSpans.js#L41. Bug confirmed.\nThe input text has non-breaking spaces inside the code block which get converted to the correspondent html entity &nbsp;. However, then the code block is encoded again, changing & to &amp; resulting in that weird behavior.\n. Thanks for your contribution. I will have a look as soon as possible. ",
    "brianherbert": "I'm using Firefox 16 on OSX. When I looked at converter_options and converter_options.extensions in the console, they were strings, not objects.\nAnyway, let me give this a shot and see what's up.\n. It works now! Thanks! I'll go ahead and close this out.\n. ",
    "lhagan": "\"...should extensions be in their own repo and made available through submodules?\"\nI'm interested in this as well - putting together some extensions and wondering how best to share them. My vote's for separate repos as this is how all of the other JS projects I'm familiar with handle them.\n. ",
    "snowair": "you can use \n```\nlink\nhttps://github.com/an_emphasis_link\n```\n. ",
    "ManUtopiK": "Ok. I didn't know if it was a bug.\nYou mean:\n[https://github.com/an_emphasis\\_link](https://github.com/an_emphasis_link)\n. +1 \nI got this issue too!\n. ",
    "gkoberger": "@Alir3z4 Why did you close this? Did you find a solution?\n. ",
    "Download": "Markdown (and thus also Showdown) are inherently unsafe where it comes to HTML. There are a bunch of other issues here debating it but basically read this if you want to know more:\nhttps://michelf.ca/blog/2010/markdown-and-xss/\nThe solution is to sanitize the HTML after Showdown has generated it. I suggest using sanitize-html, which is used by many and well maintained. It is as easy as:\njs\nvar sanitizeHtml = require('sanitize-html');\nvar dirty = 'some really tacky HTML';\nvar clean = sanitizeHtml(dirty);\n. ",
    "AnthonyAstige": "I found this bug too and before realizing a solution was here, made a fix / duplicate pull request @ https://github.com/coreyti/showdown/pull/55\n. https://github.com/coreyti/showdown/pull/48 was created before I realized someone else had encountered & resolved this bug.  It has similar code / solution.\n. ",
    "selfcontained": "Would be nice to have it work w/ browserify, and there are other options aside from removing all server-side code.  If there are truly differences between a browser build and what's used in node, you can provide a separate browser version via the browser property in package.json, which browserify respects.  Sometimes it takes some organization in dependencies to make these separations clean.\nhttps://gist.github.com/shtylman/4339901\n. ",
    "leeola": "Well, in this case you wouldn't even need to provide two different versions. This version will work fine in both Browser and Server, it's just that the above code essentially recreates require for absolutely no reason (none that i can figure at least).\nFor now i'm just concating the js file, but eventually i need to fork this and fix the issue. I can't find a reason for the above filesystem calls :/\n. ",
    "craigspaeth": "+1\n. +1\n. ",
    "ryanflorence": "This also bums me out, anybody have a fork out there already before I go make one?\n. I don't think so, browserify uses static analysis, not runtime evaluation.\nOn Thu, Apr 17, 2014 at 4:42 PM, Erik Rasmussen notifications@github.comwrote:\n\n+1\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/coreyti/showdown/issues/50#issuecomment-40771009\n.\n. Just use marked.\n\nShowdown is clearly not maintained.\n\nOn May 21, 2014, at 3:19 PM, bhirt-bpl notifications@github.com wrote:\n+1\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "ThomasDeutsch": "+1\n. +1\n. ",
    "SystemParadox": "This causes it to fail with webmake as well. Wrapping the require in a try-catch would be sufficient as a quick fix. Not sure if that would help browserify or not.\n. > Showdown is vanilla markdown\nBut vanilla markdown is unmaintained and broken in this behaviour. Could an option be added to support github flavoured markdown?\nThanks.\n. ",
    "erikras": "+1\n. ",
    "bhirt-bpl": "+1\n. ",
    "gaearon": "Same problem with webpack.\n. ",
    "mzabriskie": "Any progress on this front? It's been a year and a half with no response.\n. ",
    "pikeas": "+1 for progress or an update on this...\n. ",
    "aminroosta": "i have applied the @rjmackay pull requrest in my fork : \nhttps://github.com/aminroosta/aminroosta.github.io\nno more browserify or webpack errors .\n. +1 thank you :)\n. ",
    "zallek": "It's fixed in the showdown2 branch.\nNote: You now need to instantiate converter using var converter = new Showdown.Converter();\n. ",
    "thoughtpalette": "I think you would create an API endpoint to your server and convert it on the back-end and return the converted HTML.  Otherwise I have no idea what you're asking. \n. ",
    "kssminus": "you can check out http://www.akravets.com/posts/showdown-extension-for-youtube-videos\n. ",
    "mehulkar": "Ahh very nice. I haven't tried it out, but looks good! Thanks @kssminus \n. Do people not contribute to this library because there's nothing left to contribute or because no one uses it?\n. @coreyti could we get this merged?\n. Awesome, thanks! Glad this project is active :)\nOn Tuesday, May 26, 2015, Devyn Stott notifications@github.com wrote:\n\nClosed in favor of showdownjs/youtube#1\nhttps://github.com/showdownjs/youtube/pull/1\nThank you to everyone who did all the hard work for this (The pull is a\ncopy and paste of your hard work). @mehulkar https://github.com/mehulkar\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/showdownjs/showdown/pull/73#issuecomment-105645892.\n\n\n\nMehul Kar\n@mehulkar\n. My code is problematic by the way. See the comment I left. The global\nvariable assign is to Twitter instead of YouTube. It should probably be\nfixed in the port as well.\nOn Tuesday, May 26, 2015, Pascal Desch\u00eanes notifications@github.com wrote:\n\n@mehulkar https://github.com/mehulkar as a phoenix, with hard work from\n@tivie https://github.com/tivie !\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/showdownjs/showdown/pull/73#issuecomment-105650940.\n\n\n\nMehul Kar\n@mehulkar\n. err.. this should be window.Showdown.extensions.youtube\n. ",
    "danielquinn": "I don't understand how there can be a build error for one line of documentation.  I'm afraid that as someone who's never used Travis before, that link doesn't help either.\n. ",
    "vicary": "This is due to the devDependency on grunt-mocha does not have version specified, while its latest version requires grunt 0.4. Either updating dependency of grunt to 0.4, or specify a 0.3-compatible version of grunt-mocha should fix this.\nI am not sure grunt 0.4 is backward-compatible enough to safely move on, especially when grunt-mocha explicitly denied 0.3.\nNeed someone to confirm this.\n. ",
    "nodesocket": "+1, had this same problem using client side. Should be:\nvar converter = new Showdown.converter({ extensions: [\"github\"] });\n. ",
    "gsomething": "Just had to look through the source code to figure out the documentation is wrong.\n. ",
    "spikebrehm": "Why not just\njs\nif (fs && fs.readdirSync)\n?\n. ",
    "avanc": "+1 from my side as I ran into the same problem an these changes fixes it for me.\n. ",
    "JakobKallin": "Correct. As I wrote in my original comment, Markdown already allows markup injection by design, so this doesn't introduce any (unintended) security issues. It's still a defect, though, causing invalid markup to be generated in some cases. To avoid it, URLs should be HTML-escaped before being inserted between attribute quotes.\n. Also keep in mind the difference between URL encoding and HTML escaping (neither of which has a standardized name as far as I know): URL encoding replaces characters that are not allowed in URLs, while HTML escaping replaces characters with special meaning in HTML. While I think both would work fine here in practice, HTML escaping is the correct one in this context.\n. ",
    "brianhiss": "I have the same issue with the Twitter extension and hashbangs in CSS code.\n```\ncssid {\n```\nwill become:\n<a href=\"http://twitter.com/search/%23cssid\">#cssid</a> {\n. ",
    "mmavko": "Similar thing happening in @borismus's \"Markdown Preview\" Chrome extension (https://chrome.google.com/webstore/detail/markdown-preview/jmchmkecamhbiokiopfpnfgbidieafmd).\nHere's the snippet:\n```shell\n    $ python ./Texas/manage.py syncdb\n    $ python ./Texas/manage.py migrate\n    ```\nAdditionally, this gets wrapped in code tag, but no pre tag. The output:\n<code>shell\n$ python ./Texas/manage.py syncdb\n$ python ./Texas/manage.py migrate\n</code>\n. ",
    "tanepiper": "Ignore - after tracking this down further found the bug was being caused elsewhere\n. ",
    "thejspr": ":+1: \n. ",
    "nilbus": "This duplicates #47, #54. Both of those should be merged.\n@coreyti if you don't have time and would like some help resolving the open issues, I would be glad to assist. Just let me know.\n. ",
    "mitya57": ":+1:, it would be nice to have this fix. @coreyti \u2190ping?\n. ",
    "tgienger": "Wouldn't it be better to be more specific with the regular expression? For this particular one I'm using:\njavascript\ntext = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]\\([ \\t]*()(?:(?:['\"])?((?:(?:http|https):\\/\\/)?(?:[\\w\\-_]+(?:(?:\\.[\\w\\-_]+)+))(?:[\\w\\-\\.,@?^=%&amp;:\\/~\\+\\!#]*[\\w\\-\\@?^=%&amp;\\/~\\+#]))['\"]?)\\))/g, writeAnchorTag);\nThis doesn't allow spaces at the end of the url or anything between the quote and ending parenthesis.\nexample:\nmarkdown\n[parses](http://www.example.com)\n[does not parse](http://www.example.com\" )\nUPDATE: This one allows for inline url with title - the one I'm currently using:\njavascript\ntext = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]\\([ \\t]*()(?:(?:['\"])?((?:(?:http|https):\\/\\/)?(?:[\\w\\-_]+(?:(?:\\.[\\w\\-_]+)+))(?:[\\w\\-\\.,@?^=%&amp;:\\/~\\+\\!#]*[\\w\\-\\@?^=%&amp;\\/~\\+#]))['\"]?)()()(?:\\s)?(?:['\"](.*)(?:['\"]))?\\))/g, writeAnchorTag);\nexample:\nmarkdown\n[parses](http://www.example.com \"Title\")\n[does not parse](http://www.example.com \"title\" ) // No spaces or characters after last parenthesis\n[does not parse](www.example.com  \"title\") // More than one space between url and title\nWhen adding inline title it must have two quotes.\n. ",
    "markgeraty": "@pdeschen We just published showdown-xss-filter to npm using the library you suggested above.  Seems to work great, hope that helps!\n. Created issues for those - feel free to create an issue for anything else you think we are missing!\nhttps://github.com/VisionistInc/showdown-xss-filter/issues/1\nhttps://github.com/VisionistInc/showdown-xss-filter/issues/2\n. ",
    "klmdb": "+1 for documentation request\n. ",
    "supercobra": "Awesome. Thank you for contributing.\n. Not sure why. We are using it Metadot. Very useful. Maybe not enough people know about it.\n. ",
    "xdamman": "+1 can this be merged?\n. ",
    "SyntaxRules": "@pdeschen Can you create a repo for this? (I am unable)\n. Closed in favor of https://github.com/showdownjs/youtube/pull/1\nThank you to everyone who did all the hard work for this (The pull is a copy and paste of your hard work). @mehulkar \n. @xdamman Would you mind adding a test so that we don't break this functionality in the future?\n. I'd like to help out as well- specifically on the AngularJs integration side.\n. I'd also be happy to help migrating from grunt to gulp(v4.0 when its released) task automation.\n. @tivie Thanks. An advantage of gulp over grunt is speed. Its hard for me to say how much of a speed up you would get by migrating (if any) because I don't know all the specifics of how this project uses grunt. \nI can see the argument for just using npm modules and I totaly agree this works out well for simple projects. So maybe that applies here.\n. :+1: \n. @tive @pdeschen Do we want to create a mathjax extension repo inside the showdown organization or have it external to the showdown org? I'm happy to create repo in the org and move this over.\n. I think Adding in the GFM features is smart, and an easy way to compete with other parser's out there. \nMarked does this via on option, but i would discourage putting it as an option in Showdown. The advantage Showdown has over Marked is that it is easily extendable. I think all of these quirky features should got in a GFM plugin. This plugin could depend upon other plugins. This way someone could pick and choose which items they want in there markdown.\nIf we feel strongly about including GFM features, we could include them by default.\n. I would greatly enjoy this feature. My main use case is to be able to decorate markdown to look prettier. But I can understand why the original spec didn't make heavy provisions for it- markdown should be markdown, not markdown with html.\nThat being said github doesn't support this.\n. @tivie Thanks!\n. ",
    "krist10an": "This fixed the issue for me :thumbsup: \n. ",
    "brutalhonesty": "+1 this please!\n. ",
    "StevenClontz": "Another +1 from me\n. ",
    "jonniespratley": "+1\n. ",
    "easingthemes": "What's the status for this? Currently there is .bower.json file after bower install, but still no main attribute.\n. ",
    "nicovalencia": "ty @tivie \n:watermelon: \n. Awesome, stoked y'all are working on this. Really appreciate it!\n:lemon: \n. I'm working on this issue after noticing ids were being added during a bug fix for Ghost.\n. In addition to incrementing a unique identifier for ids, we should also prefix the id with a namespace. Allowing users who leverage this library as a content editing system opens the door for them to inadvertently match existing style rules based on the header id/content. (Exactly what's happening in Ghost)\nI'm proposing a format similar to the following:\n```\nhelloworld\nhelloworld\nhelloworld\n```\n<h2 id=\"section-helloworld\">helloworld</h2>\n<h2 id=\"section-helloworld-1\">helloworld</h2>\n<h2 id=\"section-helloworld-2\">helloworld</h2>\n. A side-note for this fix/hack:\nUsers really shouldn't be creating duplicate headers to begin with. Personally, I feel like the library should warn when this happens and not allow for duplicates or any other invalid/non-semantic markup. This would bring an entirely new purpose (markup validation) into the responsibilities of this library, so we should definitely spin off a new thread to deal with that if necessary -- I just wanted to note the underlying issue here.\n. Makes sense to me -- thank you @tivie!\n:cake: \n. ",
    "notatestuser": "I know this is a bit of an issue necro but unfortunately this also breaks genuine uses of underscores.\n. ",
    "Sophie-OS": "maybe add it to your other extension called youtube. If you could implement this it would be a must\n. The lastest Ghost showdown is broken as they have a couple of nasty issues that couldn't fix yet.\nI think Showdown being used as Ghost MD engine has increased showdown's popularity, as Ghost is a very popular blog system nowadays. \nMaybe Showdown's and Ghost's teams could work together to bring the latest awesome features in showdown to ghost?\nI've managed to fix some issues in my local dev machine I can publish that might give a jump start in the project.\n. ",
    "fulmicoton": "Les framboises sont perch\u00e9es sur le tabouret de mon grand-p\u00e8re.\n. ",
    "tonylampada": "I can confirm that it solves the bug.\nThanks @arekkas!\n. :(\nDo you know of a better repo to track?\nFrom the readme on this repo it doesn't look so good!\n. @superoak\n. @pdeschen \nAre you sure? From what I can find, there are 2 johns:\n- John Fraser = showdown.js = attacklabs.net\n- John Gruber = markdown (perl) = http://daringfireball.net/projects/markdown/ \nAm I mistaken? If so, who's the original author of showdown.js anyway?!\n. Here!\nLook at the source - https://github.com/coreyti/showdown/blob/master/src/showdown.js\n// Copyright (c) 2007 John Fraser.\n. ",
    "aeneasr": "Is anyone even maintaining this repository? The PR is 2 months old..\n. Oh doesn't seem like it. Last activity on master was in 2012\n. Nope sry\n. ",
    "shhQuiet": "Came here to find any issues related to underscores/asterisks/etc embedded in URLs, for example:\n![my cat](http://myserver.com/my_kitty.jpg)\nThis ultimately results in malformed HTML, so I think it's essentially the same issue as mentioned by @SystemParadox \n. ",
    "zachad": "Edit: Just put a backslash in front of the underscore and it will prevent this situation.\n. ",
    "glacialblade": "i saw the error. the trim() in the table extensions does not work in ie8. i created a trim function to make it work thanks\n. ",
    "liamzdenek": "Markdown hasn't exactly changed, and the library perfectly stable. Not actively being updated should be seen as an advantage, especially in this case.\n. ",
    "mewben": "Okay thank you @liamzdenek ... Cheers...\n. ",
    "dbtek": "@pdeschen dependencies should be managed through bower. Fontawesome has its own bower repo. However, glyphicons is used with Bootstrap. This may have to depend on Bootstrap too.\n. ",
    "kaanozcan": "I'm wondering the same thing too. Could you write it down here if you figure it out?\n. ",
    "cbowdon": "I think that should be 'filter': \n\n   { \n        type: 'lang', \n        filter: function(text) { return text.replace(/\\@/g, '@'); }\n    }\n\nbased on the source of the table and prettify extensions.\n. ",
    "Nate-Wilkins": "@pdeschen Thanks!\n. ",
    "cirosantilli": ":+1:\nBTW, how is this engine better than:\n- https://github.com/chjj/marked\n- https://github.com/evilstreak/markdown-js\nboth of which are Node.js based, embeddable, have more stars and activity?\n. ",
    "lsbardel": "Thanks,\nthis repository is almost damaging, bad docs, no commits\n. ",
    "Miramac": ":+1:\ncompatibility with Browserify would be awesome!\n. ",
    "mattsmith14": "Sounds good. There are probably 4 other pull requests that attempt to fix the same/similar issues. This one is just a super simple check the fs has the method we are trying to use.\n. @tivie sounds great! Thanks for stepping up and managing this, it seems like you have a lot of work on your plate.\n. ",
    "kharandziuk": "Can somebody help with this CI output? It looks like this is a problem with build and it doesn't depend on actual change in code\n. ",
    "jjjjw": "Should have looked here first: https://github.com/coreyti/showdown/pull/109\n. ",
    "yaniswang": "Tks\n. Extenstion api is not strong enough, can't use subParser,globals.gHtmlBlocks...\n. I sugges save the table code in hash.\nI add a extention latex, match by $xxx$\n```\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| ~~col 2 is~~      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\nInline LaTeX: $E=mc^2$\n```\nIf table not save in hash, it will render badly.\n. http://showdownjs.github.io/demo/#/test%0A%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%0A%3Cinput%20type%3D%22radio%22%20name%3D%22a%22value%3D%22AA%22%20%2F%3E\n. Thanks, i know.\n. \n. Tks\n. ",
    "sirakoff": "@coreyti I am also interested.\n. ",
    "florenthobein": "@tivie I'm interested in your AngularJS integration, when do you think you'll be able to publish it on a dev branch?\n. ",
    "al-the-x": "@tivie Is there a PR open for your work to date? Love to help you refactor a little...\n. ",
    "tracend": ":+1: would love to help\n. ",
    "ohjames": "\nswitch to pure NPM based tasks\n\nNot enough power, no incremental rebuilds etc. etc.\n. ",
    "gtanyware": "After I used Showdown on my own project I've written a Dev.to article about extending it:\nhttps://dev.to/gtanyware/how-to-customize-markdown-4geo. ",
    "remy": "Good lord - thank you for fixing this...just hoping it'll be merged. Just been debugging it for the last few hours. I couldn't work out how the filter was being called over and the tbl wasn't be flushed :-\\\n. ",
    "idiotWu": "Hello tivie,\nWhen I attempting to use prism.js to highlight code for my Ghost blog, it appends an extra new line in code blocks.\nFor example, when I type in ghost like this:\n\n```css\nbody {\n    display: none;\n}\n```\n\nit will be compiled to:\nhtml\n<pre><code class=\"language-css\">body {\n    display: none;\n}\n</code></pre>\nand once I try to highlighted it with prism.js, an extra new line was rendered as I've showed above.\nI looked up at the source code and find showdown.js will add a new line for code blocks https://github.com/showdownjs/showdown/blob/master/src/showdown.js#L997, seeming that prism.js will add a new line again while rendering.\n. ",
    "ericyoungberg": "Great! Thanks\n. ",
    "TimSoethout": "This would solve some issues me and my team members are having.\n. ",
    "spockz": "The corrected pull-request is in #130 as I couldn't change this one to point to the correct branch.\n. ",
    "ldez": "Note that \\compressed\\Showdown.js is no longer compressed.\n. ",
    "ghost": "Wouldn't it be better just not to uppercase them? It broke things on our side as well. Or, release as 0.4.0, as suggested.\n. Thanks.\nEstev\u00e3o Soares dos Santos wrote:\n\n@herby https://github.com/herby The change in case was a mistake \n(i'm not sure why it happened). The next release will revert back to \nlowercase. Also, dist files will live in a \"dist\" directory instead of \n\"compressed\".\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/showdownjs/showdown/issues/133#issuecomment-70729314.\n. I strongly disagree. Images should have first class support. \n. Great stuff, thank you :)\n\nOn Wed, 17 Jun 2015 at 01:29 Estev\u00e3o Soares dos Santos \nnotifications@github.com wrote:\n\nAdded this feature as an opt in. To enable it you must use the option\nparseImgDimensions\nexample:\nvar conv = new showdown.Converter({parseImgDimensions: true});\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/showdownjs/showdown/issues/143#issuecomment-112610975\n.\n. @tivie Thank you Estev\u00e3o !\n. > Rename the showdown package to markdown.\n\nhttps://github.com/meteor/meteor/blob/devel/History.md#api-changes\nhttps://github.com/meteor/meteor/blob/devel/packages/showdown/package.js\n. @joemunriq \n\n(https://www.something.com/1234)\n\nInput: \nhtml\nhttps://www.something.com/1234\nOnce parsed it becomes:\nhtml\n<a href=\"https://www.something.com/1234\">https://www.something.com/1234</a>\n\nInput:\n``` markdown\nFollow this link to learn more.\n```\nOnce parsed it becomes:\nhtml\n<a href=\"https://www.something.com/1234\">link</a>\n\nInput:\nmarkdown\n[link](https://www.something.com/1234)\nOnce parsed it becomes:\nhtml\n<a href=\"https://www.something.com/1234\">link</a>\n\nInput:\nhtml\n( https://www.something.com/1234 )\nOnce parsed it becomes:\nhtml\n( <a href=\"https://www.something.com/1234\">https://www.something.com/1234</a> )\n. If you write the very same code, but with utf or unix encoding, node executes the cli showdown flawlessly.\n. Err, the encoding of this file in the repo here is utf, but the one installed via npm -g is DOS\n. what should be happening here is \\ before any control-symbol turns it to a simple char, making < to an &#60;, and since tag> is not a valid html \u2013 parser should leave it as text like it is with other things, like \\# H1\ntest:\nregular H1\n# escaped H1\n. turns out, github has escape for EVERY punctuation symbol: https://github.github.com/gfm/#example-296\nlikely due to regex smth. ",
    "scmx": "Hi @tivie, it seems this is still a problem. compressed/Showdown.js is still there.\n. Copy the contents, remove the files, create new files with lowercase naming and paste in the contents.\nSince windows NTFS filesystem is case insensitive I sometimes has problems with detecting when a file changes name from Showdown to showdown. I'm not sure that what I wrote above will solve this, but I recognised what you describes as something I've run into before. Git should pick up the change.\n. ",
    "GlassGhost": "I think they need to add a mathjax extension to the default extensions.\n. Hope this might help a lil bit, not my work but I did credit the author in the commit log.\nAlso, I'm still reading the wiki on the build process & how to add a test.\n. BTW It's currently not working for me: @ http://minjslib.github.io/gh-template/ really would appreciate if this was added, and someone made a pull request showing me how to get it working, I did manage to get  the table plugin working.\n. BUMP!\n. @pdeschen I'm sorry it's just my first pull request and I'm little excited.\nAlso I've been trying to get some more eyes and on my gh-template project. I thought more than 0 people would be interested in this sort of thing.\n. OK I got it working you may want to add a call to MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,\"SOMEHTML\"]); to the html before it is sent in the converter.makeHtml(SomeMarkdown) and you may also want to add <script src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full\"></script>\n with java-script somehow, or at the very least add these 2 parts in the documentation.\nOther than that is working very beautifully in my local copy of  @ https://github.com/MinJSLib/gh-template but the online version is not working as I'm having trouble using git gui and remotes, will fix soon ; )\n. Uh, I don't know if I'm qualified to do that. I didn't even make the source that xentec guy did.\nHowever I would love to be a tester.\n. Actually go ahead and create that showdown-mathjax repo & give me full privileges there I think I can handle it.\n. ?\n. \"we'll add a reference to it within the wiki section\" sounds like you're brushing me aside.\nI am NOT the only one who wanted mathjax support, I did all the work for yal and you won't accept it.\nApparently this project is more concerned with how the library works with twitter, than actual markup.\n. ",
    "rain1024": "@tivie How can I do it?\nCurrently, I walk though this problem by used these tools separately. I use setInterval to update mathjax outside of angular. It's acceptable but not perfect.\nI hope someone will make an extension for that soon.\n. ",
    "justathoughtor2": "I know it's significantly in the future from when this Enhancement issue was filed, but I did manage to get  a MathJax extension working with the showdown-ghost fork. It should work with regular showdown with a few modifications. I saved it as a simple Gist called mathjax.js, available (along with its README.md) at https://gist.github.com/justathoughtor2/7dbbecc912dfe4d3580b\nLet me know what you all think!\n. ",
    "excing": "There is an extension to Mathjax that you can use directly, this extension's GitHub is https://github.com/excing/showdown-extensions.. ",
    "iainmcampbell": "doh, not an issue with showdown\n. ",
    "ErisDS": "No problem, I've opened #147 and will close this in favour of it. \nJust FYI - you should be able to recreate a PR like this against the right branch by using the green create PR button on the main page of the repo, choosing 'compare across forks' and selecting the contributor's fork. I know only too well it's much easier if the contributor's does this themselves, however it's probably still a lot easier than any other way of manually recreating when push comes to shove :)\n. Closing in favour of #148\n. I completely understand that making changes to markdown behaviour when the library is following the original implementation is a tricky decision. I don't suggest going against the original lightly :)\nIn this particular case, I think the current output is very clearly unexpected behaviour and therefore the original behaviour can be classified as incorrect / a bug. Also as I mentioned, I think the particularly odd nature of this means it's very very unlikely anyone is relying on this behaviour.\nI'd also add that using babelmark to test snippets often comes up with quite a wide range of different implementations and in this particular case it's very clear that the majority of parsers have opted to classify the original behaviour as incorrect. Therefore I think it is pretty safe to follow suit, lest showdown become the only library still following the old way.\nNonetheless, I fully respect that this is not an easy decision to make. Some parsers have a normal version, and a 'strict' version for this sort of thing, but I do believe that's overkill in this particular case.\n. Just an FYI here - I would also really appreciate some info about what's changing and how to use it! \ud83d\ude01 \n. ",
    "bansalvks": "is it possible that we set the heightonly and the width will be auto calculated, accordingly? So that, the image does not look awkward?\n. is there any work around for now?\n. ",
    "charlesthk": "@bansalvks you can do it by specifying a star (*) for example : \n\n. ",
    "adam-beck": "Which is why I deleted my comment before you commented. Sorry for making a mistake. \n. @tivie Couldn't this be solved by bundling showdown? Then it shouldn't matter what version showdown uses vs the user. I agree, however, that only necessary functions should be pulled from the library.\n. ",
    "thetutlage": "Yes that was issue with something else . Closing\n. ",
    "chtixof": "OK, Merci Pascal.\n. ",
    "jcbrand": "It already exists as an extension, see here: https://github.com/showdownjs/showdown/blob/master/src/extensions/table.js\n. ",
    "johnjelinek": "table is a little strange as an extension, isn't it?\n. oic. I think in terms of docs, I wasn't expecting to search for extensions to find tables.\n. ",
    "8Miles-Mai": "~~Where can I get the extension? the follow url is missing now.\nhttps://github.com/showdownjs/showdown/blob/master/src/extensions/table.js~~\nOK, I get it. Thx.\nhttps://github.com/showdownjs/table-extension\n. yeap.\nBut we can do like this:\n1. 1\n2. 2\n3. 3\nlike this, add an list separator\n\n1\n2\n3\n. \n",
    "Zarel": "For anyone else who, like me, found this issue via Google, showdown now has built-in support for tables, through the tables option:\nhttps://github.com/showdownjs/showdown#valid-options. ",
    "acourtiol": "By the way, looking at the ng-showdown repository, I think you're going to have the same problem there.\n. ",
    "Paulmolin": ":+1: \n. ",
    "jdrouet": ":+1:\n. ",
    "JonathanHayward": "Thanks! My code runs without crashing now.\nThanks...\n. ",
    "be-next-hotdog": "For the test cases : \nTest case 1 : \n- Foo\n- Bar\n- Baz\n1. Foo\n2. Bar\n3. Baz\nTransformation result 1: \n- Foo\n- Bar\n- Baz\n- Foo\n- Bar\n- Baz\nTest case 2 : \n1. Foo\n2. Bar\n3. Baz\n- Foo\n- Bar\n- Baz\nTransformation result 2 :\n1. Foo\n2. Bar\n3. Baz\n4. Foo\n5. Bar\n6. Baz\nIt seems like that showdown will transform to ordered / unordered list according to the first list element type.  Otherwise caused by definition of markdown syntax ? I couldn't put these 2 kinds of etiquette (star/number) in the same list ? Thx a lot.\n. Yepp, I knew this solution before, and we could also type a space to each element as : \n- test\n- test\n  1. test\n  2. test\nin this case, the showdown will regard the second ordered list as a sublist. StackEdit follows this rule either, also the github comment tool which we use here.\nThx all the same guys ! \n. ",
    "ravisorg": "That's a very good point and something that somehow completely slipped my mind while writing it. I want to make a couple enhancements / changes when I have a moment, and I'll add \"remove jQuery\" to that list.\n. ",
    "JanLoebel": "Hi there, I started to write a TOC-Extension by myself. Have a look at: https://github.com/JanLoebel/showdown-toc   I ussed @tivie 's showdown-footnote-repository as a template. It's my first extension, if you have any problems or ideas please let me know :)\n. ",
    "cybercase": "Thanks for merging and for your quick reply :)\n. ",
    "bsansouci": "Sorry I messed up and forked the wrong thing.\n. ",
    "grofit": "A bit confused by this, I see in the documentation on the front page it mentions that tables and strikethrough are valid options for a convertor, which imply that showdown supports them by default. However looking on the wiki and at this issue imply that they are actually separate addons, so are the docs wrong or is there some mix up?\n. https://github.com/showdownjs/showdown/wiki/extensions\nThat lists the extensions for table etc.\nI did try to use the options and they didnt seem to change anything.\nnew showdown.Converter({\n        simplifiedAutoLink: true,\n        strikethrough: true,\n        tables: true\n    });\nThen if I were to add\n| *foo* | **bar** | ~~baz~~ |\n|:------|:-------:|--------:|\n| 100   | [a][1]  | ![b][2] |\nas shown in the example, it does not get processed, it just outputs it within a p tag, unless I am doing something wrong.\n. Sorry for the afk-ness, no I am on 1.1.0, but I only got that like a week or so ago, has it already changed so much? will go get latest and see what happens.\n. its ok I finally found the Gotchas section.\n```\nShowdown does the following escape/normalization:\nReplaces ~ (tilde) with ~T\nReplaces $ (dollar sign) with ~D\nNormalizes line endings (\\r, \\r\\n are converted into \\n)\nuses \\r as a char placeholder\n``\n. I did see them and they operate on the HTML rather than the original markdown content right? I was hoping I wouldn't need to go through the html and the markdown but will give it a go.\n. I assume these are edits as they were not there when I originally looked, this approach seems far easier as the` additions may just be one use case, thanks a lot for your help!\n. Yeah thanks, although I have noticed that some custom extensions I am using purely for allowing custom bindings within my own system getting butchered even with the above steps, I am not sure if it is the xss plugin though.\ni.e the text leaves the output step looking like:\n<a class='some-class' data-bind='click: function(){ someMethod('some-string', 'other-string'); }'>Some Text</a>\nbut then when it makes its way to the page if I view the element in firebug it looks like:\n<a }'=\"\" 'some-string');=\"\" other',=\"\" string=\"\" data-bind=\"click: function(){ someMethod(\" class=\"some-class\">Some Text</a>\nI assume once it leaves here the xss or some other filter hooks into it (only using tables, github, xss and this custom one) and destroys it even in the output phase. If it is the xss extension then maybe I will need to mod it to ignore my stuff.\n. turns out its not the xss filter, I turned it off, completely removed it from the project, still happens, I am gonna try removing all other plugins see if it happens, It is unrelated to this but will possibly raise another issue.\n== Edit ==\nTurned off all plugins, it seems to be something internal to showdown, let me see if I can recreate it in a jsfiddle, and will add it to a new issue.\n. Never knew that, I know that knockout allows you to set the html content of an element with this sort of thing so I will go look at see how they do it and see if I can replicate, although its gonna be difficult as I guess all I can do from showdowns perspective is output html, maybe I can use data-* attributes to feed my data in and then have a custom binding for linking and see if that works...\nThanks again for your help.\n. oh right, sounds good... (am I ok to pass in empty args for options and globals?) \nSo one other thing I found when trying to do custom code style handlers was that my custom extension seemed to get ignored in favor of built in ones, for example the code one, if I was to have a regex of:\n\n(?:```\\s?diagram[s]?)(.*)(?:```)/gm\n\nThen I had some markdown like so:\n\n```diagrams\nwoop woop\n```\n\nI would expect to grab the \"woop woop\" but my extensions do not seem to get run.\n. I mentioned it above but what should be passed in to options and globals? as I seem to get some errors if I leave them empty. i.e can I just get the options and globals from the current Converter? (then I would override the ghCodeBlocks bit)\n. ok thanks for the info, will look more into it tomorrow and get back to you.\n. Hey, sorry to re-raise this, I was working on some other stuff and only just got back around to looking at this area specifically.\nSo lets have a solid example:\n:> Hello\nI would want the output \n<blockquote class=\"custom-class\">hello</blockquote>\nSo I looked into the blockQuotes subParser, and did as you said:\n```\nreturn {\n    type: 'lang',\n    filter: function (text, converter, options) {\n        var dummyGlobals = {\n            gHtmlBlocks:     [],\n            gUrls:           {},\n            gTitles:         {},\n            gDimensions:     {},\n            gListLevel:      0,\n            hashLinkCounts:  {},\n            converter:       converter\n        };\n    var mainRegex = new RegExp(\"[\\s\\t]?((?:\\:\\>[\\s\\t]?.*\\n*)+)\", \"g\");\n    text = text.replace(mainRegex, function(match, content){\n        console.log(\"here\");\n        content = content.replace(\":>\", \">\");\n        return showdown.subParser(\"blockQuotes\")(content, options, dummyGlobals);\n    });\n    return text;\n}\n\n};\n```\nSo it will look for :> and any text following it (as well as on multiple lines), not the best regex but it will do for example purposes. now when I put in :> hello it does get processed as I see \"here\" in the console but the output seems to be a horizontal rule, instead of the expected blockquote.\nIs there any other magic I need to do in this instance?\n. Sure here you go:\nhttp://codepen.io/anon/pen/mJZrmb\nThat gives same output with the line appearing instead of the expected block quote.\n. That was one of the first sort of things I tried, but then I noticed that things like this occurred:\nhttp://codepen.io/anon/pen/LVKdvd\nWhere things would behave a certain way with normal bqs but these custom BQs would behave differently, like having headings within them or the following headings would not get processed.\n. I was using the regex from the blockquote parser locally after trying stuff out I just forgot to update the regex on there, but thanks for the working one.\n. no worries, it just seemed odd that the example on the website included this if it is not supported.\n. Just got the latest showdown.js from the dist folder on master and it still seems to be acting the same, the commit says its against master, could it just be that the dist was not updated?\n. ah kk, will give it another go shortly, thanks again for the quick turn around.\n. ",
    "ifeltsweet": "I'm actually for both options, but if have to choose only one then probably the first.\n. Isn't it 2 spaces?\nI know that in standard markdown you place two spaces at the end of the line to create a line break. Normal line breaks are not respected unless you have two consecutive line breaks which create a paragraph. That's how markdown works.\nHowever, GitHub flavored markdown for example respects single line breaks. How to do the same in showdown?\nTo illustrate:\nmarkdown\nword\nword\nin standard markdown would render as:\nword word\nbut with breaks enabled it would render as\nword\nword\nAn extension that does something like the following:\njavascript\nreturn text.replace(/[ ]*\\n/g, \"<br />\\n\")\nworks in most cases but breaks lists for example.\nThis feature is supported by a few markdown parsers already, namely marked (js) and parsedown (php). The question is how do I support this in showdown. I have played around with different regular expressions but can't find the one that works and doesn't break other stuff.\n. Okay, so after googling around, I found that Ghost does something like this already. They use a very simplified regex that doesn't work in all cases but the most trivial ones:\njavascript\ntext.replace(/^[\\w\\<\\'\\'][^\\n]*\\n+/gm, function(text) {\n    return text.match(/\\n{2}/)? text : text.trim() + \"  \\n\";\n})\nI played around with it and extended it to support more cases and be a little bit more robust (maybe?):\njavascript\n{\n    type: 'lang',\n    filter: function(text) {\n        return text.replace(/^( *(\\d+\\. {1,4}|[\\w\\<\\'\\\">\\-*+])[^\\n]*)\\n{1}(?!\\n| *\\d+\\. {1,4}| *[-*+] +|$)/gm, function(text) {\n            return text.trim() + \"  \\n\";\n        })\n    }\n}\nI've tested it with a number of documents and seems to work fine, but it still needs more testing, so be careful if you copy paste.\n. ",
    "rodrigogoncalves": "@tivie, you say \"according to spec\". Which spec is that? Is that CommonMark's?\n. ",
    "phw": "If I strip the word \"dangerous\" from my initial comment and edit the examples to be less security related, will you re-open this?\nSeriously, my main concern was the following usecase:\n1. I want to allow users to use the pure markdown syntax\n2. I don't want users to use pure HTML\nSo **bold** is fine, but <b>bold</b> isn't. If the user enters the markdown version it should be displayed as bold, if she instead enters the HTML version the whole HTML-Syntax should be visible. Currently I cannot achieve this as explained above.\n. I gave this a shot and created an extension to do just that: https://github.com/phw/showdown-htmlescape\nThe difficult part is to ignore all those parts that will do their own HTML escaping (code blocks and inline code). But so far it is working fine, even with code blocks inside block quotes.\n. ",
    "callmehiphop": "@tivie looks good to me! Thanks! :+1: \n. ",
    "stephenplusplus": "Thanks, @tivie!\n. ",
    "SimonButtazzi": "@tivie you are right.\nthis was included in another package and very outdated.\nSorry, definitively my mistake.\nSimon\n. ",
    "ColinFrick": "Thanks!\n. ",
    "soubok": "Thanks for your response. In fact I just want to make markdownConverter.makeHtml('hello **world**') to return 'hello <strong>world</string>' instead of '<p>hello <strong>world</string></p>'. (I am using showdown with nodejs)\n. ",
    "d-sko": "@tivie that solved my problem, thank you :+1: \n. ",
    "twitwi": "Thanks for your answer. I had seen the option motivated by #69 (the option is really useful, h1 vs h3 actually mattered a lot in my use case).\nI'll try to see if I can provide a pull request to update the demo (adding the option, but leaving it to 3 by default) to help first-time explorers like me not get confused (as the demo acts also as a documentation).\nFeel free to close this issue as I'm not sure if the PR will come soon.\n. NB: markdown seems to require escaping \"&\" and \"<\", but, as mentioned above, the problem is also visible with characters that lead to non-mandatory entity encoding such as \">\" as in this example (which is this time a proper markdown document):\nhttp://showdownjs.github.io/demo/#/%23%23%20Test%20pre%20in%20a%20list%0A-%20%3E%0A-%20%60%3E%60%0A%20%20%20%20-%20%3E%0A%20%20%20%20-%20%60%3E%60%0A%20%20%20%20%20%20%20%20-%20%3E%0A%20%20%20%20%20%20%20%20-%20%60%3E%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60%3E%60 \n. Great, thanks. (not tested yet)\n. caution: depending on the fix, the test might need to be updated: changing \">\" to \">\" in the expected result. \n. No problem, it's more something I stumbled upon in a very special situation.\nActually #196 happens more often in my use cases (but might be trickier, from my first experiments with showdownjs source code)\n. ",
    "13protons": "I'll give it a go - can you point me towards a reasonable starting point in the codebase? I haven't had time yet to get familiar with how showdown is structured. \n. ",
    "obedm503": "any updates on this? I'm also willing to help out.\n. can anyone point me to the best way to achieve this?\n. great. thanks\n. have you tried the official highlight extension? it uses google code pretty instead of highlight js\nhttps://github.com/showdownjs/prettify-extension\nI later realized that you want to use highlight.js specifically. \nhere @tivie shows how to make a \"highlight.js extension\" for showdown\nhttps://github.com/showdownjs/showdown/issues/215#issuecomment-168679324\n. what kind of attributes do want to add? some classes?\nyou could make an extension\njs\nshowdown.extension('myext', function () {\n  return [{\n    type: \"output\",\n    filter: function (html, converter, options) {\n      //parse the html string\n      var liveHtml = document.createElement('div');\n      liveHtml.innerHTML = html;\n      var images = liveHtml.getElementsByTagName('img');\n      var image;\n      for(var i = 0; i < images.length; i++) {\n        image = images[i];\n        image.classList.add('some-css-class');\n      }\n      return liveHtml.innerHTML;\n    }\n  }];\n});\nlive fiddle: https://jsfiddle.net/n122569s/\nUPDATE:\nif you want for the src of the images to not fail with 404 when you parse the html string, you can try using jQuery\njs\nshowdown.extension('myext', function () {\n  return [{\n    type: \"output\",\n    filter: function (html, converter, options) {\n      //parse the html string\n      var liveHtml = $('<div></div>').html(html);\n      //var liveHtml = html;\n      $('img', liveHtml).each(function(){ \n        var image = $(this);\n        image.addClass('some-css-class');\n        // or even prepend the src\n        image.attr('src', function(index, src) {\n          return 'https://obedm503.github.io/bootmark/' + src;\n        });\n      });\n      return liveHtml.html();\n    }\n  }];\n});\nfiddle: https://jsfiddle.net/f43s2w9x/\n. @wolfgang1983 maybe try substituting the single quotes around the php code with backticks, which support multiline text.\nhtml\n<script type=\"text/javascript\">\nvar converter = new showdown.Converter(),\n    text = `<?php echo $preview;?>`,\n    target = document.getElementById('output'),\n    html = converter.makeHtml(text);\n    target.innerHTML = html;\n</script>\nfor more support from template strings check this. I actually faced the same issue while working on bootmark. The way I went about it was to find all <table> elements, add the specific classes, and  wrap them in a <div> to make responsive.\nusing jQuery because of cross-browser support and easy api. disclaimer: code wasn't tested\njs\nshowdown.extension('myext', function () {\n  return [{\n    type: \"output\",\n    filter: function (html, converter, options) {\n      // parse the html string\n      var liveHtml = $('<div></div>').html(html);\n      $('img', liveHtml).each(function(){ \n        var table = $(this);\n        // table bootstrap classes\n        table.addClass('table table-sriped table-bordered')\n        // make table responsive\n        .wrap('<div class=\"class table-responsive\"></div>');\n      });\n      return liveHtml.html();\n    }\n  }];\n});. thanks for catching the typos @vanillajonathan . this is interesting. What about links that actually have spaces in them? Generally links to documents, presentations, pdfs have spaces in their names. Should people write the parsed link between the <> directly?\nso, this\nmarkdown\n<https://link.com/file%20name>\ninstead of this?\nmarkdown\n<https://link.com/file name>. remember that indentation affects how the markdown is rendered\nhttp://codepen.io/anon/pen/aJwLBx. Possible duplicate of #310. As for the fetching, converting and styling Markdown files automatically, bootmark already does that. there's the option of passing the extension directly to showdown instead of registering it globally. what I mean is, instead of\n```js\nconst extension = () => {\nreturn [{\n  filter(text, converter, options) {\n    const regex = null; // TODO get text between {{ }}\n    const newText = text.replace(regex, (wholeMatch, m1, m2) => {\n      // get config.version from passed through object and replace it\n     return '';\n    });\n  }]\n}\n}\nshowdown.extension('extension', extension)\n// listing extension\nvar converter = new showdown.Converter({ extensions: ['extension'] });\nusejs\nconst extension = () => {\nreturn [{\n  filter(text, converter, options) {\n    const regex = null; // TODO get text between {{ }}\n    const newText = text.replace(regex, (wholeMatch, m1, m2) => {\n      // get config.version from passed through object and replace it\n     return '';\n    });\n  }]\n}\n}\n// passing the extension directly\nvar converter = new showdown.Converter({ extensions: [extension] });\nthis allows you to pass config to the extension using partial applicationjs\n// this is the important part\nconst extension = config => () => {\nreturn [{\n  filter(text, converter, options) {\n    const regex = null; // TODO get text between {{ }}\n    const newText = text.replace(regex, (wholeMatch, m1, m2) => {\n      // use config.version from passed through object and replace it\n     return '';\n    });\n  }]\n}\n}\nvar converter = new showdown.Converter({ extensions: [ extension(config) ] });\n. given that the [`<a>` tag isn't self closing](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a), my guess is that showdown doesn't give it special treatment like actual self closing tags. was the result you posted from showdown directly or from the devtools? I ask because browsers tend to help and close tags that weren't closed. any advancements on this documentation?. you can always escape the `>` with `\\` http://demo.showdownjs.com/#/%3Eblock%20quote%0A%0A%5C%3Enot%20block%20quote. showdown does not include any styles. what are these styles you \"would expect to be applied\"?. related to #465. related to #465. well, I guess you want to be able to write math and print it nicely. then there's https://github.com/obedm503/showdown-katex it can print math in tex and asciimath. something like [picnic](https://picnicss.com/) might be useful since it doesn't require much dom manipulation adding classes like boostrap. I'd be nice if it was possible to register extra features as extensions, for example GMF, and emojis. They would be packaged but not bundled. The user would simply import the extension and register them. This would also simplify configuration when it comes to GMF. you need to set `literalMidWordUnderscores` option when creating the converterjs\nvar converter = new showdown.Converter({ literalMidWordUnderscores: true });\n``. great!\n@abuyoyo can you close the issue since this was resolved? thanks. maybe wrap it in` tags, but this is a bad practice. even mdn says\n\nThis element used to be called the \"Underline\" element in older versions of HTML, and is still sometimes misused in this way. To underline text, you should instead apply a style that includes the CSS text-decoration property set to \"underline\".. you could use showdown-katex to display both asciimath and latex. and i'm sure an extension for graphviz wouldn't be too difficult for you to write. do you have the tables option enabled? demo \n\nPS: please search for other issues before opening new ones. Make sure to enable ghCodeBlocks. You can read the rest of the docs in the wiki https://github.com/showdownjs/showdown/wiki/Showdown-options. is it showing both <p> and <b> tags? or just <p> instead of <b> tags?. if this is really happening, it seems like it's really a bug. ",
    "urmilparikh": "+1\n. ",
    "nikz": "@tivie: OK, great - would you like me to make the grunt modifications to exclude the map files? I can potentially handle that. :)\n. @tivie definitely agree, but without the files in src they aren't so useful? So we should either exclude the map files or include the source files?\n. @tivie I'm not 100% sure - I've just been removing the comments :) Let me give that a go today and get back to you?\n. @tivie I just end up getting a message like the following:\nWarning: ignoring input sourcemap for bower_components/showdown/dist/showdown.js because ENOENT, no such file or directory '/Users/nik/Projects/gelato/ember/tmp/concat_with_maps-input_base_path-WJdhcaUE.tmp/0/bower_components/showdown/dist/showdown.js.map\nBut everything works! :+1: \n. @tivie I think that would be fine, so long as they aren't getting built for distribution or anything like that. Means that the source map URLs have something to point to!\n. The spec at http://spec.commonmark.org/0.26/#atx-headings would seem to\nindicate that the space is required.\nEvery implementation I can find does it this way also - but I understand\nthe desire to avoid a breaking change. Which Markdown spec does showdown\nfollow?\nOn Wed, 20 Jul 2016 at 14:20, Estev\u00e3o Soares dos Santos \nnotifications@github.com wrote:\n\nAccording to the spec, a space is not required between # and the rest of\nthe text.\nFor this reason (and because it's a breaking change) making this an option\nis preferable.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/showdownjs/showdown/pull/277#issuecomment-234086984,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAZSvu_YGC5fLAARML_1oeVckai7dN-ks5qXpE0gaJpZM4JRL88\n.\n. OK, cool - so would you be open to a patch that added a requireSpacesBeforeHeadings option? This is how GFM works, and we're trying to maintain render compatibility between our Ruby and Javascript libs.\n. \n",
    "bsnizek": "(y)\n. ",
    "PaulBGD": "Oh, and after the code block it leaves a single\n. I apologize, turns out I accidentally used 4\n. ",
    "ospfranco": "This is very useful for simple cases, I'm surprised this is not included as basic functionality.. ",
    "kossnocorp": "@tivie thanks, literalMidWordUnderscores works for me!\n. ",
    "jack-nie": "it's my spelling mistake..sorry!\n. ",
    "Kreozot": "Sorry, it was my fault: I'm not bind makeHtml method properly.\n. ",
    "hbCyber": "Thanks! Well done!\n. ",
    "vithar": "I seen this. But I think highlighting hook in githubCodeBlocks.js (where we know exact code block and language) will be more effective than using regexp to process ALL output.\n. prettify works only in browser, but I want to highlight code in NodeJS.\n. Thanks, this is exactly that I mean.\n. @matatk you can use marked\n. ",
    "matatk": "I was hoping that it might be possible to have a showdown extension that puts all the required highlighting markup into the HTML, so only CSS, and no JavaScript, is required on the browser to render the highlighted code.\nThat's how it works with Pandoc: when Pandoc converts the Markdown to HTML, it adds in the required HTML code for each token in the code, and the CSS highlights the tokens however the user would like.\nPerhaps this is what @vithar is asking for?  I think it'd be great to have such a feature, too.\n. With the same input, Pandoc uses a syntax-highlighting library to produce the following HTML. The HTML is marked up in the way that Pygments would do so (but as Pandoc is written in Haskell, as opposed to Python, it uses an equivalent Haskell library to do this).\nhtml\n<div class=\"sourceCode\"><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">function</span> <span class=\"at\">foo</span>() <span class=\"op\">{</span>\n  <span class=\"kw\">var</span> bar <span class=\"op\">=</span> <span class=\"st\">&#39;bar&#39;</span><span class=\"op\">;</span>\n    <span class=\"cf\">return</span> bar<span class=\"op\">;</span>\n  <span class=\"op\">}</span></code></pre></div>\nHere's some of the CSS that goes with this HTML to actually perform the highlighting.  Any CSS that assumes Pigments 'hints' have been added to the HTML would work.\ncss\n. . .\ncode > span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode > span.dt { color: #902000; } /* DataType */\ncode > span.dv { color: #40a070; } /* DecVal */\ncode > span.bn { color: #40a070; } /* BaseN */\ncode > span.fl { color: #40a070; } /* Float */\ncode > span.ch { color: #4070a0; } /* Char */\ncode > span.st { color: #4070a0; } /* String */\ncode > span.co { color: #60a0b0; font-style: italic; } /* Comment */\n. . .\nI've been trying to find an equivalent in JavaScript but most seem to take the approach that showdown-prettify does, which is to run some JS to inject the extra 'highlighting hints' HTML markup at runtime in the browser.  There is a wrapper for Pygments itself, but ideally I'd like to find an all-JavaScript solution, to avoid extra dependencies.\n. Of course we should leave it to @ferllings, as the OP, to confirm, but I thought I'd say that this fix does seem to work very well from my perspective; thank you!\n. ",
    "IonicaBizau": "@tivie How can I make this to support custom languages (not Auto)? Thanks!\n. @JerryYangJin By coincidence I'm working right now on a showdown extension for highlighting. I have a working prototype. :grin: . @timaschew @tivie Thanks! I built mdify which uses js-yaml to parse the YAML stuff and showdown to htmlify the markdown code. \ud83d\ude01 \n. @tivie Thank you! That's helpful! :+1: . Thanks! :+1: . Oh, that was simple. Thanks, @tivie! :cake: . @dgw Hey! I'm happy to share with you the project I did at @Bloggify, called showdown-emoji. Currently it works for my use-cases\u2013\u2013basically it uses the GitHub API Emoji images in the output. :grin: \nFeel free to open issues if you have questions/suggestions/whatever. :rocket: \nHope it will help others too! :four_leaf_clover: . ",
    "JerryYangJin": "@IonicaBizau , thanks for the reply, i deleted my previous comments, as @tivie 's extension is still working, I 'm using prettify extionsion at the same time, so need a little bit change in the change, then it works perfectly.. @tivie , @obedm503 , thanks for the reply, I'll test the extension and update. @obedm503 , your code works perfectly, thanks a lot!. ",
    "gozeon": "see doc\njs\nhljs.initHighlightingOnLoad();\n. ",
    "treuter": "Thanks for the information!\n. ",
    "iamchairs": "Using BTF-Markdown for angular which it looks like it's using version ~0.3.1 of showdown.\n. ",
    "heejongahn": "@tivie Well that's strange..\nI'm using showdown 1.2.3, serving my service using flask(python3) + uWSGI + nginx at Ubuntu 14.04. Mayyyybe it could be because of Jinja2 template engine, but the thing is when I delete markdown rendering code below:\n<script>\nvar md = $(\".markdown.postbody\").html();\nvar converter = new showdown.Converter();\nconverter.setOption('strikethrough', true);\nvar html = converter.makeHtml(md);\n$(\".markdown.postbody\").html(html);\n</script>\nthe page has no problem showing '&' and '>' and all that stuff. So I guessed it has something to do with showdown prolly.. but as you said so, I'll try to figure this out. I'll let you know if I find what was wrong. Thanks for your quick and kind reply! :+1: \n. I also checked that variable html up there itself is containing &amp; using console.log. Still have no idea.\n... and after I wrote that sentence above, I checked the value of md with console, and found out it's escaped too. So it was jQuery, not showdown or jinja2... Stupid of me. I'll close this issue :( Thanks anyway!\n. ",
    "ferllings": "1.3.0, but this appends as well with my own plugin, the converter is undefined\n. Thanks, I'll give it a try\n. It's working, Thanks a lot\n. Hello,\nAny confirmation about this bug?\n. Thanks a lot!\n. ",
    "charliesneath": "Turns out this was an issue with unmatched closing tags.\n. ",
    "rabeesh": "It will be nice to support feature to convert\ncode\n[adjustable](http://google.com \"Giiidd\"){:target=\"_blank\"}\n. +1 for this feature.\n. ",
    "DoumanAsh": "Glad to hear. I'm planning to replace marked in my simple client-side parser with Snowdown :)\n. Please note that markdown code symbols are missing inside of html <code>.\nPlease check after fix that it will be corrected too :)\nUPD: noticed that they are actually getting parsed inside html <code>. Not sure if it is specified, but i assume it should not be so?\n. See this example\nNote that there are <code> blocks inside another <code> blocks.\nAt least in case of Github and marked markdown is not parsed inside html <code> block.\nBut i'm not sure what is right behavior though\n. Sorry, there are actually two issues :)\nFirst\nSecond\nIn these cases parser has different misbehavior\n. Looks great! Thanks\n. Should we close issue then?\n. Since it is fixed on develop branch i'm closing issue. No sense in leaving it opened?\n. Oh sorry. It would be good to have that as feature, but if it is not possible since it conflicts with Snowdown specs then please feel free to close issue\n. Great! Will it be part of default behavior or it is intended as optional feature?\n. Thanks\n. ",
    "Gacnt": "I'm saving plain textarea into the database as markdown, then loading it through the database and escaping the markdown to the page using jade template, and using that jquery loop to parse any divs labeled markdown. I see it does work on that demo, I'm not sure why it's not working on my end, feel free to close till I can reproduce it, but I'm not sure if I will be able to.\n. ",
    "smoleniuch": "@tivie I have found this gem.But i have no idea why i can not access it.Does showdown support reversed conversion?. @charlie-s \nI did not find any information about bidirectional flow, can you provide a sample??\nAnyway the feature would be very useful.. ",
    "mattkwiecien": "Is there a timeline on when 2.0 will be released?  \nI have a PR ready for showdownjs/ng-showdown that adds makeMarkdown directive to the ng-showdown directive, but it simply needs the latest version of showdown.\nPS: I'd love to help contribute to showdown, recently introduced it into my own project and really like the library.  Let me know if there's any features for 2.0 I can help work on.. @tivie solved this in https://github.com/showdownjs/showdown/commit/e4b0e697243f2d8b0a604eb688d08938a0e7acbb (issue closed here https://github.com/showdownjs/showdown/issues/233#event-1958639417)\nand this issue can probably also be closed.. ",
    "charlie-s": "I think I must be missing something \u2013 isn't this project described as \"a bidirectional MD to HTML to MD converter\"? . ",
    "contradictioned": "As it turns out, this is intended behavior, as described in the Markdown syntax.\nIf you want to put a code block directly after a comment, see for example this working trick:\n```\n one\n two\n a comment \n$> code\n\n```\nSorry for the inconvenience :)\n. ",
    "rubenmamo": "Shouldn't it however only change <test> to an HTML element only if it is a valid HTML element?\n. thanks for the update\n. Do you have an update on this?\n. ",
    "anion155": "Sorry, I was in rush )). Here it is https://doc.qt.io/qt-5/qtqml-javascript-resources.html\n. ",
    "Kriegslustig": "Thanks @pdeschen, I added the link :)\n. ",
    "joemun": "Thanks for the quick response!\nWouldn't it be more efficient if there was a way to disable the parser?  Any chance you think it would make sense to add this functionality as options?  (e.g. taking in a list of enabled or disabled elements)\n(Reason I'm proposing this is because I would only need a very small subset of the features. My concern is that it would be more bug-prone to have to write a new extension/regex for every disabled tag.)\nThanks!\n. Thanks for the info\n. Ah, totally missed #238.  (Sorry for the dupe question.)\n. @wifiextender  Thank you for the info... but I'm calling out one specific buggy behavior using Showdown's GFM auto-linking feature, which automatically creates a link when it identifies a URL (without using Markdown's link syntax).  If the URL is contained within parens (without spaces), it will include the closing paren as part of the anchor's HREF.\n. It looks like GitHub and RedCarpet (the MD parser that GitHub uses) handles this case specifically.  It looks for enclosing parens:\nhttps://github.com/vmg/redcarpet/blob/00d4e02a2cc3ada39c2547529b29fb2f871a83fb/ext/redcarpet/autolink.c\n(Example: https://github.com/vmg/redcarpet/blob/00d4e02a2cc3ada39c2547529b29fb2f871a83fb/ext/redcarpet/autolink.c#L115)\nCan we get these same rules applied to Showdown?\nThanks!\n. ",
    "socrates58": "Estev\u00e3o, thanks for the quick response. I downloaded the tutorial from the wiki, and the table gets rendered, though the header line isn't colored and there're a few other quibbles. I seem to be having version issues, with different behaviors from the CDN. We can close this.\nThanks again for the excellent response.\n. ",
    "handonam": "Ah, i spoke too soon.  My angular filter was outputting an object instead of a string.  So, this may not be necessary after all :). Carry on!\n. ",
    "sculley4": "Thanks very much. Should I close this or you do that?\n. Just tested briefly in OS X 10.10.5, and it is working. To verify I ran showdown -h and it shows the information properly. Thanks very much.\n. ",
    "kevinsimper": "still not working :(\n. ",
    "enajeeb": "I am getting the same error using OS X 10.11.5, node v5.11.1, npm 3.9.5\n. Converted line endings of /usr/local/lib/node_modules/showdown/bin/showdown.js to Unix and it works. Thanks for the tip.\n. ",
    "jeffschwartz": "I'm running OS X and I can also confirm that changing line ending to lf in node_modules/bin/showdown works for me as well. \n. ",
    "qyvlik": "@tivie Thank for reply. That's nice.\n. In browser:\n'\u00a8K0K'.search(/\u00a8(K|G)(\\d+)\\1/);\nRegExp.$1;        // result is \"K\"\nBut in QML:\n'\u00a8K0K'.search(/\u00a8(K|G)(\\d+)\\1/);\nRegExp.$1;        // result is \"\"\nSo, in showdown.js file line: 2382\n// if this is a marker for an html block...\n    while (grafsOutIt.search(/\u00a8(K|G)(\\d+)\\1/) >= 0) {\n      var delim = RegExp.$1,         // difference between qml and browser\n          num   = RegExp.$2;\n     ...\n    }\nthe resolution:\n//: [0] QTBUG-58638\n    while (/\u00a8(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n    //: [0] QTBUG-58638\n        ...\n    }\nIs QML bug. QTBUG-58638\n@tivie . ",
    "arpanchaudhury": "Closing the issue. Duplicate of #222 \n. ",
    "samb0t": "Thanks for merging. Do you typically take care of the /dist build?\n. ",
    "ishankhare07": "@tivie the demo is an inline script, whereas the services which I mentioned use external scripts like in case of gist.github.com: \nhtml\n<script src=\"https://gist.github.com/ishankhare07/fb586cf159e5c4d18c2d.js\"></script>\nI tried this with the demo -> here\n. ",
    "fkorak": "I finally got around to doing one. You can find it at showdownjs nuget, after NuGet indexing is done. I'll try keeping it updated in a timely manner (having set it up once, I'll probably just need to replace the js-files), I have a mail notification on the Changelog.md. Have a look on whether the copyright information is filled out correctly.\nI ran the ReactJS.Net-Tutorial to test the package out, runs fine (for anyone doing the same: change the showdown-object to lowercase and the Converter-Call to uppercase)\n. ",
    "thisconnect": "It's not just about underscores, I would like to know if the same problem comes up with * or -  with default config?\nOr what kind of config it needs to fix this.\nThe showdown demo does not use the default config?\nin http://showdownjs.github.io/demo/js/editor.js\njavascript\n        {name: 'omitExtraWLInCodeBlocks', value: true},\n        {name: 'noHeaderId', value: false},\n        {name: 'parseImgDimensions', value: true},\n        {name: 'simplifiedAutoLink', value: true},\n        {name: 'literalMidWordUnderscores', value: true},\n        {name: 'strikethrough', value: true},\n        {name: 'tables', value: true},\n        {name: 'tablesHeaderId', value: false},\n        {name: 'ghCodeBlocks', value: true},\n        {name: 'tasklists', value: true},\n        {name: 'smoothLivePreview', value: true},\n        {name: 'prefixHeaderId', value: false}\nOther markdown implementation appear to have the literalMidWordUnderscores behavior set by default. \n. thanks for clarification\n\nRegarding - I'm not sure what you're talking about. - always have their literal meaning unless they are the first character in a line, in which they will be converted to an unordered list. In the middle of a word or a setence, they will not be converted.\n\nSorry, you are right. I mistakenly thought dash (-) was used as strikethrough, but that is jira syntax.\nMy only concern is about unwanted formatting in \"link text\" and different output compared to other libs e.g. Github MD (marked?).\nYou are right, the link text in my example (containing the url with underscores), could just be escaped.\n. ",
    "ciel": "This does work, but the output gets wrapped in <p></p>. Is there any way around that? It throws off the formatting considerably.\nShowdown.extension('notice', () => {\n    return {\n        type: 'lang',\n        regex: /^(^\\S+)\\s+(>)\\s+(.*)/gmi,\n        replace: (text: string, css: string, method: string, message: string) => {\n            return text.replace(/^(^\\S+)\\s+(>)\\s+(.*)/gmi,\n                        `<div markdown class=\"notice notice-${css}\" >$3</div>`);\n        }\n    };\n});\n. Really loving showdown, by the way. It's beautifully designed, and so much easier than marked to use.\n. Yes, that is correct. It would be ideal if I could get it to render without wrapping it in the paragraph tags.\n. Thanks. Both of these seem reasonable. I\u2019ll likely go with the first one, and just style them inside the corresponding output.\n. ",
    "shaddockh": "Confirmed.  Thanks!\n. ",
    "jhicken": "Hey thanks for the response.\nSo If i use option 1 (Move es6 template strings to a new line)\nThis is what i get. The first line is converted and nothing else.\n```\nmarkdown doc\n  you can use markdown for card documentation\n  - foo\n  - bar\n\n```\nthe alternative is\n``\nfunction masterRunner() {\n  var conv = new showdown.Converter()\n  return conv.makeHtml(\nmarkdown doc\nyou can use markdown for card documentation\n- foo\n- bar\n  `);\n}\n```\nWhich is also not super great. (this is what im currently doing)\nUsing something like option 2 up above would work but would need some major testing to make sure you don't remove white space from unintended lines.\nMy proposal is that showdown could let you pass an argument that would try to intelligently fix your es6 string.\nIs that crazy?\n. I have not.  Sorry been super busy.  I'll try and get to it tonight.  Ps thanks for working on this.\n. ",
    "timaschew": "This is not part of a markdown parser usually.\nYou need a parse step before you run your markdown parser.\nHere is module to fetch these data and split them into properties and the markdown body\nhttps://github.com/jxson/front-matter\n. ",
    "ye-will": "@tivie nice work.\n. ",
    "jahtalab": "@tivie , I need to parse the markdown to some sort of tree to extract extra information about it.\nmarkdown-js does this by parsing into jsonML.\n. @tivie ,\nFor example I want to extract meta data about the markdown, something like this\nTitle:  A New MultiMarkdown Document  \nAuthor: Fletcher T. Penney  \n        John Doe  \nDate:   July 25, 2005\nThis meta data shouldn't be rendered (or it might) but I want to have the info when I parse the markdown, for instance to find all articles after some date.\n. ",
    "Sleashe": "@tivie You're excellent ! Thanks a lot for taking time to answer. Your explanation is perfect. I know I was doing wrong things with regexp, but I thought Showdown was able to recognize pure content (not html).\nAt the beginning we were overriding Showdown.js directly to add new subParsers, but we didn't understand everything.\nWhat's the best option? Create new langs? or add subparsers directly ?\nThanks a lot again for your awesome response ! ;)\n. Thanks a lot @tivie, you're excellent, we'll try as you suggested.\n. ",
    "heroandtn3": "On Linux, this can be reproduced by cloning the repo to your machine, you will see the license.txt is modified and cannot revert its change.\n. ",
    "aaroncalderon": "Turns out that if I create a window on electron with the nodeIntegration: false option, then the behaviour is as expected. However, I rely on the integration with node for other features, so I'm looking for any suggestions to overcome the issue.\n. # Solution\nI was able to use preload: 'absolute/path/to/preload.js' (search for 'preload') with event-loaded to solve the issue.\n. The behaviour I experienced was by design. \nI'm not sure if specific support for electron is needed. \nHowever, that little piece of code is a clever approach. However, to make a difference every javascript library that uses UML (Universal Module Loading) will need to adopt this approach.\n. short answer\n@tivie I think it would.\nother thoughts\nWith the current implementation when loading showdownjs on a nodejs environment, it will behave as expected and the require command will work just fine.\nWhen using electron, on the other hand, on the renderer process (the chromium part of it) has nodejs integration enabled by default, making the renderer process behave like a nodejs environment.\nIn my case, I was developing an app that behaves more like a web app, and thus the nodejs integration was trowing off my asuptions about how to load all my libraries. \nSo, in my case, using the the nodeIntegration: false parameter when creating the renderer process solved my issue. Ofcourse, I had to rewrite some bits of the application to provide the functionality I needed from nodejs to my renderer process through the preload parameter.\n. ",
    "tx4x": "same here, can please check that its electron ?\n```\nvar _window = typeof window !== 'undefined' ? window : null;\n  var isElectron = _window && _window.process && _window.process.type === \"renderer\";\n// CommonJS/nodeJS Loader\n  if (typeof module !== 'undefined' && module.exports && !isElectron) {\n```\n. electron support added in PR\n. i am afraid pre-load won't work well with lazy loaded components. and supporting as next a mixed env. like electron isn't too unusual. i did this patch in a few libs already. its 1-2 lines only and will do its job til fine, til they fixed the concepts of js loaders i guess.\nanyway, i am ok with my fork; i saw some other things to be changed too, so its fine with me to close this here. \nthanks btw. for your work, it helps me a lot to build perfectly integrated and interactive documentation!\n. @tivie I see, I guess that library want's to load showdown via electron's require. In my case i want it loaded on the client side. So to make this right, we need something to tell showdown how to export it self. I don't know better than doing this with some variable in global/window. You have a better idea ? \ng\n. yeah, never mind. i need showdown in electron as regular client library = not possible ;-)\ng. ",
    "butchmarshall": "Added pull request\n. Basically, IE8 isn't a good browser.\n\n<html>\n\n```\n\n\n        function isUndefined(a) {\n            return typeof(a) === \"undefined\"\n        }\n        if (isUndefined(console)) {\n            alert('yes!');\n        }\n        alert('no');\n    \n\n\n\n```\n</html>\nRun that in IE8.  An undefined variable will halt script execution and you'll never get \"no\".\nThe key is to never open the \"developer tools\" in IE8.  If you do, it will work until you close and reopen the browser. \n\n. ",
    "coiouhkc": "Somehow it works on the demo page (http://showdownjs.github.io/demo/) but not when using following snippet\nconverter.setOption('tables', true);\nvar html = converter.makeHtml(md);\n. ",
    "xserrat": "Thank you very much @tivie ! I close this issue \ud83d\udc4d \n. ",
    "avnersorek": "Thanks !\n. ",
    "mazeappleton": "I'm using the editor ghost\n. ",
    "nicolaiparlog": "Yes, exactly.\nMy idea was to remove all line breaks that match this criteria:\n- not preceded by a (closing) tag\n- not followed by another line break\nI'm currently trying (and failing as it looks like) to find a regex to express those conditions.\n. Thank you very much, that is indeed a good solution. :)\n. ",
    "jianhaozh": "now , i am add the blow codes in the start of this function to avoid this issue happens again, here is the code:\ntext = text || \"\";\n. ",
    "reversemerman": "OS: Ubuntu 16.04 LTS\nshowdown makehtml -i input.txt -o output.txt --tables --ghCodeBlocks\ninput.txt\noutput.txt\n. ",
    "siriscac": "I'm facing this issue again.\nUsing the npm module. I looked at the code for 799abea changes, and it doesn't seem to have them.\n. Can confirm that it works, thanks.\n. ",
    "DumboJetEngine": "Hm... That seems like a different method of registering extensions than the one I use (and is better too).\nHere is what I use (table is my extension):\n``\n   // Define thetable` extension.\n  ........................\n// Client-side export\n  if (typeof window !== 'undefined' && window.Showdown && window.Showdown.extensions) { window.Showdown.extensions.table = table; }\n  // Server-side export\n  if (typeof module !== 'undefined') {\n    module.exports = table;\n  }\n```\nI have checked the arguments list and there is only one (the window).\nMaybe the extension registration method I use is obsolete?\nI found it inside the source code of your repository and I assumed it was OK to use. :(\n. Oh...\nSeems like I was using an old version. :(\nI had downloaded the latest and though I was using it, but turns out I wasn't.\nI was still referencing the older version.\nSo many changes in only a few months!?!? :o \nEven the case in the showdown global variable has changed! :O\n. OK.\nI think I have figured things out now...\nSorry for the bugging.\n. ",
    "IngenieroFiestero": "In\n```\nTitulo MarkDown\\r\\nContenido markdown\\r\\nMas contenido markdown\n```\nShould be\n<h1 id=\\\"titulomarkdown\\\">Titulo MarkDown</h1>\\n<p>Contenido markdown\\nMas contenido markdown\nAnd not \n<h1 id=\\\"titulomarkdown\\\">Titulo MarkDown</h1>\\n\\n<p>Contenido markdown\\nMas contenido markdown\nShowdown is adding a \\n after \"h1\" and after \"p\" and after \"h3\"\n. Because i dont want to add more linebreaks. Im saving a text from a textarea in mongodb as a markdown and at the same time saving the HTML generated text, and i want to be precise,  I do not want to add anything extra.\nI lost a good time thinking it might be, but apparently more markdown to html converters work the same way, I just want to know if there is any way to avoid such behavior.\nThanks\n. Wow Thank you very much\n. Okey It works well.\nIf someone still wants to not let new lines between tags, all you have to do is delete more \"\\ n\" the previous file. In my case following what has made tivie, I modified the dist/showdown.js file not to let \"\\n\" between tags and so is less separately.\ntext = grafsOut.join('');\nresult += '<' + listType + '>' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>';\n. Resolved\n. ",
    "Awk34": "@LeahPike are you sure you installed it?\n. Strange. Anyway, it doesn't sound like an issue with Showdown + Angular 2. I've been using Showdown on an Angular 2 app just fine.\n. @LeahPike I cloned it and can see why you were having issues. First step of course is to install Showdown:\nbash\n$ npm install --save showdown\nThen I see that the project is using SystemJS, so I think you have to add this to the map in systemjs.config.js:\njs\nshowdown: 'npm:showdown/dist/showdown.js',\nAnd then it also uses TypeScript, so you'll want the type definitions for Showdown:\nbash\n$ ./node_modules/.bin/typings install dt~showdown --save --global\nYou should then be able to change your app.component.ts to look like this:\n``` js\nimport { Component } from '@angular/core';\nconst showdown = require('showdown');\nconst converter = new showdown.Converter();\nvar text = '#hello, markdown!';\n@Component({\n    selector: 'my-app',\n    template: ''\n})\nexport class AppComponent {\n    html = converter.makeHtml(text);\n}\n```\nrun npm start, and you should now see this in your browser:\n\n. @LeahPike the command would just be ./node_modules/.bin/typings install dt~showdown --save --global. The $ is a bash thing.\n. It looks like it would be decently difficult, seeing as how all calls to makehtml assume it synchronously returns the text. Something like this would probably affect a lot of files.. This is the solution that I ended up on: https://github.com/Awk34/awk34_project_euler/blob/9bd20689c98be289d66112ac48d0d81404ce93ea/js/util/markdownTools.js\nI'm not saying all of the parsing has to be asynchronous, and to be done non-sequentially. It would just be nice if a subParser could handle an asynchronous response. That way I could use the callback response of MathJax in an extension. The full converter could still wait for the subParser to finish, but it would be done with an asynchronous callback/promise instead of assuming that the subParser returns text in a synchronous matter. Like this:\n```js\nlet text = '...';\ntext = syncParser1(text);\nasyncParser(text).then(newText => {\n  text = newText;\ntext = syncParser2(text);\nreturn text;\n});\n```. I think this is a better example:\n```js\n// settable extensions\nlet extensions = [ext1, ext2, ...];\nasync function convert(text) {\n  // Showdown converters\n  text = syncParser1(text);\n// User extensions\n  for(let i = 0; i < extensions.length; i++) {\n    let result = extensionsi;\n// if extension returns a promise, wait for it\n// if not, assume synchronous extension returning mutated text\nif(result instanceof Promise) {\n  text = await result;\n} else {\n  text = result;\n}\n\n}\n// more Showdown converters\n  text = syncParser2(text);\nreturn text;\n}\n```\nAssume extensions is an array of extension functions, and assume convert is the main Showdown converter function. Instead of assuming that all extensions synchronously return text, it allows for them to also return a Promise, in which it waits for the promise to be fulfilled, and then moves onto the next extension. I hope this gets my point across better.. I wrote my example with async/await just for clarity's sake. You can see how Babel would convert this to ES5 here. The Promise check would probably have to be changed to something like if(typepof result.then === 'function'). ",
    "LeahPike": "@Awk34 I can see the showdown folder within my node_modules folder and I've checked in the generated vendor.bundle.js and it has code in there for showdown. \ud83d\ude15 \n. Must be something odd my end then, will keep trying :female_detective: \n. I haven't yet, will try and find some time today to create a new environment to try it with.\n. I've cloned the angular 2 quick start:\n\ngit clone  https://github.com/angular/quickstart  my-proj\n\nI've installed showdown:\n\nnpm install showdown\n\nCan someone please confirm what exactly I need to change within this project to get it importing into AppComponent? That would be great help, thank you.\n. That is working!\nAlthough trying to run \"$ ./node_modules/.bin/typings install dt~showdown --save --global\" in a terminal window caused the following \"'$' is not recognized as an internal or external command\".\nI'll have to read up about typings and see how to add it.\nThank you :D\n. Ideally I don't want to tell our users to use HTML, that's the whole reason we're using markup \ud83d\ude04 . Thank you for the reply, I hadn't realised having headers inside tables was a \"bad\" thing. Will have think around this.. ",
    "clouless": "Just came here and if you use Angular 2/4+ with TypeScript you would do:\nYour MarkdownBox Component:\n```typescript\nimport { Component, Input, OnChanges } from '@angular/core';\nimport * as showdown from 'showdown';\nconst converter = new showdown.Converter();\n@Component({\n  selector: 'app-markdown-box',\n  template: `\n  <div\n    class=\"markdown-box\"\n    [innerHtml]=\"markdownHtml | safeHtml\"\n\n`,\n  styles: [ '.markdown-box { font-size:14px; }' ],\n})\nexport class MarkdownBoxComponent implements OnChanges {\n\n@Input()\n  markdown: string;\nmarkdownHtml: string;\nngOnChanges() {\n    converter.setFlavor('github');\n    this.markdownHtml = converter.makeHtml(this.markdown);\n  }\n}\n```\nYour SafeHtml Pipe:\n```typescript\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n@Pipe({name: 'safeHtml'})\nexport class SafeHtmlPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer){}\ntransform(html) {\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n}\n```\nThen you could use it somewhere:\nhtml\n<app-markdown-box markdown=\"foo [link](https:/google.com) bar\"></app-markdown-box>. ",
    "nmanumr": "Or a list inside an table\n. ok working fine. thanks\n. I am getting this block in <p> rather than <table>\n. thanks working fine\n. ",
    "TheNofx68": "Thanks for these infos, but I really don't want to have to work with nodejs, so it's a total no for me.\nI can obviously understand the extra work part, and I'll take a look at the php-markdown you gave.\nIf none suits my needs, I think I'll work on porting your library into php.\nAnyways, thanks !\n\n(I think it can now be closed)\n. \n",
    "jeud": "@tivie no problems actually, I used to use marked.js and remarkable.js both are able configure the class prefix, so just looked for equivalent from showdown.js\nAlso I had little understanding using highlight.js at the first place, after trying to learn more, I've found that it works both class=\"bash lang-bash language-bash\" So I think I'm fine now :)\nThanks everyone @obedm503, @tivie \n. Thanks @obedm503 , @tivie, I've got some ideas what to do next :)\n. ",
    "tiansh": "markdown\n* aaa\n  * bbb\nmarkdown\n* aaa\n  1. bbb\nBut why these two have different behavior?\nFirst one currently been parsed to <ul><li>aaa<ul><li>bbb</li></ul></ul>.\nBut second one is <ul><li>aaa</li></ul><ol><li>bbb</li></ol>.\n. ",
    "icymind": "Yes, I do use the latest version. The command showdown -v prints 1.4.4.\n. ",
    "JuanCaicedo": "I found that this can be fixed by not doing new lines inside a table cell, that is by changing the above test code to use\njs\n  const replacement = [\n    \"<div>\",\n    \"<div>\",\n    \"$1\",\n    \"</div>\",\n    \"</div>\"\n  ].join('');\nNot totally sure this fixes the bug I'm seeing in my project, but I'll research more and update. ",
    "tasmanwebsolutions": "I have now had to do couple changes on my insert database end with codeigniter\n```\npublic function insert() {\n$data = array(\n'question' => $this->db->escape(trim(str_replace('\\n', PHP_EOL, $this->input->post('html'))))\n);\n$this->db->where('question_id', '1');\n$this->db->update('question', $data);\n}\n```\nWorks fine now.. @tivie  How to add parseImgDimension my script?\n. ",
    "bensimian": "@tivie We are using showdown server side. \nthis is our example text:\n```\nI'm FreeForm Text That's made bigger\nSmaller\nBigger\nBiggest\nI have italics\nI am bold \n~~I'm a strikethrough~~ \n\nUnordered 1\nUnordered 2\n\nUnordered 3\n\n\nOrdered 1\n\nOrdered 2\nOrdered 3 \n\nLink to Google\n```\nThis is the implementation of shodown\n```\nconst showdown = require('showdown');\nconst converter = new showdown.Converter();\nconverter.setOption('strikethrough', true);\n.........\n//ensure we swapp out \\n newline correctly\nhtmlBody += converter.makeHtml(component.content.replace(/^( (\\d+.  {1,4}|[\\w\\<\\'\\\">-+])[^\\n])\\n{1}(?!\\n| \\d+. {1,4}| [-+] +|#|$)/gm, function(e) {\n                return e.trim() + \"  \\n\";\n            }));\n```\nThe result renders all the formatting correctly except the strikethrough. It results in a word 'change annotation' with the text that is suppose to be strikenthrough. We are using Word for Mac 2016.\nHope the above info helps.\nBest,\nIan. Hi Tobias,\nMy apologies. I think I have been posting the issue to the wrong thread. It seems html-to-docx is failing to translate some text correctly.\nThanks for you swift response\nPS i can validate that it works perfect in showdown!. ",
    "gingerbeardman": "edit: just read the docs and I need to use 4 spaces not 2 to markdown a list. . ",
    "vanillajonathan": "Note that table-sriped is not a valid class, it is a typo. It should be table-striped.\nAlso the code in the extension looks up all img elements, it should look up table elements.\nHere is the fixed code:\njs\nshowdown.extension('bootstrap-tables', function () {\n  return [{\n    type: \"output\",\n    filter: function (html, converter, options) {\n      // parse the html string\n      var liveHtml = $('<div></div>').html(html);\n      $('table', liveHtml).each(function(){ \n        var table = $(this);\n        // table bootstrap classes\n        table.addClass('table table-striped table-bordered')\n        // make table responsive\n        .wrap('<div class=\"class table-responsive\"></div>');\n      });\n      return liveHtml.html();\n    }\n  }];\n});. ",
    "rolandliwag": "Thanks very much. Would it be possible to also publish a new npm version?. Wasn't sure whether to create a new issue but it seems this is still a problem when more characters are added to the right of nbsp this time. eg:\nconst converter = new require('showdown').Converter();\nreturn converter.makeHtml('- - - - - - - - - - - - - - - - - - - - - - - - - - - - A');. Will do.. Thanks again. . ",
    "yurikhan": "Replacing all non-breaking spaces with normal spaces breaks their intended use.\nTo reproduce:\njavascript\n(new showdown.Converter()).makeHtml('Enough text to\\u00a0make the\\u00a0following wrap to\\u00a0a\\u00a0new line')\nExpected result: A paragraph that never wraps immediately after an article or preposition.\nObserved result: A paragraph that wraps wherever it pleases.\nPlease consider revising the fix, e.g. by deleting non-breaking spaces at the end of line only (which is never the intended use of a non-breaking space anyway).. ",
    "dgw": "This thread contains the only mention of \"emoji\" in the entire repo. :open_mouth:\nI take it Showdown doesn't parse or otherwise touch emoji in any way (assuming options like literalMidWordUnderscores are set correctly), so a separate emoji parser is needed for e.g. showing proper emoji in GitHub comments? (Hope it's OK to bump this rather than starting a new \"issue\" that isn't one! :smile_cat:). ",
    "nemoDreamer": "/cc @tivie . ",
    "schoettler": "Still not parsed as horizontal rule (?) (from Markdown to HTML). Whoops, needs a line break, my apologies\n```\n--- *works\ntext --- *does not work\n```\nAs per Markdown spec. ",
    "veggiemonk": "@tivie check #321 :D. @tivie great job, thanks a lot!. Awesome! thanks. ",
    "frco9": "Great thanks !. ",
    "unional": "It seems like --ghCodeBlocks is disabled by default in contrary to the README.\nversion: 1.5.5\n. I saw the last issue #215 and try to make it work. It seems like it is not working correctly.\nHere is the code I use, what did I do wrong?\n```js\n'use strict';\nconst showdown = require('showdown')\nconst highlightjs = require('highlightjs')\nconst fs = require('fs')\nshowdown.extension('codehighlight', function() {\n  function htmlunencode(text) {\n    return (\n      text\n        .replace(/&/g, '&')\n        .replace(/</g, '<')\n        .replace(/>/g, '>')\n      );\n  }\n  return [\n    {\n      type: 'output',\n      filter: function (text, converter, options) {\n        // use new shodown's regexp engine to conditionally parse codeblocks\n        var left  = ']*>',\n            right = '',\n            flags = 'g',\n            replacement = function (wholeMatch, match, left, right) {\n              // unescape match to prevent double escaping\n              match = htmlunencode(match);\n              return left + highlightjs.highlightAuto(match).value + right;\n            };\n        return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);\n      }\n    }\n  ];\n});\nshowdown.setFlavor('github')\nconst converter = new showdown.Converter()\nconst text = fs.readFileSync('demo.md').toString()\nconst html = converter.makeHtml(text)\nfs.writeFileSync('demo.html', html)\n```\ndemo.md:\n````markdown\nSummary\ndemo page\nBasic usage\njavascript\nvar x = 1;\n````\nresulting demo.html:\nhtml\n<h1 id=\"summary\">Summary</h1>\n<p>demo page</p>\n<h2 id=\"basicusage\">Basic usage</h2>\n<pre><code class=\"javascript language-javascript\">var x = 1;\n</code></pre>\nUPDATE: Figured this part out. Need to do new showdown.Converter({ extensions: ['codehighlight'] })\nand need to embed the output to a html that loads highlightjs. Yes, I was referring to the cli originally before I start writing code to generate the output. \ud83c\udf37 . Based on https://github.com/showdownjs/showdown/issues/215#issuecomment-168679324 I created showdown-highlightjs-extension:\nhttps://github.com/unional/showdown-highlightjs-extension\n. ",
    "justrealmilk": "showdown.extension('codehighlight', function() {\n  function htmlunencode(text) {\n    return (\n      text\n        .replace(/&amp;/g, '&')\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n      );\n  }\n  return [\n    {\n      type: 'output',\n      filter: function (text, converter, options) {\n        // use new shodown's regexp engine to conditionally parse codeblocks\n        var left  = '<pre><code\\\\b[^>]*>',\n            right = '</code></pre>',\n            flags = 'g',\n            replacement = function (wholeMatch, match, left, right) {\n              // unescape match to prevent double escaping\n              match = htmlunencode(match);\n              return left + hljs.highlightAuto(match).value + right;\n            };\n        return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);\n      }\n    }\n  ];\n});\nvar showdown = new showdown.Converter({\n    openLinksInNewWindow: true,\n    extensions: ['codehighlight']\n});\nTypeError: Cannot read property 'replaceRecursiveRegExp' of undefined. ",
    "mawek": "Thanks for quick response. I missed the requireSpaceBeforeHeadingText option.. ",
    "hnrkndrssn": "Hey @tivie,\nThanks for the reply, I did read the awesome documentation you wrote, but I worded my question a bit to broad, I meant to ask if it should adhere to the spec regarding spaces in URLs.\nMy apologies, and thank you for your hard work on showdownjs!. ",
    "majenkotech": "Would that extension work with the auto-parsed simple-url (i.e., not [blahblah](http://example.com) etc, but just http://example.com)?. I have installed both (I hope) extensions (named one 'targetlink2' to keep them unique - is that the right thing to do?) and neither seem to be actually doing anything.\nI assume I have to just call those showdown.extension(...) bits during my startup?\nHere is how I use it:\n```JavaScript\n        showdown.setFlavor('github');\n        showdown.extension('targetlink', function() {\n          return [{\n            type: 'html',\n            regex: /(]+?)(>.<\\/a>)/g,\n            replace: '$1 target=\"_blank\"$2'\n          }];\n        });\n        showdown.extension('targetlink2', function() {\n          return [{\n            type: 'lang',\n            regex: /[((?:[[^]]]|[^[]]))]([ \\t]<?(.?(?:(.?).?)?)>?[ \\t]((['\"])(.?)\\4[ \\t])?){\\:target=([\"'])(.*)\\6}/g,\n            replace: function(wholematch, linkText, url, a, b, title, c, target) {\n          var result = '<a href=\"' + url + '\"';\n\n          if (typeof title != 'undefined' && title !== '' && title !== null) {\n            title = title.replace(/\"/g, '&quot;');\n            title = showdown.helper.escapeCharacters(title, '*_', false);\n            result += ' title=\"' + title + '\"';\n          }\n\n          if (typeof target != 'undefined' && target !== '' && target !== null) {\n            result += ' target=\"' + target + '\"';\n          }\n\n          result += '>' + linkText + '</a>';\n          return result;\n        }\n      }];\n    });\n    this.converter = new showdown.Converter({\n        simplifiedAutoLink: true,\n        excludeTrailingPunctuationFromURLs: true,\n        strikethrough: true,\n        tables: true,\n        tasklists: true,\n        encodeEmails: true\n    });\n\n```\nMy test block:\n```markdown\nLink test:\n\nwww.google.com\nhttp://www.google.com\nGoogle\nGoogle\n\n```. Hmmm... I was hoping the activating was all I was missing, but it seems not. This is now all I have to initialize:\nJavaScript\n        showdown.setFlavor('github');\n        showdown.extension('targetlink', function() {\n          return [{\n            type: 'html',\n            regex: /(<a [^>]+?)(>.*<\\/a>)/g,\n            replace: '$1 target=\"_blank\"$2'\n          }];\n        });\n        this.converter = new showdown.Converter({\n            simplifiedAutoLink: true,\n            excludeTrailingPunctuationFromURLs: true,\n            strikethrough: true,\n            tables: true,\n            tasklists: true,\n            encodeEmails: true,\n            extension: ['targetlink']\n        });\nand it's not doing anything.\nI guess it's no biggie - I can write a recursive function to traverse the DOM tree and find any A tags adding the target attribute. I just thought it would be simpler if showdown could do it for me.... ",
    "paambaati": "The above solution does not work for more than 1 link in the markup. Just in case anyone stumbles upon this issue, here's how I got it to work for ALL hyperlinks - \nshowdown.extension('targetlink', function() {\n  return [{\n    type: 'html',\n    filter: function (text) {\n        return (''+text).replace(/<a\\s+href=/gi, '<a target=\"_blank\" href=');\n    }\n  }];\n});. ",
    "Pomax": "As a specific use case, I need markdown with embedded HTML markup converted, not as \"final content\" step, but for further processing in a site bundle chain. The markdown needs to get wrapped by a JSX header and footer and is then passed into a webpack task that further deals with the content presented (including things that markdown has zero understanding of, like LaTeX conversion and replacing specific JSX tags with fully interactive canvas elements backed by a graphics library). pretty much. I want to be able to say \"treat < like a letter\". (Which is subtly different from \"parsing inside HTML tags\", although not on an implementation level - I don't even want it to think it's looking at HTML tags at it, it's just more \"not markdown\" =)\n. Language thing (I have a formal education in AI, which includes linguistics, it makes you pay more attention to what words mean). From an implementation perspective, the code doesn't care whether humans call it \"parsing the content of an HTML element\" or whether they treat it as \"there aren't HTML tags here, just ASCII characters to pass through verbatim\", whereas as user my idea is that this isn't \"HTML\" to begin with, until it's loaded by something that understands HTML, just being \"semantics-less plain text\" until then. Mostly irrelevant, but always worth pointing out in case it makes someone realise the weirdness of language vs. the strictness of code.\nAs for that documentation: I am using showdown in Node scripts, not in the browser, and I don't see any mention on how to trigger that parsing behaviour. I might be missing the obvious, though: where would I find that option documented on the Node side?. Right, I can't do that: I need it to be clean HTML, agnostic about which technology reads it. So is there a way to tell the library itself, through an option or conf or something, that it should treat it as inert text instead?. Ah, I see. In that case I'll probably roll a small preprocessor for chunking up the input as stretches of Markdown and HTML tags, so showdown can be applied selectively to the markdown-only parts.\nThanks for the help!. ",
    "discordianfish": "@tivie This doesn't work with if you have block elements in the markdown: https://daringfireball.net/projects/markdown/syntax#html\n\"Note that Markdown formatting syntax is not processed within block-level HTML tags. E.g., you can\u2019t use Markdown-style emphasis inside an HTML block.\". Oh thanks, missed that!. ",
    "buremba": "@tivie thanks a lot!. ",
    "kirkins": "Is this for anchor links that have a space?\nI'm finding that all my single word anchors work automatically but not anchors with two or more words.. I'm using showdown like this:\nvar rawFile = new XMLHttpRequest();\n    rawFile.open(\"GET\", \"README.md\", false);\n    rawFile.onreadystatechange = function () {\n      if(rawFile.readyState === 4) {\n        if(rawFile.status === 200 || rawFile.status == 0) {\n          var converter = new showdown.Converter();\n          document.getElementById('body').innerHTML = converter.makeHtml(rawFile.responseText);\n        }\n      }\n    }\n    rawFile.send(null);\nworking: https://kirkins.github.io/EuroRomCom/#activities\nNot working: https://kirkins.github.io/EuroRomCom/#word-lists\nThe second link works in the README on github but not on the website version generated by showdown.. Great thanks!. ",
    "jisl": "A prettier css with unnecessary space removed. Borrowed from GitHub css.\n```css\n.anchor\n{\n    float: left;\n    line-height: 1;\n    margin-left: -20px;\n    padding-right: 4px\n}\nh1 .anchor:focus,\nh2 .anchor:focus,\nh3 .anchor:focus\n{\n  outline: none\n}\nh1 .octicon-link,\nh2 .octicon-link,\nh3 .octicon-link\n{\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden\n}\nh1:hover .anchor .octicon-link,\nh2:hover .anchor .octicon-link,\nh3:hover .anchor .octicon-link\n{\n  visibility: visible\n}\n```. ",
    "kenanchristian": "@tivie I'm using nodejs, so maybe this is not the cleanest way to do it but it works! \ud83d\udc4d \nthanks \ud83d\ude04 \n\n. ",
    "vuorinem": "Sorry for not responding, I really don't like how GitHub handles notifications...\nNo specific reason for avoiding those dependencies, just a lot of packages (~800k and an annoying fork of isarray) for a feature that's not used when running on a web site. I'm using JSPM (for now). Although I realized that the dependencies can be avoided by installing with a github-url (instead of npm), which makes JSPM ignore dependencies without a registry.. ",
    "mh-cbon": "indeed : x\n$ showdown -v\n1.6.4\n[mh-cbon@pc15-home ~] $ node -v\nv7.7.1\nsee \n```\nshowdown makehtml -i README.md | wc -l\nEnabling option ghCodeBlocks\nEnabling option encodeEmails\n...\nReading data from file...\nParsing markdown...\nWriting data to stdout...\nDONE!\n138\n```\nand\n```\n$ cat README.md | showdown makehtml | wc -l\nEnabling option ghCodeBlocks\nEnabling option encodeEmails\n...\nReading data from stdin...\nParsing markdown...\nWriting data to stdout...\nDONE!\n0\n.\necho \"# foobar\" | showdown makehtml\nEnabling option ghCodeBlocks\nEnabling option encodeEmails\n...\nReading data from stdin...\nParsing markdown...\nWriting data to stdout...\nDONE!\n```\nDigging the source, looks likes the problem is here, size is 0.\nfunction readFromStdIn () {\n    try {\n      var size = fs.fstatSync(process.stdin.fd).size;\nconsole.log(size);\n      return size > 0 ? fs.readSync(process.stdin.fd, size)[0] : '';\n    } catch (e) {\n      var err = new Error('Could not read from stdin, reason: ' + e.message);\n      messenger.errorExit(err);\n    }\n  }\nIMHO, i d refactor makehtml.run to copy the stdin stream to memory, rather than sync reading the fdesc.\nhttp://stackoverflow.com/a/13411244/4466350\n. Hi,\ngive it a try, let me know.. > I need to add a proper test case for this and will merge when done\nI checked your test folder, honestly, i have no idea how that works. \nI d have done e2e tests.\nBut, it is so specific to my environment that i m not sure how to reproduce.. ",
    "rugk": "In https://github.com/showdownjs/showdown/issues/560 I've described how a reasonable compromise may be done: If (is mentioned in the URL match ) at the end as \"inside URL\", otherwise don't.. Well\u2026 one needs to add regex and some useful examples for all other links there, too. My one was just one example.. ",
    "xduseko": "It shouldn't be processed at all unless I use markdown attribute.\nhtml\n<div markdown>\n  <div>\n    <div>\n      <div>\n        text\n      </div>\n      <div>\n        text\n      </div>\n    </div>\n  </div>\n</div>. ",
    "petebacondarwin": "Why do you have this ^ {0,3} constraint on the start tags?\nhttps://github.com/showdownjs/showdown/blob/072973ab8b027b86fb54bc6eb59850dc80f42b3a/src/subParsers/hashHTMLBlocks.js#L52\nIt can't be to avoid capturing indented code blocks as these are hashed away already, no?. Ah I see that indented code blocks are processed later.. @tivie - you talk about performance issues with your possible solution. Can you give me a pointer to how to run the performance tests as I would be interested in offering a PR for this issue but not if my solution also suffers from performance degradation..  Hi @tivie - thanks for getting back to me so quickly!\nYes, exactly currently the contents is parsed as markdown.\nI am indeed currently using a lang extension to workaround this problem, but I believe that it will become increasingly common to have custom elements in our HTML and that support for this should be built in.\nIf you didn't want to treat all custom elements as block level, one option would be to provide users with a configurable white list of matching element names to check.... ",
    "greenkeeper[bot]": "Version 2.1.0 just got published.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 18 commits .\n\n9157d41 Update docs/changelog.md and set new release id in docs/_config.yml\n17e735d Add release documentation for v2.1.0\n90a5d8e 2.1.0\ndb6e03b Update Changelog.txt and AUTHORS for new release\na3eebd9 Build package as part of postversion step\nfd79000 Fix GitHub asset URL\n6a7c801 Redesign the template (#1339)\n354c84c Merge pull request #1337 from timcosta/add_called_immediately_before_after\na957ef3 update spy names across four tests\n3aa9919 [feature] adds spy.calledImmediatelyBefore and spy.calledImmediatelyAfter\ne401337 Merge pull request #1331 from mroderick/remove-next-release-from-docs\naf504b9 Remove documentation of the 2.x pre-releases\n8bec6dd Remove @next instructions from documentation\nfc749fa Merge pull request #1333 from eauc/master\n2058030 Add missing space from deprecated message (#1334)\n\nThere are 18 commits in total. See the full diff.\n\n. ## Version 2.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 40 commits0.\n\nf7ff840 Update docs/changelog.md and set new release id in docs/_config.yml\n59a7a34 Add release documentation for v2.2.0\n37676e8 2.2.0\nb35d217 Update Changelog.txt and AUTHORS for new release\n0127365 Merge pull request #1363 from greena13/master\n4fe0a73 Flatten structure of getWindowLocation()\n38e3ec4 Fix matchers.md in v1.17.6 and v1.17.7 releases. (#1379)\n3d4bc16 Merge pull request #1364 from blacksun1/add-custom-promise\n7ac4f60 Fixes for pull request comments\n25bfde0 Added docs for usingPromise\n0a3518f Added usingPromise method to sandbox.\n17edad7 Added usingPromise method to stub.\nc5bc9ab Merge pull request #1359 from kevincennis/kce/fix-1066\nc633202 Merge pull request #1320 from ashirley/master\n17c2639 Merge pull request #1366 from GProst/master\n\nThere are 40 commits in total.\nSee the full diff\n\n. ## Version 2.3.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nFeature: stub accessors in sandbox\n\nAllow stubbing of accessors with and without sandbox (#1416)\nadd throwsArg(index) to stubs (#1319)\nFix: forEach() requires 'this' argument (#1356)\nOnly reset history when calling resetHistory()\n\n\n\nCommits\nThe new version differs by 34 commits.\n\n64d51be Update docs/changelog.md and set new release id in docs/_config.yml\nd4b30b0 Add release documentation for v2.3.0\n8d64248 2.3.0\ne137139 Update Changelog.txt and AUTHORS for new release\n55dc491 Merge pull request #1416 from lucasfcosta/refactor-sandbox-stub\nfb514cf Merge pull request #1415 from mroderick/style-improvements\n06bf652 Merge pull request #1414 from mroderick/add-related-libraries-to-how-to-page\n746de3f Force fenced code blocks to use smaller font\n1602e00 Improve styling of h4\n46fd81b Remove deprecation warning from tests for old API\n454e0fd Add missing final dot to sandbox docs\n0ea3e17 Add docs for stub.value\nc89fb21 Deprecate stubbing sandbox value in favor of value behavior\ndbefd45 Name restore function on stubNonFunctionProperty\nfe3b9ac Add related libraries section to How To page\n\nThere are 34 commits in total.\nSee the full diff\n\n. ## Version 2.3.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n Make calledAfter symetric with calledBefore\n\nMake calledAfter symetric with calledBefore (#1407)\n\n\n\nCommits\nThe new version differs by 8 commits.\n\n94f422c Update docs/changelog.md and set new release id in docs/_config.yml\n69bf8f2 Add release documentation for v2.3.1\neee4564 2.3.1\n0dc2505 Update Changelog.txt and AUTHORS for new release\n36c6cdc Merge pull request #1407 from lucasfcosta/simmetric-callAfter\n5301cc1 Merge pull request #1420 from mroderick/remove-issue-397-test\n05e2d11 Remove test for issue 397\nc94d00a Make calledAfter symetric with calledBefore\n\nSee the full diff\n\n. ## Version 0.4.14 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits .\n\n8db1d64 0.4.14\n8e1ae0c Update compiled file\n861ea85 Merge pull request #177 from segphault/patch-1\n5c6d8de Added webpack-test to .npmignore\n\nSee the full diff.\n\n. ## Version 0.4.15 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 8 commits0.\n\n6728c4b 0.4.15\n0189372 Update compiled file\n8ce74af Merge pull request #179 from uiteoi/patch-1\n268a65d Fix issue #43 - The basic demo doesn't work.\n8db1d64 0.4.14\n8e1ae0c Update compiled file\n861ea85 Merge pull request #177 from segphault/patch-1\n5c6d8de Added webpack-test to .npmignore\n\nfalse\nSee the full diff\n\n. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n2773e7e v3.0.1.\n85a1ac3 fix typo\n755360b Move require() up\n\nSee the full diff\n\n. ## Version 4.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n4.1.0 / 2017-07-11\nThis release includes one new feature and a few bug fixes.\nNew Features\n\nAdd ES6 collection support to include() (#970, #994; @shvaikalesh)\n\nBug Fixes\n\nAllow dates for isBelow and isAbove assertions (#980, #990; @v1adko)\nfix: check target's type in .property assertion (#992; @meeber)\n\nChores\n\nAdd a missing var keyword found by lgtm.com (#988; @samlanning)\nrefactor: expectTypes to access ssfi flag (#993; @meeber)\nCreate CODEOWNERS (#1004; @keithamus)\n\n\n\nCommits\nThe new version differs by 16 commits.\n\ndf9073c Merge pull request #998 from v1adko/make-release\ncad9933 Merge pull request #1004 from chaijs/code-owners\ncf70b11 Create CODEOWNERS\n3397dda Merge pull request #1005 from meeber/skip-failing-tests\n11a6f85 test: skip failing .include tests in IE11\n45cb327 chai@4.1.0\n2eddd79 Add ES6 collection support to include() (#994)\n3c932e2 feat: allow dates for isBelow and isAbove assertions (#990)\n3bcb21c Merge pull request #979 from chaijs/greenkeeper/browserify-14.4.0\n5daceab Merge pull request #988 from samlanning/missing-var\n9116bc8 Merge pull request #993 from meeber/refactor-expect-types\n351e968 Merge pull request #992 from meeber/property-target-type\ne7b2384 refactor: expectTypes to access ssfi flag\ne6ddf64 fix: check target's type in .property assertion\n7e466af Add a missing var keyword found by lgtm.com\n\nThere are 16 commits in total.\nSee the full diff\n\n. ## Version 2.3.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nMake sandbox.resetHistory also reset spies\n\nFix #1372: make sandbox.resetHistory also reset spies (#1424)\n\n\n\nCommits\nThe new version differs by 5 commits.\n\n72ae300 Update docs/changelog.md and set new release id in docs/_config.yml\n769d770 Add release documentation for v2.3.4\nc8d2ec0 2.3.4\nd27976a Update Changelog.txt and AUTHORS for new release\n330101a Fix #1372: make sandbox.resetHistory also reset spies (#1424)\n\nSee the full diff\n\n. After pinning to 2.3.4 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 2.3.6 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nCommits\nThe new version differs by 30 commits.\n\n496f6b0 Update docs/changelog.md and set new release id in docs/_config.yml\n60a3284 Add release documentation for v2.3.6\n98119bf 2.3.6\n4f07053 Update Changelog.txt and AUTHORS for new release\n1fc4d59 Experiment over\n13e11c8 Experiment: Object.defineProperty(winodw, 'innerHeight'), Safari 10 - part 3\n76dd323 Experiment: Object.defineProperty(winodw, 'innerHeight'), Safari 10 - part 2\n83e84a9 Experiment: Object.defineProperty(winodw, 'innerHeight'), Safari 10\n6adba15 Merge pull request #1473 from fearphage/eslint-yaml\ne1d188c fixed capitalization\nd22eda3 Merge pull request #1313 from takasmiley/issues/#1274\n1661a0f Add test code of spy.matchingFakes\ncf3a34e Move #1274 test code to respective test files\n833ff2c Replace for loop with Array.prototype.forEach\ne72fee4 Update matchingFakes, always returns array\n\nThere are 30 commits in total.\nSee the full diff\n\n. ## Version 2.3.7 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nFix #1476\n\nFix #1476: spy.withArgs(args...).firstCall is broken\n\n\n\nCommits\nThe new version differs by 13 commits.\n\n9365d49 Update docs/changelog.md and set new release id in docs/_config.yml\n7399b99 Add release documentation for v2.3.7\n21b4588 2.3.7\n169ac9d Update Changelog.txt and AUTHORS for new release\n1108117 Merge pull request #1480 from fearphage/lint-staged\n9ecd56a moved from dependencies to dev dependencies [ci skip]\n0a85f21 improved linting for staged files [ci skip]\n079925b Merge pull request #1478 from takasmiley/issues/#1476\n40efa6f Cleanup a few test codes\n1ff2b9b Add spy.getCall tests with combination of withArgs arguments\nc280916 Fix #1476: spy.withArgs(args...).firstCall is broken\n8ad2ed7 Merge pull request #1477 from mroderick/add-documentation-for-getcalls\nfea23b0 Add missing documentation for spy.getCalls()\n\nSee the full diff\n\n. ## Version 2.3.8 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nFix #1474: stub#usingPromise and stub#onNthCall have unexpected interactions\nThis release fixes #1474\n\n\nCommits\nThe new version differs by 6 commits.\n\n717ebf7 Update docs/changelog.md and set new release id in docs/_config.yml\n4f1bcc0 Add release documentation for v2.3.8\n083632e 2.3.8\n0b5bd48 Update Changelog.txt and AUTHORS for new release\n7512258 Merge pull request #1484 from HugoMuller/issue-1474\nd14d296 propagates promiseLibrary to new stub behaviors\n\nSee the full diff\n\n. ## Version 2.4.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 17 commits.\n\n20eb865 Update docs/changelog.md and set new release id in docs/_config.yml\ne333e75 Add release documentation for v2.4.0\nfde7911 2.4.0\n9afdcfc Update Changelog.txt and AUTHORS for new release\n57bb8b3 Merge pull request #1489 from Rowno/named-anonymous-mocks\nc9a35ef Update fake-xhr-and-server.md\n837ec0c Allow anonymous mock functions to be named\n259a330 Merge pull request #1481 from fatso83/fix-safari-breaking\ne742268 Merge pull request #1488 from VynceMontgomery/patch-1\na6a2b8c Clarify behavior of useFakeTimers\n24d15f2 Avoid running test for #1456 on Safari\n717ebf7 Update docs/changelog.md and set new release id in docs/_config.yml\n4f1bcc0 Add release documentation for v2.3.8\n083632e 2.3.8\n0b5bd48 Update Changelog.txt and AUTHORS for new release\n\nThere are 17 commits in total.\nSee the full diff\n\n. ## Version 2.4.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 22 commits.\n\n112af55 Update docs/changelog.md and set new release id in docs/_config.yml\n7f2d45d Add release documentation for v2.4.1\ndfef160 2.4.1\n92e005f Update Changelog.txt and AUTHORS for new release\nd5e4f04 stub#withArgs:  set promiseLibrary correctly (#1497)\n20eb865 Update docs/changelog.md and set new release id in docs/_config.yml\ne333e75 Add release documentation for v2.4.0\nfde7911 2.4.0\n9afdcfc Update Changelog.txt and AUTHORS for new release\n57bb8b3 Merge pull request #1489 from Rowno/named-anonymous-mocks\nc9a35ef Update fake-xhr-and-server.md\n837ec0c Allow anonymous mock functions to be named\n259a330 Merge pull request #1481 from fatso83/fix-safari-breaking\ne742268 Merge pull request #1488 from VynceMontgomery/patch-1\na6a2b8c Clarify behavior of useFakeTimers\n\nThere are 22 commits in total.\nSee the full diff\n\n. After pinning to 5.3.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 5.4.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n0877c94 v5.4.1\n7be83d1 Handle bad ranges in max/min satisfying\n\nSee the full diff\n\n. ## Version 3.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nAdd stub#resolvesThis\n\nFix #1521 by caching references to Array.prototype.filter (#1523)\nFix #1368 by adding stub#resolvesThis (#1517)\n\n\n\nCommits\nThe new version differs by 15 commits.\n\nf1d6e75 Update docs/changelog.md and set new release id in docs/_config.yml\nf6374e8 Add release documentation for v3.2.0\n1b81ec6 3.2.0\naea2654 Update Changelog.txt and AUTHORS for new release\n81c23fb Merge pull request #1523 from fatso83/1521-stub-array-filter-fails\n052a2d0 Add requirements to pull request template\n56ca580 Cache other references to Array.prototype.filter\n531f872 Cache reference to filter in stubbing calls\n3df68a7 fixes issue #1368 by adding stub#resolvesThis (#1517)\n6689cab Merge pull request #1522 from sinonjs/centered-readme-header-with-logo\nbe66ebb Fix \"npm based CDNs\" link\nb005f1d Contered header with logo in readme\n996d502 Merge pull request #1520 from fatso83/jsdelivr\nb376dcf Add hints on using CDNs in docs and README\n3ad5e05 Add props for default file in CDN delivery\n\nSee the full diff\n\n. ## Version 3.2.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 15 commits.\n\ndbef9aa Update docs/changelog.md and set new release id in docs/_config.yml\n97b0535 Add release documentation for v3.2.1\n359e78b 3.2.1\n590ae7d Update Changelog.txt and AUTHORS for new release\nd9cae73 Merge pull request #1532 from EyalAr/master\n4f40409 fix fakeServerWithClock.create function mock to return a unique value\n4310343 Merge pull request #1533 from noisecapella/gs/fix_undefined\nf87b512 resolvesThis should override previous throws\na85a355 fix tests that stub nise.fakeServer.create & fakeServerWithClock.create\n5c3fb95 preserve context of functions from nise: fakeServer, fakeServerWithClock\nb509f4e add tests for issue #1531\n28bcedc Merge pull request #1530 from noisecapella/gs/regression_onfirstcall\n7b53434 Fix regression for issue #1526 regarding onFirstCall().throws()\n350717d Remove superfluous \n2a04615 Fix docs regression introduced by #1523\n\nSee the full diff\n\n. After pinning to 4.0.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 4.0.2 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nCommits\nThe new version differs by 21 commits.\n\n39e5737 Update docs/changelog.md and set new release id in docs/_config.yml\nc2bd7b1 Add release documentation for v4.0.2\nda24e94 4.0.2\ncea60e8 Update History.md and AUTHORS for new release\nd4dcfca Document the stub.reset breaking change (#1590)\naab1917 Merge pull request #1596 from mroderick/fix-preversion-to-use-history.md\n5dbe685 Update 'nise' to latest version (#1593)\n578b9ea Update History.md and AUTHORS for new release\n499b698 Fix preversion.sh to stage History.md\n1e5fd0f Remove unneeded characters\n2a69d51 fix typo in contributing\n6cc71ec Document how to trigger progress events (#1585)\ne49fcf1 Fix broken test-coverage task\n527086a Use supports-color module to test if system supports colors\n78782b4 Merge pull request #1580 from mroderick/dependency-hygeine\n\nThere are 21 commits in total.\nSee the full diff\n\n. After pinning to 4.0.2 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 4.1.1 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nCommits\nThe new version differs by 5 commits.\n\n3a0e28b Update docs/changelog.md and set new release id in docs/_config.yml\n989e15b Add release documentation for v4.1.1\ndf3adf0 4.1.1\n0e9bf90 Update History.md and AUTHORS for new release\n9d9c372 Remove \"engines\" from package.json\n\nSee the full diff\n\n. ## Version 4.1.2 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nCommits\nThe new version differs by 7 commits.\n\n12567cf Update docs/changelog.md and set new release id in docs/_config.yml\n2af9818 4.1.2\n164fd2e Update History.md and AUTHORS for new release\n8de60ac Update Lolex to include fix for #872\nbcc6960 Remove deprecated methods from documentation (#1613)\nec3f489 Ignore coveralls module when checking for unused dependencies\n5693d38 Prefer node 8 for single run tests in Travis CI\n\nSee the full diff\n\n. After pinning to 3.1.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 4.1.5 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 4.2.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nSpeed up stub creation\n\nPerformance: spend less time stubbing methods (#1627)\n\n\n\nCommits\nThe new version differs by 14 commits.\n\na8171c3 Update docs/changelog.md and set new release id in docs/_config.yml\n32d6c4a Add release documentation for v4.2.1\nf3e34f8 4.2.1\n158f33e Update History.md and AUTHORS for new release\na5c22f2 #1627\n2d0509e \"throttle\" is actually a \"debounce\" in the example\nd929b22 Merge pull request #1670 from mroderick/update-footer\n225083e Update copyright statement\n1237e0d Update footer to use Stack Overflow\nfdd1948 added another sinon article (#1669)\nd7075d9 Add .yml extension to .eslintrc\nc28bca3 Make sure eslint-plugin-ie11 is applied to entire codebase\ncf3ed84 Move eslint config into it's own file\n1503cce Add eslint-plugin-ie11 (#1666)\n\nSee the full diff\n\n. ## Version 4.2.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\nc2f44b0 Update docs/changelog.md and set new release id in docs/_config.yml\nc76cf01 Add release documentation for v4.2.2\n6628080 4.2.2\n47b9ba9 Update History.md and AUTHORS for new release\n5920e1d Remove mention of PhantomJS from CONTRIBUTING.md\n3551fdf Fix #1638: Make resetHistory work for props also\nb37820a Fix poor test of resetHistory\n\nSee the full diff\n\n. ## Version 4.2.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\nb5968ab Update docs/changelog.md and set new release id in docs/_config.yml\n9cbf3f2 Add release documentation for v4.2.3\n45cf330 4.2.3\n8f54d73 Update History.md and AUTHORS for new release\na401b34 Update package-lock.json\na21e4f7 Replace formatio with @sinonjs/formatio\nf4e44ac Use comments in pull request template to get better descriptions with less template text\n\nSee the full diff\n\n. ## Version 4.3.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 9 commits.\n\nf7139e7 Update docs/changelog.md and set new release id in docs/_config.yml\n0b75f10 Add release documentation for v4.3.0\n66603e7 4.3.0\n2bee64e Update History.md and AUTHORS for new release\nc45032e Update package-lock.json\nc27e714 add docs\n5459212 add calledOnceWith\nbeea2f6 simplify nested if statements\n3e7edca add calledOnceWithExactly assertion\n\nSee the full diff\n\n. ## Version 4.4.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 6 commits.\n\n78b2192 Update docs/changelog.md and set new release id in docs/_config.yml\n1f3b7dc Add release documentation for v4.4.0\na50f759 4.4.0\n9f0615e Update History.md and AUTHORS for new release\nb81d20f Change return value of yield and callArg\n2c2bc0d Added comma, for clarity\n\nSee the full diff\n\n. ## Version 4.4.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 9 commits.\n\nc105a46 Update docs/changelog.md and set new release id in docs/_config.yml\n432a284 Add release documentation for v4.4.1\n9b4870e 4.4.1\na14d96f Update History.md and AUTHORS for new release\nae22a33 merge doc changes to released versions\n4cf8a83 correct eslint statements\n7380a03 add tests to verify asserts on spyCalls\n6e7e71f Update docs\ncbc5667 Document that it is allowed to assert on dedicated spy calls.\n\nSee the full diff\n\n. ## Version 4.4.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n99ef3fa Update docs/changelog.md and set new release id in docs/_config.yml\n2075fda Add release documentation for v4.4.2\n5ac4eae 4.4.2\ne0bfd43 Update History.md and AUTHORS for new release\n5a2f19f Add descriptive error message on attempt to call argument that is not a function\n\nSee the full diff\n\n. ## Version 4.4.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 21 commits.\n\n6de1cbd Update docs/changelog.md and set new release id in docs/_config.yml\ncecbc46 Add release documentation for v4.4.3\n17b052f 4.4.3\n5b01728 Update History.md and AUTHORS for new release\nf01d847 Fix inconsistent newline usage %D\ne9aa877 Fix missed switch from referee to @sinonjs/referee\na0e200e Add subdir eslintrc for mjs\n7af0579 remove unnecessary properties quoting\ndc895fc debounce function call\nd7fb7d5 Merge pull request #1715 from sinonjs/sinon-es6-module-detection\n51cdafe Add linting for ES Modules\n6959188 Add detection of ES Modules to spies and lots of tests\nf6b89a1 Extract ES Module detection and improve error\n3ede6ee Throw meaningful error stubbing ECMAScript Module\nb491a57 Replace referee dependency with @sinonjs/referee\n\nThere are 21 commits in total.\nSee the full diff\n\n. ## Version 4.4.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 10 commits.\n\n37fc15f Remove accidental release\n41c13b5 Update docs/changelog.md and set new release id in docs/_config.yml\n3bbc457 Add release documentation for v4.4.4\nd2122e3 4.4.4\ncad4b60 Update History.md and AUTHORS for new release\nff5e2f9 Update docs/changelog.md and set new release id in docs/_config.yml\n9865c89 Add release documentation for v4.5.0\ne458c9e 4.5.0\nc22d73f Update History.md and AUTHORS for new release\nc560240 Make @std/esm a devDependency\n\nSee the full diff\n\n. ## Version 4.4.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n2fa34f6 Update docs/changelog.md and set new release id in docs/_config.yml\nd048ad1 Add release documentation for v4.4.5\n41f0b83 4.4.5\nd088fae Update History.md and AUTHORS for new release\n4751ee9 Add postinstall banner pointing to Open Collective\n\nSee the full diff\n\n. ## Version 4.4.6 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n988df0c Update docs/changelog.md and set new release id in docs/_config.yml\n2c2f245 Add release documentation for v4.4.6\n0b51a76 4.4.6\nfa11833 Update History.md and AUTHORS for new release\ne5e6835 Return returned value of invokant when using yields* and callsArg* (#1724)\n\nSee the full diff\n\n. ## Version 4.4.7 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\ne060fe9 Update docs/changelog.md and set new release id in docs/_config.yml\ne9fce06 Add release documentation for v4.4.7\nf047838 4.4.7\ncc91fe6 Update History.md and AUTHORS for new release\n9fb8577 Emojify the support message :heart:\na87ef85 Use existing mini-lib for coloring\n1f33fe5 Reduce noisy NPM output from postinstall script\n\nSee the full diff\n\n. ## Version 5.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 182 commits ahead by 182, behind by 30.\n\nac71bfd Fix invalid documentation for fake.yields, fake.yieldsAsync\nbeb4c6b Add release documentation for v5.0.1\nd707712 Update docs/changelog.md and set new release id in docs/_config.yml\nbb062a3 5.0.1\n5d885b2 Update History.md and AUTHORS for new release\nc794709 Add documentation for fake().callback and fake().lastArg\nd5cd20f Add .lastArg and .callback to fake and call\n01cbe61 Allow replacing non-own object properties (#1705)\n7e2f05a Change yields semantics to match stub behaviour\ncf99c5a Add a failing test for #1695\n88e6e5f Remove deprecated spy.reset method\nf133b6a Docs: add migration guide for v5\nf29f918 Add replace methods\nafec7b2 Extract isPropertyConfigurable to own file\n738638d Extract nextTick to own file\n\nThere are 182 commits in total.\nSee the full diff\n\n. ## Version 5.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 9 commits.\n\n68883b0 Update docs/changelog.md and set new release id in docs/_config.yml\n6c20e74 Add release documentation for v5.0.2\n415c78f 5.0.2\n1a31c0e Update History.md and AUTHORS for new release\n6b47a83 Fix #1770: Reset history on sandbox reset\n7d1eff1 Remove bithound (#1773)\n32484d2 Fix broken link in docs\n93d182f Add link to sinon.replace from fake\n92dc963 Add missing links for documentation\n\nSee the full diff\n\n. ## Version 5.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 9 commits.\n\n5155c01 Update docs/changelog.md and set new release id in docs/_config.yml\n75ffac0 Add release documentation for v5.0.3\n347eeb5 5.0.3\n454d77d Update History.md and AUTHORS for new release\n2a3696d Fix #1775: Default sandbox does not restore stubs, spies, mocks\n724dd6c Improve documentation for fakes\nf45dc6e Removed unused link to the google group\n80eca7a Update home page to use fakes for the examples\n57fac55 Fix syntax error in example\n\nSee the full diff\n\n. ## Version 5.0.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 12 commits.\n\n374f593 Update docs/changelog.md and set new release id in docs/_config.yml\nf298d51 Add release documentation for v5.0.5\n90a4212 5.0.5\n7055663 Update History.md and AUTHORS for new release\ne5b43de Refuse to replace already replaced values\nd4467e7 Update docs/changelog.md and set new release id in docs/_config.yml\n7e08393 Add release documentation for v5.0.4\n6fcf7b2 5.0.4\nb8d65ff Update History.md and AUTHORS for new release\n3a66331 Fix #1781: Reject non-function values a f argument to fake\n5503f73 Remove node@4, add node@10\ncfccaf3 Update migration-guides.md\n\nSee the full diff\n\n. ## Version 5.0.6 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\nc0eb019 Update docs/changelog.md and set new release id in docs/_config.yml\n4b33872 Add release documentation for v5.0.6\n2d6900d 5.0.6\na22c3f0 Update History.md and AUTHORS for new release\n8f34417 Remove support-sinon.js as postinstall\n\nSee the full diff\n\n. ## Version 11.6.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n450b915 Version 11.6.1\n0c54ed3 Fix <style>'s sheet property\n\nSee the full diff\n\n. ## Version 11.6.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\n1cd4831 Version 11.6.2\n71dc01b Update maintainer and repository information\nf32113b Further fix <style> and <script> evaluation semantics\ndbda070 Fix <style> and <script> parsing to wait for their close tag\n\nSee the full diff\n\n. ## Version 11.8.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\n2e90c57 Version 11.8.0\n1c4945b Add DocumentFragment.prototype.getElementById\n63622b8 Add constraint validation support for forms\n4884fb9 Fix README typo\n\nSee the full diff\n\n. ## Version 11.9.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\nb0ca4dd Version 11.9.0\nd4d0517 Fix canvas.toBlob() JPEG quality to not always be zero\na8d766a Fix edge cases in nodeValue and textContent\nf47f9e2 Fix cloning of Documents\n31f8b53 Add namespace-related methods to Node\n\nSee the full diff\n\n. ## Version 11.10.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 11 commits.\n\n988e497 Version 11.10.0\nb3d823f Enable XHR user-agent header tests\n4100e41 Get the User-Agent header from flag instead of from the request\n1e252e0 Add User-Agent header to CORS preflight requests\n9b25ba5 Fix backward README statement about document.hidden\n0b22ce2 Add logo\n5896226 Use Node 8 for testing on Travis\nd348cd5 Disable tests for missing features\n571cd9f Implement srcElement and returnValue for Event\nea0f5cf Update WPT config to match upstream changes\nf3101ff Roll Web Platform Tests\n\nSee the full diff\n\n. ## Version 5.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n4d12f95 Update docs/changelog.md and set new release id in docs/_config.yml\n3ddfea0 Add release documentation for v5.1.1\n67b8872 5.1.1\n8ff4ac8 Update History.md and AUTHORS for new release\n8aa1425 Remove ES2015 'module' field for 5x branch\n\nSee the full diff\n\n. ## Version 6.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 11 commits ahead by 11, behind by 5.\n\n05d7990 Merge pull request #1829 from fatso83/version-6-with-esm-export-for-bundlers\na40840e Update docs/changelog.md and set new release id in docs/_config.yml\n47e6346 Add release documentation for v6.0.0\n9d10547 6.0.0\n3ba797d Update History.md and AUTHORS for new release\n0c07970 Migration guide for 6.0 (no known breaking changes)\n80d742b Include 5.1.1 changes\n57f4077 Merge pull request #1835 from chrisguttandin/add-named-esm-exports\nfc4b068 Add test to verify named exports\nf70ff62 Append named exports to the generated esm bundle\n78f7549 Document/test call ordering checks\n\nSee the full diff\n\n. ## Version 6.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 8 commits.\n\nc8901e7 Update docs/changelog.md and set new release id in docs/_config.yml\n8f8b2d9 Add release documentation for v6.0.1\nfeee43d 6.0.1\nfc21226 Update History.md and AUTHORS for new release\na3cf98f Add fake behaviors to sandbox (#1815)\n8816e1a Use escaped double quotes for compatibility with Windows\n559d57d Fix mocha test file pattern to match subdirectories correctly\nd2983f1 Use migration guide include in guide index (#1838)\n\nSee the full diff\n\n. ## Version 21.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\nf30dd97 21.0.0\n476f21e Update eslint to ^5.0.0 (#158)\ne1d6368 Require Node.js 6 and Grunt 1\n\nSee the full diff\n\n. ## Version 4.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.0.0\n\nUpdated all dependencies.\nRequires Node.js >= 6.\n\n\n\nCommits\nThe new version differs by 1 commits.\n\n5cdebda v4.0.0. (#527)\n\nSee the full diff\n\n. - The devDependency grunt-contrib-jshint was updated from 1.1.0 to 2.1.0.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\ncfd9ade Merge pull request #290 from gruntjs/ver\n12045c1 v2.1.0\ned6586e Merge pull request #289 from gruntjs/deps\n7e529b4 Update deps\ned84ab8 Merge pull request #285 from gruntjs/v2.0.0\n\nSee the full diff\n\n. - The dependency jsdom was updated from 11.12.0 to 12.2.0.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 10 commits.\n\n751c29e Version 12.2.0\n8de427a Revert \"Remove some unnecessary dependencies\"\na6a816e Fix formElement.form property\n05706e5 Remove some unnecessary dependencies\n55322e3 Implement toggleAttribute()\n84987d0 Let canvas/canvas-prebuilt require() errors bubble out\n899ddae Fix XHR sending empty request body after a preflight request\n07d74ac Update dependencies\n68bf33d Lint scripts in HTML and JS files during same run\n88e72ef Add support for Shadow DOM\n\nSee the full diff\n\n. - The dependency jsdom was updated from 11.12.0 to 13.0.0.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 11 commits.\n\n70a1c52 Version 13.0.0\ne40be69 Support the canvas v2 package instead of v1\n064527e Implement relList for ,  and  elements\n812093c Properly implement Node tree modification constraints\n28833fe Implement the passive option for addEventListener()\nde23dce Implement initStorageEvent()\n66e5863 Replace use of assert_exists\n144c614 Add the [fail-slow] reason\n3fd981c Roll Web Platform Tests\n4b42f06 Move to w3c-xmlserializer\n7d0a706 Fix spelling in README example\n\nSee the full diff\n\n. - The dependency jsdom was updated from 11.12.0 to 13.2.0.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 19 commits.\n\n16d3913 Version 13.2.0\nfd9029c Use UTF-8 as the default encoding for XML documents\n2898617 Implement MutationObservers\n743560f Add regression test for dynamic <style> updates\n3cb5ec4 Document how runScripts installs globals\nd33cf37 Add helpers for creating and firing events\n71f0ad9 Fix typos and grammar issues in the README\n761d08a Enable more tests\n704cf33 Upgrade saxes to version 3.1.5\nccecb00 Allow  elements to be focused\nac5af4d Support XML documents in frames\n19a1319 Update note for screenLeft and screenTop properties on window\nc75d5fa Support XML document DOCTYPEs with a custom name\n06476fb Implement navigator.plugins and navigator.mimeTypes\n7349f3a Make getComputedStyle() throw for incorrect argument type\n\nThere are 19 commits in total.\nSee the full diff\n\n. - The dependency jsdom was updated from 11.12.0 to 14.0.0.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 6 commits.\n\nb83783d Version 14.0.0\nff5066f Do not fetch non-browsing-context-connected s\nf7c81a9 Change JSDOM.fragment() to work with no arguments\n8ff8715 Fix fragment code example in the README\n31d14cd Fix element.blur() on a focused element\n75a921e Fix  document owner and adoption semantics\n\nSee the full diff\n\n. - The devDependency sinon was updated from 5.1.1 to 7.2.4.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 13 commits.\n\n06fc27d Update docs/changelog.md and set new release id in docs/_config.yml\n54da371 Add release documentation for v7.2.4\ne5de1fe 7.2.4\nd158672 Update CHANGELOG.md and AUTHORS for new release\n1431c78 minor package updates\n37c955d Merge pull request #1979 from fatso83/update-npm-deps\nfc2a32a Merge pull request #1975 from ehmicky/master\n85f2fcd Update  eslint-plugin-mocha\n707e068 Fix high prio audit warnings\n8282bc0 Update nise to use @sinonjs/text-encoding\nc1d9625 Make all properties non-enumerable in spies, stubs, mocks and fakes\n894951c Merge pull request #1973 from mgred/default-sandbox-example\n876aebb docs(sandbox): add example for default sandbox\n\nSee the full diff\n\n. - The devDependency sinon was updated from 5.1.1 to 7.2.5.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 8 commits.\n\n8b8bddd Update docs/changelog.md and set new release id in docs/_config.yml\n33f0b67 Add release documentation for v7.2.5\n2b4bc7d 7.2.5\nfb54e29 Update CHANGELOG.md and AUTHORS for new release\n8ac68f3 Upgrade mochify to latest\nadd43e3 Upgrade @sinonjs/samsam to latest\nd0c073c don't call extends.nonEnum in spy.resetHistory (#1984)\nf99e2ef Use stable Chrome in Circle\n\nSee the full diff\n\n. - The devDependency sinon was updated from 5.1.1 to 7.2.6.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 6 commits.\n\n0468cd4 Update docs/changelog.md and set new release id in docs/_config.yml\n7f2c8c2 Add release documentation for v7.2.6\n36b99b3 7.2.6\n1fc586e Update CHANGELOG.md and AUTHORS for new release\nc8758fd Upgrade @sinonjs/formatio\ne24daed Set fake.lastArg to last argument regardless of type\n\nSee the full diff\n\n. - The devDependency sinon was updated from 5.1.1 to 7.2.7.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\n4a8f432 Update docs/changelog.md and set new release id in docs/_config.yml\n714911e Add release documentation for v7.2.7\n33ca39b 7.2.7\ne8b997f Update CHANGELOG.md and AUTHORS for new release\n7913865 Update @sinonjs/commons @sinonjs/formatio\n19b3fc7 Retain spy function names and fix spy.named(name) (#1987)\n3275d18 Document spying on accessors (#1976)\n\nSee the full diff\n\n. - The dependency yargs was updated from 12.0.5 to 13.2.0.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n48249a2 chore(release): 13.2.0\n51876e6 chore: update deps (#1296)\n16c5d25 feat: zsh auto completion (#1292)\n\nSee the full diff\n\n. - The dependency yargs was updated from 12.0.5 to 13.2.1.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n545c7f1 test: slightly reworded one test\n4375680 chore(release): 13.2.1\ndfcaa68 test: slight edit to test wording\n3180224 fix: add zsh script to files array\n0a96394 fix: support options/sub-commands in zsh completion\n\nSee the full diff\n\n. - The dependency yargs was updated from 12.0.5 to 13.2.2.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\ne7f2937 chore(release): 13.2.2\nedd0bb5 test: correct test description\n03a9523 chore: forgoing dropping Node 6 until yargs@14 (#1308)\n14920d1 docs: remove --save option as it isn't required anymore (#1301)\n\nSee the full diff\n\n. ",
    "tylerjbainbridge": "I'm also looking for this fix - how can I use this new fix? Do I have to target a certain version? Sorry if this is a stupid question.. ",
    "lebeda": "Browser is Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:53.0) Gecko/20100101 Firefox/53.0 It's Firefox development version. Operation system is Ubuntu 16.04.. ",
    "ZLevine": "FYI there is a similar issue with the minified version in the latest version of Chrome when you set tables: true. Using the full version fixes it.. ",
    "simov": "Sure, I'll do that in a bit.. Thanks it covers all of my image test cases here.\nI'm using my Markdown Chrome Extension to quickly check markdown documents whenever I stumble upon something interesting. Currently only two compilers are officially bundled with the extension but Showdown as well as 6 others are supported, you can check it out here if you are interested.\n:+1: . It's a bug:\nmarkdown\n- 1\n  - 2\n    - 3\n      - 4\n        - 5\n          - 6\n            - 7\n              - 8\n                - 9\nmarked compiler:\nhtml\n<ul>\n    <li>1\n        <ul>\n            <li>2\n                <ul>\n                    <li>3\n                        <ul>\n                            <li>4\n                                <ul>\n                                    <li>5\n                                        <ul>\n                                            <li>6\n                                                <ul>\n                                                    <li>7\n                                                        <ul>\n                                                            <li>8\n                                                                <ul>\n                                                                    <li>8</li>\n                                                                </ul>\n                                                            </li>\n                                                        </ul>\n                                                    </li>\n                                                </ul>\n                                            </li>\n                                        </ul>\n                                    </li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n</ul>\nshowdown compiler:\nhtml\n<ul>\n    <li>1\n        <ul>\n            <li>2</li>\n            <li>3\n                <ul>\n                    <li>4</li>\n                    <li>5\n                        <ul>\n                            <li>6</li>\n                            <li>7\n                                <ul>\n                                    <li>8</li>\n                                    <li>9</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n</ul>. @tivie I think lots of people are using just 2 spaces for nested lists on GitHub readmes for example.\nI'm fine with using disableForced4SpacesIndentedSublists because this is exactly what I want and this is the behavior that works in every website or implementation that I can think of.\nBut the problem with this option is that it's not consistent:\nmarkdown\n- ul\n  - ul - using 2 spaces indents properly\n     - ul - should use 3 or 4 spaces to indent properly\n         - ul - should use 4 spaces to indent properly\n             - ul - again 4 spaces, and so on\nExample. ",
    "shhawn": "I think there can be just another option, like enable2SpacesIndentedSublists.. ",
    "noe132": "2 space indentation is quite useful for many people like me\nI'm coding with 2 space indentation and I also want markdown to be 2 space too. ",
    "tannerlinsley": "I would say 2 spaces is becoming the norm, despite was is supported or not. In the wild, there are a lot of projects (if not most, that I see) using 2 space indentation in their editors and markdown files. Another driving need for this is the wide adoption of Prettier in the community. It formatts markdown files too, often normalizing indentation from 3/4 to 2.\nI would call this a need. Is there anything I can do to help? I would love to flip that disableForced4SpacesIndentedSublists switch and have all be well in the world :). ",
    "fabiospampinato": "This is broken for us too, the following:\nmarkdown\n- foo\n  - bar\n    - baz\n      - qux\ngets rendered as:\n\n@tivie I'd like to submit a PR for this, would it be considered? If so, can you point me at the right section of the code? I'm not very familiar with the codebase.. > Actually it is very trivial to write such an extension.\nIs it though? I suppose the proposed solution doesn't take into account code blocks, whose content shouldn't be modified at all.. @tivie this is still broken for me too. I'm setting disableForced4SpacesIndentedSublists to true but still the following:\nmarkdown\n- foo\n  - bar\n    - baz\n      - qux\ngets rendered as:\n\n. I don't have this problem, I'm setting converter.setFlavor ( 'github' );. @tivie Can you provide an example of one of those ambiguous situations? \ud83e\udd14 \nAnyway given that GitHub itself doesn't seem to behave like that perhaps it would be better to align showdown with it.. Right, but I have a few problems with this:\n\n\nThe table I posted doesn't have such ambiguity, since the divider row starts with a pipe and not with an hyphen, this enforced double-hyphen rule seems to break some perfectly valid and unambiguous tables to me, right?\n\n\nThis syntax for writing tables isn't specced in the original Markdown spec, and since showdown supposedly supports the gfm spec, which defines a syntax for tables, I guess tables should be rendered the same way they are rendered here on GitHub, otherwise those are not gfm tables but showdown-formatted-markdown tables, whatever that means, no?. Thanks for the detailed explanation, let's hope GitHub's implementation becomes less ambiguous and aligns itself more to commonmark's table syntax then \ud83d\udc4d . \n\n",
    "imaai": "var converter = new showdown.Converter();\nvar html = converter.makeHtml('\\<foo\\>');\nThen changing content of div with var html and it contains:\n<foo></foo> instead of text\n. These two lines did work in createHTML\n    text = text.replace(/\\\\/g,'\\>');. ",
    "underscoredotspace": "Sorry, it was an expirament with Glitch that wasn't supposed to hit your repo \ud83d\ude43On 8 Apr 2017 11:35 pm, Estev\u00e3o Soares dos Santos notifications@github.com wrote:?\n\u2014You are receiving this because you modified the open/close state.Reply to this email directly, view it on GitHub, or mute the thread.. ",
    "subodhpareek18": "Actually it is very trivial to write such an extension. I can confirm that the one below does works as intended.\n```js\nconst showdown = require('showdown');\nconst classMap = {\n  h1: 'ui large header',\n  h2: 'ui medium header',\n  ul: 'ui list',\n  li: 'ui item'\n}\nconst bindings = Object.keys(classMap)\n  .map(key => ({\n    type: 'output',\n    regex: new RegExp(<${key}>, 'g'),\n    replace: <${key} class=\"${classMap[key]}\">\n  }));\nconst conv = new showdown.Converter({\n  extensions: [...bindings],\n  noHeaderId: true // important to add this, else regex match doesn't work\n});\nconst text = `\n1st Heading\n2nd Heading\n\nfirst item\nsecond item\n`;\n\nconsole.log(conv.makeHtml(text));\n/*\n\u200b\u200b\u200b\u200b\u200b1st Heading\u200b\u200b\u200b\u200b\u200b\n\u200b\u200b\u200b\u200b\u200b2nd Heading\u200b\u200b\u200b\u200b\u200b\n\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n\u200b\u200b\u200b\u200b\u200bfirst item\u200b\u200b\u200b\u200b\u200b\n\u200b\u200b\u200b\u200b\u200bsecond item\u200b\u200b\u200b\u200b\u200b\n\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n/\n```\nYou can close the issue, but as requested earlier, it would be useful for other people if this could be added to the documentation as a specific recipe.. ",
    "andistuder": "Much appreciated @tivie! When are you planning to merge this to master? . Thanks for the quick fix @tivie  - I can confirm that works for me! . ",
    "mahirk": "@tivie just as I posted it, I added the option to the config and that fixed it, while closing the issue I deleted the content in the request by mistake, here is the problem:\nPROBLEM:\nIncorrect rendering of the Table of Contents link v/s the id tag on the headings:\n\nSOLUTION:\nnew showdown.Converter({ghCompatibleHeaderId: true});\n. ",
    "keligijus": "@tivie thanks for clarification. This seems too much trouble.. I guess I will have to make my own parser to do bold and italic only :). I was thinking about this too. Thanks so much for the awesome working fiddle \ud83d\udc4d  It's going to be a great place to start. ",
    "marinintim": "\ud83d\udc4d . ",
    "vitosamson": "Thanks, I missed that option in the docs.\nWhat about the second repro case I provided? With simplifiedAutoLinks set to true and literalMidWordUnderscores set to false, no link is created at all.. ",
    "aaronincincy": "Is there any ETA for this feature being released?  I have a need for it for a project and want to be able to give an estimate to my PM when the inevitable bug comes up.. ",
    "OrkhanAlikhanov": "What is the use case of this?. I just found it in tests. converter.makeMarkdown() . @jrmcdona It's available in master branch. See makeMarkdown. ",
    "projectitis": "Markdown is useful because it leaves the formatting/display up to the client. Example - you may be converting markdown to richtext to display within a mobile app, instead of displaying it as HTML as you would in a web app.\nSo a use case might be that you use a WYSIWYG editor to create HTML content via a web app. The content is then reverse converted to markdown and stored in the DB. When consumed/viewed, the same content is then either converted to HTML for display on web, or richtext for display in a mobile app (etc).. Sorry, I haven't had a chance to implement it yet, but it looks like the perfect solution. Thanks!. ",
    "ryantuck": "Was this already implemented and just hard to find? The repo description seems to indicate this functionality exists:\n\nA bidirectional MD to HTML to MD converter written in Javascript. \n",
    "jrmcdona": "@tivie  Is 2.0 out yet or when will it be?    @OrkhanAlikhanov did you find that in tests but not available in source code?\nconverter.makeMarkdown()\nThanks. ",
    "flowyear": "I neglected the image link\uff0cit's harder to handle, like:\n```markdown\n\nor maybe like this:\n.png)\n```. ",
    "devEngine": "Thanks very much for your response - and I'm sure it's me missing something so apologies once again.\nI have this in my original markdown content (between the 3 backticks):\n```\n{\n     accountNum          =>    \"$ENV/{HOME}/acct\"\n   , configFile               =>    \"$ENV{HOME}/config\"  \n},\n```\nand no matter how I escape the brackets, I always end up getting from the converter:\n```\n{\n     accountNum          =>    \"$ENV/{HOME}/acct\"\n   , configFile               =>    \"$ENV{HOME}/config\"  \n},\n```\nAny ideas how I should escape these to display the actual brackets? \n. Sorry, got it with reference to your helpful link.  Thanks for your assistance!. ",
    "sevaho": "Makes sense, thank you very much for your help, it works now :). ",
    "PhilipNunn": "I see, thanks.  It appears that CommonMark does not require a blank line either.  CommonMark.org example 264. ",
    "subversivo58": "I got lost ... I went through the \"wiki\" but found reference that it was necessary to deactivate again if I used \"GFM\"\nAlright thank you, fine works!. ",
    "faloi": "@rodri042 this is why tables aren't working properly, please subscribe to this issue.. ",
    "baileyherbert": "Is showdown still living in HTML4, then? That link is HTML4.\nHere's the direct quote from W3 HTML5 specification:\n\nThe value must not contain any space characters.\n\nand \n\nThere are no other restrictions on what form an ID can take; in particular, IDs can consist of just digits, start with a digit, start with an underscore, consist of just punctuation, etc.. Yup, working perfect now. Thanks!. \n",
    "rhulet34": "Yes but does the new window open in a new tab or an actual new window, and is it able to be set in the markdown? (is that what the adding target=\"_blank\" to the 'a' tag is?). Alright I tested it, opens in new tab....just got a little confused by the wording. Thanks.. ",
    "seekei": "Thanks for your reply. @tivie . ",
    "TC827": "I'm using showdown 05-08-2017, but I think that the js engine of SAP (in ABAP environment) is old and I do not know where to get which version SAP is using. Thank you.. ",
    "scssyworks": "Hello Tivie,\nI want to display HTML text within code block. Example Markdown:\n\\\n \\This is some HTML\\<\\div>\n\\\nNow as per functionality I think it is fine. I can simply write the HTML text as above (without escaping <,>, and &, and it will render correctly. However, if you open the same markdown on Github, it interprets it as proper HTML and it will display the text as follows:\nThis is some HTML\nNo wrapping div displayed.\nI will have to escape it separately on github to make it work. For example, same code above need to be written as follows to make it work:\n\\\n\\\\This is some HTML\\\\\n\\\nNow showdown is interpreting it incorrectly.\nPlease suggest how to achieve it as there is no way to do it in showdown. Before closing the ticket kindly understand the problem. Just that it has been implemented that way doesn't mean it is correct.. This seem to be a workaround for the problem. Anyways, thanks.. ",
    "3stacks": "Rather than creating a new one, I might piggy-back off this issue because it's sort of the same issue.\nWhy is it un-reasonable to expect...\n<div>\n    <p> This code snippet </p>\n</div>\nTo be rendered as <code> elements with HTML inside it?\nI need a library that can handle this as all of my markdown content is related to code, so there's a lot of css, javascript and html floating around. \nIf a Markdown parsing library can't handle this, then I legitimately don't know what I can do.. ",
    "Lilja": "A space(whitespace) before the # is the issue.. @tivie Great, thanks for the quick response. . ",
    "FrankFang": "So sad, showdown-toc requires jQuery. ",
    "shangxinbo": "sorry it's my fault. ",
    "daiyi": "(For future reference, this can be fixed by setting the encoding to UTF-8 by including <meta charset=\"utf-8\"> in the <head> tag of your page. I just ran into the same problem! Ref). ",
    "webbery": "@tivie I can't see demo for my country\u2018s firewall.  I captured the image of  codes in jsfiddle:\n\nI used version 1.7.2.. Yes, China. I don't know why they do that:(. ",
    "alkorgun": "@tivie if you were more attentive you would see versions: marked 0.2.6 is 5 years old. And so, what is your conclusion? Most of parsers fail, showdown should fail too?. ",
    "inhere": "thx. ",
    "t1m0t": "Would be great to add proper indication in the wiki for example as to enable options in Showdown as I didn't find any of this except here :/. ",
    "geudrik": "@tivie \ud83d\udc4d I can't read. Thanks. ",
    "dessalines": "This isn't working when going from html to markdown, even with the table option enabled.. How do you enable this option?\nNM, figured it out. . Okay I just ran into this, How exactly to I use this to convert html to markdown? npm link or something?\n. ",
    "neooblaster": "For CLI : showdown makehtml -i file.md -o file.html --tables. Hi @tivie,\nThank you for your reply. I did not know that was the official spec.\nI always skip the newline, because my tools which renders my Markdown (PhpStorm, Markdown-PDF) add spaces between my list items.\nAn idea when Showdown v2.0 will be released ?\n. Ok top !\nI will be present to test it with my \"issue\" ;)\nThank you for your support.. ",
    "codermjb": "Input: Copy and paste the code example from the markdown file.\nExpected Output: The markdown text to be converted to the markdown preview\nActual Output: Markdown just shows all text and there is no preview.\nSorry, I was busy and didn't have time to fill in all this information. I decided to go with a PHP plugin since none of the JavaScript plugins seem to work with MarkDown.\n. >var conv = new showdown.Converter();\n\nvar html = conv.makeHtml('some text');\nalert(html);\n\nThis worked!\nI think I got confused by the markdown example and how the var was a one line var rather than seperate like your example, which I don't usually do that. Then I think I was using text instead of html.\nSorry about that!\nNow I just need to figure out how to load a markdown file in there. It keeps breaking it because it wants a string with no returns, etc. I tried json_encode, but that didn't seem to work.. @tivie thank you, but I would prefer not to.\nI have a PHP plugin that already takes markdown and converts it to HTML.\nShowdown does it too, but I just need to figure out how to put multiple lines of markdown text in it.\nIt appears that the JavaScript versions render the Markdown output better in terms of design and I am pushing towards that.. Oh ok, so it's working in a text area, but it doesn't work here: var html = conv.makeHtml('<?php echo $markdown; ?>');\nAnd there is no CSS formatting at all.\nAnd I saw that document too, but it's almost pointless? What is it just syntax?https://daringfireball.net/projects/markdown/syntax\nI mean it looks pretty bad: https://coding.corp-mjbcode.com/test.php. Yes I understand that the multilines, I thought there was a solution. Either way, I am trying to fetch a md file and parse it into showdown, I know there is a way and I will figure it out and provide the answer, especially now that you showed me how to get it working.\nMy issue is there is no CSS that gets parsed. It does not show the example like in the project of showdown or the really nicely formatted html in the link you sent.\nWhat include do we need for the CSS? It's not in the readme.. Thank you. Using both of those looks slightly better than a previous CSS styling that I found for the PHP plugin so I will use your plugin with the Cebe/PHP plugin I currently have.\nI will however, work on a way so you can fetch a markdown file and use showdown to convert it so that way I am contributing something back. Would that be something you would be interested in so you can add a comment? I am going to use a basic AJAX get request to load it in there.. Sorry, I didn't mean that, I mean like an example like this. Then you can fetch actual files on the server.\nAnd might be nice to add to your readme.md for a method to fetch files and convert them via showdown.\nInclude jQuery CDN file <script\n  src=\"//code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n```\n\n    $(function(){\n        $.get(\"coding.md\", function(data, status){\n            var markdownText = data;</p>\n<pre><code>        var converter = new showdown.Converter({\n          'strikethrough': true\n        });\n\n        // converts the markdown text into html\n        var html = converter.makeHtml(markdownText);\n\n        // paste the HTML inside the appropriate div\n        document.getElementById('trg').innerHTML = html;\n    });\n});\n</code></pre>\n<p>\n```\nAnd you can see it live here: https://coding.corp-mjbcode.com/test.php. @obedm503 showdown does that too. I just provided a working example for you guys.\nI am trying to help you out on improving the readme file since it is lacking. Issues with example, no file support, and no CSS. No need to modify your code, just need to enhance readme file.. ",
    "Ehesp": "Thanks for the indepth explanation guys! Working well \ud83d\udc4d . ",
    "pleerock": "Only\n```md\nhellow world\nhow are you\n```\nmust produce:\nhtml\nhellow world<br/>\nhow are you. Its reproducable only when:\njs\nconverter.setFlavor('github');\nis used.. Solution is to do:\njs\nconverter.setFlavor('github');\nconverter.setOption('simpleLineBreaks', false);. Yes you are right, it does it this way in comment editor. However when it parses .md files (like README.md) it does it different.. ",
    "sulthan-ahmed": "I ran into a similar problem but thankfully this explanation cleared everything up.  Adding it to the README would be helpful . ",
    "ellatrix": "Thanks!. ",
    "superCleo": "Sorry, I forgot to mention that underscores in http links are interpreted correctly in un-minified version. I tried it in the demo page. So I guess minifying the js files somehow introduced this bug?. Thanks for the reply. Now I see where my confusion is.\nIn the demo page the first two link examples are parsed as raw texts and that's why even if I turned off literalMidWordUnderscores option the underscores are not re-interpreted. \nSorry about the time wasted.. ",
    "djm158": "Ah I see, thanks for the clarification. . ",
    "Nhoya": "Found it https://github.com/showdownjs/showdown/wiki/Markdown's-XSS-Vulnerability-(and-how-to-mitigate-it). ",
    "KirkMunro": "Wow, that was fast. Thanks @tivie!. That's what I was looking for. I think that would be a nice improvement for openLinksInNewWindow.. Thanks @tivie, that's helpful. :). Thank you. I'll give it a try next week (it's Thanksgiving/long weekend in the US, so I can't get the upgrade to the latest done until next week).. Actually scratch that, @ctsears did the upgrade already to get the fix for the issue he reported, and it's all working. Thanks!. @RoboMarth Thanks for logging this, I just ran into the same issue myself. :). Thanks for responding quickly @tivie. Since this is the first I've heard you mention showdown 2.0, do you have an approximate timeframe when you hope to get to that version?\nAlso, thank you for sharing that you're considering dropping literalMidWordAsterisks. I'm curious who you are referring to when you mention \"we can't agree\", since you mention you are the only active maintainer of this project.. Also @tivie, do you have a test document for emphasis? I started with something like the following while experimenting, comparing with other markdown tools, and referring to the CommonMark standard:\nFrom John Gruber's original Markdown syntax description:\n\nMarkdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML <em> tag; double *'s or _'s will be wrapped with an HTML <strong> tag.\n\nThe key thing to determine in that definition is what is meant by \"text\". The safest assumption we can make is that text is a sequence of characters that does not start or end with any kind of whitespace (space, Unicode space, newline, tab, etc.). This means that emphasis indicators only ever apply if they are adjacent to non-whitespace characters.\n|Test|Expected outcome|Reason|Currently working|\n|--|--|--|--|\n| |** **|Accoring to the definition of text, there is no text here|Not with literalMidWordAsterisks|\n|Hello |*Hello *|Emphasis characters are treated as literal next to whitespace|Not with literalMidWordAsterisks|\n| Hello|* Hello*|Emphasis characters are treated as literal next to whitespace|Yes|\n|`Note: whatever`|<em>`<strong>Note</strong>: whatever`</em>|Unambiguous use of emphasis with nested escape characters|Not with literalMidWordAsterisks|\n|Nested emphasis is valid|<em>Nested <em>emphasis</em> is valid</em>|Inner emphasis is allowed|No|\nI read your CONTRIBUTING doc, and may be able to contribute to some of the issues I find/report, but the doc mentions running all test cases without instructions describing how? I can fork, clone, etc., but then I'm missing the steps to build/test to get going quickly. If you added those, it would make it easier for me to contribute.. Just to add to this, I really don't want newlines inserted after <div class=\"className\"> and before </div>, because that prevents certain css styling from rendering properly. I put those line breaks in as I was tinkering with this, but ultimately they shouldn't be there.. Also, another related question when talking about listeners: can a listener be written to take each formatted output (HTML output) from one of the builtin markdown converters and modify what is generated before it is added to the HTML output document?\nFor example, if I wanted to add extra handling over how a code block is formatted, could I write a listener that would receive only the HTML code block (<pre><code>...</code></pre>) text, where what I return from that listener would be what is actually output in the document? Or is that what lang/output extensions are for (but those are going away in showdown 2.0)?. This is very helpful, thank you @tivie! I'll review this, experiment with multiple extensions, and have a look at the example you highlighted. \nP.S. I'm really looking forward to version 2, so I don't mind that you were focusing your time on that at all! :) Do you know if you'll have the extension logic you describe above, with partial text caught/rendered event handling in listeners, in your first alpha? Or is that planned for future use?\n. @tivie This is exactly what I was hoping would come out of this post. Thank you for taking the time to respond with all of these details! I'm really looking forward to trying this out!. @tivie I think it's pretty important, yes. I also have something that I've been thinking may help: in our app we added an extension for a different emphasis syntax that we needed, and I'm really proud of how well that works, with mid word emphasis or not. It uses a combination of a greedy and a lazy search to figure out what the user really wanted, and works quite wonderfully, with every test case I've thrown at it. Made me wonder if the same logic would be helpful to showdown when it needs to deal with bold or italic emphasis enclosures.. @tivie What needs to be done to make 1.8.7 available on cdnjs? Also I just looked at the change log and it doesn't show any changes for 1.8.6 or 1.8.7.. Thanks, I posted an issue in the CDNJS repo asking why it seems to be taking so long.\nFor the change log, I was referring to this document:\nhttps://github.com/showdownjs/showdown/blob/master/CHANGELOG.md\nIt shows the last update as 1.8.5. Is that because master is now the 2.x branch?. Great, thanks for this @tivie! I'll close this issue since I have this issue opened in the CDNJS repo.. ",
    "stupidpupil": "Is it worth noting that this has a relatively large impact on the size of the library? The minimised version grows from around 40kB to 95kB (or 11kB to 32kB after gzipping).\nIt's not hard to strip this out if you're not interested in emoji-support and want to save the 20-40kB:\njs\n.replace(/showdown.helper.emojis = \\{[\\s\\S]+?\\};/, 'showdown.helper.emojis = {};');\nworks for me in a grunt-task, for example.\nI bring it up only because it might surprise some people using Showdown client-side who find their javascript bundles growing by perhaps 10% or so, and one of Showdown's attractions has been that it's fairly slim.. Looks as though much of the increase (particularly post-gzip?) might be the special :showdown: 'emoji'. It might be possible to slim that down quite a bit by optimising the PNG.. You might also want to be aware that roughly 50-66% (depending on compression) of the minimised file is emoji. See this comment for more details, and how to strip them out if you're not going to use that feature.. ",
    "akashonerational": "Mistake!. ",
    "udondan": "Thanks, it's available now. I'm using the github cdn, just opened the issue since I noticed.. ",
    "ckoppelman": "I tried it out.  Works perfectly.  I understand why you'd want to limit the scope of the project.\nFor those who find this after me, this regex works a bit better by including trailing +'s and ensuring there's a non-whitespace character after the first ++ and before the last:\njs\n/(?:\\+){2}(?=\\S)([\\s\\S]*?\\S)(?:\\+){2}(?!\\+)/g. ",
    "LeaVerou": "But there's no way to provide a language tag for an indented code block, right?. Sorry, I guess I filed this too hastily. Looks like it's something else in my codebase stripping them.. ",
    "James-Burnham": "Thanks for the quick fix! Confirmed it is working now.. Any outlook on this? Would be very excited to see a fix.. ",
    "eavestn": "@obedm503 none if no styles are applied. It looked from the tutorial page that markdown stylings would be applied. @tivie the default browser styles are applied, of course. . @tivie yeah.. ",
    "ctsears": "Working now! Thanks!. That fixed it. Thanks!. ",
    "ivanhjc": "Oh don't know why I missed that. I saw this so I just googled Showdown's API documentation and couldn't find it anywhere :rofl: \n\n. Just donated. Thanks for the good work \ud83d\udc4d . ",
    "santhosh-tekuri": "the same happens with inline code also:\n`markdown`\nconverted to:\n<code>showdown</code>. Thanks. after changing to listener, it works as expected\nActually i followed the documentation in wiki. it talks about only extensions of type lang and output.\nupdating the wiki, will help new users. ",
    "savsharma2": "can u help ?\nhow can i accomplish this .. tivie thankyou for the quick reply but i guess this won't resolve my issue.\nlet me briefly explain my problem what we are doing is that we are using showdownjs to convert markup to html and save markup to database and then generate pdf from the same markup.\nnow what is the the requirement is that we need new set of cheat sheet code to align the text to left right and center. i.e BOLD  somethings like ---align left---\nnow do i have to write a plugin for the same ?\n. tivie thankyou for your help \ud83d\udc4d \nI have incorporated this solution in my project.. ",
    "garyyan": "@obedm503 \nwell,it is what I want,I will do a test at first,thank you very much. @obedm503\nAfter  the test,the  https://github.com/obedm503/showdown-katex  work well to me\nAnd I find it use the ~for katex  inline, but not the $,right?\nthank you again. ",
    "tbroadley": "Whoops, looks like changing the base branch isn't going to work. I'll open another PR.. No problem \ud83d\ude04 . ",
    "ComputerCarl": "I've got something else going on.. it didn't happen in the following component;\n````js\nimport React from 'react';\nimport showdown from 'showdown';\nexport default () => {\n    var converter = new showdown.Converter({\n    headerLevelStart: 3,\n    openLinksInNewWindow: true,\n    simplifiedAutoLink: false,\n    emoji: true\n    });\nvar  markdownToHtml = (markdown) => {\nconsole.log(converter.getOptions());\nreturn {__html: converter.makeHtml(markdown)}\n};\nvar description = \"I like the site anywhere.com. It makes me happy.\";\nreturn (\n    <div dangerouslySetInnerHTML={markdownToHtml(description)} />\n)\n\n}\n````. Links were caused by Disqus plugin affiliate links and VgLnk. \n  . No problemo.. Showdown behaving as expected!\nHowever, i don't know if it already performs the function of markdown to plain text or I can put a feature request?\nI was a little surprised there was a makeHtml no nothing like makeText so had to install markless package also.. Yes.. when the markdown text is to be displayed in a snippet, or for some other such purpose, the text must be displayed without formatting.. ",
    "iShawnWang": "Awesome, really useful ~\nThanks @tivie . ",
    "Simon-Hohberg": "Yes, you are right, it happens only with literalmidwordsunderscore activated.. ",
    "cori": "I was working on solving a different problem and stumbled across a possible solution for this one:\n```\nvar noMorePsExt = {\n  type: 'output',\n  filter: function(text, converter) {\n    var re = /<\\/?p[^>]*>/ig;\n    text = text.replace(re, '');\n    return text;\n  }\n};\nconst converter = new showdown.Converter({extensions: [noMorePsExt]});\n```\nthen the rest of your code.. ",
    "aureq": "@jasper2virtual I think that's probably not a great idea. IE7 was shipped with Windows XP more than 11 years ago. Since then, Microsoft doesn't support that version nor does it support Windows XP. This means that IE7 is likely to security holes on top of all the features that modern browsers have.\n. @jasper2virtual Oh I feel your pain! Even in a closed network using IE7/XP is insecure and you should push (and your infosec team too) to have up to date software. Alternatively, running a more recent version of Chrome/Firefox could be an option, but even so the OS would remain insecure.\nI highly doubt it will be easy to port showdownjs to IE7. The function Array.isArray() has been available since IE9 (ref) which was shipped with Win7. The technology gap seems quite important.... ",
    "jasper2virtual": "@aureq Yes, you are right, I agree with you. But some of my intranet user is using IE7. ^_^~~~\nI am maintaining some intranet pages now, which they are in closed private network.. ",
    "csvan": "@jasper2virtual you can provide a polyfill for Array.isArray().. ",
    "priyaarora1989": "I am also facing same issue on IE8. Is there any update on this request. I am blocked because of this and might have to look out for other parsers.\nIs there a workaround for the time being.. ",
    "DearVikki": "1.8.6...Oh, I should be better to update it to the latest version and try again!. Yes it works totally fine!!..Sorry its all my fault.. I accidentally passed in an object rather than a string.. : (. ",
    "jonaskello": "Thanks, that is good to know. I am not using that feature. Replacing in the source seems like kind of a hack. Would be nice if there was some more offical way to do it.. ",
    "tterb": "If you want to be able to use checklists, you have to set the tasklists option to true.\nFor more info on this and other options I would suggest you check out the wiki page.. ",
    "Foveluy": "@JonSn0w oh, great.\nThanks for reply.\nI will check them out.. ",
    "juliandavidmr": "using replace: '<${key} class=\"${classMap[key]}\" $1> you get an incorrect output, because $1 refers to the first group of the regular expression, which turns out to be the name of the html tag.\nThis is resolved by changing from $1 to $2, that is: <${key} class=\"${classMap[key]}\" $2>. ",
    "benc-uk": "I've solved this by manually parsing with jsyaml and calling getMetadata(true) but would be good if showdown could return correctly parsed data back. ",
    "abuyoyo": ":)\nThanks!\nI shoulda figured this was a common issue... ",
    "Slapbox": "I don't think it's built into this package (could be totally mistaken.)\nFor this I'm using https://github.com/domchristie/turndown. ",
    "Savan-Karathiya": "@Slapbox Thanks for the help.. ",
    "DesignResponds": "Gotta love the simple issues. Thank you for your time and the demo link!. ",
    "DanielRuf": "Hm, I see you did the changes yourself. Is there a reason why the PR is not preferred or merged instead? Just wondering.. Allow edits from maintainers. is always enabled so you can always push commits on my branch ;-). git stash and friends to the rescue =)\nThanks for taking care of it \ud83d\udc4d . Faster than #530 . I close this PR as the other caching strategy is faster (upgrading npm adds some overhead).. ",
    "ozzywalsh": "I have fixed the typo. Could the maintainers merge my changes in. I couldn't make a pull request against the wiki, nor fork it. So I cloned it and pushed to my own remote.\nhttps://github.com/ozzywalsh/showdown-wiki/. ",
    "hieuhuynhtps": "It worked on my app. Thank you for your supporting @tivie . ",
    "GenaBitu": "Thank you. I have already backported the fix to the latest release for my purposes, but it'd be nice for showdown to work in a Web worker in the future.. Hi, I will look into it - maybe it's been fixed in the meantime, we'll see.... Nope, the issue is still there. (line 587 now). I'll make a minimal example.. Hey, I've created a gist. The showdown file is the current master file dist/showdown.js. Bear in mind, that you can't run this code from a file, Web Workers only work when served from a server.... From what I understand about modern JS (= not much...), line 587 is only supposed to run if you are in a Node environment, not in the browser. But the way this check is implemented, this check thinks it is in Node when in fact it's a Web Worker.. Yeah, I've tried commenting out lines 587 and 588, but then 590 breaks because Web workers don't have this.window, which I don't even know why this package would use :). Ah, I didn't know about that feature, thanks. That sounds really cool. A nit-picky question: Why did you decide to include this feature in this package as opposed to making it into its own one? I imagine that the reverse converting is a lot of code - making the package size needlessly bigger for people who don't use it (I would say the majority, but you know, I have a sample size of 1...).\nThanks!. Oh yeah, I take it you're gonna take whatever output you get, transform it into an AST and then into whatever output is desired, right? That's definitely a more systematic and elegant solution then regex... \nOne thing I would like to say though - for me personally (YMMV), the reason I chose showdown instead of e.g. marked was the simplicity with which I could extend the syntax, for example creating my own \"commands\" such as !command[arg1=val1, arg2=val2] even possibly with the command spanning multiple lines. (I did this using the filter function...)\nSo if you manage to maintain backwards compatibility for all the existing extensions while rewriting the parser for better performance, that would be awesome. Thanks.. Oh yeah, 1.8.7 solves my issue, thanks :). ",
    "al-k21": "HTML file has code tags around the code (e.g):\n<h2 id=\"bower\">Bower</h2>\n<pre><code>bower install showdown\n</code></pre>\nCould someone help resolve this? . > NOTE: ghCodeBlocks are enabled by default since version 0.3.1\nAccording to Showdown-options#ghcodeblocks, I am on \"^1.8.6\".\nEven after I set the option through the constructor let converter = new showdown.Converter({'ghCodeBlocks': true}) I am still not seeing code blocks.\nBy printing the options I get:\n```js\n{ omitExtraWLInCodeBlocks: false,\n  noHeaderId: false,\n  prefixHeaderId: false,\n  rawPrefixHeaderId: false,\n  ghCompatibleHeaderId: false,\n  rawHeaderId: false,\n  headerLevelStart: false,\n  parseImgDimensions: false,\n  simplifiedAutoLink: false,\n  excludeTrailingPunctuationFromURLs: false,\n  literalMidWordUnderscores: false,\n  literalMidWordAsterisks: false,\n  strikethrough: false,\n  tables: false,\n  tablesHeaderId: false,\nghCodeBlocks: true,\ntasklists: false,\n  smoothLivePreview: false,\n  smartIndentationFix: false,\n  disableForced4SpacesIndentedSublists: false,\n  simpleLineBreaks: false,\n  requireSpaceBeforeHeadingText: false,\n  ghMentions: false,\n  ghMentionsLink: 'https://github.com/{u}',\n  encodeEmails: true,\n  openLinksInNewWindow: false,\n  backslashEscapesHTMLTags: false,\n  emoji: false,\n  underline: false,\n  completeHTMLDocument: false,\n  metadata: false,\n  splitAdjacentBlockquotes: false }\n```\n. \n\nThe only difference is in styling.\n\nYes, converting to html works fine. I was thinking it would include some styling (as it is in the demo).\nhtml\n\n```html\n\nShowdown is a Javascript Markdown to HTML converter, based on the original works by John Gruber. It can be used client side (in the browser) or server side (with Node or io).\nInstallation\nDownload tarball\nYou can download the latest release tarball directly from releases\nBower\nbower install showdown\n\nnpm (server-side)\nnpm install showdown\n\nCDN\nYou can also use one of several CDNs available:\n\nrawgit CDN\nhttps://cdn.rawgit.com/showdownjs/showdown/<version tag>/dist/showdown.min.js\n\ncdnjs\nhttps://cdnjs.cloudflare.com/ajax/libs/showdown/<version tag>/showdown.min.js\n\n\n\nSyntax\nTable of contents\n\nIntroduction\nParagraphs\nHeadings\nAtx Style\nSetext style\nHeader IDs\nBlockquotes\nBold and Italic\nStrikethrough\nEmojis\nCode formatting\nInline formats\nMultiple lines\nLists\nUnordered lists\nOrdered lists\nTaskLists (GFM Style)\nList syntax\nNested blocks\nNested lists\nNested code blocks\nLinks\nSimple\nInline\nReference Style\nImages\nInline\nReference Style\nImage dimensions\nBase64 encoded images\nTables\nMentions\nHandling HTML in markdown documents\nEscaping entities\nEscaping markdown entities\nEscaping html tags\nKnown differences and Gotchas\n\nIntroduction\nShowdown was created by John Fraser as a direct port of the original parser written by markdown's creator, John Gruber. Although Showdown has evolved since its inception, in \"vanilla mode\", it tries to follow the [original markdown spec][md-spec] (henceforth refereed as vanilla) as much as possible. There are, however, a few important differences, mainly due to inconsistencies in the original spec, which we addressed following the author's advice as stated in the [markdown's \"official\" newsletter][md-newsletter].\nShowdown also support \"extra\" syntax not defined in the original spec as opt-in features. This means new syntax elements are not enabled by default and require users to enable them through options.\nThis document provides a quick description the syntax supported and the differences in output from the original markdown.pl implementation.\nParagraphs\nParagraphs in Showdown are just one or more lines of consecutive text followed by one or more blank lines.\nOn July 2, an alien mothership entered Earth's orbit and deployed several dozen\nsaucer-shaped \"destroyer\" spacecraft, each 15 miles (24 km) wide.\n\nOn July 3, the Black Knights, a squadron of Marine Corps F/A-18 Hornets,\nparticipated in an assault on a destroyer near the city of Los Angeles.\n\nThe implication of the \u201cone or more consecutive lines of text\u201d is that Showdown supports\n\u201chard-wrapped\u201d text paragraphs. This means the following examples produce the same output:\nA very long line of text\n\nA very\nlong line\nof text\n\nIf you DO want to add soft line breaks (which translate to <br> in HTML) to a paragraph,\nyou can do so by adding 3 space characters to the end of the line ().\nYou can also force every line break in paragraphs to translate to <br> (as Github does) by\nenabling the option simpleLineBreaks.\nHeadings\nAtx Style\nYou can create a heading by adding one or more # symbols before your heading text. The number of # you use will determine the size of the heading. This is similar to atx style.\n# The largest heading (an <h1> tag)\n## The second largest heading (an <h2> tag)\n\u2026\n###### The 6th largest heading (an <h6> tag)\n\nThe space between # and the heading text is not required but you can make that space mandatory by enabling the option requireSpaceBeforeHeadingText.\nYou can wrap the headings in #. Both leading and trailing # will be removed.\n## My Heading ##\n\nIf, for some reason, you need to keep a leading or trailing #, you can either add a space or escape it:\n# # My header # #\n\n#\\# My Header \\# #\n\nSetext style\nYou can also use setext style headings, although only two levels are available.\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\nNote:\nIn live preview editors, when a paragraph is followed by a list it can cause an awkward effect.\n![awkward effect][]\nYou can prevent this by enabling the option smoothPreview.\nHeader IDs\nShowdown generates bookmarks anchors in titles automatically, by adding an id property to an heading.\n# My cool header with ID\n\n<h1 id=\"mycoolheaderwithid\">My cool header with ID</h1>\n\nThis behavior can be modified with options:\n\nnoHeaderId disables automatic id generation;\nghCompatibleHeaderId generates header ids compatible with github style (spaces are replaced with dashes and a bunch of non alphanumeric chars are removed)\nprefixHeaderId adds a prefix to the generated header ids (either automatic or custom).\nheaderLevelStart sets the header starting level. For instance, setting this to 3 means that # header will be converted to <h3>.\n\nRead the [README.md][readme] for more info\nBlockquotes\nYou can indicate blockquotes with a >.\nIn the words of Abraham Lincoln:\n\n> Pardon my french\n\nBlockquotes can have multiple paragraphs and can have other block elements inside.\n> A paragraph of text\n>\n> Another paragraph\n>\n> - A list\n> - with items\n\nBold and Italic\nYou can make text bold or italic.\n*This text will be italic*\n**This text will be bold**\n\nBoth bold and italic can use either a * or an _ around the text for styling. This allows you to combine both bold and italic if needed.\n**Everyone _must_ attend the meeting at 5 o'clock today.**\n\nStrikethrough\nWith the option strikethrough enabled, Showdown supports strikethrough elements.\nThe syntax is the same as GFM, that is, by adding two tilde (~~) characters around\na word or groups of words.\na ~~strikethrough~~ element\n\na ~~strikethrough~~ element\nEmojis\nSince version 1.8.0, showdown supports github's emojis. A complete list of available emojis can be foun [here][emoji list].\nthis is a :smile: smile emoji\n\nthis is a :smile: smile emoji\nCode formatting\nInline formats\nUse single backticks (`) to format text in a special monospace format. Everything within the backticks appear as-is, with no other special formatting.\nHere's an idea: why don't we take `SuperiorProject` and turn it into `**Reasonable**Project`.\n\n<p>Here's an idea: why don't we take <code>SuperiorProject</code> and turn it into <code>**Reasonable**Project</code>.</p>\n\n\n. ",
    "bunyevacz": "You can use the :checked pseudo-class. \nMDN:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/:checked\nNo need to add additional css class to make a distinction between checked and unchecked checkbox.. ",
    "golarajahangir": "@bunyevacz  you cannot style the task text with :checked, this will just select input and not its text.. ",
    "Netsaver": "I would add also ID & classes for inline elements, with a syntax similar to link's one:\n[text to annotate]{#ref1 .annotated 'mytip'}\nIf implemented at least for links I would add empty reference:\n[text to annotate](){#ref1 .annotated 'mytip'}, but I should capture it via js to convert it to span before rendering... it would be better having it inside extension.\nregards,\nNetsaver\n. ",
    "bw1984": "any chance of pointing me in the right direction in terms of regex? ive read the documentation for creating an extension and have several working examples but im struggling to fetch the params from within the curly braces and \"inject\" them backwards into the blockquote tag. ",
    "LoganDark": "It's extremely trivial to do post-processing on the output of Showdown, especially when it outputs HTML that you can feed directly to SmartyPants.. I found a solution-ish, using cheerio to manually convert the code blocks. At least it's much better than trying to add new syntax.. ",
    "svarlamov": "Not sure if you resolved this on your own yet, but I've found this site quite useful in the past: http://janelia-flyem.github.io/licenses.html. ",
    "petermierau": "Thank you to both of this. @tivie  I understand perfectly. @svarlamov That's exactly what I was looking for, to understand licenses!. ",
    "peci1": "I agree that comparing case-insensitive by default is a good idea. However, in my use-case, I need the case-sensitive IDs, thus I'm asking for having an option to turn off the conversion to lowercase.. ",
    "LeJared": "Well, that's not very convenient since it requires to change all our MD files. The second option even applies visible changes to the content, which is not allowed.\nIs there any option planed for future releases to enable escaping of those special chars?. ",
    "davidsandoz": "@tivie You're right. But I'm using showdown with GitLab.. Awesome, thanks! Do you have an idea when will the next release happen?. Done \ud83d\ude09 . ",
    "jacobcxdev": "I could load Showdown, but I don't seem to be able to load extensions like this, which have a 'require()' variable in them. I just get an error that 'require' isn't defined or something.. ",
    "ppeeou": "The line break feature already exists.\nI will open it again after the test.. ",
    "mattbudish": "Thanks for merging the PR.\nOn Sun, Sep 9, 2018 at 2:49 PM Estev\u00e3o Soares dos Santos \nnotifications@github.com wrote:\n\nMerged #580 https://github.com/showdownjs/showdown/pull/580 into master.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/showdownjs/showdown/pull/580#event-1834712503, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHk0MSOdfws7Gvr8K3f76_U5cNLpQA_aks5uZXDJgaJpZM4Wfm-1\n.\n. \n",
    "maciej-kolodziejczak": "@tivie After cloning a master brach I get a Module not found: Error: Can't resolve 'tls' in [...]/node_modules/tunnel-agent error. Any clues?. ",
    "andosteinmetz": "@maciej-kolodziejczak cd into the showdown directory and npm install. this cleared up those errors for me.. ",
    "yuanjilee": "new version the issue is still exist\n\n. @tivie \n\nWhich version?\n\nwith the http://demo.showdownjs.com/  test, is it the newest version?\ntest data:  ![[image] image](https://pbs.twimg.com/profile_images/704817777404743681/RNNOWR3X.jpg)\n. ",
    "Songkeys": "Hope this could be a good reference: https://github.com/Jxck/html2json. ",
    "cbarraford": "@tivie i was thinking we add a new config option called strikethroughTag which would default to del, to ensure complete backward compatibility. But someone could configure s (or something custom if they wanted). Thoughts?. @tivie any ETA on when v2 is being released?. ",
    "bkuhl": "Yep, thanks!. ",
    "asbjornu": "Great! So to create an output extension, I just do something like this?\n```javascript\nvar taskListEnablerExtension = function () {\n  return [{\n    type: 'output',\n    regex: /disabled=\"disabled\"/g,\n    replace: ''\n  }];\n}\nvar converter = new showdown.Converter({ extensions: ['taskListEnablerExtension'] });\n```. @tivie, no, I've not gotten this to work yet. I've inspected the resulting HTML and it looks like this:\nhtml\n<li class=\"task-list-item\" style=\"list-style-type: none;\"><input type=\"checkbox\" disabled=\"\" style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\" checked=\"\"> Checked</li>\nThe following extension does not seem to match anything:\n```js\nvar taskListEnablerExtension = function() {\n    return [{\n        type: 'output',\n        regex: /<input type=\"checkbox\" disabled=\"\"/,\n        replace: '<input type=\"checkbox\"'\n    }];\n};\nvar converter = new showdown.Converter({\n    tasklists: true,\n    smoothLivePreview: true,\n    extensions: [taskListEnablerExtension]\n});\n```\nIt's hard to debug this since the extension is not invoked with any event argument or anything else I can inspect. Ideas?. Yep, that did the trick. Thanks!. ",
    "oscarmorrison": "@tivie sorry for lack of response, happy to keep closed.  Essentially using the minified build, if you concat that with another script, the emoji's got broken. Leaving this here incase anyone else has same problem, this was my solution in the end, to concat, then minify the build myself:\n// where script.js is your custom script\nuglifyjs -c -m -o md-page.js showdown.js script.js -b beautify=false,ascii_only=true. I did thankyou @tivie \nhttps://github.com/oscarmorrison/md-page/blob/master/script.js#L33. ",
    "GabSocial": "@tivie I see. I think the design is good. I am sorry I needed to check latest version rather than master. . ",
    "monckey100": "Working as intended. Problem was I was sending direct HTML into the converter without first de-encoding the html.. ",
    "faressoft": "Works fine :) Thanks. ",
    "BusyHe": "i want to create toc menu. #422 showdown-toc requires jQuery, it cant`t use. what should I do\u3002thank\n. ",
    "JHaller27": "Issue is actually with ng-showdown. Will post there.. ",
    "Marclev78": "Never mind, issue was on my side. ",
    "tlhunter": "FYI I'm using this PR on my personal site. Here's an example of a page rendered using this code:\nhttps://thomashunter.name/posts/2016-02-03-microsoft-sculpt-ergonomic-keyboard-review\nAnd here's a screenshot (grey text below image):\n. I will pay $10 via PayPal to get this merged and released via npm.\n/cc @tivie . Appears to be due to unpkg being broken.. ",
    "DonaldTsang": "@tivie these are all different standards of the type \"markdown\", it would be great to see all of these derivatives to be implemented. ",
    "frumbert": "I for one would love to see the use of Markdown Extra being possible, since the =WxH markup for images leaves a lot to be desired. E.g.\n![Elva dressed as a fairy](elva-fairy-800w.jpg){srcset=\"elva-fairy-320w.jpg 320w, elva-fairy-480w.jpg 480w, elva-fairy-800w.jpg 800w\" .my-class .img #myId action=\"make-clickable\"}\n\nwould become\n<img src=\"elva-fairy-800w.jpg\" alt=\"Elva dressed as a fairy\" srcset=\"elva-fairy-320w.jpg 320w, elva-fairy-480w.jpg 480w, elva-fairy-800w.jpg 800w\" class=\"my-class img\" id=\"myId\" data-action=\"make-clickable\">\n\nand\n## My Header {.primary tabindex=\"2\"}\n\nwould become\n<h2 class=\"primary\" tabindex=\"2\">My Header</h2>\n\ne.g. attributes are written in {} brackets after the MD tag and known attribute names are written directly whilst unknown attribute names are prefixed with `data-.\nMDE is also supported by PanDoc which is my current solution as a server-side renderer (though it also wraps images in a figure element - https://pandoc.org/try/?text=&from=markdown&to=html5). ",
    "ggboy-shakalaka": "\u975e\u5e38\u62b1\u6b49 @tivie \u3002\u6211\u73b0\u5728\u8fd8\u4e0d\u592a\u4f1a\u7528github\uff0c\u8fd9\u4e2a testcase \u8fd8\u9700\u8981\u4f60\u81ea\u5df1\u641e\uff0c\u6211\u6015\u6211\u5f04\u9519\u4e86\u3002\n\u611f\u8c22\u4f60\u7684 \u201cshowdown\u201d\uff0c\u7ed9\u6211\u5e26\u6765\u548c\u5f88\u591a\u65b9\u4fbf\u3002\nCan't speak English, the following is google translation\nI am very sorry about @tivie. I don't really use github right now. This testcase still needs to be done by myself. I am afraid I am mistaken.\nThank you for your \"showdown\", which brings me a lot of convenience.. This testcase still needs to be done by myself(maybe yourself).\nmy english is bad.\nmeaning is you do that testcase,i don't do that.\nbad translation. ",
    "edgewood1": "On closer inspection, it does includes the expected output in the console.\nthe markdown:__Method 2: Component Functions w/o Arguments__\nexpected/actual output: <p><strong>Method 2: Component Functions w/o Arguments</strong></p> \nHowever, upon rendering in chrome and firefox, this line is not in bold even though a similar line set for italics renders fine.  \nAttached is the react code and resulting screen shot.\nshowdown.txt\n\n. \nsrc_components_react_post.txt\n. Yes, I gave that information to you in a previous post.  I'll try to rephrase it: \nOn closer inspection, the expected output IS appearing in the console. However, this output does not not appear as bold in the chrome or firefox browsers even though my italics markup does render as italics in the browser. \nthe markdown(input): __Method 2: Component Functions w/o Arguments__\nexpected output:  <p><strong>Method 2: Component Functions w/o Arguments</strong></p>\nactual output: <p><strong>Method 2: Component Functions w/o Arguments</strong></p>\nThanks.. ",
    "judell": "\nI will be removing this feature\n\nSounds like a good idea. Data point: I had to comment it out because of mis-encoding that I couldn't figure out.. ",
    "Dam-Buty": "Hi ! \nI second this motion ;) i'm using Showdown as part of a message templating chain that sometimes sends SMS ... Our SMS bill has doubled because this unicode character forces Unicode encoding instead of the standard GSM one :/ . ",
    "javisperez": "Hello, any help?. Sure, the idea is basically this:\nInput\n- !! I am here\n- !! Same here\nOutput\n<ul class=\"important-list\">\n    <li>I am here</li>\n    <li>Same here</li>\n</ul>. ",
    "richyliu": "It works with converter.setFlavor('github'). Thank you. ",
    "lqmanh": "I think it would be great if it fully support YAML though. That metadata is just a subset of YAML, right?. @jcc10 Currently I use gray-matter. It's totally enough for my needs but I'm saying it would be great if this is implemented natively in showdown. Then I don't have to use a different tool to parse front matter just because the built-in one is worse.. ",
    "jcc10": "If you do Converter.getMetadata(true) it should return the raw metadata block, you could then pass that to a YAML parser.. This commit should work (I'm trying to do the same thing myself.):\nhttps://gitlab.com/random-reviews/random-reviews.gitlab.io/tree/bb1c92d1e40d765112e69ccd55917b4f4a209e84. So in-line text does not save the line-breaks properly. Good to know.. ",
    "RyanHow": "Wow, did you really get output like that?. Maybe my browser was changing the output, I copied it out of the browser rendered output instead of the string output before rendering. The output you got it isn't even valid, the opening and closing tags aren't nested correctly for the p and span. Surely that is a bug? I just figured that it was trying to be smart in handling block elements inside inline elements.\n. ",
    "sunzhaoyuan": "I found out that setOption() can be only used on the server side. \nHowever I used browserify to solve this problem. (Sorry, I don't know if I am allowed to put a link here, if not please tell me and I'll remove it) \nBrowserify allows you to \"require\" an object just like node.js. So on the top of my file, I simply putted \njavascript\n    var showdown = require('showdown');\nand then use browserify to compile the js file. It solved my issue. . ok since I am not a pro web developer, I will reopen this issue and leave the discussions/decisions to pros. But if anyone who encounters the same problem, please consider this solution as it solved mine pretty well. . ",
    "Johns3n": "Don't know if i would call them relative in regards to them having a http://\nWhat I mean is links without top level domain name. Such as my examples above.\nhttp://localhost/something/\nhttp://localhost?path=to-somewhere. @tivie - Any news on this? I need this functionality as i'm implementing it in a Intranet browser app, which needs to support the no TLD autolinks.. ",
    "PatrickL789": "When we teat the code on a hosted server, and try to create a tournament, we are encountering a message that says \u201cone of your alts has already entered this tournament\u201d when other people try to join the created tournament even though no participants have entered the tournament yet.. Oh. Oops. You\u2019re right. Wrong repo. Sorry.. ",
    "luisapace": "Hi, any news on this? . Perfect, thanks!. ",
    "evanplaice": "Note: Changed extension from .mjs to .esm.js. Even in Node .mjs is no longer required to use ECMAScript modules.\nBTW. Feedback is welcome on this. I know it's not a part of the existing roadmap. I will own whatever additional work is necessary to make this acceptable.. ",
    "vmjames": "I got it working without showdown-emoji but adding emoji: true.\nWhoops!. ",
    "mhamilt": "The CLI tool can be installed via npm\nnpm install showdown\nThe functionality you are looking for isn't available out of the box. However, I think it might be easier to actually just script this and then you can start opening up how you wish to interact with showdown.\nFor example, say you create a script called makehtml\n```sh\n! /bin/bash\nmakehtml: create html folder of converted md files\nfiles=$(ls $1)\nmkdir $1\"/html\"\nfor file in $files; do\n  showdown makehtml -i $file -o $1\"/html/\"$file\".html\"\ndone\n``\nif you had a directory namedmd` with all your md files, then you could call the script like this\nsh\n./makehtml /path/to/folder/md\nYou can go nuts with customising this as well.. ",
    "Hughen": "OK, I understand.\nthx.. ",
    "Guseyn": "I don't have it now, I fixed it enabling tables in MD, didn't see this moment at first, I thought that this lib does not support tables. "
}