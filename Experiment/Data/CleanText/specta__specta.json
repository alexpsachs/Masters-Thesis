{
    "petejkim": "d4c0b6a2f1f5c98c496b6a5fec8016cd95b66976 closes this\n. working on it...\n. yeah that's what i meant, but i guess it's not very important... running it standalone also has other problems like needing its own app delgate etc..\n. implemented in 0.1.9\n. They should apply to nested specs too. Could you check again?\n. thanks!\n. Oops I thought I've already merged this\n. thanks!\n. did you have it blocks when you were declaring shared examples?\nsharedExamplesFor(@\"a shared behavior\", ^(NSDictionary *data) {\n  it(@\"should do some stuff\", ^{\n    // ...\n  });\n});\n. @drouchy can you show me your spec code?\n. @drouchy I see, that is because project.services, and delegate are evaluated immediately, not when the it block is evaluated. I am pushing a fix now.\n. @drouchy, Try Specta v0.1.6 and make a slight modification to your spec like so:\n``` objective-c\ndescribe(@\"outlineView:isGroupItem: & outlineView:shouldSelectItem\", ^{\n  __block Project project ;\n  __block ApiProjectOulineViewDelegate delegate ;\nbeforeEach(^{\n    project = [[Project alloc] init] ;\n    delegate = [[ ApiProjectOulineViewDelegate alloc] init] ;\n  }) ;\ndescribe(@\"the services\", ^{\n    itShouldBehaveLike(@\"a group item\", ^{\n      return @{  @\"item\": project.services,\n                 @\"delegate\": delegate,\n                 @\"isGroupItem\": [NSNumber numberWithBool:YES]  } ; \n    }) ;\n  }) ;\n}) ;\n``\n. @drouchy The second spec without the use of block should still be executing. What's probably happening is thatdelegateandisGroupItemare nil since they are evaluated immediately, so it essentially ends up doingexpect(nil).to.equal(nil)..., which passes. perhaps add some assertion to check nullity?\n. I am unable to reproduce this, you have to put breakpoints withinitblocks insharedExamplesFor. Could you add someNSLogs to theitblocks and see if it can print text?\n. @drouchy If possible, could you send me the spec and sharedexample.m files (private gist)?\n. @drouchy ocunit does that. I will see if I can do anything about it.\n. agreed. will look into this and #14 asap\n. implemented in v0.1.7\n. thanks! also made it such that you don't needit_`, specta will inspect block's signature.\nbeforeEach/all/after etc also accept async blocks.\n. thanks!\n. I will take a look at the commits as soon as I get some free time, thanks!\n. merged\n. hmm this is odd... are you using ARC?\n. yep it is. let me investigate this \n. what is your deployment target? what's the version of the base sdk? @thalmicMark  @ianmurrays \n. could you check that you are using clang compiler? (Apple LLVM compiler)\n. Does it say LLVM GCC 4.2 or Apple LLVM compiler 4.2 (Clang)?\n. \nCould you make sure that you are using Apple LLVM compiler and try again?\n@ianmurrays @thalmicMark\n. @thalmicMark is it possible to share your repo? I am unable to reproduce :(\n. @vtsatskin It's really difficult to debug this because I am unable to reproduce this issue. Could you check that you are using clang (apple llvm compiler) and provide a failing test case if possible?\n. @thalmicMark, it's super odd, 'cause all the test cases pass and work fine on xcode 5-dp5. if you could provide a failing test case, it would be tremendously helpful.\n. @thalmicMark or if you could extract the part that is crashing as a separate project without the rest of the stuff, that will be helpful too\n. @thalmicMark hmm the tests run fine for me. \n\n. @thalmicMark, i checked your repo. To make your tests run, change the \"wrapper extension\" under build settings from \"xctest\" to \"octest\".\nPlease do xcode-select -print-path and make sure that the correct XCode version you are trying to use is selected, before compiling the static library. If it isn't, please switch to the correct XCode path:\nsudo xcode-select --switch /Applications/Xcode5-DP5.app\nand then recompile the static library, it should then run without crashing.\nSee https://github.com/thalmicMark/SpectaAsyncTest/pull/1\n. @ianmurrays @vtsatskin are you still experiencing problems?\n. @ianmurrays There shouldn't be any problem using it with Cocoapods though - i use it with Cocoapod for all of my projects. This problem seems to occur if your project and specta were compiled using different compiler versions.\n. @thalmicMark can you confirm that the problem you were experiencing is resolved?\n. Is this still an issue with v0.2?\n. merged/fixed, thanks!\n. I couldn't reproduce this, could you provide a failing spec?\n. merged, thanks!\n. merged a6518614658e3b3648a5d0dd0402e615b2170d02\n. could you give an example of when this is needed? \n. tests should always be wrapped within \"it\" blocks. is this for assertions made outside \"it\" blocks?\n. thanks!\n. thanks!\n. @wonga00 could you confirm that it did fix the issue for you?\n. thanks\n. merged, thanks!\n. thanks. fixed.\n. Please see:\nhttps://github.com/mpdifran/PodsTest/pull/1\nrun pod install after cloning.\nruby\ntarget 'PodsTestTests' do\n  pod 'Specta',      '~> 0.1.9'\n  pod 'Expecta',     '~> 0.2.1'\n  pod 'OCMock',      '~> 2.2'\nend\ntarget 'StaticLibTestTests' do\n  pod 'Specta',      '~> 0.1.9'\n  pod 'Expecta',     '~> 0.2.1'\n  pod 'OCMock',      '~> 2.2'\nend\n. Maybe @nerdyc's +beforeEach and +afterEach do what you need?\n. how did you setup specta and expecta? do you have -ObjC in your linker flags?\n. if they are setup as cocoapods then it should just work. it's weird. are you able to share your project by any chance?\n. Alright I guess the consensus is to dump sentestingkit support and move to xctest in v0.2 will start working on it asap.\n. Thanks, that is definitely useful, my goal is to ship v0.2 with xctest+arc by the end of this week.\n. @tonyarnold maybe you could help with #46 if you are free, I will look at and finish the xctest stuff this weekend\n. @tonyarnold added you to the org. you can create a branch and commit to the main repo\n. @nerdyc @jkrall @blakewatters @mgrimes @Ahti @AshFurrow @tonyarnold @gfontenot @Abizern @tibr @mickeyreiss @jspahrsummers  @bainfu \nFinished XCTest integration: https://github.com/specta/specta/tree/xctest\nAll specs pass, but I had to temporarily remove custom reporter support. Will add that back in later.\nCould you please help test it with your existing projects? We'll ship it if everything seems ok.\n. @mickeyreiss @robb that's because i removed custom reporter support for now. will add that back in 2.0.1 release probably @nerdyc\n. With Specta v0.2.x, you can set SPECTA_REPORTER_CLASS env var to SPTXCTestReporter in your test scheme to use original XCTest reporter.\n. Yes that is correct, 64-bit only for OS X, and both 32 and 64-bit for iOS\nCorrect me if I am wrong, but AFAIK all of the above should be supported by iOS 6+ / OSX 10.7+?\n. @jspahrsummers What do you think? Maybe we can have the same deployment target as GitHub's open source libraries.\n. I am seeing it too with Xcode 5.0.1/OS X 10.9, this is not expected, I haven't investigated \n. Are you able to run iOS tests without crashing xcode 5? @robb @jspahrsummers @tonyarnold \n. Specta's iOS tests.\n. @tonyarnold, could you try this on your XCode 5, please:\nNew -> Project -> iOS -> Framwork & Library -> Cocoa Touch Static Library\nPick any of the iOS Simulators -> Product -> Test\n. Was that with xcode 5.01 on Mavericks? @tonyarnold \n. I realized I was running GM versions of Mavericks and Xcode, that happened to be different from actual App Store builds. Downloading and installing them now.\n. merged\n. i guess WIP branch is fine\n. @nerdyc that's a good idea, maybe we can have a separate branch for v0.1.x\n. Does running a single example or a spec in the test navigator work fine for you as well?\n. @mgrimes @bainfu Does it work if you remove that line? Also make sure that \"Wrapper Extension\" is set to \"xctest\" in your test targets..\n. @mgrimes How is Specta added to your project?\n. I am rebuilding the xcode project file, just to give it a shot\n. I've rebuilt the xcode project from scratch, starting with iOS project then adding OSX target. Starting with OSX project and adding iOS target seems to cause this issue... regardless of the deployment target settings.\n. @mgrimes @bainfu try the new commit, and also quit Xcode, run: rm -rf $HOME/Library/Caches/com.apple.dt.Xcode $HOME/Library/Developer/Xcode/DerivedData and then restart Xcode\n. Things seem stable, will release it as soon as I get home tonight\n. :smiley:\n. Is this still needed in master?\n. can you try specta 0.2.0?\n. thanks, merged in 0.3-wip branch!\n. merged in 0.3-wip branch. thanks!\n. Xcode 6 support is being worked on in \"https://github.com/specta/specta/tree/0.3-wip\" branch.\n. I am trying to fix this, but I can't seem to get Specta to compile under Xcode6 beta. I am getting lots of \"Expected expression\" errors on SPTAssert* macros... Any idea?\n. Looks like commenting the following lines in SpectaSupport.h\n```\nundef _XCTRegisterFailure\n#define _XCTRegisterFailure(condition, format...) \\\n({ \\\n_XCTFailureHandler((id)self, YES, FILE, LINE, condition, @\"\" format); \\\n})\n```\ngets it to compile, but exception handling for async tests seems to be broken. \nrelated: #83\n. I might have to remove support for previous versions of SDK/Xcode (< 6) in v0.3. How do you guys feel about this? I am assuming most people compile code against latest SDK with deployment target set to lower versions. @tonyarnold @jspahrsummers @robb @nskboy\n. Should Specta 0.3 for iOS be released as a framework or static library?\n@nskboy @tonyarnold @robb \n. Swift support requires the library to be packaged as a framework. However, you lose support for iOS < 8.0. I am moving the Swift bit to a separate add-on framework though, so I might be able to get away with the framework requirement.\n. Ok. will add this in 0.3\n. will definitely add this to the todo list for 0.3\n. implemented in bcba04d57fd05ce1a7ce110d998d8363053da0ef\n. this is gone in 0.3 (see 0.3-wip branch)\n. This will be fixed in 0.3. I am trying to release 0.3 beta some time next week, but every new build of Xcode 6 has been breaking the build :(\n. 0.3-wip branch should work with xcode 6 gm\n. https://github.com/specta/specta/tree/0.3-wip\n. There won't be anymore breaking changes. 0.3 branch is stable enough to be used in production today.\n. I am still trying to figure out if it makes any sense to bring back static lib targets. You can still use Cocoapods to build static libs though.\n. in 0.3.0 beta 1, rake produces both framework and static lib binaries.\n. will support this in 0.3\n. @fatuhoku  should it be\n1. -[SomeSpec test_group__group__example] or\n2. -[SomeSpec test__group__group__example]?\n. I am going with 1 for now\n. implemented in 525712e93f48890a5ed412621a6e11a9468b1ea2\n. Can you check that this fixes the issue:\nhttps://github.com/specta/specta/commit/f3c4afe21c8cf9099f3bed09d329f663f945890b\n. yes that tag does not exist yet. tried this? @visav\npod 'Specta', :git => 'https://github.com/specta/specta.git', :commit => 'f3c4afe21c8cf9099f3bed09d329f663f945890b'\n. Let me attempt to solve this by printing the seed in a \"fake\" test case.\n. while this appears to be fixed in master of xctool, xctool also no longer prints test seed.\n. The header file for SPTUtility (that defines SPTCurrentSpec) is no longer exposed, so you should do: \nobjectivec\nSPTSpec *spec = [[NSThread currentThread] threadDictionary][@\"SPTCurrentSpec\"];\nI will think about exposing all header files again in beta2.\n. It's not pushed to Cocoapods repo yet, do the following until it is pushed:\nruby\npod 'Specta', :git => 'https://github.com/specta/specta.git', :tag => 'v0.3.0.beta1'\n. which version of cocoapods are you using?\n. can you try again?\n. I think we can get around the issue by creating a separate framework (e.g. Specta-Swift) that uses the objc Specta framework.\n. d4c0b6a2f1f5c98c496b6a5fec8016cd95b66976 closes this\n. working on it...\n. yeah that's what i meant, but i guess it's not very important... running it standalone also has other problems like needing its own app delgate etc..\n. implemented in 0.1.9\n. They should apply to nested specs too. Could you check again?\n. thanks!\n. Oops I thought I've already merged this\n. thanks!\n. did you have it blocks when you were declaring shared examples?\nsharedExamplesFor(@\"a shared behavior\", ^(NSDictionary *data) {\n  it(@\"should do some stuff\", ^{\n    // ...\n  });\n});\n. @drouchy can you show me your spec code?\n. @drouchy I see, that is because project.services, and delegate are evaluated immediately, not when the it block is evaluated. I am pushing a fix now.\n. @drouchy, Try Specta v0.1.6 and make a slight modification to your spec like so:\n``` objective-c\ndescribe(@\"outlineView:isGroupItem: & outlineView:shouldSelectItem\", ^{\n  __block Project project ;\n  __block ApiProjectOulineViewDelegate delegate ;\nbeforeEach(^{\n    project = [[Project alloc] init] ;\n    delegate = [[ ApiProjectOulineViewDelegate alloc] init] ;\n  }) ;\ndescribe(@\"the services\", ^{\n    itShouldBehaveLike(@\"a group item\", ^{\n      return @{  @\"item\": project.services,\n                 @\"delegate\": delegate,\n                 @\"isGroupItem\": [NSNumber numberWithBool:YES]  } ; \n    }) ;\n  }) ;\n}) ;\n``\n. @drouchy The second spec without the use of block should still be executing. What's probably happening is thatdelegateandisGroupItemare nil since they are evaluated immediately, so it essentially ends up doingexpect(nil).to.equal(nil)..., which passes. perhaps add some assertion to check nullity?\n. I am unable to reproduce this, you have to put breakpoints withinitblocks insharedExamplesFor. Could you add someNSLogs to theitblocks and see if it can print text?\n. @drouchy If possible, could you send me the spec and sharedexample.m files (private gist)?\n. @drouchy ocunit does that. I will see if I can do anything about it.\n. agreed. will look into this and #14 asap\n. implemented in v0.1.7\n. thanks! also made it such that you don't needit_`, specta will inspect block's signature.\nbeforeEach/all/after etc also accept async blocks.\n. thanks!\n. I will take a look at the commits as soon as I get some free time, thanks!\n. merged\n. hmm this is odd... are you using ARC?\n. yep it is. let me investigate this \n. what is your deployment target? what's the version of the base sdk? @thalmicMark  @ianmurrays \n. could you check that you are using clang compiler? (Apple LLVM compiler)\n. Does it say LLVM GCC 4.2 or Apple LLVM compiler 4.2 (Clang)?\n. \nCould you make sure that you are using Apple LLVM compiler and try again?\n@ianmurrays @thalmicMark\n. @thalmicMark is it possible to share your repo? I am unable to reproduce :(\n. @vtsatskin It's really difficult to debug this because I am unable to reproduce this issue. Could you check that you are using clang (apple llvm compiler) and provide a failing test case if possible?\n. @thalmicMark, it's super odd, 'cause all the test cases pass and work fine on xcode 5-dp5. if you could provide a failing test case, it would be tremendously helpful.\n. @thalmicMark or if you could extract the part that is crashing as a separate project without the rest of the stuff, that will be helpful too\n. @thalmicMark hmm the tests run fine for me. \n\n. @thalmicMark, i checked your repo. To make your tests run, change the \"wrapper extension\" under build settings from \"xctest\" to \"octest\".\nPlease do xcode-select -print-path and make sure that the correct XCode version you are trying to use is selected, before compiling the static library. If it isn't, please switch to the correct XCode path:\nsudo xcode-select --switch /Applications/Xcode5-DP5.app\nand then recompile the static library, it should then run without crashing.\nSee https://github.com/thalmicMark/SpectaAsyncTest/pull/1\n. @ianmurrays @vtsatskin are you still experiencing problems?\n. @ianmurrays There shouldn't be any problem using it with Cocoapods though - i use it with Cocoapod for all of my projects. This problem seems to occur if your project and specta were compiled using different compiler versions.\n. @thalmicMark can you confirm that the problem you were experiencing is resolved?\n. Is this still an issue with v0.2?\n. merged/fixed, thanks!\n. I couldn't reproduce this, could you provide a failing spec?\n. merged, thanks!\n. merged a6518614658e3b3648a5d0dd0402e615b2170d02\n. could you give an example of when this is needed? \n. tests should always be wrapped within \"it\" blocks. is this for assertions made outside \"it\" blocks?\n. thanks!\n. thanks!\n. @wonga00 could you confirm that it did fix the issue for you?\n. thanks\n. merged, thanks!\n. thanks. fixed.\n. Please see:\nhttps://github.com/mpdifran/PodsTest/pull/1\nrun pod install after cloning.\nruby\ntarget 'PodsTestTests' do\n  pod 'Specta',      '~> 0.1.9'\n  pod 'Expecta',     '~> 0.2.1'\n  pod 'OCMock',      '~> 2.2'\nend\ntarget 'StaticLibTestTests' do\n  pod 'Specta',      '~> 0.1.9'\n  pod 'Expecta',     '~> 0.2.1'\n  pod 'OCMock',      '~> 2.2'\nend\n. Maybe @nerdyc's +beforeEach and +afterEach do what you need?\n. how did you setup specta and expecta? do you have -ObjC in your linker flags?\n. if they are setup as cocoapods then it should just work. it's weird. are you able to share your project by any chance?\n. Alright I guess the consensus is to dump sentestingkit support and move to xctest in v0.2 will start working on it asap.\n. Thanks, that is definitely useful, my goal is to ship v0.2 with xctest+arc by the end of this week.\n. @tonyarnold maybe you could help with #46 if you are free, I will look at and finish the xctest stuff this weekend\n. @tonyarnold added you to the org. you can create a branch and commit to the main repo\n. @nerdyc @jkrall @blakewatters @mgrimes @Ahti @AshFurrow @tonyarnold @gfontenot @Abizern @tibr @mickeyreiss @jspahrsummers  @bainfu \nFinished XCTest integration: https://github.com/specta/specta/tree/xctest\nAll specs pass, but I had to temporarily remove custom reporter support. Will add that back in later.\nCould you please help test it with your existing projects? We'll ship it if everything seems ok.\n. @mickeyreiss @robb that's because i removed custom reporter support for now. will add that back in 2.0.1 release probably @nerdyc\n. With Specta v0.2.x, you can set SPECTA_REPORTER_CLASS env var to SPTXCTestReporter in your test scheme to use original XCTest reporter.\n. Yes that is correct, 64-bit only for OS X, and both 32 and 64-bit for iOS\nCorrect me if I am wrong, but AFAIK all of the above should be supported by iOS 6+ / OSX 10.7+?\n. @jspahrsummers What do you think? Maybe we can have the same deployment target as GitHub's open source libraries.\n. I am seeing it too with Xcode 5.0.1/OS X 10.9, this is not expected, I haven't investigated \n. Are you able to run iOS tests without crashing xcode 5? @robb @jspahrsummers @tonyarnold \n. Specta's iOS tests.\n. @tonyarnold, could you try this on your XCode 5, please:\nNew -> Project -> iOS -> Framwork & Library -> Cocoa Touch Static Library\nPick any of the iOS Simulators -> Product -> Test\n. Was that with xcode 5.01 on Mavericks? @tonyarnold \n. I realized I was running GM versions of Mavericks and Xcode, that happened to be different from actual App Store builds. Downloading and installing them now.\n. merged\n. i guess WIP branch is fine\n. @nerdyc that's a good idea, maybe we can have a separate branch for v0.1.x\n. Does running a single example or a spec in the test navigator work fine for you as well?\n. @mgrimes @bainfu Does it work if you remove that line? Also make sure that \"Wrapper Extension\" is set to \"xctest\" in your test targets..\n. @mgrimes How is Specta added to your project?\n. I am rebuilding the xcode project file, just to give it a shot\n. I've rebuilt the xcode project from scratch, starting with iOS project then adding OSX target. Starting with OSX project and adding iOS target seems to cause this issue... regardless of the deployment target settings.\n. @mgrimes @bainfu try the new commit, and also quit Xcode, run: rm -rf $HOME/Library/Caches/com.apple.dt.Xcode $HOME/Library/Developer/Xcode/DerivedData and then restart Xcode\n. Things seem stable, will release it as soon as I get home tonight\n. :smiley:\n. Is this still needed in master?\n. can you try specta 0.2.0?\n. thanks, merged in 0.3-wip branch!\n. merged in 0.3-wip branch. thanks!\n. Xcode 6 support is being worked on in \"https://github.com/specta/specta/tree/0.3-wip\" branch.\n. I am trying to fix this, but I can't seem to get Specta to compile under Xcode6 beta. I am getting lots of \"Expected expression\" errors on SPTAssert* macros... Any idea?\n. Looks like commenting the following lines in SpectaSupport.h\n```\nundef _XCTRegisterFailure\n#define _XCTRegisterFailure(condition, format...) \\\n({ \\\n_XCTFailureHandler((id)self, YES, FILE, LINE, condition, @\"\" format); \\\n})\n```\ngets it to compile, but exception handling for async tests seems to be broken. \nrelated: #83\n. I might have to remove support for previous versions of SDK/Xcode (< 6) in v0.3. How do you guys feel about this? I am assuming most people compile code against latest SDK with deployment target set to lower versions. @tonyarnold @jspahrsummers @robb @nskboy\n. Should Specta 0.3 for iOS be released as a framework or static library?\n@nskboy @tonyarnold @robb \n. Swift support requires the library to be packaged as a framework. However, you lose support for iOS < 8.0. I am moving the Swift bit to a separate add-on framework though, so I might be able to get away with the framework requirement.\n. Ok. will add this in 0.3\n. will definitely add this to the todo list for 0.3\n. implemented in bcba04d57fd05ce1a7ce110d998d8363053da0ef\n. this is gone in 0.3 (see 0.3-wip branch)\n. This will be fixed in 0.3. I am trying to release 0.3 beta some time next week, but every new build of Xcode 6 has been breaking the build :(\n. 0.3-wip branch should work with xcode 6 gm\n. https://github.com/specta/specta/tree/0.3-wip\n. There won't be anymore breaking changes. 0.3 branch is stable enough to be used in production today.\n. I am still trying to figure out if it makes any sense to bring back static lib targets. You can still use Cocoapods to build static libs though.\n. in 0.3.0 beta 1, rake produces both framework and static lib binaries.\n. will support this in 0.3\n. @fatuhoku  should it be\n1. -[SomeSpec test_group__group__example] or\n2. -[SomeSpec test__group__group__example]?\n. I am going with 1 for now\n. implemented in 525712e93f48890a5ed412621a6e11a9468b1ea2\n. Can you check that this fixes the issue:\nhttps://github.com/specta/specta/commit/f3c4afe21c8cf9099f3bed09d329f663f945890b\n. yes that tag does not exist yet. tried this? @visav\npod 'Specta', :git => 'https://github.com/specta/specta.git', :commit => 'f3c4afe21c8cf9099f3bed09d329f663f945890b'\n. Let me attempt to solve this by printing the seed in a \"fake\" test case.\n. while this appears to be fixed in master of xctool, xctool also no longer prints test seed.\n. The header file for SPTUtility (that defines SPTCurrentSpec) is no longer exposed, so you should do: \nobjectivec\nSPTSpec *spec = [[NSThread currentThread] threadDictionary][@\"SPTCurrentSpec\"];\nI will think about exposing all header files again in beta2.\n. It's not pushed to Cocoapods repo yet, do the following until it is pushed:\nruby\npod 'Specta', :git => 'https://github.com/specta/specta.git', :tag => 'v0.3.0.beta1'\n. which version of cocoapods are you using?\n. can you try again?\n. I think we can get around the issue by creating a separate framework (e.g. Specta-Swift) that uses the objc Specta framework.\n. ",
    "jspahrsummers": "+1. This would be amazing.\nI'm willing to help implement it if needed.\n. Does this need anything else to be merged?\n. :sparkles:\n. The build failure here can be disregarded. Looks like our CI server was trying to use the Xcode schemes that we only have on our master (which aren't included in this branch).\n. @blakewatters The naming was just for consistency with SenTestingKit's -setUp and -tearDown methods. The parallels there might be helpful, though I'm not opposed to renaming them if you strongly prefer {before,after}Example.\n. @petejkim Ah, perhaps. Sorry about the duplication \u2014\u00a0this was written before that existed (just not PRed until now).\nBased on my reading of the code, adding those methods to any class will run the code before and after each spec?\n. > The drawback is that these run before ALL examples in your suite. I think the -[SPTSenTestCase SPT_setUp] version would only run before and after each example in a single spec, right?\nNo, it would be all of the examples in the suite, just like +{before,after}Each is intended for.\nI really like that pattern, but I think the magic methods should be namespaced to avoid category conflicts, and so Specta doesn't accidentally run code from a method not meant for unit testing.\n. In any case, gonna go ahead and close this out.\nThanks for the pointers!\n. @nerdyc Yeah, I'm pretty convinced that not prefixing means we'll run afoul of some weird class sooner or later. I'll tackle that change soon.\n. @blakewatters :+1: Love that idea!\n. A few things here:\n1. You're creating the semaphore with an initial count of 1. This means that the first dispatch_semaphore_wait will always complete immediately, which is probably not what you want.\n2. The semaphore isn't recreated each time the beforeAll block is run (relevant if it's in a describe block). I'd probably move the variable and initialization into there.\n3. If -loginWithUserName:\u2026 needs to do any work on the main thread \u2014 like delivering its results there \u2014 it won't be able to, since you'll be blocking on the semaphore.\nInstead, if you're also using expecta, you can use the will matcher to solve all of the above problems:\n``` objc\nbeforeAll(^{\n    // This is run once and only once before all of the examples\n    // in this group and before any beforeEach blocks.\n// Set a timeout of 100 sec\nsetAsyncSpecTimeout(100);\n\nLogin *login = [[Login alloc] init];\n\n__block BOOL completed = NO;\n[login loginWithUserName:@\"user\"\n                passWord:@\"pass\"\n               onSuccess:^(id responseObject) {\n                   // Handle successful login\n                   completed = YES;\n               }\n                 onError:^(NSError *err) {\n                   // Handle error\n                     completed = YES;\n                 }];\n\nexpect(completed).will.beTruthy();\n\n});\n```\nAs a sidenote, 100 seconds is way too long to be waiting for results in a unit test. It's probably safe to say that any more than 10 seconds should be considered a failure.\n. > I added some brakepoints in both success and failure callbacks, they are never called.\nThis sounds like a problem with the method you're using, then. Does it work in a small sample application?\n. Thanks for doing this! However, can you make sure that all the blocks have void in their argument list? Empty parentheses are interpreted as an unspecified argument list, not an empty list.\n. Well, I'm glad we tried that out, because it actually means that it accepts multiple kinds of blocks. AsyncBlock expands to a second block to perform its behavior.\nIn that case, it should go back to accepting id, since the different possible types cannot be represented cleanly in the same parameter list.\n. I don't think this whole change is invalidated just from that one thing. It's really just the it block that still needs to support multiple types.\n. @gfontenot Yeah, anywhere that it blocks get passed around, we should probably use id. However, everything else can be void (^)(void).\n. Hmm, I didn't realize it was so pervasive. In that case, maybe it's not worth it. :\\\nSorry about the runaround!\n. Thanks!\n. @tonyarnold @petejkim Yeah, our open source projects don't target 64-bit iOS yet. The lack of support for fat binaries is part of the reason, and the other is not being able to build on 10.7 (which is what our CI is).\n. What's the advantage to let over something like this:\n``` objc\ndescribe(@\"outer\", ^{\n    __block NSString *foo;\nbeforeEach(^{\n    foo = @\"bar\";\n});\n\nit(@\"should be bar\", ^{\n    expect(foo).to.equal(@\"bar\");\n});\n\ndescribe(@\"inner\", ^{\n    beforeEach(^{\n        foo = @\"baz\";\n    });\n\n    it(@\"should be baz\", ^{\n        expect(foo).to.equal(@\"baz\");\n    });\n});\n\n});\n```\nThis also preserves type information and allows the compiler to check the names you've used.\n. @petejkim You might want to make @robb a collaborator too. He's really going at it!\n. Looks great, thank you!\n. You can put your reading of data into a beforeEach within the shared example:\n``` objc\n__block id thing;\nbeforeEach(^{\n    thing = data[@\"thing\"];  \n});\nit(@\"checks stuff\", ^AsyncBlock{\n    ....\n    done();\n});\n``\n. @dblock FWIW,testshould beself` within the actual definition of a spec.\n. > I am assuming most people compile code against latest SDK with deployment target set to lower versions.\nYeah, for sure, although this doesn't always extend to beta versions. Our CI servers, for example, remain on the latest stable release.\n. You may be running into the issue described in https://github.com/Carthage/Carthage/issues/417.\n. +1. This would be amazing.\nI'm willing to help implement it if needed.\n. Does this need anything else to be merged?\n. :sparkles:\n. The build failure here can be disregarded. Looks like our CI server was trying to use the Xcode schemes that we only have on our master (which aren't included in this branch).\n. @blakewatters The naming was just for consistency with SenTestingKit's -setUp and -tearDown methods. The parallels there might be helpful, though I'm not opposed to renaming them if you strongly prefer {before,after}Example.\n. @petejkim Ah, perhaps. Sorry about the duplication \u2014\u00a0this was written before that existed (just not PRed until now).\nBased on my reading of the code, adding those methods to any class will run the code before and after each spec?\n. > The drawback is that these run before ALL examples in your suite. I think the -[SPTSenTestCase SPT_setUp] version would only run before and after each example in a single spec, right?\nNo, it would be all of the examples in the suite, just like +{before,after}Each is intended for.\nI really like that pattern, but I think the magic methods should be namespaced to avoid category conflicts, and so Specta doesn't accidentally run code from a method not meant for unit testing.\n. In any case, gonna go ahead and close this out.\nThanks for the pointers!\n. @nerdyc Yeah, I'm pretty convinced that not prefixing means we'll run afoul of some weird class sooner or later. I'll tackle that change soon.\n. @blakewatters :+1: Love that idea!\n. A few things here:\n1. You're creating the semaphore with an initial count of 1. This means that the first dispatch_semaphore_wait will always complete immediately, which is probably not what you want.\n2. The semaphore isn't recreated each time the beforeAll block is run (relevant if it's in a describe block). I'd probably move the variable and initialization into there.\n3. If -loginWithUserName:\u2026 needs to do any work on the main thread \u2014 like delivering its results there \u2014 it won't be able to, since you'll be blocking on the semaphore.\nInstead, if you're also using expecta, you can use the will matcher to solve all of the above problems:\n``` objc\nbeforeAll(^{\n    // This is run once and only once before all of the examples\n    // in this group and before any beforeEach blocks.\n// Set a timeout of 100 sec\nsetAsyncSpecTimeout(100);\n\nLogin *login = [[Login alloc] init];\n\n__block BOOL completed = NO;\n[login loginWithUserName:@\"user\"\n                passWord:@\"pass\"\n               onSuccess:^(id responseObject) {\n                   // Handle successful login\n                   completed = YES;\n               }\n                 onError:^(NSError *err) {\n                   // Handle error\n                     completed = YES;\n                 }];\n\nexpect(completed).will.beTruthy();\n\n});\n```\nAs a sidenote, 100 seconds is way too long to be waiting for results in a unit test. It's probably safe to say that any more than 10 seconds should be considered a failure.\n. > I added some brakepoints in both success and failure callbacks, they are never called.\nThis sounds like a problem with the method you're using, then. Does it work in a small sample application?\n. Thanks for doing this! However, can you make sure that all the blocks have void in their argument list? Empty parentheses are interpreted as an unspecified argument list, not an empty list.\n. Well, I'm glad we tried that out, because it actually means that it accepts multiple kinds of blocks. AsyncBlock expands to a second block to perform its behavior.\nIn that case, it should go back to accepting id, since the different possible types cannot be represented cleanly in the same parameter list.\n. I don't think this whole change is invalidated just from that one thing. It's really just the it block that still needs to support multiple types.\n. @gfontenot Yeah, anywhere that it blocks get passed around, we should probably use id. However, everything else can be void (^)(void).\n. Hmm, I didn't realize it was so pervasive. In that case, maybe it's not worth it. :\\\nSorry about the runaround!\n. Thanks!\n. @tonyarnold @petejkim Yeah, our open source projects don't target 64-bit iOS yet. The lack of support for fat binaries is part of the reason, and the other is not being able to build on 10.7 (which is what our CI is).\n. What's the advantage to let over something like this:\n``` objc\ndescribe(@\"outer\", ^{\n    __block NSString *foo;\nbeforeEach(^{\n    foo = @\"bar\";\n});\n\nit(@\"should be bar\", ^{\n    expect(foo).to.equal(@\"bar\");\n});\n\ndescribe(@\"inner\", ^{\n    beforeEach(^{\n        foo = @\"baz\";\n    });\n\n    it(@\"should be baz\", ^{\n        expect(foo).to.equal(@\"baz\");\n    });\n});\n\n});\n```\nThis also preserves type information and allows the compiler to check the names you've used.\n. @petejkim You might want to make @robb a collaborator too. He's really going at it!\n. Looks great, thank you!\n. You can put your reading of data into a beforeEach within the shared example:\n``` objc\n__block id thing;\nbeforeEach(^{\n    thing = data[@\"thing\"];  \n});\nit(@\"checks stuff\", ^AsyncBlock{\n    ....\n    done();\n});\n``\n. @dblock FWIW,testshould beself` within the actual definition of a spec.\n. > I am assuming most people compile code against latest SDK with deployment target set to lower versions.\nYeah, for sure, although this doesn't always extend to beta versions. Our CI servers, for example, remain on the latest stable release.\n. You may be running into the issue described in https://github.com/Carthage/Carthage/issues/417.\n. ",
    "joshvera": "+1\n. +1\n. ",
    "hartbit": "+1 for test too :)\n. +1 for test too :)\n. ",
    "nerdyc": "The custom reporter stuff is addressed now -- what is the relationship to 'standalone' specs?\nI actually had need for running tests outside of OCUnit this afternoon. I couldn't find any way to profile tests to look for memory leaks under OCUnit. Does 'standalone' mean outside of OCUnit?\n. I actually think standalone tests would be worthwhile. I've used them in the past to create API integration tests for each version of an app. That way I knew if API changes would break older versions of the app.\nStandalone tests can also be run within Instruments, which I've found really useful to find memory or performance issues from time to time.\n. Oops! I also developed some Xcode templates, which I should have put on a branch and submitted separately. LMK if you want me to break this up, or if you're good with both commits.\n. I've continued to work on new features, in particular:\n- New output format that's easier to read, while maintaining the stuff Xcode needs for its integration\n- Report pending specs in the output, and support Cedar's PENDING macro.\n- Focused specs, allowing a subset of specs to be run.\nI'd like to keep this on my master branch, so if you want to integrate any of this into Specta main, let me know and I can split this into more appropriate feature branches.\n. Thanks for tracking this down! Can you submit a pull request?\nI'm heading out of town, but will have a bit of time this weekend to review and accept.\n\nOn Jul 10, 2013, at 11:33 AM, Andrew Wong notifications@github.com wrote:\ni tracked down the problem to commit 8608ba8 and it appears to be the same problem that appeared in Cedar (pivotal/cedar@6ace9c9)\nlooks like the implementation of ClassesWithClassMethod has an incompatibility with Apple's class UIAccessibilitySafeCategory__NSObject, resulting in a crash on:\nMethod globalMethod = class_getClassMethod(aClass, classMethodSelector);\n\u2014\nReply to this email directly or view it on GitHub.\n. Exactly. I typically use them with categories to setup and tear down global test state. Here's a contrived example with NSUserDefaults:\n\n@interface NSUserDefaults (SpecHelper)\n@end\n@implementation NSUserDefaults (SpecHelper)\n- (void)setCustomReporter\n  {\n  [[self standardUserDefaults]  setObject:@\"SPTVerboseReporter\" forKey:@\"com.github.petejkim.specta.SharedReporterClass\"];\n  }\n- (void)afterEach\n  {\n  [[self standardUserDefaults]  removeObjectForKey:@\"com.github.petejkim.specta.SharedReporterClass\"];\n  }\n@end\nThe drawback is that these run before ALL examples in your suite. I think the -[SPTSenTestCase SPT_setUp] version would only run before and after each example in a single spec, right?\nIf that's the case, then they might be complimentary, especially if you renamed the methods to -beforeEach and -afterEach.\nOn Aug 5, 2013, at 7:41 PM, Justin Spahr-Summers notifications@github.com wrote:\n\n@petejkim Ah, perhaps. Sorry about the duplication \u2014 this was written before that existed.\nBased on my reading of the code, adding those methods to any class will run the code before and after each spec?\n\u2014\nReply to this email directly or view it on GitHub.\n. @jspahrsummers I agree with the namespacing, but Cedar also uses these method names. I wanted to make it easy to move between the frameworks.\n\nThat said, it occurs to me that we have a Cedar compatibility macro (SPT_CEDAR_SYNTAX) that we could use to support that. I'm up for a pull-request if you feel strongly.\n. Fixed by 80038c.\nTo use a custom reporter, set the SPECTA_REPORTER_CLASS to a custom SPTReporter subclass.\n. Support for custom reporters was on my mind when I wrote the default one, but I wanted to live with the default until I got more feedback or felt problems myself.\nHow would you prefer to set the default reporter? In code, via an environment variable, or the command line?\nchristian\nOn Aug 3, 2013, at 2:46 PM, Justin Spahr-Summers notifications@github.com wrote:\n\nThis is arguably intended behavior, but the SPTDefaultReporter introduced in #21 does not update Xcode's build failures UI as it runs. Instead, all tests must finish, and then the UI is updated.\nBeing able to switch the reporter (#35) would make this issue less serious. Right now, this behavior makes it unusable for us in Xcode.\nCC @nerdyc\n\u2014\nReply to this email directly or view it on GitHub.\n. This is how I was thinking as well. It allows the reporter to be set by configuring env variables in a scheme.\n\nI've a quick version of this done, and will commit it tomorrow along with some other reporter updates.\n\nOn Aug 4, 2013, at 15:27, Blake Watters notifications@github.com wrote:\nI would probably vote for some like:\n@implementation SPTReporter\n- (void)setSharedReporter:(SPTReporter )reporter\n  {\n  sharedReporter = reporter;\n  }\n- (SPTReporter )sharedReporter\n  {\n  return sharedReporter ?: [self loadReporterFromEnvironment];\n  }\n- (void)loadReporterFromEnvironment\n  {\n  NSString *reporterClass = [[NSProcessInfo processInfo] environment][@\"SPECTA_REPORTER_CLASS\"] ?: @\"SPTDefaultReporter\";\n  return [NSClassFromString(reporterClass) new];\n  }\n@end\nThen you can trivially set the reporter directly via code or use an environment variable, which gives you easy command line integration.\n\u2014\nReply to this email directly or view it on GitHub.\n. I agree on having an XCTest version. When I tried to port Specta this summer, I had to ifdef a lot of code; it's not straightforward for a project like Specta.\nOn Oct 23, 2013, at 7:40, Abizer Nasir notifications@github.com wrote:\nI think so too. If you want SenTest Support use an older version. I'd vote for just bumping the major version number up and supporting XCTest only.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Jonathan,\n\nA classic OCUnit reporter seems like a good way to go. I'll have a look and try to have something out this week.\nCan you create a GitHub issue for this?\nChristian\n\nOn Aug 26, 2013, at 7:20, Jonathan Crooke notifications@github.com wrote:\nHi,\nWe recently updated Specta from 0.1.8 to 0.1.11. Whilst the new reporter output format is certainly very nice when running locally, we found that it broke JUnit output report parsing on our Jenkins instance:\nFATAL: Log statements out of sync: current test suite was null\nIt would certainly be nice to keep up to date with Specta. Perhaps the new reporting format could be disabled with an environmental variable? This would be more easily controller when configuring the Jenkins job. Alternatively, the parser plugin may be updated, but since the old OCUnit format is so well established I don't see this happening particularly soon.\nIn any case, looking forward to hearing from you regarding this matter. Thanks for all the great work on this library.\nJ\n\u2014\nReply to this email directly or view it on GitHub.\n. Whoops! I wrote that last reply on my iPhone and missed the issue number at the end.\nOn Aug 27, 2013, at 1:40, Jonathan Crooke notifications@github.com wrote:\nSounds good. Is this issue not sufficient, though?\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes! I do it all the time. Just use 'fit' instead of 'it' to run just that example. Or 'fdescribe' instead of 'describe' to run that group of examples. 'f' stands for 'focused'.\n\nFor example:\nfit(@\"returns YES when equal\", ^{ ... });\nOn Sep 19, 2013, at 9:40 AM, Salman Ansari notifications@github.com wrote:\n\nHey there,\nLong time Rubyist that just started doing iOS here, and just started using Specta with an XCode 5 project. Thanks for helping to bring readable tests to iOS :)\nI like that I can run a single \"Spec\" block in XCode 5 by clicking the icon to the left of the spec declaration, but that usually encompasses a group of tests (in one or more describe blocks with multiple \"it\" tests inside that). Is it possible to run a single \"it\" test, or even a \"describe\" block\", within XCode 5? Running the whole spec file each time I'm working on a single test is really hurting my flow.\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. I've noticed this as well, probably since 5.0.1 has been released. I haven't had time to spare lately, but now that I know it's not something with my own test suite I'll try to figure out why XCode considers the process failed.\nOn Oct 28, 2013, at 10:45, Leo Cassarani notifications@github.com wrote:\nSince upgrading to Xcode 5.0.1 (5A2053), running my Specta test suite is reported as a \"Failure\" by Xcode, even when the tests themselves are actually successful. The following shows up in the log window:\nRunning 195 tests:\n...................................................................................................................................................................................................\n----- XCode (OCUnit) Test Output --------------------\nTest target MyProjectTests encountered an error (Unexpected TestCaseDidStart)\nMy Podfile:\nplatform :ios, '6.0'\npod 'AFNetworking', '~> 1.3'\npod 'SSKeychain'\npod 'NVSlideMenuController'\npod 'Mantle'\ntarget 'MyProjectTests' do\n  pod 'Specta', :head\n  pod 'Expecta'\n  pod 'OCMock'\nend\n\u2014\nReply to this email directly or view it on GitHub.\n. I've fixed the issue on a local branch and expect to commit today or this evening.\n\nThat said, it references SenTest classes a lot, so will definitely be affected by the switch to XCTest.\nShould I hold off committing, commit to a non-master branch, or just go ahead?\n\nOn Oct 28, 2013, at 14:57, Tony Arnold notifications@github.com wrote:\nThis is probably going to be the case until #38 is complete. I believe @petejkim is working on it, and targeting a release sometime this week.\n\u2014\nReply to this email directly or view it on GitHub.\n. I just tracked down the final issue, and there doesn't seem to be a way to square the pretty output / custom reporting with XCode's test integration.\n\nI'll keep working on it this evening, but I wouldn't worry about my changes, @petejkim.\n\nOn Oct 28, 2013, at 15:54, Tony Arnold notifications@github.com wrote:\nJust check with @petejkim \u2014 if the changes to fix the problem are big, it might just get in the way of the XCTest work. Personally, I'd be keen to see the fix either way \u2014 maybe push it up into a branch and we can do a [WIP] PR on it?\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry! This has been fixed in the xctest branch.\n\nI'm willing to backport it to master, but we may want to settle on a release plan for the xctest stuff. It would be good to have a working non-xctest version so users who can't upgrade can still use Specta.\n\nOn Nov 6, 2013, at 7:39, Leo Cassarani notifications@github.com wrote:\nThanks for taking a look at this, @nerdyc. Is there anything I can do to get Xcode integration working again, for the time being? Should I expect your fixes to be merged into master and a new version to be released any time soon?\n\u2014\nReply to this email directly or view it on GitHub.\n. My tests crash with XCTest + ARC when it tries to invoke global +beforeEach and +afterEach methods. For some reason ARC is attempting to retain the class or something:\n\n\nHas anyone else encountered this problem?\nI was able to fix this by invoking the methods directly, instead of using the objc runtime functions. But curious if nobody else saw this, or is using this feature.\n. @petejkim I noticed that you pulled the custom reporters I added to Specta awhile back. This is sad, but probably necessary given that Xcode and other tools are completely dependent on the output format.\nAny objection if I try to find a way to add this back in as an opt-in, off-by-default feature? I find Xcode's output format completely obscures any other test output, which makes it hard to track down any error messages reported inline.\n. Yes I am! I missed that issue.\nNow that I see others like that format, I'll work on restoring it.\n\nOn Nov 2, 2013, at 11:02, Robert B\u00f6hnke notifications@github.com wrote:\n@nerdyc are you speaking about #54 ?\n\u2014\nReply to this email directly or view it on GitHub.\n. The default reporter format that I built breaks Xcode's test integration in Xcode 5.0.1. Since Xcode seems to be finicky about the format, Specta should modify the output format as little as possible by default.\n\nI'll work on restoring this feature, but the new format may be much closer to Xcode's default.\n. My commit above re-adds support for custom reporters, but the format has changed to be compatible with Xcode's test integration features.\nThis is a much simpler implementation than the original. SPTReporter is simply a subclass of XCTestLog so its output should track any changes made by the Xcode team. As just another observer, it should play well with any 3rd-party observers too.\nThe only non-standard aspect is that I was forced to swizzle -[XCTestLog startObserving] and -[XCTestLog stopObserving]. There was no other way to force XCTest to use SPTReporter without requiring users to explicitly add the -XCTestObserverClass default to their test scheme.\n. I often compare arrays by equality, so the failure message will include the mis-matched values. Something like:\nobjc\nexpect([array valueForKey:@\"someValue\"]).to.equal(expectedValues);\nThe ease of constructing expectedValues sometimes isn't easy. I've sometimes included the array index in the comparison simply to include it in the text output. \nobjc\nexpect([ @(i), [array[i] someValue] ]).to.equal([@(i), @1]);\nLastly, you can write custom matchers in expecta which might be more expressive if you have lots of expectations:\nobjc\nexpect(array[i]).to.beValidUser();\nThat makes the test much more readable, even if the matchers aren't used that often. If you don't want to write a matcher, there's always a C function too!\n. The custom reporter stuff is addressed now -- what is the relationship to 'standalone' specs?\nI actually had need for running tests outside of OCUnit this afternoon. I couldn't find any way to profile tests to look for memory leaks under OCUnit. Does 'standalone' mean outside of OCUnit?\n. I actually think standalone tests would be worthwhile. I've used them in the past to create API integration tests for each version of an app. That way I knew if API changes would break older versions of the app.\nStandalone tests can also be run within Instruments, which I've found really useful to find memory or performance issues from time to time.\n. Oops! I also developed some Xcode templates, which I should have put on a branch and submitted separately. LMK if you want me to break this up, or if you're good with both commits.\n. I've continued to work on new features, in particular:\n- New output format that's easier to read, while maintaining the stuff Xcode needs for its integration\n- Report pending specs in the output, and support Cedar's PENDING macro.\n- Focused specs, allowing a subset of specs to be run.\nI'd like to keep this on my master branch, so if you want to integrate any of this into Specta main, let me know and I can split this into more appropriate feature branches.\n. Thanks for tracking this down! Can you submit a pull request?\nI'm heading out of town, but will have a bit of time this weekend to review and accept.\n\nOn Jul 10, 2013, at 11:33 AM, Andrew Wong notifications@github.com wrote:\ni tracked down the problem to commit 8608ba8 and it appears to be the same problem that appeared in Cedar (pivotal/cedar@6ace9c9)\nlooks like the implementation of ClassesWithClassMethod has an incompatibility with Apple's class UIAccessibilitySafeCategory__NSObject, resulting in a crash on:\nMethod globalMethod = class_getClassMethod(aClass, classMethodSelector);\n\u2014\nReply to this email directly or view it on GitHub.\n. Exactly. I typically use them with categories to setup and tear down global test state. Here's a contrived example with NSUserDefaults:\n\n@interface NSUserDefaults (SpecHelper)\n@end\n@implementation NSUserDefaults (SpecHelper)\n- (void)setCustomReporter\n  {\n  [[self standardUserDefaults]  setObject:@\"SPTVerboseReporter\" forKey:@\"com.github.petejkim.specta.SharedReporterClass\"];\n  }\n- (void)afterEach\n  {\n  [[self standardUserDefaults]  removeObjectForKey:@\"com.github.petejkim.specta.SharedReporterClass\"];\n  }\n@end\nThe drawback is that these run before ALL examples in your suite. I think the -[SPTSenTestCase SPT_setUp] version would only run before and after each example in a single spec, right?\nIf that's the case, then they might be complimentary, especially if you renamed the methods to -beforeEach and -afterEach.\nOn Aug 5, 2013, at 7:41 PM, Justin Spahr-Summers notifications@github.com wrote:\n\n@petejkim Ah, perhaps. Sorry about the duplication \u2014 this was written before that existed.\nBased on my reading of the code, adding those methods to any class will run the code before and after each spec?\n\u2014\nReply to this email directly or view it on GitHub.\n. @jspahrsummers I agree with the namespacing, but Cedar also uses these method names. I wanted to make it easy to move between the frameworks.\n\nThat said, it occurs to me that we have a Cedar compatibility macro (SPT_CEDAR_SYNTAX) that we could use to support that. I'm up for a pull-request if you feel strongly.\n. Fixed by 80038c.\nTo use a custom reporter, set the SPECTA_REPORTER_CLASS to a custom SPTReporter subclass.\n. Support for custom reporters was on my mind when I wrote the default one, but I wanted to live with the default until I got more feedback or felt problems myself.\nHow would you prefer to set the default reporter? In code, via an environment variable, or the command line?\nchristian\nOn Aug 3, 2013, at 2:46 PM, Justin Spahr-Summers notifications@github.com wrote:\n\nThis is arguably intended behavior, but the SPTDefaultReporter introduced in #21 does not update Xcode's build failures UI as it runs. Instead, all tests must finish, and then the UI is updated.\nBeing able to switch the reporter (#35) would make this issue less serious. Right now, this behavior makes it unusable for us in Xcode.\nCC @nerdyc\n\u2014\nReply to this email directly or view it on GitHub.\n. This is how I was thinking as well. It allows the reporter to be set by configuring env variables in a scheme.\n\nI've a quick version of this done, and will commit it tomorrow along with some other reporter updates.\n\nOn Aug 4, 2013, at 15:27, Blake Watters notifications@github.com wrote:\nI would probably vote for some like:\n@implementation SPTReporter\n- (void)setSharedReporter:(SPTReporter )reporter\n  {\n  sharedReporter = reporter;\n  }\n- (SPTReporter )sharedReporter\n  {\n  return sharedReporter ?: [self loadReporterFromEnvironment];\n  }\n- (void)loadReporterFromEnvironment\n  {\n  NSString *reporterClass = [[NSProcessInfo processInfo] environment][@\"SPECTA_REPORTER_CLASS\"] ?: @\"SPTDefaultReporter\";\n  return [NSClassFromString(reporterClass) new];\n  }\n@end\nThen you can trivially set the reporter directly via code or use an environment variable, which gives you easy command line integration.\n\u2014\nReply to this email directly or view it on GitHub.\n. I agree on having an XCTest version. When I tried to port Specta this summer, I had to ifdef a lot of code; it's not straightforward for a project like Specta.\nOn Oct 23, 2013, at 7:40, Abizer Nasir notifications@github.com wrote:\nI think so too. If you want SenTest Support use an older version. I'd vote for just bumping the major version number up and supporting XCTest only.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Jonathan,\n\nA classic OCUnit reporter seems like a good way to go. I'll have a look and try to have something out this week.\nCan you create a GitHub issue for this?\nChristian\n\nOn Aug 26, 2013, at 7:20, Jonathan Crooke notifications@github.com wrote:\nHi,\nWe recently updated Specta from 0.1.8 to 0.1.11. Whilst the new reporter output format is certainly very nice when running locally, we found that it broke JUnit output report parsing on our Jenkins instance:\nFATAL: Log statements out of sync: current test suite was null\nIt would certainly be nice to keep up to date with Specta. Perhaps the new reporting format could be disabled with an environmental variable? This would be more easily controller when configuring the Jenkins job. Alternatively, the parser plugin may be updated, but since the old OCUnit format is so well established I don't see this happening particularly soon.\nIn any case, looking forward to hearing from you regarding this matter. Thanks for all the great work on this library.\nJ\n\u2014\nReply to this email directly or view it on GitHub.\n. Whoops! I wrote that last reply on my iPhone and missed the issue number at the end.\nOn Aug 27, 2013, at 1:40, Jonathan Crooke notifications@github.com wrote:\nSounds good. Is this issue not sufficient, though?\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes! I do it all the time. Just use 'fit' instead of 'it' to run just that example. Or 'fdescribe' instead of 'describe' to run that group of examples. 'f' stands for 'focused'.\n\nFor example:\nfit(@\"returns YES when equal\", ^{ ... });\nOn Sep 19, 2013, at 9:40 AM, Salman Ansari notifications@github.com wrote:\n\nHey there,\nLong time Rubyist that just started doing iOS here, and just started using Specta with an XCode 5 project. Thanks for helping to bring readable tests to iOS :)\nI like that I can run a single \"Spec\" block in XCode 5 by clicking the icon to the left of the spec declaration, but that usually encompasses a group of tests (in one or more describe blocks with multiple \"it\" tests inside that). Is it possible to run a single \"it\" test, or even a \"describe\" block\", within XCode 5? Running the whole spec file each time I'm working on a single test is really hurting my flow.\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. I've noticed this as well, probably since 5.0.1 has been released. I haven't had time to spare lately, but now that I know it's not something with my own test suite I'll try to figure out why XCode considers the process failed.\nOn Oct 28, 2013, at 10:45, Leo Cassarani notifications@github.com wrote:\nSince upgrading to Xcode 5.0.1 (5A2053), running my Specta test suite is reported as a \"Failure\" by Xcode, even when the tests themselves are actually successful. The following shows up in the log window:\nRunning 195 tests:\n...................................................................................................................................................................................................\n----- XCode (OCUnit) Test Output --------------------\nTest target MyProjectTests encountered an error (Unexpected TestCaseDidStart)\nMy Podfile:\nplatform :ios, '6.0'\npod 'AFNetworking', '~> 1.3'\npod 'SSKeychain'\npod 'NVSlideMenuController'\npod 'Mantle'\ntarget 'MyProjectTests' do\n  pod 'Specta', :head\n  pod 'Expecta'\n  pod 'OCMock'\nend\n\u2014\nReply to this email directly or view it on GitHub.\n. I've fixed the issue on a local branch and expect to commit today or this evening.\n\nThat said, it references SenTest classes a lot, so will definitely be affected by the switch to XCTest.\nShould I hold off committing, commit to a non-master branch, or just go ahead?\n\nOn Oct 28, 2013, at 14:57, Tony Arnold notifications@github.com wrote:\nThis is probably going to be the case until #38 is complete. I believe @petejkim is working on it, and targeting a release sometime this week.\n\u2014\nReply to this email directly or view it on GitHub.\n. I just tracked down the final issue, and there doesn't seem to be a way to square the pretty output / custom reporting with XCode's test integration.\n\nI'll keep working on it this evening, but I wouldn't worry about my changes, @petejkim.\n\nOn Oct 28, 2013, at 15:54, Tony Arnold notifications@github.com wrote:\nJust check with @petejkim \u2014 if the changes to fix the problem are big, it might just get in the way of the XCTest work. Personally, I'd be keen to see the fix either way \u2014 maybe push it up into a branch and we can do a [WIP] PR on it?\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry! This has been fixed in the xctest branch.\n\nI'm willing to backport it to master, but we may want to settle on a release plan for the xctest stuff. It would be good to have a working non-xctest version so users who can't upgrade can still use Specta.\n\nOn Nov 6, 2013, at 7:39, Leo Cassarani notifications@github.com wrote:\nThanks for taking a look at this, @nerdyc. Is there anything I can do to get Xcode integration working again, for the time being? Should I expect your fixes to be merged into master and a new version to be released any time soon?\n\u2014\nReply to this email directly or view it on GitHub.\n. My tests crash with XCTest + ARC when it tries to invoke global +beforeEach and +afterEach methods. For some reason ARC is attempting to retain the class or something:\n\n\nHas anyone else encountered this problem?\nI was able to fix this by invoking the methods directly, instead of using the objc runtime functions. But curious if nobody else saw this, or is using this feature.\n. @petejkim I noticed that you pulled the custom reporters I added to Specta awhile back. This is sad, but probably necessary given that Xcode and other tools are completely dependent on the output format.\nAny objection if I try to find a way to add this back in as an opt-in, off-by-default feature? I find Xcode's output format completely obscures any other test output, which makes it hard to track down any error messages reported inline.\n. Yes I am! I missed that issue.\nNow that I see others like that format, I'll work on restoring it.\n\nOn Nov 2, 2013, at 11:02, Robert B\u00f6hnke notifications@github.com wrote:\n@nerdyc are you speaking about #54 ?\n\u2014\nReply to this email directly or view it on GitHub.\n. The default reporter format that I built breaks Xcode's test integration in Xcode 5.0.1. Since Xcode seems to be finicky about the format, Specta should modify the output format as little as possible by default.\n\nI'll work on restoring this feature, but the new format may be much closer to Xcode's default.\n. My commit above re-adds support for custom reporters, but the format has changed to be compatible with Xcode's test integration features.\nThis is a much simpler implementation than the original. SPTReporter is simply a subclass of XCTestLog so its output should track any changes made by the Xcode team. As just another observer, it should play well with any 3rd-party observers too.\nThe only non-standard aspect is that I was forced to swizzle -[XCTestLog startObserving] and -[XCTestLog stopObserving]. There was no other way to force XCTest to use SPTReporter without requiring users to explicitly add the -XCTestObserverClass default to their test scheme.\n. I often compare arrays by equality, so the failure message will include the mis-matched values. Something like:\nobjc\nexpect([array valueForKey:@\"someValue\"]).to.equal(expectedValues);\nThe ease of constructing expectedValues sometimes isn't easy. I've sometimes included the array index in the comparison simply to include it in the text output. \nobjc\nexpect([ @(i), [array[i] someValue] ]).to.equal([@(i), @1]);\nLastly, you can write custom matchers in expecta which might be more expressive if you have lots of expectations:\nobjc\nexpect(array[i]).to.beValidUser();\nThat makes the test much more readable, even if the matchers aren't used that often. If you don't want to write a matcher, there's always a C function too!\n. ",
    "twobitlabs": "OK, I see they do get run before nested specs. I had mistakenly specified a nested spec using describe instead of specify or it.\n. OK, I see they do get run before nested specs. I had mistakenly specified a nested spec using describe instead of specify or it.\n. ",
    "drouchy": "I'm facing exactly the same issue.\n. I've got a shared example:\n``` objective-c\nsharedExamplesFor(@\"a group item\", ^(NSDictionary *data) {\n  it(@\"should be a group item\", ^{\n    id item = data[@\"item\"] ;\n    bool isGroupItem = [data[@\"delegate\"] outlineView: nil isGroupItem:item] ;\n    bool expectedValue = [data[@\"isGroupItem\"] boolValue] ;\nexpect(isGroupItem).to.equal(expectedValue) ;\n\n}) ;\n});\n```\nand the spec:\n``` objective-c\ndescribe(@\"outlineView:isGroupItem: & outlineView:shouldSelectItem\", ^{\n    __block Project project ;\n    __block ApiProjectOulineViewDelegate delegate ;\nbeforeEach(^{\n  project = [[Project alloc] init] ;\n  delegate = [[ ApiProjectOulineViewDelegate alloc] init] ;\n}) ;\n\ndescribe(@\"the services\", ^{\n  itShouldBehaveLike(@\"a group item\", @{  @\"item\": project.services,\n                                          @\"delegate\": delegate,\n                                          @\"isGroupItem\": [NSNumber numberWithBool:YES]}) ;\n}) ;\n\n}) ;\n```\nI've checked with the debugger, the beforeEach is not called, the variables project & delegate are nil.\n. Thanks for the quick support. Although now I noticed a really weird bug, kind of hard to explain.\nFor the sake of the explanation, the first test should always fail.\nthe shared example:\n``` objective-c\nsharedExamplesFor(@\"a group item\", ^(NSDictionary *data) {\n  it(@\"should be a group item\", ^{\n    id item = data[@\"item\"] ;\n    bool isGroupItem = [data[@\"delegate\"] outlineView: nil isGroupItem:item] ;\n    bool expectedValue = [data[@\"isGroupItem\"] boolValue] ;\nexpect(isGroupItem).to.equal(expectedValue) ;\n\n}) ;\n});\n```\nand the specs:\n``` objective-c\n  beforeEach(^{\n    project = [[Project alloc] init] ;\n    delegate = [[ApiProjectOulineViewDelegate alloc] init] ;\n  }) ;\ndescribe(@\"a service\", ^{\n  itShouldBehaveLike(@\"a group item\", ^{ return @{  @\"item\": [[Service alloc] init],\n                                         @\"delegate\": delegate,\n                                         @\"isGroupItem\": [NSNumber numberWithBool:NO]} ; }) ;\n}) ;\n\ndescribe(@\"a resource\", ^{\n  itShouldBehaveLike(@\"a group item\", @{ @\"item\": [[Resource alloc] init],\n                                         @\"delegate\": [[ApiProjectOulineViewDelegate alloc] init],\n                                         @\"isGroupItem\": [NSNumber numberWithBool:NO]}) ;\n}) ;\n\n```\nNotice the second specs does not use the variable delegate but create a new one. In that case, I've got an expected failure for the first spec.\nnow if I change the second spec to use the delegate block variable, but I forget to use a block to return the dictionary:\n``` objective-c\n  beforeEach(^{\n    project = [[Project alloc] init] ;\n    delegate = [[ApiProjectOulineViewDelegate alloc] init] ;\n  }) ;\ndescribe(@\"a service\", ^{\n      itShouldBehaveLike(@\"a group item\", ^{ return @{  @\"item\": [[Service alloc] init],\n                                             @\"delegate\": delegate,\n                                             @\"isGroupItem\": [NSNumber numberWithBool:NO]} ; }) ;\n    }) ;\ndescribe(@\"a resource\", ^{\n  itShouldBehaveLike(@\"a group item\", @{ @\"item\": [[Resource alloc] init], // I forgot to change add the block\n                                         @\"delegate\": delegate,\n                                         @\"isGroupItem\": [NSNumber numberWithBool:NO]}) ;\n}) ;\n\n```\nNow I've got no failure, and the shared example is never executed, so silently the specs are not executed anymore.\nDavid\n. I've checked with breakpoints, the tests don't pass, they are not executed at all. Specially the first isShouldBehaveLike should fail - I intentionally returned a incorrect value -\nBut in that case I've got a result \"Test Succeeded\" which is wrong.\n. I've doubled check with some NSLogs, the it blocks in the shared example are not executed at alls\n. Ok I found the issue, just had to closely look at the output.\nWhen I forgot the block, in fact the complete spec is ignored due to an error in the dictionary\n2012-10-01 08:36:25.500 otest[43012:303] Skipping ApiProjectOulineViewDelegateSpec (*** -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]: attempt to insert nil object from objects[0])\nInstead of ignoring the spec, it might be better to show on error, being skipped there is no error reported\n. There is exactly the same behaviour when a OCMock expectation fails - an exception is raised - . The issue navigator show the issue, but not the code editor.\n. I'm facing exactly the same issue.\n. I've got a shared example:\n``` objective-c\nsharedExamplesFor(@\"a group item\", ^(NSDictionary *data) {\n  it(@\"should be a group item\", ^{\n    id item = data[@\"item\"] ;\n    bool isGroupItem = [data[@\"delegate\"] outlineView: nil isGroupItem:item] ;\n    bool expectedValue = [data[@\"isGroupItem\"] boolValue] ;\nexpect(isGroupItem).to.equal(expectedValue) ;\n\n}) ;\n});\n```\nand the spec:\n``` objective-c\ndescribe(@\"outlineView:isGroupItem: & outlineView:shouldSelectItem\", ^{\n    __block Project project ;\n    __block ApiProjectOulineViewDelegate delegate ;\nbeforeEach(^{\n  project = [[Project alloc] init] ;\n  delegate = [[ ApiProjectOulineViewDelegate alloc] init] ;\n}) ;\n\ndescribe(@\"the services\", ^{\n  itShouldBehaveLike(@\"a group item\", @{  @\"item\": project.services,\n                                          @\"delegate\": delegate,\n                                          @\"isGroupItem\": [NSNumber numberWithBool:YES]}) ;\n}) ;\n\n}) ;\n```\nI've checked with the debugger, the beforeEach is not called, the variables project & delegate are nil.\n. Thanks for the quick support. Although now I noticed a really weird bug, kind of hard to explain.\nFor the sake of the explanation, the first test should always fail.\nthe shared example:\n``` objective-c\nsharedExamplesFor(@\"a group item\", ^(NSDictionary *data) {\n  it(@\"should be a group item\", ^{\n    id item = data[@\"item\"] ;\n    bool isGroupItem = [data[@\"delegate\"] outlineView: nil isGroupItem:item] ;\n    bool expectedValue = [data[@\"isGroupItem\"] boolValue] ;\nexpect(isGroupItem).to.equal(expectedValue) ;\n\n}) ;\n});\n```\nand the specs:\n``` objective-c\n  beforeEach(^{\n    project = [[Project alloc] init] ;\n    delegate = [[ApiProjectOulineViewDelegate alloc] init] ;\n  }) ;\ndescribe(@\"a service\", ^{\n  itShouldBehaveLike(@\"a group item\", ^{ return @{  @\"item\": [[Service alloc] init],\n                                         @\"delegate\": delegate,\n                                         @\"isGroupItem\": [NSNumber numberWithBool:NO]} ; }) ;\n}) ;\n\ndescribe(@\"a resource\", ^{\n  itShouldBehaveLike(@\"a group item\", @{ @\"item\": [[Resource alloc] init],\n                                         @\"delegate\": [[ApiProjectOulineViewDelegate alloc] init],\n                                         @\"isGroupItem\": [NSNumber numberWithBool:NO]}) ;\n}) ;\n\n```\nNotice the second specs does not use the variable delegate but create a new one. In that case, I've got an expected failure for the first spec.\nnow if I change the second spec to use the delegate block variable, but I forget to use a block to return the dictionary:\n``` objective-c\n  beforeEach(^{\n    project = [[Project alloc] init] ;\n    delegate = [[ApiProjectOulineViewDelegate alloc] init] ;\n  }) ;\ndescribe(@\"a service\", ^{\n      itShouldBehaveLike(@\"a group item\", ^{ return @{  @\"item\": [[Service alloc] init],\n                                             @\"delegate\": delegate,\n                                             @\"isGroupItem\": [NSNumber numberWithBool:NO]} ; }) ;\n    }) ;\ndescribe(@\"a resource\", ^{\n  itShouldBehaveLike(@\"a group item\", @{ @\"item\": [[Resource alloc] init], // I forgot to change add the block\n                                         @\"delegate\": delegate,\n                                         @\"isGroupItem\": [NSNumber numberWithBool:NO]}) ;\n}) ;\n\n```\nNow I've got no failure, and the shared example is never executed, so silently the specs are not executed anymore.\nDavid\n. I've checked with breakpoints, the tests don't pass, they are not executed at all. Specially the first isShouldBehaveLike should fail - I intentionally returned a incorrect value -\nBut in that case I've got a result \"Test Succeeded\" which is wrong.\n. I've doubled check with some NSLogs, the it blocks in the shared example are not executed at alls\n. Ok I found the issue, just had to closely look at the output.\nWhen I forgot the block, in fact the complete spec is ignored due to an error in the dictionary\n2012-10-01 08:36:25.500 otest[43012:303] Skipping ApiProjectOulineViewDelegateSpec (*** -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]: attempt to insert nil object from objects[0])\nInstead of ignoring the spec, it might be better to show on error, being skipped there is no error reported\n. There is exactly the same behaviour when a OCMock expectation fails - an exception is raised - . The issue navigator show the issue, but not the code editor.\n. ",
    "orta": "This is 4 years old now, I'm going to close it, it's either probably been fixed, or not a priority for everyone \ud83d\udc4d \n. Closing due to lack of a response.\n. related https://github.com/specta/specta/issues/96 and https://github.com/specta/specta/issues/123\n. Given this thread is mainly about delivering fails on the main thread, I'm closing this as it was added by #133\n. :+1: whoah\n. Works for me \ud83d\udc4d - less is less.\n. Ace.\n. Closing, running Specta tests on the command line is nothing unique in this respect anymore.\n. Fixed :+1: \n. In our codebase we ended up removing activelyWaitFor to try and keep the test suite simpler, going to say you can use this if you'd like, but probably won't integrate into Specta.\n. @tangphillip presuming this is based on the Meetup codebase, does this problem still exist?\n. We have a lot of things like this in the Artsy testing codebases. Going to close for now. If people are seeing this, please chime in.\n. These are expecta extensions, but you can do some of these, as I've made a Expecta+OCMock lib.\n. ^ closing, older versions exist.\n. This is fixed :+1:  and in\n. I think that makes sense @paweldudek :+1: \n. https://github.com/specta/specta/issues/116 is also related to this, my gut says the protocol might be a better way to do it. If Specta is a framework then communication between the testing harness and your app is odd.\n. Fixed via #131 - thanks @cimbul for putting us on the right path :dancers: \n. > AFAIK, CocoaPods builds every pod as a static library.\nATM. We'll be generating frameworks for 8+ projects in the future, source\n. OK, I'm closing this. A stable 0.3.x is out, I think Swift support is it's own issue. Which I've made: https://github.com/specta/specta/issues/130\n. There's some interesting work done on quick around this: https://github.com/Quick/Quick/pull/233\n. We've lived without it for this long, I'm OK with it not happening now.\n. I think think a test launch argument probably makes the most sense\n\nI'm happy for that to also shuffle the classes, the more shuffling the merrier IMO :dancers: \n. \n. There's been two of these PRs - it should probably get merged so anyone using :git has a working version.\n95\n. Agree, documentation issue.\n. Related: https://github.com/specta/specta/issues/123\n. This is merged with #133 \n. Closing, looks resolved.\n. This is working for me in Xcode 6.1.1\n\n. I don't think there's much Specta can do to improve this though this issue specifically is an Expecta issue, it uses all the official APIs for failing with lines/files.  Specta generating test cases that conform to how XCTest would, I think the flakiness is basically Xcode.\n. This is all cool now. I just released 0.3.2.\n. This might fit better as a custom Expecta matcher :+1: - check some examples here\n. closing as a dupe of #85 - this seems to be based on the phase of the moon and how strong venus' pull is.\n. I think this is off topic, plus pretty much resolved. Closing.\n. Given that frameworks are the future for the library I think it makes sense to keep this out as it'll be confusing for people that it won't work for. Thanks for the PR @twobitlabs \n. PR merged. Though @tonyarnold's point about removal is probably legit.\n. Ran locally, works for me where it doesn't on master :+1: \n```\n=== GENERATE UNIVERSAL iOS BINARY (Device/Simulator) ===\nRunning mkdir -p 'Specta/build/Release-ios-universal'...\nRunning cp -a 'Specta/build/Release-iphoneos/Specta.framework' 'Specta/build/Release-ios-universal'...\nRunning cp -a 'Specta/build/Release-iphoneos/libSpecta.a' 'Specta/build/Release-ios-universal'...\nRunning lipo -create 'Specta/build/Release-iphoneos/Specta.framework/Specta' 'Specta/build/Release-iphonesimulator/Specta.framework/Specta' -output 'Specta/build/Release-ios-universal/Specta.framework/Specta'...\nRunning lipo -create 'Specta/build/Release-iphoneos/libSpecta.a' 'Specta/build/Release-iphonesimulator/libSpecta.a' -output 'Specta/build/Release-ios-universal/libSpecta.a'...\n=== CODESIGN iOS FRAMEWORK ===\nRunning /usr/bin/codesign --force --sign 'iPhone Developer: Caroline Lau (AE9AEY2F5Z)' --resource-rules='Specta/build/Release-ios-universal/Specta.framework'/ResourceRules.plist 'Specta/build/Release-ios-universal/Specta.framework'...\nWarning: --resource-rules has been deprecated in Mac OS X >= 10.10!\n=== COPY PRODUCTS ===\nRunning yes | rm -rf Products...\nRunning mkdir -p Products/ios...\nRunning mkdir -p Products/osx...\nRunning cp -a Specta/build/Release/Specta.framework Products/osx...\nRunning cp -a Specta/build/Release/libSpecta.a Products/osx...\nRunning cp -a Specta/build/Release-ios-universal/Specta.framework Products/ios...\nRunning cp -a Specta/build/Release-ios-universal/libSpecta.a Products/ios...\nRunning cp -a Specta/build/Release/usr/local/include/* Products...\n BUILD SUCCEEDED \n```\n. I think https://github.com/specta/specta/pull/120 has fixed this.\n. Fixed in #131\n( You can add support in your project to make it skip any specific class )\n. Any ideas on this? I've not seen this in a long time\n\n. closing as a dupe of https://github.com/specta/specta/issues/85 - which has more info\n. @jsteinberg Can you provide an example of how this was failing? The logic now seems to be inversed\n. Alright, think this is better overall :+1: \n. This looks good, discussed it on twitter. Thanks @neonacho\n. Expecta will need a similar PR I think.\n. Yep: https://github.com/specta/expecta/blob/master/Expecta/ExpectaSupport.m#L161-L175\nWould love a PR\n. I think this makes sense, would love to see a PR :+1: \n. I, conveniently, have the power to add people to push podspecs, currently only Peter / Blake can push, would anyone else (who is in the org) want adding?\n. Hah totally was worth it. I added you for daring to speak up. \nI tested running Specta as a framework, it works as expected, so I'm removing the _spt_it to it out, that is a requirement for Swift support, but swift support should be outside of the scope of cleanup IMO. \n\n. > means that there's some OCUnit support still out there, but I can find any. Could you shed some light on what you mean by that?\nThis might be more Expecta things also! I'll tick it.\n. Alright, I'm closing this issue. Looks like @paweldudek did most of the code work, thanks :tada: !\nOnce Expecta has caught up I'll tag a 1.0.0 release to coincide with that. Then maybe take a look at the potential for a Swift Specta separate lib, and rely on swift matcher libs.\n. Hey, awesome work @paweldudek !\n. this is interesting - master is running additional tests which include sequence tests which are failing, https://travis-ci.org/specta/specta/builds/50258272\n. Makes sense, digging right now :+1: \n. Yeah, that's definitely it.\n. Day one making changes and something already needs to be reverted :dancers: \n. I think the tradeoff of \n\nAll Obj-C global functions are now prefixed with spt_. This is to provide unprefixed versions functions of the same name for Swift. It is recommended to add shorthands to your Obj-C test helper header. The  rest of this document assumes that shorthands are used.\n\nIs quite serious.\n. > I think we can get around the issue by creating a separate framework (e.g. Specta-Swift) that uses the objc Specta framework.\nThink this is a great idea. Suspecta\n. OK, think this is also fine to be closed, I think encouraging Quick/Nimble as a great option for Swift support is probably the best call.\n. @paweldudek thanks for doing this!\nI agree with @danpalmer - looking at the screenshot in this issue: https://github.com/specta/specta/issues/116 you see the issue raised at the place in code that we're making changes in. So we could add inline documentation in Specta/Specta/SPTExampleGroup.m before line 26 along the lines of:\n// Specta supports blacklisting specific Classes from being treated as before/after helper classes\n// to add an new class to the list add the following lines to a project initialiser ( e.g. App Delegate callbacks )\n//\n//  Class accessbilitySafeCategoryClass = NSClassFromString(@\"MyClass\");\n//  class_addProtocol(accessbilitySafeCategoryClass, @protocol(SPTExcludeGlobalBeforeAfterEach));\n//\nHow does that sound?\n. I think this is :+1: \n. re:README, I'm 60/40 towards not adding it. \nI don't think it's something you're going to necessarily need to know about library. More likely that it comes up and you see the crash then you've got a reference point. The counter argument though is that you could be just running the framework and not have source code access, in which case it might be useful.\n. Looking through the builds on travis I don't see any flakiness anymore.\n. Think this is something we should do on Expecta too? ( 1 & 2 )\n. I, personally, don't think so, but it has been in since commit 1, https://github.com/specta/specta/commit/a24a1fd3f4710ff9e66beef19d5b528100031fcc#diff-28827b6c203d48ba1b463ab3854fbe9aR30 \n. OK, I'm good for this then :+1: - THANKS!\n\n. Cool, this makes sense in relation with #134 \n. CI issue may have been https://github.com/specta/specta/issues/132\n. Yeah, this makes sense :+1: \n. This is a stack overflow question really as it's a usage question. However, your answer is in __block and the before methods. Take a look through these tests ( and the rest if you're interested).\n. We have a similar thing with CocoaPods, even including a way of highlighting that you're read the contributing guides in your issue, so we know to put more effort in.\nThink this is a good idea.\n. Done!\n. I think Specta has semi-accidentally become one of the most widespread testing framework due to it being the default when creating a new CocoaPod.\nMy initial worry was a lack of releases and a sense of stagnation, that I feel is gone. I think this makes sense for a wiki page though!\n. OK, I'm calling this one as not needed, there's at least 4,000 test targets using Specta now \ud83d\udc6f \n. There is work from Quick on this: https://github.com/Quick/Quick/pull/233\n. Ah yeah, thanks @mokagio \n. This looks good, thanks a lot @dbarden :+1: \n. Yeah!\n. Capital P on CocoaPods please in the title. Other than that looks good to merge.\n. :+1: \n. I think we should break it, and call the next release 1.0.0 with whitelisting. Feels like a weird feature in general to me.\n. The 1.0.0 is an ideological thing, Specta is very production worthy. Its version should reflect that.\n. Can you make a changeling note too please?\n. @modocache / @paweldudek / @robb  - I'm happy with this from a end-user perspective, if it's good to go, feel free to hit merge.\n. :D\n. A great contribution @dasmer - you can get a high five when I see you next.\n. #161 may have fixed this\n. I think this will require changing the Rakefile yeah, we shouldn't skip running iOS on CI. If this is the only way to support Carthage correctly I guess it should be done then. \n. The CI rake task has always ran the iOS schemes,  The command \"bundle exec rake specs:ios\" exited with 1. - I'd rather not lose those tests, given that iOS is probably the context most tests are being ran in.\nThis is the command it is running, it's probably just a matter of re-hooking it up somewhere else:\nRunning xcrun xcodebuild -workspace Specta.xcworkspace -scheme Specta-iOS -configuration Release test SYMROOT=build | xcpretty -c && exit ${PIPESTATUS[0]}...\nxcodebuild: error: Scheme Specta-iOS is not currently configured for the test action.\n. Yeah, that should be fine :+1: \n. There are tests around unexpected Exceptions, in UnexpectedExceptionTest.m that pass. \nDo you have some reproducible code? \n. Adding this to the README worries me, it's a lot of noise. Could we change the project, and inject in the config files for the code coverage in the rake task?\n. This is totally cool from my perspective :+1: \n. Hrm, can you verify that the test are actually being ran? Xcode still tells you the names of the tests I believe, but they're just not ran.\n. Alright, let's do it :+1: \n. This is released in 1.0.1\n. It's showing a green tick for the test that successfully passed, but not for the missing result. Perhaps we need to hook in to uncaught exceptions and raise an XCTFail. Any chance you can post the crashing code or can make a PR tackling this?\n. Cool, this looks good to me then!\n. This is released in 1.0.2\n. Thanks for contributing!\n. Ace, thanks @coverback \n. This is released in 1.0.2\n. A PR is far more useful than a +1, please don't do them. Specta is built in a language you're writing code in, if you can diagnose a problem you can help contribute an answer.\n. Seriously? \n. TBH, the build setting could probably be removed from Specta and sent in via the CI test command, which is how we do it at Artsy.\n. specifically adding GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES to the xcodebuild command\n. I'm not sure about this, Spectra's responsibilities are to provide a structure for the tests and projects like expecta offer matchers separately. This de-clarifys the feature-set in a way I'm not sold on. Anyone else got opinions?\n. @WilliamZang as long as it's pretty generic in Specta, sure :+1: \n. Closing due to inactivity :+1: feel free to re-open.\n. @modocache and I were looking at this earlier with respect to Quick, not sure if he found anything\n. After looking at all the Quick/Nimble PRs around this, no-one came up with anything - I'm going to close this PR, no need to keep fighting that battle, when Xcode 8 comes out, we can see if those radars have helped.\n. @pvinis if you want to look at a collection of Specta/Expecta tests, you can check out: https://github.com/artsy/eigen/tree/master/Artsy_Tests\n. If you put it outside the SpecBegin and SpecEnd blocks then you can treat it like any objective-c file, including methods, classes etc.\n. This seems reasonable to me :+1: \n. This makes sense, would happily accept PRs on this :+1: \n. There is no better way, TBH, I like both of the approaches that Kiwi does. The warning and the output. We've seen a few \"user issues\" over time because of this and I think Kiwis solves it pretty elegantly. \nAny chance of a PR adding this?\n. Ace!\n. :+1: \n. @modocache any ideas?\n. This is fixed in master :+1: \n. Seems legit, don't think anyone is gonna be submitting apps with this to the store.\n. Thanks @guidomb \n. When I checked this out, it looked like they've been in since 2013 - likely were added to do something that isn't needed anymore. :+1: \n. sigh\n. OK, I'm cool with migrating to Xcode 7 on CI :+1: \n. Importing this is basically a major release bump, given that it breaks Xcode6 compatibility after looking at #182 \n. Fixed by #186 \n. Yeah, this is a usage problem, describes  should be used for grouping, and it is used for the tests. In implementation terms an it represents an XCTestCase, and they cannot be built inside each other.\n. This feels good to me then :+1: \n. New version deployed.\n\n. also, @melote - please don't go around +1ing a bunch of things, as someone with enough github email a bunch of +1s only make it harder to decide what I want to work on.\n. :+1: \n. I'm afraid not, I don't feel comfortable shipping binaries, personally.\n. Probably best to use specta's waitUntil:\nit(@\"should do some stuff asynchronously\", ^{\n    waitUntil(^(DoneCallback done) {\n      // Async example blocks need to invoke done() callback.\n      done();\n    });\n  });\nGiven that we don't expose XCTest anywhere else. \n. Calling as done, we've only used waitUntil in multiple codebases and been happy. Would be happy to take PRs on allowing the usage of XCTExpectations though.\n. That's handled by matcher libraries normally, https://github.com/specta/expecta#asynchronous-testing\n. The same thing happens in Quick, no-one has figured it out I'm afraid. You're welcome to try dig, but I think you'll need to be looking in Xcode.\n. I haven't raised one, happy to have others do it :+1: \n. Duped \ud83d\udc4d \n. Looks like you need code signing.\n. Not too sure what we can do here, we're using Apple's API that says the LOC and the file that the error occurred on. Otherwise the warnings / error labels in Xcode would work.\n. This is a duplicate of #187 \n. You might be the first to look into this, any chance you can dig in and get us a PR?\n. I don't know much about how UI tests work, do they have constraints around threading? \nIt might be worth seeing if an XCTestExpectation works (outside of Specta) in UITesting\n. Hah, thanks for digging in @blackivory86 !\n. Given that no-one should be pushing Specta to the app store in their app, this seems :+1: to me\n. Awesome! Thanks!\n. Works for me :+1: \n. :+1: Looks good for me.\n. I'm not really sure this is something we should change, it feels like a change in xctool has cause this which is working fine in xcodebuild etc. If quick is having the same problems, it seems like the problem really lies in xctool.\n. I'm not really sure, I didn't write that back in the day, I'm just making sure that it's staying working. You're welcome to take a look around the source.\n. Yeah, code you want to run inside the describe/context blocks should always be running inside before/after/it blocks: for example - unless it's OK to set once on app startup e.g..\n. I guess xctool might load the test bundle, try gather all the it blocks before it's ready to run them so they can make assumptions for the tool itself, perhaps there's something getting something created and nil'd when it's not expecting it. Hard to say.\n. Sounds like it's worth making a PR to the podspec to make sure that tvOS support does not have bit code disabled, would you like to do that?\n. \nHappy to add the example name ~~it is both on the line above and the line below too~~  - hrm that might be by-product of how Specta tests itself. I'm going to add the name.\n. :+1: \n. :+1: \n. I did not know about [ci skip]\n. No plans for it, it's been a pretty niche platform. Would definitely merge a PR adding it to the Podspec after you've tested it.\n. :+1:  can't assign people not in the org, but consider it yours\n. Gonna call this one for now, you're welcome to re-open via a PR.\n. AppCode has special support for Kiwi, but not for Specta alas.\n. Yep \ud83d\udc6f \n. Thanks\n. Sure, seems reasonable to me :+1: \n. \ud83d\udc4d \n. I'm afraid I don't really know too much about how BFTask works, and from the looks of it, neither does any of the other contributors. It might be more prudent to ask if there's anything that BFTask does that might have issues around running inside a separate runloop.\n. Thanks!\n. Not really, Xcode opens the application and then tells the test runner that it should start and eventually to close. \nThe other side of this, is that loading your app up from scratch takes ~2-3 seconds, I don't think anyone wants to wait that long between each test. maybe between each test suite, but still, it's outside of Specta/Kiwis scope - you'd need to replace the XCTest runner, or have an Xcode plugin to pull it off I'm afraid.\n. Note: there are no end-user changes here, only fixes to the Specs.\n. \ud83d\udc4d works for me - thanks. Sure thing \ud83d\udc4d . Yep - this looks good, want to add a changelog entry and I'll ship a release?. cool, shipped\n\n. Yeah, this looks right to me \ud83d\udc4d . This is shipped in 1.0.7. Sorry for the delay, lots of projects to manage. Is this because of a specific build warning? I've been running Specta fine in Xcode 9. I'm happy to have this though.. This is shipped in 1.0.7. This is 4 years old now, I'm going to close it, it's either probably been fixed, or not a priority for everyone \ud83d\udc4d \n. Closing due to lack of a response.\n. related https://github.com/specta/specta/issues/96 and https://github.com/specta/specta/issues/123\n. Given this thread is mainly about delivering fails on the main thread, I'm closing this as it was added by #133\n. :+1: whoah\n. Works for me \ud83d\udc4d - less is less.\n. Ace.\n. Closing, running Specta tests on the command line is nothing unique in this respect anymore.\n. Fixed :+1: \n. In our codebase we ended up removing activelyWaitFor to try and keep the test suite simpler, going to say you can use this if you'd like, but probably won't integrate into Specta.\n. @tangphillip presuming this is based on the Meetup codebase, does this problem still exist?\n. We have a lot of things like this in the Artsy testing codebases. Going to close for now. If people are seeing this, please chime in.\n. These are expecta extensions, but you can do some of these, as I've made a Expecta+OCMock lib.\n. ^ closing, older versions exist.\n. This is fixed :+1:  and in\n. I think that makes sense @paweldudek :+1: \n. https://github.com/specta/specta/issues/116 is also related to this, my gut says the protocol might be a better way to do it. If Specta is a framework then communication between the testing harness and your app is odd.\n. Fixed via #131 - thanks @cimbul for putting us on the right path :dancers: \n. > AFAIK, CocoaPods builds every pod as a static library.\nATM. We'll be generating frameworks for 8+ projects in the future, source\n. OK, I'm closing this. A stable 0.3.x is out, I think Swift support is it's own issue. Which I've made: https://github.com/specta/specta/issues/130\n. There's some interesting work done on quick around this: https://github.com/Quick/Quick/pull/233\n. We've lived without it for this long, I'm OK with it not happening now.\n. I think think a test launch argument probably makes the most sense\n\nI'm happy for that to also shuffle the classes, the more shuffling the merrier IMO :dancers: \n. \n. There's been two of these PRs - it should probably get merged so anyone using :git has a working version.\n95\n. Agree, documentation issue.\n. Related: https://github.com/specta/specta/issues/123\n. This is merged with #133 \n. Closing, looks resolved.\n. This is working for me in Xcode 6.1.1\n\n. I don't think there's much Specta can do to improve this though this issue specifically is an Expecta issue, it uses all the official APIs for failing with lines/files.  Specta generating test cases that conform to how XCTest would, I think the flakiness is basically Xcode.\n. This is all cool now. I just released 0.3.2.\n. This might fit better as a custom Expecta matcher :+1: - check some examples here\n. closing as a dupe of #85 - this seems to be based on the phase of the moon and how strong venus' pull is.\n. I think this is off topic, plus pretty much resolved. Closing.\n. Given that frameworks are the future for the library I think it makes sense to keep this out as it'll be confusing for people that it won't work for. Thanks for the PR @twobitlabs \n. PR merged. Though @tonyarnold's point about removal is probably legit.\n. Ran locally, works for me where it doesn't on master :+1: \n```\n=== GENERATE UNIVERSAL iOS BINARY (Device/Simulator) ===\nRunning mkdir -p 'Specta/build/Release-ios-universal'...\nRunning cp -a 'Specta/build/Release-iphoneos/Specta.framework' 'Specta/build/Release-ios-universal'...\nRunning cp -a 'Specta/build/Release-iphoneos/libSpecta.a' 'Specta/build/Release-ios-universal'...\nRunning lipo -create 'Specta/build/Release-iphoneos/Specta.framework/Specta' 'Specta/build/Release-iphonesimulator/Specta.framework/Specta' -output 'Specta/build/Release-ios-universal/Specta.framework/Specta'...\nRunning lipo -create 'Specta/build/Release-iphoneos/libSpecta.a' 'Specta/build/Release-iphonesimulator/libSpecta.a' -output 'Specta/build/Release-ios-universal/libSpecta.a'...\n=== CODESIGN iOS FRAMEWORK ===\nRunning /usr/bin/codesign --force --sign 'iPhone Developer: Caroline Lau (AE9AEY2F5Z)' --resource-rules='Specta/build/Release-ios-universal/Specta.framework'/ResourceRules.plist 'Specta/build/Release-ios-universal/Specta.framework'...\nWarning: --resource-rules has been deprecated in Mac OS X >= 10.10!\n=== COPY PRODUCTS ===\nRunning yes | rm -rf Products...\nRunning mkdir -p Products/ios...\nRunning mkdir -p Products/osx...\nRunning cp -a Specta/build/Release/Specta.framework Products/osx...\nRunning cp -a Specta/build/Release/libSpecta.a Products/osx...\nRunning cp -a Specta/build/Release-ios-universal/Specta.framework Products/ios...\nRunning cp -a Specta/build/Release-ios-universal/libSpecta.a Products/ios...\nRunning cp -a Specta/build/Release/usr/local/include/* Products...\n BUILD SUCCEEDED \n```\n. I think https://github.com/specta/specta/pull/120 has fixed this.\n. Fixed in #131\n( You can add support in your project to make it skip any specific class )\n. Any ideas on this? I've not seen this in a long time\n\n. closing as a dupe of https://github.com/specta/specta/issues/85 - which has more info\n. @jsteinberg Can you provide an example of how this was failing? The logic now seems to be inversed\n. Alright, think this is better overall :+1: \n. This looks good, discussed it on twitter. Thanks @neonacho\n. Expecta will need a similar PR I think.\n. Yep: https://github.com/specta/expecta/blob/master/Expecta/ExpectaSupport.m#L161-L175\nWould love a PR\n. I think this makes sense, would love to see a PR :+1: \n. I, conveniently, have the power to add people to push podspecs, currently only Peter / Blake can push, would anyone else (who is in the org) want adding?\n. Hah totally was worth it. I added you for daring to speak up. \nI tested running Specta as a framework, it works as expected, so I'm removing the _spt_it to it out, that is a requirement for Swift support, but swift support should be outside of the scope of cleanup IMO. \n\n. > means that there's some OCUnit support still out there, but I can find any. Could you shed some light on what you mean by that?\nThis might be more Expecta things also! I'll tick it.\n. Alright, I'm closing this issue. Looks like @paweldudek did most of the code work, thanks :tada: !\nOnce Expecta has caught up I'll tag a 1.0.0 release to coincide with that. Then maybe take a look at the potential for a Swift Specta separate lib, and rely on swift matcher libs.\n. Hey, awesome work @paweldudek !\n. this is interesting - master is running additional tests which include sequence tests which are failing, https://travis-ci.org/specta/specta/builds/50258272\n. Makes sense, digging right now :+1: \n. Yeah, that's definitely it.\n. Day one making changes and something already needs to be reverted :dancers: \n. I think the tradeoff of \n\nAll Obj-C global functions are now prefixed with spt_. This is to provide unprefixed versions functions of the same name for Swift. It is recommended to add shorthands to your Obj-C test helper header. The  rest of this document assumes that shorthands are used.\n\nIs quite serious.\n. > I think we can get around the issue by creating a separate framework (e.g. Specta-Swift) that uses the objc Specta framework.\nThink this is a great idea. Suspecta\n. OK, think this is also fine to be closed, I think encouraging Quick/Nimble as a great option for Swift support is probably the best call.\n. @paweldudek thanks for doing this!\nI agree with @danpalmer - looking at the screenshot in this issue: https://github.com/specta/specta/issues/116 you see the issue raised at the place in code that we're making changes in. So we could add inline documentation in Specta/Specta/SPTExampleGroup.m before line 26 along the lines of:\n// Specta supports blacklisting specific Classes from being treated as before/after helper classes\n// to add an new class to the list add the following lines to a project initialiser ( e.g. App Delegate callbacks )\n//\n//  Class accessbilitySafeCategoryClass = NSClassFromString(@\"MyClass\");\n//  class_addProtocol(accessbilitySafeCategoryClass, @protocol(SPTExcludeGlobalBeforeAfterEach));\n//\nHow does that sound?\n. I think this is :+1: \n. re:README, I'm 60/40 towards not adding it. \nI don't think it's something you're going to necessarily need to know about library. More likely that it comes up and you see the crash then you've got a reference point. The counter argument though is that you could be just running the framework and not have source code access, in which case it might be useful.\n. Looking through the builds on travis I don't see any flakiness anymore.\n. Think this is something we should do on Expecta too? ( 1 & 2 )\n. I, personally, don't think so, but it has been in since commit 1, https://github.com/specta/specta/commit/a24a1fd3f4710ff9e66beef19d5b528100031fcc#diff-28827b6c203d48ba1b463ab3854fbe9aR30 \n. OK, I'm good for this then :+1: - THANKS!\n\n. Cool, this makes sense in relation with #134 \n. CI issue may have been https://github.com/specta/specta/issues/132\n. Yeah, this makes sense :+1: \n. This is a stack overflow question really as it's a usage question. However, your answer is in __block and the before methods. Take a look through these tests ( and the rest if you're interested).\n. We have a similar thing with CocoaPods, even including a way of highlighting that you're read the contributing guides in your issue, so we know to put more effort in.\nThink this is a good idea.\n. Done!\n. I think Specta has semi-accidentally become one of the most widespread testing framework due to it being the default when creating a new CocoaPod.\nMy initial worry was a lack of releases and a sense of stagnation, that I feel is gone. I think this makes sense for a wiki page though!\n. OK, I'm calling this one as not needed, there's at least 4,000 test targets using Specta now \ud83d\udc6f \n. There is work from Quick on this: https://github.com/Quick/Quick/pull/233\n. Ah yeah, thanks @mokagio \n. This looks good, thanks a lot @dbarden :+1: \n. Yeah!\n. Capital P on CocoaPods please in the title. Other than that looks good to merge.\n. :+1: \n. I think we should break it, and call the next release 1.0.0 with whitelisting. Feels like a weird feature in general to me.\n. The 1.0.0 is an ideological thing, Specta is very production worthy. Its version should reflect that.\n. Can you make a changeling note too please?\n. @modocache / @paweldudek / @robb  - I'm happy with this from a end-user perspective, if it's good to go, feel free to hit merge.\n. :D\n. A great contribution @dasmer - you can get a high five when I see you next.\n. #161 may have fixed this\n. I think this will require changing the Rakefile yeah, we shouldn't skip running iOS on CI. If this is the only way to support Carthage correctly I guess it should be done then. \n. The CI rake task has always ran the iOS schemes,  The command \"bundle exec rake specs:ios\" exited with 1. - I'd rather not lose those tests, given that iOS is probably the context most tests are being ran in.\nThis is the command it is running, it's probably just a matter of re-hooking it up somewhere else:\nRunning xcrun xcodebuild -workspace Specta.xcworkspace -scheme Specta-iOS -configuration Release test SYMROOT=build | xcpretty -c && exit ${PIPESTATUS[0]}...\nxcodebuild: error: Scheme Specta-iOS is not currently configured for the test action.\n. Yeah, that should be fine :+1: \n. There are tests around unexpected Exceptions, in UnexpectedExceptionTest.m that pass. \nDo you have some reproducible code? \n. Adding this to the README worries me, it's a lot of noise. Could we change the project, and inject in the config files for the code coverage in the rake task?\n. This is totally cool from my perspective :+1: \n. Hrm, can you verify that the test are actually being ran? Xcode still tells you the names of the tests I believe, but they're just not ran.\n. Alright, let's do it :+1: \n. This is released in 1.0.1\n. It's showing a green tick for the test that successfully passed, but not for the missing result. Perhaps we need to hook in to uncaught exceptions and raise an XCTFail. Any chance you can post the crashing code or can make a PR tackling this?\n. Cool, this looks good to me then!\n. This is released in 1.0.2\n. Thanks for contributing!\n. Ace, thanks @coverback \n. This is released in 1.0.2\n. A PR is far more useful than a +1, please don't do them. Specta is built in a language you're writing code in, if you can diagnose a problem you can help contribute an answer.\n. Seriously? \n. TBH, the build setting could probably be removed from Specta and sent in via the CI test command, which is how we do it at Artsy.\n. specifically adding GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES to the xcodebuild command\n. I'm not sure about this, Spectra's responsibilities are to provide a structure for the tests and projects like expecta offer matchers separately. This de-clarifys the feature-set in a way I'm not sold on. Anyone else got opinions?\n. @WilliamZang as long as it's pretty generic in Specta, sure :+1: \n. Closing due to inactivity :+1: feel free to re-open.\n. @modocache and I were looking at this earlier with respect to Quick, not sure if he found anything\n. After looking at all the Quick/Nimble PRs around this, no-one came up with anything - I'm going to close this PR, no need to keep fighting that battle, when Xcode 8 comes out, we can see if those radars have helped.\n. @pvinis if you want to look at a collection of Specta/Expecta tests, you can check out: https://github.com/artsy/eigen/tree/master/Artsy_Tests\n. If you put it outside the SpecBegin and SpecEnd blocks then you can treat it like any objective-c file, including methods, classes etc.\n. This seems reasonable to me :+1: \n. This makes sense, would happily accept PRs on this :+1: \n. There is no better way, TBH, I like both of the approaches that Kiwi does. The warning and the output. We've seen a few \"user issues\" over time because of this and I think Kiwis solves it pretty elegantly. \nAny chance of a PR adding this?\n. Ace!\n. :+1: \n. @modocache any ideas?\n. This is fixed in master :+1: \n. Seems legit, don't think anyone is gonna be submitting apps with this to the store.\n. Thanks @guidomb \n. When I checked this out, it looked like they've been in since 2013 - likely were added to do something that isn't needed anymore. :+1: \n. sigh\n. OK, I'm cool with migrating to Xcode 7 on CI :+1: \n. Importing this is basically a major release bump, given that it breaks Xcode6 compatibility after looking at #182 \n. Fixed by #186 \n. Yeah, this is a usage problem, describes  should be used for grouping, and it is used for the tests. In implementation terms an it represents an XCTestCase, and they cannot be built inside each other.\n. This feels good to me then :+1: \n. New version deployed.\n\n. also, @melote - please don't go around +1ing a bunch of things, as someone with enough github email a bunch of +1s only make it harder to decide what I want to work on.\n. :+1: \n. I'm afraid not, I don't feel comfortable shipping binaries, personally.\n. Probably best to use specta's waitUntil:\nit(@\"should do some stuff asynchronously\", ^{\n    waitUntil(^(DoneCallback done) {\n      // Async example blocks need to invoke done() callback.\n      done();\n    });\n  });\nGiven that we don't expose XCTest anywhere else. \n. Calling as done, we've only used waitUntil in multiple codebases and been happy. Would be happy to take PRs on allowing the usage of XCTExpectations though.\n. That's handled by matcher libraries normally, https://github.com/specta/expecta#asynchronous-testing\n. The same thing happens in Quick, no-one has figured it out I'm afraid. You're welcome to try dig, but I think you'll need to be looking in Xcode.\n. I haven't raised one, happy to have others do it :+1: \n. Duped \ud83d\udc4d \n. Looks like you need code signing.\n. Not too sure what we can do here, we're using Apple's API that says the LOC and the file that the error occurred on. Otherwise the warnings / error labels in Xcode would work.\n. This is a duplicate of #187 \n. You might be the first to look into this, any chance you can dig in and get us a PR?\n. I don't know much about how UI tests work, do they have constraints around threading? \nIt might be worth seeing if an XCTestExpectation works (outside of Specta) in UITesting\n. Hah, thanks for digging in @blackivory86 !\n. Given that no-one should be pushing Specta to the app store in their app, this seems :+1: to me\n. Awesome! Thanks!\n. Works for me :+1: \n. :+1: Looks good for me.\n. I'm not really sure this is something we should change, it feels like a change in xctool has cause this which is working fine in xcodebuild etc. If quick is having the same problems, it seems like the problem really lies in xctool.\n. I'm not really sure, I didn't write that back in the day, I'm just making sure that it's staying working. You're welcome to take a look around the source.\n. Yeah, code you want to run inside the describe/context blocks should always be running inside before/after/it blocks: for example - unless it's OK to set once on app startup e.g..\n. I guess xctool might load the test bundle, try gather all the it blocks before it's ready to run them so they can make assumptions for the tool itself, perhaps there's something getting something created and nil'd when it's not expecting it. Hard to say.\n. Sounds like it's worth making a PR to the podspec to make sure that tvOS support does not have bit code disabled, would you like to do that?\n. \nHappy to add the example name ~~it is both on the line above and the line below too~~  - hrm that might be by-product of how Specta tests itself. I'm going to add the name.\n. :+1: \n. :+1: \n. I did not know about [ci skip]\n. No plans for it, it's been a pretty niche platform. Would definitely merge a PR adding it to the Podspec after you've tested it.\n. :+1:  can't assign people not in the org, but consider it yours\n. Gonna call this one for now, you're welcome to re-open via a PR.\n. AppCode has special support for Kiwi, but not for Specta alas.\n. Yep \ud83d\udc6f \n. Thanks\n. Sure, seems reasonable to me :+1: \n. \ud83d\udc4d \n. I'm afraid I don't really know too much about how BFTask works, and from the looks of it, neither does any of the other contributors. It might be more prudent to ask if there's anything that BFTask does that might have issues around running inside a separate runloop.\n. Thanks!\n. Not really, Xcode opens the application and then tells the test runner that it should start and eventually to close. \nThe other side of this, is that loading your app up from scratch takes ~2-3 seconds, I don't think anyone wants to wait that long between each test. maybe between each test suite, but still, it's outside of Specta/Kiwis scope - you'd need to replace the XCTest runner, or have an Xcode plugin to pull it off I'm afraid.\n. Note: there are no end-user changes here, only fixes to the Specs.\n. \ud83d\udc4d works for me - thanks. Sure thing \ud83d\udc4d . Yep - this looks good, want to add a changelog entry and I'll ship a release?. cool, shipped\n\n. Yeah, this looks right to me \ud83d\udc4d . This is shipped in 1.0.7. Sorry for the delay, lots of projects to manage. Is this because of a specific build warning? I've been running Specta fine in Xcode 9. I'm happy to have this though.. This is shipped in 1.0.7. ",
    "danpalmer": "That's great, I was hoping something like that would be possible, but not sure how it should be implemented. I'll take a look at what you did for that.\nI've had a look at the tests, I understand why they were failing before, and how it has been fixed. Thanks for that!\nThanks for all the work you've added. I'll start writing tests with it right away.\n. Great to see a fix for this, could we add some documentation though? I'm not entirely familiar with the issue, and if it requires work to blacklist, or if the user should know when to do so, we should document that.\n. That's great, I was hoping something like that would be possible, but not sure how it should be implemented. I'll take a look at what you did for that.\nI've had a look at the tests, I understand why they were failing before, and how it has been fixed. Thanks for that!\nThanks for all the work you've added. I'll start writing tests with it right away.\n. Great to see a fix for this, could we add some documentation though? I'm not entirely familiar with the issue, and if it requires work to blacklist, or if the user should know when to do so, we should document that.\n. ",
    "ianmurrays": "I also noticed that SPTExampleGroup.m, specifically, runExampleBlock isn't recognizing the test block as an async one, calling it as a SPTVoidBlock instead.\n. Ended up adding the .m files to my test target and compiling them there (ie. no static lib). That works for some reason.\n. Practically same symptoms when adding Specta through CocoaPods, crashes at runtime :(\n. The project itself is not (we have a lot of legacy code), but most files are compiled with -fobjc-arc\n. Our deployment target is 4.3 and the base sdk is 6.1\n--\u00a0\nIan Murray\nOn 17 de julio de 2013 at 22:59:50, Peter Jihoon Kim (notifications@github.com) wrote:\nwhat is your deployment target? what's the version of the base sdk? @thalmicMark @ianmurrays\n\u2014\nReply to this email directly or view it on GitHub.\n. Didn't really try again since I just left it inside my project to compile with it instead of from a cocoapod .\n--\u00a0\nIan Murray\nOn 9 de agosto de 2013 at 14:50:31, Peter Jihoon Kim (notifications@github.com) wrote:\n@ianmurrays @vtsatskin are you still experiencing problems?\n\u2014\nReply to this email directly or view it on GitHub.\n. I also noticed that SPTExampleGroup.m, specifically, runExampleBlock isn't recognizing the test block as an async one, calling it as a SPTVoidBlock instead.\n. Ended up adding the .m files to my test target and compiling them there (ie. no static lib). That works for some reason.\n. Practically same symptoms when adding Specta through CocoaPods, crashes at runtime :(\n. The project itself is not (we have a lot of legacy code), but most files are compiled with -fobjc-arc\n. Our deployment target is 4.3 and the base sdk is 6.1\n--\u00a0\nIan Murray\nOn 17 de julio de 2013 at 22:59:50, Peter Jihoon Kim (notifications@github.com) wrote:\nwhat is your deployment target? what's the version of the base sdk? @thalmicMark @ianmurrays\n\u2014\nReply to this email directly or view it on GitHub.\n. Didn't really try again since I just left it inside my project to compile with it instead of from a cocoapod .\n--\u00a0\nIan Murray\nOn 9 de agosto de 2013 at 14:50:31, Peter Jihoon Kim (notifications@github.com) wrote:\n@ianmurrays @vtsatskin are you still experiencing problems?\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "thalmicMark": "I am having the same issue with a project running ARC. Is Specta ARC safe?\n. We've got ours set to iOS 6.1 right now.\n. Yes we are using LLVM.\n. Yup, using Apple LLVM compiler 4.2.\n. Ah, I think I figured it out. I was calling the Async it block outside of the describe block. It no longer crashes when I move it inside. Thanks for looking into it! @petejkim\nScratch that, it still crashes. :( \n. Unfortunately, I cannot share my repo. But if it helps, I'm testing a static library with Specta.\n. I pulled your commits from last night and tried them on my project. Whatever you changed fixed it for me. Thank you very much!\n. I'm getting the crash again when I try to test using Xcode 5, even with the command line tools update as of today. I need to be able to test in Xcode 5, since I'm using iOS 7 APIs. \nAre there any plans to update Specta's compatibility with Xcode 5 concerning the AsyncBlock?\n. Sure, I'll make a test project now.\n. I'm having trouble getting an Xcode 5 project to run Specta tests. It seems to be ignoring the tests, instantly finishing with 0 tests run. \nOne of my AsyncBlocks that are crashing is nested within a sharedExamples, within a describe.\ndescribe(@\"\", ^{\n   sharedExamples(@\"\", ^(NSDictionary *data) {\n      it(@\"\", ^AsyncBlock {\n         //test code\n      });\n   });\n});\n. Ok so I've created a repository to test the async block crash, but I'm having difficulty getting the Specta tests to even run. Can you help me figure out the issue? Then I can start trying to reproduce the crash in the repo.\nhttps://github.com/thalmicMark/SpectaAsyncTest\n. Yes thank you very much @petejkim for your dedication!\n\u2014\nSent from Mailbox for iPad\nOn Thu, Aug 15, 2013 at 7:39 PM, Valentin Tsatskin\nnotifications@github.com wrote:\n\n@petejkim I've worked together with @thalmicMark and the issue was resolved by using the Xcode DP5 command line tools. Thanks a whole bunch for your support!\nReply to this email directly or view it on GitHub:\nhttps://github.com/specta/specta/issues/22#issuecomment-22738792\n\nThalmic Labs is hiring https://www.thalmic.com/careers/\n\nCONFIDENTIALITY NOTICE:  This communication, and any attachments thereto, \nis confidential and intended solely for use by the recipient(s) named above.\n. AsyncBlocks do indeed still work in the xctest branch (d4b1e27 - 11 days ago). \n. I am having the same issue with a project running ARC. Is Specta ARC safe?\n. We've got ours set to iOS 6.1 right now.\n. Yes we are using LLVM.\n. Yup, using Apple LLVM compiler 4.2.\n. Ah, I think I figured it out. I was calling the Async it block outside of the describe block. It no longer crashes when I move it inside. Thanks for looking into it! @petejkim\nScratch that, it still crashes. :( \n. Unfortunately, I cannot share my repo. But if it helps, I'm testing a static library with Specta.\n. I pulled your commits from last night and tried them on my project. Whatever you changed fixed it for me. Thank you very much!\n. I'm getting the crash again when I try to test using Xcode 5, even with the command line tools update as of today. I need to be able to test in Xcode 5, since I'm using iOS 7 APIs. \nAre there any plans to update Specta's compatibility with Xcode 5 concerning the AsyncBlock?\n. Sure, I'll make a test project now.\n. I'm having trouble getting an Xcode 5 project to run Specta tests. It seems to be ignoring the tests, instantly finishing with 0 tests run. \nOne of my AsyncBlocks that are crashing is nested within a sharedExamples, within a describe.\ndescribe(@\"\", ^{\n   sharedExamples(@\"\", ^(NSDictionary *data) {\n      it(@\"\", ^AsyncBlock {\n         //test code\n      });\n   });\n});\n. Ok so I've created a repository to test the async block crash, but I'm having difficulty getting the Specta tests to even run. Can you help me figure out the issue? Then I can start trying to reproduce the crash in the repo.\nhttps://github.com/thalmicMark/SpectaAsyncTest\n. Yes thank you very much @petejkim for your dedication!\n\u2014\nSent from Mailbox for iPad\nOn Thu, Aug 15, 2013 at 7:39 PM, Valentin Tsatskin\nnotifications@github.com wrote:\n\n@petejkim I've worked together with @thalmicMark and the issue was resolved by using the Xcode DP5 command line tools. Thanks a whole bunch for your support!\nReply to this email directly or view it on GitHub:\nhttps://github.com/specta/specta/issues/22#issuecomment-22738792\n\nThalmic Labs is hiring https://www.thalmic.com/careers/\n\nCONFIDENTIALITY NOTICE:  This communication, and any attachments thereto, \nis confidential and intended solely for use by the recipient(s) named above.\n. AsyncBlocks do indeed still work in the xctest branch (d4b1e27 - 11 days ago). \n. ",
    "vtsatskin": "I'm currently experiencing this while using version  0.1.11 (https://github.com/specta/specta/commit/5657002c9cf09c9332169cd44567014d5a97c494). I'm using an specta in an ARC project, that is testing a static library.\nWe are not using cocoa pods, instead we are building the the specta static libraries in the way specified in the README. The base SDK is iOS 6.1.\nUsing version 0.1.10 does not appear to have this problem.\n. @petejkim I've verified that I am using clang. When I built the specta static library I used rake. I think this might be the problem.\nI just tried building in xcode and that solved the problem. I built the Specta-iOS target and selected iPhone 6.1 Simulator. I used the static library found in <xcode build folder>/Products/Debug-iphonesimulator.\nCould that mean there is a problem with the rake build?\n. I just remembered I have Xcode 5 DP2 installed. Although I compiled Specta in Xcode 4.6.3, the rake tool uses Xcode 5's command line tools. Switching over to the Xcode 4.6.3 command line tools fixed the issue and now rake works.\nOn a side note, there appears to be an update for the command line tools for Xcode 5. However, I'm getting network errors trying to download them (probably due to the recent member centre security issues), so I'll have to try later to see if the updates fix the problem.\nSorry to trouble you @petejkim! \n. @petejkim I've worked together with @thalmicMark and the issue was resolved by using the Xcode DP5 command line tools. Thanks a whole bunch for your support!\n. I'm currently experiencing this while using version  0.1.11 (https://github.com/specta/specta/commit/5657002c9cf09c9332169cd44567014d5a97c494). I'm using an specta in an ARC project, that is testing a static library.\nWe are not using cocoa pods, instead we are building the the specta static libraries in the way specified in the README. The base SDK is iOS 6.1.\nUsing version 0.1.10 does not appear to have this problem.\n. @petejkim I've verified that I am using clang. When I built the specta static library I used rake. I think this might be the problem.\nI just tried building in xcode and that solved the problem. I built the Specta-iOS target and selected iPhone 6.1 Simulator. I used the static library found in <xcode build folder>/Products/Debug-iphonesimulator.\nCould that mean there is a problem with the rake build?\n. I just remembered I have Xcode 5 DP2 installed. Although I compiled Specta in Xcode 4.6.3, the rake tool uses Xcode 5's command line tools. Switching over to the Xcode 4.6.3 command line tools fixed the issue and now rake works.\nOn a side note, there appears to be an update for the command line tools for Xcode 5. However, I'm getting network errors trying to download them (probably due to the recent member centre security issues), so I'll have to try later to see if the updates fix the problem.\nSorry to trouble you @petejkim! \n. @petejkim I've worked together with @thalmicMark and the issue was resolved by using the Xcode DP5 command line tools. Thanks a whole bunch for your support!\n. ",
    "paulyoung": "\nTo make your tests run, change the \"wrapper extension\" under build settings from \"xctest\" to \"octest\".\n\nI just experienced this exact issue. I'm using CocoaPods. Is there a way for the CocoaPod to do this?\n. > To make your tests run, change the \"wrapper extension\" under build settings from \"xctest\" to \"octest\".\nI just experienced this exact issue. I'm using CocoaPods. Is there a way for the CocoaPod to do this?\n. ",
    "rhgills": "Great, you're welcome!\n. Apologies for taking so long to get back to you. I did reproduce this in a spike which I just now got around to cleaning up and pushing. The entire project: https://github.com/rhgills/specta-patch-2-example. And the failing spec itself: https://github.com/rhgills/specta-patch-2-example/blob/master/Tests/Tests.m. To reproduce, just clone the repo, run bundle, run pod and run the unit tests in the workspace. Please let me know if I'm making any mistakes in the spec!\n. Great, my pleasure!\n. Please accept my apologies for taking so long to get back to you on this PR as well. A project reproducing the issue is here: https://github.com/rhgills/specta-oc-hamcrest-example. To reproduce, clone the repo, run bundle, run pod and run the unit tests in the workspace. The failing spec itself is here: https://github.com/rhgills/specta-oc-hamcrest-example/blob/master/Tests/Tests.m.\n. All assertions are wrapped in \"it\" blocks. Please let me know if I'm doing anything wrong with respect to the shared example group!\n. my pleasure!\n. Great, you're welcome!\n. Apologies for taking so long to get back to you. I did reproduce this in a spike which I just now got around to cleaning up and pushing. The entire project: https://github.com/rhgills/specta-patch-2-example. And the failing spec itself: https://github.com/rhgills/specta-patch-2-example/blob/master/Tests/Tests.m. To reproduce, just clone the repo, run bundle, run pod and run the unit tests in the workspace. Please let me know if I'm making any mistakes in the spec!\n. Great, my pleasure!\n. Please accept my apologies for taking so long to get back to you on this PR as well. A project reproducing the issue is here: https://github.com/rhgills/specta-oc-hamcrest-example. To reproduce, clone the repo, run bundle, run pod and run the unit tests in the workspace. The failing spec itself is here: https://github.com/rhgills/specta-oc-hamcrest-example/blob/master/Tests/Tests.m.\n. All assertions are wrapped in \"it\" blocks. Please let me know if I'm doing anything wrong with respect to the shared example group!\n. my pleasure!\n. ",
    "wonga00": "i tracked down the problem to commit 8608ba8825ed11750167f1f6571b464450ede2b2 and it appears to be the same problem that appeared in Cedar (https://github.com/pivotal/cedar/commit/6ace9c9137dd8a05262b8454874a45e1f1c60f1d)\nlooks like the implementation of ClassesWithClassMethod has an incompatibility with Apple's class UIAccessibilitySafeCategory__NSObject, resulting in a crash on:\nMethod globalMethod = class_getClassMethod(aClass, classMethodSelector);\n. awesome, thanks!\n. yes it's fixed, thank you\n. i tracked down the problem to commit 8608ba8825ed11750167f1f6571b464450ede2b2 and it appears to be the same problem that appeared in Cedar (https://github.com/pivotal/cedar/commit/6ace9c9137dd8a05262b8454874a45e1f1c60f1d)\nlooks like the implementation of ClassesWithClassMethod has an incompatibility with Apple's class UIAccessibilitySafeCategory__NSObject, resulting in a crash on:\nMethod globalMethod = class_getClassMethod(aClass, classMethodSelector);\n. awesome, thanks!\n. yes it's fixed, thank you\n. ",
    "kastiglione": "The obvious fix is to add @synthesize runTask = _runTask;, but I'm curious why auto-synthesis isn't happening.\n. thanks :palm_tree: \n. :+1: \n. Thanks. What's the eta on 0.3?\n. The obvious fix is to add @synthesize runTask = _runTask;, but I'm curious why auto-synthesis isn't happening.\n. thanks :palm_tree: \n. :+1: \n. Thanks. What's the eta on 0.3?\n. ",
    "blakewatters": "Why not beforeExample and afterExample?\n. I would probably vote for some like:\n``` objc\n@implementation SPTReporter\n\n\n(void)setSharedReporter:(SPTReporter *)reporter\n{\n   sharedReporter = reporter;\n}\n\n\n(SPTReporter *)sharedReporter\n{\n  return sharedReporter ?: [self loadReporterFromEnvironment];\n}\n\n\n(void)loadReporterFromEnvironment\n{\n   NSString *reporterClass = [[NSProcessInfo processInfo] environment][@\"SPECTA_REPORTER_CLASS\"] ?: @\"SPTDefaultReporter\";\n   return [NSClassFromString(reporterClass) new];\n}\n\n\n@end\n```\nThen you can trivially set the reporter directly via code or use an environment variable, which gives you easy command line integration.\n. @Abizern is correct -- wrong target membership for the test. Merged.\n. Take a look at the work recently merged to Kiwi: https://github.com/allending/Kiwi/pull/366\nIt should be straightforward to follow this work and implement the same on Specta.\n. I am not sure that it is necessary/desirable to bring in the API weight of let in Objective-C because tests execute so much faster. I make heavy use of let in my RSpec examples in Ruby land because it is so easy to get an absurdly slow test suite under Ruby. In Objective-C I have several code bases with 1000+ unit tests and none of them take more than a minute to execute. \nAre there test suites out there with performance problems severe enough that it requires introducing library level support for mitigating the issues when we know that the solution will make it easy for users to introduce cross-example dependencies and side effects?\n. Why not beforeExample and afterExample?\n. I would probably vote for some like:\n``` objc\n@implementation SPTReporter\n\n\n(void)setSharedReporter:(SPTReporter *)reporter\n{\n   sharedReporter = reporter;\n}\n\n\n(SPTReporter *)sharedReporter\n{\n  return sharedReporter ?: [self loadReporterFromEnvironment];\n}\n\n\n(void)loadReporterFromEnvironment\n{\n   NSString *reporterClass = [[NSProcessInfo processInfo] environment][@\"SPECTA_REPORTER_CLASS\"] ?: @\"SPTDefaultReporter\";\n   return [NSClassFromString(reporterClass) new];\n}\n\n\n@end\n```\nThen you can trivially set the reporter directly via code or use an environment variable, which gives you easy command line integration.\n. @Abizern is correct -- wrong target membership for the test. Merged.\n. Take a look at the work recently merged to Kiwi: https://github.com/allending/Kiwi/pull/366\nIt should be straightforward to follow this work and implement the same on Specta.\n. I am not sure that it is necessary/desirable to bring in the API weight of let in Objective-C because tests execute so much faster. I make heavy use of let in my RSpec examples in Ruby land because it is so easy to get an absurdly slow test suite under Ruby. In Objective-C I have several code bases with 1000+ unit tests and none of them take more than a minute to execute. \nAre there test suites out there with performance problems severe enough that it requires introducing library level support for mitigating the issues when we know that the solution will make it easy for users to introduce cross-example dependencies and side effects?\n. ",
    "hayesmp": "Specta and Expecta are setup as cocoapods. What special setup do I have to do to use them with my test target?\n. Got it working. There were some setup shenanigans with the testing target.\n. Specta and Expecta are setup as cocoapods. What special setup do I have to do to use them with my test target?\n. Got it working. There were some setup shenanigans with the testing target.\n. ",
    "oofkeli": "Could you please share how you fix the issue, because I could not find any solution.\n. In case anyone wondering the solution, you have to set \"Other Linker Flags\" in Test \"Targets\" to -ObjC\n. Could you please share how you fix the issue, because I could not find any solution.\n. In case anyone wondering the solution, you have to set \"Other Linker Flags\" in Test \"Targets\" to -ObjC\n. ",
    "jkrall": "+1 ... I just discovered that specta isn't compatible with XCode 5's xcunit, bummer!\nNot sure how far you got here, but if you have this working, I'd love to check it out.\n. +1 ... I just discovered that specta isn't compatible with XCode 5's xcunit, bummer!\nNot sure how far you got here, but if you have this working, I'd love to check it out.\n. ",
    "ghost": "I've parked some changes here... Still working some failing tests, but it's mostly functional in Xcode 5 and AppCode 2.5 EAP now. I did not take the approach Kiwi did to preserve support for otest bundles and retain both sets of dependencies -- instead applied as a direct substitution. - https://github.com/mgrimes/specta/tree/xctest_integration\n. Cannot run test suite -- anyone seen this problem before?\n\n/Code/Support/Specta/src/Specta-Prefix.pch:3:4: fatal error: malformed or corrupted AST file: 'mismatched umbrella headers in submodule'\n#  import <XCTest/XCTest.h>\n   ^\n/Code/Support/Specta/src/Specta-Prefix.pch:3:4: note: after modifying system headers, please delete the module cache at '/Users/mark/Library/Developer/Xcode/DerivedData/ModuleCache/3050A8EHRVTV1'\n1 error generated.\n\n. It complains about every import of XCTest and I have had the wrapper extension set to xctest since I introduced the xctest_integration branch on my Git remote.\n. Manually as a Git submodule -- I 'rake' the submodule and point the Xcode project into the products folder at the static library. Not willing to go the CocoaPods route -- prefer submodules.\nBTW I'm only using Specta to support an iOS project currently.\n. I changed both Specta-IOS and Specta-iOSTests to deployment target of iOS 6.0, even cleaned the derived data and restarted Xcode) -- same problem.\n. Reboot didn't help. Keep in mind this has nothing to do with my project -- it has to do with running unit tests against the Specta project.... I'm only trying to get Specta itself to work, I haven't even begun to actually use the changes against another project yet.\nAll I can do at this point is try a fresh clone.\n. On a fresh clone, Xcode 5.0.1 wants to validate the project with changes...\n\n* Note this is the master branch and I select CANCEL *\nI then checkout the \"xctest\" branch, pop open Xcode, build Specta-iOS and then hit \u2318U to fire off the test suite -- the same umbrella header error as above. So this is happening on a fresh checkout of that branch without any external influence on my part.\n. OK the deployment target of the iOSTests target is the problem (not the impl target)\n\n. Thanks @petejkim that helped -- totally forgot about the com.apple.dt.Xcode cache!\n. When this branch makes it into master I will open a ticket with JetBrains to assist them in integrating with their test runner. But happy to see everything is equally working well in AppCode 2.5.\n\n. Just reporting back in to say xctest branch has been integrated into my iOS project and looks good for known passing/failing tests. Thanks @petejkim \n. I've parked some changes here... Still working some failing tests, but it's mostly functional in Xcode 5 and AppCode 2.5 EAP now. I did not take the approach Kiwi did to preserve support for otest bundles and retain both sets of dependencies -- instead applied as a direct substitution. - https://github.com/mgrimes/specta/tree/xctest_integration\n. Cannot run test suite -- anyone seen this problem before?\n\n/Code/Support/Specta/src/Specta-Prefix.pch:3:4: fatal error: malformed or corrupted AST file: 'mismatched umbrella headers in submodule'\n#  import <XCTest/XCTest.h>\n   ^\n/Code/Support/Specta/src/Specta-Prefix.pch:3:4: note: after modifying system headers, please delete the module cache at '/Users/mark/Library/Developer/Xcode/DerivedData/ModuleCache/3050A8EHRVTV1'\n1 error generated.\n\n. It complains about every import of XCTest and I have had the wrapper extension set to xctest since I introduced the xctest_integration branch on my Git remote.\n. Manually as a Git submodule -- I 'rake' the submodule and point the Xcode project into the products folder at the static library. Not willing to go the CocoaPods route -- prefer submodules.\nBTW I'm only using Specta to support an iOS project currently.\n. I changed both Specta-IOS and Specta-iOSTests to deployment target of iOS 6.0, even cleaned the derived data and restarted Xcode) -- same problem.\n. Reboot didn't help. Keep in mind this has nothing to do with my project -- it has to do with running unit tests against the Specta project.... I'm only trying to get Specta itself to work, I haven't even begun to actually use the changes against another project yet.\nAll I can do at this point is try a fresh clone.\n. On a fresh clone, Xcode 5.0.1 wants to validate the project with changes...\n\n* Note this is the master branch and I select CANCEL *\nI then checkout the \"xctest\" branch, pop open Xcode, build Specta-iOS and then hit \u2318U to fire off the test suite -- the same umbrella header error as above. So this is happening on a fresh checkout of that branch without any external influence on my part.\n. OK the deployment target of the iOSTests target is the problem (not the impl target)\n\n. Thanks @petejkim that helped -- totally forgot about the com.apple.dt.Xcode cache!\n. When this branch makes it into master I will open a ticket with JetBrains to assist them in integrating with their test runner. But happy to see everything is equally working well in AppCode 2.5.\n\n. Just reporting back in to say xctest branch has been integrated into my iOS project and looks good for known passing/failing tests. Thanks @petejkim \n. ",
    "ahti": "Any news on this? Expecta now works with XCTest.\n. Any news on this? Expecta now works with XCTest.\n. ",
    "ashfurrow": "Any word on this? I'd like to include Specta in a book I'm writing but would strongly prefer XCTextIntegration.\n. I'm a little biased since I don't have any existing projects relying on Specta with SenTest. That said, as a prospective user of the project, I don't see the value in SenTest support. \n. @robb Users can upgrade to XCTest using the Edit -> Refactor -> Convert to XCTest option. \n. :heart: \n. I really wish I had an existing project using Specta to help test this. Thanks so much for your work!\n. Any word on when this can get merged in? \n. Do we really need test shuffling and Swift support for 0.3? It seems like there are quite a few other developers \u2013 https://github.com/specta/specta/issues/101 for example \u2013 that need the use Xcode 6 with their existing Objective-C projects. \n. :+1:\n. Any word on this? I'd like to include Specta in a book I'm writing but would strongly prefer XCTextIntegration.\n. I'm a little biased since I don't have any existing projects relying on Specta with SenTest. That said, as a prospective user of the project, I don't see the value in SenTest support. \n. @robb Users can upgrade to XCTest using the Edit -> Refactor -> Convert to XCTest option. \n. :heart: \n. I really wish I had an existing project using Specta to help test this. Thanks so much for your work!\n. Any word on when this can get merged in? \n. Do we really need test shuffling and Swift support for 0.3? It seems like there are quite a few other developers \u2013 https://github.com/specta/specta/issues/101 for example \u2013 that need the use Xcode 6 with their existing Objective-C projects. \n. :+1:\n. ",
    "tonyarnold": "What's the thinking on this? Is @mgrimes taking the right approach by dropping SenTestingKit support entirely? I've got a branch at tonyarnold/specta/tree/xctest that supports both, but isn't yet functional, and I wonder if there's really a lot of point in pouring effort into continuing to support SenTestingKit.\nThoughts?\n. So this seems like a pretty definitive answer going forward: https://twitter.com/joar_at_work/status/393121651321106432\n. Thanks @bainfu \u2014 that's @mgrimes' repository (he linked to his fork earlier in this thread).\n. @petejkim what can we do to help? Anything?\n. Absolutely can, @petejkim \u2014 I'll take a run at it tonight.\n. This is going to mean targeting 64-bit only on OS X. We should probably target 32/64-bit on iOS at the same time.\n. Actually, we'll need to skip 64-bit iOS until a future release of Xcode. If iOS 6.1 is the target, it can't contain 64-bit architectures just yet.\n. Just quickly (as this is early days for me with Specta's source):\n/Users/tonyarnold/Documents/Open Source Projects/Specta/test/UnexpectedExceptionTest.m:0: error: -[_UnexpectedExceptionTestSpec group_example_1] : MyException: Oh Noes! %@\nI'm seeing that when running Specta's test suite in master without any changes at all \u2014 is that expected? I've converted everything to ARC in a branch that I'll push up, but I'm seeing the exact same failure there.\n. OK, great. Well the basic conversion to ARC/modern Objective-C is (strangely enough) in the arc-and-modern-objective-c branch. I've updated the targets to iOS 6.1 & OS X 10.8, but I'd imagine they can both go back a notch if needs be. \nBeyond that, I'll have a sweep through and look for anything awry, but there are no analyser warnings, nor build errors \u2014 just the failing exception test.\n. It looks to me like facebook/xctool#219 addresses the problems with test introspection when using Specta and xctool. Can you confirm please, @jden?\n. Specifically Specta tests, or XCTest/SenTest as well?\n. I can't get them to run at all with Xcode 5 \u2014 it doesn't crash, I just get:\n```\nRunning 136 tests:\n........................................................................................................................................\n----- XCode (OCUnit) Test Output --------------------\nTest target SpectaTests encountered an error (Unexpected TestCaseDidStart)\n```\nBut it was doing that on the master branch as well for me.\n. It works in as far as it should:\nTest Case '-[SpectaThingTestTests testExample]' started.\n/Users/tonyarnold/Desktop/SpectaThingTest/SpectaThingTestTests/SpectaThingTestTests.m:31: error: -[SpectaThingTestTests testExample] : failed - No implementation for \"-[SpectaThingTestTests testExample]\"\nTest Case '-[SpectaThingTestTests testExample]' failed (0.000 seconds).\n. Yes, it was \u2014 OS X 10.9 (13A603) with Xcode 5.0.1 (5A2053).\n. Good to hear, @petejkim \u2014 hopefully you can get up and running shortly.\n. :thumbsup: works for me (in as far as anything works in Xcode 5 right now) \u2014 thanks @robb!\n. @robb, does Specta pass the test suite when you run it? On my setup, all of the tests seem to pass, but the test suite itself reports that it has failed with Test target SpectaTests encountered an error (Unexpected TestCaseDidStart).\n. This is probably going to be the case until #38 is complete. I believe @petejkim is working on it, and targeting a release sometime this week.\n. Just check with @petejkim \u2014 if the changes to fix the problem are big, it might just get in the way of the XCTest work. Personally, I'd be keen to see the fix either way \u2014 maybe push it up into a branch and we can do a [WIP] PR on it?\n. :thumbsup: it's working really well for me \u2014 tests are reported properly and all of the Xcode test features seem to be functional. I'm hardly a heavy test writer, but this looks good to me \u2014 thanks @petejkim! :fireworks: \n. Yes, they do. Also:\n\n. That's going to be a limitation of Xcode. If you show the test navigator, you can right click any of the tests displayed there (which will only show up after an initial run of the test target). \nHopefully Apple add a lot more smarts to how tests are parsed in Xcode in a future release.\n. One thing I have noticed \u2014 individual spec files aren't being recognised as such in the test navigator. Only the first spec file is shown until tests are run, and after that you can click on the name of that first spec to show it in the current editor. \nNone of the subsequent spec files allow this \u2014 the first (working) icon looks like  and the non-clickable spec files show with .\nUpdate: this issue resolved itself when I cleared the derived data directory. Individual tests within each spec still aren't seen, but the spec files themselves seem to be function again.\n. This is already fixed in #52, which will be merged shortly.\n. Great stuff! That works a treat :thumbsup: \nRelated: we should have an open radar issue filed publicly that people can duplicate and submit to Apple's Bug Reporter asking for more flexible test support in Xcode. It seems to me that Xcode is heading in the direction of more fully supporting differing test syntax like that Specta uses, but duped radars help get issues like this more attention.\nIs there something already written that we can use? It might be good to promote something like this \u2014 I'm sure the Kiwi guys would get behind it too.\n. This is already fixed in #52, which will be merged shortly.\n. Oh that looks a bit nice! I'll check it out when I'm back at my mac!\n. Does this work on OS X? I see a reference to iOS 6 in the code, but I assume you're just testing for the existence of a selector that was present on both platforms?\n. You're right \u2014 my apologies. I read that wrong!\n. I don't have enough experience with OCMock to be able to answer. I never mock all that much\u2026\n. One thing to consider: Services like Travis CI won't be able to take advantage of this for quite a while given how long it took for Mavericks support on their service to land. I wouldn't expect they'll be running Yosemite/Xcode 6 for months after it's release. \nIs there a way to keep everything working with Xcode 5, but adding some Xcode 6 specific features as extensions (like Swift support)? What's making you want to drop Xcode 5 support?\n. You're right, the onus is on Travis to get behind Xcode 6. There's going to be a zombie horde of \"I only code in Swift\" types descending before release :skull: \nUltimately, this project (like all OSS projects) needs to meet the needs of those who contribute, balanced against what time each of us is willing to give. If that means dropping Xcode 5 support to keep the core team interested in working on it, then :thumbsup: I'm all for it.\n. As far as I'm aware, ResourceRules.plist is not used anymore. Even if you pass it to codesignyou are warned not to use it. It was part of the changes introduced with OS X 10.9.5 and 10.10.0.\nI'd get rid of the build setting and the file, to be honest. I'm not sure what the impact will be on older versions of Xcode.\n. I could get behind this push \u2014 I was considering switching my projects over to XCTest directly (and to a degree, I have) but I would prefer to keep using Specta/Expecta for the foreseeable future. \nI'm happy to tackle the framework-related changes.\n. > I'm happy to tackle the framework-related changes. \nWhich @petejkim already took care of in his earlier 0.3-wip branch. Man I miss the forest for the trees sometimes!\n. Are the un-prefixed variants of the Objective-C functions still the default? Or does this mean that the prefix has to be used? That would be an unacceptable compromise, IMO.\n. :+1: to this PR. Best practice it is!\n. I ensured Expecta works with Carthage, but I didn't try Specta. Chances are that if it's a shared scheme it will just work out of the box.\n. Not without the contents of the carthage-xcodebuild log. Can you post it and I'll take a look?\n. Or just shorten step 7 down to (paraphrasing) \"Ensure these two build settings have the correct values\". No need for the stack trace. \n. Perfect, @eunikolsky :+1: \n. There have been a few comments from Apple engineers on Twitter that the slowness in running unit tests is an OS X bug. No word on whether it's fixed in 10.10.2 beta.\n. Travis supports Xcode 7.0 now. I don't see a compelling reason not to start using it.\n. \u00af(\u30c4)/\u00af whatever suits\n. What's the thinking on this? Is @mgrimes taking the right approach by dropping SenTestingKit support entirely? I've got a branch at tonyarnold/specta/tree/xctest that supports both, but isn't yet functional, and I wonder if there's really a lot of point in pouring effort into continuing to support SenTestingKit.\nThoughts?\n. So this seems like a pretty definitive answer going forward: https://twitter.com/joar_at_work/status/393121651321106432\n. Thanks @bainfu \u2014 that's @mgrimes' repository (he linked to his fork earlier in this thread).\n. @petejkim what can we do to help? Anything?\n. Absolutely can, @petejkim \u2014 I'll take a run at it tonight.\n. This is going to mean targeting 64-bit only on OS X. We should probably target 32/64-bit on iOS at the same time.\n. Actually, we'll need to skip 64-bit iOS until a future release of Xcode. If iOS 6.1 is the target, it can't contain 64-bit architectures just yet.\n. Just quickly (as this is early days for me with Specta's source):\n/Users/tonyarnold/Documents/Open Source Projects/Specta/test/UnexpectedExceptionTest.m:0: error: -[_UnexpectedExceptionTestSpec group_example_1] : MyException: Oh Noes! %@\nI'm seeing that when running Specta's test suite in master without any changes at all \u2014 is that expected? I've converted everything to ARC in a branch that I'll push up, but I'm seeing the exact same failure there.\n. OK, great. Well the basic conversion to ARC/modern Objective-C is (strangely enough) in the arc-and-modern-objective-c branch. I've updated the targets to iOS 6.1 & OS X 10.8, but I'd imagine they can both go back a notch if needs be. \nBeyond that, I'll have a sweep through and look for anything awry, but there are no analyser warnings, nor build errors \u2014 just the failing exception test.\n. It looks to me like facebook/xctool#219 addresses the problems with test introspection when using Specta and xctool. Can you confirm please, @jden?\n. Specifically Specta tests, or XCTest/SenTest as well?\n. I can't get them to run at all with Xcode 5 \u2014 it doesn't crash, I just get:\n```\nRunning 136 tests:\n........................................................................................................................................\n----- XCode (OCUnit) Test Output --------------------\nTest target SpectaTests encountered an error (Unexpected TestCaseDidStart)\n```\nBut it was doing that on the master branch as well for me.\n. It works in as far as it should:\nTest Case '-[SpectaThingTestTests testExample]' started.\n/Users/tonyarnold/Desktop/SpectaThingTest/SpectaThingTestTests/SpectaThingTestTests.m:31: error: -[SpectaThingTestTests testExample] : failed - No implementation for \"-[SpectaThingTestTests testExample]\"\nTest Case '-[SpectaThingTestTests testExample]' failed (0.000 seconds).\n. Yes, it was \u2014 OS X 10.9 (13A603) with Xcode 5.0.1 (5A2053).\n. Good to hear, @petejkim \u2014 hopefully you can get up and running shortly.\n. :thumbsup: works for me (in as far as anything works in Xcode 5 right now) \u2014 thanks @robb!\n. @robb, does Specta pass the test suite when you run it? On my setup, all of the tests seem to pass, but the test suite itself reports that it has failed with Test target SpectaTests encountered an error (Unexpected TestCaseDidStart).\n. This is probably going to be the case until #38 is complete. I believe @petejkim is working on it, and targeting a release sometime this week.\n. Just check with @petejkim \u2014 if the changes to fix the problem are big, it might just get in the way of the XCTest work. Personally, I'd be keen to see the fix either way \u2014 maybe push it up into a branch and we can do a [WIP] PR on it?\n. :thumbsup: it's working really well for me \u2014 tests are reported properly and all of the Xcode test features seem to be functional. I'm hardly a heavy test writer, but this looks good to me \u2014 thanks @petejkim! :fireworks: \n. Yes, they do. Also:\n\n. That's going to be a limitation of Xcode. If you show the test navigator, you can right click any of the tests displayed there (which will only show up after an initial run of the test target). \nHopefully Apple add a lot more smarts to how tests are parsed in Xcode in a future release.\n. One thing I have noticed \u2014 individual spec files aren't being recognised as such in the test navigator. Only the first spec file is shown until tests are run, and after that you can click on the name of that first spec to show it in the current editor. \nNone of the subsequent spec files allow this \u2014 the first (working) icon looks like  and the non-clickable spec files show with .\nUpdate: this issue resolved itself when I cleared the derived data directory. Individual tests within each spec still aren't seen, but the spec files themselves seem to be function again.\n. This is already fixed in #52, which will be merged shortly.\n. Great stuff! That works a treat :thumbsup: \nRelated: we should have an open radar issue filed publicly that people can duplicate and submit to Apple's Bug Reporter asking for more flexible test support in Xcode. It seems to me that Xcode is heading in the direction of more fully supporting differing test syntax like that Specta uses, but duped radars help get issues like this more attention.\nIs there something already written that we can use? It might be good to promote something like this \u2014 I'm sure the Kiwi guys would get behind it too.\n. This is already fixed in #52, which will be merged shortly.\n. Oh that looks a bit nice! I'll check it out when I'm back at my mac!\n. Does this work on OS X? I see a reference to iOS 6 in the code, but I assume you're just testing for the existence of a selector that was present on both platforms?\n. You're right \u2014 my apologies. I read that wrong!\n. I don't have enough experience with OCMock to be able to answer. I never mock all that much\u2026\n. One thing to consider: Services like Travis CI won't be able to take advantage of this for quite a while given how long it took for Mavericks support on their service to land. I wouldn't expect they'll be running Yosemite/Xcode 6 for months after it's release. \nIs there a way to keep everything working with Xcode 5, but adding some Xcode 6 specific features as extensions (like Swift support)? What's making you want to drop Xcode 5 support?\n. You're right, the onus is on Travis to get behind Xcode 6. There's going to be a zombie horde of \"I only code in Swift\" types descending before release :skull: \nUltimately, this project (like all OSS projects) needs to meet the needs of those who contribute, balanced against what time each of us is willing to give. If that means dropping Xcode 5 support to keep the core team interested in working on it, then :thumbsup: I'm all for it.\n. As far as I'm aware, ResourceRules.plist is not used anymore. Even if you pass it to codesignyou are warned not to use it. It was part of the changes introduced with OS X 10.9.5 and 10.10.0.\nI'd get rid of the build setting and the file, to be honest. I'm not sure what the impact will be on older versions of Xcode.\n. I could get behind this push \u2014 I was considering switching my projects over to XCTest directly (and to a degree, I have) but I would prefer to keep using Specta/Expecta for the foreseeable future. \nI'm happy to tackle the framework-related changes.\n. > I'm happy to tackle the framework-related changes. \nWhich @petejkim already took care of in his earlier 0.3-wip branch. Man I miss the forest for the trees sometimes!\n. Are the un-prefixed variants of the Objective-C functions still the default? Or does this mean that the prefix has to be used? That would be an unacceptable compromise, IMO.\n. :+1: to this PR. Best practice it is!\n. I ensured Expecta works with Carthage, but I didn't try Specta. Chances are that if it's a shared scheme it will just work out of the box.\n. Not without the contents of the carthage-xcodebuild log. Can you post it and I'll take a look?\n. Or just shorten step 7 down to (paraphrasing) \"Ensure these two build settings have the correct values\". No need for the stack trace. \n. Perfect, @eunikolsky :+1: \n. There have been a few comments from Apple engineers on Twitter that the slowness in running unit tests is an OS X bug. No word on whether it's fixed in 10.10.2 beta.\n. Travis supports Xcode 7.0 now. I don't see a compelling reason not to start using it.\n. \u00af(\u30c4)/\u00af whatever suits\n. ",
    "gfontenot": "I'd vote to drop OCUnit/SenTest completely. There's nothing stopping someone from checking out a pre-xctest version of the library if they haven't migrated to XCTest, and Apple isn't going to put any more effort into SenTestingKit. Are there reasons to keep OCUnit/SenTest support around that I'm not aware of?\n. Specifying void for the arguments causes build failures in the test suite due to the async blocks:\nspecta/test/AsyncSpecTest.m:11:20: Incompatible block pointer types passing 'void (^)(void (^)(void))' to parameter of type 'void (^)(void)'\nThese tests build properly when using the unspecified argument list, and the tests pass. Is there a better way to handle this?\n. Bummer. This would be really nice to be able to have. Maybe something to keep in mind for a future refactor during a major version release?\nI'll go ahead and close this PR.\n. Well, SPT_example would need to go back to id as well, right? Would it not be weird to have some of the example groups typed as id and others typed as a block?\nI suppose at the very least, we can type the before and after blocks?\n. Looks like the same Async behavior is expected from the before and after blocks as well. So maybe the only change to be made here is to add the void parameter to the description blocks.\n. No worries. Probably should have looked into it a bit more before biting into it. I'll close this again.\n. Looks good to me as well.\n. Ah, I thought I saw that somewhere, but figured I had imagined it. Thanks, Tony.\n. :thumbsup:\nNitpick: Should the icon have 2 files in it?\n. FWIW I went through this way back in #41. I still think it would be rad to get this working, but I understand why it's set up the way it is.\n. Fuck yes. I would like this very much.\n. This is happening here as well.\n. I'd vote to drop OCUnit/SenTest completely. There's nothing stopping someone from checking out a pre-xctest version of the library if they haven't migrated to XCTest, and Apple isn't going to put any more effort into SenTestingKit. Are there reasons to keep OCUnit/SenTest support around that I'm not aware of?\n. Specifying void for the arguments causes build failures in the test suite due to the async blocks:\nspecta/test/AsyncSpecTest.m:11:20: Incompatible block pointer types passing 'void (^)(void (^)(void))' to parameter of type 'void (^)(void)'\nThese tests build properly when using the unspecified argument list, and the tests pass. Is there a better way to handle this?\n. Bummer. This would be really nice to be able to have. Maybe something to keep in mind for a future refactor during a major version release?\nI'll go ahead and close this PR.\n. Well, SPT_example would need to go back to id as well, right? Would it not be weird to have some of the example groups typed as id and others typed as a block?\nI suppose at the very least, we can type the before and after blocks?\n. Looks like the same Async behavior is expected from the before and after blocks as well. So maybe the only change to be made here is to add the void parameter to the description blocks.\n. No worries. Probably should have looked into it a bit more before biting into it. I'll close this again.\n. Looks good to me as well.\n. Ah, I thought I saw that somewhere, but figured I had imagined it. Thanks, Tony.\n. :thumbsup:\nNitpick: Should the icon have 2 files in it?\n. FWIW I went through this way back in #41. I still think it would be rad to get this working, but I understand why it's set up the way it is.\n. Fuck yes. I would like this very much.\n. This is happening here as well.\n. ",
    "Abizern": "I think so too. If you want SenTest Support use an older version. I'd vote for just bumping the major version number up and supporting XCTest only.\n. @tibr it's trivial using Git Submodules as we'll. :)\n. ## Thank you so much for this!\nAbizer\nOn 29 Oct 2013, at 11:52, Peter Jihoon Kim notifications@github.com wrote:\n\n@nerdyc @jkrall @blakewatters @mgrimes @Ahti @AshFurrow @tonyarnold @gfontenot @Abizern @tibr @mickeyreiss @jspahrsummers @bainfu\nFinished XCTest integration: https://github.com/specta/specta/tree/xctest\nAll specs pass, but I had to temporarily remove custom reporter support. Will add that back in later.\nCould you please help test it with your existing projects? We'll ship it if everything seems ok.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think so too. If you want SenTest Support use an older version. I'd vote for just bumping the major version number up and supporting XCTest only.\n. @tibr it's trivial using Git Submodules as we'll. :)\n. ## Thank you so much for this!\n\nAbizer\nOn 29 Oct 2013, at 11:52, Peter Jihoon Kim notifications@github.com wrote:\n\n@nerdyc @jkrall @blakewatters @mgrimes @Ahti @AshFurrow @tonyarnold @gfontenot @Abizern @tibr @mickeyreiss @jspahrsummers @bainfu\nFinished XCTest integration: https://github.com/specta/specta/tree/xctest\nAll specs pass, but I had to temporarily remove custom reporter support. Will add that back in later.\nCould you please help test it with your existing projects? We'll ship it if everything seems ok.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "tibr": "Dropping SenTestingKit sounds great, thanks to CocoaPods it's trivial for users that need SetTest Support to use an older version.\n. Dropping SenTestingKit sounds great, thanks to CocoaPods it's trivial for users that need SetTest Support to use an older version.\n. ",
    "robb": "What's the migration path from SenTest to XCTest? Anything that could rain on a users parade when updating?\n. :sparkling_heart: \n. @mickeyreiss good thinking. Is that a regression compared to SenTest? If not, would you mind opening a separate issue for that?\n. @tonyarnold would you mind creating a [WIP] pull request from the arc branch? It's easier to review and give feedback this way\n. This was fixed in xctool 0.1.14 :sparkles: \n. I'm not very experienced in rspec but I found this Stack Overflow answer helpful in understanding when to use let over beforeEach.\nThat being said, the compiler already catches misspelled names.\nFiner grained and more specific let blocks seem like a good addition to me, I also like the readability.\nJust to throw an idea out there, what if the syntax was reduced further by (ab)using keyed subscripts?\n``` objc\nlet(@\"foo\") = ^{ return @\"bar\"; };\nNSString *foo = get(@\"foo\");\n```\nkinda lke ReactiveCocoa uses its RAC() macro to communicate bindings.\n. > I also decided that each example group needs to retains it's own key/value collection, such that, if a few examples need a different value, their example group could define its own value w/o affecting the rest.\nDo you mean something like this?\n``` objc\ndescribe(@\"outer\", ^{\n    let(@\"foo\") = ^{ return @\"bar\"; };\nit(@\"should be bar\", ^{\n    expect(get(@\"foo\")).to.equal(@\"bar\");\n});\n\ndescribe(@\"inner\", ^{\n    let(@\"foo\") = ^{ return @\"baz\"; };\n\n    it(@\"should be baz\", ^{\n        expect(get(@\"foo\")).to.equal(@\"baz\");\n    });\n});\n\n});\n```\n. The lack of type information is a very good point.\nI suppose it's possible to build a macro so that let and get create and invoke a memoized block of the correct return type but that may be a bit too far out.\nIf you use let on stateful objects, you can end up with accidental dependencies across your tests. Are there any best-practices in Ruby to deal with that? If you create your dependencies in beforeEach, at least you get \"fresh\" objects in a well known state but at the expense of performance.\n. :ok_hand: \n. :bow:\n. Looks good to me :+1: \n. It runs, but it crashes quite frequently on Xcode 5.0, 10.8.4, updating to 5.0.1 right now\u2026\n. Yeah, just tried again and got these results:\nSession completed in 0.611 seconds\n136 tests; 3 skipped; 0 failures; 0 exceptions; 18 pending\nProgram ended with exit code: 0\nFull report\n. Just gave it a spin in Mantle and it seemed to work fine\n. I don't see the little run button next to examples, only full specs, if that's what you're asking?\n\n. @nerdyc are you speaking about #54 ?\n. Thanks!\n. Seems like a bug to me\n. Thanks for your pull request :sparkling_heart: \ncould you add a test for this, too?\n. Ha, sorry, I only mentally greped this for asserts.\n. Looks good\n. > and add these 2 extra lines(Bold).\nNot sure which lines you mean exactly, but turning this into a Pull Request would be nice :sparkles: \n. @tonyarnold what's your feel on this?\n. In an effort to make progress on #125, I'll self-merge this if no one stops me :trollface: \n. :sparkling_heart: \n. Have you tried anything in particular that didn't work?\n. > It should be possible to make beforeEach (and friends) have a parameter type that would suggest to AppCode that it's a block.\nI believe the reason that beforeEach and it take id as a parameter for their block is that ^{ /* \u2026 */ } and ^AsyncBlock { done(); } have different signatures. It's pretty much a poor man's overloading.\nHave you looked if AppCode supports code snippets that you could use?\n. Looks like AppCode 3.0 will ship with Kiwi Live Templates, so that seems to be way to go.\n. 1. You should be able to check out an earlier version of Specta that still supports OCTest, 0.1.11 might work\n2. TBH, I probably wouldn't bother with iOS 6 anymore when iOS 8 will be in beta next week.\n. Of course, it works on my box :unamused: \n. :+1: \n. :+1: \n. What are the implications of that?\n. > I'm running Specta 0.3-wip branch in XCode 6 & iOS 7.1 & iOS 8 using Cocoapods 0.34.0.rc (I think if you upgrade to that it will solve the problem for you).\nYeah, I'm using Specta 2.1 in Xcode 6 which I installed with a dev version of cocoapods (0.33.something), the missing <XCTest/XCTest.h> seemed to have been a Cocoapods problem.\n. :+1: \n. Would it make sense to have the random generator seed be an (optional) argument as well? That way, you could replay a specific permutation to verify you fixed your inter-test dependencies.\n. Closed by #93 \n. Would you mind doing a git bisect on your codebase?\n. /cc @supermarin\n. @supermarin Whoops, guess I summoned you to the wrong issue \u2013 I guess I meant this in #99 :\n\n@fatuhoku should it be\n1. -[SomeSpec test_group__group__example] or\n2. -[SomeSpec test__group__group__example]?\n. Thanks\n. Is the view controller hierarchy connected to a UIWindow in any way?\n. > Well the ETLoadingVC is set like this in the appDelegate.\n\nNot sure I follow, is the ETLoadingVC created in the beforeEach block or -application:didFinishLaunchingWithOptions: ?\nEither way, I'd suggest against running your tests in parallel with your application logic, since there may be shared state that can make the tests hard to reason about.\n. Yeah, you could also consider creating a UIWindow in the beforeEach block.\n. If the UIWindow goes out of scope in the beforeEach block, it's going to be deallocated. Try\n``` objc\n__block UIWindow *window;\nbeforeEach(^{\n    mockUserDefaults = mock([NSUserDefaults class]);\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\nwindow = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\nwindow.rootViewController = loadingVC;\n[window makeKeyAndVisible];\n\n});\n``\n.strcmp` returns 0 if strings are equal (-1 or 1 if they are not, depending on how they compare).\nIt seems to me, however, that a better approach here would be to use NSClassFromString \n. That's a long con if I've ever seen one\n. :boom:\n. > CI issue may have been #132\nYup.\n. :cherry_blossom: \n. :+1: \n. How did you verify that this actually helps in that case? I'm looking at a project here that has Generate Test Coverage Files and Instrument Program Flow set to NO, yet it produces no such error.\n. That seems like a good idea.\n. Sure, e.g.:\n``` objc\nSpecBegin(Thing)\n__block id foo;\nbeforeEach({\n    foo = [Foo new];\n});\nSpecEnd\n``\n. I think you'd have to make the variablestaticif you wanted to use it outside ofSpecBegin. I'd put everything afterSpecBegin`.\nNote that you only need to use __block when you want to assign a value in e.g. beforeEach, which I believe is generally a good idea to ensure there is no shared state between tests.\n. FWIW, I'd be looking into committing frameworks with git lfs now.\n. Checking in Carthage/Build should do the trick I reckon\n. I take it this will have the name of the spec directly before it?\n. works for me\n. What's the migration path from SenTest to XCTest? Anything that could rain on a users parade when updating?\n. :sparkling_heart: \n. @mickeyreiss good thinking. Is that a regression compared to SenTest? If not, would you mind opening a separate issue for that?\n. @tonyarnold would you mind creating a [WIP] pull request from the arc branch? It's easier to review and give feedback this way\n. This was fixed in xctool 0.1.14 :sparkles: \n. I'm not very experienced in rspec but I found this Stack Overflow answer helpful in understanding when to use let over beforeEach.\nThat being said, the compiler already catches misspelled names.\nFiner grained and more specific let blocks seem like a good addition to me, I also like the readability.\nJust to throw an idea out there, what if the syntax was reduced further by (ab)using keyed subscripts?\n``` objc\nlet(@\"foo\") = ^{ return @\"bar\"; };\nNSString *foo = get(@\"foo\");\n```\nkinda lke ReactiveCocoa uses its RAC() macro to communicate bindings.\n. > I also decided that each example group needs to retains it's own key/value collection, such that, if a few examples need a different value, their example group could define its own value w/o affecting the rest.\nDo you mean something like this?\n``` objc\ndescribe(@\"outer\", ^{\n    let(@\"foo\") = ^{ return @\"bar\"; };\nit(@\"should be bar\", ^{\n    expect(get(@\"foo\")).to.equal(@\"bar\");\n});\n\ndescribe(@\"inner\", ^{\n    let(@\"foo\") = ^{ return @\"baz\"; };\n\n    it(@\"should be baz\", ^{\n        expect(get(@\"foo\")).to.equal(@\"baz\");\n    });\n});\n\n});\n```\n. The lack of type information is a very good point.\nI suppose it's possible to build a macro so that let and get create and invoke a memoized block of the correct return type but that may be a bit too far out.\nIf you use let on stateful objects, you can end up with accidental dependencies across your tests. Are there any best-practices in Ruby to deal with that? If you create your dependencies in beforeEach, at least you get \"fresh\" objects in a well known state but at the expense of performance.\n. :ok_hand: \n. :bow:\n. Looks good to me :+1: \n. It runs, but it crashes quite frequently on Xcode 5.0, 10.8.4, updating to 5.0.1 right now\u2026\n. Yeah, just tried again and got these results:\nSession completed in 0.611 seconds\n136 tests; 3 skipped; 0 failures; 0 exceptions; 18 pending\nProgram ended with exit code: 0\nFull report\n. Just gave it a spin in Mantle and it seemed to work fine\n. I don't see the little run button next to examples, only full specs, if that's what you're asking?\n\n. @nerdyc are you speaking about #54 ?\n. Thanks!\n. Seems like a bug to me\n. Thanks for your pull request :sparkling_heart: \ncould you add a test for this, too?\n. Ha, sorry, I only mentally greped this for asserts.\n. Looks good\n. > and add these 2 extra lines(Bold).\nNot sure which lines you mean exactly, but turning this into a Pull Request would be nice :sparkles: \n. @tonyarnold what's your feel on this?\n. In an effort to make progress on #125, I'll self-merge this if no one stops me :trollface: \n. :sparkling_heart: \n. Have you tried anything in particular that didn't work?\n. > It should be possible to make beforeEach (and friends) have a parameter type that would suggest to AppCode that it's a block.\nI believe the reason that beforeEach and it take id as a parameter for their block is that ^{ /* \u2026 */ } and ^AsyncBlock { done(); } have different signatures. It's pretty much a poor man's overloading.\nHave you looked if AppCode supports code snippets that you could use?\n. Looks like AppCode 3.0 will ship with Kiwi Live Templates, so that seems to be way to go.\n. 1. You should be able to check out an earlier version of Specta that still supports OCTest, 0.1.11 might work\n2. TBH, I probably wouldn't bother with iOS 6 anymore when iOS 8 will be in beta next week.\n. Of course, it works on my box :unamused: \n. :+1: \n. :+1: \n. What are the implications of that?\n. > I'm running Specta 0.3-wip branch in XCode 6 & iOS 7.1 & iOS 8 using Cocoapods 0.34.0.rc (I think if you upgrade to that it will solve the problem for you).\nYeah, I'm using Specta 2.1 in Xcode 6 which I installed with a dev version of cocoapods (0.33.something), the missing <XCTest/XCTest.h> seemed to have been a Cocoapods problem.\n. :+1: \n. Would it make sense to have the random generator seed be an (optional) argument as well? That way, you could replay a specific permutation to verify you fixed your inter-test dependencies.\n. Closed by #93 \n. Would you mind doing a git bisect on your codebase?\n. /cc @supermarin\n. @supermarin Whoops, guess I summoned you to the wrong issue \u2013 I guess I meant this in #99 :\n\n@fatuhoku should it be\n1. -[SomeSpec test_group__group__example] or\n2. -[SomeSpec test__group__group__example]?\n. Thanks\n. Is the view controller hierarchy connected to a UIWindow in any way?\n. > Well the ETLoadingVC is set like this in the appDelegate.\n\nNot sure I follow, is the ETLoadingVC created in the beforeEach block or -application:didFinishLaunchingWithOptions: ?\nEither way, I'd suggest against running your tests in parallel with your application logic, since there may be shared state that can make the tests hard to reason about.\n. Yeah, you could also consider creating a UIWindow in the beforeEach block.\n. If the UIWindow goes out of scope in the beforeEach block, it's going to be deallocated. Try\n``` objc\n__block UIWindow *window;\nbeforeEach(^{\n    mockUserDefaults = mock([NSUserDefaults class]);\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\nwindow = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\nwindow.rootViewController = loadingVC;\n[window makeKeyAndVisible];\n\n});\n``\n.strcmp` returns 0 if strings are equal (-1 or 1 if they are not, depending on how they compare).\nIt seems to me, however, that a better approach here would be to use NSClassFromString \n. That's a long con if I've ever seen one\n. :boom:\n. > CI issue may have been #132\nYup.\n. :cherry_blossom: \n. :+1: \n. How did you verify that this actually helps in that case? I'm looking at a project here that has Generate Test Coverage Files and Instrument Program Flow set to NO, yet it produces no such error.\n. That seems like a good idea.\n. Sure, e.g.:\n``` objc\nSpecBegin(Thing)\n__block id foo;\nbeforeEach({\n    foo = [Foo new];\n});\nSpecEnd\n``\n. I think you'd have to make the variablestaticif you wanted to use it outside ofSpecBegin. I'd put everything afterSpecBegin`.\nNote that you only need to use __block when you want to assign a value in e.g. beforeEach, which I believe is generally a good idea to ensure there is no shared state between tests.\n. FWIW, I'd be looking into committing frameworks with git lfs now.\n. Checking in Carthage/Build should do the trick I reckon\n. I take it this will have the name of the spec directly before it?\n. works for me\n. ",
    "mickeyreiss": ":+1: for XCTest support at the expense of losing SenTesting support.\n. @petejkim :+1: The upgrade was easy in a OCUnit/Specta project and seemed to work fine.\nOne question: Would it be possible to change the XCTest output when I run focused tests (using fit and fdescribe) ?\nThis is what I'm getting right now:\nExecuted 78 tests, with 0 failures (0 unexpected) in 1.847 (1.897) seconds\nI'd expect:\nExecuted 1 test, with 0 failures (0 unexpected, 0 pending) in 1.847 (1.897) seconds\nI've manually verified that the focused tests are actually running exclusively using breakpoints.\nSimilarly, there is no reporting on pending tests yet.\n. @petejkim Makes sense to me. I'd definitely advocate for anything we can do to prevent ourselves from accidentally committing focused or pending tests. Actual Xcode support would be awesome. :sailboat: \n. Tested out d4b1e27 in my project. Seems to be reporting the pending and focused tests correctly!\n. +1 this is my current workaround:\nobjc\nvoid wait_for_potential_async_exceptions(void (^done)(void)) {\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(10 * NSEC_PER_MSEC)), dispatch_get_main_queue(), ^{\n        done();\n    });\n}\n. We've been seeing some instability with waitUntil in Braintree-iOS (they are also do not interoperate nicely with KIF). To workaround, I've been migrating slowly towards XCTestExpectations for async tests.\n. What is currently blocking this from release?\nIn my opinion, releasing Xcode 6 support should be decoupled from releasing Swift support. (This branch seems to alleviate many of the inconveniences I experience in my existing objective-c project, which uses Specta 0.2.x.)\n. I also experience this failure intermittently, as well as a failure to list all test names in the Test Navigator.\n. @mokagio I see. I think a note in the CHANGELOG might be helpful for folks less involved the project day to day. I wrote up a suggestion for what the 1.0.0 notes might look like. Hope it's helpful!\n. > I'm curious, though--why does this pull request pass the CI? Shouldn't it be crashing?\nI'd assume it's because Travis CI is running Xcode 6. This only breaks in Xcode 7.\nI guess the implementation of Xctest has changed slightly and now relies on different notions of the test name in async expectation creation vs. waiting.\n. :+1: for XCTest support at the expense of losing SenTesting support.\n. @petejkim :+1: The upgrade was easy in a OCUnit/Specta project and seemed to work fine.\nOne question: Would it be possible to change the XCTest output when I run focused tests (using fit and fdescribe) ?\nThis is what I'm getting right now:\nExecuted 78 tests, with 0 failures (0 unexpected) in 1.847 (1.897) seconds\nI'd expect:\nExecuted 1 test, with 0 failures (0 unexpected, 0 pending) in 1.847 (1.897) seconds\nI've manually verified that the focused tests are actually running exclusively using breakpoints.\nSimilarly, there is no reporting on pending tests yet.\n. @petejkim Makes sense to me. I'd definitely advocate for anything we can do to prevent ourselves from accidentally committing focused or pending tests. Actual Xcode support would be awesome. :sailboat: \n. Tested out d4b1e27 in my project. Seems to be reporting the pending and focused tests correctly!\n. +1 this is my current workaround:\nobjc\nvoid wait_for_potential_async_exceptions(void (^done)(void)) {\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(10 * NSEC_PER_MSEC)), dispatch_get_main_queue(), ^{\n        done();\n    });\n}\n. We've been seeing some instability with waitUntil in Braintree-iOS (they are also do not interoperate nicely with KIF). To workaround, I've been migrating slowly towards XCTestExpectations for async tests.\n. What is currently blocking this from release?\nIn my opinion, releasing Xcode 6 support should be decoupled from releasing Swift support. (This branch seems to alleviate many of the inconveniences I experience in my existing objective-c project, which uses Specta 0.2.x.)\n. I also experience this failure intermittently, as well as a failure to list all test names in the Test Navigator.\n. @mokagio I see. I think a note in the CHANGELOG might be helpful for folks less involved the project day to day. I wrote up a suggestion for what the 1.0.0 notes might look like. Hope it's helpful!\n. > I'm curious, though--why does this pull request pass the CI? Shouldn't it be crashing?\nI'd assume it's because Travis CI is running Xcode 6. This only breaks in Xcode 7.\nI guess the implementation of Xctest has changed slightly and now relies on different notions of the test name in async expectation creation vs. waiting.\n. ",
    "bainfu": "Found this while researching this issue last night: https://bitbucket.org/statefullabs/specta/\n. I'm having a particular problem,  I've only been able to test it in my current operating workspace and this only seems to be a problem with projects that build and include specta-ios in their scheme.  (We have a custom workspace and we don't set things up using the pod files.)\n\nHere's where it fails:\n```\nProcessPCH /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/PrecompiledHeaders/Specta-Prefix-gybyphyceassixdofemkipdkzyza/Specta-Prefix.pch.pch src/Specta-Prefix.pch normal i386 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /Users/bainfu/Development/iOS/Hilton/Testing/specta\n    setenv LANG en_US.US-ASCII\n    setenv PATH \"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c-header -arch i386 -fmessage-length=0 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -std=gnu99 -fobjc-arc -fmodules -fmodules-cache-path=/Users/bainfu/Library/Developer/Xcode/DerivedData/ModuleCache -Wno-trigraphs -fpascal-strings -O0 -Wno-missing-field-initializers -Wno-missing-prototypes -Werror=return-type -Wno-implicit-atomic-properties -Werror=deprecated-objc-isa-usage -Werror=objc-root-class -Wno-receiver-is-weak -Wno-arc-repeated-use-of-weak -Wduplicate-method-match -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wuninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wundeclared-selector -Wno-deprecated-implementations -DDEBUG=1 -DDEBUG=1 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk -fexceptions -fasm-blocks -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -g -Wno-sign-conversion -fobjc-abi-version=2 -fobjc-legacy-dispatch -mios-simulator-version-min=7.0 -iquote /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/Specta-iOS-generated-files.hmap -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/Specta-iOS-own-target-headers.hmap -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/Specta-iOS-all-target-headers.hmap -iquote /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/Specta-iOS-project-headers.hmap -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Products/Debug-iphonesimulator/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/DerivedSources/i386 -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/DerivedSources -F/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Products/Debug-iphonesimulator -F/Applications/Xcode.app/Contents/Developer/Library/Frameworks --serialize-diagnostics /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/PrecompiledHeaders/Specta-Prefix-gybyphyceassixdofemkipdkzyza/Specta-Prefix.pch.dia -MMD -MT dependencies -MF /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/PrecompiledHeaders/Specta-Prefix-gybyphyceassixdofemkipdkzyza/Specta-Prefix.pch.d -c /Users/bainfu/Development/iOS/Hilton/Testing/specta/src/Specta-Prefix.pch -o /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/PrecompiledHeaders/Specta-Prefix-gybyphyceassixdofemkipdkzyza/Specta-Prefix.pch.pch\n/Users/bainfu/Development/iOS/Hilton/Testing/specta/src/Specta-Prefix.pch:3:4: fatal error: malformed or corrupted AST file: 'mismatched umbrella headers in submodule'\nimport \n^\n/Users/bainfu/Development/iOS/Hilton/Testing/specta/src/Specta-Prefix.pch:3:4: note: after modifying system headers, please delete the module cache at '/Users/bainfu/Library/Developer/Xcode/DerivedData/ModuleCache/2KOPMAUEDSPJ3'\n1 error generated.\n```\nI did what it said and blew away the module cache, but that didn't work.  Even worse it affects other projects without specta.  However once I remove the dependency... reboot, and compile and test the projects that do not have specta they work again.\nThis just started happening after I updated to the branch.\n. If I remove it from the pre-compiled header It fails other places that XCTest is included / imported.\n. I see the problem.  The deployment target for Specta-iOS is iOS 7.0 if I shift it to iOS 6.0 (Which XCTest works with) I am able to compile fine and run my tests fine..\n. BTW, with that change works great thanks @petejkim!\n. @mgrimes when that happened to me the first time, I actually had to reboot.  Restarting Xcode wasn't enough it was holding onto something.\n. Found this while researching this issue last night: https://bitbucket.org/statefullabs/specta/\n. I'm having a particular problem,  I've only been able to test it in my current operating workspace and this only seems to be a problem with projects that build and include specta-ios in their scheme.  (We have a custom workspace and we don't set things up using the pod files.)\n\nHere's where it fails:\n```\nProcessPCH /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/PrecompiledHeaders/Specta-Prefix-gybyphyceassixdofemkipdkzyza/Specta-Prefix.pch.pch src/Specta-Prefix.pch normal i386 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /Users/bainfu/Development/iOS/Hilton/Testing/specta\n    setenv LANG en_US.US-ASCII\n    setenv PATH \"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c-header -arch i386 -fmessage-length=0 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -std=gnu99 -fobjc-arc -fmodules -fmodules-cache-path=/Users/bainfu/Library/Developer/Xcode/DerivedData/ModuleCache -Wno-trigraphs -fpascal-strings -O0 -Wno-missing-field-initializers -Wno-missing-prototypes -Werror=return-type -Wno-implicit-atomic-properties -Werror=deprecated-objc-isa-usage -Werror=objc-root-class -Wno-receiver-is-weak -Wno-arc-repeated-use-of-weak -Wduplicate-method-match -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wuninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wundeclared-selector -Wno-deprecated-implementations -DDEBUG=1 -DDEBUG=1 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk -fexceptions -fasm-blocks -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -g -Wno-sign-conversion -fobjc-abi-version=2 -fobjc-legacy-dispatch -mios-simulator-version-min=7.0 -iquote /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/Specta-iOS-generated-files.hmap -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/Specta-iOS-own-target-headers.hmap -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/Specta-iOS-all-target-headers.hmap -iquote /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/Specta-iOS-project-headers.hmap -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Products/Debug-iphonesimulator/include -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/DerivedSources/i386 -I/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/Specta.build/Debug-iphonesimulator/Specta-iOS.build/DerivedSources -F/Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Products/Debug-iphonesimulator -F/Applications/Xcode.app/Contents/Developer/Library/Frameworks --serialize-diagnostics /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/PrecompiledHeaders/Specta-Prefix-gybyphyceassixdofemkipdkzyza/Specta-Prefix.pch.dia -MMD -MT dependencies -MF /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/PrecompiledHeaders/Specta-Prefix-gybyphyceassixdofemkipdkzyza/Specta-Prefix.pch.d -c /Users/bainfu/Development/iOS/Hilton/Testing/specta/src/Specta-Prefix.pch -o /Users/bainfu/Library/Developer/Xcode/DerivedData/HiltonRnD-bgzkpgxorvudrgefhmsmwyqljpnw/Build/Intermediates/PrecompiledHeaders/Specta-Prefix-gybyphyceassixdofemkipdkzyza/Specta-Prefix.pch.pch\n/Users/bainfu/Development/iOS/Hilton/Testing/specta/src/Specta-Prefix.pch:3:4: fatal error: malformed or corrupted AST file: 'mismatched umbrella headers in submodule'\nimport \n^\n/Users/bainfu/Development/iOS/Hilton/Testing/specta/src/Specta-Prefix.pch:3:4: note: after modifying system headers, please delete the module cache at '/Users/bainfu/Library/Developer/Xcode/DerivedData/ModuleCache/2KOPMAUEDSPJ3'\n1 error generated.\n```\nI did what it said and blew away the module cache, but that didn't work.  Even worse it affects other projects without specta.  However once I remove the dependency... reboot, and compile and test the projects that do not have specta they work again.\nThis just started happening after I updated to the branch.\n. If I remove it from the pre-compiled header It fails other places that XCTest is included / imported.\n. I see the problem.  The deployment target for Specta-iOS is iOS 7.0 if I shift it to iOS 6.0 (Which XCTest works with) I am able to compile fine and run my tests fine..\n. BTW, with that change works great thanks @petejkim!\n. @mgrimes when that happened to me the first time, I actually had to reboot.  Restarting Xcode wasn't enough it was holding onto something.\n. ",
    "rsaunders100": "Am I correct In thinking that specta no longer supports OCUnit (Since there is now a reference to the XCTest framework in the podspec)?  \nI am currently experimenting with reverting back to OCUnit to get unit tests running on the iOS 6, but specta isn't compatible it seems.... \n. Am I correct In thinking that specta no longer supports OCUnit (Since there is now a reference to the XCTest framework in the podspec)?  \nI am currently experimenting with reverting back to OCUnit to get unit tests running on the iOS 6, but specta isn't compatible it seems.... \n. ",
    "modocache": "@rsaunders100 One alternative is to use the Kiwi testing framework still supports OCUnit test bundles (for the time being), and has syntax very similar to Specta's.\nIf your project uses Specta and Expecta, you will have to change the assertions from EXP_expect(subject).to to the Kiwi syntax,[subject should]. Other than that, the migration should be fairly straightforward.\n. @itsthejb @robb I took a stab at this in pull request #67. I took a different approach from the one @itsthejb described, but the issue itself is fixed. Pull it down and give it a whirl when you get the chance! :neckbeard: \n. This issue is resolved now that #67 has been merged; it should be closed. :dancers:\n. @robb Bump...? Not to pester you, but I'm just curious as to whether this has been overlooked, or if the implementation is too poor to be merged. I'll close this if it's the latter, no hard feelings :neckbeard: \n. :cupid: :sparkles: \n. It didn't always send a message to nil. The else block you found originally called -[NSException raise]. The commit that introduced the change didn't add any tests to confirm the new behavior, and so no one noticed when this commit introduced the bug you've reported.\nSeems to me like the fix would be to revert the change. That is, call -[NSException raise] instead of -[SPTXCTestCase recordFailureWithDescription:inFile:atLine:expected:].\n. On second thought, the original intent of wrapping the failure in an it block was to create a current test case in the event that SPTCurrentTestCase was nil. So re-evaluating SPTCurrentTestCase within the it block is all it takes to get this code working again.\nI've issued PR #80 with the fix.\n. Travis is reporting a failure, but the real issue appears to be that the repository doesn't have a .travis.yml file yet (perhaps related to #72?). I can guarantee the tests all pass on my end :wink: \n. Found it: 6beb128b3c645c2b05e6d774075c83da31e9a47a\nThanks @petejkim! :heartbeat: \n. +1, confirmed this pull request gets specs to build!\nHowever, the Specta unit tests still fail on the latest version of Xcode, even with this change.\n. Another issue on the latest version of Xcode: Instead of individual example names, -[SPTXCTestCase spt_runExampleAtIndex:], the invocation created in +[SPTXCTestCase testInvocations], shows up in the test navigator.\nBecause each of the invocations has the same name, only one appears, even when multiple examples are defined.\n\n@robb I'd recommend merging this PR, then creating separate issues for (1) unit test failures and (2) the above regression. If you're at WWDC you might want to speak to someone, or file a radar.\n. Another issue to note: because all tests now have the same name (i.e.: spt_runExampleAtIndex:), only the last test failure is actually shown as a red line in Xcode. Every previous failure is \"overwritten\" by the subsequent pass/fail. If the last test passes, no failures are displayed (although the test suite itself does fail).\n. :cupid: :sparkles: \n. @StatusReport The problem this issue originally reported, that all tests show up as spt_runExampleAtIndex:, has been fixed. The issues you reference still exist in all frameworks that use dynamic test invocations, whether that's Specta or Quick.\nI'm closing this issue to avoid confusion. Please open new issues for problems with the test navigator. Or better yet, file radars. :wink: \n. Once Xcode 6 becomes stable, developers will have to upgrade in order to submit their apps, making Xcode 5 support meaningless. :open_mouth: \nI think the current branching strategy is smart. :bulb: :sparkles: Once Xcode 6 is officially released, you can merge 0.3-wip into master, thus dropping Xcode 5 support.\n. @tonyarnold I don't think it's impossible: looking at the diff so far @petejkim is maintaining backwards compatibility.\nThe cost is macros spread throughout the codebase--a lot of public XCTest APIs changed with the latest release, not to mention the various private APIs Specta uses.\nIf Apple requires builds using Xcode 6 and Travis CI keeps using 5, I expect users' main targets won't even build, let alone their test targets. If ya ask me, the burden should be on services like Travis to upgrade to Xcode 6, not for libraries like Specta to support stragglers.\n. XCTest has full control over the order in which test case subclasses (i.e.: Specta specs) are executed. However, Specta should be able to randomize the order of the individual examples defined by those subclasses by shuffling the invocations returned by +[SPTXCTestCase testInvocations].\nThis shuffling should help catch examples that depend on previous examples in the same spec class. But it won't help to find examples that depend on examples in other spec classes.\nIt might be possible to shuffle the spec classes themselves by shuffling the classes returned by the swizzled +[XCTestCase xct_allSubclasses] method--which I believe was made public as of Xcode 6.\nOne question, @orta: you can randomize examples in RSpec using command line arguments: rspec --order random. How would you want to randomize examples in Specta? Command line arguments as well?\n. @NSDex @hatunike Can you show the full code for your sharedExamples(@\"some shared example\")? As @akashivskyy mentions, it's possible you're accessing variables before Specta expects you to.\n. Looks like this can be closed! I'll keep this in mind when improving documentation in the future. Thanks, everybody! :+1: \n. I think this is a great initiative! :100: \nI'd love to help review PRs, and I think #103 deserves some attention. I'll try to submit a PR to fix that issue--although if someone else beats me to the punch, no hard feelings! :stuck_out_tongue_closed_eyes: \n. This might be a dumb question, but: is there any reason to store globals in a thread-local dictionary, like Specta does? XCTest doesn't execute test cases in parallel.\n. Definitely a +1, but it looks like there's a CI error. Any ideas?\n. I tried a less ambitious approach in https://github.com/kiwi-bdd/Kiwi/pull/449 as well. IIRC that PR has custom output piped to a file, rather than stdout, which might be the best we can do without reaching into Xcode internals.\nOne of the best ways to see support for this, across all testing frameworks, would be filing a radar. :snail: \n. It does seem unsafe for Specta to pick up every class that implements +beforeEach and +afterEach.  Shouldn't it be opt-in, not opt-out? That is, only classes that conform to a protocol like SPTGlobalBeforeAfterEach should be included.\n@wasnotrice, can you try putting the following code somewhere it'll be executed before Specta runs its tests, like maybe in your test helper's +load method?\nobjc\nClass klass = NSClassFromString(@\"AVYPhotoEditorCustomization\");\nclass_addProtocol(klass, @protocol(SPTExcludeGlobalBeforeAfterEach));\n. > @wasnotrice could you please check what hits +[AVYPhotoEditorCustomization initialize] if it has the exclude protocol added?\nFor the scope of this issue, I think it's worth double-checking here. :point_up: \nBut a few notes:\n\nSo far we had two issues related to this. I'm pretty sure this issue is unavoidable even with whitelisting mechanism\n\nThere are other approaches, ones that doesn't involve checking the class list for protocol conformance in either direction. I don't think that's the only way to do it, and would love to see more, but I don't necessarily think looking for protocol conformance (as opposed to adoption, or some other method) is the best approach. As you mention, there have been at least two false positives since the feature was introduced.\n\nIt's a bit more complicated for developers to integrate with this feature\n\nMaybe it's just me, but I struggle to think of when this feature might be necessary. I know of only two users in the real world: @wasnotrice and libgit2/objective-git. I'd rather it be a little harder to use than for users to accidentally have it fire on them. I mean, take a look at the PR that introduced the opt-out feature: it includes a code comment that says \"If you're seeing a crash here then...\", which I think is a pretty bad experience for users. (Sorry if that sounds harsh--I think the set of PRs that @paweldudek sent are a massive improvement on the whole! I just think that code comment highlights the issue we're seeing here.)\n\nRequires a bit of work for people who already implement this\n\nThis, I think, is the biggest problem with changing how it currently works. I don't want to change an API that people rely upon. https://github.com/specta/specta/pull/149 does that, and users who use the feature are going to have to make changes to keep up. I think it's worth it to make sure that's absolutely necessary in this case, and whether they may be a better approach to global before/after each as a whole.\n. That sounds fine to me. I think whitelisting sounds pretty safe.\n\nI'm pretty sure this issue is unavoidable even with whitelisting mechanism\n\n@paweldudek Can you explain your thoughts a bit? From what I can tell, the problem here is that @wasnotrice is trying to opt-out before his class is picked up by Specta's code, so he needed to find a way to dynamically opt-out in time. With a whitelisting mechanism, users won't accidentally be opted-in, so they won't have to race Specta in order to prevent a crash. :snail: \n. Thank you! :100: \n. Is NLRecord part of your application target, your test target, or both? If it's included in both your application and test target, then it's actually two different classes, and you may see both of them registered. Just a theory! :bulb: \n. @valerius Great resource, thanks for the link! :+1: \n. Potentially related to https://github.com/Quick/Quick/issues/373, with a proposed solution here: https://github.com/Quick/Quick/issues/439.\n. Thanks for the issue, @mickeyreiss!! Super cool stuff. :gift_heart: \nhttps://github.com/Quick/Quick/pull/328 solved a very similar issue in Quick. From the commit messages:\n\nXCTAssert macros must use some internal machinery to report failures. Quick specs don't have the correct state to report failures, but the XCTestRun objects passed to the -[XCTestCase performTest:] method do. Use those instead.\n\nPerhaps Specta (and I imagine Quick will have to do this as well) could achieve a similar solution for test expectations by ensuring that XCTestExpectation objects interact with the current XCTestRun, not the SPTSpec itself. Maybe override -[SPTSpec -expectationWithDescription:], like so?\n``` objc\n// SPTSpec.m\n\n(XCTestExpectation )expectationWithDescription:(NSString )description {\n  // Specta stores the current test run in a property called spt_run.\n  // This is the test run passed to -[XCTestCase performTest:].\n  return [self.spt_run expectationWithDescription:description];\n}\n```\n\n\nAll this with the caveat that I'd recommend simply using Expecta's (or Nimble's) asynchronous expectations.\n\nI'm curious, though--why does this pull request pass the CI? Shouldn't it be crashing?\nThis internal wackiness around XCTAssert macros and XCTestExpectation objects is confusing. I'll try to reach out to the XCTest team to see what the dealio is. If anyone wants to file a radar, that'd be swell, too! :+1: \n. The issue would manifest with any consumer of +[XCTestCase testInvocations], in which a different set of tests was generated between two test runs.\nIt would be great to create a sample project that demonstrates this. We could then encourage commenters on this, https://github.com/Quick/Quick/issues/219, and https://github.com/Quick/Quick/issues/427 to \"dupe\" a master Radar. It's about time we try to effectively communicate what we need to Apple.\nNo promises, but I'll try to get to this sometime this weekend. If someone beats me to it, I'd be much obliged. \u2764\ufe0f \n. Oh, hmm, good question... I would assume that running the tests via the command line would not affect the test navigator, so yes, that does seem like a reasonable workaround.\n. If you use Specta or Quick and are disappointed with tests disappearing in Xcode's Test Navigator, tests lingering in the Test Navigator despite no longer being defined, or even tests not being run, please read and duplicate this radar: https://openradar.appspot.com/26028557.\nXcode does not provide the Specta or Quick maintainers with an API to address these problems. The best way to contribute to fixing these issues is to communicate to the Apple XCTest team that this is a use case we wish they'd support better. The best way I know to do that is to ask you all to re-submit https://openradar.appspot.com/26028557. \ud83d\ude47 \n. Thanks! Every little bit counts. \ud83d\udcaf \n. @StatusReport That's awesome, thanks!! \ud83d\udc93  Raising awareness is very valuable -- if more people file radars or mention this to Apple engineers, the problem is more likely to be addressed. Every radar dupe counts.\n. @robb Oh, good point.\nLet's merge this sucker.\n. @rsaunders100 One alternative is to use the Kiwi testing framework still supports OCUnit test bundles (for the time being), and has syntax very similar to Specta's.\nIf your project uses Specta and Expecta, you will have to change the assertions from EXP_expect(subject).to to the Kiwi syntax,[subject should]. Other than that, the migration should be fairly straightforward.\n. @itsthejb @robb I took a stab at this in pull request #67. I took a different approach from the one @itsthejb described, but the issue itself is fixed. Pull it down and give it a whirl when you get the chance! :neckbeard: \n. This issue is resolved now that #67 has been merged; it should be closed. :dancers:\n. @robb Bump...? Not to pester you, but I'm just curious as to whether this has been overlooked, or if the implementation is too poor to be merged. I'll close this if it's the latter, no hard feelings :neckbeard: \n. :cupid: :sparkles: \n. It didn't always send a message to nil. The else block you found originally called -[NSException raise]. The commit that introduced the change didn't add any tests to confirm the new behavior, and so no one noticed when this commit introduced the bug you've reported.\nSeems to me like the fix would be to revert the change. That is, call -[NSException raise] instead of -[SPTXCTestCase recordFailureWithDescription:inFile:atLine:expected:].\n. On second thought, the original intent of wrapping the failure in an it block was to create a current test case in the event that SPTCurrentTestCase was nil. So re-evaluating SPTCurrentTestCase within the it block is all it takes to get this code working again.\nI've issued PR #80 with the fix.\n. Travis is reporting a failure, but the real issue appears to be that the repository doesn't have a .travis.yml file yet (perhaps related to #72?). I can guarantee the tests all pass on my end :wink: \n. Found it: 6beb128b3c645c2b05e6d774075c83da31e9a47a\nThanks @petejkim! :heartbeat: \n. +1, confirmed this pull request gets specs to build!\nHowever, the Specta unit tests still fail on the latest version of Xcode, even with this change.\n. Another issue on the latest version of Xcode: Instead of individual example names, -[SPTXCTestCase spt_runExampleAtIndex:], the invocation created in +[SPTXCTestCase testInvocations], shows up in the test navigator.\nBecause each of the invocations has the same name, only one appears, even when multiple examples are defined.\n\n@robb I'd recommend merging this PR, then creating separate issues for (1) unit test failures and (2) the above regression. If you're at WWDC you might want to speak to someone, or file a radar.\n. Another issue to note: because all tests now have the same name (i.e.: spt_runExampleAtIndex:), only the last test failure is actually shown as a red line in Xcode. Every previous failure is \"overwritten\" by the subsequent pass/fail. If the last test passes, no failures are displayed (although the test suite itself does fail).\n. :cupid: :sparkles: \n. @StatusReport The problem this issue originally reported, that all tests show up as spt_runExampleAtIndex:, has been fixed. The issues you reference still exist in all frameworks that use dynamic test invocations, whether that's Specta or Quick.\nI'm closing this issue to avoid confusion. Please open new issues for problems with the test navigator. Or better yet, file radars. :wink: \n. Once Xcode 6 becomes stable, developers will have to upgrade in order to submit their apps, making Xcode 5 support meaningless. :open_mouth: \nI think the current branching strategy is smart. :bulb: :sparkles: Once Xcode 6 is officially released, you can merge 0.3-wip into master, thus dropping Xcode 5 support.\n. @tonyarnold I don't think it's impossible: looking at the diff so far @petejkim is maintaining backwards compatibility.\nThe cost is macros spread throughout the codebase--a lot of public XCTest APIs changed with the latest release, not to mention the various private APIs Specta uses.\nIf Apple requires builds using Xcode 6 and Travis CI keeps using 5, I expect users' main targets won't even build, let alone their test targets. If ya ask me, the burden should be on services like Travis to upgrade to Xcode 6, not for libraries like Specta to support stragglers.\n. XCTest has full control over the order in which test case subclasses (i.e.: Specta specs) are executed. However, Specta should be able to randomize the order of the individual examples defined by those subclasses by shuffling the invocations returned by +[SPTXCTestCase testInvocations].\nThis shuffling should help catch examples that depend on previous examples in the same spec class. But it won't help to find examples that depend on examples in other spec classes.\nIt might be possible to shuffle the spec classes themselves by shuffling the classes returned by the swizzled +[XCTestCase xct_allSubclasses] method--which I believe was made public as of Xcode 6.\nOne question, @orta: you can randomize examples in RSpec using command line arguments: rspec --order random. How would you want to randomize examples in Specta? Command line arguments as well?\n. @NSDex @hatunike Can you show the full code for your sharedExamples(@\"some shared example\")? As @akashivskyy mentions, it's possible you're accessing variables before Specta expects you to.\n. Looks like this can be closed! I'll keep this in mind when improving documentation in the future. Thanks, everybody! :+1: \n. I think this is a great initiative! :100: \nI'd love to help review PRs, and I think #103 deserves some attention. I'll try to submit a PR to fix that issue--although if someone else beats me to the punch, no hard feelings! :stuck_out_tongue_closed_eyes: \n. This might be a dumb question, but: is there any reason to store globals in a thread-local dictionary, like Specta does? XCTest doesn't execute test cases in parallel.\n. Definitely a +1, but it looks like there's a CI error. Any ideas?\n. I tried a less ambitious approach in https://github.com/kiwi-bdd/Kiwi/pull/449 as well. IIRC that PR has custom output piped to a file, rather than stdout, which might be the best we can do without reaching into Xcode internals.\nOne of the best ways to see support for this, across all testing frameworks, would be filing a radar. :snail: \n. It does seem unsafe for Specta to pick up every class that implements +beforeEach and +afterEach.  Shouldn't it be opt-in, not opt-out? That is, only classes that conform to a protocol like SPTGlobalBeforeAfterEach should be included.\n@wasnotrice, can you try putting the following code somewhere it'll be executed before Specta runs its tests, like maybe in your test helper's +load method?\nobjc\nClass klass = NSClassFromString(@\"AVYPhotoEditorCustomization\");\nclass_addProtocol(klass, @protocol(SPTExcludeGlobalBeforeAfterEach));\n. > @wasnotrice could you please check what hits +[AVYPhotoEditorCustomization initialize] if it has the exclude protocol added?\nFor the scope of this issue, I think it's worth double-checking here. :point_up: \nBut a few notes:\n\nSo far we had two issues related to this. I'm pretty sure this issue is unavoidable even with whitelisting mechanism\n\nThere are other approaches, ones that doesn't involve checking the class list for protocol conformance in either direction. I don't think that's the only way to do it, and would love to see more, but I don't necessarily think looking for protocol conformance (as opposed to adoption, or some other method) is the best approach. As you mention, there have been at least two false positives since the feature was introduced.\n\nIt's a bit more complicated for developers to integrate with this feature\n\nMaybe it's just me, but I struggle to think of when this feature might be necessary. I know of only two users in the real world: @wasnotrice and libgit2/objective-git. I'd rather it be a little harder to use than for users to accidentally have it fire on them. I mean, take a look at the PR that introduced the opt-out feature: it includes a code comment that says \"If you're seeing a crash here then...\", which I think is a pretty bad experience for users. (Sorry if that sounds harsh--I think the set of PRs that @paweldudek sent are a massive improvement on the whole! I just think that code comment highlights the issue we're seeing here.)\n\nRequires a bit of work for people who already implement this\n\nThis, I think, is the biggest problem with changing how it currently works. I don't want to change an API that people rely upon. https://github.com/specta/specta/pull/149 does that, and users who use the feature are going to have to make changes to keep up. I think it's worth it to make sure that's absolutely necessary in this case, and whether they may be a better approach to global before/after each as a whole.\n. That sounds fine to me. I think whitelisting sounds pretty safe.\n\nI'm pretty sure this issue is unavoidable even with whitelisting mechanism\n\n@paweldudek Can you explain your thoughts a bit? From what I can tell, the problem here is that @wasnotrice is trying to opt-out before his class is picked up by Specta's code, so he needed to find a way to dynamically opt-out in time. With a whitelisting mechanism, users won't accidentally be opted-in, so they won't have to race Specta in order to prevent a crash. :snail: \n. Thank you! :100: \n. Is NLRecord part of your application target, your test target, or both? If it's included in both your application and test target, then it's actually two different classes, and you may see both of them registered. Just a theory! :bulb: \n. @valerius Great resource, thanks for the link! :+1: \n. Potentially related to https://github.com/Quick/Quick/issues/373, with a proposed solution here: https://github.com/Quick/Quick/issues/439.\n. Thanks for the issue, @mickeyreiss!! Super cool stuff. :gift_heart: \nhttps://github.com/Quick/Quick/pull/328 solved a very similar issue in Quick. From the commit messages:\n\nXCTAssert macros must use some internal machinery to report failures. Quick specs don't have the correct state to report failures, but the XCTestRun objects passed to the -[XCTestCase performTest:] method do. Use those instead.\n\nPerhaps Specta (and I imagine Quick will have to do this as well) could achieve a similar solution for test expectations by ensuring that XCTestExpectation objects interact with the current XCTestRun, not the SPTSpec itself. Maybe override -[SPTSpec -expectationWithDescription:], like so?\n``` objc\n// SPTSpec.m\n\n(XCTestExpectation )expectationWithDescription:(NSString )description {\n  // Specta stores the current test run in a property called spt_run.\n  // This is the test run passed to -[XCTestCase performTest:].\n  return [self.spt_run expectationWithDescription:description];\n}\n```\n\n\nAll this with the caveat that I'd recommend simply using Expecta's (or Nimble's) asynchronous expectations.\n\nI'm curious, though--why does this pull request pass the CI? Shouldn't it be crashing?\nThis internal wackiness around XCTAssert macros and XCTestExpectation objects is confusing. I'll try to reach out to the XCTest team to see what the dealio is. If anyone wants to file a radar, that'd be swell, too! :+1: \n. The issue would manifest with any consumer of +[XCTestCase testInvocations], in which a different set of tests was generated between two test runs.\nIt would be great to create a sample project that demonstrates this. We could then encourage commenters on this, https://github.com/Quick/Quick/issues/219, and https://github.com/Quick/Quick/issues/427 to \"dupe\" a master Radar. It's about time we try to effectively communicate what we need to Apple.\nNo promises, but I'll try to get to this sometime this weekend. If someone beats me to it, I'd be much obliged. \u2764\ufe0f \n. Oh, hmm, good question... I would assume that running the tests via the command line would not affect the test navigator, so yes, that does seem like a reasonable workaround.\n. If you use Specta or Quick and are disappointed with tests disappearing in Xcode's Test Navigator, tests lingering in the Test Navigator despite no longer being defined, or even tests not being run, please read and duplicate this radar: https://openradar.appspot.com/26028557.\nXcode does not provide the Specta or Quick maintainers with an API to address these problems. The best way to contribute to fixing these issues is to communicate to the Apple XCTest team that this is a use case we wish they'd support better. The best way I know to do that is to ask you all to re-submit https://openradar.appspot.com/26028557. \ud83d\ude47 \n. Thanks! Every little bit counts. \ud83d\udcaf \n. @StatusReport That's awesome, thanks!! \ud83d\udc93  Raising awareness is very valuable -- if more people file radars or mention this to Apple engineers, the problem is more likely to be addressed. Every radar dupe counts.\n. @robb Oh, good point.\nLet's merge this sucker.\n. ",
    "cyupa": "The timeout was left that way because of a very big lag in the first place. I changed that but it doesn't make any difference to the issue.\nYes, I am also using specta but it fails. You could try for yourself the example you gave and see if it fails, for me it does. I added some brakepoints in both success and failure callbacks, they are never called.\nOk, so the semaphore would block, I'll drop it.\nNow, following your suggestion I'm having something like this:\n``` objective-c\n// The authToken that will be used in all the tests\n__block NSString *authToken = nil;\nbeforeAll(^{\n        // This is run once and only once before all of the examples\n        // in this group and before any beforeEach blocks.\n    // Set a timeout of 20 sec\n    setAsyncSpecTimeout(20);\n\n    UserSession *sessionManager = [UserSession sharedInstance];\n    [sessionManager userSessionWithUsername:@\"user\"\n                                      password:@\"pass\"\n                                      success:^(UserSessionData *session) {\n                                             // Set the authToken string\n                                             authToken = session.authToken;\n                                 }\n                                      failure:^(NSError *error) {\n                                             // Handle the error\n                                }];\n\n    expect(authToken).will.beInstanceOf([NSString class]);\n\n});\n\n```\nThe will matcher fails. It tries to do the other tests, which also fail, because they make use of the authToken.\n. The timeout was left that way because of a very big lag in the first place. I changed that but it doesn't make any difference to the issue.\nYes, I am also using specta but it fails. You could try for yourself the example you gave and see if it fails, for me it does. I added some brakepoints in both success and failure callbacks, they are never called.\nOk, so the semaphore would block, I'll drop it.\nNow, following your suggestion I'm having something like this:\n``` objective-c\n// The authToken that will be used in all the tests\n__block NSString *authToken = nil;\nbeforeAll(^{\n        // This is run once and only once before all of the examples\n        // in this group and before any beforeEach blocks.\n    // Set a timeout of 20 sec\n    setAsyncSpecTimeout(20);\n\n    UserSession *sessionManager = [UserSession sharedInstance];\n    [sessionManager userSessionWithUsername:@\"user\"\n                                      password:@\"pass\"\n                                      success:^(UserSessionData *session) {\n                                             // Set the authToken string\n                                             authToken = session.authToken;\n                                 }\n                                      failure:^(NSError *error) {\n                                             // Handle the error\n                                }];\n\n    expect(authToken).will.beInstanceOf([NSString class]);\n\n});\n\n```\nThe will matcher fails. It tries to do the other tests, which also fail, because they make use of the authToken.\n. ",
    "itsthejb": "Sounds good. Is this issue not sufficient, though?\n. https://github.com/itsthejb/specta/commit/d146bb328070e9506beafd5bccf058176f8dd9cc specs the issue. Just seeing if I can do a fix and a PR...\n. Doesn't seem to be a trivial fix. From what I can see, we need to add pending examples in order to have them recorded in the output. However, there's no argument I can use at the moment to discern the pending examples in -addExampleWithName:block:focused: in order to skip -incrementExampleCount (which would seem to be the eventual fix).\nThis seems to be a reasonably important issue, though...\n. @modocache, great! Thanks\n. Sounds good. Is this issue not sufficient, though?\n. https://github.com/itsthejb/specta/commit/d146bb328070e9506beafd5bccf058176f8dd9cc specs the issue. Just seeing if I can do a fix and a PR...\n. Doesn't seem to be a trivial fix. From what I can see, we need to add pending examples in order to have them recorded in the output. However, there's no argument I can use at the moment to discern the pending examples in -addExampleWithName:block:focused: in order to skip -incrementExampleCount (which would seem to be the eventual fix).\nThis seems to be a reasonably important issue, though...\n. @modocache, great! Thanks\n. ",
    "yageek": "When I add :\nobjc\n  dispatch_async(dispatch_get_main_queue(), ^{\n                    expect(1).to.equal(2);\n                });\nit works, is there a best practice for this case ?\n. When I add :\nobjc\n  dispatch_async(dispatch_get_main_queue(), ^{\n                    expect(1).to.equal(2);\n                });\nit works, is there a best practice for this case ?\n. ",
    "mattgoldspink": "We've just hit the same issue in our code. What makes this worse for us is that our assertion is that a block IS being called on the main thread! So if the only way we can can assert that is to do the assertion on the main thread then we can never have the test fail.\n. We've just hit the same issue in our code. What makes this worse for us is that our assertion is that a block IS being called on the main thread! So if the only way we can can assert that is to do the assertion on the main thread then we can never have the test fail.\n. ",
    "sansari": "THANK YOU SO MUCH! You are awesome :) #happytester\n. THANK YOU SO MUCH! You are awesome :) #happytester\n. ",
    "AgileMantis": "I like the reduced syntax and the RAC() assignment style.  Great idea!\nThe misspellings benefit of let is not the main reason for the feature.  It's the ability make assignments once and use them in multiple examples and example groups.  RSpec's let also lazy evaluates and memoizes.  The main objective of this feature is for this value.  \nIt's also better DRY approach, IMHO.  I'm not sure what conventions folks use to create reusable code in Specta, but I like the readability of this approach, along with lazy evaluation.\nI also decided that each example group needs to retains it's own key/value collection, such that, if a few examples need a different value, their example group could define its own value w/o affecting the rest.  I'm not sure if that could be done cleanly with other DRY approaches people use with Specta (again, I could be wrong).\nIf you feel the feature is worth while, kill this pull request and I'll work on the new syntax.\nThx\nb\n. Yes!  I included two tests, one just like this for nesting.\n. It's a subtle advantage.  \nBeforeEach is run on every example, were let can memoize (I've not added that yet, but plan to).  If the code used to make the assignment is costly, single execution is preferred.  In RSPec land, I have dozens of examples for a Spec which use Fixtures, which are in the DB and transactional, so memoziation across lots of specs adds up in perf gains.  \nSecond, they're lazy evaluated, so if examples upstream from a get fail, the code will not even fire.  IMHO, executing code at the time it's needed, in the example block, instead of way before hand in before blocks, help reduce side effects between examples by keeping examples more isolated.  \nb\n. I agree w/@robb and @blakewatters regarding side effects of cross-example dependencies.  Thus, if speed is not an issue and folks are okay with before hooks, then let's kill this.\nGreat conversations!\nb\n. I like the reduced syntax and the RAC() assignment style.  Great idea!\nThe misspellings benefit of let is not the main reason for the feature.  It's the ability make assignments once and use them in multiple examples and example groups.  RSpec's let also lazy evaluates and memoizes.  The main objective of this feature is for this value.  \nIt's also better DRY approach, IMHO.  I'm not sure what conventions folks use to create reusable code in Specta, but I like the readability of this approach, along with lazy evaluation.\nI also decided that each example group needs to retains it's own key/value collection, such that, if a few examples need a different value, their example group could define its own value w/o affecting the rest.  I'm not sure if that could be done cleanly with other DRY approaches people use with Specta (again, I could be wrong).\nIf you feel the feature is worth while, kill this pull request and I'll work on the new syntax.\nThx\nb\n. Yes!  I included two tests, one just like this for nesting.\n. It's a subtle advantage.  \nBeforeEach is run on every example, were let can memoize (I've not added that yet, but plan to).  If the code used to make the assignment is costly, single execution is preferred.  In RSPec land, I have dozens of examples for a Spec which use Fixtures, which are in the DB and transactional, so memoziation across lots of specs adds up in perf gains.  \nSecond, they're lazy evaluated, so if examples upstream from a get fail, the code will not even fire.  IMHO, executing code at the time it's needed, in the example block, instead of way before hand in before blocks, help reduce side effects between examples by keeping examples more isolated.  \nb\n. I agree w/@robb and @blakewatters regarding side effects of cross-example dependencies.  Thus, if speed is not an issue and folks are okay with before hooks, then let's kill this.\nGreat conversations!\nb\n. ",
    "leocassarani": "Thanks for taking a look at this, @nerdyc. Is there anything I can do to get Xcode integration working again, for the time being? Should I expect your fixes to be merged into master and a new version to be released any time soon?\n. Thanks for taking a look at this, @nerdyc. Is there anything I can do to get Xcode integration working again, for the time being? Should I expect your fixes to be merged into master and a new version to be released any time soon?\n. ",
    "njunxuan": "Looking forward to the merging in too!\n. Looking forward to the merging in too!\n. ",
    "ealeksandrov": "What is status of this request and expected release date of 0.2? How can we help?\n. What is status of this request and expected release date of 0.2? How can we help?\n. ",
    "felix1m": "it seems like this breaks current workarounds to get code coverage reports on iOS7, like http://qualitycoding.org/ios-7-code-coverage/ .\nHas anyone had success getting these reports to run in combination with specta?\n. it seems like this breaks current workarounds to get code coverage reports on iOS7, like http://qualitycoding.org/ios-7-code-coverage/ .\nHas anyone had success getting these reports to run in combination with specta?\n. ",
    "evgenyneu": "Now works. Thank you so much, @petejkim!\n. Now works. Thank you so much, @petejkim!\n. ",
    "foulkesjohn": "That's sorted it thanks\n. We are having this issue and need to use 3.0.10 for GA, we currently have a fork which has a check for GAITrackerModel but we ideally need something more permanent. Not sure where to start with debugging this though, anyone have any ideas?\nSeems to be causing problems with beforeEach blocks mainly?\n. That's sorted it thanks\n. We are having this issue and need to use 3.0.10 for GA, we currently have a fork which has a check for GAITrackerModel but we ideally need something more permanent. Not sure where to start with debugging this though, anyone have any ideas?\nSeems to be causing problems with beforeEach blocks mainly?\n. ",
    "dblock": "This is needed for https://github.com/dblock/ios-snapshot-test-case-expecta/issues/2. \n. Update: here's how you do it, thx @orta\nSPTXCTestCase *test = [[NSThread currentThread] threadDictionary][SPTCurrentTestCaseKey];\nNSString *specName = NSStringFromClass([test class]);\nSPTExample *compiledExample = [test spt_getCurrentExample];\n[NSString stringWithFormat:@\"%@/%@\", specName, compiledExample.name];\nIf you want a sanitized version, see https://github.com/dblock/ios-snapshot-test-case-expecta/blob/master/EXPMatchers%2BFBSnapshotTest.m#L67\n. @jspahrsummers So, self is a EXPExpect, and [self testCase] does return an SPTXCTestCase, but [test spt_getCurrentExample] then always returns null. You can try to modify https://github.com/dblock/ios-snapshot-test-case-expecta/blob/master/EXPMatchers%2BFBSnapshotTest.m#L67 if you want to play with this.\nIdeally, I think those methods should be on an SPTXCTestCase, (should be able to get the SPTExample from the test case as well, which is backwards).\n. +1\n. This looks pretty elaborate. Why not this?\n``` objc\nif __IPHONE_OS_VERSION_MAX_ALLOWED >= 80000 // __IPHONE_8_0\nelse\nendif\n```\n. Yes, a #define could be useful. However isn't it always shipping with the SDK, and hence is in sync?\n. This is needed for https://github.com/dblock/ios-snapshot-test-case-expecta/issues/2. \n. Update: here's how you do it, thx @orta\nSPTXCTestCase *test = [[NSThread currentThread] threadDictionary][SPTCurrentTestCaseKey];\nNSString *specName = NSStringFromClass([test class]);\nSPTExample *compiledExample = [test spt_getCurrentExample];\n[NSString stringWithFormat:@\"%@/%@\", specName, compiledExample.name];\nIf you want a sanitized version, see https://github.com/dblock/ios-snapshot-test-case-expecta/blob/master/EXPMatchers%2BFBSnapshotTest.m#L67\n. @jspahrsummers So, self is a EXPExpect, and [self testCase] does return an SPTXCTestCase, but [test spt_getCurrentExample] then always returns null. You can try to modify https://github.com/dblock/ios-snapshot-test-case-expecta/blob/master/EXPMatchers%2BFBSnapshotTest.m#L67 if you want to play with this.\nIdeally, I think those methods should be on an SPTXCTestCase, (should be able to get the SPTExample from the test case as well, which is backwards).\n. +1\n. This looks pretty elaborate. Why not this?\n``` objc\nif __IPHONE_OS_VERSION_MAX_ALLOWED >= 80000 // __IPHONE_8_0\nelse\nendif\n```\n. Yes, a #define could be useful. However isn't it always shipping with the SDK, and hence is in sync?\n. ",
    "yujinakayama": "Actually the test/MultipleTestObserverTest.m is a test. Though it has no assertions, it crashes without the fix.\n. @specta Ping.\n. Actually the test/MultipleTestObserverTest.m is a test. Though it has no assertions, it crashes without the fix.\n. @specta Ping.\n. ",
    "PiersonBro": "@robb I just ran into this bug, any hope that this will be merged soon?\n. \ud83c\udf89 Thanks!\n. @robb I just ran into this bug, any hope that this will be merged soon?\n. \ud83c\udf89 Thanks!\n. ",
    "thiagolioy": "this 2 lines i mean , (sorry about the bold part , it was bold before , lol )\nUIApplication* application = [UIApplication sharedApplication];\n[application.delegate applicationWillTerminate:application];\nok i'll fire a pull request later , to address this . =)\n. this 2 lines i mean , (sorry about the bold part , it was bold before , lol )\nUIApplication* application = [UIApplication sharedApplication];\n[application.delegate applicationWillTerminate:application];\nok i'll fire a pull request later , to address this . =)\n. ",
    "dbarden": "Is this issue still valid?\nWe're using code coverage and didn't need to do any modification on Specta code.\nI'd suggest to close it, if it doesn't make sense anymore. \n. I'm getting that afterAll is being called twice, with the following test:\n```\nimport \"TestHelper.h\"\nstatic int\nbeforeAllRan\n, afterAllRan\n;\nSpecBegin(_PendingSpecTest5)\ndescribe(@\"group\", ^{\n    beforeAll(^{\n        beforeAllRan ++;\n    });\nit(@\"example 1\", ^{ });\n\nit(@\"example 2\", ^{ });\n\npending(@\"testing\");\n\nafterAll(^{\n    afterAllRan ++;\n});\n\n});\nSpecEnd\n@interface PendingSpecTest5 : XCTestCase; @end\n@implementation PendingSpecTest5\n\n\n(void)testPendingAndItMixed {\n    beforeAllRan = afterAllRan = 0;\nRunSpec(_PendingSpecTest5Spec);\nassertEqual(beforeAllRan, 1);\nassertEqual(afterAllRan, 1);\n}\n\n\n@end\n```\nI'll try to find some time to dig on the internals and see what's causing this.\nUnless somebody is faster. \n. There it is.\n. Yeap, it works. Just migrated a project to use Carthage.\nHad some problems due to not adding the copy frameworks steps. But RTFM helps quite a lot in these situations.\n. Hi @Goles,\nis it an iOS project? I had this issue, but it got solved after adding the Run Script Phase to copy the frameworks to the build process (step 4 on the integration instructions)\n. This seems to be an issue with XCTest and Xcode. What I'm seeing is that the second time the you run a spec similar to the one above, the last test does not appear on the test navigator.\nSince Quick is suffering with the same problem, I guessed that the problem might not even be Specta, but XCTest.\nSo I did what the core of Specta does, which is to create the test on runtime by overriding +[XCTestCase testInvocations] and creating some tests at runtime.\nIt's something like this. It creates 3 tests a at runtime\nThe Test Navigator will report only 2 tests running, even though the report and the console will report 3 correctly.\nWhat's more interesting is that the results on test navigator are correct until the method -[_XCTestDriverTestObserver testBundleDidFinish:] is hit. During the execution of that method, the test navigator is updated and one result disappears..\nI tested Specta, Quick and Cedar and all of them had this behaviour, what makes the point that the Test Navigator and runtime tests are not in their best terms currently.\n. This ticket can now be closed\n. Is this issue still valid?\nWe're using code coverage and didn't need to do any modification on Specta code.\nI'd suggest to close it, if it doesn't make sense anymore. \n. I'm getting that afterAll is being called twice, with the following test:\n```\nimport \"TestHelper.h\"\nstatic int\nbeforeAllRan\n, afterAllRan\n;\nSpecBegin(_PendingSpecTest5)\ndescribe(@\"group\", ^{\n    beforeAll(^{\n        beforeAllRan ++;\n    });\nit(@\"example 1\", ^{ });\n\nit(@\"example 2\", ^{ });\n\npending(@\"testing\");\n\nafterAll(^{\n    afterAllRan ++;\n});\n\n});\nSpecEnd\n@interface PendingSpecTest5 : XCTestCase; @end\n@implementation PendingSpecTest5\n\n\n(void)testPendingAndItMixed {\n    beforeAllRan = afterAllRan = 0;\nRunSpec(_PendingSpecTest5Spec);\nassertEqual(beforeAllRan, 1);\nassertEqual(afterAllRan, 1);\n}\n\n\n@end\n```\nI'll try to find some time to dig on the internals and see what's causing this.\nUnless somebody is faster. \n. There it is.\n. Yeap, it works. Just migrated a project to use Carthage.\nHad some problems due to not adding the copy frameworks steps. But RTFM helps quite a lot in these situations.\n. Hi @Goles,\nis it an iOS project? I had this issue, but it got solved after adding the Run Script Phase to copy the frameworks to the build process (step 4 on the integration instructions)\n. This seems to be an issue with XCTest and Xcode. What I'm seeing is that the second time the you run a spec similar to the one above, the last test does not appear on the test navigator.\nSince Quick is suffering with the same problem, I guessed that the problem might not even be Specta, but XCTest.\nSo I did what the core of Specta does, which is to create the test on runtime by overriding +[XCTestCase testInvocations] and creating some tests at runtime.\nIt's something like this. It creates 3 tests a at runtime\nThe Test Navigator will report only 2 tests running, even though the report and the console will report 3 correctly.\nWhat's more interesting is that the results on test navigator are correct until the method -[_XCTestDriverTestObserver testBundleDidFinish:] is hit. During the execution of that method, the test navigator is updated and one result disappears..\nI tested Specta, Quick and Cedar and all of them had this behaviour, what makes the point that the Test Navigator and runtime tests are not in their best terms currently.\n. This ticket can now be closed\n. ",
    "schneiderandre": "Thanks. With the ability to import Expecta optionally, the Specta repo is definitely the better place for the template.\n. Thanks. With the ability to import Expecta optionally, the Specta repo is definitely the better place for the template.\n. ",
    "paweldudek": "This has already been resolved https://github.com/specta/specta/pull/80. @orta yet another one to close :wink:\n. @robb I think you can close this one :wink: \n. I've been thinking about this for a bit of time and I'm pretty sure that I'd rather have a way of blacklisting classes rather than having a way of whitelisting. That way you keep backwards compatibility + you can still work around issue described here. \nWould that work for OCMock? Is there a base class that could be marked that way? We could apply the same thing to our beloved UIAccessibilitySafeCategory__NSObject. \n@tonyarnold @orta @robb what do you guys think? \n. @bwaresiak the problem here is that you're not using it and beforeEach blocks in sharedExamplesFor. Under the hood they behave just like a describe block (which can be passed some additional info). \nThus the appropriate approach would be:\n```\nsharedExamplesFor(@\"shared example\", ^(NSDictionary data)\n{\n    beforeEach(^{\n        NSString something = data[SBEventKey];\n    });\nit(@\"should work\", ^{\n    expect(something).toNot.beNil();\n    expect(something).to.equal(@\"something\");\n});\n\n});\n```\nAnd it is absolutely legal (actually required) to use it with shared behaviours. The fact that your tests were passing in the first place is probably because you passed in a simple dictionary to your itShouldBehaveLike rather than a block that generates a dict, tho I'm not 100% sure about this. \n@orta this probably means a better documentation on shared examples is needed, there were two issues where people reported problems with using them. (other issue: https://github.com/specta/specta/issues/103)\n. Nvm, I see this was already fixed in https://github.com/specta/specta/commit/93c65aee31bfcbe439da58a1e180069de07f9c64, awesome! \n. @NSDex I've prepared a sample test that should fail if sharedExamples would have an issue that you described but everything appears to be working just fine. \n@robb looks like you can close this one, unless there's someone who can provide a broken sample project :wink: \n. Awesome idea. I'll happily contribute to this cause! I'll try to do some work on this next week. I can take TravisCI, the _spt_it thing and switch to XCTest only, in this order. \nIf anyone wants to grab any of these - please do let me know! \n. @orta I've initially thought that\n\nMake it only support XCTest\n\nmeans that there's some OCUnit support still out there, but I can find any. Could you shed some light on what you mean by that? \n. :tada: Yaay! Thanks @orta for doing the hard work on issues/PR! :balloon: Happy to see Specta back on track!\n. Boom, we're green! :tada: \n. Looks like this broke after https://github.com/specta/specta/pull/119 was pulled in, at least according to history: https://travis-ci.org/specta/specta/builds\n. That's probably it as the pulled in change is closely related to global before/after each logic. \n. Yeah, wish there was a \"run against current master\" button for Travis CI. \n. I've added a little bit more extensive comment than @orta. I'm also thinking about putting some info in README.md. Thoughts?\n. Interesting. \nNSClassFromString() and class from array from objc_getClassList() should be the same object. You can check that out by just logging what you receive from both methods.\nYou might also want to check out objc_getClass as it has a similar syntax to NSClassFromString().\nWhat's even more interesting is that this solution (aka NSClassFromString()) is used as a way to filter out UIAccessibilitySafeCategory__NSObject which is breaking Specta logic:\nobjc\nClass accessbilitySafeCategoryClass = NSClassFromString(@\"UIAccessibilitySafeCategory__NSObject\");\nclass_addProtocol(accessbilitySafeCategoryClass, @protocol(SPTExcludeGlobalBeforeAfterEach));\nIs there any chance you're calling the class_addProtocol() too late?\n. I'm still leaning towards having this as opt-out rather than opt-in. Here's a gist of my arguments:\n- So far we had two issues related to this. I'm pretty sure this issue is unavoidable even with whitelisting mechanism, but more on that in a second. Thus I'm a bit reluctant to seeing this change\n- It's a bit more complicated for developers to integrate with this feature (however it does seem likely if that they read about it in docs they'll stumble upon the whitelisting method)\n- Requires a bit of work for people who already implement this\nNow going back to the problem @wasnotrice has. Let's quickly go through your stack trace:\n0   CoreFoundation                      0x0000000107d50f35 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x0000000106e56bb7 objc_exception_throw + 45\n    2   CoreFoundation                      0x0000000107d50e6d +[NSException raise:format:] + 205\n    3   libdispatch.dylib                   0x00000001088bbaf4 _dispatch_client_callout + 8\n    4   libdispatch.dylib                   0x00000001088a9e72 dispatch_once_f + 129\n    5   popSlate                            0x0000000102d58937 AVYSDKResourceBundle + 312\n    6   popSlateTests                       0x0000000113af15d5 +[AVYPhotoEditorCustomization initialize] + 53\n    7   libobjc.A.dylib                     0x0000000106e574d6 _class_initialize + 648\n    8   libobjc.A.dylib                     0x0000000106e606e1 lookUpImpOrForward + 351\n    9   libobjc.A.dylib                     0x0000000106e6d0d3 objc_msgSend + 211\n    10  libobjc.A.dylib                     0x0000000106e55599 _class_resolveMethod + 124\n    11  libobjc.A.dylib                     0x0000000106e60707 lookUpImpOrForward + 389\n    12  libobjc.A.dylib                     0x0000000106e6045f class_getInstanceMethod + 60\n    13  popSlateTests                       0x00000001137ec2e5 ClassesWithClassMethod + 245\n    14  popSlateTests                       0x00000001137ec1cc __44-[SPTExampleGroup runGlobalBeforeEachHooks:]_block_invoke + 28\n    15  libdispatch.dylib                   0x00000001088bbaf4 _dispatch_client_callout + 8\n    16  libdispatch.dylib                   0x00000001088a9e72 dispatch_once_f + 129\n    17  popSlateTests                       0x00000001137ebf9f -[SPTExampleGroup runGlobalBeforeEachHooks:] + 159\n    18  popSlateTests                       0x00000001137ece6f -[SPTExampleGroup runBeforeEachHooks:] + 159\n    19  popSlateTests                       0x00000001137ec826 -[SPTExampleGroup runBeforeHooks:] + 118\n    20  popSlateTests                       0x00000001137eebd6 __44-[SPTExampleGroup compileExamplesWithStack:]_block_invoke136 + 166\n    21  popSlateTests                       0x00000001137f14eb -[SPTSpec spt_runExample:] + 347\n    22  popSlateTests                       0x00000001137f0f9d __35+[SPTSpec spt_convertToTestMethod:]_block_invoke + 93\n    23  CoreFoundation                      0x0000000107c48c8c __invoking___ + 140\n    24  CoreFoundation                      0x0000000107c48ae2 -[NSInvocation invoke] + 290\n    25  XCTest                              0x00000001146fe0f7 -[XCTestCase invokeTest] + 253\n    26  XCTest                              0x00000001146fe2f8 -[XCTestCase performTest:] + 150\n    27  popSlateTests                       0x00000001137f2119 -[SPTSpec performTest:] + 137\n    28  XCTest                              0x0000000114707bf5 -[XCTest run] + 260\n    29  XCTest                              0x00000001146fcffb -[XCTestSuite performTest:] + 379\n    30  XCTest                              0x0000000114707bf5 -[XCTest run] + 260\n    31  XCTest                              0x00000001146fcffb -[XCTestSuite performTest:] + 379\n    32  XCTest                              0x0000000114707bf5 -[XCTest run] + 260\n    33  XCTest                              0x00000001146fcffb -[XCTestSuite performTest:] + 379\n    34  XCTest                              0x0000000114707bf5 -[XCTest run] + 260\n    35  XCTest                              0x00000001146fa0bc __25-[XCTestDriver _runSuite]_block_invoke + 56\n    36  XCTest                              0x0000000114704ead -[XCTestObservationCenter _observeTestExecutionForBlock:] + 162\n    37  XCTest                              0x00000001146f9ff0 -[XCTestDriver _runSuite] + 269\n    38  XCTest                              0x00000001146faa1d -[XCTestDriver _checkForTestManager] + 234\n    39  XCTest                              0x000000011470aaf0 +[XCTestProbe runTests:] + 182\n    40  Foundation                          0x0000000106a0fd55 __NSFireDelayedPerform + 387\n    41  CoreFoundation                      0x0000000107cb8f64 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20\n    42  CoreFoundation                      0x0000000107cb8b25 __CFRunLoopDoTimer + 1045\n    43  CoreFoundation                      0x0000000107c7be5d __CFRunLoopRun + 1901\n    44  CoreFoundation                      0x0000000107c7b486 CFRunLoopRunSpecific + 470\n    45  GraphicsServices                    0x000000010948d9f0 GSEventRunModal + 161\n    46  UIKit                               0x00000001056ff420 UIApplicationMain + 1282\n    47  popSlate                            0x0000000102ba3c33 main + 115\n    48  libdyld.dylib                       0x00000001088ec145 start + 1\nThe issue here is that there our code results in +[AVYPhotoEditorCustomization initialize] being called. +[NSObject initialize] is called only when a class gets loaded into runtime. Docs are a bit more specific:\n\nThe runtime sends initialize to each class in a program just before the class, or any class that inherits from it, is sent its first message from within the program. The runtime sends the initialize message to classes in a thread-safe manner. Superclasses receive this message before their subclasses. The superclass implementation may be called multiple times if subclasses do not implement initialize\u2014the runtime will call the inherited implementation\u2014or if subclasses explicitly call [super initialize]. If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:\nBecause initialize is called in a thread-safe manner and the order of initialize being called on different classes is not guaranteed, it\u2019s important to do the minimum amount of work necessary in initialize methods. Specifically, any code that takes locks that might be required by other classes in their initialize methods is liable to lead to deadlocks. Therefore you should not rely on initialize for complex initialization, and should instead limit it to straightforward, class local initialization.\n\nIt seems that Aviary is doing some weird stuff in their initialize method which then leads to this crash. \nNow the reason why I think this will not work. Code responsible for both blacklisting and whitelisting is nearly the same:\nBlacklisting:\nclass_conformsToProtocol(aClass, @protocol(SPTExcludeGlobalBeforeAfterEach)) == NO\nWhitelisting:\nclass_conformsToProtocol(aClass, @protocol(SPTIncludeGlobalBeforeAfterEach)) == YES\nand thus I don't see any reason why it will not call +[NSObject initialize] as well, which will, unfortunately, result in the same issue as @wasnotrice described. \nThe real solution here would be to add logic that somehow checks whether a class conforms to protocol without actually initializing it. I'm not sure how class_conformsToProtocol behaves and whether it actually initializes classes. \nAnother thing you can try is to avoid NSClassFromString(@\"AVYPhotoEditorCustomization\"); and use objc_lookUpClass which is a bit more low-level and might actually not call +[NSObject initialize]. \n. So I made a quick test. I've created a class Test with +[NSObject initialize] overridden. \nI've put a breakpoint in the aforementioned method and checked whether it was called for specific scenarios:\n- Without any additional action +[NSObject initialize] was called\n- Adding exclude protocol via category for Test: +[NSObject initialize] was not called\n- Adding exclude protocol via NSClassFromString: +[NSObject initialize] was not called\n- Adding exclude protocol via objc_lookUpClass: +[NSObject initialize] was not called\n@wasnotrice could you please check what hits +[AVYPhotoEditorCustomization initialize] if it has the exclude protocol added? \n. @modocache no problem! \nSo the issue @wasnotrice is seeing is caused by Aviary SDK hitting an assertion in their [NSObject initialize] method (which sounds like a horrible design, but that's a different story :wink:). Specta tries to send beforeEach (as we can see in the stack trace) message to that class, which triggers initialize, which then results in an exception. \ninitialize method is, according to docs, sent before first message is received by given class. And is sent only once per given class (however since some classes do not implement it superclasses can receive this call multiple times). \n@wasnotrice noted that he tried to exclude that class using previous method with blacklisting protocol. However that did not work and the exception was still raised. \nNow there are two possibilities here. Either previous blacklisting mechanism was broken (as it allowed that class to somehow slip through, in this case I'm 100% for changing to whitelisting) or something else triggered that [NSObject initialize] call (that's why I'd love to see the stack trace for this exception when blacklisting is added). \nIt is possible that code for adding blacklisting protocol somehow resulted in an initialize message being sent to AVYPhotoEditorCustomization, but I'm not sure how is that possible as my simple test confirmed that using\n- objc_lookUpClass\n- NSClassFromString\ndoes not trigger initialize. \nAnd the opt-out mechanism works at the same time as opt-in mechanism so, from behavior perspective, there should be no difference between adding a blacklisting/whitelisting here (aka the ClassesWithClassMethod function). \nAlso, I sort of convinced myself that whitelisting might be a better idea - it's way more complicated to explain what to do if you don't want to use global before/after each methods rather than explain what to do if you want to have them. \n\nMaybe it's just me, but I struggle to think of when this feature might be necessary.\n\nI might be opposing this a bit as I know how many global hooks like that we have in our codebase and my subconscious tells me it's gonna be quite a lot of work to update all our private pods to make specs work again :wink:\n. @orta :+1:, we're doing the same thing. \n. I agree with @orta on this one, Specta's supposed to provide DSL for BDD-like tests. Nothing more. \nExpecta's responsibility is to provide set of assertions for, well, asserting whether certain behaviour occurred. \nThis feels like a specific matcher that leaked into Spectas internal architecture, especially this method: \nobjc\n- (void)spt_checkThis:(id)obj {\n  SPTCheckerObj *checkObj = [SPTCheckerObj new];\n  checkObj.obj = obj;\n  checkObj.checkBlock = ^(id checkingObj) {\n    XCTAssertNil(checkingObj);\n  };\n  @synchronized(self.checkerObjs) {\n    [self.checkerObjs addObject:checkObj];\n  }\n}\nas it actually contains a matcher (which should be a part of Expecta). Perhaps it is possible to extend Specta to provide sort of generic interface which Expecta could use and that would solve your problem?\nAlso, personally I just write a test that contains an @autorelease and a __weak variable before it and then just use Expecta to check whether object has been released. It's a bit longer but it does the trick :wink:\n. @ExtremeMan do you happen to have any setup logic outside of beforeEach/afterEach/it blocks? \nFrom what I can tell from the stack trace you're attempting to call +[SKZTournamentSummary addMatchCodeTournament:forContext:] method while Specta is preparing a test suite. \nA general rule of thumb is that you should keep all your setup logic in beforeEach/beforeAll methods, putting it outside causes it to run before tests are actually executed, which should not be supported. \nIf this is not the case - could you please paste a few lines from your spec file that cause this error? Or prepare an example project? \n. Ok, I now see I should've referenced @MattFoley for the comment above, sorry! \n. My assumption is that xctool loads testing bundle a little bit earlier than regular xcodebuild and your environment is just not set up correctly yet. Since Specta prepares all tests the moment spec classes are initialised (aka accessed for the first time via +[XCTestSuite allTests]) this might cause your tests to crash. \nI assume you're setting up Core Data stack somewhere in your App Delegate. One could do a simple tests and see which gets called first in xcodebuild and xctool - the Specta test initialisation (aka code between before/after/it blocks) or the app delegate callbacks. \nLast but not leasts it might be a good idea to mention this in docs. :+1: \n. @ExtremeMan I assume that means no App Delegate is created when test bundle is opened? If so then there's the root reason for this issue. \n. This has already been resolved https://github.com/specta/specta/pull/80. @orta yet another one to close :wink:\n. @robb I think you can close this one :wink: \n. I've been thinking about this for a bit of time and I'm pretty sure that I'd rather have a way of blacklisting classes rather than having a way of whitelisting. That way you keep backwards compatibility + you can still work around issue described here. \nWould that work for OCMock? Is there a base class that could be marked that way? We could apply the same thing to our beloved UIAccessibilitySafeCategory__NSObject. \n@tonyarnold @orta @robb what do you guys think? \n. @bwaresiak the problem here is that you're not using it and beforeEach blocks in sharedExamplesFor. Under the hood they behave just like a describe block (which can be passed some additional info). \nThus the appropriate approach would be:\n```\nsharedExamplesFor(@\"shared example\", ^(NSDictionary data)\n{\n    beforeEach(^{\n        NSString something = data[SBEventKey];\n    });\nit(@\"should work\", ^{\n    expect(something).toNot.beNil();\n    expect(something).to.equal(@\"something\");\n});\n\n});\n```\nAnd it is absolutely legal (actually required) to use it with shared behaviours. The fact that your tests were passing in the first place is probably because you passed in a simple dictionary to your itShouldBehaveLike rather than a block that generates a dict, tho I'm not 100% sure about this. \n@orta this probably means a better documentation on shared examples is needed, there were two issues where people reported problems with using them. (other issue: https://github.com/specta/specta/issues/103)\n. Nvm, I see this was already fixed in https://github.com/specta/specta/commit/93c65aee31bfcbe439da58a1e180069de07f9c64, awesome! \n. @NSDex I've prepared a sample test that should fail if sharedExamples would have an issue that you described but everything appears to be working just fine. \n@robb looks like you can close this one, unless there's someone who can provide a broken sample project :wink: \n. Awesome idea. I'll happily contribute to this cause! I'll try to do some work on this next week. I can take TravisCI, the _spt_it thing and switch to XCTest only, in this order. \nIf anyone wants to grab any of these - please do let me know! \n. @orta I've initially thought that\n\nMake it only support XCTest\n\nmeans that there's some OCUnit support still out there, but I can find any. Could you shed some light on what you mean by that? \n. :tada: Yaay! Thanks @orta for doing the hard work on issues/PR! :balloon: Happy to see Specta back on track!\n. Boom, we're green! :tada: \n. Looks like this broke after https://github.com/specta/specta/pull/119 was pulled in, at least according to history: https://travis-ci.org/specta/specta/builds\n. That's probably it as the pulled in change is closely related to global before/after each logic. \n. Yeah, wish there was a \"run against current master\" button for Travis CI. \n. I've added a little bit more extensive comment than @orta. I'm also thinking about putting some info in README.md. Thoughts?\n. Interesting. \nNSClassFromString() and class from array from objc_getClassList() should be the same object. You can check that out by just logging what you receive from both methods.\nYou might also want to check out objc_getClass as it has a similar syntax to NSClassFromString().\nWhat's even more interesting is that this solution (aka NSClassFromString()) is used as a way to filter out UIAccessibilitySafeCategory__NSObject which is breaking Specta logic:\nobjc\nClass accessbilitySafeCategoryClass = NSClassFromString(@\"UIAccessibilitySafeCategory__NSObject\");\nclass_addProtocol(accessbilitySafeCategoryClass, @protocol(SPTExcludeGlobalBeforeAfterEach));\nIs there any chance you're calling the class_addProtocol() too late?\n. I'm still leaning towards having this as opt-out rather than opt-in. Here's a gist of my arguments:\n- So far we had two issues related to this. I'm pretty sure this issue is unavoidable even with whitelisting mechanism, but more on that in a second. Thus I'm a bit reluctant to seeing this change\n- It's a bit more complicated for developers to integrate with this feature (however it does seem likely if that they read about it in docs they'll stumble upon the whitelisting method)\n- Requires a bit of work for people who already implement this\nNow going back to the problem @wasnotrice has. Let's quickly go through your stack trace:\n0   CoreFoundation                      0x0000000107d50f35 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x0000000106e56bb7 objc_exception_throw + 45\n    2   CoreFoundation                      0x0000000107d50e6d +[NSException raise:format:] + 205\n    3   libdispatch.dylib                   0x00000001088bbaf4 _dispatch_client_callout + 8\n    4   libdispatch.dylib                   0x00000001088a9e72 dispatch_once_f + 129\n    5   popSlate                            0x0000000102d58937 AVYSDKResourceBundle + 312\n    6   popSlateTests                       0x0000000113af15d5 +[AVYPhotoEditorCustomization initialize] + 53\n    7   libobjc.A.dylib                     0x0000000106e574d6 _class_initialize + 648\n    8   libobjc.A.dylib                     0x0000000106e606e1 lookUpImpOrForward + 351\n    9   libobjc.A.dylib                     0x0000000106e6d0d3 objc_msgSend + 211\n    10  libobjc.A.dylib                     0x0000000106e55599 _class_resolveMethod + 124\n    11  libobjc.A.dylib                     0x0000000106e60707 lookUpImpOrForward + 389\n    12  libobjc.A.dylib                     0x0000000106e6045f class_getInstanceMethod + 60\n    13  popSlateTests                       0x00000001137ec2e5 ClassesWithClassMethod + 245\n    14  popSlateTests                       0x00000001137ec1cc __44-[SPTExampleGroup runGlobalBeforeEachHooks:]_block_invoke + 28\n    15  libdispatch.dylib                   0x00000001088bbaf4 _dispatch_client_callout + 8\n    16  libdispatch.dylib                   0x00000001088a9e72 dispatch_once_f + 129\n    17  popSlateTests                       0x00000001137ebf9f -[SPTExampleGroup runGlobalBeforeEachHooks:] + 159\n    18  popSlateTests                       0x00000001137ece6f -[SPTExampleGroup runBeforeEachHooks:] + 159\n    19  popSlateTests                       0x00000001137ec826 -[SPTExampleGroup runBeforeHooks:] + 118\n    20  popSlateTests                       0x00000001137eebd6 __44-[SPTExampleGroup compileExamplesWithStack:]_block_invoke136 + 166\n    21  popSlateTests                       0x00000001137f14eb -[SPTSpec spt_runExample:] + 347\n    22  popSlateTests                       0x00000001137f0f9d __35+[SPTSpec spt_convertToTestMethod:]_block_invoke + 93\n    23  CoreFoundation                      0x0000000107c48c8c __invoking___ + 140\n    24  CoreFoundation                      0x0000000107c48ae2 -[NSInvocation invoke] + 290\n    25  XCTest                              0x00000001146fe0f7 -[XCTestCase invokeTest] + 253\n    26  XCTest                              0x00000001146fe2f8 -[XCTestCase performTest:] + 150\n    27  popSlateTests                       0x00000001137f2119 -[SPTSpec performTest:] + 137\n    28  XCTest                              0x0000000114707bf5 -[XCTest run] + 260\n    29  XCTest                              0x00000001146fcffb -[XCTestSuite performTest:] + 379\n    30  XCTest                              0x0000000114707bf5 -[XCTest run] + 260\n    31  XCTest                              0x00000001146fcffb -[XCTestSuite performTest:] + 379\n    32  XCTest                              0x0000000114707bf5 -[XCTest run] + 260\n    33  XCTest                              0x00000001146fcffb -[XCTestSuite performTest:] + 379\n    34  XCTest                              0x0000000114707bf5 -[XCTest run] + 260\n    35  XCTest                              0x00000001146fa0bc __25-[XCTestDriver _runSuite]_block_invoke + 56\n    36  XCTest                              0x0000000114704ead -[XCTestObservationCenter _observeTestExecutionForBlock:] + 162\n    37  XCTest                              0x00000001146f9ff0 -[XCTestDriver _runSuite] + 269\n    38  XCTest                              0x00000001146faa1d -[XCTestDriver _checkForTestManager] + 234\n    39  XCTest                              0x000000011470aaf0 +[XCTestProbe runTests:] + 182\n    40  Foundation                          0x0000000106a0fd55 __NSFireDelayedPerform + 387\n    41  CoreFoundation                      0x0000000107cb8f64 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20\n    42  CoreFoundation                      0x0000000107cb8b25 __CFRunLoopDoTimer + 1045\n    43  CoreFoundation                      0x0000000107c7be5d __CFRunLoopRun + 1901\n    44  CoreFoundation                      0x0000000107c7b486 CFRunLoopRunSpecific + 470\n    45  GraphicsServices                    0x000000010948d9f0 GSEventRunModal + 161\n    46  UIKit                               0x00000001056ff420 UIApplicationMain + 1282\n    47  popSlate                            0x0000000102ba3c33 main + 115\n    48  libdyld.dylib                       0x00000001088ec145 start + 1\nThe issue here is that there our code results in +[AVYPhotoEditorCustomization initialize] being called. +[NSObject initialize] is called only when a class gets loaded into runtime. Docs are a bit more specific:\n\nThe runtime sends initialize to each class in a program just before the class, or any class that inherits from it, is sent its first message from within the program. The runtime sends the initialize message to classes in a thread-safe manner. Superclasses receive this message before their subclasses. The superclass implementation may be called multiple times if subclasses do not implement initialize\u2014the runtime will call the inherited implementation\u2014or if subclasses explicitly call [super initialize]. If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:\nBecause initialize is called in a thread-safe manner and the order of initialize being called on different classes is not guaranteed, it\u2019s important to do the minimum amount of work necessary in initialize methods. Specifically, any code that takes locks that might be required by other classes in their initialize methods is liable to lead to deadlocks. Therefore you should not rely on initialize for complex initialization, and should instead limit it to straightforward, class local initialization.\n\nIt seems that Aviary is doing some weird stuff in their initialize method which then leads to this crash. \nNow the reason why I think this will not work. Code responsible for both blacklisting and whitelisting is nearly the same:\nBlacklisting:\nclass_conformsToProtocol(aClass, @protocol(SPTExcludeGlobalBeforeAfterEach)) == NO\nWhitelisting:\nclass_conformsToProtocol(aClass, @protocol(SPTIncludeGlobalBeforeAfterEach)) == YES\nand thus I don't see any reason why it will not call +[NSObject initialize] as well, which will, unfortunately, result in the same issue as @wasnotrice described. \nThe real solution here would be to add logic that somehow checks whether a class conforms to protocol without actually initializing it. I'm not sure how class_conformsToProtocol behaves and whether it actually initializes classes. \nAnother thing you can try is to avoid NSClassFromString(@\"AVYPhotoEditorCustomization\"); and use objc_lookUpClass which is a bit more low-level and might actually not call +[NSObject initialize]. \n. So I made a quick test. I've created a class Test with +[NSObject initialize] overridden. \nI've put a breakpoint in the aforementioned method and checked whether it was called for specific scenarios:\n- Without any additional action +[NSObject initialize] was called\n- Adding exclude protocol via category for Test: +[NSObject initialize] was not called\n- Adding exclude protocol via NSClassFromString: +[NSObject initialize] was not called\n- Adding exclude protocol via objc_lookUpClass: +[NSObject initialize] was not called\n@wasnotrice could you please check what hits +[AVYPhotoEditorCustomization initialize] if it has the exclude protocol added? \n. @modocache no problem! \nSo the issue @wasnotrice is seeing is caused by Aviary SDK hitting an assertion in their [NSObject initialize] method (which sounds like a horrible design, but that's a different story :wink:). Specta tries to send beforeEach (as we can see in the stack trace) message to that class, which triggers initialize, which then results in an exception. \ninitialize method is, according to docs, sent before first message is received by given class. And is sent only once per given class (however since some classes do not implement it superclasses can receive this call multiple times). \n@wasnotrice noted that he tried to exclude that class using previous method with blacklisting protocol. However that did not work and the exception was still raised. \nNow there are two possibilities here. Either previous blacklisting mechanism was broken (as it allowed that class to somehow slip through, in this case I'm 100% for changing to whitelisting) or something else triggered that [NSObject initialize] call (that's why I'd love to see the stack trace for this exception when blacklisting is added). \nIt is possible that code for adding blacklisting protocol somehow resulted in an initialize message being sent to AVYPhotoEditorCustomization, but I'm not sure how is that possible as my simple test confirmed that using\n- objc_lookUpClass\n- NSClassFromString\ndoes not trigger initialize. \nAnd the opt-out mechanism works at the same time as opt-in mechanism so, from behavior perspective, there should be no difference between adding a blacklisting/whitelisting here (aka the ClassesWithClassMethod function). \nAlso, I sort of convinced myself that whitelisting might be a better idea - it's way more complicated to explain what to do if you don't want to use global before/after each methods rather than explain what to do if you want to have them. \n\nMaybe it's just me, but I struggle to think of when this feature might be necessary.\n\nI might be opposing this a bit as I know how many global hooks like that we have in our codebase and my subconscious tells me it's gonna be quite a lot of work to update all our private pods to make specs work again :wink:\n. @orta :+1:, we're doing the same thing. \n. I agree with @orta on this one, Specta's supposed to provide DSL for BDD-like tests. Nothing more. \nExpecta's responsibility is to provide set of assertions for, well, asserting whether certain behaviour occurred. \nThis feels like a specific matcher that leaked into Spectas internal architecture, especially this method: \nobjc\n- (void)spt_checkThis:(id)obj {\n  SPTCheckerObj *checkObj = [SPTCheckerObj new];\n  checkObj.obj = obj;\n  checkObj.checkBlock = ^(id checkingObj) {\n    XCTAssertNil(checkingObj);\n  };\n  @synchronized(self.checkerObjs) {\n    [self.checkerObjs addObject:checkObj];\n  }\n}\nas it actually contains a matcher (which should be a part of Expecta). Perhaps it is possible to extend Specta to provide sort of generic interface which Expecta could use and that would solve your problem?\nAlso, personally I just write a test that contains an @autorelease and a __weak variable before it and then just use Expecta to check whether object has been released. It's a bit longer but it does the trick :wink:\n. @ExtremeMan do you happen to have any setup logic outside of beforeEach/afterEach/it blocks? \nFrom what I can tell from the stack trace you're attempting to call +[SKZTournamentSummary addMatchCodeTournament:forContext:] method while Specta is preparing a test suite. \nA general rule of thumb is that you should keep all your setup logic in beforeEach/beforeAll methods, putting it outside causes it to run before tests are actually executed, which should not be supported. \nIf this is not the case - could you please paste a few lines from your spec file that cause this error? Or prepare an example project? \n. Ok, I now see I should've referenced @MattFoley for the comment above, sorry! \n. My assumption is that xctool loads testing bundle a little bit earlier than regular xcodebuild and your environment is just not set up correctly yet. Since Specta prepares all tests the moment spec classes are initialised (aka accessed for the first time via +[XCTestSuite allTests]) this might cause your tests to crash. \nI assume you're setting up Core Data stack somewhere in your App Delegate. One could do a simple tests and see which gets called first in xcodebuild and xctool - the Specta test initialisation (aka code between before/after/it blocks) or the app delegate callbacks. \nLast but not leasts it might be a good idea to mention this in docs. :+1: \n. @ExtremeMan I assume that means no App Delegate is created when test bundle is opened? If so then there's the root reason for this issue. \n. ",
    "mdiep": "bump\n. bump\n. ",
    "fatuhoku": "Aye, Live Templates. I generally try to avoid configuring the IDE outside of project configuration though and am happy with defaults. For good reason: I once had a set of Live Template bindings for Specta for creating beforeEach, it, context etc. but since my trial expired I accidentally deleted them all!\nNow I'd have to set them up again. :(\nI haven't looked into whether they are exportable.\n. Haha, good solution. I cannot wait. I trust that it'll work well with Specta as well.\n. It's worth noting that if you're having trouble with Specta in Xcode 6 beta 4 through Cocoapods, the problem will be fixed in the next release of Cocoapods.\nHere's the current workaround.\n. Swift support in Specta would be very very much re-inventing the wheel, especially when Quick wants to fill that space. I share the same challenge as @AshFurrow  \u2014 why bother with Swift for 0.3? Time is better spent making Specta more stable.\n. Well what exactly is the error?\nI get errors like this:\nMyProjectSpecs-Prefix.pch\nMyProjectSpecs-Prefix.pch:19:13: 'Specta/Specta.h' file not found\nI use Cocoapods to manage my dependencies.\n. And over here too. How strange.\n. When's this going to be merged? This occurs on 3.0-wip branch as well...\n. May I suggest 0.3-wip not be used as a development branch? Specta keeps changing under my feet \u2014\u00a0yet I feel I have no choice but to use the 0.3-wip branch in my Podfile because that's the only thing that works with Xcode 6 / iOS 8.\n. Oh. All I had to do was a pod update Specta. Everything else followed from there...\n. @slhodson969 I think you hit the nail on the head with \"Am I approaching BDD in the right way here? Should I even be testing for the presentedViewController?\". This is the kind of question you will be asking yourself continually as you practise BDD with iOS.\nI too began with optimism about practising BDD with iOS. It's been invaluable to me when developing server-side code with C# or Scala, so it's natural yo want to apply the practise to iOS.  And, \"The UI is no different \u2014\u00a0it needs to be tested too!\" is a thought I have had.\nIn the last 10 months I've come to learn that while it's a powerful tool, you have to be careful that when you're holding a hammer, everything looks like a nail (two hammer-and-nail related idioms so far. What's going on today! :P). I guarantee you this:   BDD for building UIs is a painful, wasteful and low-value exercise. \nSee http://www.rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf.\nApple keeps telling MVC lie \u2014\u00a0that the View Controller is the 'Controller'. It isn't. View Controllers set up, create, configure, remove, handle segues between, VIEWS.  The View Controller is View code \u2014\u00a0the 'V' of MVC. Not the 'C'.\nTest your code. Not the View.\nUse Specta and Expecta to test your logic and your Models.\nUse things KIF / Calabash / Substrate to physically 'click through' your application to test whether your Views are behaving as they should. This is what exercises your View Controller code.\nTest whether you can Log in with a correct username and password. That's the behaviour that needs testing, not whether the login view controller appears. You'll fail to find the username box if the view controller doesn't appear. You won't need to know about presentingViewController != nil to find that out. It's either on screen, or not!\nI personally use a MVVM-inspired architecture. There are Views, View Models, and Models. I test the View Models and Models exclusively and leave the Views alone \u2014 I've not had time to automate tests for those yet.\n. +1 same situation  on AppCode, unsurprisingly.\n\n. Sigh indeed. I would love to practise test-driven development but at every turn, it's either compilation, or the speed of loading the tests, the performance of the simulator, that erodes at the benefits of testing.\n. @nsforge I've seen this happen as well. Very very confusing and makes it almost impossible to tell what happened to the tests.\n. Aye, Live Templates. I generally try to avoid configuring the IDE outside of project configuration though and am happy with defaults. For good reason: I once had a set of Live Template bindings for Specta for creating beforeEach, it, context etc. but since my trial expired I accidentally deleted them all!\nNow I'd have to set them up again. :(\nI haven't looked into whether they are exportable.\n. Haha, good solution. I cannot wait. I trust that it'll work well with Specta as well.\n. It's worth noting that if you're having trouble with Specta in Xcode 6 beta 4 through Cocoapods, the problem will be fixed in the next release of Cocoapods.\nHere's the current workaround.\n. Swift support in Specta would be very very much re-inventing the wheel, especially when Quick wants to fill that space. I share the same challenge as @AshFurrow  \u2014 why bother with Swift for 0.3? Time is better spent making Specta more stable.\n. Well what exactly is the error?\nI get errors like this:\nMyProjectSpecs-Prefix.pch\nMyProjectSpecs-Prefix.pch:19:13: 'Specta/Specta.h' file not found\nI use Cocoapods to manage my dependencies.\n. And over here too. How strange.\n. When's this going to be merged? This occurs on 3.0-wip branch as well...\n. May I suggest 0.3-wip not be used as a development branch? Specta keeps changing under my feet \u2014\u00a0yet I feel I have no choice but to use the 0.3-wip branch in my Podfile because that's the only thing that works with Xcode 6 / iOS 8.\n. Oh. All I had to do was a pod update Specta. Everything else followed from there...\n. @slhodson969 I think you hit the nail on the head with \"Am I approaching BDD in the right way here? Should I even be testing for the presentedViewController?\". This is the kind of question you will be asking yourself continually as you practise BDD with iOS.\nI too began with optimism about practising BDD with iOS. It's been invaluable to me when developing server-side code with C# or Scala, so it's natural yo want to apply the practise to iOS.  And, \"The UI is no different \u2014\u00a0it needs to be tested too!\" is a thought I have had.\nIn the last 10 months I've come to learn that while it's a powerful tool, you have to be careful that when you're holding a hammer, everything looks like a nail (two hammer-and-nail related idioms so far. What's going on today! :P). I guarantee you this:   BDD for building UIs is a painful, wasteful and low-value exercise. \nSee http://www.rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf.\nApple keeps telling MVC lie \u2014\u00a0that the View Controller is the 'Controller'. It isn't. View Controllers set up, create, configure, remove, handle segues between, VIEWS.  The View Controller is View code \u2014\u00a0the 'V' of MVC. Not the 'C'.\nTest your code. Not the View.\nUse Specta and Expecta to test your logic and your Models.\nUse things KIF / Calabash / Substrate to physically 'click through' your application to test whether your Views are behaving as they should. This is what exercises your View Controller code.\nTest whether you can Log in with a correct username and password. That's the behaviour that needs testing, not whether the login view controller appears. You'll fail to find the username box if the view controller doesn't appear. You won't need to know about presentingViewController != nil to find that out. It's either on screen, or not!\nI personally use a MVVM-inspired architecture. There are Views, View Models, and Models. I test the View Models and Models exclusively and leave the Views alone \u2014 I've not had time to automate tests for those yet.\n. +1 same situation  on AppCode, unsurprisingly.\n\n. Sigh indeed. I would love to practise test-driven development but at every turn, it's either compilation, or the speed of loading the tests, the performance of the simulator, that erodes at the benefits of testing.\n. @nsforge I've seen this happen as well. Very very confusing and makes it almost impossible to tell what happened to the tests.\n. ",
    "eremzeit": "I take that back. :expressionless:  I've been messing with other frameworks and it seems that GHUnit isn't really as popular as it used to be..\n. Oh, whoops.  I had a typo that added an f to describe so it was skipping all the blocks.  PEBKAC.\nThough, on the other hand, it might be useful for the console logs actually reflect what is happening.  Ie. if only one test is being run because of an f maybe it should just tell you that.\n. I take that back. :expressionless:  I've been messing with other frameworks and it seems that GHUnit isn't really as popular as it used to be..\n. Oh, whoops.  I had a typo that added an f to describe so it was skipping all the blocks.  PEBKAC.\nThough, on the other hand, it might be useful for the console logs actually reflect what is happening.  Ie. if only one test is being run because of an f maybe it should just tell you that.\n. ",
    "pvinis": "+1\n. thanks\nOn 9 Jul 2015 at 14:45:30, Robert B\u00f6hnke (notifications@github.com) wrote:\nSure\nSpecBegin(Thing)\n__block id foo;\nbeforeEach({\n    foo = [Foo new];\n});\nSpecEnd\n\u2014\nReply to this email directly or view it on GitHub.\n--\u00a0\nPavlos Vinieratos\n. is it better to add them after SpecBegin with __block, or to add them before SpecBegin without __block?\n. @robb  @orta thanks!\n. thanks\n. +1\n. thanks\nOn 9 Jul 2015 at 14:45:30, Robert B\u00f6hnke (notifications@github.com) wrote:\nSure\nSpecBegin(Thing)\n__block id foo;\nbeforeEach({\n    foo = [Foo new];\n});\nSpecEnd\n\u2014\nReply to this email directly or view it on GitHub.\n--\u00a0\nPavlos Vinieratos\n. is it better to add them after SpecBegin with __block, or to add them before SpecBegin without __block?\n. @robb  @orta thanks!\n. thanks\n. ",
    "tangphillip": "I think we rewrote the test that was failing with another form of asynchrony. So...I can't reproduce this problem any more.\n. I think we rewrote the test that was failing with another form of asynchrony. So...I can't reproduce this problem any more.\n. ",
    "cybertk": "+1 \nSee http://orta.roughdraft.io/d3ea1b2d10e80d757550-mocks-amp-stubs-in-a-specta-expecta-world\n. +1 \nSee http://orta.roughdraft.io/d3ea1b2d10e80d757550-mocks-amp-stubs-in-a-specta-expecta-world\n. ",
    "premedios": "+1\n. +1\n. ",
    "rbsgn": "It looks like fix is pretty simple. Just change -[SPTXCTestCase spt_run] type from XCTestCaseRun to XCTestRun and invoke -[XCTestRun recordFailureWithDescription:inFile:atLine:expected:] instead of -[XCTestCaseRun recordFailureInTest:withDescription:inFile:atLine:expected:]. However this will break existing Xcode 5.x code.\nAny ideas how to determine XCTest or Xcode version at build time? Or we should switch to -respondsToSelector:?\n. Uh oh, I was so concentrated on getting Specta to build so I missed this obvious bug, my fault.\nAs far as I remember XCTest team is not willing to support 3rd party tools relying on XCTest. I filed radar against XCTest last year and they said they will not going to fix it.\n. @dblock well, you know\u2026 it looks good. However the more I think about the issue the more I want to suggest XCTest authors to add some kind of versioning to their framework. What do you think of this?\n. I guess you're right\n. There is no ref to iOS 6 but Xcode 6\n. Pleeeease, make early adopters of Xcode 6 happy and fix this issue :-)\n. I'm perfectly fine with that. Once Xcode 6 is released we will upgrade our build farm to use it by default. However we'll keep Xcode 5 along with version 6 for those how still hasn't updated. As far as I can see upgrade procedure is relatively cheap, right?\n. Personally I always run tests under latest iOS. However it would be very frustrating to be limited to iOS 8.0 only (at least for couple of month).\nBy the way, I use CocoaPods to include Specta. Should I care about packaging? AFAIK, CocoaPods builds every pod as a static library.\n. And we also have UI tests done with Facebook' snapshotting tool. They're very useful to prove correctness of a UI code under different versions of iOS.\n. @orta, thanks for the link!\n. @petejkim, it looks like Xcode 6 won't change anytime soon and you can stabilize the build. Could you please provide any estimations on 0.3 release date?\n. It looks like fix is pretty simple. Just change -[SPTXCTestCase spt_run] type from XCTestCaseRun to XCTestRun and invoke -[XCTestRun recordFailureWithDescription:inFile:atLine:expected:] instead of -[XCTestCaseRun recordFailureInTest:withDescription:inFile:atLine:expected:]. However this will break existing Xcode 5.x code.\nAny ideas how to determine XCTest or Xcode version at build time? Or we should switch to -respondsToSelector:?\n. Uh oh, I was so concentrated on getting Specta to build so I missed this obvious bug, my fault.\nAs far as I remember XCTest team is not willing to support 3rd party tools relying on XCTest. I filed radar against XCTest last year and they said they will not going to fix it.\n. @dblock well, you know\u2026 it looks good. However the more I think about the issue the more I want to suggest XCTest authors to add some kind of versioning to their framework. What do you think of this?\n. I guess you're right\n. There is no ref to iOS 6 but Xcode 6\n. Pleeeease, make early adopters of Xcode 6 happy and fix this issue :-)\n. I'm perfectly fine with that. Once Xcode 6 is released we will upgrade our build farm to use it by default. However we'll keep Xcode 5 along with version 6 for those how still hasn't updated. As far as I can see upgrade procedure is relatively cheap, right?\n. Personally I always run tests under latest iOS. However it would be very frustrating to be limited to iOS 8.0 only (at least for couple of month).\nBy the way, I use CocoaPods to include Specta. Should I care about packaging? AFAIK, CocoaPods builds every pod as a static library.\n. And we also have UI tests done with Facebook' snapshotting tool. They're very useful to prove correctness of a UI code under different versions of iOS.\n. @orta, thanks for the link!\n. @petejkim, it looks like Xcode 6 won't change anytime soon and you can stabilize the build. Could you please provide any estimations on 0.3 release date?\n. ",
    "pk": "I can confirm the issue on XCode 6GM and Specta 0.3-wip. However when you have longer running tests the navigator actually reports correct results and also failures (also in your spec file) DURING the tests are running.\nOnce testing finishes it all goes wrong.... On screenshots the first is Specta test file and second is XCTest file.\nWhile specs are running all fine:\n\nOnce finished all goes away:\n\n. @garnett I'm running Specta 0.3-wip branch in XCode 6 & iOS 7.1 & iOS 8 using Cocoapods 0.34.0.rc (I think if you upgrade to that it will solve the problem for you).\nSo using all the bleeding edge for it. Unfortunately the 0.3-wip branch does break Travis-CI as they have just iOS 7.1 and Specta is only iOS8...\nAlso I'm not able to test from command line using xctool which does fail with JSON syntax error (reported in separate issue) but I'm able to test within the XCode 6.\nOverall... painful.\n+1 for decoupling XCode6 support from Swift\n+1 for keeping XCode5 compatible for Travis and alike\n. Hi,\nwell you can work around the issue to make the error object strong reference, I use this workaround: \n``` objective-c\nNSError * __autoreleasing error = nil;\nBOOL success = [obj doStuffWithError:&error];\nNSError * __strong err = error;\nexpect(success).beFalsy();\nexpect(error).notTo.beNil();\n```\n. Hi @iosdev-republicofapps,\nwhat to you mean it returns different errors?\nBTW the last row had a typo, it should read expect(err).notTo.beNil(); so you use \"strongified\" version of your error.\n. Also I declare the NSError * __autoreleasing error = nil; within the it block and not as shared variable across several examples - not that that should make any difference.\n. I've been experiencing the same behaviour for some time. If the code under the test uses dispatch_sync it hangs tests, one way around it would be to use dispatch_async in combination with something like\nwaitUntil(^(DoneCallback done) .{\n    [obj takesLongTimeWithCompletion:^{ done(); }];\n});\n. I can confirm the issue on XCode 6GM and Specta 0.3-wip. However when you have longer running tests the navigator actually reports correct results and also failures (also in your spec file) DURING the tests are running.\nOnce testing finishes it all goes wrong.... On screenshots the first is Specta test file and second is XCTest file.\nWhile specs are running all fine:\n\nOnce finished all goes away:\n\n. @garnett I'm running Specta 0.3-wip branch in XCode 6 & iOS 7.1 & iOS 8 using Cocoapods 0.34.0.rc (I think if you upgrade to that it will solve the problem for you).\nSo using all the bleeding edge for it. Unfortunately the 0.3-wip branch does break Travis-CI as they have just iOS 7.1 and Specta is only iOS8...\nAlso I'm not able to test from command line using xctool which does fail with JSON syntax error (reported in separate issue) but I'm able to test within the XCode 6.\nOverall... painful.\n+1 for decoupling XCode6 support from Swift\n+1 for keeping XCode5 compatible for Travis and alike\n. Hi,\nwell you can work around the issue to make the error object strong reference, I use this workaround: \n``` objective-c\nNSError * __autoreleasing error = nil;\nBOOL success = [obj doStuffWithError:&error];\nNSError * __strong err = error;\nexpect(success).beFalsy();\nexpect(error).notTo.beNil();\n```\n. Hi @iosdev-republicofapps,\nwhat to you mean it returns different errors?\nBTW the last row had a typo, it should read expect(err).notTo.beNil(); so you use \"strongified\" version of your error.\n. Also I declare the NSError * __autoreleasing error = nil; within the it block and not as shared variable across several examples - not that that should make any difference.\n. I've been experiencing the same behaviour for some time. If the code under the test uses dispatch_sync it hangs tests, one way around it would be to use dispatch_async in combination with something like\nwaitUntil(^(DoneCallback done) .{\n    [obj takesLongTimeWithCompletion:^{ done(); }];\n});\n. ",
    "pxpgraphics": "This seems to work on Xcode 6.1 (6A1046a) GM 2\n. This seems to work on Xcode 6.1 (6A1046a) GM 2\n. This seems to work on Xcode 6.1 (6A1046a) GM 2\n. This seems to work on Xcode 6.1 (6A1046a) GM 2\n. ",
    "alanzeino": "Still broken in Xcode 6.1 (6A1052c) [App Store]\n. Still had to manually ref the repo tag to get this to work, as mentioned here:\nhttps://github.com/specta/specta/issues/106#issuecomment-57989082\n. Still broken in Xcode 6.1 (6A1052c) [App Store]\n. Still had to manually ref the repo tag to get this to work, as mentioned here:\nhttps://github.com/specta/specta/issues/106#issuecomment-57989082\n. ",
    "dherberger": "Still broken in Xcode 6.1 (6A1052d) [iOS Developer Portal]\n. Still broken in Xcode 6.1 (6A1052d) [iOS Developer Portal]\n. ",
    "mmiroslav": "Any news about this issue?\n. Any news about this issue?\n. ",
    "StatusReport": "This has not been solved yet, and not been solved in Quick regardless of @modocache's post. See Quick/Quick#157, Quick/Quick#219. Seems like the problem is on Apple's end, and until someone will reverse engineer Xcode it seems that the only option that works for me is to restart Xcode.\n. Yes - C++ uses different name mangling than C, so the linker expects to find symbols that do not exist. You'll have to use extern \"C\" on the headers you include from Specta, like this:\n```\nifdef __cplusplus\nextern \"C\" {\nendif\n#import \nifdef __cplusplus\n}\nendif\n```\nSo this will compile fine for both C and C++.\n. The workaround we currently did is to remove the verify-after-running of class methods (if you mock class methods, you probably want to refactor your code for many reasons anyway), which dramatically speeded up things. See Lightricks/OCMock@6d8f2c5d210c4527d3454cc5926b36765cbc880c.\n. Great work! Duped as well.\n. I went to the Xcode lab in the WWDC today and found the guy who's responsible for fixing this. I showed him the radar and he was aware of it, but besides raising the awareness for the amount of people that are affected by this bug, I couldn't do much. Let's hope this will get fixed in Xcode 8 GM.\n. This has not been solved yet, and not been solved in Quick regardless of @modocache's post. See Quick/Quick#157, Quick/Quick#219. Seems like the problem is on Apple's end, and until someone will reverse engineer Xcode it seems that the only option that works for me is to restart Xcode.\n. Yes - C++ uses different name mangling than C, so the linker expects to find symbols that do not exist. You'll have to use extern \"C\" on the headers you include from Specta, like this:\n```\nifdef __cplusplus\nextern \"C\" {\nendif\n#import \nifdef __cplusplus\n}\nendif\n```\nSo this will compile fine for both C and C++.\n. The workaround we currently did is to remove the verify-after-running of class methods (if you mock class methods, you probably want to refactor your code for many reasons anyway), which dramatically speeded up things. See Lightricks/OCMock@6d8f2c5d210c4527d3454cc5926b36765cbc880c.\n. Great work! Duped as well.\n. I went to the Xcode lab in the WWDC today and found the guy who's responsible for fixing this. I showed him the radar and he was aware of it, but besides raising the awareness for the amount of people that are affected by this bug, I couldn't do much. Let's hope this will get fixed in Xcode 8 GM.\n. ",
    "esttorhe": "I'm still seeing all my tests as spt_runExampleAtIndex: and I'm on Version 6.3.1 (6D1002) of Xcode \u00af_(\u30c4)_/\u00af\n. nvm; it was a PEBCAK problem\n. :+1:  Same here; it worked at some point and now it no longer works. \nAlso; not to \"hijack\" the thread but now the test cases are not being reported to Xcode.\nSee attached image:\n\nThe Spec is shown but no actual tests are shown although the console prints the failures:\nconsole\nExecuted 1 test, with 1 failure (1 unexpected) in 0.537 (0.537) seconds\n. +1\nWill explore adding a custom reporter class and see if that \"fixes\" the issue.\n. Just to add more to this issue; I tried with custom class and the issue is still present :x: \n. I'm still seeing all my tests as spt_runExampleAtIndex: and I'm on Version 6.3.1 (6D1002) of Xcode \u00af_(\u30c4)_/\u00af\n. nvm; it was a PEBCAK problem\n. :+1:  Same here; it worked at some point and now it no longer works. \nAlso; not to \"hijack\" the thread but now the test cases are not being reported to Xcode.\nSee attached image:\n\nThe Spec is shown but no actual tests are shown although the console prints the failures:\nconsole\nExecuted 1 test, with 1 failure (1 unexpected) in 0.537 (0.537) seconds\n. +1\nWill explore adding a custom reporter class and see if that \"fixes\" the issue.\n. Just to add more to this issue; I tried with custom class and the issue is still present :x: \n. ",
    "bwaresiak": "I'm also experiencing said problem, could someone take a look at this?\n. I'm also experiencing said problem, could someone take a look at this?\n. ",
    "delebedev": "Agree with @mickeyreiss \nXcode6 is out but there is no possibility to run Specta tests with it. http://stackoverflow.com/questions/24275470/xctest-xctest-h-not-found-on-old-projects-built-in-xcode-6/24651704#24651704 unfortunately does not work for me\n. I've encountered the exact issue right now.\n@slhodson969 can you please try my workaround for that?\nPlease add empty it block after your test\nobj-c\ndescribe(@\"no current user present\", ^{\n        it(@\"should have a login view controller as the presented view controller\", ^{\n            expect(loadingVC.presentedViewController).to.beKindOf([ETLoginVC class]);\n        });\n        it(@\"\", ^{});\n    });\nNote: the issue reproduces for any push/pop stuff if the test is the last in the spec\n. @slhodson969 :( this trick fixes navigation tests in two my projects. But here I've tests 100% isolated from what's happening in applicationDidFinishLaunching\n. @slhodson969 sorry for leading you to wrong way:\nthis trick just silences red mark near the test: logs say that this test fails\n. Well, now it seems for me that our issues are different, because viewDidAppear: will not be called while you run the tests.\nbut, if you try to rewrite the spec as follows it probably should work:\n``` obj-c\nimport \"Specs.h\"\nimport \"ETLoadingVC.h\"\nimport \"ETLoginVC.h\"\nSpecBegin(ETLoadingVCSpec)\ndescribe(@\"ETLoadingVC\", ^{\n    __block ETLoadingVC *loadingVC;\n    __block NSUserDefaults *mockUserDefaults;\n\n    beforeEach(^{\n        mockUserDefaults = mock([NSUserDefaults class]);\n        loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\n        [loadingVC viewDidAppearAnimated:NO];\n        [[NSRunLoop currentRunLoop] runUntilDate:[NSDate date]];\n    });\n\n    afterEach(^{\n        loadingVC = nil;\n    });\n\n    describe(@\"no current user present\", ^{\n        it(@\"should have a login view controller as presented view controller\", ^{\n            expect(loadingVC.presentedViewController).to.beKindOf([ETLoginVC class]);\n        });\n        it(@\"\", ^{});\n    });\n\n});\n\nSpecEnd\n```\nUpdate: now I am not sure at all who is presenting ETLoadingVC in your test?\n. Agree with @mickeyreiss \nXcode6 is out but there is no possibility to run Specta tests with it. http://stackoverflow.com/questions/24275470/xctest-xctest-h-not-found-on-old-projects-built-in-xcode-6/24651704#24651704 unfortunately does not work for me\n. I've encountered the exact issue right now.\n@slhodson969 can you please try my workaround for that?\nPlease add empty it block after your test\nobj-c\ndescribe(@\"no current user present\", ^{\n        it(@\"should have a login view controller as the presented view controller\", ^{\n            expect(loadingVC.presentedViewController).to.beKindOf([ETLoginVC class]);\n        });\n        it(@\"\", ^{});\n    });\nNote: the issue reproduces for any push/pop stuff if the test is the last in the spec\n. @slhodson969 :( this trick fixes navigation tests in two my projects. But here I've tests 100% isolated from what's happening in applicationDidFinishLaunching\n. @slhodson969 sorry for leading you to wrong way:\nthis trick just silences red mark near the test: logs say that this test fails\n. Well, now it seems for me that our issues are different, because viewDidAppear: will not be called while you run the tests.\nbut, if you try to rewrite the spec as follows it probably should work:\n``` obj-c\nimport \"Specs.h\"\nimport \"ETLoadingVC.h\"\nimport \"ETLoginVC.h\"\nSpecBegin(ETLoadingVCSpec)\ndescribe(@\"ETLoadingVC\", ^{\n    __block ETLoadingVC *loadingVC;\n    __block NSUserDefaults *mockUserDefaults;\n\n    beforeEach(^{\n        mockUserDefaults = mock([NSUserDefaults class]);\n        loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\n        [loadingVC viewDidAppearAnimated:NO];\n        [[NSRunLoop currentRunLoop] runUntilDate:[NSDate date]];\n    });\n\n    afterEach(^{\n        loadingVC = nil;\n    });\n\n    describe(@\"no current user present\", ^{\n        it(@\"should have a login view controller as presented view controller\", ^{\n            expect(loadingVC.presentedViewController).to.beKindOf([ETLoginVC class]);\n        });\n        it(@\"\", ^{});\n    });\n\n});\n\nSpecEnd\n```\nUpdate: now I am not sure at all who is presenting ETLoadingVC in your test?\n. ",
    "pj4533": ":+1: \n. :+1: \n. ",
    "wm-j-ray": "I'll take anything stable at this point. \n. Where is the best link to get .3?\nThanks. \n. Still doesn't properly refresh test navigator on failure.  Very close though, just need to refresh the navigator. \nIn the spec\n(expect(3).to.equal(2);\nxCode 6.1 App Store Version using\n    pod         'Expecta'\n    pod         'OCMockito'\n    pod         'Specta', :git => 'https://github.com/specta/specta.git', :tag => 'v0.3.0.beta1'\n. I'll take anything stable at this point. \n. Where is the best link to get .3?\nThanks. \n. Still doesn't properly refresh test navigator on failure.  Very close though, just need to refresh the navigator. \nIn the spec\n(expect(3).to.equal(2);\nxCode 6.1 App Store Version using\n    pod         'Expecta'\n    pod         'OCMockito'\n    pod         'Specta', :git => 'https://github.com/specta/specta.git', :tag => 'v0.3.0.beta1'\n. ",
    "codeboost": "Very useful tips, Christian, thank you!\n. Very useful tips, Christian, thank you!\n. ",
    "dismory": "+1\nI also encounter this issue, specta just prints logs in the console for failures happened on non-main thread but the test case is not marked as failure.\n. +1\nI also encounter this issue, specta just prints logs in the console for failures happened on non-main thread but the test case is not marked as failure.\n. ",
    "dmrschmidt": "Is there a rough guesstimation when 0.3 will be considered done?\nOr maybe rather, would you consider it stable enough by now to make a move to the .3 branch in terms of breaking changes that may still be on the horizon like the ^AsyncBlock removal?\n. Thanks for the tip. I'll see if latest xctool fixes the issue for us as soon as all the other remaining Xcode 6 transition fires are gone. Making the shuffling opt-in instead of opt-out already made the transition here easier though.\n. Is there a rough guesstimation when 0.3 will be considered done?\nOr maybe rather, would you consider it stable enough by now to make a move to the .3 branch in terms of breaking changes that may still be on the horizon like the ^AsyncBlock removal?\n. Thanks for the tip. I'll see if latest xctool fixes the issue for us as soon as all the other remaining Xcode 6 transition fires are gone. Making the shuffling opt-in instead of opt-out already made the transition here easier though.\n. ",
    "mgorbach": "Note that this seems to have started happening very recently; looking like it is caused by one of the recent changes on this branch.\n. @petejkim I can confirm that commit does fix the problem, at least for me.\n. Note that this seems to have started happening very recently; looking like it is caused by one of the recent changes on this branch.\n. @petejkim I can confirm that commit does fix the problem, at least for me.\n. ",
    "visav": "Tag is missing from repo:\n(fatal: Couldn't find remote ref tags/v0.2.99)\n. Tag is missing from repo:\n(fatal: Couldn't find remote ref tags/v0.2.99)\n. ",
    "supermarin": "@robb how can i help? :)\n. @robb will add on the TODO and see if we can print hierarchically with this format\n. @robb how can i help? :)\n. @robb will add on the TODO and see if we can print hierarchically with this format\n. ",
    "NSDex": "I am currently using 0.3-wip under Xcode 6.\n. @modocache: I migrated to a different approach after hitting this issue and don't have the bandwidth to recreate the problem at this time.  Feel free to close unless @hatunike or @akashivskyy can provide the details you need.\n. I am currently using 0.3-wip under Xcode 6.\n. @modocache: I migrated to a different approach after hitting this issue and don't have the bandwidth to recreate the problem at this time.  Feel free to close unless @hatunike or @akashivskyy can provide the details you need.\n. ",
    "hatunike": "I am experiencing the same thing. Could be i'm doing something wrong, new to this stuff. Any luck?\n. I ended up fixing mine, and it was related to what @akashivskyy  shows above. I originally fixed it by just creating a new file and just slowly copied everything over, trying to see what the issue was. Not sure how well documented this issue is, but I'd imagine many others will make this mistake. Thanks.\n. I am experiencing the same thing. Could be i'm doing something wrong, new to this stuff. Any luck?\n. I ended up fixing mine, and it was related to what @akashivskyy  shows above. I originally fixed it by just creating a new file and just slowly copied everything over, trying to see what the issue was. Not sure how well documented this issue is, but I'd imagine many others will make this mistake. Thanks.\n. ",
    "akashivskyy": "I am experiencing this as well.\n. Hey, I think I just found a solution. Specta \"executes\" the sharedExamplesFor block at compile-time, seeking context blocks, which are collected and executed at act-time. This means that all variables initialized inside the sharedExamplesFor are in fact initialized during compile-time.\nYou should read from NSDictionary *data inside your it blocks, instead of the root sharedExamplesFor block:\n``` objc\n// incorrect\nsharedExamplesFor(@\"foo\", ^(NSDictionary *data) {\n    id bar = data[@\"bar\"];\n    it(@\"should not be nil\", ^{\n        expect(bar).toNot.beNil();\n    });\n});\n// correct\nsharedExamplesFor(@\"foo\", ^(NSDictionary *data) {\n    it(@\"should not be nil\", ^{\n        id bar = data[@\"bar\"];\n        expect(bar).toNot.beNil();\n    });\n});\n// even more correct\nsharedExamplesFor(@\"foo\", ^(NSDictionary *data) {\n    __block id bar = nil;\n    beforeEach(^{\n        bar = data[@\"bar\"];\n    });\n    it(@\"should not be nil\", ^{\n        expect(bar).toNot.beNil();\n    });\n});\n```\n//cc @NSDex @hatunike \n. I am experiencing this as well.\n. Hey, I think I just found a solution. Specta \"executes\" the sharedExamplesFor block at compile-time, seeking context blocks, which are collected and executed at act-time. This means that all variables initialized inside the sharedExamplesFor are in fact initialized during compile-time.\nYou should read from NSDictionary *data inside your it blocks, instead of the root sharedExamplesFor block:\n``` objc\n// incorrect\nsharedExamplesFor(@\"foo\", ^(NSDictionary *data) {\n    id bar = data[@\"bar\"];\n    it(@\"should not be nil\", ^{\n        expect(bar).toNot.beNil();\n    });\n});\n// correct\nsharedExamplesFor(@\"foo\", ^(NSDictionary *data) {\n    it(@\"should not be nil\", ^{\n        id bar = data[@\"bar\"];\n        expect(bar).toNot.beNil();\n    });\n});\n// even more correct\nsharedExamplesFor(@\"foo\", ^(NSDictionary *data) {\n    __block id bar = nil;\n    beforeEach(^{\n        bar = data[@\"bar\"];\n    });\n    it(@\"should not be nil\", ^{\n        expect(bar).toNot.beNil();\n    });\n});\n```\n//cc @NSDex @hatunike \n. ",
    "squarefrog": "As an update, when this stops working, the following fix works for me:\n1. Clean the project\n2. Clean build folder\n3. Restart Xcode\n4. Re-run full suite of tests\nI've yet to narrow down what exactly causes the issue in the first place.\n. :+1: I've tried this locally using a previously failing branch. Works wonderfully.\n. As an update, when this stops working, the following fix works for me:\n1. Clean the project\n2. Clean build folder\n3. Restart Xcode\n4. Re-run full suite of tests\nI've yet to narrow down what exactly causes the issue in the first place.\n. :+1: I've tried this locally using a previously failing branch. Works wonderfully.\n. ",
    "martincik": "Actually found fix, but still not sure if this is the right way to do it. Any input appreciated.\nHere's the commit on my fork: https://github.com/martincik/ios-snapshot-test-case-expecta/commit/d5cfae1c32a64a7849f770ee7f8cddb3c0aa5785\n. Actually found fix, but still not sure if this is the right way to do it. Any input appreciated.\nHere's the commit on my fork: https://github.com/martincik/ios-snapshot-test-case-expecta/commit/d5cfae1c32a64a7849f770ee7f8cddb3c0aa5785\n. ",
    "hoiogi": "Cocoapods error is still output .\n``` sh\n$ pod update\nUpdate all pods\nAnalyzing dependencies\nPre-downloading: Specta from https://github.com/specta/specta.git, tag v0.3.0.beta1\n[!] No podspec found for Specta in /Users/.../Pods/Specta/Specta.podspec\n```\n. i use 0.33.1\n. oh! thanks very much! \nSuccess!\n. Cocoapods error is still output .\n``` sh\n$ pod update\nUpdate all pods\nAnalyzing dependencies\nPre-downloading: Specta from https://github.com/specta/specta.git, tag v0.3.0.beta1\n[!] No podspec found for Specta in /Users/.../Pods/Specta/Specta.podspec\n```\n. i use 0.33.1\n. oh! thanks very much! \nSuccess!\n. ",
    "mokagio": ":+1: for releasing tag 0.3.0.beta1! :tada: \nThis issue should now be closed though...\n. I think this issue has already been reported here: https://github.com/specta/specta/issues/85\n. :+1: I've seen other project doing this as well. As @tonyarnold said \"Best practice it is!\"\n. \ud83c\udf7b\ud83c\udf7b\ud83c\udf7b\nSpecta is awesome!\n\u2014\nGio\nSent from Mailbox for iPhone\nOn Wed, Mar 18, 2015 at 7:28 AM, Orta notifications@github.com wrote:\n\nMerged #142.\nReply to this email directly or view it on GitHub:\nhttps://github.com/specta/specta/pull/142#event-257375298\n. I thiught that as well, but if you look at the commits nothing has been actually changed between the last dev version and 1.0, just newlines and Coveralls integration.\n. :+1: for releasing tag 0.3.0.beta1! :tada: \n\nThis issue should now be closed though...\n. I think this issue has already been reported here: https://github.com/specta/specta/issues/85\n. :+1: I've seen other project doing this as well. As @tonyarnold said \"Best practice it is!\"\n. \ud83c\udf7b\ud83c\udf7b\ud83c\udf7b\nSpecta is awesome!\n\u2014\nGio\nSent from Mailbox for iPhone\nOn Wed, Mar 18, 2015 at 7:28 AM, Orta notifications@github.com wrote:\n\nMerged #142.\nReply to this email directly or view it on GitHub:\nhttps://github.com/specta/specta/pull/142#event-257375298\n. I thiught that as well, but if you look at the commits nothing has been actually changed between the last dev version and 1.0, just newlines and Coveralls integration.\n. \n",
    "tabuchid": "Any word on when 0.3.0 is going to be officially released? What are the blockers?\n. bump\n. Any word on when 0.3.0 is going to be officially released? What are the blockers?\n. bump\n. ",
    "matt-oakes": "It would be good to get the beta tag into cocoapods to make the instructions in the readme work correctly.\n. It would be good to get the beta tag into cocoapods to make the instructions in the readme work correctly.\n. ",
    "skydivedan": "agreed.\n. agreed.\n. ",
    "pepibumur": "BTW: If nobody has started working on this I could do it if someone assigns me this issue.\n. BTW: If nobody has started working on this I could do it if someone assigns me this issue.\n. ",
    "sebastianwr": "Using the 0.3.0.beta1 tag, this seems to work now? I run the tests in Xcode and they get reported correctly with failure and success listed separately for each \"it\".\n. Using the 0.3.0.beta1 tag, this seems to work now? I run the tests in Xcode and they get reported correctly with failure and success listed separately for each \"it\".\n. ",
    "slhodson969": "Well the ETLoadingVC is set like this in the appDelegate. The appDelegate test for rootViewController passes.\n```\n- (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary )launchOptions {\n    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n    self.window.rootViewController = [[ETLoadingVC alloc] initWithUserDefaults:[NSUserDefaults standardUserDefaults]];\n    [self.window makeKeyAndVisible];\nreturn YES;\n\n}\n```\nI also created a seperate view controller with basically the same code and test. This second view controller isn't used in the app at all but I got the same result, a nil presentedViewController.\n. in the application itself, it is created in application:didFinishLaunchingWithOptions: in the appDelegate.\nIn my test it is created in the beforeEach block as so:\nbeforeEach(^{\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:nil];\n});\nI'm not sure I fully understand what you mean by your last point. I'm pretty new to unit testing (and BDD testing). I am just trying to write tests for each view controller that, in this case, test which view controller is being shown based on certain values available in the app (stored in NSUserDefaults). If this is not the correct approach then I am only too happy to hear other and more appropriate approaches I could take.\n. Still get the same issue, just have an extra test that passes now.\n. This is the specs file that is failing. This has no reliance on applicationDidFinishLaunching. Yes, in the actual app this view controller gets loaded in applicationDidFinishLaunching but not in my test. Or am I misuderstanding the way Specta works?\n```\nimport \"Specs.h\"\nimport \"ETLoadingVC.h\"\nimport \"ETLoginVC.h\"\nSpecBegin(ETLoadingVCSpec)\ndescribe(@\"ETLoadingVC\", ^{\n    __block ETLoadingVC *loadingVC;\n    __block NSUserDefaults *mockUserDefaults;\n\n    beforeEach(^{\n        mockUserDefaults = mock([NSUserDefaults class]);\n        loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\n    });\n\n    afterEach(^{\n        loadingVC = nil;\n    });\n\n    describe(@\"no current user present\", ^{\n        it(@\"should have a login view controller as presented view controller\", ^{\n            expect(loadingVC.presentedViewController).to.beKindOf([ETLoginVC class]);\n        });\n        it(@\"\", ^{});\n    });\n\n});\n\nSpecEnd\n```\n. No worries @garnett. Thanks for trying and its good to know its not just me experiencing the issue.\n. @garnett - That got me the exact same result.\nDoes something need to present it? I thought you just initialised the view controllers and then ran your tests on them?\n@manumax - All my view controllers are written programatically. I don't use storyboard or nibs.\n@robb - Not exactly sure how I should go about this but I tried this approach and got exactly the same result:\n```\nbeforeEach(^{\n    mockUserDefaults = mock([NSUserDefaults class]);\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\nUIWindow *window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\nwindow.rootViewController = loadingVC;\n[window makeKeyAndVisible];\n\n});\n```\nMy next step would to be initialise an appDelegate in the beforeEach block too but I don't think that should be necessary.\n. @robb - Nope, still getting a nil for presentedViewController :(\n. Even initialising an appDelegate didn't solve the problem.\n```\n__block ETAppDelegate appDelegate;\n__block ETLoadingVC loadingVC;\n__block NSUserDefaults *mockUserDefaults;\nbeforeEach(^{\n    mockUserDefaults = mock([NSUserDefaults class]);\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\nappDelegate = [ETAppDelegate new];\nappDelegate.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\nappDelegate.window.rootViewController = loadingVC;\n[appDelegate.window makeKeyAndVisible];\n\n});\n```\nI also tried calling application:didFinishLaunchingWithOptions\n. @manumax - Seems to be, yes.\n. Am I approaching BDD in the right way here? Should I even be testing for the presentedViewController?\nIn this view controller there is no user behaviour really, its all about what data is stored on the phone (NSUserDefaults) from previous app runs.\nSome pseudocode of what this view controller does.\nif (currentUser) {\n    if (currentUser is logged in) {     // This does a network call\n        if (saved agreement id) {       // Stored in NSUserDefaults\n            [start agreement]           // This does a network call\n        } else {\n            present AgreementsVC\n        }\n    } else {\n        [auto login]                        // This does a network call\n    }\n} else {\n    present LoginVC\n}\nAutologin\nif (auto login success) {\n    if (saved agreement id) {           \n        [start agreement]               \n    } else {\n        present AgreementsVC\n    }   \n} else {\n    present LoginVC\n}\nStart Agreement\nif (agreement started) {\n    present ThermostatVC\n} else {\n    present AgreementsVC\n}\nAny other suggestions on how I should go about testing this view controller would be appreciated.\n. For now i've added an NSString property that gets updated with the class name that is about to be presented. I then check this string in my test. To get this working though, I had to change my beforeEach block to the following:\nbeforeEach(^{\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:nil];\n    [loadingVC viewDidAppear:NO];\n});\nAlthough the test passes, I get the following message:\nWarning: Attempt to present <ETLoginVC: 0x7fcf34961940> on <ETLoadingVC: 0x7fcf34961280> whose view is not in the window hierarchy!\nI get that this is because i'm calling viewDidAppear before the current view has finished appearing. What I don't get is how I can test this a better way.\nI also don't understand why loadingVC.presentedViewController still equals nil even with this updated beforeEach block.\n. You seem to be correct. Changing the beforeEach to the below got rid of the message:\n```\nbeforeEach(^{\n    mockUserDefaults = mock([NSUserDefaults class]);\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\nwindow = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\nwindow.rootViewController = loadingVC;\n[window makeKeyAndVisible];\n\n[loadingVC viewDidAppear:NO];\n\n});\n```\nDo you think you could maybe put a quick example together of what you mean?\n. Oh, it seems the above beforeEach block actually means the presentedViewController is now set correctly. I must have missed the combination of setting UIWindow and calling [loadingVC viewDidAppear:NO] when trying this yesterday.\n. Well the ETLoadingVC is set like this in the appDelegate. The appDelegate test for rootViewController passes.\n```\n- (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary )launchOptions {\n    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n    self.window.rootViewController = [[ETLoadingVC alloc] initWithUserDefaults:[NSUserDefaults standardUserDefaults]];\n    [self.window makeKeyAndVisible];\nreturn YES;\n\n}\n```\nI also created a seperate view controller with basically the same code and test. This second view controller isn't used in the app at all but I got the same result, a nil presentedViewController.\n. in the application itself, it is created in application:didFinishLaunchingWithOptions: in the appDelegate.\nIn my test it is created in the beforeEach block as so:\nbeforeEach(^{\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:nil];\n});\nI'm not sure I fully understand what you mean by your last point. I'm pretty new to unit testing (and BDD testing). I am just trying to write tests for each view controller that, in this case, test which view controller is being shown based on certain values available in the app (stored in NSUserDefaults). If this is not the correct approach then I am only too happy to hear other and more appropriate approaches I could take.\n. Still get the same issue, just have an extra test that passes now.\n. This is the specs file that is failing. This has no reliance on applicationDidFinishLaunching. Yes, in the actual app this view controller gets loaded in applicationDidFinishLaunching but not in my test. Or am I misuderstanding the way Specta works?\n```\nimport \"Specs.h\"\nimport \"ETLoadingVC.h\"\nimport \"ETLoginVC.h\"\nSpecBegin(ETLoadingVCSpec)\ndescribe(@\"ETLoadingVC\", ^{\n    __block ETLoadingVC *loadingVC;\n    __block NSUserDefaults *mockUserDefaults;\n\n    beforeEach(^{\n        mockUserDefaults = mock([NSUserDefaults class]);\n        loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\n    });\n\n    afterEach(^{\n        loadingVC = nil;\n    });\n\n    describe(@\"no current user present\", ^{\n        it(@\"should have a login view controller as presented view controller\", ^{\n            expect(loadingVC.presentedViewController).to.beKindOf([ETLoginVC class]);\n        });\n        it(@\"\", ^{});\n    });\n\n});\n\nSpecEnd\n```\n. No worries @garnett. Thanks for trying and its good to know its not just me experiencing the issue.\n. @garnett - That got me the exact same result.\nDoes something need to present it? I thought you just initialised the view controllers and then ran your tests on them?\n@manumax - All my view controllers are written programatically. I don't use storyboard or nibs.\n@robb - Not exactly sure how I should go about this but I tried this approach and got exactly the same result:\n```\nbeforeEach(^{\n    mockUserDefaults = mock([NSUserDefaults class]);\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\nUIWindow *window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\nwindow.rootViewController = loadingVC;\n[window makeKeyAndVisible];\n\n});\n```\nMy next step would to be initialise an appDelegate in the beforeEach block too but I don't think that should be necessary.\n. @robb - Nope, still getting a nil for presentedViewController :(\n. Even initialising an appDelegate didn't solve the problem.\n```\n__block ETAppDelegate appDelegate;\n__block ETLoadingVC loadingVC;\n__block NSUserDefaults *mockUserDefaults;\nbeforeEach(^{\n    mockUserDefaults = mock([NSUserDefaults class]);\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\nappDelegate = [ETAppDelegate new];\nappDelegate.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\nappDelegate.window.rootViewController = loadingVC;\n[appDelegate.window makeKeyAndVisible];\n\n});\n```\nI also tried calling application:didFinishLaunchingWithOptions\n. @manumax - Seems to be, yes.\n. Am I approaching BDD in the right way here? Should I even be testing for the presentedViewController?\nIn this view controller there is no user behaviour really, its all about what data is stored on the phone (NSUserDefaults) from previous app runs.\nSome pseudocode of what this view controller does.\nif (currentUser) {\n    if (currentUser is logged in) {     // This does a network call\n        if (saved agreement id) {       // Stored in NSUserDefaults\n            [start agreement]           // This does a network call\n        } else {\n            present AgreementsVC\n        }\n    } else {\n        [auto login]                        // This does a network call\n    }\n} else {\n    present LoginVC\n}\nAutologin\nif (auto login success) {\n    if (saved agreement id) {           \n        [start agreement]               \n    } else {\n        present AgreementsVC\n    }   \n} else {\n    present LoginVC\n}\nStart Agreement\nif (agreement started) {\n    present ThermostatVC\n} else {\n    present AgreementsVC\n}\nAny other suggestions on how I should go about testing this view controller would be appreciated.\n. For now i've added an NSString property that gets updated with the class name that is about to be presented. I then check this string in my test. To get this working though, I had to change my beforeEach block to the following:\nbeforeEach(^{\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:nil];\n    [loadingVC viewDidAppear:NO];\n});\nAlthough the test passes, I get the following message:\nWarning: Attempt to present <ETLoginVC: 0x7fcf34961940> on <ETLoadingVC: 0x7fcf34961280> whose view is not in the window hierarchy!\nI get that this is because i'm calling viewDidAppear before the current view has finished appearing. What I don't get is how I can test this a better way.\nI also don't understand why loadingVC.presentedViewController still equals nil even with this updated beforeEach block.\n. You seem to be correct. Changing the beforeEach to the below got rid of the message:\n```\nbeforeEach(^{\n    mockUserDefaults = mock([NSUserDefaults class]);\n    loadingVC = [[ETLoadingVC alloc] initWithUserDefaults:mockUserDefaults];\nwindow = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\nwindow.rootViewController = loadingVC;\n[window makeKeyAndVisible];\n\n[loadingVC viewDidAppear:NO];\n\n});\n```\nDo you think you could maybe put a quick example together of what you mean?\n. Oh, it seems the above beforeEach block actually means the presentedViewController is now set correctly. I must have missed the combination of setting UIWindow and calling [loadingVC viewDidAppear:NO] when trying this yesterday.\n. ",
    "manumax": "I think the reason is your not loading properly the view controller. You want to either load the view controller using the storyboard or creating it loading the nib. Otherwise VC controller properties are never instantiated. So even calling [viewController view] does nothing since view is nil (and the normal VC lifecycle never happens).\n. Is it the loadView method called when you call [viewController view]?\n. You're getting that error because you're not creating the proper hierarchy using UIWindow, I think.\nAbout the way your testing, I would probably create a class responsible to present the UI stuff. This class would implement a method to present a view controller and then I would test my view controller mocking this class.\n. I think the reason is your not loading properly the view controller. You want to either load the view controller using the storyboard or creating it loading the nib. Otherwise VC controller properties are never instantiated. So even calling [viewController view] does nothing since view is nil (and the normal VC lifecycle never happens).\n. Is it the loadView method called when you call [viewController view]?\n. You're getting that error because you're not creating the proper hierarchy using UIWindow, I think.\nAbout the way your testing, I would probably create a class responsible to present the UI stuff. This class would implement a method to present a view controller and then I would test my view controller mocking this class.\n. ",
    "iainsmith": "Seems to be an Xcode 6.1 issue. You need to set \"Code Signing Resource Rules to Path\" to '$(SDKROOT)/ResourceRules.plist'\nhttp://stackoverflow.com/questions/26497863/xcode-6-1-error-while-building-ipa-using-testflight-app?answertab=votes#tab-top\n. I haven't tried building anything with Xcode 5 but i suspect it will be fine.\n. Seems to be an Xcode 6.1 issue. You need to set \"Code Signing Resource Rules to Path\" to '$(SDKROOT)/ResourceRules.plist'\nhttp://stackoverflow.com/questions/26497863/xcode-6-1-error-while-building-ipa-using-testflight-app?answertab=votes#tab-top\n. I haven't tried building anything with Xcode 5 but i suspect it will be fine.\n. ",
    "MichaelHackett": "Indeed, that fixed it. Would it do any harm to add that to the project for all? (i.e., Would it break builds with prior versions of Xcode?)\n. The project won't build with Xcode 5, due to the iOS framwork target type (introduced in Xcode 6). But I tested with 6.0 and it doesn't seem to break anything, so I created a pull request (#114) with the change you suggested.\n. Indeed, that fixed it. Would it do any harm to add that to the project for all? (i.e., Would it break builds with prior versions of Xcode?)\n. The project won't build with Xcode 5, due to the iOS framwork target type (introduced in Xcode 6). But I tested with 6.0 and it doesn't seem to break anything, so I created a pull request (#114) with the change you suggested.\n. ",
    "hfossli": "The compilation error is\nUndefined symbols for architecture x86_64:\n  \"beforeEach(objc_object*)\", referenced from:\n      ___27-[ThingSpec spt_defineSpec]_block_invoke in XYZSpecTest.o\n  \"describe(NSString*, void () block_pointer)\", referenced from:\n      -[ThingSpec spt_defineSpec] in XYZSpecTest.o\nld: symbol(s) not found for architecture x86_64\nclang-real++: error: linker command failed with exit code 1 (use -v to see invocation)\n. Is there any reason for why I am not able to have c++ in my unit tests along with Specta?\n. Awesome. Thank you!\n. Could it be better to have this ifdef within Expecta.h itself? \n```\nifdef __cplusplus\nextern \"C\" {\nendif\ncontents of Expecta.h\nifdef __cplusplus\n}\nendif\n```\n. Cool\n. The compilation error is\nUndefined symbols for architecture x86_64:\n  \"beforeEach(objc_object*)\", referenced from:\n      ___27-[ThingSpec spt_defineSpec]_block_invoke in XYZSpecTest.o\n  \"describe(NSString*, void () block_pointer)\", referenced from:\n      -[ThingSpec spt_defineSpec] in XYZSpecTest.o\nld: symbol(s) not found for architecture x86_64\nclang-real++: error: linker command failed with exit code 1 (use -v to see invocation)\n. Is there any reason for why I am not able to have c++ in my unit tests along with Specta?\n. Awesome. Thank you!\n. Could it be better to have this ifdef within Expecta.h itself? \n```\nifdef __cplusplus\nextern \"C\" {\nendif\ncontents of Expecta.h\nifdef __cplusplus\n}\nendif\n```\n. Cool\n. ",
    "johnbland-wf": "Ever get this resolved @alexmalek? I'm getting this now as well.\n. @alexmalek, roll back to 3.0.9 in your Podfile. That worked for me.\npod 'GoogleAnalytics-iOS-SDK', '~> 3.0.9'\n. Ever get this resolved @alexmalek? I'm getting this now as well.\n. @alexmalek, roll back to 3.0.9 in your Podfile. That worked for me.\npod 'GoogleAnalytics-iOS-SDK', '~> 3.0.9'\n. ",
    "alexmalek": "Hey @johnbland-wf, I'll try that! Thanks. \n. Hey @johnbland-wf, I'll try that! Thanks. \n. ",
    "johncblandii": "No prob.\n. No prob.\n. ",
    "WilliamZang": "+1\n. Such as waitUntil it's a feature of specta. I think it's a structure. The better way to implement this feature is in specta, I need put all the spec in a block and check the objects.\n. Shall I add this feature into Expecta with some support interface in Specta?\n. +1\n. Such as waitUntil it's a feature of specta. I think it's a structure. The better way to implement this feature is in specta, I need put all the spec in a block and check the objects.\n. Shall I add this feature into Expecta with some support interface in Specta?\n. ",
    "jsteinberg": "The strcmp call was returning truthy(> 0) for incorrect matches.  It was causing some issues in my environment.  As @robb mentioned a strcmp match returns 0.\n. The strcmp call was returning truthy(> 0) for incorrect matches.  It was causing some issues in my environment.  As @robb mentioned a strcmp match returns 0.\n. ",
    "AlexDenisov": "Weird fail on travis...\n. :+1: @orta \n. Weird fail on travis...\n. :+1: @orta \n. ",
    "iosdev-republicofapps": "Hi @pk sorry but that doesn't work.  That returns different errors.\nAny ideas?\nHow should we test methods that use NSError * __autoreleasing * error parameters?  This is a very common pattern in Cocoa and many third-party frameworks and we need to be able to test that proper errors are returned ...\n. Bump.\nAny ideas?  This is becoming a major issue for me.  So many Objective-C methods now under ARC are of the form:\n- (NSObject *)doSomethingWithInput:(NSObject *)input error:(NSError * __autoreleasing *)error;\nWe need to be able to test error.  If Specta can't handle that due to its use of blocks, we need a workaround or it's difficult to use Specta for testing these methods (and there are many methods like this).\nAny suggestions?  :-)\nThanks!\n. Hi @pk sorry but that doesn't work.  That returns different errors.\nAny ideas?\nHow should we test methods that use NSError * __autoreleasing * error parameters?  This is a very common pattern in Cocoa and many third-party frameworks and we need to be able to test that proper errors are returned ...\n. Bump.\nAny ideas?  This is becoming a major issue for me.  So many Objective-C methods now under ARC are of the form:\n- (NSObject *)doSomethingWithInput:(NSObject *)input error:(NSError * __autoreleasing *)error;\nWe need to be able to test error.  If Specta can't handle that due to its use of blocks, we need a workaround or it's difficult to use Specta for testing these methods (and there are many methods like this).\nAny suggestions?  :-)\nThanks!\n. ",
    "J-Rojas": "@orta, @neonichu, thanks for looking into this. I've tried the recent changes in master made by @neonichu, but they did not work for me.\nThe problem I'm seeing as I described above is related to SPTSpec.m, line 202. \nThe current spec is nil here because the spec is not set in the thread local dictionary on the non-main thread and the failures are not recorded.\n. Yes, I was able to find a reproducible case. Your test does work for me (it fails as expected on the background thread). However I'm using Expecta, and those expectations fail to report failures on the background thread. So maybe this is a bug in the Expecta code?\nHere's the case that is failing:\nobjective-c\nit(@\"assert on background queue\", ^{\n  waitUntil(^(DoneCallback done) {\n      dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n         expect(@0).to.beTruthy();\n         done();\n    });\n  });\n});\n. I tried modifying the code in Expecta as you pointed out (changing currentThread -> mainThread) but this did not work for me.\nI instead applied the patch to Specta and my use cases started to work.\nhttps://github.com/specta/specta/pull/134\n. @orta, @neonichu, thanks for looking into this. I've tried the recent changes in master made by @neonichu, but they did not work for me.\nThe problem I'm seeing as I described above is related to SPTSpec.m, line 202. \nThe current spec is nil here because the spec is not set in the thread local dictionary on the non-main thread and the failures are not recorded.\n. Yes, I was able to find a reproducible case. Your test does work for me (it fails as expected on the background thread). However I'm using Expecta, and those expectations fail to report failures on the background thread. So maybe this is a bug in the Expecta code?\nHere's the case that is failing:\nobjective-c\nit(@\"assert on background queue\", ^{\n  waitUntil(^(DoneCallback done) {\n      dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n         expect(@0).to.beTruthy();\n         done();\n    });\n  });\n});\n. I tried modifying the code in Expecta as you pointed out (changing currentThread -> mainThread) but this did not work for me.\nI instead applied the patch to Specta and my use cases started to work.\nhttps://github.com/specta/specta/pull/134\n. ",
    "neonichu": "This is weird, because with my changes, -recordFailureWithDescription:inFile:atLine:expected: should only ever be called from the main thread. Are you able to share a reproducible case of this maybe?\n. I also don't think so - it has also become slightly inconsistent to do so, e.g. waitUntil explicitly runs the user's code on the main thread anyway: https://github.com/specta/specta/blob/master/Specta/Specta/SpectaDSL.m#L166-L167\n. This is weird, because with my changes, -recordFailureWithDescription:inFile:atLine:expected: should only ever be called from the main thread. Are you able to share a reproducible case of this maybe?\n. I also don't think so - it has also become slightly inconsistent to do so, e.g. waitUntil explicitly runs the user's code on the main thread anyway: https://github.com/specta/specta/blob/master/Specta/Specta/SpectaDSL.m#L166-L167\n. ",
    "lysannschlegel": "I faced an issue where the black list did not seem to work:\nIn my App Delegate's didFinishLaunching I had a few\nobjc\nclass_addProtocol(NSClassFromString(@\"CCRenderState\"), NSProtocolFromString(@\"SPTExcludeGlobalBeforeAfterEach\"));\nThe class still got initialized though in ClassesWithClassMethod() because class_conformsToProtocol() still returned NO for that class.\nIt turns out that adding the protocol to a Class* that is returned by NSClassFromString() did not seem to get registered properly.\nI could work around this though by traversing the class list returned by objc_getClassList() and calling class_addProtocol() on the appropriate Class* objects from this list.\nDoes anybody know what's going on here?\nWhy is a class returned by objc_getClassList() different than a class returned by NSClassFromString()?\n. Ok, we did a bit more debugging and found out what the issue was.\nTo cut a long story short it turns out that a misconfiguration in our project resulted in many classes being linked into the application binary as well as the test bundle binary. I didn't even know that this is possible at all, but we ended up having duplicate classes with the same name when running the tests.\nAnd this explains perfectly well why it did not work using NSClassFromString(): The function returns only one of the two classes. And this is why it worked when iterating over all classes in the system and filtering for certain names.\nSo sorry for the confusion. This was an issue specific to our project setup, not an issue with Specta or the black list.\n. I faced an issue where the black list did not seem to work:\nIn my App Delegate's didFinishLaunching I had a few\nobjc\nclass_addProtocol(NSClassFromString(@\"CCRenderState\"), NSProtocolFromString(@\"SPTExcludeGlobalBeforeAfterEach\"));\nThe class still got initialized though in ClassesWithClassMethod() because class_conformsToProtocol() still returned NO for that class.\nIt turns out that adding the protocol to a Class* that is returned by NSClassFromString() did not seem to get registered properly.\nI could work around this though by traversing the class list returned by objc_getClassList() and calling class_addProtocol() on the appropriate Class* objects from this list.\nDoes anybody know what's going on here?\nWhy is a class returned by objc_getClassList() different than a class returned by NSClassFromString()?\n. Ok, we did a bit more debugging and found out what the issue was.\nTo cut a long story short it turns out that a misconfiguration in our project resulted in many classes being linked into the application binary as well as the test bundle binary. I didn't even know that this is possible at all, but we ended up having duplicate classes with the same name when running the tests.\nAnd this explains perfectly well why it did not work using NSClassFromString(): The function returns only one of the two classes. And this is why it worked when iterating over all classes in the system and filtering for certain names.\nSo sorry for the confusion. This was an issue specific to our project setup, not an issue with Specta or the black list.\n. ",
    "jmoody": "Expect merge conflicts with:  Run Xcode command line tools with xcrun #135\n. I can rebase or resubmit to resolve the merge conflict.\n. Force pushed after resolving merge conflicts.\n. And a big thanks to @orta for answering my question.  He was much nicer that I about posting questions to GitHub issues.\n. +1\nSomeone on my team committed an f tag which went unnoticed for a month.  This is a very dangerous feature of Specta.\n. As a temporary solution, I add this Run Script Build Phase script to my XCTest target before compilation.\n```\nINTERMEDIATES_DIR=\"${BUILD_DIR}/../Intermediates\"\nif [ -e \"${INTERMEDIATES_DIR}\" ]; then\n  find ${INTERMEDIATES_DIR} -type f -name \"*.gcda\" -exec rm -rf {} \\;\nfi\n```\n. @Goles I have no idea.\n. @apphipster Thanks for investigating.  I will give it a try.\nTo the original question: Why are these two flags required?\nAre these flags necessary?\n. Expect merge conflicts with:  Run Xcode command line tools with xcrun #135\n. I can rebase or resubmit to resolve the merge conflict.\n. Force pushed after resolving merge conflicts.\n. And a big thanks to @orta for answering my question.  He was much nicer that I about posting questions to GitHub issues.\n. +1\nSomeone on my team committed an f tag which went unnoticed for a month.  This is a very dangerous feature of Specta.\n. As a temporary solution, I add this Run Script Build Phase script to my XCTest target before compilation.\n```\nINTERMEDIATES_DIR=\"${BUILD_DIR}/../Intermediates\"\nif [ -e \"${INTERMEDIATES_DIR}\" ]; then\n  find ${INTERMEDIATES_DIR} -type f -name \"*.gcda\" -exec rm -rf {} \\;\nfi\n```\n. @Goles I have no idea.\n. @apphipster Thanks for investigating.  I will give it a try.\nTo the original question: Why are these two flags required?\nAre these flags necessary?\n. ",
    "wasnotrice": "@modocache that's what I was thinking, too. Thanks for the suggestion. I added that code to my spec helper's +load method, but I still get the failure :(\nobjc\n+ (void)load\n{\n    [super load];\n    Class klass = NSClassFromString(@\"AVYPhotoEditorCustomization\");\n    class_addProtocol(klass, @protocol(SPTExcludeGlobalBeforeAfterEach));\n    NSLog(@\"Added exclude protocol\");\n}\n(I confirmed in my logs that the method did run)\n. Thanks all for your feedback and consideration.\n@paweldudek The failure is the same when I add the blacklist protocol, whether I use NSClassFromString() or objc_lookUpClass(). The log shows that the protocol was added to the class, and those are the very first lines of the log, so it seems like it's happening as early as possible.\nThis is an intermittent failure. Tests tend to pass once or twice and then start failing. Once they start failing, it seems like they fail more frequently, but that may be psychological. In any case, I get this error at least 30% of the time.\nSince the failure is intermittent, I can't be sure that the whitelisting method actually prevents it, but I have run the suite 15 times or so without error, which never happens with blacklisting.\n@orta I don't know if you have other reasons for moving to 1.0, but I don't think there's anything wrong with breaking changes in a pre-1.0 project. I'm prepared for that when I use a project at 0.4.0 :)\nI agree with @paweldudek that the whitelisting approach is easier to explain/understand. I was surprised that I had to add code to prevent Specta from executing methods in my codebase that I didn't want to execute.\n. :+1: \n. Fixed by #149. Thanks everyone!\n. Updated this request incorporating all of the comments, and added a CHANGELOG entry. Thanks for the input!\n. @modocache that's what I was thinking, too. Thanks for the suggestion. I added that code to my spec helper's +load method, but I still get the failure :(\nobjc\n+ (void)load\n{\n    [super load];\n    Class klass = NSClassFromString(@\"AVYPhotoEditorCustomization\");\n    class_addProtocol(klass, @protocol(SPTExcludeGlobalBeforeAfterEach));\n    NSLog(@\"Added exclude protocol\");\n}\n(I confirmed in my logs that the method did run)\n. Thanks all for your feedback and consideration.\n@paweldudek The failure is the same when I add the blacklist protocol, whether I use NSClassFromString() or objc_lookUpClass(). The log shows that the protocol was added to the class, and those are the very first lines of the log, so it seems like it's happening as early as possible.\nThis is an intermittent failure. Tests tend to pass once or twice and then start failing. Once they start failing, it seems like they fail more frequently, but that may be psychological. In any case, I get this error at least 30% of the time.\nSince the failure is intermittent, I can't be sure that the whitelisting method actually prevents it, but I have run the suite 15 times or so without error, which never happens with blacklisting.\n@orta I don't know if you have other reasons for moving to 1.0, but I don't think there's anything wrong with breaking changes in a pre-1.0 project. I'm prepared for that when I use a project at 0.4.0 :)\nI agree with @paweldudek that the whitelisting approach is easier to explain/understand. I was surprised that I had to add code to prevent Specta from executing methods in my codebase that I didn't want to execute.\n. :+1: \n. Fixed by #149. Thanks everyone!\n. Updated this request incorporating all of the comments, and added a CHANGELOG entry. Thanks for the input!\n. ",
    "neilabdev": "Hey modocache! Thanks so much for the theory, that turned out to be substantively the case, with slightly different minutia involved.  Namely, I had to change my testing bundles \"Host Application\" to None, and then add the sample classes to my target manually. A greater detail of the answer is here should someone be interested:\nhttps://github.com/AliSoftware/OHHTTPStubs/wiki/A-tricky-case-with-Application-Tests\nMy initial thoughts rested upon the fact that some testing/scripting frameworks may reload the classes to nix any dynamic/meta methods added and other misc reasons, and wondered if that could be possible here. But apparently, that was not the case. Anyways, the framework rocks and really appreciate you getting me onto the right track. Happy coding!\n. Hey modocache! Thanks so much for the theory, that turned out to be substantively the case, with slightly different minutia involved.  Namely, I had to change my testing bundles \"Host Application\" to None, and then add the sample classes to my target manually. A greater detail of the answer is here should someone be interested:\nhttps://github.com/AliSoftware/OHHTTPStubs/wiki/A-tricky-case-with-Application-Tests\nMy initial thoughts rested upon the fact that some testing/scripting frameworks may reload the classes to nix any dynamic/meta methods added and other misc reasons, and wondered if that could be possible here. But apparently, that was not the case. Anyways, the framework rocks and really appreciate you getting me onto the right track. Happy coding!\n. ",
    "Goles": "Hey guys,\nI was able to get Specta to work, the problem was that apparently my project was missing the correct Runpath Search Paths in the Build Settings.\nIt's a pretty old project, so maybe those were not added by Xcode in the past?\nAnyway, here's how they look now:\nbash\n$(inherited)\n@executable_path/Frameworks\n@loader_path/Frameworks\n\n. @tonyarnold  here's the carthage-xcodebuild.log\n. @tonyarnold So, as a workaround to fix the issue we forked Specta and changed the deployment target to iOS 8.0\nThat seems to work \n. For the record, it's still failing with the same issues from time to time under Xcode CI. It's very strange indeed.\n. It could be the case, it's strange, it fails and then after some attempts it somehow works (and then fails again after a while). Don't know what could be going on.\n. We basically followed the following steps to try to fix it:\nnuke old simulators\n    nuke 7.x runtime\n    nuke carthage cache\n    nuke derived data\n    reboot\nIt still happens from time to time... we'll probably try to just put Specta code in our repo directly. Honestly this could be a Specta problem (related to Xcode CI). We're also using OHHTTPStubs with Carthage and we haven't experienced the same issues... which makes this strange.\n. I often clear my Derived Data directory to fix this, to be honest it's driving me crazy! haha, it seems to get screwed after a while, and then I cleanup Derived Data again.\n. Does Specta support coverage reports with Xcode @jmoody ?\nThat didn't really remove the console spam in my case though :( \ncc @orta \n. I actually opened a radar: on this... I think it might be an Xcode bug\n. @orta what build setting are you talking about? \n. That's interesting, maybe that will do the trick\n. Didn't know about that one, will give it a shot.\n. @FerencYAO When not running this code in specta, everything is fine tbh... am I missing something?\n. @pk The dispatch_sync lies in a method of a Class that I'm testing, and has it's own reasons for being sync, so for me, there's sadly no way around it :disappointed: \n. Hey guys,\nI was able to get Specta to work, the problem was that apparently my project was missing the correct Runpath Search Paths in the Build Settings.\nIt's a pretty old project, so maybe those were not added by Xcode in the past?\nAnyway, here's how they look now:\nbash\n$(inherited)\n@executable_path/Frameworks\n@loader_path/Frameworks\n\n. @tonyarnold  here's the carthage-xcodebuild.log\n. @tonyarnold So, as a workaround to fix the issue we forked Specta and changed the deployment target to iOS 8.0\nThat seems to work \n. For the record, it's still failing with the same issues from time to time under Xcode CI. It's very strange indeed.\n. It could be the case, it's strange, it fails and then after some attempts it somehow works (and then fails again after a while). Don't know what could be going on.\n. We basically followed the following steps to try to fix it:\nnuke old simulators\n    nuke 7.x runtime\n    nuke carthage cache\n    nuke derived data\n    reboot\nIt still happens from time to time... we'll probably try to just put Specta code in our repo directly. Honestly this could be a Specta problem (related to Xcode CI). We're also using OHHTTPStubs with Carthage and we haven't experienced the same issues... which makes this strange.\n. I often clear my Derived Data directory to fix this, to be honest it's driving me crazy! haha, it seems to get screwed after a while, and then I cleanup Derived Data again.\n. Does Specta support coverage reports with Xcode @jmoody ?\nThat didn't really remove the console spam in my case though :( \ncc @orta \n. I actually opened a radar: on this... I think it might be an Xcode bug\n. @orta what build setting are you talking about? \n. That's interesting, maybe that will do the trick\n. Didn't know about that one, will give it a shot.\n. @FerencYAO When not running this code in specta, everything is fine tbh... am I missing something?\n. @pk The dispatch_sync lies in a method of a Class that I'm testing, and has it's own reasons for being sync, so for me, there's sadly no way around it :disappointed: \n. ",
    "coveralls": "\nChanges Unknown when pulling 253d222a21a49928f6cc1ac06ce3638381072828 on dasmer:master into * on specta:master*.\n. \nCoverage remained the same at 87.93% when pulling e050c04c79f131addb72681dd6970db9c9a10b57 on mickeyreiss:master into c976726c3a2d724e6e0000ff9045556f2f351a64 on specta:master.\n. \nCoverage remained the same at 87.93% when pulling 61ab08da4ec475570146537ac8be134b322ed815 on eunikolsky:readme_gcov_errors into 72c5522e1f34346189254a53f3b9b752da981c35 on specta:master.\n. \nCoverage remained the same at 87.93% when pulling 696e2a0aa91adb156eac81dcf5fe6a77b8b81ac8 on eunikolsky:readme_gcov_errors into 72c5522e1f34346189254a53f3b9b752da981c35 on specta:master.\n. \nCoverage remained the same at 87.93% when pulling edd74c041025addb342a9a05d1f2e84d65d76cd4 on hyperspacemark:fix-carthage into 72c5522e1f34346189254a53f3b9b752da981c35 on specta:master.\n. \nChanges Unknown when pulling 253d222a21a49928f6cc1ac06ce3638381072828 on dasmer:master into * on specta:master*.\n. \nCoverage remained the same at 87.93% when pulling e050c04c79f131addb72681dd6970db9c9a10b57 on mickeyreiss:master into c976726c3a2d724e6e0000ff9045556f2f351a64 on specta:master.\n. \nCoverage remained the same at 87.93% when pulling 61ab08da4ec475570146537ac8be134b322ed815 on eunikolsky:readme_gcov_errors into 72c5522e1f34346189254a53f3b9b752da981c35 on specta:master.\n. \nCoverage remained the same at 87.93% when pulling 696e2a0aa91adb156eac81dcf5fe6a77b8b81ac8 on eunikolsky:readme_gcov_errors into 72c5522e1f34346189254a53f3b9b752da981c35 on specta:master.\n. \nCoverage remained the same at 87.93% when pulling edd74c041025addb342a9a05d1f2e84d65d76cd4 on hyperspacemark:fix-carthage into 72c5522e1f34346189254a53f3b9b752da981c35 on specta:master.\n. ",
    "hyperspacemark": "Okay so the Travis CI build failed for the same reason that the 'Test' action doesn't work from within Xcode. We could possibly modify the Rakefile to build the new Specta-iOSTests scheme instead. Thoughts?\n. Now that I look at it, I wonder if running the iOS tests is even necessary. The rake test command only runs the specs on the OS X target. \nSeems like I could just remove the scheme I added. If just running OS X specs was sufficient before, it should be fine now.\n. Removed the iOS tests scheme in b3aa5c4. Let me know if there are other changes y'all want me to make to the Rakefile.\n. My mistake, I was assuming that rake test was the action that folks were expected to run since that's what's in the README. I agree that losing the tests would suck. In light of that, I don't see any way of making this work without adding a scheme for the iOS tests target.\n. @eunikolsky Holy crap. That fixes it for me too and is a way better fix.\n@orta Would 7.0 be a suitable deployment target? The OS X target is set to 10.9.\n. Okay so the Travis CI build failed for the same reason that the 'Test' action doesn't work from within Xcode. We could possibly modify the Rakefile to build the new Specta-iOSTests scheme instead. Thoughts?\n. Now that I look at it, I wonder if running the iOS tests is even necessary. The rake test command only runs the specs on the OS X target. \nSeems like I could just remove the scheme I added. If just running OS X specs was sufficient before, it should be fine now.\n. Removed the iOS tests scheme in b3aa5c4. Let me know if there are other changes y'all want me to make to the Rakefile.\n. My mistake, I was assuming that rake test was the action that folks were expected to run since that's what's in the README. I agree that losing the tests would suck. In light of that, I don't see any way of making this work without adding a scheme for the iOS tests target.\n. @eunikolsky Holy crap. That fixes it for me too and is a way better fix.\n@orta Would 7.0 be a suitable deployment target? The OS X target is set to 10.9.\n. ",
    "eunikolsky": "Hi, I had the same issue:\n$ carthage bootstrap --platform iOS\n*** Checking out specta at \"v1.0.0\"\n*** xcodebuild output can be found in /var/folders/mq/xnb0gcw960x0g2539ztplbqw0000gp/T/carthage-xcodebuild.bPx7in.log\n*** Building scheme \"Specta-iOS\" in Specta.xcworkspace\nA shell task failed with exit code 70:\nxcodebuild: error: Failed to build workspace Specta with scheme Specta-iOS.\n        Reason: The run destination iPad 2 is not valid for Running the scheme 'Specta-iOS'.\nI fixed it by opening the Carthage/Checkouts/specta/Specta.xcworkspace project and setting the iOS Deployment Target to 7.1. It had been empty. So apparently xcodebuild complains that the first iPad 2 (7.1) simulator cannot be used for unspecified deployment target (I wonder if it's set to the lowest possible value, 4.3, in that case).\nThen I could build the framework fine:\n$ carthage build --platform iOS\n*** xcodebuild output can be found in /var/folders/mq/xnb0gcw960x0g2539ztplbqw0000gp/T/carthage-xcodebuild.ayuFJY.log\n*** Building scheme \"Specta-iOS\" in Specta.xcworkspace\n. The PR verification build failed due to a completely unrelated issue. Something wrong with async tests.\n. In one of my projects, I created a target for integration tests, built Specta and Expecta from source (I'd use Carthage, but iOS 7 support is required), packaged into static frameworks, included them into the project, and bumped into these errors. The fix helped me. I can publish a sample project with this error if you'd like.\n. @orta, that would be great, but I don't know how to do that.\n@tonyarnold, please check the latest commit.\nBTW, I haven't tried, but I think this is required since commit https://github.com/specta/specta/commit/9e48664430a2c98bf90ba9eb632e7f81154ce1c7, because these two settings were enabled for the whole Specta project there.\n. Hi, I had the same issue:\n$ carthage bootstrap --platform iOS\n*** Checking out specta at \"v1.0.0\"\n*** xcodebuild output can be found in /var/folders/mq/xnb0gcw960x0g2539ztplbqw0000gp/T/carthage-xcodebuild.bPx7in.log\n*** Building scheme \"Specta-iOS\" in Specta.xcworkspace\nA shell task failed with exit code 70:\nxcodebuild: error: Failed to build workspace Specta with scheme Specta-iOS.\n        Reason: The run destination iPad 2 is not valid for Running the scheme 'Specta-iOS'.\nI fixed it by opening the Carthage/Checkouts/specta/Specta.xcworkspace project and setting the iOS Deployment Target to 7.1. It had been empty. So apparently xcodebuild complains that the first iPad 2 (7.1) simulator cannot be used for unspecified deployment target (I wonder if it's set to the lowest possible value, 4.3, in that case).\nThen I could build the framework fine:\n$ carthage build --platform iOS\n*** xcodebuild output can be found in /var/folders/mq/xnb0gcw960x0g2539ztplbqw0000gp/T/carthage-xcodebuild.ayuFJY.log\n*** Building scheme \"Specta-iOS\" in Specta.xcworkspace\n. The PR verification build failed due to a completely unrelated issue. Something wrong with async tests.\n. In one of my projects, I created a target for integration tests, built Specta and Expecta from source (I'd use Carthage, but iOS 7 support is required), packaged into static frameworks, included them into the project, and bumped into these errors. The fix helped me. I can publish a sample project with this error if you'd like.\n. @orta, that would be great, but I don't know how to do that.\n@tonyarnold, please check the latest commit.\nBTW, I haven't tried, but I think this is required since commit https://github.com/specta/specta/commit/9e48664430a2c98bf90ba9eb632e7f81154ce1c7, because these two settings were enabled for the whole Specta project there.\n. ",
    "mfclarke": "This issue actually doesn't have anything to do with unexpected vs expected. Apologies. I will create a new issue with the real problem.\n. The crashing code is simply [NSException raise:@\"Forced Crash\" format:@\"Requested crash from -[CrashingObject crash]\"]\nI will have a crack at a PR if I have some spare time but I'm afraid that may not be for a week or two.\n. This issue actually doesn't have anything to do with unexpected vs expected. Apologies. I will create a new issue with the real problem.\n. The crashing code is simply [NSException raise:@\"Forced Crash\" format:@\"Requested crash from -[CrashingObject crash]\"]\nI will have a crack at a PR if I have some spare time but I'm afraid that may not be for a week or two.\n. ",
    "KattMingMing": "@orta they are all running. Tested with failing tests and also passing tests to confirm. For clarification, a file that contains multiple Spec's runs all of them and it also runs every Spec in other files.\n. So I think I figured out what is happening and you are correct. It seemed strange to me that the breakpoints in the other spec would be hit even though they are not running the tests. So you were correct. Thanks for the quick reply.\n. @orta they are all running. Tested with failing tests and also passing tests to confirm. For clarification, a file that contains multiple Spec's runs all of them and it also runs every Spec in other files.\n. So I think I figured out what is happening and you are correct. It seemed strange to me that the breakpoints in the other spec would be hit even though they are not running the tests. So you were correct. Thanks for the quick reply.\n. ",
    "blackivory86": "We're experiencing similar issues. Restarting XCode is needed to solve the issue in Test navigator pane.\nThe Xcode test reports are showing the correct results reported in the console\n. +1\n'Someone' on my team did that as well.\nGuessed right - it was me. Again, and again, and ...\n. I'm currently setting up a bare test-case without my other dependencies.\nNot sure how much time I can put into this...\n. - Created a single-view application\n- added UI test target\n- added specta to UI test-target\nStill not working\nObjective-C\ndispatch_async(dispatch_get_main_queue(), ^{\n   block(^{\n      OSAtomicOr32Barrier(1, &complete);\n   });\n});\nSeems to never execute the block\n. Seems to be a general problem with dispatching on the main queue. This does not work even with a test project without Specta\n. Dispatch on main-queue not working:\nObjective-C\n- (void)testMainThread {\n   XCTestExpectation *expectation = [self expectationWithDescription:@\"expectation\"];\n   dispatch_async(dispatch_get_main_queue(), ^{\n      NSLog(@\"executing async block on main-queue\");\n      [expectation fulfill];\n   });\n   [self waitForExpectationsWithTimeout:10 handler:^(NSError *error) {\n      NSLog(@\"error: %@\", error);\n   }];\n}\nDispatch on background thread is working\nObjective-C\n- (void)testBackgroundThread {\n   XCTestExpectation *expectation = [self expectationWithDescription:@\"expectation\"];\n   dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n      NSLog(@\"executing async block on background queue\");\n      [expectation fulfill];\n   });\n   [self waitForExpectationsWithTimeout:10 handler:^(NSError *error) {\n      NSLog(@\"error: %@\", error);\n   }];\n}\n. I think this is an Xcode bug.\nI'll upgrade to XCode 7.1 and see if this was already fixed.\nIf it's not fixed I'll file a bugreport at Apple.\n. Everything is working fine with Xcode 7.1\n. We're experiencing similar issues. Restarting XCode is needed to solve the issue in Test navigator pane.\nThe Xcode test reports are showing the correct results reported in the console\n. +1\n'Someone' on my team did that as well.\nGuessed right - it was me. Again, and again, and ...\n. I'm currently setting up a bare test-case without my other dependencies.\nNot sure how much time I can put into this...\n. - Created a single-view application\n- added UI test target\n- added specta to UI test-target\nStill not working\nObjective-C\ndispatch_async(dispatch_get_main_queue(), ^{\n   block(^{\n      OSAtomicOr32Barrier(1, &complete);\n   });\n});\nSeems to never execute the block\n. Seems to be a general problem with dispatching on the main queue. This does not work even with a test project without Specta\n. Dispatch on main-queue not working:\nObjective-C\n- (void)testMainThread {\n   XCTestExpectation *expectation = [self expectationWithDescription:@\"expectation\"];\n   dispatch_async(dispatch_get_main_queue(), ^{\n      NSLog(@\"executing async block on main-queue\");\n      [expectation fulfill];\n   });\n   [self waitForExpectationsWithTimeout:10 handler:^(NSError *error) {\n      NSLog(@\"error: %@\", error);\n   }];\n}\nDispatch on background thread is working\nObjective-C\n- (void)testBackgroundThread {\n   XCTestExpectation *expectation = [self expectationWithDescription:@\"expectation\"];\n   dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n      NSLog(@\"executing async block on background queue\");\n      [expectation fulfill];\n   });\n   [self waitForExpectationsWithTimeout:10 handler:^(NSError *error) {\n      NSLog(@\"error: %@\", error);\n   }];\n}\n. I think this is an Xcode bug.\nI'll upgrade to XCode 7.1 and see if this was already fixed.\nIf it's not fixed I'll file a bugreport at Apple.\n. Everything is working fine with Xcode 7.1\n. ",
    "oronbz": "+1, currently there is no way to run single file (even with fdescribe and fit), and when you have lots of tests it's pretty annoying running them all every time.\n. +1, currently there is no way to run single file (even with fdescribe and fit), and when you have lots of tests it's pretty annoying running them all every time.\n. ",
    "karpelcev": "Thanks for merging and releasing it so fast!\n. Thanks for merging and releasing it so fast!\n. ",
    "webventil": "+1\n. +1\n. ",
    "tweetjay": "+1\n. +1\n. ",
    "idellwig": "+1\n. +1\n. ",
    "apphipster": "I have spent some time trying to figure out how to get rid of those ugly and annoying messages:\nprofiling: /Users/appfactory/Desktop/WORK/App/trunk/ObjectiveC.gcda: cannot merge previous GCDA file: corrupt arc tag (0x00000000)\nIt seemed like an Xcode 7 issue that was not fixed in the current Xcode 7.1 beta 2.\nThe problem is caused by failing to merge the existing .gcda coverage files with the current results.\nWhat I tried:\nRemove those .gcda files with RunScript  - does not work in my case\necho \"Delete .gcda files\"\necho \"${OBJECT_FILE_DIR_normal}/${CURRENT_ARCH}\"\nAttention: the ObjectiveC.gcda file may be at a different location!\nSet the following build settings to YES - also not helping\nEnable Code Coverage Support to YES \nGenerate Legacy Test Coverage Files to YES \nInstrument Program Flow to YES\nThe solution in my case:\nSet the following build settings for the main target\nEnable Code Coverage Support to YES \nGenerate Legacy Test Coverage Files to YES \nInstrument Program Flow to NO\nSet the following build settings for the test target (and any other targets)\nEnable Code Coverage Support to NO \nGenerate Legacy Test Coverage Files to NO \nInstrument Program Flow to NO\nHope it helps!\n. I have spent some time trying to figure out how to get rid of those ugly and annoying messages:\nprofiling: /Users/appfactory/Desktop/WORK/App/trunk/ObjectiveC.gcda: cannot merge previous GCDA file: corrupt arc tag (0x00000000)\nIt seemed like an Xcode 7 issue that was not fixed in the current Xcode 7.1 beta 2.\nThe problem is caused by failing to merge the existing .gcda coverage files with the current results.\nWhat I tried:\nRemove those .gcda files with RunScript  - does not work in my case\necho \"Delete .gcda files\"\necho \"${OBJECT_FILE_DIR_normal}/${CURRENT_ARCH}\"\nAttention: the ObjectiveC.gcda file may be at a different location!\nSet the following build settings to YES - also not helping\nEnable Code Coverage Support to YES \nGenerate Legacy Test Coverage Files to YES \nInstrument Program Flow to YES\nThe solution in my case:\nSet the following build settings for the main target\nEnable Code Coverage Support to YES \nGenerate Legacy Test Coverage Files to YES \nInstrument Program Flow to NO\nSet the following build settings for the test target (and any other targets)\nEnable Code Coverage Support to NO \nGenerate Legacy Test Coverage Files to NO \nInstrument Program Flow to NO\nHope it helps!\n. ",
    "liuslevis": "guess it's a xcode 7.1 bug. ref: http://davidlau.me/2015/12/05/Trying-to-fix-Xcode-7-GDCA-file-corruption/\n. guess it's a xcode 7.1 bug. ref: http://davidlau.me/2015/12/05/Trying-to-fix-Xcode-7-GDCA-file-corruption/\n. ",
    "jmenezes": "To resolve the issue of getting \"cannot merge previous GCDA file: corrupt arc tag\" messages in console, avoid generating ObjectiveC.gcda file, by making \u201cEnable Modules (C and Objective-C)\" setting to \"NO\", in the target settings.\n. To resolve the issue of getting \"cannot merge previous GCDA file: corrupt arc tag\" messages in console, avoid generating ObjectiveC.gcda file, by making \u201cEnable Modules (C and Objective-C)\" setting to \"NO\", in the target settings.\n. ",
    "Ad1991": "@jmenezes @import statements would not work if you set that flag to NO. Not something I would like to do.\n. @jmenezes @import statements would not work if you set that flag to NO. Not something I would like to do.\n. ",
    "evilDave": "This does not make a whole lot of sense to me. It makes focusing an outer block meaningless. I find that the current behaviour, that focusing an outer block takes precedence over any focusing of contained blocks, is correct.\nUnder your suggested interpretation, what is the difference then between these:\nfdescribe(@\"foo\", ^{\n    it(@\"should bar\", ^{\n        ...\n    }\n    fit(@\"should baz\", ^{\n        ...\n    }\n}\ndescribe(@\"foo\", ^{\n    it(@\"should bar\", ^{\n        ...\n    }\n    fit(@\"should baz\", ^{\n        ...\n    }\n}\ndoes this not create two ways to specify the same behaviour?\nWhat should this do?:\nfdescribe(@\"foo\", ^{\n    it(@\"should bar\", ^{\n        ...\n    }\n    it(@\"should baz\", ^{\n        ...\n    }\n}\nnothing? Or the focus the whole describe block?\nLastly, what would you do to get all the contents of a block to focus? (focus all of the inner blocks individually?)\nThis change would add no additional behaviour, and actually remove (make more verbose) a behaviour that is currently possible. Incidentally, in order to \"run only the fit\" all you need to do is to specify only the fit (not the fdescribe)... was your workflow first to focus on the describe then narrow down to the it block? If so I can see how you got there, but all you need do is remove the fdescribe and add the fit(s).\n(I'm sorry that my first contribution here could be seen as purely negative, but no-one else seemed to be making this point and I can't see how this change would be an improvement, quite the opposite.)\nThanks.\n. This does not make a whole lot of sense to me. It makes focusing an outer block meaningless. I find that the current behaviour, that focusing an outer block takes precedence over any focusing of contained blocks, is correct.\nUnder your suggested interpretation, what is the difference then between these:\nfdescribe(@\"foo\", ^{\n    it(@\"should bar\", ^{\n        ...\n    }\n    fit(@\"should baz\", ^{\n        ...\n    }\n}\ndescribe(@\"foo\", ^{\n    it(@\"should bar\", ^{\n        ...\n    }\n    fit(@\"should baz\", ^{\n        ...\n    }\n}\ndoes this not create two ways to specify the same behaviour?\nWhat should this do?:\nfdescribe(@\"foo\", ^{\n    it(@\"should bar\", ^{\n        ...\n    }\n    it(@\"should baz\", ^{\n        ...\n    }\n}\nnothing? Or the focus the whole describe block?\nLastly, what would you do to get all the contents of a block to focus? (focus all of the inner blocks individually?)\nThis change would add no additional behaviour, and actually remove (make more verbose) a behaviour that is currently possible. Incidentally, in order to \"run only the fit\" all you need to do is to specify only the fit (not the fdescribe)... was your workflow first to focus on the describe then narrow down to the it block? If so I can see how you got there, but all you need do is remove the fdescribe and add the fit(s).\n(I'm sorry that my first contribution here could be seen as purely negative, but no-one else seemed to be making this point and I can't see how this change would be an improvement, quite the opposite.)\nThanks.\n. ",
    "rad3ks": "I made PR #182 that resolves the issue. It currently doesn't pass CI due to older Xcode on travis, where XCTestObservation is not defined by XCTest, but you can point directly to this commit/branch in your Podfile (if you're using cocoapods to integrate specta with your project).\npod 'Specta',\n    :git => \"https://github.com/rad3ks/specta.git\",\n    :commit => \"213c6e673b78d3452aa9b22d784fef272b4e7312\",\n. Sorry for not testing it on CI, but locally only. We should probably wait with this until travis will use xcode7 by default. What's your opinion @orta?\n. There's a blog post about Xcode 7 GM only - no support for official release (and we know it's a different build). To start using Xcode 7 GM, we will need travis.yml and specify osx_image: xcode7. As far as I can see, Specta only uses Rakefile, so the best would be to wait for official support.\n. My proposal is to make separate branch for xcode7, like xcode6b6-wip. Any ideas?\n. I made PR #182 that resolves the issue. It currently doesn't pass CI due to older Xcode on travis, where XCTestObservation is not defined by XCTest, but you can point directly to this commit/branch in your Podfile (if you're using cocoapods to integrate specta with your project).\npod 'Specta',\n    :git => \"https://github.com/rad3ks/specta.git\",\n    :commit => \"213c6e673b78d3452aa9b22d784fef272b4e7312\",\n. Sorry for not testing it on CI, but locally only. We should probably wait with this until travis will use xcode7 by default. What's your opinion @orta?\n. There's a blog post about Xcode 7 GM only - no support for official release (and we know it's a different build). To start using Xcode 7 GM, we will need travis.yml and specify osx_image: xcode7. As far as I can see, Specta only uses Rakefile, so the best would be to wait for official support.\n. My proposal is to make separate branch for xcode7, like xcode6b6-wip. Any ideas?\n. ",
    "guidomb": "Disabling bitcode fixes the problem https://github.com/specta/specta/pull/179\n. Disabling bitcode fixes the problem https://github.com/specta/specta/pull/179\n. ",
    "rbaumbach": "+1\n. After much investigation on this issue, it was determined that the culprit is in fact the iOS 9 simulator.  If you download the 8.4 version (if you haven't already) and run your specs with it, it will be as fast as it used to be.\nI'm not sure what else we can do other than to let Apple know that the iOS 9 simulator is extremely slow.\n. Is it possible to write specs with an 'it' inside of an 'it?'  I was always under the impression that the it is the final \"block\" of code that could be nested in multiple 'describes' and 'contexts.'\n. +1\n. After much investigation on this issue, it was determined that the culprit is in fact the iOS 9 simulator.  If you download the 8.4 version (if you haven't already) and run your specs with it, it will be as fast as it used to be.\nI'm not sure what else we can do other than to let Apple know that the iOS 9 simulator is extremely slow.\n. Is it possible to write specs with an 'it' inside of an 'it?'  I was always under the impression that the it is the final \"block\" of code that could be nested in multiple 'describes' and 'contexts.'\n. ",
    "michaeltansg": "+1\n. +1\n. ",
    "programmerdave": "Any updates on this from Apple dev? Is there a radar ticket open for this?\n. Any updates on this from Apple dev? Is there a radar ticket open for this?\n. ",
    "aterribili": "+1\n. +1\n. ",
    "ExtremeMan": "Awesome! Thanks for a quick review.\n. > The exception being thrown here is in my code, but only occurs because the app itself is never booted up. If it were, the exception would not be thrown.\nMy point is that it occurs because tests are run when they aren't supposed to be run.\nIf you look into stack trace you will see that XCTest framework is just querying test cases and not actually trying to run them: +[XCTestSuite allTests].\n. Hm. Then Specta framework is used incorrectly. What is spec method for? What should be done in this method? I actually see - (void)performTest in SPTSpec which is invoked when test should be run.\n. xctool is first doing dlopen of the test bundle to query test cases. Then it runs them. First step isn't done in simulator context because there is no good reason to do that there. I guess your test depends on some services that aren't available without such context.\n. Awesome! Thanks for a quick review.\n. > The exception being thrown here is in my code, but only occurs because the app itself is never booted up. If it were, the exception would not be thrown.\nMy point is that it occurs because tests are run when they aren't supposed to be run.\nIf you look into stack trace you will see that XCTest framework is just querying test cases and not actually trying to run them: +[XCTestSuite allTests].\n. Hm. Then Specta framework is used incorrectly. What is spec method for? What should be done in this method? I actually see - (void)performTest in SPTSpec which is invoked when test should be run.\n. xctool is first doing dlopen of the test bundle to query test cases. Then it runs them. First step isn't done in simulator context because there is no good reason to do that there. I guess your test depends on some services that aren't available without such context.\n. ",
    "adamkaplan": "Thanks @orta!\n. Thanks @orta!\n. ",
    "restjohn": "Is there a pattern for using waitUntil that repeatedly checks whether a condition has been satisfied as waitForExpectionsWithTimeout:handler: does?  For a while I had assumed that was the way waitUntil worked, but I had async tests failing and finally looked at the code behind waitUntil and realized it was only calling the passed block once.  Then I switched to the [XCTestCase waitForExpectationsWithTimeout:handler:] async facility which gave me the repeated condition checking behavior, but also the error message this issue describes.  So what is the best practice for using waitUntil in a similar manner?\n. Ah, thanks very much.  I don't know how I missed that all this time.\n. Is there a pattern for using waitUntil that repeatedly checks whether a condition has been satisfied as waitForExpectionsWithTimeout:handler: does?  For a while I had assumed that was the way waitUntil worked, but I had async tests failing and finally looked at the code behind waitUntil and realized it was only calling the passed block once.  Then I switched to the [XCTestCase waitForExpectationsWithTimeout:handler:] async facility which gave me the repeated condition checking behavior, but also the error message this issue describes.  So what is the best practice for using waitUntil in a similar manner?\n. Ah, thanks very much.  I don't know how I missed that all this time.\n. ",
    "wsb9": "Adding yet another interesting example: failing test cases get disappeared from Navigator. When I noticed, decided to make small test and inserted XCTFail() call into passing test case. After run, changed case gone away with suite failed and no cue what went wrong.\nXcode 7.2 (7C68), Specta 1.0.5.\n. Adding yet another interesting example: failing test cases get disappeared from Navigator. When I noticed, decided to make small test and inserted XCTFail() call into passing test case. After run, changed case gone away with suite failed and no cue what went wrong.\nXcode 7.2 (7C68), Specta 1.0.5.\n. ",
    "valnoc": "i also get failed tests disappeared from navigator\nAny info on \"how to fix\"?\n. i also get failed tests disappeared from navigator\nAny info on \"how to fix\"?\n. ",
    "kkotar": "Xcode Version 7.3 (7D175) same problems :(\n. Xcode Version 7.3 (7D175) same problems :(\n. ",
    "stephen-francis": "My team has experienced the tests \"disappearing\" as well, and it makes evaluating results very difficult. Has there been any movement here?\n. Thanks for the quick response @orta, I appreciate it. Has a bug report been filed on this from the Xcode perspective?\n. @orta: I filed a radar on this: Bug ID 25679988: Test cases disappear from the Test Navigator, on 12 April. Apple responded with: \"It seems this issue only manifests when using the Specta framework. Can the developers of Specta resolve this issue?\"\nIn response, on 20 April, I informed them that this issue also manifests itself in Quick, and that we have reason to believe it's an Xcode issue. I haven't gotten another response since.\n. Thanks for checking in, @modocache, that'd be great. \nDo you or @orta happen to know if there's a workaround here? For instance, if we were to run these tests from the command line instead of the Xcode interface, could we avoid this issue?\n. My team has experienced the tests \"disappearing\" as well, and it makes evaluating results very difficult. Has there been any movement here?\n. Thanks for the quick response @orta, I appreciate it. Has a bug report been filed on this from the Xcode perspective?\n. @orta: I filed a radar on this: Bug ID 25679988: Test cases disappear from the Test Navigator, on 12 April. Apple responded with: \"It seems this issue only manifests when using the Specta framework. Can the developers of Specta resolve this issue?\"\nIn response, on 20 April, I informed them that this issue also manifests itself in Quick, and that we have reason to believe it's an Xcode issue. I haven't gotten another response since.\n. Thanks for checking in, @modocache, that'd be great. \nDo you or @orta happen to know if there's a workaround here? For instance, if we were to run these tests from the command line instead of the Xcode interface, could we avoid this issue?\n. ",
    "Autoc0diq": "Is it supported by Carthage?\n-s\n\nOn Oct 22, 2015, at 12:40 AM, Robert B\u00f6hnke notifications@github.com wrote:\nFWIW, I'd be looking into committing frameworks with git lfs now.\n\u2014\nReply to this email directly or view it on GitHub.\n. Is it supported by Carthage?\n\n-s\n\nOn Oct 22, 2015, at 12:40 AM, Robert B\u00f6hnke notifications@github.com wrote:\nFWIW, I'd be looking into committing frameworks with git lfs now.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "timbodeit": "Failing CI not related to changes from pull request.\nSame error happens on current master.\n. Failing CI not related to changes from pull request.\nSame error happens on current master.\n. ",
    "dkhamsing": ":smile: \n. :smile: \n. ",
    "FerencYAO": "i think should dispatch_async\n2015\u5e7412\u670816\u65e5\u661f\u671f\u4e09\uff0cNicolas Goles notifications@github.com \u5199\u9053\uff1a\n\nI'm trying to do something like\ndispatch_sync(dispatch_get_main_queue(), ^{\n   ...\n   ...\n   ...\n});\nSpecta seems to get stuck on this, I wrote a sample project\nhttps://dl.dropboxusercontent.com/u/1149996/SpectaMainThreadTest.zip to\ndemonstrate the behavior.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/specta/specta/issues/198.\n. i think should dispatch_async\n\n2015\u5e7412\u670816\u65e5\u661f\u671f\u4e09\uff0cNicolas Goles notifications@github.com \u5199\u9053\uff1a\n\nI'm trying to do something like\ndispatch_sync(dispatch_get_main_queue(), ^{\n   ...\n   ...\n   ...\n});\nSpecta seems to get stuck on this, I wrote a sample project\nhttps://dl.dropboxusercontent.com/u/1149996/SpectaMainThreadTest.zip to\ndemonstrate the behavior.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/specta/specta/issues/198.\n. \n",
    "MattFoley": "That line of code is in a context() block. If I understand the back and forth here, no code should be unwrapped in a context or describe block? All executing code for tests should be in beforeEach/beforeAll/it methods? \nHere's some pseudo code to give you an idea of what I mean:\ndescribe(){\n    context(){\n        //Some setup code\n        it(){}\n        it(){}\n}\nIf that's the case, and that's the whole problem, mind if I update the docs saying so?\n. That was the problem! I've fixed our test suite and it now runs just fine with xctool. I'm curious why xcodebuild doesn't complain about this, but xctool does. Mainly just for my own curiosity about the architecture of the two. Any ideas?\nRegardless, closing this issue, thanks!\n. So what I gather is that xcodebuild just launches the simulator first, and then queries the test bundle. Querying the test bundle causes Specta to execute any code not inside a before, after, or it block.\nTo answer the question, yep, I set up a CoreData stack in my appDelegate for my test host, and because the app delegate was never called, the stack was never setup which leads to an assert. For me, the problem was easily solved by just moving some setup code into before blocks.\nThanks for the information!\n. That line of code is in a context() block. If I understand the back and forth here, no code should be unwrapped in a context or describe block? All executing code for tests should be in beforeEach/beforeAll/it methods? \nHere's some pseudo code to give you an idea of what I mean:\ndescribe(){\n    context(){\n        //Some setup code\n        it(){}\n        it(){}\n}\nIf that's the case, and that's the whole problem, mind if I update the docs saying so?\n. That was the problem! I've fixed our test suite and it now runs just fine with xctool. I'm curious why xcodebuild doesn't complain about this, but xctool does. Mainly just for my own curiosity about the architecture of the two. Any ideas?\nRegardless, closing this issue, thanks!\n. So what I gather is that xcodebuild just launches the simulator first, and then queries the test bundle. Querying the test bundle causes Specta to execute any code not inside a before, after, or it block.\nTo answer the question, yep, I set up a CoreData stack in my appDelegate for my test host, and because the app delegate was never called, the stack was never setup which leads to an assert. For me, the problem was easily solved by just moving some setup code into before blocks.\nThanks for the information!\n. ",
    "poetmountain": "I'm a bit swamped at the moment, but can look into it more in a few weeks.\n. I'm a bit swamped at the moment, but can look into it more in a few weeks.\n. ",
    "lolgear": "@orta Assign this issue to me, please, I am going to merge PR as soon as possible\n. @orta Assign this issue to me, please, I am going to merge PR as soon as possible\n. ",
    "MatejBalantic": "Thanks @orta, done.. Wow, super fast! Thanks for help.. Thanks @orta, done.. Wow, super fast! Thanks for help.. ",
    "shockdesign": "Thanks, yeah was getting build warnings. Doesn't hurt... Thanks, yeah was getting build warnings. Doesn't hurt... "
}