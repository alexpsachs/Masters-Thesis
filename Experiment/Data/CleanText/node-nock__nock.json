{
    "pgte": "Thanks for the patch!\nReleased nock v0.2.0 on npm.\n. Released v0.2.1\n. Thanks for the patch!\nJust released version 0.3.0 on npm!\nhttp://search.npmjs.org/#/nock\n. Thanks again!\nJust released v0.3.1.\n. yeah, shouldn't be difficult to implement. I'll probably get around to that during the next week or 2.\n. You can reply a string:\n  .reply(status, string)\nOr a file:\n  .replyWithFile(status, filePath)\n. Nock supports the response body specification on the second argument and the response headers in the third.\nGenerically, for your case:\n.replyWithFile(200, '/path/to/body/file', {\"Content-Type\": \"text/html\", \"Content-Length\": \"374030\", ... })\n. Now it does:https://github.com/pgte/nock/blob/master/tests/test_intercept.js#L177\n. should be fixed in 0.5.4, please check it out. thanks!\n. fixed on 0.5.5\n. You have\nnock.restore()\nto do that.\nNo dia 2 de Dez de 2011, \u00e0s 02:35, Nuno Job\nreply@reply.github.com\nescreveu:\n\nSimply require nock and all should work.\nNock could save tests on the first run to the file system. Then replay wouldn't be done cause it was nocked.\nA way to invalidate bad results would be necessary, so max a user would do is\njs\nnock.rewind();\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/pgte/nock/issues/14\n. Sorry, didn't read, think this is a good idea!\n\nNo dia 2 de Dez de 2011, \u00e0s 02:35, Nuno Job\nreply@reply.github.com\nescreveu:\n\nSimply require nock and all should work.\nNock could save tests on the first run to the file system. Then replay wouldn't be done cause it was nocked.\nA way to invalidate bad results would be necessary, so max a user would do is\njs\nnock.rewind();\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/pgte/nock/issues/14\n. Also, see #62\n. That is already supoported, I think. Check out this test:\n\nhttps://github.com/pgte/nock/blob/master/tests/test_intercept.js#L692\nDoes it work for you?\n. @dscape when you can take a look at this one to see if it works for you?\n. Closing this for now, ping me if you have any issue with this.\n. I think this is solved, closing.\n. Merged, thanks!\n. Merged, thanks!\n. Thanks for the contribution!\nMerged and nock v0.6.3 released.\n. Thanks again!\nnock v0.7.0 published.\n. This is now working:\nhttps://github.com/pgte/nock/commit/3354aa57d621ab19aa257a78da864544eeb089c8#L1R908\n. @theycallmeswift sorry, only now realized your ticket has been sitting here all along, you should have pointed me out to it earlier :)\nThe problem is that, when you mock, you start by mocking the whole hostname, and since now nock is responsible for resolving all HTTP requests to that hostname, so it's natural that it should complaint when a path is not resolved.\nOr am I looking at it in the wrong way? Do you have any suggestions? Should we make this an option?\n. @theycallmeswift I read you, agree, should be simple to implement. I'll try to work on this today or tomorrow max.\n. @theycallmeswift Nock v0.9.0 is out with this feature, just as you describe it.\n. Thanks for the contribution, merged.\n. Yes, should be solved by this PR: https://github.com/pgte/nock/pull/31\n, which is merged into v0.8.1.\n. I prefer the first option, clearly, thanks for asking :)\nNo dia 03/02/2012, \u00e0s 21:22, Ian Young\nreply@reply.github.com\nescreveu:\n\nI noticed that in my tests using nock, if one test failed to fulfill an expectation, subsequent tests that set up the same expectation would fail, because the requests were being hijacked by a lingering intercept from the previous test. I wrote a test that demonstrates:\n``` javascript\ntap.test(\"scopes are independent\", function(t) {\n var scope1 = nock('http://www.google.com')\n   .get('/')\n   .reply(200, \"Hello World!\");\n var scope2 = nock('http://www.google.com')\n   .get('/')\n   .reply(200, \"Hello World!\");\nvar req = http.request({\n     host: \"www.google.com\"\n   , path: '/'\n   , port: 80\n }, function(res) {\n   res.on('end', function() {\n     t.ok(scope1.isDone());\n     t.ok(scope2.isDone()); // fails\n     t.end();\n   });\n });\nreq.end();\n});\n```\nWhat's your preferred way to fix this?\n- One intercepted request could fulfill expectations from multiple scopes (in other words, the above test would pass without modification).\n- nock.restore() could clear out whatever is hanging around to cause this. Test would change to something like this:\n``` javascript\n  tap.test(\"scopes are independent\", function(t) {\n  var scope1 = nock(/.../);\n  nock.restore();\n  var scope2 = nock(/.../);\nvar req = http.request({\n   //...\n  }, function(res) {\n   res.on('end', function() {\n     t.notOk(scope1.isDone());\n     t.ok(scope2.isDone());\n     t.end();\n  });\n  });\n  req.end();\n  });\n  ``\n- Similar to the previous option, but give the duty to a new method rather thanrestore`.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/pgte/nock/issues/30\n. Sorry, backtracking here.\n\nThere is no way to make the scopes independent, since the app will be making direct calls to the HTTP module, not referencing a scope.\nThe interceptors are created globally, which means that what you are experiencing is the correct behavior.\nThere is no way to tell which scope will be caught first, depends on which request fires first.\nWhen using nock I don't do my tests in parallel, which makes debugging stuff like this much easier.\nI added some tests for this, which I think is correct behavior:\nhttps://github.com/pgte/nock/commit/f8b73667d1cfe7239f87596ab55140d8c5eb9204\n. Thinking again about this, a nice feature would be to globally clean up all mocks, thinking of\nnock.cleanAll();\nI'll be working on this.\nSorry for the delay :)\n. nock v0.10.1 now supports:\nnock.cleanAll() that wipes the mocks that are setup.\nplease reopen this if it doesn't work for you.\nThanks!\n. Thanks for the fix and the test, awesome.\n. Thanks for the contribution!\npublished v0.8.1.\n. published v0.8.1.\n. Merged and published v0.8.3.\nThanks for the contribution!\n. Thanks for the contribution!\nv0.8.4 released.\n. Yup, true, thanks for the contribution!\nv0.9.1 is out.\n. Yes, it's possible, for example:\n.get('/')\n  .reply(statusCode, body, headers)\n. @indexzero No, that doesn't exist yet, but should be easy to add.\n. I'll be doing that.\n. Now supported in v0.10.0, available in NPM.\n. It's:\nscope\n  .defaultReplyHeaders(headers)\n  // ...\nAlso documented new feature in the README.\n. @theycallmeswift Thanks for the contribution!\nnock v0.10.2 published.\n. @jesusabdullah sorry, haven't been getting any emails on nock issues since I moved it to flatiron, even though I'm on the team :/\n@jesusabdullah does this work for you or you think we should make it easier somehow?\n. @jesusabdullah good advise, thanks, updated README.\n. Thanks for the contribution.\nnock v0.10.5 published.\n. Thanks for the contribution!\nnock v0.10.4 released.\n. Sorry, for some reason I'm not getting emails on any of the nock issues. Let me check this one out.\n. @carlosvillu This is happening because the auth part of the request (\"username:password\") should not be part of the host name.\nYou should mock \"https://#{STORE}.myshopify.com\" and not with the username and password in the header.\nmikeal/request will parse those and include them in the request options.auth.\n. I tried the following and it worked:\njavascript\nvar nock = require('nock');\nnock('http://www.google.com').get('/').reply(200, 'Hey!');\nrequire('http').request({host: 'www.google.com', path:'/'}, function(res) {\n  console.log('hey!');\n  res.on('data', function(d) {\n    console.log('data from google: %s', d);\n  });\n}).end();\nDoes it not work for you?\n. it should print \"Hey!\" at the end.\n. Then require('nock') has to happen before your app is initialized.\nThere is nothing nock can do if you don't, since we need to appear first so that the http.request function gets wrapped.\n. @dscape the tests pass in travis, what do you mean?\n. But where is the failed test, I can't find one :/\nNo dia 03/03/2012, \u00e0s 00:13, Nuno Job\nreply@reply.github.com\nescreveu:\n\nYeah, The module is testing in 0.4 and 0.6 at the same time, concurrently. I had plenty of issues doing this in nano, so i actually made fakeurls based on the node version that was running\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/flatiron/nock/issues/44#issuecomment-4296651\n. All tests pass, can you provide a failing test?\n. Implemented in v0.13.0\n. You can use .intercept(path, method, requestBody, options) like this:\n\nnock('http://my.domain.com)\n    .intercept('/path', 'HEAD', ...)\n    .reply(304);\nI'm adding this to the README.\n. @fent Awesome again, thanks!\n. Agree, will experiment on that.\n. nock v0.11.1 now does that, check it out if you can :)\n. Thanks for the contribution!\nJust released nock v0.11.0.\n. good call.\nnock v0.11.2 is released.\n. Thanks for the report, released nock v0.11.4\n. Oops, thanks for noticing it, removed in nock v0.11.5.\n. Yes, that type of report is great, helped a lot.\nThe only best thing is a pull request with the fix ;)\n. Thanks for the contribution!\nnock v0.11.3 released.\n. Already implemented.\n. nock v0.11.6 is published.\nThanks for your contribution!\n. Thanks for the patch and test!\nNock v0.12.0 is out with this.\n. Thanks for detecting and correcting this.\npublished nock v0.13.3.\n. Thanks for the patch and test!\nNock v0.12.0 is out with this.\n. Thanks for the patch and test!\nNock v0.12.0 is out with this.\n. Thanks for the contribution!\nPublished on nock v0.12.2.\n. Thanks for the contribution!\nPublished on nock v0.12.2.\n. Yes, there definitely is, but I won't have time for this during the next couple of weeks at least.\n. Related: #14\n. I haven't started :)\n. Speaking for myself, I don't have any, too busy at the moment, but PRs are welcome. :)\n\nPedro\nOn Saturday, April 6, 2013 at 8:38 PM, Prabir Shrestha wrote:\n\nany updates on this feature?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/flatiron/nock/issues/62#issuecomment-16002611).\n. I think the current recording may be what you're looking for, closing this one.\n. Thanks for the contribution.\nPublished nock v0.12.3\n. I can't seam to reproduce this.\nI added a test case here:\nhttps://github.com/flatiron/nock/commit/b39cce09ac57d537f1dc4dc611a04737dd2c16f6\n\nIf you can, please check this and see if it runs on your side.\n. Closing this, please reopen if the test case breaks on your side.\n. duplicate of #69.\n. Copy is just one of the many available HTTP methods\nInstead of exposing every known method, I chose to expose the most common ones and then also expose scope.intercept(uri, method, request_body) as a generic interceptor that supports any method.\nYou should use this one. :)\n. Nuno,\nHere is an informal list of all the available HTTP methods:\nhttp://annevankesteren.nl/2007/10/http-methods\nIf I add scope.copy, why not add scope.move, scope.lock and others?\nI suggest you use the generic scope.intercept like this:\njavascript\nnock('http://myhost/mypath')\n  .intercept(uri, 'COPY', requestBody)\n  .reply(201, \"whatevs\")\n;\n. Disagree :)\nDo you think mikeal/request should also support a .copy? ;)\n. COPY is not on RFC 2616, it's an extension.\nMore importantly, it's not widely used. I had never heard of this verb, and I suspect very few people use it.\nThe most commonly used verbs are the ones that have a shortcut in nock and in request:\nGET, POST, PUT and DELETE.\nIf I add .copy, I see no reason to not add every method on every RFC that promotes an HTTP extension.\nNock is already flexible enough by providing a scope.intercept(uri, method, body).\n. Thanks, published v0.13.7\n. I think there is a misunderstanding here.\nNock doesn't make HTTP requests, it mocks servers, so your request never reaches the proxy.\nAnd it looks here like you were trying to test node-http-proxy??\n. Is the proxy being run on the same process as the test?\n. OK, so that's why it doesn't work.\nNock mocks http requests, but you have to be on the same process to expect that to be mocked.\nhttp://en.wikipedia.org/wiki/Mock_object\n. Thanks for the report, I'll take a look.\n. Released Nock v0.13.4\n. Hi @mgcrea, can you please give me a snippet of code that fails?\nThanks!\n. I tried using the following code with node v0.8.9 in OSX and it works.\n``` js\nvar nock = require('nock');\nvar request = require('request');\nhost = 'http://dev.carlipa-online.com';\nscope = nock(host)\n    .get('/pull/debug:1')\n    .reply('404');\nrequest('http://dev.carlipa-online.com/pull/debug:1', function(err) {\n  console.log('got resp', arguments);\n});\n```\nDoes this work for you? If so, can you make it break?\nThanks for your help.\n. That's a diff problem.\nYou're doing\njs\n.get('/pull/debug:1', '*')\nand should be doing:\njs\n.get('/pull/debug:1')\n. This error is a mismatch.\nYou should be matching something like .post('/pull/debug:1', JSON.stringify({foo: 'bar'}))\nI'm closing this for now, please reopen if you find something that is not covered in https://github.com/flatiron/nock#readme\nThanks.\n. Yup, preferably a plainvanilla node script I can run directly.\nThanks.\n. http.get uses http.request...\nAm I missing something?\n. Fixed by #72\n. @nlacasse Thanks for the report!\nPublished v0.13.5.\n. The intereceptors are removed once they are \"used\".\nPlease check this: https://github.com/flatiron/nock#read-this\nAnd please reopen if this is not the case.\n. Yeah, you're right, sorry my coffeescript reading is bad. Reopening this one just to make sure if it's not a nock bug.\nYou can add a .log(console.log) to the scope like this to see what is going on under the hood:\nhttps://github.com/flatiron/nock#logging\n. No feedback, so I'm closing this one.\nPlease reopen once you have more info.\n. You can inspect what nock is trying to do by putting a callback using .log()  \nIf that doesn't get you an insight, I'll need a failing test case (a gist is fine).  \n\nPedro\nOn Tuesday, 19 de February de 2013 at 07:40, Jason Avinger wrote:\n\nI'm having the same problem. Nock is not working for the restify json client. I tried adding .log(console.log) but nothing was logged. It just hangs. You should be able to repro this quite easily.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/flatiron/nock/issues/79#issuecomment-13760517).\n. Fixed in nock v0.13.16. Thanks!\n. I added this experimental feature to v0.14.0:\n\nhttps://github.com/flatiron/nock#persist\nPlease reopen this if that doesn't work.\n. You can use a path filtering regexp or function that will be called on every request by using .filteringPath():\nhttps://github.com/flatiron/nock#path-filtering\nYou can then take that chance to reorder the query string if you will.\n. Closing #82.\n. Nock is currently not query-string aware, but I agree this is annoying.\nWe can either\na) make a scope query-string aware by defau (making it match the query object instead of the string). Here an option would be needed to switch this off.\nb) make it easy for the programmer to create a query string filter that they can activate with something like this:\njavascript\nscope.filteringPath(nock.orderQueryString);\nI'm inclined to support the first option since it's more friendly and I suspect covers most of the cases.\n@ierceg @svnlto thoughts?\n. @kevinhodges I wouldn't want to break backwards compatibility.\nOne way I see this working is if, instead of a string with the path you provide an object like this:\njavascript\nvar google = nock('http://www.google.com')\n.get({\n  path:  '/',\n  query: {\n    foo: 'bar',\n    bar: 'foo'\n  }\n});\nthis should also work:\njavascript\nvar google = nock('http://www.google.com')\n.get({\n  path:  '/',\n  query: 'foo=bar&bar=foo'\n});\nCare to give it a go?\n. It's not implemented.  Would appreciate some help here.\n. Fixed by https://github.com/pgte/nock/pull/341\n. Fixed in v0.14.2\n. Thanks, published on v0.14.3\n. Hi Andrea,\nWhat nock version are you using?\nAlso, can you please send some code I can use to reproduce the issue?\nThanks!\n. The request body should be a string or a buffer, not an object.\nIf you have a failing test case (please see the testsdirectory) please reopen this.\nThanks!\n. Published v0.14.4.\n@rudyjahchan thanks for this!\n. It took me some minutes to parse the coffeescript, but the problem is that you're mocking the get for /abc, and then getting /.\nThis code works (JS):\n``` javascript\nvar nock = require('..')\nvar request = require('request')\nscope = nock('https://google.com').\n  get(\"/abc\").\n  reply(200, \"Hey!\")\nrequest({ uri: 'https://google.com/abc' }, function(err, resp, body) {\n  console.log(resp.statusCode, body)\n})\n```\n. Thanks, published v0.15.0.\n. Should be fixed in v0.15.2.\n. Published v0.16.0 to NPM.\nI was a bit reluctant to adding these methods since there are a ton more HTTP methods, but these are fairly common, so I guess it's ok.\n. Ah, I see what you mean. Could you post an issue, and I'll see if I have time for it? Thanks!\n\nPedro\nOn Thursday, February 21, 2013 at 2:21 PM, Andr\u00e9 Rodrigues wrote:\n\nIndeed. You have at least RFC 2616, RFC 2518, RFC 3253, RFC 3648, RFC 3744 and probably a few others.\nMaybe the real solution is to provide a method that takes the verb and use that one when generating recordings. (right now it generates with the verb as function name and the function may not even exist).\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/flatiron/nock/pull/92#issuecomment-13890692).\n. Thanks!\n\n\nPedro\nOn Thursday, February 21, 2013 at 3:39 PM, Andr\u00e9 Rodrigues wrote:\n\n93 (https://github.com/flatiron/nock/issues/93)\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/flatiron/nock/pull/92#issuecomment-13895074).\n. Closing this one, if this is still an issue please reopen.\nThanks!\n. Agree, working on a fix.  \n\nOn Saturday, 30 de March de 2013 at 02:11, Charlie Robbins wrote:\n\n@pgte (https://github.com/pgte) I was able to reproduce this consistently when using utile.mixin. I'm not sure why the keys come back in a non-deterministic order, but nock should be able to work around this imho.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/flatiron/nock/issues/95#issuecomment-15668089).\n. Fixed by 30b8308c66dc595464434f7d90673b45f00d0aab\nLanded in v0.17.0.\n. Landed in v0.17.1\n. OK, gonna make a test for this.\n. Landed in v0.17.2.\n. Nock is just a way to mock external HTTP services, but not at the network level.\n. Haha, I don't think so. ;)\nIt's just that nock works not at the network level.\nIt simply overrides the node core http library and intercepts http requests, simulating them in software as needed if a response is specified.\n\nI could use this technique to emit certain errors, but I think this would be the job of a different module. :)\n. @SocalNick nope, I can't say I do.\n. The problem is that the HTTP method must be in uppercase. The following works for me:\n``` javascript\ntest(\"allow override works (2)\", function(t) {\n  var scope = \n  nock(\"https://httpbin.org\",{allowUnmocked: true}).\n    post(\"/post\").\n    reply(200,\"99problems\");\noptions = {\n    method: \"POST\",\n    uri: \"https://httpbin.org/post\",\n    json: {\n      some: \"data\"\n    }\n  };\nmikealRequest(options, function(err, resp, body) {\n    scope.done();\n    t.end();\n    return console.log(resp.statusCode, body);\n  });\n});\n```\n. Thanks for the report.\nLanded in nock v0.17.3\n. I don't see any imminent issue here, please free to send a pull request if this is important to you :)\n. Published version v0.18.0.\nThanks for the contribution!\n. In understand your case, but I don't think I can change this behavior because I can't distinguish between your case, where you are doing a request for the same host name on the same test and when someone is doing a request on a different test.\nIf I did this, once the user mocks a certain host name, all the future requests would be intercepted, making the behavior of a test dependent on other tests...\n. To reply to that I'll have to explain how nock works.\nWhen an application does an HTTP request, it does that against a global http module, which are not in context with a nock scope, which means we have to setup a global interceptor...\nIf the user does no cleanup (which he doesn't have to) at the begin of a test, there is no way to avoid the problem I referenced...\n. Should be fixed by 3228760f2e7641de2bd15d2bea29425987c4d26a, landed in nock v0.25.0.\nCan you please test?\nThanks for reporting!\n. Duplicate of #112, please track this issue there.\n. I've landed a fix that introduces streams2 compatibility to some degree. It's out on nock v0.25.0.\nCan you please test and see if this issue is solved?\nThanks!\n. I'm going to close this issue, if the problem didn't go away please reopen this.\n. This stack trace looks like it's blowing in your code (/Users/jaridmargolin/opensource/s3-site/test/bucket.js, line 201), not AWS.\n. Can you post your nock mocks so that I can take a look?\n. if it only happens with recording on it's probably recorder-related.\n@jakecraige since you probably already have this code, can you please provide a minimum test where this fails?\n. @jakecraige PR #226 landed on v0.59.0.\n. @jakecraige great, thanks for your feedback!\n. Thanks for the contribution.\nLanded in v0.19.0.\n. Thanks for the contribution.\nLanded on v0.20.0.\n. Fixed by b9321226f84c8241379ac8df9bcb63fb019b7999.\n. Landed on v0.21.0\n. :+1: \nThanks, landed on v0.22.0.\nIt would be nice to have these methods documented, though :)\n. Thanks for the fix, landed on v0.22.1.\n. Strange, this works for me.\nI'm using nock 0.18.2, hyperquest v0.1.7 and node v0.10.12.\nWhat versions are you using?\n. No worries, glad it's sorted out.  \n\nPedro\nOn Monday, 2 de September de 2013 at 17:01, hendrikcech wrote:\n\nOh, apparently one of the node versions between 0.10.3 (which I used) and 0.10.12 solved this problem.\nSorry, I should have updated node prior to reporting a bug. Thank you for your help.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/flatiron/nock/issues/120#issuecomment-23668057).\n. Landed on v0.42.3\n. Thanks for the contribution!\nLanded in v0.24.0.\n. Also, it would be nice to have some tests for this new feature to know if someone breaks it in the future :)\n. Yes, Simon, I think that it makes sense to support unix domain sockets, you may proceed if you wish.\n\nThanks!  \n\nPedro\nOn Thursday, September 19, 2013 at 5:09 PM, serenitus wrote:\n\nThanks for taking a look. I realize that it's currently not the best\nimplementation but I was attempting a light touch to make it work locally\nhere for our needs. If you're willing in principle to accept the feature\nthen I'll tidy it up and of course add some tests!  \nSimon.  \nOn 19 September 2013 08:25, Pedro Teixeira  wrote:  \n\nAlso, it would be nice to have some tests for this new feature to know if\nsomeone breaks it in the future :)  \n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flatiron/nock/pull/122#issuecomment-24747728\n.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/flatiron/nock/pull/122#issuecomment-24751280).\n. Any news on this PR, or should I close it?\n. Hi @serenitus, any news on this? :)\n. As you may guess I don't know you personally, so I have no idea about your plans, you don't need to be so aggressive. I wanted to know about your progress so that I don't keep stalled issues opened.\n\nI'm going to close this issue now, feel free to open a new PR when you are ready.\n. OK, I misunderstood a joke for aggressiveness, damn! :)\n. Unless there is a way to override this on the Dropbox API client, I don't see how you can use nock to test it.\nAlso, if you're not testing the Dropbox client, maybe you should consider injecting a mock dropbox client.\n. I think the current code should be able to support you replying with a stream instead of a body.\nIf not, pull-requests are welcome! :)\n. Thanks for reporting this.\nIf you're still interested in that I debug this issue can you please post a failing test case here, the simplest possible?\nThanks!\n. LGTM, thanks!\nLanded in v0.23.0.\n. I don't have this feature planned, but I accept tested pull-requests  :)\n. It's not, since websockets are conversational and don't fit the flow of nock.\nThat sould be the target of a whole new module.\n. Fix landed on v0.24.2.\n. Yeah, but it breaks node API doing so, hence the \"bad behaving\" :)\n. Hmmm...so that I get a feeling of what you are thinking, what new syntax would you propose?\n. This generally sounds nice, but I don't have the time it would take to implement this feature.\nIf anyone wants to grab this, be my guest...\n. On a 2nd thought, this is an interesting feature, but belongs on it's own module. Closing.\n. Hi @wangyuzju, can you please provide the simplest test case you can come up with that fails ( and preferably add it to the end of tests/test_intercept.js)?\nThanks! :)\n. Closing this one because of lack of feedback.\n. Thanks!\nLanded on v0.26.0.\n. Thanks, landed on v0.27.0.\n. The workflow with nock would be to somehow save the request and response patterns, and, having that fixed in nock, test the client against those fixed patterns.\nWhat you want here sounds like a dynamic HTTP server like express or restify that acts locally.\nAm I looking at this wrong? What would be the benefits of using nock versus using an HTTP server like one of those mentioned?\n. I don't think this makes much sense in nock.\nI'm closing this one. @jskulski please reopen if you have anything to refute.\n. @mkantor replying with a function is already supported.\nI'm not against path filtering with a regexp, we already do that for headers and request body.\nIf you or anyone else is willing to submit a PR for this, I'm all ears.\n. @justincy gotcha. Right now, matching is string-based. What I think you're asking then is to implement a router. This would be a big change to nock.\nAnyway, as I said, I'd be glad to review a PR with this feature.\n. Hmmm... nock is not meant to simulate the network, it's something to mock fixed HTTP-based dependencies.\nDifferent network conditions originate different errors at different times, it would be a nightmare to replicate and maintain properly.\n. Thanks for the report!\nLanded in v0.27.1.\n. @spenceralger thanks!\nPublished in v0.27.1.\n. landed on v0.27.2.\n@svnlto added you to npm authors\n. Closing.\n@trym please reopen if still not solved for you.\n. Closing this one, @NodeGuy please reopen if you can provide any feedback.\n. @gajus this is the wrong syntax for specifying reply headers.\nPlease see the docs for the proper syntax.\nThis test works for me:\n``` javascript\n'use strict';\nvar assert = require('assert');\nvar test    = require('tap').test;\nvar mikealRequest = require('request');\nvar nock    = require('../');\ntest(\"follows refirects\", function(t) {\n  nock('http://redirecter.com')\n    .get('/YourAccount')\n    .reply(302, undefined, {\n        'Location': 'http://redirecter.com/Login'\n    })\n    .get('/Login')\n    .reply(200, 'Here is the login page');\nmikealRequest('http://redirecter.com/YourAccount', function(err, res, body) {\n    if (err) {\n      throw err;\n    }\nassert.equal(res.statusCode, 200);\n\nassert.equal(body, 'Here is the login page');\nt.end();\n\n});\n});\n```\n. Nock depends on Node http client implementation, but theoretically It would be possible to detect browser and use an alternative implementation.\nPR welcome :)\n. It uses the browserify http client request, which wraps XHR.\n@vvo If you try it with browsererify and it doesn't work, please reopen this.\n. Just published v2.18.0-alpha.1 targetting browserify support.\nTesting appreciated.\n. fs fixes have gone into 2.18.2. Care to try it now?\n. @hyphenbash @miazoom Are you sure that nock is being loaded by the browser?\n. @hyphenbash at least from version 3.0 onwards it should be compatible with browsers (even though the automated tests don't run in a real browser.\nDid you try with latest?\n. @hyphenbash ha, I've read the code of isomorphic-fetch. In the browser it uses the native fetch (or a polyfill), so it's not catched by nock.\n. related: #409 \n. @miazoom yes, nock can catch ieomorphic-fetch because when it runs in node it uses the node native HTTP client.\nI'm afraid I can't say the same for the browser...\n. @austinmao looks like a warning only, since the require is in a try-catch block (https://github.com/pgte/nock/blob/master/lib/scope.js#L17 ).\nCan you confirm  that?\n. @petrjoachim Thanks!\nlanded on v0.27.3.\n. Landed on v0.28.1.\nThanks!\n. landed on v0.36.1\n. Fixed by https://github.com/pgte/nock/pull/161\n. It looks like your filteringPath function should return /v1/accounts/1234/devices instead of /v1/account/1/devices.\n@rjbordon please reopen if still need help.\n. Landed on v0.28.0.\nThanks!\n. @danjenkins Thanks!\n. @keyvanfatehi the tests for https://github.com/pgte/nock/pull/188 don't pass.\nAnyway, in master the following test passes:\n``` javascript\ntest('mach headers and done', function(t) {\n  scope = nock('http://what.the.fuck', {\n    reqheaders: {\n      \"X-Auth-Token\": \"authtoken\",\n      \"X-App-Token\": \"apptoken\"\n    }\n  })\n  .post('/resource')\n  .reply(200, { status: \"ok\" });\nmikealRequest({\n    method: 'POST',\n    uri: 'http://what.the.fuck/resource',\n    headers: {\n      \"X-Auth-Token\": \"authtoken\",\n      \"X-App-Token\": \"apptoken\"\n    }\n  }, function(err, res, body) {\n  t.type(err, 'null');\n\n  scope.done();\n\n  t.equal(res.statusCode, 200);\n  t.end();\n}\n\n);\n})\n```\n(place this at the end of tests/test_intercept.js and run:\nbash\n$ node tests/test_intercept\n@keyvanfatehi can you make the test case fail so that we can control that what you need gets fixed?\nThanks!\n. oops, sorry for the vernacular on the host name, you can remove that from the test case if you will :)\n. Thanks for the report, fix landed on v0.33.0.\n. @JohnDMathis not clear what you mean, so can you please provide the simplest failing test case code you can devise and open a separate issue? Thanks!\n. OK, just leave the test here.\nIt can be mocha, I'll translate to node-tap after.\n. It's a different issue, I'm going to create a new separate issue to track this.\n. Issue and fix here: https://github.com/pgte/nock/issues/204\n. Thanks, landed on v0.28.3.\n. @ierceg thanks for this great PR!\nlanded on v0.29.0\n@ierceg would you want to be added to the repo maintainers?\n. @ierceg added you, thanks!\n. Please reopen if still persists using latest.\n. Landed on v0.29.1\n. I cannot reproduce this.\nThe dependency is here\nCan you please send me an output?\n. Landed on v0.29.2\n. Landed on v0.30.0.\n. @ierceg that was an impressive sprint :)\n. @ierceg thanks!\nLanded on v0.31.0\n. Thanks, landed on v0.31.1.\n. Thanks, landed on v0.31.2.\n. Thanks, landed on v0.31.3.\n. Thanks, landed on v0.31.3.\n. Thanks, landed on v0.31.3.\n. Thanks! Landed on v0.32.0.\n. @bcoe thanks!\nLanded on v0.32.1\n. Fixed in 09f9289ef878c0db5e9951399af9f928a8748f19\n. I think this is fixed in latest releases.\n@pirxpilot if not please reopen.\n. @EndangeredMassa right now I'm using latest nock and having a hard time reproducing any failure.\nI've added this test to the test suite:\nhttps://github.com/pgte/nock/blob/5831b5cc6a82ef9e25b0c06502ad644a01230a5d/tests/test_intercept.js#L922-L947\nCan you please try to make it fail?\n(if you fork and clone the nock repo locally you can execute the tests by doing:\nbash\n$ node tests/test_intercept.js\n)\n. Thanks, I'll take it from here!  \n\nPedro Teixeira\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Thursday, 7 de August de 2014 at 17:11, Sean Massa wrote:\n\nThe test uses \"content-type\" instead of \"content-encoding\". If you switch it, you'll see:\nevents.js:72 throw er; // Unhandled 'error' event ^ Error: content-encoded response must be an array of binary buffers and not object at RequestOverrider.end (/home/sean/source/nock/lib/request_overrider.js:262:21) at OverriddenClientRequest.RequestOverrider.req.end (/home/sean/source/nock/lib/request_overrider.js:145:7) at Test. (/home/sean/source/nock/tests/test_intercept.js:949:7) at Test.EventEmitter.emit (events.js:117:20) at Test.emit (/home/sean/source/nock/node_modules/tap/lib/tap-test.js:104:8) at GlobalHarness.Harness.process (/home/sean/source/nock/node_modules/tap/lib/tap-harness.js:87:13) at process._tickDomainCallback (node.js:459:13) ok 88 response should match not ok 89 tests/test_intercept.js --- exit: 8 stderr: | events.js:72 throw er; // Unhandled 'error' event ^ Error: content-encoded response must be an array of binary buffers and not object at RequestOverrider.end (/home/sean/source/nock/lib/request_overrider.js:262:21) at OverriddenClientRequest.RequestOverrider.req.end (/home/sean/source/nock/lib/request_overrider.js:145:7) at Test. (/home/sean/source/nock/tests/test_intercept.js:949:7) at Test.EventEmitter.emit (events.js:117:20) at Test.emit (/home/sean/source/nock/node_modules/tap/lib/tap-test.js:104:8) at GlobalHarness.Harness.process (/home/sean/source/nock/node_modules/tap/lib/tap-harness.js:87:13) at process._tickDomainCallback (node.js:459:13) command: \"/home/sean/.nvm/v0.10.26/bin/node test_intercept.js\" ...  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/pgte/nock/issues/182#issuecomment-51493897).\n. Fix landed on v0.44.1.\n. I'm having trouble reproducing this error.\n@busticated Can you create a simple test case that fails?\n. @busticated thanks for the test case!\nFix landed on v0.32.3.\n. This looks like this is a problem with aws-sdk.\nI've posted a possible fix here:\nhttps://github.com/aws/aws-sdk-js/pull/286\nFeel free to test this using my aws-sdk branch locally linked:\n\nhttps://github.com/pgte/aws-sdk-js/tree/fixharderrorstateslookup\n. Landed on v0.32.3\n. This is a duplicate of #183, should be solved on v0.32.3.\nClosing.\n. Tests don't pass, see my last comment on the issue\n. Thanks, landed on v0.34.0.\n. thanks, landed on v0.34.1\n. You can have more insight on the matches that are failing by adding a .log like this:\njavascript\nnock('https://my.domain.com')\n    .log(console.log)\n    .post('/some/path')\n    .reply(200, 'some content');\nPlease reopen this if you still can't find a cause.\n. This is an interesting feature. Right now the body matching logic is here: https://github.com/pgte/nock/blob/master/lib/match_body.js \nI think a pull request where this part is refactored to support multiple matchers  + a multipart body matcher would be the work that is needed to support this. :)\n. @alanclarke what version of nock are you using?\n. @alanclarke I've added this test in this commit: https://github.com/pgte/nock/commit/944afe38ab265936eb92b6af711fa60e6c3f44b4\nand it's apparently passing in my local machine and Travis.\nCan you please checkout the latest nock, npm install and run\nbash\n$ node tests/test_intercept\nAnd tell me the results.\nIf the test succeeds, can you try to make the test fail in isolation?\n. Ah, I think I found it.\nnock.delay delays the response body, but not the headers. If you want to delay everything, use nock.delayConnection.\nPlease tell me if that works for you.\nI've updated the nock test accordingly. \n. Good point, I agree, it's confusing.\nnock.delay should delay the whole thing, while nock.delayBody should delay only the body.\nAny objection @danjenkins @spenceralger @ierceg @svnlto ?\n. @spenceralger I don't think there's a difference between connection and headers.\nI think that the connection name is misleading. We're not talking about a TCP connection, we're talking about the response that triggers a response event on the client request. We may be simulating that we can connect or not, but what matters happens at the HTTP level: whether we get the response headers or not.\nBased on what @spenceralger  what I propose is this API:\n``` javascript\n// delay the whole headers + body response 500ms\nnock.delay(500)\n/// reply immediately, but just delay the response body\nnock.delayBody(500);\n/// never respond with body:\nnock.delayBody(Infinity);\n/// delay both response headers and body\nnock.delay({headers: 500, body: 1000});\n// or\nnock.delay(500).delayBody(1000);\n```\n@svnlto @ierceg @alanclarke @spenceralger yay or nay?\n. Own issue here: https://github.com/pgte/nock/issues/195\n. Landed on v0.36.2\n. It's a feature, not a bug: https://github.com/pgte/nock#read-this\nYou can explicitly choose to persist the interceptors for a given scope:\nhttps://github.com/pgte/nock#persist\n. I agree, the headers recording default to false.\n. Landed on v0.35.0\n. Thanks, landed on v0.36.0\n. Thanks, landed on v0.36.0\n. The purpose of Nock is to mock external HTTP services by intercepting requests and matching them.\nHere you're proposing something that is confusing to me: mixing a mock match (.get('/some_path')) with an expectation.\nI understand what you want here, just not sure that Nock or this API is the best way to achieve this...\nInputs @svnlto @ierceg ?\n. Fix landed on v0.37.0.\n. Fix landed in v0.38.0.\n. Thanks, landed on v0.38.0\n. Initially reported here\n. Fix landed on v0.39.0\n. thanks, landed on v0.40.0\n. Thanks, landed on v0.41.0.\n. As @grncdr said, returning from a setTimeout doesn't work in JS.\n@yogananth if you have a test case with returning a stream that doesn't work please open another issue with the example code and I'll take a look.\n. Fixed in v0.42.0\n. @faiqyou please test with latest, should be fixed.\nOtherwise, please reopen.\nThanks for reporting this.\n. By reading this issue and this line of code perhaps you may be hitting an elastic search protocol error, doesn't look like nock is misbehaving here.\nWould love to help you, but I don't know elasticsearch.\nI suggest that you record the elasticsearch session and then try playing it back with nock...\nAlso, you can recreate a simple test case where nock is misbehaving, please reopen this.\nThanks!\n. Thanks for the correction!\n. @buildmaster can you please post a stack trace here?\n. Had a try but can't seam to figure out what's the problem.\n@tinogomes perhaps you can help out here?\n. Tested with latest version of superagent and nock, seams to be working.\nClosing.\n. I believe that a proxy is something handled at the request level, and since nock works at the node client HTTP level, I don't think we can do anything differently.\n@aoberoi What would you suggest?\n. This can't be handled at the Nock level, you would have to mock the request package.\n. The purpose of nock is to mock HTTP client calls on Node.\nThere are probably other packages to do what you desire.\n. Disagree.\nYou need to implement an HTTP server, not intercept client HTTP calls, totally different cases :)\nI think what you need is an HTTP Server with a pretty DSL.\n. It's a very interesting project, but doesn't fit nock, as nock is based on overriding the HTTP client implementation.\nOn Tuesday, 15 de July de 2014 at 13:57, Elnur Abdurrakhimov wrote:\n\nTo be more specific, I'm testing Angular apps with Protractor (/angular/protractor). The current approach with (mocking $httpBackend)[http://product.moveline.com/testing-angular-apps-end-to-end-with-protractor.html] sucks because the mock module is being stringified and executed in the browser by WebDriverJS. That sucks because the test code and the mock code run in two different dimensions and can not interact in any way.\nSince Protractor is a Node program and tests are being written in the Node environment, I figured it makes sense to mock the backend and set expectations on it in Node itself. That's how I found nock. I was very excited to put it to use and get rid of $httpBackend mocks only to find out that I can't run nock as a server because it just hacks into Node HTTP internals and Angular apps are run in browsers and have nothing to do with Node. Then I found shmock, but it's very feature poor and doesn't seem to be maintained well, even though I was able to start it as a standalone server during a test. If only it had nock's API, it would be awesome. Or \u2014 since nock is much more feature rich \u2014 it would make sense to just add the ability to run as a server to nock.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/pgte/nock/issues/213#issuecomment-49027251).\n. Maybe check out hock:\nhttps://github.com/mmalecki/hock\n\nOn Tuesday, 15 de July de 2014 at 13:57, Elnur Abdurrakhimov wrote:\n\nTo be more specific, I'm testing Angular apps with Protractor (/angular/protractor). The current approach with (mocking $httpBackend)[http://product.moveline.com/testing-angular-apps-end-to-end-with-protractor.html] sucks because the mock module is being stringified and executed in the browser by WebDriverJS. That sucks because the test code and the mock code run in two different dimensions and can not interact in any way.\nSince Protractor is a Node program and tests are being written in the Node environment, I figured it makes sense to mock the backend and set expectations on it in Node itself. That's how I found nock. I was very excited to put it to use and get rid of $httpBackend mocks only to find out that I can't run nock as a server because it just hacks into Node HTTP internals and Angular apps are run in browsers and have nothing to do with Node. Then I found shmock, but it's very feature poor and doesn't seem to be maintained well, even though I was able to start it as a standalone server during a test. If only it had nock's API, it would be awesome. Or \u2014 since nock is much more feature rich \u2014 it would make sense to just add the ability to run as a server to nock.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/pgte/nock/issues/213#issuecomment-49027251).\n. I don't know about other maintainers, but since I'm not actively developing nock, just maitaining, so I can't really justify the time.\nI don't know about other maintainers, but I accept PRs. :)\n. Using nock you can set expectations on the request body using nock(host).post(url, expectedBody).\nYou can also match request headers, using .matchHeader(header, value).\nThen you can use .done() to assert that all expected requests were performed.\n\nI think this covers your cases, please reopen if it doesn't.\n. Fixed, landed in v0.42.2.\n. Thanks for reporting!\nFix landed on v0.43.0.\n. The socket support is limited, gonna take a look at what I can do.\n. Fix landed on v0.43.1.\n. Landed in v0.44.0.\n@claudiopetrini can you check if this solved your issue?\n. Nock is not an HTTP server, but an HTTP client mock.\nFor an HTTP server with a similar API you can check out hock.\n. @mcmillan thanks!\nLanded in v0.44.2.\n. @beatfactor thanks for the contribution! \nCan you please provide the tests and the documentation changes?\n. Can you please try\nbash\n$ node tests/test_intercept\n. Thanks!\nLanded on v0.44.3.\n. @growlypants Good catch, thanks for the contribution!\nLanded on v0.45.0.\n. @CodeFred Perhaps the db callback is not being called because you're not respecting some protocol on the nock response.\nDid you try recording the live request data?\n. @CodeFred ok, thanks, I'll check this out\n. @CodeFred it works for me with this example:\nhttps://github.com/pgte/nock/blob/master/tests/test_aws_dynamo.js\nIf you omit the secret access key (here), the sdk does not call the callback (which looks like an aws-sdk bug to me).\nCan you please test this (current master( and try to make this break? If you can, please reopen this.\n. @miksago thanks!\nLanded on v0.46.0.\n. @mhchen good catch, thanks!\n. @BAKFR thanks, good catch!\nFix landed on v0.47.0.\n. @ibash Thanks for the fix!\nLanded on v0.48.0.\n. I don't know which library you're using to make the request, but I have here a test using mikeal/request:\n``` javascript\nvar nock = require('../');\nvar request = require('request');\nvar test    = require('tap').test;\ntest('works', function(t) {\n  var productMock = {\n    name: 'product mock'\n  };\nnock('http://services-amb')\n        .get('/product2/?groups=284182%2C%2C284172%2C%2C284174')\n        .reply(200, productMock);\nrequest({\n    uri: 'http://services-amb/product2/',\n    qs: {'groups': '284182,,284172,,284174'}},\nfunction(err, res, body) {\n  if (err) throw err;\n  t.equal(res.statusCode, 200);\n  t.end();\n});\n\n});\n```\nand it works. Notice the escaping of the commas in the URLs. Otherwise, if the URLs didn't match, there would be a nock error being thrown.\n@lucasfeliciano If you could give me a test case that fails (perhaps modifying this test that I'm running under nock/tests) that would be great!\n. Thanks @ierceg !\nThe build is failing on node v.0.11 on travis (and also on my machine). Can you check?\n. @kelaban thanks for the contribution!\n@ierceg thanks for reviewing this!\npublished on v0.54.0\n. @ierceg added you as a maintainer of nock. :)\n. I don't see why you would need timeouts in tests. From the cases that I've used nock, I always got callbacks in my app for when an operation was complete, there was no need for timeouts.\nCan you please post an example?\n. Would welcome PR with this :)\n. Fixed by 19bb1bb752fb914464219bb44a6a472a763ac12a\nLanded on v1.2.1\n. @dscape thanks!\nlanded on v0.48.1.\n. you're right, apparently 365 tests are not enough, opened #237.\n. Fixed by https://github.com/pgte/nock/pull/285, 6f0ad5f7527fce09434c8102464ace10601997b5 and 20b99e2d972c746155a3423abc7f00b582a4698d\n. I'm open to a PR with this :)\n. @xavierchow thanks for correcting this!\n. @pose thanks!\nFix landed on v0.48.2.\n. Glad to accept PR with this fixed.\n. Problem on dependency: https://github.com/request/caseless/pull/13\n. Fixed in nock tests by 99b0367346190e7c78527f9670c870e2e9dd6004\n. @jrpruit1 well spotted, thanks!\n. @enykeev thanks for the contribution!\n. Landed on v0.50.0\n. @defunctzombie sorry for the super late reply.\nA match function is now supported in nock, please check last part of https://github.com/pgte/nock#specifying-request-body\n. Added to README for clarification: edcbb5850011ffa29b88e0d07bca24fb83c34913\n. @capaj thanks!\nLanded on v0.51.0\n. @arturmkrtchyan thanks!\n. @wheresrhys if this didn't solve your issue, please reopen.\n. That would be nice. Perhaps involving argument sniffing to detect whether function is or not async?\nAnyway, would be open to a tested PR for this one :)\n. Thanks, landed on v0.52.0.\n. @MaerF0x0 thanks!\nlanded in v0.52.1\n. @ardumont thanks!\nlanded in v0.52.1\n. @UndeadBaneGitHub thanks!\nlanded on v0.52.2.\n. @carlansley thanks for the test case!\nFix landed on v0.52.3.\n. Nock itself is not making HTTP requests, it avoids them.\nPerhaps your lib is making them for you?\nAlso, perhaps try the latest version where, by default, network requests are disabled.\nIf you find that this is the fault of nock, please reopen this or another issue.\n. @carlansley thanks for the report, I think I've fixed recursion in streams now:\nfixed by 67805e7c35820fb561673b4ad1e48f89d4fe1e31\npublished on v0.55.0\n. @rehia why coherce the string into a regexp? why not support spec as regexp?\nThis may break previous behavior with special characters matching, no?\n. @rehia regular expressions have a lot of special characters like \"[\", \"]\", \"{\", \"}\", that users may want to use for literal matching. Wouldn't this break using your changes?\nI'm all for allowing regular expressions, as long as they are intended regular expressions like:\njavascript\nvar scope = nock('http://www.google.com')\n    .post('/echo', /key=v.?l/)\n    .reply(200, function(uri, body) {\n        return 'OK !';\n    });\nWouldn't you agree?\n. landed on v0.53.0.\n@rehia thanks for the contribution!\n. @DavidTanner thanks for the fix!\nPublished on v0.56.0.\n. Currently we don't support that, but would be open for a PR :)\n. LGTM\n@zeevl thanks for the PR!\nPublished on v0.57.0.\n. @dominicbarnes That would be nice, I would be open to accepting a tested PR with that :)\n. I'm inclined of making this change and doing a major release of nock (1.0, finally).\n@ierceg @svnlto thoughts?\n. Pushed this to master. Care to take this for a spin?\n. Landed on v1.0.0.\n. @dominicbarnes looks good to me. Also tests are passing on Travis and on my end.\nOne thing before I merge though: could you document these new methods on the README?\n. @dominicbarnes thanks!\nPublished on v0.58.0.\n. landed on v0.59.0\n. @EasyHard thanks for the fix!\nLanded in v0.59.1.\n. Once you mock a server, any unmatched requests yield an error.\nOtherwise, it would make it very hard to detect what's really going once a hostname is not mocked any more for some reason...\n. @Bjvanminnen agree.\nCreated #270 to clarify this.\n. I believe this is fixed via #264 \n. @ierceg tips?\n. @jviotti Looks like a bug in request or readable-stream.\nAlso, it looks like you're perhaps using an outdated version of either.\nIf possible, can you update the versions, and if it breaks again, post the start trace here again?\n. This is totally strange, looks like you're using a module mocking library or something similar.\nThat or it's a bug in mocha. I'm closing this one since it's to me obvious that it's not a problem with Nock.\nPlease reopen if you find it isn't so. :)\n. @raine I added this test and I couldn't make it fail:\nhttps://github.com/pgte/nock/blob/50912da57c881fd5fbb1a824f9514ea7cc3b7496/tests/test_url_encoding.js\nIs it possible that some library you're using transforms the URL before it reaches the native Node HTTP client?\nIf not, can you make some change to the test that makes it fail?\n. Related: #82 \n. request already supports a qs argument our of the box, no need to use qs directly.\nAnyway, closing this as it's not a Nock problem.\n. The point is that you wouldn't have to encode the URL if a lib didn't encode it (unnecessarily since those are valid characters).\nWhat do you think nock could do to help?\n. @pconerly thanks!\nLanded on v1.1.0.\n. I've been meaning to do proper release management. Was thining about using semantinc-release.\n@ierceg @svnlto what do you think?\n. for now we have a hand-made changelog.\nCreated #287 to automate this.\n. @PavelPolyakov I'm closing this for now, please reopen once you have feedback.\n. I'm not sure I understand the question. Perhaps @kelaban can chime in?\n. Other than this, it's looking good!\n(Look out for the failing tests).\n. ha, I missed your comment on the failing test. Let me check this first.\n. Regarding the abortion, I think it shouldn't emit an error.\nI think that the appropriate behaviour is similar to the way the real request.abort is implemented:\nhttps://github.com/iojs/io.js/blob/v1.x/lib/_http_client.js#L168-L194\n. Yes it does!\n. @brettporter Thanks!\nlanded on v1.2.0\n. yeah, we don't support an asynchronous handler. I would love a PR with that :).\nBasically nock would have to check function arguments length to see if the function would or not be asynchronous and provide a callback when it is.\n. @Natim thanks!\nLanded on v1.2.0\n. @mlolson thanks!\nLanded on v1.2.0\n. @justincy super useful, thanks!\n. @benurb thanks!\nFix landed on v1.2.1.\n. You can now check the updated change log here: https://github.com/pgte/nock/blob/master/CHANGELOG.md\n. @gajus I'm confused by your title. Cookies always use the same headers...\nhttps://en.wikipedia.org/wiki/HTTP_cookie\n@gajus Please reopen once you have feedback.\n. the reply order is defined by the sequence.\nwhen you setup an interceptor and that interceptor is used, it's removed from the list.\nYou can check the documentation on that here:\nhttps://github.com/pgte/nock#read-this-1---about-interceptors\nIf this is still a problem for you then please reopen this.\n. It all seams to work as expected to me. The following script works as expected:\n``` js\nvar nock = require('nock');\nvar request = require('request');\nvar validZips = [1,2,3];\nnock('http://zzzzz.abc')\n// .persist()\n.post('/foo', function (body) {\n  var zip = body.address.postalCode;\n  zip = zip.slice(0, 5);\n  zip = parseInt(zip, 10);\nreturn validZips.indexOf(zip) === -1;\n})\n.reply(422, { message: 'zip invalid' })\n.post('/foo', function (body) {\n    return true;\n})\n.reply(200, { message: 'line 1 invalid' });\nrequest.post({\n  url: 'http://zzzzz.abc/foo',\n  json: {\n    address: {\n      postalCode: '1',\n      line1: 'line one'\n    }\n  }\n}, function(err, res, body) {\n  if (err) throw err;\n  console.log('response status code was: ', res.statusCode);\n});\n```\nIf I run this, this yields:\nbash\nresponse status code was:  200\nAnd if I change the postal code to an invalid one, say \"4\", it yields:\nbash\nresponse status code was:  422\n. Hmmm... the way that it works is by trying to match all unused matchers. When a matcher matches, it gets executed. If not, it tries to match the next. \nI'm not sure what I could do to help you...\n. Oh, I think I understand what you want.\nIs it possible for you to try using nock.restore() after you get a response on the client?\n. @arb Hmmm...\nI think I have 2 alternatives for solving this:\na) Instead of hard-coding the status code, defining a function that returns the proper status code\nb) Instead of having 2 separate functions, one for the status code and one for the body, just one function that returns [status, body].\nIt all boils down into turning nock into a dynamic \"server\". Would this solve your case?\n. Addressed in #296\n. I've added a test just for this and I see no problem happening:\nhttps://github.com/pgte/nock/commit/0874e88788216b149655d4496a9e2043279edb52\nCan you try to create a test that fails?\n. @arb please reopen if you can reproduce this with a failing test.\n. @jfromaniello thanks for the contribution!\nLanded on v1.3.0.\n. My bad, forgot to git push --tags. Should be fixed now.\n. Landed on v1.5.0\n. @douglaseggleton thanks!\nLanded on v1.6.0.\n. Nock doesn't interpret the query string (yet).\nI suggest that you use path-filtering to solve this.\nAny issue with that please reopen this.\n. Ha, sorry, you mean you don't want to record some data, hmmm...\nAny ideas @kelaban ?\n. @kelaban want to propose an API?\n. I think I spotted the problem in your gist:\n``` js\nvar nockBack = require(\"nock\").back;\nvar http = require(\"http\");\nnockBack.fixtures = __dirname + \"/fixtures\";\nnockBack.setMode(\"record\");\ndescribe('x', function() {\n  it('y', function(done) {\n    nockBack('whatever.json', function(nockDone) {\n      http.get(\"http://tablexi.com\", function() {\n        console.log(arguments);\n      });\n      nockDone();\n      done();\n    });\n  });\n});\n```\nYou're calling nockDone() too soon, and the fixture gets recorder empty. You have to let the request completely finish before you do that.\nHere's an example of how to do it:\n``` js\nvar test     = require('tap').test;\nvar nock = require('../');\nvar nockBack = nock.back;\nvar http = require(\"http\");\nnock.enableNetConnect();\nnockBack.fixtures = __dirname + \"/fixtures\";\nnockBack.setMode(\"record\");\ntest('recording', function(t) {\n  nockBack('recording_test.json', function(nockDone) {\n    http.get('http://tablexi.com', function(res) {\n      res.once('end', function() {\n        nockDone();\n        t.end();\n      });\n    });\n  });\n});\n``\n```\n. Fix landed in v1.6.1.\n. Since version 1.0, you have to explicitely allow net connect to allow your app to send HTTP requests into the network when a mock is not present.\nTry doing nock.enableNetConnect();  before.\n. Fixed in a86019c5104c86d548cce66ca7d793f90a5344ca\n. @poluyanov you can now, using nock master. Instructions here:\nhttps://github.com/pgte/nock#access-original-request-and-headers\n. Landed on v1.7.0\n. Thanks for reporting this.\nFix landed on v1.7.1.\n. Coherced into number.\nFix landed on v1.7.1.\n. If they\u2019re done inside the same process, they\u2019re intercepted.\nIf the AP1 is not on the same process you\u2019re testing from, then nock won\u2019t intercept them.\n-Pedro\nOn Thursday 30 April 2015 at 14:45, Dario Spadoni wrote:\n\nHello\nThis is maybe a silly question but...I'm writing test for my micro services architecture: basically from the tests I call some endpoint from Api1 which in turns internally calls some end point from Api2. Can nock intercept the calls made from Api1 to Api2 (of course by setting it properly) or it can only intercept calls to Api1?  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/pgte/nock/issues/309).\n. @dariospadoni closing this for now. Please reopen once you have feedback.\n. @ksheedlo thanks!\n\nLanded on v1.8.0.\n. @ghiden thanks for the contribution.\nLanded on v1.9.0.\n. @jagoda thanks, landed on v2.0.0.\n. @RomanGotsiy thanks, landed on v2.0.1.\n. @jagoda thanks!\nlanded in v2.2.0.\n. Any error on the body stream is being propagated to the response by this:\nhttps://github.com/pgte/nock/blob/e42028ed82eac582fc73a7cc7c6401a9fdbf51b0/lib/request_overrider.js#L375-L377\n@yeahoffline Do you have a snippet or a piece of code where this fails?\n. See #331 \n. @ierceg LGTM, thanks!\nfix landed in v2.1.0.\n. Documentation fixed by 8ae2f6494f73e14d20417fe44d6f077bcbfc6470\n. I think the interceptor spec is missing a path: '/' component. Can you try it?\n. Closing, please reopen if this doesn't work.\n. @leedm777 thanks!\nLanded on v2.3.0.\n. Thanks! landed on v.2.4.0\n. Can't reproduce this with latest version.\n@afeld what version of nock are you using?\n. @afeld sorry, you were right.\nFixed.\n. I\u2019m not sure, since I never encountered the need for requiring nock and not setting up a mock.\nAny thoughts @ierceg @svnlto ?\n. @ierceg I'm not questioning the \"disabled by default\" feature.\nThe issue is that, if you require nock but don't set up a mock, normal unmocked HTTP requests still happen.\n. @ssbrewster It can. I don't know foam well, but I guess you have to set the response content type header (see https://github.com/pgte/nock#specifying-reply-headers ) so that the client can parse the XML correctly.\n@ssbrewster please reopen this if this doesn't work.\n. To use .times you will have to use a later version.\n. A similar example of this is working for me against latest master.\n@LAD500 What version of node and nock are you using?\n. I've created a trimmed-down version of the test. Could you please try running this?\n``` js\nvar nock = require('nock');\nvar assert = require('assert');\nvar http = require('http');\nvar reqBody = {data:{message:\"hello\"}};\nnock(\"http://api.songkick.com\")\n  .get('/api/3.0/search/venues.json?query=brudenell&apikey=XXXkeyXXX')\n  .reply(200, reqBody);\nvar req = http.get('http://api.songkick.com/api/3.0/search/venues.json?query=brudenell&apikey=XXXkeyXXX', function(res) {\n  var body = '';\nres.on('data', function(d) {\n    body += d;\n  });\nres.on('end', function() {\n    assert.deepEqual(JSON.parse(body), reqBody);\n    console.log('all done');\n  });\n});\n```\n. @LAD500 I was able to reproduce this in Node v0.10.26.\nGoing to dig in.\n. Also, this problem does not happen in node >= v0.10.27.\n. Fixed landed on v2.4.1.\n. @ierceg I agree with you.\nTo be able to answer isDone(), we would need to track whether there has been a call for a persisted mock or not.\n. Hi @dkenzox can you tell me which version of Node and Nock you're using?\n. @ierceg LGTM, but needs rebasing from master.\n. Landed in v2.5.0\n. @matiassingers Osmosis shouldn't be checking private properties at all (much less two levels of those), but the general policy we've been using on Nock is to broaden the HTTP client support (and include them in the test suite) as long as it doesn't require introducing too much logic.\n. Landed on v2.6.0.\n. @kelaban any comment?\n. @black-perl I don't know if I follow.\nCould you please provide a failing test case?\n. Closing this one for lack of feedback.\n. Hi, can you please tell me:\n- which version of nock you're using\n- which version of node you're using\nCan you also paste here a small code example that I can run on my side to test this?\n. I replicated your code (with a minor fix because options must be defined in account.js and nock must be required on account-spec.js), and can't replicate your problem:\n```\n$ node -v\nv0.12.0\n$ node account-spec.js\n{ '0': 'account created' }\n```\n. I don't know enough Jasmine to be able to help you.\nI'm closing this, please reopen if you find a problem on nock.\n. @lambertsteven thanks!\nLanded on v2.7.0.\n. I agree with @ndhoule. Also, the docs say that query(true) mocks the entire url regardless of the passed query string. In my understanding, no query string also fits these cases.\nFixed by 5eb5e2e7dc950c20f65b26fd6fed50dacec27cdf.\nAs this is a potentially breaking change I released this under v3.0.0.\n. nock works only on node, using synchronous require.\n. @sahat thank you!\n. PR is welcome\n. @jezenielzapanta thank you!\n. PR is welcome\n. @dodev thanks!\nLanded on v2.8.0.\n. @lambertsteven I think the later is preferred since it yields more maintainable code.\n. @lambertsteven thanks!\nLanded on v2.9.0.\n. .get() takes a path, not an entire URL.\n. Given the request you're doing, http://proxy.com/http://example.com/ is not the path you will get.\n. I did, and I don't think that's how proxies work.\n. @laggyluke thanks, good catch!\nLanded on v2.9.1.\n. @clicktravel-martindimitrov can you provide a log of the test error if you have one?\n. @pwmckenna could you please check if v2.11.0 fixes this?\n. @clicktravel-martindimitrov some debugging output on a failed run would be useful. That or a failing test case.\nYou can enable debug logs using the DEBUG environment variable:\n$ DEBUG=nock:* node tests/test.js\n. @clicktravel-martindimitrov looks like you may have some sort of race condition there.\nIf you still it's a nock problem please reopen this.\n. @mtt87 if it's part of the public API then there's no reason for Nock not to include it.\nPR is welcome :)\n. Fix landed on v2.10.0\n. I picked some of your fixes into 080703b1a923d867dccdb1d5ab911410b367cf38 and made them pass the tests.\n. shouldn't be an issue since mocked requests don't even reach the agent.\nOTOH, if there are any spdy-specific events emitted in the request or response objects, that will probably fail.\n. This is because sync-request spawns a worker process just to do the request (basically it just exploits node's new child_process.spawnSync, which should never be used in callbacks on a server).\n. https://github.com/ForbesLindesay/sync-request/blob/362d8b5508aed4ce7f8005dae823b4c1308721a5/index.js#L19\n. I think you're missing the path in ,post(). Should be:\njs\nnock('http://localhost:8003').post('/').reply(200, {});\n. @calidion this is not how you specify request headers.\nRead here: https://github.com/pgte/nock#specifying-request-headers\n. @calidion what error are you getting?\n. Closing this for lack of feedback.\n. @kelaban any comment?\n. @pwmckenna go ahead if you will, I'll review a PR.\n. Fixed by b73b6032\n. scope.socketDelay simulates a lag in the body of the response.\nI remind you that the request response event is fired when the response stream begins not when it ends.\nIf you're looking for a connection delay, use scope.delayConnection().\n. A response comes in chunks.\nQuick explanation:\nIf you run this example you should observe the following events:\nrequest - socket\nrequest - finish\nrequest - response\nres data: \"<!DOCTYPE html>\\n<html lang=en>...\"\nresponse - data\nres data: \":url(//www.google.com/images/b...\"\nresponse - data\nres data: \"o_color_150x54dp.png) no-repea...\"\nresponse - data\nresponse - end\nrequest - close\nBy using scope.socketDelay() you're placing a delay here:\nrequest - socket\nrequest - finish\nrequest - response\n=> DELAY HERE\nres data: \"<!DOCTYPE html>\\n<html lang=en>...\"\nresponse - data\nres data: \":url(//www.google.com/images/b...\"\nresponse - data\nres data: \"o_color_150x54dp.png) no-repea...\"\nresponse - data\nresponse - end\nrequest - close\nIf, instead, you use scope.delayConnection you place the delay here:\nrequest - socket\nrequest - finish\n=> DELAY HERE\nrequest - response\nres data: \"<!DOCTYPE html>\\n<html lang=en>...\"\nresponse - data\nres data: \":url(//www.google.com/images/b...\"\nresponse - data\nres data: \"o_color_150x54dp.png) no-repea...\"\nresponse - data\nresponse - end\nrequest - close\n. @pwmckenna thanks!\nLanded in v2.11.0.\n. @ruimarinho thanks for the contribution!\nLanded on v2.12.0.\n. @jshcrowthe thanks for the fix!\nLanded on v2.13.0.\n. I welcome a PR with this.\n. @aronwoost going through the code, the request object should emit an error from here:\nhttps://github.com/pgte/nock/blob/4f4d62b0290866fa5c0ddf53282871b61c93e110/lib/request_overrider.js#L250-L253\n@aronwoost isn't this your experince? If not, can you show me a code gist that fails?\n. @aronwoost The request object should be already throwing an error if you're using the same host name but there's no match.\nWhat would be missing is to throw an error on a hostname that is not mocked, but I think you can achieve that using nock.disableNeConnect() before running the tests.\n. @DavidTPate thanks!\nLanded on v2.14.0.\n. @marfarma Even though we have an internal representation of a mock, that interface needs to be defined and extracted. Short answer: no, not yet.\n. I welcome a PR with this.\n. @vinaykkaimal is this a recorder problem?\n. closing this issue for now. Please reopen once you have feedback.\n. @matto1990 thanks!\nLanded on v2.15.0\n. @fourq From this line in your gist it looks like you're recording instead of mocking...\n. @kelaban any input?\n. @izaakrogan in this gist you're hitting /search two times, while mocking /maps. Was that your intention?\n. @izaakrogan slightly changed wording: https://github.com/pgte/nock/commit/5da238f1a0b37e89ac6c90ca32ab5494ae5bd56e\n. No, it doesn's start an HTTP server, it overrides Node.js http(s).request.\nSee here: https://github.com/pgte/nock#how-does-it-work\n. Nock doesn't work on the browser\n. I'd prefer we go with a function or a regular expression rather than a string.\n. Duplicate of #347 \n. require('url').parse apparently supports it, it seams to work on http.request so nock should support it.\n@neophob what's your experience?\n. @neophob we do now: https://github.com/pgte/nock/blob/master/tests/test_ipv6.js , and they're passing.\n. @neophob that doesn't look like a valid encoding for an IPv6 in the uri option.\nDid you try with http://[2607:f0d0:1002:51::4]:8080/update?\nIf so, could you post a full failing test case so that I can try to reproduce?\n. @neophob intersting, can you make a pull request with the failing test so that I can merge it here?\n. @neophob thanks for the test!\nFix landed on v2.16.1.\n. This PR also contains the request-promise test case. Could you perhaps move it to another branch?\n. np\n. @nunofgs Thanks! landed on v2.16.0.\n. Fix landed on v2.16.1\n. To be honest, I'm not a user of socketDelay.\nAny input @brettporter ?\n. To clear things up, I've added a few examples on each type of time-related methods.\ndelayConnection:\ncode: https://github.com/pgte/nock/blob/master/examples/delay-connection.js\nOutput:\n\u2192 node examples/delay-connection.js\n[0 sec] req => socket\n[1 sec] req => response\n[1 sec] res => data\n[1 sec] res => end\ndelayResponse\ncode: https://github.com/pgte/nock/blob/master/examples/delay-response.js\nOutput:\n\u2192 node examples/delay-response.js\n[0 sec] req => socket\n[0 sec] req => response\n[1 sec] res => data\n[1 sec] res => end\nsocketDelay (without abort)\ncode: https://github.com/pgte/nock/blob/master/examples/socket-delay-no-abort.js\nOutput:\n\u2192 node examples/socket-delay-no-abort.js\n[0 sec] req => socket\n[0 sec] req => response\n[0 sec] res => data\n[0 sec] res => end\nsocketDelay (with abort)\ncode: https://github.com/pgte/nock/blob/master/examples/socket-delay-abort.js\nOutput:\n\u2192 node examples/socket-delay-abort.js\n[0 sec] req => socket\n[0 sec] req => timeout\n[0 sec] req => error\n. @drazisil I hope this helps. I'm closing this for now, if you have any problem please reopen.\n. @nunofgs thanks!\nLanded on v2.17.0.\n. @jpetitcolas I've tried with node v4.1.2 and I can't reproduce this issue.\nWhich exact node version are you using?\n. @soroushjp I agree, this is an obvious pain point for nock when doing some more complex matching.\nWe can't show the filtered body because they're scope-related, not request-related. (anyway, I think there's a better way to help debugging the filters).\nTo make this better, I'd suggest the following:\n- add the request header fields to the error message.\n- present the candidate interceptors for that hostname:port and what the differences were, after filtering:\n  - the path differences\n  - the method difference\n  - the body differences\n  - the request headers differences (if request headers matching)\n  - anything else?\nOptimally we would sort the interceptors by difference amount, presentint first the interceptors with the least differences.\nI'd suggest using a diff package like diff.\nFeel free to tackle any of these or suggest others.\n. @jackfranklin options.headers should be ignored.\nThe headers come as arrays, node-fetch is exploiting the fact that ['abc'].toString() == 'abc'.\nLanded a generic fix on v2.18.0.\n. Examples:\ndefault net connect, no mock:\ncode: https://github.com/pgte/nock/blob/master/examples/net-connect-default-no-mock.js\nresult:\n\u2192 node examples/net-connect-default-no-mock.js\nmaking request...\n[0.1 sec] req => socket\nrequest result: res.statusCode = 302\n[0.2 sec] req => response\n[0.2 sec] res => data\n[0.2 sec] res => end\ndefault net connect, mock other host name:\ncode: https://github.com/pgte/nock/blob/master/examples/net-connect-default-other-mock.js\nresult:\n\u2192 node examples/net-connect-default-other-mock.js\n[0.1 sec] req => socket\nrequest result: res.statusCode = 302\n[0.3 sec] req => response\n[0.3 sec] res => data\n[0.3 sec] res => end\ndefault net connect, mock same hostname, different path\ncode: https://github.com/pgte/nock/blob/master/examples/net-connect-mock-same-host-different-path.js\nresult:\n\u2192 node examples/net-connect-mock-same-host-different-path.js\n[0.1 sec] req => socket\nError: Nock: No match for request GET http://example.com/other-path\n    at RequestOverrider.end (/Users/pedroteixeira/projects/nock/lib/request_overrider.js:259:17)\n    at OverriddenClientRequest.RequestOverrider.req.end (/Users/pedroteixeira/projects/nock/lib/request_overrider.js:170:7)\n    at Object.exports.get (http.js:54:7)\n    at Object.<anonymous> (/Users/pedroteixeira/projects/nock/examples/net-connect-mock-same-host-different-path.js:16:16)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n[0.1 sec] req => error\ndisabled net connect, different hosts\ncode: https://github.com/pgte/nock/blob/master/examples/net-connect-disabled-different-host.js\nresult:\n\u2192 node examples/net-connect-disabled-different-host.js\nNetConnectNotAllowedError: Nock: Not allow net connect for \"www.google.com:80/\"\n    at /Users/pedroteixeira/projects/nock/lib/intercept.js:429:21\n    at Object.module.request (/Users/pedroteixeira/projects/nock/lib/common.js:137:14)\n    at Object.exports.get (http.js:53:21)\n    at Object.<anonymous> (/Users/pedroteixeira/projects/nock/examples/net-connect-disabled-different-host.js:18:16)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n[0.1 sec] req => error\n\n. @cressie176 I'm not sure I fully understand the whole scenario. It looks like the request is being actually sent to S3, and to me it's not clear what is timing out: the test or the request.\nCould you please create the simplest node script that recreates this problem?\n. @cressie176 thanks, I managed to reproduce it. I'm going to take a look into this.\n. Fix landed in v3.1.0.\n. landed on v3.1.0.\n. @ierceg thanks.\nJust so you know, I think it's a side effect of updating the version of superagent.\n. @marco-c what about this alternative: using query({}) to specify no query string params?\n. @marco-c sorry, should have told something. Yes, this is now the expected behavior.\n. Unfortunately, until someone tackles #287, one way to do this is to look at the commit log.\nduplicate of #287 \n. This may have been fixed by 13b65dd4fc195112453e00a55ae6dce05ed67945, which landed in 3.1.0.\n@garrypolley are you able to test with this version?\n. @garrypolley Closing for now. Please reopen if you find the bug still occurring.\n. @vyorkin np at all.\nI think that a good solution for everyone would be for browserify / webpack to use fetch as the HTTP client backend..\n. You could use .replyWithError(err) to simulate that. You would have to create a mock error object with the .code attribute, etc.\nI'm keeping this issue open, since I think nock could provide an easier way to reply with those types of errors.\n. @1999 could you please create a separate issue for this?\n. @redben what's the status of this?\n. @filipedeschamps could you please elaborate?\n. @1999 PR is  welcome :)\n. I'm closing this for lack of feedback. Please reopen if you have more info.\n. Fix landed on v3.1.1\n. If it's SOAP over HTTP, it is, but due to the chattiness of th SOAP protocol, you may find that nock is too low level, you may want to mock at a higher abstraction level..\n. Fix landed in v3.2.0\n. Landed in v3.2.0\n. Before the meat of my reply, notice that:\nscope.done() asserts and throws if it's not done.\nscope.isDone() is the one that replies a boolean.\nAnyway, if you want to test that a given request is only being sent out once, you just need to:\n- disable net connect\n- mock once\nIf you do this, a second request should fail.\n. I'm referring nock.disableNetConnect(), explained here: https://github.com/pgte/nock#enabledisable-real-http-request\n. Fix landed in v3.3.0.\n. @ierceg any thoughts on this?\n. This happens if I use NPM v2.11.3.\nIf I use NPM v3, it works.\nThis looks like an NPM bug, since NPM shouldn't care about dev dependencies..\nPlease reopen if you think this is something that nock should solve.\n. I can use  global install to generate the changelog.\nRemoved the devDependency.\n\"Fix\" landed on v3.4.0.\n. @dukedorje thanks, fix landed on v3.3.1.\n. Fix landed on v3.3.2\n. 5eb5e2e7dc950c20f65b26fd6fed50dacec27cdf should have fixed this, landed in v3.1.0.\nCan you verify this?\n. Nock doesn't support the fetch API (see #409).\n. Triedupgrading to latest lodash and tests don't pass. Will investigate further.\n. I think nock assumes the response to be utf-8. Would need an option on the expected encoding..\n. Landed in v3.5.0\n. It's an issue in nock related to matching with the query string.\nA quick fix for this case is to match .get('/mydb/mydoc?') instead of .get('/mydb/mydoc').\nAnother fix is to wait for me to fix this in nock itself, which I intend to do today..\n. Another (more appropriate) quick fix is to use query(true) instead of query({}).\n. Fix landed in v3.4.1.\n. .replyWithError emits an error on the request object, not the response.\nThis should be clarified on the documentation.\n. Clarified in e305c18864e9fbe5000ca60273c0d518bef6f798\n. @massimocode cood call.\nFixed by a6adb4e092583f225f36d6f96328c41f27dbc462\n. @yinrong yes I would.\nCould you default to using deep-equal for everything deep-equal works for?\n. @yinrong I think you misunderstood me. I'd prefer to use deep-equal for the cases it covers, and just use the regexp comparison when needed instead.\nThat's what I meant by:\n\nCould you default to using deep-equal for everything deep-equal works for?\n\nBy forking deep-equal I'll now have to make sure you keep it up to date with upstream fixes, and that's something I'd rather not do...\n. Apart from bumping the version, it looks great now.\nCould you please also add some instructions to the README?\nThanks!\n. @jeffomatic thanks!\nLanded on v3.6.0.\n. nock is designed to work on node.\nbrowser is still limited to require('http') in browserify, and still with some problems.\nDirect AJAX is not supported.\n. @ericsaboia I reviewd the code, merged.\nFor path I'd appreciate a new PR if possible.\nThanks!\n. @hyzhak The code LGTM, but could you add some instructions to the README?\n. Landed on v4.1.0.\n. I'll be cutting master soon into a new major candidate.\n. Landed on v4.0.0.\nnext tag for now.\n. @xavierchow thanks!\nLanded on v5.0.0.\n. it looks like the client is trying to connect to port 80.\ncan you provide a snippet of the client code?\n. @annyh looks like you're not specifying a port when doing a request.\n. @cody-greene aborting shouldn't emit an error, this behaviour was wrong.\nI've changed your test to this: https://github.com/pgte/nock/blob/master/tests/test_abort.js\n. Fix landed in v5.1.0.\n. @cody-greene thanks! By looking at node http client code I didn't realize that was would be the case.\nFix coming out soon.\n. Fix landed in v5.2.1.\n. @shawnzhu you would need to call .replyWithError(err) with a synthetic error, which emits that error on the request object.\n. Fixed by 8b55243d4a92fd7742203931e45b639a55c8875a\n. Landed in v5.2.0.\n. I'm working on emitting request and replied events.\nCheck the tests: https://github.com/pgte/nock/blob/master/tests/test_events.js\nWould this work for you?\nJust in master for now.\n. About the non-matched requests, it must be emitted from a central place, I'm going to think of a solution..\n. Fixed by 22667de15b0a77c9e0fd0a5edf8b11d8adbc29e6\nLanded on v5.3.1\n. @piranna could you elaborate? I'm failing to picture what could be commonly abstracted here..\n. Closing for lack of feedback.\n. The API for removeInterceptor is not that one. It's:\nhttps://github.com/pgte/nock/blob/master/README.md#removeinterceptor\n. Anyway, I see now what you're doing on this PR https://github.com/pgte/nock/pull/448.\nYou're trying to use the interceptor as the options for removing.\nI'll keep this open for tracking.\n. Landed on v5.4.0\n. Tests are failing: https://travis-ci.org/pgte/nock/jobs/103245615\n. @BinChang thanks!\nLanded on v6.0.0.\n. Thanks!\nLanded on v5.5.0.\n. If you're using hapi, server.inject() doesn't create an HTTP request, so there's nothing to record.\n. @fourq it's not clear what your exact issue is to me then.\n. @fourq if the problem is that you're not getting the ouput into the stdout, it's probably because mocha takes control of stdout. If this is the case you'll have to use the dont_print option.\nPlease reopen if you found that this is a problem on nock.\n. @alekbarszczewski agree, that should be enough.\n. @alekbarszczewski thanks!\nLanded on v6.0.1.\n. @BinChang thanks, looks much cleaner now!\nLanded on v7.0.0.\n. @wprater thanks!\nLanded on v7.0.0.\n. @BinChang good call, thanks!\n. Should be fixed by 83168f6, which landed on v7.0.1.\n. Should be fixed by 603fd52f7cfc4d56f34cbc127bef7940495aeccf, which landed on v7.0.2.\n. Looks like your client is making a POST and not a PUT request.\nTo make sure, can you share the client code that triggers that?\n. @BinChang thanks for the contribution!\nLanded on v7.1.0.\n. @kelaban thoughts?\n. @satispunk You can try and cleanup between each test, using nock.cleanAll().\nWhat version are you using? (there were some optimizations introduced in v7.2.2)\n. @owiber thanks!\nFix landed in v7.2.1.\n. Fix landed on v7.2.0.\n. @mdlavin thanks for the contribution!\nLanded on v7.2.2.\n. @kimmobrunfeldt did you try persist()?\nhttps://github.com/pgte/nock#persist\n. As you can see here, reqheaders uses scope.matchHeader() to add the header.\nAnd you're right, in hindsight it's unnecessarily increasing the API surface..\n. @Limess thanks for a great PR!\nThis landed on v7.3.0.\n. @kelaban any thoughts?\n. When you setup an interceptor for an URL and that interceptor is used, it is removed from the interceptor list. This means that you can intercept 2 or more calls to the same URL and return different things on each of them. It also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nYou can also repeat the response n times:\nhttps://github.com/pgte/nock#repeat-response-n-times\nor infinite times:\nhttps://github.com/pgte/nock#persist\n. @kelaban any thoughts?\n. @kelaban any thoughts?\n. Good idea.\nOn 20 Mar 2016 02:35 +0000, Andr\u00e9 Cruznotifications@github.com, wrote:\n\n@pgte(https://github.com/pgte)I can do a PR, how about add arecorderoption to back, to pass custom recorder options inhere(https://github.com/node-nock/nock/blob/master/lib/back.js#L157)(mixing in those options)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly orview it on GitHub(https://github.com/node-nock/nock/issues/487#issuecomment-198834191)\n. Out of the top of my head, I'm inviting @ierceg, @fent , @BinChang , @tinogomes , @kelaban. Are you in?\nAm I missing someone? Please drop a line here.\n. Also @ruimarinho.\n. Done: https://github.com/node-nock\n. @swashcap agree, a PR is welcome.\nI'd prefer the first option, it's more generic.\n. @robinbobbitt sounds like a bug around the behavior dependent on allowUnmocked being true.\n. @swashcap thanks!\n\nLanded on v7.4.0.\n. looks like the data you're sending doesn't match {comment: \"message\"}.\nBy your code it looks like the requst body is 'comment=some+comment&score=2&product_id=3&user_id=4'...\nPlease reopen if you think that nock is not matching correctly.\n. It's a bit twisted, but you could persist a scope and have canned responses for all methods you need.\nSomething like this, off the top of my head:\njavascript\nnock('https://api.raygun.io')\n.persist().\n.filteringPath(/.*/, '')\n.intercept('/', 'GET').reply(200)\n.intercept('/', 'POST').reply(200)\n.intercept('/', 'DELETE').reply(200);\nSomething around this. Not sure it will work, though...\n. I'd prefer you'd call it .any() (to match any method and any path).\nAlso, please make it not persistent so that it can be more useful.\nIn your case you'd have to call:\njs\nnock('https://api.raygun.io')\n  .persist()\n  .any().reply(200);\nSounds good?\n. @jiggliemon I've added this test to master and it seams to be passing...\nWhat nock version are you using?\n. Closing this one for lack of feedback.\nPlease reopen if you can add more info.\n. I'm not a user of superagent, but it looks like your code or superagent are failing to collect the response body, it doesn't look like a problem with nock.\nPlease reopen this if you find that nock is the problem.\n. @pasupulaphani could you please post a snippet that makes this happen?\n. @pasupulaphani From you description I'm not sure how to reproduce this.\nPlease feel free to reopen this ticket once you post a snippet I can reproduce.\n. @reconbot good catch, thanks!\n. @satazor thanks!\nLanded on v7.5.0\n. @satazor thanks!\nLanded on v7.5.0\n. @jeffora Good catch.\nA PR would be welcome..\n. Fixed by https://github.com/node-nock/nock/pull/520\nLanded on v7.7.3.\n. @mihar thanks!\nLanded on v7.6.0\n. @stormslowly thanks!\nLanded on v7.6.0.\n. Nock emulates a socket object, but only some parts, and this part is not documented.\nAlso, in the real world, ending a request doesn't mean the socket gets destroyed if the server supports keep-alive..\n. Fix landed on v7.7.0\n. @kevinburkeshyp thanks!\n. I failed updating the browserify bundle. Fixed by e4d74331138973cdd4054943a443130720db53a1\n. Thanks!\nLanded on v7.7.0\n. published v7.7.2.\n. I sympathize, but I'm not sure how nock can help here.\nPlease reopen this if you think of a way nock could make it simpler for you without introducing more complexity I would be all hears :)\n. @Byron-TW good catch, thanks!\n. @ericsaboia thanks!\nFix landed on v7.7.3.\n. @ericsaboia the remove function is what is passed into the RequestOverrider constructor..\n. Yes, please! :)\nOn 4 Apr 2016 15:28 +0100, Eric Saboianotifications@github.com, wrote:\n\ngot it@pgte(https://github.com/pgte)- but IMO it could be a single method. They were almost duplicated before, and now theremoveInterceptorstill has the bug that I've fixed forremove.\nI can try to refactor that if you want.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly orview it on GitHub(https://github.com/node-nock/nock/pull/520#issuecomment-205321417)\n. @cw6365 would a call to nock.cleanAll() before each test work?\n. @bdentino this introduces some problems in encoding and decoding.\nI'll have to take a deeper look into how nock is and should be handling transfer encoding...\n. just caution and cascading from updating major versions in deps and lots of test changes, something I'm always afraid of..\n. @Nagarjuna-S may only be a type from you, but it looks like the uri you're trying to invoke may be different from the one you're setting up the mock to.\n\nYou can debug nock interception by using an environment variable or by using .log(fn) on the interceptor.\nPlease reopen if you think this is still an issue on nock.\n. By the look of the code you pasted you're not.\nPlease provide a short failing test I can reproduce and I'll take a look.\nThanks.\nOn 7 Apr 2016 11:38 +0100, Nagarjuna-Snotifications@github.com, wrote:\n\nHi@pgte(https://github.com/pgte)\nI am not able to reopen this issue.. Can you please check my analysis above and provide me your inputs.\nThanks\nNagarjuna\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly orview it on GitHub(https://github.com/node-nock/nock/issues/526#issuecomment-206804588)\n. I'm not sure, I cannot tell without reproducing it, mainly because I can't guess what connectionsDB is doing.\n\nI can help you only if you follow my first advise or place here some code I can reproduce.\n. also, look out for the string representation of true. Perhaps try replacing it with the \"true\" string instead of a boolean.\n. Nock only mocks the node HTTP client, and jQuery is not using that...\n. Here you are detecting if we're using unix sockets by detecting the af_unix option.\nShouldn't you be detecting the socketPath option, which is standard?\nhttp://nodejs.org/api/http.html#http_http_request_options_callback\n. This change doesn't make much sense to me. Shouldn't you be testing if a unix domain socket is being queried?\n. @ierceg sorry, I've been away, I'll take a look at this these following days.\n. I believe this is an internal function, perhaps it should be prefixed with _?\n. I think that the callback should be using the standard callback pattern: error-first, so that it can be easily composed with other I/O.\nThis allows stuff like:\njs\n.reply(function(cb) {\n  fs.readFile(file, cb);\n});\nor even better:\njs\n.reply(fs.readFile.bind(fs, file));\nThen the answer comes: what happens when there is an error happens? I propose that it's just thrown so that the test stops.\n. fixed by d8663c511557da2d4f7c34bc9c6a16aae6c3b1d4\n. @DavidTPate Shouldn't this be .reqheaders() instead of .reply() ?\n. I think host name is more correct that domain.\n. Can't really see a way around this one...\n. please don't bump the version, I'll to the release myself.\n. please don't remove these. If the tests are not passing, or the coverage decreased, please fix it. :)\n. I hate that we're currently changing the options in place. We should instead be creating and returning a new object..\n. ",
    "lock[bot]": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue and add a reference to this one if it\u2019s related. Thank you!\n. ",
    "mwawrusch": "awesome, thx.\n. yes.\n. Yeah, awesome\n. Hi Pedro, that's what I am doing, but my impression was that it ignores all the header info in the file. I'll double check. \nHere is a typical file I use:\nHTTP/1.1 200 OK\nServer: Sun-ONE-Web-Server/6.1\nP3P: policyref=\"http://www.latimes.com/w3c/p3p.xml\", CP=\"CAO DSP CURa ADMa DEVa TAIa PSAa PSDa IVAi IVDi CONi TELi OUR DELa SAMi UNRi OTRi IND PHY ONL UNI PUR COM NAV INT DEM STA POL HEA PRE\"\nContent-Type: text/html; charset=UTF-8\nX-Instance-Name: i6s27z2n1\nContent-Length: 374030\nVary: Accept-Encoding\nCache-Control: private, max-age=50\nDate: Wed, 12 Oct 2011 14:29:01 GMT\nConnection: keep-alive\nHTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"\n\n\n\n\n<title>Los Angeles Times - California, national and world news - latimes.com</title>\n\n\n\n\n. ",
    "xla": "That can be considered solved since this PR, right?\n. ",
    "iangreenleaf": "Looks done.\n. I can actually simplify these tests a bit if you accept pull request #18.\n. Is this current behavior the desired behavior or just the expected behavior? I haven't looked closely at the interceptor internals yet, but I imagine we could change it to what I described in the first option - just need to key by a reference to scope object or something.\n. So right now we're still left with cascading failures from one unsatisfied mock. If nothing else, I'd like to go for the second option, but I'm hoping to get your opinion on the above first.\n. Perfect! Added this to my test setup and it works great.\n. :+1:\n. Word. I tried to fix this issue on mikeal/request#135, but it ended up being reverted because the changes were node 0.6 only.\n. It seems like maybe this has regressed in 0.13? I'm getting an error:\nTypeError: Cannot call method 'toString' of undefined\n  at /Users/ian/code/githubot/node_modules/nock/lib/request_overrider.js:178:39\n  at Array.0 (/Users/ian/code/githubot/node_modules/nock/lib/request_overrider.js:195:20)\n  at EventEmitter._tickCallback (node.js:192:40)\n. It looks like the test got broken in a merge conflict, and this feature has since broken. Submitted #65 to fix both.\n. ",
    "dscape": "To check if it worked run with:\nhttp://writings.nunojob.com/2011/12/Mock-Testing-CouchDB-Using-NodeJS-With-Nock-And-TAP.html\nAnd add some tests. This is a mocking thing after all :)\n. Or you could generate code files\n``` js\nrequire('nock')\nnock.record(function (js_file) {\n  do_whatever(js_file);\n}, 5000)\n```\nMeaning when 5 seconds pass call the callback with the current js file\n. I kind of am done here, don't have a use case for it anymore. \nOnly if I pretend like I didn't do it already, which is kind of lame :)\n. You don't have any nock rules:\njs\nnock(url)\n  .get(path)\n  .reply(...)\nYou can do nock.recorder.rec() to get those rules. \n. Sorry it's just super hard for me to read coffeescript, I don't understand it\nCanonical example, in javascript:\nsh\ndscape at air in ~/Desktop/nock_test \n$ node index.js n\n{\"ok\":true}\ndscape at air in ~/Desktop/nock_test \n$ cat index.js\n``` js\nvar nock    = require('nock')\n  , request = require('request')\n  ;\nnock('http://www.google.com')\n  .get('/')\n  .reply(200, {ok:true}, {})\n  ;\nrequest.get('http://www.google.com', function (,,b) { console.log(b); });\n```\n. @pgte check this out\n. Did the tests pass in your local but failed in travis?\nIf so, it's likely to be a concurrency issue\n. Yeah, The module is testing in 0.4 and 0.6 at the same time, concurrently. I had plenty of issues doing this in nano, so i actually made fakeurls based on the node version that was running\n. Code I've added to helpers to do this:\n``` js\nvar nock    = require('nock')\n  , helpers = {}\n  ;\nfunction noop(){}\nfunction fake_chain() {\n  return {\n      \"get\"                  : fakechain\n    , \"post\"                 : fakechain\n    , \"delete\"               : fakechain\n    , \"put\"                  : fakechain\n    , \"intercept\"            : fakechain\n    , \"done\"                 : fakechain\n    , \"isDone\"               : fakechain\n    , \"filteringPath\"        : fakechain\n    , \"filteringRequestBody\" : fakechain\n    , \"matchHeader\"          : fakechain\n    , \"defaultReplyHeaders\"  : fakechain\n    , \"log\"                  : fakechain\n  };\n}\nhelpers.nock = function (url) {\n  if(process.env.NOCK) {\n    return nock(url);\n  } else {\n    return fake_chain();\n  }\n};\nhelpers.nock.recorder = nock.recorder;\nmodule.exports = helpers;\n``\n. Pedro:nock.copy` does not work in this version unless you take this PR.\n. I see. got it\nStill think you should just add the copy shortcut. You are making people have exceptions for no good reason\n. yes! Why wouldn't it if its a standard verb?\n. Published as 0.16.0\nAndre, please add tests to cover this two methods. A simple check they exist is fine.\n. Ups, can't publish. @pgte @indexzero \n. Isn't that exactly what I did?\n. ",
    "ierceg": "I have a helper module that does something similar. But in general case nocks need some processing (e.g. when data contains random or variable data like timestamps).\nHere is a gist with code and in use. If there is interest I could extend recorder to have this kind of functionality.\n. @kelaban's PR with the said functionality has been merged into master.\n. Please see my comment on issue #14. Over the past couple of months I've extended nock to record request objects, be able to load them and used them instead of manually defining mocks. On top of this it was easy to add recording/replaying.\n. @pgte I agree.\n. Not sure if this is the same problem but I've fixed a AWS problem a while ago. The problem is that the fix breaks nock on node 0.11 so we couldn't merge it. Let me see if I can take a look at it later on.\nMinimum pending would of course be highly appreciated @jakecraige \n. @jakecraige The PR #266 might be a solution to this though without a minimum test I can't be sure. Please test and let us know.\n. @jakecraige Glad to hear it - thanks for the confirmation!\n. If they are overriding ClientRequest (as nock does) then this might have been fixed in recent PRs. If it's not fixed, please provide a gist illustrating the issue.\n. Is this still a problem? Could you provide us with a test?\nThere has been a lot of work done on recorder in the past few months so you might want to check it out again.\n. If you provide a unit test that fails with this issue, I would try to fix it.\n. I see you gave an example on the other thread. I'll check it out when I get some time.\n. @jbergknoff I've just created PR #175 with a fix for this. If you want to test it on your end before it gets merged into master you can find it in fix-146 branch.\n. Great, tnx for letting me know.\nOn Mon, May 19, 2014 at 7:01 PM, jbergknoff notifications@github.comwrote:\n\nSeems like your change fixes my issue. Thanks, @ierceghttps://github.com/ierceg\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/pgte/nock/issues/146#issuecomment-43568961\n.\n. Ok, tnx.\n. Hm. I ran the tests. I'll double check.\u00a0\u2014\nSent from Mailbox for iPhone\n\nOn Sat, Feb 22, 2014 at 12:16 PM, Sven Lito notifications@github.com\nwrote:\n\nbuild's breaking unfortunately.\nReply to this email directly or view it on GitHub:\nhttps://github.com/pgte/nock/pull/149#issuecomment-35804922\n. I've fixed the issue by removing the use of public proxy (now I test the recording of ports through an embedded HTTP server)\n. It seems that the problem happens only on Node 0.8. I'm looking into it.\n. I've tested it locally on 0.8 and it works. Do you have any ideas?\n. I tested it on Ubuntu + Node 0.8 and again all tests pass.\n. I just did a build of my own on Travis (different branch but same last commit) and it works. You can check it here: https://travis-ci.org/SoftwareMarbles/nock. I'll make an empty commit to trigger the build here.\n. I'm officially confused (my build of this branch failed on both node versions, your build passed on 0.8 now but failed on 0.10). But I think I know how to circumvent the issue.\n. I have tried dozens of builds to fix this (in my own fork) but to no avail. I traced the problem to node sometimes randomly misinterpreting (IMO) perfectly unambiguous code and running recording as if output_objects hasn't been specified. People from Travis couldn't help me either. They suggested timing issues but I couldn't find any. I also looped the tests 10,000 times on a Linux box but everything worked fine. To complicate the issues, I did manage to diagnose that the failure on Travis happens only if other tests are included as well (not only of recorder but of scope as well). It's a mess and frankly I can't justify investing in it further. I have another pull request lined up, this one allowing mocking of services that change their scope with each new session (like Dropbox) but I won't proceed unless we can solve this somehow. Any ideas? One last thing I'll try is running this PR on another CI service.\n. It works just fine on CodeShip on Node 0.10\n. I'm going to pull the plug on this one as I've made a new pull request.\n. I've added better support for binary data in buffers, addressing the particular UTF-8 conversion issue, in a recent PR #166. Please reopen if this is still a problem.\n. Nice, thanks for the tip. I'm impressed by how small your library is.\n\nOn Fri, May 23, 2014 at 6:05 AM, Andri M\u00f6ll notifications@github.comwrote:\n\nHey. Just a quick FYI: I released a similar library to Nock some time ago\ncalled Mitm.js https://github.com/moll/node-mitm that solves this\nissue. So if you're in a hurry, take a look.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/pgte/nock/issues/158#issuecomment-43991451\n.\n. Starting with 0.29.2 you can now mock request headers by passing { reqheaders } as part of options to nock:\n\nvar scope = nock('http://www.example.com', {\n  reqheaders: {\n    'authorization': 'Basic Auth'\n  }\n})\n   .get('/')\n   .reply(200);\nPlease reopen it if for some reason this doesn't work for you.\n. I have a question regarding this code:\nfunction reqheaderMatches(key) {\n    return ! options.headers || options.headers[key] === this.reqheaders[key];\n  }\nIf options.headers is falsy then this will always match even though we requested that only matching headers are passed. Is this a backward compatibility behaviour? Now that request headers filtering has been fixed I have to fix scope filtering (due to host header) so I'm trying to create the tests first and I've stumbled on this issue (tests don't fail because there are no request headers)\n. Great, thank you.\u00a0\u2014\nSent from Mailbox\nOn Mon, Apr 28, 2014 at 9:24 AM, Pedro Teixeira notifications@github.com\nwrote:\n\nThanks, landed on v0.28.3.\nReply to this email directly or view it on GitHub:\nhttps://github.com/pgte/nock/pull/165#issuecomment-41557212\n. @pgte My pleasure. Sure, I'll serve as a maintainer.\n. Thanks. This is true - it's been fixed in another branch but not yet merged\ndue to other issues.\n\nOn Wed, May 7, 2014 at 2:23 PM, Assaf Arkin notifications@github.comwrote:\n\nnode_modules/nock/lib/request_overrider.js\n46:      requestBodyBuffers = [],\n101:      requestBodyBuffers.push(buffer);\n133:    requestBodyBuffer = common.mergeChunks(requestBodyBuffers);\n134:    var isBinaryRequestBodyBuffer = common.isBinaryBuffer(requestBodyBuffer);\n136:      requestBody = requestBodyBuffer.toString('hex');\n138:      requestBody = requestBodyBuffer.toString('utf8');\n161:          newReq.end(requestBodyBuffer);\nDoesn't seem like requestBodyBuffers is ever declared as local variable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/pgte/nock/issues/167\n.\n. This is fixed in PR #168.\n. I just tested on a fresh clone and it installs and works correctly. Here's an excerpt (debug 0.8.1 is in the middle):\n\n```\nnpm http 200 https://registry.npmjs.org/sigmund\nnpm http 200 https://registry.npmjs.org/lru-cache\nnpm http 200 https://registry.npmjs.org/uglify-js\npropagate@0.2.2 node_modules/propagate\ndebug@0.8.1 node_modules/debug\nlodash@2.4.1 node_modules/lodash\nsuperagent@0.15.7 node_modules/superagent\n\u251c\u2500\u2500 methods@0.0.1\n\u251c\u2500\u2500 cookiejar@1.3.0\n```\nWhat exactly are you seeing as output from npm install? Does it fail to install 0.8.1 or is there some other error?\n. Ok, thanks for the info.\n. Great, thanks. I think I'm out of new improvements for now :)\u2014\nSent from Mailbox\nOn Sat, May 10, 2014 at 6:53 AM, Pedro Teixeira notifications@github.com\nwrote:\n\nLanded on v0.30.0.\nReply to this email directly or view it on GitHub:\nhttps://github.com/pgte/nock/pull/171#issuecomment-42738677\n. @pgte :) Thanks. I actually had scope filtering working in our own branch since March but I didn't PR it because of those CI failures that I couldn't solve back then.\n. Thanks.\n. I've made this change (from process.nextTick) in one of the previous PRs, ironically to fix the same issue with superagent that was fixed for needle in the last PR. The test was mocking a reply with more than one buffer (which is what happens during HTTP compression) and was hanging at the exact same place: pausing and never resuming because the response object was not marked as readable.\n\nAnyway, considering that nock test suite specifically covers the superagent issue and it's passing now, I agree that we should undo my change to setTimeout.\n. @pgte yay\nSorry for being so late on answers, just getting back into action.\n. @pgte I have some additional thoughts before you consider merging...\nI just re-recorded some of my tests and they started failing on CI. I tracked down the issue in request headers which now have different user-agent values on development (Mozilla/5.0 (Darwin x64) node.js/0.10.26 v8/3.14.5.9) and CI machines (Mozilla/5.0 (Linux x64) node.js/0.10.26 v8/3.14.5.9). As you can see this will always be a problem in any kind of mixed development environment and it increases the complexity unnecessarily. I prefer the simplicity of experience on recording and running tests out of the box instead of getting to understand too much of Nock and mucking with options to get the default correct behaviour.\nI think that we should always suppress user-agent recording as it really doesn't give any value to the tests. What could it indicate? That the user is running the tests in a different environment from the one they were recorded? How would that be important? We already have special handling of host so this wouldn't be the first such exception.\nFurthermore, we might consider not recording any request headers by default. These might be relevant sometimes (e.g. I messed up authorization code so now the request headers are wrong and tests aren't indicating that) but those cases could be handled with an explicit option of recording request headers or by writing a manual test. So instead of suppress_reqheaders_recording we would have an explicit enable_reqheaders_recording option.\nWhat do you think?\n. Ok, good, I'll do that and I'll always suppress the recording of user-agent and do the same as we do for host (do the matching only if it's specified in both mock specs and actual request)\n. @pgte done\n. Haven't tested that. Will check.\nOn Wed, Oct 8, 2014 at 11:09 AM, Pedro Teixeira notifications@github.com\nwrote:\n\nThanks @ierceg !\nThe build is failing on node v.0.11 on travis (and also on my machine). Can you check?\nReply to this email directly or view it on GitHub:\nhttps://github.com/pgte/nock/pull/232#issuecomment-58362768\n. @pgte I'm going to close this PR as nocker wasn't supposed to be part of it. I'll create a clean one.\n. I like this - it feels more JS than nocker with two calls. I haven't looked at the implementation but I see two minor problems with API:\n1. Devs have to modify code to force recording. I believe this should be configurable from command line (I check NOCK_RECORDING and if it's defined, then recording is forced... maybe NOCK_FORCE_RECORDING would be better)\n2. Sometimes you need to both pre-process definition objects and post-process (after loading) scope objects. In nocker I solved this by allowing preprocessor and postprocessor functions as properties of options object. This is ugly and I'm not sure it's better than what you do with exposing the need to invoke loadDefs, I'm just mentioning it to see if we can come up with some better idea.\n. I've been too busy since last Friday, I hope to look into this in the next few days.\n. I think this is a great addition but I think it needs more work on good naming for the modes. What do you think @pgte?\n. @kelaban I've tested this and I'm going to merge it. I will ask you to fix README typos like \"dont\" and \"doesnt\". And my apologies for the long wait - I've been very busy to the detriment of nock.\n\n@pgte Once I merge it, could you cut a new version? Do you need me to do anything for that (e.g. update package.json)?\n. :) Tnx again!\nOn Thu, Jan 8, 2015 at 1:44 PM, Pedro Teixeira notifications@github.com\nwrote:\n\n@ierceg https://github.com/ierceg added you as a maintainer of nock. :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pgte/nock/pull/233#issuecomment-69207832.\n. Forgot about failing on 0.11. I'll look into it.\n. @redben Could you clarify re inspecting the request body. If you use recorder and save the output, you can then load the definitions and assert on them.\n\n@optical How do you use recorder without pointing tests to an actual service? My use case is to write tests against actual services, make them work obviously, record the nocks and then during later tests just replay the recorded nock definitions. Without an actual service I would have to be creating nock definitions myself which would be moot I believe - why not use nock for that.\nI agree with @neverfox  - the recorder is used in lieu of nock, not with it. It relies on intercepting real requests and answers and then persisting them for later use.\n. @zeevl tnx for the PR!\n@pgte looks good to me\n. @pgte This might be a fix for #112 as aws uses readable.\n. @chainlink Tnx - looking forward to it.\n. XML parser is not supported out-of-box by superagent. I have tested with adding a custom parser and that works but .text is not set by superagent (looking at its source code here), only .body is. So if to your test I add this:\nsuperagent.parse['application/xml'] = function(str, callback) {\n    callback(null, {text:responseText});\n  };\nI will get {\"text\":\"<root><child/><child/></root>\"} in the body but text is still undefined. This is not a problem with nock.\n. @naugtur You are 100% correct. I wrote documentation without writing a test for it :( I have fixed this in the #331.\n. I don't quite understand the question but you can check #331 and updated example in the README.\n. @hellboy81 Please reopen the issue if this is still a problem for you.\n. @pgte Disabled by default is useful when running tests but not when actually creating tests. Take a project where you already have a bunch of go-to-the-network tests and you want to switch to mocking. Just by requiring nock, without doing anything else, all your network tests will suddenly fail. Then for each test you have to figure out exactly what needs to be done before each will work again (or manually enable net access for each)\nI usually implement mocking with recorder/nockBack but even that is not very smooth to introduce and I usually have to fiddle with modes (and it misses at least one mode anyway) or comment/uncomment nock, nockBack, etc. Not friendly.\nAnyway, I would obviously be in favor of making this change.\nTwo more things:\n1. I think nockBack has the right paradigm in the sense of wrapping the tests inside of a closure where different rules apply. In manual mocking case, we could then simply do nock(...).<method>....reply(...).test(function(done) { ...tests... })\n2. We could use a better integration with testing frameworks where their async callback could be passed to nock and nock would create a wrapped async callback taking care of its state. This is also useful for nockBack and I intend to add it at least there (right now using nockBack with say mocha you have to call nockDone() and then done())\n. @pgte Re my previous answer, when I say \"different rules apply\" I mean \"nock is intercepting HTTP calls\". So within the test the mocking is going on but after the test is done, the nock's state goes back to disabled. This better shows testing intent and an easy incremental conversion to mocked tests.\n. @pgte Alright, I just checked what \"fixed\" meant - it was clarifying the README, not changing the behaviour.\nIf setting up a scope in a single test disables the HTTP requests for other tests in the suite, then that's pretty unexpected and something that I think we should change. One option could be to enable HTTP requests after all the mocks are exhausted but that could also lead to unintended consequences (e.g. a test fails before all the mocks are exhausted so HTTP requests are disabled for the next tests that haven't yet been mocked so that test fails, etc.)\n. @pgte Ok, cool. I'll fix this then. I was thinking tracking the number of intercepts for all scopes and then just test for > 0 on persisted in isDone().\n. Fixed in #336 \n. @naugtur Fixed.\n. Ah didn't notice - will do.\n. @pgte rebased\n. Ok, I'll look into this.\n. Yep, figured as much. It now correctly reports 405 so I fixed the tests.\n. @SaidTayebi If I understand you correctly, you want to overwrite the already recorded JSON files? I often need this as well. We could add a new Nock Back mode for this.\n. Alright, let me see what I can do.\n. @vyorkin I agree with you - this mode would be very useful.\nI think overwrite is better than record-always although something like development or testing or even tdd could also work.\nI see two ways here:\nAlways overwrite\nThe workflow is:\n\nChoose tests to run (e.g. .only or regex for test or whatever your test runner allows)\nSet NOCK_BACK param to the new mode on the command line.\nRun the selected tests, all their fixtures get overwritten.\n\nOverwrite only on request params change\nThe workflow is easier here as step number 1 from above is no longer needed (in general). But the implementation has to expand the format of the nock fixtures and include request params. You would then have to analyze the request params and see if they still match the subset on which we are matching which would be very similar to writing a manual nock test in the first place and then why use recording?\nSo at the end I think that \"overwrite always\" mode is more optimal for the use case of recording and can be implemented quickly without any changes to file formats or package API.. Aaah my bad - I forgot that it was already included to be able to match\ndifferent requests in the same fixture file. Duh.. This would then change the weights on my recommendation that I think overwrite always is more optimal. I now recall that for some of my tests I have to rewrite the requests in order for them to be matched (e.g. upstream subdomain is randomly assigned to distribute the load - I think Dropbox package used to do that). So anyway, I agree this is useful - ignore everything else I said :). I like this plan. Count me in.\n. @gajus Sure. This would also be useful for mocking streaming protocols.. I still actively use nock and try to improve it from time to time. I'll admit that I feel uncomfortable merging my own PRs - that seems unhealthy so if anyone wants to take a look at https://github.com/node-nock/nock/pull/798 and merge it I would appreciate it.\nRegarding semver - go for it. I'm all for making the publishing process automated.\nRegarding continued maintenance - count me in. Feel free to assign me any code reviews and I'll gladly jump in. For some reason I haven't been getting PR requests in my emails - I'll update my subscription options.. @gr2m There seem to have been quite a few layers of paint since #170. If the tests are passing, and your new test seems to be testing the actual setting of headers, this is fine by me.. @maxGreenblatt The return false is there because we have found a match and we no longer need to keep searching. Request scopes shouldn't be ambiguous so the first match should actually be the only match (or you should always have the exactly same response and it's the count of requests that matters - in which case there is no reason to prefer the last match rather than the first match) So my first suspicion would be that your scopes might be ambiguously defined and thus more than a single match exists for every request.\nCould you try to isolate the issue?\nWhen I get some time I'll try to add missing tests.. I think you are right - I stand corrected.\nLet's try to work through how this should work and then compare it to how it actually does work.\n\nDefine scopes that are different (have different matching parameters) in whatever order you want.\nDefine scopes that are the same in the precise order in which they will be executed.\nRun tests - every requests will go through scopes, find the matching one starting from the front (which is why order matters), remove it from the list of available scopes and so on until the test ends.\n\nDoes this sound reasonable?\nBtw, have you managed to isolate the issue in a smallest test?. @simlu Thank you for the PR. We would however need tests to show what was wrong with the previous behavior and how this change fixes it.\nAlso, I'm not following re storing the binary/hex information in the recording - is there any metadata that we aren't capturing?. @louib Thank you for creating a PR to solve this issue. If I understand it correctly this would eliminate the support for multi-value query parameters and there is also a change in the current behavior for which there is no test (the added return this). @gr2m @louib sorry for dragging my feet on this. I've approved the changes - I think that @louib is right but I agree with @gr2m that we should add a test for multi-value query parameters in a future PR (not necessarily you @louib - whomever has some time to do so). And as a feature request (I'll file it) we should support multi-value query parameters.. dont, doesnt should be don't, doesn't, etc. here and elsewhere\nwild for mode name doesn't say anything. I think something an antonym of lockdown should be used: open, pass, passthrough, etc.\nI also think record should always record, ignoring the already recorded nocks, as that's what it means to record. In my experience it's very common to want to overwrite old recordings. If we don't provide that users will have to manually delete fixtures whereas the tests already know fixture names and can do that easily. Maybe we need to provide 5th mode for \"record new don't overwrite the old\"\n. Maybe pause, play, record, record_overwrite, strict_replay? Trying to find something that communicates well the semantics behind each option, even if it has less flair :)\n. Nice solution - easy to add new modes.\n. I think we should do better re naming and if needed we can add aliases that map to those other systems but I can live with whatever @pgte decides.\n. Sounds pretty good to me. @pgte?\n. Good catch. It's a modified copy of another test, it probably has the same problem. I'll fix it - tnx.\n. I think we need a test that shows this was an incorrect behavior. It looks like it was bad but I don't know what was the original intent.. This won't work for multi-value query parameters. I think you need to replace this with an array of {key: value} pairs as that would keep the order of the parameters (it would be bad if behavior depended on the order of query params but you never know)\nBuilt-in qs supports multi-value parameters. This:\nrequire('qs').parse('x=1&y=2&x=3');\nresults in:\n{ x: [ '1', '3' ], y: '2' }\nBut to maintain order would we capture this as:\n[ { x: '1' }, { y: '2' }, { x: '3' } ]\n. I think we need a comment here - what happens when there is no stringFunction and why? I would maybe rename stringFunction to stringTransformerFn or something such.. I think this was done this way to support multi-value query parameters.. ",
    "kelaban": "I put in a PR with my idea of how to re use nocks in a VCR like fashion. It makes recording and playback seamless instead of having to manually output and save json objects. \n. I love the idea of nocker. I put in my idea of it with PR #233. I explored a more functional approach where you can run each of your tests in an isolated environment without having to worry about whether or not you should be recording. Please take a look as an alternate implementation.\nI used my approach as a standalone module for a while, but thought it would be a great addition to the nock library\n. 1. I did this because I wanted to be able to configure force record on a per test basis. For example, when writing new tests, you may only want keep recording the new test without modifying fixtures from other tests. In this case, it's a pain in to have to keep deleted the auto generated fixture. Also this this way, you can set { record: false } to ensure that that test never goes out to the network. \nThat said, I think being able to re-record everything from the command line is also nice, though I'm not really sure having all these different environment variables is the way to go. One thing vcr does in ruby which is quite nice, is implement multiple modes. I listed some desired behaviors below ( we can come up with names later ).\n   - re-record everything\n   - re-record new (the default behavior)\n   - record nothing (regardless of the fixture existing, same as { record: false }\n   - don't load fixtures, don't record fixtures, basically bypass nockWith.\nIt can be either configured in a test helper like nockWith.mode = cats //goes to the internet or from the command line (takes precedence) NOCK_WITH_MODE=cats\n2. I think this one might take some more consideration. My reasons for exposing scopes to the test context are that, a: you can pre and post process the defs, b: have access to scopes to manually do assertions and other tests have been run. Item b might be moot though because I built in the ability to do asserts automatically as that seems like a common use case. \nI think I might like your idea of pre & post processor callbacks better as it doesn't leak the some of the abstraction that nockWith gives you from the lower level recorder.\nIf pre & post processors are the way to go, I think we should go a step further, and not require the user to write the for loop themselves and just call the function the n times we need to. \nWe can also use both of these approaches together in the event that somebody has some crazy corner case that can only test having the raw scope objects.\n. I made some changes here, let me know what you think. I should add more tests if you like this idea. Also rethink naming convention possibly.\nIn this commit, I added multiple modes, removed all the options from my first commit and changed define to take in before/after processors\nModes\n``` javascript\nvar Modes = {\nwild: wild, //all requests go out to the internet, dont replay anything, doesnt record anything (default)\ndryrun: dryrun, //use recorded nocks, allow http calls, doesnt record anything, useful for writing new tests\nrecord: record, //use recorded nocks, record new nocks\nlockdown: lockdown, //use recorded nocks, disables all http calls even when not nocked, doesnt record\n};\n```\nI had to add wild and make it default because I noticed that having other modes enabled interfere with some other tests and the original behavior of nock. Once any of these other modes are enabled, your test environment becomes a little more strict in the world of http calls. You can change the mode at anytime using nockWith.setMode(mode). You can also specify default mode with NOCK_WITH_MODE=mode however setting it to anything other than wild can break an already written test suite. Theoretically, using lockdown mode would allow a user with an already written test suite know which tests they need to nockWith\nI also think the need of FORCE_RECORD goes away with the dryrun method where you can work on writing tests without having to worry about the fixture breaking each time you write the new test.\n. Thanks @ierceg, In the meantime, I've updated the tests to my prove out my idea and have updated the README to reflect all of the changes. \n. using the mode mode dryrun should do exactly this. https://github.com/pgte/nock/blob/master/lib/back.js#L105\n. @pgte, we can expose some more hooks such as afterRecord which can pass the recorded nock back before writing it to disk. We can go the simple route and let the caller be responsible for doing whatever they want to that output object or abstract away some of the details\nthe hook would probably called here\n. The easiest would be something like this.\n``` js\nfunction afterRecord(nockedObjects) {\n  nockedObjects.forEach(nocked) {\n    nocked.path = desensitizeQueryStr(nocked.path);\n }\nreturn nockedObjects;\n}\nnockBack('someFixture.json', {afterRecord: afterRecord}, function (nockDone) {\ndoHTTPStuff(nockDone);\n\n});\n``\n. Look here under nock back [usage](https://github.com/pgte/nock#usage) and [options](https://github.com/pgte/nock#options-1). See the [pre/post processing](https://github.com/pgte/nock#output_objects-option) options you have. Thescopeobject you get passed in thebefore/aftercallbacks is one of those\n. Please test it (assuming you're loading a fixture which has already been recorded). Looking at the [code](https://github.com/pgte/nock/blob/master/lib/back.js#L223) it iterates through each scope and calls your handler which each scope object\n. I think it might be useful to take a look at [Ruby's VCR](https://relishapp.com/vcr/vcr/v/2-9-3/docs/record-modes) and another popular recording module for node [Replay](https://github.com/assaf/node-replay#settings). I don't really like either of their naming conventions, i think they are confusing and we can do better. But they have both been around for a while and are pretty popular so I think we should try to have parity with the modes' behaviors. \n. Put a real error message here\n. how about:off,record_off,record_new,record_all,strict_replay`\n. ",
    "theycallmeswift": "@pgte, sorry for the delay, I've been super busy recently. \nI think in the case of localhost especially, it's nice to be able to stub out only one URI at a time. This ensures that tests are truly isolated and that you're only really testing the behavior of one endpoint.\nIn our case, we're using Cucumber to test that a Spine application behaves properly given different API responses.  I need to be able to load http://localhost/ and any URIs that map to resources on the page. The base URL just serves a static html file, so I could easily stub that out, but I don't want to have to stub out the other 7 different endpoints every time I try to test a different API response for a single endpoint.\nThe simplest solution I can think of is to create an option to allow unmocked endpoints for specific domains. So maybe its something like this:\n``` javascript\n// Setup\nnock('http://google.com').get('/users/1').reply(200, { foo: 'bar' });\nnock('http://localhost', { allowUnmocked: true }).get('/users/1').reply(200, { foo: 'bar' });\n// Default\nhttp.request({ host: \"www.google.com\", path: '/', port: 80 }, function() {  // ... });\n=> throws an error\n// allowUnmocked = true\nhttp.request({ host: \"localhost\", path: '/', port: 80 }, function() {  // ... });\n=> succeeds\n```\nWhat do you think?\n. Ran into a slight problem where requests to the base path would still error out. Patched it with #36 though.\nThanks for all the help. You're the man!\n. Any update on this?\n. I ended up doing a match to * and using the filteringRequestBody function to automatically convert everything to *\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(function(path) {\n    return '*';\n  })\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n. ",
    "fabiano": "See https://github.com/pgte/nock/pull/31.\n. ",
    "MaerF0x0": "this crushed my productivity today. https://github.com/pgte/nock/pull/253 \n. ",
    "indexzero": "nm, was doing it wrong.\n. @AvianFlu is working on refactoring the jitsu tests to use nock and right now we have to specify a single response header on every reply: { 'x-powered-by': 'Nodejitsu' }\n. @pgte Right, but I want to do it once and have those headers in every reply\njs\nnock('http://nodejitsu.com')\n  .defaultHeaders({ 'x-foo-header': 'bar' })\n  .get('/')\n    .reply(200) // Will still receive 'x-foo-header'\n  .post('/upload', { 'somedatafromauserorsomething': true })\n    .reply(200) // Will still receive 'x-foo-header'\nIt that possible? I didn't see a method like .defaultHeaders()\n. lgtm\n. @pgte I was able to reproduce this consistently when using utile.mixin. I'm not sure why the keys come back in a non-deterministic order, but nock should be able to work around this imho.\n. It seems like if you store the URL and the POST body, non-serialized, in the _key you can check if assert.deepEqual throws right?\n. ",
    "jfhbrook": "That's awesome.\n. @pgte Actually that trick worked just fine! It might be nice to have it in the readme as a PROTIP or something but otherwise, yeah, I'm good.\n. ",
    "jherdman": "I found it. Check out how requests are intercepted and then the mock request is returned. In the linked bit of code, a new EventEmitter is instantiated and then ultimately returned. An EventEmitter doesn't quack like an http.ClientRequest completely, ergo problems like this will show up. IMHO a neutered version of http.ClientRequest should be returned instead.\n. I have a solution, but it may not be ideal. Is there a reason we're not returning a new OverriddenClientRequest this already, or were we just assuming that was the case?\n. If memory serves me correctly, the supported HTTP methods can be found in scope.js. You'll notice that PATCH and OPTIONS are also missing. It should be fairly trivial to throw together a patch to support additional HTTP methods.\n. ",
    "carlosvillu": "hi,\nI have a nock rules, you can see that i m doing\ncoffee\nbefore ->\n  @api = nock \"https://#{KEY}:#{PASSWORD}@#{STORE}.myshopify.com\"\nAnd then in the it statement i am trying to config the correct rules for the nock instance\ncoffee\n@api.get('/admin/blogs.json').reply(200, @fixture)\nThat is correcto or i m missing something\nThx :)\n. I am trying an isolate solution with this:\n``` coffee\n{request} = require 'http'\nnock = require 'nock'\ngoogle = nock(\"www.google.com\").get('/').reply(200, {response: \"ok!\"})\nreq = request {host: 'www.google.com', port: 80, path: '/', method: 'GET'}, (res) ->\n        response = ''\n        res.on 'data', (chuck) ->\n                console.log 'Datos: ', chuck.toString()\n                response += chuck\n        res.on 'end', ->\n                console.log \"Respuesta: \", response\nreq.end()\n```\nAnd that neither work !!! ... Sorry, but i cant understand what is wrong :(\n. Thx at all for the comments !\nthis is so odd, because i tried the example from @dscape and Works! ( maybe is for use Request module?! )\nBut then i try this code, from tests of the module:\n``` js\nvar google, nock, req, request;\nrequest = require('http').request;\nnock = require('nock');\ngoogle = nock('http://www.google.com').get('/').reply(200, \"Hello World!\" );\nreq = request({\n    host: 'www.google.com',\n    port: 80,\n    path: '/',\n  }, function(res) {\n    var response;\n    response = '';\n    res.on('data', function(chuck) {\n      console.log('Datos: ', chuck.toString());\n      return response += chuck;\n    });\n    return res.on('end', function() {\n      return console.log(\"Respuesta: \", response);\n    });\n  });\nreq.end();\n```\nMaybe there is any kind of problem with the native resquest object ?!\n:(\n. Hi, thx @pgte for the help\nBut the thing is that dont work this one:\ngoogle = nock('http://www.google.com').get('/').reply(200, \"Hello World!\" );\nI can capture the call to google with Request module but not with the native request object.\nMaybe the one is a to many realistic example, but i was trying with more conceptual examples and i could not make to work\n. Hi all, \nOk i found what is the issue here. The problem to dont work the simple test was:\n``` js\nvar nock = require('nock');\nvar request = require('http').request;\n// This work!\n```\nBut in my examples i did\n``` js\nvar request = require('http').request;\nvar nock = require('nock');\n// And this dont work !\n```\nOk, that is great, but now i will find a big problem. Because in all examples that i can found in internet, require nock and call to the server s made in the same js file. But my organization is different. I have 3 files to made the test:\n``` js\n// src/blog.js\n// Where i have my code who will be testing\nvar request = require('http').request\n//\n// You can see at the very first comment that there is a class where i made de request to the server in the all method\n//\n```\nLater i have my tests, there mainly two files.\n``` js\n// test/common.js\n//\n// A common file with the common requires for all tests files, where a require nock\n//\n```\nAnd the test file for the src where i made the call:\n``` js\n// test/blogTest.js\n// Where a have some thing like you can see in the first comment\n```\nThe thing is that i m requireing request in a file, nockin other, and setup nock\u00b4s rules in other ...\nAt the end when i start the test, i get this\n1) Blog Receive a list of all Blogs should be possible get a list of all blog like an Array:\n     AssertionError: Mocks not yet satisfied:\nGET myShop.myshopify.com/admin/blogs.json\n2) Blog Receive a list of all Blogs should call at server to get the blogs:\n     AssertionError: Mocks not yet satisfied:\nGET myShop.myshopify.com/admin/blogs.json\nBut if you see, i call to @api.done() en the function`s callback :(\n. Thx for all yours help, at the end i cant found the way to make work.\nI change to fakeserver and request module, and now seem work. Really i dont know why dont worked, because the match was intercepted and the problem was with the not satisfied Mock :(\nWhatever ... thx again!!!\n. BTW, here there is the repo https://github.com/Shopfrogs/Nodify\n. Hi all, really all fails happen only in my local machine, never commit nothing to Travis.\nBut is true that i had too this kind of fails how say @dscape, but not this time.\nIs very odd, because i create a new branch to try make work with Nock, because i like the module\u00b4s API. I think that the problem can be in have separate files. One for create rules and other to call http and make request. BUT ... i am sure that we first call require nock until to call require http. And the problem came from not satisfice all expects. That means that the calls is intercepted but the nock.done() dont happen in the correct place. Maybe was this?\nMaybe is your try to replicate the scene with 2 files different files you will find it. Because until now all use that i can found was all in the same file. require nock, require http, create rules and make request.\nFYI\n- test file\n- src file\n- common file for tests\nthx for all :)\n. ",
    "frosas": "Try with this:\ngoogle = nock(\"http://www.google.com\").get('/').reply(200, {response: \"ok!\"})\n. ",
    "samvloeberghs": "@pgte 6 year old advice, but still worth gold! Thanks alot. ",
    "timsavery": "I ran across this issue with @dscape while debugging a test that never seemed to get picked up by nock, even when pasting in the recorded code.  After simply removing the port from the recorded code, everything worked as expected.  I will try and get a patch together for port support if this is something you would like to support in this module.\n. After debugging, I am pretty sure that this is only an issue when the request is generated from the \"request\" node module, when passing the URI as a string.  This interaction seems to be broken somehow.  Still looking, but not likely a problem with nock.\n. ",
    "tiagocpontesp": "There might be a regression here!\n. Actually it seems like there's an issue with the recorder feature:\nhttps://gist.github.com/tiagocpontesp/9814954\n. ",
    "fent": "Yes!\nThanks @pgte :)\n. Could not reproduce with this\n``` js\ntap.test('multiple chained requests', function(t) {\n  var url = 'http://localhost:3000';\n  var scope = nock(url)\n    .get('/')\n    .replyWithFile(200, __dirname + '/../assets/reply_file_1.txt')\n    .get('/')\n    .replyWithFile(200, __dirname + '/../assets/reply_file_1.txt');\nmikealRequest(url, function(err, res, body) {\n    t.equal(res.statusCode, 200);\n    t.equal(body.toString(), \"Hello from the file!\", \"response should match\");\nmikealRequest(url, function(err, res, body) {\n  t.equal(res.statusCode, 200);\n  t.equal(body.toString(), \"Hello from the file!\", \"response should match\");\n  scope.done();\n  t.end();\n});\n\n});\n});\n```\n. I hadn't noticed the API for it had changed a bit from v0.6 to v0.8\n. ",
    "ewoutmeyns": "Important to note is that the same code, but with an external host, works perfect:\n``` javascript\nhttp = require 'http'\nnock = require 'nock'\noptions = \n  host: 'www.google.be',\n  port: 80,\n  path: '/'\nhttp.get options, (error, reply) ->\n  console.log error\n  console.log reply\n```\n. Thank you pgte & deitch for working out a solution!\n. ",
    "deitch": "+1. I have the exact same problem, just killed an hour+ looking for it in other libraries.\nHappy to take a workaround...\n. FYI, problem first appears in 0.10.6. I tried everything from 0.10.1 (where it used to work for me), up to 0.10.8, and it appears with 0.10.6\n. And one more for you: It only occurs when you specify a port other than 80 on the http.get. Specifying port 80 or no port works:\nvar http = require('http');\nrequire('nock');\nhttp.get({host:\"localhost\"}, function(res) {\n  console.log(\"NOPORT response: \" + res.statusCode);\n}).on('error', function(e) {\n  console.log(\"NOPORT error: \" + e.message);\n});\nhttp.get({host:\"localhost\",port:80}, function(res) {\n  console.log(\"PORT80 response: \" + res.statusCode);\n}).on('error', function(e) {\n  console.log(\"PORT80 error: \" + e.message);\n});\nhttp.get({host:\"localhost\",port:81}, function(res) {\n  console.log(\"PORT81 response: \" + res.statusCode);\n}).on('error', function(e) {\n  console.log(\"PORT81 error: \" + e.message);\n});\nWill give the following output:\nPORT81 error: getaddrinfo ENOENT\nPORT80 response: success\nNOPORT response: success\nIt appears to have something to do with commit 8797e28aa263142999f9939cf1d1010f413853c0\n. I got it. It is that one. And the problem is in intercept.js LL42-64 or LL 93-134.\nHere is what is wrong. In line 93-134 (or so), http.request is overridden. Makes sense. Then nock checks if it has interceptorsFor given the options. If it finds, it uses those, else it just launches the oldRequest.\nBUT: if it is anything other than a non-standard port (http:80 or https:443), it changes the original options object. So if options was the first part, it transforms to the second part\n{host:\"localhost\",port:80} -> {host:\"localhost\",port:80}\n{host:\"localhost\",port:81} -> {host:\"localhost:81\"}     // here is the problem\nIt then finds no interceptor and passes the request on to oldRequest, but it now changed the original options.\nWhat it should do is duplicate the options, then modify those, so that the original stays.\n. Speedy!\nStill got a different bug. Look at intercept.js L69: \nconsole.log('basePath:', basePath)\nI don't think you want that console.log in release... :-)\n. No prob. Putting in.\n\"nock\":\">=0.11.5\"\nnow.\nOn Mar 28, 2012, at 11:05 AM, Pedro Teixeira\nreply@reply.github.com\nwrote:\n\nOops, thanks for noticing it, removed in nock v0.11.5.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/flatiron/nock/issues/52#issuecomment-4751270\n. Pleasure. Glad I was able to find it and proffer a solution, rather than just complain, \"it doesn't work!\" :-)\n\nJust tested 0.11.5 and works great.\n. Ok, true, but it seemed silly to do a whole clone/fix/pull just for that.\nWell, maybe not; next time... :-)\nOn Fri, Mar 30, 2012 at 9:22 AM, Pedro Teixeira <\nreply@reply.github.com\n\nwrote:\nYes, that type of report is great, helped a lot.\nThe only best thing is a pull request with the fix ;)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/flatiron/nock/issues/52#issuecomment-4839116\n. \n",
    "balnagy": "Possible fix:\nfabff3415ea1e6d1b2e214bd67f893999f49bfdc\n. It shouldn't be required to pass response body.\nExample:\njavascript\n  var scope = nock('http://www.google.com')\n     .post('/form')\n     .reply(200);\n. ",
    "jergason": "Awesome! I may take a whack at it next week if you haven't started. \nSent from my iPhone\nOn Apr 27, 2012, at 3:45, Pedro Teixeirareply@reply.github.com wrote:\n\nYes, there definitely is, but I won't have time for this during the next couple of weeks at least.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/flatiron/nock/issues/62#issuecomment-5378172\n. \n",
    "jeromegn": "This one works well: https://github.com/assaf/node-replay\n. ",
    "prabirshrestha": "any updates on this feature?\n. ",
    "scottkf": "I haven't been able to reproduce is separately either, maybe there's something wrong in the test suite, I'll check again.\n. I'm using filtering path as well: \ncoffeescript\n  nock('http://localhost:3000')\n        .filteringPath(/.*/, '*')\n        .get('*')\n. If I can reproduce this I'll reopen\n. ",
    "AbdullahAli": "I think it is because you call: .replyWithFile(__dirname + '../support/example.html') with 1 argument (needs two arguments, not 1). ",
    "andreareginato": "Yes, I'm trying to test the proxy. I call it (running on :8000) and I want to intercept the underlying service which is called (running on :3000). I mocked :3000 but it isn't catch. \n. No, the proxy is independent and let it running as another process. Then I\nrun the test suite.\nIf I try to catch the :8000 request it works fine, but not with the :3000.\nThanks for your time.\nOn Sat, Aug 18, 2012 at 1:11 AM, Pedro Teixeira notifications@github.comwrote:\n\nIs the proxy being run on the same process as the test?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flatiron/nock/issues/73#issuecomment-7837867.\n\n\nAndrea Reginato\nLelylan | reThink your house\nhttp://lelylan.com\n. Thanks a lot for your explanation.\nOn Sat, Aug 18, 2012 at 10:34 AM, Pedro Teixeira\nnotifications@github.comwrote:\n\nOK, so that's why it doesn't work.\nNock mocks http requests, but you have to be on the same process to expect\nthat to be mocked.\nhttp://en.wikipedia.org/wiki/Mock_object\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flatiron/nock/issues/73#issuecomment-7842885.\n\n\nAndrea Reginato\nLelylan | reThink your house\nhttp://lelylan.com\n. I've been investigating. The only working solution I've been able to make was to totally ignore the body request.\nThe following code works, but it's not useful to me as I can't check what I want.\njavascript\nrequest = nock('http://mqtt.lelylan.com')\n         .filteringRequestBody(function(path) { return '*' })\n         .put('/physicals/1', '*'})\n         .reply(202);\nNow, I tried several combinations to make this code work, but I didn't have good results. Follow my notes.\n1) If I use the #matchHearder method nock does not work.\njavascript\nrequest = nock('http://mqtt.lelylan.com')\n         .filteringRequestBody(function(path) { return '*' })\n         .matchHeader('X-Physical-Signature', signature)\n         .put('/physicals/1', '*'})\n         .reply(202);\n2) If I return back a JSON (instead of '*') nock does not work.\njavascript\nrequest = nock('http://mqtt.lelylan.com')\n         .filteringRequestBody(function(path) { return {'properties': {}} })\n         .put('/physicals/1', {'properties': {}})\n         .reply(202);\nThanks a lot.\n. ",
    "austinbirch": "I was just about to report what I think is the same issue.\nnock version - 0.13.3\n(https://github.com/mikeal/request) request version - 2.11.1\nNode version - 0.8.8\nI\u2019ve posted the test code and the output below.\n``` JavaScript\n(function() {\n  var request = require('request');\nvar makeRequest = function(cb) {\n    var options = {\n      \"uri\": \"http://www.google.com/\"\n    };\nrequest(options, function(err, res, body) {\n  cb(err, res, body);\n});\n\n};\n// this outputs 'res.statusCode = 200', actually hitting the server\n  makeRequest(function(err, res, body) {\n    console.log('res.statusCode = ' + res.statusCode);\n// now, afterwards, try whilst using nock\nmakeRequestWithNock();\n\n});\nvar makeRequestWithNock = function() {\n    var nock = require('nock');\n    var scope = nock('http://www.google.com').get('/').reply(301);\n// with nock in place, this causes the error\nmakeRequest(function(err, res, body) {\n  console.log('res.statusCode = ' + res.statusCode);\n});\n// outputs 'false'\nconsole.log('scope.isDone() = ' + scope.isDone());\n\n};\n})();\n```\noutput:\n``` Shell\nres.statusCode = 200\nscope.isDone() = false\n/Users/austin/Development/nock-request/node_modules/request/main.js:517\n    if (response.connection.listeners('error').indexOf(self._parserErrorHandle\n                            ^\nTypeError: Cannot call method 'listeners' of undefined\n    at OverridenClientRequest. (/Users/austin/Development/nock-request/node_modules/request/main.js:517:29)\n    at OverridenClientRequest.EventEmitter.emit (events.js:88:17)\n    at end (/Users/austin/Development/nock-request/node_modules/nock/lib/request_overrider.js:206:11)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n```\n. I\u2019ve done a little digging, and I think I have located the breaking changes.\nThe last version of request available in npm that doesn\u2019t throw this error is '2.9.203'\nIt seems that all of the commits causing this issue are included in this pull request:\nhttps://github.com/mikeal/request/pull/293\nWhen following is called, response.connection is undefined.\nJavaScript\nself.req = self.httpModule.request(self, function (response) {\n(https://github.com/mikeal/request/commit/07135d542ea6c4578c26310ae0ffe6f2c6933b7d#L0R510)\nThe error is thrown in request when they try to attach/check for listeners on response.connection.\nI\u2019m not really entirely sure what the best approach to fixing this is (I\u2019m not very familiar with either project's internal code), but I thought it might make things a bit easier to figure out.\n. Thank you.\n. ",
    "mgcrea": "Hi @pgte, it's really basic, and i get the issue even with http (but there is a 301 to https).\n```\nbeforeEach(function() {\n    player = new Player({\n            ...\n    });\nhost = 'http://dev.carlipa-online.com';\nscope = nock(host)\n    .get('/pull/debug:1', '*')\n    .reply('404');\n\n});\n```\n. According to this stackoverflow question\n\nI've seen this happen when your host (which you pass in as httpaction) has the scheme (so \"http://\") in front of it. Your host should strictly be the domain like \"www.google.com\" not \"http://www.google.com\" or \"www.google.com/hello-world\" or \"http://www.google.com/hello-world\".\n. This does work for me!\n\nI'm using jasmine-node so it may come from this.\nI had not use the request module before.\nMy call looked like :\nthis.request = https.request(this.requestOptions, function(response) { ....\nI'll try to provide a better unit test to reproduce it.\n. The code below does not work & returns :\nError: Nock: No match for HTTP request GET /pull/debug:1\nCode :\n```\ndescribe('player', function () {\nvar player, host, scope;\nbeforeEach(function() {\nhost = 'http://dev.carlipa-online.com';\nscope = nock(host)\n    .get('/pull/debug:1', '*')\n    .reply('404');\n\n});\nit('should be able to perform a pull', function(done) {\n    request('http://dev.carlipa-online.com/pull/debug:1', function(err) {\n      console.log('got resp', arguments);\n    });\n    setTimeout(function() {\n        scope.done();\n    }, 2000);\n});\n});\n```\n. Thanks for spotting that out, it worked. This is not working (got close to the real call) : \n```\nbeforeEach(function() {\nhost = 'https://dev.carlipa-online.com';\nscope = nock(host)\n    .post('/pull/debug:1')\n    .reply('404');\n\n});\nit('should be able to perform a pull', function(done) {\n    /request('http://dev.carlipa-online.com/pull/debug:1', function(err) {\n      console.log('got resp', arguments);\n      done();\n    });/\nvar postData = querystring.stringify({foo: 'bar'});\n\nvar requestOptions = {\n    host: 'dev.carlipa-online.com',\n    port: 443,\n    path: '/pull/debug:1',\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': postData.length\n    }\n};\n\nvar request = https.request(requestOptions, function(response) {\n    console.log('got resp', arguments);\n    done();\n});\nrequest.write(postData);\nrequest.end();\n\nsetTimeout(function() {\n    scope.done();\n}, 2000);\n\n});\n```\nBut no getaddrinfo error so far.\nJust Error: Nock: No match for HTTP request POST /pull/debug:1 foo=bar\n. Yep, just found out that. Will try to produce a clean test case for the getaddrinfo error before bothering you again. Sorry for that & thank you for your help.\n. ",
    "dpup": "Ignore me.\n. ",
    "stiang": "Any chance this could get merged? We use get() extensively, and it would be nice to be able to mock up the requests with nock without changing any existing code.\n. What I experienced today was that nock intercepted the .get() call, but \"options\" in intercept.js/interceptorsFor becomes a string when get is used, which causes the method to fail (about no split method for undefined on this line: options.host.split(':')[0];). \nI\u2019m using Yasumoto\u2019s patch now, and it works perfectly for me.\n. Just to be clear, this happens only when you use a string (URL) argument for .get(), instead of an options object.\n. ",
    "Yasumoto": "I'll need to check later today to recall/paste what happened, but I believe nock didn't intercept .get() calls.\n. Correction, stiang is right on the money, the request was intercepted just fine.\n. ",
    "cjroebuck": "I setup the nock interceptor before each test so don't think it's that. \nIt's something to do with how restify modifies the node http request object, it's probably out of the scope of nock to try and fix it.\n. ",
    "jasonav": "I'm having the same problem. Nock is not working for the restify json client. I tried adding .log(console.log) but nothing was logged. It just hangs. You should be able to repro this quite easily. \n. ",
    "lblazecki": "Nock can't be used with Restify now.\nProblem is when Nock is mocking http.request (or https) and returning what is defined in nock.response.\nIt is based on assumption that clientRequester is calling something like this : \nvar moduleCallback;\nvar req = http.request(options, function (res) {\nmoduleCallback();\n});\nreq.end();\nNock knows when req.end is called. \nBut Restify (see http_client.js) is calling : \nvar moduleCallback;\nvar req = http.request(opts, function onResponse(res) {\nreq.emit('result', (err || null), res);\n});\nreq.once('socket', function onSocket(socket) {\nreq.once('result', function () {\nmoduleCallback();\nreq.end();\n}) \n});\nSo socket must be emitted before callback from http.request is called.\nI don't know how this can be done. (I don't know how to access req object or attach new socket to it)\n. ",
    "lefnire": "I see.. I didn't quite understand the \"used interceptors\" bit the first time I read it. I have to re-setup each nock if I've already used it once before.\n. Incidentally, is there an option that can be passed to disable this behavior? Maybe it's bad testing architecture on my part, but I'm grinding my gears trying to get my tests to work with the \"used interceptors\" requirement.\n. For example, I have to call a twitter resource multiple times to break up too many requested objects into multiple GETs. It's called multiple times in the library, and I can't \"inject\" nock between those calls to re-set that interceptor between each call.\n. ",
    "sam3k": "This issue gets me every time when using with Jest. This time, it got me because the url ended up with a comma \",\" as a result of a dynamic url that can take a join array by comma. Simply checking for the length of the array and ommitting when only one element in the array, solves the issue. \nIs there a way to throw a comparison error/warning when the URL does not qualify?\n\nError: Nock: No match for HTTP request. Make sure URL does not end in \",\" or \"/\" etc.\n  Expected: /my/url?s=sts\n  Received: /my/url?s=sts,\n\nUpdate: using with Jest.*. @gr2m Sure, that's cool. First time using runkit tbh; hopefully got it right. Here it is: https://runkit.com/sam3k/5a048e1d8658b00011f9e174\nThings to note:\n It will fail when const stocks = ['goog'] and path: '/baz?s=goog,', (Ends with comma)\n but it will pass when const stocks = ['goog', 'gm'] and path: '/baz?s=goog,gm', (Doesn't end with comma). Okay, i shall try! . @gr2m let me know if you think this is a suitable PR for this. Basically, i update the message to compare the header received, with what is expected. \nI updated the tests but not sure why I'm getting:\n```\n.\n.\nSkipped: 1 ./tests/test_browserify.js no tests found\n.\n.\ntotal ............................................. 787/788\n787 passing (19s)\n  1 pending\n```\nI did not touch that file.. ",
    "gr2m": "@sam3k could you please create a follow up issue with a test that reproduces the problem? Creating a runkit notebook like https://runkit.com/gr2m/59ff5289617b520016eb98f9 is a big help for us to help you faster, ideally help you to get a pul request going that solves your own problem \ud83d\udc4c . no news I\u2019m afraid. If anyone wants to work on it let me know, happy to start a new repository on the @node-nock organization for it. As Pedro mentioned, this would be a whole different module. I\u2019m all for splitting up nock into smaller modules and reusing the logic for mocks/interceptors across http & websocket mocking. But it will be a rather big commitment, it would need some dedicated time. I can help facilitate the work but can\u2019t do it myself. I second what Pedro said back in 2015 :). @peteratticusberg Hey Peter, I\u2019m currently maintaining nock but still finding my ways around, happy to help. \nI think encoding of query parameters is out of scope of nock, as different request libraries handle encoding differently ... I\u2019m reluctant to add another feature that we\u2019d need to document and support for forever. If you feel strong about it, can you create a separate issue and we see if more folks run into problems that the additional API would help with? Maybe the right solution for this is a better documentation?. I know what you mean, thanks. I\u2019m adding the .setQuerySerializer() at this point though. It\u2019d be easy to add, that\u2019s not the problem, it\u2019s all about maintainability & support in the long run, which is the biggest challenge nock has right now, but usually not what users of the project ask for, so i have to stand up for it :). confirmed, .query(true) fixes the issue, you are the best <3 <3 <3\n. Thanks so much for the quick help @pgte, it helped a lot!\n. @richardscarrott can you create a new issue please and we take it from there?. Hey folks, I don\u2019t see webpack compatibility to be really in scope of the projoect. If someone wants to take this one and send a pull request to resolve what problem you have, I\u2019d be happy to accept it given that it\u2019s not adding  a lot of complexity and that it has tests that make sure it won\u2019t break again in future. Otherwise I recommend we close & lock this issue.\nWhat do you think @paulmelnikow?. \ud83d\udc4b @hugoduraes Pedro is not maintaining nock any longer, I\u2019m trying my best to help out (and onboard new maintainers hint hint). I\u2019m on vacation right now, I can look into it after April 22. If anyone would like to send a PR, happy to review it after unless someone beats me to it :). who ever wants to tackle this issue, this library might be useful: https://www.npmjs.com/package/caseless. @LinusU can you start a PR with a failing test and we take it from there?. me too! . PR welcome @LinusU  :). Thanks Sunil! I\u2019d love to get trough the open issues and get close obsolete ones or help out where questions are still open / relevant. I\u2019m very occupied with family myself right now, but if you\u2019d like to help out, I\u2019d be happy to invite you as maintainer to help with triaging. @RichardLitt can also help to document the process to make it easier for others to help out triaging. I think we can close this one?. I agree, let\u2019s leave the issue open.\nWe could release this as a feature by supporting something like require('nock/setup'). thanks @paulmelnikow \ud83d\udc4d . @THoisington the best next step would be to create a notebook on RunKit that reproduces the problem, e.g. like this one https://runkit.com/gr2m/node-nock-nock-768\nOnce we have that you (or someone else) can use the code to create a test and start a pull request with it. And then finally someone can use that (unless you want to try of course) to figure out how to get the failing test pass :). @mhelvens Agreed.\nBut I don\u2019t see the use case for spying. Unless someone can share some use cases, I\u2019d suggest we close this issue as won\u2019t fix :). for that specific use case, you can define custom registries based on package scopes in npm:\nhttps://docs.npmjs.com/misc/scope#associating-a-scope-with-a-registry. Yeah I see your use case. I\u2019d suggest to look if there is another library for that out there or make one yourself, I don\u2019t see that being added anytime soon to nock. It\u2019s out of it\u2019s scope and I\u2019m very reluctant to add more features before making it more maintainable.\nBut we can leave the issue open and see if other folks have more use cases.. @mhelvens yeah that sounds like a good idea, can you get a pull request going for it?. I tested the code myself and was not able to reproduce it with the latest nock version. Thanks for checking @n30n0v \ud83d\udc4d . I tried to reproduce the problem based on the original comment\n```js\nconst assert = require('assert')\nconst http = require('http')\nconst nock = require('nock')\nnock('http://zombo.com')\n    .log(console.log)\n    .get('/')\n    .reply(200, 'Ok')\nhttp.get('http://zombo.com/', (response) => {\n  let data = '';\n  response.setEncoding('utf8');\n  response.on('data', (chunk) => { data += chunk; });\n  response.on('end', () => {\n    assert.equal(data, 'Ok')\n  })\n})\n// logs \"matching http://zombo.com:80/ to GET http://zombo.com:80/: true\"\n```\nHere is a RunKit example running this code, showing that it behaves as expected:\nhttps://runkit.com/gr2m/59fe139cb52750001140340b\n@tudorgergely @travi in case you still run into an issue, can you please provide a minimal, working test case  like the one above so we can reproduce the problem? Otherwise there is not much we can do, I\u2019m afraid. hey folks, nock.restore() it's documented at https://github.com/node-nock/nock#restoring\nBut I agree we could add a note to the paragraph here: https://github.com/node-nock/nock#recording. looks good, can you start a pull request? I think instead of 4 backticks you only need 1 to get the inline code highlight :). That\u2019s interesting, I didn\u2019t even know about Node\u2019s timers module. I agree we should get rid of using the module. This would make a very nice first-timer issue. Thanks @chentsulin \ud83d\udc4d . hey friends, I'm happy to look into this issue if someone creates a repository with a test case. Another option is to create a notebook on https://runkit.com :) . I tried to reproduce the problem but no luck:\nhttps://runkit.com/gr2m/node-nock-nock-748/2.0.0\n@bcallaars can you confirm? It might be a problem with superagent. I try to avoid using other libraries than nock when replicating errors.. It\u2019s most likely an issue with SuperAgent. I think unless Joseph found out anything else, we can close this issue. thanks! Happy to reopen if anyone continues to investigate and finds an issue with nock. thank you all \ud83d\udc90 . Thanks for checking @n30n0v, much appreciated! I confirmed that replyWithError works as expected.\n@BrunoQuaresma the problem might have been that depending on your request library, response is not set at all. replyWithError is usually a 500 error. When you use Node\u2019s built-in http library, the error is triggered on the request. Here is my test code: https://runkit.com/gr2m/59ff5289617b520016eb98f9. Thanks for checking n30n0v \ud83d\udc4d . @tedeh snarky comments won't get you anywhere. I understand your frustration, but please refrain from doing it on any open source project, ever <3. Thanks Tedde, it's already merged :) \nhttps://github.com/node-nock/nock/pull/862\nBut the build failed so it's not released yet, if you could have a look at it that would be much appreciated: https://travis-ci.org/node-nock/nock/builds/340676385. >  I don't know how nock handles this kind of incompatibility\nMe neither :) I took on maintainership recently. If this is still a problem and you\u2019d like to help out resolving it, it would be great if you could send a pull request with a test or create a minimal reproducable testcase like this: https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4\n\nBTW, nock isn't able to work with node v6.8.0+ http.request timeout. I'll submit an issue later on.\n\nThanks @aleung, if you could add a test, that\u2019d be \ud83d\udcaf . could you add a test for request v2.71.0 as asked above?\n\nBecause this work causes issues previously I'm going to ask that you add versioned tests for request v2.71.0 in /tests/versioned, to defend against regressions.. I\u2019m still new to the project, but I think we could create a new folder here: https://github.com/node-nock/nock/tree/master/tests/versioned called request-2.75.0 for example, with a package version that pins that version in there. Then run npm run integration to test. That way we can make sure that nock itself is working with both request prior and after 2.76. Does that make sense? \n\nThanks for your patience, much appreciated :). @aleung could you please check why the tests are currently failing in Node 4 & 6?. Finally got around to fix the problem with the browserify tests (well, we removed them :D). I've rebased your PR on latest. Very sorry for the delay @aleung . I think I would remove these library tests altogether:\nhttps://github.com/node-nock/nock/issues/832 /cc @ianwsperber \nInstead, if folks are interested to monitor compatibility with the request library of their liking, they can create separate repositories, pin the nock version, and have greenkeeper make sure that their tests are always run against latest nock. If something breaks they can help fix it.\nI'm trying to make nock easier to maintain and that is quite a burden we put on who ever is maintaining nock right now. Unless there are any objections I'll move forward and remove these tests and also install the latest request version instead of pinning the version, and have greenkeeper make sure for us that our tests pass as new versions get released. this PR is good to go for me unless there are any objections. I'll remove the versioned test in another PR and give people more time to object. I planned to add standard, would be be up for helping with that?. I agree. #885 is a great first step \ud83d\udc4d If you could rebase it, that\u2019d be great. I\u2019ll merge it in. Hey @paulmelnikow thanks for helping out with answering issues and reviewing Pull Request! I\u2019d be happy to make you part of the maintainers team if you like? That would allow you to actually review & merge pull requests and create your own pull requests from branches instead of forks. No worries, there are no expectations, it\u2019s all volunteer work and life happens. Just keep us posted :) And us know if you have any ideas on how to move the project forward towards a more open, contributor friendly project :)\nI\u2019ve invited you, you should see the notification on https://github.com/node-nock. looks like it\u2019s currently failing due to a linting error :). the current lint errors are legit, I\u2019m looking into it. Let\u2019s keep it in CI, but there are ways to speed things up that we can look into later :). ah got it, only seen the pre-commit hook, it doesn\u2019t work for me anyway. I\u2019d remove all the commit hooks, I\u2019ve seen people had so many struggle with them, it\u2019s not worth the pain. good to go from my side :) :shipit: \nMaybe squash the commits when merging. Hey @gurpreetatwal, we\u2019ll have a remote hackathon on Friday, wanna join us and work on this? You can comment here #1269 . @gurpreetatwal are you still interested in working on this? Anything we can help with?. @reconbot can you pass a function to the retry option that checks for the NetConnectNotAllowedError error name and use that as a way to not retry the request?. I don\u2019t understand what you mean Francis :) Is this PR still relevant for you or can we close it? And if it is, can you explain in more detail?. I\u2019m okay merging it. Could you rebase your PR on the latest master?. I\u2019ve rebased the PR on the latest master.\nI agree with @paulmelnikow that the test seems indirect, but it very much follows the conventions of the other tests around it. About time to clean them up for good, but that\u2019s out of scope. Let\u2019s wait to see if CI is happy and if it is, let\u2019s merge it in. sorry for the delay folks, I\u2019ll release it as a new version right away. released in nock@9.0.22. thanks y\u2019all \ud83d\udc4d . @mikspi can you please create a follow up issue with a reproducable code example? Even better would be a notebook on https://runkit.com/ \ud83d\udcaf\ud83d\udc4c that increases the likeability of folks helping you get your bug fixed sooner. This change introduced a bug that surfaced at https://github.com/hoodiehq/hoodie-store-server-api/issues/21, I\u2019m investigating. Actually the specs are wrong and your fix showed that for the first time \ud83d\udc4f . @CodeMan99 welcome to open source, it never is perfect, but we are all in this together :) we are all volunteering our time here, please keep that in mind \ud83e\udd17 . No worries :) I understand your frustration, it caused the same for several of my projects and caused some work. We\u2019ll soon automate releases with better changelogs, that should help a little. . Hey @igalic, if you (or anyone else) are still interested in helping out to maintain nock, give us a holler! Open a new issue or ping me on twitter: https://twitter.com/gr2m. ooops just fixed that today via #968 sorry :(. thanks @michaelnisi & @paulmelnikow . FYI we now have https://github.com/nock/nock/issues/1077 and could use some help. @n30n0v could you help us out fixing a regression from your PR? See #1003. @jinwoo welcome to the team :) It won\u2019t fixed itself I\u2019m afraid, but pull requests with tests are welcome. You can get one started with a failing test only and we can take it from there. fixed via https://github.com/node-nock/nock/pull/1136. I can\u2019t reproduce it in Node v8.4.0 and nock@9.0.14. I get NetConnectNotAllowedError: Nock: Not allow net connect for \"jsonplaceholder.typicode.com:80/posts/1\" as expected.\nMy guess is that it was fixed either in a node or nock update. Can you confirm?\nIf you still have the issue we can reopen and further investigate it. fixed via https://github.com/node-nock/nock/pull/971. it works in Node v8.4.0 for me. Can you update to the latest version? If not, can you please provide an error? I don\u2019t think the nock maintainers fix a problem with a node version that has been fixed since for you, if you want that fixed, I recommend to send a pull request yourself :) Otherwise I\u2019d suggest to close the issue. I\u2019ll merge this in as there have been no objections in two weeks and it has a test et all :). done via https://github.com/node-nock/nock/pull/973. I\u2019ve made two teams\n\nMaintainers: for everyone who wants to remain active as maintainer\nAlumni: hall of fame :)\n\nAlumni have read-only access. I\u2019d move accounts to Alumni team as folks become inactive. It\u2019s easy to move y\u2019all back to Maintainers if you want to help out again. We would love a pull request to make the functionality more clear in the README \ud83d\ude4f . it\u2019s a minor hotfix so gonna self +1. Thanks for reporting Ioannis!\nI just took on helping maintaining nock and am currently the only one. If you could create a pull request with a test case, I\u2019d be happy to merge it, but can\u2019t help otherwise right now.\nMaybe someone else runs into this or can help you out \ud83d\ude4f . thanks @brian-poncho! It's a great PR, I just won't have time to review it for a week or two. If someone else could help out and give it a review, that'd be great :). what is weird is that the test in https://github.com/node-nock/nock/pull/970/commits/a9e55ee890817af750f02e5a4c12b24e49ffd6c2 does not fail when run with npm test. But it does when I set {only: true} on it and run it with TAP_ONLY=true ./node_modules/.bin/tap tests/test_intercept.js (without the fix in this PR).\nThat\u2019s a bit worrying .... Thanks for the review!\nYeah this is worth investigating. To be fair, I should not have merged https://github.com/node-nock/nock/pull/970, I followed my own best practise to push the test commit first to make sure it\u2019s failing but then it actually passed but I didn\u2019t catch that :D . I\u2019ve tested the change with the tests intorduce in https://github.com/node-nock/nock/pull/170/files (I\u2019ve set them to only: true to make sure). They all still pass. \nAny objections against merging this PR? \n@paulmelnikow @ierceg . oops sorry I merged my own WIP commits \ud83e\udd26\u200d\u2642\ufe0f I fixed it in master . I run into it myself, but that\u2019s a feature, not a bug. As you mention, you can use a function to partially match a body. \nI\u2019ll close the issue because it\u2019s not an open bug. Thanks @nielskrijger, I\u2019ve created a follow up issue to make the documentation more clear:\nhttps://github.com/node-nock/nock/issues/982\nPull Request much appreciated <3. Thanks @albertogasparin, _.matches is really nice, I haven\u2019t used that one yet!\nI made a RunKit snippet at https://runkit.com/gr2m/node-nock-nock-982 using _.matches and vanilla JS. I\u2019d suggest we add the vanilla JS one to the README\nWould love a PR for that :) . Hi Miguel, I think you\u2019ll have a better chance to get help when you ask your question on StackOverflow: https://stackoverflow.com/questions/tagged/nock, it\u2019s better suited for \"How do I xyz\" questions.\nI\u2019m not exactly clear if that\u2019s what you asking for, but this is how you can access paths and headers of the mocked request\n``js\nconst nock = require(\"nock\")\nconst mock = nock('https://example.com').get(/user/1`)\n  .reply(200, {ok: true});\nconst mockedRequest = mock.keyedInterceptors['GET https://example.com:443/user/1'][0]\nconsole.log(${mockedRequest.basePath}/${mockedRequest.path})\nconsole.log(mockedRequest.headers) // response headers\nconsole.log(mockedRequest.reqheaders) // request headers\n```\nIf it\u2019s not, can you please create a question on StackOverflow? You can link to it from here, I\u2019ll be happy to help you out there.. thanks for brining that up, it\u2019s fixed now. I\u2019ll setup semantic-release soon, so that won\u2019t happen again. hey @maxGreenblatt I recently join the nock maintainers team and still finding my ways around the code, so I can\u2019t tell why it\u2019s done as it is. Could you check out the nock repository, run tests to make sure they all pass, then comment that line out and see if it breaks any tests? That\u2019s how I usually find out why a code is there :). thanks for checking!\nThat means that the tests are not as good as they should be to help with issues like yours, this will require a bigger investigation. Maybe @ierceg can help? \nI\u2019ll be out the next two weeks but hope to have more time for the rest of October. If you could do some more research to find out why the code has been added, that\u2019d be very helpful. Until then I suggest you fork the repo, make your fix, and install nock from your fork until we have it figured out. Hey @surajbyanju it\u2019d be great if you could start a PR with a failing test, then we can use that as a base to investigate and resolve the problem. Could you try to do that?. anything to help us reproduce your bug quicker makes it more likely for us to help you out. \nCould you create a GitHub repository that I could just clone, run npm install and node index.js to see the problem? \nThanks a lot for your patience . @jonjaques I don\u2019t think that\u2019s the problem, but thanks for having a look at it. what would be the most helpful is to create a notebook on http://runkit.com/ which reproduces the problem you experience with the minimal amount of code. Here is an example: https://runkit.com/gr2m/59ff5289617b520016eb98f9. Hey @surajbyanju thanks a lot for taking the time. The gist is not that helpful unfortunately, Ideally I would be able to git clone the gist, run npm install and sth like node test.js, that way I can only look at the code.\nBut I tried to reproduce your problem by creating a runkit as described above:\nhttps://runkit.com/gr2m/5a189525ef84c100129121c9\nand from what I tell, .log() is called in both cases. In your bug report you said you use \"nock\": \"^9.0.21\", which is not the latest version. COuld you please upgrade and test again?. hey @travi could you setup a gist or a repository to recreate the issue? \nHappy to accept a PR, too :). nock is hooking into the http core module of Node.js, if you spawn a separate process, it will not work. \nI\u2019m curious myself what the best practise would be, I want to write test for a CLI tool myself.\nI thought about creating a minimal wrapper that would only require the CLI\u2019s binary and add the mocking via nock. So in your case you would create sample-fetch-mock.js instead of the spawn-test.js which would look sth like this\n```javascript\nvar nock = require('nock')\nnock('http://somesite.com').get('/test')\n  .reply(200, {\n    hello: 'gnar'\n   })\nrequire('./sample-fetch')\n```\nWould that work for you?. I honestly don\u2019t know. I think \"How do I XYZ\" kind of questions are more likely to get answers on Stack Overflow. I\u2019d suggest you ask there, link from this issue and then close it?. fixed via #993. Released as nock@8.2.2. Thanks :) . > Oh it appears its just node.js 0.10 that is failing, does this need to be supported? Also if these changes failed 8.2.1 probably failed as well.\nNo they don\u2019t, see the supported versions at https://github.com/node-nock/nock#node-version-support\nYour PR is great as is though, I\u2019ll make a follow up PR which removes testing the old Node versions and any references to them in the code. . Pull requests welcome \ud83e\udd17 . Thanks @rash805115 for the test cases. I can have a look at it tomorrow. If someone else wants to have a look before me, please be my friend :) . I\u2019m looking into it right now. I took on maintaining nock recently and am not 100% familiar with the code myself yet. I was able to reproduce the problem thanks to your test case \ud83d\udc4d . so turns out that nock.restore removes the http interceptor itself. When you run nock.isActive() after calling nock.restore() it will return false. So you need to run nock.activate() before using it again.\nI\u2019d suggest we put it into the readme, what do you think?. Yeah I also just needed cleanApp so far.\n@rash805115 would you like to send a pull request to add documentation for .isActive() and .activate() and also document that .restore() deactivates nock and that it needs to be activated again if you want to use it again?. Yes. For each build on the master branch, after all tests passed, it will see if there are relevant changes that require a new release. If there are, it will calculate the new version, publish to npm, create a fit tag, create a GitHub release, calculate changelog a and put them into the GitHub release notes. Let me know if you have any questions :). see my other pull request #1000, I\u2019ve added a \"Commit Message conventions\" section :). I heartily agree, I turn it off on all my projects.. If you could try sending a PR with a test & a fix, that\u2019d be much appreciated\nMaybe you can narrow down the bug without using AWS?. can you send a pull request with your changes and we discuss there? \n\nthe whole code base seems pretty patch-worked tbh\n\nI know :( I only recently joined as maintainer, it doesn't make my life easier. I want to clean up the code base very badly, but am looking for more folks to help out. I'd probably organise a weekend to collaborate on this remote to split up work, let me know if you are interested joining :)\n\nSince the recorder seems to be the not-so-core-feature\n\nOne thing I want to look into is to split up the code base into nock core, the recorder and nockback. But yeah, gotta clean up the code base first and get 100% test coverage before doing massive refactoring like this. > I started failing tests these days if coverage < 100%\nI do this for new projects from the start. For a big code base like nock it will take a while, but it makes maintaining the project much easier once we fully trust our test setup\n\n@gr2m Created a pr here: #1012\n\nThanks! I\u2019lll check it out on Friday. thanks for the issue @eitah I was able to reproduce the problem. It worked at 9.0.22 for me, it seems like 9.0.23 introduced the problem, I\u2019m investigating. The problem was introduced in 4772df5 / #955 \nHere is a minimal test case to reproduce the error\n```js\nconst nock = require('.')\nconst https = require('https')\nnock('https://example.com')\n    .get('/')\n    .reply(200)\nhttps.request({hostname: 'example.com'})\n```. @eitah @n30n0v could you look into this, maybe send a pull request with a test so we don\u2019t break things again \u2764\ufe0f \ud83d\udcaf . fixed via https://github.com/node-nock/nock/pull/1006. I don't know myself. Could you provide a minimal code example that we can use to investigate? If you could have a look at the implementation yourself and see what would need to be changed, to would help us help you :). Thanks @brian-poncho for your great work on this, and thanks @n30n0v for the even simpler implementation, great team work \ud83d\ude4c \nThe fix is released via v9.1.3. Thanks @brian-poncho :). Thanks \nJust fyi I edited as per issue #659 to closes #659 in your pull request description, so that the issue gets closed automatically once we merged the PR, see https://help.github.com/articles/closing-issues-using-keywords. @ierceg please don\u2019t feel bad at all, this is all open source, we appreciate all your help, at your own convenience :) Thanks for creating the follow up issue, it's great \ud83d\udc4d . Thanks a ton for this great issue, I\u2019m very sorry it takes so long to get back to you. I usually use Fridays as my Open Source day but last week I\u2019ve been offline and this week I spent Friday catching up. So I\u2019ll have to ask for more patience, I won\u2019t get to it before Friday myself.\nIf someone wants to give this a go, please do so, happy to review PRs on Friday and give guidance to find your way around. nock could definitely use more contributors, and this seems like a great starting point.\n@sam3k  maybe you want to give it a try yourself?. > Skipped: 1 ./tests/test_browserify.js no tests found\nYou can ignore that it, it was like that before :) It\u2019s because of this line here https://github.com/node-nock/nock/blob/fa58493dbe0d4fb7b8cd275ed3f1df55a150c775/tests/test_browserify.js#L4\nYou PR looks great, thanks a lot :). I was able to confirm the bug, here is a test case: https://runkit.com/gr2m/5a126447bd34150012a19c01\n@thisdotrob wanna give this a try to fix yourself? . ahhh that makes sense, thanks :) Tricky one!. Hey @kevinburke can you check if https://github.com/node-nock/nock/pull/1067 fixes your problem?. Here is my test setup to reproduce the \"TypeError: Cannot read property 'status' of undefined\" error\n```js\nconst nockBack = require('nock').back\nconst request = require('supertest')\nconst express = require('express')\nnockBack.setMode('record')\nnockBack.fixtures = './fixtures'\nconst app = express()\napp.get('/', (req, res) => res.send('ok'))\nnockBack('local.json', (nockDone) => {\n  request(app).get('/').expect(200).then(nockDone).catch(console.log)\n})\n```\nThe problem here is that each time your run this code, a new available port number gets assigned. For example for me, first time I run it, it stored the fixture with \"scope\": \"http://127.0.0.1:60350\". Next time I run the code the assigned port number was 61859 hence the script failed with the nock error, as it disabled all unmocked requests.\nTo workaround this, you can listen to a fixed port, but then have to close the server manually.\n```js\nconst nockBack = require('nock').back\nconst request = require('supertest')\nconst express = require('express')\nnockBack.setMode('record')\nnockBack.fixtures = './fixtures'\nconst app = express()\napp.get('/', (req, res) => res.send('ok'))\nconst server = app.listen(4000)\nnockBack('local.json', (nockDone) => {\n  request(server).get('/').expect(200).then(nockDone).then(server.close.bind(server)).catch(console.log)\n})\n```\nThe TypeError: Cannot read property 'status' of undefined error is weird but seems to be a problem in supertest, not nock.\nLet me know if that helps, please reopen the issue or create a follow up one as you see fit. Could you please add a test for the change to make sure we don\u2019t break it again in future \ud83d\ude4f . thanks a lot!. I\u2019d happily review a PR but can\u2019t investigate it myself right now, I\u2019m afraid. thanks for reporting back what you problem was Paul, much appreciated. I agree, sorry that I missed that in my review. I have some time reserved on Friday to review other issues in nock. Always happy to onboard more contributors / maintainers if you are interested.. Hey @morrislaptop, I tried to reproduce the error with a minimal test case, but no luck https://runkit.com/gr2m/5a21ed4fdd45c20014ee7b71\nCould you please investigate if it\u2019s a problem with either etherscan-api? Also please make sure you test with the latest nock version, which is 9.1.2 right now. confirmed: https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4. Thanks for reporting the bug @Alex0007. Can you try to find a fix for it? I don\u2019t think anyone else will be able to work on it right now. \nAnyone who wants to work on it, just comment here to let us know, and please send add a test to your pull request \ud83d\ude4f . @felipellrocha The status is: the bug is confirmed, it\u2019s up for taking :) if you could send a PR with tests, that\u2019d be great. could you setup a minimal test case on runkit.com like this one? https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4 \nThat\u2019d help us to help you :) . I\u2019ll not be able to help out anytime soon. I wish I could but don\u2019t have time right now. But if you were to investigate the underlying problem and send a pull request with a tests, I\u2019d be happy to review and help get it merged.. @webdevua please use the \ud83d\udc4d emoji reaction on the issue, +1 comments cause a lot of noise for people subscribed to issues and make the discussion harder to follow. Thanks \ud83d\udc9d . it most likely is not a nock issue I\u2019m afraid. I had problems with the fetch polyfill myself in the past (it\u2019s a fantastic project though!). \nIf you can create a reproducible test case with just using nock, ideally on runkit like this one: https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4 that\u2019d be great. Otherwise I don\u2019t think we\u2019ll be able to help you out, I\u2019m sorry. can you add a full test case like https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4? \nTry to add https:// to the nock() call, maybe that helps already?. This should be a rather simple fix. If you or someone else can send a pull request with a test, I\u2019d be happy to review and merge it. thanks for checking @mvpowers. @DblK if this is still an issue for you, please make sure you have the latest version of nock. If you still can reproduce the problem then, please start a pull request with a failing test. yeah I\u2019m sorry that it slipped through. I\u2019d be happy to review a pull request \ud83d\udc4d . fair enough, thanks! I\u2019ll look into it myself at some point, it affects me, too. I\u2019m just busy with other things right now. @amejiarosario the error message is currently rather confusing, see https://github.com/node-nock/nock/pull/1029#issuecomment-354690111\nIf you could create a minimal test case like https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4, that\u2019d be helpful for folks to help you.\nEven better, investigate the problem and send a PR. If you use nock at relevant projects at Cisco it would be great if you could get some time to help out maintain nock, it could really use an overhaul but I can\u2019t do it myself :) \n  . I\u2019m reluctant to add another API for this, let\u2019s see what other folks think. I\u2019m okay with the change and releasing it as a breaking change, but I don\u2019t have time to work on this myself. Can you submit a pull request?. cheers! closing in favor of https://github.com/node-nock/nock/issues/1046. Thank you so much for finding the real cause of the problem and sending a great PR with tests \ud83d\ude4f:bow: much appreciated. Have a fabulous week!. could you create a minimal testcase reproducing the problem on runkit.com, like this https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4? That\u2019ll help us help you :) . @CodeJjang if you could create a reproducible case, that\u2019d be helpful. Otherwise there is not much we can do. @zivanovicb1 could you please create a test case like this one on Runkit https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4? That\u2019ll help us to help you :). can you please identify the version when it broke? \nAnd could you please create a testcase that reproduces the problem on runkit, like this one? https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4\nthat will  help us to help you :) \nAlternatively you coudl start a pull request with a failing test case that reproduces the problem that would be \ud83d\udcaf \ud83c\udfc6 . thanks, keep us posted, and maybe get a pull request going with the failing pull request?. \ud83d\udc4b hello Travi, you are everywhere \ud83d\ude01 \nI do what I can to keep nock moving forward but don\u2019t have much time right now. I\u2019m preparing a concentrated effort though, stay tuned.\nFor the time being, I try to review pull requests. If they fix a bug and have tests that pass, I\u2019m happy to merge them in and release. > anything happen to come to mind that might be happening on the nock side to make the body miss the line-ending matching that i mentioned\nunfortunately no. I don\u2019t know the code base that well to be honest, I took on the maintainership because the project stalled and it is a critical part of the test suites for many projects, including some of mine. \nIf it\u2019s not a blocker than it\u2019s all good, we can leave it open in case other folks run into similar problems. If you find the time to further investigate that\u2019d be great, but no rush. @ninhxuanluu please watch your language, see our Code of Conduct. Please edit your message accordingly.\nI understand this is frustrating (to me, too) but it won't fix itself ;). yes, it\u2019s fixed :). if it\u2019s not complicate, a patch would be appreciated. Start with just the changes and we discuss there? Can\u2019t make promises but I agree with your point. I\u2019ve run into this myself. Did you find a way to work around it, or any more information that could help narrow down the problem?. fyi, in my case I run into this using got, but had no problems with node-fetch. I don\u2019t know myself, but sounds like something that should be supported. @giodamelio if you like, open a new issue for it? But you\u2019d need to champion it to get it shipped, we can only facilitate your contribution and make it as pleasant an experience as possible. We can\u2019t do it ourselves I\u2019m afraid. @giodamelio  please open a new issue if you find time to work on it, no rush :). Yes I agree, happy to accept pull requests with tests to improve . @Overdrivr we do a remote hackathon this Friday, wanna join? #1269 . probably the latter I\u2019m afraid. Good news is that thanks to a sponsorship I was able to hire https://maintainer.io/ to help us turn nock into a vital project again :) stay tuned, and give us a hand if you can. #1077 is a great place to start.\nI\u2019ve rebased the PR on latest master, if CI is green I\u2019m okay with merging the PR. Thank you @aarongreenwald! if you like to help, a great place to start is #1077. It will make the test setup more reliable and hence the experience for all contributors and maintainers better moving forward. See you around :) . fyi I've rebased your branch on latest master as I got the tests fixed there. \nDo you want to take a stab and getting them green?. neither am I, I figure it out as I go :) no rush we can leave this open. > BTW you should avoid rebasing contributors branches for ongoing tickets, because it makes local branches divert from remote, which then forces us to make a local merge if we forget to pull first ;)\nYes, I\u2019m very sorry for that, I mixed up PRs, I didn\u2019t meant to rebase yours :(\n\nCould you have a quick look at the code and let me know if you have an idea why ?\n\nCan\u2019t promise when, but I'll try. It will take me some time, too. I\u2019m not so familiar with the code base either I\u2019m afraid, I took on maintainership recently.. thanks for the quick review @n30n0v! The failing CI tests are unrelated, would be nice to get them green again, I'll try to have a look this week. @n30n0v do you know why we test with browserify in the first place? My understanding is that nock does not support usage in Browsers?. let\u2019s kick then, this thing is hard enough to maintain, if there are no objections with in a week, let\u2019s kick it out. I'll start a PR. @n30n0v could you have a look at this? Any thoughts?\nI wish I could avoid the addition of the new flag but I don\u2019t see a way around it. An alternatively could be to prefix the hex-encoded string with something like binary: and then check for that instead of the additional responseIsBinary flag. Maybe that's more elegant?\nI also realised that this is only testing the response case, not the request case, I'll extend the test & implementation to cover a binary file upload, too. I've updated the test to also record a binary upload but that seems to work just fine without any extra handling\nI'll squash the PR commits once it's good to merge. Okay this is ready for review. @n30n0v @ierceg \nIn summary, nock recorder now adds a responseIsBinary flag to fixture definitions, besides scope, method, path, status, etc. It is only set to true if the response string (which is hex encoded) is a binary buffer, it is not set to false otherwise.\nThe only alternative I can think of is to prefix the hex string value of body with something like binary: or NOCKBINARYHEX:. Thanks for the review @simlu \ud83d\udc4d \nI\u2019ll move forward and merge that in. I also don't know unfortunately. It came from this PR: https://github.com/node-nock/nock/pull/973/files?w=1\n__nock_scopeKey was introduced by @ierceg in https://github.com/node-nock/nock/pull/171/files\nIvan can you shed some light here maybe?. could you please rebase on latest master, it should fix the failing tests \ud83d\ude4f . I'll move forward with it, it's just tests and easy enough to bring it back. On the plus side it will make tests faster, more reliable and reduce the complexity of the code base :) . Can you please try with the latest nock version? (9.2.1). Nope, sorry :( I can\u2019t dive into this but if you could start a PR with a failing test, or at least make a minimal test case like https://runkit.com/gr2m/5a95927a75f2bb00122ffe55 that will help us to help you :). > Still, it's not good that minor version change is causing existing test to break.\nAgree, sorry for that, I do what I can, and all I can do is trust the existing tests :( I\u2019m sorry for the trouble\nI guess we can\u2019t support both here? I find the dotnotation rather confusing, are you sure it was meant to be supported in the first place?\n@ljharb any best practise recommendations here? Can you think of a way to support both? I wouldn\u2019t like to extend the .query() method with an additional option for qs parameters. I tend the leave the option as is, because you can work around the { allowDots: true }, but not the other way around, right? Given that the behaviour you depended on was not tested usually means that it was not officially supported, it worked by chance. \nYou can be assured that I will not allow for an intentional breaking change to be released in patch or minor version, I love semver way to much for that \ud83d\ude01. Confirmed, here is a test case: https://runkit.com/gr2m/5a95927a75f2bb00122ffe55\nWanna send a pull request? Even just a test case reproducing the problem would already be helpful :) . yes please :) . If you think that\u2019ll help, feel free to use it :). cheers @anshumanv \ud83d\udc4d fixed it! Wanna try to work on one of the available ones?. Let us know which one you are working on so we don\u2019t do the work twice :) . Hey @mbad0la wanna help finish this up? I\u2019m busy this week but will have more time next week I hope. Would be great to get trough with it, tests are currently failing because another external host is not doing what it did in the past, time we remove dependency on that :). Ah yes, I did that recently for @ocotkit/rest.js: https://github.com/octokit/rest.js/blob/master/test/integration/agent-ca/agent-ca-test.js. I think I got that setup from https://github.com/request/request\nDoes that help?. sounds good :) If you get stuck, create a WIP pull request, we can take it from there. Thanks!. Thank you for helping out, Jonas!. I\u2019ll work on tests/test_nock_off.js#L6. I\u2019ll work on tests/test_recorder.js#L62 next. . no idea why this was auto-closed lol. oh okay, I didn\u2019t actually work on tests/test_back.js#L137 oops. see my follow up at #1083. Hey @hisabimbola we are working on making nock easier to contribute to right now. I took on the project recently and since then at least ask folks to add tests to their PRs. If they pass, I\u2019m okay with merging. We have to trust our tests, they are pretty decent and they get better with each PR :) \nSo I\u2019d suggest you start a pull request just with a failing test for now, so we get the error status on the commit. Then implement the fix, if all other tests pass we are good. If we break something, well, someone will complain and we will do another PR :) Thanks Abimbola, greetings to Berlin!. hmm no, but seems unrelated? Let me try to restart the build. You should be able to do that, too. yessir! You should be able to do pull request reviews now, too \ud83d\udc4d . For the future, I think if you claim multiple tests at once, you can create a single issue and a single PR, assuming they plan to fix them all at once. Thanks for the PR! I assume you are working on figuring it out a fix?. yep looks good, just need rebasing :) Could you do that @hisabimbola?. Thanks Abimbola!. @mralanlee Hey Alan, I tried to reproduce the problem, but no luck, see https://runkit.com/gr2m/5a9da7bb773f0500129d109e\nIf you could create a runkit snippet that reproduces your problem, that\u2019d be very helpful.\nI assume the problem for the error you run into is not related to nock. there are still some tests failing: https://travis-ci.org/node-nock/nock/jobs/350668754 could you have a look at that?. Hey @anshumanv let us know if you need help :). Hmm could you please create a PR with a failing pull request? That will help us investigate the issue. Hey Kevin \ud83d\udc4b \nCould you maybe start a PR with a failing test and we take it from there? If that\u2019s too much work right now, a RunKit snippet such as https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4 reproducing the problem would be very helpful already. Thanks for the issue with the example test case and logs, much appreciated. I think I\u2019ve seen other folks run into that, too. I don\u2019t use nock.back myself and won\u2019t have time to look into it. It would be super cool if you could give it a try to fix it \ud83d\ude4f . Hey @anshumanv how is it going?. sure, no worries :) . It\u2019s quite long, but we can refactor later, one after the other :) . Could you please create a runkit nodebook like this one: https://runkit.com/gr2m/node-nock-nock-1020\nThat makes it easier for us to see the error and to play around with the code \ud83d\ude4f \nAt first sight it looks like the problem might be in whatwg-fetch, can you try node-fetch instead? whatwg-fetch is a polyfill for the browser, node-fetch is a spec-complian implementation for node . great that it works now :) . Yeah I agree, somethings wrong there. Would happily accept a PR that fixes it. Is that fixed via #1110 for you?. I\u2019d need to digg into the code myself to see if that is feature or a bug. Could you maybe look trough the existing tests? If there are some that deliberately test for this behavior, we should mention it in the README. If there are none, then I agree we should get it fixed and add  a test to make sure it won\u2019t break again. I think that technically, GET http://myhost.com/items/ and GET http://myhost.com/items are to different requests. The fact that they usually return the same page is that servers implement it that way, as far as I know. I think I wouldn\u2019t add that to nock. The issue was open since march and no other person chimed in having the same problem. I\u2019d vote to say it\u2019s a feature not a bug and close the issue.. nock(/.*/) would match any host, did you try with a less permissive regex? . I think nock stores all the host matching globally, so that might be the problem. I\u2019d have to dig into the source code myself to find out how it does that exactly. we can leave this open for a bit longer, maybe someone wants to tackle it? It already has a failing test, so only the fun part is left ;). hey sorry I\u2019m out vacationing (mostly) until April 22nd. At first glance the changes look good to me, as long as all current tests pass I\u2019m okay with it. If we break things, we\u2019ll fix them and improve the tests :). hey just a heads up that I\u2019m out vacationing until 22nd, I\u2019ll review open issues then :) . Hey I\u2019m out vacationing right now, I\u2019ll be back end of April. I think there are tests in nock that test for both request & response timeouts, can you look trough the current nock tests and see if you find something? . I\u2019m sorry that was not intended, if you could send a PR to fix that I\u2019d appreciate it. We won\u2019t drop support for Node versions without a major version bump. merged #1114. Release is on its way. The recording will give you an array of objects that you can filter before storing them. I do something similar at https://github.com/octokit/fixtures/blob/61c77eb41e469e43c035c0f7bf6fde24e97a28ed/lib/record-scenario.js#L44-L51. There is no roadmap. We, the current maintainers of nock, are focussing on enabling users to become contributors as easily as possible. And whatever someone wants to work on will be implemented, given that we all agree that it\u2019s a useful addition that we can maintain in future.. Thanks Adara for letting us know. We plan to invest some time to improve the documentation soon, so this is timely and valuable input :). I agree, it\u2019d be great if it would clean out all timeouts. I\u2019d happy to review a PR if you or anyone else would like to give it a go. A PR with a failing test would already be a great start, we can take it from there. @faissalMT nobody is working on it, it\u2019s all yours :) \n@ikokostya the motivation to close issues is to keep the project maintainable. It\u2019s all volunteer run, so we cannot solve other people\u2019s bugs I\u2019m afraid, but we can make sure that contributing is as easy as possible. > You really think that project will be \"maintainable\" if you close all bugs automatically\nI know, I\u2019m doing this for a while :) It lets us focus on the issues that somebody is working on. When issues are closed they don\u2019t disappear, they are just archived and can still be found when searching for it.. Thank you @monkeywithacupcake, I want to do a few updates to the collective first, I\u2019ll merge your PR then. I\u2019ve updated the collective, I\u2019m okay with merging this now and take it from there. What do you think @RichardLitt? . @monkeywithacupcake could you update the PR and rebase it on latest master? No worries if not, we can take it from here if you are too busy :). That works. Also please remove the ## Contributors section from the README, backers and sponsors are ok. Thank you!. I think the README already has everything now?. Hey @cjzcpsyx, thanks for opening the issue. I really don\u2019t know if this is a bug or a feature to be honest, I\u2019m still figuring out the code base myself. But if you found incoherences than that\u2019d be a strong sign that this is a bug.\nCould you start a pull request with a failing test, and we take it from there?. yeah that could work. Wanna give it a try and see if it breaks other tests?. sounds good, thanks!. Hey @MSaIim, for a question on how to use nock you\u2019ll usually get better help on Stack Overflow. If you like post your question there and comment a link here so people will find it. \nIssues on GitHub are better suited for bug reports or feature requests . Your chances will be better on SO than here. If you don\u2019t get any answers, try to reduce your test case to as little code and as little dependencies as possible. I\u2019m sorry that I can\u2019t help better myseelf. Good luck!. Haw man, totally dropped the ball here, I\u2019m very sorry :( I\u2019ll try to look into it this week. Thanks @RichardLitt :) \n@mbad0la I\u2019ve pushed an update with an example that uses a local https server. Can you work with that?. sure thing! Feel free to send pull requests with more than one tests if they go together well. What ever you think is easiest to review :) . You might have more luck with \"How do I\" questions on Stack Overflow. You can link to it here so people will still find it. Good luck. Cool, improvements to the docs are always very welcome, especially by folks new to the library. Could you start a pull request and we take the discussion there?. Happy to, welcome to Open Source :) Here is a great tutorial on sending pull requests: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github. I also don\u2019t know it, I\u2019d have to look it up myself, and I don\u2019t have the time, sorry. If you figure it out and find a way to improve the README please send a PR. @ORESoftware does the above code work for you? \nI could see how a .all() or .any() method would be helpful. The proper way would probably be to use lower-level APIs to intercept all requsets, it\u2019s something we want to work on now. @n30n0v already created an interceptor library, maybe it\u2019s a better solution for your case: https://github.com/n30n0v/nock-interceptor\nCould explain your use case? Maybe there is a better solution to it than intercepting all requests?\n@jlilja We will probably redo the README soon, it might be good to add a section that answers how to intercept all requests, so we incorporate it in the new documentation? . In that case I\u2019d close it then. Thank you :). nock is not a server, it does not listen to any port. It intercepts http requests made by Node.js. If you use an HTTP API like a CouchDB server in your app, you can mock it with nock in your tests so you can run them in isolation, without depending on external HTTP APIs. . I don\u2019t think this is a problem with nock, try to reduce your test case. If you have a reproducible test case on runkit such as https://runkit.com/gr2m/5a2b2a9b890d1b00120eada4 then I\u2019d be happy to help out. \nIf you have a \"How do I ...\" question, then asking on Stack Overflow using the nock tag is more helpful. closing due to inactivity . Yes, I\u2019m pretty sure it's related to the fact that some requests depend on outside domains. Here is a big meta issue that lists all occurances, removing these is our first step to make nock more contributor friendly. Any help would be much appreciated! \nIn the meantime, I\u2019ll try to restart the failed builds. The problem is that the releases are automated via the CI. When I merge and the builds keep timing out, there won\u2019t be a release. I can\u2019t recall it to be that bad though, I hope it\u2019s only a temporary problem. Thanks Deepti. Great work @deeptiagrawa \ud83d\udc4d If you like to help out some more, I\u2019m trying to improve the test setup first, which will make it simpler to accept more contributions with less regressions in future. \nThe meta issue where we coordinate that work is https://github.com/node-nock/nock/issues/1077. Feel free to comment there if you\u2019d like to help. I'm happy to help if you have any questions. I think we can close this?. @Ethan-Arrowood there was a regression so we had to revert the change. I\u2019ll release a new version 10.0.0 shortly which will include your fix for the deprecation warnings. Done via https://github.com/node-nock/nock/pull/1144. ugh I don\u2019t know why tests fail with Node 10 :( If anyone could help to look into it, that\u2019d be great \ud83d\ude4f . If anyone wants to look into it, it seems to be a problem limited to restify-clients. There is a workaround added for restify which might now be the cause of the problem, it was added a long time ago\nUpdate: should be good now https://github.com/node-nock/nock/pull/1148. I\u2019ll hold off with the major release, there are a few other things I\u2019d like to release as part of v10. I think I was holding off to see if there are other breaking changes that we can ship with it.\nBefore doing refactoring, I\u2019d like to finish up the tests first. \n\nfinish up #1077 \nGet 100% code coverage (or close to it)\n\nOnly when we are confident with our test we can start refactoring, otherwise I\u2019d be really afraid to break peoples code, given how widely used nock is right now.  I know fixing the tests on such an old code base is no fun ... do you think you can help out with that?. I'll merge and release a new breaking version as discussed at #1202 . sure why not, did you try it? \nIf something is not working as expected we\u2019d appreciate a bug report, ideally with a reproducable test case suck as https://runkit.com/gr2m/5b0f6bb39f8aeb0012955de6\nIf you have a question about how to use nock, I\u2019d recommend to ask on StackOverflow, there are more folks helping out over there for such questions. Make sure to use the nock tag. Did you try .query({\"isArchived\": false}) (without the single quotes)?\nIf that\u2019s not working, can you please create a reproducible test case on runkit such as https://runkit.com/gr2m/node-nock-nock-768? Or even better: start a PR that with a failing test that reproduces your problem.. I\u2019m not sure I understand. Are you good now, can we close the issue?. This is fabulous, thank you Richard!\n\nIs there a .github or docs folder?\n\nI would really like to add multiple issue templates to get the \"choose\" page like here: https://github.com/babel/babel/issues/new/choose\nI\u2019m thinking of 4 templates\n\nReport a Bug: among other things, I\u2019d like folks to create a reproducible test case with runkit, such as https://runkit.com/gr2m/node-nock-nock-768\nRequest a feature\nAsk a question: I\u2019d like people to ask questions on stackoverflow instead and use the nock keyword. I\u2019d like to do a hack like babel here: https://github.com/babel/babel/issues/new?template=Support_question.md\nSay thanks: Give people permission to say thanks :) Maybe mention a few ways how people can support us\n\n\nI split out most of the contributing section into its own file, which will cause it to come up on GitHub, and which cuts down on the rather excessive README size a bit.\n\n\ud83d\udc4c \n\nIs there a CHANGELOG? No. Do you use releases for this?\n\nWe have release nots in https://github.com/nock/nock/releases. It\u2019s automated with semantic-release\n\nAre there an acceptable amount of pull requests? Not really. Let's work on this!\n Are there an acceptable amount of issues? Depends on how often these are closed. Over 100 is a lot.\n\nI\u2019d like to make a one-time effort to review them and then install https://github.com/probot/stale to close issues / pull requests without activity. That way we should be able to keep the amount of open issues and pull requests low.\n\nIs there a waiting on contributor label?\n\nMight be covered when installing stale? \n\nAre there bots enabled\n\nBring in all the bots :D I\u2019ve WIP and Greenkeeper installed right now\n\nIs there a CLA\n\nI don\u2019t think we need that\n\nAre the topics useful? Add some! I'd suggest: http, mock, nock, node.\n\ndone\n\nIs there a website? No: but I think this would be great for the docs.\n\nAs long as it doesn\u2019t add too much overhead for the maintainers I don\u2019t mind adding a website.\n\nRun depcheck; do the deps make sense? Looks like glob isn't used?\n\nsounds good to me. Could be a good \"help wanted\" issue maybe?\n\nConsider adding a secondary email to the Code of Conduct as a contact - someone may have an issue with you but not want to tell you directly. I know, this idea may be awkward. But you will give them an option in case they do have an option, and this may be good for the overall health of the project.\n\nYes I agree, but I wouldn\u2019t know whom to put in there right now\n\nI\u2019ll get back to the rest soon. > Add richard@maintainer.io to the CoC. I'm happy to be the other person.\nThat\u2019s a great service, thanks :) Could you send a PR?. > Where can people give money to the contributors? \nWe have the https://opencollective.com/nock now that I would like to start promoting once we are trough with the initial audit. \nRight now I wouldn\u2019t want to give money to contributors directly, but instead invest money to better facilitate contributing to the project. That being said I\u2019d be open to sponsor or co-sponsor a contributor who otherwise couldn\u2019t afford to. Preferably someone underrepresented in tech. We would need to figure out mentoring/coaching though and I won\u2019t be able to do that anytime soon due to family.\n\nCan I, as a user, become a maintainer? Who do I talk to?\n\nYes :D I\u2019d very much welcome more maintainers but there is no process in place yet.\n\nIs there a related chat for this repository?\n\nI\u2019d rather not have a chat unless we find a way to take accountability for the chat to be a safe space. Instead of a chat we could maybe do office hours at some point, where we invite people to chat for a limited amount of time. One thing that I\u2019d like to add and maybe you might want to add to your audit is a locked \"updates\" issue like https://github.com/octokit/rest.js/issues/620. It allows people to subscribe to a single issue on a repository in order to stay updated in regard of the most important updates. What do you think?. A project sounds good to me! I think we can close this issue and create follow up issues? \n\nWant to make a PR to the audit list?\n\ndone https://github.com/mntnr/audit-templates/pull/9. \ud83d\ude0d . I\u2019m not 100% sure, but I think the file name must be CONTRIBUTING.md in order for GitHub to recognize it: https://help.github.com/articles/setting-guidelines-for-repository-contributors/. Thanks @ArTiSTiX for the pull request. Could you please add a test?. Glad you ask, and thank you for your help with the other issues, Jonas!\nThe idea is to create 4 files:\n\n.github/ISSUE_TEMPLATE/01_bug_report.md\n.github/ISSUE_TEMPLATE/02_feature_request.md\n.github/ISSUE_TEMPLATE/03_support.md\n.github/ISSUE_TEMPLATE/04_thanks.md\n\nIf you like to help out, I can invite you the repository so you can use GitHub\u2019s editor: \n\nFor bug reports, I want people to create a reproducible test case using runkit.com, that will make it  much easier for others to reproduce the problem and act on it. We can link an example (e.g. https://runkit.com/gr2m/node-nock-nock-768) and ideally also make a short tutorial to help people make it.\nIf people are not able to create the reproducible test case we should make clear that this might result in not getting help as nock is a volunteer community run project. But they can ask for help with the test case, which is an opportunity for others to jump in. Creating a reproducible test case is a great contribution to the project. We could use labels like has-test-case to differentiate and show people who want to help out a list of bug reports without one. \nFor feature requests, the template by babel is a good start: https://github.com/babel/babel/issues/new?template=Feature_request.md\nFor a support questions (\"How do I ...?\" questions) I prefer people to ask on Stack Overflow. I like babel\u2019s template here, too: https://github.com/babel/babel/issues/new?template=Support_question.md. We could add more white space after the Click \"Preview\" for a nicer view! line so people wouldn\u2019t see any other text, only after clicking the Preview tab\nThe Thanks template have two purposes\n\nLet people tell us how they use nock and where (at what company\u2019s). It will help us with fundraising for the future\n\nTell people how they can help us today: star the repository, help triaging issues, help review pull requests, write blog posts, write tutorials, give talks, support us on https://opencollective.com/nock. ping @pgte where does the name come from? I\u2019ve no idea :) . yes it would be great indeed :) The first step for nock is to break up nock into smaller modules, that way we can have different intercept modules for different modules that have the same APIs. For browsers I\u2019d also look into a ServiceWorker-based solution instead of mocking xhr. We\u2019d also need to mock fetch, ServiceWorker would cover both. I like the idea of listing contributors, but I wouldn\u2019t do it in the package.json for The same reason that @hbetts mentioned. Shall we rename AUTHORS.md to CONTRIBUTORS.md? And I would suggest to not publish the file to npm, otherwise we have the same problem as with the big package.json file.\nCould you add documentation on how to update the file and maybe create a \"help wanted\" issue asking if someone would like to build a bot to keep it up-to-date?. Can we hold off on this? I\u2019m not sure if it\u2019s a good idea. My concerns are:\n\n\nIt\u2019s automated, so I\u2019m not sure if people feel as recognized\n\nI'm not sure if it catches all the contributions we want to recognize\nIt includes bots\nThe file is quite big\nIt increases the overhead for maintainers, another file we have to keep up-to-date. We could automate it, but that would be some extra effort\n\nI agree that it would list contributors, but I\u2019m not sure if that\u2019s the right approach. My main concern at this point is that generating the file is not automated and I fear we will easily forget about it.\nTo benefit from the appreciation we would also need to make sure that new contributors get notified if they get added to the list. Which Ideally we automate, too, e.g. by mentioning them in the commit message?. Automating it works for me. It would make a nice standalone issue that someone could work on. Hacktoberfest is around the corner, that could make a fitting issue. can we close this issue now?. I\u2019ve reset the token, it should be fine now. The tokens are by nockbot (both GitHub and npm), could you maybe take a note somewhere that we document the release process for the future?. some context outta my head:\n\nreleases are automated by semantic-release\nthe commit messages pushed to the master branch are triggering new releases. semantic-release is looking for these commit conventions\nfix: ... in the subject creates a new release bumping the patch (fix) version, e.g. 1.2.3 -> 1.2.4\nfeat: ... in the subject creates a new release bumping the minor (feature) version, e.g. 1.2.3 -> 1.3.0\nBREAKING CHANGE: ... in the commit body (3rd line or below) creates a new release bumping the major (breaking) version, e.g. 1.2.3 -> 2.0.0\nsemantic-release creates a github release, adds release notes and publishes the new version to npm\nwe use @nockbot  as a separate account because npm tokens cannot be scoped to a single package. If I used a token for my own account and their was a data breach, a person could publish new versions for all npm packages that I have write access to. It's similar with GitHub tokens. Enjoy vacation :). Could you please create a runkit notebook such as https://runkit.com/gr2m/node-nock-nock-768 to reproduce the problem?. closed via #1172. I think https://stackoverflow.com/ would be a better place to ask that question, you can use the nock tag\n\nI personally never needed to use nock in a production app, unless the app itself was about mocking. Thanks for opening the issue. Any suggestion for a workaround?. wonderful, thank you Roch!. ping @griffinmyers \ud83d\udc4b. It should be released already, it happens automatically via semantic-release. But the last build failed on master (Node 4 job): https://travis-ci.org/nock/nock/builds/415293237. I assume it\u2019s related to #1077, the tests are somewhat unreliable as they currently depend on external websites that we don\u2019t have control over.\nFor now I restarted the build, but I\u2019d appreciate any help to finish #1077 to make our tests more reliable\nUpdate: restarting the job fixed it, the release job is running now: https://travis-ci.org/nock/nock/jobs/415293243. All requests go trough when you are recording. You can filter out the recorded fixtures after you received them. See https://github.com/nock/nock#dont_print-option \u2013 does that help?. You can\u2019t record and intercept at the same time I\u2019m afraid :( When you start recording than the interception gets disabled. But I see how this could be a valid use case, maybe something we could add in future?. I\u2019ve no objections in general. I\u2019m not sure about the API, which one do you prefer?\n// 1.\n.optionally(false)\n// 2.\n.optionally({optional: false})\nI think I\u2019d prefer .optionally(false). I wouldn\u2019t support both.. can you rebase on master and see if it fixes the build?. I\u2019d be open to add that to nock, but would like to finish #1077 first before adding new features. Can you help out a bit?. We will work on #1077 on Friday, Dec 14th and invite new contributors to join us :). We\u2019ll setup a live chat, we will publish an update on Tuesday with more information. Thank you for fixing that :) Can you please fix the linting errors?\nhttps://travis-ci.org/nock/nock/jobs/411655649#L2514. just fyi I removed the created package-lock.json, we might add it soon but want to make sure it won\u2019t break other things like the Greenkeeper integration. Hi @griffinmyers thanks for the pull request :) I\u2019m catching up after a leave, I can\u2019t promise when I get the time to look into it, but I\u2019m very open to improve the implementation of the socket mocking. I\u2019m not very familiar with it, so if you would be okay with helping out in case things break around it in future, I\u2019d be happy to move forward with whatever you suggest, as long as current tests pass. When you rebase on latest master then the SSL-related errors should resolve. false positive. In your example above you don\u2019t load the recorded fixture from the scbe.json file. \nI think what you call first takes precedence . To load a previously recorded fixture, you need to load it, e.g. with nock.load('./path/to/scbe.json'). \nIf you register other mocks for http://shadows-v2:8031 in the test itself, then what ever you called first, the nock.load('./path/to/scbe.json') or nock('http://shadows-v2:8031').get('/shadows/v2/health').reply(200) will take precedence.\nThe order matters. For example\n```js\nnock.load('./path/to/scbe.json')\nnock('http://shadows-v2:8031').get('/shadows/v2/health').reply(200)\nawait fetch('http://shadows-v2:8031/shadows/v2/health') // gets 401\nawait fetch('http://shadows-v2:8031/shadows/v2/health') // gets 200\nawait fetch('http://shadows-v2:8031/shadows/v2/health') // will throw error as no further mock is defined\n```\nDoes that make sense? . I\u2019m sorry, I\u2019ve missed that bit in your code, yeah, it should work then :)\nAnd in that case I don\u2019t know what takes precendence, but when you find out I\u2019d appreciate if you could send a pull request to update the README \ud83d\ude4f . Thank you George, very much appreciated. @gkatsanos are you still looking into it? Shall I pin the issue to leave it open for you?. No problem :) Out of curiosity, did you use another library or did you built something yourself?. Could you make a reproducible test case like https://runkit.com/gr2m/node-nock-nock-768? And explain what you expect and what you receive instead? It\u2019ll make it easier for us to help you :) . we really gotta fix #1077 \ud83d\ude4f . this is an issue :) No need to merge the updates that are covered by the current version range, they get installed automagically . CI errors are unrelated. unfortunately nock does not have full code coverage as of now, it is possible that a bug was introduced in that release. I don't have the time myself to investigate though. It would be a great start if you could create a RunKit notebook such as https://runkit.com/gr2m/node-nock-nock-768, you can even require different version of nock in the same notebook to show that it worked with one but broke in the next version, see https://runkit.com/gr2m/nock-nock-1076 for example. sorry just a test to understand why the issue template chooser is not working. I think the problem is the front matter. The files need to start with something like\n```\nname: Bug report\nabout: Create a report to help us improve\n\n```\nOurs satrt with a title\n```\n\ud83d\udc1b Bug report\n\nname: \ud83d\udc1b Bug report\nabout: If something isn't working \ud83e\udd15\n\n```. > such as it can't start with a number?\nThat\u2019s not it, I\u2019m using numbers in other places for custom sorting . I\u2019ll go ahead and merge this as it can\u2019t break any code and it\u2019s the only way to find out if it works :D . > Behaviour is valid, it's just British English. :)\nI know, and I usually prefer it myself, but I think nock is using American English? I might be wrong :D This would make a fun bot, doing nothing but correcting your spelling either way. for the code changes I\u2019d prefer a commit other than docs:. Some might argue that it\u2019s a breaking change as the error message changes and some apps out there might rely on the old message. In that case I\u2019m happy to take the risk though. YOLO. In theory, someone could have implemented this\ntry {\n  ...\ncatch (error) {\n  if (/Not allow net connect/i.test(error.message)) {\n    // handle connect error\n  }\n}\nwhich would now be broken. It's not logging, but changing an error message. I\u2019d argue both are code changes though. Docs would be either documentation or a code comment only.. Just saying hi to each other, get to know the people behind the avatar. It will help with the communication afterwards :) We can also give a plan of what we plan to do next. Half an hour sounds good to me. Time wise we can try early morning pacific time to cover most of the US and Europe, but mention that we can alternate the time if people for other places woudl like to join?. Can we do Friday 10am PST? 9am is baby feeding time for me :) . oh I still have some open follow ups! But in general yeah, happy to. How about Oct 24th, 8am pacific time, 4pm London time?. that\u2019s wake-up & feeding time for our babies. Can we do at least an hour later?. I'm sorry I tried to join but the zoom ID didn\u2019t work, I got an \"id is invalid\" error :( Ugh\nLet\u2019s try again next week, same time? I\u2019ll test the zoom ID with Richard ahead of time. oh my did I miss it or does it start in 10min?. Yes. Sorry Jonas!\nI still like the idea of a regular hour when we are just there, working on nock. That would be the time when others could come and ask questions.. Hey gents, I\u2019ve a little more availablity now, too. How about we find some time that we can co-work remotely? I\u2019d really, really like to finally get these tests taken care of :) \nAfter that a lot of fun work is ahead of us! Most of all we can use async/await everywhere because in April Node 2019 Node 6 is out of maintenance \ud83c\udf89https://github.com/nodejs/Release#release-schedule\nHow about Friday, Nov 7th, 10am - 12pm pacific?. works for me :) . thanks \ud83d\udc90 . Hey @StarpTech I don\u2019t understand what happened, but the new test you added is failing now. For example see https://travis-ci.org/nock/nock/jobs/427482547#L3903\nI did rm -rf node_modules && npm install && ./node_modules/.bin/tap ./tests/test_intercept.js and was able to reproduce the problem locally. Could have look if you can reproduce it yourself?\nThis is super odd because the CI passed on your PR \u00af\\_(\u30c4)_/\u00af. This is wonderful, thank you for the great tool @abhijeetps. Can you make a minimal test case for the problem? Runkit is great for that, e.g. https://runkit.com/gr2m/node-nock-nock-768, that will help us to help you :). @jlilja looook: https://github.com/nock/nock/pull/1209 let\u2019s finish this up \ud83d\ude4c . @jlilja mind if we finish this up? It's the last bit to get rid of the AIRPLANE mode and it\u2019s starting to block . I\u2019ll be busy until Jan 9th, I can look into it afterwards. Feel free to tackle it yourself if you like . We will eventually merge beta into master which will then automatically release the new breaking version. After that we probably make master the main branch again until we want to work with pre-releases again :). OMG! Did we just hit our first big milestone?! A celebration is in order /cc @RichardLitt \nI see #1367 is the last bit to close #1077 :) . you can ask at https://github.com/probot/weekly-digest :) I think @abhijeetps was planning on adding that feature. you can ask at https://github.com/probot/weekly-digest :) I think @abhijeetps was planning on adding that feature. is there an issue/PR we can follow for that feature?. We would love if you or someone else could work on the issue. we really should drop node 4 support for nock so we don\u2019t get blocked from updating dependencies. I investigated further and there is something odd ... I can reproduce when I run this locally using Coverall\u2019s repo token\n```\n$ npm test\n...\n$ OVERALLS_REPO_TOKEN= ltap --coverage-report=text-lcov | ./node_modules/.bin/coveralls\n[error] \"2018-12-16T17:11:17.272Z\"  'error from lcovParse: ' 'Failed to parse string'\n[error] \"2018-12-16T17:11:17.275Z\"  'input: ' 'Successfully piped to Coveralls\\n'\n[error] \"2018-12-16T17:11:17.275Z\"  'error from convertLcovToCoveralls'\n```. oh looks like when setting theOVERALLS_REPO_TOKENvariable, piping to| coveralls` is not necessary and throw an error. It successfully uploaded coverage now though: https://coveralls.io/github/nock/nock\nI\u2019ll try to set OVERALLS_REPO_TOKEN env variable on Travis now, maybe that\u2019ll help. aaaaaand we are back in coverage business \\o/ https://travis-ci.org/nock/nock/jobs/468705770 . <3 . I\u2019m not familiar enough with the code base myself to tell what the problem could be. The runkit notebook is much appreciated, thank you! \nWould you like to get a PR going? A failing test would be good enough, you can adjust the .travis.yml file to require node 10.9. I fear nobody is super familiar with the code base right now, but we are working on cleaning that up. We just dropped support for Node < 10, come join the fun :). We could really use some help with getting that test passing. > I honestly don't know what is desired behavior for it. But in my opinion, the first argument for reply should always be the statusCode and the second argument can be a responseBody or a function which will return the responseBody.\nthat sounds reasonable to me. I run into a similar challange for https://github.com/octokit/fixtures. I want to record \"normalized\" fixtures so I can compare them to previously recorded ones, to see if anything changed in the GitHub APIs. I currently have a custom solution for that, you can see the code. https://github.com/octokit/fixtures/blob/master/HOW_IT_WORKS.md gives you an overview.\nMaybe have a look and see if that is helpful for you?\nI\u2019d love to make this simpler with nock, but I really want to fix up the current test setup first, see https://github.com/nock/nock/issues/1077. If you could help us, that\u2019d be great, so we can add new features sooner. > Makes sense! Maybe consider adding a comment to existing test cases that use external servers so that that behavior is not copied to new tests?\nThat\u2019s a great idea! Will do! /cc @RichardLitt . Sure!. you still wanna do this @hapr05?. Can you reduce your test case any further? . I won\u2019t be able to look into it myself, if you could give it a try that\u2019d be great. Or maybe someone else can help out. It's hacktoberfest, plenty of folks looking to contribute right now :) . Can you please test PR at https://github.com/nock/nock/pull/1428?. > 1. I've found a probot extension that can trigger events on set intervals. Updating the file every 1 week sounds good?\nSounds good\n\n\nWhere should I deploy the app? In probot docs they suggest Glitch, and it looks sufficient for this. What do you think?\n\n\nYeah we can start with glitch and move to something more reliable later. Glitch is nice because we can just hack around on the live app together without the need for re-deployments.\n\n\nContinuing the previous question, Glitch can host the code (like a GitHub repo), and you can even edit the code directly from their website. The question is, apart from the deployment of the app: can we rely on Glitch to host the code itself? Or we should add the app's code to the nock repo?\n\n\nWe can just put it on Glitch for now. Later I would create a separate repository for it and continuously deploy it to something like now.sh. I have this setup for several of my apps . @RichardLitt I would love to give the new All Contributors App a try: https://allcontributors.org/\nIt\u2019s not exactly what you had in mind initially, but maybe more useful? I don\u2019t think we need to list everyone from the past years. I think we should pick the ones who contributed significantly and then focus on new contributors. I got it, I want to collaborate more with the all contributor folks, so this will be a good exercise for me. Thanks :). @all-contributors please add @RichardLitt for maintenance. I think so \ud83d\udc4d. Thanks for the great bug report!\nI\u2019d start out by trying to create a failing test that reproduces your problem. Once you have that, start a pull request with the failing test. That would be  a great start. Actually I think the readme example is the problem here. As we use this we cannot use the arrow function\ncan you try this instead?\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function (uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  }). Yeah that's it, here is a runkit notebook: https://runkit.com/gr2m/nock-nock-1241/1.0.0\nCould you please update the README? . yeah I don\u2019t like relying on this either. Definitely something we should get rid of. what does getNamespaceQueryParameter() return exactly? Could you create a runkit notebook such as https://runkit.com/gr2m/node-nock-nock-768?. Could you start a pull request against the latest beta branch? Then we can have a look into it, otherwise we focus on improving the code base right now, to ease future contributions. I also don\u2019t know \ud83e\udd14but it sure would be a cool addition! Maybe start out a pull request with a test reproducing the problem and we take it from there?. <3. try change reject(); to something more useful, like reject(new Error('Unexpected response code: ' + response.statusCode);. I don\u2019t know. Where does the callback come from?. Thanks a lot Eleanor! \nI wonder if we should make clear that the before function is not required? Maybe we could move the example in the options section?. as .intercept() is a lower-level method, I\u2019d be careful to add too many defaults, I like the idea of throwing an explicit error. Could you send a pull request with a test? . yes. I know it\u2019s confusing right now, we are preparing an effort to clean up the code base right now :). can you start a pull request? It will be easier to discuss there. Hi Paul, that sounds great! Shall we reopen these two issues?. awesome! Yes if we could try to get https://github.com/nock/nock/issues/1077 done first, that would make everything else simpler because we wouldn't have so many false positives on CI. I don\u2019t mind the reduction in coverage, but don\u2019t want to merge in case you are still looking into it. I\u2019ll leave the merge up to you :). I only managed to re-enable coverals, might be a glitch, let\u2019s ignore it :). _.flat can often times be replace by [].concat :)\n```\n\n[].concat(1, 2, [3])\n< [1, 2, 3]\n```\n\nThere will probably be lots of this all around the codebase, both in tests and the code base. It will be lots of fun to simplify the code base :) \n\nThis is still marked as supporting Node 4 in package.json. The tests run on 6+, and @gr2m I've heard you say you're just about ready to drop support for Node 6. Is there a roadmap or timeline in mind? I'm wondering if we can go right to object spread instead of using Object.assign.\n\nRight now we only have https://medium.com/nodenock/the-nock-roadmap-where-we-are-and-where-we-are-going-8844df218649\n\nHow are we feeling about code coverage? Is it important to nudge up the coverage before making changes like this in library code?\n\nBefore we jump into refactorings, I\u2019d like to try to have all parts of the code covered. 100% might be not worth it, but something close to it would be great.\n\nBut by all means, if you feel confident and enjoy to clean up the code a little, lets do it. We can drop Node 6 support today and start releasing preview features while still releasing updates to the current 10.x. It\u2019s fairly easy not with semantic-release, thanks to https://github.com/semantic-release/semantic-release/issues/563. We use semantic-release to automate the release of new versions based on semantic commit messages. This works great if you only publish to @latest on npm, but it\u2019s getting a little challenging if you have to release a patch version for a previous version or if you want to create preview versions such as nock@11.0.0-beta.1, etc.\nThe new version of semantic-release makes that possible by simply following a few branch naming conventions. We can drop Node <8 support and continue work in a beta branch. We continue to use the commit conventions such as BREAKING CHANGE: drop Node 6 support, but it won\u2019t release 11.0.0 from the beta branch, instead it will create beta preview versions and bump the last number with each release. Then when we are ready, we can merge beta into a next branch at which point semantic-release will release nock@11.0.0@next. You\u2019ll be able to install it with npm install nock@next and get the latest @next version`.\nThen we merge next into master at which point semantic-release will simply point the @latest dist-tag on npm to the latest version, at which point everyone will get the new version.\nWhile we work on this it\u2019s well possible that someone runs into a bug with v10. To fix that, we create a new branch called v10.x and create pull requests against that. semantic-release will publish new releases from that branch, but only fix & feature releases, it won\u2019t allow to publish breaking changes at all.\nI know it\u2019s quite a lot, but it's quite amazing.. I\u2019ll get this going \ud83d\udc4d . > What is the overall coverage today?\nWe added a badge in the README, we are at 93%: \n\nIt links to Coveralls which has more details about the current coverage:\nhttps://coveralls.io/github/nock/nock\nYou can also run npm test && npm run coverage to see the coverage report locally. I have no strong feelings either way. I don\u2019t mind replacing usage of lodash as long as it doesn\u2019t make the code harder to read. The coverage is decent now thanks to the relentless effort by Paul :). Any contribution is welcome :)\n@jlilja I\u2019m a big fan of 100% and would like to reach it one. Once reached it becomes a test by itself. But we don\u2019t need to reach it before we start refactoring, our current coverage is decent. I\u2019d avoid to lower it through, each code change PR should slightly increase it . I think that\u2019s a great theme for the next nock open source Friday /cc @RichardLitt . Yes. Wanna setup stages? That\u2019s what I usually do: https://github.com/octokit/app.js/blob/master/.travis.yml \nBut I\u2019m open to suggestions :) . > Is there a decision about which to use going forward? It seems that some of that hinges on migrating to async/await; until then it doesn't really make sense to switch things out.\nagree. In the longer term, I\u2019d love to get nock to work in browsers. And then I\u2019d like to use fetch and polyfills like node-fetch.\nFor the time being I have no opinion :) But I wouldn\u2019t like to use more than one. > Wow, that's ambitious! What use cases do you have in mind? I suppose that would work by mocking out fetch and/or XHR.\nor Service Worker :) \n\nFor what it's worth, I have run into issues where certain things aren't possible with fetch. For example, you can't prevent a redirect. In Shields tests we're using a mix of node-fetch and got, with all the server code using request. I think I'd like to migrate to got eventually. I ended up choosing between that and axios based on brief usability + docs evaluation.\n\nGood point, that's true. I like got, too. Happy to use that for now. Or request, as it\u2019s the most battle tested. We can still migrate to another lib in the future, but for normalization purpose, maybe using request everywhere would be a good first step?. okidoke, this better be fun, let\u2019s go with got then?. I think I remember what happened. I first run the coverage on my local Mac, only once I had that working, I fixed it on Travis. And back than I\u2019ve seen a slight difference in coverage between my Mac and Travis builds. \nI\u2019d say we simply ignore this and increase the coverage a little bit by adding another test so we don\u2019t run into that problem. It's not checked in, it\u2019s configured as environment variable on Travis. It shoudln\u2019t be necessary with Coveralls when run on Travis, but somehow it kept failing without it. > There's one here: https://github.com/nock/nock/blob/master/.coveralls.yml\n\ud83e\udd26\u200d\u2642\ufe0f okay that may explain the problems with coveralls, I\u2019ll get rid of it. This change only applies on the master branch, so no need to wait for CI to finish. A good idea! No maybe add \"refactor\" and replace \"chore\" with \"build\". \nI actually don't mind not using any prefix for commits that don't create a new release, they don't make much of a difference anyway. I'd make clear that these other prefixes are optional and when in doubt, just don't do a prefix :) . > It would be nice if the PR would tell me how semantic-release was interpreting it!\nI want to build this for a very long time now :D . My thinking is that new contributors shouldn't worry at all, just submit, we take care of commit conventions. It's so easy now anyway with the squash & merge button. Then as they continue contributing we can educate them about nuances. . I\u2019ll go ahead and merge so I can prepare the branches 10.x, next, beta branches.\nYou can then continue working on the beta branch, starting with dropping support for Node 6. And please feel free to improve my documention in CONTRIBUTING.md, I\u2019m sure the wording can be made more clear <3. @RichardLitt @paulmelnikow I\u2019ve created the 10.x, next, beta branches, including branch protections. I\u2019ll be out rest of today. ugh forgot to update this line in .travis.yml, doing that now https://github.com/nock/nock/blob/15b3cf089059fbdad21e2279824e8792531cc707/.travis.yml#L20. Man this is frigging magic https://travis-ci.org/nock/nock/jobs/469649556#L572. Right now all I want is to keep you happy so lets go with prettier :) Could you maybe add a section to CONTRIBUTING.md about how to setup the auto-formatting in the different browsers? No need to write it all down for the different editors, linking to other resources will suffice . Agree \ud83d\udc4d . We can do it now in \"beta\"? We don't have other open PRs against beta so I don't see much room for conflict. All the older PRs will probably be needed to redone anyway. With or without prettier, I expect to use lots of the new JavaScript features that Node 10+ gives us. > I'm not seeing updated coverage numbers in PRs. I think the reason is that coveralls only runs on master, and not for PR builds. Does it make sense to change that?\nOoops! Yes, let's change that\n\nGiven #1297 we should probably start measuring coverage on the beta branch. I don't see a big advantage to measuring on master. Should we transition over the config and the badge on the master readme from one to the other? Alternatively we could keep both badges. I'm not sure the native Coveralls badge lets you override the label on the second badge, but the one in Shields will.\n\nHmmm that's tricky. Maybe we could change it in the beta branch and make the beta branch the default branch for the repository while we work on it? Maybe add a note in the README for clarification?. agree! Can you get this going? I'll review your PRs but then have to drop my broken MacBook, it died on me today :( I'm on my old MacBook right now which sorta works but it's slowing me down quite a bit . I've changed the default branch to \"beta\" :) I don't think there is a need to change anything in coveralls, just all the badges should point to the beta branch, and maybe we could add two npm badges, one showing the \"@latest\" and one the \"@beta\" release?. I've re-synced on coveralls, it now shows \"beta\" as default branch. \nWe should probably start writing this all down in \"CONTRIBUTING.md\", in a maintainers section. > Could be helpful to capture the reasoning on no package-lock, too.\nThe reason for that is no more. It was tricky to make that work with Greenkeeper in the past, but that has been resolved, we can commit package-lock.json now. > I'm happy to help draft something, and/or take notes while you talk about how things are set up :)\nYeah let's just update CONTRIBUTING.md as we go :) . Also cherry-picking the change into the other release branches. see https://github.com/semantic-release/semantic-release/issues/563#issuecomment-448341949. I've yet to find a test runner that works great :) I think \"mocha\" is probably good choice in the longer term when we want to run tests in both Node & browsers. But for now honestly I'd just stick with tap.\nI'm not a big fan of things like Sazerac that packages other things up, it's nice when it works, it's hard when there are subtle problems.\nI'm not a fan of Jest either.\nAnother contended is ava, there are great people working on it and I like the design of it. But they just released their v1 and I expect some more problems to be fixed up as they were so many changes.. I think you have to add the {only: true} setting to both, the parent and the child. \nI general I try to avoid sub-tests if possible, where did you run into it?. also we ca split up into more files, I think test_intercept is quite huge. that usually means that some process is still hanging. I\u2019ll have a look. As we keep running into these weird test cases, we could use them as an opportunity to try another runner. I\u2019m tending towards giving ava a try, but happy to use mocha, too.. +1 from me, let\u2019s give Ava a try. Thanks Paul for all the great work on the tests!. ok I'll check the other PRs first :) . we could also run the automatic fix script when prettier is updated by Greenkeeper, it would only take a few lines of code in .travis.yml. It would look similar to this\nhttps://github.com/octokit/rest.js/blob/ea36a81c43d7defb1ad0b81ae6890b45f2392ac4/.travis.yml#L66-L74\nPlus a stages setting\nyml\nstages:\n  - name: prettier-update\n    if: branch =~ ^greenkeeper/prettier\nI'm not sure how often that happens, but if there are updates that break our tests frequently I'd prefer to automate this :) . we can pin the version in package.json, then we get a Greenkeeper PR for any update, including patch and feature releases, if that's what we want?. Yeah I love my little bots doing work for us, I'll add that :) . I know the problem, it has already been resolved. I'll update to the latest semantic-release beta. Hmm might have been a build that was still running after I fixed it with #1320. I hope \ud83d\ude4f . hmm that seemed to be okay now? https://travis-ci.org/nock/nock/jobs/470125339. Could you share a code example with comments about how you\u2019d like nock to work for your scenario? Can you elaborate why you \"would like to respond with a preprocessed body even if there are no fixtures\"?. Awesome week :) . I'm not yet sure if this is a breaking change? The behaviour that broke for you was never documented or tested. But as this affects so many people I\u2019d be okay with reverting it for now.\nWe can release it as a breaking change, but what would the migration path be? I use lolex whenever I need to mock time and never had problems with it when using the .install() method, which overrides the native timers. . Thanks @Chengxuan.\nCould someone send a PR to revert #677? We will release it as a fix release. Merge into one of them, cherry pick into the other. > How's this look for a commit message?\n\n\nfix: Mock responses should fire when timers are mocked\nRevert #1270. Fix #1334.\n\n\nA+, would commit :). I\u2019ve never setup CircleCI myself, I\u2019m okay either way, semantic-release is also compatible with it. I just love travis because I they have always been there, they run Rails Girls Summer of Code and I know some of the people. I think today is somewhat longer than usual, there was an incident: https://www.traviscistatus.com/incidents/qpdf71xk6pxq. I think this is a false positive, at least it\u2019s the wrong error message. Still seems to happen when merging multiple pull requests while one is still running. Maybe updating to latest https://github.com/semantic-release/semantic-release/releases/tag/v16.0.0-beta.15%40beta will fix it. Are you still working on it?\nI suggest that unless we set a PR to \"pending\" using WIP I assume it\u2019s ready for me to review :) . Hmm I\u2019m curious why it isn\u2019t reporting, I had the \"USE STATUS API?\" setting enabled. I\u2019ve now also set thresholds, maybe it\u2019ll work now. > Could it be an authorization issue between Coveralls and GH?\nHmm I don\u2019t think so, I only set it up from scratch because there was a problem caused by the rename of the org from node-nock to just nock. Let me try to sync again.\nI think coveralls is just not that reliable in general unfortunately . no let me try that. actually it says the app was already installed. But I think I found the problem\nhttps://github.com/nock/nock/blob/0d29ef1e12de66cb12ca1dbbdcb6412a5384fcf3/.travis.yml#L43-L47\nThe coverage build is currently only run in the release stage, we have to move it to the general test stage. Sorry, my fault, will fix right away. Thanks @paulmelnikow, this great!. Maybe instead of using google.com, we could spawn our own servers and mock localhost?. I think .test is made for exactly this use case, see https://en.wikipedia.org/wiki/.test\n\nThe name test is a top-level domain (TLD) that is intended for use in the testing of software.. That was caused by a built that didn\u2019t have the semantic-release update yet, I think. > nock works, though I think we can do a lot to make it a friendlier tool for users, and the docs is a big part of that.\n\nCouldn\u2019t agree more!. Ohhh I found the perfect thing for us: https://github.com/pholleran/toc-me I just installed it on https://github.com/octokit/rest.js and works like a charm! \nAny objections or shall I set it up?. > Should we remove the old markdown-toc tasks?\nYeah I think we can remove it now, but we should update https://github.com/nock/nock/blob/beta/CONTRIBUTING.md#generate-readme-toc and mention that it\u2019s generated automatically now, but maybe also explain how to generate it locally using npx?. I\u2019ve run into another bug with toc-bot where it would create empty commits: https://github.com/pholleran/toc-me/issues/13\nOther than that I think we are good :) \nYeah I think we can get rid of markdown-toc \ud83d\udc4d . @jlilja I invited you to the maintainers team, so in future your reviews should count \ud83c\udf89 . > Any clarity on what to do with the bits in test_back.js?\nHonestly, no idea! It\u2019s been 10 months since I added this comment, I\u2019d have to understand it myself. I gotta focus on other work until Wednesday unfortunately. . We can merge now, @RichardLitt will post the announcement for the Hackathon today. \nYeah, let's remove all code and comments that still reference \"process.env.AIRPLANE\" \ud83c\udf89 . I agree!!!! https://github.com/apps/prettier is still available ;)\nI\u2019d probably make it work a little different, instead of updating all my files all the time, I\u2019d add make the users decide when to trigger the update. This could be done with check runs and custom actions, I did a similar thing for WIP.\nHappy to help you build this if you are interested. Maybe when we finish the current nock beta? :). > > I\u2019d probably make it work a little different, instead of updating all my files all the time, I\u2019d add make the users decide when to trigger the update.\n\nWhat do you mean by that?\n\nI think it might be distracting if prettier would run all the time on each commit when working on a pull request. It would create new commits that I\u2019d need to pull first and it might create conflicts while I\u2019m still working. \nInstead I think it would be nice to use a prettier app to clean up a pull request right before merging :) . @paulmelnikow I think I fixed the problem with the new line. We have our own instance of toc-me running at https://glitch.com/edit/#!/toc-me-fork now, the only difference is that it does not remove the new line at the end of the file.. I guess we can go back to the toc-me app now :) https://github.com/pholleran/toc-me/pull/9/files. fyi, I\u2019ve re-installed toc-me, it now fixed the problem with the new lines \ud83d\udc4d . No :). Hey @protoEvangelion would love to see your pull request, I just run into this myself \ud83e\udd14 . For the line-by-line triage we\u2019d all need to be on a call, right? I think that might be hard. But maybe we can do that before hand with a few people with the goal to create separate issues (or a meta issues such as #1077) that we can then work off independently during the hackathon? . I\u2019ve some time this weekend. Maybe Saturday 10am Pacific time?. I\u2019ll be there in a minute. @paulmelnikow @jlilja we had to move a doctor\u2019s appointment and I think I won\u2019t be able to make our call on Wednesday at 10.30 Pacific Time. Can we push it back (the later the more likely I\u2019ll be able to make it) or do it at 7am Pacific time?. Sorry I just saw we were meant to start 7am! I\u2019ve put it in my calendar for 7.30 \ud83e\udd26\u200d\u2642\ufe0f are you around @paulmelnikow @jlilja?. I'll be on-and-off on Friday. Unfortunately we won\u2019t have help with the kids and we have a doctors appointment at noon so I\u2019m more restricted than I hoped. I\u2019ll be around\n\n9.00 - 10.30am\n2.30 - 4.00pm\n\nAll in pacific time. Gitter chat: https://gitter.im/nock/Lobby\nZoom call: https://zoom.us/j/714137753\nToday\u2019s instructions\n\nsearch the code base for \"TODO-coverage\":\nhttps://github.com/nock/nock/search?q=todo-coverage&unscoped_q=todo-coverage and just \nPick which of the comments you\u2019d like to work on\nLet us know which one you work on :). I\u2019ll work on this one the one in socket.js https://github.com/nock/nock/blob/950a7db51d51debe49cdfc22c949f4618f30661d/lib/socket.js#L46-L56. good idea! Let's do a follow up issue for further discussion and then close this issue. Can you please replace the Runkit example with an actual code example reproducing the problem you run into?. works for me, we can edit the release notes. Can you reduce the test case so that it\u2019s not using sinon? Otherwise I fear we won\u2019t be able to help out, it\u2019s unclear wether the problem is with nock or sinon or your code. @marbuser you are sending a query?\n\njs\n      .query({ session })\nTry\njs\n  .get('/session/')\n  .query(true)\nDoes that help?\n. I run into this a lot myself, definitely something we want to improve in future, but we first need to get some chore work done. \nGlad you got it working!. I\u2019ll squash it away \n. great work everyone :) . Please take it if you can, I won\u2019t get to it before our vacation next week. Can you tweet it out, too?. > There is still tests that needs a local web server\nMaybe I miss something, but I think the local web servers that are need for some tests are different from the mocks we define that use external services? Your PR looks great, just check the failing CI :) . Could you maybe add todo statements to the tests that you found still send requests to external websites? . I very, very much am looking forward to see that improved myself. I\u2019d like to finish up code coverage first and maybe do some cleanup of the code so we have a better understanding of its internals and to lower the barrier for (new) contributors. But if you\u2019d like to look into it, please be our guest :). we can start by collaborating on an RFC-kind of Markdown document, explaining the use cases and error message we would aim for to retrieve in these cases, then once we agree on that we can implement it backwards from there :) By that time we might be done with the coverage and refactoring, too.\nWe don\u2019t have an RFC process yet, we could create a pull request with a throw-away file such as RFC-1413-error-messages.md and then discuss there. all good. Maybe we create separate repositories for nock + [request library] which would always test the latest nock version against the latest version of [request library].. > I think it may be necessary to test on multiple versions of the request libraries and maybe multiple versions of nock.\nI would rather not, at least not ourselves. If people need to use older version that is usually companies. And companies should provide the resources to support older versions, not us. We could for example mention in the readme that people can approach us to create similar repositories for older versions and we can link to them, but we will always and only support the latest versions\n\nI wonder if a monorepo for all the request libraries would make for a little less maintenance work. And also whether there is tooling for automating matrixed tests like this, on different dependency versions (and node versions).\n\nWe can start out with separate repositories, it's easy to setup. Travis supports running them in different node versions and as said above, I would only test with latest nock.\nI would also only have very few libraries that we test with, like maybe request, axios, got and node-fetch. All others can be mentioned in our README but not maintained by us. Or we find a model where we look for maintainers for each of these nock + [request library] repositories.\nI fear there is a lot of maintenance / support overhead, and it shouldn't be on us. I can maintain nock + node-fetch as I\u2019m maintainer of that, too. And I depend heavily on it for Octokit.. That\u2019s be great!. That is likely due to the special characters. \nCould you get create pull request (draft) with a failing test, maybe a little simpler than your example above? Then we can figure out together what the problem is.\nThe maintainers are currently focused on other things to work on, see #1404. But we sure can help review pull requests and help if you get stuck in some way. Thanks for reporting this issues @mukkachaitanya! The runkit demo is very helpful! I forked it here to see if it works if you replace false with a'false' string, and it works: https://runkit.com/gr2m/5c65c8a30263bc00126e6ec9\nSo that is a work around for the time being.\nNext step to get this fixed would be to start a pull request (draft) with a failing test. Would you like to give that a go? The maintainers are currently focused on other things to work on, see #1404. But we sure can help review pull requests and help if you get stuck in some way. Thanks @avaly! I fear the reason for this is that requiring nock has currently side effects. I think the current way should have been \njs\nconst setupNock = require('nock')\nsetupNock()\nBut it is what it is :) We were discussing adding a new way to require nock\njs\nconst setupNock = require('nock/setup')\nI hope that this would resolve the memory leak.\nMaybe we could start a pull request to give this a try? \nWe could add a memory test using leakage, here is an example:\nhttps://github.com/octokit/rest.js/blob/master/test/memory-test.js. Does that help? https://github.com/nock/nock#allow-unmocked-requests-on-a-mocked-hostname. Can you please post the question to Stackoverflow as the issue template suggests? You can paste the link to the question here for reference. Thanks!. Does that format work for you @RichardLitt @paulmelnikow? I\u2019ll make sure to add the other maintainers and code contributors, maybe using the CLI, as well as significant contributors from the past.\n\nBackers was good, too.\n\nI thought that instead of listing backers separately, I would add them to the list of contributors with the moneyz icon. I don\u2019t think contributing financially is more or less important than the other kinds of contributions. But let me know what you all think. Here is what I plan to add, please let me know if I missed something or if it looks good to you \ud83d\ude4f \nOne thing I wonder is if we should list code and test separately? For us we usually do both, but it is well possible that in future people send pull request (drafts) with tests only, for others to pick up from there\nrichardlitt\n\ncode\nblog\n\npgte\n\nidea\ncode\nmaintenance\n\nn30n0v\n\ncode\n\nianwsperber\n\ncode\n\nierceg\n\ncode\nmaintenance\n\npaulmelnikow\n\ncode\nmaintenance\n\ngr2m\n\ncode\nmaintenance\nfinancial\nblog\n\nhutson\n\nfinancial\n\njlilja\n\nfinancial\ncode\n\nbenrki\n\nfinancial\n\n. The CI currently fails with \nForgot to run prettier? There are files without correct code style:\nREADME.md\nalthough the app added what looks like a comment to make prettier ignore the table \ud83e\udd14 \nhtml\n<!-- prettier-ignore -->. I do not get the same error locally :/. I merged this for a start but please let me know if I missed someone/something. > we still need the backers to be put back in\nI\u2019ve listed all current backers in the list of contributors with the \ud83d\udcb5 emoji. Are you sure we need to display financial contributors more prominently than any other kind of contributors?\n\nWe also need to work harder at enabling more minorities in tech in this organization. Most of us look the same! Not ideal.\n\nVery, very true. If you have anyone in mind we could actively reach out to and make sure they have a great experience, let me know. Otherwise we could do mention on twitter that we look for one or two folks underrepresented in tech that would be interested and that we could coach / pair with during the next maintainathon? . either works! Maybe from your account it would be more personal and clear that you would be the one coaching, and we could retweet your tweet from @nodenock?. Any idea why the toc-me app created the empty commits for README or CONTRIBUTING?. > The flat test folder is starting to create a new problem of difficult browsability and discoverability, though I think that be solved down the line, probably by grouping some of these modules into folders.\nThat will also become less of an issue once we start breaking up nock into smaller modules. @allcontributors please add @chadfawcett for financial.. Oops thanks for changing the base. I\u2019ll just merge anyway, it\u2019s just a comment. Prettier is complaining: https://travis-ci.org/nock/nock/jobs/497227292#L3207. We should maybe setup auto-fixing for prettier :) \nhttps://travis-ci.org/nock/nock/jobs/497227292#L3210. Nock does not yet work in the browser I\u2019m afraid. It's something I\u2019d love to be added in future, but we first have to get some chore work out of the way :) Currently, that\u2019s the Code coverage \u2013 any help is welcome: #1404. The faster we get there, the faster we can work on browser support. It will be easier for us to understand the problem if you create a runkit notebook that shows the error without us needing to do any setup.Runkit: Example: https://runkit.com/gr2m/node-nock-nock-768. Good job y\u2019all \ud83d\udc4d . \ud83d\udc4d . Thanks for opening the issue! I\u2019m not sure how redirects are currently handled / why 302 are currently not recorded, we would need to investigate. Did you find out anything? Is it the same with libraries other than axios?\nJust for your information, I use axios on https://github.com/octokit/fixtures/ but with the maxRedirects: 0 option, that way redirects are recorded, maybe that would be a workaround for the time being?. Yes, I agree that nock should correctly record redirects as two requests/responses.\n\nAbout the 302 in general, this part : https://github.com/nock/nock/blob/beta/tests/test_recorder.js#L129 , seems to work, so I suppose this 302 error doesn't exist with superagent ? \n\nThat is very interesting indeed \ud83e\udd14 We can start a pull request with your failing test and then use it as a starting point to investigate why it seems to work with superagent but not axios. Maybe try with got and request to see how nock behaves using these?. Could you rephrase the sentence to \n\nIf you don\u2019t want interceptors to be removed as they are used, you can use the .persist() method.\n\nOr add me as collaborator to your fork and I can fix it up for you :). I\u2019ve looked into the test, and they try/catch doesn\u2019t make any sense to me, so I\u2019ll just remove it \u00af\\_(\u30c4)_/\u00af  58c120c\n. how about we put npm run lint into a \"pretest\" script or \"posttest\" script in package.json, so it automatically gets run with tests? That\u2019s what I usually do . Ah I see it now. But we should probably add npm run unit to the list?\nAnd move npm run coverage to after_success?. ooops that one should not have been changed :) Sorry my fault that it slipped, I\u2019ll fix it in a follow up PR. An example would be nockback or recorder, different modules. I also use the scope for chores like chore(gitignore): new-ingored-file or docs like docs(README): add section xyz. \ud83d\udc4d . maybe add two https testcase, one with port, one without? Otherwise looks good so far \ud83d\udc4d . ping @Overdrivr \u261d\ufe0f\ud83d\ude4f . Is this the same as tests/test_intercept.js? If yes, couldn't we load that instead?. setting port to 0 lets the server pick an available port, so there won\u2019t be any conflicts, see https://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback\nTurns out the 0 argument can be omitted altogether, I\u2019ll give this a try :) . Note that server.listen(() => {...}) will automatically get an available port assigned, so tests can run in parallel without conflicts, see server.listen([port][, host][, backlog][, callback]). lol yeah we can put in proper syntax rules once we addressed the existing issues & PRs. I\u2019ll add prettier, but not yet. For now it's wild wild west I don\u2019t care. can you remove the {skip: process.env.AIRPLANE}, too?. nit: remove the empty line on top of a function. I might just be too used to the standard style :) thanks. Is there an advantage with using the RegExp constructor over just var protocolDelim = /\\/{2}/?\nAlso what if someone does sth like nock('http://example.com//foo')? Maybe it would be better to split with /:\\/{2}/? \nCould you add a comment explaining why we don\u2019t use url.parse() here, maybe reference the pull request?. you are mixing up two spaces / four spaces indentation, which make is a bit hard to read, could you fix that please?\nIt looks like you forgot to close one of the brackets, see https://travis-ci.org/node-nock/nock/jobs/350166318#L1962\nMake sure to run npm test locally and have it green before creating the pull request :). no please don\u2019t, not everyone is using these. But you can add one to your home directory if you have a preferred style.\nUsually Editors can refer the indentation style from the current file without additional configuration. could you link lodash.matches to https://lodash.com/docs/#matches?. why a 301 response instead of a 200? If you do a 301 you have to set the location header: https://en.wikipedia.org/wiki/HTTP_301. Could you please add another test where the request body is a string to cover https://github.com/node-nock/nock/pull/1089/files#diff-f7a7f1f3d9e28ef78a493002d2cb1f73R14?\nOtherwise it\u2019s great, thanks a lot!. In that case, do we need return qs.stringify(body).match(spec);? If all other tests pass without it I\u2019d rather leave it out?\nAlso I think I\u2019d move the regex check below\njs\n  if (Buffer.isBuffer(body)) {\n    body = body.toString();\n  }\nWhat do you think?. if we do a time frame let\u2019s do 2011-2018. First release was on Sep 22, 2011. in case we rename the file make sure to update the link here. maybe clarify that this link is an example? Maybe change it to\nRunKit: <!-- example: https://runkit.com/gr2m/node-nock-nock-768 -->. What shall be added to Context? Maybe the nock version used? . Agree :). I wonder if we should let people create issues for this template. We can add checkboxes for the things they can do, e.g.\n- [ ] Star the repository \u2b50\ufe0f\n- [ ] Help out with issues\n- [ ] ...\nWe could let people say a sentence or two, it will be nice to hear for the maintainers. We could also ask them in what projects they use it by what companies, if they are okay sharing that information. I\u2019d maybe rephrase it a little bit\n\nNock\u2019s changelog can be found directly in the GitHub release notes. These are automatically created by semantic-release based on three commit message conventions\n\nI don\u2019t think we need to mention @nockbot here. I feel that it\u2019s an internal detail that is not to interest to people looking for the changelog. yeah I know, lots of legacy and moving parts. Moving to ES6 will be the fun part, we have to get good code coverage and solid tests first. If you\u2019d like to help out, we coordinate our efforts at #1077 . Might be a pitfall \ud83e\udd14 \nCan you add this all to the README?. I wonder if we need the getMock function? Wouldn\u2019t that be enough?\njs\nexample.get(\"/pathC\").optionally(true).reply(200);\nexample.pendingMocks() // []\nexample.get(\"/pathC\").optionally(false).reply(200);\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]. same :) . can you remove this for now? I\u2019m happy to add it later once we have some more progress to show that we achieved thanks to the money from the collective. \nPlease remove the opencollective dependency from line 176, too. @RichardLitt I\u2019d say we leave that section? . Yes, the idea is that people creating that issue wouldn\u2019t see any text in the editor without scrolling. I\u2019d maybe also change the text in the first line to \n--------------^ Click \"Preview\" for a nicer view!\nlike Babel does it: https://github.com/babel/babel/issues/new?template=Support_question.md. ohhh ooops wrong template \ud83e\udd26\u200d\u2642\ufe0f . Can you make a separate PR for the code change and only do tests? It's harder to review that way. I don\u2019t know \ud83e\udd37\u200d\u2640\ufe0f Can you open a separate issue/PR for discussion?. can you please not post to an external server, instead spawn a local server for the test? See https://github.com/nock/nock/issues/1077 for more information, see #1083 for an example pull request doing just that. I don\u2019t know why that was here before, but this change seems unrelated to your changes? . I think we can remove the , { before: beforeFunc } options here?. wait, it looks like coverage is already run only once per build, I don\u2019t think that your change is making any difference \nhttps://github.com/nock/nock/blob/5c67b46ed2ed74abed05430eb3991332c35dd241/.travis.yml#L36-L40\nAre you sure we post coverage multiple times per build/. That will release a new 10.x fix version, and we shouldn't drop Node 4 support in v10. ooh my fault, I mixed up projects lol, sorry! We don't support Node 4 any more in v10.x. I usually do const { test } = require('tap')\nAnd then\njs\ntest('matchBody ignores new line characters from strings', t => {\netc. shall we prefix these with TODO:? Sounds like something we should get back to? We probably will anyway as we update the code base :) . One thing that I'd love to do is to cancel the the build if there was an update. The new commit will cause a new build anyway. I've enabled the \"Auto cancel branch builds\" setting on travis, but I'm not sure if that will cancel the current build as it already started?. I wonder why not just write \"1000\" instead of 1e3 :D Great catch!. Love that you added these comments for the time being \ud83d\udc4d . why not change nanoseconds * 1e-6 to nanoseconds / 1000000 as well?. good point. I wasn\u2019t familiar with 1e-6, maybe it's just me :) . Interesting! I wonder why \ud83e\udd14 . I wonder if we should use non-existing domains to make clear that we don\u2019t intend to send requests to these domains. Something like http://test.nock maybe?. this reads very odd ... \ud83e\udd14 any alternative idea? Could the enforced destructing be disabled for lines where existing variables are set?. example.test is great \ud83d\udc4d . just that I understand, it got stock with got, but works with mikealRequest?. This looks good by the way, merge if you are done with it. I don\u2019t think we need the use strict if we require Node 8+?. Iriscouch used to be a provider for hosted CouchDB, they no longer exist.\nRandom fact: they hosted the npm registry in the beginning. At some point they got aquired by Nodejitsu which in turn got aquired by GoDaddy. \nSo tl;dr, let\u2019s change the URL :) Any suggestions? Maybe an example using https://api.github.com? . I would suggest to use https://example.test?. I agree, I run into this before but let it go because it would be a breaking change and there were other things to do. I also think we should enforce setting a method and throw an error if it\u2019s not set.. I\u2019d do it in a separate PR though. @paulmelnikow Will these bullets work with prettier? If not we can configure toc-me with a .github/toc.yml file: https://github.com/pholleran/toc-me#configuration-options. okay I'll take care of it!\nRelated question: shouldn\u2019t we run a prettier check as part of the lint stage on Travis? I expected it to fail, but it only runs the eslint checks. I usually run lint tests before to reduce the time the travis build take, but if you prefer to change it please go ahead, I don\u2019t have strong feelings about it :). when it fails, it doesn\u2019t continue the running the other builds. go ahead then :). it\u2019s not correct I think, license is not a string, but an object: https://api.github.com/repos/nock/nock/license\nBut we could use that, only with nock instead of atom?. maybe add a comment to find out if the problem still persists? It sounds like a problem with restify, we shouldn\u2019t have workarounds in nock for specific other modules, we should implement what the standard is. Do we need the check if uri is a string?\nFor the condition, how about /^[^/*]/.test(uri)?. ^^ I had the same thoughts but in the end decided to accept the change because Kevin put so much effort into it. But throwing a helpful error message instead might be a good compromise?. yes please \ud83d\udc4d thanks!!. nice :). Oh I think we use arrow function in most tests now, maybe change it to(t) => {}?. I wonder if we could create a dummy stream without depending on the LICENSE file existing? I don\u2019t expect it to go anywhere, it would be just more atomic that way. I quickly googled this and it doesn\u2019t seem to be so trivial to create a readable stream as I thought :) So I\u2019m okay leaving it as is, just wanted to mention . or maybe just read the current file using https://nodejs.org/api/globals.html#globals_filename?. Okidoke :) . I\u2019m not sure about the naming ofscope.assert(), it reads as if I should pass in something. Maybescope.assertDone()andscope.assertAllDone()`?. I\u2019m a fan of clear method names, even if they are long. Code readability is king \ud83d\udc51 . Naming is hard. I don\u2019t have the headspace right now, I\u2019ll have to get back to you next week, after vacation. Are we actually doing this right now?. suggestion\nNock is entirely self-funded by [our Open Collective](https://opencollective.com/nock). Open Collective allows us to get contributions from users and companies, without giving away our open source IP. Think of it like a kickstarter, or an old-fashioned system of art patrons.. Now with the @all-contributors bot installed, maybe that\u2019s obsolete?. how about expressing that all interceptors have been used up, the naming would align with the READ THIS! section in the readme: https://github.com/nock/nock#read-this---about-interceptors\nsth like nock.allInterceptorsUsed()? \nI wonder if that method is necessary at all, maybe we should reduce the amount of APIs. \nMaybe something like the .remainingInterceptors() method would be enough, then I do the assertion myself in my tests?. now seeing that, I wonder why one of the method is called assertAllMocksUsed and the other assertMocksUsed. Wouldn\u2019t it be more consistent to call both assertMocksUsed and the \"scope\" of the method call would be clear based on wether you call it on a scope instance or the global nock object?. > Especially if those two functions are doing different things\nWouldn\u2019t both functions do the same thing? nock.assertMocksUsed() would check globally, scope.assertMocksUsed() would check for only that scope?. Could you maybe remove the Meh. from the assessments? Maybe it\u2019s just me, but somehow it has a negative vibe and I wouldn\u2019t like it to set a tone for communication for the Nock community. I\u2019d say let\u2019s do it.\nI wonder if it would be easier to move this out into its own RFC?. Awesome, let\u2019s do it! No objections \ud83d\udc4d . I feel either way could cause confusion. Having just one method name would make it easier to remember. But in the end I think it\u2019s better than what  we have right now and if you feel strong about nock.assertAllMocksUsed() being better than nock.assertMocksUsed() than let\u2019s go ahead with it :)\nIf we have two different methods anyway and want them to look different, we could also do scope.assertScopeMocksUsed(). It's repetitive, but clear.. maybe we could add two options: \n\nhosts: for a block list\nexcludeHost: for an unblock list\n\nAlso I wonder if we could come up with a simpler alternative to Unreachability, it\u2019s quite hard to spell :D . Maybe we can call it .throwOnUnmockedRequests() might be more clear of what the method does?\nOn a big picture perspective, I feel like things like this should be an option when instantiating nock, which we currently don\u2019t do, but I really think we should. We can discuss that in another RFC :D . maybe .simulateConnectionError()?. Agreed. I feel we can come up with a better way here. whenUnmocked feels like it should be an event handler somehow ... \ud83e\udd14 I\u2019m not sure about this one, I feel there is a better way. Sorry I know that\u2019s not helpful but all I got right now \ud83e\udd37\u200d\u2642\ufe0f . If we do two different method names, then I\u2019d prefer nock.assertAllMocksUsed over nock.assertMocksUsed. The latter might suggest I can pass an argument. maybe just rfc: 001?. +1 or draft. ",
    "em-cliqz": "That is what I ended up doing. I created a filtering function like below.\n```\nfunction normalize_get_path( str ) {\n    var u = url.parse( str );\n    var query = querystring.parse( u.query );\nvar params = [];\nfor( var param in query )\n    params.push( param );\nparams.sort();\n\nvar oqs = '';\nfor( var param in params ) {\n    if( oqs.length )\n        oqs += '&';\n\n    oqs += encodeURIComponent( params[param] );\n    oqs += \"=\";\n    oqs += encodeURIComponent( query[params[param]] );\n}\n\nvar c = url.format( { pathname: u.pathname, search: oqs } ); //NODE: 'query' is ignored, must use search\nreturn c;\n\n}\n```\n. ",
    "jtremback": "Shouldn't this be in the library? Query strings are pretty common things.\n. 1+\n. ",
    "wejendorp": "Agree with @jtremback.\n. Something like the body matcher code would be awesome for query params as well.\n. Nock is intercepting http.request, emitting an error on the request object as soon as it is created with #nextTick. Superagent, however, creates the request as part of various query and header operations, possibly long before registering the error handler in #end.\nI think that's why I'm experiencing uncaught errors, when not calling #end in the same function.\n. @aoberoi Let me know if you find a solution for proxy tests.\n. ",
    "samccone": ":+1: to this idea / problem\n. @pgte would you be open to something like\n.get(\"/x/x\")\n.allowAnyQueryString()\n.reply(..............)\nIf so I can do this\n. well done @lambertsteven \n. ",
    "djensen47": ":+1:\n. ",
    "mtford90": ":+1: \n. ",
    "LoicMahieu": "I'm mocking an external ugly API which has a lot of query string stuffs...\nAt this time we write that:\nvar data =\u00a0{ foo: 'bar' };\nnock.get('/some/path' + querystring.stringify(data))\nwhich is quite ugly but now, ordering is the problem.\nAs @wejendorp said, marcher like body would be great! :+1: \n. ",
    "doublerebel": ":+1: \n. The way I was imagining, was an extension to the API.  Similar to the above proposal for .allowAnyQueryString():\njs\n.query() // Allow any query string\n.query(true) // Allow any query string\n.query(false) // Disallow any query string\n.query({key: \"value\"}) // Match query object\nThis matches up with the superagent syntax used in nock's test suite.\nIn the best case, we could parse the query string from the existing path, and treat that path as a shorthand for .query, enabling backwards compatibility. i.e.:\njs\n.get('/users/1?password=XXX')\n.get('/users/1').query({password: \"XXX\"}) // same result\nAnd also imagining filteringQuery() as in:\njs\n.filteringQuery(function(queryObj) {\n    if (queryObj.password == ...);\n});\nEDIT: added .query() and .query(false)\n. ",
    "floatdrop": ":100: Any plans on this?\n. ",
    "svnlto": "I also think the first option fits nicer into nock's api.\n. fixed in https://github.com/pgte/nock/commit/3228760f2e7641de2bd15d2bea29425987c4d26a\n. this looks great.\n. thanks!\n. @pgte :thumbsup: \n. Thanks!\n. build's breaking unfortunately.\n. Travis tests on 0.8 unfortunately do not pass..\nhttps://travis-ci.org/pgte/nock/jobs/19441854\n. This unfortunately breaks the build, could you look over it again?\n. @pgte yay.\n. :clap: \n. word.\n. @pgte I'm a little biased but agree :)\n. typo?\n. ",
    "kevinhodges": "Has anyone started a branch for this?  I'm happy to give it a crack, from a first look at the codebase we'd want to extend the scope => intercept function with a .query(), but then it should probably use a lot of the .match() functionality, any thoughts/ideas on the best solution let me know.\nIn terms of the interface, the best solutions are not gonna be backwards compatible, something like\nvar google = nock('http://www.google.com')\n.get( '/', {\n  body: {\n    foo: 'bar'\n  },\n  query: {\n    foo: 'bar'\n  }\n}\nfeels quite nice.\n. ",
    "jezeniel": "@pgte what is the news about this issue? Is this implemented?\n. ",
    "rudyjahchan": "Added the additional capability of being to nock.activate() after a nock.restore(). The combination of these two methods and also nock.recorder.rec() will allow the switching back and forth between mocking and recording.\n. ",
    "rgarcia": "I don't think you understand--I want the request for / to go to the real google.com, hence the allowUnmocked: true and only mocking the route /abc. However, when I go to request / nock throws an error instead of passing it through to the real google.com.\n. Thanks for the quick fix!\n. The code also works if you remove the json body, surprisingly.\n. ",
    "andrerod": "Indeed. You have at least RFC 2616, RFC 2518, RFC 3253, RFC 3648, RFC 3744 and probably a few others.\nMaybe the real solution is to provide a method that takes the verb and use that one when generating recordings. (right now it generates with the verb as function name and the function may not even exist).\n. https://github.com/flatiron/nock/issues/93\n. The exact problem is here:\nif (typeof spec == 'string') {\n    return body.toString() === spec;\n  }\ndoing a toString on a JSON object (obtained in     json = JSON.parse(body);), returns [object] which is not the same as a string with json in it.\n. Not yet :(\nAssume both input parameters are strings containing json.\nThis line will assign json to body:\n  if (json !== undefined) body = json;\nThere's no equivalent to the spec.\nThis line fails:\n    deepEqual(spec, body);\nBecause one is, a string:\n{\"intervalPeriod\":2,\"intervalUnit\":\"hour\",\"startTime\":\"2013-04-02T18:46:54.897Z\",\"status\":\"enabled\"}\nand the other is, an object:\n{ intervalPeriod: 2,\n  intervalUnit: 'hour',\n  startTime: '2013-04-02T18:46:54.897Z',\n  status: 'enabled' }\n. I think this logic should only happen if:     if (\n      (typeof spec == 'object') &&\nThen you know you need to try to convert the body to an object from a string.\n. if (typeof spec == 'object') {\nvar json;\n  try { json = JSON.parse(body);} catch(err) {}\netc ...\n}\n. LMK if you need help, i may try to work on a PR for it later today\n. Seems to be fixed now. I'm now seeing a different issue but need to investigate the root cause before. Might be something on my side. Thanks!\n. ",
    "arnaugm": "I'm having the same problem, did you find a solution?\n. ",
    "saw": "So I'm just dense then. :cry: \n. Makes sense, thanks!\n. ",
    "SocalNick": "@pgte or @saw do you know of any modules that can emit the network level errors?\n. ",
    "cozmo": "Sorry, this is the desired behavior I believe. The issue arises with allowUnmocked. \nwith\n``` javascript\nnock(\"https://httpbin.org\",{allowUnmocked: true}).post(\"/post\").reply(200,\"99problems\")\noptions = {\n  method: \"post\",\n  uri: \"https://httpbin.org/post\",\n  json: {\n    some: \"data\"\n  }\n};\n```\nthe request fails with an ECONNRESET\nSorry about the confusion. \n. ",
    "leppert": "@pgte regarding the HTTP method needing to be uppercase, it seems I ran into this issue when using nock.recorder. The recorder would output transcripts that worked with allowUnmocked: false but wouldn't work with allowUnmocked: true. The issue of requiring uppercase HTTP methods aside, it seems like transcripts made by nock.recorder should work as expected regardless of the case used when the initial recording is made.\n. Maybe something like:\njavascript\nnock(\"buystufffrom.jessicahische.com\")\n    .resolveCname()\n    .reply([\"jessicahische.bigcartel.com\"]);\nOr namespaced:\njavascript\nnock.dns(\"buystufffrom.jessicahische.com\")\n    .resolveCname()\n    .reply([\"jessicahische.bigcartel.com\"]);\nChaining:\njavascript\nnock.dns(\"buystufffrom.jessicahische.com\")\n    .resolveCname()\n    .reply([\"jessicahische.bigcartel.com\"])\n    .resolve(\"A\")\n    .reply([\"66.209.77.199\"]);\nTo outline a use-case, I have a crawler that sniffs for domains with a bigcartel.com CNAME before making a GET request to them. I use nock's record feature to speed up my tests and allow me to run them while offline but the fact that DNS requests aren't recorded means that I either a) still need a connection to the web or b) need to write my own wrapper around the DNS module to provide nock-like responses. Either option is fine, it'd just be nice if nock obviated them.\n. Understood. If I get the time, I'll dig in and see what I can come up with. Thanks!\n. ",
    "mfrobben": "Oh, forgot - If I copy and paste the first example into my code, I get: \nError: Nock: No match for HTTP request POST /1.3/?method=listUnubscribe ...\n. ",
    "TomHoss": "Sweet, thanks\n. ",
    "azylman": "Wouldn't that second case only be true if you were using the same instance of nock for each test instead of creating a new one for each test?\n. Ah, got it, so basically it'd be a backwards-incompatible change because you'd need to start forcing everyone to do cleanup.\n. ",
    "knkher": "Reconfirmed that a problem still exists with the latest nock (v0.23.0) and aws-sdk(1.12.0). Please see the following comment on the discussion about this issue on aws-sdk-js repo. Per this thread nock is missing support for the new streams api introduced in node.\n. ",
    "jaridmargolin": "I believe I am still seeing this issue.\n\nI am attempting to record a call to s3 listObjects\nUncaught TypeError: Cannot read property 'length' of undefined\n      at /Users/jaridmargolin/opensource/s3-site/test/bucket.js:201:29\n      at Response.<anonymous> (/Users/jaridmargolin/opensource/s3-site/lib/bucket.js:120:12)\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:346:18)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:104:18)\n      at Request.emit (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:79:10)\n      at Request.emit (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:600:14)\n      at Request.transition (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:19:12)\n      at AcceptorStateMachine.runTo (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/state_machine.js:14:12)\n      at /Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/state_machine.js:26:10\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:25:9)\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:602:12)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:88:20)\n      at Request.emit (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:79:10)\n      at Request.emit (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:600:14)\n      at Request.transition (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:19:12)\n      at AcceptorStateMachine.runTo (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/state_machine.js:14:12)\n      at /Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/state_machine.js:26:10\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:25:9)\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:602:12)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:88:20)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:105:14)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:105:14)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:105:14)\n      at Request.emit (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:79:10)\n      at Request.emit (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:600:14)\n      at Request.transition (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:19:12)\n      at AcceptorStateMachine.runTo (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/state_machine.js:14:12)\n      at /Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/state_machine.js:26:10\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:25:9)\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:602:12)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:88:20)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:105:14)\n      at Request.emit (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:79:10)\n      at Request.emit (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:600:14)\n      at Request.transition (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:19:12)\n      at AcceptorStateMachine.runTo (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/state_machine.js:14:12)\n      at /Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/state_machine.js:26:10\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:25:9)\n      at Request.<anonymous> (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/request.js:602:12)\n      at Request.callListeners (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:88:20)\n      at callNextListener (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/sequential_executor.js:98:16)\n      at IncomingMessage.onEnd (/Users/jaridmargolin/opensource/s3-site/node_modules/aws-sdk/lib/event_listeners.js:183:11)\n      at IncomingMessage.EventEmitter.emit (events.js:117:20)\n      at _stream_readable.js:920:16\n      at process._tickDomainCallback (node.js:459:13)\nIntroducing the following fixes the failing test:\nAWS.HttpClient.streamsApiVersion = 1;\nIs there any additional information I could provide to help assist in hunting this issue down?\n. Line 201 is where I attempt to access returned data from the aws call. I inserted some very basic logging into the aws-sdk to trace the response object. When nock.recorder.rec is called, the response data of the call is set to an empty object. When all references to nock Are removed, the data object is populated:\nwith nock\ndata: {}\nwithout nock\ndata: { IsTruncated: false,\n     Marker: null,\n     Contents: [ [Object] ],\n     Name: 's3site-test-exists',\n     Prefix: null,\n     MaxKeys: 1000,\n     CommonPrefixes: [] }\nAlso noticed inconsistencies with the http response buffer property:\nwith nock\nbody: <Buffer >\nwithout nock\nbody: <Buffer 3c 3f 78 6d 6c 20 76 65 72 73 69 6f 6e 3d 22 31 2e 30 22 20 65 6e 63 6f 64 69 6e 67 3d 22 55 54 46 2d 38 22 3f 3e 0a 3c 4c 69 73 74 42 75 63 6b 65 74 52 ...>\n. No actual mocks are being used. Only the recorder. And to confirm, the errors occur during recording, not playback.\nusing mocha:\n```\n// load or record\nbefore(function () {\n  if (mocksExist) {\n    nock.load(mocksPath);\n  } else {\n    nock.recorder.rec({\n      dont_print: true,\n      output_objects: true\n    });\n  }\n});\n// write out recordings\nafter(function (done) {\n  return mocksExist\n    ? done()\n    : fs.writeFile(mocksPath, JSON.stringify(nock.recorder.play()), done);\n});\n```\nfull source can be viewed here\n. ",
    "jakecraige": "@pgte I'm having the same issue as @jaridmargolin . Technically using the node-s3 package but the error comes from internal to aws sdk. Happens when I use listObjects. \nTests pass when not using nock, when I turn on the recorder with nock.recorder.rec(); before the tests. They begin to fail with this stack trace\nsh\nTypeError: Cannot read property 'length' of undefined\n    at /Users/user/Work/apps/app/api/node_modules/s3/lib/index.js:555:39\n    at /Users/user/Work/apps/app/api/node_modules/s3/lib/index.js:1301:9\n    at Response.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/lib/index.js:600:11)\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:350:18)\n    at Request.callListeners (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:100:18)\n    at Request.emit (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:77:10)\n    at Request.emit (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:604:14)\n    at Request.transition (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:21:12)\n    at AcceptorStateMachine.runTo (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/state_machine.js:14:12)\n    at /Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/state_machine.js:26:10\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:22:9)\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:606:12)\n    at Request.callListeners (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:104:18)\n    at Request.emit (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:77:10)\n    at Request.emit (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:604:14)\n    at Request.transition (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:21:12)\n    at AcceptorStateMachine.runTo (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/state_machine.js:14:12)\n    at /Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/state_machine.js:26:10\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:22:9)\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:606:12)\n    at Request.callListeners (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:104:18)\n    at Request.emit (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:77:10)\n    at Request.emit (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:604:14)\n    at Request.transition (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:21:12)\n    at AcceptorStateMachine.runTo (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/state_machine.js:14:12)\n    at /Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/state_machine.js:26:10\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:22:9)\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:606:12)\n    at Request.callListeners (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:104:18)\n    at Request.emit (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:77:10)\n    at Request.emit (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:604:14)\n    at Request.transition (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:21:12)\n    at AcceptorStateMachine.runTo (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/state_machine.js:14:12)\n    at /Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/state_machine.js:26:10\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:22:9)\n    at Request.<anonymous> (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/request.js:606:12)\n    at Request.callListeners (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:104:18)\n    at callNextListener (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/sequential_executor.js:90:14)\n    at IncomingMessage.onEnd (/Users/user/Work/apps/app/api/node_modules/s3/node_modules/aws-sdk/lib/event_listeners.js:183:11)\n    at IncomingMessage.emit (events.js:117:20)\n    at _stream_readable.js:944:16\n    at process._tickDomainCallback (node.js:486:13)\n. Looks like #266 fixed it :) \nHere's my reproduction:\n``` js\nvar test = require('tape');\nvar s3   = require('s3');\nvar nock = require('nock');\nvar accessKeyId     = process.env.AWS_ACCESS_KEY_ID;\nvar secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;\nvar bucket          = process.env.AWS_BUCKET;\nvar client = s3.createClient({\n  s3Options: { accessKeyId: accessKeyId, secretAccessKey: secretAccessKey }\n});\ntest('passes', function(t) {\n  t.plan(1);\nvar list = client.listObjects({ s3Params: { Bucket: bucket } });\nlist.on('error', t.fail);\n  list.on('end', t.pass);\n});\ntest('fails with nock recording enabled', function(t) {\n  t.plan(1);\nnock.recorder.rec({dont_print: true});\nvar list = client.listObjects({ s3Params: { Bucket: bucket } });\nlist.on('error', t.fail);\n  list.on('end', t.pass);\n});\n```\nUsing 0.58.0 it fails, passes with 0.59.0\n. ",
    "tinogomes": "I believe this is my last pull request for moment :P\n. Send a little bit over #118 pull request\n. @pgte I noticed that nock is not throwing exception. I believe that is the way to debug.\n. @pgte Nice moving.\n. @gr2m please, remove me, because I am not working with NodeJS for less 3 years.\nBut, very cool that sematic-release library\nThanks. ",
    "hendrikcech": "Oh, apparently one of the node versions between 0.10.3 (which I used) and 0.10.12 solved this problem.\nSorry, I should have updated node prior to reporting a bug. Thank you for your help.\n. ",
    "lakenen": "@pgte @hendrikcech I am seeing this exact issue with node v0.10.29, latest versions of hyperquest and nock.\n. No idea what I'm doing, but if I give EventEmitter a destroy method, it seems to fix it...\nlib/request_overrider.js:12\njs\nEventEmitter.prototype.destroy = function() {};\n. @pgte could you reopen this issue, please?\n. Awesome, thanks!\n. @pgte I think my original question was misleading, because I was confused by the error (which was caused by a bug in my code), but I believe the issue is still valid. Here's some clarification:\nI'd like to be able to specify a matcher for form values (multipart or urlencoded). Perhaps something like:\njs\nnock('...')\n    .matchForm('myField', 'some value') // value matching\n    .matchForm('myOtherField', /\\d+/) // or as a regexp\n    .matchForm('myBinaryField', /* something to denote that a field should be binary data? */)\n    .post('/some/path');\nDoes that sound possible? I don't know how the other matchers work, so I really don't know if this is feasible, but I do think it would be very useful!\n. ",
    "ipelekhan": "Are there any examples how to use this? I can't make it work with axios without specifying hostname.. ",
    "serenitus": "Thanks for taking a look. I realize that it's currently not the best\nimplementation but I was attempting a light touch to make it work locally\nhere for our needs. If you're willing in principle to accept the feature\nthen I'll tidy it up and of course add some tests!\nSimon.\nOn 19 September 2013 08:25, Pedro Teixeira notifications@github.com wrote:\n\nAlso, it would be nice to have some tests for this new feature to know if\nsomeone breaks it in the future :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flatiron/nock/pull/122#issuecomment-24747728\n.\n. Leave it open. I'll try and finish it over the holidays.\n\nOn 3 December 2013 02:47, Pedro Teixeira notifications@github.com wrote:\n\nAny news on this PR, or should I close it?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/pgte/nock/pull/122#issuecomment-29699644\n.\n. When is it you think the holidays start?!\n\nOn 17 December 2013 00:52, Pedro Teixeira notifications@github.com wrote:\n\nHi @serenitus https://github.com/serenitus, any news on this? :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/pgte/nock/pull/122#issuecomment-30734797\n.\n. Ha. Well, I meant it in jest but I guess that didn't come over so well :)\nI'll open a new PR as you suggest.\n\nOn 18 December 2013 06:26, Pedro Teixeira notifications@github.com wrote:\n\nAs you may guess I don't know you personally, so I have no idea about your\nplans, you don't need to be so aggressive. I wanted to know about your\nprogress so that I don't keep stalled issues opened.\nI'm going to close this issue now, feel free to open a new PR when you are\nready.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/pgte/nock/pull/122#issuecomment-30845145\n.\n. \n",
    "xavierchou": "The requests in for loop call the same path \\,  shouldn't the interceptor which is targeting the path \\ to be set again for another request?\n. ",
    "piichimochi": "Also wanted to note that according to this post:\nhttp://stackoverflow.com/questions/9580226/nodejs-httprequest-with-data-getting-error-getaddrinfo-enoent\nI should supply the host without the \"http://\" and any trailing slashes. However if I do that, I ran into another issue: \nError: Protocol:test.mysite.com: not supported.\n      at Object.exports.request (http.js:1841:11)\n      at Object.module.request (/Users/janenguyen/sandbox/test/node_modules/nock/lib/intercept.js:205:31)\n      at Object.exports.get (http.js:1848:21)\n      at MyClass.getData (/Users/janenguyen/sandbox/jane.js:52:8)\n      at Context.<anonymous> (/Users/janenguyen/sandbox/test/jane.js:38:16)\n      at Test.Runnable.run (/usr/local/lib/node_modules/mocha/lib/runnable.js:194:15)\n      at Runner.runTest (/usr/local/lib/node_modules/mocha/lib/runner.js:358:10)\n      at /usr/local/lib/node_modules/mocha/lib/runner.js:404:12\n      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:284:14)\n      at /usr/local/lib/node_modules/mocha/lib/runner.js:293:7\n      at next (/usr/local/lib/node_modules/mocha/lib/runner.js:237:23)\n      at Object._onImmediate (/usr/local/lib/node_modules/mocha/lib/runner.js:261:5)\n      at processImmediate [as _immediateCallback] (timers.js:330:15)\nSame thing happens when I try to use a dotted IP address (e.g. 192.168.1.1)\n. For anyone else interested, For now, I eventually got around this by using request (https://github.com/mikeal/request) instead of the http interface in Node.\n. Thanks for looking into this. Seems like it stems from the different way Node's HTTP expects the host to be defined (without the 'http://' prefix) versus how nock expects it (with 'http://') for the post. So please feel free to close the issue (or leave it as an enhancement to take either format. It's strange that Node's HTTP can take \"http://\" for GET but not POST).\nHere's a simple Node HTTP POST using nock which works with this in mind:\n```\nvar nock = require(\"nock\");\nvar http = require('http');\nvar testServer = nock(\"http://test.mysite.com\")\n                  .post(\"/data\")\n                  .reply(200, \"Hello world from server!\");\nvar options = { \n    host: 'test.mysite.com', \n    port: 80, \n    path: '/data', \n    method: 'POST'\n  };   \n// Set up request \n  var req = http.request(options, function(response) {\n    var str = \"\"; \n    response.on(\"data\", function (data) { str += data }); \n    response.on(\"end\", function () {\n      console.log(\"Response from nock server: \", str);\n    }); \n  }); \n// Post data \n  req.write(\"Hello world from client!\"); \n  req.end(); \n```\n. ",
    "jasonkuhrt": "@pgte, Ah, okay. Thanks for confirming that its indeed a missing feature. \n. @neerolyte Indeed something generic as you outline is preferable. I can then achieve my simple goal with something like:\n.replyWith(delay(5000))\n. +1\nWould this also support mocking no-response? I have a use-case where I want to test what happens when the other end is simply not available. e.g. the same thing that would happen if you did curl http://asdlkjfldskjfdsal.com.\n. An E2E test that checks that after a device connects and has its subscribers mutate that those new subscribers do indeed get the event data:\ncoffee\n  it 'will START posting to subscriber after edge created', (done)->\n    wh = webhook().reply(200)\n    edge = {publisher_id:'a', subscriber_id:'http://a.com', events:input:'*'}\n    connect_bit {bit_id:'a'}, (err,conn,device)->\n      createEdge(edge).then ->\n        device.input('%5')\n        setTimeout (->\n          assert wh.isDone(), 'WebHook received POST'\n          done()\n        ), 50\nIts not that I'm saying there isn't a better more factored and discrete to write this case etc. The point is that if I could know when the webhook gets its POST then that would be at least a non-deterministic element gone from my test without having had to deeply rethink how I am going to test  this case. Other cases likely exist with their own and probably better justifications.\n. I've hacked together something on the fly like this:\n```\n  noWebhook = ()->\n    (new Promise (resolve, reject)->\n      createWebhook {}\n      .log ->\n        reject(new Error('Endpoint was hit.'))\n    )\n    .timeout 100\n    .catch Promise.TimeoutError, -> Promise.resolve()\nwebhook = (expect)->\n    (new Promise (resolve)->\n      createWebhook expect\n      .log resolve\n    ).timeout(100)\n```\nIt leverages the .log function: https://github.com/pgte/nock#logging.\n. This is an at least useful feature for integration and end to end tests\n. ",
    "neerolyte": "This would be super useful for me if I could just specify an arbitrary callback either to .reply(...) or another like .replyWith(function(cb) { ... }).\nWith a callback driven replyWith() you could do the delayed reply with setTimeout directly with something like:\n.replyWith(function(cb) {\n    setTimeout(function() { cb(200, \"OK\"); }, 1000);\n});\nbut it could also handle more complex scenarios, e.g. I'm currently trying to figure out how to test something where I want to test some behaviour while multiple concurrent requests are active, my current exact case is I want to stall the first N nock'd requests and only start replying to them once I've tested something else in the system.\nI am looking around inside the nock codebase to figure out if I can do this myself... but I'm not sure how far I'll get.\nCheers,\nDave\n. @jasonkuhrt Also just found https://github.com/mmalecki/hock which provides a similar API to nock without actually mocking anything, useful for doing more complex responses without having to spin up a really complex server.\n. @spenceralger That sounds cool but I can't get it working or see any example where it's done, would you mind writing one up?\n. @spenceralger Still stuck on the stream support - I can't tell where this is going wrong (i.e. my stream or nock expecting something extra on the stream) but thought I'd ping you on the issue.\n. @spenceralger Awesome, thanks! #138 definitely fixes it.\n. ",
    "mtkopone": "+1 for this, as I would like to test that everything works as planned when requests timeout.\n. ",
    "spalger": "For those of you wanting a more general solution, passing a callback as the body argument of reply() gives you a chance to return a stream. You can then write whatever data you would like, at whatever speed works best for you.\n. @neerolyte you can see an example at the bottom of this section in my personal fork. It is also a part of #133\n. Looks like the only reason why the createReadStream call works is because of file system latency. The simple example you have caused a data event (followed immediately by the end event) to be triggered one tick before the response event, so all the action had taken place before you could even listen for events. In a real life scenario this probably would not be the case as some IO would need to occur, but with the changes in #138 this simple example will work as well. \n. Sweet!\n. @pgte I like nock.delay and nock.delayBody.\nPS: If I was going to write it I would suggest the following API, but since I don't have time right now I'll just leave this here :smile:\n``` js\n// delay the whole request 500ms\nnock.delay(500);\n// only delay the body 500ms\nnock.delay({ body: 500 })\n// delay the connection by 500ms, then the headers another 1sec, never send the body\nnock.delay({ connection: 500, headers: 1000, body: Infinity });\n```\n. @pgte yay\n. ",
    "goloroden": "Just out of curiosity (but it may be helpful for others): Do you know any such module that allows mocking for websockets and / or Socket.io?\n. Nevermind, and thanks for replying that fast :-)\n. Just out of curiosity: Does anybody actually know an actual module for this?\n. Hmmm, okay\u2026\nThen I'm now going to try to create a small code sample that reproduces the problem.\n. Okay, I managed to come up with a test-case to reproduce\u2026\nFirst, run:\nbash\n$ npm install spdy request assertthat nock\nThen, run the following code using mocha --ui tdd:\n``` javascript\n'use strict';\nvar assert = require('assertthat'),\n    nock = require('nock'),\n    request = require('request'),\n    spdy = require('spdy');\nsuite('nock with SPDY', function () {\n  test('without agent', function (done) {\n    var scope = nock('https://localhost:3000').post('/').reply(200);\nrequest.post('https://localhost:3000/', function (err, res, body) {\n  assert.that(err).is.null();\n  assert.that(res.statusCode).is.equalTo(200);\n  assert.that(scope.isDone()).is.true();\n  done();\n});\n\n});\ntest('with agent', function (done) {\n    var scope = nock('https://localhost:3000').post('/').reply(200);\nvar agent = spdy.createAgent({\n  host: 'localhost',\n  port: 3000\n});\n\nrequest.post('https://localhost:3000/', {\n  agent: agent\n}, function (err, res, body) {\n  assert.that(err).is.null();\n  assert.that(res.statusCode).is.equalTo(200);\n  assert.that(scope.isDone()).is.true();\n  done();\n});\n\n});\n});\n```\nOn my machine, the first test passed while the second one crashes:\n``` bash\nSchneehase:foo golo$ mocha --ui tdd\nnock with SPDY\n    \u2713 without agent\n    1) with agent\n1 passing (63ms)\n  1 failing\n1) nock with SPDY with agent:\n     Uncaught Error: connect ECONNREFUSED 127.0.0.1:3000\n      at Object.exports._errnoException (util.js:812:11)\n      at exports._exceptionWithHostPort (util.js:835:20)\n      at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1056:14)\n```\nAny idea what I am missing?\n. PS: Versions used are:\n- iojs@3.0.0\n- assertthat@0.6.0\n- nock@2.10.0\n- request@2.60.0\n- spdy@1.32.4\n. Okay, I think I found it\u2026\nYou need to add an event handler for error to the agent, and just re-emit the event. Then everything works as expected. So instead of\njavascript\nvar agent = spdy.createAgent({\n  host: 'localhost',\n  port: 3000\n});\nit should be:\njavascript\nvar agent = spdy.createAgent({\n  host: 'localhost',\n  port: 3000\n}).once('error', function (err) {\n  this.emit(err);\n});\n. ",
    "piranna": "No, I don't. I was building one on top of ws module but other things got priority at my job and it got abandoned, sorry :-(\n. You are welcome :-)\n. Some time ago I did a wock module but I'm not able to find the code, maybe because I was not able to finish it. Anyway it should be easy to implement something like this. One option would be to use the suppose (disclaimer, I helped with it), but a better option would be that nock HTTP requests interception code would be moved to an independent project, so UPGRADE requests would be intercepted and later would just be a matter of listening on the incomming message events and answer to them.. An alternative to moving the interception code to an independent project, is to allow nock to hook the upgrade requests and give the connection object to a callback, so other module can be able to process the messages.. According to https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers, websockets connections are initiated with a regular GET request, just only with the upgrade header:\nGET /chat HTTP/1.1\nHost: example.com:8000\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\nSec-WebSocket-Version: 13\nSince nock accept a function to process the request and generate the response, it could be possible to hook there and process the websocket protocol in other module. Problem is that websocket frames would need to be needed to be generated from scratch, or stick on top of other module that can generate them (maybe ws?).. I've reviewed the code of ws module, and seems with the noServer option and by using the handleUpgrade() method would be possible to process the incoming websocket connections, later it would just be a matter of process them and generate a response.. > I can help facilitate the work but can\u2019t do it myself\nSome guidelines in the wiki explaining how the interception works and what's the critical code and methods would help to clarify how to start the splitting :-). I have been busy lately. What I'm asking about is to have the intercept code in an independent project and offer an API where you simply give it a middleware-like function (function(req, res){...}) and all the request for the intercepted domain will be procesed by that function. The same as nock is doing, but instead of doing it the processing of the requests to return a particular predefined answer, be able to process the answer myself at a lower level. This way I will not need to start a server on localhost but instead process requests directly.\n. ",
    "hems": "Would be great to get something like this for sockets... Any news on this front?\nnock is such an awesome project!. this should be added to the readme!. I just did a very simple proposal here: https://github.com/node-nock/nock/compare/master...hems:patch-1. @gr2m done! ( didn't change the backticks as i'm on the go now ). I believe the ideal solution would be nock to transparently fallback to xhr-mock when appropriate?\nas i suggested recently here: https://github.com/nock/nock/issues/1160 ?. thanks. It seems the error was on my side of things and was caused by console.log and not by nock itself. i think this is an important feature, but unfortunately i didn't have the time to develop anything in this direction.\nis this planned somehow on the roadmap or will we let this issue close?. It does look like it's very possible based on this project: https://www.npmjs.com/package/xhr-mock !!\nWould be incredible if nock could work in both environments ( browser and node.js ) transparently!. @gr2m thanks for the reply!\nOn my case, I would like to let all requests that go to localhost to don't be recorded or intercepted, but the ones going to an external api to be recorded / intercepted.\nI still didn't find a way, maybe i need to dig deeper on the readme?. that would be great, like if \"recorder.rec()\" could take a \"domain\" or rule so only those would be recorded, this would be sweet!. ",
    "apptous-seb": "Thanks, now it works for me.\nBy the way (regarding the comment for the fix) I don't think superagent is bad behaving - they do this to allow chainable calls like \nrequest.get('/shoes').query('size=10').query({ color: 'blue' }).end(function(response) {});\n. ",
    "tschellenbach": "actually from a user perspective, i dont care if it's dns or http. Just want to nockback and run my tests without requiring other parts of my infrastructure/third party services etc.\n. ",
    "wayoo": "It seems cause by calling RequestOverrider without callback parameter in the 'intercept.js'\njavascript\n...\nreq = new OverridenClientRequest(options);\n...\nres = RequestOverrider(req, options, interceptors, remove);\n...\nso the var newReq = new ClientRequest(options, cb); (in 'request_overrider.js') call's cb is undefined which caused the problem.\nby the way ...\n1. It's really hard for me to find out what's the difference between  new OverridenClientRequest and RequestOverrider...\n2. I replace new ClientRequset and 'propagate'  module with http.request, it works well\n. ",
    "drzax": "+1\n. ",
    "jskulski": "The main benefit is that nock intercepts requests sent by an app, rather than redirecting requests to a new server which our test/dev infrastructure would have to know about and start.\n. @alisonkohl sorry, didn't see this alert. Yes I ended up just building a small node server to handle our needs rather than using nock.\n@pgte nothing refute.\n. ",
    "alisonkohl": "@jskulski, what did you end up doing about this issue? Did you use the path filtering approach? Thanks!\n. ",
    "mkantor": "Hmm, I'm just getting started with nock, but I've already desired this feature too. Being able to do something like this would be handy:\njavascript\nvar pathRegex = /\\/users\\/([0-9]+)/;\nnock('http://example.com')\n  .get(pathRegex)\n  .reply(200, function(uri, requestBody) {\n    var userId = pathRegex.exec(uri)[1];\n    return somethingBasedOnId(userId);\n  });\nBut maybe this is just beyond the scope of nock's design goals. If there's another way to accomplish this sort of thing, I'm all ears.\n. ",
    "justincy": "@pgte It looks like nock already has \"path filtering\" though the behavior is different than what's being asked for here. The current implementation of path filtering will modify the url before matching against mocked requests. This issue is requesting the ability for one mocked request/function to match multiple urls via a regex.\nIn my particular case, I want to define one function that is called for any request to a particular domain.\n. @pgte Yeah. I ended up going with mitm.\n. Somehow I missed that you are already using Travis CI. You can configure Travis CI to run npm run coveralls which will update coverage.\n. Here's a link to the current stats in coveralls: https://coveralls.io/r/justincy/nock\n. ",
    "tlivings": "The header is a red herring. This turned out to be caused by nock emitting old data events rather than the new readable.\n. Opened a new issue regarding this: https://github.com/pgte/nock/issues/193\n. ",
    "jeremiahlee": "+1. I incorrectly assumed that I could have multiple filteringPath declarations. The documentation could clarify. Ideally, it'd be a great feature to support multiple filteringPaths.\n. ",
    "jbergknoff": "Are there any plans to add support for this?\n. Great. Thank you very much.\n. Seems like your change fixes my issue. Thanks, @ierceg.\n. I may have spoken too soon -- still seeing issues elsewhere in my test suite. They may have a different cause. I will update when I understand better.\n. ",
    "Janpot": "I'm so sorry, this was the result of a previous mock being attached. Simply adding beforeEach(nock.cleanAll.bind(nock)); to my suite solved this issue.\n. Running in the same issue:\nTypeError: Cannot call method 'indexOf' of undefined\n  at Test.Request.end (/node_modules/supertest/node_modules/superagent/lib/node/index.js:776:20)\n  at Test.end (/node_modules/supertest/lib/test.js:125:7)\n  at Test.expect (/node_modules/supertest/lib/test.js:88:36)\n  at Context.<anonymous> (/test/piccolo.spec.js:492:8)\n  at Test.Runnable.run (/node_modules/mocha/lib/runnable.js:218:15)\n  at Runner.runTest (/node_modules/mocha/lib/runner.js:374:10)\n  at /node_modules/mocha/lib/runner.js:452:12\n  at next (/node_modules/mocha/lib/runner.js:299:14)\n  at /node_modules/mocha/lib/runner.js:309:7\n  at next (/node_modules/mocha/lib/runner.js:248:23)\n  at Object._onImmediate (/node_modules/mocha/lib/runner.js:276:5)\n  at processImmediate [as _immediateCallback] (timers.js:354:15)\n. @pgte the path is a url in this case. Can you reopen the issue please?\nThe full match should be http://proxy.com/http://example.com/ not http://proxy.comhttp://example.com/\n. @pgte Did you notice I'm using the proxy functionality in request?\n. Enabling request debug mode:\njs\nrequest.debug = 1;\nYields folowing output:\nREQUEST { url: 'http://proxy.com/http://example.com',\n  proxy: 'http://proxy.com',\n  callback: [Function],\n  method: 'GET' }\nhttp://proxy.com/http://example.com\nREQUEST make request http://proxy.com/http://example.com\nNock: No match for request GET http://proxy.comhttp://proxy.com/http://example.com\n. ",
    "gajus": "I am running into a similar issue:\njs\nnock('https://foo.com/')\n    .get('/YourAccount')\n    .reply(302, undefined, {\n        headers: {\n            'Location': 'https://foo.com/Login'\n        }\n    })\n    .get('/Login')\n    .reply(200, '<p></p>');\nSome debugging information:\n``` js\nconsole.log(incomingMessage.headers, incomingMessage.request.uri);\n{\n    headers: {\n        Location: 'https://foo.com/Login'\n    }\n}\n{\n    protocol: 'https:',\n    slashes: true,\n    auth: null,\n    host: 'foo.com',\n    port: 443,\n    hostname: 'foo.com',\n    hash: null,\n    search: null,\n    query: null,\n    pathname: '/YourAccount',\n    path: '/YourAccount',\n    href: 'https://foo.com/YourAccount'\n}\n```\n. Request debug log:\njs\nREQUEST { headers: { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36' },\n  rejectUnauthorized: false,\n  url: 'https://www.foo.com/YourAccount',\n  method: 'GET',\n  resolveWithFullResponse: true,\n  jar: { _jar: { store: { idx: {} } } },\n  simple: false,\n  callback: undefined,\n  uri: undefined,\n  tunnel: false }\nREQUEST make request https://www.foo.com/YourAccount\nREQUEST onRequestResponse https://www.foo.com/YourAccount 302 { headers: { Location: 'https://www.foo.com/Login' } }\nREQUEST finish init function https://www.foo.com/YourAccount\nREQUEST response end https://www.foo.com/YourAccount 302 { headers: { Location: 'https://www.foo.com/Login' } }\nREQUEST end event https://www.foo.com/YourAccount\nREQUEST emitting complete https://www.foo.com/YourAccount\n. Indeed. Wrong syntax. Thank you.\n. There is no way to do this using nock at the moment. However, it is a trivial service to implement, e.g.\n```js\n// @flow\nimport http from 'http';\nimport stoppable from 'stoppable';\nimport {\n  promisify\n} from 'bluebird';\nimport type {\n  RequestHandlerType\n} from '../../src/types';\ntype HttpServerType = {|\n  +stop: () => Promise,\n  +url: string\n|};\nexport default async (responseBody: string | Buffer | RequestHandlerType): Promise => {\n  const router = (req, res) => {\n    if (typeof responseBody === 'function') {\n      responseBody(req, res);\n    } else if (responseBody) {\n      res.end(responseBody);\n    }\n  };\nconst server = stoppable(http.createServer(router));\nconst stop = () => {\n    return promisify(server.stop.bind(server))();\n  };\nreturn new Promise((resolve, reject) => {\n    server.once('error', reject);\n// eslint-disable-next-line no-undefined\nserver.listen(0, undefined, undefined, () => {\n  const port = server.address().port;\n  const url = 'http://localhost:' + port;\n\n  resolve({\n    stop,\n    url\n  });\n});\n\n});\n};\n```\nJust stop the server amid the request to simulate the disconnection.. @ierceg Can this be flagged as a feature request?. The issue remains relevant.. It most certainly does (because I set it).. > @gajus You do not appear to explicitly set the host header in the snippet above. It is of course possible that your fetch implementation sets the host header itself.\nhttps://github.com/gajus/xfetch/blob/3e8a7979df37e8a8b94e080e2145619aa90c6d03/src/index.js#L44-L54. ",
    "andrew-luhring": "@warfangle I've been getting similar errors:\nCannot find module '2LDb9K'\nat /var/folders/b3/2dzp4_jd1k77sms22g7vh94h0000gt/T/karma-browerify.js:1\nbut I'm not running nock-- the reason I'm posting here is because your error, like my error, is calling a file called karma-bro wer ify rather than karma-browserify  (karma-broWERify != karma-broWSERify). I'm trying to figure out why it's spelling the name wrong... because I'm wondering if that's causing my/our problems\n. ",
    "mreinstein": "https://github.com/substack/http-browserify\nprovides a pretty good shim for browsers.\n. thank you thank you thank you thank you thank you thank you!. ",
    "bevacqua": "@pgte this is how visionmedia/superagent does it. https://github.com/visionmedia/superagent/blob/master/package.json#L40-L44\nBasically provides two implementations\nWhat I would aim for is something like Sinon's fake server, but one which works in the browser and the server.\nhttp://sinonjs.org/docs/#server\n. ",
    "glassresistor": "Fixing this would be great\n. ",
    "vvo": "I made https://github.com/algolia/faux-jax/ which is a mock around XHR/XDR with feature detection to support and mimick as many browsers implementations as possible.\nWould it be trivial to add it to nock? Let me know.\nAlso, this issue was resolved, does it means we can mock ajax requests in the browser using nock? Does it supports XDomainRequests? Does it implements the xhr spec?\n. ",
    "chevdor": "I am writting my tests using karma/browserify and thus http-browserify.\nAs soon as I add var nock = require('nock'); to my test, it breaks as described above and show below:\nPhantomJS 1.9.8 (Mac OS X) ERROR\n  TypeError: 'undefined' is not an object (evaluating 'superCtor.prototype')\n  at /var/folders/ff/pqx4w8zx5yd73j2vq4004r4c0000gn/T/cd5194dbf9ff0644c11b401de24f658d.browserify:21562:0 <- node_modules/browserify/node_modules/inherits/inherits_browser.js:5:0\nPhantomJS 1.9.8 (Mac OS X): Executed 0 of 0 ERROR (0.608 secs / 0 secs)\n. ",
    "ryanzec": "Getting the same type of error when trying to use nock in the browser through browserify, should this work as with browserify?\n. ",
    "awlayton": "I get TypeError: 'undefined' is not an object (evaluating 'superCtor.prototype') too.\nWhen I apply the changes from substack/http-browserify#75, that error goes away but the code is making real HTTP requests instead of being mocked.\n. ",
    "dmitry": "Experiencing the same issue. Running chai + webmock + karma under phantomjs.\n. Looks like it's not possible to run it out of the box on the browser side, just because the browser doesn't have a filesystem.\n. Looks like the \"real\" solution could be: load a tapes through ajax/websocket to a browser into a memory (could be pouchdb or plain indexeddb, depending on browser support), then ajax mockers should be loaded and those tapes now could be used, but I feel it should be totally another package, lets name it vcr-browser. I don't believe anyone tried to implement similar thing as OSS.\n. Any proposals how it should work?\n. ",
    "zuripabon": "+1\n. ",
    "danillouz": "+1\n. ",
    "danpantry": "+1\n. @dmitry yep. A solution I've done is simply to make all code runnable in node - i.e, using jsdom or by using shallow rendering in react.\nFor some values of  \"a solution\".\n. ",
    "arjanfrans": "+1\n. ",
    "keenaudio": "Uncaught Error: Cannot find module \"fs\"\nscope.js, line 5\n. ",
    "hiradyazdan": "Bypassing the fs undefined error, this might be a different issue. But, using karma it still hits the real server, as now it throws an AssertionError comparing the real response returned from the server with the expected mock. \nIs there a chance to have a separate package supporting karma, as I don't have an issue when running by mocha?\n. @pgte I see what you mean. I think my nock build was incorrect so it was not even being called and it was hitting the real server. Built it again and failing fs when running on phantomjs. Can this module be also extended to work on browsers, like sinon?\n. @pgte I am using the latest. but I can see that @ali322 suggested to use fetch-mock as I am also using isomorphic-fetch, but it shouldn't make a difference as isomorphic-fetch is also for node and browserify, that are supported I guess, or it should?\n. Thanks for the follow up @pgte \n. ",
    "miazoom": "Same problem here: Using Karma and nock hits the real server. :(  Any solutions ??\n. @pgte \n- We are trying to intercept calls to localhost and use nock reply, but for whatever reason our call is still going to the real server. \n- We're using phantomjs and karma.\n- We use 'isomorphic-fetch' library to send request to server. \n``` javascript\ndescribe('async actions', () => {\n  it('creates FETCH_LIST_SUCCESS when fetching todos has been done', (done) => {\n    nock('http://localhost:8888')\n      .get('/api/list/1234567/items')\n      .reply(400, { items: ['do something'] })\n\n    const expectedActions = [\n      { type: REQUEST_ITEMS, categor: category },\n      { type: RECEIVE_ITEMS,  categor: categor, items: ['do something']}\n    ]\n    const store = mockStore({}, expectedActions,done)\n    store.dispatch(actions.fetchItems(category))\n  })\n})\n\n```\nAny help is appreciated \n. Thank for reponding @ali322 , I've tried fetch-mock, fetchmock and reqwest, non of them works yet - I'll keep trying other modules :( \n@pgte I'm not sure about native fetch:  I've tried something simpler: \n- created index.js with below content; \n- run \"node index.js n\"\n``` javascript\nvar nock    = require('nock');\nvar fetch = require('isomorphic-fetch')\nnock('http://www.google.com')\n  .get('/')\n  .reply(499999999)\n  ;\nfetch('http://www.google.com/')\n.then( function(response) {console.log(response); });\n```\nnock was able to intercept the (isomorphic) fetch call and return me 499999999.\nWe've been strickly follow the example on Redux (apart from mocha--> we use karma) : \nhttp://rackt.org/redux/docs/recipes/WritingTests.html\nIt somehow just keep going to the real server :(   Any other suggestions?? \n. ",
    "ali322": "@miazoom why not try \"fetch-mock\"\njs\n             fetchMock.mock(\"http://localhost:8888/api/list/1234567/items\",{\n                 status:200,body:{items:['do something']}\n             })\ninstead of\njs\nnock('http://localhost:8888')\n          .get('/api/list/1234567/items')\n          .reply(400, { items: ['do something'] })\n. ",
    "austinmao": "I am still seeing this with v3.1.1. Running karma + webpack using https://github.com/erikras/react-redux-universal-hot-example\n```\nWARNING in ./~/nock/lib/back.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/austinmao/Sites/aditive-frontend/node_modules/nock/lib\n @ ./~/nock/lib/back.js 17:7-20\nWARNING in ./~/nock/lib/scope.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/austinmao/Sites/aditive-frontend/node_modules/nock/lib\n @ ./~/nock/lib/scope.js 17:7-20\n```\n. ",
    "alixeb": "having same issue as @austinmao\n. ",
    "rixth": "@pgte I'm getting a couple warnings, then an error:\n```\nWARNING in ./~/nock/lib/scope.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/trix/workspace/project/app/node_modules/nock/lib\n @ ./~/nock/lib/scope.js 18:7-20\nWARNING in ./~/nock/lib/back.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/trix/workspace/project/app/node_modules/nock/lib\n @ ./~/nock/lib/back.js 17:7-20\nERROR in ./~/mkdirp/index.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/trix/workspace/project/app/node_modules/mkdirp\n @ ./~/mkdirp/index.js 2:9-22\n```\n. ",
    "vyorkin": "@pgte getting the same error as @austinmao, @alixeb and @rixth, the problem is this call to mkdirp.sync(dir, opts) => https://github.com/pgte/nock/blob/master/lib/back.js#L175, for now I've just commented it out\n. @danny-andrews @judikdavid @blackxored for now you can use fetch-mock. Sorry for ad of other solutions here. I'll definitely switch back to nock later (when it will support fetch) because I really like the API, code quality & docs\n. This would be super-useful.\nIf I understand correctly, we need to add a new mode (something like record-always, not sure about the name though). If there is any chance my PR could be accepted I want to try and implement this.\nThe reason why I need this is that I'm trying to use nock together with jest to do a snapshot testing.\nSo, I have a directory structure that looks like this:\n\u25be __tests__/\n          \u25be __fixtures__/  << nock fixtures\n          \u25be __snapshots__/ << jest snapshots\n              Client.test.ts.snap\n          \u25b8 support/\n            Client.test.ts\nand my current workflow is:\n1) set mode to record, run tests in watch mode \u2013 fixture and snapshot gets written to disk\n2) change something so that request params don't match anymore\n3) now I have to manually remove the nock fixture file to regenerate the corresponding fixture \ud83d\ude1e\n4) restart tests \ud83d\ude1e\n5) press u to update the jest snapshot\nAdding a new record-always / overwrite (does this name make any sense?) mode should make it possible to skip steps 3 and 4.\nRegarding implementation: I think it should simply check if request doesn't match fixture, if so \u2013 make a real http request and overwrite the fixture.\nAnother even simpler (hacky) solution could be to combine wild and record modes by:\n ~~using the setup function from wild mode~~\n removing the if ( !context.isLoaded ) check from the start function in our new override mode (?)\n* using the same finish func from the record mode.\ne.g. smth like this https://github.com/vyorkin-forks/nock/commit/f32ef2f6fc7867529f57a7cc95044f1d884915a4 (but this doesn't actually work :)):\n```\nvar overwrite = {\nsetup: function() {\n     // how to setup it up properly?\n  },\nstart: function (fixture, options) {\n    if (! fs) {\n      throw new Error('no fs');\n    }\n    var context = load(fixture, options);\nrecorder.record(_.assign({\n  dont_print: true,\n  output_objects: true\n}, options && options.recorder));\n\ncontext.isRecording = true;\n\nreturn context;\n\n},\nfinish: record.finish\n};\n```\nNot sure what kind of tests I should write for this mode. It looks like there'll be a lot of duplication of whats already covered in tests for wild and record modes.\nAny suggestions?. thanks @ierceg ! not sure what you mean by:\n\nexpand the format of the nock fixtures and include request params\n\nbecause as I can see fixtures already include request parameters:\n\n. ",
    "Poplava": "I have the same problem with 'fs'.\n. ",
    "subblue": "I'm also getting the same errors as @rixth and others. Commenting out the mkdirp references in lib/back.js as mentioned by @vyorkin is a temporary hack fix for the moment.\nMy testing setup is using Webpack via Karma using PhantomJS and Jasmine.\n. ",
    "lecstor": "Not sure if this will break something else, but in Karma.conf you can try this to get around fs issues:\nwebpack: {\n  ...\n  node : { fs: 'empty' }\n}\n. @liorbrauer 8) cool, glad I could help! \n. ",
    "liorbrauer": "@lecstor Thanks! This is the second time you've helped me with my karma config issues :) :+1: \n. ",
    "choonkending": "@miazoom Did you ever get around to mocking the requests on the browser?\n. +1\n. ",
    "JuHwon": "@miazoom @choonkending having the same issue while following the redux test examples from the doc.\nDid you solve this? \n. ",
    "alexpanov": "@JuHwon @miazoom @choonkending \nI've been trying to test my axios clients with karma and phantomjs using nock but had 0 success. The client is still hitting the real server. \nAnyone got around it?\n. +1\n. I have migrated from karma to mocha + jsdom and now I'm running my web tests using that setup. Now I can use nock.\n. @rublev \nI used to have a PhantomJS based test suite. For purely historical reasons I used Karma with Jasmine for unit testing. Having Karma as a test runner in conjunction with PhantomJS meant my tests were executed from within a browser.\nNow, however, the tests are being run with Mocha. There's no PhantomJS anymore, but there's jsdom. That means my tests are executed with node.\nDoes that help?\n. ",
    "nguyendinhdoan": "@alexpanov I'm getting this issue. Did you fix this?. ",
    "stekycz": "Of course but the test output is not verbose much :-)\n. I have find out there was a problem on my side in my tests. I am sorry about this confusing PR.\n. ",
    "petrjoachim": "This was at light speed.\nLet's continue some testing.\n. ",
    "bgmort": "I am sorry.  I have too many tabs open and filed an issue on the wrong project.\n. ",
    "moll": "Hey. Just a quick FYI: I released a similar library to Nock some time ago called Mitm.js that solves this issue. So if you're in a hurry, take a look.\n. ",
    "danjenkins": "+1 on this\n. Thanks!\n. Hmm, this is definitely confusing, I have a headache from reading the thread! So you can respond to a request but not send a body in HTML land, and not close the request, so that you can flush data to the page as it responds from a data store for example.\nSo I can definitely understand the need for delayBody.\ndelay should delay headers + body, the connection happens but you don't get anything back - this is useful where the request has been accepted but you're connecting to a data store and you end up waiting on the data store for 30 seconds for example.\ndelayBody should be this weird scenario that people shouldn't do any more - but I guess people still do.\ndelayConnection should be so that you can pretend you have DNS issues or whatever, where you can't actually connect to the end service.\nSo I think I agree with you @pgte ?\n. ",
    "jimkang": "Excellent!\n. ",
    "epeli": "I'm seeing this too. If I try test for the presence of an Authorization header with .matchHeader(\"Authorization\", /.*/) I get:\nUncaught TypeError: Cannot call method 'match' of undefined\n      at matchStringOrRegexp (/home/epeli/code/tickets/node_modules/nock/lib/scope.js:108:23)\n      at checkHeaders (/home/epeli/code/tickets/node_modules/nock/lib/scope.js:130:16)\n      ...\n. ",
    "kfatehi": "Hi. I'm using 0.32.3 and I'm trying to mock the request headers; which is fine, however when i call scope.done() it does not assert that the given headers were sent through.\njs\nscope = nock(config.endpoint, {\n  reqheaders: {\n    \"X-Auth-Token\": \"authtoken\",\n    \"X-App-Token\": \"apptoken\"\n  }\n})\n.post('/resource')\n.reply(200, { status: \"ok\" })\n. haha no problem -- yeah i noticed the failures and tried to look into it but the tests are really confusing for me -- but this template and instruction you've provided looks like something i can work with. I will try again soon.\n. @pgte \n``` js\ntest('done fails when specified request header is missing', function(t) {\n  scope = nock('http://example.com', {\n    reqheaders: {\n      \"X-App-Token\": \"apptoken\",\n      \"X-Auth-Token\": \"apptoken\"\n    }\n  })\n  .post('/resource')\n  .reply(200, { status: \"ok\" });\nmikealRequest({\n    method: 'POST',\n    uri: 'http://example.com/resource',\n    headers: {\n      \"X-App-Token\": \"apptoken\"\n    }\n  }, function(err, res, body) {\nt.type(err, 'null');\n\nvar doneFails = false;\n\ntry {\n  scope.done();\n} catch(err) {\n  doneFails = true;\n}\nt.ok(doneFails);\n\nt.equal(res.statusCode, 200);\nt.end();\n\n});\n})\n```\n```\nnot ok 226 (unnamed assert)\n\nfile:   /Users/keyvan/Projects/nock/tests/test_intercept.js\nline:   2878\ncolumn: 7\nstack:\n  - getCaller (/Users/keyvan/Projects/nock/node_modules/tap/lib/tap-assert.js:418:17)\n  - Function.assert (/Users/keyvan/Projects/nock/node_modules/tap/lib/tap-assert.js:21:16)\n  - Test._testAssert [as ok] (/Users/keyvan/Projects/nock/node_modules/tap/lib/tap-test.js:87:16)\n  - Request._callback (/Users/keyvan/Projects/nock/tests/test_intercept.js:2878:7)\n  - Request.self.callback (/Users/keyvan/Projects/nock/node_modules/request/request.js:121:22)\n  - Request.EventEmitter.emit (events.js:98:17)\n  - Request.<anonymous> (/Users/keyvan/Projects/nock/node_modules/request/request.js:985:14)\n  - Request.EventEmitter.emit (events.js:117:20)\n  - OutgoingMessage.<anonymous> (/Users/keyvan/Projects/nock/node_modules/request/request.js:936:12)\n  - OutgoingMessage.EventEmitter.emit (events.js:117:20)\n\n...\nok 227 should be equal\n```\n. ",
    "JohnDMathis": "I'm using 0.37.0, and can't seem to get this work. I used\njs\n    var registrationRequest = nock( 'http://example.com' , {\n        reqheaders: { 'authentication': 'Basic Auth' }\n        } )\n        .post( '/api/registration', { 'id': 'testId' } )\n        .reply( 200, { 'whatever': 'it works'  } );\nI expected this to fail when not including basic authentication, but it just seemed to ignore 'reqheaders' and mark registrationRequest as done, regardless of whether I actually included credentials.\n. @pgte happy to, with 2 caveats: 1) the new issue will have probably have much the same title as this issue, because it's the same problem that @jimbru raised, as far as I can tell.  (The basic authentication header seems to get ignored when matching.)  2) I don't know how to run tests in your framework- will a mocha test be ok, or can you show me how to run the tests?\n. I worked out the tap test.\n``` js\ntest(\"match basic authentication header\", function(t) {\n  var username = 'testuser'\n    , password = 'testpassword'\n    , authString = username + \":\" + password\n    , encrypted = authString.toString( 'base64' );\nvar scope = nock('http://www.headdy.com')\n     .get('/')\n     .matchHeader('authorization', 'Basic '+ encrypted )\n     .reply(200, \"Hello World!\");\nhttp.get({\n     host: \"www.headdy.com\"\n    , method: 'GET'\n    , path: '/'\n    , port: 80\n    , auth: authString\n  }, function(res) {\n    res.setEncoding('utf8');\n    t.equal(res.statusCode, 200);\nres.on('data', function(data) {\n  t.equal(data, 'Hello World!');\n});\n\nres.on('end', function() {\n  scope.done();\n  t.end();\n});\n\n});\n});\n```\n. @pgte Nice, thanks for addressing it so quickly!\n. ",
    "dominicbarnes": "+1\nThis would be extremely useful, especially when developing/testing API clients.\n. For what it's worth, I could not get all the tests to run via npm test, getting the following error message:\npath.js:313\n        throw new TypeError('Arguments to path.resolve must be strings');\n              ^\nTypeError: Arguments to path.resolve must be strings\n    at Object.exports.resolve (path.js:313:15)\n    at new Runner (/Users/dominic/dev/dominicbarnes/nock/node_modules/tap/lib/tap-runner.js:49:34)\n    at Object.<anonymous> (/Users/dominic/dev/dominicbarnes/nock/node_modules/tap/bin/tap.js:104:9)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:929:3\nIt didn't seem to matter what version of node I was running, so not sure what to make of it.\nI ran the tests that I added manually using:\nsh\n$ ./node_modules/.bin/tap tests/test_intercept.js\n. Roger that!\n. Done :)\n. ",
    "allan-stewart": "+1\n. ",
    "chenka": "+1\n. ",
    "jpstevens": "+1\n. ",
    "doodlemoonch": "+1\n. ",
    "avidas": "+1 to this\n. ",
    "rprieto": "Big :thumbsup: I find that in most cases, whenever I want to unit-test what happens under certain responses, I also want to test what happens if the service is down.\nA similar request was closed at #97, but I don't know if it's a project scope issue, or because it can't be done.\n. As a workaround, for the specific case of the service not responding, I currently use:\njs\nnock('http://service.com').get('/down').delayConnection(500).reply(200)\nunirest.get('http://service.com/down').timeout(100).end(function(err) {\n  // err = ETIMEDOUT\n});\n. ",
    "rockbot": "+1\n. ",
    "i4got10": "+1\n@rprieto nice hack\n. ",
    "invernizzie": "+1\n. ",
    "breedx2": "+1\n. ",
    "chainlink": "Related: http://stackoverflow.com/questions/27708960/how-to-test-error-in-request-with-nock\n. Actually, I've implemented this, will submit as PR\n. Ended up going with the excellent nock back :)\n. Cool, thanks!\n. Is there a way to use ```enableNetConnect('specificUrl') with nockback?\n. ",
    "mayurva": ":+1: \n. ",
    "srkimir": "In the end i solved it with something like:\nnock('http://www.google.com')\n  .get('/')\n  .replyWithError({code: 'ETIMEDOUT'})\n\nWhich looks clean, it does not involve delay and stuff, and as it seems to me it is enough to simulate ETIMEDOUT having in mind that im using request-promise lib where i'm checking for ETIMEDOUT like:\nif (err.error && err.error.code === 'ETIMEDOUT')\nSame can be applied for ENOTFOUND, ECONNRESET, ECONNREFUSED.... +1\ni believe i tried same thing, following code will return then block should not execute:  Hello from Google! while i would expect ETIMEDOUT\nmocha test/force-req-timeout.test.js --timeout=10000\n```\n'use strict'\nconst chai = require('chai')\nconst expect = chai.expect\nconst nock = require('nock')\nconst rp = require('request-promise')\ndescribe('force request timeout with nock', () => {\n  it('should return ETIMEDOUT', (done) => {\nnock('http://www.google.com')\n.get('/')\n.delay(8000)\n.reply(200, 'Hello from Google!')\n\nrp({\n  url: 'http://www.google.com',\n  timeout: 5000\n})\n.then((data) => {\n  console.log('then block should not execute: ', data)\n  ...\n})\n.catch((err) => {\n  expect(err.cause.code).to.equal('ETIMEDOUT')\n  ...\n})\n\n})\n})\n```\nhttp://stackoverflow.com/questions/36533807/how-to-etimedout-with-nock-and-request-library\n. ",
    "maziey93": "Hi Guys I had this same issue with superagent when trying to test timeout, took about a whole weekend to put it together that it is because superagent always retries requests by default,  in fact deafult is 3 http://visionmedia.github.io/superagent/#retrying-requests , so on the second retry nock has no url to match thats why you get\n { Error: Nock: No match for request {\n  \"method\": \"POST\",\n  \"url\": \"http://someurl.com/\",\n  \"body\": \"some_string\"\n}\n    at end (/Users/eyo.okon/Sites/node-graphql-client/node_modules/nock/lib/request_overrider.js:260:17)\n    at OverriddenClientRequest.RequestOverrider.req.end (/Users/eyo.okon/Sites/node-graphql-client/node_modules/nock/lib/request_overrider.js:160:7)\n    at Request._end (/Users/eyo.okon/Sites/node-graphql-client/node_modules/superagent/lib/node/index.js:961:9)\n    at RequestBase._retry (/Users/eyo.okon/Sites/node-graphql-client/node_modules/superagent/lib/request-base.js:176:15)\n    at Request.callback (/Users/eyo.okon/Sites/node-graphql-client/node_modules/superagent/lib/node/index.js:657:17)\n    at RequestBase._timeoutError (/Users/eyo.okon/Sites/node-graphql-client/node_modules/superagent/lib/request-base.js:573:8)\n    at Timeout.<anonymous> (/Users/eyo.okon/Sites/node-graphql-client/node_modules/superagent/lib/request-base.js:582:12)\n    at ontimeout (timers.js:365:14)\n    at tryOnTimeout (timers.js:237:5)   at Timer.listOnTimeout (timers.js:207:5) status: 404, statusCode: 404, response: undefined, retries: 1 }\non setting retry to 0 one gets the correct error, and test passes... \ud83d\udd7a\ud83c\udffe\nHopefully this helps someone. ",
    "franciszabala": "I had the same experience as what mazley93 had using node-request-retry.. ",
    "rolfst": "well when I did npm install -g nock it failed with installing debug not in repository. I did an update of npm itself this moring and then a retry of npm install -g nock, now it succeeded. tnx.\n. ",
    "bcoe": "@pgte thanks for getting it in so fast. I was stumped by the bug on Friday, so thought I'd try to hunt it down and save others the head-scratching :)\n. ",
    "mren": "Perfect. Thanks :)\n. ",
    "EndangeredMassa": "I see the same problem.\nIt looks like the code for replyWithFile sets the interceptor body to a stream, but the code for request overrider assumes the body will be an array of binary buffers.\n. Thanks for the reply! Your test works for me. I'm trying to figure out how my setup differs. I'll report back.\n. The test uses \"content-type\" instead of \"content-encoding\". If you switch it, you'll see:\n```\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nError: content-encoded response must be an array of binary buffers and not object\n    at RequestOverrider.end (/home/sean/source/nock/lib/request_overrider.js:262:21)\n    at OverriddenClientRequest.RequestOverrider.req.end (/home/sean/source/nock/lib/request_overrider.js:145:7)\n    at Test. (/home/sean/source/nock/tests/test_intercept.js:949:7)\n    at Test.EventEmitter.emit (events.js:117:20)\n    at Test.emit (/home/sean/source/nock/node_modules/tap/lib/tap-test.js:104:8)\n    at GlobalHarness.Harness.process (/home/sean/source/nock/node_modules/tap/lib/tap-harness.js:87:13)\n    at process._tickDomainCallback (node.js:459:13)\nok 88 response should match\nnot ok 89 tests/test_intercept.js\n\nexit:    8\nstderr:  |\n  events.js:72\n          throw er; // Unhandled 'error' event\n                ^\n  Error: content-encoded response must be an array of binary buffers and not object\n      at RequestOverrider.end (/home/sean/source/nock/lib/request_overrider.js:262:21)\n      at OverriddenClientRequest.RequestOverrider.req.end (/home/sean/source/nock/lib/request_overrider.js:145:7)\n      at Test.<anonymous> (/home/sean/source/nock/tests/test_intercept.js:949:7)\n      at Test.EventEmitter.emit (events.js:117:20)\n      at Test.emit (/home/sean/source/nock/node_modules/tap/lib/tap-test.js:104:8)\n      at GlobalHarness.Harness.process (/home/sean/source/nock/node_modules/tap/lib/tap-harness.js:87:13)\n      at process._tickDomainCallback (node.js:459:13)\ncommand: \"/home/sean/.nvm/v0.10.26/bin/node test_intercept.js\"\n\n...\n```\n. ",
    "busticated": "Hi @pgte - \nThanks for taking a look. The issue seems to be related to request's timeout option. Here's a test case using mocha:\n```\nvar expect = require('chai').expect,\n    nock = require('nock'),\n    request = require('request');\ndescribe('Nock Issue #183', function(){\n    afterEach(function(){\n        nock.cleanAll();\n    });\nit('should not error', function(done){\n    var options = {\n        url: 'http://example.com/test',\n        method: 'GET',\n        timeout: 2000\n    };\n\n    nock('http://example.com')\n        .get('/test')\n        .reply(200, JSON.stringify({ foo: 'bar' }));\n\n    request(options, function(err, res, body) {\n        expect(err).to.be.null;\n        expect(body).to.equal('{\"foo\":\"bar\"}');\n        done();\n    });\n});\n\n});\n```\nIf you remove the timeout option, everything works fine.\nLibs in use: chai@1.9.1, mocha@1.18.2, nock@0.32.2, request@2.34.0 running node v0.10.28\n. nice work @pgte :clap:\n. ",
    "avilaton": "Thanks @busticated and @pgte, I just found this fix, I had been searching for a solution for this issue for a day now. THANKS A LOT!\n. ",
    "hparra": "Tested and works. Thank you! I'll open a new ticket for problem that caused this problem. :)\n. OMG duplicate of https://github.com/pgte/nock/issues/183 -_____-\nAt least I got to play with the debugger. It's been a while!\n. ",
    "jagoda": "Awesome!\n. Awesome, thanks!\n. ",
    "justinhelmer": "+1 for multipart form data support\n. ",
    "aronwoost": "+1\n. @pgte I have problems understanding the life circle of nock. Can you point me to a starting point? Where would something like {throwUnmocked: true} be handled?\n. Check initial post:\n\nwith xhr.done() we can only see that a nock did not run, but when developing it would be super helpful to see what request was made instead.\n\nIn the lines you referring to we could emit all the requests that where made instead of the mocked one. So yes, this would be helpful.\nHowever, even better would be, of nock could throw right when a unmocked request is made.\nI'm totally willing to get my hands dirty with a PR. I'm unsure where to start tho...\n. You are very right! It works as expected.\n. ",
    "initialize": "+1\n. ",
    "mijamo": "This would be really great to be able to test that parameters received are the ones expected.\n. ",
    "nfriedly": "BTW, you can sort of fake it right now - the body is passed in as a string.. but sometimes it's utf-8 and other times it's hex, depending on if there's anything binary in the contents. \nHowever, this was good enough for me - run the regex on the body as a string, and if that fails to match, try converting it from hex, and then re-run the regexp.\nThat said, I too would appreciate better support here. (Ideally with content-type & filename checking for files.) Not sure I'll be able to add it, but my hat's off to anyone who does :tophat: \n. I don't think that's possible right now - the recording option is designed to record both the request and the response.\n. ",
    "delijati": "Is this a valid solution (simply use md5)?:\njavascript\nif (isMultipart) {\n  var spec_md5 = crypto.createHash('md5').update(spec).digest('hex');\n  var body_md5 = crypto.createHash('md5').update(body).digest('hex');\n  return spec_md5 === body_md5;\nThis at least works for my \"only\" text multipart example.. There was an error in the tests i fixed it with #834. Related ticket is #191. @ianwsperber added a multipart form test for match_body to tests/test_body_match.js. ",
    "stale[bot]": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. We try to do our best, but nock is maintained by volunteers and there is only so much we can do at a time. Thank you for your contributions.\n. ",
    "alanclarke": "\"nock\": \"^0.34.1\", \"request\": \"^2.36.0\"\n. ill do that, but i can already see the reason - the test in that commit expects error to be null. actually we want to be passed a timeout error\n. https://github.com/alanclarke/nock/commit/d629b0d64e2851ded4a37ac515341a4211bc6912\n. yup delayConnection passes the test\n. thanks :+1: \n. btw, do you think the default delay method should delay everything?\nI'm curious about the use case for delaying the body but not the headers - although admittedly I am probably a bit biased by my experience with the above\n. @pgte yay\n. ",
    "joshacheson": "That's very fair. The API certainly wasn't something I was \"sold on\" myself. There could easily other (better) ways to implement an API for this feature, even under the assumption this feature fits in this library.\nOf course understanding if this simply doesn't fit. Cheers!\n. ",
    "gabegorelick": "Just double checked, and reverting ecaa712 does fix it for me.\n. This is still needed. The fact that cleanAll doesn't actually clean all mocks is very annoying.. ",
    "jeffsmale90": "Resolved in 9c16f2e07f0145a6a7c86657c2f2e822bfd216c2\n. ",
    "grncdr": "As a workaround, you could return an empty through stream, then write to it asynchronously:\n``` javascript\nvar foo = nock('foo')\nvar firstResponse = through();\nfoo.get('/first-thing').reply(200, function (uri, requestBody) {\n  return firstResponse;\n});\nfoo.get('/second-thing').reply(200, function (uri, requestBody) {\nprocess.nextTick(function () {\n    firstResponse.end(\"reply to first request\");\n  });\nreturn \"reply to second request\";\n});\n```\nDisclaimer: I haven't used nock yet, so I don't know if it's serializing responses or something internally. This might just hang your tests ;)\n. returning a value from setTimeout never makes sense because there is no receiever for that value. (The javascript interpreter fires your callback and doesn't care about what you return).\nAs mentioned above, returning a through stream and writing/ending it in your setTimeout callback would work. You can literally replace process.nextTick with setTimeout and get what you want.\n. ",
    "yogananth": "I'm using nock to intercept HTTP calls to my API service (still undeveloped) and return some mock data that I have in a temporary database.\nI notice the http requests are intercepted properly, but the problem that I see is that before my async function gets required data from temp DB, the nock replies.\nFor a simple demonstration, look at the code below:\n```\nvar nock = require('nock');\nvar nockReq = nock(\"http://localhost:8000\")\n.post(\"/sample-endpoint\")\n\n.reply(200, function (uri, requestBody) {\n    setTimeout(function() {\n        return {\"result\": \"TIMED OUT\"}\n    }, 2000 );\n\n```\nWith the above code, when I don't use a time-out, I get the data returned properly as expected. But with this time-out, the nock doesn't seem to wait for the callback, instead proceed responding an empty 200 response.\n. Even the process.nextTick didn't solve the problem. I even tried returning a stream and even that didn't work.\n. ",
    "faiq": "so im currently mocking the connection inside my test file with this line \nvar fakeNock = nock('http://localhost:9200').get('/').reply(200, 'connection');\nbut when I run \nnpm test\nI get the following error still\n```\nElasticsearch WARNING: 2014-07-09T22:40:51Z\n  Unable to revive connection: http://localhost:9200/\nElasticsearch WARNING: 2014-07-09T22:40:51Z\n  No living connections\n```\nAm  I doing it wrong? I couldn't find anything on the documentation for socket connections.\nEDIT\nI also am getting this error \nNock: No match for request POST http://localhost/_search?fields=name%2Ckeywords%2Cdescription%2Cauthor%2Cversion%2Cstars%2CdlScore%2CdlDay%2CdlWeek {\"from\":null,\"size\":null,\"query\":{\"dis_max\":{\"tie_breaker\":0.7,\"boost\":1.2,\"queries\":[{\"function_score\":{\"query\":{\"match\":{\"name.untouched\":\"express\"}},\"boost_factor\":100}},{\"bool\":{\"should\":[{\"match_phrase\":{\"name\":\"express\"}},{\"match_phrase\":{\"keywords\":\"express\"}},{\"match_phrase\":{\"description\":\"express\"}},{\"match_phrase\":{\"readme\":\"express\"}}],\"minimum_should_match\":1,\"boost\":50}},{\"function_score\":{\"query\":{\"multi_match\":{\"query\":\"express\",\"fields\":[\"name^4\",\"keywords\",\"description\",\"readme\"]}},\"functions\":[{\"script_score\":{\"script\":\"(doc['dlScore'].isEmpty() ? 0 : doc['dlScore'].value)\"}},{\"script_score\":{\"script\":\"doc['stars'].isEmpty() ? 0 : doc['stars'].value\"}}],\"score_mode\":\"sum\",\"boost_mode\":\"multiply\"}}]}}}\nbut im mocking out all posts to /_search with \nvar fakeNockES = nock('http://localhost:9200').post('/_search', '*').reply(200, fs.readFileSync(__dirname + '/fixtures/fake-search.json'));\n. ",
    "ianmacl": "One thing to note is that ElasticSearch-js seems to be (admittedly probably rightfully) picky about the Content-Type header in the response.  If you don't send application/json as the header then it won't parse it and you get unexpected errors.\n. ",
    "mcmillan": "Seeing the same here (Nock 0.44.1, Node 0.10.30). Any known workarounds?\n. OK - this appears to be because common.normalizeRequestOptions expects options.proto to exist and falls back to http if it doesn't (see this line).\nThat's called from getScope() in recorder.js (here) which is what builds the scope string, and in turn causes a faulty port to be appended as options.port is set to 80 by common.normalizeRequestOptions.\nThe easiest workaround I can see is to change common.js#11 to:\noptions.proto = options.proto || (options._https_ ? 'https': 'http');\nI'll fork and PR now, but I'm not sure what this might do to other sections of the module's codebase. @pgte - can you advise?\n. ",
    "buildmaster": "test('super agent throws execption', function (t) {\n  nock.disableNetConnect();\n  require('superagent').get('http://google.com/').query({\n    q: 'testing nock'\n  }).end(function (err, res) {\n    t.equal(err.name, 'NetConnectNotAllowedError');\n    t.end();\n  });\n  nock.enableNetConnect();\n});\nthe actual error is a TypeError thrown by SuperAgent:\n[TypeError: Cannot call method 'indexOf' of undefined] \nTypeError: Cannot call method \\'indexOf\\' of undefined\nat Request.end (/Volumes/Store/Projects/nock/node_modules/superagent/lib/node/index.js:759:20)\nat Test.<anonymous> (/Volumes/Store/Projects/nock/tests/test_intercept.js:3329:6)\nat Test.EventEmitter.emit (events.js:117:20)\nat Test.emit (/Volumes/Store/Projects/nock/node_modules/tap/lib/tap-test.js:104:8)\nat GlobalHarness.Harness.process (/Volumes/Store/Projects/nock/node_modules/tap/lib/tap-harness.js:87:13)\nat process._tickDomainCallback (node.js:459:13)\nAlso I get a message: double callback! from SuperAgent which usually suggests an issue\nAs I've mentioned I'm not sure where the issue actually lies but the TypeError is thrown because SuperAgent expects a Path property on request:\nhttps://github.com/visionmedia/superagent/blob/master/lib/node/index.js#L758\n. ",
    "saraf": "Running into the same issue - when an incorrect hostname is specified. \nIf we enableNetConnect before firing off a test, we get a proper ENOTFOUND error.\nHowever, if nock is actively mocking with disableNetConnect(), then we get a TypeError: Cannot call method 'indexOf' of undefined as reported above.\nIn the problem case, req.path is indeed absent - inside superagent - request.end -\nI put in a console.log in superagent\nnode_modules/superagent/lib/node/index.js\nto compare the behavior in both cases near the offending statement -\njavascript\nRequest.prototype.end = function(fn){\n 810   var self = this;\n 811   var data = this._data;\n 812   var req = this.request();\n 813   var buffer = this._buffer;\n 814   var method = this.method;\n 815   var timeout = this._timeout;\n 816   debug('%s %s', this.method, this.url);\n 817\n 818   // store callback\n 819   this._callback = fn || noop;\n 820\n 821   // querystring\n 822   try {\n 823     var querystring = qs.stringify(this.qs, { indices: false });\n 824     querystring += ((querystring.length && this.qsRaw.length) ? '&' : '') + this.qsRaw.join('&');\n 825     console.log(\"Saraf - Req is: \" + util.inspect(req, false, 10, true));\n 826     req.path += querystring.length\n 827       ? (~req.path.indexOf('?') ? '&' : '?') + querystring\n 828       : '';\nreq contains\nReq is: { domain: null,\n  _events: { drain: [Function], error: [Function] },\n  _maxListeners: undefined,\n  output: [],\n  outputEncodings: [],\n  outputCallbacks: [],\n  writable: true,\n  _last: false,\n  chunkedEncoding: false,\n  shouldKeepAlive: true,\n  useChunkedEncodingByDefault: true,\n  sendDate: false,\n  _removedHeader: {},\n  _hasBody: true,\n  _trailer: '',\n  finished: false,\n  _hangupClose: false,\n  _headerSent: false,\n  socket: null,\n  connection: null,\n  _header: null,\n  _headers:\n   { 'accept-encoding': 'gzip, deflate',\n     'user-agent': 'StriderCD (http://stridercd.com)' },\n  _headerNames:\n   { 'accept-encoding': 'Accept-Encoding',\n     'user-agent': 'User-Agent' } }\nWhereas, with enableNetConnect() right before the call, \nin superagent Request.end, req contains the full req object with \nreq.path correctly set (in my case) to  \n...\n path: '/api/v3/projects/5/keys'\n...\nWhy is the request object in superagent so small when disableNetConnect() is in effect?\n. ",
    "samouri": "@pgte, I ran the exact test that @buildmaster described on the latest versions of nock and superagent and the issue still remains.  Can we reopen this?\nI've already done fairly deep investigation into possible action items for superagent.  While there are some things that can defensively be done there to assist with the issue, the main problem is with how nock is replacing http.ClientRequest with ErroringClientRequest but messing up some of the behavior and missing some fields.  Specifically this has two parts:\n1. Missing all of the usual default fields of http.request(): protocol, port, method, path, and headers -- solving this is easy\n2. As explained here, Node.js requests normally would never emit an error until it has been initiated whereas as far as I can tell, nock will always emit one on nextTick.  Nock should wait for any of: flushHeaders, write, or end to be called before emitting an error.  -- solving this will be more involved and probably require some test-rewrites\n@buildmaster's test that still fails:\njavascript\ntest('super agent throws execption', function (t) {\n  nock.disableNetConnect();\n  require('superagent').get('http://google.com/').query({\n    q: 'testing nock'\n  }).end(function (err, res) {\n  //  process.nextTick(function() {\n      t.equal(err.name, 'NetConnectNotAllowedError');\n      t.end();\n  //  });\n  }); \n  nock.enableNetConnect();\n});\n. I've added a simple PR to solve the first problem: #590\nI'm not sure why the tests are failing but it doesn't seem related to this change :/ \ud83d\udc4e \n. @pgte, Any update?\n. ",
    "redbugz": "We are having the same problem with latest nock and superagent. The workaround we did is to actually declare a matching nock rule. We don't actually care if this particular request fails for this test so were fine having it be rejected, but adding the rule gets our tests working again.. Yes I know superagent does not support xml out of the box, but my understanding is that it passes the response string through as res.text, but doesn't parse it into res.body unless you provide your own parsers function, which I don't do. Even if I did the example parser function parses res.text\nMy code that uses superagent gets res.text set to the xml string from the server, and response.body is an empty object. I then run my own xml parser on res.text. That's how I understood superagent to work.\nIn any case, when using nock I get undefined for both res.text and res.body. I expect res.body to be empty, but I expect res.text to have the xml string just like when I run superagent normally. But I found out what the problem is. When I make the request against the server, res.buffered is true, and content-type is 'text/xml', but when I was running it with Nock, res.buffered is false and I was returning content-type 'application/xml'.\nAdding superagent.buffer() solves the problem, or switching the content type to text/xml instead.\n. What is the best solution for cleaning up after a test? We ran into a similar problem. Because we had issues where the mocks were occasionally misconfigured and the tests were hitting a real server and passing when they shouldn't, I typically use disableNetConnect() to make sure only calls to the mocks happen during the tests. I then did restore() at the end of the suite thinking that was a good way to \"clean up\". However, adding a 2nd suite of tests, the nocks in the 2nd suite never fire as apparently restore() also makes new calls to nock() not activate.\nSo is this a better approach than doing a restore? (pseudocode)\n```\nbefore:\n  nock.disableNetConnect();\n  nock.enableNetConnect('127.0.01');\nafter:\n  nock.enableNetConnect();\nbeforeEach (or in individual tests):\n  nock(URL)......;\nafterEach: \n  nock.cleanAll();\n```\nDoes that seem like a good set of operations when you only want mocked network requests but want to run a series of suites robustly, and some of the suites may not need mocks?\nOr is restore fine as long as you put nock.activate() in your before section of each suite?. ",
    "aoberoi": "any feedback for this?\n. i ran into this issue as well. i'm not sure what the use case for NOCK_OFF could be with no interceptors defined.\n. ",
    "elnur": "Yea, I need to mock HTTP requests on Node. I just want it to listen to actual HTTP requests instead of hacking into the Node's internals.\nI think it would be great to make it possible for this package.\n. I actually need expectations and prewritten responses. I need it for tests. This package is a perfect fit except it works for Node apps only.\n. shmock solves the problem but it lacks a lot of features that nock has. Ideally, I'd use nock's API with shmock's real HTTP listener. That would be a perfect combination.\nDo you think it's possible to add this to nock or should someone create a whole new HTTP mocking and expectations library just because of this one feature?\n. To be more specific, I'm testing Angular apps with Protractor. The current approach with mocking $httpBackend sucks because the mock module is being stringified and executed in the browser by WebDriverJS. That sucks because the test code and the mock code run in two different dimensions and can not interact in any way.\nSince Protractor is a Node program and tests are being run in the Node environment, I figured it makes sense to mock the backend and set expectations on it in Node itself. That's how I found nock. I was very excited to put it to use and get rid of $httpBackend mocks only to find out that I can't run nock as a server because it just hacks into Node HTTP internals and Angular apps are run in browsers and have nothing to do with Node. Then I found shmock, but it's very feature poor and doesn't seem to be maintained well, even though I was able to start it as a standalone server during a test. If only it had nock's API, it would be awesome. Or \u2014 since nock is much more feature rich \u2014 it would make sense to just add the ability to run nock as a server.\n. Hock looks interesting. I'm gonna try it as soon as I get back to coding. Thanks to pointing it out.\nBut from what I can see, hock is not being actively developed. The last commit was 3 months ago. I'll see how it goes when I try it.\nOn a side note, what do you think about extracting the interceptors and mocking/expectations parts of nock into a separate project so that others could reuse it for building something close to what I'm looking for?\n. ",
    "AndersDJohnson": "Might also consider using mockyeah for this purpose.. ",
    "pkyeck": "@pgte I'm stuck with the same thing JP tried to achieve.\nhow exactly would I go about and check if the POST body has the expected values in it?\n. experimented some more - think we need to be able to catch errors from the \"bodyParser\":\njavascript\ntry {\n  var scope = nock(host).post(url, function(body) {\n    body.param1.should.equal(\"xxx\");\n  });\n} catch (err) {\n  console.log(err);\n}\nscope should throw the Error, so that surrounding methods could catch it.\nis this somehow possible?\nscope.done() just tells me that Mocks not yet satisfied. \n. @ruimarinho thanks for the example. it returns a 404, right?\nso far, so good, but I'd rather get the information what params weren't present or had the wrong value when http://foobar.com got called:\n``` javascritpt\nvar request = require('request');\nvar nock = require('nock');\nvar should = require('should');\nnock.disableNetConnect();\nnock('http://foobar.com')\n  .post('/', function(body) {\n    body.foo.should.equal('bar');\n    return true;\n  })\n  .reply(200);\nvar req = request.post({ url: 'http://foobar.com', json: { foo: 'biz' }}, function(err, res) {\n  if (err) {\n    throw err; // => Error: Nock: No match for request POST http://foobar.com/ {\"foo\":\"biz\"}\n  }\nconsole.log('Status code', res.statusCode);\n});\n```\nInstead of getting the \nError: Nock: No match for request POST http://foobar.com/ {\"foo\":\"biz\"}\nerror, something like\nExpected \"bar\" - actual \"biz\" ...\nwould be - in my opinion - a better startingpoint to debug the test/mock.\n. but why is it doing it? I'm trying to do a nock.restore(); in my beforeEach(); test setup. but as long as the restore() is there, tests will fail. remove it and the tests work as expected ... strange.. ",
    "ruimarinho": "@pkyeck the assert you're doing (should.equal) is already handled automatically by nock if you just pass it the expected body. Here's a more complete example:\n``` js\nvar request = require('request');\nvar nock = require('nock');\nnock.disableNetConnect();\nnock('http://foobar.com')\n  .post('/', { foo: 'bar' })\n  .reply(200);\nvar req = request.post({ url: 'http://foobar.com', json: { foo: 'bar' }}, function(err, res) {\n  if (err) {\n    throw err;\n  }\nconsole.log('Status code', res.statusCode); // => Status code 200\n});\n```\nHowever:\n`````` js\nvar request = require('request');\nvar nock = require('nock');\nnock.disableNetConnect();\nnock('http://foobar.com')\n  .post('/', { foo: 'bar' })\n  .reply(200);\nvar req = request.post({ url: 'http://foobar.com', json: { foo: 'biz' }}, function(err, res) {\n  if (err) {\n    throw err; // => Error: Nock: No match for request POST http://foobar.com/ {\"foo\":\"biz\"}\n  }\nconsole.log('Status code', res.statusCode);\n});``\n``````\n. Indeed @pkyeck, that would be a more interesting output. Would you like to submit a PR for showing the diff?\n. @JemiloII indeed. Can you add a test to cover this?\n. I'm +1 on this. \n. If you enable debug mode (DEBUG=nocknode), do you see any specific content header added by$.ajaxbesidesapplication/json`?\n. ",
    "oliviertassinari": "I wish we had a synchronous API.. ",
    "adamvoss": "The main limitation I see with this is that it displays the actual body sent, but does not also display the expected body making it hard to know what went wrong.\nEdit: This lack of clarity may be because of #1040  . @sam3k  I am confused by this change\nThe tests for this change have code like:\n'Nock: No match for request ' + headerOptions + ' Got instead ' + headerOptions\nheaderOptions clearly does not  change be between the two usages.  Doesn't one of the usages need to correspond to the configured options while the other the received options?   For the motivating example given in the PR description it currently gives:  Nock: No match for request {\"method\":\"GET\",\"url\":\"http://google.com/?num=1str=fou\"} Got instead {\"method\":\"GET\",\"url\":\"http://google.com/?num=1str=fou\"}\n/ref #1040 . ",
    "pacey": "Any ideas how to match a request when a specific header is not set and not just an empty value? Having a request inspect method for this would be useful.. ",
    "GabeAtWork": "On this issue, I think although nock's current api is allowing for checking the body of a given request, that checking doesn't necessarily integrate well with the test framework. In other words, while there is no technical issue here, I think a good improvement would be supporting the user's test framework library of expectations, rather than having to split sets of expectations in two (expect() on one side, body callback on the other).\nHere's what I mean:\n``javascript\n// The current way to build body expectations\nit(should test a third party requests's body`, () => {\n  const scope = nock('http://a.host')\n    .post('/an-endpoint', body => {\n      return body.foo === 'bar' && body.bar === 'foo';\n    })\n    .reply(200, {});\nreturn request.post({url: 'http://a.host', json: {foo: 'biz'}}, function (err) {\n    expect(err).not.toBeNull();\nscope.done();\n\n});\n});\n// A way that is allowing to use the test framework's library of expectations\n// In this example, jest\nit(should test a third party requests's body with jest's expectations library, () => {\n  const scope = nock('http://a.host')\n    .post('/an-endpoint')\n    .reply(200, {});\nreturn request.post({url: 'http://a.host', json: {foo: 'biz'}}, function (err, res) {\n    const body = scope.requests.last().body;\n    expect(body).toMatchObject({\n      foo: 'bar',\n      bar: 'foo',\n    });\n    scope.done();\n  });\n});\n```\nThe second solution is allowing for a more consistent analysis of errors, as well as a deeper analysis of what is wrong with this data (that's where a test framework shines). In these simplistic examples, it should be pretty easy to see what went wrong with the data, but in the real-world, there can be many expectations and reasons for a failure.\nIs there a way to do this atm? (I tried to use the recorder but couldn't make it work)\nIf there isn't, what would it take to add this kind of api (to scopes I imagine)?. ",
    "ceoworks": "agree with @GabeAtWork on the necessity of adding ability of checking request's body with custom function. ",
    "theogravity": "This should be re-opened - I'm not seeing a good solution when a testing framework is involved\nHere's a way I did it in jest:\n```\nit('calls the endpoint', async () => {\n    const data = {\n      input: 'abcd'\n    }\nlet parsedBody = null\n\nconst scope = nock(`http://blah.com`)\n  .post('/', function (body) {\n    parsedBody = body\n    return body\n  })\n  .reply(200, {\n    ok: true\n  })\n\nconst rslt = await myFunctionThatCallsTheEndpoint(data)\n\nexpect(parsedBody).toEqual({\n  newInput: 'abcd'\n})\n\nexpect(scope.isDone()).toBe(true)\nexpect(rslt).toBe(true)\n\n})\n```. ",
    "divo-ie": "Thanks for the quick turnaround :)\n. ",
    "claudiopetrini": "Thank you for the quick answer, since after req.on('socket') listener there is a socket.on('connect') or socket.on('secureConnect') for making everything work correctly I had to add the following code after line 169 in request_overrider file:\njavascript\n      req.socket.getPeerCertificate = function() {\n        return {\n          fingerprint: 1\n        }\n      }\n      req.socket.emit('secureConnect');\nIs it possible to fix this is nock?\n. Perfect! Everything went smoothly!\nThanks for your support \n. ",
    "nebulade": "+1\n. ",
    "beatfactor": "I haven't been able to run the tests. All I get is:\n``` sh\n$ node node_modules/tap/bin/tap.js --dd tests\nTAP version 13\ntests\n```\nUsing cygwin on windows.\n. ok, that works. I'll get back to you.\nOn Thu, Aug 14, 2014 at 3:39 PM, Pedro Teixeira notifications@github.com\nwrote:\n\nCan you please try\n$ node tests/test_intercept\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pgte/nock/pull/220#issuecomment-52183883.\n. added tests and docs.\n. \n",
    "trshafer": "you bet @pgte. Thanks for nock.\n. +1. Also experiencing this.\n. ",
    "garbados": "This change prioritizes NOCK_OFF above the presence of any interceptors, but tests failed with that change alone. I'll take a stab at fixing them later but I'm not familiar with tap.js so debugging has been, uh, amusing.\n. ",
    "pose": "@garbados @aoberoi please take a look at my PR (#240) and let me know if it solves your NOCK_OFF issues too. Thanks!\n. @pgte Thanks to you for creating this awesome tool!\n. ",
    "CodeFred": "@pgte Yes, I have tried to record the live data. In the code above, if you\n(1) uncomment the line with the call to rec, and\n(2) comment out the intercept line\nthen you'll see that recording works fine. However, using the snippet printed out by the recorder also does not work.\nThe point is that aws-sdk is a fairly standard, and whatever they are doing internally seems to be either buggy or exposing a bug in nock.\n. Including the access key does seem to have resolved the issue. Thank you much, @pgte. As a side note, what is interesting is that somehow it does go over the wire without the access key...\n. ",
    "lucasfeliciano": "I'm using a module that I made: https://github.com/lucasfeliciano/restling/\nIt based on https://github.com/danwrong/restler module, my module just wrap the results in a promise, I prefer the promise approach then callback.\nHere is my test case, i'm using mocha as test runner and both tests are failing.\n```\n'use strict';\nvar  chai            = require('chai');\nvar  chaiAsPromised  = require('chai-as-promised');\nvar  nock            = require('nock');\nvar  rest            = require('restling');\nvar productMock = require('../mocks/product-284182-284172-284174.json');\nchai.use(chaiAsPromised);\nchai.should();\ndescribe('productService', function () {\nnock('http://services-amb')\n    .get('/product2/?groups=284182,,284172,,284174')\n    .reply(200, productMock);\n\nvar productsPromise = rest.get('http://services-amb', {query: {'groups': '284182,,284172,,284174'}, timeout: 4000});\nit('should be a promise object', function () {\n    return productsPromise.should.eventually.be.fulfilled;\n  });\nit('should have property products', function(){\n    return productsPromise.should.eventually.have.property('data').and.have.property('products');\n  });\n});\n``\n. Hey, just fixed my code it was my fault.\nSorry about that, I was using it wrong.\n. Nevermind, \nit was missing the final/` in the mock endpoint.\n. ",
    "xavierchow": "I think the inappropriate parameter name path in example codes misleads lots of guys. :)\n. @wheresrhys  if you intend to catch any path and redirect to /, the following sample code works.\n``` js\nvar nock = require('nock');\nvar mikealRequest = require('request');\nvar dummySite = 'http://www.somedomain.com';\nnock(dummySite)\n  .filteringPath(function(path) {\n    return '/';\n  })\n  .get('/')\n  .reply(200, 'hello');\nmikealRequest(dummySite + '/some/path', function(err, res, body) {\n  console.log(body);\n});\n``\n. It may be out of scope ofnock, what's the http request module you're using?\n. Cool, see https://github.com/request/request#controlling-proxy-behaviour-using-environment-variables,\nyou can set theno_proxyenv var for localhost http request.\n. I doubt the first case times out is due to theasynchronousFunctionThatMakesHttpRequestdoesn't match the nock, can you double check thehost` of request?\n. ",
    "MikeEmery": "Nevermind, this can be accomplished with:\nnock.disableNetConnect()\nnock.enableNetConnect('127.0.0.1')\n. ",
    "enykeev": "Same problem.\nUPD. Seems the code checking for leaks was introduced not too long ago (https://github.com/pgte/nock/commit/789cfa7e113ceab064c5bacba38d61c6f0faf1f5). If that's affecting your ability to commit, temporary solution might be to branch from the earlier version and then merge it to upstream when this issue will be fixed.\n. ",
    "cacieprins": ":+1: :+1:\n. ",
    "defunctzombie": "Nice!\n. ",
    "neverfox": "It seems to me that this is what you should expect. nock.recorder is really something you use outside of the normal deployment of nock itself, isn't it? So the fact that it seems to turn nock off to do what it does seems reasonable. Do you have a use case for mixing these behaviors?\n. ",
    "redben": "Well the use case is if you'd like to inspect/assert things sent on the request body. You sure can specify a (full) request body, but how do you check the request body partially ?\n. Thanks for the clarification. Now I understand how recorder is meant to be used :\n\nIt relies on intercepting real requests and answers and then persisting them for later use.\n. Sorry didn't pay attention to notifications. \n- For ECONNREFUSED, I ended up disabling nock and passing a url to the unit under test with a port that I know is closed (http://localhost:{closed-port} )\n- For ENOTFOUND i set the url to a random hostname.\n\nSo basically these two can be tested without nock. Thanks anyway !\n. ",
    "optical": "Just got caught out by this, would be nice if the docs specified this behavior.\nAdditionally this might be helpful if you have a series of web requests you need to mock. You can easily record and then mock the initial request, but I don't see any way to record subsequent requests, without pointing the tests at an actual service. In this instance I was only interested in the request body, rather then the response, so the tests were pointing at a URL which did not have the service running.\n. @ierceg A fair point. I ended up making this mistake because nock was not working as I expected and was not mocking some requests. I made use of the recorder to try record the request the client was attempting to make to the service, so that I could configure it using the recorders output. As stated - the response to the service under test was not of significant interest, as I wanted to test the client handled the status codes correctly and just needed the code to ensure nock caught the outgoing requests. I feel this could be a valid use for it, as if I was only interested in the actual requests I could've easily used Charles or Fiddler on real requests for that information.\nNevertheless, a small change to documentation stating the recorder disables all mocks and only works if the request is successful should prevent folks from misusing the feature.\n. ",
    "tyrw": "+1 on documenting this better.  Also not clear to me why recording should be in lieu of mocking, since recording can be useful during testing as well.\n. ",
    "davidchase": "@wheresrhys Do you have a url that doesn't have the trailing slash and you are trying to add it? if so just do\njs\n .filteringPath(function(path) {\n     return path + '/';\n })\n.get('/')\n. ",
    "kgividen": "+1 on multiple calls to filteringRequestBody. ",
    "UndeadBaneGitHub": "My pleasure! Thanks for the library!\n. ",
    "carlansley": "np, obrigado for the fix!\n. Thanks, all my S3 tests work now!\n. ",
    "cameronsutter": "This is old, so it probably doesn't help you, but I ran into this and what I think is happening is that SQS is looking for a specific XML response (including an MD5 of the message) and if it doesn't get that, it tries up to 4 times to send the message.\nThe XML format that worked for me is:\n<SendMessageResponse>\n  <SendMessageResult>\n    <MD5OfMessageBody>${md5}</MD5OfMessageBody>\n    <MessageId>${messageId}</MessageId>\n  </SendMessageResult>\n  <ResponseMetadata>\n    <RequestId>${requestId}</RequestId>\n  </ResponseMetadata>\n</SendMessageResponse>\nI found that for the requestId and messageId it didn't matter what it was.\nI couldn't get nock to work with SQS because of the timing of the requests in my situation and how the md5 would be different for each request. But, if you can make the md5 within the test, you can get it to work.\n. ",
    "rehia": "@pgte Yes, indeed, I planned to make another PR to directly support spec as regexp.\nBut I was thinking that starting by supporting string regexp would be easier for users to switch to this feature.\nAnd of course, when I've done it, I took care of not breaking the current behavior.\nActually, when I did my first implementation, I broke some tests that provided \"\" as spec, which raises an error when you try to parse it as a regexp.\nSo that's why in my implementation, I put this silent catch (which I'm not found of, but there's no other clean solution). In case of \"\", the string is not considered as a valid regexp, so the flow continues to treat it as a simple string.\nThe only thing that could be broken is if someone put something like \".*\" as a spec, which would be considered as a regexp. But this would be very weird....\nHope this helps.\nAnd basically, I definitely need this feature :) \n. Yes, you're right.\nThis would break such string.\nYou shall decline my PR.\nI'll make another one with real regexp.\nOn Wed, Dec 31, 2014 at 4:08 PM, Pedro Teixeira notifications@github.com\nwrote:\n\n@rehia https://github.com/rehia regular expressions have a lot of\nspecial characters like \"[\", \"]\", \"{\", \"}\", that users may want to use for\nliteral matching. Wouldn't this break using your changes?\nI'm all for allowing regular expressions, as long as they are intended\nregular expressions like:\nvar scope = nock('http://www.google.com')\n    .post('/echo', /key=v.?l/)\n    .reply(200, function(uri, body) {\n        return 'OK !';\n    });\nWouldn't you agree?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pgte/nock/pull/259#issuecomment-68446904.\n. I finally just updated the PR \nTake a look at it and tell me.\n\nHere's the example\njs\nvar scope = nock('http://www.google.com')\n    .post('/echo', /key=v.?l/g)\n    .reply(200, function(uri, body) {\n        return 'OK !';\n    });\n. You're welcome ;)\nThanks for releasing it so quickly !\n. ",
    "DavidTanner": "@pgte Thanks so much for the quick turnaround!!\n. ",
    "ksheedlo": "+1\nPerhaps this could be implemented in the configuration object alongside reqheaders, so for instance\njs\nnock('https://api.foo.com/some/path', {\n  reqheaders: {\n    'X-Auth-Token': 'deadbeef'\n  },\n  badheaders: ['cookie']\n});\nI'm interested in this feature and will look into crafting a PR for it.\n. Update: I pinned all the dependencies to the same versions as the latest passing build and my build is still failing. \u00af_(\u30c4)_/\u00af\nI'm running Node v0.12.2 on OSX 10.10.3.\n. ",
    "Nutelac": "+1\n. ",
    "lo1tuma": ":+1: \n. ",
    "c089": ":+1: most def\n. :sparkling_heart: \n. ",
    "raine": "I agree.\nhttps://github.com/pgte/nock/issues/270#issuecomment-76813084\n. > READ THIS\n\nWhen you setup an interceptor for an URL and that interceptor is used, it is removed from the interceptor list. This means that you can intercept 2 or more calls to the same URL and return different things on each of them. It also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\n\nFrom this I got the idea that nock would throw error on ALL requests that I have not specifically mocked. That doesn't seem to be the case. In order to get an error thrown, the mocked requests have to be to the same port and host as the requests being made. This could be clarified in the README.\n. I'm using qs to create a query string which is appended to a url with a path, and the whole thing is passed to request.\nSo the URL actually already looks like ... ?tree=jobs%5Bname%5D before it reaches request. It appears qs does encoding.\nI could see if there's a way I could refactor my code so that the query parameters are passed to request as options instead of in the url and see if that helps.\n. Isn't it an unnecessary inconvenience if user of Nock needs to manually encode the query string?\n. Instead of\njs\nvar qs = require('querystring').stringify;\nnock('https://ci.jenkins.com')\n  .get('/api/json?' + qs({ tree: 'jobs[name]' })\nI'd rather do\njs\nnock('https://ci.jenkins.com')\n  .get('/api/json')\n  .query({ tree: 'jobs[name]' })\nBut I can see why it would be tricky to implement because Nock has no idea about how user's code encodes the querystring, right? Best it could do is guess.\n. ",
    "joaquimserafim": ":+1: \n. ",
    "andrewluetgers": "awesome thanks!!\n. ",
    "tybenz": "Should clarify... I'm using nock in the other files that are run when running all tests. All requests are intercepted except the 2 in the last test file that gets run.\n. Found the culprit. Was doing nock.restore in the cleanup of one of my tests (from before I knew that nock.cleanAll was what I should be using.)\n. ",
    "Bjvanminnen": "It seems like that section from the readme ought to be updated in that case, as it seems to imply a different expected behavior.\n. ",
    "jviotti": "@pgte I opened an issue at readable-stream explaining the issue and a solution: https://github.com/iojs/readable-stream/issues/119.\nI was indeed running an old version of Nock (0.52.4). I upgraded:\n- nock to 1.0.0.\n- request to 2.53.0.\n- readable-stream to 1.1.13.\nThe error persists:\nsh\nMessage:\n    Cannot find module './_stream_duplex'\nDetails:\n    code: MODULE_NOT_FOUND\n    domain: [object Object]\n    domainThrown: true\nStack:\nError: Cannot find module './_stream_duplex'\n  at Function.Module._resolveFilename (module.js:338:15)\n  at Function.Module._load (module.js:280:25)\n  at Module.require (module.js:364:17)\n  at require (module.js:380:17)\n  at BufferList.Readable (/Users/jviotti/Projects/resin/resin-sdk/node_modules/request/node_modules/bl/node_modules/readable-stream/lib/_stream_readable.js:134:16)\n  at BufferList.Duplex (/Users/jviotti/Projects/resin/resin-sdk/node_modules/request/node_modules/bl/node_modules/readable-stream/lib/_stream_duplex.js:57:12)\n  at new BufferList (/Users/jviotti/Projects/resin/resin-sdk/node_modules/request/node_modules/bl/bl.js:36:16)\n  at BufferList (/Users/jviotti/Projects/resin/resin-sdk/node_modules/request/node_modules/bl/bl.js:6:12)\n  at Request.onRequestResponse (/Users/jviotti/Projects/resin/resin-sdk/node_modules/request/request.js:1195:20)\n  at OverriddenClientRequest.EventEmitter.emit (events.js:95:17)\n  at respond (/Users/jviotti/Projects/resin/resin-sdk/node_modules/nock/lib/request_overrider.js:478:13)\n  at /Users/jviotti/Projects/resin/resin-sdk/node_modules/nock/lib/request_overrider.js:491:9\n. I was wondering if running my test suite with gulp was altering the paths for some reason, but I get the same error if running the test suite directly with the mocha cli tool.\n. I've also tried:\njs\ncompressedMessage = zlib.gzipSync(message).toJSON()\nAnd sending compressedMessage.data, which is an array of bytes, e.g \n[ 31,\n  139,\n  8,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  3,\n  243,\n  201,\n  47,\n  74,\n  205,\n  85,\n  200,\n  44,\n  40,\n  46,\n  205,\n  85,\n  72,\n  201,\n  207,\n  201,\n  47,\n  82,\n  40,\n  206,\n  44,\n  81,\n  200,\n  77,\n  45,\n  1,\n  0,\n  245,\n  74,\n  69,\n  136,\n  25,\n  0,\n  0,\n  0 ]\nBut get:\nsh\nevents.js:85\n      throw er; // Unhandled 'error' event\n            ^\nError: incorrect header check\n  at Zlib._handle.onerror (zlib.js:366:17)\nWhich is guess is expected since I'm piping an array to zlib.createGunzip.\n. @pgte Works flawlessly. Thanks!\n. ",
    "reddynr": "Iam getting below error while running project in dev. any help much appreciated. thanks\nError: Cannot find module './internal/streams/BufferList'\n. ",
    "peteratticusberg": "@pgte I think the proper way to handle this would be make it so that nock optionally consume a query param serializer. \ne.g. something like:\n```\nconst querystring = require('querystring');\nconst serializeQuery(params) {\n  return querystring.stringify(params);\n}\nnock('https://example.com')\n.setQuerySerializer(serializeQuery)\n.query({ tree: 'jobs[name' })\n```\nWould be nice to have the option to set it on the nock object and also just set it for specific one off requests. \nIf you'd accept a PR like this let me know and I can put one up. . Thanks!\n\nI think encoding of query parameters is out of scope of nock, as different request libraries handle encoding differently\n\nAgreed. The idea behind the feature would be to allow users to optionally configure nock to use an arbitrary query serializer (e.g. the one that their request library is using). Nock itself would not ship with a query serializer.\nDoes that make any more sense?\n. I see totally makes sense. Let's hold off on this then. If we see more activity in this thread / demand for this feature elsewhere I'd be happy to come back and put up a PR. \n. ",
    "pconerly": ":rocket: thanks!\n. ",
    "dominykas": "What you're looking for is:\njs\nif (!nock.isActive()) { nock.activate(); }\nAs a side note, I must say, that my personal opinion is that hijacking everything during require is a horrible horrible pattern and should be fixed to explicitly require activation.\n. ",
    "brettporter": "Note: the emit error that is failing the tests is one thing that needs to be rethought - the core libraries don't actually emit an error, but they destroy the socket which will result in an error being emitted. Would appreciate your thoughts on how to handle that appropriately.\n. Thanks for looking over it!\n\nI think it shouldn't emit an error.\nI think that the appropriate behaviour is similar to the way the real request.abort is implemented:\nhttps://github.com/iojs/io.js/blob/v1.x/lib/_http_client.js#L168-L194\n\nI agree. I've added some changes which instead of emitting an error on abort, it will do it if you attempt to write, end or respond to the request instead - this should match how a normal request behaves if a socket is destroyed (as is the case in the code above).\nDoes that make sense?\n. Hi @pgte - I've added tests and documentation. Also, writing the tests made it clear that calling it socketTimeout was confusing, as you're simulating a delay / idle socket (that may or may not lead to a timeout). I've renamed it to socketDelay which is hopefully clearer and a bit closer to the other delay* methods.\nIs there anything else you need?\n. @drazisil how does the code look? It doesn't actually generate an ETIMEDOUT, but instead triggers anything you've added with setTimeout to occur.\n. :+1: nice, thanks @pgte \n. ",
    "Natim": "Similar questions:\n- http://stackoverflow.com/questions/25697093/node-js-nock-and-nedb-reply-gets-executed-before-the-call-back-finishes\n- http://stackoverflow.com/questions/25684307/node-js-module-nock-reply-with-a-callback-doesnt-work\n. Yes it seems that mocha is doing a similar thing with the done parameter.\n. The code to add stand apparently there: https://github.com/pgte/nock/blob/master/lib/request_overrider.js#L264-L268\n. @pgte You asked for a PR, here is my proposal.\nr? @n1k0\n. Updated with @pgte comments.\n. After this line I didn't touch the code just indent it because of the new function definition.\n. Yes good point, I was thinking about it and then I realize that there should not be errors at that point but you've made your point, I will change that.\n. ",
    "almet": "Awesome, thanks @pgte.\n. ",
    "coveralls": "\nCoverage remained the same at 92.98% when pulling 19bb1bb752fb914464219bb44a6a472a763ac12a on benurb:fix/235/replyWithFile into 65cd32e84c98668ff756684df244f48f068ead2f on pgte:master.\n. \nCoverage remained the same at 92.98% when pulling 19bb1bb752fb914464219bb44a6a472a763ac12a on benurb:fix/235/replyWithFile into 65cd32e84c98668ff756684df244f48f068ead2f on pgte:master.\n. \nCoverage increased (+0.04%) to 93.02% when pulling 2e2e0d12ffdfd9ea1995f47ee6939e2278a4d8a8 on jfromaniello:basic_auth_sugar into 348f273df95f73df4b09632b025319310e12c07e on pgte:master.\n. \nCoverage remained the same at 93.03% when pulling fdda35935d42ca8405d590b2aae807dd1f8d9d63 on xavierchow:master into a831db3353b3ededbbd9446f245f7e8607e3e929 on pgte:master.\n. \nCoverage remained the same at 93.03% when pulling fdda35935d42ca8405d590b2aae807dd1f8d9d63 on xavierchow:master into a831db3353b3ededbbd9446f245f7e8607e3e929 on pgte:master.\n. \nCoverage increased (+0.03%) to 93.07% when pulling 4cea4b78b681cee4c10c2d4a970e993d073f386f on dynamic_mock into ce9612c36e364ff9ebfcc27dfa52759d5a3a90b5 on master.\n. \nCoverage increased (+0.03%) to 93.07% when pulling 4cea4b78b681cee4c10c2d4a970e993d073f386f on dynamic_mock into ce9612c36e364ff9ebfcc27dfa52759d5a3a90b5 on master.\n. \nCoverage decreased (-0.1%) to 92.96% when pulling 926c5a17b4b5d5b2fbccb5a7f83df26751f2385a on douglaseggleton:master into d8663c511557da2d4f7c34bc9c6a16aae6c3b1d4 on pgte:master.\n. \nCoverage decreased (-0.19%) to 92.85% when pulling f2ac59f6bad3641d5d73fc15c736076fb3c7a790 on ksheedlo:fail-bad-headers into d62ed5755860fdc7fe9ade25f47ad14e2df851a2 on pgte:master.\n. \nCoverage increased (+0.05%) to 93.08% when pulling f6eb8de56472537155e4cd50511ae0ed6862547d on ksheedlo:fail-bad-headers into d62ed5755860fdc7fe9ade25f47ad14e2df851a2 on pgte:master.\n. \nCoverage increased (+0.05%) to 93.09% when pulling 5a8dfe50b0afcb2a0e5105771e25a8abe1d622ac on ksheedlo:fail-bad-headers into d62ed5755860fdc7fe9ade25f47ad14e2df851a2 on pgte:master.\n. \nCoverage remained the same at 93.17% when pulling 2b7145bbaab621096dd5859c6f8d6f2ea1f7fa5c on mjseidel:patch-1 into d0f76974004416c7529cd5147ee6e50a64063c74 on pgte:master.\n. \nCoverage remained the same at 93.17% when pulling 2b7145bbaab621096dd5859c6f8d6f2ea1f7fa5c on mjseidel:patch-1 into d0f76974004416c7529cd5147ee6e50a64063c74 on pgte:master.\n. \nCoverage remained the same at 93.17% when pulling 2b7145bbaab621096dd5859c6f8d6f2ea1f7fa5c on mjseidel:patch-1 into d0f76974004416c7529cd5147ee6e50a64063c74 on pgte:master.\n. \nCoverage decreased (-0.24%) to 92.93% when pulling 2badfca103ba98b8bd1110bbca324e16facf4dac on ghiden:bodies-dont-match-with-more-output into d0f76974004416c7529cd5147ee6e50a64063c74 on pgte:master.\n. \nCoverage decreased (-0.24%) to 92.93% when pulling 2badfca103ba98b8bd1110bbca324e16facf4dac on ghiden:bodies-dont-match-with-more-output into d0f76974004416c7529cd5147ee6e50a64063c74 on pgte:master.\n. \nCoverage remained the same at 93.17% when pulling 2badfca103ba98b8bd1110bbca324e16facf4dac on ghiden:bodies-dont-match-with-more-output into d0f76974004416c7529cd5147ee6e50a64063c74 on pgte:master.\n. \nCoverage decreased (-0.29%) to 92.8% when pulling fb32623afb4fee45491864bbf3b04ef7a5f6fffd on jagoda:fix-http-message into a6a2088353cd171061752ff565e948a1cf725714 on pgte:master.\n. \nCoverage decreased (-0.29%) to 92.8% when pulling fb32623afb4fee45491864bbf3b04ef7a5f6fffd on jagoda:fix-http-message into a6a2088353cd171061752ff565e948a1cf725714 on pgte:master.\n. \nCoverage increased (+0.0%) to 93.09% when pulling b8c1bde2be58ee2378f8536a6732cb5e2ea98b33 on jagoda:fix-http-message into a6a2088353cd171061752ff565e948a1cf725714 on pgte:master.\n. \nCoverage increased (+0.02%) to 93.12% when pulling 3367cc3702b94f9442c4094ee167659d5f873074 on RomanGotsiy:master into b6a5e7bd3ddf770c7d9106395614d5da87d9a6fe on pgte:master.\n. \nCoverage increased (+0.02%) to 93.12% when pulling 3367cc3702b94f9442c4094ee167659d5f873074 on RomanGotsiy:master into b6a5e7bd3ddf770c7d9106395614d5da87d9a6fe on pgte:master.\n. \nCoverage increased (+0.02%) to 93.12% when pulling 3367cc3702b94f9442c4094ee167659d5f873074 on RomanGotsiy:master into b6a5e7bd3ddf770c7d9106395614d5da87d9a6fe on pgte:master.\n. \nCoverage increased (+0.02%) to 93.13% when pulling 2a660bd53ff76fb605efca52f744a7f36bdea1a5 on jagoda:feat-default-headers into f73b5c6edc944be51624e1cacdbcd74c19b589cb on pgte:master.\n. \nCoverage decreased (-0.23%) to 92.88% when pulling 518f154cac2480acb8cd65a8ac722c02bc6c86ee on jagoda:feat-default-headers into f73b5c6edc944be51624e1cacdbcd74c19b589cb on pgte:master.\n. \nCoverage increased (+0.02%) to 93.13% when pulling 518f154cac2480acb8cd65a8ac722c02bc6c86ee on jagoda:feat-default-headers into f73b5c6edc944be51624e1cacdbcd74c19b589cb on pgte:master.\n. \nCoverage increased (+0.01%) to 93.12% when pulling 50ba9e0272be3e1592f04f6123b54a9a9cdcd666 on ierceg:fix-nock-back-dryrun-no-net-access into f73b5c6edc944be51624e1cacdbcd74c19b589cb on pgte:master.\n. \nCoverage remained the same at 93.14% when pulling c9734764656d6404e771e9abeec124dd98347ef9 on leedm777:chai-2 into 20a68efede3f5fe962d04c22883601dd13df1286 on pgte:master.\n. \nCoverage remained the same at 93.14% when pulling c9734764656d6404e771e9abeec124dd98347ef9 on leedm777:chai-2 into 20a68efede3f5fe962d04c22883601dd13df1286 on pgte:master.\n. \nCoverage increased (+0.23%) to 93.12% when pulling 2ceb76fcfa5200141484e9209c31ed1d7e8f116f on omarkhan:deepequal into 3fb88913da13fec37bbad142e3de8423841eb355 on pgte:master.\n. \nCoverage remained the same at 92.614% when pulling 02c1085e7f52efd25d4b8d7e1c7d23c00ab6d599 on reconbot:patch-1 into 694c42198656e162acb49ab64490edbc9e31f067 on node-nock:master.\n. \nCoverage remained the same at 92.614% when pulling 87957171265fd80050233a8dc0313b1b6d31676b on satazor:request-promise into 694c42198656e162acb49ab64490edbc9e31f067 on node-nock:master.\n. \nCoverage remained the same at 92.614% when pulling 4ed346ed22f176986e91fd1ef517e6dc8f763484 on satazor:request-promise into 694c42198656e162acb49ab64490edbc9e31f067 on node-nock:master.\n. \nCoverage remained the same at 92.614% when pulling 1e8f0d3767e2e2521300f74201619c907f942aad on satazor:request-promise into 694c42198656e162acb49ab64490edbc9e31f067 on node-nock:master.\n. \nCoverage remained the same at 92.614% when pulling 477f1592bcd6871a438dfbc82cdc4c973f592891 on satazor:request-promise into 694c42198656e162acb49ab64490edbc9e31f067 on node-nock:master.\n. \nCoverage increased (+0.006%) to 92.62% when pulling ef870b77a31251a5a0fdb2e3eaec81bf4d3533b7 on satazor:back-recorder-options into 694c42198656e162acb49ab64490edbc9e31f067 on node-nock:master.\n. \nCoverage remained the same at 92.62% when pulling 35fe61b660dff4f941d7ccbe1530ec886deae5b2 on mihar:patch-2 into 11b4b45ebfe589c17c251801389e35342f31ffa4 on node-nock:master.\n. \nCoverage increased (+0.03%) to 92.649% when pulling cd7cd1aca9dc1728dfb5271aad0d30c0047eb882 on RedCattleWealth:master into 11b4b45ebfe589c17c251801389e35342f31ffa4 on node-nock:master.\n. \nCoverage remained the same at 92.649% when pulling 122c2c59100c073280a1939c27d6b2b31bbacadf on kevinburkeshyp:fix-typo into 5d8f1d9a3ca74c85c2cc2d23580a5993cb152f57 on node-nock:master.\n. \nCoverage remained the same at 92.649% when pulling 37d10ab394775e6a3b8b71bc713ff06d43d4bbcd on kevinburkeshyp:fix-req-no-match into 5d8f1d9a3ca74c85c2cc2d23580a5993cb152f57 on node-nock:master.\n. \nCoverage remained the same at 92.667% when pulling 35e4f4f6dd310433a2e203c48111ec99c9cdbe9b on Byron-TW:patch-1 into 842ecfccc427a6be2c91f1029b3a882d0908f057 on node-nock:master.\n. \nCoverage decreased (-0.04%) to 92.632% when pulling 2834178a559ca780591a7897ceb5d2b482d9551e on ericsaboia:master into 3ce48c9c112fbdf272df56f5aeecb4b05a983c78 on node-nock:master.\n. \nCoverage remained the same at 92.632% when pulling 361dc2185748c179085e508580a91719c03c42ae on greenkeeper-request-2.70.0 into 9684dc65b80523c5cbeb58ff18cfe44f64716415 on master.\n. \nCoverage remained the same at 92.632% when pulling 5394207ae8223a8519695eaaba34352026239c57 on mooyoul:improve-readme-toc into 8d28cefbeea9f45323adc2b3387c4589ab625514 on node-nock:master.\n. \nCoverage remained the same at 92.632% when pulling d1956b64f8d6ae1e2565b4118db2f966e473dbd2 on greenkeeper-request-2.71.0 into 2246d7f27bfe916803b94e498625d01e0dac8eb5 on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling a9741905dd11a7111d7f792faf33c930c814a3df on greenkeeper-request-promise-3.0.0 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage remained the same at 92.632% when pulling 806525a191f840037fdace89e21f3ef0d4ce393b on greenkeeper-request-2.72.0 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.47% when pulling 6d9a338fc641e2be011fa50843901b43516cfea1 on greenkeeper-aws-sdk-2.3.7 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 85ac374076ee6b8418d8169b24207a2d2d85de46 on audionerd:patch-1 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on node-nock:master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 6616b3d6a14f2ddb611a0fe3072586ce6d53ab0f on greenkeeper-lodash-4.11.2 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling e2eeb776cff56e5f1e6be1baad53993ac26c1472 on greenkeeper-aws-sdk-2.3.8 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 6af0d7dbb04bf008d098d295a8624464558fefb9 on greenkeeper-aws-sdk-2.3.9 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 50350fd6ecc7fd823930219ae43052e47d1210db on greenkeeper-browserify-13.0.1 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 6170a9dea70671710c45d5b6aa1ccca45cb8cf96 on greenkeeper-lodash-4.12.0 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 119da1b1522e5f19f04128de690ab44c26eec69a on greenkeeper-qs-6.2.0 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 3139e425ab9921fe42c745e1d5ff7644cdf27e40 on greenkeeper-pre-commit-1.1.3 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling a45e3d9da65dd47b15ce14068b0b2b1ae79a76a9 on greenkeeper-aws-sdk-2.3.10 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 65448157af503942cf11298ff38caa629b30502b on abstractvector:master into 563fff1e507815a710adcdc292f5ecf1ea29f30d on node-nock:master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 182da8e195e1eaf868f81e346c8f97dadf178b55 on greenkeeper-aws-sdk-2.3.12 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 1a31fab762cf5f4cb7a7e9740a5a5391e1c6d492 on greenkeeper-aws-sdk-2.3.13 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 3beb8fcdf85944a3845ca7b85fa83a25b82d9c10 on greenkeeper-aws-sdk-2.3.14 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling b45bf51420004be000991c61589342f3a9047f17 on xavierchow:master into 563fff1e507815a710adcdc292f5ecf1ea29f30d on node-nock:master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling ad5468efe863061ea32b9fb3ab850e6b822f0f30 on greenkeeper-lodash-4.13.0 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling d518a1bbfb04baeb692fd529d96a1e8c92311dda on greenkeeper-lodash-4.13.1 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 64ac68c98364bd1d85363d2138eec8deb145fe54 on greenkeeper-tap-5.7.2 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling e9a94a0188d04f829034810ae8cc2de1e4b1bca6 on greenkeeper-restify-4.1.0 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling ce54e033c7accde0a8d4deffef4640ee634ae01d on greenkeeper-aws-sdk-2.3.15 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 72b474b36944c3efa8bd15e96c813371a7d2500c on greenkeeper-aws-sdk-2.3.16 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 6fabe82353b1cc932dca5686077f12146372907e on greenkeeper-superagent-2.0.0 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage decreased (-0.2%) to 92.389% when pulling 8fe0c6ce29008f23b58af5221960634734d52985 on greenkeeper-aws-sdk-2.3.17 into 563fff1e507815a710adcdc292f5ecf1ea29f30d on master.\n. \nCoverage remained the same at 92.632% when pulling 16d6e4b4a34cb4d26b7afeb1543ba63e5daa0b39 on Elergy:master into 563fff1e507815a710adcdc292f5ecf1ea29f30d on node-nock:master.\n. \n\nCoverage increased (+0.03%) to 96.566% when pulling ca9f1cc920dfe774451020154a92f12568c302f6 on ianwsperber:feature-better-unmatched-request-error into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \nCoverage remained the same at 96.535% when pulling a99b45bff98233a60f20409030c42244f26fcb30 on ksmith97:master into 5af77f05cb5be4cc0e2c825854738e2824b6394b on node-nock:master.\n. \nCoverage remained the same at 96.535% when pulling d094fcc18bffb865be35fc99e9eaedeb29d1d696 on ksmith97:master into 5af77f05cb5be4cc0e2c825854738e2824b6394b on node-nock:master.\n. \nCoverage remained the same at 96.535% when pulling d094fcc18bffb865be35fc99e9eaedeb29d1d696 on ksmith97:master into 5af77f05cb5be4cc0e2c825854738e2824b6394b on node-nock:master.\n. \nCoverage remained the same at 96.535% when pulling d094fcc18bffb865be35fc99e9eaedeb29d1d696 on ksmith97:master into 5af77f05cb5be4cc0e2c825854738e2824b6394b on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling bcdf886df195c34432e5cc65e5db95e429acf08c on ksmith97:master into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \nCoverage decreased (-0.05%) to 96.531% when pulling b3d4081c0bb2f22fa0591ec5b0f0cfa2b8b5c5dd on szdavid92:feat/gzip-content-type-decoder into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on node-nock:master.\n. \nCoverage decreased (-0.06%) to 95.932% when pulling a617a40ddc5cd133d5b1a75644164b5a21891cb3 on greenkeeper-aws-sdk-2.6.6 into fe23f50c09ee622acdad5843f7584fc38016d15a on master.\n. \nCoverage remained the same at 96.561% when pulling 5eeb49ba8316c1000f524bc4c5e3237131f034f3 on greenkeeper-node-static-0.7.9 into ea64fe399f3108c7c495a5933f4b8f556ecbc9f4 on master.\n. \nCoverage decreased (-0.08%) to 96.48% when pulling d496aa0fe6947da206b1cf1e5d19d934b999a80b on hugoduraes:master into ea64fe399f3108c7c495a5933f4b8f556ecbc9f4 on node-nock:master.\n. \nCoverage decreased (-0.01%) to 96.547% when pulling 24bb07712e8b2ee4f901c8b95f14fcb45dbdb44d on hugoduraes:master into ea64fe399f3108c7c495a5933f4b8f556ecbc9f4 on node-nock:master.\n. \nCoverage remained the same at 96.561% when pulling 158bd9b14f8dbad4dd5907b87e5b250d5863c734 on greenkeeper-lodash-4.16.3 into ea64fe399f3108c7c495a5933f4b8f556ecbc9f4 on master.\n. \nCoverage remained the same at 96.561% when pulling b2d060d392d0d6420f0851ab74192399cc90f8e6 on greenkeeper-lodash-4.16.4 into ea64fe399f3108c7c495a5933f4b8f556ecbc9f4 on master.\n. \nCoverage remained the same at 96.561% when pulling 2f487896567c858e47b2d6b3e5446ab79aa68296 on greenkeeper-aws-sdk-2.6.7 into ea64fe399f3108c7c495a5933f4b8f556ecbc9f4 on master.\n. \nCoverage remained the same at 96.561% when pulling 2f487896567c858e47b2d6b3e5446ab79aa68296 on greenkeeper-aws-sdk-2.6.7 into ea64fe399f3108c7c495a5933f4b8f556ecbc9f4 on master.\n. \nCoverage remained the same at 96.672% when pulling 37cc8635b56f68bb54d4963054b705a0b30f321c on greenkeeper-nyc-8.3.1 into cddad7ff8ff5b527518138fd84b3521ca76dfa93 on master.\n. \nCoverage remained the same at 96.542% when pulling af583e4b00994ebc48f07afebca570332d79742a on ltegman:fix/body-spec-regex-in-array into bc565eb0826e530e4ca825816808053ec1f74c0c on node-nock:master.\n. \nCoverage increased (+0.004%) to 96.547% when pulling c4c5689e9fe50f713833d030dcfc9e4cb79b2ad4 on ltegman:fix/body-spec-regex-in-array into bc565eb0826e530e4ca825816808053ec1f74c0c on node-nock:master.\n. \nCoverage increased (+0.009%) to 96.551% when pulling d6dc97d4de598f3148ef48418a301e0b3cfd8243 on pimterry:removeInterceptor-from-pending into bc565eb0826e530e4ca825816808053ec1f74c0c on node-nock:master.\n. \nCoverage remained the same at 96.542% when pulling 074b60ff4a745caf6fd641010ee453da93ebba0f on Ginden:no-garbage-in-npm into bc565eb0826e530e4ca825816808053ec1f74c0c on node-nock:master.\n. \nCoverage increased (+0.01%) to 96.552% when pulling fd658caf76235e1bd26216abc907c38905fb938f on pimterry:optional-mocks into bc565eb0826e530e4ca825816808053ec1f74c0c on node-nock:master.\n. \nCoverage increased (+0.04%) to 96.582% when pulling 142c8182d9bfbccd61190da97c378bc3f5e8ce3c on pimterry:optional-mocks into bc565eb0826e530e4ca825816808053ec1f74c0c on node-nock:master.\n. \nCoverage remained the same at 96.542% when pulling 528506efa6eab28a268c23433f2f82ec761f61d7 on greenkeeper-async-2.1.0 into bc565eb0826e530e4ca825816808053ec1f74c0c on master.\n. \nCoverage remained the same at 96.542% when pulling cbfef94325cde7f9c5f3f464e20ff21a5d23f800 on greenkeeper-async-2.1.1 into bc565eb0826e530e4ca825816808053ec1f74c0c on master.\n. \nCoverage increased (+0.01%) to 96.545% when pulling 1ee0a8b4257f4652ce76a63c633546185f2e5643 on motevets:master into 5af77f05cb5be4cc0e2c825854738e2824b6394b on node-nock:master.\n. \nCoverage remained the same at 96.582% when pulling 78e0290368b19ebf327703740aada7b5978cc739 on greenkeeper-jshint-2.9.4 into d5962f21f7bbb22716df8669b4be8c2282765228 on master.\n. \nCoverage remained the same at 96.584% when pulling 0c22e7ac270a2fd88eb93d4cd534c923bdfdb682 on greenkeeper-jshint-2.9.4 into ba040ce66a99aa25bb6327fe9872ead4a95e7420 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 4a61b495f8a5566ed243fa010a4c4eb9fd1db2bd on greenkeeper-jshint-2.9.4 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 4a0de3fa2859df33fa2cc51fbaf2801688386ebd on greenkeeper-jshint-2.9.4 into 07ffed025112657ac2c497f5971fe2d26aa8ce7a on master.\n. \n\nCoverage remained the same at 96.537% when pulling 0083bcf79fce042f49a49f687186279462f64bff on greenkeeper-jshint-2.9.4 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling bf05b52487587af9fedf73060f913831a070b644 on greenkeeper-jshint-2.9.4 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \nCoverage remained the same at 96.582% when pulling adf0d1706188f2cd10ee1e9f233f999f0b526653 on greenkeeper-aws-sdk-2.6.11 into d5962f21f7bbb22716df8669b4be8c2282765228 on master.\n. \nCoverage remained the same at 96.582% when pulling adf0d1706188f2cd10ee1e9f233f999f0b526653 on greenkeeper-aws-sdk-2.6.11 into d5962f21f7bbb22716df8669b4be8c2282765228 on master.\n. \nCoverage remained the same at 96.584% when pulling 2dfd5cdd3c8bddb1c60b2e1a31820b79a3acaa91 on greenkeeper-aws-sdk-2.6.11 into ba040ce66a99aa25bb6327fe9872ead4a95e7420 on master.\n. \nCoverage increased (+0.02%) to 96.604% when pulling 2dfd5cdd3c8bddb1c60b2e1a31820b79a3acaa91 on greenkeeper-aws-sdk-2.6.11 into ba040ce66a99aa25bb6327fe9872ead4a95e7420 on master.\n. \nCoverage increased (+0.02%) to 96.604% when pulling 2dfd5cdd3c8bddb1c60b2e1a31820b79a3acaa91 on greenkeeper-aws-sdk-2.6.11 into ba040ce66a99aa25bb6327fe9872ead4a95e7420 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 6c929578232e5c642096dca6aeb166c24babd5f7 on greenkeeper-aws-sdk-2.6.11 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 6c929578232e5c642096dca6aeb166c24babd5f7 on greenkeeper-aws-sdk-2.6.11 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 0202aec61e1d82dcfe0e2ac7f4f70df18383ada1 on greenkeeper-aws-sdk-2.6.11 into 07ffed025112657ac2c497f5971fe2d26aa8ce7a on master.\n. \n\nCoverage remained the same at 96.537% when pulling f38b8108932334a3f0b1559b8648deabd5d33b21 on greenkeeper-aws-sdk-2.6.11 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.566% when pulling 4c829955f24bc05c5909fa8b72b7fe13d19e9f86 on greenkeeper-aws-sdk-2.6.11 into 189894e6129606337b65e31231fc34bf049c00c1 on master.\n. \nCoverage remained the same at 96.581% when pulling 8fcf622f5f6a2292643c3eeeb5e09960876e783f on greenkeeper-tap-8.0.0 into 2a1bc2d68cb5e36bc4a1501b5cbe9fe3cbcd576f on master.\n. \nCoverage increased (+0.004%) to 96.585% when pulling a67fe146eb8094daef18209f388293f0030c84f6 on RobertWHurst:master into 2a1bc2d68cb5e36bc4a1501b5cbe9fe3cbcd576f on node-nock:master.\n. \nCoverage remained the same at 96.584% when pulling 9ab334a917eb8d69e824667a670a1c0d87c99614 on greenkeeper-lodash-4.16.5 into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on master.\n. \nCoverage remained the same at 96.584% when pulling 9ab334a917eb8d69e824667a670a1c0d87c99614 on greenkeeper-lodash-4.16.5 into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on master.\n. \nCoverage remained the same at 96.584% when pulling 8f10b3a3b4fab02d3df89169fd55cc8ba3d5f26a on greenkeeper-lodash-4.16.6 into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on master.\n. \nCoverage remained the same at 96.584% when pulling ef7c447f60ee9f71d893ec4e86b0c364ece823d3 on greenkeeper-zombie-5.0.0 into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on master.\n. \nCoverage remained the same at 96.584% when pulling 8369af89145bcc6aa38219275e9f00b05d8c7a6a on greenkeeper-zombie-5.0.1 into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on master.\n. \nCoverage decreased (-0.02%) to 96.564% when pulling 63dca8ee04c3e007fad80d3d6516969b09acc23e on NickStefan:set-allow-unmock into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on node-nock:master.\n. \nCoverage increased (+0.007%) to 96.591% when pulling 6c7427718790c795fda54788a7df78568144e01b on NickStefan:set-allow-unmock into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on node-nock:master.\n. \nCoverage remained the same at 96.584% when pulling 7fdc1d69506e26cda8e19c7ed36114ea6d3a1932 on chentsulin:patch-1 into 192f0f8cc29a01c0ac8486dc52f8dd12c1c0ae82 on node-nock:master.\n. \nCoverage remained the same at 96.531% when pulling 0c646b79c83ac7eb8617327b55d5dc4ba8b69f30 on greenkeeper-hyperquest-2.1.1 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \n\nCoverage remained the same at 96.531% when pulling 1e744495af0c7b119a6e56ce06d8da2835f1a1fe on greenkeeper-hyperquest-2.1.1 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 8e7e56b18dc37ba9e9a4821a52dfc6e78e376f64 on greenkeeper-hyperquest-2.1.1 into 07ffed025112657ac2c497f5971fe2d26aa8ce7a on master.\n. \n\nCoverage remained the same at 96.537% when pulling 1e953a4c18339bfed2e11956752ade756bfb86e7 on greenkeeper-hyperquest-2.1.1 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 22c3d8b9e445f969a5dfee00616e367721baa968 on greenkeeper-hyperquest-2.1.1 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \nCoverage remained the same at 96.531% when pulling db00d606a6e49ac84dd8edb3cddd7dede6052675 on greenkeeper-lodash-4.17.0 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \n\nCoverage remained the same at 96.531% when pulling 081f9f3fb9dee84757ecd2d005e04dd0b4d596db on greenkeeper-lodash-4.17.0 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \nCoverage remained the same at 96.531% when pulling 7a7743568622aaaa0308576258b6e473d012e58f on greenkeeper-nyc-9.0.1 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \nCoverage remained the same at 96.531% when pulling 7a7743568622aaaa0308576258b6e473d012e58f on greenkeeper-nyc-9.0.1 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \nCoverage remained the same at 96.531% when pulling e0172cd16f8f7d5f9ca0bdced2ba5c3bf74525fa on greenkeeper-lodash-4.17.1 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \n\nCoverage remained the same at 96.531% when pulling 7b1e560bc4a122dc80dad6c4f547e5eb496d7ea2 on greenkeeper-lodash-4.17.1 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \nCoverage remained the same at 96.531% when pulling f271e3fbf74fb38fc5c53fddb76872a708fcf38f on greenkeeper-lodash-4.17.2 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \n\nCoverage remained the same at 96.531% when pulling b3d437573ee8a92f56b6e9ff15c4f2507fd7c6c2 on greenkeeper-lodash-4.17.2 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \nCoverage remained the same at 96.531% when pulling 8339d7d49ea7a326db90b74bd00929e553a6a2fd on greenkeeper-tap-8.0.1 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \n\nCoverage remained the same at 96.531% when pulling 4c1f014e8b3c2da2eaf8e890e42dd5ef6ea47472 on greenkeeper-tap-8.0.1 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 44096ad1918681ecdf77d494564df2af13eef616 on greenkeeper-tap-8.0.1 into 07ffed025112657ac2c497f5971fe2d26aa8ce7a on master.\n. \nCoverage remained the same at 96.531% when pulling 899493a87ddde9f3bd0024218d2b06d0264d66ba on greenkeeper-superagent-3.0.0 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \n\nCoverage remained the same at 96.531% when pulling 95cdfafaf3622bd9f7aad50dd402a7b8683c862e on greenkeeper-superagent-3.0.0 into d9663d281890eaf067f60010bb1e4f0b71aa5a92 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 49d311e68d6a0b28959f138da09d36d6adc99535 on greenkeeper-superagent-3.0.0 into 07ffed025112657ac2c497f5971fe2d26aa8ce7a on master.\n. \n\nCoverage remained the same at 96.537% when pulling eec0c75840012f9abddc5daa1a309de5094cd280 on greenkeeper-superagent-3.0.0 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.566% when pulling 98815ce1f8fad134f65c5bc5ed42406f4675d32b on greenkeeper-superagent-3.0.0 into 189894e6129606337b65e31231fc34bf049c00c1 on master.\n. \n\nCoverage remained the same at 96.531% when pulling 6f49135cf1385b4002c888ba13c57f8c0ee158f4 on greenkeeper-nyc-10.0.0 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \n\nCoverage remained the same at 96.531% when pulling 6f49135cf1385b4002c888ba13c57f8c0ee158f4 on greenkeeper-nyc-10.0.0 into 2e56026a231efe9c0cb732c9f6583454fcfe1ebb on master.\n. \n\nCoverage increased (+0.01%) to 96.547% when pulling b9eaa75844a5a8158a87e21d724d839b32279c1d on djanowski:fix-allow-unmocked-when-interceptors-removed into 65373a96883a7a547100a3394e5aeed4ca70bfd5 on node-nock:master.\n. \n\nCoverage increased (+0.01%) to 96.547% when pulling b9eaa75844a5a8158a87e21d724d839b32279c1d on djanowski:fix-allow-unmocked-when-interceptors-removed into 65373a96883a7a547100a3394e5aeed4ca70bfd5 on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling 36cc5685b847682a1c923d6845cd7b5edbe1ad4e on greenkeeper-hyperquest-2.1.2 into 65373a96883a7a547100a3394e5aeed4ca70bfd5 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 27845f3e4c24936fc0c009a6e9a6b6c305d7514a on greenkeeper-hyperquest-2.1.2 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling b43543c9e55dda2e075acc9899ac1a7b3b783d44 on greenkeeper-hyperquest-2.1.2 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \n\nCoverage remained the same at 96.537% when pulling 7fbaf82889e6fbe8d27e0dbe07bbd36b49032f77 on greenkeeper-superagent-3.1.0 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage increased (+0.0007%) to 96.538% when pulling 50859e52fd86759f3215cdc3509c83d364b84cf5 on RubenVerborgh:fix-socket-this into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling 9a570e1b1d5e275483b9ed7408e8d47df9d31be6 on ModuloM:patch-2 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling b502a96fc2221fcd32dd385a28b1935e28b3a57e on greenkeeper-pre-commit-1.2.0 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 69f39de974935df45527a5b446d8dd6b17cc17d2 on greenkeeper-markdown-toc-1.0.0 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 69f39de974935df45527a5b446d8dd6b17cc17d2 on greenkeeper-markdown-toc-1.0.0 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.566% when pulling a971a574c39e12114cda1bf9a3b389b58cb4dd48 on greenkeeper-markdown-toc-1.0.0 into 189894e6129606337b65e31231fc34bf049c00c1 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 195bb23bf41bed78c456659741d1031708d2ea0c on greenkeeper-markdown-toc-1.0.1 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 045c67f94303387e50678dd58002a5f67896098a on greenkeeper-markdown-toc-1.0.2 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 5f04f1f86695f8e2f7bfb06054c084dce5f31479 on greenkeeper-superagent-3.2.0 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 5c92d00fc85a0f81cd7ca86e3306f3a32f926a20 on greenkeeper-superagent-3.2.0 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \n\nCoverage remained the same at 96.566% when pulling cf375598c0404a3c94de9085c34a06ad256e2d0f on greenkeeper-superagent-3.2.0 into 189894e6129606337b65e31231fc34bf049c00c1 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 8f5638921ca6eca0d0b2d9c5e1f5358998020b8d on greenkeeper-superagent-3.2.1 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.566% when pulling e26df6165064dbc6ed020646a279c21410acbfbe on greenkeeper-superagent-3.2.1 into 189894e6129606337b65e31231fc34bf049c00c1 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 96679f6229c4f2203f9d87469e246e756d2d19ba on greenkeeper-pre-commit-1.2.1 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage increased (+0.0007%) to 96.538% when pulling 8dc53932cd01fbbcd865d81464436a78a1822b9f on rexxars:fix-socket-event-scope into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling 0682546322d5cd6d6fbffee3607d9cdb04453a0b on greenkeeper-pre-commit-1.2.2 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 121a993938dac9da965467560aedc93f70f2c8c3 on greenkeeper-superagent-3.3.1 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 251692f6656d4365d25caf054090032f7c52d818 on greenkeeper-superagent-3.3.1 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \n\nCoverage remained the same at 96.537% when pulling 4dda65ed4e39f4d49d42e3a0615e68568fa6a5b1 on greenkeeper-markdown-toc-1.0.3 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 3a8f6bb2e62bba320c48d8a857b4d23c987a7f85 on morenoh149:patch-2 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling ae73ea5e5531e80dc6dc5dec9f70a6ca891a4c7c on greenkeeper-tap-9.0.0 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 7229794202d464499f941376d9a984941693bfa6 on greenkeeper-tap-9.0.1 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling adcb2b83e70d8423fe01892814180a974567870b on greenkeeper-tap-9.0.2 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 263331d7852c9c4c86cd106eeef3f3b71a7e5b52 on Thebigbignooby:patch-1 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage increased (+0.003%) to 96.54% when pulling f3c453fff77bf38499e561828f7071e02f0e7fc6 on ierceg:promisify-nock-back into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage increased (+0.006%) to 96.543% when pulling 8d5262970a9f8bdd227e877f9a402728d8c0cc88 on ierceg:promisify-nock-back into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage increased (+0.006%) to 96.543% when pulling 4d86d20d70619ef2be7b76da2a1fb4512d32337e on ierceg:promisify-nock-back into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling 806b068d6e59ec0e377655d82bb09371317cf6a5 on greenkeeper-tap-9.0.3 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 743cc50700b74424c413fedda8b3d00946213978 on greenkeeper-superagent-3.3.2 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage remained the same at 96.566% when pulling 6642cf53e2d295846af05f61a20814e1fe19d59d on greenkeeper-superagent-3.3.2 into 189894e6129606337b65e31231fc34bf049c00c1 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 002ae58eb097f35bb232b6c24faa75bb58644f02 on greenkeeper-markdown-toc-1.1.0 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on master.\n. \n\nCoverage increased (+0.0007%) to 96.538% when pulling 5701fa68cf82947e56afc637b032585d7152ab44 on aleung:fix-754 into 9ee2984dbcc69a02a125a87a77c2daa763d98713 on node-nock:master.\n. \n\nCoverage increased (+0.0007%) to 96.538% when pulling 39afb7e5cc820d44d0a2ec79559d30b8ec1143f2 on aleung:fix-754 into f6d3e76f48499586de9f0518db370fd7de99c6bb on node-nock:master.\n. \n\nCoverage increased (+0.005%) to 92.666% when pulling 343dc5d27809d53b08600e53e25b82cd9208a1f1 on aleung:fix-754 into 5856cde22e12694f550f6345c46b3ac4c43f50ec on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling c5d6541742236227237afd55cfe03c50eb568f23 on rovolution:master into f6d3e76f48499586de9f0518db370fd7de99c6bb on node-nock:master.\n. \n\nCoverage decreased (-0.01%) to 96.526% when pulling eb52d9281eab5719ee7ef35fbc8973d02cf12eb9 on raytung:fix-output-objects-false into f6d3e76f48499586de9f0518db370fd7de99c6bb on node-nock:master.\n. \n\nCoverage decreased (-0.02%) to 96.513% when pulling 415b74b4bf0dd0a0a7b2982e85257e445f6bb9a1 on raytung:fix-output-objects-false into f6d3e76f48499586de9f0518db370fd7de99c6bb on node-nock:master.\n. \n\nCoverage increased (+0.008%) to 96.545% when pulling 8e2b54ccdabcc274b82fe5d298b492599c29ef97 on raytung:fix-output-objects-false into f6d3e76f48499586de9f0518db370fd7de99c6bb on node-nock:master.\n. \n\nCoverage remained the same at 96.537% when pulling 348a12263bc52341cdd976b8db82e5365449860b on greenkeeper-browserify-14.0.0 into f6d3e76f48499586de9f0518db370fd7de99c6bb on master.\n. \n\nCoverage remained the same at 96.566% when pulling d1ba5cc467256684789dac75de830cf9efaa3d0e on greenkeeper-browserify-14.0.0 into 189894e6129606337b65e31231fc34bf049c00c1 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 167b71922c6d913776099e675ea1ecf8563ae9cc on greenkeeper-superagent-3.4.0 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \n\nCoverage remained the same at 96.537% when pulling c4c5e0f8cd699722d7487316c175c17333f5e8c0 on greenkeeper-tap-10.0.0 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \n\nCoverage remained the same at 96.537% when pulling 0c2f43078745eba17cb6773c2af776a0286652f6 on greenkeeper-superagent-3.4.1 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \n\nCoverage remained the same at 96.566% when pulling 2d113e1d8da62a82d0d85a7bad7ab9cbdefd5029 on greenkeeper-superagent-3.4.1 into 189894e6129606337b65e31231fc34bf049c00c1 on master.\n. \n\nCoverage remained the same at 96.537% when pulling 507eef6ec976ce8603848b85ba1c90ccde9b8fdc on greenkeeper-tap-10.0.1 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \n\nCoverage remained the same at 96.537% when pulling 1475def5392bbe1c7d4646a7fb81cde73deec59f on greenkeeper-tap-10.0.2 into 634fdff74ccb400f29c45d47c2a2cd7a21c520ba on master.\n. \n\nCoverage remained the same at 96.566% when pulling 93401b2a824e2b1ba1b77cc95d28a535fe3e3342 on chore-add-ian-contrib into 2e641267b92d2f92b89b66e8b21f28e3cb55a2d0 on master.\n. \n\nCoverage increased (+0.008%) to 96.574% when pulling 20dceeb112b92339bd1dd2be6aed3b4908e4368e on bug-818-multiple-set-cookie into dc4380f24e9a4b8b93d45c1399a8ce076e5bdb03 on master.\n. \n\nCoverage remained the same at 96.574% when pulling 219241d3d58167427f651f2dfba9de0e43e98bdd on chore-changelog-v9.0.4 into 8f20a6d6b9254299951b69d84becabcffb01344e on master.\n. \n\nCoverage decreased (-0.03%) to 96.545% when pulling 933cbada58d495a54a429bc09176d56d5f58f936 on KingHenne:fix/isomorphic-fetch-basic-auth into 1d1cafc009ca99c6839c944458d1bc1d0c6244bb on node-nock:master.\n. \n\nCoverage decreased (-3.9%) to 92.666% when pulling 2ae0f25ebe3e2de9814d9b186ee14134f07c44a0 on KingHenne:fix/nyc-config into 1d1cafc009ca99c6839c944458d1bc1d0c6244bb on node-nock:master.\n. \n\nCoverage decreased (-0.005%) to 92.661% when pulling f2ae8c1970913f9edf54ee046d7070fcecc898b3 on bug-827-matchStringOrRegexp into 0fb8c3d839b23028148e786a3353f2bb3c09e8da on master.\n. \n\nCoverage increased (+0.01%) to 92.671% when pulling b9d2823fd984e28f91d1483d3960235d63a2b7db on yodeyer:fixQs into 719776976e742ad2e7917c83322241b84e3110f6 on node-nock:master.\n. \n\nCoverage remained the same at 92.661% when pulling 6a6414891c2a380622104a347a58c1489e12e06c on greenkeeper-browserify-14.1.0 into 5856cde22e12694f550f6345c46b3ac4c43f50ec on master.\n. \n\nCoverage remained the same at 92.661% when pulling 0dfec2b32ecd507f4d613fcc7b99da7a38c226d0 on greenkeeper-superagent-3.4.3 into 5856cde22e12694f550f6345c46b3ac4c43f50ec on master.\n. \n\nCoverage remained the same at 92.661% when pulling 32f52de4421aa34104cb0cf31795b62d1fb8d0d1 on greenkeeper-superagent-3.4.4 into 5856cde22e12694f550f6345c46b3ac4c43f50ec on master.\n. \n\nCoverage remained the same at 92.661% when pulling 77b6b103dbc1ca64c1a55e5ec2115fc24924ad75 on delijati:master into 5856cde22e12694f550f6345c46b3ac4c43f50ec on node-nock:master.\n. \n\nCoverage remained the same at 92.661% when pulling 77b6b103dbc1ca64c1a55e5ec2115fc24924ad75 on delijati:master into 5856cde22e12694f550f6345c46b3ac4c43f50ec on node-nock:master.\n. \n\nCoverage increased (+0.01%) to 92.671% when pulling 06684f11caac488a9bf1b803d45a1083b89e1263 on delijati:master into 5856cde22e12694f550f6345c46b3ac4c43f50ec on node-nock:master.\n. \n\nCoverage remained the same at 92.661% when pulling a6cf5493f865b83ab1597980c1d40846e4e73a71 on greenkeeper-superagent-3.5.0 into 5856cde22e12694f550f6345c46b3ac4c43f50ec on master.\n. \n\nCoverage remained the same at 92.671% when pulling 8ce0abe540da1c0676a9afe735a704eafb4d8315 on feature-832-versioned-tests into 2a012a00276cdea57ad8f8204dff4ba5a1e9cc7c on master.\n. \n\nCoverage remained the same at 92.671% when pulling bdf3cf73bfa9bae0a2fddfd4e467e9baba9e36a2 on feature-832-versioned-tests into 2a012a00276cdea57ad8f8204dff4ba5a1e9cc7c on master.\n. \n\nCoverage remained the same at 92.671% when pulling ec09a497f8dc0b89e219403b0ea59e3a81daf4dd on csabapalfi:patch-1 into c5f265f08af46ded6f921aebed2853b715ae3644 on node-nock:master.\n. \n\nCoverage remained the same at 92.671% when pulling 0018b6a9aa5c913808df83ba06e2c129d1b4a3d3 on greenkeeper-request-promise-4.2.0 into c5f265f08af46ded6f921aebed2853b715ae3644 on master.\n. \n\nCoverage remained the same at 92.671% when pulling 0018b6a9aa5c913808df83ba06e2c129d1b4a3d3 on greenkeeper-request-promise-4.2.0 into c5f265f08af46ded6f921aebed2853b715ae3644 on master.\n. \n\nCoverage increased (+0.02%) to 92.686% when pulling f45f574b73550e5965e5b5df63dd1082141d305b on disrupticons:fixing-issue-856 into c5f265f08af46ded6f921aebed2853b715ae3644 on node-nock:master.\n. \n\nCoverage increased (+0.02%) to 92.686% when pulling 1cd68636bf8a686b4011353374979dd3c7d555e2 on disrupticons:fixing-issue-856 into c5f265f08af46ded6f921aebed2853b715ae3644 on node-nock:master.\n. \n\nCoverage remained the same at 92.671% when pulling 7c1cd795bbf782ee224cd623a801919a344f9233 on fabiosantoscode:patch-1 into c5f265f08af46ded6f921aebed2853b715ae3644 on node-nock:master.\n. \n\nCoverage increased (+0.005%) to 92.676% when pulling 96f0c00655ef20736de7fde3b4296f13208d64d2 on dcstone09:header_conflict into 934f1c39013a2a60dfa4999e78540cae2d819259 on node-nock:master.\n. \n\nCoverage increased (+0.005%) to 92.691% when pulling 118b049d727d64f2553b9324260ae7b54490464d on dcstone09:header_conflict into 30881e2a72dbb950e771f912c5f9ddbcb91c0acd on node-nock:master.\n. \n\nCoverage increased (+0.005%) to 92.691% when pulling eb5be6a8b15e9dce86bca43fc5e3953e91f1cd5d on dcstone09:header_conflict into f26818796b2448d00f1cda2d8533afb7d73c4cd2 on node-nock:master.\n. \n\nCoverage increased (+0.02%) to 92.686% when pulling 6961c4fa875cc580721f89ebe0e0903ae2876517 on fasterize:fix_match_body into 934f1c39013a2a60dfa4999e78540cae2d819259 on node-nock:master.\n. \n\nCoverage increased (+0.02%) to 92.686% when pulling 6961c4fa875cc580721f89ebe0e0903ae2876517 on fasterize:fix_match_body into 934f1c39013a2a60dfa4999e78540cae2d819259 on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling d702d5becc4eba8239499d0513716ed1ffb09777 on paulmelnikow:nock_back_err into 30881e2a72dbb950e771f912c5f9ddbcb91c0acd on node-nock:master.\n. \n\nCoverage increased (+0.1%) to 92.827% when pulling 201799c4a5f227da6efcd050458173e5065f1db8 on TheFive:master into 30881e2a72dbb950e771f912c5f9ddbcb91c0acd on node-nock:master.\n. \n\nCoverage increased (+0.1%) to 92.827% when pulling 5adf55d95abd4d43f3e951f6973c36e77d21f781 on TheFive:master into 30881e2a72dbb950e771f912c5f9ddbcb91c0acd on node-nock:master.\n. \n\nCoverage increased (+0.1%) to 92.827% when pulling 85608da94f3d2a6b31937ac1a9b625bfbfcc5407 on TheFive:master into 30881e2a72dbb950e771f912c5f9ddbcb91c0acd on node-nock:master.\n. \n\nCoverage increased (+0.1%) to 92.827% when pulling 85608da94f3d2a6b31937ac1a9b625bfbfcc5407 on TheFive:master into 30881e2a72dbb950e771f912c5f9ddbcb91c0acd on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 88ac9f93ada632708a980b9792c5cd669ed3f8a9 on greenkeeper-browserify-14.2.0 into 30881e2a72dbb950e771f912c5f9ddbcb91c0acd on master.\n. \n\nCoverage decreased (-0.06%) to 92.626% when pulling 431f3ad71892af69feb8bad2769dcc6b718791a0 on shai32:master into 30881e2a72dbb950e771f912c5f9ddbcb91c0acd on node-nock:master.\n. \n\nCoverage decreased (-0.02%) to 92.686% when pulling aa3d18c3d327fa27cd0ecc5a8a9a6565e4780ce7 on revert-v9.0.12-issue-863 into 91302df8b5b02309b76fc4950ddc20c26a8b499d on master.\n. \n\nCoverage decreased (-0.02%) to 92.686% when pulling d16dc400e03795b98f3a471475216c2c6119543d on paulmelnikow:eslint into b1e8787ed82412941225f25ba3d0f9070a61efd7 on node-nock:master.\n. \n\nCoverage decreased (-0.02%) to 92.686% when pulling 5ab4443c1c40e577fe0f195dafd9a5c6a44934d1 on paulmelnikow:eslint into b1e8787ed82412941225f25ba3d0f9070a61efd7 on node-nock:master.\n. \n\nCoverage decreased (-0.02%) to 92.686% when pulling 8cd6d9da48ac44cc21ff55b468dfa23963aab0b3 on paulmelnikow:eslint into b1e8787ed82412941225f25ba3d0f9070a61efd7 on node-nock:master.\n. \n\nCoverage decreased (-0.02%) to 92.686% when pulling d42fb3b8692294a1f328526734788e2a2f5424a6 on paulmelnikow:eslint into b1e8787ed82412941225f25ba3d0f9070a61efd7 on node-nock:master.\n. \n\nCoverage decreased (-0.06%) to 92.626% when pulling fa035f87a4cc7e489caf7cabaa42a67aae0b42e8 on bootprint:master into f26818796b2448d00f1cda2d8533afb7d73c4cd2 on node-nock:master.\n. \n\nCoverage increased (+0.01%) to 92.697% when pulling ba3fbc6b8094a234afd51dcf629b5dd9f50cad0b on bootprint:master into f26818796b2448d00f1cda2d8533afb7d73c4cd2 on node-nock:master.\n. \n\nCoverage increased (+0.01%) to 92.697% when pulling ba3fbc6b8094a234afd51dcf629b5dd9f50cad0b on bootprint:master into f26818796b2448d00f1cda2d8533afb7d73c4cd2 on node-nock:master.\n. \n\nCoverage increased (+0.01%) to 92.697% when pulling 816e8ec1718f6e626b075ff51341958a0ce1ad59 on bootprint:master into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling efdc13b852fb7bbcbff31435877fbc723b6229aa on greenkeeper-aws-sdk-2.49.0 into f26818796b2448d00f1cda2d8533afb7d73c4cd2 on master.\n. \n\nCoverage remained the same at 92.686% when pulling 749a13a1e76c91b96e779f42d2846fd380d20d71 on greenkeeper-nyc-10.3.2 into f26818796b2448d00f1cda2d8533afb7d73c4cd2 on master.\n. \n\nCoverage remained the same at 92.686% when pulling b7b6356ad2ec045c96e9fd9193817a334d70c410 on greenkeeper-request-promise-4.2.1 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 68b5b08f94f66d009752e4b7fd08baff69489657 on AlexTes:patch-1 into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage increased (+0.005%) to 92.691% when pulling 27112ae462e7337e6dd0b0a48894d430581dee04 on reconbot:error-code into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage increased (+0.005%) to 92.691% when pulling 088e31529327c7928de141e01c4f28d2443eaea9 on reconbot:error-code into 66cd477dbc3c262b4f55d045f161f0de3a2a0b15 on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling dede43b63d23dd7a4f5e42449eb3920202a209cc on greenkeeper-aws-sdk-2.50.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 02f9f42b08427f71d06e3cc5362053a2cc687fbc on greenkeeper-aws-sdk-2.51.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage increased (+0.01%) to 92.697% when pulling 8424a5463cd6d02acb8907e1f3827d0b2ca3411e on SeanHayes:master into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage increased (+0.09%) to 92.777% when pulling 30482f854f4c00615ba6492e8c8b2af27b969fc1 on SeanHayes:master into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 6efd41a030d35698c94104e253751d1bb15712e1 on jmarchello:master into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 5199f539dfb227862c02d4295afa6aab40bc4231 on greenkeeper-aws-sdk-2.52.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 5f5f1beb25c7a9491e80051fc88e964f19c3fca2 on greenkeeper-debug-2.6.7 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 96fa66372e92073c93d6dc94e508083d3004e91e on greenkeeper-aws-sdk-2.53.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 642ef666968573a1298cc365e5d024031ff6f452 on greenkeeper-debug-2.6.8 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 642ef666968573a1298cc365e5d024031ff6f452 on greenkeeper-debug-2.6.8 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 3a8247f3f799d345aaa919548f56f6dac7979ddf on greenkeeper-aws-sdk-2.54.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling e4f46b2b85d08fc826327fb35616cb8f748199bd on greenkeeper-glob-7.1.2 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 66ad6761db6c9a149a73d27a6e8311f9f3160bdf on greenkeeper-async-2.4.1 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling ef723907b5d8042b9eded4c5ff97321f3387336b on greenkeeper-aws-sdk-2.55.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 57d5a1af2c3f7b5ef1e6bea2f7888ba2e38a1141 on greenkeeper-aws-sdk-2.56.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling ef541289803a7f1e731b1727eab0e4a66de1366b on greenkeeper-aws-sdk-2.57.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 04ce63b206e02c4d2640149d7ff1ec4248f4b9d7 on greenkeeper-aws-sdk-2.58.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage decreased (-0.005%) to 92.681% when pulling aa6053c10be6d370ea6da7f7d3d0be61ca970479 on s-taylor:master into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage decreased (-0.005%) to 92.666% when pulling dfa7dde573ac69639cfbaea95f24a9f8ea8c4222 on s-taylor:master into b050c492e34061ff8209a300d32359efc98dbda9 on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 7e8b89394c88f4ea132925307b4c496497454129 on greenkeeper-browserify-14.4.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage increased (+0.02%) to 92.702% when pulling a1095226507f46553f1051aaafbaf27b19554e7f on edorivai:master into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling f4234474de496abb048fd4d0a4b86a6dca938b2d on greenkeeper-aws-sdk-2.59.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling 836d35fd701c184b35b7be429d8a1aed7bbb61a5 on greenkeeper-aws-sdk-2.60.0 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage remained the same at 92.686% when pulling dcd30901456d34552e1ad723700a301804c0a6fd on greenkeeper-chai-4.0.1 into 17d7c25682ea520b0a255e933b64d5c7f355330f on master.\n. \n\nCoverage decreased (-0.6%) to 92.089% when pulling 5db4fa0dfa8237d168f986163a21c3996eaa9f6b on martinkuba:node8 into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage decreased (-0.9%) to 91.823% when pulling aac5c3450cb62cde2a8f5176e014858a885a0fae on martinkuba:node8 into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 314d2dc0202c3870850e93b0bba65f2729acce0e on LarsHassler:fix/issue-533-stripping-newlines into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.671% when pulling 8da91879aba2c5bf89714ec07c5dd48767c8f3a4 on LarsHassler:fix/issue-533-stripping-newlines into e4b095826ce74e11c4579725e0d4f4e5ece9d423 on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling a5d059100f29bb2ce3533ef9415010ab7840d244 on LarsHassler:fix/failing-browserify-test-on-node-7 into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage increased (+0.03%) to 92.712% when pulling 3d3ce3313f0e06f9ba217db05264584da69b0000 on getconversio:support-filteringpath into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling e087b73cf898cafe9087b5609916e8291089abbe on michaelnisi:silent into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling f6581bfe9ca751f1dc81ec8d599a16d8d4332cee on michaelnisi:browserify into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 0e0b4bbe238e04aefd7d715cbe157fac57c8c46b on michaelnisi:browserify into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 3eaded95958443fb720c2f98a98797248d0c1181 on michaelnisi:browserify into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 908eb9f48d50ea7bdab6832b984fe66f33a17ef6 on michaelnisi:browserify into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling cac446da8c7d9780f0de761a2b8316a5d66776a8 on michaelnisi:browserify into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 0c0aaca39b9f668c46645ce6bac21b193828ba64 on michaelnisi:browserify into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage remained the same at 92.686% when pulling 8b27570e80e52d468253f7b1996a5e7849c3a21c on michaelnisi:chmod into 17d7c25682ea520b0a255e933b64d5c7f355330f on node-nock:master.\n. \n\nCoverage increased (+0.6%) to 92.654% when pulling a2f170f6aca0321eb855545e45c958d9252c72c2 on martinkuba:master into 35c76e39ee5a6fa0ef3e8d6fe389287e25975cd5 on node-nock:master.\n. \n\nCoverage remained the same at 92.654% when pulling 8288ece4ac7faaddffec342245b0fd5db997bada on technicallyerik:logging-improvements into 8da9ee0d96dba9e6e6b541196e17d5739918e2b6 on node-nock:master.\n. \n\nCoverage increased (+0.005%) to 92.659% when pulling 690921efb0833a961ac8114b162ea1ea68bf0906 on n30n0v:master into 8da9ee0d96dba9e6e6b541196e17d5739918e2b6 on node-nock:master.\n. \n\nCoverage decreased (-0.8%) to 91.823% when pulling 94e6a7191a420f7e02552f190f8aa31be38bf041 on akaguny:master into 8da9ee0d96dba9e6e6b541196e17d5739918e2b6 on node-nock:master.\n. \n\nCoverage remained the same at 92.654% when pulling 2911c47147f8b84ce7ed4d61442dd35dd736af9a on bcoe:fix-recording into 8da9ee0d96dba9e6e6b541196e17d5739918e2b6 on node-nock:master.\n. \n\nCoverage increased (+0.01%) to 92.664% when pulling 0cd1c26c3440ed4119a6d2ae4ea0294c3d898c61 on gr2m:961/define-ignores-badheaders into 8da9ee0d96dba9e6e6b541196e17d5739918e2b6 on node-nock:master.\n. \n\nCoverage increased (+0.01%) to 92.664% when pulling 0cd1c26c3440ed4119a6d2ae4ea0294c3d898c61 on gr2m:961/define-ignores-badheaders into 8da9ee0d96dba9e6e6b541196e17d5739918e2b6 on node-nock:master.\n. \n\nCoverage remained the same at 92.654% when pulling 958dc8e332a1c4591ad5b7d43608f93a592d205b on gr2m:963/nock.recorder.clear-documentation into 8da9ee0d96dba9e6e6b541196e17d5739918e2b6 on node-nock:master.\n. \n\nCoverage remained the same at 92.664% when pulling 38c12b9da631f86df096a9b066dd9b9bf88cbe61 on chore/remove-console-logs-in-tests into 8c7cf84a42a77ef4066bfd89208357493b9fb59c on master.\n. \n\nCoverage remained the same at 92.664% when pulling 6824cee2c8aa1a3c17f31d7386605375a3cbc74b on chore/travis-dont-build-twice into 2e4554859dc5ee12cdcb9615d925c0294c5f9bba on master.\n. \n\nCoverage remained the same at 92.664% when pulling 90b0d96ba0e8b6520ad7035f382d9fd8c74bb615 on chore/travis-dont-build-twice into 2e4554859dc5ee12cdcb9615d925c0294c5f9bba on master.\n. \n\nCoverage remained the same at 92.664% when pulling 05d4d18893c3dfed6441ef39302af2934eed1881 on 966/fix/headers-with-falsy-values into e2b538c89291c6ddcf79d956053de8b22b56fec9 on master.\n. \n\nCoverage decreased (-0.8%) to 91.834% when pulling 9a16249cae99ddf827c2e16d15a3b7e7b33e1385 on akaguny:docs-readme-fix-info-persist into 978a3f0b45aa6ef2a16757e2df2730e4b67453cd on node-nock:master.\n. \n\nCoverage decreased (-0.8%) to 91.834% when pulling 9a16249cae99ddf827c2e16d15a3b7e7b33e1385 on akaguny:docs-readme-fix-info-persist into 978a3f0b45aa6ef2a16757e2df2730e4b67453cd on node-nock:master.\n. \n\nCoverage remained the same at 92.664% when pulling 9a16249cae99ddf827c2e16d15a3b7e7b33e1385 on akaguny:docs-readme-fix-info-persist into 978a3f0b45aa6ef2a16757e2df2730e4b67453cd on node-nock:master.\n. \n\nCoverage decreased (-0.05%) to 92.616% when pulling f2aff17eac4b70d945ca0808fcecc4e792a8b76b on cmswalker:835-fix into e91168820b6289484059e523cba4fc1c1e2e9948 on node-nock:master.\n. \n\nCoverage increased (+0.02%) to 92.685% when pulling c75557a672d71a9246caae76dceb5fe90ce037ca on cmswalker:835-allowUnmocked-for-regex into e91168820b6289484059e523cba4fc1c1e2e9948 on node-nock:master.\n. \n\nCoverage decreased (-0.06%) to 92.661% when pulling a9c0ca6bca1dc3506d8b3ea0e0718869e7ce973d on fix-logging into cb13cdd13b23973338c6ffb2f8a22c057fa496a1 on master.\n. \n\nCoverage remained the same at 92.686% when pulling 00422a73e24a42b518899d789f501dd238260353 on match-headers-with-falsy-headers-again into 2af1b8854268b390a9084f2b40834cdd272cbdd3 on master.\n. \n\nCoverage remained the same at 92.686% when pulling d7b86971c81212d928037faa2e4795269577ee16 on handle-falsy-header-values into 66cd477dbc3c262b4f55d045f161f0de3a2a0b15 on master.\n. \n\nCoverage remained the same at 92.686% when pulling c77b0bee26befe75ae15ed52ef8fc9a439b51447 on fix-request-header-overrider-from-multiple-inceptors into 66cd477dbc3c262b4f55d045f161f0de3a2a0b15 on master.\n. \n\nCoverage remained the same at 92.666% when pulling dd444661573c850edf527bf6940e866603228595 on travi:matching-log-path into 6d9704da2ebd58d0bad940fe2c5222351242527f on node-nock:master.\n. \n\nCoverage remained the same at 92.666% when pulling 26d29b6f921d6dc51f1288cea861bb1b7abfec0a on serahhh:master into ea2fe9fd88451f0c8be0b0010c6e861fb64f1c57 on node-nock:master.\n. \n\nCoverage increased (+0.005%) to 92.671% when pulling a6264884b0e54f88fc715b728cf0c5066f216045 on serahhh:master into ea2fe9fd88451f0c8be0b0010c6e861fb64f1c57 on node-nock:master.\n. \n\nCoverage remained the same at 92.671% when pulling 51bc4e27854311bea1778b9a57ca619384079e2a on 967/semantic-release into e4b095826ce74e11c4579725e0d4f4e5ece9d423 on master.\n. \n\nCoverage remained the same at 92.671% when pulling 86d5a06f127027fe092441ab38d45ffd9baa5838 on rash805115:master into bd387365ff8e6df731cf5a35cc92560346826ec5 on node-nock:master.\n. \n\nCoverage increased (+0.01%) to 92.681% when pulling 1074a0a242ec9fad7acb51cccfb8726d8e589a39 on halkeye:support-matching-body-with-regex into f22dcc350e99b4ec71a73432874e6d9a2b8fc007 on node-nock:master.\n. ",
    "benurb": "Wow, that was quick. Thank you very much :+1: \n. ",
    "rstacruz": "How will this be done?\n. ",
    "arb": "You can pass a function into reply.\njs\n        .reply(200, function() {\n            return Math.random();\n        })\n. If you put logs in each of the .post() handlers, you'll see that both of them are called. Is there a way to prevent that? I'd like to have the first block validate the payload and if that fails, don't run any of the other matching .post methods.\n. Could you clear the list of possible matches after the first match? You don't want to reply more than once anyway. Looking through the code I notice that you keep a list of possible matches; could you clear that list? Just a broad suggestion; not sure if it's possible.\n. No because if I restore then the interception goes away, I'm using persist() because I want nock running as long as the server is alive.\n. Yea that is what I was trying to do with nock; use it as a standing, dynamic mock server that stays active. Of those two options, B seems like it would give the most flexibility with the least amount of development effort.\n. ",
    "ruiquelhas": "Yes, it works fine, my mistake.\nThanks!\n. It seems to be some problem with the implementation after all. Sorry.\n. ",
    "jfromaniello": "Thanks a lot, awesome module!\n. ",
    "prayerslayer": "Ah, never mind. I figured that I have access to the original URI, so I can just do querystring.parse(uri). Sorry.\n. ",
    "kevinburkeshyp": "thanks for the quick response!\nI guess I am a little confused about how to use path-filtering with nock\nback - there doesn't seem to be any post-capture hook into the response. I\ncould load the file from disk and strip it there, but that seems cumbersome.\n-kevin\nOn Apr 17, 2015, at 01:45, Pedro Teixeira notifications@github.com wrote:\nNock doesn't interpret the query string (yet).\nI suggest that you use path-filtering\nhttps://github.com/pgte/nock#path-filtering to solve this.\nAny issue with that please reopen this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pgte/nock/issues/300#issuecomment-93945222.\n. Hi @kelaban, I am pretty sure I tried this with the latest nock version and didn't see anything like those properties attached to the before function call. I didn't set up a reduced test case, however.\n. On Sun, Apr 19, 2015 at 5:50 PM, Keith Laban notifications@github.com\nwrote:\n\nassuming you're loading a fixture which has already been recorded\n\nThis might be the key assumption. So, if the fixtures are already on disk,\nwe have access to the scope and can strip params etc from them but the keys\nare already visible on disk in the test fixture. We commit these to source\nso Circle, travis etc can run without making third party network requests.\nIf they are not on disk, we load them from over the network and save them\nto disk. During this step, we don't have access to the scope or any of the\nparameters you linked to (this is what I found in my test). So the requests\nget written to disk with all of the sensitive parameters we don't want.\nWe could edit the request files by hand to strip the keys (or write a tool\nthat does this after the files have been serialized, as Adam mentioned),\nbut this is cumbersome and error-prone.\n\nkevin\n. I wrote a project that starts servers for this in Python: http://github.com/kevinburke/hamms\nThe easiest way is simply to connect to a localhost port where nothing is listening. ETIMEDOUT you can generally use 10.255.255.1 and set a timeout, though I guess nock can just throw errors on its own if you want.\n. Thanks!\n. Thanks for everything that you've done @pgte!\n. ",
    "lafave": "Exposing afterRecord would be great. Currently the only way that I know of to whitelist hosts w/ nockBack e.g. \"don't record localhost\" is to open the recording, parse it, delete the localhost recordings, and write it back to disk.\nThe same method could be applied to removing sensitive data, but I'm not sure that there's a way to get the requests to match when using the modified recording:\n\"path\": \"http://example.com:80/resources/1?secret-token=1234\" <-- this should not be committed to version control.\n\"path\": \"http://example.com:80/resources/1?secret-token=REDACTED\" <-- this could be committed to version control, but the paths would then not match when using the recording.\nAre there any examples of path + request body filtering with nockBack?\n. ",
    "holic": ":+1: \n. ",
    "matt-oakes": "This would be extremely helpful to me. I'm testing my server, so the tests are making a request to the express server using the request library and then that makes requests to various services. When using nockback it will also record and playback the HTTP request made to the server I would like to test, which obviously means none of my code is ever actually run.\nThe method described by @kelaban would be enough to filter out the calls to localhost for example.\n. ",
    "amejiarosario": "In my fixture I have something like this:\n\"path\": \"/api/v3/account?timestamp=1513990042776&recvWindow=60000&signature=037025c1fbe97b03112cb31d57c49b9711fa1e6efbe4f7f26257869252b7a9\",\nThe timestamp changes everytime, How do I make it ignore the queries with afterRecord? If I remove them, then would it still match the path even if is partial?\nI did something like this:\n```js\nfunction afterRecord(nockedObjects) {\n  nockedObjects.forEach(nocked => {\n    nocked.path = nocked.path.split('?')[0];\n  });\nreturn nockedObjects;\n}\n```\nand it worked for removing the queries but then I get Error: Nock: No match for request. How do I solve that? It looks like filteringPath could help but not sure how to use it with nockBack\nTried this:\njs\nfunction beforeFunction(scope) {\n  scope.filteringPath = function (path) {\n    console.log(`filtering the path... ${path}`);\n    return path.split('?')[0];\n  };\n}\nand didn't work either, still getting the Error: Nock: No match for request\n  . nevermind, I needed https. ",
    "jdzak": "I copied your code, but ran into the same issue. Here's the stracktrace I got with your example.\n```\nTAP version 13\nrecording\nnot ok 1 TypeError: Cannot assign to read only property '_recording' of http://tablexi.com\n\ntype:    TypeError\nmessage: |\n  Cannot assign to read only property '_recording' of http://tablexi.com\ncode:    ~\nerrno:   ~\nfile:    /Users/tablexi/Downloads/nock-error/node_modules/nock/lib/common.js\nline:    127\ncolumn:  14\nstack:\n  - |\n    /Users/tablexi/Downloads/nock-error/node_modules/nock/lib/recorder.js:196:24\n  - |\n    Object.module.request (/Users/tablexi/Downloads/nock-error/node_modules/nock/lib/common.js:127:14)\n  - |\n    Object.exports.get (http.js:53:21)\n  - |\n    Object.<anonymous> (/Users/tablexi/Downloads/nock-error/spec/wtfSpec.js:31:10)\n  - |\n    Back (/Users/tablexi/Downloads/nock-error/node_modules/nock/lib/back.js:54:12)\n  - |\n    Test.<anonymous> (/Users/tablexi/Downloads/nock-error/spec/wtfSpec.js:30:3)\n  - |\n    Test.emit (events.js:129:20)\n  - |\n    Test.emit (/Users/tablexi/Downloads/nock-error/node_modules/tap/lib/tap-test.js:104:8)\n  - |\n    GlobalHarness.Harness.process (/Users/tablexi/Downloads/nock-error/node_modules/tap/lib/tap-harness.js:87:13)\n  - |\n    process._tickCallback (node.js:355:11)\nthrown:  true\n\n...\n```\n. Here's my example project I'm getting the error with.\nhttps://www.dropbox.com/s/6miualxp7v1o7j0/nock-error.zip?dl=0\n. @pgte Thanks for fixing this so quickly! You're awesome.\n. ",
    "benstokoe": "My bad! Didn't think this would be needed for localhost. Sorry and thanks!\n. ",
    "AlexRRR": "Hi! for scopeFilter you might want to take a look at https://github.com/pgte/nock/blob/e068c448e7d0113cddf82c70cf1c07508a373f11/lib/intercept.js#L162-166 \nBasically you pass a function which if the basePath of the url currently being tested matches the regular expression will be treated as a match.\njavascript\nvar scope = nock('https://api.dropbox.com', {\n    filteringScope: function(scope) {\n      return /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope);\n    }\n  })\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200);\nWould match https://api1.dropbox.com or https://api20.dropbox.com. \n. Seemed to be a scope problem for me. move along, nothing to see here.\nThanks!\n. ",
    "holyjak": "Nice, thank you. I hope the documentation can get extended with the proposed information and the example your provided.\n. ",
    "CacheControl": ":+1: I agree, the filtering documentation is confusing, which is what led me to this issue.  Thanks for the explanation @jakubholynet \n. ",
    "poluyanov": "Thanks!\n. Thanks!\n. ",
    "mpareja": "Great, thanks for the quick fix!\n. ",
    "yeahoffline": "you are right and i was just wrong. \n. ",
    "afeld": "Really? Using nock v2.3.0 on Node v0.10.32.\n. Thanks for verifying! Would you be open to switching to the previously described behavior? Happy to look into implementing it, since I would guess that is the behavior most people would want anyway.\n. ",
    "taylorjdawson": "@AlexRRR How did you solve this?\n. ",
    "RichardLitt": "@taylorjdawson Might be worth opening a new ticket. This one is a bit old.. The current one seems to work. \ud83d\udc4d . I think having a test case for this would be helpful, if you're still interested in solving this problem. Most likely we will simply need a couple of tests to make the issue clearer. . I'd be happy to look at a PR for this. :) . @sunil-lulla: can you send an email to me about helping out with triaging? :) Getting help here sounds awesome. . Thanks for logging, @xonev. Are you still having this issue? . Thanks. I couldn't it figure it out, either. In the interest of keeping our issues count low, I am going to close this. Anyone who wants to help; feel free!. I'm pretty sure that this is resolved. Let us know if it isn't. Thanks!. @n30n0v Could you rebase? . I think this could probably stay open! It's not too far off from being merged. . I believe this should work the same way as any other request. Just send in the url. For example: Nock('ldap://ds.example.com/'). Note: you will need the final slash, otherwise url.parse() has an issue without a pathname.. @lukas-gitl Thanks for logging this, and I'm sorry that no one has been able to get to it yet. Is this still an issue for you? . I can't think of any salient reasons why this couldn't be a feature. If you'd like to make a PR, we'd happily look at it. . @evansiroky Were you able to resolve this issue?. @purezen Would you be interested in touching this PR up, so that it can get reviewed again and hopefully merged? . Thanks, @maheshjag :). Thanks, @ioanlucut. Sorry for the lack of feedback on this!. I don't think this is necessary; it is already in the public api. See line 11:\njs\nmodule.exports.restore = recorder.restore;\nI'm going to close this for now. Sorry for not getting to this sooner, @barczaG!. @Chengxuan Well articulated! I think an example would be great. We're sorry about how this inconvenienced you. . Ah, sweet. Closing this. . @motevets Hey Tom; are you still interested in this PR? @vrinek asked some relevant questions that haven't been answered yet. :) . I'm going to close this as stale. @motevets If you'd like to add to this in the future, feel free! Same for anyone else. . @bcallaars Did you get the chance to investigate further? :) . Thanks, @gajus.. @gkatsanos Should have been! v9.1.7 got it. https://github.com/nock/nock/releases/tag/v9.1.7. Thanks, @tconroy. Feel free to log more issues!. We'd rather solve the issues, but we're only so many hands. :D Feel free to reopen if you think we can fix this one!. Actually, this PR looks pretty good to me, as is. @jmnsf With hindsight, what do you think about it?. Thanks, @Overdrivr. No worries. :) . @Overdrivr Any chance you've had some time for this? :) . I'll pin it. If you have time, it'd be great to see this merged in. :) . I'm working on tests/test_intercept.js#L2684 now. . @hisabimbola It looks like we haven't reviewed this again. I'm reopening it. . @gr2m I think this is ready; what do you think? . This looks fine to me! @gr2m Any time to check this again? . Closed with #1186. . @gr2m Any word on those updates? Can I help? . @gr2m Fine merging given the changes you requested above. :) . @monkeywithacupcake Let us know if you need help! :) . Thanks, @monkeywithacupcake. Can you also perform the edits requested to the package.json? :) . This looks good to me! Thank you :) . Sorry! Yeah, I rebased, fixed the TOC, and merged. :) https://github.com/nock/nock/commit/cc3a5398624da1ba4c87f6b833160010199b73a5. @mbad0la He'll probably get to this when he can - 20 days isn't that long in open source! I'm pretty sure that @gr2m does this in his spare time, which he may or may not have a lot of these days. :) . Wouldn't you simply specify the header in the reply in your nock call in the test? \nnock('http://localhost:3001', {\n      reqheaders: {\n        'x-access-token': 'authtoken'\n      }\n    })\n      .post('/api/manageUsers')\n      .reply(200, { name: 'prakash' }, {'x-access-token': 'authtoken'});\nI might be missing something here. \n. \\o/ Thanks, @gr2m!. Great comments, thanks. Some things to do:\n\n[ ] Set up multiple issue templates (I agree with you on the types).\n[ ] Plan a one-time sweep of all of the issues, followed by stalebot. We probably don't need waiting-on-contributor if we use stalebot, but I still think it's a good explicit signal to both the maintainers and the users.\n[x] Add richard@maintainer.io to the CoC. I'm happy to be the other person. \n[ ] Think about planning a website or a doc overhaul. We may not need one. . Added to the other PR. . Once the PR is merged, I'll go back through and make sure that we've covered everything discussed here and open relevant issues for them. . Cool. How do you want us to capture new things we can do for the community? Should we add more - [ ]s to this thread, or should we open issues, or start a project? I think the last makes the most sense. \n\nInvesting money to facilitate contributions makes the most sense for me, too. \nLet's add a section welcoming new maintainers, then. We can simply say that there isn't a process at the moment. I added a section for this; what do you think? \nNot having a chat makes sense to me! 100. \nI also think that locked updates make sense. I'll note that! Thanks! (Want to make a PR to the audit list? :)). I've opened a Project, here: https://github.com/nock/nock/projects/3\nFor now, I think we can close this! What do you think, @gr2m?. Thanks, @gr2m!. Updated all three files. Good catches!. @jlilja I've invited you as a member of the organization. Let's get you set up so you can use GitHub's editor to work on these. :) Let me know if this doesn't work, or if you need help with anything. . We've done this now! Thanks, @gr2m and @jlilja! \ud83d\udc83 . We don't know. I hope the bet wasn't for that much money. :) . I agree with both of you. I've output the results into an AUTHORS.md file, and removed the Contributors field, which is outdated and which doesn't give attribution to people who've helped out on GitHub but who may not have contributed code. I think this is a much more elegant solution. \nOne thing I would suggest, before merging, would be to put the instructions for updating the Authors file somewhere for the future. What do you think? . At the moment, no. That would be a good GitHub app to build, though. It would have to cache results and should do it once a month or so, as opposed to each time. This list comes from everyone who has every commented, reviewed code, opened an issue, or opened a PR, as well as committed. . I've added a note, and would be happy to make another issue. I've also ignored it from npm and renamed the file to CONTRIBUTORS.md. Look good? :) . Those are very good points, @gr2m, thank you. \nI started this PR and this general course of action because the list of contributors in the package.json was out-of-date. While it's easy for me to justify including everyone as the best solution, in truth I didn't realize how big the contributors list was going to be. Having gone through this process, I'm not sure that keeping a contributor's list makes sense for this repository, given the size of the list. However, I think it is the right thing to do. (I'll get to why in a bit.)\nOne easy solution to resolve the issue that precipitated this work would be to simply remove contributors in the npm manifest, as it is out-of-date and no longer representative of the contributors in this repository. Another would be to only count authors of commits. You can do this very easily with git authors. There may be some edge cases that aren't counted, but overall this is the easiest way to get some form of a contributors list, and it takes almost no effort.\nSuperficially, Name Your Contributors works best when you want to inflate metrics regarding the size of your community for marketing purposes, because it counts interactions that GitHub doesn't. It also can work when you want to raise up people who post comments and review PRs, but aren't very active in terms of submitting code themselves, by naming them and including them in the project. This can be useful for new projects who are keen to foster a sense of inclusion and community, at the cost of lowering the barrier of entry for being a 'contributor' and thus possibly diluting the term for cynics (for lack of a better word) who have more conservative definitions of that term.  There is certainly a trade off - do we include everyone, or no one? Or somewhere in between? \nAn automatic approach can remove some effort by making it easier to grab all of the contributors who fall into certain categories. But it does remove the sense of contributors being curated, hand-picked, and special. So, is it worth automating? That's a good question.\nI find this to be a really interesting discussion to have. I've been blunt above, because my focus in this PR has been sidestepping these issues, and I think it's suffered for that. Instead of merging immediately, I think we should step back and ask harder questions. \nHow do we, as a project, thank people who contribute? Does a file of contributors names make sense? Do people feel need this list to feel like they're part of the project's history, or do they have that sense, anyway? Does the list cost more in maintainer efforts than it gives back to the people on it? I don't know the answer to these questions. \nHowever, I think it is important to thank people, and I think this file is a step towards that. I would personally include it. \nA recent NY Times article pointed me to this new research, which says that people undervalue how appreciative people are for being thanked. While a bot (or GitHub App) may remove some of the feeling of appreciate, it's still set up by the maintainers of the repo, which shows that at some point, someone thought to go out of their way to thank members of the community. I think that this is worth doing.\nIn this PR, I've suggested casting a wide net and thanking everyone by building this file. I think the PR could be improved by adding these lines in the file:\n\nThis list has been generated to thank everyone here for their contribution. Nock wouldn't be what it is without the individuals who've given their time to it. In alphabetical order, here is a list of people who the maintainers think are worthy of being thanked publicly and permanently here.\n\nThat makes it clear that it's not just a random file, but part of a wider, systemic approach towards being grateful to community members for their work.\nI don't think the effort of automating the list, or the size of the file, or the fact that it is automated are detractors enough to not go through with this effort. @gr2m, you also mention you're not sure it catches all contributions - what other types do you want to get? \nUltimately, you and the other maintainers may think more specific categories are called for when defining 'contributors', or you may want a hand-curated list. I can see where you're coming from. Is that what you want? \n. I've added the paragraph I suggest to the Contributors file. What do you think? . Can we open another issue to automate it? For now, I think that that concern is holding up this PR. This PR is an improvement on the old information in the package.json, so I think it should stand on its own merits, not just how it will be six months from now.\nMake sense?. Thanks, @jlilja! I had come to the same conclusion. \nI think that converting to request-promise would be a good issue. Would you like to open that one? . Yep! Thanks again, @jlilja.. This is likely because npm reset their tokens yesterday due to a possible virus grabbing them through an eslint dep. \nWho owns the tokens? @gr2m? . Great start! Some mainly small things. :) . Some small comments!. One last thing, sorry! Can you remove the .DS_Store file? :) . \ud83c\udf89 Thanks, @jlilja! Excited to have this in here.. Thanks, @jlilja! Looks good to me. . That looks like the desired behaviour to me. It may just be that you need to send a body, or it will default to 200. Is this an inconvenience?\nThis is set in lib/interceptor.js:\njs\nInterceptor.prototype.reply = function reply(statusCode, body, rawHeaders) {\n    if (arguments.length <= 2 && _.isFunction(statusCode)) {\n        body = statusCode;\n        statusCode = 200;\n    }\n    .... Ok. Someone needs to take a look at the interceptor logic, then. I am at a loss as to how to do this easily. \nFor now, pass in an empty body in a string. . @rochdev Any progress on checking this? :) . LGTM. Let's wait for @gr2m's next review. :) . This looks good to me, too! I think we're ready to go. Merging. :) . Thank you, @timrogers! Great addition. . I believe there is. See the lib/scope.js file:\n```js\nScope.prototype.isDone = function isDone() {\n  // if nock is turned off, it always says it's done\n  if (! globalIntercept.isOn()) { return true; }\nreturn this.pendingMocks().length === 0;\n};\nScope.prototype.done = function done() {\n  assert.ok(this.isDone(), \"Mocks not yet satisfied:\\n\" + this.pendingMocks().join(\"\\n\"));\n};\n```\nWould that work for you? . Thanks @bloof-bb! This looks good to me, but I don't know the particulars of whether or not this feature is necessary or would be helpful, or how to judge beyond that the tests pass and it seems to make sense. . Move nock.enableNetConnect(); below the nockBack fixtures and setMode lines. Then it should work. There's also no need for multiple enableNetConnect - the first is permissive of all netConnects, and the second just limits it, so just go with one or the other. \nLet me know if this works for you! . Yes. It looks like the docs don't actually make it clear that 'enableNetConnect' is only the default for two of the available modes. \n```js\nvar Modes = {\nwild: wild, //all requests go out to the internet, dont replay anything, doesnt record anything\ndryrun: dryrun, //use recorded nocks, allow http calls, doesnt record anything, useful for writing new tests (default)\nrecord: record, //use recorded nocks, record new nocks\nlockdown: lockdown, //use recorded nocks, disables all http calls even when not nocked, doesnt record\n};\n```\nSo, on record and lockdown, you need to explicitly state the http calls you want enabled. For the other two, they will go through. \nWant to take a look at #1200 and see if it looks good to you? If so, I think it would be great if you could add a PR to that section specifying that 'enableNetConnect' only works for two of the modes by default. That way, this issue shouldn't happen again for the next person. What do you think? . @gr2m Couldn't this have been merged?. Yep: #804 was related to that, and v9.1.7. I think that this may be a bug that we didn't catch with that fix? . Do you send the headers in the same request? If so, than I am not sure that that is valid. I don't know if headers are case sensitive in the official spec, but I suspect that they aren't as we lowercase everything. In this case, you're sending multiple headers, which isn't ideal.\nHowever, if you're sending them in different requests, than nock shouldn't throw an error. It looks like we're not flushing the array in headersFieldNamesToLowerCase between requests. \nTry it on 9.1.6? :) \nWe are looking for more maintainers, of course. The more the merrier. . @gkatsanos Want to try that? If it works, than we can open a PR and patch it. . Behaviour is valid, it's just British English. :) . Silly mistakes were made. Thanks. :) . Isn't logging a comment? What would you prefer I call it, instead? fix? . Fair point. Thanks!. Thanks, @gr2m!. Early morning Pacific time works for me. In the interest of moving this forward: How about this Thursday, at 9am PST?. That works for me. :) @jlilja Work for you?. In that case, let's go with that!\nVideo Conferencing Links\nFriday, 9/14: 10:00am PST, 1:00pm EDT \nRichard Littauer is inviting you to a scheduled Zoom meeting. \nJoin from PC, Mac, Linux, iOS or Android: https://zoom.us/j/339824625\nOr iPhone one-tap :\n    US: +19294362866,,339824625#  or +16699006833,,339824625# \nOr Telephone:\n    Dial(for higher quality, dial a number based on your current location): \n        US: +1 929 436 2866  or +1 669 900 6833 \n    Meeting ID: 339 824 625\n    International numbers available: https://zoom.us/u/eyMHS42Qj\n. Ah, this was great. Thanks for joining, @jlilja and @gr2m!\nNock Office Hours Notes - September 14, 2018\nWelcome to the first nock/nock office hours.\nParticipants\n\n@RichardLitt\n@gr2m\n@jonaslilja\n\nAgenda\n\nhi :)\nstale & lock app\nSorry about all of the notifications, all.\nThis should make life easier in the future.\n\n\ntest setup\nTake a look at https://github.com/nock/nock/pull/1209, currently blocked for @jonaslilja\nSee Airplane mode issue https://github.com/nock/nock/issues/1077\nMore tests => easier to contribute => more people\n\n\ndrop node 4 support\nWhy don't we just do this now?\n\n\nNext?\n\nActional Items\n\n[x] @gr2m: Drop node 4 in tests, release a new breaking version. Add call for contributors in release notes :D\n[ ] @gr2m: Find out what\u2019s wrong with tests in https://github.com/nock/nock/pull/1209/files\n[ ] @RichardLitt: Add milestone for tests\n[ ] @RichardLitt: Figure out the test coverage (currently: \"Coverage unknown\")\n[ ] @gr2m: write down what we are currently doing and why\n[x] @RichardLitt: Build a welcome repo! \\o/. It's been almost a month. How do we feel about having another hour, soon? :) . I'm traveling at the moment, so it's pretty hard to tell when I am free. But if someone suggests a day, I can figure out when would be a good time from there. Currently, planning on being in Thailand until the 15th, and then largely AFK until the 22nd, when I'll be in Berlin and London. . I'll be getting ready to get on a plane then! Perhaps a couple of days later, on the 26th? . That should work for me. :) . I won't be able to make it today. :( I've come down with a fever. Have fun, ya'll. . I believe we both missed it. 8am PST, 11am EST (which I missed). \n\nIt's possible that the whole office hour idea is not working because there's no agenda, as opposed to because of trivial scheduling issues. What do you think? Should we rethink having these? . Sounds good to me! December 7th works for me. We could potentially do it all afternoon, as well, instead of just a couple of hours - it would be great to do a mini-hackathon for getting the test suite working, in particular. . We're doing something similar with the #1268 open source fridays maintainathon calls. I am going to close this as being superseded by that initiative. . Well, this looks great to me. Thanks, @StarpTech! \nAny other maintainers: look good? . Thanks for logging, @deepaktiwari-1987. Did you see the issue template? It would be great if you could fill it out, and ideally if you could add a code example we could like at, like this one linked in the template. Reading the code above is pretty difficult. \nThank you!. Woo! Well done, @jlilja!. @gr2m Could we have it post in the same thread? . @gr2m I am OK with that. . Looks good to me. Let's go with it! Installed. . Thanks, @gr2m.. @gr2m ahaha. I figured it was fine. :) . This still shows Unknown - I think because the Coveralls is drawing from the coverage-setup branch and not the master branch. I spent 15 minutes and still have no idea how to switch this. I also wasn't able to upload the coveralls via the npm script:\n```\n11:05 ~/src/nock (coverage-setup) * \ud83d\udc15  npm run coverage:upload\n\nnock@0.0.0-development coverage:upload /Users/richard/src/nock\ntap --coverage-report=text-lcov | coveralls\n\n/Users/richard/src/nock/node_modules/coveralls/bin/coveralls.js:18\n        throw err;\n        ^\nBad response: 500 {\"message\":\"Build processing error.\",\"error\":true,\"url\":\"\"}\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! nock@0.0.0-development coverage:upload: tap --coverage-report=text-lcov | coveralls\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the nock@0.0.0-development coverage:upload script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/richard/.npm/_logs/2018-11-07T16_05_36_486Z-debug.log\n```\nAny ideas? . Yeah! Good work, Gregor!. Thanks, @gr2m :) . Looks good to me! Thanks @gr2m.. What does data return, instead of the array? . I don't think that this was intentional. \nI think the best thing to do at this point would be to start a PR with tests for this, and then we can implement your suggested fix and see if that solves the problem. What do you think about that? Would you like to help? . I think your fix makes sense to me. I'd welcome a PR for that. \ud83d\udc4d . I think the best thing to do is probably to add tests! That'll help make it really clear what is going on here. \n\nthere does not seem to be a mechanism to correctly preserve that\n\nMight this be a point where an option would help? \nI would open a PR adding tests to describe what you want and what you think is failing. Then, we can clearly see how to fix the bug at the same time, and we've improved nock. What do you think? . Agreed! @ctstone Any chance you want to help log those comments, so that we know where you took the example from? . Thanks, @sindresorhus. I'll reopen the old issue and pin it. . This was great! Thanks @hapr05!. Looks OK to me. :) . Sounds like a guaranteed bug, then. A fix for this in a PR would be great. :) . @lucaslago Go for it! I'm here if you need help, or on Gitter as @RichardLitt. . @lihail Let me know if you need help! . I would update every month. This isn't related to the code, and every week is a bit noisy. \nOooh, glitch. I still haven't played with that. Would be a cool solution. . @lihail How are you getting on? Need any help? . Yeah, I think it might be more useful. Let's do it! Want me to set it up? \nR . I've been working with @Berkmann18 on this. See https://github.com/all-contributors/all-contributors/issues/18#issuecomment-463686608. He's now a maintainer for name-your-contributors, too. :) . Looks like we can close this? . Thanks for following up. :) . Thanks!. Thanks. :) . Good catch! Nice. . This is great! Thank you, @vwxyutarooo. :) . I think that sounds like a pretty clear bug to fix. A PR would be great for this, especially with some accompanying tests. . Woo! Thanks, @ecdemis123!. ## Hackathon Friday, January 14, 1200-1700 local time\n\ud83d\udc4b Hey there! We're hosting an extended office hours and hackathon this Friday, to get us to complete code coverage and to fix all of the tests. \n@gr2m has written up a great post about Nock's roadmap, here: https://medium.com/nodenock/the-nock-roadmap-where-we-are-and-where-we-are-going-8844df218649\nAnd I wrote a post about the hackathon and why we're doing it, here: https://medium.com/nodenock/maintain-athon-for-nock-3a2a0fe982a9\nIt'll be hosted on a Zoom call, at: https://zoom.us/j/189618072\nAnd we created a gitter chat: https://gitter.im/nock/Lobby\nOne tap mobile\n+16699006833,,189618072# US (San Jose)\n+19294362866,,189618072# US\nDial by your location\n        +1 669 900 6833 US (San Jose)\n        +1 929 436 2866 US\nMeeting ID: 189 618 072\nFind your local number: https://zoom.us/u/aNfJ6uiHa\nHope to see you here!. Update! So, we have finished the old hackathon above. Now, it's time for a new one. This Friday. \nRegister interest, if you like, in this thread!\nFriday January 18, 12-1600 Local time\nDescription:Richard Littauer is inviting you to a scheduled Zoom meeting.\nJoin Zoom Meeting\nhttps://zoom.us/j/714137753\nOne tap mobile\n+19294362866,,714137753# US\n+16699006833,,714137753# US (San Jose)\nDial by your location\n        +1 929 436 2866 US\n        +1 669 900 6833 US (San Jose)\nMeeting ID: 714 137 753\nFind your local number: https://zoom.us/u/ajD2UbUkq\nAnd we created a Gitter chat: https://gitter.im/nock/Lobby\nAn Update from Last Time\nWe have a post about how the last one went here. Text below:\nWe're super excited to tell you about our first Nock Maintainathon. Also, this post announces our next one, as part of #OpenSourceFriday, this Friday the 18th from noon to four, where we'll focus on improving our code coverage. Keep reading for details\n\nKeep reading!\nThe First Maintainathon\nLast month, Gregor and I tried a new tack to rejuvenate and improve Nock. We wrote about a one-day maintainathon for Nock, and outlined the future roadmap for the project. The idea was simple. We'd had little luck with ad-hoc maintenance, but constantly found ourselves reacting to bugs instead of working on the core parts of the code. So, we set aside time to work instead on an issue that needed to be resolved to help the entire project in the long run. We publicly announced that we were going to do it on Friday the 14th, and talked about it widely on Twitter and here. We figured we couldn't code in the same room, but we could code at the same general times.\nSo, what happened?\nWe've significantly improved our test suite. Issue #1077, which required us to remove dependencies on external sites in our test suite, had been haunting us for almost a year. It is now this close to being closed. (All that we need is to update our documentation). Dozens of issues were closed, dozens of PRs were merged, and we added a grand total of 42 commits (check out our weekly update).\nWe now have more active maintainers. All of this was made possible by two other people joining us: Paul Melnikow of Shields.io and Jonas Lilja. (Thank you! So much!) These two stepped up on that Friday to help us out, joining on the video calls and in some cases pair programming to sort out tough uses cases. Paul, in particular, has been exceptional, making sure that we move forward over the holidays as well. Both Paul and Jonas were already maintainers for Nock, but the maintain-athon served to bring them out of the background and to focus on how to improve.\nNock, as a whole, is moving forward. For the first time in months, it feels like the project itself has momentum, instead of just comments saying \"PRs would be great!\" We couldn't be happier.\nGoing forward, we're thinking of making the office hours-type collaboration regular. Once a month, we'll advertise a day to work on Nock. During that day, we'll turn on a Zoom channel and a Gitter for Nock, and aim to fix one non-superficial issue.\nThe next Maintainathon: Friday, January 18th, 12\u20131600.\nThe next day is this Friday, January 18th. Again, we'll have a staggered approach; come on in your time zone, from 12:00 noon until 4:00. We'll have zoom channel ready. You can track the Maintainathon in this issue.\nPaul, Gregor, and Jonas have already gone through the codebase and added some TODOs for people to grab during the hours, and hopefully start submitting PRS. Our goal: to improve our Code Coverage, so that we can trust our tests more. The point of this is to make Nock much easier to hack on in the future; right now, it can be a bit of a mess. The more we can trust our tests, the more we can refactor, rework, and improve.\nIf you're new to Nock, this is a great time to get involved. Join us!\nSubscribe to updates here! And register interest, if you like, in this thread!. Hey all!\nThe last Maintainathon went really well, so we're going to have another one. The date is February 22nd, from 12 noon to 4pm EST. All of the same details as above apply. \nOur goal is to finish up code coverage.\nJoin the Zoom Meeting at https://zoom.us/j/630625573.\nOne tap mobile +19294362866,,630625573# US +16699006833,,630625573# US (San Jose) Dial by your location +1 929 436 2866 US +1 669 900 6833 US (San Jose) Meeting ID: 630 625 573 Find your local number: https://zoom.us/u/aojq9kAot\nThrow it in your calendars, tell your friends, see you then!. @gurpreetatwal Sweet! Looking forward to it. I might be off, but I think that @gr2m should be on around then. . Thanks! Confirmed solved issue for me. \nCloses #1271.. Thanks @paulmelnikow.. Thanks, @gr2m :) . What a good week. :) . #1299 was merged, and this is still red. Any ideas, @paulmelnikow?. Ah, should have refreshed page. Nevermind!. Ava has always treated me well. I do wish it was easier to get individual tests working - I feel it's a bit hard, at the moment. let's do it. . Bizarre. Thanks for logging, @arvydaszenitech,. Announced! See #1268. :) . I'll be AFK then; perhaps a time early next week? . Hmm. Perhaps Saturday at 10am PST would work for you? I can see if I can phone in. . I've scheduled a Zoom meeting for ya'll. Details:\nJoin Zoom Meeting https://zoom.us/j/468734613\nOne tap mobile +19294362866,,468734613# US +16699006833,,468734613# US (San Jose) Dial by your location +1 929 436 2866 US +1 669 900 6833 US (San Jose) Meeting ID: 468 734 613 Find your local number: https://zoom.us/u/aMUEFGB9G. I posted a Medium post about last time, and this Friday. :) \nhttps://medium.com/nodenock/the-nock-maintainathon-success-f0f5ae07457a. Ok. I'll update the CTA. I also posted the article in that issue. :) . I'm scheduled to be on for the same time! See you soon. :) . Heh! We wanted to make it work for any time zone, so that people don't feel the need to be on at weird hours; hence setting it for 12-4, local time. It does mean you're likely to be alone, though. :/ Might be worth reconsidering this.\nI'll be on from 12-4:00 EST today. . Nice. I got the one in libRecorder.. What branch do I submit a PR to? . Looks right to me. . Thank you, @weekly-digest bot. . Done. @toc-bot still adding an empty commit, though. . Thanks, @gr2m!. Thank you so much, @paulmelnikow! I'll grab a couple. Perhaps we should schedule another open source friday hackathon, too? . Posted a note about it, and scheduled it for next week with a Zoom meeting. See you then! . Done!. Code which was removed and added looks fine. Don't have the time at the moment to run over the tests, but if they pass, I am happy. :) . Should this go above license, maybe?\nAlso, I can't be the only one here. Add yourself! . Backers was good, too. . Looks fine to me! There's an issue with the \"Become a sponsor\" link, and we still need the backers to be put back in, but otherwise, good!\nWe also need to work harder at enabling more minorities in tech in this organization. Most of us look the same! Not ideal. . > I\u2019ve listed all current backers in the list of contributors with the \ud83d\udcb5 emoji. Are you sure we need to display financial contributors more prominently than any other kind of contributors?\nThis works for me! \nAsking sounds good to me. Should I put a tweet out, or should @nodenock?. Fixed. Sorry. . I just forgot to run it again. Ah. Committed. . Thanks!. Please provide a link to the issue.. Decapitalize Would. Add question marks? They help readability. . There's only one resource here. Maybe we can make this template a bit leaner, and point them to the feature and bug templates, too? . Add periods.. Say thanks at the end! :D . Changed! Good suggestions. . I'm happy with this pattern. . Can you clarify what calling optionally(false) does instead of what it doesn't do? This phrasing is confusing. . Looks fine to me. . ... If the test case.... if you have a feature request. Capitalize PR. Depcapitalize 'Any'. Was this intentional?. @jlilja Any time to work on this? :) . We should be! :) . Well, it wasn't when this PR was started. \ud83d\ude06 . ",
    "ssbrewster": "thanks @pgte I will try this out and let you know how I get on\n. All good see here http://stackoverflow.com/a/31293297/1230663\n. @pgte thanks for such an amazing project. Has anyone stepped forward to review pull requests (I'm working on #469 and hopefully someone will be around to review it when it is done)?\n. @purezen I thought about replacing statusCode with an options object so that you can pass in more than just the status code and message but i think that would be optimising for something that hasn't been asked for so instead i'm working through where status code is referenced and adding the functionality to include an object that can include status code and message. You also need to ensure that users can still just pass the status code i.e. not wrapped in {}. Plus make sure tests are updated and added, and update the readme.\n. @ericsaboia the feature request is about being able to set a status message with the status code as opposed to putting the status message in the body of the response. So your response looks more like:\njavascript\n{\n  statusCode: 200,\n  statusMessage: 'OK',\n  body: {\n    statusText: 'all ok'\n  }\n}\nMeaning, following your example, you would nock something like:\njavascript\nnock(url)\n   .post(path, data)\n   .reply({statusCode: 200, statusMessage: 'OK'}, { statusText: 'all ok' });\nBut my view is that you should still be able to pass in just the status code (like in your example) OR an object that includes status code and message so any changes should take this into account.\n@purezen although i have an idea about how i would implement this i haven't had the time to dig into the code to understand it well enough (and sorry for being so slow to respond).\n. It can be set with the response \"Optionally one can give a human-readable statusMessage as the second argument\" \nIt can also be set directly. \nI'm just not sure that nock caters for this (i don't know the code). Looking at the node and nock docs you might try:\njavascript\nvar scope = nock('http://www.headdy.com')\n   .get('/')\n   .reply(200, 'Hello World!', {\n     'statusMessage': 'OK';\n     }\n});\nI'll try this out but not sure how this will be parsed when to write in node you do:\njavascript\nresponse.writeHead(200, 'OK', {\n  'Content-Length': Buffer.byteLength(body),\n  'Content-Type': 'text/plain' });\n. @purezen is the client calling the API either displaying that statusMessage or running some business logic based on it i.e. if statusMessage === x do y? If that is the case you should either put that text in the body or create separate endpoints for each operation and the client can just react to a success status code for that operation (therefore any messages displayed to the user are handled by the client). Well that's my opinion anyway - it comes down to a design choice. \n. I can see a use case for including this for users who have access to a poorly designed API but no control over improving it - but I don't hold this opinion strongly because you might be able adjust your business logic to not act on the status message.\n. ",
    "LAD500": "Node is v0.10.26\nLooking at Nock's package.json the version is 2.3.0\nOn 8 June 2015 at 08:47, Pedro Teixeira notifications@github.com wrote:\n\nA similar example of this is working for me against latest master.\n@LAD500 https://github.com/LAD500 What version of node and nock are you\nusing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pgte/nock/issues/328#issuecomment-109894392.\n. Thanks Pedro,\n\nUnfortunately I still get the same result. var body is never populated as\nthe data event never fires\nOn 8 June 2015 at 11:38, Pedro Teixeira notifications@github.com wrote:\n\n@LAD500 https://github.com/LAD500 please replace the first line with\nrequire('nock');\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pgte/nock/issues/328#issuecomment-109945707.\n. Thanks Pedro,\n\nWill shift up to the new version\n\nOn 9 Jun 2015, at 13:14, Pedro Teixeira notifications@github.com wrote:\nFixed landed on v2.4.1.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "dkenzox": "Sure,\nnode v0.12.3\nnock v2.4.0\nNote\nJust updated to v2.4.1 and it looks like it is fixed now, maybe this e42028ed82eac582fc73a7cc7c6401a9fdbf51b0 fixed it? \n. ",
    "rashthedude": "Very good call. I was dealing with similar issues and all is working fine since the upgrade to 2.4.1.\n. ",
    "JemiloII": "only thing i could think of, is to load recording.json's scope, path, and body attributes. then check against those. when a new one needs inserting, do a last 2 line delete in recording.json file and insert. Only thing I'm weary of is if someone has 100s of nocks to be read from the file.\n. Just use the property logging and create your own from there. It's what I do. It gives you a complete nockDef for every request when you record. Very useful. Also when you combine the nockDefs or even just a single nockDef, you must create an array to use nock.define().\n. interesting, I don't see any fixtures getting recorded on my end. I had to make my own using the logging function. kind of wish there was a sugar syntax of raw or raw_output for logging since it just sends us the nockDef it recorded.\ncurrently I save my nocks as separate files and call them later, creating a nockDefs array, and using nock.define(nockDefs)\n. what do you mean? for the generated nock code or the generated json?\n. Actually going to close this as most of the nocks are actually working as expected. I have a couple not working, and I'm not quite sure why.\n. {\n    \"scope\": \"http://example.com:8081\",\n    \"method\": \"POST\",\n    \"path\": \"/some/path?with=some&query=params\",\n    \"body\": \"\",\n    \"status\": 200,\n    \"response\": [{\"some\": \"json\"}, {\"array\": \"data\"}],\n    \"headers\": {\n        \"server\": \"Apache-Coyote/1.1\",\n        \"content-type\": \"application/json\",\n        \"transfer-encoding\": \"chunked\",\n        \"date\": \"Fri, 05 Feb 2016 20:05:42 GMT\"\n    },\n    \"reqheaders\": {\n        \"host\": \"example.com:8081\",\n        \"accept\": \"application/json\",\n        \"content-length\": 0\n    }\n}\nhere is an example\n. I've narrowed the error down. By removing the reqheaders content-length, I can successfully have my nocks work. So now I have to add an extra step to remove content-length. When using nock.define().\nAlthough this is a solution, it isn't the desired solution. The desired solution is to have nock match the content-length that is used in the nockDef.\n. So I narrowed it down. If you have reqHeaders with a post request, either in the nockDef or in the options, it will fail. Glad I found this, kinda a bummer if you want to have request headers matching with post request.\nother notes: \nnockback is nice when you know what route to record, but I enjoy nock.record.rec using the logging option to record because I can get the reqHeaders.\n. I might have to update this again, need to run some more test, but I think that nock isn't properly doing reqHeaders matches on the post request.\n. +1\n. did you solve this?\n. awesome, request-promise looks like a cool module too.\n. ",
    "matiassingers": "@pgte thanks for your quick response! Yeah I though the checking of private properties looked wrong as well, I'll close this issue and continue it on the Osmosis repo.\nThanks!\n. ",
    "wallacyyy": "I'm having the same problem right now. Did you figured something out @black-perl ?\n. ",
    "darxtrix": "Yeah, you can close this one. Sorry, i looked at it too late :) If there would be something else I will notify here.\nThanks !\n. ",
    "donbitto": "node : 0.12.0\nnock : 2.6.0\naccount-spec.js\n```\nvar account = require ('./account.js');\nvar options = {\n    hostname:'test-api',\n    port:'8000',\n    headers:{\n        'Content-Type' : 'application/json' \n    } \n};\n// using jasmine to test\ndescribe('Create new account',function(){\n    it('Should send PUT request to API',function(done){\n        nock('http://test-api:8000/v1/accounts')\n        .put('/12345890')\n        .reply()\n        .log(console.log);\n        account.save('12345890',{\"data\":{\"name\":\"account test request\"}},function(res,err){\n            expect(res).toEqual(\"account created\"); \n            done(); \n        }); \n    }); \n}); \n```\naccount.js\nvar exports = module.exports = {};\nvar http = require('http');\nexports.save = function(account_id,accountOBJ,callback){\n    options.path='/v1/accounts/'+account_id;\n    options.method = 'PUT'; \n    var body = accountOBJ;  \n    var resObj=\"\";\n    var req = http.request(options, function(res){ \n        res.on('data', function(chunk){\n            resObj+=chunk; \n        }); \n        res.on('end', function () { \n            callback.call(null,\"account created\");\n        }); \n    }); \n    req.on('error', function(e) {\n        console.log('problem with request: ' + e.message);\n    }); \n    req.write(JSON.stringify(body)); \n    req.end(); \n};\n. hello,\nthanks for the rapid response. \nI replicated the scenario with the code that i sent to you, and it worked fine.\nthe problem is my spec file.. i'm adding a TAP reporter to my jasmine env\nif i remove these lines everything runs ok\njasmine.getEnv().addReporter(new TAPReporter(console.log)); \njasmine.getEnv().execute();\n. ",
    "malcolmrebughini": "@lambertsteven @pgte I think there is a small error with this. If the request to the url has no query string parameters it does not get mocked. For example:\nnock('http://google.com')\n  .get('/')\n  .query(true)\n  .reply(200);\nA request to http://google.com (without parameters)  will throw an error.\n. ",
    "ghost": "I guess that's true. I made it so if you used query() you had to pass a query string for it to match, even with true. \nHowever, if you aren't using the query strings, I don't see the need to use the query() function.\n. I'll take a look at it\n. @pgte so this brings up the question of which would you prefer. Since you can still match query strings using the full path as well as the query() function, would you prefer the recorder to output the query strings in the get() or append the query() to the recorder whenever a query string is used?\n. @vhpoet did #350 fix this issue for you?\n. ",
    "ndhoule": "\nI guess that's true. I made it so if you used query() you had to pass a query string for it to match, even with true.\nHowever, if you aren't using the query strings, I don't see the need to use the query() function.\n\nAn API doesn't control whether or not the end user passes a querystring. For most APIs, you don't always send a querystring. E.g. Stripe's API, a pretty representative example:\n```\n// https://stripe.com/docs/api/curl#list_transfers\n// Note no querystring here\nrequest.get({\n  url: 'https://api.stripe.com/v1/transfers'\n});\n// Querystring here\nrequest.get({\n  url: 'https://api.stripe.com/v1/transfers',\n  qs: { limit: 100, starting_after: 'some_id' }\n});\n```\nMocking this is pretty clumsy:\nnock('https://api.stripe.com/v1')\n  .get('/v1/transfers')\n  .reply(200, { ... })\n  .get('/v1/transfers')\n  .query(true)\n  .reply(200, { ... });\nIf I, say, wanted to add .times(2) onto this and assert that the scope is done, that would be pretty difficult given the current API. Is the client passing a querystring, or not? What if the client had passed a limit param in their querystring in the first call?\nI think this feature would be far more useful if .query(true) matched against no querystring, or optionally provided that functionality.\n. ",
    "luanpotter": "Same error here...\n. ",
    "sahat": "@pgte Anytime!\n. ",
    "vhpoet": "@BinChang thank you!\n. @lambertsteven I can confirm it works. Thank you!\n. ",
    "sindresorhus": ":+1: I think .get() should support both a regex and a function. This matches the filtering methods.\n. ",
    "ericsaboia": "+1\n. cool @pgte I'll do it tomorrow.\n. awesome @pgte, thanks!\n. Looks like a bug, I can take a look today/tomorrow.\n. Pull request opened. Sorry for the delay.\n. How is it possible that this PR is decreasing the coverage? :(\n. and by the way, why do we have removeInterceptor and remove. Should't that be the same method?\n. got it @pgte  - but IMO it could be a single method. They were almost duplicated before, and now the removeInterceptor still has the bug that I've fixed for remove.\nI can try to refactor that if you want.\n. Hi @purezen! I don't really follow, isn't this what you're looking for?\njs\nnock(url)\n   .post(path, data)\n   .reply(200, { statusText: 'OK' })\nWhat's statusText for you? can you give an example of a real request you're trying to mock?\n. I think you're mixing concepts. Where does statusMessage belong in a real HTTP request? is it a header? \n. tricky point here, because if someone wants to specify part of a path at the basePath and use regex at the uri it won't work. See https://github.com/pgte/nock/blob/master/tests/test_intercept.js#L158-L186 for instance.\nAny suggestion?\n. ",
    "hyzhak": ":+1: definitely it will be great to have function in scope.get that be able to generate body of reply based on parsed path.\nSomething like this:\njavascript\nscope.get(function(url) {\n   if(match(url)) {\n      return {\n        code: 200,\n        body: generateBody(url)\n      };\n   } else {\n      //it does not handle url\n      return null;\n   }\n});\nor that way\njavascript\nscope\n  .get(function(url) {\n    return match(url);\n  })\n  .reply(function(url) {\n     return generateBody(url);\n  });\n. ",
    "laggyluke": "Wow, thanks for a quick turnaround!\n. ",
    "pwmckenna": "this has been happening consistently on specific tests for me. My theory is that one of the request headers is being sent initially, but not on subsequent requests that nock handles. waiting on https://github.com/pgte/nock/issues/364 to tell this theory out.\n. yes, exactly that.\n. Hacky fix: on versions of node that this error repros (0.12.x, 4.0.0), change line https://github.com/pgte/nock/blob/master/lib/recorder.js#L307 with \nif (true || !_.isEmpty(readableListeners)) {\n. will do. thanks for the quick merge\n. verified that 2.11.0 fixed my issue. @clicktravel-martindimitrov still seeing the issue on your end?\n. @clicktravel-martindimitrov which http lib are you using? request/superagent/etc?\n. ",
    "clicktravel-martindimitrov": "Hi,\nthanks for your reply.\nthis has been happening consistently on specific tests for me Do you mean this as in the cycle of - run tests, test fail, run again they pass?\n. @pgte \nHow can I get my hands on a more detailed log? At the moment I only have the npm test log which I don't think is going to help you a whole lot. But it is goes like this:\nFirst run:\nnpm test\ntest1 failed\ntest2 failed\nSecond run:\nnpm test\ntest1 failed\ntest2 passed\nThird run:\nnpm test\ntest1 passed\ntest2 passed\n. @pwmckenna \nIm gonna have to check but it will be later this week.\n. @pwmckenna \nStill having the same issue thou I found a workaround. Maybe I should have added that I am on Node v 0.10.32\n. @pwmckenna \nI am using the usual http one.\n. @pgte \nManaged to find a workaround by wrapping it in a setTimeout(function() { ...\n. ",
    "mtt87": "@pgte I'm not that good but I'm trying, can you point me in the right direction? :smile: \nAs far as I can see you deal with the headers here:\nhttps://github.com/pgte/nock/blob/master/lib/scope.js#L104-L113\nand I tried to use a this.rawHeaders but no success so far :frowning: \n``` javascript\nif (headers !== undefined) {\n  this.headers = {};\n  this.rawHeaders = [];\n// makes sure all keys in headers are in lower case\n  for (var key2 in headers) {\n    if (headers.hasOwnProperty(key2)) {\n      this.headers[key2.toLowerCase()] = headers[key2];\n    }\n  }\n// this is what I've added\n  for (var key3 in this.headers) {\n    this.rawHeaders.push(key3, headers[key3]);\n  }\n}\n```\nThanks\n. I think I've found it and seems like it's working for me\nrequest_overrider.js\n``` javascript\nvar response = new IncomingMessage(new EventEmitter()),\n      requestBodyBuffers = [],\n      originalInterceptors = interceptors,\n      aborted,\n      emitError,\n      end,\n      ended,\n      headers,\n      rawHeaders,\n      keys,\n      key,\n      i,\n      l;\n...\nresponse.headers = interceptor.headers || {};\nresponse.rawHeaders = interceptor.rawHeaders || {};\n```\nI'm gonna write a test now :smile: \n. Problem with this test\n``` javascript\ntest(\"reply headers as function work\", function(t) {\n  var scope = nock('http://example.com')\n  .get('/')\n  .reply(200, 'boo!', {\n    'X-My-Headers': function (req, res, body) {\n      return body.toString();\n    }\n  });\nvar req = http.get({\n    host: 'example.com',\n    path: '/'\n  }, function (res) {\n    t.equivalent(res.headers, {'x-my-headers': 'boo!'}); // 66\n    t.equivalent(res.rawHeaders, ['x-my-headers', 'boo!']);  // 67\n    t.end();\n  });\n});\n```\n```\nreply headers as function work\nok 66 should be equivalent\nnot ok 67 should be equivalent\n```\nBecause\njavascript\nres.rawHeaders = [ 'x-my-headers', [Function] ]\nCan you help me and tell me where are the headers as function converted into value?\n. Thanks! :+1: \n. ",
    "pvoisin": "Well, isn't the socket to be established before the response starts to flow in? I thought that 1) the socket is established, 2) the connection happens, 3) the request is sent, 4) the response is gotten. Please correct me if I'm wrong. I'd really like to understand! :)\n. Indeed, that's the sequence of events I expected to see. I may be confused with the naming of that delay feature. Calling it socketDelay appears a bit strange to me but it shall pass... :)\n. ",
    "jshcrowthe": "@pgte Thanks a bunch for reviewing!\n. ",
    "s-taylor": "I think my PR will fix this since it's now using qs.parse.\nhttps://github.com/node-nock/nock/pull/917\nhttps://runkit.com/nizmox/5927a7344f8ffb00122fc2f8. It's possible my issue is this https://github.com/node-nock/nock/issues/376\nThough it's probably worth mentioning somewhere that this module doesn't support querystring array formats, or even qs array formats until that's fixed.. I've submitted a PR to fix this, see https://github.com/node-nock/nock/pull/917. BTW I think the coverage error doesn't make sense, it's probably because I deleted lines. Which has reduced the overall number of lines and therefore makes it look as though the coverage has dropped.\nMy change is tested and all of the added lines will be covered by the test.. Any updates on this? I've had to use my forked version as recording doesn't match for us without this.. Correct, it only records one value. The fix records this as an array.. Thanks @gr2m , I would have been happy to add more tests but been busy and wasn't sure what additional tests you were after. Thanks for getting this merged!. My PR will probably fix this, but still not merged.\nhttps://github.com/node-nock/nock/pull/917. ",
    "CodisRedding": "It ended up being that that the recorder was recording at the same time. Thanks for looking at this. Great lib.\n. I am using it, but it's the http calls within the endpoint that I'm checking. I understand that the call to the hapi endpoint doesn't create a HTTP request, but the code it executes does, and those are the ones that I want to mock. \n. Well I added nock to the src code and ran it without mocha, and it still doesn't work.\n``` js\nfunction dbCheck() {\n  var query = \"select 1;\";\n  var result = { name: 'db' };\nnock.recorder.rec();\nreturn dbConnection.queryAsync(query)\n    .then(function() {\n      return result;\n    })\n    .catch(function(err) {\n      result.error = err;\n      return result;\n    });\n}\n```\n``` sh\nosx:v10.11.2 git:v2.5.4 v8:v3.14.5.9 node:v0.10.36 npm:v3.5.3 nvm:v0.30.1\nforms-service/ on feature/tests\n\u03bb npm start\n\nFormsService@0.0.1 start /Users/rocky.assad/code/forms-service\nnode server.js\n\n2016-01-22T14:49:14.803Z - info: Registering plugins\n2016-01-22T14:49:14.921Z - info: [ 'start' ] 'hapi-swagger interface loaded'\n2016-01-22T14:49:14.921Z - info: Starting Server\n2016-01-22T14:49:14.930Z - info: Listening on port: 8181\n2016-01-22T08:49:48.853Z, [response], http://localhost:8181: get /status {} 200 (10032ms)\n```\n. ",
    "bfeigin": "Hi all @sidabs  it seems like the example might be wrong. Looking at lib/back.js#L47\nit seems like you need to pass an object with {before: before} to the nock call\ntry something like \nvar beforeFunc = function() {\n  console.log(\"in before\")\n}\nnockBack('zomboFixture.json', {before: beforeFunc}, function(nockDone) {\n...\n})\nLooking at this now i realize it's a pretty old issue :sweat_smile: but hope it helps. \n. ",
    "sidabs": "hey @bfeigin, thanks!  Could you give an example of how we could leverage this to filter a path that has a dynamic timestamp?\nFor example, I was able to attach a filteringRequestBody to the scope, but filteringPath didn't work.\n``` js\nvar beforeFunc = function(scope) {\n  console.log('intercepting path...');\nscope.filteringPath = function() {\n    console.log('filtering the path...');\n    return '/hello-world';\n  };\nscope.filteringRequestBody = function() {\n    console.log('filtering request body...');\n    return {\n      hello: 'pluto'\n    };\n  };\n};\nnockBack('my-fixture.json', { before: beforeFunc}, function(nockDone) {\n  // do something\n});\n```\nThe above results in the output that shows that filteringPath isn't properly being called.\nintercepting path...\nfiltering request body...\n. ",
    "jmnsf": "Pretty old issue, but for anyone finding this, filteringPath goes in the scope options. So the above function would be:\njavascript\nscope.options.filteringPath = function() {\n  console.log('filtering the path...');\n  return '/hello-world';\n};. Having the same issue here, also with functional tests to our own server. They're getting recorded instead of being let through.. What a great way to keep the issue & PR count down :). ",
    "izaakrogan": "@pgte thanks for getting back to me. It took me a min to realise that using allowUnmocked: true means the interceptor will not removed from the interceptor list. I've made a small PR for the readme.\n. :+1: \n. ",
    "finderL": "if I can't start web server, so the ajax request how to get mock datas in webpage? \n. Okay, But still thank you very much!\n. ",
    "neophob": "hey @pgte \nmy calls to http://[2607:f0d0:1002:51::4]:8080') aren't mocked but executed... do you have a code example/unit test of a ipv6 mock?\n. Hi @pgte , thanks for the test. I  just verified it on my side but nope. I use request promise\n```\n  return rp({\n    uri: 'http://2607:f0d0:1002:51::4:8080/update',\n    method: 'POST',\n    simple: true,\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded',\n      'Content-Length': payload.length\n    },\n    body: payload\n  });\n```\nwith the nock definition in the first post in the test. but somehow this fails with ipv6, my tests fails with RequestError: Error: connect EHOSTUNREACH and AssertionError: Mocks not yet satisfied:\nPOST http://2607:f0d0:1002:51::4:8080/update\n. Yes saw this too, my address contains the brackets, I'll dig deeper and post a reproducable test case\n. Ok, I added a request promise test, see https://github.com/neophob/nock/commit/dfd95ff7e5aa6aa00a9999609b7ee82d1b24c194\n-> if you enable var target = 'http://[2607:f0d0:1002:51::4]:8080'; the test fails. \n. done\n. could you reproduce the issue?\n. cool, thanks for the quick fix!\n. yes, just saw it, sorry\n. ",
    "drazisil": "Right, and that's not what I'm looking for. I'm looking to simulate something listening on a port, but not responding, so a connection timeout?\n. @pgte Perfect, thank you very much\n. ",
    "carpeliam": "@jpetitcolas any chance this is a duplicate of #150? are you testing this with browserify/webpack?\n. ",
    "jpetitcolas": "Good catch, it is indeed a duplicate (I'm using Webpack). Closing the issue in favor of #150. :)\n. ",
    "soroushjp": "@pgte Great and agree that this makes sense since debugging is scope related. I will begin tackling this and keep this thread posted!\n. @vquigley Sorry about delay. I haven't had a chance to spend time working on this sadly. I would still love the feature and intend to work on it when I get a chance, but feel free to take over if you are eager to.\n. ",
    "vquigley": "@soroushjp how is this going? I am having similar struggles with post body. The error message is too high level.\n. @soroushjp I understand. I've loads on ATM as well but might have a crack at it.\n. Second option seems more readable to me plus easier to extract and parse if needs be.\n. ",
    "ianwsperber": "Also would really like this feature - I often want to be strict about matching headers and without more complete error message this is a pain. Doesn't look like it would be very hard - basically just requires changing common.stringifyRequest, from what I can tell. Going to create a PR shortly.\n@vquigley  / @soroushjp , do you have opinions on how we should format the error message? Currently it's:\nmethod + ' ' + options.proto + '://' + options.hostname + port + options.path + ' ' + body\nWorried it will be unreadable/confusing to have the body adjacent to the headers without any indication of which is which, all on one line. One options might be to return a stringified object, basically:\n{\n  method: method,\n  url: options.proto + '://' + options.hostname + port + options.path,\n  headers: headers,\n  body: body\n}\nThoughts?\n. @zdychacek Just created a PR - I'm facing issues getting the tests passing but don't really have time to debug, if you or anyone else could take a crack at debugging.\n. Tests fixed for PR and cleaned up output!. #447 is resolved. Relates to #409 . Sorry for the absurdly long delay! Tests are fixed and prettified the JSON output. @anotheredward Would you mind reviewing the code for me? I am now a collaborator on the project but would rather not self-merge. If you can do so then I will try to merge & release this weekend.. @csalvato I think that's probably correct. Nock currently has a few issues with fetch (ex #409). I think we need to do an overhaul of nock soon to make fetch a first class citizen.. @Venkat-18 Could you run nock.disableNetConnect(); before your tests? The code calling your endpoint may just be generating the incorrect URL. If HTTP requests are disabled nock will choke and you will get a hint about what endpoint your code is trying to hit. Note also that I plan to release v9.0.3 this afternoon, which should improve the unmatched request error message.\nhttps://github.com/node-nock/nock#enabledisable-real-http-request. Fix created #839, will need to re-address.. @leosoto Will release this week \ud83d\ude04 . Thank you for the PR @RubenVerborgh!! This will go out in v9.0.5. @rexxars Duplicate of https://github.com/node-nock/nock/pull/769, thank you for the PR anyways though!. Need more information. @morenoh149 Let's fold this into #838 . Good catch @Thebigbignooby!. Thanks for working on this @aleung. Could you add a test case asserting the new behavior?. @aleung Because I'm new to the project I would like to wait on feedback from @vrinek or others before continuing. If we don't get any additional feedback within the week we can move this PR forward ourselves. Thanks!. Would feel more confident if we already had #832. I will merge in the next few days @aleung, once we're confident 9.0.7 is settled . Thanks for your help and patience on this one @aleung. Your changes will go out in v9.0.8 today.. Thanks @matteocontrini & @lpinca, I've created #839 to track the bug.. @felipead Your example makes clear that this example is a bug/undesired. If you or @nfroidure are able to open a PR fixing this please do so. Otherwise I will try to get to when I have free time.. @moaxaca Just left a comment on the PR! You can help get the PR merged faster if you could confirm whether it fixes the bug on your machine \ud83d\ude04 . Thanks @moaxaca! Please comment on the PR when you have a chance.. It's unclear to me what you're asking @aliaburas80 . AFAIK the error message for unmatched requests should include information about the mock it tried to hit https://github.com/node-nock/nock/blob/master/lib/common.js#L176. @kharandziuk What error do you see currently?. @zladuric I would write your test as:\n```\nlet scope;\nbeforeEach(() => {\n  nock. disableNetConnect(); // All unmocked requests will error out\n  scope = nock('example.com')\n    .post('/some-url')\n    .reply(200, ({ some: 'response' }));\n});\nafterEach(() => {\n  nock.enableNetConnect();\n});\nit('should only hit some url', (done) => {\n  agent.post('my-app/my-local-url')\n    .send({})\n    .expect((err, body) => {\n      if (err) { return done(err); }\n      scope.done(); // Will throw if not done\n      done();\n    });\n});\n```\nCalling nock. disableNetConnect(); will ensure nock throws an error whenever an unmocked URL  (eg /different-url) is hit. AFAIK this is just the new behavior. Feel free to submit a PR to make the replay functionality compatible with old fixtures.. Good catch @Oceanswave, are you able to create a PR to address?. Nevermind, I just pushed a fix. @Oceanswave would you mind reviewing if you have time? Otherwise I will self-merge.. Thanks again for reporting @Oceanswave! Fix out in v9.04. Thanks for the PR @KingHenne, I will take a look at this tomorrow. LGTM, great work @KingHenne!!! Should have this released within the day. This looks great, thanks @KingHenne!. Need to call activate after restore. Not a bug.. Thanks @andrewaustin, I'll add some defensive coding and get a fix out ASAP. @andrewaustin feel free to review. Cool, thanks for bring this up @andrewaustin . @yodeyer is this supposed to address #610?. LGTM. Treating this as a bug and sending out in a patch release.. Done. Thanks @delijati! Will try to release later this week. The host header is skipped unless specified in both the mock & the request. My guess is that the fetch function is not automatically adding a host header.\nhttps://github.com/node-nock/nock/blob/a783410720052dee19f9eecfd154f569cb8adbaa/lib/interceptor.js#L159\nhttps://github.com/node-nock/nock#specifying-request-headers. @gajus You do not appear to explicitly set the host header in the snippet above. It is of course possible that your fetch implementation sets the host header itself.\nWhat fetch implementation are your tests using? Nock may be misbehaving with your specific lib (see #832). @gajus If you think this is a bug in nock please reopen the issue. If you added a test reproing the bug it would get us to resolution fastest.. 4. Fix indentation\n@philipkobernik Please keep chatter to a minimum, smh smh smh. 5. Add section explaining matching algorithm for requests (per request from @anyong). @matteocontrini & @lpinca, what version of request were you using when you encountered this bug?. @lpinca PR #802 was introduced specifically because nock timeouts were failing with certain versions of the request module. We have previously seen issues with nock restricted to specific HTTP libraries/versions.. I was able to repro, will revert.. Just released v9.0.9, should be fixed. Thank you for reporting @matteocontrini, @lpinca & @matteocontrini. Please let me know if you continue to see issues.\nWe will reattempt #802 once #832 is complete.. @lpinca I think you're right with that assessment, but I wanted to check just because the cause was related to a specific lib. The tests evidently didn't cover this use case \ud83d\ude22 . @aleung Feel free to open a new PR with @lpinca's test case and a reattempt at your fix.. @rainyday Does this only happen for you with popsicle? What version of Node are you running?. @rainyday I was able to repro. We also see this bug with got. Notably both libs are promise based.\nRun npm run integration on branch bug-841-popsicle-hangs (https://github.com/node-nock/nock/blob/bug-841-popsicle-hangs/tests/versioned/common.js#L57). @rainyday If you have the bandwidth to track down the cause of this bug it'd be appreciated. Otherwise may take a bit to get to.. @sacredMonster Nock should work as long as you're using HTTP. It looks like nock hasn't been setup correctly for your host. Could you share your code?. @sacredMonster What endpoint does fetchTeam try to hit? Your nock is only setup for /.\nAlso nock appears to have issues with fetch ATM: https://github.com/node-nock/nock/issues/409. Your scope needs to specify the full path. Closing so we can reserve issues for bugs/feature requests.. Hi! We try to reserve issues for bug reports and feature requests. If you have a usage question please post in our gitter (https://gitter.im/node-nock/nock). Thanks!. @getlittletech Is your usage of node-fetch correct? The docs show the correct way to get the body as:\nfetch('http://myapp.iriscouch.com/users/1')\n    .then(function(res) {\n        return res.json();\n    }).then(function(json) {\n        console.log(json);\n    });\nhttps://github.com/bitinn/node-fetch#usage. Hi! We try to reserve issues for bug reports and feature requests. If you have a usage question please post in our gitter (https://gitter.im/node-nock/nock). Thanks!. Thanks @csabapalfi, I believe this was solved by #858. Closing issue, please LMK if you think it needs to be reopened. Great work @disrupticons! I'll try to get this out later this week, after v9.0.10 has settled. Hi @fabiosantoscode! \ud83d\ude04 \nThanks for the PR, I should have some free time in the next week to do a release and get this out!\nLGTM. @aleung We want to have tests for differents versions of the request lib.. Hi! We try to reserve issues for bug reports and feature requests. If you have a usage question please post in our gitter (https://gitter.im/node-nock/nock). Thanks!. Will release this morning (in v9.0.12), thanks for all your help @abarre! . I've received a report that this is causing issues with some users. May have been a breaking change and didn't realize it. Will need to revert.. No plans to add @bennyn, and I don't think it'll be on the roadmap. I'd suggest making an external library that converts HAR files into the fixture files consumed by nock's \"back\" feature. Suspect this is related to #882 . That'd be amazing @paulmelnikow! In the my mind the steps are to:\n\nCreate a .eslintrc file for the project that extends an acceptable community standard (eg https://github.com/airbnb/javascript, https://github.com/FormidableLabs/eslint-config-formidable). Inevitable this will require some discussion/feedback.\nCreate a lint command in the package.json that runs eslint on the code base (npm run lint)\nUpdate the codebase to follow the linting rules\nHave that command run during the npm test command, prior to unit tests.\n\n@paulmelnikow If you'd like to get started with steps 1 & 2 that'd be awesome!. @paulmelnikow Thanks so much for taking the initiative on this! I like your decision to start with a sensible baseline (eslint:recommended). Please do open a PR and I will take a look at it within the next few days. Skimmed through the code just now and it looks solid. Happy to help you fix the test once we have the PR up, so we can verify changes with CI. \ud83d\ude04 . Interesting @paulmelnikow. I actually just encountered a very similar issue using nock.define, where I actually had to reverse the order of my fixtures to get nock to load the definitions correctly... Could you try reverse the scopes in fixtures to see if that affects the tests? Want to make sure it's not related.. Hi! We try to reserve issues for bug reports and feature requests. If you have a usage question please post in our gitter (https://gitter.im/node-nock/nock). Thanks!. @mrooths I'd try using encodeURIComponent on the path before passing it to nock. eg:\n```\nvar resource = encodeURIComponent(\"/sites/dev/_api/web/lists('8675309')/subscriptions\");\nnock(host).post(resource).reply(200,'worked');\n```\nPlease post further questions in the gitter \ud83d\ude04 . I'd make your own library to extend nock with this functionality @shai32. Might be other people who have this same use case, but won't apply to most people who use nock. Thanks for your contribution. The nock roadmap doesn't fit with this feature currently. We have no plans to add direct support for a 3rd party library like boom. Maybe it'd work better as an external library? Let us know if you have questions/concerns.. @shai32 Just do const interceptor = require('nock/lib/interceptor'). That does, of course, rely on nock's private API and could break without warning... But if you lock down your version of nock you'll be OK. @shai32 The basic auth spec states the string must be Base64 encoded: https://en.wikipedia.org/wiki/Basic_access_authentication. Where in the codebase are you seeing this not done in Nock?\nAlso, from what I see above, the problem is that axios is setting the header to proxy-authorization, not authorization. Try manually constructing a header on that field.. If you think this is a bug or want to raise a feature request after further discussion please do. Otherwise move to github.com/node-nock/nock. @nknapp Looks right to me. Do you want to create a PR of your fork and we can get in a fix? If you have bandwidth to add a test as well that'd be wonderful.. Hi! We try to reserve issues for bug reports and feature requests. If you have a usage question please post in our gitter (https://gitter.im/node-nock/nock). Thanks!. Should be fixed in 9.0.14. Please reopen if issue persists.. Will be released end of weekend. v9.0.14 out with @martinkuba's fix. Huge thanks to him for doing the work. Closing this issue. Will re-open if we get reports that issue persists.. @stevenvachon @jscheffner Are you still seeing this issue using the latest master of nock? #925 should be fixed on that commit. Should be fixed in 9.0.14. Please reopen if issue persists.\n. Hi @martinkuba! Thanks so much for your contribution. I've been on vacation for the past month and a half an the other maintainers no longer appear to be working on the project. Have you had success running this code in your own projects?. Great. This has been an open issue for a long time so I'm going to move ahead with merging your PR. Thanks a ton for taking the time to get it in @martinkuba . Should have a patch up on NPM within a couple hours.. @martinkuba unfortunately tests are failing on master ATM, those need to be fixed before I can go ahead with release. Will create issue to track.. #947. Thanks for the report @LarsHassler! May end up removing test for now.. Removed the failing test to get past this.. @rosendi Nock is independent of request client, but I believe supertest/jest may do their own mocking of the node's http functionality, so they may be in conflict.. Hi @igalic! The project could certainly use some love from contributors with some extra time. Are you looking to be added as maintainers to the project or just want to know the members of @fruitfuljs could help?. @michaelnisi As far as I know there is no documentation of the design decisions/functionality within nock itself. It is definitely part of the difficulty of maintaining the project as it exists today.\nRather than start with the question of whether the project could be moved to @voxpopuli, I think we should be asking more generally what steps the community should take to improving maintenance of nock. Most the current maintainers are inactive (admittedly including myself most the time!).. Accepting this as another patch on the leaky ship of nock. Please add more details. Awesome @martinkuba! Tests are now passing on master.\nSince I will be out of town this weekend and no other maintainers are active to rollback the release in the event of failure I will hold off on pushing patch until Sunday/Monday PST. Will close this issue once release is complete.\nThanks again for stepping up to fix this issue. I'm sure the community appreciates it!. Awesome @martinkuba! Thanks for stepping up again to help.. https://gitter.im/node-nock/nock?at=5967bd78bf7e6af22cd5f664. @aleung Are you sure we don't need to emit a connect event here anymore? Might this cause a regression of #79?. Could you please add a test case asserting identical behavior when output_objects: true is missing? Otherwise  we are missing an assertion for the default behavior.. @anotheredward The query string will be included in the path option. The reference should be as well. You can see this is validated within the tests: https://github.com/node-nock/nock/pull/597/files#diff-ae3b1775e1016e4912805bd8eb567550R4920. Spelling, cleanAll. Since we're accessing so many nested properties could we add some defensive coding here? Might also be nice to add debug log statements if the properties are unavailable. @disrupticons You're probably right that we have a weak guarantee that they're present. Feel free to skip this comment. @disrupticons If you can just address this comment we'll be LGTM. If we're not updating the request lib anymore, then why has the error code changed?. @moaxaca Not sure off the top of my head. @dcstone09 Before ending the test, could we actually make a request to http://www.website.com/search?IMO that would be a more complete assertion of the expected behavior.. SP: intersept -> intercept. SP: intersept -> intercept. Duplicate of the above test. SP: intersept -> intercept. SP: intersept -> intercept. SP: intersept -> intercept. SP: intersept -> intercept. The tests you've add are all related and nearly identical, with small variation for the different payloads tested. Could you please put all the tests you've added within a test block for organization, eg:\ntest('body matching', function (t) {\n  t.test('fails for invalid regex inside array', function (t2) {\n     // Do work\n     t.done();\n  });\n});\nAnother improvement would be to create a function to dynamically generate your tests, eg\n```\nvar testBodyMatch = function (expected, actual, shouldMatch, t) {\n  nock('http://encodingsareus.com')\n    .post('/', expected)\n    .reply(200);\nmikealRequest({\n  url: 'http://encodingsareus.com/',\n  method: 'post',\n  json: actual,\n}, function(err, res) {\n  shouldMatch \n    ? assert.equal(res.statusCode, 200)\n    : assert(err && /No match for request/.test(err.message), 'nock should not intersept the request');\n    t.end();\n});\n``. Write that reusable function will make the tests significantly more DRY. No need to include the issue number. This seems brittle, since it relies on timing. Can we usereq.on(\"end\", () => { ... })instead? That has the advantage of also asserting the request was completed.. Just dopath || \"\". The new logic for stringifying the function means filters will produce identical keys, where they did not previously. This may break existing behavior. PR will not be accepted with this change, please remove.. What isval` if it's a function and is it OK that we're not setting it?. ",
    "zdychacek": "Hello, what's the state of this issue please? Is there any ETA when \"the better errors\" would by shipped?\n. ",
    "lukas-gitl": "Would very much love this!. ",
    "jackfranklin": "@pgte plan on doing some more digging later but have to run. Will follow up this evening.\n. So I think this is me misunderstanding the library. If I swap reqheaders to headers, it matches as expected. However, that seems to be what the API suggests I do?\n. ",
    "gwicke": "We ran into this as well. It's isolated to node 0.10. For us, reverting to nock 2.17.0 did the trick for now.\n. ",
    "cressie176": "I confirm what @gwicke reports. Sample project that can be used to reproduce here\n. ",
    "plynchnlm": "Thanks.  Do you intend to tag 3.1.0?  I see you updated the version in package.json, but I don't see a tag in GitHub.\n. ",
    "marco-c": "The problem is that the library does a few different requests to https://api.github.com:443/authorizations, we relied on the old nock's behavior and defined the replies in a non-temporal order.\nThis allowed us to simplify the tests by putting the requests in common between tests in a single function:\nfunction nockBasicPostAuthFlow() {\n    nockGetAuthorizations();\n    nockGetTemporaryGitHubToken();\n    nockGetTravisTokenAndUser();\n    nockDeleteTemporaryGitHubToken();\n    nockGetGitHubToken();\n    nockGetHooks();\n    nockGetTravisKey();\n  }\n```\n  it('recreates existing GitHub token', function() {\n    nockGetTokenFailureExists()\n    .get('/authorizations')\n    .query({\"page\":\"1\"})\n    .reply(200, [{\n      \"id\":22200031,\n      \"url\":\"https://api.github.com/authorizations/22200031\",\n      \"app\":{\"name\":\"Oghliner token for \" + slug,\n      \"url\":\"https://github.com/mozilla/oghliner\",\n      \"client_id\":\"00000000000000000000\"},\n      \"token\":\"\",\n      \"hashed_token\":\"0000000000000000000000000000000000000000000000000000000000000000\", // removed\n      \"token_last_eight\":\"00000000\", // removed\n      \"note\":\"Oghliner token for \" + slug,\n      \"note_url\":\"https://github.com/mozilla/oghliner\",\n      \"created_at\":\"2015-09-16T20:08:41Z\",\n      \"updated_at\":\"2015-09-16T20:08:41Z\",\n      \"scopes\":[\"public_repo\"],\n      \"fingerprint\":null\n    }])\n    .delete('/authorizations/22200031')\n    .reply(204, \"\");\nnockBasicPostAuthFlow();\nconfigure();\nreturn enterUsernamePassword()\n.then(function() {\n  return await('You had an existing token for this app, so we deleted and recreated it.');\n})\n.then(complete);\n\n});\n```\nThe nockGetTokenFailureExists().get('/authorization') request happens after nockGetAuthorizations, but we could define it earlier because it wasn't matched anyway.\nI can definitely rewrite the tests to follow the temporal order, but I think this feature was useful.\n. Does the closure mean that this is now the expected behavior? Just checking because I don't want to rewrite the tests if you're going to change the behavior again.\n. OK, thank you!\n. ",
    "naw": "I see that this is intentional, but I was really surprised by this behavior.  \nCurrently there is no way to nock a request with a specific query string without also nocking a request against the same URL that has no query string. \nThis affects query objects as well as query functions.\nIs there a reason you wouldn't want to support the ability to nock http://localhost/some/url?someQueryString without simultaneously nocking http://localhost/some/url\nAlso see #516\nThanks.\n. Yes I'm seeing this also. It seems if the actual HTTP request contains a query string, the query function is called, but if the HTTP request does not contain a query string, the query function is not called. \nI would have expected the query function always to be called regardless of whether the actual HTTP request has a query string.\n. ",
    "garrypolley": "I believe this is due to the socket not getting close properly.  Looking at the node code this is where that is raised as an error: \nhttps://github.com/nodejs/node-v0.x-archive/blob/v0.12.7/lib/_http_client.js#L214-L218\non newer node repo: \nhttps://github.com/nodejs/node/blob/v5.0.0/lib/http_client.js#L208-L212\n. I'll take a look tomorrow in the morning. I think that may fix it.  Thanks for pointing it out. \n. I _think that will fix it, however, our test suite is having issues right now related to mock data.  I'll try and let you know for sure as soon as I can.\n. I cannot reproduce the issue currently. Something changed in the last few days with out tests that is no longer getting the socket hang up.  \nI do believe that the commit shown would resolve the issue I was seeing, since the socket would not get properly closed without it. \n. ",
    "blackxored": "+1\n. Yes I switched to fetch-mock after a bit of research :(\n. ",
    "danny-andrews": "+1\n. ",
    "judikdavid": "+1\n. Yes, I'm also using fetch-mock with webpack, just wanted to switch back to nock.\n. ",
    "ciccia": "+1\n. ",
    "tlbai": "+1\n. ",
    "jamesfiltness": "+1\n. ",
    "aaaristo": "+1\n. ",
    "robforsythe": "+1\n. ",
    "rublev": "+1\n. @alexpanov can you go more in depth about your setup? i've not been able to get nock to intercept relative API paths w/ isomorphic fetch + mocha.\n. @handane123 how'd you solve this?\n. @kellyrmilligan can you show us your setup? which package versions?. ",
    "j-brown": "+1\n. ",
    "joerx": "+1\n. ",
    "Lohann": "+1. +1. ",
    "oncletom": "So if I summarize this issue, there is no way to intercept fetch networking activity without relying on an external module nor by stubbing the fetch object?. Thanks @audionerd, I had this problem and your solution solved it :-)\n. ",
    "snowmac": "bump. ",
    "paulmelnikow": "See possible solution using fetch-mock in #591.. It would be good to find a way to keep the state intact without modifying the request (especially since we're starting to adopt got for testing: #1294).. I'm running into this issue trying to rewrite a test for #1404.\n```js\ntest('records and replays nocks correctly', {only: true}, async function(t) {\n  const exampleBody = 'example'\nconst server = http.createServer((request, response) => {\n    switch (require('url').parse(request.url).pathname) {\n      case '/':\n        response.writeHead(302, { Location: '/abc' })\n        break\n      case '/abc':\n        response.write(exampleBody)\n        break\n    }\n    response.end()\n  })\n  t.once('end', () => server.close())\nnock.restore()\n  nock.recorder.clear()\n  t.equal(nock.recorder.play().length, 0)\nawait new Promise(resolve => server.listen(resolve))\nnock.recorder.rec({\n    dont_print: true,\n    output_objects: true,\n  })\nconst { body } = await got(http://localhost:${server.address().port})\n  t.equal(body, exampleBody)\nnock.restore()\n  const recorded = nock.recorder.play()\n  nock.recorder.clear()\n  nock.activate()\n// Two requests, on account of the redirect.\n  t.equal(recorded.length, 2)\n  const nocks = nock.define(recorded)\n  t.equal(nocks.length, 2)\nconst { body: mockedBody } = await got(http://localhost:${server.address().port})\n  t.equal(mockedBody, exampleBody)\nnocks.forEach(nock => nock.done())\n})\n```\nIt's recording one mock request instead of two.. I like that solution a lot!. There are a lot of things we can do to make nock friendlier to use. I do think it's worth changing or extending the API to support things like passing the entire URL in one string.\nAt the same time, we've discussed wanting to make nock more modular and breaking out modules into smaller packages and/or repos. I'd like to stay on that track. Do you think we could handle this feature that way? i.e. in an isolated package within a monorepo, or as a separate repo?\nCould it be possible to implement this feature either as:\n\nA group of constructor functions that invoke nock\nA helper function that prepares an argument which is passed to nock?\n\nMy personal taste would be for an interface like this:\njs\nconst scope = nockRoute.get('http://example.com/endpoint')\n  .reply(200, { stuff: 'and things' }, { 'aHeader': 'forTheResponse' })\nTaking a quick look at knockers, it seems like this could be implemented as a component that's segregated from the core code.\nknockers also adds knocker.received(), which could be an interesting addition to core; however it feels like an orthogonal problem to the one being asked for here.. Hi, thanks for this patch.\nIt seems to me we should settle on the built-in querystring instead.\nquery.parse('a%5Bb%5D=test'); // => { 'a[b]': 'test' }\nqs.parse('a%5Bb%5D=test'); // => { a: { b: 'test' } }\nThe second result is not standard across all tools.. Fixed in https://github.com/node-nock/nock/commit/cddad7ff8ff5b527518138fd84b3521ca76dfa93#diff-5b8399b464e5e69f1be47740b4ce82de.. This is adapted from the setup code I use in icedfrisby-nock, for what it's worth:\n```js\nlet nockScope\nit(function () {\n  nockScope = nock(...)\n...\n})\nafterEach(function () {\n  nockScope.done()\n})\nafterEach(function () {\n  nock.cleanAll()\n  nock.enableNetConnect();\n})\n```\n@sebarys I wonder \u2013 is that the same sequencing issue I described in #870?. I'm using/evaluating Nock Back for something similar. I solved this problem by wrapping some light tooling around each service's tests, to set up Nock Back, and point it to that service's fixtures. If you use Mocha, this is pretty easy to do using describe and describe.only, with before and after hooks.. You're not the first to run into this issue. There is also clearAll() which clears mocks. These are confusing names, if you ask me.\nCould you open a PR to update the docs?. Also requested at #974.. I'd be happy to help with this if you'd like. . Sounds good. Those steps sound good.\nOften the linter finds real errors in the code, and fixing them inevitably changes the behavior. It also tends to create big diffs, which then cause conflicts with open PRs. All good reasons to take things gradually, hit the high-impact changes first, and save the noisier changes for later.\nOne thing I'd suggest, is to defer the style guide discussion until after step 4. In step 1, I could start with some basic rules, which are either style-agnostic (or covered by jshint, which seems already to be running, though not in CI?).\nHere's an example of the last time I did this, and the kind of diff it made.\nAnother possible starting point could be eslint:recommended which provides a bunch of style-agnostic rules (look for the \u2714\ufe0f's). Although, it depends on the code base. Sometimes doing that all at once is too much.\nIn terms of a style guide, you could also consider https://standardjs.com/.. I took a stab at putting a branch together: https://github.com/node-nock/nock/compare/master...paulmelnikow:eslint.\nThis is using eslint:recommended plus a couple extra whitespace rules, and strict mode. It's a moderately large diff, primarily on account of a mass of unused variables in test_intercept.js.\nNot much changing of substance though.\nI've got one failing unit test. It's a false negative \u2013 a test which was failing before for the wrong reason. This line would have triggered an exception because scope is not defined, and if I remove that line the test fails. It's not immediately clear how to fix it.. 1. Can you help me fix the this test, which passes erroneously because scope.done() on line 161 causes a ReferenceError?\n2. Would you like me to open a PR for that branch?. Sounds good! Opened #885.. @gr2m I noticed you're merging stuff. If I redo this work on the current master, would you be willing to merge it?. Hi there!\nMoving to modern tooling, even while preserving the style, is an advantageous change. It's configurable, so it supports migrating the style toward standard over time. It will also help catch lots of new bugs (including, for example, a broken unit test). If you take a look at #885 you'll see the code impact is small, except for one test file which takes a moderate hit because it's full of unused vars. However, even in that file, there aren't any changes that would leave multi-line \"blame\".\nSince switching to standard would touch every line of code, it would make \"blame\" impossible to use and conflict with all the open PRs. Even switching to semistandard would affect huge swaths of code.\nMy thought is the style change isn't worth the impact on blame and PRs.\nWhat do you think?. Sounds good. I've rebased it, though I need help getting a test to pass.. @gr2m Would you mind merging this?. Hmmm, interesting.\nAfter running the first snippet I have one fixture. The second snippet crashes so it doesn't save anything else.\njson\n[\n    {\n        \"scope\": \"http://httpbin.org:80\",\n        \"method\": \"GET\",\n        \"path\": \"/get?foo=1\",\n        \"body\": \"\",\n        \"status\": 200,\n        \"response\": {\n            \"args\": {\n                \"foo\": \"1\"\n            },\n            \"headers\": {\n                \"Accept\": \"*/*\",\n                \"Accept-Encoding\": \"gzip,deflate\",\n                \"Connection\": \"close\",\n                \"Host\": \"httpbin.org\",\n                \"User-Agent\": \"node-fetch/1.0 (+https://github.com/bitinn/node-fetch)\"\n            },\n            \"origin\": \"158.222.233.85\",\n            \"url\": \"http://httpbin.org/get?foo=1\"\n        },\n        \"rawHeaders\": [\n            \"Connection\",\n            \"close\",\n            \"Server\",\n            \"gunicorn/19.7.1\",\n            \"Date\",\n            \"Fri, 21 Apr 2017 04:12:20 GMT\",\n            \"Content-Type\",\n            \"application/json\",\n            \"Access-Control-Allow-Origin\",\n            \"*\",\n            \"Access-Control-Allow-Credentials\",\n            \"true\",\n            \"Content-Length\",\n            \"322\",\n            \"Via\",\n            \"1.1 vegur\"\n        ]\n    }\n]\nIf I reverse the order of the http calls in the second snippet, the ?foo=2 call still fails.\nGiven that, I wouldn't suppose it's related to what you're seeing.. Hi there, any update on this? To avoid conflicts, would be great to get it merged before much else goes in.. Still have a failing unit test here, in test_back.js. It's been passing erroneously because scope.done() on line ~161~ 211 causes a ReferenceError. (scope is not defined.) It's not immediately clear how to fix it.\nDo you understand what the assertion is supposed to be doing?. @gr2m I'd be down! I depend on nock for shields, and feel it's an important dependency for so much of the community. I've dug into it before and am glad to keep doing that. While I'm not sure how consistently I'll be able to help, I'm glad to do it when I can!. Huh. Most strange. That most recent test build ran on the previous commit, not my last commit. Lint is clean. \ud83e\udd37\u200d\u2642\ufe0f \n\n\n. \"pre-commit\": [\n    \"jshint\",\n    \"coverage\"\n  ],\nThis seems way excessively frequently to run these and they slow down my workflow a bunch. I end up using --no-verify all the time, but that also means I can't make commits in the graphical Git tool I also use.\nFrankly I'm inclined to move lint to  pre-push and let coverage (i.e. unit tests) be handled in CI. Thoughts?. Ah, I'm not suggesting removing anything from CI, rather removing unit tests from the pre-commit hook, and moving lint from pre-commit to pre-push.. Let's track the feature request in #191.. Great response!\nAlso: in Mocha, as an alternative to using the done() callback, you can return a promise from your test.. I don't have merge access, though I've been poking through a bunch of the open PRs, and your changes look good to me! @gr2m will need to merge it.. As I articulated in #884, NetConnectNotAllowedError is a programmer error, not a runtime error. Nock should treat it less like a network error, not more. I would argue against this change.. To say this another way:\n\nTo simulate a network error and trigger your application's error handling code, use .replyWithError({ code: 'ENETUNREACH' }).\nTo assert that a test does not make a network request, use .disableNetConnect().. Can you just invoke nock more than once?\n\n```js\nnock(\"www.google.com\", { badheaders: ['Authorization'] })\n  .get(\"/some-url\")\n  .reply(401)\nnock(\"www.google.com\")\n  .get(\"/some-insecure-url\")\n  .reply(200)\n```\nFeel free to reopen if that does not solve the problem.. Seems like an improvement. Thanks!. The bug being fixed is that duplicate keys in the query string e.g. ?a=1&a=2&a=3 are lost. Is that correct?. Makes sense. Though the fix makes sense to me, the test seems very indirect. Could it be written in a simpler way?. Resolved via #921!. What what?! \ud83d\udc4f  Thanks @edorivai!. I have experience with some linters (e.g. jscs) which took an extremely strict interpretation of semver which said \"a new error is a breaking change\". However, for most libraries, fixing behavior that was previously outright incorrect is not usually a breaking change.\nSince this change seems to have a high ecosystem impact, perhaps we should consider reverting it and re-shipping it with a major version change.\nAlternatively we could make sure the intended behavior is clear in the changelog. I agree that developers shouldn't have to come to the PR.. Per the discussion in #930, this issue was resolved in #929.. Seems like this is still an issue, and since you've made such a nice test case I feel I should reopen it for benefit of folks who may want to contribute.. It would be good to include a test with this fix.. Thanks! \ud83d\udcaf \nThe test caused a merge conflict with master. To fix it, could you merge master into this branch?. Thanks!. As I just mentioned in #824, there is also .clearAll(), and these are confusing names. We should definitely document them. Yes, please do open a pull request!. Based on my experience using Nock Back, it provides much richer tooling for this. If you have a lot of fixtures which are changing frequently, Nock Back is probably a good bet, since it simplifies the process of updating your fixtures. If you can get by recording your fixtures once, using .rec() is a simpler way to go.\nAnd even simpler, you could download the fixtures yourself and use .replyWithFile().\nNot an expert! Just my experience.. Heh, funny you mention only, since I was about to open a PR to upgrade tap to a version which supports it. Nice work on that, by the way!\nHuh, that is super worrisome.\nI haven't dug in to our test harnesses. Is there a before hook somewhere which resets nock between tests?\nI suppose there's a good chance it's being caused by another test in particular, so probably the bug could be isolated by disabling a mess of tests and adding them back in until the test passes again.\nThat reminds me of a very strange issue I encountered with multiple intercepts on the same hostname #870. Could it possibly be another manifestation of that problem?. Another possible way to do it is to make a main function, or a runner object, which is exportable and callable on its own. Then either invoke the main function with arguments of your choice, or test the runner.\nI've done this in Python a lot. I've just recently set up a Node project to try this, for the first time. This is working from the command line (though to be fair, I haven't tried to use it from tests yet).\n```js\nasync function main(inArgs) {\n  // default to process.argv.slice(2) when inArgs not provided\n  ...\n}\nmodule.exports = main;\nif (require.main === module) {\n  (async () => {\n    try {\n      await main()\n    } catch (e) {\n      console.error(e)\n      process.exit(1)\n    }\n  })()\n}\n``. This is the same problem as #884.. In [icedfrisby-nock](https://github.com/paulmelnikow/icedfrisby-nock), [I usecleanAll()`](https://github.com/paulmelnikow/icedfrisby-nock/blob/master/icedfrisby-nock.js#L27).. Thanks!. Thanks for setting this up! What's the effect of this change? Does it publish automatically from CI?. That is amazing!\nHow does it detect whether it's patch or minor or major?. @gr2m Think we could turn off coveralls comment posting? They're mostly noise and very chatty. The result that shows up in the \"checks\" seems sufficient!. I've got another half hour here. I'm on a train and my signal is a bit limited, though I'll work on tests/test_recorder.js#L852 and keep working my way back until time runs out.. I'm going to see if I can't knock off the rest of these.. The way this is accomplished in the nock tests is to specify the request body as a function. It'll be called just before the mock request is fulfilled.\njs\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => {\n    completeTest()\n    return mockBody\n  }). @gr2m do you want to wrap this one up?. Please do! \ud83d\ude01 \nWe're targeting the beta branch now so probably best to start a new branch and manually pick over the changes. You'll want to set up Prettier to handle formatting as well (or run npm run prettier if you don't want to set it up).. @jlilja How'd you make out?. Sounds good to me!. One thing you could try is deleting node_modules and running npm install again. We have a lockfile now. Also, merge beta into this branch (or rebase this onto beta) if you haven't already.\nOh! I see that's the problem. Some updates to the lint config made in the beta branch are necessary for the tests to pass.. It looks good! In the future if you start with the beta branch things should be easier. \ud83d\ude01. Whoa cool!. > As we use this we cannot use the arrow function\nOops! I didn't realize we were doing this! It's so\u2026 mocha-y.. Sure, if you'd like! #884 probably is a breaking change, though I'm happy to discuss it. Re #870 I've no idea, though it seems like something tests would help with.\nI'm happy to work in a targeted way on tests on Friday; it makes sense that's a hurdle which blocks progress elsewhere.. Tap docs on skipping failing tests: https://www.node-tap.org/cli/. Huh. Do you see a place where the lost coverage appears? I'm looking at https://coveralls.io/builds/20663567 but that's only showing increases.. > _.flat can often times be replace by [].concat :)\nNice!\n\nWe can drop Node 6 support today and start releasing preview features while still releasing updates to the current 10.x.\n\nCould you explain that a bit further? I'm pretty new to semantic-release and can't say I've really digested the whole of what it can do.. Wow, that's really impressive! The issue was a bit thick to digest. Thanks for explaining it.\nSure, then why don't we go ahead and drop Node 6 support.. I don't think 100% is a bad target for a library like this. There are a bajillion edge cases and lots of ways in which people's tests can be broken. If we're going to break things I'd rather do it deliberately and with notice in the changelog :) Agreed with @gr2m that we maybe shouldn't aim all the way for 100% before starting the refactor, as we may wand to just remove big chunks of code. @lihail the approach you're describing makes sense and that's for sure already the case here. However we're not talking about adding new code, but changing the guts of what's already here. Tests will let us do that with confidence.\nHere's what I've been doing so far:\n\nRewriting tests using async and got, leaving behind comments when they can't easily be ported. I'm developing a new style and simplifying along the way.\nAdding tests which cover little bits of functionality that don't have coverage now.\nRemoving legacy code (e.g. shims for old node versions).\nRemoving teeny bits of code here and there, which I'm highly confident is unreachable, and adding todo comments when it's not clear that it should be removed.\n\nI can keep picking at it, though I think it would also be good to shake out tasks that other people can work on, and define a finish line.\nOne idea is to take a pass through the Coveralls result, maybe together on a video call, and decide what else needs to be fixed. Basically to decide specifically which pieces of the remaining coverage should be addressed as part of this \"full test coverage\" project.. Nothing in progress right now!. > I think it would also be good to shake out tasks that other people can work on, and define a finish line.\n\nOne idea is to take a pass through the Coveralls result, maybe together on a video call, and decide what else needs to be fixed. Basically to decide specifically which pieces of the remaining coverage should be addressed as part of this \"full test coverage\" project.\n\n@gr2m Any thoughts on that?. > Coverage decreased (-0.2%) to 90.149%\nThis change should not have affected coverage. I wonder if Coveralls is getting confused because there are three different scores. Would it make sense to send results to Coveralls only for the latest node version, instead of all three?. Sure! Seems simple enough.. > THe same applies to all the different request libraries used in nock, cannot wait to clean that up :)\nIndeed!\nIs there a decision about which to use going forward? It seems that some of that hinges on migrating to async/await; until then it doesn't really make sense to switch things out.. > In the longer term, I\u2019d love to get nock to work in browsers.\nWow, that's ambitious! What use cases do you have in mind? I suppose that would work by mocking out fetch and/or XHR.\nFor what it's worth, I have run into issues where certain things aren't possible with fetch. For example, you can't prevent a redirect. In Shields tests we're using a mix of node-fetch and got, with all the server code using request. I think I'd like to migrate to got eventually. I ended up choosing between that and axios based on brief usability + docs evaluation.. request doesn't have native promise support, nor idiomatic callback support. I find its interface so idiosyncratic that I once wrote a library to wrap it with what felt like a better one: https://github.com/bodylabs/request-shim-for-callbacks/blob/master/request-shim-for-callbacks.js#L38-L59. So I'd rather not use request \ud83d\ude04. Sounds good!. Is the Coveralls repo token supposed to be checked in? I imagine it is not\u2026. There's one here: https://github.com/nock/nock/blob/master/.coveralls.yml. > I wouldn't use the \"fix:\" prefix, I'd use \"refactor:\" in this case. Hope that makes sense? I'll use the squash&merge button to fix that\nAh, that makes sense.\nAre there any others which should be mentioned at https://github.com/nock/nock/blob/master/CONTRIBUTING.md#commit-message-conventions ?. I don't have an opinion about it. The only thing that is odd to me is distinguishing a breaking change from a forgotten conventional message.\nIt would be nice if the PR would tell me how semantic-release was interpreting it!. Maybe next project!\nThe other thing that would be handy for me would be a page that a project could link to with its rules for semantic commit messages, that lets a developer build the commit message in the format they support. I've gotten hung up on this a few times; it can kill a surprising amount of time while putting a patch together.. Maybe that's worth mentioning in the contrib guidelines, too.. I see it's already there; I've amped it up a hair in #1310.. This didn't get back.js to 100% as anticipated. We throw 'no fs' in two places and it looks like I'll need a second test to hit the other.. Sure! I think that page I linked to does a pretty good job of it: https://prettier.io/docs/en/editors.html. I can get the tooling change into PR, though running prettier will rewrite the entire repo so it will conflict with everything. Any thoughts on how to time that in relation to the open PRs?\nThere is a workaround: https://github.com/badges/shields/pull/1866#issuecomment-411567524. I'm eager to get #1209 merged though I guess it rewrites the whole file so it's easy enough to rebase it.. It\u2019s really impressive! They have a PR integration which is helpful for avoiding introducing these. It\u2019s very slow so I don\u2019t wait for it to finish when updating a branch pre-merge, though it\u2019s still helpful, as often as not, an alert will be introduced and caught in the original PR.. Yea, if changing the default branch doesn\u2019t break things that seems ideal. It\u2019ll help everyone open PRs which target what likely is the correct branch.. I'd be happy to take this on though I think I'd need admin access to the repo. I'm not sure if there's a need to change any Coveralls config which I think requires it. Changing the default branch definitely does.. sg about the npm badge :)\nCoveralls badge image and link both hard-code master so they'll need updating. Also in Coveralls, it's showing default branch is master; not sure if it will pick up that change on its own.. Yea\u2026 I've lots of questions about other aspects too, particularly the release process, the comments, the bot accounts. Could be helpful to capture the reasoning on no package-lock, too.\nI'm happy to help draft something, and/or take notes while you talk about how things are set up :). Okay, I'll open a PR for the badge changes.. For what it's worth, Sazerac doesn't package up a runner, it just registers tests with whichever runner you're using. I've only run into two issues using Sazerac with Mocha: it unexpectedly no-ops when given() is invoked outside of test(). That's not great, though I've only run into it once. The second was a trivial bug which I fixed: mikec/sazerac#12.\nNock doesn't have a ton of data-driven tests; what I did in #1306 is probably sufficient.\n\nBut for now honestly I'd just stick with tap.\n\nI'm fine with that for now. Will close this and see how it goes, and comment or mention this issue if/when tap-related challenges arise.. Is it possible to exclusively run a subtest? If I .only the parent test, the entire thing runs. If I don't, none of it runs.. Makes sense. Looks like they're in test_back.js, test_basic_auth.js, and test_intercept.js. They're there for grouping more than anything else, and surely could be flattened.. I'm reading this stack trace from https://github.com/nock/nock/pull/1336#issuecomment-451014272:\n```\n./tests/test_intercept.js ......................... 529/531\n  delay works with replyWithError\n  not ok this is an error message\n    stack: >\n      end (lib/request_overrider.js:28:785)\n  lib/request_overrider.js:13:2146\n\n  OverriddenClientRequest.RequestOverrider.req.write\n  (lib/request_overrider.js:13:1355)\n\n  OverriddenClientRequest.RequestOverrider.req.end\n  (lib/request_overrider.js:13:1924)\n\n  Object.module.get (lib/common.js:41:287)\n\n  Test.<anonymous> (tests/test_intercept.js:4008:20)\nat:\n  line: 28\n  column: 785\n  file: lib/request_overrider.js\n  function: end\ntest: delay works with replyWithError\nsource: |\n  function setHeader(request, name, value) {\n\n```\nThe line numbers seem really wonky.\ne.g. lib/request_overrider.js:13:2146 which is line 13, character 2146.\nAny idea what's going on?. Huh\u2026 are the line numbers changing because const declarations are being hoisted?. This test is giving me not ok test unfinished. I tried adding a t.end() but no dice.\n```js\ntest('reply with implicit date header', { only: true }, async t => {\n  const clock = lolex.install()\n  const date = new Date()\nconst scope = nock('http://example.test')\n    .replyDate()\n    .get('/')\n    .reply(200, { hello: 'world' })\nconst { headers } = await got('http://example.test/')\nt.equal(headers.date, date.toUTCString())\nscope.done()\n  clock.uninstall()\n})\n```\n. That makes sense. I didn't manage to track it down, though. I know you saw in #1359 but for benefit of anyone else reading, I added a callback-based version instead.. After stepping away from the library for a couple weeks, I'm back and running these tests again.\nWith that perspective, I'm struck by the poor ergonomics of the output (compared to Mocha). It's hard to find the failing tests, and the stack traces aren't formatted in a way that makes them easy to find.\nI'm also struck by the relative difficulty of running individual tests.\nIt's clear that the test runner is slowing down the development process. So, I think it makes sense to plan a migration to a new test runner.\nWhere to start? #1427 is a \"greenfield\" test project. That could be a good opportunity to take ava for a spin.\nAdded: One more gripe: the difficulty of adding global hooks!. Probably I should rebase this once more after the other PRs I opened have been reviewed.. Should be good to go \ud83d\udc4d . That's a nice idea!\nWhat will Greenkeeper do when a new patch is released?. Yea, that's perfect \ud83d\udc4c \nMost of the time the code doesn't change. I think it's happened twice in the last six months. Up to you about whether to add the fix script! It seems neat!. Ah, I guess this conflicted with #1312.\nhttps://travis-ci.org/nock/nock/jobs/470105474. Fix for broken build in #1322.. Actually just noticed it's showing 92%, but only if I use a different browser. Reloading doesn't help. Definitely a caching issue.. > This could have been communicated better, our tests started failing after picked up 10.0.5 because most of them use fakeTimer which didn't impact nock. Now they all timing out and it took me a while to figure out why. I agree to give more control is better, but I don't think most of existing users know it uses a separate timer due to existing behaviour. They'll need to go through the same debugging process as I did now. \n\nMaybe update your readme with an example would help? This is a change of behaviour for all the existing tests uses fakeTimer. Those tests will start failing with no obvious error other than timing out and it would take a while to track down to the nock library.\n\nHi! Sorry about the difficulty and thanks for opening an issue. Do you mean an example of using fake timer? Sinon's fake timers? I'm not familiar with using fake timers with nock. Could you create an example?\nAdding a test would be really helpful. It would document the behavior and prevent a future regression. Your help with that would be really welcome :). I can see the argument that this should be a breaking change. It begs the question though: is the new behavior desirable?\n@humantree thanks for the example:\n```js\nconst axios = require('axios');\nconst { expect } = require('chai');\nconst nock = require('nock');\nconst sinon = require('sinon');\ndescribe('Test', () => {\n  const url = 'http://www.google.com';\n  let clock;\nbefore(() => clock = sinon.useFakeTimers());\n  after(() => clock.restore());\nbeforeEach(() => nock(url).get('/').reply(201));\n  afterEach(() => expect(nock.isDone()).to.equal(true));\nit('should pass this test', async () => {\n    const res = await axios(url);\n    expect(res.status).to.equal(201);\n  });\n});\n```\nHow would you take advantage of fake timers in a test with nock?\n@taylor1791 do you have an example where fake-timing nock's internal timer was desirable?. It'd be helpful to include a test, as well, that lolex.install() does not interfere with nock.. @gr2m What's the best way to land this? Should it go to both master and beta?. @gr2m Okay, shall I merge this then? How's this look for a commit message?\n\nfix: Mock responses should fire when timers are mocked\nRevert #1270. Fix #1334.. This test has failed twice in a row on this branch:\n\n```\n./tests/test_intercept.js ......................... 529/531\n  delay works with replyWithError\n  not ok this is an error message\n    stack: >\n      end (lib/request_overrider.js:28:785)\n  lib/request_overrider.js:13:2146\n\n  OverriddenClientRequest.RequestOverrider.req.write\n  (lib/request_overrider.js:13:1355)\n\n  OverriddenClientRequest.RequestOverrider.req.end\n  (lib/request_overrider.js:13:1924)\n\n  Object.module.get (lib/common.js:41:287)\n\n  Test.<anonymous> (tests/test_intercept.js:4008:20)\nat:\n  line: 28\n  column: 785\n  file: lib/request_overrider.js\n  function: end\ntest: delay works with replyWithError\nsource: |\n  function setHeader(request, name, value) {\n\n```\nAny idea what could be causing that? I don't think it's related to this change. I don't believe the tests are running concurrently.. Passing now \ud83e\udd14 . I've noticed that build take a long time to start and a long time to complete. Checking in the lockfile and turning on caching should help, though it would be great to find other ways to speed this up. Builds often take over 10 minutes and really around 1 minute would be better.\nHave you used CircleCI? My experience is that performance is way better, though it takes more work to set up.. Do you think there's anything we can do to increase our concurrency, or reduce the wait time before builds?. Today was worse than usual.. Heh. That test failed again here. The stack trace is still confusing:\n```\n        not ok 1 - this is an error message\n          ---\n          stack: >\n            end (lib/request_overrider.js:18:774)\n        lib/request_overrider.js:43:2170\n\n        OverriddenClientRequest.RequestOverrider.req.write\n        (lib/request_overrider.js:43:1374)\n\n        OverriddenClientRequest.RequestOverrider.req.end\n        (lib/request_overrider.js:43:1945)\n\n        Object.module.get (lib/common.js:41:287)\n\n        Test.<anonymous> (tests/test_intercept.js:4008:20)\n      at:\n        line: 18\n        column: 774\n        file: lib/request_overrider.js\n        function: end\n      test: delay works with replyWithError\n      source: |\n        if (!request._headers) {\n      ...\n\n    1..1\n\n```\nI'm going to close this for now. I think this makes the code more readable, but falls in the land of refactors. Let's aim for code coverage first\u2026 and try to find out another way to determine what's wrong with this test.. I updated 1e3. I think 1e-6 is more obviously correct; with numbers like 0.000001 it's hard to tell from reading it what the number is.. > Love how more readable the tests are becoming!\nMe too!\n\nit will turn \"TODO\" comments into issues when we merge PRs with them so we don\u2019t forget :)\n\nSure, I don't really have an opinion. Do you think the issues are helpful? I feel like we had a big backlog of issues and they've all been closed. \ud83d\ude09. Nope, it's ready to review!. I don't know what's up with the build. I've restarted it twice\u2026. Could it be an authorization issue between Coveralls and GH?. > I think coveralls is just not that reliable in general unfortunately\n\ud83d\ude22 . Is it also set up through Marketplace?\nhttps://github.com/marketplace/coveralls. Ah, fabulous!. Go for it!!\nI try to be really generous with tagging good first issues. There's a ton of work that can be done on this project and I don't think we need to worry about not creating enough of it. \ud83d\ude01 . Ah, I came across one like that before as well. If the tests are still based on getting through, they need to be rewritten. Basically, they should have used AIRPLANE but didn't. You could add TODOs, I think\u2026. @jlilja How are you coming with this? It'd be great to get these updated so new contributors add tests in the style we want. Even if it's only partly done we could merge it.. \n. This is ready to merge once #1369 is resolved.. It feels great to give the documentation some love!\nnock works, though I think we can do a lot to make it a friendlier tool for users, and the docs is a big part of that.. Think this is also ready to go when #1369 is fixed.. Whoa nice! Yea please do :)\nOne wrinkle is that prettier has opinions about the formatting of the readme, so we may need to either run prettier, or configure it to format just like prettier wants.. #1369 is handling this.\nShould we remove the old markdown-toc tasks?. Seems like this is obsoleted by toc-bot.\nShould we remove the markdown-toc references from package.json or are they still useful?. Any clarity on what to do with the bits in test_back.js?. Okay. If it's time to merge this and we can't figure it out we can edit the comment.. It'd be great to get this merged before Friday! Shall I leave the test code intact and edit the comment so it no longer mentions AIRPLANE?\nhttps://github.com/nock/nock/blob/26954a7ed6747161c5ca1c557f0bf40ab59e7b6e/tests/test_back.js#L59-L94. Oh man, this is amazing. This is how lint and prettier should work too!!!. > I\u2019d probably make it work a little different, instead of updating all my files all the time, I\u2019d add make the users decide when to trigger the update.\nWhat do you mean by that?\n\nHappy to help you build this if you are interested. Maybe when we finish the current nock beta? :)\n\nOh man, that sounds super fun! I'm totally in! :). Ah, interesting. I gotcha.. Hmm, we're going to need to do something in the meantime. I can't think of any good options besides ignoring the readme. We could fix the file before running prettier in CI, though having the mis-formatted file checked in will mess things up locally.. #1363 is ready to merge but is blocking on this.. Git also likes to have a newline at the end of files :). @lihail We're using prettier, which does the formatting, prettier-check which verifies formatting in CI, and eslint-config-prettier which disables the rules in eslint which are formatting-related, leaving in place the semantic checks.. @gr2m Does this commit need a prefix?. Hi! Thanks for the contribution!\nI feel like I'm missing some context. What is the problem we're fixing?\nThis needs to be reapplied to the beta branch which is where development is happening. You might have better luck with the tests on that branch, too. We've reworked many of the tests and gotten rid of a bunch that were flaky.. That day should work for me!\nI've been working on the coverage metric and I think more hands on that would be great. Though even more important to me is setting a goalpost together. We're in this phase where we're focused on improving the coverage before starting on bigger refactors, and it would be nice to have clarity on what work\u00a0needs to be done to get there. I suggested a line-by-line triage: https://github.com/nock/nock/issues/1285#issuecomment-452006468. If we can swing that it sounds even better!. Great! It's on my calendar :). Hi! I'm standing by on this call :). 7\u20138:30 UTC-8 works for me.\nLater also works, though it'll be evening @jlilja's time.. Joining now!. We decided to regroup in a few hours at 2:30 ET / 11:30 PT. I know that's pretty late for you @jlilja! If you or @RichardLitt are free to join us then, please do!. Hey @RichardLitt there was a comment in gitter by someone who landed on a locked post via medium. Could you link the old article to the new article? Since folks can\u2019t post announcements maybe the CTA should also invite them to this thread.. I'm gonna aim for around 12-4 UTC-5 on Friday (which is 9-1 Pacific).. > What branch do I submit a PR to?\nbeta :). I'm going to work on the coverage TODOs in request_overrider.js.. Should we open a new issue for the remaining TODO-coverage? I don't want this to get boring, though feel like we're going to need to tackle a few more of those before we can declare success.\nOur coverage metric keeps creeping up, which is nice to see!. Continuation in #1404.. Hey @gr2m what do you think about merging this? We can add on the rest in a second PR on Wednesday.. Much thanks @straku! Really appreciate your contribution. Thanks for fixing my mistake :). @gr2m Want to \ud83d\udc4dor merge this?. Hi! Thanks for this contribution :)\nNew work is being done in the beta branch. Could you rebase this?. @gr2m I noticed this is listed as a big fix but I think it might be better to call it out as a new feature when 11 is released.. Also if it's an interop problem, I agree that having a clearer example would make it easier to determine what is going on with nock vs sinon. In your example you're stubbing an async function with a non-awaitable, non-promise return value and your test function doesn't return anything. I know you're saying it's not your actual code, though it is kind of hard to debug. Could you provide a minimal example with runnable code, the expected result, and the observed result?. Can you make a runnable test case in RunKit?. Thanks for the PR!. Thanks for your contribution!. The call to nock is not supposed to include the path; could that be the problem?\nnock('https://domain.com/session/') -> nock('https://domain.com')\nAdded: I guess the rest of the path is just ignored.\nOther than that I'm not sure what the problem is. It's hard for us to troubleshoot without a runnable example \ud83e\udd14 \nOne of the reasons I started working on Nock is to make it easier to use and easier to diagnose when things are going wrong. These kind of issues are frustrating.. This is awesome, thanks!\nI think if you npm run prettier that will fix the build.. Still not hitting coverage. I'll pick this up later on.. Ah, it needs to be a binary stream.. This should be good to go. delayed_body.js is now at 100%.. > I'm going to work on the coverage TODOs in request_overrider.js.\nI am no longer working in this file. I got through a lot of the header code, which is what prompted the umbrella TODO-coverage comment we wrote at the top of the file. The file is less of a mystery now. Though there are a smattering of uncovered lines for various edge cases. It may need another round of triage.. I just tackled the last one in lib/common.js. I'll open another PR in a moment for the truthiness checks on http.ClientMessage and http.OutgoingMessage in lib/intercept.js.. @gr2m Do you want to finish the one in socket.js?\nhttps://github.com/nock/nock/issues/1374#issuecomment-455620276. After the open PRs are merged, these are the coverage TODOs that are left:\nlib/common.js:      // TODO-coverage: `override` is always truthy. Refactor to eliminate the\nlib/common.js:  // TODO-coverage: Add a test to cover the missing condition, or remove if\nlib/common.js:  // TODO-coverage: Add a test to cover the missing condition, or remove if\nlib/common.js:    // TODO-coverage: Add a test to cover the missing condition, or remove if\nlib/common.js:    // TODO-coverage: For `_.isObject(headers)`, add a test to cover the\nlib/common.js:  // TODO-coverage: either replace this with a library function or add a\nlib/common.js:  // TODO-coverage: Find out what's not covered. Probably refactor code to\nlib/interceptor.js:  // TODO-coverage: This looks very special. Worth an investigation.\nlib/recorder.js:      // TODO-coverage: Try to add a test for this case. If we can't figure\nlib/recorder.js:  // TODO-coverage: Try to add coverage of this case.\nlib/recorder.js:    // TODO-coverage: Try to add coverage of this case.\nlib/recorder.js:      // TODO-coverage: Investigate why this was added. Add a test if\nlib/recorder.js:      // TODO-coverage: Investigate why this was added. Add a test if\nlib/recorder.js:          // TODO-coverage: The `else` case is missing coverage. Maybe look\nlib/recorder.js:              // TODO-coverage: This is missing coverage. Could this be\nlib/recorder.js:      // TODO-coverage: Is this for parity with native node `req.write()`? If\nlib/recorder.js:          // TODO-coverage: Add a test.\nlib/request_overrider.js:// TODO-coverage: This file is puzzling. It would be good to investigate why\nlib/scope.js:      // TODO-coverage: Try to find an actual use case where a non-string\nlib/scope.js:    // TODO-coverage: `else` throw with an error.\nlib/scope.js:    // TODO-coverage: Find out what `body === '*'` means. Add a comment here\nThat's 54% of the way done! I may pick up one or two of these, though TBH I've gone about as far as I want to with this. If anyone else is interested in working on these, help would be really appreciated! They tend to be good puzzles!. That sounds good!. The failures are a bit puzzling\u2026\n\n\nThere is still tests that needs a local web server\n\nMaybe I miss something, but I think the local web servers that are need for some tests are different from the mocks we define that use external services?\n\nYea, what I think he means is that he found some others which use e.g. www.google.com that need to be converted to use local web servers. They're tests which should have been tagged AIRPLANE but weren't.. Oh man, yes! So much this. Nock works, but it is very difficult to use. The difficulty in getting nocks and requests lined up when using TDD is incredibly frustrating. The error messages are unhelpful, the interface is confusing (cleanAll() vs activate vs enableNetConnect), the terminology is also confusing (what's a scope? what's an interceptor?). And basically nothing works until everything's perfect, as you've discussed here.\nI would love to work on this together, to design some really friendly messages, and implement it in a way that lets us easily test and tweak the guessing behavior.\nAlso agreed that it would be good to do get the code coverage todos wrapped up #1404 so we can make these kind of refactors with confidence. Agree also with @gr2m that there is a lot of cleanup that needs to be done, and need to be careful not to conflict with e.g. converting to classes. \nThough I generally feel that the cleanup work can be tackled in a lot of different ways.\nI'm eager to start working soon on a plan for a friendlier, easier to understand interface, and think debugging the matches is an important building block, and a good place to start.\nCan't wait to finish up with #1404!. I've double-checked this. If CI is passing let's merge it! @gr2m could you merge or \ud83d\udc4d?. @gr2m Do you have any thoughts about this? It would be good to start separating the tests that test library\u2013nock integration. They should at least be moved out of the main test suite.. That sounds good. I set up something similar for Shields: https://github.com/badges/daily-tests\nI think it may be necessary to test on multiple versions of the request libraries and maybe multiple versions of nock. There are four kinds of failures, and I think we care about three of them:\n\nNew nock causes incompatibility with current library. Action: Determine whether the bug is in nock or the library. Patch and/or open a bug.\nNew nock causes incompatibility with old library. Action: Determine whether the bug is in nock or the library. If it's in nock, patch and/or open a bug. If it's in the library and the library version is still being supported (e.g. for LTS reasons), patch and/or open a bug; if not, ignore.\nNew library causes incompatibility with current nock. Action: Determine whether the bug is in nock or the library. Patch and/or open a bug.\nNew library causes incompatibility with old nock, but current nock is fine. Action: Ignore. Unless the nock version is one we're supporting for LTS reasons.\n\nI guess that means we only need to test on current nock + any versions that are in LTS. In other words, head + master.\nI wonder if a monorepo for all the request libraries would make for a little less maintenance work. And also whether there is tooling for automating matrixed tests like this, on different dependency versions (and node versions).. That all makes sense to me! If we maintain the key ones, and test on current library versions in multiple node versions, that creates a formula that people can use to test whatever they want. \ud83d\udc4d . Just a heads up that there are many lines of tests being moved in #1426 and it's a bit high risk, so I want to get that merged first. The tests here may need to be rebased after that lands.. Overall this sounds good to me!\nGiven https://github.com/nock/nock/issues/1413#issuecomment-459991726 how about we press forward by expanding on the interface? Perhaps adding an example mock + erroneous test, showing today's message, and showing the suggested message?. This test is failing. This may need another look.. For the reset case, I wrote:\nnock.restore(); nock.cleanAll(); nock.enableNetConnect()\nTo get back to the initial state, it also currently needs:\nnock.activate(). #1465 adds an afterEach hook to Nock's test, using those four methods. So let's validate that those are the right ones \ud83d\ude01 . I rewrote most of the text of this proposal, updated method names based on this discussion, and proposed a consolidated API for controlling nock's handling of unmocked requests.\nIt's clear there is a lot of stuff to cover here!  \ud83d\udc40 \nTo make this easier to digest, I've split it up into four sub-proposals, each dealing with one of the main use cases:\n\nResetting\nTemporary deactivation\nAssertions\nHandling unmocked requests\n\nSo far we've talked the most about (3) so maybe we could try to approve that one first?. This is awesome feedback. It's going to take me a minute to digest it and respond.\nThanks for sharing the link about Node governance! \"Does anyone object\" is not how I'm used to working though I agree it makes sense, and could be really good for nock.\nIn particular (from that thread):\n\n\nAgreeing with a decision takes generally more commitment and cognitive load than not-objecting to it. It puts significantly less burden on those who may have less interest in the decision than those who have more.\nWhat this enables is a far more decentralized, yet still functional, project governance model that allows us to make progress without a project roadmap or project manager.. Should we check the accepted RFCs into the repository? The artifact of that discussion could be useful to link to from the release notes for users who are upgrading. I propose we do that.\n\n\nSince this discussion and scope have gotten large, I could pull all the intro material + analysis into one PR (maybe rfcs/NOCK-001.md?), and then create additional PRs for each set of proposed changes (rfcs/NOCK-002.md, etc).\nDoes anyone object?. Hi, thanks for the suggestion. I haven't used the .log function very much. I stumbled across it recently and have been curious about how useful it is.  Worth thinking about this in relation to #1429.\nI wonder if we turn this on and off globally with an environment variable. It would avoid having to modify the code to begin with.. > Basically, I have a script that runs many postman collections having a variety of requests and some repeating requests, out of which some requests I want to be answered by the original server. So, I've written mocks for the requests (host+path combinations) I want to be mocked and set allowedUnmocked = true. Now, I need to put .log(console.log) statement on every nock, so that I can see, at the runtime which all requests are being addressed by the nock and if I'm missing out a nock for any request.\nThanks for explaining that :)\n\nExactly!! That's why asking for a global flag like feature for a nock setup, which allows nock to run in a verbose mode (i.e. display whatever match/unmatch it is going through) whenever required.\n\n\ud83d\udc4d \nOkay, so let's support:\n\nAn env var, probably something like NOCK_MATCH_VERBOSE or NOCK_LOG_MATCHING.\nA global log function, which I guess could be cumulative with the per-scope logger.\n\nHuh, I just looked at the code for scope. The default log function is require('debug')('nock.scope'), so it seems like it's already possible to globally log from an env var through the debug module.\nCould you try setting DEBUG=nock.scope and running your tests?\nIf that does work, a PR to add it to the documentation would be really welcome!. Works for me!. Not sure! That's strange\u2026. Travis doesn't seem to be running. Sure. I think I'll use cleanup_after_each.. Something odd is happening with this test. I thought it was passing when I opened this. Now I can't get it to pass at all.\nIt's not very clear from the comments inside the call to define() what is actually intended to be tested here.. I wonder if this is possible by calling enableNetConnect('localhost'), maybe from the nockBack callback.. It would be nice to pass options into nockBack.\nThe maintainers are currently focused on working on other things, see #1404 and #1441. But we sure can help review pull requests and help if you get stuck in some way.. I'd like to get started on pulling in the proposals! Any objection to merging this?. Hi!\nI've been doing some work on proposing some new lifecycle methods in #1474 (and #1441 before that). In #1441 there was discussion about adding a nock.assertMocksUsed() function which would assert that all mocks have been satisfied.\nSee https://github.com/nock/nock/blob/e644ff350de214823cf80d902df335e179da3928/rfcs/NOCK-001.md#analysis, where I talk about the current way to do this being scopes.forEach(scope => scope.done()). That wouldn't work for the nockBack case, though, since you probably don't have the scopes handy. I think instead you'd need to check that nock.pendingMocks() is empty.. Hi! Thanks for raising this.\nIt sounds like you\u2019re asking to delay requests that happen to fire out of the pre-determined sequence. Is that correct? What does that accomplish / make possible in your test suite?. > Having the recordings appear in an incorrect order makes it very hard to impossible to verify them.\nAh, that's really helpful to understand.\nIs it necessary that the requests delay when they are out of order, or would it be sufficient to fail if they are out of order?\nYours is an unusual process! It makes sense that you need the requests in order. Since I've never encountered this kind of use case before I'm trying to think of how this would generalize to other scenarios.. I'd love to find a way to do this on top of some kind of lifecycle hook. To give you an idea of what I mean, consider filteringRequestBody(). This allows custom code to run during the process of matching up requests with mocks. It's not async, but if it were, it would be possible to conditionally delay a request based on some other state.\nThere is also a delay() function, though that's for unconditional delays.\nWhat if there was a new hook that ran after a request has matched, but before the header is sent? Or, if it were possible to call .delay() with a promise or an async function, and the request interceptor waits for that promise to resolve before responding with the header and body? (It could also reject with a timeout.)\nThis would be a place where conditional delay and timeout logic could be injected. nockBack already has an after hook that lets you manipulate the scopes after the fixtures are loaded, so .delay() could be called there. There might be a need for some external bookkeeping, but I think that could be done cleverly by decorating the scopes with an order-of-construction counter, either internally using the after hook.\nEven if we do add the sequencing functionality into nock or nockBack, I like the idea of building it in terms of a more generic building block. I think building blocks will be easier to reason about and test, and consequently the high-level functionality will be more reliable.\nIn the past this library has evolved organically by a lots of small contributions that carved out individual use cases. Moving forward I'd like to guide its new growth in a more modular way.\nI'm not totally convinced this is a widespread use case, though either way, I think trying to reason about this in terms of hookable functionality is a good place to start.. Huh, this sounds like a similar issue to #529. I wonder if the cause might be related.. ^^ Since scope is not defined, this line caused a ReferenceError, which erroneously caused the test to pass.. Makes sense to me! I didn't realize it wasn't in there. It should definitely get run with npm run test.. Looks like it is getting run with npm test!. npm run unit: we sure should! Hahaha.\nI'm inclined to run npm run coverage in after_script rather than after_success. Coverage data is still useful, even if a couple unit tests fail or a lint rule fails.. It's a bit difficult to understand this double conditional expression. Would it be clearer as an if () ... else if () ... else?. Should the prefix be applied to the subject line?. What would be an example of a scope for this project?. It's not clear how this test is supposed to be different from the one before it. Absent a reason to keep it, I removed it.. It looks like this is intended to fall through to the real server. Could you add assertions that match the body and/or status code to what the server returns?. Assigning to exports does not do anything.. isMatch is always assigned in the final else block if not before.. We have already checked that requestBody is truthy.. The String function takes one parameter.. Gotcha, I didn't realize 4.x was supported.. Sure, makes sense!. It looks like this is a known bug in Prettier. Hopefully it stabilizes. prettier/prettier#1510. In the tests is one of the most likely places a no-console could be left and that's why we have a linter :)\nI guess this may have been put here because lint runs before tests. Perhaps it should be move to after tests, or else a separate script should be added that allows running just the tests.. Yea, I think that's what cancelation is intended to do, e.g. when someone pushes a new commit while the build is in progress.. fin[0] is often 0, though when it isn't, this number is wrong. 1 second is 1e3 milliseconds.. That's fine; I guess I find them about equally understandable.. In my experience it's harder to tell it's correct. I don't feel strongly, though.. This test no longer hits the network.. Yea, I agree\u2026 I removed it the first time around, but now lint is complaining.\nIt looks like it can be turned off for assignment expressions: https://eslint.org/docs/rules/prefer-destructuring\nI'll give that a shot.. It's very strange! At first I thought perhaps the new test exposed a behavior we didn't know about, though the old test does seem to be working fine.\nI wonder if there is an interop issue with got. Could it be retrying automatically?. Sure, that makes a lot of sense. The principle I'd been taking here is trying to remove specific domain names when the test doesn't care.\ntest.nock makes me wonder if it's being treated specially by the code in some way. It looks like .test is intended for this, so how about using example.test to make it clear that this is an arbitrary hostname?. This looks like an error I made before; this test shouldn't be async. This is important because tap will auto-end async tests; it's important the test is done when control reaches the end and the promise resolves.. This assertion was changed because the old one does not make sense. 57 is the length of the file; 20 is its unzipped length. The old test would have passed without the content-encoding header. The point of sending the header is to signal to the client that the content should be unzipped on receipt.. This test was removed.. This second request doesn't seem necessary for the test and was removed ^^. This duplicates a test just above (\"Same URI\").. Huh, I always used it in CJS modules though not in ES6 modules. That could be an obsolete practice, though. Not sure!\nI found this which doesn't seem conclusive, but suggests it's still doing something: http://imaginativethinking.ca/what-the-heck-is-node-modules-strict-by-default/. Yes, exactly. I'm not sure what to make of it.. I think these try/catch should be removed so those conditions will just throw. What do you think?. t.end() will happen automatically on tests with async.. These tests moved.. This is a new test.. Can this be done with { rejectUnauthorized: true } passed to got instead?. For what it's worth, right now we're already crashing if it's missing, though we do accept an empty string.. I think Prettier wants them all with dashes. It's cool it's configurable, though!. Yea, that's a good idea. It runs as part of the main tests right now.\nAlso I wonder if we could run lint after tests, or in parallel with, instead of before. I appreciate seeing the lint errors separately though it would be nice if my tests ran too, and anything we can do to shorten the iteration cycle is good.. How does running it before reduce the time?. Ahh gotcha. Yea, I think it's worth slowing down lint failures in order to get test results that otherwise won't run.. Ugh, I made this change in the wrong branch. Going to reset it.. This one is from Shields :)\njs\n    nock('https://api.github.com')\n      .get('/repos/atom/atom/license')\n      .reply(200, {\n        license: 'MIT',\n      }). It sounds like a hostname made up for testing :). I made it example.com since usually our users will be intercepting requests for real hosts.. Ha! I guess it was testing a malformed response. I'll paste in the right thing.\nI think using a project that isn't nock is helpful because self-referential examples tend to be confusing. If Shields is giving an example of an npm version badge, e.g., it's confusing if that example badge is showing the version of the npm package, because the nouns have suddenly gotten all mixed up. It's better to use a popular package. (I've been meaning to write a blog post about this, but haven't gotten around to it.)\nIt's not quite as bad here, though I think it's still better to pick a well-known project that isn't nock.. ref: https://github.com/nock/nock/blob/3dbfdee4dbb827a4e542e02474220104810a8432/lib/request_overrider.js#L184. Added!. After you rebase, you should get a note in CI about whether code coverage changed. I think the way this is written \u2013 a series of conditionals \u2013 it will be hard to cover all of it. Do we ever pass a non-string, for example?\nI wonder if this could be simplified and inlined in the constructor where it's used:\njs\n!uri.startsWith('*') && !uri.startsWith('/'). Mocked request tests should use a fake hostname (see #1351). Could you change this from www.google.com to example.test?. Yea, see https://github.com/nock/nock/pull/1391#discussion_r250322054; it's sometimes a regex.\nProbably that question will come up again and deserves a comment in the code.. Apologies for not thinking of this sooner; this thought just came as I was reading the new test.\nI wonder, do we really want to have more than one way to do this? Should these both be correct?\njs\n  const scope = nock('http://example.test')\n    .get('something.json')\njs\n  const scope = nock('http://example.test')\n    .get('/something.json')\nI feel that nock is hard to use and feel really strongly about improving usability, so I'm 100% aligned on the intent of the PR.\nWould it be better to codify that the leading slash is required by throwing a really clear error message at the time of the call? Basically replacing\njs\nuri = `/${uri}`\nwith something like\njs\nthrow Error(\"Non-wildcard URL path strings must begin with a slash (otherwise they will not match anything)\")\nYou could debate whether that's a new feature or a breaking change (I think a new feature, since it's a change in incorrect usage), though either one is fine for 11.0.. JavaScript is my first language these days, but I'm a polyglot and there are some really wonderful gems in The Zen of Python which I think the JS world could really benefit from.\n\nErrors should never pass silently.\nThere should be one-- and preferably only one --obvious way to do it.\n\n(python -c 'import this'). We could read the text file in fixtures; that may be more appropriate.. Using the fixture seems cleaner. It\u2019s what they\u2019re there for!. Bye, encodings-are-us. This is a new test.. These are rewrites of the existing tests.. Renamed to test_allowunmocked_https.js.. Is there some API and/or source code reference for this translation?. Am I correct this is this a Node-10-or-later feature? I wonder, is there harm in our supporting this in earlier versions of Node? I feel like that could lead to confusing disparity between nock and real ClientRequest. Perhaps we should conditionally support the new form when running in Node 10+.. It would be good to include tests to cover the rest of this function. It might be tempting to write these as unit tests, though we prefer to write functional tests via the public API because it helps ensure that all the code in the library is demanded by a real use case.\n\n. I guess the question is: what happens if you're in Node 8 and you pass a string to a real ClientRequest? The behavior from ours should be the same.. \ud83d\udc4d \n@gr2m Since this is an internal Node API I think it makes sense to vendor in this function. Do you know if we need to acknowledge it somewhere besides what's done here, in order to comply with the license?. So we don't end up with three copies of this function, could you extract it to a helper function in common.js?. This is the new test.. This is the new test.. Hmm yea it does seem like it wants an argument. nock.assertAllDone() and scope.assertDone() could work. It's a little long but maybe that's fine.\nFor someone encountering the test code for the first time, it's definitely clearer than done().. Are there any other mock libraries with interfaces you like? I'm curious to compare. I looked at Sinon, but it doesn't really have assertion methods like this.\n\"Done\" isn't the clearest either. Really what we want to say is \"expectations fulfilled\" or \"requests made\" or \"mocks consumed.\" I'm 100% agreed that clear long names are better than short names, though I don't want the names to be longer than necessary.. Another option is nock.verifyAll() / scope.verify().\nI don\u2019t think it has the same problem as assert of wanting an argument.\nOr: nock.verifyAllRequests() / scope.verifyRequest(). I'll keep thinking about it too.. This clears a ReDOS vulnerability.. assertAllInterceptorsUsed() seems good. Though is it scopes or interceptors we're talking about? Maybe assertAllMocksUsed() is better.\nWe do have nock.pendingMocks(), so it's possible if people want control of the assertion they can add it.\nThough I would rather not write my own assertion here. It ends up being boilerplate code that has to be replicated across each library. Nock is in a good position to write helpful error messages. Down the line you could imagine saying something more detailed like, \"GET http://example.test:80/ expected two calls but only got one\", which a caller wouldn't be able to do. I don't like adding unnecessary APIs, though I think nock is the place where this assert function should be implemented.. I changed nock.assertAll() to nock.assertAllMocksUsed() and scope.assert() to scope.assertMocksUsed().. It\u2019s a good question. If the names are the same I think it\u2019s too likely someone will call the wrong one. Since scope.done() was the way to do this for a long time, I don\u2019t want to provide two different ways which are as confusable as scope.assertMocksUsed() and nock.assertMocksUsed(). Especially if those two functions are doing different things.. Another option: scope.assertUsed(), nock.assertAllMocksUsed().. Hard-code the default mode instead of inferring it from nockBack.currentMode.. The scopesLoaded parameter is not used.. Clarify using an arrow function.. Since we now reset the nockBack state before each test, a beforeEach hook is needed here.. What I meant was, this interface is passable; it's not confusing but it's not ideal, either. I'll say that instead.. On reflection, thanks for the nudge to keep the language sounding positive. \ud83d\udc4d . Agreed that assertMocksUsed() is better than assertAllMocksUsed(). \ud83d\udc4d \nRight, my concern is offering two identically named methods which act on different scopes. Most developers won't digest the whole API, they'll just absorb the bits they need. If they know the method is assertMocksUsed(), they could get unexpected results if they don't realize that calling it on scope will have a more limited effect than calling it on nock.\nHaving reflected on this a while, I'm okay with naming them both assertMocksUsed(). However I prefer your suggestion of nock.assertMocksUsed() for the global one and scope.assertScopeMocksUsed() for the limited one:\n\nIt encourages people to use the global nock.assertMocksUsed() where possible.\nIt makes the limited scope of scope.assertScopeMocksUsed() 100% clear.\nIt helps clarify that the intent of scope.assertScopeMocksUsed() is for cases which can't be handled using the global method.. We could also leave this as a \"draft\" for a bit to let it bake for a while before we accept it. Or go ahead and accept it now. I don't feel strongly either way. If there are no objections let's merge it as a draft.. updated!. I added a sentence here about nockBack that comes from the discussion at #1476.. \n",
    "filipedeschamps": "@pgte like this:\njs\n            nock('http://ww.cantconnecttothis.addres/')\n                .get('feed')\n                .replyWithError({ \n                    code: 'ENOTFOUND',\n                    errno: 'ENOTFOUND',\n                    syscall: 'getaddrinfo',\n                    hostname: 'www.skdhsdk.com'\n                });\nDoesn't seems to work.\n. ",
    "1999": "There's a problem with replyWithError: it doesn't support .delay option. I mean that mocked requests with replyWithError reply immediately with an error regardless of the delay value.\nafaik this is also not tested: https://github.com/pgte/nock/blob/049799c35f388d7fbf0a614e1f956a8b5eb7f63d/tests/test_intercept.js#L2863\n. @pgte I can also PR this if you think that's unexpected behaviour\n. @pgte sorry, I've just re-run tests and acknowledged that everything is okay. The problem was in old nock version used in webdriverio.\n. ",
    "asafm": "What do you mean by disable net connect? Can you give a simple code example?\n\u200f\u05d1\u05ea\u05d0\u05e8\u05d9\u05da \u05d9\u05d5\u05dd \u05e9\u05dc\u05d9\u05e9\u05d9, 24 \u05d1\u05e0\u05d5\u05d1\u05de\u05d1\u05e8 2015, Pedro Teixeira notifications@github.com\n\u05db\u05ea\u05d1:\n\nClosed #415 https://github.com/pgte/nock/issues/415.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pgte/nock/issues/415#event-473072586.\n. \n",
    "aromatt": "Yep, Request does not use encodeURIComponent() for this; they use:\nnode\n  return str.replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\nwhich is actually mentioned as a suggestion in the doc for encodeURIComponent(), \"to be more stringent in adhering to RFC 3986.\"\n. FWIW, until this is fixed you should be able to get around this by encoding the parens yourself and using the new encodedQueryParams flag:\nnode\nnock('https://www.google.com', { encodedQueryParams: true })\n  .get('/test1')\n  .query({ q: '%28nodejs%29' })\n  ...\nSee this test: https://github.com/pgte/nock/blob/3b71d8689315ae4d81507d1a27ea3f3448bfa773/tests/test_intercept.js#L4205\nIn general, to be sure your query params are always encoded the way Request does it, you could run all your query params through the snippet in my previous comment, and use { encodedQueryParams: true }.\n. @michaelmosher I think it should.\n. ",
    "michaelmosher": "Thanks for the thorough response, @aromatt. Just to be clear, are you saying that Nock is likely to match Request's behavior in the future? I don't mind the workaround (and TBH it's better than the workaround I was expecting to have to do), I'm just curious. \n. ",
    "SaidTayebi": "Yes, when I record and create the JSON files, I want to override the files every time I record again\n. ",
    "cyberthom": "I am having the same issue.\nIf you download the latest package you can see that the extraneous package changelog, which shrinkwrap complains about is actually included in the tarball. \nThis is not a bug in npm, this is a problem with the published package. \nhttp://registry.npmjs.org/nock/-/nock-3.3.2.tgz\n. (This might help: https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package)\n. ok I did some more investigation. Turns out this might be a bug in npm directly but not when installing modules but rather when packaging them up. \nI have run npm pack with various different patterns to explicitly try and exclude the changelog module without any luck. From my understanding there is no reason npm should include it in the first place though even with the current configuration. \nThe only way I could get this to not be included in the package is to literally remove the dependency. It looks like it's a module that prefers to be installed globally anyways. \nWhat is your publishing flow? Is this something that could be run in dev machines or do you publish as part of a CI pipeline? \nFor reference I'm on npm 2.14.4\n. ",
    "fiznool": "Unfortunately this is still an issue with nock 3.4.0.\nNotice the changelog package which is bundled with the tarball...\n``` bash\n\u279c  /tmp  wget http://registry.npmjs.org/nock/-/nock-3.4.0.tgz\n--2015-12-15 13:44:06--  http://registry.npmjs.org/nock/-/nock-3.4.0.tgz\nResolving registry.npmjs.org (registry.npmjs.org)... 185.31.19.162\nConnecting to registry.npmjs.org (registry.npmjs.org)|185.31.19.162|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 541202 (529K) [application/octet-stream]\nSaving to: \u2018nock-3.4.0.tgz\u2019\nnock-3.4.0.tgz                        100%[==========================================================================>] 528.52K  3.27MB/s   in 0.2s   \n2015-12-15 13:44:06 (3.27 MB/s) - \u2018nock-3.4.0.tgz\u2019 saved [541202/541202]\n\u279c  /tmp  tar xzvf nock-3.4.0.tgz \npackage/package.json\npackage/.npmignore\npackage/README.md\npackage/index.js\npackage/assets/reply_file_1.txt\npackage/assets/reply_file_2.txt.gz\npackage/.travis.yml\npackage/CHANGELOG.md\npackage/.istanbul.yml\npackage/coverage/coverage.json\npackage/coverage/lcov-report/prettify.js\npackage/coverage/lcov-report/sorter.js\npackage/coverage/lcov-report/base.css\npackage/coverage/lcov-report/index.html\npackage/coverage/lcov-report/nock/index.html\npackage/coverage/lcov-report/nock/index.js.html\npackage/coverage/lcov-report/nock/lib/match_body.js.html\npackage/coverage/lcov-report/nock/lib/back.js.html\npackage/coverage/lcov-report/nock/lib/delayed_body.js.html\npackage/coverage/lcov-report/nock/lib/index.html\npackage/coverage/lcov-report/nock/lib/intercept.js.html\npackage/coverage/lcov-report/nock/lib/common.js.html\npackage/coverage/lcov-report/nock/lib/mixin.js.html\npackage/coverage/lcov-report/nock/lib/recorder.js.html\npackage/coverage/lcov-report/nock/lib/request_overrider.js.html\npackage/coverage/lcov-report/nock/lib/scope.js.html\npackage/coverage/lcov-report/nock/lib/socket.js.html\npackage/coverage/lcov-report/prettify.css\npackage/coverage/lcov-report/sort-arrow-sprite.png\npackage/coverage/lcov.info\npackage/examples/_log.js\npackage/examples/delay-connection.js\npackage/examples/delay-response.js\npackage/examples/net-connect-default-no-mock.js\npackage/examples/net-connect-default-other-mock.js\npackage/examples/net-connect-disabled-different-host.js\npackage/examples/net-connect-mock-same-host-different-path.js\npackage/examples/socket-delay-abort.js\npackage/examples/socket-delay-no-abort.js\npackage/.jshintrc\npackage/lib/back.js\npackage/lib/common.js\npackage/lib/delayed_body.js\npackage/lib/intercept.js\npackage/lib/match_body.js\npackage/lib/mixin.js\npackage/lib/recorder.js\npackage/lib/request_overrider.js\npackage/lib/scope.js\npackage/lib/socket.js\npackage/.coveralls.yml\npackage/tests/test_url_encoding.js\npackage/tests/test_browserify.js\npackage/tests/test_common.js\npackage/tests/test_data.js\npackage/tests/test_dynamic_mock.js\npackage/tests/test_basic_auth.js\npackage/tests/test_https_allowunmocked.js\npackage/tests/test_intercept.js\npackage/tests/test_ipv6.js\npackage/tests/test_isomorphic_fetch.js\npackage/tests/test_net_connect.js\npackage/tests/test_back_2.js\npackage/tests/test_nock_off.js\npackage/tests/test_back.js\npackage/tests/test_recorder.js\npackage/tests/test_aws_dynamo.js\npackage/tests/test_redirects.js\npackage/tests/test.js\npackage/tests/test_request_promise.js\npackage/tests/test_s3.js\npackage/tests/test_encode_querystring.js\npackage/tests/fixtures/browserify-script.js\npackage/tests/fixtures/goodRequest.json\npackage/tests/fixtures/wrongUri.json\npackage/tests/browserify-public/browserify-bundle.js\npackage/tests/browserify-public/.gitkeep\npackage/tests/browserify-public/index.html\npackage/node_modules/changelog/package.json\npackage/node_modules/changelog/.npmignore\npackage/node_modules/changelog/README.md\npackage/node_modules/changelog/LICENSE\npackage/node_modules/changelog/Gruntfile.js\npackage/node_modules/changelog/.travis.yml\npackage/node_modules/changelog/CHANGELOG.md\npackage/node_modules/changelog/bin/changelog.js\npackage/node_modules/changelog/bin/examples.sh\npackage/node_modules/changelog/examples/express.png\npackage/node_modules/changelog/examples/gulp.markdown\npackage/node_modules/changelog/examples/node.json\npackage/node_modules/changelog/lib/changelog.js\npackage/node_modules/changelog/lib/cli.js\npackage/node_modules/changelog/lib/log.js\npackage/node_modules/changelog/lib/datasrc/github.js\npackage/node_modules/changelog/lib/datasrc/npm.js\npackage/node_modules/changelog/lib/output/markdown.js\npackage/node_modules/changelog/lib/output/terminal.js\npackage/node_modules/changelog/lib/util/bullet.js\npackage/node_modules/changelog/lib/util/userAgent.js\npackage/node_modules/changelog/lib/util/versionFilter.js\npackage/node_modules/changelog/.idea/libraries/changelog_node_modules.xml\npackage/node_modules/changelog/.idea/.name\npackage/node_modules/changelog/.idea/dictionaries/dgreene.xml\npackage/node_modules/changelog/.idea/dictionaries/dylan.xml\npackage/node_modules/changelog/.idea/encodings.xml\npackage/node_modules/changelog/.idea/jsLibraryMappings.xml\npackage/node_modules/changelog/.idea/changelog.iml\npackage/node_modules/changelog/.idea/misc.xml\npackage/node_modules/changelog/.idea/modules.xml\npackage/node_modules/changelog/.idea/scopes/scope_settings.xml\npackage/node_modules/changelog/.idea/vcs.xml\npackage/node_modules/changelog/.idea/workspace.xml\npackage/node_modules/changelog/templates/changelog.md\npackage/node_modules/changelog/templates/readme/api.md\npackage/node_modules/changelog/templates/readme/cli.md\npackage/node_modules/changelog/templates/readme/how-it-works.md\npackage/node_modules/changelog/templates/readme/screenshots.md\npackage/node_modules/changelog/templates/readme/tests.md\npackage/node_modules/changelog/test/changelog.test.js\npackage/node_modules/changelog/test/github.test.js\npackage/node_modules/changelog/test/npm.test.js\npackage/node_modules/changelog/test/versionFilter.test.js\npackage/node_modules/changelog/test/fixtures/github-dylang-changelog.json\npackage/node_modules/changelog/test/fixtures/npm-changelog.json\n```\n. ",
    "harlantwood": "+1\n. ",
    "outsideris": ":+1: Thanks.\n. ",
    "sprzybylski": "yep, thats it, thank you\n. ",
    "Cordazar": ":+1:\n. ",
    "jdalton": "For help with what's changed check out the lodash 3.0 release notes, changelog entry,\nand lodash-migrate.\n. BTW In lodash v4 (due on Jan 12) this behavior is changed so that .each and .eachRight will trigger an implicit .value().\n. ",
    "yinrong": "I'm currently manually changing the generated code.\n. @pgte yes, you're right. Firstly, I'm trying to make a change to deep-extend https://github.com/substack/node-deep-equal/pull/30\n. I have create a new module based of deep-equal. Can this be merged now?\nI suppose the pull request may not be merged soon.\n. @pgte please check again\n. @pgte done\n. ",
    "ddragosd": "I also bumped into the same issue today. I was recording a file download scenario.\nThe issue is with this line:  ret.push(JSON.stringify(responseBody));. An option to send back the response as a Buffer would be nice for such use cases:\njavascript\nret.push( 'Buffer.from(' + responseBody + ',\"hex\")');\nWDYT ?\n. ",
    "jo": "What is the .query({}) for?\n. @pgte does query(true) solve the original issue?\n. ",
    "janl": "<3\n. ",
    "massimocode": "Sorry to reopen the issue. Thanks for clarifying the behaviour of replyWithError. Do you think you might clarify the behaviour of the reply callback as well? I can envision people wanting to use the node-style callback function to raise an error on the request, only to find it gets JSON serialized as a 500 server response. If it's a change that can't be made now because of existing code that might break, then at least this behaviour could be clarified as well? Thanks\n. ",
    "jeffomatic": "Thanks for the super-quick review/merge!\nOn Wed, Dec 23, 2015 at 4:01 AM, Pedro Teixeira notifications@github.com\nwrote:\n\n@jeffomatic https://github.com/jeffomatic thanks!\nLanded on v3.6.0.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pgte/nock/pull/430#issuecomment-166875566.\n. \n",
    "bigomega": "Found a workaround for this. Have a _ajax-setup.js in your test folder\n``` javascript\nimport $ from 'jquery'\n$(document).ajaxSend((event, jqxhr, settings) => {\n  settings.url = 'http://0.0.0.0' + settings.url;\n})\n```\nand test with\njavascript\nnock('http://0.0.0.0')\n.get('/posts/')\n.reply(200, {data: \"hello\"})\n. ",
    "danosaure": "I modified my code to query:\ndocument.location.host + '/my/path';\nand use global.document.location.href = 'http://fake.host/'; in my tests.\n. ",
    "mlippens": "Anyone has an idea how to do this when using isomorphic-fetch (a browser fetch implementation) without prefixing every request with the hostname? I'd like not to have to add this in every ajax request I have to do just for the sake of the tests.\n. ",
    "richmeij": "While not ideal, as a workaround I turned it around and prefixed the urls only when testing.\nFor this, I check NODE_ENV, which is set to test when testing.\nBrief example:\n`` js\nconst testing = process.env.NODE_ENV === 'test';\nconst apiUrl =${testing ? 'http://localhost' : ''}/api`;\nfunction getStuffFromApi() {\n  return fetch(apiUrl, ...)\n}\n```\nThis way I can always use nock like this:\njs\nnock('http://localhost')\n  .get('/api')\n  .reply(200, {data: 'hello'})\n. ",
    "danriti": "I ran into this exact problem and solved it by using the fetch-mock library instead of nock:\nhttps://github.com/wheresrhys/fetch-mock/. I ran into this exact problem and solved it by using the fetch-mock library instead of nock:\nhttps://github.com/wheresrhys/fetch-mock/. ",
    "kudresov": "You should be able to monkey patch the library. It's not great to pollute your code with testing conditions, so I would much rather use the approach below.\nIf you are using Jest you could do something like this:\n```js\nconst fetch = require.requireActual('isomorphic-fetch');\nmodule.exports = (url, config) => {\n  return fetch('https://localhost' + url, config);\n};\n``\nand put it intomocks\\isomorphic-fetch.js` Jest then automatically replaces all requires (or imports) for this node module. \nIn other test frameworks you could use something like rewire. ",
    "mrself": "Can node-nock intercept ajax calls? As I read It does not. But from these comments it looks like can. Does it?. ",
    "FuzzySockets": "Ok -- figured it out.  After digging through the docs a bit more I found the .log function.  I chained my nock config like so\nnock('https://test.com')\n    .log(console.log)...\nand it turns out the request bodies were not matching.\n. ",
    "Hyjaz": "@FuzzySockets so what did you do? How did you test, your API? Please let me know, because I am having the same issue right now.. @hayderma this is to what I changed it to:\n```\n it('Should POST /user/addskill', function(done){\nnockRequest\n.post('/user/addskill',{skill:'accountant'})\n.reply(201,{\n  'status':201,\n  'message': '201: Successfully added skill'\n});\nrequest\n.post('/user/addskill')\n.set('content-type','application/json')\n.send({skill:'accountant'})\n.end(function(err, res){\n  expect(res.body.status).to.equal(201);\n  expect(res.body.message).to.equal('201: Successfully added skill');\n  done();\n});\n\n});\n```\nIt was because of the content-type I believe. I can't remember for certain.. ",
    "annyh": "Using the request http library,\n    request\n      .patch(/v1/subjects/ + subject_id)\n      .send(formObj)\n      .end((error, res) => receiveAndToggle(error, res, dispatch))\n. ",
    "solsend2l": "Interesting! See my related issue #447\n. nice, ty!\n. Agreed totally! This PR isn't ready to be merged yet...\n. Totally viable as well. I don't have a good global vision of the lib, so I wasn't sure which approach was best. This seemed slightly hackish/bandaid to me also..\n. ",
    "cody-greene": "It might make more sense to only emit the abort event, but in practice the http module does emit an ECONNRESET error after aborting. Should nock deviate from the actual behavior?\n``` javascript\n'use strict';\nvar http = require('http')\nvar nock = require('nock')\nvar test = require('tap').test\nfunction assertEvents(assert, done) {\n  var gotAbort = false\n  var req = http.get('http://localhost:16829/status')\n    .on('abort', function () {\n      // Should trigger first\n      gotAbort = true\n    })\n    .on('error', function (err) {\n      // Should trigger last\n      assert.equal(err.code, 'ECONNRESET')\n      if (gotAbort) done()\n    })\n  process.nextTick(function(){ req.abort() })\n}\ntest('[expected] req.abort() should cause \"abort\" and \"error\" to be emitted', function (assert) {\n  var server = http.createServer()\n    .on('request', function (req, res) {\n      setTimeout(function () {\n        res.statusCode = 204\n        res.end()\n      }, 500)\n    })\n    .listen(16829)\n  assertEvents(assert, function () {\n    server.close()\n    assert.end()\n  })\n})\ntest('[actual] req.abort() should cause \"abort\" and \"error\" to be emitted', function (assert) {\n  nock('http://localhost:16829')\n    .get('/status')\n    .delayConnection(500)\n    .reply(204)\n  assertEvents(assert, function(){ assert.end() })\n})\n```\n. ",
    "deoxen0n2": "That was fast. Thanks you.\n. ",
    "BinChang": "I forgot to update the package dependency. It should work now, Please take another look. \n. ",
    "alekbarszczewski": "Hmm, the problem with coverage is here: https://coveralls.io/builds/4824108/source?filename=lib%2Frequest_overrider.js#L461. I've coded it to be sure that both response.headers and response.rawHeaders will be evaluated. But it seems that interceptor.headers are identical to interceptor.rawHeaders, but in array (instead of object) representation. Is that true? If yes then I can change:\njs\nif (typeof value === \"function\") {\n  // Check if header has not been already evaluated. Evaluate it otherwise.\n  if (evaluatedHeaders.hasOwnProperty(key)) {\n    response.rawHeaders[rawHeaderIndex + 1] = evaluatedHeaders[key]\n  } else {\n    response.rawHeaders[rawHeaderIndex + 1] = value(req, response, responseBody);\n  }\n}\nto\njs\nif (typeof value === \"function\") {\n  response.rawHeaders[rawHeaderIndex + 1] = evaluatedHeaders[key];\n}\n. @pgte Done, squashed additional commit, thanks.\n. ",
    "wprater": "compression was on for the express app, turned this off in the test ENV and it was fixed.  does not explain why only sometimes the response was not being decoded tho.  the header transfer-encoding': 'chunked'.  will close this issue, unless you think there is a bug in nock, feel free to re-open.\n. maybe this was a regression of https://github.com/pgte/nock/issues/444 ?\n. ",
    "richardscarrott": "@wprater digging up an old one here but I'm experiencing the same issue with APIs which return 'Content-Encoding': 'gzip' and 'Transfer-Encoding': 'chunked' -- I'm having to post process it like this which doesn't feel correct:\n```js\nconst { ungzip } = require('node-gzip');\ntry {\n  if (Array.isArray(def.response)) {\n    def.response = JSON.parse(\n      (await ungzip(Buffer.from(def.response.join(''), 'hex'))).toString(\n        'utf-8'\n      )\n    );\n  }\n} catch (ex) {\n  console.warn('Failed to decode response');\n}\n```\ncc @gr2m. @gr2m I've created an issue here https://github.com/nock/nock/issues/1212, thanks. FYI, this is the complete afterNock function I'm using\nts\nconst parseNockDefs = (\n  nockDefs: (nock.NockDefinition & { rawHeaders: string[] })[]\n) => {\n  return nockDefs.map(def => {\n    try {\n      const headers = def.rawHeaders.reduce<Dictionary<string>>(\n        (acc, curr, i, arr) => {\n          if (i % 2 === 0) {\n            acc[arr[i].toLowerCase()] = arr[i + 1].toLowerCase();\n          }\n          return acc;\n        },\n        {}\n      );\n      if (\n        headers['transfer-encoding'] === 'chunked' &&\n        headers['content-encoding'] === 'gzip' &&\n        Array.isArray(def.response)\n      ) {\n        def.response = JSON.parse(\n          gunzipSync(Buffer.from(def.response.join(''), 'hex')).toString(\n            'utf-8'\n          )\n        );\n        def.rawHeaders = Object.entries(headers).flatMap(([key, value]) => {\n          if (key === 'transfer-encoding' || key === 'content-encoding') {\n            return [];\n          }\n          return [key, value];\n        });\n      }\n    } catch (ex) {\n      console.warn('Failed to decode response');\n    }\n    return def;\n  });\n};. ",
    "mickaeltr": "Thanks\n. Thanks!\n. ",
    "joseph-norman": "After what you mentioned, I double checked the client code - looks like a POST was actually being sent (typo...typical).\nThanks anyway, I'll close it\n. ",
    "owiber": "Since you specified an array for the value of twitter_ids, it's expecting the query parameter to be twitter_ids[]=.\n. Also not sure if it's valid to have a path in the scope. It maybe should just be protocol + host.\n. Here's an adjusted intercept callback test that demos the issue:\n``` js\ntest('match domain using intercept callback', function (t) {\n  var validUrl = [\n    '/cats',\n    '/dogs'\n  ];\nnock('http://www.interceptexample.com')\n    .get(function(uri) {\n      return validUrl.indexOf(uri) >= 0;\n    })\n    .reply(200, 'Match intercept')\n    .get('/cats')\n    .reply(200, 'Match intercept 2');\nmikealRequest.get('http://www.interceptexample.com/cats', function(err, res, body) {\n    t.type(err, 'null');\n    t.equal(res.statusCode, 200);\n    t.equal(body, 'Match intercept');\n// This one should match the second .get()\nmikealRequest.get('http://www.interceptexample.com/cats', function(err, res, body) {\n  t.type(err, 'null');\n  t.equal(res.statusCode, 200);\n  t.equal(body, 'Match intercept 2');\n  t.end();\n});\n\n});\n});\n```\n. ",
    "sethen": "Even if I changed it to be query({ twitter_ids: '2,3,4,5' }), I get the same result.\n. I am going to close this... After messing with the test a little longer the issue seemed to resolve itself.  I will chalk this one up to a malformed request on my end.\n. ",
    "gibbitz": "For googlers with this issue. I noticed that the service protocol + host (passed in the constructor) ended with a trailing slash and the path (passed in get() in my case) began with a slash when the requests matched. If they are written to join without a double slash, it won't match. When the path is deconstructed this is not obvious to those of us who are assuming how it may work under the hood (incorrectly in my case I guess). Hope this helps someone.... ",
    "eddieantonio": ":+1: My API has tests depending on status messages; this would be a great addition!\n. ",
    "devang-kredx": "+1\n. ",
    "purezen": "+1\n. @ssbrewster would like to work on #469. Need that feature.\nCan you give me some hints?\n. @pgte Thanks for the amazing project!\nMy organisation is using nock and am keen to volunteer for it. \nHave opened a PR - https://github.com/node-nock/nock/pull/582 and am working on enabling support for statusText.\nWould like some help getting acquainted with the project.\n. It looks like nock doesn't support this atm. https://github.com/node-nock/nock/issues/469\nIs there any workaround?\n. Would like this reviewed. @pgte ?\nAlso, don't know why the build is failing.\nSays something like no environment variables set. Is this due to some outdated dependency?\n. @ierceg @kevinburkeshyp @ericsaboia @mooyoul @Limess @stormslowly @satazor\nHi all, sorry to spam you guys. I saw that you had contributed to the project recently and was hoping if you could help me here. This is regarding https://github.com/node-nock/nock/issues/469.\nI could trace the flow to a point where I could receive the additional property (eg. statusText) in the RequestOverrider.\nHowever, I am yet to figure out how these properties make it to the final response, where probably statusCode gets converted to status?\n. I think I was not completely clear when I specified how I would like to call reply()\nWhen I specified\nreply({ statusCode: 200, statusText: 'OK' })\nI rather meant\nreply({ statusCode: 200, statusText: 'OK' }, replyDataObject)\n@ssbrewster Yeah, I am trying to do it in a way that just a statusCode or an object in its place can be used.\n@ericsaboia I want to be able to access statusText as a property on the response the way status can be accessed as\nresponse.statusText just like response.status is used (for statusCode).\n. @ssbrewster Missed your earlier message. Yeah, response.statusMessage works!\n@mooyoul The api that I am calling responds with different statusTexts for the same status code (200 mostly)\n. @ssbrewster it's using it for business logic. Yeah, but right now I don't have control over the API.\n. So guys, do you feel this should be added to nock?\n@pgte labelled the original issue: https://github.com/node-nock/nock/issues/469 with feature and help-wanted.\nIf so, I would go ahead with improvements, tests..\n. ",
    "ChrisC": "+1\n. ",
    "alexkolson": "Just ran into this while testing an API with nock. When nock records, it records the current status code but doesn't appear to include the Reason-Phrase directly after it, which is what gets put into response.statusMessage in nodejs.\nIt would be awesome to be able to use nock to send a Reason-Phrase as well!\n. ",
    "vrinek": "I've grouped similar issues to a project along with a PR that seems to be abandoned but offers something similar to what you want. Please take a look into it to confirm whether a new PR should be opened or not.\n. I've added this issue to a project along with a PR that seems to be abandoned. Please take a look if that PR's scope would cover your use case.\n. @Elergy for now please commit the generated tests/browserify-public/browserify-bundle.js. I'm looking into getting rid of it somehow...\n. I assume this refers to browser requests, correct?. @BrunoQuaresma could you post a sample test that showcases the issue?. @thephilwells @lordakshaya is the response body what is being mocked or is that different as well? Could you provide a full test case (mock & request)? \n. I'm closing this one now.\n@lordakshaya if this issue persists for you, please notify me to re-open this.\n. @lordakshaya as far as I understand, Code.expect(response.statusCode).to.equal(404); passes while Code.expect(response.result.error).to.equal('Not Found'); fails.\nIf this is the case, I think response.result only exists on('data') or on('end') (see: https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_http_request_options_callback).\nCould you please verify if this is the case?. @rajdeepmatharu as far as I understand, node's http.get does not synchronously return the response. Instead it expects a callback:\njavascript\nhttp.get('http://zombo.com/', function(res) {\n    let responseHTML = res.read();\n    expect(responseHTML).toEqual('Ok');\n});\nCould you try the above and let me know if it helps?\n\n@travi thanks for the debugging journey ;-)\n. Good catch. Thanks for the contribution!\n. Published as part of v8.2.0 \ud83c\udf89\n. Hello and sorry for the late response. Please rebase on top of (or merge in) latest master as the tests are (finally) green again.\n. Hello and sorry for the lack of response. Please rebase on top of (or merge in) latest master as the tests are (finally) green again.\n. Thanks for the contribution \ud83d\ude03 \n. Hello. I just joined the org and will try to revitalise this project.\n. @craigcosmo how did you notice that it's making a real request?\nI copied the code from http://redux.js.org/docs/recipes/WritingTests.html and modified it to work with nodejs. Here's the full file that I'm using: https://gist.github.com/vrinek/ea9fcc8b4ead67b41fb1b8ce88440a4b. It does not seem to be doing a real request as it's getting the mocked response.\nAdditionally, I tried your snippet. I had to change the following:\njs\n    return fetch('http://example.com/todos')\n      .then( res => console (res) )\n      .catch( err=> console(err) )\nto this to get it to work: \njs\n    return fetch('http://example.com/todos')\n      .then( res => res.text() )\n      .then( text => console.log('text', text))\n      .catch( err=> console.log('err', err) )\n. While looking around the code, I noticed that in some instances nock is using the timers standard library of nodejs instead of the global timer functions. This may be complicating matters with sinon's fake timers.\nCan you help me reproduce this with an example test case?\n. @itsovereasy could you post how you use nock and how you make the request please?\n. Thanks for the test examples. I don't see anything obviously wrong with them.\nHow do you make the actual requests? Which library are you using?\n. Thanks for all the feedback. Next step would be to write some failing tests for axios integration with nock. Would someone like to pick that up?\n. Thanks for this one.\n. Please rebase on top of (or merge in) latest master as the tests are (finally) green again.\n. @benbuckman I'm not familiar with the tap library either (I have only used its perl sibling some time ago and wasn't much impressed).\nI'm thinking of switching to mocha/jasmine as they are more popular within the JS ecosystem. Because of this, I am a little reluctant to accept PRs on the testing suite.\n. @imran-uk are you using nock.cleanAll() inafterEach as teardown?\n. @imran-uk it are you using nock.disableNetConnect() in your setup and nock.enableNetConnect()?\n. Try adding nock.disableNetConnect() in your setup and nock.enableNetConnect() in your teardown of nock-stubbed tests. When net connect is disabled, nock complains for every non-matched request. I think that's what you want.\n. @kingchad I've briefly looked at ava before. I'm a little worried about concurrent tests and global scope.\nFor starters, I want to rewrite nock's test suite to a more comforting library (which afaik, for js is mocha+chai). Afterwards, we may start experimenting with more \"risky\" ventures to gain advantage of their features.. I agree with your point that rawHeaders should be left intact. I also commented on your PR.\nIn case this goes in, it sounds like a breaking change for a few users that may be relying on rawHeaders being lower case. I'll double-check the documentation to verify whether that was expected to be exposed or not.\n. PR merged!\n. Could you please provide a failing test? I'm having trouble reproducing this.\n. Ah, yes. I see the problem. Nock is storing the records as code (instead of objects) but is trying to load them as objects. I'm afraid that the output_objects option is broken as it's storing code in json and then trying to load it as objects \ud83d\ude1e\nI'll try to debug it and figure out when it started breaking.\nEDIT: after a quick git bisect it looks like ef870b77a31251a5a0fdb2e3eaec81bf4d3533b7 is the first bad commit for this bug. v7.5 should be the first broken and v7.4 the last working one.\n. Thanks!\n. @vinh0604 great find! Thanks!\n. > [...] maybe we should maintain a minor support branch for those versions?\nThey way I read this is \"try to back port bug fixes to early versions but drop support for new features\". \nWhen we drop support for a node version, should we be incrementing the major or minor version part? http://semver.org is not clear on this.\n. To make my proposal a bit more concrete:\nOption A: We follow node's LTS schedule up to LTS End. In other words, we drop v0.10 on 2016-10-31 and v0.12 on 2016-12-31. This will need more effort to keep things running smoothly with old versions of node.\nOption B: We follow node's LTS schedule up to Maintenance Start. In other words, we drop v0.10 and v0.12 now and v4 on 2017-04-01.\nOption C: Same as B but we keep a maintenance branch to back port bug fixes to. Essentially this is a compromise between A & B.\nI suggest we begin with Option C and move accordingly towards A or B.\nIn either case, v0.11 & v5 are to be dropped now as they're not covered by LTS, they're only transitional versions.\n. Incrementing the major version sounds like a good idea. In this case, let's:\n- Branch \"maintenance\" off nock v8.1.x\n- Drop support for v0.10, v0.11, v0.12, v5\n- Publish nock v9.0\nSounds like a good plan? (I've already created a project for this, mostly to explore github's \"Projects\" feature)\n. I tried the above with node v6.7.0 and nock v8.0.0 and what I get is:\n```\nstring ----------------------------640160139954673545871604\nContent-Disposition: form-data; name=\"test\"\ntrue\n----------------------------640160139954673545871604--\n```\nWhich versions are you using?\n. Good to know. Please let me know if you notice anything else fishy.\n. It looks like https://github.com/node-nock/nock/commit/24bb07712e8b2ee4f901c8b95f14fcb45dbdb44d is the issue in this case. The headers recorded in your fixtures are lowercase. Nock 8.1.0 keeps the original case of the headers and expects them to be that way.\nAs a quick fix, I recommend re-recording the request fixtures.\nOn the other hand (thinking out loud), HTTP headers are supposed to be case-insensitive. Maybe we should be treating them as such. EDIT: on first inspection, it looks like we're matching headers case-insensitively. I did come across https://github.com/IndigoUnited/node-gh-issues-stats/blob/master/index.js#L16 though which seems to expect the header in lowercase. I'll take a look into got integration later.\n. > Are you seeing any benefits of exact-matching?\nNot really. And for reading nock's code I think it's comparing headers case-insensitively. I'll make sure we have some tests that testify to this.\n@satazor did re-recording the fixtures help resolving the issue?\n. Cheers!\n. *Code looks good (damn autocorrect)\n. Thanks for the contribution \ud83d\ude04 \n. Published as part of v8.2.0 \ud83c\udf89\n. Currently there is no option to achieve that.\nFurthermore, the implementation of nock back's recorder seems to need the fixture's name at initialisation of the nock back block. If someone (wink wink, nudge nudge) were to implement such an option, say passing in the fixtureName as a function instead of string, that would entail a considerable rewrite of nock back's implementation.\n\nThis would be a good enhancement, I guess.\n\nI agree with you on this. We'll just have to prioritize it against other uses of our time and effort.\n. Code looks good. Thanks for the contribution!\n. Published as part of v8.2.0 \ud83c\udf89\n. Thanks for the contribution!\n. Published as part of v8.2.0 \ud83c\udf89\n. Thanks a lot for contributing to keep nock moving forward.\n. Published as part of v8.2.0 \ud83c\udf89\n. I'll assume this is just spam.\n. I assume you mean error responses like \"timeout\" and \"network unavailable\"?\nI'll take a look into the codebase but my first guess is that NOCK_OFF is a blanket toggle for everything.\n. Right now NOCK_OFF turns nock off completely. Which means it'll do not interception. So that's not was you want.\nAs far as I understand you want two modes:\n- normal mode intercepts all requests that nock is setup in your tests to intercept\n- error mode intercepts only requests setup to fail (5xx responses and network errors)\nInstead of two separate modes being built into nock, I would suggest a programmatic way of selecting which interceptors to apply at runtime as the logic above sounds a bit arbitrary. Something like this maybe:\njs\nnock.interceptorFilter((interceptor) => {\n    if (process.env.FAIL_MODE) {\n        return interceptor.response.statusCode >= 500;\n    } else {\n        return true;\n    }\n});\nWould that work for you?\n. This is a nice idea but different HTTP headers use different separators. For example cookie-related headers use ; instead of , and judging by https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_response_setheader_name_value, it looks like node can handle this properly.\nAfter a quick search in node's code I could not find a test testifying to that fact.\nIn any case, if node's http library can do it, we should be do it as well. Would you mind augmenting your PR with this logic?\n. Thanks for the fix!\n. Just published in v8.2.1 & v9.0.1 \ud83c\udf89 /cc @aredridel \n. @sondretjvimond it looks like you have a typo: you're mocking http://example.co and you're making a request to http://example.com.\nLet me know if this is not the case so I can reopen the issue.. @dallonf I'm failing to reproduce your issue. Here's what I tried: https://gist.github.com/vrinek/f20aa9649af3642120fb65706cb9ac88.\nCould you try running that test file and tell me if it's still failing for you?. I don't think that simultaneous support is possible (see issues below).\nCould you suggest an intuitive interface to switch between the two implementations?\nAn example would work wonders to make me understand how you envision this to work.\n\nI tried a few things with querystring and qs and I noticed a couple of weird issues:\n```js\nvar params = { blah: { foo: { bar: { baz: 123 }}}}\nqs.parse(qs.stringify(params))\n// => { blah: { foo: { bar: { baz: 123 }}}}       ^^\nquerystring.parse(querystring.stringify(params))\n// => { blah: '' }                                --\n```\njs\nvar params = { 'blah[foo][bar][baz]': 123 }\nqs.parse(qs.stringify(params))\n// => { blah: { foo: { bar: { baz: 123 }}}}       -_-\nquerystring.parse(querystring.stringify(params))\n// => { 'blah[foo][bar][baz]': 123 }              ^_^\n. @digitaltsai I just added a passing test (inspired by your code snippet) here. Please let me know if it covers what you're asking for.\nIf this is covering the same case, then I suspect that we have to determine our package version differences.. It looks like it started failing with request v2.76.0 and judging by request's changelog there were a couple of timeout-related fixes.\nI'll debug it from there.\nEDIT\nGit bisect yielded https://github.com/request/request/commit/1ef4075f5b649987b52cc71a1c33fdd8111d305c as the first bad commit which is what I expected.\nNow it's time to delve into the code and figure out where one diverged from the other.. How certain can we be that a key was added last to the object?\nIf we only expect a key to be added with obj[key] = value, that's easy. Node v6 seems to retain that information (not sure about other implementations though).\nIf we add keys via Object.assign or _.merge, I'm not 100% sure that the order is retained.\nI'm pessimistic on whether this is possible \ud83d\ude1e\nIf someone knows more on this matter, please help!. I just took a look at your StackOverflow question. I'm not very familiar with Redux and how it uses JSONP but nock has no built-in capabilities to serve JSONP (yet). I'm noting this as a feature request. If you would like to try your hand in writing a pull request for this feature, it would be more than welcome.. Copying all props across seems a little excessive. I would prefer a simple interceptor.statusMessage && response.statusMessage = interceptor.statusMessage;.\n. Instead of setting the whole statusObject to the interceptor, I suggest setting just an additional statusMessage. This way, subsequent code (RequestOverrider) does not need to know of the interface of Interceptor.reply.\n. This file is updated every time the tests are run. I'm trying to figure out a good enough way to avoid it muddling with the diffs (probably just gitignore it for a start).\n. Worth mentioning here that \"optional requests are consumed like normal ones once they are matched\".\n. This piece of code (and the one it replaced) is hiding an assumption: when an interceptor has been fully consumed, it's removed from the keyedInterceptors list.\nI would like to get rid of that assumption. This however would require a refactor that touches various parts of the codebase. In the spirit of keeping this PR on target, I would instead suggest adding a comment to document the fact and I'll add an issue to refactor it.\n. I see that pendingMocks was incorrectly returning all mocks. I expect that some users of nock may have depended of that behaviour.\nWould you mind adding something like allMocks/remainingMocks/activeMocks (naming's hard) that's doing what pendingMocks was previously doing?\n. With the code in this PR, I would expect a mock that's both optional and persist to be absent from pendingMocks but intercept requests multiple times.\nSomething analogous could be said about optional and times(n).\nWould adding tests for these combined behaviours be an overkill?\n. The big idea is to drop tap in favour of mocha. If you're interested in helping out, drop by our Gitter channel. I plan on starting work on it over the weekend.\n. ",
    "fjakop": "I'm using https://www.npmjs.com/package/request\n. Thanks a lot, that's basically it. It took a while for me to figure out that the ical module I'm using relies on a too old version of request (2.40.0) which does not support these variables (since 2.51.0).\n. ",
    "Nordes": "Thank's a lot @xavierchow It actually fixed my issue. In windows the proxy is not added in the url with the request module, but on my build machine (linux) it add the proxy before the URL and makes it impossible to NOCK.\nI tried to debug the request module, since it does a different behavior depending on the system, but I stopped searching after seeing that I could modify the no_proxy within code.. ",
    "HowlingEverett": "Looks like nock isn't really supported this way/in the browser, I'll close this for now and use something else :)\n. ",
    "antoinerey": "I still have the same issue, and I'm using the 7.2.2. I also tried the 7.3.0 and 7.4.0, nothing changed.\n```\nWARNING in ./~/nock/lib/scope.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/antoinerey/Sites/app/node_modules/nock/lib\n @ ./~/nock/lib/scope.js 21:7-20\nWARNING in ./~/nock/lib/interceptor.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/antoinerey/Sites/app/node_modules/nock/lib\n @ ./~/nock/lib/interceptor.js 15:9-22\nWARNING in ./~/nock/lib/back.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/antoinerey/Sites/app/node_modules/nock/lib\n @ ./~/nock/lib/back.js 16:7-20\nERROR in ./~/mkdirp/index.js\nModule not found: Error: Cannot resolve module 'fs' in /Users/antoinerey/Sites/app/node_modules/mkdirp\n @ ./~/mkdirp/index.js 2:9-22\n```\n. ",
    "stevenp": "Confirmed that this is still an issue with webpack for me as of 8.0.0.\nI suspect this is because try/catch doesn't affect the way that webpack parses the require calls, so it continues to try to bundle fs, regardless of how you wrap it. To stop this error, I added: new webpack.IgnorePlugin(/^fs$/) to my webpack plugins list, but nock still doesn't actually work in the browser. \n. ",
    "zedd45": "Could we please reopen this issue? I'm encountering the same issue with : \n\"nock\": \"^8.0.0\",\n\"webpack\": \"1.12.11\",\n\"karma-webpack\": \"1.7.0\",\n```\nWARNING in ./~/nock/lib/scope.js\nModule not found: Error: Cannot resolve module 'fs' in /path/node_modules/nock/lib\n @ ./~/nock/lib/scope.js 21:7-20\nWARNING in ./~/nock/lib/back.js\nModule not found: Error: Cannot resolve module 'fs' in /path/node_modules/nock/lib\n @ ./~/nock/lib/back.js 17:7-20\nWARNING in ./~/nock/lib/interceptor.js\nModule not found: Error: Cannot resolve module 'fs' in /path/node_modules/nock/lib\n @ ./~/nock/lib/interceptor.js 15:9-22\nERROR in ./~/mkdirp/index.js\nModule not found: Error: Cannot resolve module 'fs' in /path/node_modules/mkdirp\n @ ./~/mkdirp/index.js 2:9-22\n```\nThis error fails Karma, aborting all my tests. \n. ",
    "Niondir": "The webpack plugin helped me. Maybe that should be covered in the documentation. But I'm at the veriy beginning wick nock and do not know if it fails somewhere else in the browser.\n. ",
    "mattdell": "Still having this issue.. ",
    "heregoes": "Has anyone been able to solve this issue? Im having the same error when trying to import express. Please Help. ",
    "xuwanwanTT": "\u6211\u4e5f\u9047\u5230\u4e86\uff0c\u4e0d\u77e5\u9053\u4ec0\u4e48\u539f\u56e0\uff0c\u4f60\u4eec\u89e3\u51b3\u4e86\u7684\u8bf4\u4e00\u4e0b\u554aQAQ. ",
    "mdlavin": "Not sure how strict the rules are for merging, but I increased test coverage to get rid of the red 'x's just to be safe.\n. I ran into this problem today. Is there anything I can do to help get this merged?. ",
    "kimmobrunfeldt": "Didn't try that one. I tried to find something like that but missed it. That is exactly what I would need. Thanks! :+1:\n. ",
    "maorhayoun": "any comment?\n. ",
    "kesor": "Actually, it is not so bad to have both methods. Since often it is useful to create most of the scope in a beforeEach and later add just the required matching for a header as needed. But it does need to be documented better.. A workaround is to be just a little bit more explicit, like so -\n nock('http://example.com').get('/users/1').reply(200, 'response 1').get('/users/1').reply(200, 'response 2').get('/users/1').reply(200, 'response 3').get('/users/1').reply(200, 'response 4')\nThen each time a request is made, a different response is returned.\n```\nh = http.get('http://example.com/users/1', function(res) { console.log('statusCode: ', res.statusCode); res.on('data', function(data) { console.log('data: ', data.toString()); }) }); h.end()\nstatusCode:  200\ndata:  response 1\n\nh = http.get('http://example.com/users/1', function(res) { console.log('statusCode: ', res.statusCode); res.on('data', function(data) { console.log('data: ', data.toString()); }) }); h.end()\nstatusCode:  200\ndata:  response 2\nh = http.get('http://example.com/users/1', function(res) { console.log('statusCode: ', res.statusCode); res.on('data', function(data) { console.log('data: ', data.toString()); }) }); h.end()\nstatusCode:  200\ndata:  response 3\nh = http.get('http://example.com/users/1', function(res) { console.log('statusCode: ', res.statusCode); res.on('data', function(data) { console.log('data: ', data.toString()); }) }); h.end()\nstatusCode:  200\ndata:  response 4\nh = http.get('http://example.com/users/1', function(res) { console.log('statusCode: ', res.statusCode); res.on('data', function(data) { console.log('data: ', data.toString()); }) }); h.end()\nError: Nock: No match for request {\n  \"method\": \"GET\",\n  \"url\": \"http://example.com/users/1\"\n}\n```. One especially hairy problem with regards to this is that in URL implementation -\n\n// Default ports are automatically transformed to the empty string\n// (HTTPS protocol's default port is 443)\nThis means that executing url.port = 443 will not appear as url.port being equal to 443 at a later time, it will just be empty.. ",
    "timjonischkat": "Nope. - I think this was a false negative. I still didn't fix it, but couldn't reproduce it in a controlled setup. Will reopen this issue in case I succeed in doing so.\n. Yep. Works like a charm. Must've been a different problem in my setup.\n\nconst nock = require('nock');\nconst rp = require('request-promise');\nnock.disableNetConnect();\nlet body = {country: 'fr', email: 'francoise.minault@bonjour.fr', userAgent: 'Gecko/1.2.3'};\nlet serverMock = nock('http://www.google.com').post('/index/test', body).reply(200, 'ok');\nrp({\n  method: 'POST',\n  uri: 'http://www.google.com/index/test',\n  body: JSON.stringify(body),\n  headers: {\n      'content-type': 'application/json'\n  }\n}).then(() => {\n  if (!serverMock.isDone()) {\n      console.log('test failed.');\n  } else {\n      console.log('test passed.');\n  }\n});\n. \n",
    "davidrissato": "I probably know why you had that problem. I had the same issue in my unit tests and took me almost 30 minutes to understand what I was doing wrong:\nIn my unit test module, I had an afterEach block calling nock.restore(); instead of calling nock.cleanAll();, which was disabling nock instead of cleaning up the responses.. ",
    "nschloe": "This is the reason why I had to disable nock for my tests. Very interested in a fix.\n. ",
    "andrenarchy": "Any news or ideas?\n. ",
    "gjorquera": "I have this same use case, I'm testing my own server mocking requests to external servers but allowing localhost to work. I found this workaround:\n``` js\n  const options = {\n     // on 'lockdown' mode, 'after' is called after lockdown disables all net.\n    after: () => nock.enableNetConnect('localhost'),\n    // on 'record' I had to filter requests to localhost.\n    afterRecord: outputs => outputs.filter(o => !o.scope.match(/localhost/))\n  }\n// request is a callback with the actual http request to my server, that\n  // makes http requests to other servers.\n  nockBack(${cassette}.json, options, (nockDone) => request(nockDone));\n```\n. ",
    "bitgal": ":+1: \n. ",
    "bhar629": "Theoretically i understand it is possible. I've pasted you the sample code.Can you tell me what should I do to make it work?\n. ",
    "satazor": "Bump\n. PR at #503 \n. @pgte I can do a PR, how about adding a recorder option to pass custom recorder options in here (mixing in those options)\n. Do not merge yet, will improve the test to actually run on node 0.10.\n. Good to be merged.\n. <3\n. <3\n. @vrinek Thanks for the reply. I will record new fixtures. Regarding https://github.com/IndigoUnited/node-gh-issues-stats/blob/master/index.js#L16, that's not the issue because that line of code doesn't get executed for any of the first tests, and they are all failing. Also, got normalizes all headers to lower case, that's why I access them that way.\n. @vrinek yes\n. ",
    "swashcap": "Here\u2019s the full output from setting DEBUG=nock.*:\n``` shell\n$ DEBUG=nock.* node test-issue.js\n  nock.intercept Overriding ClientRequest +0ms\n  nock.intercept ClientRequest overridden +3ms\n  nock.common overriding requests +1ms\n  nock.common - overriding request for +1ms http\n  nock.common - overridden request for +11ms http\n  nock.common - overriding request for +0ms https\n  nock.common - overridden request for +0ms https\n  nock.back New nock back mode: +27ms dryrun\n  nock.recorder 0 +0ms restoring all the overridden http/https properties\n  nock.common restoring requests +1ms\n  nock.common - restoring request for +1ms http\n  nock.common - restored request for +0ms http\n  nock.common - restoring request for +0ms https\n  nock.common - restored request for +0ms https\n  nock.intercept restoring overriden ClientRequest +0ms\n  nock.intercept - ClientRequest restored +0ms\n  nock.intercept Overriding ClientRequest +0ms\n  nock.intercept ClientRequest overridden +0ms\n  nock.common overriding requests +0ms\n  nock.common - overriding request for +0ms http\n  nock.common - overridden request for +1ms http\n  nock.common - overriding request for +0ms https\n  nock.common - overridden request for +0ms https\nTAP version 13\nit responds\nnock.common options.host: +217ms localhost\n  nock.common options.hostname in the end: \"localhost\" +0ms\n  nock.common options.host in the end: \"localhost:5984\" +0ms\n  nock.intercept interceptors for \"localhost:5984\" +0ms\n  nock.intercept filtering interceptors for basepath +0ms http://localhost:5984\n  nock.common options.host: +2ms localhost:5984\n  nock.common options.hostname in the end: \"localhost\" +0ms\n  nock.common options.host in the end: \"localhost:5984\" +0ms\n  nock.intercept interceptors for \"localhost:5984\" +1ms\n  nock.intercept filtering interceptors for basepath +0ms http://localhost:5984\n  nock.intercept using +0ms 2 interceptors\n  nock.request_overrider setHeader +1ms accept application/json\n  nock.request_overrider setHeader +0ms content-type application/json\n  nock.request_overrider setHeader +1ms host localhost:5984\n  nock.request_overrider setHeader +0ms accept application/json\n  nock.request_overrider setHeader +0ms content-type application/json\n  nock.request_overrider setHeader +1ms host localhost:5984\n  nock.request_overrider req.end +1ms\n  nock.request_overrider write +0ms { '0': undefined, '1': undefined }\n  nock.request_overrider ending +13ms\n  nock.scope match {\"domain\":null,\"_events\":{},\"_eventsCount\":3,\"method\":\"GET\",\"headers\":{\"accept\":\"application/json\",\"content-type\":\"application/json\",\"host\":\"localhost:5984\"},\"processData\":true,\"timeout\":10000,\"cache\":false,\"readable\":true,\"writable\":true,\"explicitMethod\":true,\"_qs\":{\"request\":{\"uri\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:5984\",\"port\":\"5984\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/my-database/\",\"path\":\"/my-database/\",\"href\":\"http://localhost:5984/my-database/\"},\"method\":\"GET\",\"headers\":{\"Accept\":\"application/json\",\"Content-Type\":\"application/json\",\"host\":\"localhost:5984\"}},\"lib\":{},\"parseOptions\":{},\"stringifyOptions\":{}},\"_auth\":{\"request\":{\"uri\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:5984\",\"port\":\"5984\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/my-database/\",\"path\":\"/my-database/\",\"href\":\"http://localhost:5984/my-database/\"},\"method\":\"GET\",\"headers\":{\"Accept\":\"application/json\",\"Content-Type\":\"application/json\",\"host\":\"localhost:5984\"}},\"hasAuth\":false,\"sentAuth\":false,\"bearerToken\":null,\"user\":null,\"pass\":null},\"_oauth\":{\"request\":{\"uri\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:5984\",\"port\":\"5984\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/my-database/\",\"path\":\"/my-database/\",\"href\":\"http://localhost:5984/my-database/\"},\"method\":\"GET\",\"headers\":{\"Accept\":\"application/json\",\"Content-Type\":\"application/json\",\"host\":\"localhost:5984\"}},\"params\":null},\"_multipart\":{\"request\":{\"uri\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:5984\",\"port\":\"5984\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/my-database/\",\"path\":\"/my-database/\",\"href\":\"http://localhost:5984/my-database/\"},\"method\":\"GET\",\"headers\":{\"Accept\":\"application/json\",\"Content-Type\":\"application/json\",\"host\":\"localhost:5984\"}},\"boundary\":\"3edcc211-b479-4497-9504-6b83db4e4287\",\"chunked\":false,\"body\":null},\"_redirect\":{\"request\":{\"uri\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:5984\",\"port\":\"5984\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/my-database/\",\"path\":\"/my-database/\",\"href\":\"http://localhost:5984/my-database/\"},\"method\":\"GET\",\"headers\":{\"Accept\":\"application/json\",\"Content-Type\":\"application/json\",\"host\":\"localhost:5984\"}},\"followRedirect\":true,\"followRedirects\":true,\"followAllRedirects\":false,\"maxRedirects\":10,\"redirects\":[],\"redirectsFollowed\":0,\"removeRefererHeader\":false},\"_tunnel\":{\"request\":{\"uri\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:5984\",\"port\":\"5984\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/my-database/\",\"path\":\"/my-database/\",\"href\":\"http://localhost:5984/my-database/\"},\"method\":\"GET\",\"headers\":{\"Accept\":\"application/json\",\"Content-Type\":\"application/json\",\"host\":\"localhost:5984\"}},\"proxyHeaderWhiteList\":[\"accept\",\"accept-charset\",\"accept-encoding\",\"accept-language\",\"accept-ranges\",\"cache-control\",\"content-encoding\",\"content-language\",\"content-location\",\"content-md5\",\"content-range\",\"content-type\",\"connection\",\"date\",\"expect\",\"max-forwards\",\"pragma\",\"referer\",\"te\",\"user-agent\",\"via\"],\"proxyHeaderExclusiveList\":[]},\"pool\":{},\"dests\":[],\"__isRequestRequest\":true,\"uri\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:5984\",\"port\":\"5984\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/my-database/\",\"path\":\"/my-database/\",\"href\":\"http://localhost:5984/my-database/\"},\"proxy\":null,\"tunnel\":false,\"setHost\":true,\"_disableCookies\":true,\"port\":\"5984\",\"host\":\"localhost:5984\",\"path\":\"/my-database/\",\"_json\":true,\"httpModule\":{\"METHODS\":[\"ACL\",\"BIND\",\"CHECKOUT\",\"CONNECT\",\"COPY\",\"DELETE\",\"GET\",\"HEAD\",\"LINK\",\"LOCK\",\"M-SEARCH\",\"MERGE\",\"MKACTIVITY\",\"MKCALENDAR\",\"MKCOL\",\"MOVE\",\"NOTIFY\",\"OPTIONS\",\"PATCH\",\"POST\",\"PROPFIND\",\"PROPPATCH\",\"PURGE\",\"PUT\",\"REBIND\",\"REPORT\",\"SEARCH\",\"SUBSCRIBE\",\"TRACE\",\"UNBIND\",\"UNLINK\",\"UNLOCK\",\"UNSUBSCRIBE\"],\"STATUS_CODES\":{\"100\":\"Continue\",\"101\":\"Switching Protocols\",\"102\":\"Processing\",\"200\":\"OK\",\"201\":\"Created\",\"202\":\"Accepted\",\"203\":\"Non-Authoritative Information\",\"204\":\"No Content\",\"205\":\"Reset Content\",\"206\":\"Partial Content\",\"207\":\"Multi-Status\",\"208\":\"Already Reported\",\"226\":\"IM Used\",\"300\":\"Multiple Choices\",\"301\":\"Moved Permanently\",\"302\":\"Found\",\"303\":\"See Other\",\"304\":\"Not Modified\",\"305\":\"Use Proxy\",\"307\":\"Temporary Redirect\",\"308\":\"Permanent Redirect\",\"400\":\"Bad Request\",\"401\":\"Unauthorized\",\"402\":\"Payment Required\",\"403\":\"Forbidden\",\"404\":\"Not Found\",\"405\":\"Method Not Allowed\",\"406\":\"Not Acceptable\",\"407\":\"Proxy Authentication Required\",\"408\":\"Request Timeout\",\"409\":\"Conflict\",\"410\":\"Gone\",\"411\":\"Length Required\",\"412\":\"Precondition Failed\",\"413\":\"Payload Too Large\",\"414\":\"URI Too Long\",\"415\":\"Unsupported Media Type\",\"416\":\"Range Not Satisfiable\",\"417\":\"Expectation Failed\",\"418\":\"I'm a teapot\",\"421\":\"Misdirected Request\",\"422\":\"Unprocessable Entity\",\"423\":\"Locked\",\"424\":\"Failed Dependency\",\"425\":\"Unordered Collection\",\"426\":\"Upgrade Required\",\"428\":\"Precondition Required\",\"429\":\"Too Many Requests\",\"431\":\"Request Header Fields Too Large\",\"451\":\"Unavailable For Legal Reasons\",\"500\":\"Internal Server Error\",\"501\":\"Not Implemented\",\"502\":\"Bad Gateway\",\"503\":\"Service Unavailable\",\"504\":\"Gateway Timeout\",\"505\":\"HTTP Version Not Supported\",\"506\":\"Variant Also Negotiates\",\"507\":\"Insufficient Storage\",\"508\":\"Loop Detected\",\"509\":\"Bandwidth Limit Exceeded\",\"510\":\"Not Extended\",\"511\":\"Network Authentication Required\"},\"globalAgent\":{\"domain\":null,\"_events\":{},\"_eventsCount\":1,\"defaultPort\":80,\"protocol\":\"http:\",\"options\":{\"path\":null},\"requests\":{},\"sockets\":{},\"freeSockets\":{},\"keepAliveMsecs\":1000,\"keepAlive\":false,\"maxSockets\":null,\"maxFreeSockets\":256}},\"agent\":{\"domain\":null,\"_events\":{},\"_eventsCount\":1,\"defaultPort\":80,\"protocol\":\"http:\",\"options\":{\"path\":null},\"requests\":{},\"sockets\":{},\"freeSockets\":{},\"keepAliveMsecs\":1000,\"keepAlive\":false,\"maxSockets\":null,\"maxFreeSockets\":256},\"_started\":true,\"href\":\"http://localhost:5984/my-database/\",\"proto\":\"http\",\"hostname\":\"localhost\"}, body = \"\" +7ms\n  nock.scope matching http://localhost:5984 to GET http://localhost:5984/my-database/: true +0ms\n  nock.request_overrider interceptor identified, starting mocking +1ms\n  nock.request_overrider response.rawHeaders: +0ms []\nundefined:1\nSyntaxError: Unexpected end of input\n    at Object.parse (native)\n    at RequestOverrider.end (/Users/creed/Sites/nock/lib/request_overrider.js:298:28)\n    at OverriddenClientRequest.RequestOverrider.req.end (/Users/creed/Sites/nock/lib/request_overrider.js:159:7)\n    at Request.end (/Users/creed/Sites/pouchdb/node_modules/request/request.js:1383:12)\n    at end (/Users/creed/Sites/pouchdb/node_modules/request/request.js:575:14)\n    at Immediate.onImmediate (/Users/creed/Sites/pouchdb/node_modules/request/request.js:589:7)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\n```\n. I\u2019m also noticing that tests at 5cf92d157657b97e49854838cbda2150676f9c2f _aren\u2019t passing on my machine. Seems to error/hang on \u201crecords and replays objects correctly\u201d (which is in tests/test_recorder.js):\n``` shell\nrecords and replays objects correctly\nok 479 should be equal\nnot ok 480 Timeout!\n\nfile:   timers.js\nline:   92\ncolumn: 15\nstack:  \n  - |\n    getCaller (/Users/creed/Sites/nock/node_modules/tap/lib/tap-assert.js:439:17)\n  - |\n    assert (/Users/creed/Sites/nock/node_modules/tap/lib/tap-assert.js:21:16)\n  - |\n    Function.fail (/Users/creed/Sites/nock/node_modules/tap/lib/tap-assert.js:95:10)\n  - |\n    Test._testAssert [as fail] (/Users/creed/Sites/nock/node_modules/tap/lib/tap-test.js:87:16)\n  - |\n    Test.timeout (/Users/creed/Sites/nock/node_modules/tap/lib/tap-test.js:31:8)\n  - |\n    Timer.listOnTimeout (timers.js:92:15)\n\n...\n/Users/creed/Sites/nock/tests/test_recorder.js:116\n    t.ok(resp.headers);\n             ^\nTypeError: Cannot read property 'headers' of undefined\n    at /Users/creed/Sites/nock/tests/test_recorder.js:116:14\n    at Request.callback (/Users/creed/Sites/nock/node_modules/superagent/lib/node/index.js:815:12)\n    at ClientRequest. (/Users/creed/Sites/nock/node_modules/superagent/lib/node/index.js:767:10)\n    at emitOne (events.js:90:13)\n    at ClientRequest.emit (events.js:182:7)\n    at Socket.socketErrorListener (http_client.js:295:9)\n    at emitOne (events.js:90:13)\n    at Socket.emit (events.js:182:7)\n    at connectErrorNT (net.js:992:8)\n    at _combinedTickCallback (node.js:377:13)\n    at process._tickDomainCallback (node.js:425:11)\n```\n. _Okay, this error is somewhat misleading. The real problem is in lib/request_overrider.js:\njs\nif (common.isJSONContent(options.headers)) {\n  requestBody = JSON.parse(requestBody);\n}\nWe\u2019re issuing GET requests, so requestBody is empty. JSON.parse is blowing up:\n\n. I\u2019d be happy to put together a PR for this. What would you think about checking if requestBody is present:\njs\nif (common.isJSONContent(options.headers) && requestBody) {\n  requestBody = JSON.parse(requestBody);\n}\nOr, since only POST and PUT methods should have bodies, the HTTP method could be exposed on req for something like this:\njs\nif (\n  (req.method === 'POST' || req.method === 'PUT') &&\n  common.isJSONContent(options.headers)\n) {\n  requestBody = JSON.parse(requestBody);\n}\n. Great! See #492.\n. Even though coverage for RequestOverrider was good I added a test where I thought it made sense. Let me know what you think!\n. Awesome, thanks!\n. ",
    "Elergy": "Yes, when we have allowUnmocked:true, request is mocked when it exactly matches to url we passed to get. \nFor example, this variant gives us expected result.\n```\nlet nock=require('nock');\nlet request=require('request');\nnock('https://www.google.com',\n    { allowUnmocked: true })\n    .get('/abc?user=fred')\n    .reply(200, 'Match!');\nrequest('https://www.google.com/abc?user=fred', (error, response, body) => {\n    if (!error && response.statusCode == 200) {\n        console.log('response: ' + body);\n    } else {\n        console.log(error ? 'error: ' + error : 'response.statusCode: ' + response.statusCode);\n    }\n});\n```\nBut if we pass to get something different, like RegEx, Function, string with path without parameters, we'll fail.\n. One question: I've generated tests/browserify-public/browserify-bundle.js automatically. Should I commit it?\n. ",
    "mmazzarolo": "Having the exact same issue.\nThanks @robinbobbitt for the persist suggestion.\n. ",
    "ronjouch": "Having the exact same issue too, and @robinbobbitt's persist suggestion works for me too.\nBut like him, I'm wondering if this is a bug or working as designed; the Doc / Allow unmocked requests on a mocked hostname says:\n\nIf you need some request on the same host name to be mocked and some others to really go through the HTTP stack, you can use the allowUnmocked option like this:\n\n``` js\noptions = {allowUnmocked: true};\nvar scope = nock('http://my.existing.service.com', options)\n  .get('/my/url')\n  .reply(200, 'OK!');\n// GET /my/url => goes through nock\n // GET /other/url => actually makes request to the server\n```\nWhich is not what's happening. Are we missing/misusing something, or is it a bug? Thanks :)\n. ",
    "djanowski": "Same issue here. I submitted a fix: #762.. Please also add a way to remove such interceptor. Currently it's impossible.\n. Hello, anything blocking this?. ",
    "giannisp": "Same issue here, had to use persist() or cleanAll() to get around it.\nWondering if something is wrong with the submitted PR.. I did some digging on the code, the issue starts from the point where it looks for a match without checking the body.\nhttps://github.com/node-nock/nock/blob/c82715bd8f1cf90244bae120272c8c022ed44754/lib/intercept.js#L357-L359\nAnyway I did a workaround for my scenario, using .cleanAll() right before running the request that has to go through.. ",
    "blackpost38": "oh... maybe you told me setHeader logs.\nIt might work when it set default content-type (application/x-www-form-urlencoded; charset=UTF-8)\n...\n  nock.request_overrider setHeader +2ms content-type application/json\n  nock.request_overrider setHeader +0ms accept application/json, text/javascript, */*; q=0.01\n  nock.request_overrider setHeader +0ms referer about:blank\n  nock.request_overrider setHeader +0ms user-agent Node.js (darwin; U; rv:v5.1.0)\n  nock.request_overrider setHeader +0ms accept-language en\n  nock.request_overrider setHeader +0ms host localhost:8888\n  nock.request_overrider setHeader +0ms accept-encoding gzip\n  nock.request_overrider setHeader +0ms content-length 51\n  nock.request_overrider setHeader +1ms content-type application/json\n  nock.request_overrider setHeader +0ms accept application/json, text/javascript, */*; q=0.01\n  nock.request_overrider setHeader +0ms referer about:blank\n  nock.request_overrider setHeader +0ms user-agent Node.js (darwin; U; rv:v5.1.0)\n  nock.request_overrider setHeader +0ms accept-language en\n  nock.request_overrider setHeader +0ms host localhost:8888\n  nock.request_overrider setHeader +0ms accept-encoding gzip\n  nock.request_overrider setHeader +0ms content-length 51\n  nock.request_overrider write +1ms { '0': 'comment=some+comment&score=2&product_id=3&user_id=4' }\n  nock.request_overrider req.end +1ms\n  nock.request_overrider write +0ms { '0': undefined, '1': undefined }\n  ...\nI found why It doesn't match. below is that log. humm... It looks weird.. \nnock.scope bodies don't match: \n +1ms { comment: 'some comment' } \n comment=some+comment&score=2&product_id=3&user_id=4\n. oh.. thanks your response. @pgte @ruimarinho \nI'm gonna check, and then leave a comment. :+1: \n. ",
    "timjrobinson": "Thanks! Could I create a PR to add an all() method that basically does what you posted?\n. Sounds good, I'll create a PR soon\n. I completely forgot about doing this sorry, and probably won't be implementing it any time soon as I'm not currently using nock. Anyone else feel free to pick this up. . ",
    "SgtPooki": "Would love an update on this.. ",
    "gwpmad": "The way we got around this was:\nnock('http://myhostxyz.com')\n      .get(() => true)\n      .reply(200, {});. ",
    "sterlingwes": "I ran into this with 9.0.2. The fix was to either return a readable stream from the function or handle the delay yourself with a timeout and the callback response approach.. ",
    "albertogasparin": "I'm also having the same issue (node 6.10.1, nock 9.0.11).\nUsing axios to make the request, the combination of delayBody + reply(fn) triggers a Invalid non-string/buffer chunk error:\n```js\nnock('http://timestamp.com')\n  .get('/')\n  .query(true)\n  .delayBody(100)\n  .reply(200, (uri, b) => Date.now())\n  .persist();\naxios.get('http://timestamp.com/')\n  .then((resp) => {})\n  .catch((err) => console.log(err));\n```\nTypeError: Invalid non-string/buffer chunk\n    at validChunk (_stream_writable.js:216:10)\n    at DelayedBody.Writable.write (_stream_writable.js:245:12)\n    at DelayedBody.Writable.end (_stream_writable.js:480:10)\n    at Timeout._onTimeout (./node_modules/nock/lib/delayed_body.js:72:12)\n    at ontimeout (timers.js:380:14)\n    at tryOnTimeout (timers.js:244:5)\n    at Timer.listOnTimeout (timers.js:214:5)\n. I was relying on the partial match too. It would be nice to provide an example on how to replicate that functionality in the docs. \nFor instance with Lodash it is quite straightforward:\njs\nnock('http://example.com')\n  .post('/api/posts', _.matches({ title: 'My post' }))\n  .reply(200, { ok: true });\n. I've opened a PR. Have a look if I made the behaviors clearer. Updated \ud83d\ude09. ",
    "yra99ary": "@pgte \nI would like to help you.\nWhat you want it to look like?\nCan you show me link to references or similar things.\nThanks.\n. ",
    "pasupulaphani": "Please consider a scenario where this is called in Mocha before method and somewhere in tests we wanted to ensure it is set, so, calling it again in a test causes the fail.\n. I guess it could be because we are on 2.15.0 :/\nI will see if this the case on the latest version and provide u with as snippet. Cheers.\n. ",
    "reconbot": "I'm going to close this, disabling retries in got makes this work perfectly!\n. I'm using tools that retry on recoverable errors but not others. (got) There's no standard error that says network is disabled, ENETUNREACH was the closest error code from the standard http error set that could be handled properly by downstream libraries.. It's feels more weird to introduce nock to my production code than it does\nto simulate a network error when I want to simulate a network error.\nOn Fri, Sep 22, 2017, 8:35 PM Gregor Martynus notifications@github.com\nwrote:\n\n@reconbot https://github.com/reconbot can you pass a function to the\nretry option that checks for the NetConnectNotAllowedError error name and\nuse that as a way to not retry the request?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/node-nock/nock/pull/898#issuecomment-331590038, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABlbloLsAu4EAykGvA3sGfqwMtKXvHAks5slFJugaJpZM4NYgE-\n.\n. Say I have an application function\n\n```js\nimport got from 'got'\nimport {authHeaders} from './config'\nexport default function (url) {\n   return got(url, { authHeaders, retries: 5 })\n}\n```\nAnd I don't properly mock this request in my tests.\ngot will retry the request 5 times and probably timeout my test. got and my app have no knowledge of nock or any of the testing tools. It does however know about the standard errors returned by nodejs#errors. It's able to automatically not retry unrecoverable errors. This isn't unique to got, the aws-sdk has a similar behavior.\nI don't want to import nock into my production deps to check to see if it's an instance of the  NetConnectNotAllowedError.\nI'm proposing we use a standard error code that suggests the requests shouldn't be retried when preventing a network connection. The specific code isn't important to me but I know ENETUNREACH is widely supported. It also clearly states the outcome of a disabled net connection. It is as if you really disabled your network connection.. ",
    "export-mike": "within fetchClientDetails the response headers are text/html\nsee: console.log(r.headers.get('Content-Type')); // text/html\n    return r.json();}) // throws error error [SyntaxError: Unexpected token <]\n. I've also tested using an alternative node fetch polyfill https://www.npmjs.com/package/node-fetch and getting the same error.\n. Simple example works fine, its somewhere in the code above ^^^\n``` JavaScript\n  it('handles chained', () => {\n    nock(API_URL)\n    .post('/hi')\n    .reply(200, {hello: 'test'}, {'content-type': 'application/json'});\nnock(API_URL)\n.get('/bye')\n.reply(200, {message: 'tera!'}, {'content-type': 'application/json'});\n\nreturn fetch(`${API_URL}/hi`, {\n  method: 'POST',\n  body: JSON.stringify({test: 123})\n})\n.then(res => res.json())\n.then(() => fetch(`${API_URL}/bye`))\n.then(res => {\n  return res.json()\n})\n.then(({message}) => {\n  expect(message).to.equal('tera!');\n});\n\n});\n```\n. I wasn't returning all promises, I'm using mocha.\nbefore:\n``` JavaScript\n auth.login({username: 'mike', password: 'pass123'})(dispatch);\nexpect(store.getActions()).to.eql(expectedActions);\n```\nafter: (working)\nJavaScript\nreturn auth.login({username: 'mike', password: 'pass123'})(dispatch)\n.then(() => {\n   expect(store.getActions()).to.eql(expectedActions);\n});\n. ",
    "ferrants": "Definitely an issue. Until this is addressed, for properly testing timeouts with the request library, you should use at least these 3 error scenarios with replyWithError:\nnock(...)...\n.replyWithError({code: 'ETIMEDOUT', connect: true});\nnock(...)...\n.replyWithError({code: 'ETIMEDOUT', connect: false});\nnock(...)...\n.replyWithError({code: 'ESOCKETTIMEDOUT'});. ",
    "hugoduraes": "Just noticed this as well. Any news on it? @pgte ?. Trying to look at this but I'm not understanding what's wrong. Has anyone looked at the source code and tried to find the issue?. Yes, that'll be a breaking change. I've updated my PR to fix it for Node 0.10.x. Please take a look at the comment I left there.\n. Hi @vrinek!\nHere's an example of it failing:\n``` js\n'use strict';\nconst nock = require('nock');\nconst path = require('path');\nconst request = require('request');\nconst url = 'https://google.com';\nconst nockBackOptions = {\n  recorder: {\n    dont_print: true,\n    output_objects: false,\n    enable_reqheaders_recording: false,\n    use_separator: false\n  }\n};\nnock(url)\n  .persist()\n  .filteringPath(/.*/, '');\n['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH'].forEach(verb => {\n  nock(url).intercept('/', verb);\n});\nnock.back.fixtures = path.join(__dirname, 'fixtures');\nnock.back.setMode('record');\nnock.back('test.json', nockBackOptions, nockDone => {\n  request(url, (err, response, responseBody) => {\n    if (err !== null) {\n      console.error('ERROR', err.message);\n      return;\n    }\nnockDone();\n\nconsole.log('OK');\n\n});\n});\n```\nPlease run this script twice: the first one to record the response from the real server and the second one to replay it. The problem only occurs when replaying a previous recorded nock. It runs fine when the request is made to the real server.\nIf you need any help, please ping me.\n. Fixed on Node 0.10.x. It happens that Node 0.10.x HTTP module does not send the response rawHeaders. So it nows falls back to headers whenever rawHeaders is not available.\n. ",
    "AJamesPhillips": "Which dependency would be desirable to keep?  'querystring' or 'qs' ?. ",
    "kbakba": "\nWhich dependency would be desirable to keep? 'querystring' or 'qs' ?\n\nI think native 'querystring' \nsee https://github.com/nock/nock/pull/563#issuecomment-338104773\n. You can see https://github.com/3rd-Eden/nock-knock. ",
    "chazomaticus": "This is on node v0.12.9, by the way.\n. :+1: thanks!\n. ",
    "tusharmath": "In my use case I have written a unit test where I am manually destroying the http request using its destroy method. To assert if the request has been destroyed or not, I need to check destroyed property on its socket or the remoteAddress.\n. thanks!\n. ",
    "seanmcintyre": "\n. ",
    "djett41": "These pretzels are making me thirsty\n. ",
    "aivus": "I think it caused by http://status.npmjs.org/incidents/x726c1qdddf6\n. @pgte could you republish latest version on npm?\n. ",
    "fhemberger": "@aivus Yes, you're right: https://twitter.com/ag_dubs/status/713452276262813696\nShould be fixed soon.\n. ",
    "halcarleton": "I'm not sure how, but this resolved itself. I must have unknowingly fixed a user error while I was trying to figure out what the issue was.\n. ",
    "terinjokes": "I'm definitely still seeing this error.\n``` javascript\nvar scope = nock('https://api.example.com')\n  .get('/v1/query')\n  .query(function (query) {\n     console.log(query); // never called\n     return false;\n  })\n  .reply(200);\nhttp.get('https://api.example.com/v1/query', noop);\nconsole.log(scope.isDone()); // true\n```\n. That's what I see, and also what I expect. If my code doesn't have query parameters, and I tell nock it should, I want my tests to fail, not silently succeed.\n. ",
    "ryanjuve-porch": "I ran into this same issue trying to mock a complicated POST.  Rolling back to jdsom 8.1.0 fixed it for me as well.\n. Aha! As @domenic suggested, setting a url in the config object for jsdom.jsdom() has fixed my issue while using jsdom@8.3.0\n. @kwhitaker for my use case I use a url (front.dev.porch.com) that redirects to localhost via my hosts file.  So my jsdom call is:\njsdom.jsdom('<!doctype html><html><body></body></html>', {\n    url: 'http://front.dev.porch.com:9339'\n});\nThen hitting http://front.dev.porch.com:9339/foo/service/route worked within my tests.  I did need to use nock.recorder.rec() to get the EXACT nock calls necessary for intercepting to work, just FYI.\n. ",
    "domenic": "This seems likely because you are trying to do invalid cross-origin requests. Did you correctly set a URL in your jsdom document, using the url: option?\n. ",
    "GabeIsman": "@domenic I am deeply confused as to why that should make any difference to nock, but alright! It works. Maybe consider adding some documentation to warn people about this behavior?\n. ",
    "kwhitaker": "@ryanjuve-porch can you post an example of what you did? I'm running tests for some CORS requests and nock is still letting them connect, even after trying jsdom('', {url: 'http://localhost'}).  Any help is appreciated.\n. ",
    "sushantdhiman": "@pgte Yes it works. You can close the issue :). This will be really helpful for cleanup and changing mocks in between tests. I think cleanAll should get rid of any state, that will of-course be a breaking change. ",
    "aredridel": "Aha! I had to spend some time reading to try to figure out what I needed to change to adapt to any new interface. Sounds like there isn't any.\n. A fixed 9.0.x would be great :) \n. Thank you so much! Tests pass for us with those!\n. ",
    "eschwartz": "Do you think we could add a note to the changelog with this information? I had the same question about v8, and I was avoiding upgrading because of it.\n. ",
    "Nagarjuna-S": "Hi,\nMy uri is correct.. I want to mock https url. So in nock also I am giving url with https then its not working.. If I make it nock url to http then its working fine. I have seen this behavior for _all_docs call only. If I tried different url like /db/id then its working fine.. Please have a look on it\n. Hi @pgte \nI am not able to reopen this issue.. Can you please check my analysis above and provide me your inputs.\nThanks\nNagarjuna\n. Hi @pgte \nIts looking like problem is not with http or https. Its looking like query strings. \nMy db call will like below\nconnectionsDB.list({include_docs: true}, function (err, data) {});\nand equivalent rest url is \n{\"method\":\"GET\",\"headers\":{\"content-type\":\"application/json\",\"accept\":\"applicati\non/json\"},\"uri\":\"https://cloudant.com/connections/_all_docs\",\"qs\":{\"include_docs\":tru\ne}} \nand mocking code is\nnock(\"https://cloudant.com\")\n    .get('/connections/_all_docs')\n    .query({include_docs: true})\n    .reply(200,{rows:[]});\nIs there any problem with my query string?\n. ",
    "n30n0v": "I think it added in #996 . Read about how to use Nock. Here is a minimal test case to reproduce the error:\n```js\nconst nock = require('nock')\nconst http = require('http')\nconst assert = require('assert')\nnock('http://example.com')\n  .get('/path')\n  .reply(() => [200, 'ok', { 'X-Test': 'Hello' }])\nhttp.request('http://example.com/path', res => {\n  const header = Object.keys(res.headers)[0]\n  assert.equal(header, 'x-test')\n}).end()\n```. @abstractvector nice work. Looks good to me! The build failed in node versions < 4. Now we aren't supporting them. If you could rebase it, that\u2019d be great. I think it isn't bug. I try\n```\nconst nock = require('nock')\nconst http = require('http')\nconst url = 'http://test.com'\nconst scope = nock('http://test.com')\n              .get('/test')\n              .reply('404', 'test')\nhttp.get(url + '/test', res => {\n  console.log('statusCode', res.statusCode)\n  res.on('data', chunk => console.log('BODY', chunk.toString()))\n})\n// => statusCode 404\n// => BODY test\n``. Could you please elaborate? Nock works fine with https. Please reopen if you can add more info.. Closing this issue for now. Please reopen if you have a minimal test case to reproduce it.. Hey there! Quite right, you can useallowUnmocked` option:\nnock('http://example.com', {allowUnmocked: true})\n  .get('/your/specific/path')\n  .reply(200, 'OK!')\nAll requests that do not match with http://example.com/your/specific/path goes to the real server.\n. I try \n```\nconst nock = require('nock')\nconst request = require('request')\nconst rp = require('request-promise')\nnock('http://example.com')\n        .post(\"/baz\", {foo: 'bar'})\n        .replyWithError({ response: { data: 'invalid request' }})\nrp.post({uri: 'http://example.com/baz', body: {foo: 'bar'}, json: true}).catch(data => {\n  console.log('error: ', data.error)\n})\n// => error: { response: { data: 'invalid request' } }\n```\nI guess error exists in data.error.\n. Hi, guys! Nock works fine with the request, request-promise, and many other HTTP request library, as far as I understand. It overrides http.ClientRequest class inside node. Your example also works great both with request and with request-promise \ud83d\ude03 \n```js\nnock('http://myapp.iriscouch.com')\n    .persist()\n    .get('/users/1')\n    .reply(200, {\n      username: 'pgte',\n      email: 'pedro.teixeira@gmail.com'\n    })\nrequest({\n    uri:'http://myapp.iriscouch.com/users/1',\n    method:'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n}, (error, response, body) => {\n  console.log('request: ', body)\n})\nrp.get('http://myapp.iriscouch.com/users/1').then(res => console.log('rp: ', res))\n// => request:  {\"username\":\"pgte\",\"email\":\"pedro.teixeira@gmail.com\"}\n// => rp:  {\"username\":\"pgte\",\"email\":\"pedro.teixeira@gmail.com\"}\n```\ntry link. I caught a bug in 9.0.9, but after 9.0.19 it didn't reproduce. It seems to be a fixed in #886 .\nWould be great make PR with branch bug-841-popsicle-hangs, because the branch has a useful test \ud83d\udc4d . If request headers are not specified, Nock skips matching of request headers. \nYou can specify headers in reqheaders option. Docs. done. yep, I've resolved conflict. Since node v7.5.0 the options parameter can be URL object. it would be good if Nock could work with it.. It seems that the relevant information has been added in #1002 . Hi there! I think allowUnmocked: true doesn't work correctly when the body didn't match.\nExpected\nWhen allowUnmocked: true and request body didn't match, Nock makes a real request and gets a real body.\nActual\nNock does not return the body.\nBoth http and https protocol. The difference is that https throws an error.\nTest case:\n```js\nconst request = require('request');\nconst nock = require('nock')\nnock('http://www.google.com', { allowUnmocked: true })\n  .post('/search', (body) => {\n    return false;\n  })\n  .reply(200, {\n    success: true,\n  });\nrequest.post('http://www.google.com/search', (err, res, body) => {\n  if (err) console.log('err', err);\n  console.log('body: ', body) // empty body. When nock is turned off, body has html string\n})\n```\n. Hi, guys!\nYeh, I catch this bug only after 9.0.23 version. Path must be checked  in matchIndependentOfBody for example like path = path ? path.split('?')[0] : '';\nBut, In 9.0.14 I'm trying following code:\n```js\nconst nock = require('nock')\nconst https = require('https')\nnock('https://example.com',)\n    .get('/')\n    .reply(200)\nconst req = https.request({hostname: 'example.com'}, (res) => {\n  console.log(res.statusCode)\n})\nreq.on('error', function (e) {\n  console.log(e.message);\n});\nreq.end()\n```\nNock: No match for request {\n  \"method\": \"GET\",\n  \"url\": \"https://example.comundefined\"\n}\n@eitah, do you expect match request? Or maybe do you use {allowUnmocked: true} option?. hi, @brian-poncho! Nice pr, but I think we can do it more simpler. I used your test in #1027. Hi, @exogen! You can use replyWithError(). It will emit error event on the request object. Promise based libs called catch handler.. I think if it happened something awful in your async handler, a server is supposed to return correctly (in an HTTP protocol sense) formatted response. Could you please give example? . @exogen Thanks for the detailed example!\nIt seems that this is a particular case and API works as expected. Nevertheless, It might be nice to define API for emitting an error in a request.. I know, I've looked at falling test. It seems something changed in third party libs like zombie or browserify. @gr2m I guess so. I've always thought that nock doesn't work with browsers.. previously, if path not specified and no match for request, it log:\nNock: No match for request {   \"method\": \"GET\",   \"url\": \"https://example.comundefined\" }. ",
    "LarsHassler": "Had the same problem with an bulk API, which expected each entry on a new line.\nI've created a fix (PR #932)\nLink to my branch as long as the PR is not merged:\nhttps://github.com/LarsHassler/nock/tree/fix/issue-533-stripping-newlines. The failing test has nothing to do with my changes. It's already broken on master:\nhttps://travis-ci.org/node-nock/nock/builds/229389304\nI'll try to investigate the problem. It's related to the node version. The problem occurred with node 7.10 (See #933). After installing node 7.9 locally the error disappears, but with pinned version in travis (#934) an other test breaks. Not sure if this one is flaky or not.\nBut i unfortunately do not have time to debug this in detail. It looks like that the test tries to check if nock bundled with browserify would work within the browser.\nBut due to the fact, that its only running within zombiejs I guess that some network behaviour changed within node >= 7.10.\nIn general i would propose to run the browser test in real with saucelabs or browserstack, because otherwise the test does not test anything really.. Now an other test fails. No idea why. ",
    "krzysztofslonka": "I'm having the same problem. ",
    "rawgni": "maybe something like:\nnode(baseURL).get(route).query(true).reply(function(uri, rb, cb) { });\n. ",
    "LinusU": "This is still an issue with Nock version 10.0.0. Would still love to see this \u263a\ufe0f hopefully I can send a PR for this \ud83d\udc4d . ",
    "morenoh149": "I'm running into this myself. I'm using https://github.com/avajs/ava and my tests are interfering with each other.\nUntil a workaround is documented I'll be exploring https://github.com/mmalecki/hock\nPing https://github.com/node-nock/nock/issues/218 , https://github.com/node-nock/nock/issues/578 and https://github.com/avajs/ava/issues/849. ",
    "ksmith97": "I think I ran into a similar issue. Its not clear from the documentation how to use nock when you specify the entire url in the initial nock params(In my case because the URL comes from env). If you pass '/' into the post it wont match properly(first thing I tried as well) and it also fails if you dont pass anything. I found it only worked after passing a empty string.\n``` javascript\nvar nock = require('nock');\nvar request = require('request');\n// Errors out\nnock('http://localhost/path').post().reply(200);\nrequest.post('http://localhost/path', function(err, body) {\n  console.log(err, body);\n});\n//Also errors out\nnock('http://localhost/path').post('/').reply(200);\nrequest.post('http://localhost/path', function(err, body) {\n  console.log(err, body);\n});\n//Works as intended.\nnock('http://localhost/path').post('').reply(200);\nrequest.post('http://localhost/path', function(err, body) {\n  console.log(err, body);\n});\n```\nMaybe there could be a doc update? Or maybe its specified somewhere and I just missed it...\n. Hmm looks like there is a timing issue in one of the tests. A couple of the node versions passed.\n. @vrinek Just wanted to point how tiny this PR is!. ",
    "shallwefootball": "shit empty string\nget same.. ",
    "andresgariglio": "Hi, same problem here:\n```\nmatching https://email.us-east-1.amazonaws.com:443 to POST https://email.us-east-1.amazonaws.com:443//.*/: true\n{ [NetworkingError: Nock: No match for request POST https://email.us-east-1.amazonaws.com/ .......}\n```. ",
    "oroodie": "Hi, had same  \"Error: Nock: No match for request ...\", did remove another test file with not mocked server request, after it worked fine.. ",
    "faulke": "The empty string solution didn't work for me, but this seemed to work for mocking a POST to ELB service.  Make sure the mocked POST body matches exactly with the real request, or you could probably use regex.\njavascript\nnock('https://elasticloadbalancing.us-east-1.amazonaws.com/')\n  .filteringPath(() => '/')\n  .post('/', 'Action=DescribeLoadBalancers&Version=2012-06-01')\n  .reply(200)\n  .log(console.log);\nmatching https://elasticloadbalancing.us-east-1.amazonaws.com:443 to POST https://elasticloadbalancing.us-east-1.amazonaws.com:443/: true. ",
    "jeremysik": "I'm getting the same issue too:\nawsSnsRegisterResponse = {\n    ResponseMetadata: {\n        RequestId: '1efe8a66-eca3-5b19-b453-dbcea2b7b1bf'\n    },\n    EndpointArn: 'arn:aws:sns:ap-southeast-2:###############:endpoint/APNS_SANDBOX/##################/#####################'\n},\nawsSnsNock = nock('https://sns.ap-southeast-2.amazonaws.com')\n    .post('/')\n    .reply(200, awsSnsRegisterResponse);\nRequest data:\n{\n  \"method\": \"POST\",\n  \"url\": \"https://sns.ap-southeast-2.amazonaws.com/\",\n  \"headers\": {\n    \"user-agent\": \"aws-sdk-nodejs/2.53.0 darwin/v7.10.0 callback\",\n    \"content-type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n    \"x-amz-content-sha256\": \"9891dd36215a6e886e0c3d839b7509f27dd36c62abbddb4810ab1ab8e03f42de\",\n    \"content-length\": 173,\n    \"host\": \"sns.ap-southeast-2.amazonaws.com\",\n    \"x-amz-date\": \"20170531T052516Z\",\n    \"authorization\": \"AWS4-HMAC-SHA256 Credential=#################/20170531/ap-southeast-2/sns/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=###############################################\"\n  },\n  \"body\": \"Action=CreatePlatformEndpoint&PlatformApplicationArn=arn%3Aaws%3Asns%3Aap-southeast-2%3A866649938156%3Aapp%2FAPNS_SANDBOX%2F##########&Token=#################&Version=2010-03-31\"\n}\nLogs:\nmatching https://sns.ap-southeast-2.amazonaws.com:443 to POST https://sns.ap-southeast-2.amazonaws.com:443/: true\nError:\nNetworkingError: Nock: No match for request\nPassing empty string or adjusting the regex to match anything doesn't work.\nInterestingly, on AWS's KMS endpoint, this works:\nawsKmsNock = nock('https://kms.ap-southeast-2.amazonaws.com')\n            .post('/')\n            .reply(200, JSON.parse(awsKmsEncryptResponseJsonString))\nEdit: Finally figured out what was wrong, my dummy response wasn't in the correct form. I used nock.recorder.rec() to find out what it actually was, used that instead and it worked.. ",
    "mariohmol": "Had the same issue.. look it here https://travis-ci.org/djlaw90/readSwap/builds/238156915. ",
    "rodrigogs": "This way I get an error:\njavascript\nnock(registryUrl)\n  .post('auth', (body) => {\n    return body.username === username && body.password === password;\n  })\n  .reply(200, { token });\nThis way it works:\njavascript\nnock(registryUrl)\n  .post('/auth', (body) => {\n    return body.username === username && body.password === password;\n  })\n  .reply(200, { token });\nJust added a / :smile: . ",
    "prokopsimek": "The same issue here. ",
    "MADiep": "If you're mocking AWS, try chaining persist() or times(...). The AWS SDK appears to send the request multiple times. Nock unregisters the interceptor after the first matching request, which is why the log reports a match and still throws the error. I'm not sure why but if I had to guess, it's probably reserving the first call for authentication and the second call for the actual request.. ",
    "DianaIonita": "@MADiep If you're mocking AWS you're probably better off using aws-sdk-mock.. Looks like nock.restore() will stop recording.. ",
    "calidion": "run into the same problem.\nRequestError {\n      name: 'RequestError',\n      message: 'Error: Nock: No match for request {\\n  \"method\": \"GET\",\\n  \"url\": \"http://pool/miners_hashrate\",\\n  \"headers\": {\\n    \"user-agent\": \"VIG-COIN POOL Agent\",\\n    \"host\": \"pool\",\\n    \"accept\": \"application/json\"\\n  }\\n}',\n      cause: { Error: Nock: No match for request {\n      \"method\": \"GET\",\n      \"url\": \"http://pool/miners_hashrate\",\n      \"headers\": {\n        \"user-agent\": \"VIG-COIN POOL Agent\",\n        \"host\": \"pool\",\n        \"accept\": \"application/json\"\n      }\n    }\ncode\n```\n  let minersHashrate = nock('http://pool')\n    .get('/miners_hashrate')\n    .reply(200, {\n      newHashrates: {\n        aaa: 100,\n        bbb: 1000\n      }\n    });\n````\n. ",
    "sunil-lulla": "Though it's very late to reply on this but it will surely help the new explorers.\nJust use persist() for this, as the docs say \n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list. This means that you can intercept 2 or more calls to the same URL and return different things on each of them. It also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list. If you don\u2019t want interceptors to be removed as they are used, you can use the .persist() method.\n\nnock(\"https://abc.co\")\n    .persist()\n    .get(\"/getresponse\")\n  .delayBody(1000)\n  .reply(200, {\n   name:\"Sunil Lulla\",\n   \"jobRole\":\"SoftwareDeveloper\"\n  });\nHope it will help you :smile: . @gr2m I would love to be a maintainer, Add me :). ",
    "raphael-luciano": "@sunil-lulla  Thank you very much. You tip has helped me =). ",
    "audionerd": ":sunglasses:. ",
    "xonev": "We switched to using node-replay, so no, I guess I haven't.. ",
    "amrue": "I was going to fix this but now I can't reproduce it. @alexanderchr are you still seeing the issue?\n. ",
    "jjduhamel": "I get this when I type an invalid URL.  I originally types httpp://... and saw this same error.  Probably just needs better error handling.\n. ",
    "Overdrivr": "Seing the same issue with localhost:4567. Better error handling would indeed be a plus. I have implemented some failing tests to cover the problem. I am not sure I have formalized them in the way you wanted, as they purely reflect those specific cases + a few other ones.\nTests might be better written by actually testing if nock is really intercepting requests to those problematic root URLs. So consider this to be a WIP, I will get back at it later on.\nIf you already have any sort of feedback, it'll be really appreciated.\n. Will get back to it in a couple of weeks. I would but I honestly don't have the bandwidth right now for fixing this, especially given that I am not familiar with node-nock source code. I fixed the parsing tests, I ended up removing the call to url.parse which was really, really bad at parsing all those specific urls, and rolling out my own solution.\nHowever it seems that it is not sufficient for nock to correctly intercept requests. So I have 14 passing over 27 tests. I am not sure why nock does not intercept requests correctly. Could you have a quick look at the code and let me know if you have an idea why ?\nBTW you should avoid rebasing contributors branches for ongoing tickets, because it makes local branches divert from remote, which then forces us to make a local merge if we forget to pull first ;). Sorry about the inactivity. I will have a couple of busy weeks and I'll get a go at it after then. Sadly not :( . I have added a few tests with protocols like you requested.\nAlso added a test to check that if a root url has a trailing backslash (like foo.com/) nocking will still work.\nAnd finally I have added actual checks that node can intercept a request on those root urls. Currently it cannot.\nOnce those tests pass, I have the feeling nock will be much more enjoyable and easy to use.. ",
    "lblinovs": "I've decided to use reply function to get a request from there and parse the parameters. But I assume that wouldn't help if sending post request.\n. ",
    "jiayihu": "I'm having the same issue and tested code which relies on statusText. How can I help to make nock support this behaviour?\n. ",
    "persocon": "short answer, you can't.... you have to have a http://something, you could call localhost, you could call the final API url, but you have to have a url :( struggled on that a few weeks ago to test some async actions with redux and redux-thunk\n. @creativetim yes, ahm if I run the test on travis-ci for instance, it doens't have access to the API at all, because it is localhost right, what's happening is that Nock is always trying to hit the API and failing because it can't find... makes sense what I'm trying to explain?\n. @creativetim I did this for the test: https://github.com/persocon/destiny-weekly/blob/master/test/actions/user.spec.jsx#L85\nand on the action: https://github.com/persocon/destiny-weekly/blob/master/src/app/javascript/actions/user.jsx#L18\nI have a url option just for the tests\nBUUUUT it raised a new issue: https://github.com/node-nock/nock/issues/583 it's trying to hit the real API haha even when I disable the thing\n. cool! now I got a \nNetwork request failed\nhave no idea how is that even possible :( makes sense for you?\n. ",
    "creativetim": "@persocon If I understand you correctly does that mean that the URL is arbitrary?\nI'm in the process of writing some tests for my redux action creators that return thunks and make relative API calls using isomorphic-fetch. \n. ",
    "CodeMan99": "Sorry! Totally missed I should be using .query for my case.\n. After a bit more digging it seems that order matters? Is that correct?\n. Or does every value need to be a string?\n. Why does this change not count as a breaking change? This broke my tests and I had to dig to this pull request to find out why.. @gr2m Was just an honest question, wasn't trying to be firm or abrasive. Sorry.. ",
    "dhinus": "A workaround is to convert the object to a string with JSON.stringify, then the match must be exact, but you lose the ability of using a RegExp in attribute values.\njs\nnock(url).post('/foo', JSON.stringify({ your: 'object' })). @antonsamper true, I noticed that too after posting my comment. Thanks for adding a note about that.. ",
    "antonsamper": "A quick note on @dhinus solution. It does work but you will need to also ensure that you put the properties in the correct order. The following will give different results:\nJSON.stringify({a: 1, b: 2})\nJSON.stringify({b: 2, a: 1}). ",
    "liorur": "syntax suggestions fro PR:\nnock(domain)\n        .post(path, data, strict)\n        .reply(responseCode, responseData);\nor\nnock(domain)\n        .post(path, data)\n        .strict()\n        .reply(responseCode, responseData);\nWDYT?. ",
    "pvdlg": "This feature would still be great and would allow to use nock with tools that run tests concurrently.. ",
    "halfninja": "The test doesn't know to wait for your Promise to finish, so it's calling afterEach before your code has actually run. I think the most recent Mocha has support for promises - you just need to return the promise at the end, and it'll wait for it to complete. so return store.dispatch(...etc\n. ",
    "dannyid": "I'm having the same problem. If you're using Jest, I believe you need to unmock these modules before using them because Jest will automock everything. \nAt the top of your file, add: \njest.unmock('nock');\njest.unmock('redux-mock-store');\njest.unmock('redux-thunk');\n. ",
    "tinder-dyakobian": "Confirming this was the issue.\nOn Mon, Jun 27, 2016 at 12:35 PM, Danny notifications@github.com wrote:\n\nI'm having the same problem. If you're using Jest, I believe you need to\nunmock these modules before using them because Jest will automock\neverything.\nAt the top of your file, add:\njest.unmock('nock');\njest.unmock('redux-mock-store');\njest.unmock('redux-thunk');\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/node-nock/nock/issues/584#issuecomment-228851326, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AS016_Y3IuGrCnLQFOse-kcX3cRaYZFEks5qQCYfgaJpZM4I226_\n.\n. \n",
    "tylerchilds": "Also confirming I was able to resolve this by putting this my package.json file:\n\"jest\": {\n    \"unmockedModulePathPatterns\": [\n      \"<rootDir>/node_modules/nock\",\n      \"<rootDir>/node_modules/redux-thunk\",\n      \"<rootDir>/node_modules/redux-mock-store\",\n    ]\n  }\n. ",
    "mjabraham47": "Anyone have this issue with jasmine?. ",
    "mooyoul": "Hmm i think that is not an normal use-case. \njust curious, Why do you mock Reason Phrase (statusText)? not enough mocking status code only?\nAlso, Reason Phrase was removed from HTTP/2. It's dead feature.\n\nHTTP/2 does not define a way to carry the version or reason phrase that is included in an HTTP/1.1 status line.\n\nand, according to In HTTP/1.1 Spec, it is not required to examine or display.\n\nThe client is not required to examine or display the Reason- Phrase.\n. \n",
    "papakai": "+1. ",
    "handane123": "Due to the output of the test, it still fetches a real http request, So the nock fails to intercept it.\n. ",
    "kellyrmilligan": "yeah, right? the redux docs have isomorphic fetch being used with nock, but it's not really working from what I can tell :(. fetch-mock is working well for me for this. . sure:\n```\nimport * as actions from './index'\nimport configureMockStore from 'redux-mock-store'\nimport thunk from 'redux-thunk'\nimport fetchMock from 'fetch-mock'\nconst middlewares = [ thunk ]\nconst mockStore = configureMockStore(middlewares)\nconst mockResult = { ...some data }\ndescribe('action creators', () => {\nafterEach(() => {\n    fetchMock.reset()\n  })\nit('should create SEARCH_SUCCESS when searching', () => {\n    fetchMock.mock('glob:http:///search?q=name', mockResult)\nconst expectedActions = [\n  { type: actions.SEARCH_LOADING },\n  { type: actions.SEARCH_SUCCESS, payload: mockResult  }\n]\nconst store = mockStore({ search: {\n  result: {}\n}})\n\nreturn store.dispatch(actions.search('Term'))\n  .then((data) => { // return of async actions\n    expect(store.getActions()).toEqual(expectedActions)\n  })\n\n})\n})\n```\nI edited the code a bit to make it more generic, hope this helps. . ",
    "evansiroky": "+1\nAlso applies when providing params in an array with .query()\n. ",
    "soliveira-nascent": "+1\nAlso having the same issue. ",
    "tannerbaum": "Almost two years later I have run into a similar problem with overzealous Axios and I am not sure the best way to proceed. . So I will say I eventually found out the best way for me to make my test work was to use Node's Stringify to build my request URL instead of using any sort of Encoding function or library on a string. This is probably obvious to most here. \nSo my working jest test ended up being:\n```\nit(\"correctly builds getEntries() request\", async () => {\n            expect.assertions(1);\n        const givenParameters = {\n            ...\n        };\n        const expectedParameters = {\n            time_since: \"2017-08-18 00:00:00\",\n            time_until: \"2018-02-09 00:00:00\",\n            \"filter[billable]\": 2,\n        };\n\n        // Basically just standard code to create the Nock Object (passing in the path) \n        const nockObj = getNock(\"/entries?\" + stringify(expectedParameters));\n\n        await userClockodo.getEntries(givenParameters);\n\n        expect(nockObj.isDone()).toBe(true);\n    });\n\n```\n. ",
    "izikl": "I did this:\n```\nnock().post().reply(200,\n   (uri, body) => {\n      expect(body.category).to.equal(\"goodies\");\n      expect(body.notification).to.equal(\"some_template\");\n      expect(body.app_id).to.not.be.empty;\n      return body;\n   });\n\n```\nand I am using mocha, so I have used afterEach to do the cleaning:\nafterEach(() => {\n   nock.cleanAll();\n});\nwithout calling cleanAll, the callback is called in every test. \nbut I think passing the actual request in the scope can be more straight forward. something like:\nvar scope = nock(<some-url>).post(<some-sub-url>).reply(200);\n<call under test that do the http call and return a prmoise>\n    .then(() => {\n       expect(scope.request.body.category).to.equal(\"goodies\");\n       expect(scope.request.body.notification).to.equal(\"some_template\");\n       expect(scope.request.body.app_id).to.not.be.empty;\n    });\n. ",
    "mhelvens": "But @protometa added:\n\nthat allows the real request/response to go through\n\nBut the approach above doesn't do that, does it? It blocks and replaces the actual request / response.. @gr2m: I'm working on an http router for npm requests. Some requests should be proxied to a private registry (not mocked), others to the official npm registry (mocked). I have to write tests like:\n\"Expect GET /@private-scope/package to be routed to private registry.\"\n\"Expect GET /jquery to be routed to npm.\"\netc.\nTo write those tests I need to spy on outgoing requests to distinguish one from the other. And the way nock works right now, it took some messy code to get them to work.. @gr2m: I am aware. But it doesn't seem relevant to the issue we're discussing. Our routing is not just based on scopes, and its users are not just using the npm client.\nSuffice to say that the router's existence is justified, and we need to write tests to verify that requests are routed to the right registries. The best way to do this is to spy on outgoing http requests, and it would be great if nock supported that.. @gr2m: In lieu of a fully fledged spy feature, how about a cheaper substitute? Namely, something like nock.emitter.on('request', () => {}) that emits events for all requests (including body), regardless of whether they were matched by a nock rule. Would you consider a PR to that effect?\nMy current solution is to patch together subscriptions to nock.emitter.on('no match') and scope.on('replied') to get a complete picture, as well as to put an extra line of code in the .reply() callback of the latter, to augment the request object with the request body, making it accessible to my 'replied' subscription.\nWhat I propose is a cleaner version of that. It seems a lot simpler than real spies, and would already help out a lot.. This has been on my TODO list for a while now, but it's time to acknowledge that this won't happen any time soon. I did spend a few hours on it soon after your reply, but I couldn't really figure out where best to emit the event, nor how to gain access to the request body. If you're interested, this is how far I got: https://github.com/node-nock/nock/pull/1028. ",
    "maheshjag": "@pgte I know you must be busy, but could you please cast your eye over this issue and let me know if it's a limitation of the module, or if it's something that I've done wrongly?\n. Nope, the app has been started and is running\n. @vitorarins @matanh-tzmedical Many thanks for your responses. No, I wasn't requiring the app in my test, and yes, I was running the app separately.\nYes, I'm happy for this issue to be closed.. ",
    "matanh-tzmedical": "Maybe you forgot to require your sample app before the test starts.\n. Are you running the server separately and the test separately? Nock will only mock the request of the current process, not all processes that are running. Running them separately will not work.\nYou need your test to run the app, as in your test should var myapp = require('../myapp.js')\n. @vitorarins I've only used Nock a little bit, but there are a couple things you can try to help you pinpoint the problem. Look at the .isDone() function (https://github.com/node-nock/nock#isdone) and the .pendingMocks() function (https://github.com/node-nock/nock#pendingmocks). These might help you figure out what's going on.\n. ",
    "vitorarins": "Hi @matanh-tzmedical @maheshjag. I ma having the same problem testing my application. But I use the suggested code: var myapp = require('../myapp.js'). I am also using supertest instead of the request directly, to test the routes in my application. But it seems the requests I do inside my app won't get mocked.\nHere is what the app looks like:\n``` javascript\nvar prom = require('bluebird');\nvar request = require('request');\nprom.promisifyAll(request);\nvar app = require('express')();\nvar router = require('express').Router();\nvar getProfile = function(req,res) {\n  request.getAsync('http://192.168.10.100:8000/service/profile').spread(function(response){\n    return prom.resolve(response);\n  });\n};\nrouter.route('/profile').get(getProfile);\napp.use('/v1', router);\nmodule.exports = app\n```\nAnd here is what the test looks like:\n``` javascript\nvar request = require('supertest');\nvar app = require('../src/app');\nvar assert = require('assert');\nvar nock = require('nock');\ndescribe('Major integration test', function() {\nit('should return the correct profile', function (done) {\n\n    var profileMock = nock('http://192.168.10.100:8000')\n        .get('/service/profile')\n        .reply(200, { profile: 'This is a profile' });\n\n    this.timeout(0);\n\n    request(app)\n        .get('/v1/profile')\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .end(function (err, res) {\n            var expectedProfile = { profile: 'This is a profile'};\n\n            profileMock.isDone();\n            assert.deepEqual(res.body, expectedProfile, 'Profile as expected');\n            done();\n        });\n});\n\n});\n```\nI hope it's clear. Let me know what you think \ud83d\ude09 \n. I also made an updated version of @maheshjag example using supertest, and I can confirm it doesn't work.\nSample app:\n``` javascript\nvar express = require('express');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar request = require('request');\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.get('/test', function (req, res) {\n    request.get('http://www.google.com', function (err, response, body) {\n        res.json(body);\n    });\n});\nmodule.exports = app;\n```\nSample test:\n``` javascript\nvar mocker = require('nock');\nvar request = require('supertest');\nvar assert = require('assert');\nvar app = require('../app');\ndescribe('node-nock', function () {\n    var testOutput = { output: 'Hooray!'};\n    mocker('http://www.google.com')\n        .get('/')\n        .reply(200, testOutput);\nit('should mock the request to google.com', function (done) {\nrequest(app)\n    .get('/test')\n    .expect(200)\n    .end(function (err,res){\n                assert.equal(res.body, JSON.stringify(testOutput));\n                done();\n    });\n});\n\n});\n```\nEDIT: changing the res.send to res.json solved the problem, now the test passes.\n. I tried using the functions mentioned by @matanh-tzmedical with no success. When I run the tests, .isDone() returns true and .pendingMocks() shows nothing.\n. I realized something about the way we are treating the response here and found out the problem. The problem was that me and @maheshjag are sending the response via res.send(body), but that will never get populated in the body or res.body parameter we are looking in the test. \nThe way I found to circumvent this problem is to send the response like this: res.json(body), and in the test the res.body parameter will have a stringified json of the response. I updated my comment https://github.com/node-nock/nock/issues/596#issuecomment-237257284 to reflect what I'm saying.\n@maheshjag could you give it a try and maybe close this issue?\n. ",
    "apals": "Any headway on this? :)\n. ",
    "anotheredward": "@ianwsperber Do you need any help with this? It would be incredible to get this merged in, just spent the better part of 30 minutes hunting down a missing header.\nNo part of the current error message tells me what is going on :(\nRequestError: Error: Nock: \nNo match for request \nPOST http://localhost:3002/graph/Person \n{\"__objType\":\"Person\",\"id\":\"b63dfb7485-9f3ed-4dfed8-addfde-e9aaadsfee38756\",\"firstName\":\"Edward\"}\nI'd prefer the original http request to this!. A URL could also have a:\n1. Query String ?a=123&b=456\n2. Fragment #00h02m01s\nhttps://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL\nImportance: \nQuery String: Major, as we match on this\nFragment: Minor, I'm not sure Nock supports this. TIL: JSON.stringify has more than one param. Port always has a value, so we can move the \":\" into the string we are formatting on Line 191 and remove this line.\nImportance: Minor. ",
    "sdurandeu": "I've managed to workaround this by defining a new scope every time. Instead of:\nvar scope = nock('http://test');\nscope.get('/1').reply(200);\nscope.get('/2').reply(200);\nUse:\nnock('http://test').get('/1').reply(200);\nnock('http://test').get('/2').reply(200);\n. ",
    "charlierudolph": "Just ran into this as well. Agree this is counter-intuitive.\n. ",
    "benbuckman": ":+1: I just ran into this too and it seems like a bug.\n. https://github.com/node-nock/nock/pull/704 should fix this bug.\n. I don't have time to work on this anymore, someone else can pick this up if they wish. Thanks.. :+1: I vote for Mocha with Chai. I think Jasmine is kind of outdated.\n. (Previously if the URI itself had a querystring, it behaved differently than if it was set via query. I don't see any good reason for this distinction.)\n. Fixing indentation\n. (Adding negative tests)\n. ",
    "galenus": "What's happening with this bug? . ",
    "lauterry": "Hi @BrunoQuaresma \nHave you managed to get your nightwatch tests work with nock ?. ",
    "BrunoQuaresma": "Correct @vrinek . ",
    "gurghet": "what would be a simple setup?. ",
    "thephilwells": "Same here. @lordakshaya were you able to resolve this?\nI'm getting status code 200 from the following request:\nlet scope = nock(`http://${hostname}`)\n  .get(`${path}`)\n  .reply(404, \"everything exploded\");\n. Hey, sorry for my delayed response. In my case, this turned out to be related to a bug in another part of my app. Can close, as far as I'm concerned. Thanks.\n. ",
    "akshayakrsh": "@vrinek apologies for the delayed response, here's the full code:\n``` js\nlab.test('returns error for non-existent user', function (done) {\nvar errRes = {\n  'statusCode': 404,\n  'error': 'Not Found',\n  'message': 'The user does not exist.',\n  'errorCode': 'inexistent_user'\n};\n\nscope = Nock('http://www.abc.com')\n  .get('/test')\n  .reply(404, errRes);\n\nvar http = require('http');\nhttp.get('http://www.abc.com/test', function(response) {\n  console.log('[Status Code]', response.statusCode);\n  console.log('[Status Result]', response.result);\n  console.log('[Status Error]', response.error);\n\n  Code.expect(response.statusCode).to.equal(404);\n  Code.expect(response.result.error).to.equal('Not Found');\n  Code.expect(response.result.message).to.equal('The user does not exist.');\n  Code.expect(response.result.errorCode).to.equal('inexistent_user');\n\n  done();\n\n});\n\n});\n```\nAnd here's the output of the test:\n\nPlease re-open the issue.\n. ",
    "ltegman": "We would need to see a sample of how you're using nock and making your requests in order to diagnose this problem. I've been using it successfully with https recently, so it must either be an edge case you're hitting or something about your test setup.\n. I added a test covering this. One layer of array should be enough, since that was all it took to cause the problem, but I'm happy to add a more complex test case if you'd like.\n. Can't believe I missed this! Thanks for cleaning up after me and adding the test case for this regression :+1: \n. ",
    "aleksgidenko": "I thought I was having the same issue earlier today, it was working with http and request-promise but not request.  After some debugging I figured out it was me.  I was expecting an error to be printed to the console, which it won't if you don't check the error in the callback and console log it.  :-)\n```\nlet nock = require(\"nock\");\n    nock.disableNetConnect();\n// let http = require(\"http\");\n// var req = http.get('http://google.com/');\n// req.on('error', function(err){\n//     console.log(err);\n// });\n\n// let rp = require(\"request-promise\");\n// rp('http://www.google.com')\n//     .then(function (htmlString) {\n//         console.log(htmlString);\n//     })\n//     .catch(function (err) {\n//         console.log(err);\n//     });\n\nvar request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n    if (error) {\n        console.log(error);\n    }\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n})\n\n```\nLet me know if this is not the same issue for you.  Here are the versions I used:\n\"nock\": \"^9.0.2\",\n\"request\": \"^2.79.0\",\n\"request-promise\": \"^4.1.1\". I thought I was having the same issue earlier today, it was working with http and request-promise but not request.  After some debugging I figured out it was me.  I was expecting an error to be printed to the console, which it won't if you don't check the error in the callback and console log it.  :-)\n\n```js\nlet nock = require(\"nock\");\n    nock.disableNetConnect();\n// let http = require(\"http\");\n// var req = http.get('http://google.com/');\n// req.on('error', function(err){\n//     console.log(err);\n// });\n\n// let rp = require(\"request-promise\");\n// rp('http://www.google.com')\n//     .then(function (htmlString) {\n//         console.log(htmlString);\n//     })\n//     .catch(function (err) {\n//         console.log(err);\n//     });\n\nvar request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n    if (error) {\n        console.log(error);\n    }\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n})\n\n```\nLet me know if this is not the same issue for you.  Here are the versions I used:\n\"nock\": \"^9.0.2\",\n\"request\": \"^2.79.0\",\n\"request-promise\": \"^4.1.1\".\n",
    "travi": "I've been seeing a similar issue that started fairly recently that results in tests timing out because of the lack of the response. \nUsing DEBUG=nock.*, I can confirm that while the match is found, the response is never emitted.\nFor the test that fails, the debug output ends with:\n```\n\n\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider interceptor identified, starting mocking\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider response.rawHeaders: []\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider transform the response body\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider emitting response\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider adding body to buffer list\n```\n\n\nFor other tests, the output continues with further steps that show chunks being emitted and the response being closed:\n```\n\n\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider interceptor identified, starting mocking\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider response.rawHeaders: []\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider transform the response body\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider emitting response\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider adding body to buffer list\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider emitting response chunk\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider emitting response chunk\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider ending response stream\nTue, 06 Sep 2016 19:24:12 GMT nock.request_overrider ending response stream\n```\n\n\nTo make matters even more difficult to track down, this is not consistent. Sometimes the response comes through just fine and the tests pass. I'm not yet sure if this is significant, but the test that runs into the issue happens to be the first one that runs.\n. it appears that setImmediate never triggers its callback for the first test when this happens. if i change the test order, the new first test starts timing out rather than the old first test.\ni don't understand why this would consistently only happen for the first test (or why it would be happening at all...)\n. i finally came back to this and tracked my problem down to something unrelated. when nock yielded control with setImmediate, something else must have still been on the queue and hogged enough cpu time for it to cause the test timeout that i was seeing. my issue was not related to nock, but rather nock was where the symptom showed up due to yielding control here.\n. i'd really appreciate getting this merged as well since this is the behavior that is expected for my project as well. Thanks @gr2m!. i confirmed that this solves the problem that we had. thanks again @gr2m and @s-taylor . as a start, running npm run tests:integration:debug against https://github.com/travi-org/admin.travi.org shows this issue. that project is an old reference project that is not very complex and not very polished, but could at least show the problem until i get a chance to dig deeper.\nthe lines of output that are tagged with test are the nock logs, so the main thing to notice is that every line always just the host, with no path specified. this project doesnt have tests that match against query params that i remember, but you can still see it attempt to match against the various paths that are stubbed and eventually match one, even though the matched path is different than what is suggested as the call since it is missing the path.\nif i can find some time, ill try to dig in to see what a fix would take. assuming i can figure it out, im happy to put a PR together. from initial looking through the code, this appears to be the logging i'm referring to. it looks like the actual matching compares both the matchKey and the path, but the log message includes only matchKey and not path.\noutside of digging enough to understand the case of this.url being a function, it seems like a fix should be pretty straight forward. i'll see if i can get a PR together this week sometime.. also, i've found that using parse-multipart against the requestBody passed to .reply() fails to find parts due to not being able to match line endings. i'm happy to open a separate issue for this, but i'm note sure if it would be related to any processing that nock is doing to the payload before passing it to .reply() or if it is on the parse-multipart side.\nthe check that isn't behaving correctly is:\nvar newLineDetected = ((oneByte == 0x0a) && (prevByte == 0x0d)) ? true : false;\n0x0a should be hex for '\\n' and 0x0d should be hex for '\\r'. this situation does happen, but it fails to be detected.\nwhile this isn't directly related to the issue i filied, i'm mostly including these details in case it helps ensure enabling proper inspection of the parts for the actual issue above.. > \ud83d\udc4b hello Travi, you are everywhere \ud83d\ude01\nhaha, this coming from the guy who is an actual maintainer everywhere ;)\n\nI do what I can to keep nock moving forward but don\u2019t have much time right now.\n\nseriously, thank you for the time you do put in to so many projects. the progress forward in all of these places is hugely valuable.\ni was able to verify enough of what i needed to so that i could move forward, but without being able to parse the multipart payload. therefore, this isn't a blocker for us. no worries if it doesn't get attention right away. i mostly wanted to capture details for visibility while they were fresh in my mind.\ni'm slowly getting a bit more time for making small contributions here and there again. if i can find the time before you see this as a priority, i'd be happy to look into contributing a fix for this. i have several things on my priority list that i need to handle before this though.. anything happen to come to mind that might be happening on the nock side to make the body miss the line-ending matching that i mentioned? happen to know of any other multipart parsing libraries that might work better? i had a surprisingly hard time finding much that wasn't purely focus form-data payloads when dealing with multipart.. This one still send worth investigating, but i have not found the time to did deeper yet. ",
    "tudorgergely": "any updates on this issue? I think I have the same problem. Although the request matches just fine it just does not reply anything.. ",
    "barczaG": "I made a PR then nock.recorder.restore() can be used which stops the recording.\nhttps://github.com/node-nock/nock/pull/660\n. ",
    "bj97301": "I dont see it =/  I see clear but it does not seem to work. . wait... its on nock not the recorder... bah. Ha \ud83e\udd47 . ",
    "shreychaturvedi123": "my mistake needs to be called as nock('rootUrl').get('url')\n. ",
    "leslc": "I see the requests are saved to outputs with \"push\" into an array.  Closing, since it's an issue on our side.\n. ",
    "abdulito": "Thanks!!!!\n. ",
    "nockbot": ":tada: This issue has been resolved in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.4.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.2.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.2.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.3.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.3.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.3.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.3.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.3.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.3.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.4.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.6.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.6.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.4.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.5.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.5.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.6.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.6.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.6.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.5 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.1 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. ## :rotating_light: The automated release from the beta branch failed. :rotating_light:\nI recommend you give this issue a high priority, so other packages depending on you could benefit from your bug fixes and new features.\nYou can find below the list of errors reported by semantic-release. Each one of them has to be resolved in order to automatically publish your package. I\u2019m sure you can resolve this \ud83d\udcaa.\nErrors are usually caused by a misconfiguration or an authentication problem. With each error reported below you will find explanation and guidance to help you to resolve it.\nOnce all the errors are resolved, semantic-release will release your package the next time you push a commit to the beta branch. You can also manually restart the failed CI job that runs semantic-release.\nIf you are not sure how to resolve this, here is some links that can help you:\n- Usage documentation\n- Frequently Asked Questions\n- Support channels\nIf those don\u2019t help, or if this issue is reporting something you think isn\u2019t right, you can always ask the humans behind semantic-release.\n\nThe push permission to the Git repository is required.\nsemantic-release cannot push the version tag to the branch undefined on remote Git repository with URL https://[secure]@github.com/nock/nock.git.\nPlease refer to the authentication configuration documentation to configure the Git credentials on your CI environment and make sure the repositoryUrl is configured with a valid Git URL.\n\nGood luck with your project \u2728\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.5 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. ## :rotating_light: The automated release from the beta branch failed. :rotating_light:\nI recommend you give this issue a high priority, so other packages depending on you could benefit from your bug fixes and new features.\nYou can find below the list of errors reported by semantic-release. Each one of them has to be resolved in order to automatically publish your package. I\u2019m sure you can resolve this \ud83d\udcaa.\nErrors are usually caused by a misconfiguration or an authentication problem. With each error reported below you will find explanation and guidance to help you to resolve it.\nOnce all the errors are resolved, semantic-release will release your package the next time you push a commit to the beta branch. You can also manually restart the failed CI job that runs semantic-release.\nIf you are not sure how to resolve this, here is some links that can help you:\n- Usage documentation\n- Frequently Asked Questions\n- Support channels\nIf those don\u2019t help, or if this issue is reporting something you think isn\u2019t right, you can always ask the humans behind semantic-release.\n\nThe push permission to the Git repository is required.\nsemantic-release cannot push the version tag to the branch beta on remote Git repository with URL https://[secure]@github.com/nock/nock.git.\nPlease refer to the authentication configuration documentation to configure the Git credentials on your CI environment and make sure the repositoryUrl is configured with a valid Git URL.\n\nGood luck with your project \u2728\nYour semantic-release bot :package::rocket:. ## :rotating_light: The automated release from the beta branch failed. :rotating_light:\nI recommend you give this issue a high priority, so other packages depending on you could benefit from your bug fixes and new features.\nYou can find below the list of errors reported by semantic-release. Each one of them has to be resolved in order to automatically publish your package. I\u2019m sure you can resolve this \ud83d\udcaa.\nErrors are usually caused by a misconfiguration or an authentication problem. With each error reported below you will find explanation and guidance to help you to resolve it.\nOnce all the errors are resolved, semantic-release will release your package the next time you push a commit to the beta branch. You can also manually restart the failed CI job that runs semantic-release.\nIf you are not sure how to resolve this, here is some links that can help you:\n- Usage documentation\n- Frequently Asked Questions\n- Support channels\nIf those don\u2019t help, or if this issue is reporting something you think isn\u2019t right, you can always ask the humans behind semantic-release.\n\nThe push permission to the Git repository is required.\nsemantic-release cannot push the version tag to the branch beta on remote Git repository with URL https://[secure]@github.com/nock/nock.git.\nPlease refer to the authentication configuration documentation to configure the Git credentials on your CI environment and make sure the repositoryUrl is configured with a valid Git URL.\n\nGood luck with your project \u2728\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. ## :rotating_light: The automated release from the beta branch failed. :rotating_light:\nI recommend you give this issue a high priority, so other packages depending on you could benefit from your bug fixes and new features.\nYou can find below the list of errors reported by semantic-release. Each one of them has to be resolved in order to automatically publish your package. I\u2019m sure you can resolve this \ud83d\udcaa.\nErrors are usually caused by a misconfiguration or an authentication problem. With each error reported below you will find explanation and guidance to help you to resolve it.\nOnce all the errors are resolved, semantic-release will release your package the next time you push a commit to the beta branch. You can also manually restart the failed CI job that runs semantic-release.\nIf you are not sure how to resolve this, here is some links that can help you:\n- Usage documentation\n- Frequently Asked Questions\n- Support channels\nIf those don\u2019t help, or if this issue is reporting something you think isn\u2019t right, you can always ask the humans behind semantic-release.\n\nThe push permission to the Git repository is required.\nsemantic-release cannot push the version tag to the branch beta on remote Git repository with URL https://[secure]@github.com/nock/nock.git.\nPlease refer to the authentication configuration documentation to configure the Git credentials on your CI environment and make sure the repositoryUrl is configured with a valid Git URL.\n\nGood luck with your project \u2728\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.2 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.6 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.3 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.6 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.3 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.3 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.3 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 11.0.0-beta.5 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.4 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. ## :rotating_light: The automated release from the beta branch failed. :rotating_light:\nI recommend you give this issue a high priority, so other packages depending on you could benefit from your bug fixes and new features.\nYou can find below the list of errors reported by semantic-release. Each one of them has to be resolved in order to automatically publish your package. I\u2019m sure you can resolve this \ud83d\udcaa.\nErrors are usually caused by a misconfiguration or an authentication problem. With each error reported below you will find explanation and guidance to help you to resolve it.\nOnce all the errors are resolved, semantic-release will release your package the next time you push a commit to the beta branch. You can also manually restart the failed CI job that runs semantic-release.\nIf you are not sure how to resolve this, here is some links that can help you:\n- Usage documentation\n- Frequently Asked Questions\n- Support channels\nIf those don\u2019t help, or if this issue is reporting something you think isn\u2019t right, you can always ask the humans behind semantic-release.\n\nThe push permission to the Git repository is required.\nsemantic-release cannot push the version tag to the branch beta on remote Git repository with URL https://[secure]@github.com/nock/nock.git.\nPlease refer to the authentication configuration documentation to configure the Git credentials on your CI environment and make sure the repositoryUrl is configured with a valid Git URL.\n\nGood luck with your project \u2728\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.5 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.5 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.5 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.5 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.5 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.5 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. ## :rotating_light: The automated release from the beta branch failed. :rotating_light:\nI recommend you give this issue a high priority, so other packages depending on you could benefit from your bug fixes and new features.\nYou can find below the list of errors reported by semantic-release. Each one of them has to be resolved in order to automatically publish your package. I\u2019m sure you can resolve this \ud83d\udcaa.\nErrors are usually caused by a misconfiguration or an authentication problem. With each error reported below you will find explanation and guidance to help you to resolve it.\nOnce all the errors are resolved, semantic-release will release your package the next time you push a commit to the beta branch. You can also manually restart the failed CI job that runs semantic-release.\nIf you are not sure how to resolve this, here is some links that can help you:\n- Usage documentation\n- Frequently Asked Questions\n- Support channels\nIf those don\u2019t help, or if this issue is reporting something you think isn\u2019t right, you can always ask the humans behind semantic-release.\n\nThe push permission to the Git repository is required.\nsemantic-release cannot push the version tag to the branch beta on remote Git repository with URL https://[secure]@github.com/nock/nock.git.\nPlease refer to the authentication configuration documentation to configure the Git credentials on your CI environment and make sure the repositoryUrl is configured with a valid Git URL.\n\nGood luck with your project \u2728\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 11.0.0-beta.6 :tada:\nThe release is available on:\n- npm package (@beta dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. ",
    "Chengxuan": "This could have been communicated better, our tests started failing after picked up 10.0.5 because most of them use fakeTimer which didn't impact nock. Now they all timing out and it took me a while to figure out why. I agree to give more control is better, but I don't think most of existing users know it uses a separate timer due to existing behaviour. They'll need to go through the same debugging process as I did now. \nMaybe update your readme with an example would help? This is a change of behaviour for all the existing tests uses fakeTimer. Those tests will start failing with no obvious error other than timing out and it would take a while to track down to the nock library.\n. FYI @RichardLitt more discussion have happened in https://github.com/nock/nock/issues/1334.. @gr2m @taylor1791 would appreciate your opinions on this issue since the change was introduced by you. I wonder should the behaviour of this library be affected by using fake timer. Because the real http request does not seem to be affected by timer (It's managed in a different phase of the node js event loop.).\nThis library happens to use timer to simulate the http response but it doesn't mean this implementation details should be exposed and exploited by the consumer of this library. Plus, this change does increase the complexity of using this library and break existing behaviour.  I'd suggest it to be rolled back.\n~I have to put comments in my test code to tell the reader why I'm manipulating the fake timer in some special lines. This is really a pain... Readability and easy to use should be considered.~\nhttps://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/. @taylor1791 you made good points there. We'll see how maintainers respond. Also worth pointing out, not all repos are on the public github, there are also ones on other souce code management systems. . @paulmelnikow I'd like to address that if you only use fake timer without using nock in a test and let the application call out to the real http endpoint, you DO NOT need to manipulate the timer to make the test receiving those http responses (example test: https://github.com/Chengxuan/http-response-test/blob/master/test.js).\nI'd encourage whatever new capability introduced by this change should be exposed as a nock option instead of exposing the internal implementation. it should at least be controlled by nock directly, e.g. nock.useFakeTimers() instead of sinon.useFakeTimers(). \nHowever, the handling of https responses is not affected by timers at all in node.js . This change can misguide the users of nock library to have a wrong understanding of node.js event loop. Therefore, I think it should be removed. I could not think of a good use case for this at the moment (https://github.com/nock/nock#delay-the-response already supports most imagined use case I've come up with). . @paulmelnikow @taylor1791 @humantree To make sure we don't go too far away from the original issue. Can we work on fixing this first by reverting the change if we all agree on the following points:\n1. a minor version update shouldn't change the existing behaviour of the library\n2. the change of the behaviour is introduced as a side effect of fixing a code consistency issue\n4. the change of the behaviour doesn't seem to be backed up by any real use case yet since @paulmelnikow has asked what the use case is\nA new issue should be raised against this repo to figure out the use case of this side effectsince I'm not sure everyone looking at this issue are interested in that discussion.. @gr2m lolex is extracted from sinon. The same issue can be recreated with lolex as well. Here is the same broken test from @humantree using lolex instead of sinon fake timer: https://github.com/Chengxuan/nock-fake-timers/blob/master/test/test.js and the issue is still there. The test passes with 10.0.4, but not 10.0.5. I agree that a test should be written to avoid regression in the future, there's a test gap here.. I'll work on a PR then.. I want to see Travis fail on the above commit before I push the implementation. I did see the added test failing locally on my laptop, but not in the other PR. I suspect it's due to how travis has been configured for this project.. ",
    "bialesdaniel": "Does anyone know how to do this?\n. @Jusdev89 Nope no one helped me. I haven't found a solution either.. ",
    "devonwesley": "@bialesdaniel Did anyone help you with this. It doesn't work for me either.?. ",
    "codingthat": "I'm having the opposite problem on nock 9.1.9.  The above two lines do indeed block requests to external hosts, but then they seem to require mocking of 127.0.0.1 itself, which is a lot of extra boilerplate.. @kamalmarhubi may I suggest it be called nock/off =]. ",
    "dszakallas": "Done!\n. ",
    "stevenvachon": "\nHow does it work?\nNock works by overriding Node's http.request function. Also, it overrides http.ClientRequest too to cover for modules that use it directly.\n\nand:\n\nUse\nOn your test, you can setup your mocking object like this:\nvar nock = require('nock');\nvar couchdb = nock('http://myapp.iriscouch.com')\n                .get('/users/1')\n                .reply(200, {\n                  _id: '123ABC',\n                  _rev: '946B7D1C',\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                 });\nThis setup says that we will intercept every HTTP call to http://myapp.iriscouch.com.\nIt will intercept an HTTP GET request to '/users/1' and reply with a status 200, and the body will contain a user representation in JSON.\n\nIn your example, all requests to http://example.com/ will be intercepted/hijacked. Only \"/todos\" will reply, though.\n. @lukechilds thank you, but I transitioned from a real test server to nock a while ago and don't want to go back to it. @StarpTech that PR doesn't pass tests, so it's not yet of any use.. Any nock contributors actually care?. Fixed! Thank you.. ",
    "craigcosmo": "should nock work with karma and jasmine?\n. @stevenvachon does nock in the example does job of stub or fake or mock or spy?\n. I remove the the slashed, it still not works.\n. ",
    "raytung": "@craigcosmo From the first line of README :)\n\nNock is an HTTP mocking and expectations library for Node.js\n. @vrinek what's the expected behavior when nock.back receives optionoutput_objects: false? It never writes the result to disk?\n\nEDIT: I had a look at v7.4. It writes JSON object to disk because output_object was hard coded as true.. @aleung \ud83d\udc4d Didn't see it in the repo. Thanks should've  checked. ",
    "borestad": "I believe there's a slash to much.\nnock('http://example.com/') \nshould be\nnock('http://example.com')\n. ",
    "niksajanjic": "Nock is not working in Redux example using Jest for me too. request always happens. I also tried recording using:\nnock.recorder.rec()\nAnd even after copying what recorder consoled out it still didn't intercept it. The example can be found on this link:\nhttp://redux.js.org/docs/recipes/WritingTests.html\n. I was sure it did make real requests because I had my API running and consoling out every request. But then again I also ran my Jest configuration in Node environment and had some other changes from the example which possibly caused the issue. For instance, I didn't use isomorphic-fetch I just used whatwg-fetch polyfill.\nIn the end, I dropped nock and started using fecth-mock which was good enough for me. Not sure if it's just nock that wasn't intercepting or differences that I had from the example on Redux docs that caused it too.\n. ",
    "thomasthiebaud": "I cannot make it work with nock (I checked here too). But it works fine with fetchMock\nfetchMock.post('*', { errors: [{title: 'Error', detail: 'Some random error'}] });\nIs it a bug from nock ?\n. ",
    "4no0p": "@thomasthiebaud nock supports regex, so instead of '*' please use /./\n. ",
    "richardlay": "Just tried with a simple example and couldn't reproduce this unfortunately. \n. ",
    "LKay": "Having the same problem as described above. I have a method that does long polling (and uses setTimeout to trigger itself in time intervals). When I use sinon fake timers nock requests are not fired at all.\nMy test code looks like this:\n``` typescript\nimport \"../utils\"\nimport { expect } from \"chai\"\nimport * as sinon from \"sinon\"\nimport nock = require(\"nock\")\nimport { Resource } from \"../../src/resources/Resource\"\nimport { Scope } from \"nock\"\nimport { POLLING_INTERVAL } from \"../../src/constants\"\ndescribe(\"Charges\", () => {\n    let resource: Resource\n    let scope: Scope\n    const testEndpoint = \"http://localhost:80\"\n    let sandbox: Sinon.SinonSandbox\nbeforeEach(() => {\n    resource = new Resource()\n    scope = nock(testEndpoint)\n    sandbox = sinon.sandbox.create({\n        properties: [\"spy\", \"clock\"],\n        useFakeTimers: true\n    })\n})\n\nafterEach(() => {\n    nock.cleanAll()\n    sandbox.restore()\n})\n\ncontext(\"route GET /poll\", () => {\n    it(\"should perform long polling until condition is met\", () => {\n        let repeats = 3\n        const spy = sandbox.spy(global, \"fetch\")\n        const scopeScope = scope\n            .get(/\\/poll$/i)\n            .thrice()\n            .reply(200, () => {\n                sandbox.clock.tick(POLLING_INTERVAL)\n                return { status : repeats-- === 0 ? \"success\" : \"pending\" }\n            }, { \"Content-Type\" : \"application/json\" })\n\n        return resource.poll(\"1\", \"1\").should.eventually.eql({ status : \"success\" })\n            .then(() => expect(spy).to.have.been.calledThrice)\n    })\n})\n\n})\n```\n. ",
    "andrewk": "Experiencing this problem trying to test API polling using setInterval and nock. Requests no longer occur once clock.tick has been called.\nNock could use the same Date referencing strategy as Mocha uses to avoid this problem - https://github.com/mochajs/mocha/pull/392/files\n[edit] I tried the above approach in nock by creating local references to Date in the two files using that function; unfortunately it did not appear to fix the conflict sinon's fake timers causes for nock. Perhaps someone familiar with nock will have success where I did not.. ",
    "yamikuronue": "I don't have this problem today. Has it been silently fixed, maybe by Sinon's upgrade?\n(I found this ticket while debugging a problem I do have, but I can clearly see the nock call being registered and matched during the process). ",
    "LeoIannacone": "I got the same error\n. ",
    "itsovereasy": "Here's a test using nock that gives a \"network error\":\n``` javascript\n    it('should dispatch the proper actions on fail', () => {\n      const error = 'Failed to create assets';\n      nock('https://.amazonaws.com:443', { encodedQueryParams: true })\n        .post('/dev/assets/create', { petitionerId: 'abc123', createdAt: '2016-09-26T16:19:56.911Z', updatedAt: null })\n        .replyWithError({ message: error });\n  const store = mockStore(initialState);\n  const data = {\n    petitionerId: 'abc123'\n  };\n  const expected = [\n    { type: constants.REQUEST_ASSETS_CREATE, data },\n    { type: constants.ASSETS_CREATE_FAIL, data, error },\n  ];\n\n  return store.dispatch(actions.createAssets(data))\n    .then(() => {\n      expect(store.getActions()).toEqual(expected);\n    });\n});\n\n```\nI have another \"success\" test as well, where I am even including the response headers suggested, that also fails:\n``` javascript\nit('should dispatch the proper actions on success', () => {\n      nock('https://.us-west-2.amazonaws.com:443', { encodedQueryParams: true })\n        .post('/dev/assets/create', { petitionerId: 'abc123', createdAt: '2016-09-26T16:19:56.911Z', updatedAt: null })\n        .reply(200, {}, { 'content-type': 'application/json',\n        'content-length': '2',\n        connection: 'keep-alive',\n        date: 'Mon, 26 Sep 2016 16:19:57 GMT',\n        'access-control-allow-origin': '*',\n        'x-amzn-requestid': '',\n        'x-cache': 'Miss from cloudfront',\n        via: '1.1 .cloudfront.net (CloudFront)',\n        'x-amz-cf-id': '' });\n  const store = mockStore(initialState);\n  const data = {\n    petitionerId: 'abc123'\n  };\n  const expected = [\n    { type: constants.REQUEST_ASSETS_CREATE, data },\n    { type: constants.ASSETS_CREATE_SUCCESS, data, response: {} },\n  ];\n\n  return store.dispatch(actions.createAssets(data))\n    .then(() => {\n      expect(store.getActions()).toEqual(expected);\n    });\n});\n\n```\n. ",
    "ndelvalle": "Im having a similar problem testing a service using axios. Im testing on phatomjs, does this library also Intercept the browser requests?\n. I see the issue #409 related to fetch, is the problem related just to that lib or it happens also in other libs like axios.\n. Yeah I would really like to use nock instead of stubbing with sinon. But I think I'll do that for now. Thanks @paulwithap.\n. ",
    "paulwithap": "@vrinek I'm using axios. That seems to be the issue.\n@ndelvalle It seems that nock and axios don't play well together, and I believe it's related to the OPTIONS request axios sends before the actual request. I ended up using this method for stubbing my axios requests, and it's working for me now.\nHopefully nock will work with axios in the future, though, because the syntax is much nicer.\n. ",
    "dragoplut": "My solution by using moxios:\n```\nimport configureMockStore from 'redux-mock-store'\nimport thunk from 'redux-thunk'\nimport * as actions from './index'\nimport * as types from './actionTypes'\nimport axios from 'axios'\nimport moxios from 'moxios'\nconst middlewares = [ thunk ];\nconst mockStore = configureMockStore(middlewares);\nconst API_END_POINT = process.env.REACT_APP_API_ENDPOINT || 'https://web-api.com/api/v1/';\ndescribe('async actions', () => {\n  beforeEach(function () {\n    moxios.install()\n  });\nafterEach(function () {\n    moxios.uninstall()\n  });\nit('creates returns data in RECV_DATA when axios contacts request has been done', () => {\n    moxios.stubRequest(API_END_POINT + 'contacts', {\n      status: 200,\n      response: { data: { contacts: [{id: 1, firstName: 'FirstName', displayName: 'FirstName'}] }}\n    });\nconst expectedActions = [\n  { type: types.REQ_DATA },\n  { type: types.RECV_DATA, data: { contacts: [{id: 1, firstName: 'FirstName', displayName: 'FirstName'}] } }\n];\nconst store = mockStore({ contacts: [] });\n\nreturn store.dispatch(actions.getData('contacts'))\n  .then(() => {\n    expect(store.getActions()).toEqual(expectedActions)\n  })\n\n})\n});\n````. ",
    "traverse": "Is there any progress being made on this? Really would love to use nock instead of any other methods of HTTP mocking.\nEdit: I would love to contribute but I'm quite new to testing and don't really know where to start so if anyone can give me pointers that would be awesome. \ud83d\udc4d . ",
    "supnate": "I finally resolved the issue by this thread: https://github.com/mzabriskie/axios/issues/305\nBelow code from @dyakimenko-p works for me: \n```javascript\nimport {expect} from 'chai'\nimport axios from 'axios' // v0.15.3\nimport httpAdapter from 'axios/lib/adapters/http'\nimport nock from 'nock' // v9.0.2\nconst host = 'http://localhost';\naxios.defaults.host = host;\naxios.defaults.adapter = httpAdapter;\ndescribe('suite', () => {\n  it('test', done => {\n    nock(host)\n      .get('/test')\n      .reply(200, 'test data');\naxios.get('/test').then(response => {\n  expect(response.data).to.be.equal('test data');\n  done();\n});\n\n});\n});\n```. ",
    "ericadamski": "I am having a similar issue. The curious part is that nock works with the first request made to my /authenticate route, but fails to intercept the second route.\nI have fully tried to use moxios as well but I do not have access to the axios instance directly.\nAny help or direction would be greatly appreciated.\nHere is the output of my test (using Jest)\n```\nyarn test v0.19.1\n$ jest --no-cache \n FAIL  actions/tests/model/model.spec.js\n  \u25cf models \u203a fetches all the models\nAssertionError: Mocks not yet satisfied:\nGET https://domain.example.com:443/model_type\n\n  at Scope.done (../node_modules/nock/lib/scope.js:158:10)\n  at actions/__tests__/model/model.spec.js:70:19\n  at run (../node_modules/core-js/modules/es6.promise.js:87:22)\n  at ../node_modules/core-js/modules/es6.promise.js:100:28\n  at flush (../node_modules/core-js/modules/_microtask.js:18:9)\n  at _combinedTickCallback (../internal/process/next_tick.js:67:7)\n  at process._tickCallback (../internal/process/next_tick.js:98:9)\n\nmodels\n    \u2715 fetches all the models (30ms)\n    \u25cb fetches a signle model instance\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 2 total\nSnapshots:   0 total\nTime:        3.126s\nRan all test suites.\n  console.log ../node_modules/nock/lib/interceptor.js:321\n    matching https://domain.example.com:443 to POST https://domain.example.com:443/authenticate: true\nerror Command failed with exit code 1.\n```\n\nHad to rename some variables as per company policy\n\nhere is the code:\n```javascript\nimport nock from 'nock';\nimport configureMockStore from 'redux-mock-store';\nimport thunk from  'redux-thunk';\nimport * as actions from 'actions/model';\nimport * as TYPES from '../../model/constants';\nimport { expect } from 'chai';\nconst middlewares = [ thunk ];\nconst mockStore = configureMockStore(middlewares);\ndescribe('models', () => {\n    const gmodel = {\n        id: 1,\n        name: 'Test',\n        number: 1,\n        created_at: 1482348266,\n        updated_at: 1482348266,\n    };\n    const BASE_URL = 'https://domain.exampe.com';\nbeforeEach(() => {\n    nock.disableNetConnect();\n\n    nock(BASE_URL)\n        .log(console.log)\n        .post('/authenticate')\n        .reply(200, { token: 1 });\n});\n\nafterEach(() => nock.cleanAll());\n\nfit('fetches all the models', () => {\n    const model = 'model_type';\n    const data = [ gmodel ];\n    const store = mockStore({ model_type: {} });\n    const expectedActions = [\n        {\n            type: TYPES.MODEL_ALL,\n            model: { type: model },\n            data,\n        },\n    ];\n\n    const scope = nock(BASE_URL)\n        .log(console.log)\n        .get('/model_type')\n        .reply(200, { data });\n\n    return store.dispatch(actions.getAllModels(model))\n        .then(() => {\n            scope.done();\n            expect(store.getActions()).to.equal(expectedActions);\n        });\n});\n\n```. ",
    "z-vr": "Just in case it could help someone, I was getting Network Error on hosts other than http://localhost before I installed isomorphic-fetch for my react app. . ",
    "aditya1315": "I have a similar issue while using nock with axios (setup - jest + enzyme, react, redux) when I am testing an async action. When I try to dispatch an action ( store.dispatch(fetchData()).then() ), I get the error \n\nTypeError: Cannot read property 'then' of undefined\n\nWhy is this happening? nock is unable to mock the http request, I have looked at a lot of sources, but could not solve it. Any help is appreciated\ncode -\n```\nimport configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nimport nock from 'nock';\nimport { fetchData } from '../../actions/index';\nconst middlewares = [ thunk ];\nconst mockStore = configureMockStore(middlewares);\nconst host = 'http://localhost';\ndescribe('test actions', () => {\n    it('fetch data', () => {\n        const expectedData = {alpha: 1};\n    nock(host)\n        .get('/installation')\n        .reply(200, expectedData);\n\n    const expectedActions = [{\n            type: 'FETCH_DATA_FULFILLED',\n            payload: expectedData\n    }];\n    const store = mockStore({alpha: 0});\n\n    return store.dispatch(fetchData())\n                    // error occurs at this point\n        .then(() => {\n            expect(store.getActions().toEqual(expectedActions));\n        })\n        .error(() => {\n        });\n});\n\n});\n```. ",
    "stevematdavies": "This also appears to be happening with prequest requests too.. ",
    "shai32": "@aditya1315 the problem is with fetchData, can you print it?\nit should return a promise, does it?\nalso if u use axiox in fetchData, you should also need the adapter (define in the actions file after you import the axios)\naxios.defaults.adapter = httpAdapter;\n. In order to make int a 3rd party library, I need access to the Interceptor, but its private.. Thanks. ?. ",
    "hedgerh": "This problem is related to jsdom, somehow.  I switched from using Jest to using Jasmine as my testing framework and axios works out of the box with nock without changing the adapter or anything like that.. ",
    "ronami": "When axios is initializing, it checks if it's running in browser or node (see here) and it uses the appropriate adapter (http for node, xhr for browser and jsdom).\nThis means that if you require/import axios after you already have a jsdom globally available, axios will use the xhr adapter and use jsdom's XMLHttpRequest object.\nWhen axios is getting an error without any details from the browser, it returns a general \"Network Error\" exception (see here). To get more information about the error you're getting you can either use jsdom v10.x.x (has a default virtual console that sends everything to node's console), or if you're using v9.x.x or bellow, setup a virtual console by yourself:\njs\nvar virtualConsole = jsdom.createVirtualConsole().sendTo(console);\nrequire('jsdom-global')(..., { virtualConsole });\nI'm assuming you're getting cross-origin errors, if that's the case, here's how you can solve it.\nYou can either use axios's http adapter, which means you don't go through jsdom's APIs so no cross origin problems.\nFor testing react components you probably want to axios to go through jsdom's APIs, and you want your document running under a domain, and you would like to get cross origin errors if you're making requests outside of that domain. To make it work, you just need to setup your mocks with nock to return cross origin headers (just like you would on a real browser).\nTo initialize a jsdom under a domain, just pass a url option, like that:\njs\nrequire('jsdom-global')(..., { url: 'http://some-url.com' });\nFinally, return a cors header from nock mocks:\njs\nnock('http://some-url.com').get('/').reply(200, 'hello world', {'Access-Control-Allow-Origin': '*'}). ",
    "vinh0604": "Hi @tomalex0, you could try the allowUnmocked option https://github.com/node-nock/nock#allow-unmocked-requests-on-a-mocked-hostname\n. @vrinek The failing test is related to this issue https://github.com/assaf/zombie/issues/909 \nI tried downgrading zombie back to 4.0.8 and the test pass again.\nOtherwise, disabling this test, https://github.com/node-nock/nock/blob/master/tests/test_browserify.js,  for node 0.12 and below also make the test suite passed.\nI also prefer dropping support for pre-LTS node versions for newer release of nock, because some of our dependencies / nested dependencies like https://github.com/tmpvar/jsdom already did that. But maybe we should maintain a minor support branch for those versions?\n. Updated: Running tap with --harmony flag also allow the test to pass. In package.json:\njson\n\"test\": \"tap --harmony ./tests/test_*.js\",\n\"coverage\": \"nyc --reporter=lcov tap --harmony ./tests/test_*.js\",\n. > When we drop support for a node version, should we be incrementing the major or minor version part? http://semver.org is not clear on this.\nI'd go with a major version incrementing as dropping support for some specific Node versions could be considered as breaking changes.\nI also agree with option C that we keeps a legacy branch similar like https://github.com/tmpvar/jsdom/tree/3.x\n. ",
    "imran-uk": "I think I'm having the same scope leakage using mocha.\nI have several test scripts, some of which I am using supertest.\nThere is a require\"(nock\") is each - except one.\nI have one test script where I didn't mock the requests thinking they would make a real request. I have no require(\"nock\") in this. What seems to be happening is that nock seems to use an interceptor and because there is no match for the request, all the tests in that file will fail. \nHere is a fragment of the error trace:\n./node_modules/.bin/mocha foo/bar/test.js\n  ...\n  at self.callback (node_modules/request/request.js:187:22)\n  at Request.onRequestError (node_modules/request/request.js:813:8)\n  at node_modules/nock/lib/request_overrider.js:206:11\nIt might be something in the way I'm using nock which is incorrect. In that script I noticed that even when using nock, it would not make the usual complaint that \"no nock match found for request\".\nIt might also have something to do woth supertest, which runs the app locally and then tests it. https://www.npmjs.com/package/supertest\nVersions\n\"nock\": \"^8.0.0\",\n\"supertest\": \"^1.0.1\"\n. @vrinek I was not but I've added them now. It seems to have improved things a bit but I still don't see the \"no nock match error\" as expected. Sorry to be vague.\n. Nope.\nOn 23 Oct 2016 2:41 p.m., \"Kostas\" notifications@github.com wrote:\n\n@imran-uk https://github.com/imran-uk it are you using\nnock.disableNetConnect() in your setup and nock.enableNetConnect()?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/node-nock/nock/issues/705#issuecomment-255589253, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAhHQsFalnc8uY56vx4ZES507xA7LgeBks5q22QOgaJpZM4KKWeq\n.\n. \n",
    "kingchad": "Mocha chai and sinon have a lot of the mindshare in the javascript ecosystem as far as testing goes. However, you might also want to take a look at https://github.com/avajs/ava\n. ",
    "erichulburd": "I've tried numerous different setup and teardown strategies and cannot get multiple tests to run properly with nock (running mocha and supertest). For instance:\njs\n  beforeEach(()=>{\n    nock.disableNetConnect();\n    nock.enableNetConnect(/^(127\\.0\\.0\\.1|localhost)/);\n  });\n  afterEach(()=>{\n    nock.cleanAll();\n    nock.restore();\n  });\n  it('works on the first run', async ()=>{\n   const scopes  = nock.load('./scopes1.json');\n   await doSomething();\n   expect(scopes.every(scope=>scope.isDone()); // true\n  });\n  it('does not work on the second run', async ()=>{\n   const scopes  = nock.load('./scopes1.json');\n   await doSomething();\n   expect(scopes.every(scope=>scope.isDone()); // false\n  });\npackage.json:\n\"nock\": \"9.0.x\",\n    \"mocha\": \"3.2.x\",. ",
    "Coooi": "I also had the same issue @Arbolista.\nI could work around with this by separating the tests into different describe test cases.\nMake sure to modify the name of the test in the describe function.. ",
    "StarpTech": "I also faced with this issue. I clean up all mocks with \njs\n  afterEach((done) => {\n    Nock.cleanAll()\n    Nock.restore()\n    done()\n  })\nand in every test I mock the same endpoint.\nTest 1 respond with 500\nTest 2 respond with 200\nbut now I get 500 in Test 2 because Nock.pendingMocks() still contains two entrys :(\nnock: 9.0.13\nNodeJs 8. I also run into this issue I see there is already a PR to make nock node 8 ready. I hope it will reviewed fast.. @stevenvachon He said that there is only one browserify test failing. Thats a great base. BTW I think I will change to https://github.com/ctimmerm/axios-mock-adapter in combination with the excellent axios http request library. This not a solution for everybody but a much cleaner way to mock http calls in node.. Do you using the same Node Version?. @gr2m https://repl.it/@StarpTech/TestCase-1170 if you add a string to the array [401, ''] it will return 401 correctly.. > That looks like the desired behaviour to me. It may just be that you need to send a body, or it will default to 200. Is this an inconvenience?\nOf course! When I send 401 I expect 401.. @RichardLitt I provide a fix https://github.com/nock/nock/pull/1203. ",
    "sebarys": "I observed the same issue as above when mocking different response from the same endpoint in two tests (nock version: \"nock\": \"^9.0.17\").\nSuprisingly there is some non-deterministic behaviour.\nExample:\nI have two tests: Test 1 respond with 200, Test 2 respond with 401.\nWhen running tests in order:\n- Test 1, Test 2  => received two 200 response\n- Test 2, Test 1 => received 401 and next 200\nCleanup mocks: \nafterEach(function () {\n     nock.cleanAll();                \n});. ",
    "cameronroe": "I'm getting the same issue.\n. ",
    "evandavis": "nock 8.0.0 and node 6.3.1\n. Hmm, I get the same results from your test. I'm using redux-api-middleware in my app, but that doesn't appear to do anything to the body before passing it through to isomorphic-fetch. In any case, it looks like the issue is not in nock. Thanks!\n. @sirdavidwong not exactly; we ended up writing a custom stringifier based on the npm version of form-data for our tests. Not ideal. (I believe the issue is in how FormData converts to string outside the browser.). ",
    "sirdavidwong": "@evandavis did you find out what the issue was? I've got the same setup with redux-api-middleware, isomorphic-fetch, and nock and am getting the \"[object Object]\" as my request body within my tests.. Gotcha, ended up doing the same thing :) Thanks @evandavis !. ",
    "dmoli": "@sirdavidwong did you find out what the issue was?\nThanks!. With this version I get this error:\nMy test:\nnock('${API_URL}').post('/create', { user_id: 1 }).reply(201, { });\nMy endpoint:\nconst form = new FormData();\nform.append('user_id', 1);\nconst response = await fetch('http://myendpoint', {\nmethod: 'post',\nheaders: myCustomHeader,\nbody: form,\n});\nMy response after run test:\n\nMy versions:\n- nock: ^9.2.3\nDo you have another idea?\nThanks!. Thanks! I'm going to reply you when I make a minimal test case.\n. ",
    "kjona": "@vrinek I support your 'thinking out loud' idea of ignoring cases in HTTP headers (in accordance with the standard). Are you seeing any benefits of exact-matching?\n. This pull requests fixes the problem that a non-binary, multipart request will not be matched against recordings due to the following asymmetry:\nThe non-binary, multipart request (body) will not change its line-endings (match_body.js, ll. 22ff)\njs\n  //strip line endings from both so that we get a match no matter what OS we are running on\n  //if Content-Type does not contains 'multipart'\n  if (!isMultipart && typeof body === \"string\") {\n    body = body.replace(/\\r?\\n|\\r/g, '');\n  }\nHowever, in ll. 32ff, all - including non-binary, multipart request - recordings will have their line endings changed\njs\n  if (typeof spec === \"string\") {\n    spec = spec.replace(/\\r?\\n|\\r/g, '');\n  }\nTo illustrate the problem, see the following (quite minimal) example:\n```js\n'use strict';\n// start a local server\nvar http = require('http');\nvar server = http.createServer(function (req, res) {\n    if (req.url === '/upload') {\n        console.log('Upload form submitted');\n        res.writeHead(200);\n        res.end('done');\n    }\n});\nserver.listen(10222, 'localhost');\n// configure nock\nvar nockBack = require('nock').back;\nnockBack.fixtures = __dirname;\nnockBack.setMode('record');\nvar request = require('request');\nnockBack('postFormFixture.json', function (nockDone) {\n    var r = request.post('http://localhost:10222/upload', function (err, response, body) {\n        if (err) {\n            console.error(err);\n        }\n        console.log(body);\n        nockDone();\n    });\n    var form = r.form();\n    form._boundary = 'fixboundary';  // fix boundary so that request could match at all\n    form.append('field', 'value');\n});\n```\nRun once to record and the second time to match.\nPS: For binary multipart requests, we do not have this problem.. ",
    "RobertWHurst": "I've created a PR to fix the regression. It can be found here => #734\n. This seems to happen when a request body contains an empty object.\n. I've created a PR to fix the regression. It can be found here => #734\n. @ltegman No problem! \ud83c\udf7b \n. @vrinek Any thoughts?\n. ",
    "c0bra": "Seems like I'm still seeing this as of v9.0.6.\njavascript\nconsole.log('pending mocks 1', nock.pendingMocks());\nconsole.log('removing mock');\nnock.removeInterceptor(this.nock);\nconsole.log('pending mocks 2', nock.pendingMocks());\nThe second dump of pendingMocks() is identical to the first. this.nock is an Interceptor instance that was created in a mocha beforeEach. The removeInterceptor() is being called in an afterEach.\nUpdate\nMy mistake. I was storing the result of reply() in this.nock, which would be a Scope and not an interceptor. I needed to save the result of the call above reply (in this case it was a post()). All is working, thanks!. ",
    "pimterry": "All your markups sound sensible to me, so I've done the lot. Let me know if there's any other changes you need.\n. As on https://github.com/node-nock/nock/pull/721, I'm not sure why this is here, presumably from a previous change that forgot to commit this.\n. Done.\n. Done.\n. Done - I've added this as activeMocks, since that's literally what it is I think: every mock that might actively handle a request.\n. Done.\n. I'd quite like to add a beforeEach() and do this cleanAll() before every test automatically, but that requires restructuring this whole file (at least) to wrap it all in a test scope, and I thought that was extending this PR a bit too far (especially since it makes the diff unreadable). Might be worth doing everywhere in future though, to make the tests a bit more isolated from one another.\n. ",
    "delaguilaluis": "Either the errors you mentioned or a 5xx response from the service.\nAnd yeah, I think it's a general toggle. Thanks!\n. I didn't know what Nock feature where you talking about to implement this behavior, so I tried to do it with Scope filtering like:\njavascript\nnock('https://google.com', {\n  filteringScope: function (/* scope */) {\n    return !(process.env.FAIL_MODE && process.env.FAIL_MODE === 'true')\n  }\n})\n  .get('/')\n  .reply(200)\nBut that didn't work for my case.\nSo, based on your idea of 'two modes' and a programmatic way of selecting which interceptor to apply, I ended up with an approach that works for me and looks something like this: https://github.com/delaguilaluis/should-mock/blob/master/test/index.js#L12\nWhat do you think?\nAlso, this issue could now be closed. Thanks for your help!\n. ",
    "fixe": "\ud83d\udca3 \n. ",
    "facundoolano": "After updating to the latest request version, I've noticed the .delay method does not work anymore to force a ETIMEDOUT error.\n. ",
    "eduardbcom": "Any update on this ?\nStill does not work on 9.1.6.. ",
    "aleung": "@eduardbcom Could you test if https://www.npmjs.com/package/@aleung/nock fixes your issue? It's a temporary patched version of nock. . Any update? It becomes a blocking issue to me.\nThere was a memory leak issue fixed in request@2.76.0, however since 2.76.0 request doesn't work with nock.. To fix this issue, we first need to clarify some delay concept in nock.\nLet's define the timeline of a request:\nrequest called                           request sent\n|         socket created (connecting)    |        response header received\n|         |            socket connected  |        |         response body received\n|         |            |                 |        |         |\nA---------B------------C-----------------D--------E---------F-----> time\nFrom current nock source code, I can find that:\n- D-E is set by delay.head, or delayConnection(), or delay().\n- E-F is set by delay.body, or delayBody().\n- socketDelay() only affects socket.setTimeout().\nNode.js http.request timeout specifies the socket timeout.\nThe definition of socket setTimeout() is:\n\nSets the socket to timeout after timeout milliseconds of inactivity on the socket.\n\nThe request library has timeout on both B-C and C-E. The timeout of C-E is set via socket.setTimeout().\nThe issue is caused by nock overriding socket.setTimeout(). It only timeout on socketDelay(). delay.head and delay.body are unable to trigger socket timeout. \nThe issue impacts node.js >= 6.8.0 and request lib which align its behaviour to node.js 6.8.0.\n. @lpinca @ianwsperber @matteocontrini \nI believe I found the cause of this issue. I updated in my previous comment inline.\nWho can clarify the meaning of socketDelay? Socket timeout should be able to be triggered by delay.head and delay.body, not only by socketDelay.. Updated a failed test case which covers Restify use case #79. \nIn that test case the ClientRequest ends until connect event is received. But actually Restify ends the req on socket event. The test case was incorrect.\nSee https://github.com/node-nock/nock/issues/79#issuecomment-20611635. @ianwsperber The test case was there (test_timeout.js). It started failing with request v2.76.0 (see this comment). The test suite used request v2.71.0 which won't fail even before my fix. I have pushed a commit to update it to v2.79.0.. @ianwsperber Can we go forward? I just rebase my fix to master latest.. There is already one: https://www.npmjs.com/package/@types/nock. It's better to add a test case into nock's test suite to cover it.. @ianwsperber @lpinca @matteocontrini Could you read this and comment on it? I try to analysis this issue.. Please review PR #859, which is a new fix. . The new version of request library reports ESOCKETTIMEDOUT on read timeout. That's why I updated the test cases.\nIt's verified by code:\n``` js\nvar request = require('request');\nvar http    = require('http');\nconst server = http.createServer((req, res) => {\n    setTimeout(() => {  // delay 10 seconds\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.write('Hello');\n        res.end();\n    }, 10000);\n});\nserver.listen(8000);    \nrequest({\n    url: 'http://127.0.0.1:8000',\n    timeout: 10\n}, function (err, response) {\n    if (err) {\n        console.log(err.code);\n    } else {\n        console.log('NO ERROR');\n    }\n    process.exit();\n});\n```\nOutput:\n\nESOCKETTIMEDOUT. @ianwsperber What versioned tests are expected to add?\n\n. @ianwsperber Added versioned test for request-2.71.0.. request called                           request sent\n|         socket created (connecting)    |        response header received\n|         |            socket connected  |        |         response body received\n|         |            |                 |        |         |\nA---------B------------C-----------------D--------E---------F-----> time\nPrior to 2.76.0, request lib handles timeout:\n (I haven't studied how it behaves when timeout happens during B-C, C-D)\n D-E: ETIMEOUT\n* E-F: ESOCKETTIMEOUT\nSince 2.76.0:\n B-C: ETIMEOUT (connection timeout, set on OS level)\n C-E, or socket inactivity during E-F: ESOCKETTIMEOUT (read timeout, set by option.timeout)\nrequest  commit 1ef4075  comment describes the change:\n\nThis helps to prevent an issue where one kind of timeout is seen instead of another (ETIMEDOUT vs ESOCKETTIMEOUT)\n\nThis PR addresses request >= 2.76.0. I don't know how nock handles this kind of incompatibility. Maybe change its major version number to indicate the new version only works with request 2.76.0+ ?\nrequest didn't highlight it as an incompatible change in its change log and version code.\n\n2431 Improve timeouts accuracy and node v6.8.0+ compatibility\n\n~~BTW, nock isn't able to work with node v6.8.0+ http.request timeout. I'll submit an issue later on.~~. @gr2m Please let me know if you need more test case.\n\ncase 1 - nock works with request@2.75.0, get ETIMEOUT\ncase 2 - nock doesn't works with request@2.83.0, no timeout\ncase 3 - my fix works with request@2.83.0, get ESOCKETTIMEDOUT. Node.js http.request timeout sets socket connection timeout. Nock is able to simulate it by socketDelay. There is no issue and I was wrong. I've updated in my previous comment.. @gr2m I used to add test for request 2.71.0, but test case need to be changed for it. See https://github.com/node-nock/nock/pull/859#pullrequestreview-29830674\nWhich means, it's unable to keep fully compatibility with request prior to 2.76.. @gr2m Error after rebase on v9.1.6. No idea on what's the problem yet, will spend some time on it.. @gr2m The test case test_browserify failure is caused by stream-http@2.8.0 which was published a week ago. I tried to force it to stay on version 2.7.2 and test passed. stream-http is depended by browserify.\n\nCI on master branch should fail as well if you trigger a build right now.. ",
    "Juraci": "Might be a silly detail, but can you try to remove the final backslash on your resource and try again. `nock('http://example.co/') it will stay like that: \nnock('http://example.co\")\n  .get('/todos')\n  .reply(200, { body: { todos: ['do something'] } });\nAlso to prevent real requests to pass through, you can take a look on the nock.disableNetConnect(); option.\n. ",
    "ianaz": "Hi @vrinek , I have the same issue as just referenced (#765) and tried your code. All 3 tests fail:\nhttps://gist.github.com/ianaz/5a6191807e3a8b9c324574568d1a58a0\nUsing nock 9.0.2. Probably duplicate of #748 . ",
    "dallonf": "@vrinek The file you gave also passes for me. On a hunch, I swapped request for superagent, which is what I'm using. Here are the modified tests:\nhttps://gist.github.com/dallonf/2d824185f543323c51b3f6f7406ec145\nThe first test succeeds and the second two fail, which is the behavior I am seeing in my project. Very curious!. ",
    "ricardogama": "Any update on this?. ",
    "visualjeff": "Any updates on this?  I'm experiencing the same situation.. ",
    "csalvato": "FWIW, I also have this problem,  but matchHeader is also not working.  I am using isomorphic-fetch, if that makes any difference.. If I had to guess, it smells like there's an incompatibility with different implementation of fetching.  e.g. isomorphic-fetch may work differently to superagent may work differently to request.. ",
    "andrewtpoe": "Has there been any developments regarding compatibility with fetch? We have begun encountering errors very similar to what is described here.. To be a bit more specific, when running node 8.4.0 and attempting to validate headers in a manner similar to what is described [https://github.com/node-nock/nock#access-original-request-and-headers], our req.headers is an empty object. We are using fetch, and with nock debugging enabled I can see quite clearly that the requests headers are what I expect.. ",
    "Lukasz-pluszczewski": "I have exactly the same issue (reqheaders ignored but .matchHeader method works as expected).\nUsing:\nNode:             8.6.0\nSuperagent:   3.7.0\nNock:              9.0.25\nTried with axios 0.17.0 and it worked perfectly fine (both reqheaders option and .matchHeader method matched requests correctly).. ",
    "bcallaars": "Here you go https://runkit.com/callaars/nock-748. I'm not sure if it is due to SuperAgent, but that wouldn't surprise me. Although the strange thing is that the headers are sent. Let me investigate a bit more tonight, I might be missing something.. It's definitely related to SuperAgent, but I've tried to find out exactly what. It looks like it's related to a race condition, but to be honest I haven't looked into it for a while due to shifting priorities. . ",
    "jamiesoncj": "For what it's worth, I am also experiencing this issue (and again, matchHeader() works fine).\n\nnode 6.11.2\nsupertest 3.0.0\nnock 9.0.14\n\nHappy to provide further info if that would be useful.. ",
    "Venkat-18": "Hi any update on this issue ?. Hi is there any solutions for above question ?. ",
    "gmatroskin": "When I think of the way to represent it, my main thought is that the difference between querystring and qs boils down to how \"rich\" (i.e. array & object) parameter values are treated:\n\n\nquerystring does the primitive thing & doesn't try to serialize objects at all, and serializes arrays (of primitive types) by expanding them into multiple &name=value pairs\n\n\nqs is at the other end of the spectrum in this regard.  It has its own serialized representation for objects & arrays that can be customized with the myriad of options qs supports.\n\n\nMy thought was that if .query() took a second optional parameter, e.g.\nquery(params, useRichQueryFormat = true) { ... }\nuseRichQueryFormat being false, would tell nock to use the querystring module for (de)serialization rather than qs.\nThe other option is to perhaps still use the qs module, but support a subset of options (depth, arrayFormat, etc) they provide for the parse & stringify methods, although I think that would get trickier.\nquery(params, qsParseOptions) { ... }\nThe other variation that comes to mind is to have a more global nock level QueryParser option where you could pass in custom stringify & parse methods, though nock doesn't seem to have an obvious place for global configuration like that... . ",
    "digitaltsai": "@vrinek yep, this test will cover the problem I am seeing.\nI created a temporary repo for you to clone to see if you have this problem : https://github.com/digitaltsai/nock-request-timeout-test\nBasically here are my package dependencies:\n\"dependencies\": {\n    \"nock\": \"^9.0.2\",\n    \"request\": \"^2.79.0\"\n  }\nI'm not sure if it matters, but I'm on MacOSX 10.11.6 (El Capitan)\nI tested this on node 0.10 and 6.9\nThanks for looking into it!. @vrinek I modified my test repo to use the built in http module instead of the request package: https://github.com/digitaltsai/nock-request-timeout-test/blob/master/index.js\nIt seems to work when I comment out the nock portion and connect to google. Only when I have nock intercept does it fail.. @vrinek I've submitted a pr to modify the test to rely on the nodejs http module instead of request: https://github.com/node-nock/nock/pull/766. ",
    "ikokostya": "I reproduced this error with the following dependencies:\n\u251c\u2500\u2500 nock@0.51.0 \n\u2514\u2500\u2500 request@2.79.0\n\nNode.js 6\nLinux 3.18\n. I think issue with bug tag should be excluded from stale bot.. @gr2m \n\n\nthe motivation to close issues is to keep the project maintainable. It\u2019s all volunteer run, so we cannot solve other people\u2019s bugs I\u2019m afraid, but we can make sure that contributing is as easy as possible\n\nYou really think that project will be \"maintainable\" if you close all bugs automatically? As I said, I think issues which detected as bugs should be ignoring by stale bot. People must see actual bugs of project.\n. ",
    "brian-mann": "I am having the same issue. I cannot get nock to timeout with request.\nChanging delay to socketDelay will work but it doesn't throw the same error as request would when it times out.. ",
    "yaozw": "Could someone help to fix it? It block our product progress.. ",
    "karlatkinson": "This is caused by nock incorrectly setting (or rather, not setting) the connecting value on the socket.\nSee #739 & request/request#2438\nrequest_overrider.js emits a socket connect event which causes request to remove the connection timeout as request thinks the socket is already connected (socket.connecting).\nThe current timeout interceptor code all happens after this so its not as simple as adding a socket.connecting = true somewhere as far as I can see.. ",
    "lpinca": "@aleung \n\nIn document of request, it states that timeout is B-C\n\nNot 100% correct. The timeout option calls socket.setTimeout() as soon as a socket is assigned to the request and this checks if there is socket activity for the whole duration of the request not only B-C.\nAlso the timeout option only works on Node.js >= 6.8.0. See https://github.com/nodejs/node/pull/8101.\nI think socketDelay() should prevent data from being written to the socket without affecting the socket connection.\ndelayConnection() is confusing as it doesn't delay the socket connection but only when headers are flushed. AFAIK there is no way to delay socket connection in nock so I usually use a non-routable IP address in my tests.. I hit the same issue. socketDelay() no longer works.. I'm using got@latest but the request library has probably nothing to do with it.. @ianwsperber sorry I wasn't clear. What I meant is that I think the issue is not caused by a specific request library. Thanks for the quick \"fix\".. Here is a test case to reproduce the issue.\n```js\n'use strict';\nconst http = require('http');\nconst nock = require('nock');\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(200)\n  .reply(200, '');\nconst req = http.get('http://my.server.com');\nreq.on('error', () => {});\nreq.on('socket', (socket) => {\n  if (!socket.connecting) {\n    req.setTimeout(100, () => req.abort());\n    return;\n  }\nsocket.on('connect', () => {\n    req.setTimeout(100, () => req.abort());\n  });\n});\nreq.on('response', () => {\n  throw new Error('fail');\n});\n```\nThis is what got does under the hood. Hope it helps.. ",
    "gustavohenke": "I'm all for \"just use whatever comes last\".. ",
    "shotaK": "Thanks for your response. Yes it is a feature request. That is right it is a general feature and not directly related to redux. I will do my best to find time for this.. ",
    "danielb2": "Would be awesome if this could be merged. \ud83d\udc4d . Thanks that works. Is there any reason this wouldn't be enabled by default for this type of recording ?. I never had a chance to get back to this but in my example here, I don't see anything actually being recorded in ./tmp. Am I missing something else too?. ",
    "esatterwhite": "@pgte Can we get this one merged?. ",
    "leosoto": "Hi! Any plans to integrate this in a future release? This bugs make nock unusable in conjunction with node-rest-client (which uses follow-redirects, which crashes as described in https://github.com/olalonde/follow-redirects/issues/48). BTW, this is also reported as https://github.com/node-nock/nock/pull/779 (ping @ianwsperber). ",
    "ModuloM": "Close this because I could get it. But documentation is not totally explicite.\nYou can do either\nnock('url').intercept(...)\n\nor\nvar scope = nock('url');\nscope.intercept(...)\n\nThanks for this module anyway ;). ",
    "k0pernikus": "May this be related to my usage of request-promise?. ",
    "pablolmiranda": "If you add a \nafterEach(function(done) {\n  console.log(nock.activeMocks());\n  nock.cleanAll();\nWhat will show locally and inside TravisCI?. ",
    "mrkam": "Sure. When testing a client that receives chunked stream I need to test how the it reacts on delays between the chunks. For example, it receives one chunk and then it doesn't receive anything for 60 seconds. Then it receives a chunk again. I'd like to have a test that does it. Another test would be to get the connection interrupted after a timeout without receiving any more chunks.. ",
    "matteocontrini": "I think this broke something.\nI have a test that uses socketDelay to test request timeouts and it started failing after updating to 9.0.8.\nI haven't tried to isolate the issue yet, but it should look like this:\njs\nnock('http://myservice.it')\n    .get('/')\n    .query(true)\n    .socketDelay(2000)\n    .reply(400);\njs\nrequest({ url: 'http://myservice.it/?something', timeout: 1000 }, (err) => {\n    // err is falsy\n});\n. I'm using request 2.79.0, which is the latest version. https://github.com/node-nock/nock#specifying-request-query-string. ",
    "bigredwill": "This is the expected behavior. \nSee: read-this---about-interceptors\nTo repeat a response, either specify the number of times:\nhttps://github.com/pgte/nock#repeat-response-n-times\nor allow infinite repeated responses:\nhttps://github.com/pgte/nock#persist. ",
    "SeanHayes": "This seems to still be an issue with recorded nock.back fixtures, since only 1 copy of each request is saved. How do I fix that?. I've got the same issue.. I ran DEBUG=nock.scope jasmine and got some debug info, turns out some other request isn't matching.. I added PR #1095 . I'd like to do the same thing with nock.back. Can nock.back allow me to manually mock some calls while letting others record/replay as normal?. ",
    "felipead": "Hi, I vote for this issue to be fixed. It's annoying me too when I use .defaultReplyHeaders. For example, if I define a nock as:\nts\nconst scope = nock(URL, {encodedQueryParams: true})\n    .defaultReplyHeaders({\n      'Content-Type': 'application/json;charset=UTF-8'\n    })\nThen if I try to override the Content-Type for a specific test needs:\nts  \n  scope\n    .post('/login', `login=${USER}&password=${PASSWORD}`)\n    .reply(200, '<login>ok</login>', [\n      'Content-Type', 'application/xml',\n      'Set-Cookie', 'JSESSIONID=foobar;Path=/foobar;Secure;HttpOnly'\n    ])\nI get the following error:\nError: Failed to convert header keys to lower case due to field name conflict: content-type\nThe only solution is to convert all headers to lowercase. But nock should not require me to do this, it should be case insensitive.. Thanks!. \ud83c\udf89 . ",
    "moaxaca": "@ianwsperber Hey there appears to be an open PR, can you get the resolved?. @ianwsperber PR seems to works on my machine. \ud83d\udc4d  I will dig into the change later tonight.. @dcstone09 Sounds good pulling it in 40m to see if everything passes. . @ianwsperber This looks good. . @iangreenleaf This corrects the throwing conflict exception. Do we have test cases for testing overrides of the default headers when strings are loosely matching ('SomEthing' ==='something')? . @ianwsperber This test could over that. . ",
    "dcstone09": "@ianwsperber @moaxaca The PR has been updated \ud83d\udc4d . @CFreeAtEbsco I just updated the test, everything looks good to me.. @ianwsperber Thanks, I've moved the test over.. @ianwsperber The test case has been updated. ",
    "CFreeAetna": "Any updates here? . ",
    "tedeh": "Why hasn't this been merged yet? It would appear to be a mostly harmless PR. Last given option should override earlier ones, like every other node library around.. You are right and I'm sorry.\nIs there anything in your opinion that prevents this from being merged as-is? Maybe I can help with the verification.. ",
    "gkatsanos": "@gr2m  is this released?. > In your example above you don\u2019t load the recorded fixture from the scbe.json file.\n\nI think what you call first takes precedence\n\nSorry could you elaborate? How come I am not loading the fixture? What needs to be done to load it?\nAnd how do you mean \"what you call first\" ? . I am a bit more confused; I thought https://github.com/nock/nock#nock-back \nis using (=\"playing\") the previously recorded mocks. I actually verified that my tests use the recorded mocks, without calling nock.load() anywhere. \nThis is why I wrapped my tests with\nnockBack('scbe.json', (nockDone) => {\n    // tests here\n});. > I\u2019m sorry, I\u2019ve missed that bit in your code, yeah, it should work then :)\n\nAnd in that case I don\u2019t know what takes precendence, but when you find out I\u2019d appreciate if you could send a pull request to update the README \ud83d\ude4f\n\nWill do ! I will keep this open as a placeholder/reminder for myself. Unfortunately we didn't continue using the library and I didn't have the chance to investigate the behavior. . Another team took over the project but I think they went for mockery. . I'm afraid I don't have the experience to go on with this; do you need maintainers to help you out in general? \nwould that mean 9.1.6 would not have this bug? (I have some test failures and I would like to make sure it's not because of nock as our setup is rather complex already). Just some more information about the bug. So, our endpoint unfortunately is case sensitive and we're forced to send the x-request-id in 2 different case versions.\nI looked at your code and you seem to be lowercasing everything. But maybe that's not working properly?\nThese are the strings in question: \n\"x-request-id\"\n\"X-Request-Id\"\n\"X-Request-ID\"\nIs there any workaround to tell nock to ignore this or to match all of them?. We fixed it by just changing our code because and sticking with one casing for our requests. Fingers crossed it won't fail elsewhere :) but indeed I don't think nock should care about header casing or there should be an option a switch or a regexp we can use to accept both. An option ideally for case sensitive or insensitive headers.\nOr just what @krekkied suggested . ",
    "zladuric": "Was looking for something else and just found this, @kharandziuk, .pendingMocks():\nhttps://github.com/node-nock/nock#pendingmocks. You could probably use filteringPath() then, but not sure if that's the best approach. Something like this:\nlet url;\nnock(/someapi\\.com$/)\n  .filteringPath((path) => {\n    url = path; // grab it here\n    return path;\n  })\n  .post('/attractions')\n  .reply(200, []);\n\nreturn request.post('http://someapi.com/wrong').send({}).catch(() => expect(url.is.eql('/wrong')));\n\nAlso, note that this isn't \"official\" response - I was looking for something similar with the body, but saw your issue :) So you either make this above work or wait for somebody more knowledgable with nock tell you (and me) how it's really done. I'm just trying to help out, I'm usually frustrated with little things like this and wait times.). ",
    "kharandziuk": "Hey, I wrongly expressed my idea. I fixed my sample. .pendingMocks() will return ['http://someapi.com/attractions'], but I need to get ['http://someapi.com/wrong'] somehow. Hi @iangreenleaf . Please, check the sample below:\n```\nconst assert = require('assert');\nconst request = require('superagent');\nconst nock = require('nock');\nconst Promise = require('bluebird');\nconst { expect } = require('chai');\nfunction connect() {\n  return request\n    .post('http://someapi.com/wrong')\n    .send({})\n}\nfunction retryUntilResolved(call) {\n  return Promise.resolve(call())\n    .delay(0) // we need this to release the event loop\n    .catch(() => retryUntilResolved(call))\n}\ndescribe('populate', function() {\nafterEach(function() {\n    expect(nock.unsatisfaedMocks()).eql([]) // we expect that all mocks should be satisfied\n  })\nit('should grab ', function() {\n    nock('http://someapi.com')\n      .post('/attractions')\n      .reply(200, [])\nreturn retryUntilResolved(connect) // there is should be some assertion but I omitted them\n\n})\n})\n```\nI tried to simplify it as much as possible. Consider you are testing an application with some reconnection logic and make a mistake in one of the parameters.\nDo you see my idea? . @ianwsperber hey, did you have time to read my sample?. What do you mean? I'm asking about new feature\nbut in any case:\n```\n  1) populate should grab :\n     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n2) populate \"after each\" hook for \"should grab \":\n     TypeError: nock.unsatisfaedMocks is not a function\n      at Context. (test/sample.spec.js:22:17)\n```. ",
    "Oceanswave": "In addition, the .headers property is not being utilized when replaying from old recorded nock definitions - including those in the nock unit test library (test_back.js)\nHere's a unit test for nock ignoring headers in a recorded definitions file:\nThis seems to have regressed in versions of nock after 8.0.0\n/tests/fixtures/testHeaders.json\njson\n[\n    {\n        \"scope\": \"http://www.example.com:80\",\n        \"method\": \"GET\",\n        \"path\": \"/\",\n        \"body\": \"*\",\n        \"status\": 200,\n        \"response\": \"Hello, World!\",\n        \"headers\": {\n            \"content-type\": \"text/html; charset=ISO-8859-1\",\n            \"set-cookie\": [\n                \"foo=bar; expires=Fri, 10-Apr-2015 04:31:42 GMT; path=/; domain=.google.com; HttpOnly\",\n                \"bar=baz; expires=Fri, 10-Apr-2015 04:31:42 GMT; path=/; domain=.google.com; HttpOnly\"\n            ]\n        }\n    }\n]\n``` js\n'use strict';\nvar nock = require('../.');\nvar path = require(\"path\");\nvar test = require('tap').test;\nvar request = require('request');\ntest('headers in recorded tests are used', function (t) {\n    let nockDefs = nock.loadDefs(path.join(\"tests\", \"fixtures\", \"testHeaders.json\"));\n    nock.define(nockDefs);\n    request({\n        url: 'http://www.example.com'\n    }, function (err, response) {\n        t.ok(response);\n        t.equal(response.body, \"Hello, World!\");\n    t.ok(response.headers);\n    t.true(Object.getOwnPropertyNames(response.headers).length > 0);\n    t.end();\n});\n\n});\n```. Looks good -- my particular case that was blocked is resolved by this change.\nThanks a bunch!. ",
    "unstubbable": "The coverage decreased because the test files are covered as well. Your should probably exclude them in the nyc config. (fixed in #823). ",
    "Urthen": "Sorry to necro this issue, but is activate documented anywhere?\nWe'd like to do restore() after each set of tests and running into what I assume is the same issue, but this is the first time I heard of activate.. ",
    "andrewaustin": "LGTM. I also confirmed my code works and all my tests now pass when running with this change.. ",
    "yodeyer": "@ianwsperber yes. ",
    "SimenB": "@iangreenleaf any news here? \ud83d\ude04 . ",
    "ilsotov": "I also faced with this issue. ",
    "philipkobernik": "\ud83d\udc4d . ",
    "rainyday": "Using node v6.10.0 and I've only had this happen with popsicle. Doesn't happen when just calling http.get for example.. Been looking at it as I have time. Will submit a request if I find anything.. ",
    "sacredMonster": "Thank you for your help.\nHere is the code. I am using import fetch from 'isomorphic-fetch' to call my API which I am masking for privacy.\n// Action\nimport * as actionTypes from '../../shared/actionTypes';\nimport { fetchData} from '../../dal/Service';\nfunction requestTeamData() {\n  return {\n    type: actionTypes.REQUEST_Team_DATA,\n  };\n}\nfunction receiveTeamData(json) {\n  return {\n    type: actionTypes.RECEIVE_Team_DATA,\n    totalCount: json.count,\n    rawInformation: json.value,\n    receivedAt: Date.now(),\n  };\n}\nconst fetchTeamsAction = function fetchTeamsAction(teamName) {\n  return function start(dispatch) {\n    dispatch(requestTeamData());\n    return fetchTeam(teamName) // makes a fetch(\"api\") call\n    .then(response => response.json())\n      .then(json => dispatch(receiveTeamData(json)));\n  };\n};\nexport default fetchTeamsAction;\n// Jest Test\nimport configureMockStore from 'redux-mock-store';\nimport nock from 'nock';\nimport thunk from 'redux-thunk';\nimport fetchTeamsAction from './actions';\nimport * as types from '../../shared/actionTypes';\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\ndescribe('fetch team data action test', () => {\nit('creates receivedataData and requestdataData actions when fetching data has been done', () => {\n    nock('MaskedForPrivacy')\n    .get('/')\n    .reply(200, { body: { count: 75, value: [ { id: 229345903, name: 'Jon Doe',Organization: 'Weird World' }],\n    }});\nconst expectedActions = [\n  { type: types.REQUEST_BUG_DATA },\n  { type: types.RECEIVE_BUG_DATA,\n    body : { count: 75, value: [ {  id: 229345903, name: 'Jon Doe', Organization: 'Weird World' }], }\n  },\n];\n\nconst store = mockStore();\n\nreturn store.dispatch(fetchTeamsAction('TeamAlpha'))\n  .then(() => {\n    expect(store.getActions()).toEqual(expectedActions);\n  });\n\n});\n});\n. I want to specify an exact url as the first parameter in nock. I was under the impression that in get if I specify what I have written it will just consider the entire match. ",
    "hayderma": "why did you close it? if you found the solution, should have shared it, I am having the same problem.. thank you. ",
    "getlittletech": "Hm.. interesting, I thought I closed the issue yesterday. Probably didn't go through.\nYes, @ianwsperber you are absolutely right, the syntax in the example in the question is not correct.\nI have created a fresh React Native project, added redux libraries and nock. It worked fine.\n. ",
    "kilianc": "I thought this may help others:\n```js\nnock('http://something')\n  .put('/foo', (body) => {\n    assert.deepEqual(body, {\n      id: 'hello',\n      data: 'args'\n    })\nreturn true\n\n})\n  .reply(200)\n```\nThis saved my and my teammates hours.. Confirmed 10.7.0 and 10.8.0 affected. We're stuck on 10.6.0 because of this.. @rochdev which is when?. ",
    "csabapalfi": "Thanks!. Superseded by #858 . @fabiosantoscode nah, I was a bit too ignorant and just ran du -sh * that ignores hidden files. But will remember this from now on \ud83d\ude04 \nAlso glad to run into you! The series of tubes is a small place after all!. ",
    "fabiosantoscode": "Hello @csabapalfi! Nice to randomly find you on the internet after filling in a duplicate PR lol (#854). Did you notice the .nyc_output folder which is 6.6mb?. :D <3. ",
    "disrupticons": "@ianwsperber Awesome! Thanks!. I'm not sure if I'm understanding this correctly but aren't the nested properties like scopes for example, guaranteed to be present? Don't see checks for these in any of the other functions.. @ianwsperber done. @ianwsperber alright. skipping for now.. ",
    "simlu": "Thank you for the quick fix!. @gr2m I've looked at this now and am really not sure what the underlying problem is (the whole code base seems pretty patch-worked tbh).\nWhen any content encoding is found, the body is correctly decoded as binary (see comment here https://github.com/node-nock/nock/blob/master/lib/request_overrider.js#L321). However when no content encoding for request is given and the request content encoding is not binary, the binary hex data is never decoded (which then results in the different responses).\nWhen encoding in https://github.com/node-nock/nock/blob/master/lib/recorder.js#L75, there is no check at all that would match. Since the recorder seems to be the not-so-core-feature, I've opted for editing that and aligning it a little more with the replay checking.\nLooking forward to your input!. > I'd probably organise a weekend to collaborate on this remote to split up work, let me know if you are interested joining :)\nConsidering how much we use this module, I probably should help out a little. Ping me and I'll see!\n\n... and get 100% test coverage ...\n\nI like the sound of that! I started failing tests these days if coverage < 100%\n\n@gr2m Created a pr here: https://github.com/node-nock/nock/pull/1012\nI don't think the change breaks anything, but who knows /shrugs\nLet's discuss in pr as you suggested.. 100 percent agreed :)\nIm actually not even sure why the code base is this big. Is there a ticket or place where we can better discuss?\nI'll add some more thoughts on the pr. So I was thinking about this more. The appropriate way of doing this is to store the binary or hex information in the recoding and not try and guess it. Agreed?. @ierceg All meta information is captured. However the logic to determine if the data should be stored/loaded as binary is different. Centralizing this logic would also solve this issue. However it might be easier to just store that information as binary=true/false.. I'm super exited about this pr! Thank you!. @paulmelnikow Beauty! That works perfectly (see pr here).\nThank you very much for the help! If you think this is a duplicate ticket please feel free to close it,. @paulmelnikow Thank you for the quick reply! That is correct: delay them and ultimately fail if the previous recordings are never matched.\nMain reason is that we look at cassettes in our pr reviews. We strip them down without headers in most cases, so they're actually short and not that bad to review.\nWhile we do use real recordings in many cases, there are also many cases where the cassettes are copy pasted from a different test and then manually adjusted. Having the recordings appear in an incorrect order makes it very hard to impossible to verify them.\nWe have relatively complex integration tests that do a multitude of recorded requests and it's necessary to review the outgoing requests for correctness and also for performance considerations.. @paulmelnikow I think it is necessary to delay since otherwise you can not handle parallel requests. And those are very essential for performance for us. Immediate nock failure would just result in random failures for those tests... \nUnless... the nock interception prevents any true async handling and hence the order would always be consistent? In that case it might be fine? But even then the recording order might not be the same as the later execution order (or does nock record in order of request start, not end?).\nI realize that I don't know enough about the internals of this library to answer that question :). ",
    "abarre": "@ianwsperber, thank you for your review. I updated the PR.\nBest,. ",
    "raghavgujjar": "I've been spending more time getting my testing in place. Any help will be highly appreciated.. This was an issue with node-tap. ",
    "bennyn": "Too bad to hear that. \ud83d\ude22  \nEven the famous request module supports the HAR standard:\nhttps://github.com/request/request#support-for-har-12\nLuckily I found sinon, which supports .HAR files via an external library (like you suggested) called sinon-har-server.. ",
    "AlbanMinassian": "solution \nconst nock = require(\"nock\");\nconst nockScope = nock(/.*/); // match all hosts\nnock.cleanAll(); // console.error('active mocks: %j', nock.activeMocks());\nnockScope.intercept(PATH, METHOD).reply(CODE, RESPONSE); // console.error('active mocks: %j', nock.activeMocks());\nnockScope.intercept(PATH, METHOD).reply(CODE, RESPONSE); // console.error('active mocks: %j', nock.activeMocks());\nThanks\nAmi44. ",
    "BenMGilman": "+1. ",
    "jasperkuperus": "Sounds similar to what I experience. My app handles the errors thrown by nock, but I'd like my spec to fail. I would like to be able to ask nock if there were unmatched requests during the spec, similar to how you can ask if there are still pending mocks, e.g.:\nnock.unmatchedRequests()\nFor now, I've solved it like this in my spec:\nnock.emitter.on('no match', (request) => {\n  throw Error('Request fired that did not match what was mocked', request);\n});\nIt would be nice if this unmatchedRequests method would also consider nock.enableNetConnect('127.0.0.1');. Now I have to filter myself on the no match event.. ",
    "nknapp": "I have test-failures on my local machine, but they also occur without this commit.\nI have committed with git commit -n in order to skip tests on checkin.\nLet's see, if the tests pass in travis. I have to check, why my new code is not covered by the test. It should be.. I think, it is ready now.... I'll see to it, but probably not this week. I'll be travelling for the next couple of days and I don't know when I will find the time.. I have removed the issue number from the test, and another unused statement.\nI have not changed the ckeck in the setTimeout. I couldn't make it work that way (and I think it is not possible to do it without using setTimeout.\nI don't think that the build errors in Travis are related to my changes.. I tried that and got a test unfinished. It seems like the 'end'-event is not in this case. I also tried piping the response to a writable stream to make sure that the response is \nIs an end-event supposed to be sent, when a request is aborted? But if \"yes\", then it would certainly be sent after the first abort, and not  after the second one. In that case, the test could pass, even if the issue wasn't fixed, because it could happen that the t.equal-check is evaluated too early.\nI think it is safer to use 'setTimeout` in this case.. ",
    "jonathonherbert": "If you're referring to matching multipart/form-data fields individually, I don't think this isn't supported yet. See #191.\nYou can spy on the contents of multipart data to match the request content in the standard way, though.\nnock('some/url').post('some/endpoint', body => body.includes('Some arbitrary multipart/form-data content')\nA wrinkle: if you're sending files, the body seems to be hex encoded, which you'll have to decode yourself.\n```\nconst hexToString = hex => {\n    let str = '';\n    for (let i = 0; i < hex.length; i += 2)\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    return str;\n}\n// Check that a file was included in the request\nnock('some/url').post('some/endpoint', body => hexToString(body).includes('Content-Disposition: form-data; name=\"fileData\"; filename=\"example.webm\"')\n```\n. ",
    "westy92": "Turns out calling nock.restore(); in a different file caused nock to not work here.  Removing that line fixed everything!. ",
    "gurpreetatwal": "The callback is getting called, however your test runner is not waiting for your code to complete before moving onto the next test because you have not \"signaled\" to your test runner that your test code is asynchronous. If you are you using mocha can accomplish this by either returning a promise from your test or by modifying your test implementation to take a done callback. \nThis is what your code should look like with the done callback, assuming you are using mocha\n``js\nit('Should succeed in check, update and upload job status functions', (done) => {  // signals to mocha that this is an async test\n  nock.cleanAll();\n  var statusAPI = nock('https://multiposting.stepstone.com').get(/status/1`).reply(200, statusResponse)\n  var putAPI = nock('https://multiposting.stepstone.com/').filteringRequestBody(function (body) {\n    console.log(body);\n    return 'ABC';\n  }).put('/listings/1', 'ABC').reply(201)\n  console.log(nock.pendingMocks())\n  sut.checkAndUpload(ycgResponse, targetJob, integrationId, jobBoard, function (err, response) {\n    console.log(err)\n    console.log('----')\n    console.log(response)\n    console.log(nock.activeMocks())\n    console.log(putAPI.isDone())\n    console.log(statusAPI.isDone())\n    should.equal(200, response.statusCode)\ndone(); // signals to mocha that is test is complete\n\n});\n});\n```\n\nas an aside try not to mix both promises and callbacks in your code, try to stick with one style\nalso if you are using request-promise you can use bluebird's asCallback method to clean up your code as follows:\njs\n  rp(options).then(response => {\n    console.log('Status call succeeded')\n    return rp(put_options)\n  })\n  .then(() => ({statusCode: 200 })\n  .catch(() => ({statusCode: 500 })  // probably bad to just swallow errors like this\n  .asCallback(callback);. That error is actual in another module that nock depends on. I looked into that module, seems like they have fixed that bug on their master branch but have not published the changes to npm, they have a pending issue for that: dylang/changelog#31\n. relevant test cases, 1st fails on master, 2nd one passes\n```js\ntest(\"match headers with zero\", function(t) {\n  var scope = nock('http://www.headier.com')\n     .get('/')\n     .matchHeader('zero', '0')\n     .reply(200, \"Hello World!\");\nhttp.get({\n     host: \"www.headier.com\"\n    , method: 'GET'\n    , path: '/'\n    , port: 80\n    , headers: { 'zero': 0 }\n  }, function(res) {\n    res.setEncoding('utf8');\n    t.equal(res.statusCode, 200);\nres.on('data', function(data) {\n  t.equal(data, 'Hello World!');\n});\n\nres.on('end', function() {\n  scope.done();\n  t.end();\n});\n\n});\n});\ntest(\"match headers with number\", function(t) {\n  var scope = nock('http://www.headier.com')\n     .get('/')\n     .matchHeader('number', '2')\n     .reply(200, \"Hello World!\");\nhttp.get({\n     host: \"www.headier.com\"\n    , method: 'GET'\n    , path: '/'\n    , port: 80\n    , headers: { 'number': '2' }\n  }, function(res) {\n    res.setEncoding('utf8');\n    t.equal(res.statusCode, 200);\nres.on('data', function(data) {\n  t.equal(data, 'Hello World!');\n});\n\nres.on('end', function() {\n  scope.done();\n  t.end();\n});\n\n});\n});\n```. bumping, so don't get closed by lock bot. I'd be willing to help out as well.. Hi all! I'll join in around 4pm PST to work on #892 \n. ",
    "gustavjf": "Ah I see. Thank you @gurpreetatwal . ",
    "alextes": "Is there something I should do still?. ",
    "eddiemoore": "Would love to see this in nock as well. . ",
    "edorivai": "I think the #921 closes this. Feel free to close when #921 is merged.. I see the stale bot was added :smile:. This is definitely no high-priority issue, but would still be a nice-to-have for me. If you decide not to go forward with it, I could live with that as well.. ",
    "mikspi": "Hi guys! I still have a similar problem...\nI specify the interceptor to match for a request body of the following shape:\n{\n    a: [1]\n}\nHowever, I'm sending a request with the following shape:\n{\n    a: [1,2]\n}\nNock happily matches this request.. ",
    "focusaurus": "A few tips if you unexpectedly hit this and don't know what to do.\n1) See the full body so you can find the extra properties that are being sent but are missing from your expectation body.\njs\nnock(host).post(\"/\", (body) => {\n  console.log(\"Actual body: \", JSON.stringify(body, null, 2)); // fixme\n  return true;\n})\n2) If you want loose matching, try integrating tmatch.\n```js\nconst tmatch = require(\"tmatch\");\nnock(host).post(\"/\", (body) => tmatch(body, {key1: \"foo\", key2: /^z/}))\n```\nIf you use the pattern above a lot, you may want to factor out a helper function.. ",
    "lukechilds": "My tests are breaking in Node.js 8.\nSomething simple like:\njs\nnock('http://example.com')\n    .get('/')\n    .reply(200, 'Hi!');\nDoesn't get intercepted.\nUsing Node.js 7 it does.. @stevenvachon If you need to mock something in Node.js 8 now I just bashed create-test-server together.\nNo docs yet but you can see example usage here:\nhttps://github.com/lukechilds/clone-response/blob/master/test/clone-response.js. ",
    "Rob--W": "This PR seems to fix the issue: https://github.com/node-nock/nock/pull/929\nFor my own project, where I only use nock to mock responses, I've monkey-patched nock to get the tests to pass: https://github.com/Rob--W/cors-anywhere/commit/70400ab166515db9b8fd117f3d208b4960ee846a (tested with nock 8.2.1).. ",
    "kevinoid": "I'm seeing this issue as well.  It looks like this is a result of nodejs/node#10941 (nodejs/node@b377034359a specifically) which made the ._headers property of OutgoingMessage return a copy of the headers object.  This copy is assigned to in setHeaders, which has no lasting effect.\nIs there a reason why request.setHeader (OutgoingMessage.prototype.setHeader) isn't being called here?. ",
    "jhuliano": "Replacing the matchHeader function with nock(host, { reqheaders: {\"header\":\"content\"} }), seems to do the trick for now.\nI'm using Nock 9.0.13 and Node 8 (on Official Docker Image). @dickeyxxx doesn't look like it does, I don't mock all my headers and the tests are working just fine with the mentioned change.\nAlso the header assertions are working as expected (tests will fail if the supplied header content doesn't match the expectation).. ",
    "jdxcode": "that requires you to specify all the headers though, right?. good to know! thank you!. ",
    "acofer": "https://github.com/node-nock/nock/pull/930?ts=2. ",
    "shahata": "any plans of fixing this soon?. ",
    "0xcaff": "It looks like this is fixed in the latest commit to master: https://github.com/node-nock/nock/commit/35c76e39ee5a6fa0ef3e8d6fe389287e25975cd5. lgtm\n```\n[drone@drone tmp]$ curl --verbose www.amazon.com\n Rebuilt URL to: www.amazon.com/\n   Trying 104.95.239.148...\n TCP_NODELAY set\n Connected to www.amazon.com (104.95.239.148) port 80 (#0)\n\nGET / HTTP/1.1\nHost: www.amazon.com\nUser-Agent: curl/7.54.1\nAccept: /\n< HTTP/1.1 302 Moved Temporarily\n< Server: AkamaiGHost\n< Content-Length: 0\n< Location: https://www.amazon.com/\n< Date: Fri, 14 Jul 2017 00:29:17 GMT\n< Connection: keep-alive\n< \n* Connection #0 to host www.amazon.com left intact\n```. \n",
    "panva": "resolved, @ianwsperber @martinkuba thanks!. ",
    "jscheffner": "It looks like it's related to issue 925.. ",
    "martinkuba": "@ianwsperber Yes, we have been running our tests on my fork since I created this PR, and have not had any issues.  We run our tests on all major versions of Node back to 0.8 (in https://github.com/newrelic/node-newrelic).. @ianwsperber Thanks for merging this. I wanted to reply to your other question, but did not get to it in time. I will follow up and look at the failing test as well.. Opened #948 to fix the failing test.. Fixed by #948 . val can be the matching function from reqheaders.  During the matching phase, headers specified in reqheaders are copied to the client request object - now using the setHeader() function. setHeader() checks for valid characters in the header value, so it errors when the value is a function.\nI am actually not sure why the headers are copied from the interceptor to the request object, since I thought reqheaders are used only for matching. In any case, setting the function as a header value seems unintended, and taking it out did not break any tests.. ",
    "michaelnisi": "What exactly does the failing test, ./tests/test_browserify.js, actually try to check? Its only dependency on nock is:\njs\nnock.enableNetConnect();. To summarize @LarsHassler:\nnot ok Nock: Not allow net connect for \"server.com:80/\". I agree, but after fixing or skipping one test, another one seems to fail, for a different Node version. \nDon\u2019t be fooled by the passing checks in my PR #942, it\u2019s by pure chance. Ironically, the problem with nock\u2019s test suite is the exact problem nock is trying to solve, testing network I/O independent from connectivity. \nI don\u2019t know much about this package, but based on what I\u2019ve learned today, I\u2019d na\u00efvely say, to make nock less erratic and more fun to work on, all tests must pass offline.. Restricting tests to a subset during CI might be a start.\nAIRPLANE=1 npm run unit\nRunning with this environment variable performs 566 of the total 721 tests.\n. I gave up and decided to remove nock from my projects. I\u2019ve only been using a small subset of features anyways. With arrow functions and template literals, tests like this read nicely, I think. Sometimes less can be more.. Is there any deeper\u2014not usage, but implementation\u2014documentation for this package, apart from its source code?. Unfortunately, Travis CI build is still broken for 6 and 8, for unrelated reasons, producing erratic results, though; correlating with #936. But at least this PR resolves #933.. ",
    "sdotson": "@rosendi , did you ever figure this out?. ",
    "rosendi": "@sdotson the problem was in Nock Back, so i wrote my own VCR implementation. Don't remember all the details, but here is code that I use and it works:\nvcr.js\n```\nimport fs from 'fs-extra';\nimport path from 'path';\nimport nock from 'nock';\nfunction getCassetePath(testPath) {\n  return ${path.dirname(testPath)}/__cassettes__/${path.basename(testPath, path.extname(testPath))}.json.cassette;\n}\nfunction loadCassette(cassetePath) {\n  const defs = nock.loadDefs(cassetePath);\ndefs.forEach((def) => {\n    def.options = def.options || {};\ndef.options.filteringScope = (scope) => (\n  !(/127.0.0.1/.test(scope))\n);\n\n});\nreturn nock.define(defs);\n}\nfunction vcr({ testPath, recordMode = 'dryrun' } = {}) {\n  const cassettePath = getCassetePath(testPath);\nlet recording;\nbeforeAll(() => {\n    recording = false;\nnock.restore();\n\nswitch (recordMode) {\n  case 'dryrun': {\n    if (fs.pathExistsSync(cassettePath)) {\n      loadCassette(cassettePath);\n    }\n\n    break;\n  }\n\n  case 'record': {\n    if (fs.pathExistsSync(cassettePath)) {\n      nock.enableNetConnect(/127.0.0.1/);\n\n      loadCassette(cassettePath);\n    } else {\n      nock.recorder.clear();\n      nock.recorder.rec({ dont_print: true, output_objects: true });\n\n      recording = true;\n    }\n\n    break;\n  }\n\n  default:\n    throw new Error(`Unsupported record mode \"${record}\".`);\n}\n\n})\nafterAll(() => {\n    if (recordMode === 'record' && recording) {\n      fs.outputFileSync(cassettePath, JSON.stringify(nock.recorder.play(), null, 2));\n    }\nnock.restore();\n\n});\n}\nexport default vcr;\n```\nTest example (PlansController fetches data from Stripe):\n```\nimport request, { json } from 'test/request';\nimport vcr from 'test/vcr';\ndescribe('PlansController', () => {\n  vcr({ testPath: __filename, recordMode: 'record' });\ntest('displays a list of the avaiable plans', async () => {\n    const { body } = await json(request.get('/api/v1/plans')).expect(200);\nexpect(body).toMatchSnapshot();\n\n});\n});\n```\nThe request variable is const request = supertest(app.listen()); \nIf you have a repo, I could check it.. ",
    "epiphone": "Got the same error while mocking Stripe API with nock - turned out I needed to include port in the target URL:  nock('https://api.stripe.com:443/v1/ ').get(.... \nUsing nock's logging feature was helpful in figuring out the bug:\nnock(...)\n  .log(console.log)\n  .get(...). ",
    "igalic": "A little bit of background on @fruitfuljs, or communities of practice, in general:\n\na post on @voxpupuli\n[a talk about](http://sous-chefs.org/posts/chefconf-2017/] @sous-chefs\n\nthe way we usually operate is to adopt a project \u2014 and all its contributors \u2014 into oyr organisation. then start cleaning issues and pull requests, and add more automation where possible. \nif this is something you want, we can grant the appropriate permissions to do that.\nif not, you can rest assured that just talking about help with maintenance has awoken people who you can add to your organisation!. Do you ever feel like you've done a really bad job communicating?\ni do.\nSo, @voxpupuli is a community that's centered around maintaining puppet modules. and peripherally related ruby gems. but we also have one python library. the vim and emacs modes live there, etc\u2026 There are other projects like @voxpupuli. @sous-chefs, @terrafarm. You'll notice that most of these are infrastructure centered. This is not a coincidence.\nwith @fruitfuljs we're trying to build such a space for javascript. This is a slow and painful process. My assumption that drawing relationship lines to other projects would help was obviously mistaken in some way or another!\nto cite the website\n\nfruitful is a community of volunteers who are joining forces to maintain adopted or abandoned JavaScript packages. We strongly value collaboration when maintaining packages, and this is reflected in our work.\nWe are convinced that everything you put into your package.json, yarn.lock or bower.json should have more than one maintainer. It should have some guarantees that tomorrow, or in a week it will still be there in equal or better quality. If you, at some point, decide to abandon maintenance for your project, we are going to ensure that it doesn't just die a slow death.. \n",
    "leviwheatcroft": "I can see how offering to adopt a puppet module into an org maintaining puppet modules might work well, but without that community association a request like this seems a little... awkward ?\n. ",
    "jamiemjennings": "nock master branch is in too much of a mess (lots of broken code/tests) to introduce this change at this time.. ",
    "songawee": "@watson This is an interesting idea. \nI wonder if you could hook into this method on scope - https://github.com/node-nock/nock/blob/master/lib/scope.js#L73. When the interceptor array is empty and the keyed interceptors are empty, you could fire a method on scope (.after?) Although, I think that would only be called if all of the interceptors were successfully matched. if an interceptor hadn't been matched, I think it would still be in the array and the .after hook would never be called.\nI guess a hacky way to achieve the hook would be to poll nock.isDone() and wait for that to return true.\nMaybe an even crazier idea would be to add an after hook into https://www.npmjs.com/package/async-listener and wait for performRequest to finish and then just call scope.done() when that listener fires.. I think you'll want to use pathname instead of path for instances where query params are present.. Might be cool to add a test with query params.. ",
    "julianhille": "I see the same error, nocking a request with retrying sometimes responds in 4 ms and sometimes just takes 1-4 seconds. Without anything else im unsure how to reproduce, currently i have no way to really reproduce this.\nMy log where i log the date in the retry function and the body create function in the nock call back:\nreturning body function 2018-06-05T08:41:57.190Z\nin the retry func 2018-06-05T08:41:57.191Z\nreturning body function 2018-06-05T08:41:57.552Z\nin the retry func 2018-06-05T08:41:57.554Z\nreturning the body 2018-06-05T08:42:01.074Z\nin the retry func 2018-06-05T08:42:01.074Z\n. I found my issue and it might relate to yours, are you using electron-mocha as a test runner for an electron app together with nock?. ",
    "TrevorMuraro": "Tested this myself.  For anyone who's wondering, the answer appears to be no.. ",
    "ccoenen": "I've just sunken an hour into that. Here's my mocha snippet:\n```js\nconst https = require(\"https\");\nconst nock = require(\"nock\");\nconst URL = require(\"url\").URL;\nnock.disableNetConnect();\ndescribe(\"#download\", () => {\n    it(\"should retrieve stuff\", function (done) {\n        this.timeout(10000);\n        const nocks = nock(\"https://example.com\")\n            .get(\"/\")\n            .reply(200, \"test\");\n    const url = new URL(\"https://example.com\");\n    https.get(url, (response) => {\n        response.on(\"data\", function() {});\n        response.on(\"end\", () => {\n            nocks.done();\n            done();\n        });\n    });\n});\n\n});\n```\nthis yields \n```\n$ mocha\n  #download\n    1) should retrieve stuff\n0 passing (16ms)\n  1 failing\n1) #download\n       should retrieve stuff:\n     Uncaught NetConnectNotAllowedError: Nock: Not allow net connect for \"example.comundefined\"\n      at ...somewhere...\\node_modules\\nock\\lib\\intercept.js:404:21\n      at Object.module.get (node_modules\\nock\\lib\\common.js:145:19)\n      at Context.it (test\\nocktest.js:28:9)\n```\nplease note the \"example.comundefined\".. Awesome! Thanks everyone!. ",
    "jinwoo": "I'm also hit by this. Would be great if this could be fixed soon.. I think this can be closed now?. Fixes https://github.com/node-nock/nock/issues/956. Thanks, @gr2m , for the quick approval. Some tests are failing but they don't seem related to my changes though.\n. Looks like tests are still failing with node 6. Thanks for restarting them multiple times though. Most of the failures seem timing out. They pass locally on my machine when running with node 6 and 8. Maybe we have too little machine resources in travis?\n. Hmm... still failing with node 6. Not sure what to do with it. They all pass locally when running with node 6 on my machine. They run pretty fast locally, so I suspect that we have too little machine resources in travis.\nAnyway I'll leave this to you, @gr2m. Thanks.. Thanks, @gr2m, for quick reviews and merge!. ",
    "sharikovvladislav": "You added one line to the readme file and coverage level decreased. Probably there is a way to ignore README.md when collection coverage :). I don't know how to do it. For example: https://github.com/expressjs/express/blob/master/package.json#L93 lodash collects coverage with istanbul and then send that results to coveralls. \nActually, there is source_files option in coveralls docs: https://coveralls.zendesk.com/hc/en-us/articles/201350799-API-Reference. ",
    "akaguny": "close and create #971. @gr2m pls review. javascript\nnock(https://api.instagram.com)\n  .persist()\n  .log(console.log)\n  .get(`/v1/users/${userId}/media/recent/?access_token=${accessToken}`)\n .reply(200,{})\nexample: https://github.com/akaguny/advanced-build-conditions/blob/master/examplesForDebug/testNotFound.js#L23\nyou also can use RegExp or function as argument in get function\nhttps://github.com/node-nock/nock#specifying-path. ",
    "cmswalker": "Will do asap. @gr2m please see new PR https://github.com/node-nock/nock/pull/973. Strange. Linter must've been a little too opinionated on that one.. @gr2m should have caught this in my original PR but wasn't combining allowUnmocked: true with regex's that need query params until recently\nlet me know. ",
    "mitsos1os": "Yes... it seems to be ok....closing the issue then.... ",
    "npetevn": "I hit this same issue and found out that it was introduced somewhere between 9.0.18 and 9.0.21 releases. As a workaround, I reverted to 9.0.18.. ",
    "brian-poncho": "Jumping in to note that this issue seems to pop up whenever a request matches a https path but not some other part -- mine are getting messed up by .query functions. . Here's a PR for this bug -- I'm super new here and I'm not sure it's necessarily something that should be accepted, but it's at least a collection of thoughts, and the test is what I think @gr2m was asking for.\nhttps://github.com/node-nock/nock/pull/1008 . @n30n0v holy crap, i can't believe it was that simple. Will confirm when I get around to updating my project. . ",
    "nielskrijger": "We were relying on this behaviour in our tests.\nI'm now doing this:\n```\nimport _ from 'lodash';\nfunction matchSubset(actual, partialMatch) {\n  let isMatch = true;\n  let i = 0;\n  const keys = Object.keys(partialMatch);\n  while (isMatch && i < keys.length) {\n    if (_.isRegExp(partialMatch[keys[i]])) {\n      isMatch = partialMatch[keys[i]].test(actual[keys[i]]);\n    } else {\n      isMatch = actual[keys[i]] === partialMatch[keys[i]];\n    }\n    i++;\n  }\n  return isMatch;\n}\n```\nand in our mock helpers:\nmockPost(response, body = undefined) {\n  nock('https://some.url')\n    .post('/somepath', b => !b || matchSubset(b, body))\n    .reply(200, response);\n}. ",
    "cristianszwarc": "Agree, the function option is the correct way\nThanks everyone\nOn Tue, 26 Sep 2017 at 07:36 Gregor Martynus notifications@github.com\nwrote:\n\nThanks @nielskrijger https://github.com/nielskrijger, I\u2019ve created a\nfollow up issue to make the documentation more clear:\n982 https://github.com/node-nock/nock/issues/982\nPull Request much appreciated <3\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/node-nock/nock/issues/981#issuecomment-331973071, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEcqkM37LfS_GNcpEJBq6u7j7VNpkJ7Dks5sl_KggaJpZM4PiFMY\n.\n. \n",
    "josalmi": "We were also relying on this in our tests. Maybe 9.0.19 should have been a major release rather than just a patch. http://semver.org/#spec-item-8. ",
    "maxGreenblatt": "Doesn't break any tests - 758 passing, 1 pending, then 6 passing in install_sub_deps with and without the line commented.. https://github.com/node-nock/nock/commit/18ab73f3a04d6b525b2203e43050bd14ece6e82f - looks like it was part of the initial commit for Scope filtering 3 years ago. Are you sure every scope is intended to be different?\nfilteringScope(basePath) is just sending the host string, not even the path. By that logic that would mean we are only allowed to have one scope per host?\nhttps://github.com/node-nock/nock/blob/master/lib/intercept.js#L156. I haven't created a smallest test that isolates the issue, but I could pretty easily if that's helpful.\nAs the user, I would assume option (3) is the default behavior. And to get the behavior in option (1) you would call .persist() on the scope.\nI think another quirk about the way it is currently coded is that it says this is filtering the scope which is an object that contains a lot of information, but as its implemented scopeFiltering is really just filtering the hostname/basePath. ",
    "surajbyanju": "@gr2m are you asking for my whole test class code? I searched for this issue and looks like no one has a problem I am facing. I am trying to find out if I am doing something wrong while mocking the request. . @jonjaques @gr2m Thanks for your effort to look into this. \nI have created a github gist with sample unit test for the issue. \nhttps://gist.github.com/surajbyanju/5be40ef56c0334c7a33f05fa690f8149\nThe problem here is, the first test with 200 response status and empty string works fine and outputs the log but not the second test. \nconsole output:\nconsole.log node_modules\\nock\\lib\\interceptor.js:322    matching http://somehost:80 to GET http://somehost:80/test: true \nconsole.log node_modules\\nock\\lib\\interceptor.js:322  matching http://somehost:80 to GET http://somehost:80/test: true\nconsole.log src\\js\\services\\TestDataService.js:12\n      Response:::::::: \n@gr2m hope this helps. \n . ",
    "jonjaques": "Just a guess, try .log(console.log.bind(console)). ",
    "MoonTahoe": "It turns out that is actually easier just to run a http server on the port I am trying to test and proxy nock. Thanks for the suggestions.. ",
    "entropitor": "@gr2m From the documentation, I'm actually guessing that this might not even exist. So that's why I've created an issue. If it doesn't exist yet, it would be a nice addition, I think. ",
    "rsimp": "PR submitted and passing all tests. Awaiting review.. Weird the tests all ran fine locally:\n\n. Oh it appears its just node.js 0.10 that is failing, does this need to be supported? Also if these changes failed 8.2.1 probably failed as well.. Using nvm to switch over to node 0.10 and then running:\nrm -rf node_modules/ && npm install && npm test\nI've ascertained that the same test has failed on node 0.10 since v8.1.0 and v8.0.0 won't run entirely due to a forEach issue.\nThe test that's failing is issue #163 - Authorization header isn\\'t mocked inside test/test_intercept.js. It's timing out when trying to issue a non mocked call to www.example.com.. This was the only line added. ",
    "rash805115": "@gr2m Hello. I got this working by simply commenting out all restore() methods.\nI would close this issue, but first I wanted to understand the reason behind it.\nAs per your documentation\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling: restore()\n\nHence, I was calling restore() assuming that nock would be de-activated after tests, and in next block I would re-activate it. But the re-activation part never happens.\nQ1: Is my understanding of restore() method wrong?\nQ2: How to re-activate nock once it has been deactivated using restore() method.. @gr2m Perfect mate!!! I tested that on my end and it works perfectly.\nI am now putting below before() method in my test cases.\njavascript\n  before(function (done) {\n    if (!nock.isActive()) nock.activate()\n    done()\n  })\nYeah, lets put this information in the README because the documentation has no reference of isActive() and activate() method at all.\nBTW, should I be calling restore(), or is it advised to just call cleanAll()?. ",
    "serahhh": "Hi, I have simplified the logic. I'm assuming target should always be string-like, otherwise use an empty string as a fallback.. ",
    "eitah": "for now we remain on nock 9.0.14 which works.. ",
    "puneetguptanitj": "I am seeing the same issue as well \nwondering shouldn't this have a typecheck for string as well \nhttps://github.com/node-nock/nock/commit/bd38736#diff-f7a7f1f3d9e28ef78a493002d2cb1f73R45. ",
    "winsontsang": "Although this feature would be nice, I'm going to be closing this as I can just get around the issue by just accepting any string under message from the error returned from the intercepted request.. ",
    "louib": "@ierceg thanks for the review! I answered directly on your comments.. @gr2m @ierceg I reduced the size of the changes to fix the issue. Can you give this PR another review?. @gr2m @ierceg I'm not sure what the multi-value query parameters support was all about, but I reverted my changes in that part of the code. @ierceg can you validate?. @ierceg maybe it was done this way for multi-value parameters at some point, but at the moment formatQueryValue was always using key as a key in the queries object, and so the behaviour is not changed AFAICT.. @ierceg there is one: query() with \"true\" will allow all query strings to pass. This test was passing because this.queries was only modified in for (var q in queries) {, but now we are always setting this.queries, so this early return is needed, otherwise that test will fail.. I'm not sure I understand, do you mean multi-value query params were supported and now they are not? I don't see how this would be possible, since we were also not setting a value already in the queries before:\nfor (var q in queries) {\n    if (_.isUndefined(this.queries[q])) {\n        var value = queries[q];\n        var formatedPair = common.formatQueryValue(q, value, this.scope.scopeOptions);\n        this.queries[formatedPair[0]] = formatedPair[1];\n    }\n}. ",
    "jpsecher": "The patch with 'Nock: No match for request ' + ... + ' Got instead ' + common.stringifyRequest(options)) produces confusing error messages, like\nError: Nock: No match for request {\n  \"method\": \"PUT\",\n  \"url\": \"http://localhost:3210/v1/community/1/entity/5433\",\n  \"body\": \"{\\\"modified_by\\\":124}\"\n} Got instead {\n  \"method\": \"PUT\",\n  \"url\": \"http://localhost:3210/v1/community/1/entity/5433\"\n}\nThe problem is that the Got instead part seems to say that there indeed is a match (except for the body).  But there is no such match.\n. ",
    "exogen": "@n30n0v The problem is that you can't do that dynamically, such as when your reply() is an asynchronous function. e.g.\njs\nnock(...).reply((uri, body, callback) => {\n  // What happens here if my `reply` handler does something async and\n  // needs to issue an error? My only choice is `callback(err)` which\n  // generates a fake 500 response.\n})\nTo use replyWithError you need to know up-front that you want to return an error for the request.. @n30n0v Let's say I wanted to customize fixture handling, like keeping them in a database, or working like other VCR-like libraries by organizing fixtures by the hash of each request (instead of giving each test its own manually-named fixture like Nock Back). That would look something like:\nnock(...).reply((uri, body, callback) => {\n  const { host } = this.req.headers\n  const requestKey = hash({ uri, body, this.req.headers })\n  const fixturePath = `fixtures/${host}/${requestKey}.json`\n  fs.readFile(fixturePath, 'utf8', (err, data) => {\n    if (err) {\n      // If in record mode, hit the network. But otherwise:\n      callback(new Error('Fixture not found!'))\n    }\n  })\n})\nYou can see why a 500 doesn't make sense here. If a fixture isn't found, the test shouldn't think that the server actually responded with a 500 (what if my fixture actually contains a legit 500 response and that's what I'm testing?). Instead of erroring in the correct spot and causing the test to fail, I'd have to use the .then() handler as if the request went through, then parse the response body to see if it's my special \"fixture not found\" error message, in every single test.\nAnyway, I was able to work around this by ignoring callback completely in this case and calling this.req.emit('error', err) \u2013 that makes it work like I expect. But it feels like from an API perspective, that's what callback(err) should do \u2013 since if the user wants a 500, they could just do so explicitly with callback(null, [500, err]).. ",
    "whyvez": "@thisdotrob @gr2m It's because json: true was specified in the request options. Remove this and it works.\nsee: https://runkit.com/whyvez/5a4be24682b9870012b49637#. ",
    "kevinburke": "Apologies but I've since moved on from that engagement and probably won't have time to test :( best of luck!\nA way to test would probably be to start with the JSON I put up above, read it back into memory, and verify the length of the buffer in memory matches the Content-Length header.. ",
    "bkeepers": "\nThe TypeError: Cannot read property 'status' of undefined error is weird but seems to be a problem in supertest, not nock.\n\nYou were right. https://github.com/visionmedia/supertest/pull/446 fixes the error I am seeing.\n. ",
    "chenghung": "@gr2m sure, one testcase has been added, please review it again, thanks.. ",
    "lunow": "I have exactly the same problem. do you found a solution for it?. In my case it was a CORS problem. We solved it like this\n.reply(200, { result: 'campaignMatched!!' }, {\n  'Access-Control-Allow-Origin': '*'\n}); \nWorks perfectly now! Maybe its the same for you, @rodhoward because I noticed different ports in your snippet above.. ",
    "rodhoward": "No didn't get any further but I did try fetch mock which didn't seem to intercept the calls at all. Instead I started using json-server which wasn't ideal but it worked well for gets just more work for the posts. Please let me know if you have any success.\nCheers . Thanks @lunow I'll give that a shot.. ",
    "sagarmandakki-trialrun": "I seem to be facing the same issue even after I allow the cors access. Anyone know the workaround for this?. ",
    "morrislaptop": "It was a problem with etherscan-api, it was setting a base uri and then also requesting a full uri. It still actually makes requests somehow, but doesn't match with nock's matching logic. \nI've submitted a pull request at sebs/etherscan-api#15\nThanks for looking into it! . ",
    "caub": "can't reproduce https://runkit.com/caub/5a24463a826e3c0012512ebd so, I'll try to debug my test environment (jest). Ah.. I forgot they are valid only once by default, need .persist() else. reduced a bit:\n```js\nconst http = require('http');\nconst nock = require('../');\nnock('http://httpbin.org').persist()\n  .post('/post').reply(200, (uri, reqBody) => {\n    return {\n      \"hits\": {\n        \"total\": 0\n      }\n    }\n  });\nconst fetch = (url, o) => new Promise((resolve, reject) => {\n  const req = http.request(url, o);\n  req.once('error', reject);\n  req.once('response', res => {\n    const bufs = [];\n    res.on('data', buf => bufs.push(buf));\n    res.on('end', () => {\n      const text = Buffer.concat(bufs);\n      resolve(/^application\\/json/.test(res.headers['content-type']) ? JSON.parse(text) : text);\n    });\n  });\n  if (o && o.body) {\n    req.write(typeof o.body !== 'string' ? JSON.stringify(o.body) : o.body);\n  }\n  req.end();\n});\nfetch('http://httpbin.org/post', { method: 'POST', body: { wat: 1 } }).then(console.log, console.error);\n```. I updated the second simplified bug reproduction\nand had a look at debugging, the issue as pointed out by JordanShurmer is now node10 allows url + options to be both passed, so var interceptors = interceptorsFor(options); needs a rewrite to accept possibly 2 keys, not just options. ",
    "felipellrocha": "What is the status on this? I think I am running into the same issue. ",
    "mpardue": "So, I have a hack for this, but I don't know that the fix is the best solution. I have created a pull request. https://github.com/node-nock/nock/pull/1068. I've rebased on master.. ",
    "nagapavan": "@gr2m runkit.com link: https://runkit.com/nagapavan/nock-nock-1035\nThe commented code works in single test mode but if I have multiple files with same nock (with nock.clearAll() done in beforeEach() section), then the second one also fails.\nSurprisingly, setting following is the workaround I got. Not sure why it worked.\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n. ",
    "vithonch": "+1 to issue. ",
    "mvpowers": "Is this still an issue? This test is passing: \n```\ntest('params are encoded', function(t) {\n  var scope = nock('http://unit.test')\n    .get('/someSubUrl?param=ONE,TWO')\n    .reply(200, []);\nvar req = http.request({\n    hostname: 'unit.test',\n    method: \"GET\",\n    path: '/someSubUrl?param=ONE,TWO'\n  }, function(res) {\n    scope.done();\n    t.equal(req.path, '/someSubUrl?param=ONE,TWO');\n    t.end();\n  });\n  req.end();\n});\n```\n. ",
    "pabigot": "@gr2m all I can do is propose reverting the patch, going back to status-quo-ante, which I've done.  Figuring out how to represent and display the contrasting user-supplied input is not in my scope.. ",
    "RubenVerborgh": "It's a Nock problem, reported as #1046 and fixed in #1047.. ",
    "CodeJjang": "I also have encountered a problem where a deep JSON I send with POST is not matched with nock, even though I manually diff'ed what nock says it expects and what it receives and it was 100% identical. I also tried to use the code outputted from the record function, but same results.\nMy version however is 9.1.8, and I cannot post an example since it's in an offline environment.\nThe post body consists of a POJO object which contains a deep JSON string.. ",
    "FerrielMelarpis": "@zivanovicb1 Try separating the base URL and path\n```js\nconst nock = require('nock');\nconst request = require('request');\nconst baseURL = 'https://api.foursquare.com';\nconst path = '/v2/venues/explore';\nconst query = {\n    near: \"Belgrade, Serbia\",\n    openNow: 1,\n    ...,\n};\nnock(baseURL)\n    .log(console.log)\n    .get(path)\n    .query(query)\n    .reply(200, 'ok');\nrequest({\n    uri: baseURL + path,\n    qs: query\n}, console.log);\n. hmm can't seem to replicate\nmatching https://api.foursquare.com:443/v2/venues/explore?client_id=CHHHDVVEXHIIAXADQIOBSS13KJHSSYAOCL0QWFQ3U4G2RNWQ&client_secret=YHF1WEWSQMSJRCSWO4XLLHSFRQXBWFZP21ID5JMWSQXWVRYG&near=Belgrade%2C%20Serbia&openNow=1&query=coffee&v=20170801&limit=15&price%5B0%5D=1&price%5B1%5D=2&price%5B2%5D=3&price%5B3%5D=4 \nto GET https://api.foursquare.com:443/v2/venues/explore with query({\"client_id\":\"CHHHDVVEXHIIAXADQIOBSS13KJHSSYAOCL0QWFQ3U4G2RNWQ\",\"client_secret\":\"YHF1WEWSQMSJRCSWO4XLLHSFRQXBWFZP21ID5JMWSQXWVRYG\",\"near\":\"Belgrade, Serbia\",\"openNow\":\"1\",\"query\":\"coffee\",\"v\":\"20170801\",\"limit\":\"15\",\"price\":[\"1\",\"2\",\"3\",\"4\"]})\n: true\n```\nHow do you use request? If you pass additional headers, I think you also need to put that as option to your nock.. ",
    "zivanovicb1": "@FerrielMelarpis \nTried it, the exact same error... ",
    "AlexGilleran": "I had this problem until I realised that it was because my nock matcher was looking for {key: undefined} in the body but the request that got sent just omitted the key - worked in an older version of nock but it failed on our travis server with an up-to-date version. Thought I'd mention it in case it helps somebody - unfortunately I can't prove it on runkit because it doesn't do past versions as far as I can see :(.. ",
    "tobias-khs": "I came across the  same issue. But: some hidden part of our code made many requests, so the registered one got consumed, and then next time it would fail. Using .persist() I could solve figure out my problem. See documentation.. @timkindberg Have you tried to add .log(console.log) and .persist(). In my case it was my own code that caused the trouble.. ",
    "timkindberg": "I'm getting this issue as well and it is quite infuriating not being able to see the difference between what was expected and what actually got called. I can't paste my log message because it has too much sensitive info in it, but its essentially no different than @zivanovicb1's original code example.\nThis is roughly how I'm using the library:\njs\nrequest\n    .get({\n      baseUrl,\n      url: `/item-details`,\n      qs: {\n        itemIds: ids.join(','),\n        div: division,\n        store,\n        guid\n      },\n      headers: {\n        Authorization: 'Basic <myauthhere>',\n      }\n    })\nThis is driving me insane :/. @tobias-khs the .log(console.log) did help, thank god. I did not try persist. . ",
    "koroshi": "```\n let liveInfoSuccess = nock('http://172.16.20.105')\n let result = await live.liveInfoRequestAndSave({ meetingId: meetingId })  //it not match\nlet result = await live.liveInfoRequest({ meetingId: meetingId,liveId: liveId }) //it match \nasync liveInfoRequestAndSave({ meetingId, meetingPassword = '603918' }) {\n        log.debug(\"start liveInfoRequestAndSave Method \")\n        log.debug(\"liveInfoRequestAndSave meetingId: \", meetingId)\n        // log.debug(\"liveInfoRequestAndSave liveId: \", liveId)\n        log.debug(\"liveInfoRequestAndSave meetingPassword: \", meetingPassword)\n    let liveDoc = await LiveDb.findOneAsync({ \"meetingId\": meetingId })\n    let liveId = liveDoc.live.liveId;\n    log.debug(\"liveInfoRequestAndSave liveId: \", liveId)\n\n    let liveResult = await this.liveInfoRequest({ meetingId, liveId, meetingPassword })\n    log.debug(\"liveInfoRequestAndSave liveResult: \", liveResult)\n\n    liveDoc.live = Object.assign({}, liveDoc.live, liveResult);\n    liveDoc.markModified(`live`)\n    let savedDoc = await liveDoc.saveAsync();\n    log.debug(\"liveInfoRequestAndSave savedDoc: \", savedDoc)\n    return savedDoc;\n}\n\n```\n~~why the request in liveInfoRequestAndSave can not match and the request in liveInfoRequest can be match it looks as the same function~~\n~~i have try persist,but it alse not match~~\ni have solve the problem with .log(console.log)\nit's my code problem. ",
    "scott-cornwell": "I have this problem and log(console.log) did not help. To those struggling with nock I have some advice: \nJust use webpack NormalModuleReplacementPlugin (https://webpack.js.org/plugins/normal-module-replacement-plugin/). You can just abstract getting your data so it's a simple function that returns a promise. For real API you have a file with everything it needs to talk to real API and exports a function to do that. For mocks you have a file that has some mock logic (as complex or simple as you want) and exports that function. By setting an environment variable you can have NormalModuleReplacementPlugin build with the mock file instead. No worrying about matching anything, ever. No extra library bloat (plugin is already included with webpack) \ud83d\udc4d . ",
    "nateholmes3": "I have a similar issue:\nThis is the basic setup of my nock (removed sensitive information)\n`nock(host, {reqheaders: {headers}}).log(console.log).get('/path').query({params}).times(3).reply(502)\nsupertest(app)\n    .get(path/that/leads/to/above/request/being/made)\n    .set(all other appropriate fields)`\nI am using node's 'requestretry' package in my app in order to add retry functionality. in my tests I am trying to get my nock to reply 3 times with a 502 and then have the request actually go through in order to verify that the retry functionality is working. Everything seems to work fine up until the 3 responses from the nock occur and then I get an error. full output from the log below:\nmatching https://domain/path to GET https://domain/path with query({\"x\":\"x\"}): true\nmatching https://domain/path to GET https://domain/path with query({\"x\":\"x\"}): true\nmatching https://domain/path to GET https://domain/path with query({\"x\":\"x\"}): true\nTHIS IS THE ERROR THAT IT IS COMING BACK WITH : Error: Nock: No match for request {\n    method\": \"GET\",\n    \"url\": \"https://domain/path\",\n    \"headers\": { \n        unimportant\n    }\n}\nmy urls match up just fine, but once I make the request the 4th time (when nock should supposedly be completely out of the picture and the real request should be made) i get the error. Any advice? . ",
    "stubar": "OK I'm going to try a pull request.  I've just done some rolling back and I can confirm that the version that broke this is 9.1.1. I've made a failing test case and thought I would do some investigating as to why it fails.  I have found that the point at which the parsing fails is \nlib/match_body.js:30\nbody = qs.parse(body);\nI assume the qs upgrade on the 16th Nov last year caused this change in behaviour.  Looking at qs it does have a lot of support for object and array parsing.  However I think the weird thing about my use case is it is sending object arrays.  Maybe qs could be enhanced to parse arrays of objects eg \"arrayLike1[0].fieldA\": \"0\"\nor just not try and smart parse them.\nI will get in touch with the qs guys next. FWIW this is my failing test case\n```\ntest('array like urlencoded form posts are correctly parsed', function(t) {\nnock('http://encodingsareus.com')\n      .post('/', {\n        \"arrayLike[0].fieldA\": \"0\",\n        \"arrayLike[0].fieldB\": \"data\",\n        \"arrayLike[0].fieldC\": \"value\"\n      })\n      .reply(200);\nmikealRequest({\n    url: 'http://encodingsareus.com/',\n    method: 'post',\n    form: {\n      \"arrayLike[0].fieldA\": \"0\",\n      \"arrayLike[0].fieldB\": \"data\",\n      \"arrayLike[0].fieldC\": \"value\"\n    }\n  }, function(err, res) {\n    if (err) throw err;\n    assert.equal(res.statusCode, 200);\n    t.end();\n  });\n});\n. OK I've submitted a PR. I've just started investigating qs and have found the solution is potentially very simple...\nbody = qs.parse(body, { allowDots: true });\nBy adding the allowDots setting to the line discussed, the arraylike params i was feeding in work again.  Not sure how I missed this in the qs api doc before.   I just have to alter my nock match object to ...\n{\n          arrayLike: [\n            {\n              \"fieldA\": \"0\",\n              \"fieldB\": \"data\",\n              \"fieldC\": \"value\"\n            }\n          ]\n}\n```\nAll tests are passing when I add this.  Do you want to bake this setting in or make it an option to the nock call that get's forwarded?. ",
    "MathieuDerelle": "I think the correct syntax is\n\"refundDetailsData[0][entryNo]\": \"0\",\n                    \"refundDetailsData[0][returnableQuantity]\": \"2\",\n                    \"refundDetailsData[0][expectedQuantity]\": \"1\",\n                    \"refundDetailsData[0][reason]\": \"IncorrectItemReceived\",\n                    \"refundDetailsData[0][notes]\": \"some free text here\". ",
    "CurosMJ": "One more thing: the serialised request shown in the bottom is actually the expected version, not the original version. . ",
    "ninhxuanluu": "\nmoderated\n\n  I've got the same issue, f*cking error message :( \n\n. ",
    "khizar": "any update here?. ",
    "norules4kiran": "Thank you @akaguny . ",
    "gorangajic": "Sorry, but I was not able to figure this one out. Didn't have that much free time to work on it so after some time I gave up.. ",
    "giodamelio": "This would be a really nice thing to have. I am running into an issue right now, where I want to parse some multipart form data in the request body parser and I can't since the form data parser is streaming.. Unfortunately I don't really have time to do this currently, so I'll leave\nthis for now.\nThis has bit me multiple times in the past though, so I very well might\ncome back to it.\nOn Tue, Oct 2, 2018, 11:35 AM Gregor Martynus notifications@github.com\nwrote:\n\n@giodamelio https://github.com/giodamelio if you like, open a new issue\nfor it? But you\u2019d need to champion it to get it shipped, we can only\nfacilitate your contribution and make it as pleasant an experience as\npossible. We can\u2019t do it ourselves I\u2019m afraid\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nock/nock/issues/1060#issuecomment-426383850, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAa9LopGy07ovOMl4Bp9IZyERmX-q-ddks5ug7HbgaJpZM4R8Sep\n.\n. \n",
    "aarongreenwald": "Hate to comment just to say +1, but this is something that I need as well. Did anyone look at this and decide whether it's something they want to merge or not? Or this PR just sitting here all alone and brokenhearted, with nobody noticing it and nobody to love it?. @gr2m Thanks! I'm glad to hear you're able to get this going, and I'll be using it in my project. Will definitely try to report issues or submit PRs if I'm able. Thanks for developing/maintaining nock, it's a great library and helps me a ton with my testing.. ",
    "gbirke": "Oh, forget it, I have an ancient release (4.x). ",
    "ljharb": "I\u2019m not familiar with nock, so I\u2019m not really sure how to answer; \u201cdot\u201d is a parsing mode, so it really wouldn\u2019t make sense to be in two parsing modes at the same time.\nI\u2019m personally not a fan of the dots, fwiw, but it remains a supported use case in qs :-). ",
    "deeptiagrawa": "I am working on a PR for this issue.. PR for the issue https://github.com/nock/nock/pull/1179. Hello, I am working on creating a PR for this bug. The PR will be ready by Monday at the most.. @gr2m Created this PR #1147. Thanks a lot @gr2m . While working on this bug, I found that the test suite is a bit complicated. I will look at that issue and see if I can fix that up.. ",
    "mbad0la": "@gr2m this looks quite extensive!\nClaiming tests/test_back.js#L154 to begin with \ud83d\ude42 . Would you recommend me to raise an issue too (like you did for your current WIP : tests/test_back.js#L137 ?). Claiming tests/test_back.js#L188, tests/test_back.js#L235 and tests/test_back.js#L261 !. @gr2m ,\nWhy do I feel like this task is a perfect candidate to test GitHub projects? \ud83d\ude1b . Taking out test_back_2.js tests this time!. Claiming tests in test_intercept.js. I've been blocked on spinning up a local https server. I looked around a bit but didn't find any easy workarounds. Can you help me figure that out? . I did give the above examples a look some time back, but didn't have much success with the tests here. I'll give this another go in a day or two and keep you posted on any updates.. @gr2m any clues as to why there are test failures?. Ready for a merge? \ud83d\ude04 . Yup. I'll keep that in mind. Right now, I'm just shooting in the dark while picking up the issues. In the future, I'll run by them first before picking them up so that I can group them together.. Hey @gr2m ,\nI have refactored one of tests in this file. Can you take a look at it and let me know if I wrote the test incorrectly?. I felt so too, but I wanted to keep changes focused and unit in nature, so just removing AIRPLANE dependency for now!. Hey @gr2m , here's the configuration we'll be requiring to mock localhost https servers.\nI've tested them out on one of the test cases on my machine.\nCan you please check on whether the configs are at the right place in the project?. Hey @gr2m . How are you?\nWe've got to wrap this up! It has been quite a while now .... Hey @gr2m ,\nSorry for the delay here. I was intending to fix up tests separately (had them figured out already!) and that is why was waiting on a merge on this ...\nCan we merge this without having to add tests here itself?. Will the tests run in parallel? Because, it would be tough to figure out the behaviour of our tests in such a case if all of them use port 0 to setup the local server.\nDo you think it makes sense to persist the server across tests, if they all are in the same file?\nI also have some concerns with the usage of port 0 which is reserved for TCP/IP networking to do some fancy socket programming things. We can probably just use good 'ol 80(80) if we decide to persist the server?. Oh btw, you need the semi-colons ;). Braces not required!. I added it deliberately. Found it to improve readability for me. I'll remove it.. Oh, I intend to use 304 \ud83d\ude42 \nIt was to differentiate b/w requests which pass through and the ones which match an interceptor. ",
    "anshumanv": "https://github.com/node-nock/nock/blob/055593abb036524ffff8f364f8effc91827a130f/tests/test_back.js#L261 is fixed in #1090 please remove it from wip. :). Yes! I just forked, solving them one at a time. :) \nThanks @gr2m :smile: . Sure cool, claiming #L313 https://github.com/node-nock/nock/blob/055593abb036524ffff8f364f8effc91827a130f/tests/test_back.js#L313 as a starting point.. Claiming https://github.com/node-nock/nock/blob/055593abb036524ffff8f364f8effc91827a130f/tests/test_https_allowunmocked.js#L9 this time!\nIssue - https://github.com/node-nock/nock/issues/1102. Ah, I'lll fix this today. :+1: . I need help @gr2m, sorry for delaying this so much. :sweat_smile: . @gr2m please review again. :smile: . Hey, @gr2m :smile:  I'm not able to finish this up due to ongoing exams in my institute, can we turn this issue to open for all?. Ah, really sorry for this, my bad. Fixing :)\nPerhaps I don't think the repo has a .editorconfig file, should we have one? @gr2m . ",
    "jlilja": "Claiming test_https_allowunmocked.js!. Hello Zacharyscott.\nI've been looking into this problem and I've written scripts to reproduce this error here https://runkit.com/jlilja/5b4597caa6a0a90012a2b746.\nMy question is if this should be expected behavior or not? \nHaving a trailing slash is to no other use (other than what I can google) to have a pretty url structure - so I see the fix being ok.\nHowever it also makes sense to me that what you set up in nock is what you get. If the doesn't match the request then it shouldn't be caught.\nJust raising the question of best practice before going further and working on a fix. What are your thoughts @gr2m?. I'd say its a feature. If @zacharyscott doesn't have anything to add I think this can be closed.. This is technically just chaining methods and using regex to match everything. Until an any method has been made the following snippet could help. \njs\nvar scope = nock('http://www.google.com')\n  .persist()\n  .get(/.*/)\n  .reply(200)\n  .post(/.*/)\n  .reply(200)\nI added persist since the issue asking for all requests could mean the same request being called more than once. \nIf this adds any additional value to the docs than the documentation on chaining I'd be happy to make a PR.. Glad to hear it worked out in the end, no matter the package. :). What is the status on removing Node 4? Is there something still needed to be fixed before the merge?\nOn a sidenote - Once Node 4 is dropped I'd like to do some refactoring. Would something like that need its own issue or would you just recommend a pr with points on why and how the refactor was made?. Hi Miguel. I've been trying to replicate your error and I think I've found your problem.\n\nThe host you are mocking from the nock function doesn't match the host you are actually sending a post request to.\nThe request function has 'https' set as default so it shouldn't be specified in the host property.\nThe following properties had to be set: method: 'post' and path: '/' in order to have an exact match.\n\nAfter these points I was able to mock the request with your code\nI hope this helps.. What types of templates should exist and what kind of information should they cover?. Sounds like a very good start. \nI'd like to help out any way I can, so you can invite me and I'll start working on it right away. \ud83d\udc4d . From what I can see instanbul and glob is nowhere to be found (except from package.json).\nI noticed however that we're using request and request-promise. Maybe another issue could created for converting from request to request promise in the future?\nI'll submit a pr shortly with removed devdep.. Currently away on vacation - but I'll update this one shortly once I'm back. :). Back again! I think I covered all of the comments you made. If you feel that I should rewrite sentences or paragraphs, let me know. I'm up for getting this perfect! :). Haha, no worries!\nThanks for mentioning that file. I had not seen that one until now.. I just noticed that they weren't working as well. Could it also be the naming convention - such as it can't start with a number?\nI can't submit issues in my own fork or access the github editor (I think that requires a higher permission level in the org) - So it's difficult to troubleshoot without merging new fixes. \nI hope this works!. My spelling is terrible! Haha.\nI like the changes, and the new emojis are better. \ud83d\udc4d . I like this idea. If the time isn't far into the night (time zone differences) I'd like to join. \ud83d\udc4d\nDid you have any specific topics in mind?. That works for me as well. :). Hi! I'm halfway through a move at the moment so there isn't much work that I can do. I could be in on a meeting though. Let me know when you guys have time and I'll try to make some room :). The 26th would be the best one for me, at 4 pm london time (5 pm CEST).. @gr2m Do we have a meeting room? I'm ready now.. Yes, let's! Have a nice weekend :). Yeah the time differences are a bit of an issue. If you'd like, you can still have the meetings without me - I wouldn't mind.\nAs an update; I'm going to be more available soon, which means I'm gonna spend more time on Nock again. Like we talked about from the last meeting - there are still things that need to be done. :). Terribly sorry, I've been away for holidays! If you haven't already taken over this PR, I will fix this today. @paulmelnikow have you started working on this?. Sweet! Been using prettier since before, so no problem. Will the beta branch be a big merge with all of the tests updated? Or is this a branch that'll stay for future changes as well?. I've made a fix for my code to do the check you asked about. However I couldn't make it work with the request package. I instead tried to do the same logic however with axios - and with axios it works just as I want.\nNow this probably raises another question as to why axios works and request fails.\nDepending on what you think I can probably merge it into beta or I'll go back to try and troubleshoot why it isn't working with request.. I just saw that you're converting to the got package in other commits. If I switch from axios to got (and fix that linting travis notices), are we good? :). I've been applying linting fixes from the rules in the beta branch but it seems to still be complaining about my code in Travis, however not locally. Could someone have a look?. I'm still a bit confused if I've merged/rebased correctly. Let me know if I can do anything differently from here on.. This is so exciting! This should be posted in #1268 :smile: . Yeah thank you Paul! :)\nWhile on the topic of code coverage. Would you say that ~ 80% would be enough? And that 80% would then cover the most essential pieces of code. I know that there is quite the debate on how much you must cover but I just want to know your thoughts :). I can agree that tap is at times strange to work with. Before this I'd never heard of tap before.\nI've only worked with projects where we've migrated from mocha so I don't really have an opinion on if I like mocha or not, but I found it much more readable than comparing to tap.\nJest is where I'm at usually, but if there are issues like @paulmelnikow mentions that could be a blocker somewhere along the way then I'm ok with looking for another test runner that's right for the job.. Mind if I take this? Seeing as its marked as a first time issue, should I let someone else take it? :). Alright. I think I got most of these done. Some of the tests make assertions based on actually getting through - like enable net connect and allowUnmocked options.\nHow about setting google.com for those requests that actually have to go through, and a.google.com for subdomain checks?. Oh right. Yeah I'll add TODOs and make an PR out of it.. Hi, yes of course. I'm working on it right now.\nI'll push the changing of names soon, then another PR for converting the other ones needing its own server.. Lihail: this is because of compability issues with prettier. Toc-me removes the line while prettier wants the line added. Correct me if I\u2019m wrong, but the way our linting is set up we want a newline at the end of every file.. I've actually got another hackathon planned for that entire weekend. But I've planned to do some work this weekend on Nock, in case anyone wants to have a zoom chat. \ud83d\ude03. Sounds good to me! That'd be 19:00 CET for me, if I've got it right this time \ud83d\ude04 . So many time zones, hah. I haven't even gone for the day at my workplace yet. :)\nThat'd be 20:30 for me if I've counted right - works for me.. Yes exactly. I just reverted on the those tests to start working again in my latest commit.. The bug report has a versions heading where you can list your versions of Node and Nock. I agree that this can be to much. I'll remove this one. :). Hi! I've updated the docs. Let me know if I missed anything on this file.. Sure!\nAlso, care to guess the expected behavior when function returns false in the query function? Just so I don't misinterpret the results I'm getting. . Yeah. Once this test is fixed I'll work on it. :). That is probably better. Didn't think of the error handling while in a test.. Didn't know that. I'll fix it.. This i so confusing. While trying to change, the test appears to be working without the tls boolean. Could have been fixed I set the port explicitly to 3000 instead of letting https.createServer assign a random port. I'll push and see what Travis says as well.. No. Stupid me. Was changing in the wrong repo and branch.... What is iriscouch? The subdomain and iriscouch doesn't resolve to anything for me. Perhaps we should change that to something more common/relateable?. Same thing for headdy.com, is it something related to Nock?. Guessing this is just playing with words here, but we should change it to .com instead. :). I think we should throw an error. It's a pretty vital piece of information and to assume get doesn't feel right.. Thanks for the fun fact :smile: api.github.com sounds perfect. ",
    "hisabimbola": "Hey @gr2m \nI think this should look good now. I also added test, please review.. Let me know if any changes are needed aside resolving the conflict. yeah @gr2m updated the PR. AFAIK the body is usually a string at the stage. The request library and most http library, stringify the body before sending and then some turn it to buffer.. Hi @gr2m ,\nI am sorry for the silence.\n\nAlso I think I\u2019d move the regex check below\n\nYes, I think it'd make more sense.\nI will modify and see if the tests passes. ",
    "mralanlee": "@gr2m thanks! I figured out the the error, fat finger on my part :). ",
    "greenkeeper[bot]": "After pinning to 2.83.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 2.85.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\n21ef363 Update changelog\n5dad86e 2.85.0\n5ba8eb4 Revert \"Update hawk to 7.0.7 (#2880)\"\nb191514 2.84.1\n\nSee the full diff\n\n. After pinning to 2.2.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 2.2.2 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\n9374dcc 2.2.2\nadff149 Add EAI_AGAIN to possible error codes for invalid URLs in tests\n919e851 Merge pull request #222 from garronej/master\n6ea53da Merge pull request #250 from goloroden/patch-1\n9bfdba3 Improve sample to clarify how to send JSON data.\n6959db6 Swap 'const' to 'var's\n1406b42 Add localAddress to options so it's posible to make request from specific interface\n\nSee the full diff\n\n. After pinning to 11.1.4 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 11.7.1 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 15.4.2 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 15.4.4 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv15.4.4\n\n15.4.4 (2018-05-21)\nBug Fixes\n\npackage: update marked-terminal to version 3.0.0 (cd8ff5d)\n\n\n\nCommits\nThe new version differs by 1 commits.\n\ncd8ff5d fix(package): update marked-terminal to version 3.0.0\n\nSee the full diff\n\n. ## Version 15.5.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv15.5.0\n\n15.5.0 (2018-05-21)\nFeatures\n\nadd support for git version 2.0.0 (47c73eb)\nverify minimum required git version is installed (db1cc60)\n\n\n\nCommits\nThe new version differs by 3 commits.\n\ndb1cc60 feat: verify minimum required git version is installed\n47c73eb feat: add support for git version 2.0.0\ncd8ff5d fix(package): update marked-terminal to version 3.0.0\n\nSee the full diff\n\n. After pinning to 2.249.1 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 2.251.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.251.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\na5e750c Updates SDK to v2.251.1\n\nSee the full diff\n\n. ## Version 2.252.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.252.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 2 commits.\n\n8503bf7 Updates SDK to v2.252.1\na5e750c Updates SDK to v2.251.1\n\nSee the full diff\n\n. ## Version 2.253.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.253.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 3 commits.\n\n681936f Updates SDK to v2.253.1\n8503bf7 Updates SDK to v2.252.1\na5e750c Updates SDK to v2.251.1\n\nSee the full diff\n\n. ## Version 2.254.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.254.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 4 commits.\n\n0a7112b Updates SDK to v2.254.1\n681936f Updates SDK to v2.253.1\n8503bf7 Updates SDK to v2.252.1\na5e750c Updates SDK to v2.251.1\n\nSee the full diff\n\n. ## Version 2.255.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.255.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 5 commits.\n\n0fba618 Updates SDK to v2.255.1\n0a7112b Updates SDK to v2.254.1\n681936f Updates SDK to v2.253.1\n8503bf7 Updates SDK to v2.252.1\na5e750c Updates SDK to v2.251.1\n\nSee the full diff\n\n. ## Version 2.256.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.256.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 19 commits.\n\n3cedc60 Updates SDK to v2.256.1\nf14bcd6 Adds changelog entry for S3 Select\n9c15bf9 Removes extraneous class from doc plugin\n71b241e Adds documentation of operations with event stream output\n2641840 Adds types for eventstream shapes\nbb76d65 Ensure Buffer module from environment loaders is used.\n0636e2f Reverts S3 models and updates translator to no longer remove operations due to having event stream output shapes\n50e18b2 Add test/event-stream to coverage task\n32d5ba1 Attempt to improve code coverage reporting\n76d3fa9 Fixes Error parsing when event stream operations throw an error in node.js\n850f97b Adds createEventStream and support for event stream responses\n135d632 Restricts event-message-chunker-stream tests to node 0.10 and higher\ne0cc03b Adds implementations for splitting an event stream payload into individual event messages\n5c2ed18 Adds event stream message parsing (#2054)\n0fba618 Updates SDK to v2.255.1\n\nThere are 19 commits in total.\nSee the full diff\n\n. ## Version 2.257.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.257.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 20 commits.\n\n8f8d1cc Updates SDK to v2.257.1\n3cedc60 Updates SDK to v2.256.1\nf14bcd6 Adds changelog entry for S3 Select\n9c15bf9 Removes extraneous class from doc plugin\n71b241e Adds documentation of operations with event stream output\n2641840 Adds types for eventstream shapes\nbb76d65 Ensure Buffer module from environment loaders is used.\n0636e2f Reverts S3 models and updates translator to no longer remove operations due to having event stream output shapes\n50e18b2 Add test/event-stream to coverage task\n32d5ba1 Attempt to improve code coverage reporting\n76d3fa9 Fixes Error parsing when event stream operations throw an error in node.js\n850f97b Adds createEventStream and support for event stream responses\n135d632 Restricts event-message-chunker-stream tests to node 0.10 and higher\ne0cc03b Adds implementations for splitting an event stream payload into individual event messages\n5c2ed18 Adds event stream message parsing (#2054)\n\nThere are 20 commits in total.\nSee the full diff\n\n. ## Version 2.259.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.259.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 25 commits.\n\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\nba0e574 Fixes edge case where event messages had incorrect length calculated\nbaff9c7 Updates SDK to v2.258.1\n472c251 Updates SDK to always attempt to set the content-length of a request, but not fail if an operation has the unsigned-body trait\n8f8d1cc Updates SDK to v2.257.1\n3cedc60 Updates SDK to v2.256.1\nf14bcd6 Adds changelog entry for S3 Select\n9c15bf9 Removes extraneous class from doc plugin\n71b241e Adds documentation of operations with event stream output\n2641840 Adds types for eventstream shapes\nbb76d65 Ensure Buffer module from environment loaders is used.\n0636e2f Reverts S3 models and updates translator to no longer remove operations due to having event stream output shapes\n50e18b2 Add test/event-stream to coverage task\n32d5ba1 Attempt to improve code coverage reporting\n\nThere are 25 commits in total.\nSee the full diff\n\n. ## Version 2.260.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.260.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 28 commits.\n\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\nba0e574 Fixes edge case where event messages had incorrect length calculated\nbaff9c7 Updates SDK to v2.258.1\n472c251 Updates SDK to always attempt to set the content-length of a request, but not fail if an operation has the unsigned-body trait\n8f8d1cc Updates SDK to v2.257.1\n3cedc60 Updates SDK to v2.256.1\nf14bcd6 Adds changelog entry for S3 Select\n9c15bf9 Removes extraneous class from doc plugin\n71b241e Adds documentation of operations with event stream output\n2641840 Adds types for eventstream shapes\nbb76d65 Ensure Buffer module from environment loaders is used.\n\nThere are 28 commits in total.\nSee the full diff\n\n. ## Version 2.261.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.261.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 29 commits.\n\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\nba0e574 Fixes edge case where event messages had incorrect length calculated\nbaff9c7 Updates SDK to v2.258.1\n472c251 Updates SDK to always attempt to set the content-length of a request, but not fail if an operation has the unsigned-body trait\n8f8d1cc Updates SDK to v2.257.1\n3cedc60 Updates SDK to v2.256.1\nf14bcd6 Adds changelog entry for S3 Select\n9c15bf9 Removes extraneous class from doc plugin\n71b241e Adds documentation of operations with event stream output\n2641840 Adds types for eventstream shapes\n\nThere are 29 commits in total.\nSee the full diff\n\n. ## Version 2.262.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.262.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 30 commits.\n\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\nba0e574 Fixes edge case where event messages had incorrect length calculated\nbaff9c7 Updates SDK to v2.258.1\n472c251 Updates SDK to always attempt to set the content-length of a request, but not fail if an operation has the unsigned-body trait\n8f8d1cc Updates SDK to v2.257.1\n3cedc60 Updates SDK to v2.256.1\nf14bcd6 Adds changelog entry for S3 Select\n9c15bf9 Removes extraneous class from doc plugin\n71b241e Adds documentation of operations with event stream output\n\nThere are 30 commits in total.\nSee the full diff\n\n. ## Version 2.263.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.263.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 31 commits.\n\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\nba0e574 Fixes edge case where event messages had incorrect length calculated\nbaff9c7 Updates SDK to v2.258.1\n472c251 Updates SDK to always attempt to set the content-length of a request, but not fail if an operation has the unsigned-body trait\n8f8d1cc Updates SDK to v2.257.1\n3cedc60 Updates SDK to v2.256.1\nf14bcd6 Adds changelog entry for S3 Select\n9c15bf9 Removes extraneous class from doc plugin\n\nThere are 31 commits in total.\nSee the full diff\n\n. ## Version 2.264.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.264.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 32 commits.\n\n046a1ad Updates SDK to v2.264.1\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\nba0e574 Fixes edge case where event messages had incorrect length calculated\nbaff9c7 Updates SDK to v2.258.1\n472c251 Updates SDK to always attempt to set the content-length of a request, but not fail if an operation has the unsigned-body trait\n8f8d1cc Updates SDK to v2.257.1\n3cedc60 Updates SDK to v2.256.1\nf14bcd6 Adds changelog entry for S3 Select\n\nThere are 32 commits in total.\nSee the full diff\n\n. ## Version 2.265.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.265.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 33 commits.\n\ne5e5b28 Updates SDK to v2.265.1\n046a1ad Updates SDK to v2.264.1\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\nba0e574 Fixes edge case where event messages had incorrect length calculated\nbaff9c7 Updates SDK to v2.258.1\n472c251 Updates SDK to always attempt to set the content-length of a request, but not fail if an operation has the unsigned-body trait\n8f8d1cc Updates SDK to v2.257.1\n3cedc60 Updates SDK to v2.256.1\n\nThere are 33 commits in total.\nSee the full diff\n\n. ## Version 2.266.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.266.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 36 commits.\n\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\ne5e5b28 Updates SDK to v2.265.1\n046a1ad Updates SDK to v2.264.1\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\nba0e574 Fixes edge case where event messages had incorrect length calculated\nbaff9c7 Updates SDK to v2.258.1\n\nThere are 36 commits in total.\nSee the full diff\n\n. ## Version 2.267.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.267.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 38 commits.\n\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\ne5e5b28 Updates SDK to v2.265.1\n046a1ad Updates SDK to v2.264.1\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n68649a5 Throws error on truncated event messages and forwards error from upstream streams to destination event stream\n\nThere are 38 commits in total.\nSee the full diff\n\n. ## Version 2.268.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.268.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 39 commits.\n\nf5a9d42 Updates SDK to v2.268.1\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\ne5e5b28 Updates SDK to v2.265.1\n046a1ad Updates SDK to v2.264.1\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n0897772 Updates SDK documentation\ne4d5b88 Fixes missing Buffer in event stream in react native\n81babe8 Updates SDK to v2.259.1\n\nThere are 39 commits in total.\nSee the full diff\n\n. ## Version 2.269.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.269.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 42 commits.\n\na56b2c0 Updates SDK to v2.269.1\ne265dc3 Updates CORS entry for SecretsManager service\na6b3ff2 Fixes browser XML parsing issue when encountering descendants with the same tag name\nf5a9d42 Updates SDK to v2.268.1\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\ne5e5b28 Updates SDK to v2.265.1\n046a1ad Updates SDK to v2.264.1\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n001a9b6 Updates SDK to v2.260.1\n\nThere are 42 commits in total.\nSee the full diff\n\n. ## Version 2.270.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.270.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 43 commits.\n\n5111e76 Updates SDK to v2.270.1\na56b2c0 Updates SDK to v2.269.1\ne265dc3 Updates CORS entry for SecretsManager service\na6b3ff2 Fixes browser XML parsing issue when encountering descendants with the same tag name\nf5a9d42 Updates SDK to v2.268.1\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\ne5e5b28 Updates SDK to v2.265.1\n046a1ad Updates SDK to v2.264.1\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n8f886b7 Updates SDK to v2.261.1\n\nThere are 43 commits in total.\nSee the full diff\n\n. ## Version 2.271.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.271.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 44 commits.\n\nbf40be4 Updates SDK to v2.271.1\n5111e76 Updates SDK to v2.270.1\na56b2c0 Updates SDK to v2.269.1\ne265dc3 Updates CORS entry for SecretsManager service\na6b3ff2 Fixes browser XML parsing issue when encountering descendants with the same tag name\nf5a9d42 Updates SDK to v2.268.1\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\ne5e5b28 Updates SDK to v2.265.1\n046a1ad Updates SDK to v2.264.1\ncc29728 Updates SDK to v2.263.1\n0f277a1 Updates SDK to v2.262.1\n\nThere are 44 commits in total.\nSee the full diff\n\n. ## Version 2.272.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.272.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 46 commits.\n\na1eb75e Updates SDK to v2.272.1\ncde7065 Updates SDK documentation\nbf40be4 Updates SDK to v2.271.1\n5111e76 Updates SDK to v2.270.1\na56b2c0 Updates SDK to v2.269.1\ne265dc3 Updates CORS entry for SecretsManager service\na6b3ff2 Fixes browser XML parsing issue when encountering descendants with the same tag name\nf5a9d42 Updates SDK to v2.268.1\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\ne5e5b28 Updates SDK to v2.265.1\n046a1ad Updates SDK to v2.264.1\n\nThere are 46 commits in total.\nSee the full diff\n\n. ## Version 2.273.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.273.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 47 commits.\n\n33ba643 Updates SDK to v2.273.1\na1eb75e Updates SDK to v2.272.1\ncde7065 Updates SDK documentation\nbf40be4 Updates SDK to v2.271.1\n5111e76 Updates SDK to v2.270.1\na56b2c0 Updates SDK to v2.269.1\ne265dc3 Updates CORS entry for SecretsManager service\na6b3ff2 Fixes browser XML parsing issue when encountering descendants with the same tag name\nf5a9d42 Updates SDK to v2.268.1\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\ne5e5b28 Updates SDK to v2.265.1\n\nThere are 47 commits in total.\nSee the full diff\n\n. ## Version 2.274.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.274.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 48 commits.\n\n279db76 Updates SDK to v2.274.1\n33ba643 Updates SDK to v2.273.1\na1eb75e Updates SDK to v2.272.1\ncde7065 Updates SDK documentation\nbf40be4 Updates SDK to v2.271.1\n5111e76 Updates SDK to v2.270.1\na56b2c0 Updates SDK to v2.269.1\ne265dc3 Updates CORS entry for SecretsManager service\na6b3ff2 Fixes browser XML parsing issue when encountering descendants with the same tag name\nf5a9d42 Updates SDK to v2.268.1\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n973df41 Sorts react-native tests\nf3b9f62 Sorts browser tests for browserify\n\nThere are 48 commits in total.\nSee the full diff\n\n. ## Version 2.275.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.275.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 50 commits.\n\nd6573a8 Updates SDK to v2.275.1\n6182467 Updates xml2js to 0.4.19\n279db76 Updates SDK to v2.274.1\n33ba643 Updates SDK to v2.273.1\na1eb75e Updates SDK to v2.272.1\ncde7065 Updates SDK documentation\nbf40be4 Updates SDK to v2.271.1\n5111e76 Updates SDK to v2.270.1\na56b2c0 Updates SDK to v2.269.1\ne265dc3 Updates CORS entry for SecretsManager service\na6b3ff2 Fixes browser XML parsing issue when encountering descendants with the same tag name\nf5a9d42 Updates SDK to v2.268.1\nb8a4ee7 Updates SDK to v2.267.1\nbd6d814 Updates SDK documentation\n5e3d129 Updates SDK to v2.266.1\n\nThere are 50 commits in total.\nSee the full diff\n\n. ## Version 2.276.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.276.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 63 commits.\n\n31cc500 Updates SDK to v2.276.1\n4869c87 Add test for tokenCodeFn only being called once, cleanup other mock data\n5170c4c Move assertion into callback to avoid done being called first\nef7804d Remove noop function\n8b9d7b1 tokenCodeFn use Error instead of string\n98e5408 Make callback parameters optional\n547a0ce Remove unused vars\nb9d56d6 Correct error message\n083898b Add additional test cases\nc032ef4 Support shared ini file mfa_serial with fn to fetch token code\n7084b76 Fixes AWS.EventListeners typings\n3601f8b Fixes TypeScript definitions for service-specific waitFor methods.\nd091270 add cors config for KinesisVideoArchivedMedia (#2140)\nd6573a8 Updates SDK to v2.275.1\n6182467 Updates xml2js to 0.4.19\n\nThere are 63 commits in total.\nSee the full diff\n\n. ## Version 2.277.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 65 commits.\n\n75978fc Updates SDK to v2.277.1\n6a220a5 add service id to all service models (#2144)\n31cc500 Updates SDK to v2.276.1\n4869c87 Add test for tokenCodeFn only being called once, cleanup other mock data\n5170c4c Move assertion into callback to avoid done being called first\nef7804d Remove noop function\n8b9d7b1 tokenCodeFn use Error instead of string\n98e5408 Make callback parameters optional\n547a0ce Remove unused vars\nb9d56d6 Correct error message\n083898b Add additional test cases\nc032ef4 Support shared ini file mfa_serial with fn to fetch token code\n7084b76 Fixes AWS.EventListeners typings\n3601f8b Fixes TypeScript definitions for service-specific waitFor methods.\nd091270 add cors config for KinesisVideoArchivedMedia (#2140)\n\nThere are 65 commits in total.\nSee the full diff\n\n. ## Version 2.278.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.278.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 66 commits.\n\n1921d7e Updates SDK to v2.278.1\n75978fc Updates SDK to v2.277.1\n6a220a5 add service id to all service models (#2144)\n31cc500 Updates SDK to v2.276.1\n4869c87 Add test for tokenCodeFn only being called once, cleanup other mock data\n5170c4c Move assertion into callback to avoid done being called first\nef7804d Remove noop function\n8b9d7b1 tokenCodeFn use Error instead of string\n98e5408 Make callback parameters optional\n547a0ce Remove unused vars\nb9d56d6 Correct error message\n083898b Add additional test cases\nc032ef4 Support shared ini file mfa_serial with fn to fetch token code\n7084b76 Fixes AWS.EventListeners typings\n3601f8b Fixes TypeScript definitions for service-specific waitFor methods.\n\nThere are 66 commits in total.\nSee the full diff\n\n. ## Version 2.279.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.279.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 67 commits.\n\nf16d340 Updates SDK to v2.279.1\n1921d7e Updates SDK to v2.278.1\n75978fc Updates SDK to v2.277.1\n6a220a5 add service id to all service models (#2144)\n31cc500 Updates SDK to v2.276.1\n4869c87 Add test for tokenCodeFn only being called once, cleanup other mock data\n5170c4c Move assertion into callback to avoid done being called first\nef7804d Remove noop function\n8b9d7b1 tokenCodeFn use Error instead of string\n98e5408 Make callback parameters optional\n547a0ce Remove unused vars\nb9d56d6 Correct error message\n083898b Add additional test cases\nc032ef4 Support shared ini file mfa_serial with fn to fetch token code\n7084b76 Fixes AWS.EventListeners typings\n\nThere are 67 commits in total.\nSee the full diff\n\n. ## Version 2.280.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.280.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 70 commits.\n\nad7168e Updates SDK to v2.280.1\ndf3edc6 Update timestamp serializing (#2148)\n316d6b0 make Translate service available in browser version of SDK by default (#2155)\nf16d340 Updates SDK to v2.279.1\n1921d7e Updates SDK to v2.278.1\n75978fc Updates SDK to v2.277.1\n6a220a5 add service id to all service models (#2144)\n31cc500 Updates SDK to v2.276.1\n4869c87 Add test for tokenCodeFn only being called once, cleanup other mock data\n5170c4c Move assertion into callback to avoid done being called first\nef7804d Remove noop function\n8b9d7b1 tokenCodeFn use Error instead of string\n98e5408 Make callback parameters optional\n547a0ce Remove unused vars\nb9d56d6 Correct error message\n\nThere are 70 commits in total.\nSee the full diff\n\n. ## Version 2.281.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.281.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 71 commits.\n\n06daf85 Updates SDK to v2.281.1\nad7168e Updates SDK to v2.280.1\ndf3edc6 Update timestamp serializing (#2148)\n316d6b0 make Translate service available in browser version of SDK by default (#2155)\nf16d340 Updates SDK to v2.279.1\n1921d7e Updates SDK to v2.278.1\n75978fc Updates SDK to v2.277.1\n6a220a5 add service id to all service models (#2144)\n31cc500 Updates SDK to v2.276.1\n4869c87 Add test for tokenCodeFn only being called once, cleanup other mock data\n5170c4c Move assertion into callback to avoid done being called first\nef7804d Remove noop function\n8b9d7b1 tokenCodeFn use Error instead of string\n98e5408 Make callback parameters optional\n547a0ce Remove unused vars\n\nThere are 71 commits in total.\nSee the full diff\n\n. ## Version 2.282.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.282.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 72 commits.\n\nbb421b7 Updates SDK to v2.282.1\n06daf85 Updates SDK to v2.281.1\nad7168e Updates SDK to v2.280.1\ndf3edc6 Update timestamp serializing (#2148)\n316d6b0 make Translate service available in browser version of SDK by default (#2155)\nf16d340 Updates SDK to v2.279.1\n1921d7e Updates SDK to v2.278.1\n75978fc Updates SDK to v2.277.1\n6a220a5 add service id to all service models (#2144)\n31cc500 Updates SDK to v2.276.1\n4869c87 Add test for tokenCodeFn only being called once, cleanup other mock data\n5170c4c Move assertion into callback to avoid done being called first\nef7804d Remove noop function\n8b9d7b1 tokenCodeFn use Error instead of string\n98e5408 Make callback parameters optional\n\nThere are 72 commits in total.\nSee the full diff\n\n. ## Version 2.283.1 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.283.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 73 commits.\n\n5b8d5c3 Updates SDK to v2.283.1\nbb421b7 Updates SDK to v2.282.1\n06daf85 Updates SDK to v2.281.1\nad7168e Updates SDK to v2.280.1\ndf3edc6 Update timestamp serializing (#2148)\n316d6b0 make Translate service available in browser version of SDK by default (#2155)\nf16d340 Updates SDK to v2.279.1\n1921d7e Updates SDK to v2.278.1\n75978fc Updates SDK to v2.277.1\n6a220a5 add service id to all service models (#2144)\n31cc500 Updates SDK to v2.276.1\n4869c87 Add test for tokenCodeFn only being called once, cleanup other mock data\n5170c4c Move assertion into callback to avoid done being called first\nef7804d Remove noop function\n8b9d7b1 tokenCodeFn use Error instead of string\n\nThere are 73 commits in total.\nSee the full diff\n\n. ## Version 2.284.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.284.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 2 commits.\n\nebf03c7 Updates SDK to v2.284.1\n6d925c5 Adapt README for TypeScript (#2097)\n\nSee the full diff\n\n. ## Version 2.285.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.285.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 3 commits.\n\nbf70ef9 Updates SDK to v2.285.1\nebf03c7 Updates SDK to v2.284.1\n6d925c5 Adapt README for TypeScript (#2097)\n\nSee the full diff\n\n. ## Version 2.286.1 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.286.1\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 5 commits.\n\nd626206 Updates SDK to v2.286.1\nebe8392 Fixes issue with promises when using react native 0.56.0.\nbf70ef9 Updates SDK to v2.285.1\nebf03c7 Updates SDK to v2.284.1\n6d925c5 Adapt README for TypeScript (#2097)\n\nSee the full diff\n\n. ## Version 2.286.2 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.286.2\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 2 commits.\n\n5aa0d4d Updates SDK to v2.286.2\n036f16e remove undefined exceptions in kinesis definition (#2174)\n\nSee the full diff\n\n. ## Version 2.287.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.287.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 6 commits.\n\n67081dc Updates SDK to v2.287.0\n89a0f70 Updates SDK documentation\na0610b6 Remove dead code\n192c1fe Adds typings-generator test to travis\n9f90fde Adds typings-generator test script to package.json\n146ea54 Updates typings-generator to prune unused types\n\nSee the full diff\n\n. ## Version 2.288.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.288.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\nc208c65 Updates SDK to v2.288.0\n\nSee the full diff\n\n. ## Version 2.289.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.289.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 2 commits.\n\n240bf4d Updates SDK to v2.289.0\nc208c65 Updates SDK to v2.288.0\n\nSee the full diff\n\n. ## Version 2.290.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.290.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 3 commits.\n\n0e4934a Updates SDK to v2.290.0\n240bf4d Updates SDK to v2.289.0\nc208c65 Updates SDK to v2.288.0\n\nSee the full diff\n\n. ## Version 2.291.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.291.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 5 commits.\n\nc323426 Updates SDK to v2.291.0\n2542ce9 Feature/master test (#2189)\n0e4934a Updates SDK to v2.290.0\n240bf4d Updates SDK to v2.289.0\nc208c65 Updates SDK to v2.288.0\n\nSee the full diff\n\n. ## Version 2.292.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.292.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\n11da426 Updates SDK to v2.292.0\n\nSee the full diff\n\n. ## Version 2.293.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.293.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 3 commits.\n\nf7728f4 Updates SDK to v2.293.0\nd3c7507 remove integration test from composite test (#2191)\n11da426 Updates SDK to v2.292.0\n\nSee the full diff\n\n. ## Version 2.294.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.294.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 4 commits.\n\n462e8d5 Updates SDK to v2.294.0\nf7728f4 Updates SDK to v2.293.0\nd3c7507 remove integration test from composite test (#2191)\n11da426 Updates SDK to v2.292.0\n\nSee the full diff\n\n. ## Version 2.295.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.295.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 5 commits.\n\n7924728 Updates SDK to v2.295.0\n462e8d5 Updates SDK to v2.294.0\nf7728f4 Updates SDK to v2.293.0\nd3c7507 remove integration test from composite test (#2191)\n11da426 Updates SDK to v2.292.0\n\nSee the full diff\n\n. ## Version 2.296.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.296.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 6 commits.\n\nb0739d8 Updates SDK to v2.296.0\n7924728 Updates SDK to v2.295.0\n462e8d5 Updates SDK to v2.294.0\nf7728f4 Updates SDK to v2.293.0\nd3c7507 remove integration test from composite test (#2191)\n11da426 Updates SDK to v2.292.0\n\nSee the full diff\n\n. ## Version 2.297.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.297.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 5 commits.\n\nbbbbf8e Updates SDK to v2.297.0\ndae2816 Adds check to removeVirtualHostedBucket to prevent truncating key from the URI\n982f64e Adds changelog entry\n997157e Fixes issue where making cross-region S3 calls where the object key is truncated if the key prefix matched the bucket name and path style addressing is not used.\n9ac1b23 Adds tests for S3 putObject cross-region behavior\n\nSee the full diff\n\n. ## Version 2.299.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.299.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 5 commits.\n\n8c3043b Updates SDK to v2.299.0\n909566d Adds node 9 and 10 to travis jobs\n0dc27cd Fixes unit tests that use domains so that they work in newer versions of node.js\n303da61 Updates JS doc tracking\n4cf44bb Updates SDK to v2.298.0\n\nSee the full diff\n\n. ## Version 2.300.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.300.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\n53916e8 Updates SDK to v2.300.0\n\nSee the full diff\n\n. ## Version 2.301.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.301.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.302.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.302.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 2 commits.\n\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.303.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.303.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 3 commits.\n\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.304.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.304.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 4 commits.\n\n19a944b Updates SDK to v2.304.0\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.305.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.305.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 7 commits.\n\n3fc6181 Updates SDK to v2.305.0\nfe88308 Client side monitoring (#2142)\n71997c9 add CORS support for Pricing (#2225)\n19a944b Updates SDK to v2.304.0\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.306.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.306.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 8 commits.\n\n7701452 Updates SDK to v2.306.0\n3fc6181 Updates SDK to v2.305.0\nfe88308 Client side monitoring (#2142)\n71997c9 add CORS support for Pricing (#2225)\n19a944b Updates SDK to v2.304.0\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.307.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.307.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 9 commits.\n\n85f776a Updates SDK to v2.307.0\n7701452 Updates SDK to v2.306.0\n3fc6181 Updates SDK to v2.305.0\nfe88308 Client side monitoring (#2142)\n71997c9 add CORS support for Pricing (#2225)\n19a944b Updates SDK to v2.304.0\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.308.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.308.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 10 commits.\n\n33a0cd1 Updates SDK to v2.308.0\n85f776a Updates SDK to v2.307.0\n7701452 Updates SDK to v2.306.0\n3fc6181 Updates SDK to v2.305.0\nfe88308 Client side monitoring (#2142)\n71997c9 add CORS support for Pricing (#2225)\n19a944b Updates SDK to v2.304.0\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.309.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.309.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 11 commits.\n\ne0ffda5 Updates SDK to v2.309.0\n33a0cd1 Updates SDK to v2.308.0\n85f776a Updates SDK to v2.307.0\n7701452 Updates SDK to v2.306.0\n3fc6181 Updates SDK to v2.305.0\nfe88308 Client side monitoring (#2142)\n71997c9 add CORS support for Pricing (#2225)\n19a944b Updates SDK to v2.304.0\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.310.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nRelease v2.310.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 12 commits.\n\n0b5e95c Updates SDK to v2.310.0\ne0ffda5 Updates SDK to v2.309.0\n33a0cd1 Updates SDK to v2.308.0\n85f776a Updates SDK to v2.307.0\n7701452 Updates SDK to v2.306.0\n3fc6181 Updates SDK to v2.305.0\nfe88308 Client side monitoring (#2142)\n71997c9 add CORS support for Pricing (#2225)\n19a944b Updates SDK to v2.304.0\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.311.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.311.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 13 commits.\n\ncf6b9a0 Updates SDK to v2.311.0\n0b5e95c Updates SDK to v2.310.0\ne0ffda5 Updates SDK to v2.309.0\n33a0cd1 Updates SDK to v2.308.0\n85f776a Updates SDK to v2.307.0\n7701452 Updates SDK to v2.306.0\n3fc6181 Updates SDK to v2.305.0\nfe88308 Client side monitoring (#2142)\n71997c9 add CORS support for Pricing (#2225)\n19a944b Updates SDK to v2.304.0\n7a4e198 Updates SDK to v2.303.0\n6777045 Updates SDK to v2.302.0\nf8d1a11 Updates SDK to v2.301.0\n\nSee the full diff\n\n. ## Version 2.312.0 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nRelease v2.312.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 6 commits.\n\n4ed5104 Updates SDK to v2.312.0\n3839328 Create no-response.yml\n59f1eb0 remove stalebot\n23701ac enable stale bot\nf5a3482 update typings for credentialsProviderChain & httpOptions (#2240)\n167bc31 retry request for Batch TooManyRequestsException (#2246)\n\nSee the full diff\n\n. After pinning to 2.0.3 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 2.2.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits ahead by 3, behind by 2.\n\n04652aa chore(pacakge): bump version to 2.2.0\nc525407 add metrics event (#178)\nbbd3593 new: emit timings object from the client (#176)\n\nSee the full diff\n\n. After pinning to 15.9.4 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 2.87.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 15.9.6 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 15.9.8 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv15.9.8\n15.9.8 (2018-08-10)\nBug Fixes\n\npackage: update get-stream to version 4.0.0 (e882096)\n\n\n\nCommits\nThe new version differs by 1 commits.\n\ne882096 fix(package): update get-stream to version 4.0.0\n\nSee the full diff\n\n. After pinning to 15.9.8 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 2.5.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 2.5.2 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n7cd5983 2.5.2\na90a660 fix: callback getting invoked more than once causing throw (#187)\nb1890ca docs: add release cutting instructions (#186)\n\nSee the full diff\n\n. After pinning to 15.9.13 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 3.2.1 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\n3.2.1\nA quick hotfix to address Browser builds - debug is now compiled down to IE8-compatible code via Babel upon release.\nCDNs that honor the \"browser\": key in package.json should now reflect these changes (previously, they would serve the non-bundled ES6 version).\nPatches\n\nuse babel-ified distributed source for browsers: b3f8f8e\n\n\n\nCommits\nThe new version differs by 2 commits.\n\n84e41d5 3.2.1\nb3f8f8e use babel-ified distributed source for browsers\n\nSee the full diff\n\n. After pinning to 3.1.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 3.2.2 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nCommits\nThe new version differs by 1 commits.\n\n622e579 3.2.2\n\nSee the full diff\n\n. ## Version 3.2.3 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nCommits\nThe new version differs by 1 commits.\n\n700a010 re-introduce node.js (root file) (ref #603)\n\nSee the full diff\n\n. ## Version 4.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n4.0.1\nThis patch restores browserify functionality as well as keeping the intended functionality with Unpkg.com.\nPatches\n\nfix browserify and supply alternative unpkg entry point (closes #606): 99c95e3\n\n\n\nCommits\nThe new version differs by 2 commits.\n\n4490cd9 4.0.1\n99c95e3 fix browserify and supply alternative unpkg entry point (closes #606)\n\nSee the full diff\n\n. - The dependency debug was updated from 3.2.5 to 4.1.0.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for 4.1.0\nMinor Changes\n\nmigrate Makefile to npm scripts (4236585)\nfeat: Return namespaces string when invoking disable() (7ef8b41)\n\nMassive thank you to @mblarsen and @outsideris for knocking out two long-awaited changes.\n\n\nCommits\nThe new version differs by 3 commits.\n\ne30e8fd 4.1.0\n7ef8b41 feat: Return namespaces string when invoking disable()\n4236585 migrate Makefile to npm scripts\n\nSee the full diff\n\n. After pinning to 15.9.14 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 2.312.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 2.313.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. - The devDependency aws-sdk was updated from 2.314.0 to 2.315.0.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for Release v2.315.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\n4f02281 Updates SDK to v2.315.0\n\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.315.0 to 2.316.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.316.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\nb319e06 Updates SDK to v2.316.0\n\nSee the full diff\n\n. After pinning to 2.333.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The devDependency aws-sdk was updated from 2.334.0 to 2.335.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.335.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\n9ef0422 Updates SDK to v2.335.0\n\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.335.0 to 2.336.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.336.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 3 commits.\n\n907d609 Updates SDK to v2.336.0\n41c9d5a make onAsync event listener public (#2299)\n9ef0422 Updates SDK to v2.335.0\n\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.336.0 to 2.337.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.337.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 9 commits.\n\n5ce9d6e Updates SDK to v2.337.0\n8e00c38 Revert \"Feature/load shared config (#2283)\" (#2311)\n3149279 Feature/load shared config (#2283)\nf878418 Fix link formatting in readme (#2295)\n4a173da Merge pull request #2293 from srchase/npmignore-unit-tests\n907d609 Updates SDK to v2.336.0\n41c9d5a make onAsync event listener public (#2299)\n9ef0422 Updates SDK to v2.335.0\nb6bbff5 updated npmignore, fix for issue 2247\n\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.337.0 to 2.338.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.338.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 10 commits.\n\n2645057 Updates SDK to v2.338.0\n5ce9d6e Updates SDK to v2.337.0\n8e00c38 Revert \"Feature/load shared config (#2283)\" (#2311)\n3149279 Feature/load shared config (#2283)\nf878418 Fix link formatting in readme (#2295)\n4a173da Merge pull request #2293 from srchase/npmignore-unit-tests\n907d609 Updates SDK to v2.336.0\n41c9d5a make onAsync event listener public (#2299)\n9ef0422 Updates SDK to v2.335.0\nb6bbff5 updated npmignore, fix for issue 2247\n\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.338.0 to 2.339.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.339.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 13 commits.\n\n0771420 Updates SDK to v2.339.0\n4aed0f4 Feature/load shared config (#2313)\n244a6c4 Create pull request templete (#2310)\n2645057 Updates SDK to v2.338.0\n5ce9d6e Updates SDK to v2.337.0\n8e00c38 Revert \"Feature/load shared config (#2283)\" (#2311)\n3149279 Feature/load shared config (#2283)\nf878418 Fix link formatting in readme (#2295)\n4a173da Merge pull request #2293 from srchase/npmignore-unit-tests\n907d609 Updates SDK to v2.336.0\n41c9d5a make onAsync event listener public (#2299)\n9ef0422 Updates SDK to v2.335.0\nb6bbff5 updated npmignore, fix for issue 2247\n\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.339.0 to 2.340.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.340.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 18 commits.\n\n083e7a6 Updates SDK to v2.340.0\n3714284 Client side monitoring functional tests (#2316)\n4d6aa8b Merge pull request #2314 from srchase/cloudfront-signer-documentation\neceed60 Update lib/cloudfront/signer.js\n0771420 Updates SDK to v2.339.0\n4aed0f4 Feature/load shared config (#2313)\n244a6c4 Create pull request templete (#2310)\n8c832b0 improved documentation for #2308\n2645057 Updates SDK to v2.338.0\n5ce9d6e Updates SDK to v2.337.0\n8e00c38 Revert \"Feature/load shared config (#2283)\" (#2311)\n3149279 Feature/load shared config (#2283)\nf878418 Fix link formatting in readme (#2295)\n4a173da Merge pull request #2293 from srchase/npmignore-unit-tests\n907d609 Updates SDK to v2.336.0\n\nThere are 18 commits in total.\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.340.0 to 2.341.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.341.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 19 commits.\n\n29fc8d3 Updates SDK to v2.341.0\n083e7a6 Updates SDK to v2.340.0\n3714284 Client side monitoring functional tests (#2316)\n4d6aa8b Merge pull request #2314 from srchase/cloudfront-signer-documentation\neceed60 Update lib/cloudfront/signer.js\n0771420 Updates SDK to v2.339.0\n4aed0f4 Feature/load shared config (#2313)\n244a6c4 Create pull request templete (#2310)\n8c832b0 improved documentation for #2308\n2645057 Updates SDK to v2.338.0\n5ce9d6e Updates SDK to v2.337.0\n8e00c38 Revert \"Feature/load shared config (#2283)\" (#2311)\n3149279 Feature/load shared config (#2283)\nf878418 Fix link formatting in readme (#2295)\n4a173da Merge pull request #2293 from srchase/npmignore-unit-tests\n\nThere are 19 commits in total.\nSee the full diff\n\n. After pinning to 2.350.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The devDependency aws-sdk was updated from 2.351.0 to 2.352.0.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for Release v2.352.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 2 commits.\n\n72c0480 Updates SDK to v2.352.0\ncbef864 Endpoint Discovery Feature (#2253)\n\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.352.0 to 2.353.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.353.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\n53490b4 Updates SDK to v2.353.0\n\nSee the full diff\n\n. - The devDependency aws-sdk was updated from 2.353.0 to 2.354.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.354.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 3 commits.\n\n2e580dc Updates SDK to v2.354.0\nd0cc305 Fix environmental variable not defined in browsers (#2348)\n53490b4 Updates SDK to v2.353.0\n\nSee the full diff\n\n. After pinning to 2.364.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 15.12.2 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 2.365.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. - The devDependency aws-sdk was updated from 2.366.0 to 2.367.0.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for Release v2.367.0\nSee changelog for more information.\n\n\nCommits\nThe new version differs by 1 commits.\n\nd9f9728 Updates SDK to v2.367.0\n\nSee the full diff\n\n. ",
    "tjlahr": "Switching to node-fetch worked. Had in my mind that whatwg-fetch was isomorphic but I guess not.  Thanks.\n. ",
    "arusakov": "@gr2m \nThx, I am going to dig into that.. Yes, #1110 is my PR and it resolves this issue). Little update with one more test. RegExp values are processed correctly.. @leggsimon \nThank you for feedback. Can you provide some test cases? . ",
    "zacharyscott": "Yeah, I agree - nock is doing the right thing.. ",
    "coleturner": "hmmm, I have only tried with the wildcard as I'm using the wildcards in a module that is shared in our org, while using the string match inside individual module's concerns. Regardless, I don't believe it is clear what is happening here and maybe I am misunderstanding how nock works. \nDoes nock take the first host that matches and then filters through the interceptors for that specific host? Or does it continue through additional hosts as I've described above?. ",
    "leggsimon": "Just an FYI, it seems that this broke our tests, since we needed to JSON.stringify some bodies instead now. Not sure this should have been a patch release. @arusakov I'll try and get around to it today yes. ",
    "LittleGnome": "Hello,\nI have seen al tests, but still can't throw that timeout.\nGreetings,\nLittleGnome. ",
    "PizzaAficionado": "Thank you. PR has been submitted.. 9.3.2 will resolve the issue. ",
    "guerrerocarlos": "Hi @gr2m, I created a PR so that the record mode intercepts the existing fixtures previously recorded and at the same time, records new requests that don't have a matching fixture.. It's actually related, otherwise you have to manually enable it in order for the requests to go through and be seen by the recorder. \nThe record mode should not disableNetConnect by default. For that behavior the other modes can be used.. ",
    "adarrra": "I also couldn't understand why 'removeInterceptor' didn't work for me... And then I understood that\nvar interceptor = nock('http://example.org').get('somePath');\nvar scope = interceptor.reply(200)\nSo issue helped. Don't want to look silly but it was not clear from docs for me.\n. ",
    "faissalMT": "Is this still being worked on? It's causing real problems for us.. ",
    "monkeywithacupcake": "I marked this PR as docs, but there is a change to the package.json to add a call to donate after install. You can skip that or decide to keep it. . To be clear - update to no post install (no change to package.json) and start again from master?. sorry - I missed that request. The contributors section is removed.. removed all of the Open Collective stuff in the package.json. ",
    "cjzcpsyx": "@gr2m https://github.com/node-nock/nock/pull/1122. @gr2m There are actually 5 other tests are breaking when I had the clean fork from latest development version. And I will pull up some changes for the issue I opened, and we can talk about it. @gr2m I added in a fix suggestion, let's talk about it\naccording to https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\nEach header field consists of a name followed by a colon (\":\") and the field value. Field names are case-insensitive.. ",
    "MSaIim": "I figured the source might have more information. I did post it on SO: https://stackoverflow.com/questions/50263883/angular2-cucumber-protractor-intercept-http-calls. Though, I'm not sure I'll get a reply. If you have any information that might help, please let me know.. ",
    "ORESoftware": "I believe it should  be in Readme, that's why I opened the ticket - I updated the title of the question to make it clear.. well I actually don't know how to do this, but if you let me know I can create a PR for the docs.  I understand PRs, I meant I don't know the correct syntax:\n```js\nvar scope = nock('http://www.google.com')\n   .all()\n   .reply(function(uri, requestBody) {\n});\n```\nmy above code must be wrong. My original use case was for a proxy server, which would intercept everything, but what I had in mind changed, so I ended up using something very different so I never fully explored the nock API beyond this question.. ah yes, thanks, I realized this after reading the \"How it works\" section, this lib works different than I thought, will close, thanks. ",
    "allenluce": "The Travis CI failure doesn't look like it's related to my changes:\nnpm ERR! Linux 4.4.0-101-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v4.9.1/bin/node\" \"/home/travis/.nvm/versions/node/v4.9.1/bin/npm\" \"install\"\nnpm ERR! node v4.9.1\nnpm ERR! npm  v2.15.11\nnpm ERR! code EPEERINVALID\nnpm ERR! peerinvalid The package marked@0.4.0 does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer marked-terminal@2.0.0 wants marked@^0.3.6\n. I've rebased this on the current master, looks like that took care of the test failures.. ",
    "Ethan-Arrowood": "Turns out this was actually coming from a line within my own module, but the PR still has value as running npm test from the master branch of nock throws a ton of Buffer warnings.. ",
    "acooper-accusoft": "I agree. We had some builds using node 4.3.2 start failing this morning and tracked it down to nock changing from 9.3.0 to 9.3.1.. Thanks @PizzaAficionado. ",
    "purefan": "Thanks a lot @jlilja ! following your suggestions did fix it for me, you rock! :) . ",
    "pramodpr316": "I actually tried doing this earlier this morning\n .filteringPath(function() {\n        return '/services';\nAnd this worked for me. I am now able to mock the entire url after /services. Thanks for your reponse, I appreciate it.. Yes Gregor. I am good now. We can close the ticket.\nThanks,\nPramod Pradhan\n361-228-3989\nOn Fri, Jun 29, 2018 at 5:03 PM -0400, \"Gregor Martynus\" notifications@github.com<mailto:notifications@github.com> wrote:\nI'm not sure I understand. Are you good now, can we close the issue?\n-\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/nock/nock/issues/1153#issuecomment-401473437, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AMVqu-F90ikU5QNUu6VCXME8qxqIMfG5ks5uBpYjgaJpZM4U7b8e.\nDisclaimer\nThe information contained in this communication from the sender is confidential. It is intended solely for use by the recipient and others authorized to receive it. If you are not the recipient, you are hereby notified that any disclosure, copying, distribution or taking action in relation of the contents of this information is strictly prohibited and may be unlawful.\nThis email has been scanned for viruses and malware by Mimecast Ltd.\n. ",
    "ArTiSTiX": "@gr2m done.\nI updated the old test (which was giving a false positive due to usage of request) by using node's http package and setHeader to mutate request (the approach failing, used by some other packages like superagent).\nI added a test to be sure requestBody is not parsed when Content Type is not application/json.. ",
    "hutson": "@RichardLitt the full contents of package.json are fetched when a package is downloaded on disk, and nock is downloaded 36k times a day, so what kind of additional bandwidth consumption are we talking here?. An alternative may be using a file in the repository that does not get automatically added to the npm package. Though Node is not an npm package, they are a good example of using a non-package.json file to maintain a list of everyone that has contributed to Node - AUTHORS.. > One thing I would suggest, before merging, would be to put the instructions for updating the Authors file somewhere for the future. What do you think?\nIs there an app that does that (submits a PR whenever someone new contributes to the project)?. ",
    "rochdev": "I won\u2019t have time to check today but I\u2019ll try to find the exact cause later on, hopefully with a PR to follow.. Just tested with the fix from #1182 and it works now. Can't wait for the next release to see that green build again!. ",
    "tzaitsev": "Also stuck on 10.6. ",
    "timrogers": "Thanks for the review! I\u2019ll get the readme fixed up.\nOn Wed, 1 Aug 2018 at 00:38, Gregor Martynus notifications@github.com\nwrote:\n\n@gr2m commented on this pull request.\nIn tests/test_intercept.js\nhttps://github.com/nock/nock/pull/1177#discussion_r206716663:\n\n\n.get('/nonexistent')\n.optionally(true)\n.reply(200);\n+\nt.deepEqual(nock.pendingMocks(), []);\nt.end();\n+});\n+\n+test('calling optionally(false) on a mock doesn\\'t make it optional', function(t) {\nnock('http://example.com')\n.get('/nonexistent')\n.optionally(false)\n.reply(200);\n+\nt.notEqual(nock.pendingMocks(), []);\nnock.cleanAll();\n\n\nMight be a pitfall \ud83e\udd14\nCan you add this all to the README?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nock/nock/pull/1177#discussion_r206716663, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAHFph89zQuKpRF01JZLshiZu0Mhg_CFks5uMOqQgaJpZM4VoJLq\n.\n. I think the optionally(false) API is the best one, so I'll stick with that.\n\nI'll get this documented (sorry I didn't do it already - some open-source projects like to review in principle and then have docs written), and then hopefully we can get this merged.\nApologies if my comment about ES6 seemed like I was attacking the project! I was just trying to explain my design decision of having to have all of the if (typeof value === 'undefined') { } malarky. I think this is a fantastic project and one I find really valuable!. @gr2m I've added to the readme, so this should be ready for review now.. This is failing because the certificates we use in tests expired yesterday. I've fixed this in https://github.com/nock/nock/pull/1181.. Will do later on today. I imagine it will!\nOn Tue, 7 Aug 2018 at 17:56, Gregor Martynus notifications@github.com\nwrote:\n\ncan you rebase on master and see if it fixes the build?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nock/nock/pull/1177#issuecomment-411127240, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAHFpmtFNHkRCdI2TxGBU6mp6KMeWTewks5uOcalgaJpZM4VoJLq\n.\n. @gr2m  @RichardLitt This is green now. Thanks!. @gr2m Done!. We're stuck not using default argument values here, since we're not on ES6 :sob:. There are other ways we could structure this, e.g.:\n\njs\nif (typeof value === 'undefined') {\n  this.optional = true;\n} else {\n  this.optional = value;\n}\nI'm happy to restyle this however you guys, the maintainers, feel is best :heart:. Without this, the non-optional mock hangs around and makes the other tests fail - this is part of our cleanup.. Sure!. Done!. I'm happy to be led by you on this.\nI included the function because I think it makes clearer why you'd want to do this. I think just passing in the true and false might look a bit odd (i.e. \"why do I need this parameter when for the mock to be required is the default?\").. ",
    "atishay": "I am looking for an event to add a listener to. Otherwise I need to keep polling nock to know when it is done.\nSomething like:\nscope.addListener('done', () => completeTest());. Sure. I can definitely help. Considering I am new to nock, please assign me a small set.. ",
    "griffinmyers": "Awesome, thanks @gr2m -- just pushed an update.  Looks like this change fixes up 41 tests that break on master on node >=10.7.0. \nHappy to lurk and pitch in with any future socket issues. . ",
    "KrekkieD": "The issue seems to have been here for quite some time (all v9, and also v8.1.0, didn't go back any further).\nI think the issue is this bit:\nhttps://github.com/nock/nock/blob/master/lib/common.js#L246\nIf the header name already was lowercased it'll throw the error as the lowercased header already exists and is thus seen as conflicting.\nA quick fix to \nif(lowerCaseFieldName !== fieldName && !_.isUndefined(lowerCaseHeaders[lowerCaseFieldName])) {\nseems to fix it for me.\n. Checked it a bit more. It throws the error when the request has the same header name in different casing. Formally headers should be case insensitive, but technically it's possible to send in the same header with different casing.\nI'm not sure nock should be throwing errors when this occurs. I mean sure it's not desirable to have the same header names on the consuming side (because which of the variations is the one that should be used..?), but it'll complicate consuming nock if it throws errors on it. \nAlso an actual server would not error on it by default, which could mean nock shouldn't either. I'm not sure if there are rules that state which of the headers should be used.\nMaybe nock should use the first value instead:\n```\nvar headersFieldNamesToLowerCase = function(headers) {\n  if(!_.isObject(headers)) {\n    return headers;\n  }\n//  For each key in the headers, delete its value and reinsert it with lower-case key.\n  //  Keys represent headers field names.\n  var lowerCaseHeaders = {};\n  .forOwn(headers, function(fieldVal, fieldName) {\n    var lowerCaseFieldName = fieldName.toLowerCase();\n    // use the value of the first occurrence of the header name\n    if(!.isUndefined(lowerCaseHeaders[lowerCaseFieldName])) {\n      lowerCaseHeaders[lowerCaseFieldName] = fieldVal;\n    }\n  });\nreturn lowerCaseHeaders;\n};\n```\nor the last;\n```\nvar headersFieldNamesToLowerCase = function(headers) {\n  if(!_.isObject(headers)) {\n    return headers;\n  }\n//  For each key in the headers, delete its value and reinsert it with lower-case key.\n  //  Keys represent headers field names.\n  var lowerCaseHeaders = {};\n  _.forOwn(headers, function(fieldVal, fieldName) {\n    var lowerCaseFieldName = fieldName.toLowerCase();\n    // use the value of the last occurrence of the header name\n    lowerCaseHeaders[lowerCaseFieldName] = fieldVal;\n  });\nreturn lowerCaseHeaders;\n};\n```. ",
    "benplummer": "I'm experiencing the same issues. The fixture is being created fine on the first run but when the test is being run again I get NetConnectNotAllowedError: Nock: Disallowed net connect for \"127.0.0.1:59454/test\".\nTried multiple nock.enableNetConnect combinations but no luck.. @diegoaguilar No, nothing so far.. @bohachevskyy Moving nock.enableNetConnect(/127\\.0\\.0\\.1/); to after the nockDone initialisation worked for me. Thanks!\n@diegoaguilar Might be worth trying the above too if you haven't already. Good luck!. ",
    "diegoaguilar": "@benplummer did u get any solution for this, so far?. @benplummer if you want to share some ideas about testing and mocks it'd be great for me ;). ",
    "bohachevskyy": "Hello @benplummer  @diegoaguilar please try to call nock.enableNetConnect();after nockDone initialization. It allows me to call localhost:\nconst { nockDone } = await nockBack('subscription.json')\nnock.enableNetConnect(/127\\.0\\.0\\.1/);\nBut there s another issue here: fixture contains timestamp in a request. The timestamp will be different each request, and fixture won't correspond.\nI tried to modify timestamp in before func that passed as an option to nockBack, but didn't manage to do that.\nWill be happy to hear any help :). ",
    "modestfake": "@gr2m I've reproduced it here https://runkit.com/modestfake/node-nock-nock-768\nThe problem is in this lines of code https://github.com/nock/nock/blob/v10.0.4/lib/request_overrider.js#L405-L426. Seems like issue #1208 is related to this one.. ",
    "abhijeetps": "Indeed, I am. Opening new weekly digests every week might be a little difficult.\nI am currently working on it. \ud83d\ude04 . Not yet @gr2m , I will let you know. \ud83d\ude04 . ",
    "protoEvangelion": "@richardscarrott thanks for pointing me in the right direction with this. The additional problem I had to figure out was that I needed to re-gzip after normalizing. This was because https://github.com/octokit/rest.js expects the response to be gzipped.\nTo work with nockBack, without changing nock internally, here is what I did in the afterRecord callback:\n```javascript\nfunction decodeBuffer(fixture) {\n  // Decode the hex buffer that nock made\n  const response = isArray(fixture.response) ? fixture.response.join('') : fixture.response\ntry {\n      const decoded = Buffer.from(response, 'hex')\n      var unzipped = zlib.gunzipSync(decoded).toString('utf-8')\n  } catch (err) {\n      throw new Error(Error decoding nock hex:\\n${err})\n  }\nreturn JSON.parse(unzipped)\n}\nfunction afterRecord(fixtures) {\n  const normalizedFixtures = fixtures.map(fixture => {\n      fixture.response = decodeBuffer(fixture)\n  // do normalization stuff\n  // Re-gzip to keep the @octokit/rest happy\n  const stringified = JSON.stringify(fixture.response)\n  const zipped = zlib.gzipSync(stringified)\n\n  fixture.response = zipped\n\n  return fixture\n\n})\nreturn normalizedFixtures\n}\n```. So the more I think about it, the current behavior is something I can live with.\nDigging further, my problem was that on the initial generation of fixtures, my test suite fails. After the fixtures are generated however, my test suite passes. I am going to close as solving this does not seem worth modifying this library in order to address.\nIt was a bit of a learning curve, but I am really enjoying this library. Fantastic work everyone especially you @gr2m !. Fixing this for nockBack was pretty straightforward.\nThe approach I took was un-gizipping the response if user passes in gunzip: true to nockBack recorder options and only if the response is actually gzipped. Once the afterRecord function is called I re-gzip the response.\nThat way the user can normalize & scrub sensitive data & satisfy apis that expect the response to be gzipped like @octokit/rest.\nFor using the recorder directly however, since there is no direct callback like afterRecord, I don't know what the best approach is. Currently we un-gzip the response, but I am not sure what to do after that.\nAlso, for the https://github.com/nock/nock/blob/master/tests/test_recorder.js#L462 file, I spent hours trying to get this test to pass but did not succeed. My experience using Buffers and zips are quite limited so I would really appreciate your feedback on this @richardscarrott and @gr2m \u2764\ufe0f . @paulmelnikow Oops forgot to link to the issue my bad! #1212\nI will close this and reopen on the beta branch.. ",
    "gkalpak": "I had a brief look at the source code and tests, but I couldn't figure out where the appropriate place would be (neither for the fix nor for the test) :confused:\nI am sure that it is a super simple and quick fix for someone familiar with the code base.\nAFAICT, tests are already being run on Node.js 10 on Travis, so that is taken care of.\nAnd as for a failing testcase, it is as simple as http.request('some url', {some: 'options'}, someCallback) (you can also see my runkit example). Again, I am not sure about the format of the tests, but it will be very straight forward for someone familiar with the code base.",
    "leonrinkel": "You are correct \u2705 \nI used the following hack in common.js:138 to quickly get it running with the new signature:\n```js\nmodule.request = function(url, options, callback) {\n  url = new URL(url);\noptions.protocol = url.protocol;\n  options.hostname = url.hostname;\n  options.port = url.port;\n  options.path = url.pathname;\nreturn newRequest(proto, overriddenRequest.bind(module), options, callback);\n};\n```\nOf course this is not a production-ready solution.. ",
    "nijynot": "@gr2m I'll join in on the fun :-), just submitted a PR (https://github.com/nock/nock/pull/1428) that fixes this bug. Would be cool if someone could review it.. Yes there is, it's from the Node.js' internal/url.js file. https://github.com/nodejs/node/blob/master/lib/internal/url.js#L1257\nAdded some comment to the urlToOptions function, and the link.. Just checked on ClientRequest in Node master, it seems they do a typeof check in a similar way, and then re-assigning the input to options. I think it should be backwards compatible?\nhttps://github.com/nodejs/node/blob/master/lib/_http_client.js#L63. Added some more tests, specifically, tests that use http.request and http.get, which is what others will actually use.. @paulmelnikow Ah, I see. I fixed it so that the Node 10 feature only work on Node 10 (see the requestParameters function). But I think this introduces some other problems, like testing. How do you test a Node 10 feature if you're on Node 8? Do we have a copy of Node 10 ClientRequest & Node <10 ClientRequest in nock so that tests work regardless of which Node you're testing with?\nI guess easy solution would be to instead warn if someone uses Node 10 API when running on Node <10.\nEdit: Nvm, ignore this. ",
    "nguymin4": "Hi, @RichardLitt, I think there is a breaking change when upgrading from 9.6.1 to 10.0.0 here is the result and a simplified test - tested with Node.js v8.12.0 and v10.11.0\nIn nock@9.6.1 the result is ['haha', 'lol', 'wow']\nIn nock@10.0.0 the result is lol\nIf this is intentional then should we update the change log and the doc?\n```\nconst request = require('request-promise');\nconst nock = require('nock');\nasync function main() {\n  const data = ['haha', 'lol', 'wow'];\n  nock('http://localhost')\n    .get('/')\n    .reply(200, () => data);\nconst result = await request('http://localhost');\n  console.log(result);\n}\nmain();\n```\n. @RichardLitt Yes, I can take a look at it\nUpdate: I think this issue was introduced when we change the logic in PR https://github.com/nock/nock/pull/1203/files\nI honestly don't know what is desired behavior for it. But in my opinion, the first argument for reply should always be the statusCode and the second argument can be a responseBody or a function which will return the responseBody.. ",
    "MarshallRJ": "\nWhat does data return, instead of the array?\n\nI note the  same issue with version 10.0.0 in my instance it returns the last element in the array.. ",
    "matthewheck": "Agreed with @nguymin4. I believe the fact that this test failed and had to be commented out is somewhat indicative too.. ",
    "ctstone": "I think I jumped the gun on isJSONContent (that might be an issue on its own but seems not to be the cause of my bug).\nMy problem seems to be around the handling of plain JSON strings in recorder.js or in match_body.js.\nIf I POST a JSON string, it should create an object like\nJSON\n{\n  \"body\": \"\\\"foo\\\"\"\n}\nBut what I see in the recorded output is simply\nJSON\n{\n  \"body\": \"foo\"\n}\nThat probably makes sense for non-string JSON, but because my body itself is a JSON string, there does not seem to be a mechanism to correctly preserve that, and I get \"request not matched\" errors until I manually stringify the body.\nMy thinking is that either recorder.json should not be doing JSON.parse on the body, or else match_body.js should be doing a JSON.stringify on the body to compensate.\n@RichardLitt, should I open a new issue, or should I reframe this issue to more accurately describe my problem? If I find a resolution, I will submit a PR, but I don't think it will touch isJSONContent.. Makes sense! Will revisit when I have a failing test.\nSent from mobile\n\nFrom: Richard Littauer notifications@github.com\nSent: Thursday, September 20, 2018 5:26 PM\nTo: nock/nock\nCc: Chris Stone; Author\nSubject: Re: [nock/nock] isJSONContent fails when directives in Content-Type header are present (#1229)\nI think the best thing to do is probably to add tests! That'll help make it really clear what is going on here.\nthere does not seem to be a mechanism to correctly preserve that\nMight this be a point where an option would help?\nI would open a PR adding tests to describe what you want and what you think is failing. Then, we can clearly see how to fix the bug at the same time, and we've improved nock. What do you think?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnock%2Fnock%2Fissues%2F1229%23issuecomment-423338843&data=02%7C01%7CChristopher.Stone%40microsoft.com%7C00c301da4cdd493a144b08d61f3faf45%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636730755715016268&sdata=xmS0t43VOs%2Bat3dzhMQa3zEaBgEs82FuSPwcvryOHyQ%3D&reserved=0, or mute the threadhttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAC8qeyb8gn9q1r6Z9fpvxeZRXeFqxAOOks5udAfxgaJpZM4Ww5gw&data=02%7C01%7CChristopher.Stone%40microsoft.com%7C00c301da4cdd493a144b08d61f3faf45%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636730755715016268&sdata=zcOuh0LrBgROzARMc0r8MB1z28vzNi0mJYVgVYm6ZBI%3D&reserved=0.\n. Makes sense! Maybe consider adding a comment to existing test cases that use external servers so that that behavior is not copied to new tests?. ",
    "hapr05": "hey can I take this?. yep, sorry I was out of town, I'll PR today. ",
    "JordanShurmer": "I'm fairly certain this is due to the change in node's http api with version 10 (which is LTS as of today, btw).\ncompare http 8.x with http 10.x\n. ",
    "lucaslago": "Hey, @RichardLitt would like to help on this if no1 else is already working on it.. @lihail go for it \ud83d\udc4d . ",
    "lihail": "Is anyone working on this? If not, I could take a look and try to help.. Thanks, I've started working on this. It doesn't look like too much work, but unfortunately I don't have much time so it will take a few days.. This is the first time I'm creating and using GitHub Probot apps (and GitHub apps generally), so I've created a probot app and a test repo, and installed the app on the repo. I've defined the app to comment on any new issue (just for testing) and it works. If you've got some experience with probot, I'll be glad if you could help me:\n\nI've found a probot extension that can trigger events on set intervals. Updating the file every 1 week sounds good?\nWhere should I deploy the app? In probot docs they suggest Glitch, and it looks sufficient for this. What do you think?\nContinuing the previous question, Glitch can host the code (like a GitHub repo), and you can even edit the code directly from their website. The question is, apart from the deployment of the app: can we rely on Glitch to host the code itself? Or we should add the app's code to the nock repo?\n. Unfortunately I haven't been working on this for the last few weeks. I'll probably continue when I have some time, but I don't want to hold up anyone, so if someone else wants to do this in the meantime they can.. Hi @kevinnio, any progress with this? :). > Before we jump into refactorings, I\u2019d like to try to have all parts of the code covered. 100% might be not worth it, but something close to it would be great.\n\nI agree, even though it's tempting to go and replace lodash with native implementation. What is the overall coverage today?\n\nI'll get this going.\n\nDon't you want to have a larger coverage first?... @gr2m and about my other question?. I see. Actually I was a bit afraid making this change without proper coverage first could cause trouble , but now that I saw the 93% coverage, sounds like we're good to go with this one.\nI'm starting to take part in nock on the last couple of days and planning on doing so at least for a few more days, so I don't mind doing that too @gr2m, but it might take a few days until I have the time to reach it. So it's your call ;). @jlila here's my opinion about tests: I can say that in my team (where I work), we honestly don't look at the coverage percentage. Instead, every new code that is inserted to the codebase must be inserted with tests too. The exception is the backend, in which we do only integration tests. I find this method a bit tedious but very rewarding in the long term, and I believe this project could benefit from it as well. We currently have 93% which is awesome, and we could decide that from now on every pull request will be approved only if it contains proper tests, regardless of the new test percentage.. @paulmelnikow great work so far! Maybe you could finish what you've already started and tell us what's the coverage at that point? Then we could decide what to do next.. Oh lol, so what's the coverage now?. If I got this right, you should remove this function (and goodRequestLocalhost.json, but for some reason I can't find it..), and replace every occurrence of this function with a call to nockBackWithFixture instead. I don't mean to sound rude, but why is the newline being removed at the end of README.md a problem? Sounds reasonable to me.. Oh ok. I missed the part where prettier expects the newline.. Thanks! I'll try to look for more work to do here on nock, since I'm using it in my job :). Could you please elaborate on this? Aren't we using this package?. ",
    "allcontributors[bot]": "@gr2m \nI've put up a pull request to add @RichardLitt! :tada:. @gr2m \nI've put up a pull request to add @chadfawcett! :tada:. ",
    "Berkmann18": "@paulmelnikow It is and it's on the way to be improved alongside name-your-contributors.. ",
    "ivrtaric": "\nwhat does getNamespaceQueryParameter() return exactly?\nfunction getNamespaceQueryParameter() {\n    return encodeURIComponent(`SELECT NamespacePrefix FROM ApexClass WHERE Name = 'WebServiceProvider'`).replace(/[']/g, '%27');\n}\nA URI-encoded SQL-like alphanumeric string. You can see it in the line starting with \"matching\" in the issue description.\n\nThis is the result of nock's recorder for the live request in question:\nnock('https://instance.salesforce.com:443', {\"encodedQueryParams\":true})\n  .get('/services/data/v39.0/query')\n  .query({\"q\":\"SELECT%20NamespacePrefix%20FROM%20ApexClass%20WHERE%20Name%20%3D%20%27WebServiceProvider%27\"})\n  .reply(200, {\"totalSize\":1,\"done\":true,\"records\":[{\"attributes\":{\"type\":\"ApexClass\",\"url\":\"/services/data/v39.0/sobjects/ApexClass/01p1t000009ceFhAAI\"},\"NamespacePrefix\":\"ourcustomns\"}]}, [ 'Date',\n  'Thu, 18 Oct 2018 08:29:03 GMT',\n  'Strict-Transport-Security',\n  'max-age=31536000; includeSubDomains',\n  'X-Content-Type-Options',\n  'nosniff',\n  'X-XSS-Protection',\n  '1; mode=block',\n  'Content-Security-Policy',\n  'upgrade-insecure-requests ',\n  'X-Robots-Tag',\n  'none',\n  'Cache-Control',\n  'no-cache,must-revalidate,max-age=0,no-store,private',\n  'Set-Cookie',\n  'BrowserId=ShMCkrNaQSeVYdR6xJujsA;Path=/;Domain=.salesforce.com;Expires=Mon, 17-Dec-2018 08:29:03 GMT;Max-Age=5184000',\n  'Expires',\n  'Thu, 01 Jan 1970 00:00:00 GMT',\n  'Sforce-Limit-Info',\n  'api-usage=62/50000',\n  'Content-Type',\n  'application/json;charset=UTF-8',\n  'Vary',\n  'Accept-Encoding',\n  'Transfer-Encoding',\n  'chunked',\n  'Connection',\n  'close' ]);\nI'll paste the link to the runkit nb if I manage to make it demonstrate the issue.. Huh. It turns out that the nocked response matches (works correctly) when I add encodedQueryParams configuration parameter to the response setup.. ",
    "vwxyutarooo": "Okay, I'll commit that.. @gr2m I've added two tests for filteringPath and filteringRequestBody options.. ",
    "kevinnio": "Sorry, I've been quite busy since the end of last year. I'm going to spend some time working on this tomorrow.. So, just finished my first attempt to it. Ready for review.. Given https://github.com/nock/nock/pull/1391#discussion_r250725610, we decided to make nock raise an error whenever the user forgets to add a leading slash into the intercepted path, instead of adding it itself.\n. Rebased onto beta branch.. Sure, I'll rebase and move the code into the constructor after simplifying it a little.. Sure, will do.. I noticed in the tests that uri can also be a regexp, that's why I was checking for the existence of indexOf.. /^[^/*]/.test(uri) works like a charm. Thanks @gr2m.\n@paulmelnikow, yeah, I'm adding a comment for that. . Comment added.. I appreciate the feeling @gr2m, but I think @paulmelnikow may be right. Raising an error will inform the user that there's a right way to do things in nock and will help educate them on how to use it. After all, we don't want them to think nock will handle every single deviation from the norm they may have.\nI'll do the change if you both agree.. ",
    "junaidahmed92": "Thanks for the answer. Is there anyway to do that with current\nimplementation? Means without changing anything?\nOn Tue, Dec 4, 2018, 12:15 AM Gregor Martynus <notifications@github.com\nwrote:\n\ntry change reject(); to something more useful, like reject(new\nError('Unexpected response code: ' + response.statusCode);\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nock/nock/issues/1262#issuecomment-443833627, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/Alk_KFOxOeQ89YJtzL9xj1HE1xUesjs9ks5u1XhfgaJpZM4Y-qbv\n.\n. \n",
    "ecdemis123": "Okay, I'll move it around a little bit. \ud83e\udd42 . whoops forgot about that one. ",
    "labsvisual": "@gr2m, oh, alright! \nAnd yes, on it!  \ud83d\udc4d . Are we using tests/test_intercept.js to test for the low-level .intercept() function? . Take a look. What do you think? \nI haven't included validated for every possible argument but only for method. . @gr2m all done! \ud83d\ude03 . ",
    "arvydaszenitech": "Found the issue. It was AWS SDK dynamoDbCrc32 check. For some reason check failed when running with mocked response. Disabling it before running test solved this issue: \nconst dynamodb = new AWS.DynamoDB.DocumentClient({ dynamoDbCrc32: false });. ",
    "humantree": "I'm also encountering this issue. Here is a simple example of it occurring: https://github.com/humantree/nock-fake-timers\nThis test passes on 10.0.4, but fails on 10.0.5.. In my case, the test that broke was testing a library that hit a list of URLs multiple times a second. In order to prevent this, I was using Sinon to freeze the timer so that I could use Nock to fake these URLs and be sure they were only hit once.. ",
    "taylor1791": "Regarding the statement:\n\nThis library happens to use timer to simulate the http response but it doesn't mean this implementation details should be exposed and exploited by the consumer of this library.\n\nI completely agree, but I think that I think that should be discussed in a different MR. In addition, it is certainly a breaking change if !677 is.\nIf the maintainers of nock deem it appropriate, I am happy to help contribute a fix. I think there are a few choices to fix it, but I agree with @chenghung. I think the best \"fix\" is to revert, mark it as a breaking change, and re-publish this change in v11. However, I can think of a few reasons the maintainers might not desire this.\nI will defer to the maintainers if they think we should fix this. I can see it 2 ways. \n\nIf you arbitrarily monkey patch the execution environment, no library can provide backwards compatibility guarantees.\nMonkey patching clocks in the execution environment is common enough that nock should guarantee backwards compatibility when mocking clocks.\n\nFirst, assume that all assertion frameworks using fake timers equally. If we knew what percent of javascript projects that use sinon, also use fake timers, we could support or reject 2. I would say that if >4% of projects use fake timers, then view 2 is supported. Others are welcome to submit different percentages. I tried to collect some data using open source projects, but it seemed inconclusive to me. If you are interested in the inconclusive results keep reading. \nUsing 'mocha' filename:package.json extension:json language:JSON as the search criteria across github, I found 1,200,331 million files. Since most projects are not likely to have more than one package.json, we can assume there are about 1.2 million projects using mocha.\nSearching for sinon useFakeTimers extension:js language:JavaScript on github provides 90,904 files. Searching for lolex install extension:js language:JavaScript on github provides 11,166 files. This might be a close proxy for number of files (not projects) using fake timers. Since this is an upper bound for the number of projects using fake timers, we can pretty safely say that this will break no more than 8.5% of projects using mocha.\nIf we assume that jest users use mock timers about the same as mocha users, we can another data point. Using jest filename:package.json extension:json language:JSON as a search result we get 410,030 projects using jest. Using jest useFakeTimers extension:js language:javascript as a search result we get 5993 files using fake timers. So jest, has a upper bound of 1.5% projects breaking using this change.\nIt is possible that projects using any testing framework, sinon, and fake timers do not break (for various reasons). However, this only increases makes the reported percentages higher upper bounds. If we want to go further, someone could try to clone a fraction of repositories and try to find failures after upgrade nock, but that is fraught with perils.\nLooking at the quality of the search result, it is unclear which one is \"closer\" to reality. Perhaps we could use activity on this issue as a gauge for the number of projects updating that broke, but I am not sure how to gage total projects that upgraded without problems. To go further, one try to clone a group of repos. ",
    "ehabdevel": "I may came late to this but,\nwasn't it be more clear if using a domain like this:-> http://www.someSite.url\nwhich also doesn\u2019t send requests to a real domain.. Hi, \nThank you for the opening invitation, you all do a great work. \nand I think this day will be more helpful for me.\nhope I can be a good support.. ( UTC-5 | pacific time | ET/PT | UTC-8 | CET | PST ) ...  o.O\nWe still miss the GMT here,\nI think the Maintainathon will start at 7:00 PM by my local Cairo time (GMT+2)\nHope somebody can find me online if I'm lost :laughing: \n. ",
    "kamalarieff": "@parky128 did you manage to solve this?. ",
    "dizzyrow": "As a temporary fix I ended up removing nock and replacing it with:\nsandbox.stub(rp, 'Request').returns({name: 'thething', id:'1234'});\nThis ended up fixing my problem and all my stubs worked. I would prefer to use nock though since I think it provides a more accurate test case.\nIf I remove sinon though (short of using a different library to stub out functions) I will fail prior to intercepting the request. \nAs a background I regularly use nock and sinon but this is the first time I have really needed to use both of them :/. Hey sorry about that. I tried to update the function so that the stub returns a promise and the function actually has a return now. I unfortunately cant provide the actual code so this is about as close as possible to what is running. The nock intercepts my request perfectly fine and returns the correct value its just the behavior that occurs afterwards. Someone suggested attempting to use request-promise-native instead of bluebird, so I was going to try that next. . ",
    "nglgzz": "Never mind. I realized while digging in the code that the 'OPTIONS' method is supported and the problem was with the codebase I'm working on. \nIt would be great to have that mentioned in the README though. (I sent a PR for that https://github.com/nock/nock/pull/1394). ",
    "harshthakur92": "I am using Same URL in different test file, Also added persist(), still i am getting error of \n\"Expected false to be truthy\" please help its irritating.. js\nit('Should return re details', async () => {\n            resServer= nock('https://test.bed.com')\n                .persist()\n                .get('test?includeDetails=true')\n                .reply(successStatusCode, responder);\n            const cloudBedsReservationHandler = new CloudBedsReservationHandler();\n            await resHandler.getDetail();\n            expect(resServer.isDone()).toBeTruthy();\n        });\nUsing ''test?includeDetails=true'' URL in different test case and getting error of false.\nindividually working perfectly.. ",
    "marbuser": "\nThe call to nock is not supposed to include the path; could that be the problem?\nnock('https://domain.com/session/') -> nock('https://domain.com')\nAdded: I guess the rest of the path is just ignored.\nOther than that I'm not sure what the problem is. It's hard for us to troubleshoot without a runnable example \ud83e\udd14\nOne of the reasons I started working on Nock is to make it easier to use and easier to diagnose when things are going wrong. These kind of issues are frustrating.\n\n@paulmelnikow \nI actually managed to figure this out about an hour ago.\nI didn't realise Nock was incredibly specific in what URL's it captured, including query params.\nI ended up just doing .query(true) and it started working, so the query string I was providing must have somehow been differing to the one I had in my code (although on the log statements they were exactly the same?). @gr2m Yep that appears to fix it. Never saw that config option before and swear I couldn't find it when searching lol.\nThanks for your help! :). ",
    "elliotf": "Happy to hear that folks are positive about this. I started messing about a bit attempting to get some sort of normalized view of an interceptor vs a request, using a form of levenshtein to sort the available interceptors (though it looks like Jaro-Winkler might yield better results) -- so far I've learned that I have a lot to learn, but it at least looks doable.. I'll open a pull request shortly, @gr2m :). Closing issue, moving discussion over to #1429.. ",
    "pooja098": "\nI haven't used the .log function very much. I stumbled across it recently and have been curious about how useful it is.\n\nYeah, it's quite useful. Basically, I have a script that runs many postman collections having a variety of requests and some repeating requests, out of which some requests I want to be answered by the original server. So, I've written mocks for the requests (host+path combinations) I want to be mocked and set allowedUnmocked = true. Now, I need to put .log(console.log) statement on every nock, so that I can see, at the runtime which all requests are being addressed by the nock and if I'm missing out a nock for any request.\n\nWorth thinking about this in relation to #1429 \n\nIn this case, no match found for xxx request error message won't be helpful as I've set the allowUnmocked flag, hence non-matching request won't raise an error.\nNow, once everything is working as expected, I don't need match info to be logged on the console, so I have to remove .log(console.log) statements from all nocks.\nNow, if there's any change/addition in the requests being made, I need all .log(console.log) back again.\n\nI wonder if we turn this on and off globally with an environment variable. It would avoid having to modify the code to begin with.\n\nExactly!! That's why asking for a global flag like feature for a nock setup, which allows nock to run in a verbose mode (i.e. display whatever match/unmatch it is going through) whenever required.\n. ",
    "ericcarino": "BTW, I have worked around the issue by doing:\n.query(queryObj => queryObj.query === \"sum(nefeli_performance_bess_pipeline_tput_in_bytes_rate%7Bpipeline_name=~%22_019.*%22%7D)\");\nThis works great.. ",
    "avaly": "I gave it a shot at writing a test for the memory leak, but I am not certain it's very accurate: https://github.com/avaly/nock/commit/2cd505fb4d073ac5cbd3098f76e3c8646ef38650. ",
    "atulkumar-it": "I have many POST requests where header is same, only one of the body parameter is different. So I want to nock based on body matches. Currently what is happening , if some one applied nock 10 times, and even though I am using body matching in my post request, but it just match header (which is same for others) and use the nock defined by other, it doesn't check post body is different. Can you provide some solution?. ",
    "Levino": "That would add a lot of boilerplate code in every test. Quite annoying. Should be easy to set this as an environment variable, right?. ",
    "thib3113": "Hum, for the moment, I've a workaround for my problem ( checking all the records from nock, and manually re-do 302 request, without following the redirection, and doing a request each time axios return \u00e0 302 ) .\nAbout the 302 in general, this part : https://github.com/nock/nock/blob/beta/tests/test_recorder.js#L129 , seems to work, so I suppose this 302 error doesn't exist with superagent ? ( in fact my code is just an adaptation of this test, and where on the super agent test t.equal(recorded.length, 2) works, on my test, it fail ) .\nAbout the maxRedirects: 0 if I remember, it's throw an error if the request return a 302 . In my case, this is a problem ( because I'm testing if a service exist, so if it's fail, the service doesn't exist, else it exist .... but if the service exist and return a 302 ... it's fail . I know it's overridable, by checking the return status, but In my opinion, the bug come from the recorder and not my code :P ) .. Ok, so some tests ( It's my first time with TAP)\n```js\ntest('test 302 redirections', t => {\n  const exampleText = 'example'\nconst server = http.createServer((request, response) => {\n    switch (require('url').parse(request.url).pathname) {\n      case '/':\n        response.writeHead(302, { Location: '/abc' })\n        break\n      case '/abc':\n        response.write(exampleText)\n        break\n    }\n    response.end()\n  })\n  t.once('end', () => server.close())\nnock.restore()\n  nock.recorder.clear()\n  t.equal(nock.recorder.play().length, 0)\nnock.recorder.rec({\n    dont_print: true,\n    output_objects: true,\n  })\nserver.listen(async () => {\n    let resp, resp2, recorded, nocks\nconst address = `http://localhost:${server.address().port}`;\n\n// test with axios\ntry {\n  resp = await axios.get(address);\n} catch (e) {\n  t.ok(false)\n}\n\nt.ok(resp)\nt.ok(resp.headers)\nt.strictEqual(resp.data, exampleText)\n\nnock.restore()\nrecorded = nock.recorder.play()\nnock.recorder.clear()\nnock.activate()\n\nt.equal(recorded.length, 2)\nnocks = nock.define(recorded)\n\ntry {\n  resp2 = await axios.get(\n    address\n  )\n\n  // console.log(resp2.data);\n  t.strictEqual(resp2.data, exampleText)\n  nocks.forEach(nock => nock.done())\n}\ncatch (e) {\n  t.ok(false, e.message)\n}\n\nnock.restore()\nnock.recorder.clear()\nt.equal(nock.recorder.play().length, 0)\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n})\n\n\n// test with got\n// console.log(\"test with got\");\ntry {\n  resp = await got(address);\n} catch (e) {\n  t.ok(false)\n}\nt.ok(resp)\nt.ok(resp.headers)\nt.strictEqual(resp.body, exampleText)\n\nnock.restore()\nrecorded = nock.recorder.play()\nnock.recorder.clear()\nnock.activate()\n\nt.equal(recorded.length, 2)\nnocks = nock.define(recorded)\n\ntry {\n  resp2 = await got(address)\n\n  t.strictEqual(resp2.body, exampleText)\n  nocks.forEach(nock => nock.done())\n}\ncatch (e) {\n  t.ok(false)\n}\n// console.log(\"end test with got\");\n\nnock.restore()\nnock.recorder.clear()\nt.equal(nock.recorder.play().length, 0)\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n})\n\n// test with request\n// console.log(\"test request\");\nawait new Promise((resolve, reject) => {\n  mikealRequest(address, function (error, response, body) {\n    if(error)\n      t.ok(false);\n\n    t.ok(response)\n    t.ok(response.headers)\n    t.strictEqual(response.body, exampleText);\n\n    nock.restore();\n    recorded = nock.recorder.play();\n    nock.recorder.clear();\n    nock.activate();\n\n    t.equal(recorded.length, 2);\n    nocks = nock.define(recorded);\n\n    mikealRequest(address, function (error, response, body) {\n        if(error)\n          t.ok(false);\n\n          t.strictEqual(response.body, exampleText)\n          nocks.forEach(nock => nock.done())\n\n        resolve();\n      })\n\n\n  });\n});\n\n// console.log(\"end test request\");\n\nt.end();\n\n})\n})\n```\nwith DEBUG=nock.recorder,\nproduce : \n```\n\"C:\\Program Files\\nodejs\\node.exe\" C:\\Users\\thib3\\repos\\nock\\tests\\test.js\nDebugger listening on ws://127.0.0.1:52483/375ef644-f4ff-4087-bc5b-34b96be80ff8\nFor help, see: https://nodejs.org/en/docs/inspector\n  nock.recorder 0 restoring all the overridden http/https properties +0ms\nTAP version 13\n  # Subtest: test 302 redirections\n    ok 1 - should be equal\nnock.recorder 0 restoring all the overridden http/https properties +1s\n  nock.recorder start recording 1 {\"dont_print\":true,\"output_objects\":true} +5ms\n  nock.recorder 1 restoring overridden requests before new overrides +0ms\n  nock.recorder 1 intercepting http request to record +906ms\n  nock.recorder finished setting up intercepting +5ms\n  nock.recorder 1 http intercepted request ended +1ms\n  nock.recorder out: { scope: 'http://localhost:52485',\n  method: 'GET',\n  path: '/',\n  body: '',\n  status: 302,\n  response: '',\n  rawHeaders:\n   [ 'Location',\n     '/abc',\n     'Date',\n     'Mon, 18 Mar 2019 20:03:52 GMT',\n     'Connection',\n     'close',\n     'Transfer-Encoding',\n     'chunked' ] } +4ms\n      ok 2 - expect truthy value\nnock.recorder     ok 3 - expect truthy value\n1    ok 4 - should be equal\n restoring all the overridden http/https properties +13ms\n    not ok 5 - should be equal\n      ---\n      found: 1\n      wanted: 2\n      compare: ===\n      at:\n        line: 56\n        column: 7\n        file: tests/test.js\n        type: Server\n        function: server.listen\n      stack: |\n        Server.server.listen (tests/test.js:56:7)\n      source: |\n        t.equal(recorded.length, 2)\n      ...\nnot ok 6 - Nock: No match for request {   \"method\": \"GET\",   \"url\": \"http://localhost:52485/abc\",   \"headers\": {     \"accept\": \"application/json, text/plain, */*\",     \"user-agent\": \"axios/0.18.0\"   } }\n  ---\n  at:\n    line: 69\n    column: 9\n    file: tests/test.js\n    type: Server\n    function: server.listen\n  stack: |\n    Server.server.listen (tests/test.js:69:9)\n  source: |\n    t.ok(false, e.message)\n  ...\n\nok 7 - should be equal\n\nnock.recorder 1 restoring all the overridden http/https properties +31ms\n  nock.recorder start recording 2 {\"dont_print\":true,\"output_objects\":true} +1ms\n  nock.recorder 2 restoring overridden requests before new overrides +0ms\n  nock.recorder 2 new http body chunk +6ms\n  nock.recorder 2 intercepting http request to record +2ms\n  nock.recorder finished setting up intercepting +2ms\n  nock.recorder 2 http intercepted request ended +1ms\n  nock.recorder out: { scope: 'http://localhost:52485',\n  method: 'GET',\n  path: '/',\n  body: '',\n  status: 302,\n  response: '',\n  rawHeaders:\n   [ 'Location',\n     '/abc',\n     'Date',\n     'Mon, 18 Mar 2019 20:03:52 GMT',\n     'Connection',\n     'close',\n     'Transfer-Encoding',\n     'chunked' ] } +2ms\n    ok 8 - expect truthy value\n    ok 9 - expect truthy value\n    ok 10 - should be equal\n    not ok 11 - should be equal\n      ---\n      found: 1\n      wanted: 2\n      compare: ===\n      at:\n        line: 97\n        column: 7\n        file: tests/test.js\n        type: Server\n        function: server.listen\n      stack: |\n        Server.server.listen (tests/test.js:97:7)\n      source: |\n        t.equal(recorded.length, 2)\n      ...\nnock.recorder 2 restoring all the overridden http/https properties +9ms\n  nock.recorder     not ok 12 - expect truthy value\n2 restoring all the overridden http/https properties       ---\n+9ms\n      at:\n  nock.recorder start recording 3 {\"dont_print\":true,\"output_objects\":true}         line: 107\n+0ms\n  nock.recorder         column: 9\n3 restoring overridden requests before new overrides +0ms\n        file: tests/test.js\n        type: Server\n        function: server.listen\n      stack: |\n        Server.server.listen (tests/test.js:107:9)\n      source: |\n        t.ok(false)\n      ...\nok 13 - should be equal\n\nnock.recorder 3 intercepting http request to record +9ms\n  nock.recorder finished setting up intercepting +0ms\n  nock.recorder 3 http intercepted request ended +1ms\n  nock.recorder out: { scope: 'http://localhost:52485',\n  method: 'GET',\n  path: '/',\n  body: '',\n  status: 302,\n  response: '',\n  rawHeaders:\n   [ 'Location',\n     '/abc',\n     'Date',\n     'Mon, 18 Mar 2019 20:03:52 GMT',\n     'Connection',\n     'close',\n     'Transfer-Encoding',\n     'chunked' ] } +2ms\n  nock.recorder 3 intercepting http request to record +3ms\n  nock.recorder finished setting up intercepting +1ms\n  nock.recorder 3 http intercepted request ended +0ms\n  nock.recorder out: { scope: 'http://localhost:52485',\n  method: 'GET',\n  path: '/abc',\n  body: '',\n  status: 200,\n  response: 'example',\n  rawHeaders:\n   [ 'Date',\n     'Mon, 18 Mar 2019 20:03:52 GMT',\n     'Connection',\n     'close',\n     'Transfer-Encoding',\n     'chunked' ] } +2ms\n      ok 14 - expect truthy value\n    ok 15 - expect truthy value\nnock.recorder     ok 16 - should be equal\n3    ok 17 - should be equal\n restoring all the overridden http/https properties +593ms\n    ok 18 - should be equal\n    1..18\n    # failed 4 of 18 tests\nDebugger attached.\nWaiting for the debugger to disconnect...\nnot ok 1 - test 302 redirections # time=2904.541ms\n1..1\nfailed 1 test\ntime=2912.962ms\nProcess finished with exit code 1\n```\nTo use lines number, my line test('test 302 redirections', t => {, is line 10 .\nHard to read, but it seems got and axios doesn't record correctly the 302\n. To try, I put a breakpoint here : https://github.com/nock/nock/blob/beta/lib/recorder.js#L324\nAnd it's called once for got and axios, but twice for request . \nBy debugging, I found axios use  follow-redirects And in fact, it return the correct url with this line : https://github.com/follow-redirects/follow-redirects/blob/master/index.js#L339 . \nBut it happen after the end event : https://github.com/nock/nock/blob/beta/lib/recorder.js#L275 . . After some tests, It seems, we can record the two call here : https://github.com/nock/nock/blob/beta/lib/common.js#L97\nI change it to :\nmodule.request = function(options, callback) {\n      // debug('request options:', options);\n      return newRequest(\n        proto,\n        overriddenRequest.bind(module),\n        options,\n        (...args)=> {\n          console.log(\"callBack\");\n          return callback(...args)\n        }\n      )\n    }\nAnd put a breakpoint on the console.log . This is called two times . Each times with datas . \n\nSeems to be the same things with got .\nand the same with request, but callBack is not a function .\nMaybe use this, to emit an event ? To record after ?\nI'll let you do this, because I didn't know lot of things in this projet, and I fear to break other things xD .. ",
    "naugtur": "Can they not be equal? this looks like one of them should be something else...\n. ",
    "DavidTPate": "You're right, my copy pasting there failed me. I'll get that fixed.\n. @pgte I've fixed the docs now. Thanks for pointing that out.\n. ",
    "silentroach": "~/.gitignore is a place for that. ",
    "andrasq": "This could be tested once in a shared include file, not on every request.\nThe dependency could be avoided by writing it as if (parseInt(process.version.slice(1) >= 8). see above re testing the condition only once. even node v4 has a setHeader method on req, but v7 could still set directly.\nCould just reuse the is-node-v8 condition computed above.. "
}